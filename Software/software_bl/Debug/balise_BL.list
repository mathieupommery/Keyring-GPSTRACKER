
balise_BL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001fd00  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002c40  0801fe40  0801fe40  00020e40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08022a80  08022a80  00023a80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08022a88  08022a88  00023a88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08022a8c  08022a8c  00023a8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000318  20000008  08022a90  00024008  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_DRIVER_CONTEXT 00000035  20000320  08022da8  00024320  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  20000358  08022ddd  00024358  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002e40  20000370  08022dee  00024370  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200031b0  08022dee  000251b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00025a67  2**0
                  CONTENTS, READONLY
 12 MAPPING_TABLE 00000028  20030000  20030000  00026000  2**2
                  ALLOC
 13 MB_MEM1       000001bb  20030028  20030028  00026000  2**2
                  ALLOC
 14 .MB_MEM2      00000883  200301e4  08022dee  000251e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 15 .debug_info   0004d562  00000000  00000000  00025a97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 0000a76c  00000000  00000000  00072ff9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00003f50  00000000  00000000  0007d768  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00003077  00000000  00000000  000816b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  000393a8  00000000  00000000  0008472f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00055768  00000000  00000000  000bdad7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    0011eb1b  00000000  00000000  0011323f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000043  00000000  00000000  00231d5a  2**0
                  CONTENTS, READONLY
 23 .debug_frame  00012488  00000000  00000000  00231da0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 00000076  00000000  00000000  00244228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000370 	.word	0x20000370
 800015c:	00000000 	.word	0x00000000
 8000160:	0801fe28 	.word	0x0801fe28

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000374 	.word	0x20000374
 800017c:	0801fe28 	.word	0x0801fe28

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	@ 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_d2uiz>:
 8000b58:	004a      	lsls	r2, r1, #1
 8000b5a:	d211      	bcs.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d211      	bcs.n	8000b86 <__aeabi_d2uiz+0x2e>
 8000b62:	d50d      	bpl.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d40e      	bmi.n	8000b8c <__aeabi_d2uiz+0x34>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_d2uiz+0x3a>
 8000b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0000 	mov.w	r0, #0
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2f>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ba0:	bf24      	itt	cs
 8000ba2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ba6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000baa:	d90d      	bls.n	8000bc8 <__aeabi_d2f+0x30>
 8000bac:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bb0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bb4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bb8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bbc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bcc:	d121      	bne.n	8000c12 <__aeabi_d2f+0x7a>
 8000bce:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bd2:	bfbc      	itt	lt
 8000bd4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	4770      	bxlt	lr
 8000bda:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bde:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000be2:	f1c2 0218 	rsb	r2, r2, #24
 8000be6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bea:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bee:	fa20 f002 	lsr.w	r0, r0, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	f040 0001 	orrne.w	r0, r0, #1
 8000bf8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bfc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c04:	ea40 000c 	orr.w	r0, r0, ip
 8000c08:	fa23 f302 	lsr.w	r3, r3, r2
 8000c0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c10:	e7cc      	b.n	8000bac <__aeabi_d2f+0x14>
 8000c12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c16:	d107      	bne.n	8000c28 <__aeabi_d2f+0x90>
 8000c18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c1c:	bf1e      	ittt	ne
 8000c1e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c22:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c26:	4770      	bxne	lr
 8000c28:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c2c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop

08000c38 <__aeabi_uldivmod>:
 8000c38:	b953      	cbnz	r3, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3a:	b94a      	cbnz	r2, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3c:	2900      	cmp	r1, #0
 8000c3e:	bf08      	it	eq
 8000c40:	2800      	cmpeq	r0, #0
 8000c42:	bf1c      	itt	ne
 8000c44:	f04f 31ff 	movne.w	r1, #4294967295
 8000c48:	f04f 30ff 	movne.w	r0, #4294967295
 8000c4c:	f000 b9a0 	b.w	8000f90 <__aeabi_idiv0>
 8000c50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c58:	f000 f83c 	bl	8000cd4 <__udivmoddi4>
 8000c5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c64:	b004      	add	sp, #16
 8000c66:	4770      	bx	lr

08000c68 <__aeabi_d2lz>:
 8000c68:	b538      	push	{r3, r4, r5, lr}
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	4604      	mov	r4, r0
 8000c70:	460d      	mov	r5, r1
 8000c72:	f7ff ff0b 	bl	8000a8c <__aeabi_dcmplt>
 8000c76:	b928      	cbnz	r0, 8000c84 <__aeabi_d2lz+0x1c>
 8000c78:	4620      	mov	r0, r4
 8000c7a:	4629      	mov	r1, r5
 8000c7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c80:	f000 b80a 	b.w	8000c98 <__aeabi_d2ulz>
 8000c84:	4620      	mov	r0, r4
 8000c86:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000c8a:	f000 f805 	bl	8000c98 <__aeabi_d2ulz>
 8000c8e:	4240      	negs	r0, r0
 8000c90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c94:	bd38      	pop	{r3, r4, r5, pc}
 8000c96:	bf00      	nop

08000c98 <__aeabi_d2ulz>:
 8000c98:	b5d0      	push	{r4, r6, r7, lr}
 8000c9a:	4b0c      	ldr	r3, [pc, #48]	@ (8000ccc <__aeabi_d2ulz+0x34>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	4606      	mov	r6, r0
 8000ca0:	460f      	mov	r7, r1
 8000ca2:	f7ff fc81 	bl	80005a8 <__aeabi_dmul>
 8000ca6:	f7ff ff57 	bl	8000b58 <__aeabi_d2uiz>
 8000caa:	4604      	mov	r4, r0
 8000cac:	f7ff fc02 	bl	80004b4 <__aeabi_ui2d>
 8000cb0:	4b07      	ldr	r3, [pc, #28]	@ (8000cd0 <__aeabi_d2ulz+0x38>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	f7ff fc78 	bl	80005a8 <__aeabi_dmul>
 8000cb8:	4602      	mov	r2, r0
 8000cba:	460b      	mov	r3, r1
 8000cbc:	4630      	mov	r0, r6
 8000cbe:	4639      	mov	r1, r7
 8000cc0:	f7ff faba 	bl	8000238 <__aeabi_dsub>
 8000cc4:	f7ff ff48 	bl	8000b58 <__aeabi_d2uiz>
 8000cc8:	4621      	mov	r1, r4
 8000cca:	bdd0      	pop	{r4, r6, r7, pc}
 8000ccc:	3df00000 	.word	0x3df00000
 8000cd0:	41f00000 	.word	0x41f00000

08000cd4 <__udivmoddi4>:
 8000cd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cd8:	9d08      	ldr	r5, [sp, #32]
 8000cda:	460c      	mov	r4, r1
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d14e      	bne.n	8000d7e <__udivmoddi4+0xaa>
 8000ce0:	4694      	mov	ip, r2
 8000ce2:	458c      	cmp	ip, r1
 8000ce4:	4686      	mov	lr, r0
 8000ce6:	fab2 f282 	clz	r2, r2
 8000cea:	d962      	bls.n	8000db2 <__udivmoddi4+0xde>
 8000cec:	b14a      	cbz	r2, 8000d02 <__udivmoddi4+0x2e>
 8000cee:	f1c2 0320 	rsb	r3, r2, #32
 8000cf2:	4091      	lsls	r1, r2
 8000cf4:	fa20 f303 	lsr.w	r3, r0, r3
 8000cf8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cfc:	4319      	orrs	r1, r3
 8000cfe:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d02:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d06:	fa1f f68c 	uxth.w	r6, ip
 8000d0a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d0e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d12:	fb07 1114 	mls	r1, r7, r4, r1
 8000d16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d1a:	fb04 f106 	mul.w	r1, r4, r6
 8000d1e:	4299      	cmp	r1, r3
 8000d20:	d90a      	bls.n	8000d38 <__udivmoddi4+0x64>
 8000d22:	eb1c 0303 	adds.w	r3, ip, r3
 8000d26:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d2a:	f080 8112 	bcs.w	8000f52 <__udivmoddi4+0x27e>
 8000d2e:	4299      	cmp	r1, r3
 8000d30:	f240 810f 	bls.w	8000f52 <__udivmoddi4+0x27e>
 8000d34:	3c02      	subs	r4, #2
 8000d36:	4463      	add	r3, ip
 8000d38:	1a59      	subs	r1, r3, r1
 8000d3a:	fa1f f38e 	uxth.w	r3, lr
 8000d3e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d42:	fb07 1110 	mls	r1, r7, r0, r1
 8000d46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d4a:	fb00 f606 	mul.w	r6, r0, r6
 8000d4e:	429e      	cmp	r6, r3
 8000d50:	d90a      	bls.n	8000d68 <__udivmoddi4+0x94>
 8000d52:	eb1c 0303 	adds.w	r3, ip, r3
 8000d56:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d5a:	f080 80fc 	bcs.w	8000f56 <__udivmoddi4+0x282>
 8000d5e:	429e      	cmp	r6, r3
 8000d60:	f240 80f9 	bls.w	8000f56 <__udivmoddi4+0x282>
 8000d64:	4463      	add	r3, ip
 8000d66:	3802      	subs	r0, #2
 8000d68:	1b9b      	subs	r3, r3, r6
 8000d6a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d6e:	2100      	movs	r1, #0
 8000d70:	b11d      	cbz	r5, 8000d7a <__udivmoddi4+0xa6>
 8000d72:	40d3      	lsrs	r3, r2
 8000d74:	2200      	movs	r2, #0
 8000d76:	e9c5 3200 	strd	r3, r2, [r5]
 8000d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d905      	bls.n	8000d8e <__udivmoddi4+0xba>
 8000d82:	b10d      	cbz	r5, 8000d88 <__udivmoddi4+0xb4>
 8000d84:	e9c5 0100 	strd	r0, r1, [r5]
 8000d88:	2100      	movs	r1, #0
 8000d8a:	4608      	mov	r0, r1
 8000d8c:	e7f5      	b.n	8000d7a <__udivmoddi4+0xa6>
 8000d8e:	fab3 f183 	clz	r1, r3
 8000d92:	2900      	cmp	r1, #0
 8000d94:	d146      	bne.n	8000e24 <__udivmoddi4+0x150>
 8000d96:	42a3      	cmp	r3, r4
 8000d98:	d302      	bcc.n	8000da0 <__udivmoddi4+0xcc>
 8000d9a:	4290      	cmp	r0, r2
 8000d9c:	f0c0 80f0 	bcc.w	8000f80 <__udivmoddi4+0x2ac>
 8000da0:	1a86      	subs	r6, r0, r2
 8000da2:	eb64 0303 	sbc.w	r3, r4, r3
 8000da6:	2001      	movs	r0, #1
 8000da8:	2d00      	cmp	r5, #0
 8000daa:	d0e6      	beq.n	8000d7a <__udivmoddi4+0xa6>
 8000dac:	e9c5 6300 	strd	r6, r3, [r5]
 8000db0:	e7e3      	b.n	8000d7a <__udivmoddi4+0xa6>
 8000db2:	2a00      	cmp	r2, #0
 8000db4:	f040 8090 	bne.w	8000ed8 <__udivmoddi4+0x204>
 8000db8:	eba1 040c 	sub.w	r4, r1, ip
 8000dbc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000dc0:	fa1f f78c 	uxth.w	r7, ip
 8000dc4:	2101      	movs	r1, #1
 8000dc6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dca:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000dce:	fb08 4416 	mls	r4, r8, r6, r4
 8000dd2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dd6:	fb07 f006 	mul.w	r0, r7, r6
 8000dda:	4298      	cmp	r0, r3
 8000ddc:	d908      	bls.n	8000df0 <__udivmoddi4+0x11c>
 8000dde:	eb1c 0303 	adds.w	r3, ip, r3
 8000de2:	f106 34ff 	add.w	r4, r6, #4294967295
 8000de6:	d202      	bcs.n	8000dee <__udivmoddi4+0x11a>
 8000de8:	4298      	cmp	r0, r3
 8000dea:	f200 80cd 	bhi.w	8000f88 <__udivmoddi4+0x2b4>
 8000dee:	4626      	mov	r6, r4
 8000df0:	1a1c      	subs	r4, r3, r0
 8000df2:	fa1f f38e 	uxth.w	r3, lr
 8000df6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dfa:	fb08 4410 	mls	r4, r8, r0, r4
 8000dfe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e02:	fb00 f707 	mul.w	r7, r0, r7
 8000e06:	429f      	cmp	r7, r3
 8000e08:	d908      	bls.n	8000e1c <__udivmoddi4+0x148>
 8000e0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e0e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e12:	d202      	bcs.n	8000e1a <__udivmoddi4+0x146>
 8000e14:	429f      	cmp	r7, r3
 8000e16:	f200 80b0 	bhi.w	8000f7a <__udivmoddi4+0x2a6>
 8000e1a:	4620      	mov	r0, r4
 8000e1c:	1bdb      	subs	r3, r3, r7
 8000e1e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e22:	e7a5      	b.n	8000d70 <__udivmoddi4+0x9c>
 8000e24:	f1c1 0620 	rsb	r6, r1, #32
 8000e28:	408b      	lsls	r3, r1
 8000e2a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e2e:	431f      	orrs	r7, r3
 8000e30:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e34:	fa04 f301 	lsl.w	r3, r4, r1
 8000e38:	ea43 030c 	orr.w	r3, r3, ip
 8000e3c:	40f4      	lsrs	r4, r6
 8000e3e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e42:	0c38      	lsrs	r0, r7, #16
 8000e44:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e48:	fbb4 fef0 	udiv	lr, r4, r0
 8000e4c:	fa1f fc87 	uxth.w	ip, r7
 8000e50:	fb00 441e 	mls	r4, r0, lr, r4
 8000e54:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e58:	fb0e f90c 	mul.w	r9, lr, ip
 8000e5c:	45a1      	cmp	r9, r4
 8000e5e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e62:	d90a      	bls.n	8000e7a <__udivmoddi4+0x1a6>
 8000e64:	193c      	adds	r4, r7, r4
 8000e66:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e6a:	f080 8084 	bcs.w	8000f76 <__udivmoddi4+0x2a2>
 8000e6e:	45a1      	cmp	r9, r4
 8000e70:	f240 8081 	bls.w	8000f76 <__udivmoddi4+0x2a2>
 8000e74:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e78:	443c      	add	r4, r7
 8000e7a:	eba4 0409 	sub.w	r4, r4, r9
 8000e7e:	fa1f f983 	uxth.w	r9, r3
 8000e82:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e86:	fb00 4413 	mls	r4, r0, r3, r4
 8000e8a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e8e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e92:	45a4      	cmp	ip, r4
 8000e94:	d907      	bls.n	8000ea6 <__udivmoddi4+0x1d2>
 8000e96:	193c      	adds	r4, r7, r4
 8000e98:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e9c:	d267      	bcs.n	8000f6e <__udivmoddi4+0x29a>
 8000e9e:	45a4      	cmp	ip, r4
 8000ea0:	d965      	bls.n	8000f6e <__udivmoddi4+0x29a>
 8000ea2:	3b02      	subs	r3, #2
 8000ea4:	443c      	add	r4, r7
 8000ea6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000eaa:	fba0 9302 	umull	r9, r3, r0, r2
 8000eae:	eba4 040c 	sub.w	r4, r4, ip
 8000eb2:	429c      	cmp	r4, r3
 8000eb4:	46ce      	mov	lr, r9
 8000eb6:	469c      	mov	ip, r3
 8000eb8:	d351      	bcc.n	8000f5e <__udivmoddi4+0x28a>
 8000eba:	d04e      	beq.n	8000f5a <__udivmoddi4+0x286>
 8000ebc:	b155      	cbz	r5, 8000ed4 <__udivmoddi4+0x200>
 8000ebe:	ebb8 030e 	subs.w	r3, r8, lr
 8000ec2:	eb64 040c 	sbc.w	r4, r4, ip
 8000ec6:	fa04 f606 	lsl.w	r6, r4, r6
 8000eca:	40cb      	lsrs	r3, r1
 8000ecc:	431e      	orrs	r6, r3
 8000ece:	40cc      	lsrs	r4, r1
 8000ed0:	e9c5 6400 	strd	r6, r4, [r5]
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	e750      	b.n	8000d7a <__udivmoddi4+0xa6>
 8000ed8:	f1c2 0320 	rsb	r3, r2, #32
 8000edc:	fa20 f103 	lsr.w	r1, r0, r3
 8000ee0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ee4:	fa24 f303 	lsr.w	r3, r4, r3
 8000ee8:	4094      	lsls	r4, r2
 8000eea:	430c      	orrs	r4, r1
 8000eec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ef0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ef4:	fa1f f78c 	uxth.w	r7, ip
 8000ef8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000efc:	fb08 3110 	mls	r1, r8, r0, r3
 8000f00:	0c23      	lsrs	r3, r4, #16
 8000f02:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f06:	fb00 f107 	mul.w	r1, r0, r7
 8000f0a:	4299      	cmp	r1, r3
 8000f0c:	d908      	bls.n	8000f20 <__udivmoddi4+0x24c>
 8000f0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f12:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f16:	d22c      	bcs.n	8000f72 <__udivmoddi4+0x29e>
 8000f18:	4299      	cmp	r1, r3
 8000f1a:	d92a      	bls.n	8000f72 <__udivmoddi4+0x29e>
 8000f1c:	3802      	subs	r0, #2
 8000f1e:	4463      	add	r3, ip
 8000f20:	1a5b      	subs	r3, r3, r1
 8000f22:	b2a4      	uxth	r4, r4
 8000f24:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f28:	fb08 3311 	mls	r3, r8, r1, r3
 8000f2c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f30:	fb01 f307 	mul.w	r3, r1, r7
 8000f34:	42a3      	cmp	r3, r4
 8000f36:	d908      	bls.n	8000f4a <__udivmoddi4+0x276>
 8000f38:	eb1c 0404 	adds.w	r4, ip, r4
 8000f3c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f40:	d213      	bcs.n	8000f6a <__udivmoddi4+0x296>
 8000f42:	42a3      	cmp	r3, r4
 8000f44:	d911      	bls.n	8000f6a <__udivmoddi4+0x296>
 8000f46:	3902      	subs	r1, #2
 8000f48:	4464      	add	r4, ip
 8000f4a:	1ae4      	subs	r4, r4, r3
 8000f4c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f50:	e739      	b.n	8000dc6 <__udivmoddi4+0xf2>
 8000f52:	4604      	mov	r4, r0
 8000f54:	e6f0      	b.n	8000d38 <__udivmoddi4+0x64>
 8000f56:	4608      	mov	r0, r1
 8000f58:	e706      	b.n	8000d68 <__udivmoddi4+0x94>
 8000f5a:	45c8      	cmp	r8, r9
 8000f5c:	d2ae      	bcs.n	8000ebc <__udivmoddi4+0x1e8>
 8000f5e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f62:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f66:	3801      	subs	r0, #1
 8000f68:	e7a8      	b.n	8000ebc <__udivmoddi4+0x1e8>
 8000f6a:	4631      	mov	r1, r6
 8000f6c:	e7ed      	b.n	8000f4a <__udivmoddi4+0x276>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	e799      	b.n	8000ea6 <__udivmoddi4+0x1d2>
 8000f72:	4630      	mov	r0, r6
 8000f74:	e7d4      	b.n	8000f20 <__udivmoddi4+0x24c>
 8000f76:	46d6      	mov	lr, sl
 8000f78:	e77f      	b.n	8000e7a <__udivmoddi4+0x1a6>
 8000f7a:	4463      	add	r3, ip
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	e74d      	b.n	8000e1c <__udivmoddi4+0x148>
 8000f80:	4606      	mov	r6, r0
 8000f82:	4623      	mov	r3, r4
 8000f84:	4608      	mov	r0, r1
 8000f86:	e70f      	b.n	8000da8 <__udivmoddi4+0xd4>
 8000f88:	3e02      	subs	r6, #2
 8000f8a:	4463      	add	r3, ip
 8000f8c:	e730      	b.n	8000df0 <__udivmoddi4+0x11c>
 8000f8e:	bf00      	nop

08000f90 <__aeabi_idiv0>:
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop

08000f94 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b085      	sub	sp, #20
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000f9c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000fa0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000fa2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000fac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000fb0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000fb8:	68fb      	ldr	r3, [r7, #12]
}
 8000fba:	bf00      	nop
 8000fbc:	3714      	adds	r7, #20
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
	...

08000fc8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b086      	sub	sp, #24
 8000fcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000fce:	463b      	mov	r3, r7
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	601a      	str	r2, [r3, #0]
 8000fd4:	605a      	str	r2, [r3, #4]
 8000fd6:	609a      	str	r2, [r3, #8]
 8000fd8:	60da      	str	r2, [r3, #12]
 8000fda:	611a      	str	r2, [r3, #16]
 8000fdc:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000fde:	4b38      	ldr	r3, [pc, #224]	@ (80010c0 <MX_ADC1_Init+0xf8>)
 8000fe0:	4a38      	ldr	r2, [pc, #224]	@ (80010c4 <MX_ADC1_Init+0xfc>)
 8000fe2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000fe4:	4b36      	ldr	r3, [pc, #216]	@ (80010c0 <MX_ADC1_Init+0xf8>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000fea:	4b35      	ldr	r3, [pc, #212]	@ (80010c0 <MX_ADC1_Init+0xf8>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ff0:	4b33      	ldr	r3, [pc, #204]	@ (80010c0 <MX_ADC1_Init+0xf8>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000ff6:	4b32      	ldr	r3, [pc, #200]	@ (80010c0 <MX_ADC1_Init+0xf8>)
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ffc:	4b30      	ldr	r3, [pc, #192]	@ (80010c0 <MX_ADC1_Init+0xf8>)
 8000ffe:	2204      	movs	r2, #4
 8001000:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001002:	4b2f      	ldr	r3, [pc, #188]	@ (80010c0 <MX_ADC1_Init+0xf8>)
 8001004:	2200      	movs	r2, #0
 8001006:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001008:	4b2d      	ldr	r3, [pc, #180]	@ (80010c0 <MX_ADC1_Init+0xf8>)
 800100a:	2201      	movs	r2, #1
 800100c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 3;
 800100e:	4b2c      	ldr	r3, [pc, #176]	@ (80010c0 <MX_ADC1_Init+0xf8>)
 8001010:	2203      	movs	r2, #3
 8001012:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001014:	4b2a      	ldr	r3, [pc, #168]	@ (80010c0 <MX_ADC1_Init+0xf8>)
 8001016:	2200      	movs	r2, #0
 8001018:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T2_TRGO;
 800101c:	4b28      	ldr	r3, [pc, #160]	@ (80010c0 <MX_ADC1_Init+0xf8>)
 800101e:	f44f 62d8 	mov.w	r2, #1728	@ 0x6c0
 8001022:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001024:	4b26      	ldr	r3, [pc, #152]	@ (80010c0 <MX_ADC1_Init+0xf8>)
 8001026:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800102a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800102c:	4b24      	ldr	r3, [pc, #144]	@ (80010c0 <MX_ADC1_Init+0xf8>)
 800102e:	2200      	movs	r2, #0
 8001030:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001034:	4b22      	ldr	r3, [pc, #136]	@ (80010c0 <MX_ADC1_Init+0xf8>)
 8001036:	2200      	movs	r2, #0
 8001038:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800103a:	4b21      	ldr	r3, [pc, #132]	@ (80010c0 <MX_ADC1_Init+0xf8>)
 800103c:	2200      	movs	r2, #0
 800103e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001042:	481f      	ldr	r0, [pc, #124]	@ (80010c0 <MX_ADC1_Init+0xf8>)
 8001044:	f006 fc5c 	bl	8007900 <HAL_ADC_Init>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 800104e:	f001 ffb1 	bl	8002fb4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001052:	4b1d      	ldr	r3, [pc, #116]	@ (80010c8 <MX_ADC1_Init+0x100>)
 8001054:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001056:	2306      	movs	r3, #6
 8001058:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 800105a:	2307      	movs	r3, #7
 800105c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800105e:	237f      	movs	r3, #127	@ 0x7f
 8001060:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001062:	2304      	movs	r3, #4
 8001064:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001066:	2300      	movs	r3, #0
 8001068:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800106a:	463b      	mov	r3, r7
 800106c:	4619      	mov	r1, r3
 800106e:	4814      	ldr	r0, [pc, #80]	@ (80010c0 <MX_ADC1_Init+0xf8>)
 8001070:	f006 fe2a 	bl	8007cc8 <HAL_ADC_ConfigChannel>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 800107a:	f001 ff9b 	bl	8002fb4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800107e:	4b13      	ldr	r3, [pc, #76]	@ (80010cc <MX_ADC1_Init+0x104>)
 8001080:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001082:	230c      	movs	r3, #12
 8001084:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001086:	463b      	mov	r3, r7
 8001088:	4619      	mov	r1, r3
 800108a:	480d      	ldr	r0, [pc, #52]	@ (80010c0 <MX_ADC1_Init+0xf8>)
 800108c:	f006 fe1c 	bl	8007cc8 <HAL_ADC_ConfigChannel>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8001096:	f001 ff8d 	bl	8002fb4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800109a:	4b0d      	ldr	r3, [pc, #52]	@ (80010d0 <MX_ADC1_Init+0x108>)
 800109c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800109e:	2312      	movs	r3, #18
 80010a0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010a2:	463b      	mov	r3, r7
 80010a4:	4619      	mov	r1, r3
 80010a6:	4806      	ldr	r0, [pc, #24]	@ (80010c0 <MX_ADC1_Init+0xf8>)
 80010a8:	f006 fe0e 	bl	8007cc8 <HAL_ADC_ConfigChannel>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 80010b2:	f001 ff7f 	bl	8002fb4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010b6:	bf00      	nop
 80010b8:	3718      	adds	r7, #24
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	2000038c 	.word	0x2000038c
 80010c4:	50040000 	.word	0x50040000
 80010c8:	80000001 	.word	0x80000001
 80010cc:	c7520000 	.word	0xc7520000
 80010d0:	25b00200 	.word	0x25b00200

080010d4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b088      	sub	sp, #32
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010dc:	f107 030c 	add.w	r3, r7, #12
 80010e0:	2200      	movs	r2, #0
 80010e2:	601a      	str	r2, [r3, #0]
 80010e4:	605a      	str	r2, [r3, #4]
 80010e6:	609a      	str	r2, [r3, #8]
 80010e8:	60da      	str	r2, [r3, #12]
 80010ea:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a22      	ldr	r2, [pc, #136]	@ (800117c <HAL_ADC_MspInit+0xa8>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d13e      	bne.n	8001174 <HAL_ADC_MspInit+0xa0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80010f6:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80010fa:	f7ff ff4b 	bl	8000f94 <LL_AHB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010fe:	2001      	movs	r0, #1
 8001100:	f7ff ff48 	bl	8000f94 <LL_AHB2_GRP1_EnableClock>
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001104:	2310      	movs	r3, #16
 8001106:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001108:	2303      	movs	r3, #3
 800110a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110c:	2300      	movs	r3, #0
 800110e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001110:	f107 030c 	add.w	r3, r7, #12
 8001114:	4619      	mov	r1, r3
 8001116:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800111a:	f007 ff81 	bl	8009020 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800111e:	4b18      	ldr	r3, [pc, #96]	@ (8001180 <HAL_ADC_MspInit+0xac>)
 8001120:	4a18      	ldr	r2, [pc, #96]	@ (8001184 <HAL_ADC_MspInit+0xb0>)
 8001122:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001124:	4b16      	ldr	r3, [pc, #88]	@ (8001180 <HAL_ADC_MspInit+0xac>)
 8001126:	2205      	movs	r2, #5
 8001128:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800112a:	4b15      	ldr	r3, [pc, #84]	@ (8001180 <HAL_ADC_MspInit+0xac>)
 800112c:	2200      	movs	r2, #0
 800112e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001130:	4b13      	ldr	r3, [pc, #76]	@ (8001180 <HAL_ADC_MspInit+0xac>)
 8001132:	2200      	movs	r2, #0
 8001134:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001136:	4b12      	ldr	r3, [pc, #72]	@ (8001180 <HAL_ADC_MspInit+0xac>)
 8001138:	2280      	movs	r2, #128	@ 0x80
 800113a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800113c:	4b10      	ldr	r3, [pc, #64]	@ (8001180 <HAL_ADC_MspInit+0xac>)
 800113e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001142:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001144:	4b0e      	ldr	r3, [pc, #56]	@ (8001180 <HAL_ADC_MspInit+0xac>)
 8001146:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800114a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800114c:	4b0c      	ldr	r3, [pc, #48]	@ (8001180 <HAL_ADC_MspInit+0xac>)
 800114e:	2220      	movs	r2, #32
 8001150:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001152:	4b0b      	ldr	r3, [pc, #44]	@ (8001180 <HAL_ADC_MspInit+0xac>)
 8001154:	2200      	movs	r2, #0
 8001156:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001158:	4809      	ldr	r0, [pc, #36]	@ (8001180 <HAL_ADC_MspInit+0xac>)
 800115a:	f007 fc23 	bl	80089a4 <HAL_DMA_Init>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <HAL_ADC_MspInit+0x94>
    {
      Error_Handler();
 8001164:	f001 ff26 	bl	8002fb4 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	4a05      	ldr	r2, [pc, #20]	@ (8001180 <HAL_ADC_MspInit+0xac>)
 800116c:	64da      	str	r2, [r3, #76]	@ 0x4c
 800116e:	4a04      	ldr	r2, [pc, #16]	@ (8001180 <HAL_ADC_MspInit+0xac>)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001174:	bf00      	nop
 8001176:	3720      	adds	r7, #32
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	50040000 	.word	0x50040000
 8001180:	200003f0 	.word	0x200003f0
 8001184:	40020008 	.word	0x40020008

08001188 <HAL_ADC_ConvCpltCallback>:
  /* USER CODE END ADC1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8001188:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800118c:	b082      	sub	sp, #8
 800118e:	af00      	add	r7, sp, #0
 8001190:	6078      	str	r0, [r7, #4]

	if(hadc->Instance==ADC1){
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4a54      	ldr	r2, [pc, #336]	@ (80012e8 <HAL_ADC_ConvCpltCallback+0x160>)
 8001198:	4293      	cmp	r3, r2
 800119a:	f040 8091 	bne.w	80012c0 <HAL_ADC_ConvCpltCallback+0x138>
		vrefint=(float) ((4095.0*1.212)/rawdata[0]);
 800119e:	4b53      	ldr	r3, [pc, #332]	@ (80012ec <HAL_ADC_ConvCpltCallback+0x164>)
 80011a0:	881b      	ldrh	r3, [r3, #0]
 80011a2:	4618      	mov	r0, r3
 80011a4:	f7ff f996 	bl	80004d4 <__aeabi_i2d>
 80011a8:	4602      	mov	r2, r0
 80011aa:	460b      	mov	r3, r1
 80011ac:	a14a      	add	r1, pc, #296	@ (adr r1, 80012d8 <HAL_ADC_ConvCpltCallback+0x150>)
 80011ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80011b2:	f7ff fb23 	bl	80007fc <__aeabi_ddiv>
 80011b6:	4602      	mov	r2, r0
 80011b8:	460b      	mov	r3, r1
 80011ba:	4610      	mov	r0, r2
 80011bc:	4619      	mov	r1, r3
 80011be:	f7ff fceb 	bl	8000b98 <__aeabi_d2f>
 80011c2:	4603      	mov	r3, r0
 80011c4:	4a4a      	ldr	r2, [pc, #296]	@ (80012f0 <HAL_ADC_ConvCpltCallback+0x168>)
 80011c6:	6013      	str	r3, [r2, #0]
//		vtemp=(float) ((vrefint*rawdata[1])/4095.0);
		temp=(float) (((100.0)/(tscal2-tscal1))*(rawdata[1]*(vrefint/3.0)-tscal1))+30.0;
 80011c8:	4b4a      	ldr	r3, [pc, #296]	@ (80012f4 <HAL_ADC_ConvCpltCallback+0x16c>)
 80011ca:	ed93 7a00 	vldr	s14, [r3]
 80011ce:	4b4a      	ldr	r3, [pc, #296]	@ (80012f8 <HAL_ADC_ConvCpltCallback+0x170>)
 80011d0:	edd3 7a00 	vldr	s15, [r3]
 80011d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011d8:	ee17 0a90 	vmov	r0, s15
 80011dc:	f7ff f98c 	bl	80004f8 <__aeabi_f2d>
 80011e0:	4602      	mov	r2, r0
 80011e2:	460b      	mov	r3, r1
 80011e4:	f04f 0000 	mov.w	r0, #0
 80011e8:	4944      	ldr	r1, [pc, #272]	@ (80012fc <HAL_ADC_ConvCpltCallback+0x174>)
 80011ea:	f7ff fb07 	bl	80007fc <__aeabi_ddiv>
 80011ee:	4602      	mov	r2, r0
 80011f0:	460b      	mov	r3, r1
 80011f2:	4690      	mov	r8, r2
 80011f4:	4699      	mov	r9, r3
 80011f6:	4b3d      	ldr	r3, [pc, #244]	@ (80012ec <HAL_ADC_ConvCpltCallback+0x164>)
 80011f8:	885b      	ldrh	r3, [r3, #2]
 80011fa:	4618      	mov	r0, r3
 80011fc:	f7ff f96a 	bl	80004d4 <__aeabi_i2d>
 8001200:	4604      	mov	r4, r0
 8001202:	460d      	mov	r5, r1
 8001204:	4b3a      	ldr	r3, [pc, #232]	@ (80012f0 <HAL_ADC_ConvCpltCallback+0x168>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4618      	mov	r0, r3
 800120a:	f7ff f975 	bl	80004f8 <__aeabi_f2d>
 800120e:	f04f 0200 	mov.w	r2, #0
 8001212:	4b3b      	ldr	r3, [pc, #236]	@ (8001300 <HAL_ADC_ConvCpltCallback+0x178>)
 8001214:	f7ff faf2 	bl	80007fc <__aeabi_ddiv>
 8001218:	4602      	mov	r2, r0
 800121a:	460b      	mov	r3, r1
 800121c:	4620      	mov	r0, r4
 800121e:	4629      	mov	r1, r5
 8001220:	f7ff f9c2 	bl	80005a8 <__aeabi_dmul>
 8001224:	4602      	mov	r2, r0
 8001226:	460b      	mov	r3, r1
 8001228:	4614      	mov	r4, r2
 800122a:	461d      	mov	r5, r3
 800122c:	4b32      	ldr	r3, [pc, #200]	@ (80012f8 <HAL_ADC_ConvCpltCallback+0x170>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4618      	mov	r0, r3
 8001232:	f7ff f961 	bl	80004f8 <__aeabi_f2d>
 8001236:	4602      	mov	r2, r0
 8001238:	460b      	mov	r3, r1
 800123a:	4620      	mov	r0, r4
 800123c:	4629      	mov	r1, r5
 800123e:	f7fe fffb 	bl	8000238 <__aeabi_dsub>
 8001242:	4602      	mov	r2, r0
 8001244:	460b      	mov	r3, r1
 8001246:	4640      	mov	r0, r8
 8001248:	4649      	mov	r1, r9
 800124a:	f7ff f9ad 	bl	80005a8 <__aeabi_dmul>
 800124e:	4602      	mov	r2, r0
 8001250:	460b      	mov	r3, r1
 8001252:	4610      	mov	r0, r2
 8001254:	4619      	mov	r1, r3
 8001256:	f7ff fc9f 	bl	8000b98 <__aeabi_d2f>
 800125a:	ee07 0a10 	vmov	s14, r0
 800125e:	eef3 7a0e 	vmov.f32	s15, #62	@ 0x41f00000  30.0
 8001262:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001266:	4b27      	ldr	r3, [pc, #156]	@ (8001304 <HAL_ADC_ConvCpltCallback+0x17c>)
 8001268:	edc3 7a00 	vstr	s15, [r3]
		vbat=(float) 2*(rawdata[2]/4095.0)*vrefint;
 800126c:	4b1f      	ldr	r3, [pc, #124]	@ (80012ec <HAL_ADC_ConvCpltCallback+0x164>)
 800126e:	889b      	ldrh	r3, [r3, #4]
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff f92f 	bl	80004d4 <__aeabi_i2d>
 8001276:	a31a      	add	r3, pc, #104	@ (adr r3, 80012e0 <HAL_ADC_ConvCpltCallback+0x158>)
 8001278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800127c:	f7ff fabe 	bl	80007fc <__aeabi_ddiv>
 8001280:	4602      	mov	r2, r0
 8001282:	460b      	mov	r3, r1
 8001284:	4610      	mov	r0, r2
 8001286:	4619      	mov	r1, r3
 8001288:	4602      	mov	r2, r0
 800128a:	460b      	mov	r3, r1
 800128c:	f7fe ffd6 	bl	800023c <__adddf3>
 8001290:	4602      	mov	r2, r0
 8001292:	460b      	mov	r3, r1
 8001294:	4614      	mov	r4, r2
 8001296:	461d      	mov	r5, r3
 8001298:	4b15      	ldr	r3, [pc, #84]	@ (80012f0 <HAL_ADC_ConvCpltCallback+0x168>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4618      	mov	r0, r3
 800129e:	f7ff f92b 	bl	80004f8 <__aeabi_f2d>
 80012a2:	4602      	mov	r2, r0
 80012a4:	460b      	mov	r3, r1
 80012a6:	4620      	mov	r0, r4
 80012a8:	4629      	mov	r1, r5
 80012aa:	f7ff f97d 	bl	80005a8 <__aeabi_dmul>
 80012ae:	4602      	mov	r2, r0
 80012b0:	460b      	mov	r3, r1
 80012b2:	4610      	mov	r0, r2
 80012b4:	4619      	mov	r1, r3
 80012b6:	f7ff fc6f 	bl	8000b98 <__aeabi_d2f>
 80012ba:	4603      	mov	r3, r0
 80012bc:	4a12      	ldr	r2, [pc, #72]	@ (8001308 <HAL_ADC_ConvCpltCallback+0x180>)
 80012be:	6013      	str	r3, [r2, #0]

	}
	HAL_ADC_Start_DMA(&hadc1,(uint32_t*)rawdata, 3);
 80012c0:	2203      	movs	r2, #3
 80012c2:	490a      	ldr	r1, [pc, #40]	@ (80012ec <HAL_ADC_ConvCpltCallback+0x164>)
 80012c4:	4811      	ldr	r0, [pc, #68]	@ (800130c <HAL_ADC_ConvCpltCallback+0x184>)
 80012c6:	f006 fc67 	bl	8007b98 <HAL_ADC_Start_DMA>



}
 80012ca:	bf00      	nop
 80012cc:	3708      	adds	r7, #8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80012d4:	f3af 8000 	nop.w
 80012d8:	d70a3d70 	.word	0xd70a3d70
 80012dc:	40b36323 	.word	0x40b36323
 80012e0:	00000000 	.word	0x00000000
 80012e4:	40affe00 	.word	0x40affe00
 80012e8:	50040000 	.word	0x50040000
 80012ec:	200008a8 	.word	0x200008a8
 80012f0:	200008b4 	.word	0x200008b4
 80012f4:	20000008 	.word	0x20000008
 80012f8:	2000000c 	.word	0x2000000c
 80012fc:	40590000 	.word	0x40590000
 8001300:	40080000 	.word	0x40080000
 8001304:	200008b0 	.word	0x200008b0
 8001308:	200008b8 	.word	0x200008b8
 800130c:	2000038c 	.word	0x2000038c

08001310 <APPD_EnableCPU2>:
/* USER CODE END APPD_Init */
  return;
}

void APPD_EnableCPU2( void )
{
 8001310:	b5b0      	push	{r4, r5, r7, lr}
 8001312:	b088      	sub	sp, #32
 8001314:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 8001316:	4b0b      	ldr	r3, [pc, #44]	@ (8001344 <APPD_EnableCPU2+0x34>)
 8001318:	1d3c      	adds	r4, r7, #4
 800131a:	461d      	mov	r5, r3
 800131c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800131e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001320:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001324:	c403      	stmia	r4!, {r0, r1}
 8001326:	8022      	strh	r2, [r4, #0]
 8001328:	3402      	adds	r4, #2
 800132a:	0c13      	lsrs	r3, r2, #16
 800132c:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 800132e:	f015 fcdf 	bl	8016cf0 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 8001332:	1d3b      	adds	r3, r7, #4
 8001334:	4618      	mov	r0, r3
 8001336:	f014 ff70 	bl	801621a <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 800133a:	bf00      	nop
}
 800133c:	3720      	adds	r7, #32
 800133e:	46bd      	mov	sp, r7
 8001340:	bdb0      	pop	{r4, r5, r7, pc}
 8001342:	bf00      	nop
 8001344:	0801fe40 	.word	0x0801fe40

08001348 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8001348:	b480      	push	{r7}
 800134a:	b083      	sub	sp, #12
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8001350:	4b07      	ldr	r3, [pc, #28]	@ (8001370 <LL_C2_PWR_SetPowerMode+0x28>)
 8001352:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001356:	f023 0207 	bic.w	r2, r3, #7
 800135a:	4905      	ldr	r1, [pc, #20]	@ (8001370 <LL_C2_PWR_SetPowerMode+0x28>)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	4313      	orrs	r3, r2
 8001360:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8001364:	bf00      	nop
 8001366:	370c      	adds	r7, #12
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr
 8001370:	58000400 	.word	0x58000400

08001374 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8001374:	b480      	push	{r7}
 8001376:	b083      	sub	sp, #12
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 800137c:	4b06      	ldr	r3, [pc, #24]	@ (8001398 <LL_EXTI_EnableIT_32_63+0x24>)
 800137e:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8001382:	4905      	ldr	r1, [pc, #20]	@ (8001398 <LL_EXTI_EnableIT_32_63+0x24>)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	4313      	orrs	r3, r2
 8001388:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 800138c:	bf00      	nop
 800138e:	370c      	adds	r7, #12
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr
 8001398:	58000800 	.word	0x58000800

0800139c <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 80013a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80013a8:	4a0a      	ldr	r2, [pc, #40]	@ (80013d4 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 80013aa:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 80013ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80013b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80013b6:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	021b      	lsls	r3, r3, #8
 80013be:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80013c2:	4313      	orrs	r3, r2
 80013c4:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
}
 80013c8:	bf00      	nop
 80013ca:	370c      	adds	r7, #12
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr
 80013d4:	cafecafe 	.word	0xcafecafe

080013d8 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 80013e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80013e4:	689b      	ldr	r3, [r3, #8]
 80013e6:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 80013ea:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	4313      	orrs	r3, r2
 80013f2:	608b      	str	r3, [r1, #8]
}
 80013f4:	bf00      	nop
 80013f6:	370c      	adds	r7, #12
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr

08001400 <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 8001404:	4b04      	ldr	r3, [pc, #16]	@ (8001418 <LL_DBGMCU_GetDeviceID+0x18>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 800140c:	4618      	mov	r0, r3
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop
 8001418:	e0042000 	.word	0xe0042000

0800141c <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 8001420:	4b04      	ldr	r3, [pc, #16]	@ (8001434 <LL_DBGMCU_GetRevisionID+0x18>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	0c1b      	lsrs	r3, r3, #16
 8001426:	b29b      	uxth	r3, r3
}
 8001428:	4618      	mov	r0, r3
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr
 8001432:	bf00      	nop
 8001434:	e0042000 	.word	0xe0042000

08001438 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800143c:	4b05      	ldr	r3, [pc, #20]	@ (8001454 <LL_LPM_EnableSleep+0x1c>)
 800143e:	691b      	ldr	r3, [r3, #16]
 8001440:	4a04      	ldr	r2, [pc, #16]	@ (8001454 <LL_LPM_EnableSleep+0x1c>)
 8001442:	f023 0304 	bic.w	r3, r3, #4
 8001446:	6113      	str	r3, [r2, #16]
}
 8001448:	bf00      	nop
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop
 8001454:	e000ed00 	.word	0xe000ed00

08001458 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8001458:	b480      	push	{r7}
 800145a:	b083      	sub	sp, #12
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	22ff      	movs	r2, #255	@ 0xff
 8001464:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8001466:	bf00      	nop
 8001468:	370c      	adds	r7, #12
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr

08001472 <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 8001472:	b480      	push	{r7}
 8001474:	b083      	sub	sp, #12
 8001476:	af00      	add	r7, sp, #0
 8001478:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	22ca      	movs	r2, #202	@ 0xca
 800147e:	625a      	str	r2, [r3, #36]	@ 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2253      	movs	r2, #83	@ 0x53
 8001484:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8001486:	bf00      	nop
 8001488:	370c      	adds	r7, #12
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr

08001492 <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 8001492:	b480      	push	{r7}
 8001494:	b083      	sub	sp, #12
 8001496:	af00      	add	r7, sp, #0
 8001498:	6078      	str	r0, [r7, #4]
 800149a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	689b      	ldr	r3, [r3, #8]
 80014a0:	f023 0207 	bic.w	r2, r3, #7
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	431a      	orrs	r2, r3
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	609a      	str	r2, [r3, #8]
}
 80014ac:	bf00      	nop
 80014ae:	370c      	adds	r7, #12
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr

080014b8 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80014bc:	4b04      	ldr	r3, [pc, #16]	@ (80014d0 <MX_APPE_Config+0x18>)
 80014be:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80014c2:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 80014c4:	f000 f824 	bl	8001510 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 80014c8:	f000 f829 	bl	800151e <Config_HSE>

  return;
 80014cc:	bf00      	nop
}
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	58004000 	.word	0x58004000

080014d4 <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 80014d8:	f000 f835 	bl	8001546 <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 80014dc:	f000 f84e 	bl	800157c <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 80014e0:	4903      	ldr	r1, [pc, #12]	@ (80014f0 <MX_APPE_Init+0x1c>)
 80014e2:	2000      	movs	r0, #0
 80014e4:	f000 ffca 	bl	800247c <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 80014e8:	f000 f856 	bl	8001598 <appe_Tl_Init>
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */

   return;
 80014ec:	bf00      	nop
}
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	20000d44 	.word	0x20000d44

080014f4 <Init_Smps>:

void Init_Smps(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 80014f8:	bf00      	nop
}
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr

08001502 <Init_Exti>:

void Init_Exti(void)
{
 8001502:	b580      	push	{r7, lr}
 8001504:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 8001506:	2050      	movs	r0, #80	@ 0x50
 8001508:	f7ff ff34 	bl	8001374 <LL_EXTI_EnableIT_32_63>

  return;
 800150c:	bf00      	nop
}
 800150e:	bd80      	pop	{r7, pc}

08001510 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0
  Reset_BackupDomain();

  Reset_IPCC();
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 8001514:	bf00      	nop
}
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr

0800151e <Config_HSE>:
  return;
}
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 800151e:	b580      	push	{r7, lr}
 8001520:	b082      	sub	sp, #8
 8001522:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8001524:	2000      	movs	r0, #0
 8001526:	f015 fc6f 	bl	8016e08 <OTP_Read>
 800152a:	6078      	str	r0, [r7, #4]
  if (p_otp)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d005      	beq.n	800153e <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	799b      	ldrb	r3, [r3, #6]
 8001536:	4618      	mov	r0, r3
 8001538:	f7ff ff30 	bl	800139c <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 800153c:	bf00      	nop
 800153e:	bf00      	nop
}
 8001540:	3708      	adds	r7, #8
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}

08001546 <System_Init>:

static void System_Init(void)
{
 8001546:	b580      	push	{r7, lr}
 8001548:	af00      	add	r7, sp, #0
  Init_Smps();
 800154a:	f7ff ffd3 	bl	80014f4 <Init_Smps>

  Init_Exti();
 800154e:	f7ff ffd8 	bl	8001502 <Init_Exti>

  Init_Rtc();
 8001552:	f000 f803 	bl	800155c <Init_Rtc>

  return;
 8001556:	bf00      	nop
}
 8001558:	bd80      	pop	{r7, pc}
	...

0800155c <Init_Rtc>:

static void Init_Rtc(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8001560:	4805      	ldr	r0, [pc, #20]	@ (8001578 <Init_Rtc+0x1c>)
 8001562:	f7ff ff86 	bl	8001472 <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 8001566:	2100      	movs	r1, #0
 8001568:	4803      	ldr	r0, [pc, #12]	@ (8001578 <Init_Rtc+0x1c>)
 800156a:	f7ff ff92 	bl	8001492 <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 800156e:	4802      	ldr	r0, [pc, #8]	@ (8001578 <Init_Rtc+0x1c>)
 8001570:	f7ff ff72 	bl	8001458 <LL_RTC_EnableWriteProtection>

  return;
 8001574:	bf00      	nop
}
 8001576:	bd80      	pop	{r7, pc}
 8001578:	40002800 	.word	0x40002800

0800157c <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8001580:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001584:	f7ff ff28 	bl	80013d8 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8001588:	f017 fdee 	bl	8019168 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 800158c:	2004      	movs	r0, #4
 800158e:	f7ff fedb 	bl	8001348 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 8001592:	bf00      	nop
}
 8001594:	bd80      	pop	{r7, pc}
	...

08001598 <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b088      	sub	sp, #32
 800159c:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 800159e:	f015 f9f1 	bl	8016984 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 80015a2:	4a11      	ldr	r2, [pc, #68]	@ (80015e8 <appe_Tl_Init+0x50>)
 80015a4:	2100      	movs	r1, #0
 80015a6:	2008      	movs	r0, #8
 80015a8:	f017 ff1c 	bl	80193e4 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 80015ac:	4b0f      	ldr	r3, [pc, #60]	@ (80015ec <appe_Tl_Init+0x54>)
 80015ae:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 80015b0:	4b0f      	ldr	r3, [pc, #60]	@ (80015f0 <appe_Tl_Init+0x58>)
 80015b2:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 80015b4:	463b      	mov	r3, r7
 80015b6:	4619      	mov	r1, r3
 80015b8:	480e      	ldr	r0, [pc, #56]	@ (80015f4 <appe_Tl_Init+0x5c>)
 80015ba:	f015 f8a5 	bl	8016708 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 80015be:	4b0e      	ldr	r3, [pc, #56]	@ (80015f8 <appe_Tl_Init+0x60>)
 80015c0:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 80015c2:	4b0e      	ldr	r3, [pc, #56]	@ (80015fc <appe_Tl_Init+0x64>)
 80015c4:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 80015c6:	4b0e      	ldr	r3, [pc, #56]	@ (8001600 <appe_Tl_Init+0x68>)
 80015c8:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 80015ca:	f240 533c 	movw	r3, #1340	@ 0x53c
 80015ce:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 80015d0:	f107 0308 	add.w	r3, r7, #8
 80015d4:	4618      	mov	r0, r3
 80015d6:	f015 fb17 	bl	8016c08 <TL_MM_Init>

  TL_Enable();
 80015da:	f015 f9cd 	bl	8016978 <TL_Enable>

  return;
 80015de:	bf00      	nop
}
 80015e0:	3720      	adds	r7, #32
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	08016741 	.word	0x08016741
 80015ec:	20030734 	.word	0x20030734
 80015f0:	08001605 	.word	0x08001605
 80015f4:	0800161d 	.word	0x0800161d
 80015f8:	2003094c 	.word	0x2003094c
 80015fc:	20030840 	.word	0x20030840
 8001600:	200301f8 	.word	0x200301f8

08001604 <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 8001604:	b480      	push	{r7}
 8001606:	b083      	sub	sp, #12
 8001608:	af00      	add	r7, sp, #0
 800160a:	4603      	mov	r3, r0
 800160c:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 800160e:	bf00      	nop
}
 8001610:	370c      	adds	r7, #12
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr
	...

0800161c <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b088      	sub	sp, #32
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	330b      	adds	r3, #11
 800162a:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 800162c:	69fb      	ldr	r3, [r7, #28]
 800162e:	881b      	ldrh	r3, [r3, #0]
 8001630:	b29b      	uxth	r3, r3
 8001632:	f5a3 4312 	sub.w	r3, r3, #37376	@ 0x9200
 8001636:	2b07      	cmp	r3, #7
 8001638:	d81f      	bhi.n	800167a <APPE_SysUserEvtRx+0x5e>
 800163a:	a201      	add	r2, pc, #4	@ (adr r2, 8001640 <APPE_SysUserEvtRx+0x24>)
 800163c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001640:	08001661 	.word	0x08001661
 8001644:	08001673 	.word	0x08001673
 8001648:	0800167b 	.word	0x0800167b
 800164c:	0800167b 	.word	0x0800167b
 8001650:	0800167b 	.word	0x0800167b
 8001654:	0800167b 	.word	0x0800167b
 8001658:	0800167b 	.word	0x0800167b
 800165c:	0800167b 	.word	0x0800167b
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 8001660:	f107 030c 	add.w	r3, r7, #12
 8001664:	4618      	mov	r0, r3
 8001666:	f014 fe05 	bl	8016274 <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
    APPE_SysEvtReadyProcessing(pPayload);
 800166a:	6878      	ldr	r0, [r7, #4]
 800166c:	f000 f81b 	bl	80016a6 <APPE_SysEvtReadyProcessing>
    break;
 8001670:	e004      	b.n	800167c <APPE_SysUserEvtRx+0x60>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
    APPE_SysEvtError(pPayload);
 8001672:	6878      	ldr	r0, [r7, #4]
 8001674:	f000 f806 	bl	8001684 <APPE_SysEvtError>
    break;
 8001678:	e000      	b.n	800167c <APPE_SysUserEvtRx+0x60>
  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
    break;

  default:
    break;
 800167a:	bf00      	nop
  }

  return;
 800167c:	bf00      	nop
}
 800167e:	3720      	adds	r7, #32
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}

08001684 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 8001684:	b480      	push	{r7}
 8001686:	b085      	sub	sp, #20
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	330b      	adds	r3, #11
 8001692:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	3302      	adds	r3, #2
 8001698:	60bb      	str	r3, [r7, #8]
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 800169a:	bf00      	nop
}
 800169c:	3714      	adds	r7, #20
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr

080016a6 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 80016a6:	b580      	push	{r7, lr}
 80016a8:	b08a      	sub	sp, #40	@ 0x28
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 80016ae:	f107 0308 	add.w	r3, r7, #8
 80016b2:	2200      	movs	r2, #0
 80016b4:	601a      	str	r2, [r3, #0]
 80016b6:	605a      	str	r2, [r3, #4]
 80016b8:	609a      	str	r2, [r3, #8]
 80016ba:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 80016bc:	2300      	movs	r3, #0
 80016be:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t DeviceID=0;
 80016c0:	2300      	movs	r3, #0
 80016c2:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	330b      	adds	r3, #11
 80016ca:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 80016cc:	69fb      	ldr	r3, [r7, #28]
 80016ce:	3302      	adds	r3, #2
 80016d0:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 80016d2:	69bb      	ldr	r3, [r7, #24]
 80016d4:	781b      	ldrb	r3, [r3, #0]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d11d      	bne.n	8001716 <APPE_SysEvtReadyProcessing+0x70>
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");

    /* Traces channel initialization */
    APPD_EnableCPU2();
 80016da:	f7ff fe19 	bl	8001310 <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 80016de:	230f      	movs	r3, #15
 80016e0:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 80016e2:	237f      	movs	r3, #127	@ 0x7f
 80016e4:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 80016e6:	f7ff fe99 	bl	800141c <LL_DBGMCU_GetRevisionID>
 80016ea:	6278      	str	r0, [r7, #36]	@ 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);

    config_param.RevisionID = (uint16_t)RevisionID;
 80016ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016ee:	b29b      	uxth	r3, r3
 80016f0:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 80016f2:	f7ff fe85 	bl	8001400 <LL_DBGMCU_GetDeviceID>
 80016f6:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
    config_param.DeviceID = (uint16_t)DeviceID;
 80016f8:	6a3b      	ldr	r3, [r7, #32]
 80016fa:	b29b      	uxth	r3, r3
 80016fc:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 80016fe:	f107 0308 	add.w	r3, r7, #8
 8001702:	4618      	mov	r0, r3
 8001704:	f014 fda0 	bl	8016248 <SHCI_C2_Config>

    APP_BLE_Init();
 8001708:	f016 f982 	bl	8017a10 <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 800170c:	2100      	movs	r1, #0
 800170e:	2001      	movs	r0, #1
 8001710:	f017 fd3c 	bl	801918c <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 8001714:	e007      	b.n	8001726 <APPE_SysEvtReadyProcessing+0x80>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 8001716:	69bb      	ldr	r3, [r7, #24]
 8001718:	781b      	ldrb	r3, [r3, #0]
 800171a:	2b01      	cmp	r3, #1
 800171c:	d103      	bne.n	8001726 <APPE_SysEvtReadyProcessing+0x80>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2200      	movs	r2, #0
 8001722:	701a      	strb	r2, [r3, #0]
  return;
 8001724:	bf00      	nop
 8001726:	bf00      	nop
}
 8001728:	3728      	adds	r7, #40	@ 0x28
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}

0800172e <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 800172e:	b580      	push	{r7, lr}
 8001730:	b084      	sub	sp, #16
 8001732:	af00      	add	r7, sp, #0
 8001734:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001736:	f005 fef7 	bl	8007528 <HAL_GetTick>
 800173a:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001746:	d00a      	beq.n	800175e <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 8001748:	f005 ff06 	bl	8007558 <HAL_GetTickFreq>
 800174c:	4603      	mov	r3, r0
 800174e:	461a      	mov	r2, r3
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	4413      	add	r3, r2
 8001754:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001756:	e002      	b.n	800175e <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 8001758:	f7ff fe6e 	bl	8001438 <LL_LPM_EnableSleep>
     */
  #if defined (__CC_ARM) || defined (__ARMCC_VERSION)
    __force_stores();
  #endif /* __ARMCC_VERSION */

    __WFI();
 800175c:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 800175e:	f005 fee3 	bl	8007528 <HAL_GetTick>
 8001762:	4602      	mov	r2, r0
 8001764:	68bb      	ldr	r3, [r7, #8]
 8001766:	1ad3      	subs	r3, r2, r3
 8001768:	68fa      	ldr	r2, [r7, #12]
 800176a:	429a      	cmp	r2, r3
 800176c:	d8f4      	bhi.n	8001758 <HAL_Delay+0x2a>
  }
}
 800176e:	bf00      	nop
 8001770:	bf00      	nop
 8001772:	3710      	adds	r7, #16
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}

08001778 <MX_APPE_Process>:

void MX_APPE_Process(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800177c:	f04f 30ff 	mov.w	r0, #4294967295
 8001780:	f017 fd34 	bl	80191ec <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 8001784:	bf00      	nop
 8001786:	bd80      	pop	{r7, pc}

08001788 <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 800178c:	bf00      	nop
}
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr

08001796 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 8001796:	b580      	push	{r7, lr}
 8001798:	b082      	sub	sp, #8
 800179a:	af00      	add	r7, sp, #0
 800179c:	6078      	str	r0, [r7, #4]
 800179e:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 80017a0:	f04f 30ff 	mov.w	r0, #4294967295
 80017a4:	f017 fd22 	bl	80191ec <UTIL_SEQ_Run>
  return;
 80017a8:	bf00      	nop
}
 80017aa:	3708      	adds	r7, #8
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}

080017b0 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b082      	sub	sp, #8
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 80017b8:	2100      	movs	r1, #0
 80017ba:	2008      	movs	r0, #8
 80017bc:	f017 fe34 	bl	8019428 <UTIL_SEQ_SetTask>
  return;
 80017c0:	bf00      	nop
}
 80017c2:	3708      	adds	r7, #8
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}

080017c8 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 80017d0:	2002      	movs	r0, #2
 80017d2:	f017 fe95 	bl	8019500 <UTIL_SEQ_SetEvt>
  return;
 80017d6:	bf00      	nop
}
 80017d8:	3708      	adds	r7, #8
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}

080017de <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 80017de:	b580      	push	{r7, lr}
 80017e0:	b082      	sub	sp, #8
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 80017e6:	2002      	movs	r0, #2
 80017e8:	f017 feaa 	bl	8019540 <UTIL_SEQ_WaitEvt>
  return;
 80017ec:	bf00      	nop
}
 80017ee:	3708      	adds	r7, #8
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}

080017f4 <bmp581_init_precise_normal>:
double bmpalt=0.0;
extern float temp;

//Ox18 donc 11000 pour ODR donc 5hz en mode normal avec oversampling a 128 pour la pression et 8 pour la temperature

uint8_t bmp581_init_precise_normal(BMP_t * bmp581){
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b088      	sub	sp, #32
 80017f8:	af04      	add	r7, sp, #16
 80017fa:	6078      	str	r0, [r7, #4]

	uint8_t OSR_tmask = 0b01111110;
 80017fc:	237e      	movs	r3, #126	@ 0x7e
 80017fe:	72fb      	strb	r3, [r7, #11]
	uint8_t ODR_tmask = 0b01100001;
 8001800:	2361      	movs	r3, #97	@ 0x61
 8001802:	72bb      	strb	r3, [r7, #10]
	int check=0;
 8001804:	2300      	movs	r3, #0
 8001806:	60fb      	str	r3, [r7, #12]

	if(HAL_I2C_Mem_Write(&hi2c1, BMP581_WRITE_ADDR, BMP581_OSR_CONFIG, 1, &OSR_tmask, 1, 100)!=HAL_OK){
 8001808:	2364      	movs	r3, #100	@ 0x64
 800180a:	9302      	str	r3, [sp, #8]
 800180c:	2301      	movs	r3, #1
 800180e:	9301      	str	r3, [sp, #4]
 8001810:	f107 030b 	add.w	r3, r7, #11
 8001814:	9300      	str	r3, [sp, #0]
 8001816:	2301      	movs	r3, #1
 8001818:	2236      	movs	r2, #54	@ 0x36
 800181a:	218e      	movs	r1, #142	@ 0x8e
 800181c:	480f      	ldr	r0, [pc, #60]	@ (800185c <bmp581_init_precise_normal+0x68>)
 800181e:	f007 fe91 	bl	8009544 <HAL_I2C_Mem_Write>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d001      	beq.n	800182c <bmp581_init_precise_normal+0x38>
			check=1;
 8001828:	2301      	movs	r3, #1
 800182a:	60fb      	str	r3, [r7, #12]
		}
	if(HAL_I2C_Mem_Write(&hi2c1, BMP581_WRITE_ADDR, BMP581_ODR_CONFIG, 1, &ODR_tmask, 1, 100)!=HAL_OK){
 800182c:	2364      	movs	r3, #100	@ 0x64
 800182e:	9302      	str	r3, [sp, #8]
 8001830:	2301      	movs	r3, #1
 8001832:	9301      	str	r3, [sp, #4]
 8001834:	f107 030a 	add.w	r3, r7, #10
 8001838:	9300      	str	r3, [sp, #0]
 800183a:	2301      	movs	r3, #1
 800183c:	2237      	movs	r2, #55	@ 0x37
 800183e:	218e      	movs	r1, #142	@ 0x8e
 8001840:	4806      	ldr	r0, [pc, #24]	@ (800185c <bmp581_init_precise_normal+0x68>)
 8001842:	f007 fe7f 	bl	8009544 <HAL_I2C_Mem_Write>
 8001846:	4603      	mov	r3, r0
 8001848:	2b00      	cmp	r3, #0
 800184a:	d001      	beq.n	8001850 <bmp581_init_precise_normal+0x5c>
				check=1;
 800184c:	2301      	movs	r3, #1
 800184e:	60fb      	str	r3, [r7, #12]
			}


	return check;
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	b2db      	uxtb	r3, r3

}
 8001854:	4618      	mov	r0, r3
 8001856:	3710      	adds	r7, #16
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	20000508 	.word	0x20000508

08001860 <bmp581_read_precise_normal>:




uint8_t bmp581_read_precise_normal(BMP_t * bmp581){
 8001860:	b5b0      	push	{r4, r5, r7, lr}
 8001862:	b08e      	sub	sp, #56	@ 0x38
 8001864:	af04      	add	r7, sp, #16
 8001866:	6078      	str	r0, [r7, #4]
		int check=0;
 8001868:	2300      	movs	r3, #0
 800186a:	627b      	str	r3, [r7, #36]	@ 0x24
		uint8_t recarray[6];
		int32_t intbuffertemp=0;
 800186c:	2300      	movs	r3, #0
 800186e:	623b      	str	r3, [r7, #32]
		int32_t intbufferpres=0;
 8001870:	2300      	movs	r3, #0
 8001872:	61fb      	str	r3, [r7, #28]

		double tmoy=0;
 8001874:	f04f 0200 	mov.w	r2, #0
 8001878:	f04f 0300 	mov.w	r3, #0
 800187c:	e9c7 2304 	strd	r2, r3, [r7, #16]
		if(HAL_I2C_Mem_Read(&hi2c1, BMP581_READ_ADDR, BMP581_TEMP_DATA_XLSB, 1, &recarray[0], 1, 100)!=HAL_OK){
 8001880:	2364      	movs	r3, #100	@ 0x64
 8001882:	9302      	str	r3, [sp, #8]
 8001884:	2301      	movs	r3, #1
 8001886:	9301      	str	r3, [sp, #4]
 8001888:	f107 0308 	add.w	r3, r7, #8
 800188c:	9300      	str	r3, [sp, #0]
 800188e:	2301      	movs	r3, #1
 8001890:	221d      	movs	r2, #29
 8001892:	218f      	movs	r1, #143	@ 0x8f
 8001894:	4894      	ldr	r0, [pc, #592]	@ (8001ae8 <bmp581_read_precise_normal+0x288>)
 8001896:	f007 ff69 	bl	800976c <HAL_I2C_Mem_Read>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d001      	beq.n	80018a4 <bmp581_read_precise_normal+0x44>
			check=1;
 80018a0:	2301      	movs	r3, #1
 80018a2:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		if(HAL_I2C_Mem_Read(&hi2c1, BMP581_READ_ADDR, BMP581_TEMP_DATA_LSB, 1, &recarray[1], 1, 100)!=HAL_OK){
 80018a4:	2364      	movs	r3, #100	@ 0x64
 80018a6:	9302      	str	r3, [sp, #8]
 80018a8:	2301      	movs	r3, #1
 80018aa:	9301      	str	r3, [sp, #4]
 80018ac:	f107 0308 	add.w	r3, r7, #8
 80018b0:	3301      	adds	r3, #1
 80018b2:	9300      	str	r3, [sp, #0]
 80018b4:	2301      	movs	r3, #1
 80018b6:	221e      	movs	r2, #30
 80018b8:	218f      	movs	r1, #143	@ 0x8f
 80018ba:	488b      	ldr	r0, [pc, #556]	@ (8001ae8 <bmp581_read_precise_normal+0x288>)
 80018bc:	f007 ff56 	bl	800976c <HAL_I2C_Mem_Read>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d001      	beq.n	80018ca <bmp581_read_precise_normal+0x6a>
			check=1;
 80018c6:	2301      	movs	r3, #1
 80018c8:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		if(HAL_I2C_Mem_Read(&hi2c1, BMP581_READ_ADDR, BMP581_TEMP_DATA_MSB, 1, &recarray[2], 1, 100)!=HAL_OK){
 80018ca:	2364      	movs	r3, #100	@ 0x64
 80018cc:	9302      	str	r3, [sp, #8]
 80018ce:	2301      	movs	r3, #1
 80018d0:	9301      	str	r3, [sp, #4]
 80018d2:	f107 0308 	add.w	r3, r7, #8
 80018d6:	3302      	adds	r3, #2
 80018d8:	9300      	str	r3, [sp, #0]
 80018da:	2301      	movs	r3, #1
 80018dc:	221f      	movs	r2, #31
 80018de:	218f      	movs	r1, #143	@ 0x8f
 80018e0:	4881      	ldr	r0, [pc, #516]	@ (8001ae8 <bmp581_read_precise_normal+0x288>)
 80018e2:	f007 ff43 	bl	800976c <HAL_I2C_Mem_Read>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d001      	beq.n	80018f0 <bmp581_read_precise_normal+0x90>
			check=1;
 80018ec:	2301      	movs	r3, #1
 80018ee:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		if(HAL_I2C_Mem_Read(&hi2c1, BMP581_READ_ADDR, BMP581_PRESS_DATA_XLSB, 1, &recarray[3], 1, 100)!=HAL_OK){
 80018f0:	2364      	movs	r3, #100	@ 0x64
 80018f2:	9302      	str	r3, [sp, #8]
 80018f4:	2301      	movs	r3, #1
 80018f6:	9301      	str	r3, [sp, #4]
 80018f8:	f107 0308 	add.w	r3, r7, #8
 80018fc:	3303      	adds	r3, #3
 80018fe:	9300      	str	r3, [sp, #0]
 8001900:	2301      	movs	r3, #1
 8001902:	2220      	movs	r2, #32
 8001904:	218f      	movs	r1, #143	@ 0x8f
 8001906:	4878      	ldr	r0, [pc, #480]	@ (8001ae8 <bmp581_read_precise_normal+0x288>)
 8001908:	f007 ff30 	bl	800976c <HAL_I2C_Mem_Read>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d001      	beq.n	8001916 <bmp581_read_precise_normal+0xb6>
			check=1;
 8001912:	2301      	movs	r3, #1
 8001914:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		if(HAL_I2C_Mem_Read(&hi2c1, BMP581_READ_ADDR, BMP581_PRESS_DATA_LSB, 1, &recarray[4], 1, 100)!=HAL_OK){
 8001916:	2364      	movs	r3, #100	@ 0x64
 8001918:	9302      	str	r3, [sp, #8]
 800191a:	2301      	movs	r3, #1
 800191c:	9301      	str	r3, [sp, #4]
 800191e:	f107 0308 	add.w	r3, r7, #8
 8001922:	3304      	adds	r3, #4
 8001924:	9300      	str	r3, [sp, #0]
 8001926:	2301      	movs	r3, #1
 8001928:	2221      	movs	r2, #33	@ 0x21
 800192a:	218f      	movs	r1, #143	@ 0x8f
 800192c:	486e      	ldr	r0, [pc, #440]	@ (8001ae8 <bmp581_read_precise_normal+0x288>)
 800192e:	f007 ff1d 	bl	800976c <HAL_I2C_Mem_Read>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d001      	beq.n	800193c <bmp581_read_precise_normal+0xdc>
			check=1;
 8001938:	2301      	movs	r3, #1
 800193a:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		if(HAL_I2C_Mem_Read(&hi2c1, BMP581_READ_ADDR, BMP581_PRESS_DATA_MSB, 1, &recarray[5], 1, 100)!=HAL_OK){
 800193c:	2364      	movs	r3, #100	@ 0x64
 800193e:	9302      	str	r3, [sp, #8]
 8001940:	2301      	movs	r3, #1
 8001942:	9301      	str	r3, [sp, #4]
 8001944:	f107 0308 	add.w	r3, r7, #8
 8001948:	3305      	adds	r3, #5
 800194a:	9300      	str	r3, [sp, #0]
 800194c:	2301      	movs	r3, #1
 800194e:	2222      	movs	r2, #34	@ 0x22
 8001950:	218f      	movs	r1, #143	@ 0x8f
 8001952:	4865      	ldr	r0, [pc, #404]	@ (8001ae8 <bmp581_read_precise_normal+0x288>)
 8001954:	f007 ff0a 	bl	800976c <HAL_I2C_Mem_Read>
 8001958:	4603      	mov	r3, r0
 800195a:	2b00      	cmp	r3, #0
 800195c:	d001      	beq.n	8001962 <bmp581_read_precise_normal+0x102>
			check=1;
 800195e:	2301      	movs	r3, #1
 8001960:	627b      	str	r3, [r7, #36]	@ 0x24
		}

		if(check==0){
 8001962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001964:	2b00      	cmp	r3, #0
 8001966:	f040 80a1 	bne.w	8001aac <bmp581_read_precise_normal+0x24c>

		intbuffertemp=(recarray[2]<<16)|(recarray[1]<<8)|(recarray[0]);
 800196a:	7abb      	ldrb	r3, [r7, #10]
 800196c:	041a      	lsls	r2, r3, #16
 800196e:	7a7b      	ldrb	r3, [r7, #9]
 8001970:	021b      	lsls	r3, r3, #8
 8001972:	4313      	orrs	r3, r2
 8001974:	7a3a      	ldrb	r2, [r7, #8]
 8001976:	4313      	orrs	r3, r2
 8001978:	623b      	str	r3, [r7, #32]
		intbufferpres=(recarray[5]<<16)|(recarray[4]<<8)|(recarray[3]);
 800197a:	7b7b      	ldrb	r3, [r7, #13]
 800197c:	041a      	lsls	r2, r3, #16
 800197e:	7b3b      	ldrb	r3, [r7, #12]
 8001980:	021b      	lsls	r3, r3, #8
 8001982:	4313      	orrs	r3, r2
 8001984:	7afa      	ldrb	r2, [r7, #11]
 8001986:	4313      	orrs	r3, r2
 8001988:	61fb      	str	r3, [r7, #28]
		bmptemp=(double)intbuffertemp/65536.0;
 800198a:	6a38      	ldr	r0, [r7, #32]
 800198c:	f7fe fda2 	bl	80004d4 <__aeabi_i2d>
 8001990:	f04f 0200 	mov.w	r2, #0
 8001994:	4b55      	ldr	r3, [pc, #340]	@ (8001aec <bmp581_read_precise_normal+0x28c>)
 8001996:	f7fe ff31 	bl	80007fc <__aeabi_ddiv>
 800199a:	4602      	mov	r2, r0
 800199c:	460b      	mov	r3, r1
 800199e:	4954      	ldr	r1, [pc, #336]	@ (8001af0 <bmp581_read_precise_normal+0x290>)
 80019a0:	e9c1 2300 	strd	r2, r3, [r1]
		bmppress=(double) intbufferpres/64.0;
 80019a4:	69f8      	ldr	r0, [r7, #28]
 80019a6:	f7fe fd95 	bl	80004d4 <__aeabi_i2d>
 80019aa:	f04f 0200 	mov.w	r2, #0
 80019ae:	4b51      	ldr	r3, [pc, #324]	@ (8001af4 <bmp581_read_precise_normal+0x294>)
 80019b0:	f7fe ff24 	bl	80007fc <__aeabi_ddiv>
 80019b4:	4602      	mov	r2, r0
 80019b6:	460b      	mov	r3, r1
 80019b8:	494f      	ldr	r1, [pc, #316]	@ (8001af8 <bmp581_read_precise_normal+0x298>)
 80019ba:	e9c1 2300 	strd	r2, r3, [r1]

		//alt=(double)(288.15/0.0065)*(1-pow((double)(finalpress*1000.0)/101325.0, (double)(287.05*0.0065)/(9.80665)));
		bmpalt=(double) ((8.314*293.15)/(9.80665*0.028964))*log((double)101325.0/(bmppress));
 80019be:	4b4e      	ldr	r3, [pc, #312]	@ (8001af8 <bmp581_read_precise_normal+0x298>)
 80019c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019c4:	a13c      	add	r1, pc, #240	@ (adr r1, 8001ab8 <bmp581_read_precise_normal+0x258>)
 80019c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80019ca:	f7fe ff17 	bl	80007fc <__aeabi_ddiv>
 80019ce:	4602      	mov	r2, r0
 80019d0:	460b      	mov	r3, r1
 80019d2:	ec43 2b17 	vmov	d7, r2, r3
 80019d6:	eeb0 0a47 	vmov.f32	s0, s14
 80019da:	eef0 0a67 	vmov.f32	s1, s15
 80019de:	f01c faaf 	bl	801df40 <log>
 80019e2:	ec51 0b10 	vmov	r0, r1, d0
 80019e6:	a336      	add	r3, pc, #216	@ (adr r3, 8001ac0 <bmp581_read_precise_normal+0x260>)
 80019e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019ec:	f7fe fddc 	bl	80005a8 <__aeabi_dmul>
 80019f0:	4602      	mov	r2, r0
 80019f2:	460b      	mov	r3, r1
 80019f4:	4941      	ldr	r1, [pc, #260]	@ (8001afc <bmp581_read_precise_normal+0x29c>)
 80019f6:	e9c1 2300 	strd	r2, r3, [r1]
		tmoy=(double) 293.15+bmptemp+(0.0065*bmpalt)/2;
 80019fa:	4b3d      	ldr	r3, [pc, #244]	@ (8001af0 <bmp581_read_precise_normal+0x290>)
 80019fc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a00:	a331      	add	r3, pc, #196	@ (adr r3, 8001ac8 <bmp581_read_precise_normal+0x268>)
 8001a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a06:	f7fe fc19 	bl	800023c <__adddf3>
 8001a0a:	4602      	mov	r2, r0
 8001a0c:	460b      	mov	r3, r1
 8001a0e:	4614      	mov	r4, r2
 8001a10:	461d      	mov	r5, r3
 8001a12:	4b3a      	ldr	r3, [pc, #232]	@ (8001afc <bmp581_read_precise_normal+0x29c>)
 8001a14:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a18:	a32d      	add	r3, pc, #180	@ (adr r3, 8001ad0 <bmp581_read_precise_normal+0x270>)
 8001a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a1e:	f7fe fdc3 	bl	80005a8 <__aeabi_dmul>
 8001a22:	4602      	mov	r2, r0
 8001a24:	460b      	mov	r3, r1
 8001a26:	4610      	mov	r0, r2
 8001a28:	4619      	mov	r1, r3
 8001a2a:	f04f 0200 	mov.w	r2, #0
 8001a2e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001a32:	f7fe fee3 	bl	80007fc <__aeabi_ddiv>
 8001a36:	4602      	mov	r2, r0
 8001a38:	460b      	mov	r3, r1
 8001a3a:	4620      	mov	r0, r4
 8001a3c:	4629      	mov	r1, r5
 8001a3e:	f7fe fbfd 	bl	800023c <__adddf3>
 8001a42:	4602      	mov	r2, r0
 8001a44:	460b      	mov	r3, r1
 8001a46:	e9c7 2304 	strd	r2, r3, [r7, #16]
		bmpalt=(double) ((8.314*tmoy)/(9.80665*0.028964))*log((double)101325.0/(bmppress));
 8001a4a:	a323      	add	r3, pc, #140	@ (adr r3, 8001ad8 <bmp581_read_precise_normal+0x278>)
 8001a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a50:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001a54:	f7fe fda8 	bl	80005a8 <__aeabi_dmul>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	460b      	mov	r3, r1
 8001a5c:	4610      	mov	r0, r2
 8001a5e:	4619      	mov	r1, r3
 8001a60:	a31f      	add	r3, pc, #124	@ (adr r3, 8001ae0 <bmp581_read_precise_normal+0x280>)
 8001a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a66:	f7fe fec9 	bl	80007fc <__aeabi_ddiv>
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	460b      	mov	r3, r1
 8001a6e:	4614      	mov	r4, r2
 8001a70:	461d      	mov	r5, r3
 8001a72:	4b21      	ldr	r3, [pc, #132]	@ (8001af8 <bmp581_read_precise_normal+0x298>)
 8001a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a78:	a10f      	add	r1, pc, #60	@ (adr r1, 8001ab8 <bmp581_read_precise_normal+0x258>)
 8001a7a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001a7e:	f7fe febd 	bl	80007fc <__aeabi_ddiv>
 8001a82:	4602      	mov	r2, r0
 8001a84:	460b      	mov	r3, r1
 8001a86:	ec43 2b17 	vmov	d7, r2, r3
 8001a8a:	eeb0 0a47 	vmov.f32	s0, s14
 8001a8e:	eef0 0a67 	vmov.f32	s1, s15
 8001a92:	f01c fa55 	bl	801df40 <log>
 8001a96:	ec53 2b10 	vmov	r2, r3, d0
 8001a9a:	4620      	mov	r0, r4
 8001a9c:	4629      	mov	r1, r5
 8001a9e:	f7fe fd83 	bl	80005a8 <__aeabi_dmul>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	460b      	mov	r3, r1
 8001aa6:	4915      	ldr	r1, [pc, #84]	@ (8001afc <bmp581_read_precise_normal+0x29c>)
 8001aa8:	e9c1 2300 	strd	r2, r3, [r1]



		}

		return check;
 8001aac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aae:	b2db      	uxtb	r3, r3
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	3728      	adds	r7, #40	@ 0x28
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bdb0      	pop	{r4, r5, r7, pc}
 8001ab8:	00000000 	.word	0x00000000
 8001abc:	40f8bcd0 	.word	0x40f8bcd0
 8001ac0:	81a9275b 	.word	0x81a9275b
 8001ac4:	40c0c254 	.word	0x40c0c254
 8001ac8:	66666666 	.word	0x66666666
 8001acc:	40725266 	.word	0x40725266
 8001ad0:	76c8b439 	.word	0x76c8b439
 8001ad4:	3f7a9fbe 	.word	0x3f7a9fbe
 8001ad8:	9ba5e354 	.word	0x9ba5e354
 8001adc:	4020a0c4 	.word	0x4020a0c4
 8001ae0:	50527f89 	.word	0x50527f89
 8001ae4:	3fd22db5 	.word	0x3fd22db5
 8001ae8:	20000508 	.word	0x20000508
 8001aec:	40f00000 	.word	0x40f00000
 8001af0:	20000450 	.word	0x20000450
 8001af4:	40500000 	.word	0x40500000
 8001af8:	20000458 	.word	0x20000458
 8001afc:	20000460 	.word	0x20000460

08001b00 <LL_AHB1_GRP1_EnableClock>:
{
 8001b00:	b480      	push	{r7}
 8001b02:	b085      	sub	sp, #20
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001b08:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b0c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8001b0e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	4313      	orrs	r3, r2
 8001b16:	648b      	str	r3, [r1, #72]	@ 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001b18:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b1c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	4013      	ands	r3, r2
 8001b22:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001b24:	68fb      	ldr	r3, [r7, #12]
}
 8001b26:	bf00      	nop
 8001b28:	3714      	adds	r7, #20
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr

08001b32 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001b32:	b580      	push	{r7, lr}
 8001b34:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001b36:	2004      	movs	r0, #4
 8001b38:	f7ff ffe2 	bl	8001b00 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001b3c:	2001      	movs	r0, #1
 8001b3e:	f7ff ffdf 	bl	8001b00 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 4, 0);
 8001b42:	2200      	movs	r2, #0
 8001b44:	2104      	movs	r1, #4
 8001b46:	200b      	movs	r0, #11
 8001b48:	f006 fecd 	bl	80088e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001b4c:	200b      	movs	r0, #11
 8001b4e:	f006 fee4 	bl	800891a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 2, 0);
 8001b52:	2200      	movs	r2, #0
 8001b54:	2102      	movs	r1, #2
 8001b56:	200c      	movs	r0, #12
 8001b58:	f006 fec5 	bl	80088e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001b5c:	200c      	movs	r0, #12
 8001b5e:	f006 fedc 	bl	800891a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001b62:	2200      	movs	r2, #0
 8001b64:	2100      	movs	r1, #0
 8001b66:	200d      	movs	r0, #13
 8001b68:	f006 febd 	bl	80088e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001b6c:	200d      	movs	r0, #13
 8001b6e:	f006 fed4 	bl	800891a <HAL_NVIC_EnableIRQ>

}
 8001b72:	bf00      	nop
 8001b74:	bd80      	pop	{r7, pc}

08001b76 <LL_AHB2_GRP1_EnableClock>:
{
 8001b76:	b480      	push	{r7}
 8001b78:	b085      	sub	sp, #20
 8001b7a:	af00      	add	r7, sp, #0
 8001b7c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001b7e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b82:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001b84:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001b8e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b92:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	4013      	ands	r3, r2
 8001b98:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
}
 8001b9c:	bf00      	nop
 8001b9e:	3714      	adds	r7, #20
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr

08001ba8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b086      	sub	sp, #24
 8001bac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bae:	1d3b      	adds	r3, r7, #4
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	601a      	str	r2, [r3, #0]
 8001bb4:	605a      	str	r2, [r3, #4]
 8001bb6:	609a      	str	r2, [r3, #8]
 8001bb8:	60da      	str	r2, [r3, #12]
 8001bba:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bbc:	2004      	movs	r0, #4
 8001bbe:	f7ff ffda 	bl	8001b76 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bc2:	2002      	movs	r0, #2
 8001bc4:	f7ff ffd7 	bl	8001b76 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bc8:	2001      	movs	r0, #1
 8001bca:	f7ff ffd4 	bl	8001b76 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8001bce:	2200      	movs	r2, #0
 8001bd0:	2101      	movs	r1, #1
 8001bd2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001bd6:	f007 fbab 	bl	8009330 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED0_Pin|LED1_Pin|SPI_CS_Pin, GPIO_PIN_RESET);
 8001bda:	2200      	movs	r2, #0
 8001bdc:	2183      	movs	r1, #131	@ 0x83
 8001bde:	481b      	ldr	r0, [pc, #108]	@ (8001c4c <MX_GPIO_Init+0xa4>)
 8001be0:	f007 fba6 	bl	8009330 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001be4:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001be8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001bea:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8001bee:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bf4:	1d3b      	adds	r3, r7, #4
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	4815      	ldr	r0, [pc, #84]	@ (8001c50 <MX_GPIO_Init+0xa8>)
 8001bfa:	f007 fa11 	bl	8009020 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c02:	2301      	movs	r3, #1
 8001c04:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c06:	2300      	movs	r3, #0
 8001c08:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c0e:	1d3b      	adds	r3, r7, #4
 8001c10:	4619      	mov	r1, r3
 8001c12:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c16:	f007 fa03 	bl	8009020 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED0_Pin LED1_Pin SPI_CS_Pin */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin|SPI_CS_Pin;
 8001c1a:	2383      	movs	r3, #131	@ 0x83
 8001c1c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c22:	2300      	movs	r3, #0
 8001c24:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c26:	2300      	movs	r3, #0
 8001c28:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c2a:	1d3b      	adds	r3, r7, #4
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	4807      	ldr	r0, [pc, #28]	@ (8001c4c <MX_GPIO_Init+0xa4>)
 8001c30:	f007 f9f6 	bl	8009020 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 8001c34:	2200      	movs	r2, #0
 8001c36:	2101      	movs	r1, #1
 8001c38:	2028      	movs	r0, #40	@ 0x28
 8001c3a:	f006 fe54 	bl	80088e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001c3e:	2028      	movs	r0, #40	@ 0x28
 8001c40:	f006 fe6b 	bl	800891a <HAL_NVIC_EnableIRQ>

}
 8001c44:	bf00      	nop
 8001c46:	3718      	adds	r7, #24
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	48000400 	.word	0x48000400
 8001c50:	48000800 	.word	0x48000800

08001c54 <LL_EXTI_EnableIT_0_31>:
{
 8001c54:	b480      	push	{r7}
 8001c56:	b083      	sub	sp, #12
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8001c5c:	4b06      	ldr	r3, [pc, #24]	@ (8001c78 <LL_EXTI_EnableIT_0_31+0x24>)
 8001c5e:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8001c62:	4905      	ldr	r1, [pc, #20]	@ (8001c78 <LL_EXTI_EnableIT_0_31+0x24>)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	4313      	orrs	r3, r2
 8001c68:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8001c6c:	bf00      	nop
 8001c6e:	370c      	adds	r7, #12
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr
 8001c78:	58000800 	.word	0x58000800

08001c7c <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8001c84:	4b05      	ldr	r3, [pc, #20]	@ (8001c9c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001c86:	681a      	ldr	r2, [r3, #0]
 8001c88:	4904      	ldr	r1, [pc, #16]	@ (8001c9c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	600b      	str	r3, [r1, #0]

}
 8001c90:	bf00      	nop
 8001c92:	370c      	adds	r7, #12
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr
 8001c9c:	58000800 	.word	0x58000800

08001ca0 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b083      	sub	sp, #12
 8001ca4:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001ca6:	4b0d      	ldr	r3, [pc, #52]	@ (8001cdc <ReadRtcSsrValue+0x3c>)
 8001ca8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001caa:	b29b      	uxth	r3, r3
 8001cac:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001cae:	4b0b      	ldr	r3, [pc, #44]	@ (8001cdc <ReadRtcSsrValue+0x3c>)
 8001cb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cb2:	b29b      	uxth	r3, r3
 8001cb4:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8001cb6:	e005      	b.n	8001cc4 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001cbc:	4b07      	ldr	r3, [pc, #28]	@ (8001cdc <ReadRtcSsrValue+0x3c>)
 8001cbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cc0:	b29b      	uxth	r3, r3
 8001cc2:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8001cc4:	687a      	ldr	r2, [r7, #4]
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	d1f5      	bne.n	8001cb8 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8001ccc:	683b      	ldr	r3, [r7, #0]
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	370c      	adds	r7, #12
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr
 8001cda:	bf00      	nop
 8001cdc:	40002800 	.word	0x40002800

08001ce0 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b085      	sub	sp, #20
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	460a      	mov	r2, r1
 8001cea:	71fb      	strb	r3, [r7, #7]
 8001cec:	4613      	mov	r3, r2
 8001cee:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8001cf0:	79ba      	ldrb	r2, [r7, #6]
 8001cf2:	491d      	ldr	r1, [pc, #116]	@ (8001d68 <LinkTimerAfter+0x88>)
 8001cf4:	4613      	mov	r3, r2
 8001cf6:	005b      	lsls	r3, r3, #1
 8001cf8:	4413      	add	r3, r2
 8001cfa:	00db      	lsls	r3, r3, #3
 8001cfc:	440b      	add	r3, r1
 8001cfe:	3315      	adds	r3, #21
 8001d00:	781b      	ldrb	r3, [r3, #0]
 8001d02:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001d04:	7bfb      	ldrb	r3, [r7, #15]
 8001d06:	2b06      	cmp	r3, #6
 8001d08:	d009      	beq.n	8001d1e <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8001d0a:	7bfa      	ldrb	r2, [r7, #15]
 8001d0c:	4916      	ldr	r1, [pc, #88]	@ (8001d68 <LinkTimerAfter+0x88>)
 8001d0e:	4613      	mov	r3, r2
 8001d10:	005b      	lsls	r3, r3, #1
 8001d12:	4413      	add	r3, r2
 8001d14:	00db      	lsls	r3, r3, #3
 8001d16:	440b      	add	r3, r1
 8001d18:	3314      	adds	r3, #20
 8001d1a:	79fa      	ldrb	r2, [r7, #7]
 8001d1c:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8001d1e:	79fa      	ldrb	r2, [r7, #7]
 8001d20:	4911      	ldr	r1, [pc, #68]	@ (8001d68 <LinkTimerAfter+0x88>)
 8001d22:	4613      	mov	r3, r2
 8001d24:	005b      	lsls	r3, r3, #1
 8001d26:	4413      	add	r3, r2
 8001d28:	00db      	lsls	r3, r3, #3
 8001d2a:	440b      	add	r3, r1
 8001d2c:	3315      	adds	r3, #21
 8001d2e:	7bfa      	ldrb	r2, [r7, #15]
 8001d30:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8001d32:	79fa      	ldrb	r2, [r7, #7]
 8001d34:	490c      	ldr	r1, [pc, #48]	@ (8001d68 <LinkTimerAfter+0x88>)
 8001d36:	4613      	mov	r3, r2
 8001d38:	005b      	lsls	r3, r3, #1
 8001d3a:	4413      	add	r3, r2
 8001d3c:	00db      	lsls	r3, r3, #3
 8001d3e:	440b      	add	r3, r1
 8001d40:	3314      	adds	r3, #20
 8001d42:	79ba      	ldrb	r2, [r7, #6]
 8001d44:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8001d46:	79ba      	ldrb	r2, [r7, #6]
 8001d48:	4907      	ldr	r1, [pc, #28]	@ (8001d68 <LinkTimerAfter+0x88>)
 8001d4a:	4613      	mov	r3, r2
 8001d4c:	005b      	lsls	r3, r3, #1
 8001d4e:	4413      	add	r3, r2
 8001d50:	00db      	lsls	r3, r3, #3
 8001d52:	440b      	add	r3, r1
 8001d54:	3315      	adds	r3, #21
 8001d56:	79fa      	ldrb	r2, [r7, #7]
 8001d58:	701a      	strb	r2, [r3, #0]

  return;
 8001d5a:	bf00      	nop
}
 8001d5c:	3714      	adds	r7, #20
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr
 8001d66:	bf00      	nop
 8001d68:	20000468 	.word	0x20000468

08001d6c <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b085      	sub	sp, #20
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	4603      	mov	r3, r0
 8001d74:	460a      	mov	r2, r1
 8001d76:	71fb      	strb	r3, [r7, #7]
 8001d78:	4613      	mov	r3, r2
 8001d7a:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8001d7c:	4b29      	ldr	r3, [pc, #164]	@ (8001e24 <LinkTimerBefore+0xb8>)
 8001d7e:	781b      	ldrb	r3, [r3, #0]
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	79ba      	ldrb	r2, [r7, #6]
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d032      	beq.n	8001dee <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8001d88:	79ba      	ldrb	r2, [r7, #6]
 8001d8a:	4927      	ldr	r1, [pc, #156]	@ (8001e28 <LinkTimerBefore+0xbc>)
 8001d8c:	4613      	mov	r3, r2
 8001d8e:	005b      	lsls	r3, r3, #1
 8001d90:	4413      	add	r3, r2
 8001d92:	00db      	lsls	r3, r3, #3
 8001d94:	440b      	add	r3, r1
 8001d96:	3314      	adds	r3, #20
 8001d98:	781b      	ldrb	r3, [r3, #0]
 8001d9a:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8001d9c:	7bfa      	ldrb	r2, [r7, #15]
 8001d9e:	4922      	ldr	r1, [pc, #136]	@ (8001e28 <LinkTimerBefore+0xbc>)
 8001da0:	4613      	mov	r3, r2
 8001da2:	005b      	lsls	r3, r3, #1
 8001da4:	4413      	add	r3, r2
 8001da6:	00db      	lsls	r3, r3, #3
 8001da8:	440b      	add	r3, r1
 8001daa:	3315      	adds	r3, #21
 8001dac:	79fa      	ldrb	r2, [r7, #7]
 8001dae:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8001db0:	79fa      	ldrb	r2, [r7, #7]
 8001db2:	491d      	ldr	r1, [pc, #116]	@ (8001e28 <LinkTimerBefore+0xbc>)
 8001db4:	4613      	mov	r3, r2
 8001db6:	005b      	lsls	r3, r3, #1
 8001db8:	4413      	add	r3, r2
 8001dba:	00db      	lsls	r3, r3, #3
 8001dbc:	440b      	add	r3, r1
 8001dbe:	3315      	adds	r3, #21
 8001dc0:	79ba      	ldrb	r2, [r7, #6]
 8001dc2:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8001dc4:	79fa      	ldrb	r2, [r7, #7]
 8001dc6:	4918      	ldr	r1, [pc, #96]	@ (8001e28 <LinkTimerBefore+0xbc>)
 8001dc8:	4613      	mov	r3, r2
 8001dca:	005b      	lsls	r3, r3, #1
 8001dcc:	4413      	add	r3, r2
 8001dce:	00db      	lsls	r3, r3, #3
 8001dd0:	440b      	add	r3, r1
 8001dd2:	3314      	adds	r3, #20
 8001dd4:	7bfa      	ldrb	r2, [r7, #15]
 8001dd6:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8001dd8:	79ba      	ldrb	r2, [r7, #6]
 8001dda:	4913      	ldr	r1, [pc, #76]	@ (8001e28 <LinkTimerBefore+0xbc>)
 8001ddc:	4613      	mov	r3, r2
 8001dde:	005b      	lsls	r3, r3, #1
 8001de0:	4413      	add	r3, r2
 8001de2:	00db      	lsls	r3, r3, #3
 8001de4:	440b      	add	r3, r1
 8001de6:	3314      	adds	r3, #20
 8001de8:	79fa      	ldrb	r2, [r7, #7]
 8001dea:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8001dec:	e014      	b.n	8001e18 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8001dee:	79fa      	ldrb	r2, [r7, #7]
 8001df0:	490d      	ldr	r1, [pc, #52]	@ (8001e28 <LinkTimerBefore+0xbc>)
 8001df2:	4613      	mov	r3, r2
 8001df4:	005b      	lsls	r3, r3, #1
 8001df6:	4413      	add	r3, r2
 8001df8:	00db      	lsls	r3, r3, #3
 8001dfa:	440b      	add	r3, r1
 8001dfc:	3315      	adds	r3, #21
 8001dfe:	79ba      	ldrb	r2, [r7, #6]
 8001e00:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8001e02:	79ba      	ldrb	r2, [r7, #6]
 8001e04:	4908      	ldr	r1, [pc, #32]	@ (8001e28 <LinkTimerBefore+0xbc>)
 8001e06:	4613      	mov	r3, r2
 8001e08:	005b      	lsls	r3, r3, #1
 8001e0a:	4413      	add	r3, r2
 8001e0c:	00db      	lsls	r3, r3, #3
 8001e0e:	440b      	add	r3, r1
 8001e10:	3314      	adds	r3, #20
 8001e12:	79fa      	ldrb	r2, [r7, #7]
 8001e14:	701a      	strb	r2, [r3, #0]
  return;
 8001e16:	bf00      	nop
}
 8001e18:	3714      	adds	r7, #20
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr
 8001e22:	bf00      	nop
 8001e24:	200004f8 	.word	0x200004f8
 8001e28:	20000468 	.word	0x20000468

08001e2c <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b084      	sub	sp, #16
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	4603      	mov	r3, r0
 8001e34:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001e36:	4b4e      	ldr	r3, [pc, #312]	@ (8001f70 <linkTimer+0x144>)
 8001e38:	781b      	ldrb	r3, [r3, #0]
 8001e3a:	b2db      	uxtb	r3, r3
 8001e3c:	2b06      	cmp	r3, #6
 8001e3e:	d118      	bne.n	8001e72 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001e40:	4b4b      	ldr	r3, [pc, #300]	@ (8001f70 <linkTimer+0x144>)
 8001e42:	781b      	ldrb	r3, [r3, #0]
 8001e44:	b2da      	uxtb	r2, r3
 8001e46:	4b4b      	ldr	r3, [pc, #300]	@ (8001f74 <linkTimer+0x148>)
 8001e48:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8001e4a:	4a49      	ldr	r2, [pc, #292]	@ (8001f70 <linkTimer+0x144>)
 8001e4c:	79fb      	ldrb	r3, [r7, #7]
 8001e4e:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8001e50:	79fa      	ldrb	r2, [r7, #7]
 8001e52:	4949      	ldr	r1, [pc, #292]	@ (8001f78 <linkTimer+0x14c>)
 8001e54:	4613      	mov	r3, r2
 8001e56:	005b      	lsls	r3, r3, #1
 8001e58:	4413      	add	r3, r2
 8001e5a:	00db      	lsls	r3, r3, #3
 8001e5c:	440b      	add	r3, r1
 8001e5e:	3315      	adds	r3, #21
 8001e60:	2206      	movs	r2, #6
 8001e62:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001e64:	4b45      	ldr	r3, [pc, #276]	@ (8001f7c <linkTimer+0x150>)
 8001e66:	f04f 32ff 	mov.w	r2, #4294967295
 8001e6a:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	81fb      	strh	r3, [r7, #14]
 8001e70:	e078      	b.n	8001f64 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8001e72:	f000 f909 	bl	8002088 <ReturnTimeElapsed>
 8001e76:	4603      	mov	r3, r0
 8001e78:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8001e7a:	79fa      	ldrb	r2, [r7, #7]
 8001e7c:	493e      	ldr	r1, [pc, #248]	@ (8001f78 <linkTimer+0x14c>)
 8001e7e:	4613      	mov	r3, r2
 8001e80:	005b      	lsls	r3, r3, #1
 8001e82:	4413      	add	r3, r2
 8001e84:	00db      	lsls	r3, r3, #3
 8001e86:	440b      	add	r3, r1
 8001e88:	3308      	adds	r3, #8
 8001e8a:	6819      	ldr	r1, [r3, #0]
 8001e8c:	89fb      	ldrh	r3, [r7, #14]
 8001e8e:	79fa      	ldrb	r2, [r7, #7]
 8001e90:	4419      	add	r1, r3
 8001e92:	4839      	ldr	r0, [pc, #228]	@ (8001f78 <linkTimer+0x14c>)
 8001e94:	4613      	mov	r3, r2
 8001e96:	005b      	lsls	r3, r3, #1
 8001e98:	4413      	add	r3, r2
 8001e9a:	00db      	lsls	r3, r3, #3
 8001e9c:	4403      	add	r3, r0
 8001e9e:	3308      	adds	r3, #8
 8001ea0:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8001ea2:	79fa      	ldrb	r2, [r7, #7]
 8001ea4:	4934      	ldr	r1, [pc, #208]	@ (8001f78 <linkTimer+0x14c>)
 8001ea6:	4613      	mov	r3, r2
 8001ea8:	005b      	lsls	r3, r3, #1
 8001eaa:	4413      	add	r3, r2
 8001eac:	00db      	lsls	r3, r3, #3
 8001eae:	440b      	add	r3, r1
 8001eb0:	3308      	adds	r3, #8
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8001eb6:	4b2e      	ldr	r3, [pc, #184]	@ (8001f70 <linkTimer+0x144>)
 8001eb8:	781b      	ldrb	r3, [r3, #0]
 8001eba:	b2db      	uxtb	r3, r3
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	4a2e      	ldr	r2, [pc, #184]	@ (8001f78 <linkTimer+0x14c>)
 8001ec0:	460b      	mov	r3, r1
 8001ec2:	005b      	lsls	r3, r3, #1
 8001ec4:	440b      	add	r3, r1
 8001ec6:	00db      	lsls	r3, r3, #3
 8001ec8:	4413      	add	r3, r2
 8001eca:	3308      	adds	r3, #8
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	68ba      	ldr	r2, [r7, #8]
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	d337      	bcc.n	8001f44 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8001ed4:	4b26      	ldr	r3, [pc, #152]	@ (8001f70 <linkTimer+0x144>)
 8001ed6:	781b      	ldrb	r3, [r3, #0]
 8001ed8:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8001eda:	7b7a      	ldrb	r2, [r7, #13]
 8001edc:	4926      	ldr	r1, [pc, #152]	@ (8001f78 <linkTimer+0x14c>)
 8001ede:	4613      	mov	r3, r2
 8001ee0:	005b      	lsls	r3, r3, #1
 8001ee2:	4413      	add	r3, r2
 8001ee4:	00db      	lsls	r3, r3, #3
 8001ee6:	440b      	add	r3, r1
 8001ee8:	3315      	adds	r3, #21
 8001eea:	781b      	ldrb	r3, [r3, #0]
 8001eec:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001eee:	e013      	b.n	8001f18 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8001ef0:	7b7a      	ldrb	r2, [r7, #13]
 8001ef2:	4921      	ldr	r1, [pc, #132]	@ (8001f78 <linkTimer+0x14c>)
 8001ef4:	4613      	mov	r3, r2
 8001ef6:	005b      	lsls	r3, r3, #1
 8001ef8:	4413      	add	r3, r2
 8001efa:	00db      	lsls	r3, r3, #3
 8001efc:	440b      	add	r3, r1
 8001efe:	3315      	adds	r3, #21
 8001f00:	781b      	ldrb	r3, [r3, #0]
 8001f02:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8001f04:	7b7a      	ldrb	r2, [r7, #13]
 8001f06:	491c      	ldr	r1, [pc, #112]	@ (8001f78 <linkTimer+0x14c>)
 8001f08:	4613      	mov	r3, r2
 8001f0a:	005b      	lsls	r3, r3, #1
 8001f0c:	4413      	add	r3, r2
 8001f0e:	00db      	lsls	r3, r3, #3
 8001f10:	440b      	add	r3, r1
 8001f12:	3315      	adds	r3, #21
 8001f14:	781b      	ldrb	r3, [r3, #0]
 8001f16:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001f18:	7b3b      	ldrb	r3, [r7, #12]
 8001f1a:	2b06      	cmp	r3, #6
 8001f1c:	d00b      	beq.n	8001f36 <linkTimer+0x10a>
 8001f1e:	7b3a      	ldrb	r2, [r7, #12]
 8001f20:	4915      	ldr	r1, [pc, #84]	@ (8001f78 <linkTimer+0x14c>)
 8001f22:	4613      	mov	r3, r2
 8001f24:	005b      	lsls	r3, r3, #1
 8001f26:	4413      	add	r3, r2
 8001f28:	00db      	lsls	r3, r3, #3
 8001f2a:	440b      	add	r3, r1
 8001f2c:	3308      	adds	r3, #8
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	68ba      	ldr	r2, [r7, #8]
 8001f32:	429a      	cmp	r2, r3
 8001f34:	d2dc      	bcs.n	8001ef0 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8001f36:	7b7a      	ldrb	r2, [r7, #13]
 8001f38:	79fb      	ldrb	r3, [r7, #7]
 8001f3a:	4611      	mov	r1, r2
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f7ff fecf 	bl	8001ce0 <LinkTimerAfter>
 8001f42:	e00f      	b.n	8001f64 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8001f44:	4b0a      	ldr	r3, [pc, #40]	@ (8001f70 <linkTimer+0x144>)
 8001f46:	781b      	ldrb	r3, [r3, #0]
 8001f48:	b2da      	uxtb	r2, r3
 8001f4a:	79fb      	ldrb	r3, [r7, #7]
 8001f4c:	4611      	mov	r1, r2
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f7ff ff0c 	bl	8001d6c <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8001f54:	4b06      	ldr	r3, [pc, #24]	@ (8001f70 <linkTimer+0x144>)
 8001f56:	781b      	ldrb	r3, [r3, #0]
 8001f58:	b2da      	uxtb	r2, r3
 8001f5a:	4b06      	ldr	r3, [pc, #24]	@ (8001f74 <linkTimer+0x148>)
 8001f5c:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8001f5e:	4a04      	ldr	r2, [pc, #16]	@ (8001f70 <linkTimer+0x144>)
 8001f60:	79fb      	ldrb	r3, [r7, #7]
 8001f62:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8001f64:	89fb      	ldrh	r3, [r7, #14]
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	3710      	adds	r7, #16
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	200004f8 	.word	0x200004f8
 8001f74:	200004f9 	.word	0x200004f9
 8001f78:	20000468 	.word	0x20000468
 8001f7c:	200004fc 	.word	0x200004fc

08001f80 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b085      	sub	sp, #20
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	4603      	mov	r3, r0
 8001f88:	460a      	mov	r2, r1
 8001f8a:	71fb      	strb	r3, [r7, #7]
 8001f8c:	4613      	mov	r3, r2
 8001f8e:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8001f90:	4b39      	ldr	r3, [pc, #228]	@ (8002078 <UnlinkTimer+0xf8>)
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	b2db      	uxtb	r3, r3
 8001f96:	79fa      	ldrb	r2, [r7, #7]
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d111      	bne.n	8001fc0 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001f9c:	4b36      	ldr	r3, [pc, #216]	@ (8002078 <UnlinkTimer+0xf8>)
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	b2da      	uxtb	r2, r3
 8001fa2:	4b36      	ldr	r3, [pc, #216]	@ (800207c <UnlinkTimer+0xfc>)
 8001fa4:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8001fa6:	79fa      	ldrb	r2, [r7, #7]
 8001fa8:	4935      	ldr	r1, [pc, #212]	@ (8002080 <UnlinkTimer+0x100>)
 8001faa:	4613      	mov	r3, r2
 8001fac:	005b      	lsls	r3, r3, #1
 8001fae:	4413      	add	r3, r2
 8001fb0:	00db      	lsls	r3, r3, #3
 8001fb2:	440b      	add	r3, r1
 8001fb4:	3315      	adds	r3, #21
 8001fb6:	781b      	ldrb	r3, [r3, #0]
 8001fb8:	b2da      	uxtb	r2, r3
 8001fba:	4b2f      	ldr	r3, [pc, #188]	@ (8002078 <UnlinkTimer+0xf8>)
 8001fbc:	701a      	strb	r2, [r3, #0]
 8001fbe:	e03e      	b.n	800203e <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8001fc0:	79fa      	ldrb	r2, [r7, #7]
 8001fc2:	492f      	ldr	r1, [pc, #188]	@ (8002080 <UnlinkTimer+0x100>)
 8001fc4:	4613      	mov	r3, r2
 8001fc6:	005b      	lsls	r3, r3, #1
 8001fc8:	4413      	add	r3, r2
 8001fca:	00db      	lsls	r3, r3, #3
 8001fcc:	440b      	add	r3, r1
 8001fce:	3314      	adds	r3, #20
 8001fd0:	781b      	ldrb	r3, [r3, #0]
 8001fd2:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8001fd4:	79fa      	ldrb	r2, [r7, #7]
 8001fd6:	492a      	ldr	r1, [pc, #168]	@ (8002080 <UnlinkTimer+0x100>)
 8001fd8:	4613      	mov	r3, r2
 8001fda:	005b      	lsls	r3, r3, #1
 8001fdc:	4413      	add	r3, r2
 8001fde:	00db      	lsls	r3, r3, #3
 8001fe0:	440b      	add	r3, r1
 8001fe2:	3315      	adds	r3, #21
 8001fe4:	781b      	ldrb	r3, [r3, #0]
 8001fe6:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8001fe8:	79f9      	ldrb	r1, [r7, #7]
 8001fea:	7bfa      	ldrb	r2, [r7, #15]
 8001fec:	4824      	ldr	r0, [pc, #144]	@ (8002080 <UnlinkTimer+0x100>)
 8001fee:	460b      	mov	r3, r1
 8001ff0:	005b      	lsls	r3, r3, #1
 8001ff2:	440b      	add	r3, r1
 8001ff4:	00db      	lsls	r3, r3, #3
 8001ff6:	4403      	add	r3, r0
 8001ff8:	3315      	adds	r3, #21
 8001ffa:	781b      	ldrb	r3, [r3, #0]
 8001ffc:	b2d8      	uxtb	r0, r3
 8001ffe:	4920      	ldr	r1, [pc, #128]	@ (8002080 <UnlinkTimer+0x100>)
 8002000:	4613      	mov	r3, r2
 8002002:	005b      	lsls	r3, r3, #1
 8002004:	4413      	add	r3, r2
 8002006:	00db      	lsls	r3, r3, #3
 8002008:	440b      	add	r3, r1
 800200a:	3315      	adds	r3, #21
 800200c:	4602      	mov	r2, r0
 800200e:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002010:	7bbb      	ldrb	r3, [r7, #14]
 8002012:	2b06      	cmp	r3, #6
 8002014:	d013      	beq.n	800203e <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8002016:	79f9      	ldrb	r1, [r7, #7]
 8002018:	7bba      	ldrb	r2, [r7, #14]
 800201a:	4819      	ldr	r0, [pc, #100]	@ (8002080 <UnlinkTimer+0x100>)
 800201c:	460b      	mov	r3, r1
 800201e:	005b      	lsls	r3, r3, #1
 8002020:	440b      	add	r3, r1
 8002022:	00db      	lsls	r3, r3, #3
 8002024:	4403      	add	r3, r0
 8002026:	3314      	adds	r3, #20
 8002028:	781b      	ldrb	r3, [r3, #0]
 800202a:	b2d8      	uxtb	r0, r3
 800202c:	4914      	ldr	r1, [pc, #80]	@ (8002080 <UnlinkTimer+0x100>)
 800202e:	4613      	mov	r3, r2
 8002030:	005b      	lsls	r3, r3, #1
 8002032:	4413      	add	r3, r2
 8002034:	00db      	lsls	r3, r3, #3
 8002036:	440b      	add	r3, r1
 8002038:	3314      	adds	r3, #20
 800203a:	4602      	mov	r2, r0
 800203c:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 800203e:	79fa      	ldrb	r2, [r7, #7]
 8002040:	490f      	ldr	r1, [pc, #60]	@ (8002080 <UnlinkTimer+0x100>)
 8002042:	4613      	mov	r3, r2
 8002044:	005b      	lsls	r3, r3, #1
 8002046:	4413      	add	r3, r2
 8002048:	00db      	lsls	r3, r3, #3
 800204a:	440b      	add	r3, r1
 800204c:	330c      	adds	r3, #12
 800204e:	2201      	movs	r2, #1
 8002050:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8002052:	4b09      	ldr	r3, [pc, #36]	@ (8002078 <UnlinkTimer+0xf8>)
 8002054:	781b      	ldrb	r3, [r3, #0]
 8002056:	b2db      	uxtb	r3, r3
 8002058:	2b06      	cmp	r3, #6
 800205a:	d107      	bne.n	800206c <UnlinkTimer+0xec>
 800205c:	79bb      	ldrb	r3, [r7, #6]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d104      	bne.n	800206c <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8002062:	4b08      	ldr	r3, [pc, #32]	@ (8002084 <UnlinkTimer+0x104>)
 8002064:	f04f 32ff 	mov.w	r2, #4294967295
 8002068:	601a      	str	r2, [r3, #0]
  }

  return;
 800206a:	bf00      	nop
 800206c:	bf00      	nop
}
 800206e:	3714      	adds	r7, #20
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr
 8002078:	200004f8 	.word	0x200004f8
 800207c:	200004f9 	.word	0x200004f9
 8002080:	20000468 	.word	0x20000468
 8002084:	200004fc 	.word	0x200004fc

08002088 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b082      	sub	sp, #8
 800208c:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 800208e:	4b1a      	ldr	r3, [pc, #104]	@ (80020f8 <ReturnTimeElapsed+0x70>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002096:	d026      	beq.n	80020e6 <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8002098:	f7ff fe02 	bl	8001ca0 <ReadRtcSsrValue>
 800209c:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 800209e:	4b16      	ldr	r3, [pc, #88]	@ (80020f8 <ReturnTimeElapsed+0x70>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	687a      	ldr	r2, [r7, #4]
 80020a4:	429a      	cmp	r2, r3
 80020a6:	d805      	bhi.n	80020b4 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 80020a8:	4b13      	ldr	r3, [pc, #76]	@ (80020f8 <ReturnTimeElapsed+0x70>)
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	1ad3      	subs	r3, r2, r3
 80020b0:	607b      	str	r3, [r7, #4]
 80020b2:	e00a      	b.n	80020ca <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 80020b4:	4b11      	ldr	r3, [pc, #68]	@ (80020fc <ReturnTimeElapsed+0x74>)
 80020b6:	881b      	ldrh	r3, [r3, #0]
 80020b8:	461a      	mov	r2, r3
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	1ad3      	subs	r3, r2, r3
 80020be:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 80020c0:	4b0d      	ldr	r3, [pc, #52]	@ (80020f8 <ReturnTimeElapsed+0x70>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	683a      	ldr	r2, [r7, #0]
 80020c6:	4413      	add	r3, r2
 80020c8:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 80020ca:	4b0d      	ldr	r3, [pc, #52]	@ (8002100 <ReturnTimeElapsed+0x78>)
 80020cc:	781b      	ldrb	r3, [r3, #0]
 80020ce:	461a      	mov	r2, r3
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	fb02 f303 	mul.w	r3, r2, r3
 80020d6:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 80020d8:	4b0a      	ldr	r3, [pc, #40]	@ (8002104 <ReturnTimeElapsed+0x7c>)
 80020da:	781b      	ldrb	r3, [r3, #0]
 80020dc:	461a      	mov	r2, r3
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	40d3      	lsrs	r3, r2
 80020e2:	607b      	str	r3, [r7, #4]
 80020e4:	e001      	b.n	80020ea <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 80020e6:	2300      	movs	r3, #0
 80020e8:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	b29b      	uxth	r3, r3
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	3708      	adds	r7, #8
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	200004fc 	.word	0x200004fc
 80020fc:	20000504 	.word	0x20000504
 8002100:	20000502 	.word	0x20000502
 8002104:	20000501 	.word	0x20000501

08002108 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b082      	sub	sp, #8
 800210c:	af00      	add	r7, sp, #0
 800210e:	4603      	mov	r3, r0
 8002110:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 8002112:	88fb      	ldrh	r3, [r7, #6]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d108      	bne.n	800212a <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8002118:	f7ff fdc2 	bl	8001ca0 <ReadRtcSsrValue>
 800211c:	4603      	mov	r3, r0
 800211e:	4a21      	ldr	r2, [pc, #132]	@ (80021a4 <RestartWakeupCounter+0x9c>)
 8002120:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8002122:	2003      	movs	r0, #3
 8002124:	f006 fc21 	bl	800896a <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8002128:	e039      	b.n	800219e <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 800212a:	88fb      	ldrh	r3, [r7, #6]
 800212c:	2b01      	cmp	r3, #1
 800212e:	d803      	bhi.n	8002138 <RestartWakeupCounter+0x30>
 8002130:	4b1d      	ldr	r3, [pc, #116]	@ (80021a8 <RestartWakeupCounter+0xa0>)
 8002132:	781b      	ldrb	r3, [r3, #0]
 8002134:	2b01      	cmp	r3, #1
 8002136:	d002      	beq.n	800213e <RestartWakeupCounter+0x36>
      Value -= 1;
 8002138:	88fb      	ldrh	r3, [r7, #6]
 800213a:	3b01      	subs	r3, #1
 800213c:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 800213e:	bf00      	nop
 8002140:	4b1a      	ldr	r3, [pc, #104]	@ (80021ac <RestartWakeupCounter+0xa4>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	68db      	ldr	r3, [r3, #12]
 8002146:	f003 0304 	and.w	r3, r3, #4
 800214a:	2b00      	cmp	r3, #0
 800214c:	d0f8      	beq.n	8002140 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 800214e:	4b17      	ldr	r3, [pc, #92]	@ (80021ac <RestartWakeupCounter+0xa4>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	b2da      	uxtb	r2, r3
 8002156:	4b15      	ldr	r3, [pc, #84]	@ (80021ac <RestartWakeupCounter+0xa4>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 800215e:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8002160:	4b13      	ldr	r3, [pc, #76]	@ (80021b0 <RestartWakeupCounter+0xa8>)
 8002162:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8002166:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8002168:	2003      	movs	r0, #3
 800216a:	f006 fc0c 	bl	8008986 <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 800216e:	4b11      	ldr	r3, [pc, #68]	@ (80021b4 <RestartWakeupCounter+0xac>)
 8002170:	695b      	ldr	r3, [r3, #20]
 8002172:	0c1b      	lsrs	r3, r3, #16
 8002174:	041b      	lsls	r3, r3, #16
 8002176:	88fa      	ldrh	r2, [r7, #6]
 8002178:	490e      	ldr	r1, [pc, #56]	@ (80021b4 <RestartWakeupCounter+0xac>)
 800217a:	4313      	orrs	r3, r2
 800217c:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 800217e:	f7ff fd8f 	bl	8001ca0 <ReadRtcSsrValue>
 8002182:	4603      	mov	r3, r0
 8002184:	4a07      	ldr	r2, [pc, #28]	@ (80021a4 <RestartWakeupCounter+0x9c>)
 8002186:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 8002188:	4b08      	ldr	r3, [pc, #32]	@ (80021ac <RestartWakeupCounter+0xa4>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	689a      	ldr	r2, [r3, #8]
 800218e:	4b07      	ldr	r3, [pc, #28]	@ (80021ac <RestartWakeupCounter+0xa4>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002196:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8002198:	f3af 8000 	nop.w
  return ;
 800219c:	bf00      	nop
}
 800219e:	3708      	adds	r7, #8
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	200004fc 	.word	0x200004fc
 80021a8:	20000501 	.word	0x20000501
 80021ac:	20000d44 	.word	0x20000d44
 80021b0:	58000800 	.word	0x58000800
 80021b4:	40002800 	.word	0x40002800

080021b8 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b084      	sub	sp, #16
 80021bc:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 80021be:	4b45      	ldr	r3, [pc, #276]	@ (80022d4 <RescheduleTimerList+0x11c>)
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80021ca:	d107      	bne.n	80021dc <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 80021cc:	bf00      	nop
 80021ce:	4b42      	ldr	r3, [pc, #264]	@ (80022d8 <RescheduleTimerList+0x120>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	68db      	ldr	r3, [r3, #12]
 80021d4:	f003 0304 	and.w	r3, r3, #4
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d1f8      	bne.n	80021ce <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 80021dc:	4b3e      	ldr	r3, [pc, #248]	@ (80022d8 <RescheduleTimerList+0x120>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	689a      	ldr	r2, [r3, #8]
 80021e2:	4b3d      	ldr	r3, [pc, #244]	@ (80022d8 <RescheduleTimerList+0x120>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80021ea:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 80021ec:	4b3b      	ldr	r3, [pc, #236]	@ (80022dc <RescheduleTimerList+0x124>)
 80021ee:	781b      	ldrb	r3, [r3, #0]
 80021f0:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 80021f2:	7bfa      	ldrb	r2, [r7, #15]
 80021f4:	493a      	ldr	r1, [pc, #232]	@ (80022e0 <RescheduleTimerList+0x128>)
 80021f6:	4613      	mov	r3, r2
 80021f8:	005b      	lsls	r3, r3, #1
 80021fa:	4413      	add	r3, r2
 80021fc:	00db      	lsls	r3, r3, #3
 80021fe:	440b      	add	r3, r1
 8002200:	3308      	adds	r3, #8
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8002206:	f7ff ff3f 	bl	8002088 <ReturnTimeElapsed>
 800220a:	4603      	mov	r3, r0
 800220c:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 800220e:	88fb      	ldrh	r3, [r7, #6]
 8002210:	68ba      	ldr	r2, [r7, #8]
 8002212:	429a      	cmp	r2, r3
 8002214:	d205      	bcs.n	8002222 <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8002216:	2300      	movs	r3, #0
 8002218:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 800221a:	4b32      	ldr	r3, [pc, #200]	@ (80022e4 <RescheduleTimerList+0x12c>)
 800221c:	2201      	movs	r2, #1
 800221e:	701a      	strb	r2, [r3, #0]
 8002220:	e04d      	b.n	80022be <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8002222:	88fb      	ldrh	r3, [r7, #6]
 8002224:	4a30      	ldr	r2, [pc, #192]	@ (80022e8 <RescheduleTimerList+0x130>)
 8002226:	8812      	ldrh	r2, [r2, #0]
 8002228:	b292      	uxth	r2, r2
 800222a:	4413      	add	r3, r2
 800222c:	461a      	mov	r2, r3
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	4293      	cmp	r3, r2
 8002232:	d906      	bls.n	8002242 <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8002234:	4b2c      	ldr	r3, [pc, #176]	@ (80022e8 <RescheduleTimerList+0x130>)
 8002236:	881b      	ldrh	r3, [r3, #0]
 8002238:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 800223a:	4b2a      	ldr	r3, [pc, #168]	@ (80022e4 <RescheduleTimerList+0x12c>)
 800223c:	2200      	movs	r2, #0
 800223e:	701a      	strb	r2, [r3, #0]
 8002240:	e03d      	b.n	80022be <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8002242:	68bb      	ldr	r3, [r7, #8]
 8002244:	b29a      	uxth	r2, r3
 8002246:	88fb      	ldrh	r3, [r7, #6]
 8002248:	1ad3      	subs	r3, r2, r3
 800224a:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 800224c:	4b25      	ldr	r3, [pc, #148]	@ (80022e4 <RescheduleTimerList+0x12c>)
 800224e:	2201      	movs	r2, #1
 8002250:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002252:	e034      	b.n	80022be <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8002254:	7bfa      	ldrb	r2, [r7, #15]
 8002256:	4922      	ldr	r1, [pc, #136]	@ (80022e0 <RescheduleTimerList+0x128>)
 8002258:	4613      	mov	r3, r2
 800225a:	005b      	lsls	r3, r3, #1
 800225c:	4413      	add	r3, r2
 800225e:	00db      	lsls	r3, r3, #3
 8002260:	440b      	add	r3, r1
 8002262:	3308      	adds	r3, #8
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	88fb      	ldrh	r3, [r7, #6]
 8002268:	429a      	cmp	r2, r3
 800226a:	d20a      	bcs.n	8002282 <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 800226c:	7bfa      	ldrb	r2, [r7, #15]
 800226e:	491c      	ldr	r1, [pc, #112]	@ (80022e0 <RescheduleTimerList+0x128>)
 8002270:	4613      	mov	r3, r2
 8002272:	005b      	lsls	r3, r3, #1
 8002274:	4413      	add	r3, r2
 8002276:	00db      	lsls	r3, r3, #3
 8002278:	440b      	add	r3, r1
 800227a:	3308      	adds	r3, #8
 800227c:	2200      	movs	r2, #0
 800227e:	601a      	str	r2, [r3, #0]
 8002280:	e013      	b.n	80022aa <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8002282:	7bfa      	ldrb	r2, [r7, #15]
 8002284:	4916      	ldr	r1, [pc, #88]	@ (80022e0 <RescheduleTimerList+0x128>)
 8002286:	4613      	mov	r3, r2
 8002288:	005b      	lsls	r3, r3, #1
 800228a:	4413      	add	r3, r2
 800228c:	00db      	lsls	r3, r3, #3
 800228e:	440b      	add	r3, r1
 8002290:	3308      	adds	r3, #8
 8002292:	6819      	ldr	r1, [r3, #0]
 8002294:	88fb      	ldrh	r3, [r7, #6]
 8002296:	7bfa      	ldrb	r2, [r7, #15]
 8002298:	1ac9      	subs	r1, r1, r3
 800229a:	4811      	ldr	r0, [pc, #68]	@ (80022e0 <RescheduleTimerList+0x128>)
 800229c:	4613      	mov	r3, r2
 800229e:	005b      	lsls	r3, r3, #1
 80022a0:	4413      	add	r3, r2
 80022a2:	00db      	lsls	r3, r3, #3
 80022a4:	4403      	add	r3, r0
 80022a6:	3308      	adds	r3, #8
 80022a8:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 80022aa:	7bfa      	ldrb	r2, [r7, #15]
 80022ac:	490c      	ldr	r1, [pc, #48]	@ (80022e0 <RescheduleTimerList+0x128>)
 80022ae:	4613      	mov	r3, r2
 80022b0:	005b      	lsls	r3, r3, #1
 80022b2:	4413      	add	r3, r2
 80022b4:	00db      	lsls	r3, r3, #3
 80022b6:	440b      	add	r3, r1
 80022b8:	3315      	adds	r3, #21
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80022be:	7bfb      	ldrb	r3, [r7, #15]
 80022c0:	2b06      	cmp	r3, #6
 80022c2:	d1c7      	bne.n	8002254 <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 80022c4:	89bb      	ldrh	r3, [r7, #12]
 80022c6:	4618      	mov	r0, r3
 80022c8:	f7ff ff1e 	bl	8002108 <RestartWakeupCounter>

  return ;
 80022cc:	bf00      	nop
}
 80022ce:	3710      	adds	r7, #16
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	40002800 	.word	0x40002800
 80022d8:	20000d44 	.word	0x20000d44
 80022dc:	200004f8 	.word	0x200004f8
 80022e0:	20000468 	.word	0x20000468
 80022e4:	20000500 	.word	0x20000500
 80022e8:	20000506 	.word	0x20000506

080022ec <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b08a      	sub	sp, #40	@ 0x28
 80022f0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80022f2:	f3ef 8310 	mrs	r3, PRIMASK
 80022f6:	617b      	str	r3, [r7, #20]
  return(result);
 80022f8:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80022fa:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 80022fc:	b672      	cpsid	i
}
 80022fe:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002300:	4b59      	ldr	r3, [pc, #356]	@ (8002468 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	22ca      	movs	r2, #202	@ 0xca
 8002306:	625a      	str	r2, [r3, #36]	@ 0x24
 8002308:	4b57      	ldr	r3, [pc, #348]	@ (8002468 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	2253      	movs	r2, #83	@ 0x53
 800230e:	625a      	str	r2, [r3, #36]	@ 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 8002310:	4b55      	ldr	r3, [pc, #340]	@ (8002468 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	689a      	ldr	r2, [r3, #8]
 8002316:	4b54      	ldr	r3, [pc, #336]	@ (8002468 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800231e:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8002320:	4b52      	ldr	r3, [pc, #328]	@ (800246c <HW_TS_RTC_Wakeup_Handler+0x180>)
 8002322:	781b      	ldrb	r3, [r3, #0]
 8002324:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8002328:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800232c:	4950      	ldr	r1, [pc, #320]	@ (8002470 <HW_TS_RTC_Wakeup_Handler+0x184>)
 800232e:	4613      	mov	r3, r2
 8002330:	005b      	lsls	r3, r3, #1
 8002332:	4413      	add	r3, r2
 8002334:	00db      	lsls	r3, r3, #3
 8002336:	440b      	add	r3, r1
 8002338:	330c      	adds	r3, #12
 800233a:	781b      	ldrb	r3, [r3, #0]
 800233c:	b2db      	uxtb	r3, r3
 800233e:	2b02      	cmp	r3, #2
 8002340:	d16e      	bne.n	8002420 <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8002342:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8002346:	494a      	ldr	r1, [pc, #296]	@ (8002470 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8002348:	4613      	mov	r3, r2
 800234a:	005b      	lsls	r3, r3, #1
 800234c:	4413      	add	r3, r2
 800234e:	00db      	lsls	r3, r3, #3
 8002350:	440b      	add	r3, r1
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8002356:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800235a:	4945      	ldr	r1, [pc, #276]	@ (8002470 <HW_TS_RTC_Wakeup_Handler+0x184>)
 800235c:	4613      	mov	r3, r2
 800235e:	005b      	lsls	r3, r3, #1
 8002360:	4413      	add	r3, r2
 8002362:	00db      	lsls	r3, r3, #3
 8002364:	440b      	add	r3, r1
 8002366:	3310      	adds	r3, #16
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 800236c:	4b41      	ldr	r3, [pc, #260]	@ (8002474 <HW_TS_RTC_Wakeup_Handler+0x188>)
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	b2db      	uxtb	r3, r3
 8002372:	2b00      	cmp	r3, #0
 8002374:	d04c      	beq.n	8002410 <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8002376:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800237a:	493d      	ldr	r1, [pc, #244]	@ (8002470 <HW_TS_RTC_Wakeup_Handler+0x184>)
 800237c:	4613      	mov	r3, r2
 800237e:	005b      	lsls	r3, r3, #1
 8002380:	4413      	add	r3, r2
 8002382:	00db      	lsls	r3, r3, #3
 8002384:	440b      	add	r3, r1
 8002386:	330d      	adds	r3, #13
 8002388:	781b      	ldrb	r3, [r3, #0]
 800238a:	b2db      	uxtb	r3, r3
 800238c:	2b01      	cmp	r3, #1
 800238e:	d124      	bne.n	80023da <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8002390:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002394:	2101      	movs	r1, #1
 8002396:	4618      	mov	r0, r3
 8002398:	f7ff fdf2 	bl	8001f80 <UnlinkTimer>
 800239c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800239e:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	f383 8810 	msr	PRIMASK, r3
}
 80023a6:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 80023a8:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80023ac:	4930      	ldr	r1, [pc, #192]	@ (8002470 <HW_TS_RTC_Wakeup_Handler+0x184>)
 80023ae:	4613      	mov	r3, r2
 80023b0:	005b      	lsls	r3, r3, #1
 80023b2:	4413      	add	r3, r2
 80023b4:	00db      	lsls	r3, r3, #3
 80023b6:	440b      	add	r3, r1
 80023b8:	3304      	adds	r3, #4
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80023c0:	4611      	mov	r1, r2
 80023c2:	4618      	mov	r0, r3
 80023c4:	f000 f9b8 	bl	8002738 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80023c8:	4b27      	ldr	r3, [pc, #156]	@ (8002468 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	22ca      	movs	r2, #202	@ 0xca
 80023ce:	625a      	str	r2, [r3, #36]	@ 0x24
 80023d0:	4b25      	ldr	r3, [pc, #148]	@ (8002468 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	2253      	movs	r2, #83	@ 0x53
 80023d6:	625a      	str	r2, [r3, #36]	@ 0x24
 80023d8:	e012      	b.n	8002400 <HW_TS_RTC_Wakeup_Handler+0x114>
 80023da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023dc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	f383 8810 	msr	PRIMASK, r3
}
 80023e4:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 80023e6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80023ea:	4618      	mov	r0, r3
 80023ec:	f000 f920 	bl	8002630 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80023f0:	4b1d      	ldr	r3, [pc, #116]	@ (8002468 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	22ca      	movs	r2, #202	@ 0xca
 80023f6:	625a      	str	r2, [r3, #36]	@ 0x24
 80023f8:	4b1b      	ldr	r3, [pc, #108]	@ (8002468 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	2253      	movs	r2, #83	@ 0x53
 80023fe:	625a      	str	r2, [r3, #36]	@ 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8002400:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002404:	69fa      	ldr	r2, [r7, #28]
 8002406:	4619      	mov	r1, r3
 8002408:	69b8      	ldr	r0, [r7, #24]
 800240a:	f000 fa1b 	bl	8002844 <HW_TS_RTC_Int_AppNot>
 800240e:	e022      	b.n	8002456 <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 8002410:	f7ff fed2 	bl	80021b8 <RescheduleTimerList>
 8002414:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002416:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	f383 8810 	msr	PRIMASK, r3
}
 800241e:	e01a      	b.n	8002456 <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8002420:	bf00      	nop
 8002422:	4b11      	ldr	r3, [pc, #68]	@ (8002468 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	f003 0304 	and.w	r3, r3, #4
 800242c:	2b00      	cmp	r3, #0
 800242e:	d0f8      	beq.n	8002422 <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8002430:	4b0d      	ldr	r3, [pc, #52]	@ (8002468 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	68db      	ldr	r3, [r3, #12]
 8002436:	b2da      	uxtb	r2, r3
 8002438:	4b0b      	ldr	r3, [pc, #44]	@ (8002468 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8002440:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8002442:	4b0d      	ldr	r3, [pc, #52]	@ (8002478 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8002444:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8002448:	60da      	str	r2, [r3, #12]
 800244a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800244c:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	f383 8810 	msr	PRIMASK, r3
}
 8002454:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8002456:	4b04      	ldr	r3, [pc, #16]	@ (8002468 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	22ff      	movs	r2, #255	@ 0xff
 800245c:	625a      	str	r2, [r3, #36]	@ 0x24

  return;
 800245e:	bf00      	nop
}
 8002460:	3728      	adds	r7, #40	@ 0x28
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	20000d44 	.word	0x20000d44
 800246c:	200004f8 	.word	0x200004f8
 8002470:	20000468 	.word	0x20000468
 8002474:	20000500 	.word	0x20000500
 8002478:	58000800 	.word	0x58000800

0800247c <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b088      	sub	sp, #32
 8002480:	af00      	add	r7, sp, #0
 8002482:	4603      	mov	r3, r0
 8002484:	6039      	str	r1, [r7, #0]
 8002486:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002488:	4b5e      	ldr	r3, [pc, #376]	@ (8002604 <HW_TS_Init+0x188>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	22ca      	movs	r2, #202	@ 0xca
 800248e:	625a      	str	r2, [r3, #36]	@ 0x24
 8002490:	4b5c      	ldr	r3, [pc, #368]	@ (8002604 <HW_TS_Init+0x188>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	2253      	movs	r2, #83	@ 0x53
 8002496:	625a      	str	r2, [r3, #36]	@ 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002498:	4b5b      	ldr	r3, [pc, #364]	@ (8002608 <HW_TS_Init+0x18c>)
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	4a5a      	ldr	r2, [pc, #360]	@ (8002608 <HW_TS_Init+0x18c>)
 800249e:	f043 0320 	orr.w	r3, r3, #32
 80024a2:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 80024a4:	4b58      	ldr	r3, [pc, #352]	@ (8002608 <HW_TS_Init+0x18c>)
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	f003 0307 	and.w	r3, r3, #7
 80024ae:	b2db      	uxtb	r3, r3
 80024b0:	f1c3 0304 	rsb	r3, r3, #4
 80024b4:	b2da      	uxtb	r2, r3
 80024b6:	4b55      	ldr	r3, [pc, #340]	@ (800260c <HW_TS_Init+0x190>)
 80024b8:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 80024ba:	4b53      	ldr	r3, [pc, #332]	@ (8002608 <HW_TS_Init+0x18c>)
 80024bc:	691b      	ldr	r3, [r3, #16]
 80024be:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80024c2:	f44f 02fe 	mov.w	r2, #8323072	@ 0x7f0000
 80024c6:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024c8:	693a      	ldr	r2, [r7, #16]
 80024ca:	fa92 f2a2 	rbit	r2, r2
 80024ce:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80024d0:	68fa      	ldr	r2, [r7, #12]
 80024d2:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80024d4:	697a      	ldr	r2, [r7, #20]
 80024d6:	2a00      	cmp	r2, #0
 80024d8:	d101      	bne.n	80024de <HW_TS_Init+0x62>
  {
    return 32U;
 80024da:	2220      	movs	r2, #32
 80024dc:	e003      	b.n	80024e6 <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 80024de:	697a      	ldr	r2, [r7, #20]
 80024e0:	fab2 f282 	clz	r2, r2
 80024e4:	b2d2      	uxtb	r2, r2
 80024e6:	40d3      	lsrs	r3, r2
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	3301      	adds	r3, #1
 80024ec:	b2da      	uxtb	r2, r3
 80024ee:	4b48      	ldr	r3, [pc, #288]	@ (8002610 <HW_TS_Init+0x194>)
 80024f0:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 80024f2:	4b45      	ldr	r3, [pc, #276]	@ (8002608 <HW_TS_Init+0x18c>)
 80024f4:	691b      	ldr	r3, [r3, #16]
 80024f6:	b29b      	uxth	r3, r3
 80024f8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80024fc:	b29b      	uxth	r3, r3
 80024fe:	3301      	adds	r3, #1
 8002500:	b29a      	uxth	r2, r3
 8002502:	4b44      	ldr	r3, [pc, #272]	@ (8002614 <HW_TS_Init+0x198>)
 8002504:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8002506:	4b43      	ldr	r3, [pc, #268]	@ (8002614 <HW_TS_Init+0x198>)
 8002508:	881b      	ldrh	r3, [r3, #0]
 800250a:	3b01      	subs	r3, #1
 800250c:	4a40      	ldr	r2, [pc, #256]	@ (8002610 <HW_TS_Init+0x194>)
 800250e:	7812      	ldrb	r2, [r2, #0]
 8002510:	fb02 f303 	mul.w	r3, r2, r3
 8002514:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002518:	4a3c      	ldr	r2, [pc, #240]	@ (800260c <HW_TS_Init+0x190>)
 800251a:	7812      	ldrb	r2, [r2, #0]
 800251c:	40d3      	lsrs	r3, r2
 800251e:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8002520:	69bb      	ldr	r3, [r7, #24]
 8002522:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8002526:	4293      	cmp	r3, r2
 8002528:	d904      	bls.n	8002534 <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 800252a:	4b3b      	ldr	r3, [pc, #236]	@ (8002618 <HW_TS_Init+0x19c>)
 800252c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002530:	801a      	strh	r2, [r3, #0]
 8002532:	e003      	b.n	800253c <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8002534:	69bb      	ldr	r3, [r7, #24]
 8002536:	b29a      	uxth	r2, r3
 8002538:	4b37      	ldr	r3, [pc, #220]	@ (8002618 <HW_TS_Init+0x19c>)
 800253a:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 800253c:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8002540:	f7ff fb9c 	bl	8001c7c <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8002544:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8002548:	f7ff fb84 	bl	8001c54 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 800254c:	79fb      	ldrb	r3, [r7, #7]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d13d      	bne.n	80025ce <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8002552:	4b32      	ldr	r3, [pc, #200]	@ (800261c <HW_TS_Init+0x1a0>)
 8002554:	2201      	movs	r2, #1
 8002556:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8002558:	4b31      	ldr	r3, [pc, #196]	@ (8002620 <HW_TS_Init+0x1a4>)
 800255a:	f04f 32ff 	mov.w	r2, #4294967295
 800255e:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8002560:	2300      	movs	r3, #0
 8002562:	77fb      	strb	r3, [r7, #31]
 8002564:	e00c      	b.n	8002580 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8002566:	7ffa      	ldrb	r2, [r7, #31]
 8002568:	492e      	ldr	r1, [pc, #184]	@ (8002624 <HW_TS_Init+0x1a8>)
 800256a:	4613      	mov	r3, r2
 800256c:	005b      	lsls	r3, r3, #1
 800256e:	4413      	add	r3, r2
 8002570:	00db      	lsls	r3, r3, #3
 8002572:	440b      	add	r3, r1
 8002574:	330c      	adds	r3, #12
 8002576:	2200      	movs	r2, #0
 8002578:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 800257a:	7ffb      	ldrb	r3, [r7, #31]
 800257c:	3301      	adds	r3, #1
 800257e:	77fb      	strb	r3, [r7, #31]
 8002580:	7ffb      	ldrb	r3, [r7, #31]
 8002582:	2b05      	cmp	r3, #5
 8002584:	d9ef      	bls.n	8002566 <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8002586:	4b28      	ldr	r3, [pc, #160]	@ (8002628 <HW_TS_Init+0x1ac>)
 8002588:	2206      	movs	r2, #6
 800258a:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 800258c:	4b1d      	ldr	r3, [pc, #116]	@ (8002604 <HW_TS_Init+0x188>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	689a      	ldr	r2, [r3, #8]
 8002592:	4b1c      	ldr	r3, [pc, #112]	@ (8002604 <HW_TS_Init+0x188>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800259a:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 800259c:	4b19      	ldr	r3, [pc, #100]	@ (8002604 <HW_TS_Init+0x188>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	68db      	ldr	r3, [r3, #12]
 80025a2:	b2da      	uxtb	r2, r3
 80025a4:	4b17      	ldr	r3, [pc, #92]	@ (8002604 <HW_TS_Init+0x188>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 80025ac:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 80025ae:	4b1f      	ldr	r3, [pc, #124]	@ (800262c <HW_TS_Init+0x1b0>)
 80025b0:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80025b4:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 80025b6:	2003      	movs	r0, #3
 80025b8:	f006 f9e5 	bl	8008986 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 80025bc:	4b11      	ldr	r3, [pc, #68]	@ (8002604 <HW_TS_Init+0x188>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	689a      	ldr	r2, [r3, #8]
 80025c2:	4b10      	ldr	r3, [pc, #64]	@ (8002604 <HW_TS_Init+0x188>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80025ca:	609a      	str	r2, [r3, #8]
 80025cc:	e009      	b.n	80025e2 <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 80025ce:	4b0d      	ldr	r3, [pc, #52]	@ (8002604 <HW_TS_Init+0x188>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	68db      	ldr	r3, [r3, #12]
 80025d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d002      	beq.n	80025e2 <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 80025dc:	2003      	movs	r0, #3
 80025de:	f006 f9c4 	bl	800896a <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80025e2:	4b08      	ldr	r3, [pc, #32]	@ (8002604 <HW_TS_Init+0x188>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	22ff      	movs	r2, #255	@ 0xff
 80025e8:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 80025ea:	2200      	movs	r2, #0
 80025ec:	2103      	movs	r1, #3
 80025ee:	2003      	movs	r0, #3
 80025f0:	f006 f979 	bl	80088e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80025f4:	2003      	movs	r0, #3
 80025f6:	f006 f990 	bl	800891a <HAL_NVIC_EnableIRQ>

  return;
 80025fa:	bf00      	nop
}
 80025fc:	3720      	adds	r7, #32
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	20000d44 	.word	0x20000d44
 8002608:	40002800 	.word	0x40002800
 800260c:	20000501 	.word	0x20000501
 8002610:	20000502 	.word	0x20000502
 8002614:	20000504 	.word	0x20000504
 8002618:	20000506 	.word	0x20000506
 800261c:	20000500 	.word	0x20000500
 8002620:	200004fc 	.word	0x200004fc
 8002624:	20000468 	.word	0x20000468
 8002628:	200004f8 	.word	0x200004f8
 800262c:	58000800 	.word	0x58000800

08002630 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b086      	sub	sp, #24
 8002634:	af00      	add	r7, sp, #0
 8002636:	4603      	mov	r3, r0
 8002638:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800263a:	f3ef 8310 	mrs	r3, PRIMASK
 800263e:	60fb      	str	r3, [r7, #12]
  return(result);
 8002640:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8002642:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8002644:	b672      	cpsid	i
}
 8002646:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8002648:	2003      	movs	r0, #3
 800264a:	f006 f974 	bl	8008936 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800264e:	4b34      	ldr	r3, [pc, #208]	@ (8002720 <HW_TS_Stop+0xf0>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	22ca      	movs	r2, #202	@ 0xca
 8002654:	625a      	str	r2, [r3, #36]	@ 0x24
 8002656:	4b32      	ldr	r3, [pc, #200]	@ (8002720 <HW_TS_Stop+0xf0>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	2253      	movs	r2, #83	@ 0x53
 800265c:	625a      	str	r2, [r3, #36]	@ 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 800265e:	79fa      	ldrb	r2, [r7, #7]
 8002660:	4930      	ldr	r1, [pc, #192]	@ (8002724 <HW_TS_Stop+0xf4>)
 8002662:	4613      	mov	r3, r2
 8002664:	005b      	lsls	r3, r3, #1
 8002666:	4413      	add	r3, r2
 8002668:	00db      	lsls	r3, r3, #3
 800266a:	440b      	add	r3, r1
 800266c:	330c      	adds	r3, #12
 800266e:	781b      	ldrb	r3, [r3, #0]
 8002670:	b2db      	uxtb	r3, r3
 8002672:	2b02      	cmp	r3, #2
 8002674:	d142      	bne.n	80026fc <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8002676:	79fb      	ldrb	r3, [r7, #7]
 8002678:	2100      	movs	r1, #0
 800267a:	4618      	mov	r0, r3
 800267c:	f7ff fc80 	bl	8001f80 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8002680:	4b29      	ldr	r3, [pc, #164]	@ (8002728 <HW_TS_Stop+0xf8>)
 8002682:	781b      	ldrb	r3, [r3, #0]
 8002684:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002686:	7cfb      	ldrb	r3, [r7, #19]
 8002688:	2b06      	cmp	r3, #6
 800268a:	d12f      	bne.n	80026ec <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 800268c:	4b27      	ldr	r3, [pc, #156]	@ (800272c <HW_TS_Stop+0xfc>)
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002694:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002698:	d107      	bne.n	80026aa <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 800269a:	bf00      	nop
 800269c:	4b20      	ldr	r3, [pc, #128]	@ (8002720 <HW_TS_Stop+0xf0>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	68db      	ldr	r3, [r3, #12]
 80026a2:	f003 0304 	and.w	r3, r3, #4
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d1f8      	bne.n	800269c <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 80026aa:	4b1d      	ldr	r3, [pc, #116]	@ (8002720 <HW_TS_Stop+0xf0>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	689a      	ldr	r2, [r3, #8]
 80026b0:	4b1b      	ldr	r3, [pc, #108]	@ (8002720 <HW_TS_Stop+0xf0>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80026b8:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 80026ba:	bf00      	nop
 80026bc:	4b18      	ldr	r3, [pc, #96]	@ (8002720 <HW_TS_Stop+0xf0>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	68db      	ldr	r3, [r3, #12]
 80026c2:	f003 0304 	and.w	r3, r3, #4
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d0f8      	beq.n	80026bc <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80026ca:	4b15      	ldr	r3, [pc, #84]	@ (8002720 <HW_TS_Stop+0xf0>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	68db      	ldr	r3, [r3, #12]
 80026d0:	b2da      	uxtb	r2, r3
 80026d2:	4b13      	ldr	r3, [pc, #76]	@ (8002720 <HW_TS_Stop+0xf0>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 80026da:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80026dc:	4b14      	ldr	r3, [pc, #80]	@ (8002730 <HW_TS_Stop+0x100>)
 80026de:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80026e2:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 80026e4:	2003      	movs	r0, #3
 80026e6:	f006 f94e 	bl	8008986 <HAL_NVIC_ClearPendingIRQ>
 80026ea:	e007      	b.n	80026fc <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80026ec:	4b11      	ldr	r3, [pc, #68]	@ (8002734 <HW_TS_Stop+0x104>)
 80026ee:	781b      	ldrb	r3, [r3, #0]
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	7cfa      	ldrb	r2, [r7, #19]
 80026f4:	429a      	cmp	r2, r3
 80026f6:	d001      	beq.n	80026fc <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 80026f8:	f7ff fd5e 	bl	80021b8 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80026fc:	4b08      	ldr	r3, [pc, #32]	@ (8002720 <HW_TS_Stop+0xf0>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	22ff      	movs	r2, #255	@ 0xff
 8002702:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8002704:	2003      	movs	r0, #3
 8002706:	f006 f908 	bl	800891a <HAL_NVIC_EnableIRQ>
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	f383 8810 	msr	PRIMASK, r3
}
 8002714:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8002716:	bf00      	nop
}
 8002718:	3718      	adds	r7, #24
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	20000d44 	.word	0x20000d44
 8002724:	20000468 	.word	0x20000468
 8002728:	200004f8 	.word	0x200004f8
 800272c:	40002800 	.word	0x40002800
 8002730:	58000800 	.word	0x58000800
 8002734:	200004f9 	.word	0x200004f9

08002738 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b086      	sub	sp, #24
 800273c:	af00      	add	r7, sp, #0
 800273e:	4603      	mov	r3, r0
 8002740:	6039      	str	r1, [r7, #0]
 8002742:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8002744:	79fa      	ldrb	r2, [r7, #7]
 8002746:	493b      	ldr	r1, [pc, #236]	@ (8002834 <HW_TS_Start+0xfc>)
 8002748:	4613      	mov	r3, r2
 800274a:	005b      	lsls	r3, r3, #1
 800274c:	4413      	add	r3, r2
 800274e:	00db      	lsls	r3, r3, #3
 8002750:	440b      	add	r3, r1
 8002752:	330c      	adds	r3, #12
 8002754:	781b      	ldrb	r3, [r3, #0]
 8002756:	b2db      	uxtb	r3, r3
 8002758:	2b02      	cmp	r3, #2
 800275a:	d103      	bne.n	8002764 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 800275c:	79fb      	ldrb	r3, [r7, #7]
 800275e:	4618      	mov	r0, r3
 8002760:	f7ff ff66 	bl	8002630 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002764:	f3ef 8310 	mrs	r3, PRIMASK
 8002768:	60fb      	str	r3, [r7, #12]
  return(result);
 800276a:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800276c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800276e:	b672      	cpsid	i
}
 8002770:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8002772:	2003      	movs	r0, #3
 8002774:	f006 f8df 	bl	8008936 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002778:	4b2f      	ldr	r3, [pc, #188]	@ (8002838 <HW_TS_Start+0x100>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	22ca      	movs	r2, #202	@ 0xca
 800277e:	625a      	str	r2, [r3, #36]	@ 0x24
 8002780:	4b2d      	ldr	r3, [pc, #180]	@ (8002838 <HW_TS_Start+0x100>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	2253      	movs	r2, #83	@ 0x53
 8002786:	625a      	str	r2, [r3, #36]	@ 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8002788:	79fa      	ldrb	r2, [r7, #7]
 800278a:	492a      	ldr	r1, [pc, #168]	@ (8002834 <HW_TS_Start+0xfc>)
 800278c:	4613      	mov	r3, r2
 800278e:	005b      	lsls	r3, r3, #1
 8002790:	4413      	add	r3, r2
 8002792:	00db      	lsls	r3, r3, #3
 8002794:	440b      	add	r3, r1
 8002796:	330c      	adds	r3, #12
 8002798:	2202      	movs	r2, #2
 800279a:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 800279c:	79fa      	ldrb	r2, [r7, #7]
 800279e:	4925      	ldr	r1, [pc, #148]	@ (8002834 <HW_TS_Start+0xfc>)
 80027a0:	4613      	mov	r3, r2
 80027a2:	005b      	lsls	r3, r3, #1
 80027a4:	4413      	add	r3, r2
 80027a6:	00db      	lsls	r3, r3, #3
 80027a8:	440b      	add	r3, r1
 80027aa:	3308      	adds	r3, #8
 80027ac:	683a      	ldr	r2, [r7, #0]
 80027ae:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 80027b0:	79fa      	ldrb	r2, [r7, #7]
 80027b2:	4920      	ldr	r1, [pc, #128]	@ (8002834 <HW_TS_Start+0xfc>)
 80027b4:	4613      	mov	r3, r2
 80027b6:	005b      	lsls	r3, r3, #1
 80027b8:	4413      	add	r3, r2
 80027ba:	00db      	lsls	r3, r3, #3
 80027bc:	440b      	add	r3, r1
 80027be:	3304      	adds	r3, #4
 80027c0:	683a      	ldr	r2, [r7, #0]
 80027c2:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 80027c4:	79fb      	ldrb	r3, [r7, #7]
 80027c6:	4618      	mov	r0, r3
 80027c8:	f7ff fb30 	bl	8001e2c <linkTimer>
 80027cc:	4603      	mov	r3, r0
 80027ce:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 80027d0:	4b1a      	ldr	r3, [pc, #104]	@ (800283c <HW_TS_Start+0x104>)
 80027d2:	781b      	ldrb	r3, [r3, #0]
 80027d4:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80027d6:	4b1a      	ldr	r3, [pc, #104]	@ (8002840 <HW_TS_Start+0x108>)
 80027d8:	781b      	ldrb	r3, [r3, #0]
 80027da:	b2db      	uxtb	r3, r3
 80027dc:	7c7a      	ldrb	r2, [r7, #17]
 80027de:	429a      	cmp	r2, r3
 80027e0:	d002      	beq.n	80027e8 <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 80027e2:	f7ff fce9 	bl	80021b8 <RescheduleTimerList>
 80027e6:	e013      	b.n	8002810 <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 80027e8:	79fa      	ldrb	r2, [r7, #7]
 80027ea:	4912      	ldr	r1, [pc, #72]	@ (8002834 <HW_TS_Start+0xfc>)
 80027ec:	4613      	mov	r3, r2
 80027ee:	005b      	lsls	r3, r3, #1
 80027f0:	4413      	add	r3, r2
 80027f2:	00db      	lsls	r3, r3, #3
 80027f4:	440b      	add	r3, r1
 80027f6:	3308      	adds	r3, #8
 80027f8:	6819      	ldr	r1, [r3, #0]
 80027fa:	8a7b      	ldrh	r3, [r7, #18]
 80027fc:	79fa      	ldrb	r2, [r7, #7]
 80027fe:	1ac9      	subs	r1, r1, r3
 8002800:	480c      	ldr	r0, [pc, #48]	@ (8002834 <HW_TS_Start+0xfc>)
 8002802:	4613      	mov	r3, r2
 8002804:	005b      	lsls	r3, r3, #1
 8002806:	4413      	add	r3, r2
 8002808:	00db      	lsls	r3, r3, #3
 800280a:	4403      	add	r3, r0
 800280c:	3308      	adds	r3, #8
 800280e:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8002810:	4b09      	ldr	r3, [pc, #36]	@ (8002838 <HW_TS_Start+0x100>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	22ff      	movs	r2, #255	@ 0xff
 8002816:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8002818:	2003      	movs	r0, #3
 800281a:	f006 f87e 	bl	800891a <HAL_NVIC_EnableIRQ>
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	f383 8810 	msr	PRIMASK, r3
}
 8002828:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 800282a:	bf00      	nop
}
 800282c:	3718      	adds	r7, #24
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}
 8002832:	bf00      	nop
 8002834:	20000468 	.word	0x20000468
 8002838:	20000d44 	.word	0x20000d44
 800283c:	200004f8 	.word	0x200004f8
 8002840:	200004f9 	.word	0x200004f9

08002844 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b084      	sub	sp, #16
 8002848:	af00      	add	r7, sp, #0
 800284a:	60f8      	str	r0, [r7, #12]
 800284c:	460b      	mov	r3, r1
 800284e:	607a      	str	r2, [r7, #4]
 8002850:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	4798      	blx	r3

  return;
 8002856:	bf00      	nop
}
 8002858:	3710      	adds	r7, #16
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}

0800285e <LL_AHB2_GRP1_EnableClock>:
{
 800285e:	b480      	push	{r7}
 8002860:	b085      	sub	sp, #20
 8002862:	af00      	add	r7, sp, #0
 8002864:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002866:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800286a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800286c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	4313      	orrs	r3, r2
 8002874:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002876:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800287a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	4013      	ands	r3, r2
 8002880:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002882:	68fb      	ldr	r3, [r7, #12]
}
 8002884:	bf00      	nop
 8002886:	3714      	adds	r7, #20
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr

08002890 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8002890:	b480      	push	{r7}
 8002892:	b085      	sub	sp, #20
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002898:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800289c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800289e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	4313      	orrs	r3, r2
 80028a6:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80028a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028ac:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	4013      	ands	r3, r2
 80028b2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80028b4:	68fb      	ldr	r3, [r7, #12]
}
 80028b6:	bf00      	nop
 80028b8:	3714      	adds	r7, #20
 80028ba:	46bd      	mov	sp, r7
 80028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c0:	4770      	bx	lr
	...

080028c4 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80028c8:	4b1b      	ldr	r3, [pc, #108]	@ (8002938 <MX_I2C1_Init+0x74>)
 80028ca:	4a1c      	ldr	r2, [pc, #112]	@ (800293c <MX_I2C1_Init+0x78>)
 80028cc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10B17DB5;
 80028ce:	4b1a      	ldr	r3, [pc, #104]	@ (8002938 <MX_I2C1_Init+0x74>)
 80028d0:	4a1b      	ldr	r2, [pc, #108]	@ (8002940 <MX_I2C1_Init+0x7c>)
 80028d2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80028d4:	4b18      	ldr	r3, [pc, #96]	@ (8002938 <MX_I2C1_Init+0x74>)
 80028d6:	2200      	movs	r2, #0
 80028d8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80028da:	4b17      	ldr	r3, [pc, #92]	@ (8002938 <MX_I2C1_Init+0x74>)
 80028dc:	2201      	movs	r2, #1
 80028de:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80028e0:	4b15      	ldr	r3, [pc, #84]	@ (8002938 <MX_I2C1_Init+0x74>)
 80028e2:	2200      	movs	r2, #0
 80028e4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80028e6:	4b14      	ldr	r3, [pc, #80]	@ (8002938 <MX_I2C1_Init+0x74>)
 80028e8:	2200      	movs	r2, #0
 80028ea:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80028ec:	4b12      	ldr	r3, [pc, #72]	@ (8002938 <MX_I2C1_Init+0x74>)
 80028ee:	2200      	movs	r2, #0
 80028f0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80028f2:	4b11      	ldr	r3, [pc, #68]	@ (8002938 <MX_I2C1_Init+0x74>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80028f8:	4b0f      	ldr	r3, [pc, #60]	@ (8002938 <MX_I2C1_Init+0x74>)
 80028fa:	2200      	movs	r2, #0
 80028fc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80028fe:	480e      	ldr	r0, [pc, #56]	@ (8002938 <MX_I2C1_Init+0x74>)
 8002900:	f006 fd84 	bl	800940c <HAL_I2C_Init>
 8002904:	4603      	mov	r3, r0
 8002906:	2b00      	cmp	r3, #0
 8002908:	d001      	beq.n	800290e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800290a:	f000 fb53 	bl	8002fb4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800290e:	2100      	movs	r1, #0
 8002910:	4809      	ldr	r0, [pc, #36]	@ (8002938 <MX_I2C1_Init+0x74>)
 8002912:	f007 fb07 	bl	8009f24 <HAL_I2CEx_ConfigAnalogFilter>
 8002916:	4603      	mov	r3, r0
 8002918:	2b00      	cmp	r3, #0
 800291a:	d001      	beq.n	8002920 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800291c:	f000 fb4a 	bl	8002fb4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002920:	2100      	movs	r1, #0
 8002922:	4805      	ldr	r0, [pc, #20]	@ (8002938 <MX_I2C1_Init+0x74>)
 8002924:	f007 fb49 	bl	8009fba <HAL_I2CEx_ConfigDigitalFilter>
 8002928:	4603      	mov	r3, r0
 800292a:	2b00      	cmp	r3, #0
 800292c:	d001      	beq.n	8002932 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800292e:	f000 fb41 	bl	8002fb4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002932:	bf00      	nop
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	20000508 	.word	0x20000508
 800293c:	40005400 	.word	0x40005400
 8002940:	10b17db5 	.word	0x10b17db5

08002944 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002948:	4b1d      	ldr	r3, [pc, #116]	@ (80029c0 <MX_I2C3_Init+0x7c>)
 800294a:	4a1e      	ldr	r2, [pc, #120]	@ (80029c4 <MX_I2C3_Init+0x80>)
 800294c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00910B1C;
 800294e:	4b1c      	ldr	r3, [pc, #112]	@ (80029c0 <MX_I2C3_Init+0x7c>)
 8002950:	4a1d      	ldr	r2, [pc, #116]	@ (80029c8 <MX_I2C3_Init+0x84>)
 8002952:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8002954:	4b1a      	ldr	r3, [pc, #104]	@ (80029c0 <MX_I2C3_Init+0x7c>)
 8002956:	2200      	movs	r2, #0
 8002958:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800295a:	4b19      	ldr	r3, [pc, #100]	@ (80029c0 <MX_I2C3_Init+0x7c>)
 800295c:	2201      	movs	r2, #1
 800295e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002960:	4b17      	ldr	r3, [pc, #92]	@ (80029c0 <MX_I2C3_Init+0x7c>)
 8002962:	2200      	movs	r2, #0
 8002964:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8002966:	4b16      	ldr	r3, [pc, #88]	@ (80029c0 <MX_I2C3_Init+0x7c>)
 8002968:	2200      	movs	r2, #0
 800296a:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800296c:	4b14      	ldr	r3, [pc, #80]	@ (80029c0 <MX_I2C3_Init+0x7c>)
 800296e:	2200      	movs	r2, #0
 8002970:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002972:	4b13      	ldr	r3, [pc, #76]	@ (80029c0 <MX_I2C3_Init+0x7c>)
 8002974:	2200      	movs	r2, #0
 8002976:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002978:	4b11      	ldr	r3, [pc, #68]	@ (80029c0 <MX_I2C3_Init+0x7c>)
 800297a:	2200      	movs	r2, #0
 800297c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800297e:	4810      	ldr	r0, [pc, #64]	@ (80029c0 <MX_I2C3_Init+0x7c>)
 8002980:	f006 fd44 	bl	800940c <HAL_I2C_Init>
 8002984:	4603      	mov	r3, r0
 8002986:	2b00      	cmp	r3, #0
 8002988:	d001      	beq.n	800298e <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800298a:	f000 fb13 	bl	8002fb4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800298e:	2100      	movs	r1, #0
 8002990:	480b      	ldr	r0, [pc, #44]	@ (80029c0 <MX_I2C3_Init+0x7c>)
 8002992:	f007 fac7 	bl	8009f24 <HAL_I2CEx_ConfigAnalogFilter>
 8002996:	4603      	mov	r3, r0
 8002998:	2b00      	cmp	r3, #0
 800299a:	d001      	beq.n	80029a0 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 800299c:	f000 fb0a 	bl	8002fb4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80029a0:	2100      	movs	r1, #0
 80029a2:	4807      	ldr	r0, [pc, #28]	@ (80029c0 <MX_I2C3_Init+0x7c>)
 80029a4:	f007 fb09 	bl	8009fba <HAL_I2CEx_ConfigDigitalFilter>
 80029a8:	4603      	mov	r3, r0
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d001      	beq.n	80029b2 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80029ae:	f000 fb01 	bl	8002fb4 <Error_Handler>
  }

  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C3);
 80029b2:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 80029b6:	f007 fb4d 	bl	800a054 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80029ba:	bf00      	nop
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	bf00      	nop
 80029c0:	2000055c 	.word	0x2000055c
 80029c4:	40005c00 	.word	0x40005c00
 80029c8:	00910b1c 	.word	0x00910b1c

080029cc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b09c      	sub	sp, #112	@ 0x70
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029d4:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80029d8:	2200      	movs	r2, #0
 80029da:	601a      	str	r2, [r3, #0]
 80029dc:	605a      	str	r2, [r3, #4]
 80029de:	609a      	str	r2, [r3, #8]
 80029e0:	60da      	str	r2, [r3, #12]
 80029e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80029e4:	f107 030c 	add.w	r3, r7, #12
 80029e8:	2250      	movs	r2, #80	@ 0x50
 80029ea:	2100      	movs	r1, #0
 80029ec:	4618      	mov	r0, r3
 80029ee:	f018 fd90 	bl	801b512 <memset>
  if(i2cHandle->Instance==I2C1)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a37      	ldr	r2, [pc, #220]	@ (8002ad4 <HAL_I2C_MspInit+0x108>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d127      	bne.n	8002a4c <HAL_I2C_MspInit+0x80>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80029fc:	2304      	movs	r3, #4
 80029fe:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002a00:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8002a04:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a06:	f107 030c 	add.w	r3, r7, #12
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f00a fc11 	bl	800d232 <HAL_RCCEx_PeriphCLKConfig>
 8002a10:	4603      	mov	r3, r0
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d001      	beq.n	8002a1a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8002a16:	f000 facd 	bl	8002fb4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a1a:	2002      	movs	r0, #2
 8002a1c:	f7ff ff1f 	bl	800285e <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002a20:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002a24:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a26:	2312      	movs	r3, #18
 8002a28:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002a32:	2304      	movs	r3, #4
 8002a34:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a36:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002a3a:	4619      	mov	r1, r3
 8002a3c:	4826      	ldr	r0, [pc, #152]	@ (8002ad8 <HAL_I2C_MspInit+0x10c>)
 8002a3e:	f006 faef 	bl	8009020 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002a42:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8002a46:	f7ff ff23 	bl	8002890 <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8002a4a:	e03e      	b.n	8002aca <HAL_I2C_MspInit+0xfe>
  else if(i2cHandle->Instance==I2C3)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a22      	ldr	r2, [pc, #136]	@ (8002adc <HAL_I2C_MspInit+0x110>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d139      	bne.n	8002aca <HAL_I2C_MspInit+0xfe>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8002a56:	2308      	movs	r3, #8
 8002a58:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8002a5a:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 8002a5e:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a60:	f107 030c 	add.w	r3, r7, #12
 8002a64:	4618      	mov	r0, r3
 8002a66:	f00a fbe4 	bl	800d232 <HAL_RCCEx_PeriphCLKConfig>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d001      	beq.n	8002a74 <HAL_I2C_MspInit+0xa8>
      Error_Handler();
 8002a70:	f000 faa0 	bl	8002fb4 <Error_Handler>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a74:	2001      	movs	r0, #1
 8002a76:	f7ff fef2 	bl	800285e <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a7a:	2002      	movs	r0, #2
 8002a7c:	f7ff feef 	bl	800285e <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002a80:	2380      	movs	r3, #128	@ 0x80
 8002a82:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a84:	2312      	movs	r3, #18
 8002a86:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002a90:	2304      	movs	r3, #4
 8002a92:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a94:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002a98:	4619      	mov	r1, r3
 8002a9a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002a9e:	f006 fabf 	bl	8009020 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002aa2:	2310      	movs	r3, #16
 8002aa4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002aa6:	2312      	movs	r3, #18
 8002aa8:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002ab2:	2304      	movs	r3, #4
 8002ab4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ab6:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002aba:	4619      	mov	r1, r3
 8002abc:	4806      	ldr	r0, [pc, #24]	@ (8002ad8 <HAL_I2C_MspInit+0x10c>)
 8002abe:	f006 faaf 	bl	8009020 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002ac2:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8002ac6:	f7ff fee3 	bl	8002890 <LL_APB1_GRP1_EnableClock>
}
 8002aca:	bf00      	nop
 8002acc:	3770      	adds	r7, #112	@ 0x70
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	40005400 	.word	0x40005400
 8002ad8:	48000400 	.word	0x48000400
 8002adc:	40005c00 	.word	0x40005c00

08002ae0 <LL_AHB3_GRP1_EnableClock>:
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b085      	sub	sp, #20
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8002ae8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002aec:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002aee:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	4313      	orrs	r3, r2
 8002af6:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8002af8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002afc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	4013      	ands	r3, r2
 8002b02:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002b04:	68fb      	ldr	r3, [r7, #12]
}
 8002b06:	bf00      	nop
 8002b08:	3714      	adds	r7, #20
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b10:	4770      	bx	lr
	...

08002b14 <MX_IPCC_Init>:

IPCC_HandleTypeDef hipcc;

/* IPCC init function */
void MX_IPCC_Init(void)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8002b18:	4b06      	ldr	r3, [pc, #24]	@ (8002b34 <MX_IPCC_Init+0x20>)
 8002b1a:	4a07      	ldr	r2, [pc, #28]	@ (8002b38 <MX_IPCC_Init+0x24>)
 8002b1c:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8002b1e:	4805      	ldr	r0, [pc, #20]	@ (8002b34 <MX_IPCC_Init+0x20>)
 8002b20:	f007 faaa 	bl	800a078 <HAL_IPCC_Init>
 8002b24:	4603      	mov	r3, r0
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d001      	beq.n	8002b2e <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 8002b2a:	f000 fa43 	bl	8002fb4 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 8002b2e:	bf00      	nop
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop
 8002b34:	200005b0 	.word	0x200005b0
 8002b38:	58000c00 	.word	0x58000c00

08002b3c <HAL_IPCC_MspInit>:

void HAL_IPCC_MspInit(IPCC_HandleTypeDef* ipccHandle)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b082      	sub	sp, #8
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]

  if(ipccHandle->Instance==IPCC)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a0d      	ldr	r2, [pc, #52]	@ (8002b80 <HAL_IPCC_MspInit+0x44>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d113      	bne.n	8002b76 <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* IPCC clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8002b4e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8002b52:	f7ff ffc5 	bl	8002ae0 <LL_AHB3_GRP1_EnableClock>

    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 8002b56:	2200      	movs	r2, #0
 8002b58:	2100      	movs	r1, #0
 8002b5a:	202c      	movs	r0, #44	@ 0x2c
 8002b5c:	f005 fec3 	bl	80088e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8002b60:	202c      	movs	r0, #44	@ 0x2c
 8002b62:	f005 feda 	bl	800891a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 8002b66:	2200      	movs	r2, #0
 8002b68:	2100      	movs	r1, #0
 8002b6a:	202d      	movs	r0, #45	@ 0x2d
 8002b6c:	f005 febb 	bl	80088e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8002b70:	202d      	movs	r0, #45	@ 0x2d
 8002b72:	f005 fed2 	bl	800891a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }
}
 8002b76:	bf00      	nop
 8002b78:	3708      	adds	r7, #8
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	bf00      	nop
 8002b80:	58000c00 	.word	0x58000c00

08002b84 <LL_HSEM_1StepLock>:
  * @param  HSEMx HSEM Instance.
  * @param  Semaphore Semaphore number. Value between Min_Data=0 and Max_Data=31
  * @retval 1 lock fail, 0 lock successful or already locked by same core
  */
__STATIC_INLINE uint32_t LL_HSEM_1StepLock(HSEM_TypeDef *HSEMx, uint32_t Semaphore)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b083      	sub	sp, #12
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
 8002b8c:	6039      	str	r1, [r7, #0]
  return ((HSEMx->RLR[Semaphore] != (HSEM_R_LOCK | LL_HSEM_COREID)) ? 1UL : 0UL);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	683a      	ldr	r2, [r7, #0]
 8002b92:	3220      	adds	r2, #32
 8002b94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b98:	4a05      	ldr	r2, [pc, #20]	@ (8002bb0 <LL_HSEM_1StepLock+0x2c>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d001      	beq.n	8002ba2 <LL_HSEM_1StepLock+0x1e>
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e000      	b.n	8002ba4 <LL_HSEM_1StepLock+0x20>
 8002ba2:	2300      	movs	r3, #0
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	370c      	adds	r7, #12
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bae:	4770      	bx	lr
 8002bb0:	80000400 	.word	0x80000400

08002bb4 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)//lors d'un appuie sur un bouton, le systeme s'interrompt afin d'arriver dans cette fonction redefinie avec en parametre d'entre , le bouton sur lequel l'on a appuiyé
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b082      	sub	sp, #8
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	4603      	mov	r3, r0
 8002bbc:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin==GPIO_PIN_14){
 8002bbe:	88fb      	ldrh	r3, [r7, #6]
 8002bc0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002bc4:	d12f      	bne.n	8002c26 <HAL_GPIO_EXTI_Callback+0x72>

		if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_14)== GPIO_PIN_RESET){
 8002bc6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002bca:	4833      	ldr	r0, [pc, #204]	@ (8002c98 <HAL_GPIO_EXTI_Callback+0xe4>)
 8002bcc:	f006 fb98 	bl	8009300 <HAL_GPIO_ReadPin>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d109      	bne.n	8002bea <HAL_GPIO_EXTI_Callback+0x36>

					boutonAtime=0;
 8002bd6:	4b31      	ldr	r3, [pc, #196]	@ (8002c9c <HAL_GPIO_EXTI_Callback+0xe8>)
 8002bd8:	2200      	movs	r2, #0
 8002bda:	601a      	str	r2, [r3, #0]
					tbtn1=HAL_GetTick();
 8002bdc:	f004 fca4 	bl	8007528 <HAL_GetTick>
 8002be0:	4603      	mov	r3, r0
 8002be2:	461a      	mov	r2, r3
 8002be4:	4b2e      	ldr	r3, [pc, #184]	@ (8002ca0 <HAL_GPIO_EXTI_Callback+0xec>)
 8002be6:	601a      	str	r2, [r3, #0]
 8002be8:	e010      	b.n	8002c0c <HAL_GPIO_EXTI_Callback+0x58>


				}
				else{
					BTN_A++;
 8002bea:	4b2e      	ldr	r3, [pc, #184]	@ (8002ca4 <HAL_GPIO_EXTI_Callback+0xf0>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	3301      	adds	r3, #1
 8002bf0:	4a2c      	ldr	r2, [pc, #176]	@ (8002ca4 <HAL_GPIO_EXTI_Callback+0xf0>)
 8002bf2:	6013      	str	r3, [r2, #0]

					boutonAtime=HAL_GetTick()-tbtn1;
 8002bf4:	f004 fc98 	bl	8007528 <HAL_GetTick>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	4a29      	ldr	r2, [pc, #164]	@ (8002ca0 <HAL_GPIO_EXTI_Callback+0xec>)
 8002bfc:	6812      	ldr	r2, [r2, #0]
 8002bfe:	1a9b      	subs	r3, r3, r2
 8002c00:	461a      	mov	r2, r3
 8002c02:	4b26      	ldr	r3, [pc, #152]	@ (8002c9c <HAL_GPIO_EXTI_Callback+0xe8>)
 8002c04:	601a      	str	r2, [r3, #0]
					tbtn1=0;
 8002c06:	4b26      	ldr	r3, [pc, #152]	@ (8002ca0 <HAL_GPIO_EXTI_Callback+0xec>)
 8002c08:	2200      	movs	r2, #0
 8002c0a:	601a      	str	r2, [r3, #0]


				}

				if(boutonAtime>=400){
 8002c0c:	4b23      	ldr	r3, [pc, #140]	@ (8002c9c <HAL_GPIO_EXTI_Callback+0xe8>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8002c14:	db07      	blt.n	8002c26 <HAL_GPIO_EXTI_Callback+0x72>
					BTN_A_LONG++;
 8002c16:	4b24      	ldr	r3, [pc, #144]	@ (8002ca8 <HAL_GPIO_EXTI_Callback+0xf4>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	3301      	adds	r3, #1
 8002c1c:	4a22      	ldr	r2, [pc, #136]	@ (8002ca8 <HAL_GPIO_EXTI_Callback+0xf4>)
 8002c1e:	6013      	str	r3, [r2, #0]
					BTN_A=0;
 8002c20:	4b20      	ldr	r3, [pc, #128]	@ (8002ca4 <HAL_GPIO_EXTI_Callback+0xf0>)
 8002c22:	2200      	movs	r2, #0
 8002c24:	601a      	str	r2, [r3, #0]
				}

	}
	if(GPIO_Pin==GPIO_PIN_15){
 8002c26:	88fb      	ldrh	r3, [r7, #6]
 8002c28:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002c2c:	d12f      	bne.n	8002c8e <HAL_GPIO_EXTI_Callback+0xda>

		if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_15)== GPIO_PIN_RESET){
 8002c2e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002c32:	4819      	ldr	r0, [pc, #100]	@ (8002c98 <HAL_GPIO_EXTI_Callback+0xe4>)
 8002c34:	f006 fb64 	bl	8009300 <HAL_GPIO_ReadPin>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d109      	bne.n	8002c52 <HAL_GPIO_EXTI_Callback+0x9e>

			boutonBtime=0;
 8002c3e:	4b1b      	ldr	r3, [pc, #108]	@ (8002cac <HAL_GPIO_EXTI_Callback+0xf8>)
 8002c40:	2200      	movs	r2, #0
 8002c42:	601a      	str	r2, [r3, #0]
			tbtn2=HAL_GetTick();
 8002c44:	f004 fc70 	bl	8007528 <HAL_GetTick>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	461a      	mov	r2, r3
 8002c4c:	4b18      	ldr	r3, [pc, #96]	@ (8002cb0 <HAL_GPIO_EXTI_Callback+0xfc>)
 8002c4e:	601a      	str	r2, [r3, #0]
 8002c50:	e010      	b.n	8002c74 <HAL_GPIO_EXTI_Callback+0xc0>


		}
		else{
			BTN_B++;
 8002c52:	4b18      	ldr	r3, [pc, #96]	@ (8002cb4 <HAL_GPIO_EXTI_Callback+0x100>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	3301      	adds	r3, #1
 8002c58:	4a16      	ldr	r2, [pc, #88]	@ (8002cb4 <HAL_GPIO_EXTI_Callback+0x100>)
 8002c5a:	6013      	str	r3, [r2, #0]

			boutonBtime=HAL_GetTick()-tbtn2;
 8002c5c:	f004 fc64 	bl	8007528 <HAL_GetTick>
 8002c60:	4603      	mov	r3, r0
 8002c62:	4a13      	ldr	r2, [pc, #76]	@ (8002cb0 <HAL_GPIO_EXTI_Callback+0xfc>)
 8002c64:	6812      	ldr	r2, [r2, #0]
 8002c66:	1a9b      	subs	r3, r3, r2
 8002c68:	461a      	mov	r2, r3
 8002c6a:	4b10      	ldr	r3, [pc, #64]	@ (8002cac <HAL_GPIO_EXTI_Callback+0xf8>)
 8002c6c:	601a      	str	r2, [r3, #0]
			tbtn2=0;
 8002c6e:	4b10      	ldr	r3, [pc, #64]	@ (8002cb0 <HAL_GPIO_EXTI_Callback+0xfc>)
 8002c70:	2200      	movs	r2, #0
 8002c72:	601a      	str	r2, [r3, #0]


		}

		if(boutonBtime>=400){
 8002c74:	4b0d      	ldr	r3, [pc, #52]	@ (8002cac <HAL_GPIO_EXTI_Callback+0xf8>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8002c7c:	db07      	blt.n	8002c8e <HAL_GPIO_EXTI_Callback+0xda>
			BTN_B_LONG++;
 8002c7e:	4b0e      	ldr	r3, [pc, #56]	@ (8002cb8 <HAL_GPIO_EXTI_Callback+0x104>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	3301      	adds	r3, #1
 8002c84:	4a0c      	ldr	r2, [pc, #48]	@ (8002cb8 <HAL_GPIO_EXTI_Callback+0x104>)
 8002c86:	6013      	str	r3, [r2, #0]
			BTN_B=0;
 8002c88:	4b0a      	ldr	r3, [pc, #40]	@ (8002cb4 <HAL_GPIO_EXTI_Callback+0x100>)
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	601a      	str	r2, [r3, #0]
		}



	}
}
 8002c8e:	bf00      	nop
 8002c90:	3708      	adds	r7, #8
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	bf00      	nop
 8002c98:	48000800 	.word	0x48000800
 8002c9c:	20000ba4 	.word	0x20000ba4
 8002ca0:	20000bac 	.word	0x20000bac
 8002ca4:	20000880 	.word	0x20000880
 8002ca8:	20000bb8 	.word	0x20000bb8
 8002cac:	20000ba8 	.word	0x20000ba8
 8002cb0:	20000bb0 	.word	0x20000bb0
 8002cb4:	20000884 	.word	0x20000884
 8002cb8:	20000bb4 	.word	0x20000bb4

08002cbc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b082      	sub	sp, #8
 8002cc0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002cc2:	f004 fbc3 	bl	800744c <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 8002cc6:	f7fe fbf7 	bl	80014b8 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002cca:	f000 f8d5 	bl	8002e78 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8002cce:	f000 f937 	bl	8002f40 <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 8002cd2:	f7ff ff1f 	bl	8002b14 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_RF_Init();
 8002cd6:	f000 fd77 	bl	80037c8 <MX_RF_Init>
  MX_GPIO_Init();
 8002cda:	f7fe ff65 	bl	8001ba8 <MX_GPIO_Init>
  MX_DMA_Init();
 8002cde:	f7fe ff28 	bl	8001b32 <MX_DMA_Init>
  MX_ADC1_Init();
 8002ce2:	f7fe f971 	bl	8000fc8 <MX_ADC1_Init>
  MX_I2C1_Init();
 8002ce6:	f7ff fded 	bl	80028c4 <MX_I2C1_Init>
  MX_I2C3_Init();
 8002cea:	f7ff fe2b 	bl	8002944 <MX_I2C3_Init>
  MX_LPUART1_UART_Init();
 8002cee:	f004 f96b 	bl	8006fc8 <MX_LPUART1_UART_Init>
  MX_TIM2_Init();
 8002cf2:	f003 fec1 	bl	8006a78 <MX_TIM2_Init>
  MX_TIM16_Init();
 8002cf6:	f003 ff0d 	bl	8006b14 <MX_TIM16_Init>
  MX_TIM17_Init();
 8002cfa:	f003 ff33 	bl	8006b64 <MX_TIM17_Init>
  MX_SPI1_Init();
 8002cfe:	f000 fe69 	bl	80039d4 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8002d02:	f004 f9ad 	bl	8007060 <MX_USART1_UART_Init>
  MX_USB_Device_Init();
 8002d06:	f015 fcdf 	bl	80186c8 <MX_USB_Device_Init>
  MX_RTC_Init();
 8002d0a:	f000 fd8f 	bl	800382c <MX_RTC_Init>
  /* USER CODE BEGIN 2 */



  	ssd1306_Init();
 8002d0e:	f001 f8eb 	bl	8003ee8 <ssd1306_Init>

  	HAL_Delay(10);
 8002d12:	200a      	movs	r0, #10
 8002d14:	f7fe fd0b 	bl	800172e <HAL_Delay>
  	ssd1306_Fill(Black);
 8002d18:	2000      	movs	r0, #0
 8002d1a:	f001 f94f 	bl	8003fbc <ssd1306_Fill>

  	ssd1306_DrawBitmap(32, 32, startimg, 64, 32, White);
 8002d1e:	2301      	movs	r3, #1
 8002d20:	9301      	str	r3, [sp, #4]
 8002d22:	2320      	movs	r3, #32
 8002d24:	9300      	str	r3, [sp, #0]
 8002d26:	2340      	movs	r3, #64	@ 0x40
 8002d28:	4a3d      	ldr	r2, [pc, #244]	@ (8002e20 <main+0x164>)
 8002d2a:	2120      	movs	r1, #32
 8002d2c:	2020      	movs	r0, #32
 8002d2e:	f001 fb90 	bl	8004452 <ssd1306_DrawBitmap>
  	ssd1306_UpdateScreen();
 8002d32:	f001 f95b 	bl	8003fec <ssd1306_UpdateScreen>


  	HAL_ADC_Start_DMA(&hadc1,(uint32_t*)rawdata, 3);
 8002d36:	2203      	movs	r2, #3
 8002d38:	493a      	ldr	r1, [pc, #232]	@ (8002e24 <main+0x168>)
 8002d3a:	483b      	ldr	r0, [pc, #236]	@ (8002e28 <main+0x16c>)
 8002d3c:	f004 ff2c 	bl	8007b98 <HAL_ADC_Start_DMA>
  	HAL_TIM_Base_Start(&htim2);
 8002d40:	483a      	ldr	r0, [pc, #232]	@ (8002e2c <main+0x170>)
 8002d42:	f00c f8e3 	bl	800ef0c <HAL_TIM_Base_Start>
  	HAL_TIM_Base_Start_IT(&htim16);
 8002d46:	483a      	ldr	r0, [pc, #232]	@ (8002e30 <main+0x174>)
 8002d48:	f00c f926 	bl	800ef98 <HAL_TIM_Base_Start_IT>
  	//HAL_TIM_Base_Start_IT(&htim17);

  	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_0,GPIO_PIN_SET);
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	2101      	movs	r1, #1
 8002d50:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002d54:	f006 faec 	bl	8009330 <HAL_GPIO_WritePin>

  	HAL_Delay(100);
 8002d58:	2064      	movs	r0, #100	@ 0x64
 8002d5a:	f7fe fce8 	bl	800172e <HAL_Delay>
  	HAL_UART_Abort(&hlpuart1);
 8002d5e:	4835      	ldr	r0, [pc, #212]	@ (8002e34 <main+0x178>)
 8002d60:	f00c fde0 	bl	800f924 <HAL_UART_Abort>
  	HAL_UART_Receive_DMA(&hlpuart1, (uint8_t *)RxBuffer, RxBuffer_SIZE);
 8002d64:	2240      	movs	r2, #64	@ 0x40
 8002d66:	4934      	ldr	r1, [pc, #208]	@ (8002e38 <main+0x17c>)
 8002d68:	4832      	ldr	r0, [pc, #200]	@ (8002e34 <main+0x178>)
 8002d6a:	f00c fd8f 	bl	800f88c <HAL_UART_Receive_DMA>


  	HAL_UART_Abort(&huart1);
 8002d6e:	4833      	ldr	r0, [pc, #204]	@ (8002e3c <main+0x180>)
 8002d70:	f00c fdd8 	bl	800f924 <HAL_UART_Abort>
  	HAL_UART_Receive_DMA(&huart1, (uint8_t *)tarvos_RX_Tampon, TarvosRxTamponSize);
 8002d74:	2208      	movs	r2, #8
 8002d76:	4932      	ldr	r1, [pc, #200]	@ (8002e40 <main+0x184>)
 8002d78:	4830      	ldr	r0, [pc, #192]	@ (8002e3c <main+0x180>)
 8002d7a:	f00c fd87 	bl	800f88c <HAL_UART_Receive_DMA>


  	memset(flashread,'1',256);
 8002d7e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002d82:	2131      	movs	r1, #49	@ 0x31
 8002d84:	482f      	ldr	r0, [pc, #188]	@ (8002e44 <main+0x188>)
 8002d86:	f018 fbc4 	bl	801b512 <memset>
  	memset(flashwrite,'\0',256);
 8002d8a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002d8e:	2100      	movs	r1, #0
 8002d90:	482d      	ldr	r0, [pc, #180]	@ (8002e48 <main+0x18c>)
 8002d92:	f018 fbbe 	bl	801b512 <memset>
  	memset((uint8_t *)bufferscreen ,'\0',50);
 8002d96:	2232      	movs	r2, #50	@ 0x32
 8002d98:	2100      	movs	r1, #0
 8002d9a:	482c      	ldr	r0, [pc, #176]	@ (8002e4c <main+0x190>)
 8002d9c:	f018 fbb9 	bl	801b512 <memset>



  	SPIF_Init(&hspif1, &hspi1, GPIOB, GPIO_PIN_7);
 8002da0:	2380      	movs	r3, #128	@ 0x80
 8002da2:	4a2b      	ldr	r2, [pc, #172]	@ (8002e50 <main+0x194>)
 8002da4:	492b      	ldr	r1, [pc, #172]	@ (8002e54 <main+0x198>)
 8002da6:	482c      	ldr	r0, [pc, #176]	@ (8002e58 <main+0x19c>)
 8002da8:	f014 fcf5 	bl	8017796 <SPIF_Init>
  	getindex();
 8002dac:	f000 ff68 	bl	8003c80 <getindex>

  	ssd1306_Fill(Black);
 8002db0:	2000      	movs	r0, #0
 8002db2:	f001 f903 	bl	8003fbc <ssd1306_Fill>

  	bmp581->i2c=&hi2c1;
 8002db6:	4b29      	ldr	r3, [pc, #164]	@ (8002e5c <main+0x1a0>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a29      	ldr	r2, [pc, #164]	@ (8002e60 <main+0x1a4>)
 8002dbc:	601a      	str	r2, [r3, #0]
  	bmp581->addr=0x47;
 8002dbe:	4b27      	ldr	r3, [pc, #156]	@ (8002e5c <main+0x1a0>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	2247      	movs	r2, #71	@ 0x47
 8002dc4:	711a      	strb	r2, [r3, #4]

  	if(bmp581_init_precise_normal(&bmp581)!=0){
 8002dc6:	4825      	ldr	r0, [pc, #148]	@ (8002e5c <main+0x1a0>)
 8002dc8:	f7fe fd14 	bl	80017f4 <bmp581_init_precise_normal>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d00f      	beq.n	8002df2 <main+0x136>
  		ssd1306_SetCursor(32,42);
 8002dd2:	212a      	movs	r1, #42	@ 0x2a
 8002dd4:	2020      	movs	r0, #32
 8002dd6:	f001 fa33 	bl	8004240 <ssd1306_SetCursor>
  		ssd1306_WriteString("bmp prbm", Font_7x10, White);
 8002dda:	4a22      	ldr	r2, [pc, #136]	@ (8002e64 <main+0x1a8>)
 8002ddc:	2301      	movs	r3, #1
 8002dde:	ca06      	ldmia	r2, {r1, r2}
 8002de0:	4821      	ldr	r0, [pc, #132]	@ (8002e68 <main+0x1ac>)
 8002de2:	f001 fa07 	bl	80041f4 <ssd1306_WriteString>
  		ssd1306_UpdateScreen();
 8002de6:	f001 f901 	bl	8003fec <ssd1306_UpdateScreen>
  		HAL_Delay(1000);
 8002dea:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002dee:	f7fe fc9e 	bl	800172e <HAL_Delay>

  	}


  	state=STATE_SPEED;
 8002df2:	4b1e      	ldr	r3, [pc, #120]	@ (8002e6c <main+0x1b0>)
 8002df4:	2200      	movs	r2, #0
 8002df6:	701a      	strb	r2, [r3, #0]
  	BTN_A=0;
 8002df8:	4b1d      	ldr	r3, [pc, #116]	@ (8002e70 <main+0x1b4>)
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	601a      	str	r2, [r3, #0]
  	BTN_A_LONG=0;
 8002dfe:	4b1d      	ldr	r3, [pc, #116]	@ (8002e74 <main+0x1b8>)
 8002e00:	2200      	movs	r2, #0
 8002e02:	601a      	str	r2, [r3, #0]

  	HAL_Delay(500);
 8002e04:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002e08:	f7fe fc91 	bl	800172e <HAL_Delay>

  	//LL_HSEM_1StepLock( HSEM, 5 );
  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 8002e0c:	f7fe fb62 	bl	80014d4 <MX_APPE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_APPE_Process();
 8002e10:	f7fe fcb2 	bl	8001778 <MX_APPE_Process>

    /* USER CODE BEGIN 3 */
	  statemachine();
 8002e14:	f001 fd88 	bl	8004928 <statemachine>
	  ssd1306_UpdateScreen();
 8002e18:	f001 f8e8 	bl	8003fec <ssd1306_UpdateScreen>
    MX_APPE_Process();
 8002e1c:	bf00      	nop
 8002e1e:	e7f7      	b.n	8002e10 <main+0x154>
 8002e20:	080202e8 	.word	0x080202e8
 8002e24:	200008a8 	.word	0x200008a8
 8002e28:	2000038c 	.word	0x2000038c
 8002e2c:	2000120c 	.word	0x2000120c
 8002e30:	20001258 	.word	0x20001258
 8002e34:	200012f0 	.word	0x200012f0
 8002e38:	200005f8 	.word	0x200005f8
 8002e3c:	20001384 	.word	0x20001384
 8002e40:	20000838 	.word	0x20000838
 8002e44:	200009bc 	.word	0x200009bc
 8002e48:	200008bc 	.word	0x200008bc
 8002e4c:	20000ae0 	.word	0x20000ae0
 8002e50:	48000400 	.word	0x48000400
 8002e54:	20000d9c 	.word	0x20000d9c
 8002e58:	20000888 	.word	0x20000888
 8002e5c:	20000d04 	.word	0x20000d04
 8002e60:	20000508 	.word	0x20000508
 8002e64:	2000001c 	.word	0x2000001c
 8002e68:	0801fe5c 	.word	0x0801fe5c
 8002e6c:	200005ec 	.word	0x200005ec
 8002e70:	20000880 	.word	0x20000880
 8002e74:	20000bb8 	.word	0x20000bb8

08002e78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b09a      	sub	sp, #104	@ 0x68
 8002e7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002e7e:	f107 0320 	add.w	r3, r7, #32
 8002e82:	2248      	movs	r2, #72	@ 0x48
 8002e84:	2100      	movs	r1, #0
 8002e86:	4618      	mov	r0, r3
 8002e88:	f018 fb43 	bl	801b512 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002e8c:	1d3b      	adds	r3, r7, #4
 8002e8e:	2200      	movs	r2, #0
 8002e90:	601a      	str	r2, [r3, #0]
 8002e92:	605a      	str	r2, [r3, #4]
 8002e94:	609a      	str	r2, [r3, #8]
 8002e96:	60da      	str	r2, [r3, #12]
 8002e98:	611a      	str	r2, [r3, #16]
 8002e9a:	615a      	str	r2, [r3, #20]
 8002e9c:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002e9e:	4b27      	ldr	r3, [pc, #156]	@ (8002f3c <SystemClock_Config+0xc4>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002ea6:	4a25      	ldr	r2, [pc, #148]	@ (8002f3c <SystemClock_Config+0xc4>)
 8002ea8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002eac:	6013      	str	r3, [r2, #0]
 8002eae:	4b23      	ldr	r3, [pc, #140]	@ (8002f3c <SystemClock_Config+0xc4>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002eb6:	603b      	str	r3, [r7, #0]
 8002eb8:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8002eba:	2303      	movs	r3, #3
 8002ebc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002ebe:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002ec2:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002ec4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002ec8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002eca:	2340      	movs	r3, #64	@ 0x40
 8002ecc:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002ece:	2302      	movs	r3, #2
 8002ed0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002ed2:	2303      	movs	r3, #3
 8002ed4:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8002ed6:	2310      	movs	r3, #16
 8002ed8:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLN = 8;
 8002eda:	2308      	movs	r3, #8
 8002edc:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002ede:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002ee2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002ee4:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8002ee8:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002eea:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002eee:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002ef0:	f107 0320 	add.w	r3, r7, #32
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f009 f9eb 	bl	800c2d0 <HAL_RCC_OscConfig>
 8002efa:	4603      	mov	r3, r0
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d001      	beq.n	8002f04 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8002f00:	f000 f858 	bl	8002fb4 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8002f04:	236f      	movs	r3, #111	@ 0x6f
 8002f06:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002f08:	2303      	movs	r3, #3
 8002f0a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002f10:	2300      	movs	r3, #0
 8002f12:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002f14:	2300      	movs	r3, #0
 8002f16:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 8002f18:	2380      	movs	r3, #128	@ 0x80
 8002f1a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002f20:	1d3b      	adds	r3, r7, #4
 8002f22:	2103      	movs	r1, #3
 8002f24:	4618      	mov	r0, r3
 8002f26:	f009 fd47 	bl	800c9b8 <HAL_RCC_ClockConfig>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d001      	beq.n	8002f34 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8002f30:	f000 f840 	bl	8002fb4 <Error_Handler>
  }
}
 8002f34:	bf00      	nop
 8002f36:	3768      	adds	r7, #104	@ 0x68
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}
 8002f3c:	58000400 	.word	0x58000400

08002f40 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b094      	sub	sp, #80	@ 0x50
 8002f44:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002f46:	463b      	mov	r3, r7
 8002f48:	2250      	movs	r2, #80	@ 0x50
 8002f4a:	2100      	movs	r1, #0
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f018 fae0 	bl	801b512 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP
 8002f52:	f44f 5354 	mov.w	r3, #13568	@ 0x3500
 8002f56:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
  PeriphClkInitStruct.PLLSAI1.PLLN = 6;
 8002f58:	2306      	movs	r3, #6
 8002f5a:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8002f5c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002f60:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8002f62:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002f66:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8002f68:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8002f6c:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK|RCC_PLLSAI1_ADCCLK;
 8002f6e:	f04f 5388 	mov.w	r3, #285212672	@ 0x11000000
 8002f72:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8002f74:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8002f78:	637b      	str	r3, [r7, #52]	@ 0x34
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8002f7a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8002f7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_HSE_DIV1024;
 8002f80:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8002f84:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8002f86:	2300      	movs	r3, #0
 8002f88:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8002f8a:	2310      	movs	r3, #16
 8002f8c:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002f8e:	463b      	mov	r3, r7
 8002f90:	4618      	mov	r0, r3
 8002f92:	f00a f94e 	bl	800d232 <HAL_RCCEx_PeriphCLKConfig>
 8002f96:	4603      	mov	r3, r0
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d001      	beq.n	8002fa0 <PeriphCommonClock_Config+0x60>
  {
    Error_Handler();
 8002f9c:	f000 f80a 	bl	8002fb4 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */
  LL_HSEM_1StepLock( HSEM, 5 );
 8002fa0:	2105      	movs	r1, #5
 8002fa2:	4803      	ldr	r0, [pc, #12]	@ (8002fb0 <PeriphCommonClock_Config+0x70>)
 8002fa4:	f7ff fdee 	bl	8002b84 <LL_HSEM_1StepLock>

  /* USER CODE END Smps */
}
 8002fa8:	bf00      	nop
 8002faa:	3750      	adds	r7, #80	@ 0x50
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}
 8002fb0:	58001400 	.word	0x58001400

08002fb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002fb8:	b672      	cpsid	i
}
 8002fba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002fbc:	bf00      	nop
 8002fbe:	e7fd      	b.n	8002fbc <Error_Handler+0x8>

08002fc0 <gps_checksum>:
//on a une fonction de decodage par typme de trame interressante, puis une fonction nmea_parse servant à mettre à jour la structure de donnée avec lesdonnées presentes dans le databuffer, qui lui se met à jour tout seul.

char *data[15];

int gps_checksum(char *nmea_data)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b086      	sub	sp, #24
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
    //if you point a string with less than 5 characters the function will read outside of scope and crash the mcu.
    if(strlen(nmea_data) < 5) return 0;
 8002fc8:	6878      	ldr	r0, [r7, #4]
 8002fca:	f7fd f929 	bl	8000220 <strlen>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	2b04      	cmp	r3, #4
 8002fd2:	d801      	bhi.n	8002fd8 <gps_checksum+0x18>
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	e038      	b.n	800304a <gps_checksum+0x8a>
    char recv_crc[2];
    recv_crc[0] = nmea_data[strlen(nmea_data) - 4];
 8002fd8:	6878      	ldr	r0, [r7, #4]
 8002fda:	f7fd f921 	bl	8000220 <strlen>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	3b04      	subs	r3, #4
 8002fe2:	687a      	ldr	r2, [r7, #4]
 8002fe4:	4413      	add	r3, r2
 8002fe6:	781b      	ldrb	r3, [r3, #0]
 8002fe8:	723b      	strb	r3, [r7, #8]
    recv_crc[1] = nmea_data[strlen(nmea_data) - 3];
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	f7fd f918 	bl	8000220 <strlen>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	3b03      	subs	r3, #3
 8002ff4:	687a      	ldr	r2, [r7, #4]
 8002ff6:	4413      	add	r3, r2
 8002ff8:	781b      	ldrb	r3, [r3, #0]
 8002ffa:	727b      	strb	r3, [r7, #9]
    int crc = 0;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	617b      	str	r3, [r7, #20]
    int i;

    //exclude the CRLF plus CRC with an * from the end
    for (i = 0; i < strlen(nmea_data) - 5; i ++) {
 8003000:	2300      	movs	r3, #0
 8003002:	613b      	str	r3, [r7, #16]
 8003004:	e00a      	b.n	800301c <gps_checksum+0x5c>
        crc ^= nmea_data[i];
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	687a      	ldr	r2, [r7, #4]
 800300a:	4413      	add	r3, r2
 800300c:	781b      	ldrb	r3, [r3, #0]
 800300e:	461a      	mov	r2, r3
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	4053      	eors	r3, r2
 8003014:	617b      	str	r3, [r7, #20]
    for (i = 0; i < strlen(nmea_data) - 5; i ++) {
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	3301      	adds	r3, #1
 800301a:	613b      	str	r3, [r7, #16]
 800301c:	6878      	ldr	r0, [r7, #4]
 800301e:	f7fd f8ff 	bl	8000220 <strlen>
 8003022:	4603      	mov	r3, r0
 8003024:	1f5a      	subs	r2, r3, #5
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	429a      	cmp	r2, r3
 800302a:	d8ec      	bhi.n	8003006 <gps_checksum+0x46>
    }
    int receivedHash = strtol(recv_crc, NULL, 16);
 800302c:	f107 0308 	add.w	r3, r7, #8
 8003030:	2210      	movs	r2, #16
 8003032:	2100      	movs	r1, #0
 8003034:	4618      	mov	r0, r3
 8003036:	f017 fa9d 	bl	801a574 <strtol>
 800303a:	60f8      	str	r0, [r7, #12]
    if (crc == receivedHash) {
 800303c:	697a      	ldr	r2, [r7, #20]
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	429a      	cmp	r2, r3
 8003042:	d101      	bne.n	8003048 <gps_checksum+0x88>
        return 1;
 8003044:	2301      	movs	r3, #1
 8003046:	e000      	b.n	800304a <gps_checksum+0x8a>
    }
    else{
        return 0;
 8003048:	2300      	movs	r3, #0
    }
}
 800304a:	4618      	mov	r0, r3
 800304c:	3718      	adds	r7, #24
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}
	...

08003054 <nmea_GPGGA>:

int nmea_GPGGA(GPS *gps_data, char*inputString){
 8003054:	b590      	push	{r4, r7, lr}
 8003056:	b0b7      	sub	sp, #220	@ 0xdc
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
 800305c:	6039      	str	r1, [r7, #0]
    char *values[25];
    int counter = 0;
 800305e:	2300      	movs	r3, #0
 8003060:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    memset(values, 0, sizeof(values));
 8003064:	f107 0320 	add.w	r3, r7, #32
 8003068:	2264      	movs	r2, #100	@ 0x64
 800306a:	2100      	movs	r1, #0
 800306c:	4618      	mov	r0, r3
 800306e:	f018 fa50 	bl	801b512 <memset>
    char *marker = strtok(inputString, ",");
 8003072:	49c2      	ldr	r1, [pc, #776]	@ (800337c <nmea_GPGGA+0x328>)
 8003074:	6838      	ldr	r0, [r7, #0]
 8003076:	f018 fa67 	bl	801b548 <strtok>
 800307a:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    while (marker != NULL) {
 800307e:	e027      	b.n	80030d0 <nmea_GPGGA+0x7c>
        values[counter++] = malloc(strlen(marker) + 1); //free later!!!!!!
 8003080:	f8d7 00d0 	ldr.w	r0, [r7, #208]	@ 0xd0
 8003084:	f7fd f8cc 	bl	8000220 <strlen>
 8003088:	4603      	mov	r3, r0
 800308a:	1c5a      	adds	r2, r3, #1
 800308c:	f8d7 40d4 	ldr.w	r4, [r7, #212]	@ 0xd4
 8003090:	1c63      	adds	r3, r4, #1
 8003092:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003096:	4610      	mov	r0, r2
 8003098:	f016 fac6 	bl	8019628 <malloc>
 800309c:	4603      	mov	r3, r0
 800309e:	461a      	mov	r2, r3
 80030a0:	00a3      	lsls	r3, r4, #2
 80030a2:	33d8      	adds	r3, #216	@ 0xd8
 80030a4:	443b      	add	r3, r7
 80030a6:	f843 2cb8 	str.w	r2, [r3, #-184]
        strcpy(values[counter - 1], marker);
 80030aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80030ae:	3b01      	subs	r3, #1
 80030b0:	009b      	lsls	r3, r3, #2
 80030b2:	33d8      	adds	r3, #216	@ 0xd8
 80030b4:	443b      	add	r3, r7
 80030b6:	f853 3cb8 	ldr.w	r3, [r3, #-184]
 80030ba:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80030be:	4618      	mov	r0, r3
 80030c0:	f018 fb3b 	bl	801b73a <strcpy>
        marker = strtok(NULL, ",");
 80030c4:	49ad      	ldr	r1, [pc, #692]	@ (800337c <nmea_GPGGA+0x328>)
 80030c6:	2000      	movs	r0, #0
 80030c8:	f018 fa3e 	bl	801b548 <strtok>
 80030cc:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    while (marker != NULL) {
 80030d0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d1d3      	bne.n	8003080 <nmea_GPGGA+0x2c>
    }
    char lonSide = values[5][0];
 80030d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030da:	781b      	ldrb	r3, [r3, #0]
 80030dc:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
    char latSide = values[3][0];
 80030e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030e2:	781b      	ldrb	r3, [r3, #0]
 80030e4:	f887 30b6 	strb.w	r3, [r7, #182]	@ 0xb6
    strcpy(gps_data->lastMeasure, values[1]);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	332c      	adds	r3, #44	@ 0x2c
 80030ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030ee:	4611      	mov	r1, r2
 80030f0:	4618      	mov	r0, r3
 80030f2:	f018 fb22 	bl	801b73a <strcpy>
    if(latSide == 'S' || latSide == 'N'){
 80030f6:	f897 30b6 	ldrb.w	r3, [r7, #182]	@ 0xb6
 80030fa:	2b53      	cmp	r3, #83	@ 0x53
 80030fc:	d004      	beq.n	8003108 <nmea_GPGGA+0xb4>
 80030fe:	f897 30b6 	ldrb.w	r3, [r7, #182]	@ 0xb6
 8003102:	2b4e      	cmp	r3, #78	@ 0x4e
 8003104:	f040 8159 	bne.w	80033ba <nmea_GPGGA+0x366>
        char lat_d[2];
        char lat_m[7];
        for (int z = 0; z < 2; z++) lat_d[z] = values[2][z];
 8003108:	2300      	movs	r3, #0
 800310a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800310e:	e010      	b.n	8003132 <nmea_GPGGA+0xde>
 8003110:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003112:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003116:	4413      	add	r3, r2
 8003118:	7819      	ldrb	r1, [r3, #0]
 800311a:	f107 021c 	add.w	r2, r7, #28
 800311e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003122:	4413      	add	r3, r2
 8003124:	460a      	mov	r2, r1
 8003126:	701a      	strb	r2, [r3, #0]
 8003128:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800312c:	3301      	adds	r3, #1
 800312e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003132:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003136:	2b01      	cmp	r3, #1
 8003138:	ddea      	ble.n	8003110 <nmea_GPGGA+0xbc>
        for (int z = 0; z < 6; z++) lat_m[z] = values[2][z + 2];
 800313a:	2300      	movs	r3, #0
 800313c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003140:	e011      	b.n	8003166 <nmea_GPGGA+0x112>
 8003142:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003144:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003148:	3302      	adds	r3, #2
 800314a:	4413      	add	r3, r2
 800314c:	7819      	ldrb	r1, [r3, #0]
 800314e:	f107 0214 	add.w	r2, r7, #20
 8003152:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003156:	4413      	add	r3, r2
 8003158:	460a      	mov	r2, r1
 800315a:	701a      	strb	r2, [r3, #0]
 800315c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003160:	3301      	adds	r3, #1
 8003162:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003166:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800316a:	2b05      	cmp	r3, #5
 800316c:	dde9      	ble.n	8003142 <nmea_GPGGA+0xee>

        int lat_deg_strtol = strtol(lat_d, NULL, 10);
 800316e:	f107 031c 	add.w	r3, r7, #28
 8003172:	220a      	movs	r2, #10
 8003174:	2100      	movs	r1, #0
 8003176:	4618      	mov	r0, r3
 8003178:	f017 f9fc 	bl	801a574 <strtol>
 800317c:	f8c7 00b0 	str.w	r0, [r7, #176]	@ 0xb0
        float lat_min_strtof = strtof(lat_m, NULL);
 8003180:	f107 0314 	add.w	r3, r7, #20
 8003184:	2100      	movs	r1, #0
 8003186:	4618      	mov	r0, r3
 8003188:	f017 f914 	bl	801a3b4 <strtof>
 800318c:	ed87 0a2b 	vstr	s0, [r7, #172]	@ 0xac
        double lat_deg = lat_deg_strtol + lat_min_strtof / 60;
 8003190:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003194:	ee07 3a90 	vmov	s15, r3
 8003198:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800319c:	edd7 6a2b 	vldr	s13, [r7, #172]	@ 0xac
 80031a0:	ed9f 6a77 	vldr	s12, [pc, #476]	@ 8003380 <nmea_GPGGA+0x32c>
 80031a4:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80031a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031ac:	ee17 0a90 	vmov	r0, s15
 80031b0:	f7fd f9a2 	bl	80004f8 <__aeabi_f2d>
 80031b4:	4602      	mov	r2, r0
 80031b6:	460b      	mov	r3, r1
 80031b8:	e9c7 2328 	strd	r2, r3, [r7, #160]	@ 0xa0

        char lon_d[3];
        char lon_m[7];

        for (int z = 0; z < 3; z++) lon_d[z] = values[4][z];
 80031bc:	2300      	movs	r3, #0
 80031be:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80031c2:	e010      	b.n	80031e6 <nmea_GPGGA+0x192>
 80031c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80031c6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80031ca:	4413      	add	r3, r2
 80031cc:	7819      	ldrb	r1, [r3, #0]
 80031ce:	f107 0210 	add.w	r2, r7, #16
 80031d2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80031d6:	4413      	add	r3, r2
 80031d8:	460a      	mov	r2, r1
 80031da:	701a      	strb	r2, [r3, #0]
 80031dc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80031e0:	3301      	adds	r3, #1
 80031e2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80031e6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80031ea:	2b02      	cmp	r3, #2
 80031ec:	ddea      	ble.n	80031c4 <nmea_GPGGA+0x170>
        for (int z = 0; z < 6; z++) lon_m[z] = values[4][z + 3];
 80031ee:	2300      	movs	r3, #0
 80031f0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80031f4:	e011      	b.n	800321a <nmea_GPGGA+0x1c6>
 80031f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80031f8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80031fc:	3303      	adds	r3, #3
 80031fe:	4413      	add	r3, r2
 8003200:	7819      	ldrb	r1, [r3, #0]
 8003202:	f107 0208 	add.w	r2, r7, #8
 8003206:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800320a:	4413      	add	r3, r2
 800320c:	460a      	mov	r2, r1
 800320e:	701a      	strb	r2, [r3, #0]
 8003210:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003214:	3301      	adds	r3, #1
 8003216:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800321a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800321e:	2b05      	cmp	r3, #5
 8003220:	dde9      	ble.n	80031f6 <nmea_GPGGA+0x1a2>

        int lon_deg_strtol = strtol(lon_d, NULL, 10);
 8003222:	f107 0310 	add.w	r3, r7, #16
 8003226:	220a      	movs	r2, #10
 8003228:	2100      	movs	r1, #0
 800322a:	4618      	mov	r0, r3
 800322c:	f017 f9a2 	bl	801a574 <strtol>
 8003230:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
        float lon_min_strtof = strtof(lon_m, NULL);
 8003234:	f107 0308 	add.w	r3, r7, #8
 8003238:	2100      	movs	r1, #0
 800323a:	4618      	mov	r0, r3
 800323c:	f017 f8ba 	bl	801a3b4 <strtof>
 8003240:	ed87 0a26 	vstr	s0, [r7, #152]	@ 0x98
        double lon_deg = lon_deg_strtol + lon_min_strtof / 60;
 8003244:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003248:	ee07 3a90 	vmov	s15, r3
 800324c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003250:	edd7 6a26 	vldr	s13, [r7, #152]	@ 0x98
 8003254:	ed9f 6a4a 	vldr	s12, [pc, #296]	@ 8003380 <nmea_GPGGA+0x32c>
 8003258:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800325c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003260:	ee17 0a90 	vmov	r0, s15
 8003264:	f7fd f948 	bl	80004f8 <__aeabi_f2d>
 8003268:	4602      	mov	r2, r0
 800326a:	460b      	mov	r3, r1
 800326c:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90

        if(lat_deg!=0 && lon_deg!=0 && lat_deg<90 && lon_deg<180){
 8003270:	f04f 0200 	mov.w	r2, #0
 8003274:	f04f 0300 	mov.w	r3, #0
 8003278:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 800327c:	f7fd fbfc 	bl	8000a78 <__aeabi_dcmpeq>
 8003280:	4603      	mov	r3, r0
 8003282:	2b00      	cmp	r3, #0
 8003284:	d176      	bne.n	8003374 <nmea_GPGGA+0x320>
 8003286:	f04f 0200 	mov.w	r2, #0
 800328a:	f04f 0300 	mov.w	r3, #0
 800328e:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 8003292:	f7fd fbf1 	bl	8000a78 <__aeabi_dcmpeq>
 8003296:	4603      	mov	r3, r0
 8003298:	2b00      	cmp	r3, #0
 800329a:	d16b      	bne.n	8003374 <nmea_GPGGA+0x320>
 800329c:	f04f 0200 	mov.w	r2, #0
 80032a0:	4b38      	ldr	r3, [pc, #224]	@ (8003384 <nmea_GPGGA+0x330>)
 80032a2:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 80032a6:	f7fd fbf1 	bl	8000a8c <__aeabi_dcmplt>
 80032aa:	4603      	mov	r3, r0
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d061      	beq.n	8003374 <nmea_GPGGA+0x320>
 80032b0:	f04f 0200 	mov.w	r2, #0
 80032b4:	4b34      	ldr	r3, [pc, #208]	@ (8003388 <nmea_GPGGA+0x334>)
 80032b6:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 80032ba:	f7fd fbe7 	bl	8000a8c <__aeabi_dcmplt>
 80032be:	4603      	mov	r3, r0
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d057      	beq.n	8003374 <nmea_GPGGA+0x320>
            gps_data->latitude = lat_deg;
 80032c4:	6879      	ldr	r1, [r7, #4]
 80032c6:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 80032ca:	e9c1 2300 	strd	r2, r3, [r1]
            gps_data->latSide = latSide;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	f897 20b6 	ldrb.w	r2, [r7, #182]	@ 0xb6
 80032d4:	721a      	strb	r2, [r3, #8]
            gps_data->longitude = lon_deg;
 80032d6:	6879      	ldr	r1, [r7, #4]
 80032d8:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 80032dc:	e9c1 2304 	strd	r2, r3, [r1, #16]
            gps_data->lonSide = lonSide;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	f897 20b7 	ldrb.w	r2, [r7, #183]	@ 0xb7
 80032e6:	761a      	strb	r2, [r3, #24]
            float altitude = strtof(values[9], NULL);
 80032e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80032ea:	2100      	movs	r1, #0
 80032ec:	4618      	mov	r0, r3
 80032ee:	f017 f861 	bl	801a3b4 <strtof>
 80032f2:	ed87 0a23 	vstr	s0, [r7, #140]	@ 0x8c
            gps_data->altitude = altitude!=0 ? altitude : gps_data->altitude;
 80032f6:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 80032fa:	eef5 7a40 	vcmp.f32	s15, #0.0
 80032fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003302:	d102      	bne.n	800330a <nmea_GPGGA+0x2b6>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	69db      	ldr	r3, [r3, #28]
 8003308:	e001      	b.n	800330e <nmea_GPGGA+0x2ba>
 800330a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800330e:	687a      	ldr	r2, [r7, #4]
 8003310:	61d3      	str	r3, [r2, #28]
            gps_data->satelliteCount = strtol(values[7], NULL, 10);
 8003312:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003314:	220a      	movs	r2, #10
 8003316:	2100      	movs	r1, #0
 8003318:	4618      	mov	r0, r3
 800331a:	f017 f92b 	bl	801a574 <strtol>
 800331e:	4602      	mov	r2, r0
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	625a      	str	r2, [r3, #36]	@ 0x24

            int fixQuality = strtol(values[6], NULL, 10);
 8003324:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003326:	220a      	movs	r2, #10
 8003328:	2100      	movs	r1, #0
 800332a:	4618      	mov	r0, r3
 800332c:	f017 f922 	bl	801a574 <strtol>
 8003330:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
            gps_data->fix = fixQuality > 0 ? 1 : 0;
 8003334:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003338:	2b00      	cmp	r3, #0
 800333a:	bfcc      	ite	gt
 800333c:	2301      	movgt	r3, #1
 800333e:	2300      	movle	r3, #0
 8003340:	b2db      	uxtb	r3, r3
 8003342:	461a      	mov	r2, r3
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	629a      	str	r2, [r3, #40]	@ 0x28

            float hdop = strtof(values[8], NULL);
 8003348:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800334a:	2100      	movs	r1, #0
 800334c:	4618      	mov	r0, r3
 800334e:	f017 f831 	bl	801a3b4 <strtof>
 8003352:	ed87 0a21 	vstr	s0, [r7, #132]	@ 0x84
            gps_data->hdop = hdop!=0 ? hdop : gps_data->hdop;
 8003356:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 800335a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800335e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003362:	d102      	bne.n	800336a <nmea_GPGGA+0x316>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6a1b      	ldr	r3, [r3, #32]
 8003368:	e001      	b.n	800336e <nmea_GPGGA+0x31a>
 800336a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800336e:	687a      	ldr	r2, [r7, #4]
 8003370:	6213      	str	r3, [r2, #32]
        if(lat_deg!=0 && lon_deg!=0 && lat_deg<90 && lon_deg<180){
 8003372:	e022      	b.n	80033ba <nmea_GPGGA+0x366>
        }
        else {
            for(int i=0; i<counter; i++) free(values[i]);
 8003374:	2300      	movs	r3, #0
 8003376:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800337a:	e016      	b.n	80033aa <nmea_GPGGA+0x356>
 800337c:	0801fe68 	.word	0x0801fe68
 8003380:	42700000 	.word	0x42700000
 8003384:	40568000 	.word	0x40568000
 8003388:	40668000 	.word	0x40668000
 800338c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003390:	009b      	lsls	r3, r3, #2
 8003392:	33d8      	adds	r3, #216	@ 0xd8
 8003394:	443b      	add	r3, r7
 8003396:	f853 3cb8 	ldr.w	r3, [r3, #-184]
 800339a:	4618      	mov	r0, r3
 800339c:	f016 f94c 	bl	8019638 <free>
 80033a0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80033a4:	3301      	adds	r3, #1
 80033a6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80033aa:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 80033ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80033b2:	429a      	cmp	r2, r3
 80033b4:	dbea      	blt.n	800338c <nmea_GPGGA+0x338>
            return 0;
 80033b6:	2300      	movs	r3, #0
 80033b8:	e019      	b.n	80033ee <nmea_GPGGA+0x39a>
        }

    }

    for(int i=0; i<counter; i++) free(values[i]);
 80033ba:	2300      	movs	r3, #0
 80033bc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80033c0:	e00e      	b.n	80033e0 <nmea_GPGGA+0x38c>
 80033c2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80033c6:	009b      	lsls	r3, r3, #2
 80033c8:	33d8      	adds	r3, #216	@ 0xd8
 80033ca:	443b      	add	r3, r7
 80033cc:	f853 3cb8 	ldr.w	r3, [r3, #-184]
 80033d0:	4618      	mov	r0, r3
 80033d2:	f016 f931 	bl	8019638 <free>
 80033d6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80033da:	3301      	adds	r3, #1
 80033dc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80033e0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80033e4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80033e8:	429a      	cmp	r2, r3
 80033ea:	dbea      	blt.n	80033c2 <nmea_GPGGA+0x36e>
    return 1;
 80033ec:	2301      	movs	r3, #1
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	37dc      	adds	r7, #220	@ 0xdc
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd90      	pop	{r4, r7, pc}
 80033f6:	bf00      	nop

080033f8 <nmea_GNRMC>:
//    return 1;
//}



int nmea_GNRMC(GPS *gps_data, char*inputString){
 80033f8:	b590      	push	{r4, r7, lr}
 80033fa:	b0a1      	sub	sp, #132	@ 0x84
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
 8003400:	6039      	str	r1, [r7, #0]
    char *values[25];
    int counter = 0;
 8003402:	2300      	movs	r3, #0
 8003404:	67fb      	str	r3, [r7, #124]	@ 0x7c
    memset(values, 0, sizeof(values));
 8003406:	f107 030c 	add.w	r3, r7, #12
 800340a:	2264      	movs	r2, #100	@ 0x64
 800340c:	2100      	movs	r1, #0
 800340e:	4618      	mov	r0, r3
 8003410:	f018 f87f 	bl	801b512 <memset>
    char *marker = strtok(inputString, ",");
 8003414:	4930      	ldr	r1, [pc, #192]	@ (80034d8 <nmea_GNRMC+0xe0>)
 8003416:	6838      	ldr	r0, [r7, #0]
 8003418:	f018 f896 	bl	801b548 <strtok>
 800341c:	67b8      	str	r0, [r7, #120]	@ 0x78
    while (marker != NULL) {
 800341e:	e021      	b.n	8003464 <nmea_GNRMC+0x6c>
        values[counter++] = malloc(strlen(marker) + 1); //free later!!!!!!
 8003420:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 8003422:	f7fc fefd 	bl	8000220 <strlen>
 8003426:	4603      	mov	r3, r0
 8003428:	1c5a      	adds	r2, r3, #1
 800342a:	6ffc      	ldr	r4, [r7, #124]	@ 0x7c
 800342c:	1c63      	adds	r3, r4, #1
 800342e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003430:	4610      	mov	r0, r2
 8003432:	f016 f8f9 	bl	8019628 <malloc>
 8003436:	4603      	mov	r3, r0
 8003438:	461a      	mov	r2, r3
 800343a:	00a3      	lsls	r3, r4, #2
 800343c:	3380      	adds	r3, #128	@ 0x80
 800343e:	443b      	add	r3, r7
 8003440:	f843 2c74 	str.w	r2, [r3, #-116]
        strcpy(values[counter - 1], marker);
 8003444:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003446:	3b01      	subs	r3, #1
 8003448:	009b      	lsls	r3, r3, #2
 800344a:	3380      	adds	r3, #128	@ 0x80
 800344c:	443b      	add	r3, r7
 800344e:	f853 3c74 	ldr.w	r3, [r3, #-116]
 8003452:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8003454:	4618      	mov	r0, r3
 8003456:	f018 f970 	bl	801b73a <strcpy>
        marker = strtok(NULL, ",");
 800345a:	491f      	ldr	r1, [pc, #124]	@ (80034d8 <nmea_GNRMC+0xe0>)
 800345c:	2000      	movs	r0, #0
 800345e:	f018 f873 	bl	801b548 <strtok>
 8003462:	67b8      	str	r0, [r7, #120]	@ 0x78
    while (marker != NULL) {
 8003464:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003466:	2b00      	cmp	r3, #0
 8003468:	d1da      	bne.n	8003420 <nmea_GNRMC+0x28>
    }
    float speed = strtof(values[7], NULL);
 800346a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800346c:	2100      	movs	r1, #0
 800346e:	4618      	mov	r0, r3
 8003470:	f016 ffa0 	bl	801a3b4 <strtof>
 8003474:	ed87 0a1c 	vstr	s0, [r7, #112]	@ 0x70
    gps_data->speed=speed/(1.944);
 8003478:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 800347a:	f7fd f83d 	bl	80004f8 <__aeabi_f2d>
 800347e:	a314      	add	r3, pc, #80	@ (adr r3, 80034d0 <nmea_GNRMC+0xd8>)
 8003480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003484:	f7fd f9ba 	bl	80007fc <__aeabi_ddiv>
 8003488:	4602      	mov	r2, r0
 800348a:	460b      	mov	r3, r1
 800348c:	4610      	mov	r0, r2
 800348e:	4619      	mov	r1, r3
 8003490:	f7fd fb82 	bl	8000b98 <__aeabi_d2f>
 8003494:	4602      	mov	r2, r0
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	639a      	str	r2, [r3, #56]	@ 0x38


    for(int i=0; i<counter; i++) free(values[i]);
 800349a:	2300      	movs	r3, #0
 800349c:	677b      	str	r3, [r7, #116]	@ 0x74
 800349e:	e00b      	b.n	80034b8 <nmea_GNRMC+0xc0>
 80034a0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80034a2:	009b      	lsls	r3, r3, #2
 80034a4:	3380      	adds	r3, #128	@ 0x80
 80034a6:	443b      	add	r3, r7
 80034a8:	f853 3c74 	ldr.w	r3, [r3, #-116]
 80034ac:	4618      	mov	r0, r3
 80034ae:	f016 f8c3 	bl	8019638 <free>
 80034b2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80034b4:	3301      	adds	r3, #1
 80034b6:	677b      	str	r3, [r7, #116]	@ 0x74
 80034b8:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80034ba:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80034bc:	429a      	cmp	r2, r3
 80034be:	dbef      	blt.n	80034a0 <nmea_GNRMC+0xa8>
    return 1;
 80034c0:	2301      	movs	r3, #1
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	3784      	adds	r7, #132	@ 0x84
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd90      	pop	{r4, r7, pc}
 80034ca:	bf00      	nop
 80034cc:	f3af 8000 	nop.w
 80034d0:	be76c8b4 	.word	0xbe76c8b4
 80034d4:	3fff1a9f 	.word	0x3fff1a9f
 80034d8:	0801fe68 	.word	0x0801fe68

080034dc <nmea_parse>:



void nmea_parse(GPS *gps_data, uint8_t *buffer){
 80034dc:	b590      	push	{r4, r7, lr}
 80034de:	b089      	sub	sp, #36	@ 0x24
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
 80034e4:	6039      	str	r1, [r7, #0]
    memset(data, 0, sizeof(data));
 80034e6:	223c      	movs	r2, #60	@ 0x3c
 80034e8:	2100      	movs	r1, #0
 80034ea:	484c      	ldr	r0, [pc, #304]	@ (800361c <nmea_parse+0x140>)
 80034ec:	f018 f811 	bl	801b512 <memset>
    char * token = strtok(buffer, "$");
 80034f0:	494b      	ldr	r1, [pc, #300]	@ (8003620 <nmea_parse+0x144>)
 80034f2:	6838      	ldr	r0, [r7, #0]
 80034f4:	f018 f828 	bl	801b548 <strtok>
 80034f8:	61f8      	str	r0, [r7, #28]
    int cnt = 0;
 80034fa:	2300      	movs	r3, #0
 80034fc:	61bb      	str	r3, [r7, #24]
    int cnt12=0;
 80034fe:	2300      	movs	r3, #0
 8003500:	617b      	str	r3, [r7, #20]
    while(token !=NULL){
 8003502:	e01d      	b.n	8003540 <nmea_parse+0x64>
        data[cnt++] = malloc(strlen(token)+1); //free later!!!!!
 8003504:	69f8      	ldr	r0, [r7, #28]
 8003506:	f7fc fe8b 	bl	8000220 <strlen>
 800350a:	4603      	mov	r3, r0
 800350c:	1c5a      	adds	r2, r3, #1
 800350e:	69bc      	ldr	r4, [r7, #24]
 8003510:	1c63      	adds	r3, r4, #1
 8003512:	61bb      	str	r3, [r7, #24]
 8003514:	4610      	mov	r0, r2
 8003516:	f016 f887 	bl	8019628 <malloc>
 800351a:	4603      	mov	r3, r0
 800351c:	461a      	mov	r2, r3
 800351e:	4b3f      	ldr	r3, [pc, #252]	@ (800361c <nmea_parse+0x140>)
 8003520:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
        strcpy(data[cnt-1], token);
 8003524:	69bb      	ldr	r3, [r7, #24]
 8003526:	3b01      	subs	r3, #1
 8003528:	4a3c      	ldr	r2, [pc, #240]	@ (800361c <nmea_parse+0x140>)
 800352a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800352e:	69f9      	ldr	r1, [r7, #28]
 8003530:	4618      	mov	r0, r3
 8003532:	f018 f902 	bl	801b73a <strcpy>
        token = strtok(NULL, "$");
 8003536:	493a      	ldr	r1, [pc, #232]	@ (8003620 <nmea_parse+0x144>)
 8003538:	2000      	movs	r0, #0
 800353a:	f018 f805 	bl	801b548 <strtok>
 800353e:	61f8      	str	r0, [r7, #28]
    while(token !=NULL){
 8003540:	69fb      	ldr	r3, [r7, #28]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d1de      	bne.n	8003504 <nmea_parse+0x28>
    }
    for(int i = 0; i<cnt; i++){
 8003546:	2300      	movs	r3, #0
 8003548:	613b      	str	r3, [r7, #16]
 800354a:	e048      	b.n	80035de <nmea_parse+0x102>
       if(strstr(data[i], "\r\n")!=NULL && gps_checksum(data[i])){
 800354c:	4a33      	ldr	r2, [pc, #204]	@ (800361c <nmea_parse+0x140>)
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003554:	4933      	ldr	r1, [pc, #204]	@ (8003624 <nmea_parse+0x148>)
 8003556:	4618      	mov	r0, r3
 8003558:	f018 f852 	bl	801b600 <strstr>
 800355c:	4603      	mov	r3, r0
 800355e:	2b00      	cmp	r3, #0
 8003560:	d03a      	beq.n	80035d8 <nmea_parse+0xfc>
 8003562:	4a2e      	ldr	r2, [pc, #184]	@ (800361c <nmea_parse+0x140>)
 8003564:	693b      	ldr	r3, [r7, #16]
 8003566:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800356a:	4618      	mov	r0, r3
 800356c:	f7ff fd28 	bl	8002fc0 <gps_checksum>
 8003570:	4603      	mov	r3, r0
 8003572:	2b00      	cmp	r3, #0
 8003574:	d030      	beq.n	80035d8 <nmea_parse+0xfc>
           if(strstr(data[i], "GNRMC")!=NULL){
 8003576:	4a29      	ldr	r2, [pc, #164]	@ (800361c <nmea_parse+0x140>)
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800357e:	492a      	ldr	r1, [pc, #168]	@ (8003628 <nmea_parse+0x14c>)
 8003580:	4618      	mov	r0, r3
 8003582:	f018 f83d 	bl	801b600 <strstr>
 8003586:	4603      	mov	r3, r0
 8003588:	2b00      	cmp	r3, #0
 800358a:	d00d      	beq.n	80035a8 <nmea_parse+0xcc>
        	   nmea_GNRMC(gps_data, data[i]);
 800358c:	4a23      	ldr	r2, [pc, #140]	@ (800361c <nmea_parse+0x140>)
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003594:	4619      	mov	r1, r3
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	f7ff ff2e 	bl	80033f8 <nmea_GNRMC>
        	   if(cnt12>=1){
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	dc22      	bgt.n	80035e8 <nmea_parse+0x10c>
        		  break;
        	   }
               cnt12=1;
 80035a2:	2301      	movs	r3, #1
 80035a4:	617b      	str	r3, [r7, #20]
 80035a6:	e017      	b.n	80035d8 <nmea_parse+0xfc>

           }
           else if(strstr(data[i], "GNGGA")!=NULL){
 80035a8:	4a1c      	ldr	r2, [pc, #112]	@ (800361c <nmea_parse+0x140>)
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035b0:	491e      	ldr	r1, [pc, #120]	@ (800362c <nmea_parse+0x150>)
 80035b2:	4618      	mov	r0, r3
 80035b4:	f018 f824 	bl	801b600 <strstr>
 80035b8:	4603      	mov	r3, r0
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d00c      	beq.n	80035d8 <nmea_parse+0xfc>
               nmea_GPGGA(gps_data, data[i]);
 80035be:	4a17      	ldr	r2, [pc, #92]	@ (800361c <nmea_parse+0x140>)
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035c6:	4619      	mov	r1, r3
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	f7ff fd43 	bl	8003054 <nmea_GPGGA>
               if(cnt12>=1){
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	dc0b      	bgt.n	80035ec <nmea_parse+0x110>
              	   break;
               }
               cnt12=1;
 80035d4:	2301      	movs	r3, #1
 80035d6:	617b      	str	r3, [r7, #20]
    for(int i = 0; i<cnt; i++){
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	3301      	adds	r3, #1
 80035dc:	613b      	str	r3, [r7, #16]
 80035de:	693a      	ldr	r2, [r7, #16]
 80035e0:	69bb      	ldr	r3, [r7, #24]
 80035e2:	429a      	cmp	r2, r3
 80035e4:	dbb2      	blt.n	800354c <nmea_parse+0x70>
 80035e6:	e002      	b.n	80035ee <nmea_parse+0x112>
        		  break;
 80035e8:	bf00      	nop
 80035ea:	e000      	b.n	80035ee <nmea_parse+0x112>
              	   break;
 80035ec:	bf00      	nop
           }
       }

    }
    for(int i = 0; i<cnt; i++) free(data[i]);
 80035ee:	2300      	movs	r3, #0
 80035f0:	60fb      	str	r3, [r7, #12]
 80035f2:	e009      	b.n	8003608 <nmea_parse+0x12c>
 80035f4:	4a09      	ldr	r2, [pc, #36]	@ (800361c <nmea_parse+0x140>)
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035fc:	4618      	mov	r0, r3
 80035fe:	f016 f81b 	bl	8019638 <free>
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	3301      	adds	r3, #1
 8003606:	60fb      	str	r3, [r7, #12]
 8003608:	68fa      	ldr	r2, [r7, #12]
 800360a:	69bb      	ldr	r3, [r7, #24]
 800360c:	429a      	cmp	r2, r3
 800360e:	dbf1      	blt.n	80035f4 <nmea_parse+0x118>


}
 8003610:	bf00      	nop
 8003612:	bf00      	nop
 8003614:	3724      	adds	r7, #36	@ 0x24
 8003616:	46bd      	mov	sp, r7
 8003618:	bd90      	pop	{r4, r7, pc}
 800361a:	bf00      	nop
 800361c:	20000d08 	.word	0x20000d08
 8003620:	0801fe6c 	.word	0x0801fe6c
 8003624:	0801fe70 	.word	0x0801fe70
 8003628:	0801fe74 	.word	0x0801fe74
 800362c:	0801fe7c 	.word	0x0801fe7c

08003630 <distancecalc>:

double distancecalc(double lat1, double lat2, double long1, double long2){
 8003630:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003634:	b08a      	sub	sp, #40	@ 0x28
 8003636:	af00      	add	r7, sp, #0
 8003638:	ed87 0b06 	vstr	d0, [r7, #24]
 800363c:	ed87 1b04 	vstr	d1, [r7, #16]
 8003640:	ed87 2b02 	vstr	d2, [r7, #8]
 8003644:	ed87 3b00 	vstr	d3, [r7]
	double distance=0;
 8003648:	f04f 0200 	mov.w	r2, #0
 800364c:	f04f 0300 	mov.w	r3, #0
 8003650:	e9c7 2308 	strd	r2, r3, [r7, #32]
	distance=(double) 6371000*acosl(fmin(1,sinl(lat1*(M_PI/180))*sinl(lat2*(M_PI/180))+cosl(lat1*(M_PI/180))*cosl(lat2*(M_PI/180))*cosl((long2-long1)*(M_PI/180))));
 8003654:	a358      	add	r3, pc, #352	@ (adr r3, 80037b8 <distancecalc+0x188>)
 8003656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800365a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800365e:	f7fc ffa3 	bl	80005a8 <__aeabi_dmul>
 8003662:	4602      	mov	r2, r0
 8003664:	460b      	mov	r3, r1
 8003666:	ec43 2b17 	vmov	d7, r2, r3
 800366a:	eeb0 0a47 	vmov.f32	s0, s14
 800366e:	eef0 0a67 	vmov.f32	s1, s15
 8003672:	f01a fde3 	bl	801e23c <sinl>
 8003676:	ec55 4b10 	vmov	r4, r5, d0
 800367a:	a34f      	add	r3, pc, #316	@ (adr r3, 80037b8 <distancecalc+0x188>)
 800367c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003680:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003684:	f7fc ff90 	bl	80005a8 <__aeabi_dmul>
 8003688:	4602      	mov	r2, r0
 800368a:	460b      	mov	r3, r1
 800368c:	ec43 2b17 	vmov	d7, r2, r3
 8003690:	eeb0 0a47 	vmov.f32	s0, s14
 8003694:	eef0 0a67 	vmov.f32	s1, s15
 8003698:	f01a fdd0 	bl	801e23c <sinl>
 800369c:	ec53 2b10 	vmov	r2, r3, d0
 80036a0:	4620      	mov	r0, r4
 80036a2:	4629      	mov	r1, r5
 80036a4:	f7fc ff80 	bl	80005a8 <__aeabi_dmul>
 80036a8:	4602      	mov	r2, r0
 80036aa:	460b      	mov	r3, r1
 80036ac:	4614      	mov	r4, r2
 80036ae:	461d      	mov	r5, r3
 80036b0:	a341      	add	r3, pc, #260	@ (adr r3, 80037b8 <distancecalc+0x188>)
 80036b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036b6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80036ba:	f7fc ff75 	bl	80005a8 <__aeabi_dmul>
 80036be:	4602      	mov	r2, r0
 80036c0:	460b      	mov	r3, r1
 80036c2:	ec43 2b17 	vmov	d7, r2, r3
 80036c6:	eeb0 0a47 	vmov.f32	s0, s14
 80036ca:	eef0 0a67 	vmov.f32	s1, s15
 80036ce:	f01a fdb3 	bl	801e238 <cosl>
 80036d2:	ec59 8b10 	vmov	r8, r9, d0
 80036d6:	a338      	add	r3, pc, #224	@ (adr r3, 80037b8 <distancecalc+0x188>)
 80036d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036dc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80036e0:	f7fc ff62 	bl	80005a8 <__aeabi_dmul>
 80036e4:	4602      	mov	r2, r0
 80036e6:	460b      	mov	r3, r1
 80036e8:	ec43 2b17 	vmov	d7, r2, r3
 80036ec:	eeb0 0a47 	vmov.f32	s0, s14
 80036f0:	eef0 0a67 	vmov.f32	s1, s15
 80036f4:	f01a fda0 	bl	801e238 <cosl>
 80036f8:	ec53 2b10 	vmov	r2, r3, d0
 80036fc:	4640      	mov	r0, r8
 80036fe:	4649      	mov	r1, r9
 8003700:	f7fc ff52 	bl	80005a8 <__aeabi_dmul>
 8003704:	4602      	mov	r2, r0
 8003706:	460b      	mov	r3, r1
 8003708:	4690      	mov	r8, r2
 800370a:	4699      	mov	r9, r3
 800370c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003710:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003714:	f7fc fd90 	bl	8000238 <__aeabi_dsub>
 8003718:	4602      	mov	r2, r0
 800371a:	460b      	mov	r3, r1
 800371c:	4610      	mov	r0, r2
 800371e:	4619      	mov	r1, r3
 8003720:	a325      	add	r3, pc, #148	@ (adr r3, 80037b8 <distancecalc+0x188>)
 8003722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003726:	f7fc ff3f 	bl	80005a8 <__aeabi_dmul>
 800372a:	4602      	mov	r2, r0
 800372c:	460b      	mov	r3, r1
 800372e:	ec43 2b17 	vmov	d7, r2, r3
 8003732:	eeb0 0a47 	vmov.f32	s0, s14
 8003736:	eef0 0a67 	vmov.f32	s1, s15
 800373a:	f01a fd7d 	bl	801e238 <cosl>
 800373e:	ec53 2b10 	vmov	r2, r3, d0
 8003742:	4640      	mov	r0, r8
 8003744:	4649      	mov	r1, r9
 8003746:	f7fc ff2f 	bl	80005a8 <__aeabi_dmul>
 800374a:	4602      	mov	r2, r0
 800374c:	460b      	mov	r3, r1
 800374e:	4620      	mov	r0, r4
 8003750:	4629      	mov	r1, r5
 8003752:	f7fc fd73 	bl	800023c <__adddf3>
 8003756:	4602      	mov	r2, r0
 8003758:	460b      	mov	r3, r1
 800375a:	ec43 2b17 	vmov	d7, r2, r3
 800375e:	ed9f 1b14 	vldr	d1, [pc, #80]	@ 80037b0 <distancecalc+0x180>
 8003762:	eeb0 0a47 	vmov.f32	s0, s14
 8003766:	eef0 0a67 	vmov.f32	s1, s15
 800376a:	f01a fd07 	bl	801e17c <fmin>
 800376e:	eeb0 7a40 	vmov.f32	s14, s0
 8003772:	eef0 7a60 	vmov.f32	s15, s1
 8003776:	eeb0 0a47 	vmov.f32	s0, s14
 800377a:	eef0 0a67 	vmov.f32	s1, s15
 800377e:	f01a fd5f 	bl	801e240 <acosl>
 8003782:	ec51 0b10 	vmov	r0, r1, d0
 8003786:	a30e      	add	r3, pc, #56	@ (adr r3, 80037c0 <distancecalc+0x190>)
 8003788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800378c:	f7fc ff0c 	bl	80005a8 <__aeabi_dmul>
 8003790:	4602      	mov	r2, r0
 8003792:	460b      	mov	r3, r1
 8003794:	e9c7 2308 	strd	r2, r3, [r7, #32]

	return distance;
 8003798:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800379c:	ec43 2b17 	vmov	d7, r2, r3
}
 80037a0:	eeb0 0a47 	vmov.f32	s0, s14
 80037a4:	eef0 0a67 	vmov.f32	s1, s15
 80037a8:	3728      	adds	r7, #40	@ 0x28
 80037aa:	46bd      	mov	sp, r7
 80037ac:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80037b0:	00000000 	.word	0x00000000
 80037b4:	3ff00000 	.word	0x3ff00000
 80037b8:	a2529d39 	.word	0xa2529d39
 80037bc:	3f91df46 	.word	0x3f91df46
 80037c0:	00000000 	.word	0x00000000
 80037c4:	41584dae 	.word	0x41584dae

080037c8 <MX_RF_Init>:

/* USER CODE END 0 */

/* RF init function */
void MX_RF_Init(void)
{
 80037c8:	b480      	push	{r7}
 80037ca:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 80037cc:	bf00      	nop
 80037ce:	46bd      	mov	sp, r7
 80037d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d4:	4770      	bx	lr

080037d6 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 80037d6:	b480      	push	{r7}
 80037d8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80037da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80037de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037e2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80037e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80037ea:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80037ee:	bf00      	nop
 80037f0:	46bd      	mov	sp, r7
 80037f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f6:	4770      	bx	lr

080037f8 <LL_APB1_GRP1_EnableClock>:
{
 80037f8:	b480      	push	{r7}
 80037fa:	b085      	sub	sp, #20
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8003800:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003804:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003806:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	4313      	orrs	r3, r2
 800380e:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8003810:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003814:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	4013      	ands	r3, r2
 800381a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800381c:	68fb      	ldr	r3, [r7, #12]
}
 800381e:	bf00      	nop
 8003820:	3714      	adds	r7, #20
 8003822:	46bd      	mov	sp, r7
 8003824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003828:	4770      	bx	lr
	...

0800382c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b086      	sub	sp, #24
 8003830:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8003832:	1d3b      	adds	r3, r7, #4
 8003834:	2200      	movs	r2, #0
 8003836:	601a      	str	r2, [r3, #0]
 8003838:	605a      	str	r2, [r3, #4]
 800383a:	609a      	str	r2, [r3, #8]
 800383c:	60da      	str	r2, [r3, #12]
 800383e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8003840:	2300      	movs	r3, #0
 8003842:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003844:	4b2c      	ldr	r3, [pc, #176]	@ (80038f8 <MX_RTC_Init+0xcc>)
 8003846:	4a2d      	ldr	r2, [pc, #180]	@ (80038fc <MX_RTC_Init+0xd0>)
 8003848:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800384a:	4b2b      	ldr	r3, [pc, #172]	@ (80038f8 <MX_RTC_Init+0xcc>)
 800384c:	2200      	movs	r2, #0
 800384e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8003850:	4b29      	ldr	r3, [pc, #164]	@ (80038f8 <MX_RTC_Init+0xcc>)
 8003852:	227f      	movs	r2, #127	@ 0x7f
 8003854:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8003856:	4b28      	ldr	r3, [pc, #160]	@ (80038f8 <MX_RTC_Init+0xcc>)
 8003858:	f641 6284 	movw	r2, #7812	@ 0x1e84
 800385c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800385e:	4b26      	ldr	r3, [pc, #152]	@ (80038f8 <MX_RTC_Init+0xcc>)
 8003860:	2200      	movs	r2, #0
 8003862:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003864:	4b24      	ldr	r3, [pc, #144]	@ (80038f8 <MX_RTC_Init+0xcc>)
 8003866:	2200      	movs	r2, #0
 8003868:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800386a:	4b23      	ldr	r3, [pc, #140]	@ (80038f8 <MX_RTC_Init+0xcc>)
 800386c:	2200      	movs	r2, #0
 800386e:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8003870:	4b21      	ldr	r3, [pc, #132]	@ (80038f8 <MX_RTC_Init+0xcc>)
 8003872:	2200      	movs	r2, #0
 8003874:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003876:	4820      	ldr	r0, [pc, #128]	@ (80038f8 <MX_RTC_Init+0xcc>)
 8003878:	f009 ff62 	bl	800d740 <HAL_RTC_Init>
 800387c:	4603      	mov	r3, r0
 800387e:	2b00      	cmp	r3, #0
 8003880:	d001      	beq.n	8003886 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8003882:	f7ff fb97 	bl	8002fb4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8003886:	2300      	movs	r3, #0
 8003888:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 800388a:	2300      	movs	r3, #0
 800388c:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 800388e:	2300      	movs	r3, #0
 8003890:	71bb      	strb	r3, [r7, #6]
  sTime.SubSeconds = 0x0;
 8003892:	2300      	movs	r3, #0
 8003894:	60bb      	str	r3, [r7, #8]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003896:	2300      	movs	r3, #0
 8003898:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800389a:	2300      	movs	r3, #0
 800389c:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800389e:	1d3b      	adds	r3, r7, #4
 80038a0:	2201      	movs	r2, #1
 80038a2:	4619      	mov	r1, r3
 80038a4:	4814      	ldr	r0, [pc, #80]	@ (80038f8 <MX_RTC_Init+0xcc>)
 80038a6:	f009 fffb 	bl	800d8a0 <HAL_RTC_SetTime>
 80038aa:	4603      	mov	r3, r0
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d001      	beq.n	80038b4 <MX_RTC_Init+0x88>
  {
    Error_Handler();
 80038b0:	f7ff fb80 	bl	8002fb4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80038b4:	2301      	movs	r3, #1
 80038b6:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80038b8:	2301      	movs	r3, #1
 80038ba:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 80038bc:	2301      	movs	r3, #1
 80038be:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 80038c0:	2300      	movs	r3, #0
 80038c2:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80038c4:	463b      	mov	r3, r7
 80038c6:	2201      	movs	r2, #1
 80038c8:	4619      	mov	r1, r3
 80038ca:	480b      	ldr	r0, [pc, #44]	@ (80038f8 <MX_RTC_Init+0xcc>)
 80038cc:	f00a f8ac 	bl	800da28 <HAL_RTC_SetDate>
 80038d0:	4603      	mov	r3, r0
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d001      	beq.n	80038da <MX_RTC_Init+0xae>
  {
    Error_Handler();
 80038d6:	f7ff fb6d 	bl	8002fb4 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
 80038da:	2204      	movs	r2, #4
 80038dc:	2100      	movs	r1, #0
 80038de:	4806      	ldr	r0, [pc, #24]	@ (80038f8 <MX_RTC_Init+0xcc>)
 80038e0:	f00a f9c0 	bl	800dc64 <HAL_RTCEx_SetWakeUpTimer_IT>
 80038e4:	4603      	mov	r3, r0
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d001      	beq.n	80038ee <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 80038ea:	f7ff fb63 	bl	8002fb4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80038ee:	bf00      	nop
 80038f0:	3718      	adds	r7, #24
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}
 80038f6:	bf00      	nop
 80038f8:	20000d44 	.word	0x20000d44
 80038fc:	40002800 	.word	0x40002800

08003900 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b096      	sub	sp, #88	@ 0x58
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003908:	f107 0308 	add.w	r3, r7, #8
 800390c:	2250      	movs	r2, #80	@ 0x50
 800390e:	2100      	movs	r1, #0
 8003910:	4618      	mov	r0, r3
 8003912:	f017 fdfe 	bl	801b512 <memset>
  if(rtcHandle->Instance==RTC)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a14      	ldr	r2, [pc, #80]	@ (800396c <HAL_RTC_MspInit+0x6c>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d121      	bne.n	8003964 <HAL_RTC_MspInit+0x64>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

	  HAL_PWR_EnableBkUpAccess();
 8003920:	f008 f932 	bl	800bb88 <HAL_PWR_EnableBkUpAccess>




	  HAL_PWR_EnableBkUpAccess();
 8003924:	f008 f930 	bl	800bb88 <HAL_PWR_EnableBkUpAccess>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003928:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800392c:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV32;
 800392e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003932:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003934:	f107 0308 	add.w	r3, r7, #8
 8003938:	4618      	mov	r0, r3
 800393a:	f009 fc7a 	bl	800d232 <HAL_RCCEx_PeriphCLKConfig>
 800393e:	4603      	mov	r3, r0
 8003940:	2b00      	cmp	r3, #0
 8003942:	d001      	beq.n	8003948 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 8003944:	f7ff fb36 	bl	8002fb4 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003948:	f7ff ff45 	bl	80037d6 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800394c:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8003950:	f7ff ff52 	bl	80037f8 <LL_APB1_GRP1_EnableClock>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8003954:	2200      	movs	r2, #0
 8003956:	2100      	movs	r1, #0
 8003958:	2003      	movs	r0, #3
 800395a:	f004 ffc4 	bl	80088e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 800395e:	2003      	movs	r0, #3
 8003960:	f004 ffdb 	bl	800891a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8003964:	bf00      	nop
 8003966:	3758      	adds	r7, #88	@ 0x58
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}
 800396c:	40002800 	.word	0x40002800

08003970 <LL_AHB2_GRP1_EnableClock>:
{
 8003970:	b480      	push	{r7}
 8003972:	b085      	sub	sp, #20
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8003978:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800397c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800397e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	4313      	orrs	r3, r2
 8003986:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8003988:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800398c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	4013      	ands	r3, r2
 8003992:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003994:	68fb      	ldr	r3, [r7, #12]
}
 8003996:	bf00      	nop
 8003998:	3714      	adds	r7, #20
 800399a:	46bd      	mov	sp, r7
 800399c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a0:	4770      	bx	lr

080039a2 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80039a2:	b480      	push	{r7}
 80039a4:	b085      	sub	sp, #20
 80039a6:	af00      	add	r7, sp, #0
 80039a8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80039aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80039ae:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80039b0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	4313      	orrs	r3, r2
 80039b8:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80039ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80039be:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	4013      	ands	r3, r2
 80039c4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80039c6:	68fb      	ldr	r3, [r7, #12]
}
 80039c8:	bf00      	nop
 80039ca:	3714      	adds	r7, #20
 80039cc:	46bd      	mov	sp, r7
 80039ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d2:	4770      	bx	lr

080039d4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80039d8:	4b1b      	ldr	r3, [pc, #108]	@ (8003a48 <MX_SPI1_Init+0x74>)
 80039da:	4a1c      	ldr	r2, [pc, #112]	@ (8003a4c <MX_SPI1_Init+0x78>)
 80039dc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80039de:	4b1a      	ldr	r3, [pc, #104]	@ (8003a48 <MX_SPI1_Init+0x74>)
 80039e0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80039e4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80039e6:	4b18      	ldr	r3, [pc, #96]	@ (8003a48 <MX_SPI1_Init+0x74>)
 80039e8:	2200      	movs	r2, #0
 80039ea:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80039ec:	4b16      	ldr	r3, [pc, #88]	@ (8003a48 <MX_SPI1_Init+0x74>)
 80039ee:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80039f2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80039f4:	4b14      	ldr	r3, [pc, #80]	@ (8003a48 <MX_SPI1_Init+0x74>)
 80039f6:	2200      	movs	r2, #0
 80039f8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80039fa:	4b13      	ldr	r3, [pc, #76]	@ (8003a48 <MX_SPI1_Init+0x74>)
 80039fc:	2200      	movs	r2, #0
 80039fe:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003a00:	4b11      	ldr	r3, [pc, #68]	@ (8003a48 <MX_SPI1_Init+0x74>)
 8003a02:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003a06:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8003a08:	4b0f      	ldr	r3, [pc, #60]	@ (8003a48 <MX_SPI1_Init+0x74>)
 8003a0a:	2210      	movs	r2, #16
 8003a0c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003a0e:	4b0e      	ldr	r3, [pc, #56]	@ (8003a48 <MX_SPI1_Init+0x74>)
 8003a10:	2200      	movs	r2, #0
 8003a12:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003a14:	4b0c      	ldr	r3, [pc, #48]	@ (8003a48 <MX_SPI1_Init+0x74>)
 8003a16:	2200      	movs	r2, #0
 8003a18:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a1a:	4b0b      	ldr	r3, [pc, #44]	@ (8003a48 <MX_SPI1_Init+0x74>)
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8003a20:	4b09      	ldr	r3, [pc, #36]	@ (8003a48 <MX_SPI1_Init+0x74>)
 8003a22:	2207      	movs	r2, #7
 8003a24:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003a26:	4b08      	ldr	r3, [pc, #32]	@ (8003a48 <MX_SPI1_Init+0x74>)
 8003a28:	2200      	movs	r2, #0
 8003a2a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003a2c:	4b06      	ldr	r3, [pc, #24]	@ (8003a48 <MX_SPI1_Init+0x74>)
 8003a2e:	2208      	movs	r2, #8
 8003a30:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003a32:	4805      	ldr	r0, [pc, #20]	@ (8003a48 <MX_SPI1_Init+0x74>)
 8003a34:	f00a f9d2 	bl	800dddc <HAL_SPI_Init>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d001      	beq.n	8003a42 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8003a3e:	f7ff fab9 	bl	8002fb4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003a42:	bf00      	nop
 8003a44:	bd80      	pop	{r7, pc}
 8003a46:	bf00      	nop
 8003a48:	20000d9c 	.word	0x20000d9c
 8003a4c:	40013000 	.word	0x40013000

08003a50 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b088      	sub	sp, #32
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a58:	f107 030c 	add.w	r3, r7, #12
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	601a      	str	r2, [r3, #0]
 8003a60:	605a      	str	r2, [r3, #4]
 8003a62:	609a      	str	r2, [r3, #8]
 8003a64:	60da      	str	r2, [r3, #12]
 8003a66:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a1c      	ldr	r2, [pc, #112]	@ (8003ae0 <HAL_SPI_MspInit+0x90>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d132      	bne.n	8003ad8 <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003a72:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8003a76:	f7ff ff94 	bl	80039a2 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a7a:	2001      	movs	r0, #1
 8003a7c:	f7ff ff78 	bl	8003970 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a80:	2002      	movs	r0, #2
 8003a82:	f7ff ff75 	bl	8003970 <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6;
 8003a86:	2342      	movs	r3, #66	@ 0x42
 8003a88:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a8a:	2302      	movs	r3, #2
 8003a8c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a92:	2300      	movs	r3, #0
 8003a94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003a96:	2305      	movs	r3, #5
 8003a98:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a9a:	f107 030c 	add.w	r3, r7, #12
 8003a9e:	4619      	mov	r1, r3
 8003aa0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003aa4:	f005 fabc 	bl	8009020 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003aa8:	2320      	movs	r3, #32
 8003aaa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003aac:	2302      	movs	r3, #2
 8003aae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003ab8:	2305      	movs	r3, #5
 8003aba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003abc:	f107 030c 	add.w	r3, r7, #12
 8003ac0:	4619      	mov	r1, r3
 8003ac2:	4808      	ldr	r0, [pc, #32]	@ (8003ae4 <HAL_SPI_MspInit+0x94>)
 8003ac4:	f005 faac 	bl	8009020 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 3, 0);
 8003ac8:	2200      	movs	r2, #0
 8003aca:	2103      	movs	r1, #3
 8003acc:	2022      	movs	r0, #34	@ 0x22
 8003ace:	f004 ff0a 	bl	80088e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8003ad2:	2022      	movs	r0, #34	@ 0x22
 8003ad4:	f004 ff21 	bl	800891a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8003ad8:	bf00      	nop
 8003ada:	3720      	adds	r7, #32
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bd80      	pop	{r7, pc}
 8003ae0:	40013000 	.word	0x40013000
 8003ae4:	48000400 	.word	0x48000400

08003ae8 <csvframe>:
  /* USER CODE END SPI1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
int csvframe(uint8_t* buffer,float temp,float vbat,GPS * gpsdata,int otherval1,float otherval2,double baroalt){
 8003ae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003aec:	ed2d 8b02 	vpush	{d8}
 8003af0:	b0ab      	sub	sp, #172	@ 0xac
 8003af2:	af18      	add	r7, sp, #96	@ 0x60
 8003af4:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8003af6:	ed87 0a0e 	vstr	s0, [r7, #56]	@ 0x38
 8003afa:	edc7 0a0d 	vstr	s1, [r7, #52]	@ 0x34
 8003afe:	6339      	str	r1, [r7, #48]	@ 0x30
 8003b00:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003b02:	ed87 1a0a 	vstr	s2, [r7, #40]	@ 0x28
 8003b06:	ed87 2b08 	vstr	d2, [r7, #32]
	int framesize=0;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	647b      	str	r3, [r7, #68]	@ 0x44
	framesize=snprintf((char *)buffer,256, "%0.2f,%0.3f,%0.2f,%0.7f,%0.7f,%0.2f,%d,%0.2f,%0.2lf,%d-%02d-%02dT%02d:%02d:%02d.00+02:00\n\r",temp,vbat,(gpsdata->speed)*3.6,gpsdata->latitude,gpsdata->longitude,gpsdata->altitude,otherval1,otherval2,baroalt,ANNEE,MOIS,JOURS,HR,MINUTE,SEC);
 8003b0e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003b10:	f7fc fcf2 	bl	80004f8 <__aeabi_f2d>
 8003b14:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8003b18:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8003b1a:	f7fc fced 	bl	80004f8 <__aeabi_f2d>
 8003b1e:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8003b22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b26:	4618      	mov	r0, r3
 8003b28:	f7fc fce6 	bl	80004f8 <__aeabi_f2d>
 8003b2c:	a333      	add	r3, pc, #204	@ (adr r3, 8003bfc <csvframe+0x114>)
 8003b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b32:	f7fc fd39 	bl	80005a8 <__aeabi_dmul>
 8003b36:	4602      	mov	r2, r0
 8003b38:	460b      	mov	r3, r1
 8003b3a:	ec43 2b18 	vmov	d8, r2, r3
 8003b3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b40:	e9d3 4500 	ldrd	r4, r5, [r3]
 8003b44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b46:	e9d3 8904 	ldrd	r8, r9, [r3, #16]
 8003b4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b4c:	69db      	ldr	r3, [r3, #28]
 8003b4e:	4618      	mov	r0, r3
 8003b50:	f7fc fcd2 	bl	80004f8 <__aeabi_f2d>
 8003b54:	4682      	mov	sl, r0
 8003b56:	468b      	mov	fp, r1
 8003b58:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003b5a:	f7fc fccd 	bl	80004f8 <__aeabi_f2d>
 8003b5e:	4b20      	ldr	r3, [pc, #128]	@ (8003be0 <csvframe+0xf8>)
 8003b60:	881b      	ldrh	r3, [r3, #0]
 8003b62:	60fb      	str	r3, [r7, #12]
 8003b64:	4b1f      	ldr	r3, [pc, #124]	@ (8003be4 <csvframe+0xfc>)
 8003b66:	781b      	ldrb	r3, [r3, #0]
 8003b68:	60bb      	str	r3, [r7, #8]
 8003b6a:	4b1f      	ldr	r3, [pc, #124]	@ (8003be8 <csvframe+0x100>)
 8003b6c:	781b      	ldrb	r3, [r3, #0]
 8003b6e:	607b      	str	r3, [r7, #4]
 8003b70:	4b1e      	ldr	r3, [pc, #120]	@ (8003bec <csvframe+0x104>)
 8003b72:	781b      	ldrb	r3, [r3, #0]
 8003b74:	461e      	mov	r6, r3
 8003b76:	4b1e      	ldr	r3, [pc, #120]	@ (8003bf0 <csvframe+0x108>)
 8003b78:	781b      	ldrb	r3, [r3, #0]
 8003b7a:	461a      	mov	r2, r3
 8003b7c:	4b1d      	ldr	r3, [pc, #116]	@ (8003bf4 <csvframe+0x10c>)
 8003b7e:	781b      	ldrb	r3, [r3, #0]
 8003b80:	9317      	str	r3, [sp, #92]	@ 0x5c
 8003b82:	9216      	str	r2, [sp, #88]	@ 0x58
 8003b84:	9615      	str	r6, [sp, #84]	@ 0x54
 8003b86:	687a      	ldr	r2, [r7, #4]
 8003b88:	9214      	str	r2, [sp, #80]	@ 0x50
 8003b8a:	68ba      	ldr	r2, [r7, #8]
 8003b8c:	9213      	str	r2, [sp, #76]	@ 0x4c
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	9312      	str	r3, [sp, #72]	@ 0x48
 8003b92:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003b96:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8003b9a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8003b9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ba0:	930c      	str	r3, [sp, #48]	@ 0x30
 8003ba2:	e9cd ab0a 	strd	sl, fp, [sp, #40]	@ 0x28
 8003ba6:	e9cd 8908 	strd	r8, r9, [sp, #32]
 8003baa:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8003bae:	ed8d 8b04 	vstr	d8, [sp, #16]
 8003bb2:	ed97 7b04 	vldr	d7, [r7, #16]
 8003bb6:	ed8d 7b02 	vstr	d7, [sp, #8]
 8003bba:	ed97 7b06 	vldr	d7, [r7, #24]
 8003bbe:	ed8d 7b00 	vstr	d7, [sp]
 8003bc2:	4a0d      	ldr	r2, [pc, #52]	@ (8003bf8 <csvframe+0x110>)
 8003bc4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003bc8:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8003bca:	f017 fc0b 	bl	801b3e4 <sniprintf>
 8003bce:	6478      	str	r0, [r7, #68]	@ 0x44
	return framesize;
 8003bd0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	374c      	adds	r7, #76	@ 0x4c
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	ecbd 8b02 	vpop	{d8}
 8003bdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003be0:	20000012 	.word	0x20000012
 8003be4:	20000011 	.word	0x20000011
 8003be8:	20000010 	.word	0x20000010
 8003bec:	20000b9d 	.word	0x20000b9d
 8003bf0:	20000b9e 	.word	0x20000b9e
 8003bf4:	20000b9c 	.word	0x20000b9c
 8003bf8:	0801fe84 	.word	0x0801fe84
 8003bfc:	cccccccd 	.word	0xcccccccd
 8003c00:	400ccccc 	.word	0x400ccccc

08003c04 <storeindex>:


void storeindex(void){
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b09c      	sub	sp, #112	@ 0x70
 8003c08:	af02      	add	r7, sp, #8
	int writepage=MAX_WRITE_PAGE+1;
 8003c0a:	f44f 43c8 	mov.w	r3, #25600	@ 0x6400
 8003c0e:	667b      	str	r3, [r7, #100]	@ 0x64
	uint8_t writebuffer[100];
	memset((uint8_t*)writebuffer,'\0',100);
 8003c10:	463b      	mov	r3, r7
 8003c12:	2264      	movs	r2, #100	@ 0x64
 8003c14:	2100      	movs	r1, #0
 8003c16:	4618      	mov	r0, r3
 8003c18:	f017 fc7b 	bl	801b512 <memset>
	snprintf((char *)writebuffer,100, "%d$%d$",pageoffset,pagenumber);
 8003c1c:	4b14      	ldr	r3, [pc, #80]	@ (8003c70 <storeindex+0x6c>)
 8003c1e:	681a      	ldr	r2, [r3, #0]
 8003c20:	4b14      	ldr	r3, [pc, #80]	@ (8003c74 <storeindex+0x70>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4638      	mov	r0, r7
 8003c26:	9300      	str	r3, [sp, #0]
 8003c28:	4613      	mov	r3, r2
 8003c2a:	4a13      	ldr	r2, [pc, #76]	@ (8003c78 <storeindex+0x74>)
 8003c2c:	2164      	movs	r1, #100	@ 0x64
 8003c2e:	f017 fbd9 	bl	801b3e4 <sniprintf>
	SPIF_EraseSector(&hspif1, (int)floor((writepage)/16));
 8003c32:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	da00      	bge.n	8003c3a <storeindex+0x36>
 8003c38:	330f      	adds	r3, #15
 8003c3a:	111b      	asrs	r3, r3, #4
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f7fc fc49 	bl	80004d4 <__aeabi_i2d>
 8003c42:	4602      	mov	r2, r0
 8003c44:	460b      	mov	r3, r1
 8003c46:	4610      	mov	r0, r2
 8003c48:	4619      	mov	r1, r3
 8003c4a:	f7fc ff5d 	bl	8000b08 <__aeabi_d2iz>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	4619      	mov	r1, r3
 8003c52:	480a      	ldr	r0, [pc, #40]	@ (8003c7c <storeindex+0x78>)
 8003c54:	f013 fdeb 	bl	801782e <SPIF_EraseSector>
	SPIF_WritePage(&hspif1,writepage, (uint8_t *)writebuffer, 100,0);
 8003c58:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8003c5a:	463a      	mov	r2, r7
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	9300      	str	r3, [sp, #0]
 8003c60:	2364      	movs	r3, #100	@ 0x64
 8003c62:	4806      	ldr	r0, [pc, #24]	@ (8003c7c <storeindex+0x78>)
 8003c64:	f013 fe66 	bl	8017934 <SPIF_WritePage>

}
 8003c68:	bf00      	nop
 8003c6a:	3768      	adds	r7, #104	@ 0x68
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}
 8003c70:	20000abc 	.word	0x20000abc
 8003c74:	20000ac0 	.word	0x20000ac0
 8003c78:	0801fee0 	.word	0x0801fee0
 8003c7c:	20000888 	.word	0x20000888

08003c80 <getindex>:

void getindex(void){
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b086      	sub	sp, #24
 8003c84:	af02      	add	r7, sp, #8
	int readpage=MAX_WRITE_PAGE+1;
 8003c86:	f44f 43c8 	mov.w	r3, #25600	@ 0x6400
 8003c8a:	607b      	str	r3, [r7, #4]
	SPIF_ReadPage(&hspif1, readpage, (uint8_t *)indexbuffer, 50, 0);
 8003c8c:	6879      	ldr	r1, [r7, #4]
 8003c8e:	2300      	movs	r3, #0
 8003c90:	9300      	str	r3, [sp, #0]
 8003c92:	2332      	movs	r3, #50	@ 0x32
 8003c94:	4a2b      	ldr	r2, [pc, #172]	@ (8003d44 <getindex+0xc4>)
 8003c96:	482c      	ldr	r0, [pc, #176]	@ (8003d48 <getindex+0xc8>)
 8003c98:	f013 fe6a 	bl	8017970 <SPIF_ReadPage>
	memset(numbuf1,'$',10);
 8003c9c:	220a      	movs	r2, #10
 8003c9e:	2124      	movs	r1, #36	@ 0x24
 8003ca0:	482a      	ldr	r0, [pc, #168]	@ (8003d4c <getindex+0xcc>)
 8003ca2:	f017 fc36 	bl	801b512 <memset>
	memset(numbuf2,'$',10);
 8003ca6:	220a      	movs	r2, #10
 8003ca8:	2124      	movs	r1, #36	@ 0x24
 8003caa:	4829      	ldr	r0, [pc, #164]	@ (8003d50 <getindex+0xd0>)
 8003cac:	f017 fc31 	bl	801b512 <memset>
	int cnt=0;
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	60fb      	str	r3, [r7, #12]
	if((indexbuffer[0]&0x0F)<10 ){
 8003cb4:	4b23      	ldr	r3, [pc, #140]	@ (8003d44 <getindex+0xc4>)
 8003cb6:	781b      	ldrb	r3, [r3, #0]
 8003cb8:	f003 030f 	and.w	r3, r3, #15
 8003cbc:	2b09      	cmp	r3, #9
 8003cbe:	dc3a      	bgt.n	8003d36 <getindex+0xb6>
	while(indexbuffer[cnt]!='$'){
 8003cc0:	e00b      	b.n	8003cda <getindex+0x5a>

			  numbuf1[cnt]=indexbuffer[cnt];
 8003cc2:	4a20      	ldr	r2, [pc, #128]	@ (8003d44 <getindex+0xc4>)
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	4413      	add	r3, r2
 8003cc8:	7819      	ldrb	r1, [r3, #0]
 8003cca:	4a20      	ldr	r2, [pc, #128]	@ (8003d4c <getindex+0xcc>)
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	4413      	add	r3, r2
 8003cd0:	460a      	mov	r2, r1
 8003cd2:	701a      	strb	r2, [r3, #0]
			  cnt++;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	3301      	adds	r3, #1
 8003cd8:	60fb      	str	r3, [r7, #12]
	while(indexbuffer[cnt]!='$'){
 8003cda:	4a1a      	ldr	r2, [pc, #104]	@ (8003d44 <getindex+0xc4>)
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	4413      	add	r3, r2
 8003ce0:	781b      	ldrb	r3, [r3, #0]
 8003ce2:	2b24      	cmp	r3, #36	@ 0x24
 8003ce4:	d1ed      	bne.n	8003cc2 <getindex+0x42>
		  }
		  cnt++;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	3301      	adds	r3, #1
 8003cea:	60fb      	str	r3, [r7, #12]
		  int cnt1=0;
 8003cec:	2300      	movs	r3, #0
 8003cee:	60bb      	str	r3, [r7, #8]
		  while(indexbuffer[cnt]!='$'){
 8003cf0:	e00e      	b.n	8003d10 <getindex+0x90>

		  		  numbuf2[cnt1]=indexbuffer[cnt];
 8003cf2:	4a14      	ldr	r2, [pc, #80]	@ (8003d44 <getindex+0xc4>)
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	4413      	add	r3, r2
 8003cf8:	7819      	ldrb	r1, [r3, #0]
 8003cfa:	4a15      	ldr	r2, [pc, #84]	@ (8003d50 <getindex+0xd0>)
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	4413      	add	r3, r2
 8003d00:	460a      	mov	r2, r1
 8003d02:	701a      	strb	r2, [r3, #0]
		  		  cnt1++;
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	3301      	adds	r3, #1
 8003d08:	60bb      	str	r3, [r7, #8]
		  		  cnt++;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	3301      	adds	r3, #1
 8003d0e:	60fb      	str	r3, [r7, #12]
		  while(indexbuffer[cnt]!='$'){
 8003d10:	4a0c      	ldr	r2, [pc, #48]	@ (8003d44 <getindex+0xc4>)
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	4413      	add	r3, r2
 8003d16:	781b      	ldrb	r3, [r3, #0]
 8003d18:	2b24      	cmp	r3, #36	@ 0x24
 8003d1a:	d1ea      	bne.n	8003cf2 <getindex+0x72>
		  	  }

		 pageoffset=atoi((char *)numbuf1);
 8003d1c:	480b      	ldr	r0, [pc, #44]	@ (8003d4c <getindex+0xcc>)
 8003d1e:	f015 fc7f 	bl	8019620 <atoi>
 8003d22:	4603      	mov	r3, r0
 8003d24:	4a0b      	ldr	r2, [pc, #44]	@ (8003d54 <getindex+0xd4>)
 8003d26:	6013      	str	r3, [r2, #0]
		 pagenumber=atoi((char *)numbuf2);
 8003d28:	4809      	ldr	r0, [pc, #36]	@ (8003d50 <getindex+0xd0>)
 8003d2a:	f015 fc79 	bl	8019620 <atoi>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	4a09      	ldr	r2, [pc, #36]	@ (8003d58 <getindex+0xd8>)
 8003d32:	6013      	str	r3, [r2, #0]
	}
	else{
		storeindex();
	}

}
 8003d34:	e001      	b.n	8003d3a <getindex+0xba>
		storeindex();
 8003d36:	f7ff ff65 	bl	8003c04 <storeindex>
}
 8003d3a:	bf00      	nop
 8003d3c:	3710      	adds	r7, #16
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd80      	pop	{r7, pc}
 8003d42:	bf00      	nop
 8003d44:	20000d68 	.word	0x20000d68
 8003d48:	20000888 	.word	0x20000888
 8003d4c:	20000ac8 	.word	0x20000ac8
 8003d50:	20000ad4 	.word	0x20000ad4
 8003d54:	20000abc 	.word	0x20000abc
 8003d58:	20000ac0 	.word	0x20000ac0

08003d5c <writebuffertoflash>:

void writebuffertoflash(uint8_t * buffer,int bufferlenght){
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b084      	sub	sp, #16
 8003d60:	af02      	add	r7, sp, #8
 8003d62:	6078      	str	r0, [r7, #4]
 8003d64:	6039      	str	r1, [r7, #0]
	if((pagenumber+1)%16==0){
 8003d66:	4b3f      	ldr	r3, [pc, #252]	@ (8003e64 <writebuffertoflash+0x108>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	3301      	adds	r3, #1
 8003d6c:	f003 030f 	and.w	r3, r3, #15
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d11b      	bne.n	8003dac <writebuffertoflash+0x50>
		if(sectoreraseen==0){
 8003d74:	4b3c      	ldr	r3, [pc, #240]	@ (8003e68 <writebuffertoflash+0x10c>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d117      	bne.n	8003dac <writebuffertoflash+0x50>
		SPIF_EraseSector(&hspif1, (int)floor((pagenumber+1)/16));
 8003d7c:	4b39      	ldr	r3, [pc, #228]	@ (8003e64 <writebuffertoflash+0x108>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	3301      	adds	r3, #1
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	da00      	bge.n	8003d88 <writebuffertoflash+0x2c>
 8003d86:	330f      	adds	r3, #15
 8003d88:	111b      	asrs	r3, r3, #4
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f7fc fba2 	bl	80004d4 <__aeabi_i2d>
 8003d90:	4602      	mov	r2, r0
 8003d92:	460b      	mov	r3, r1
 8003d94:	4610      	mov	r0, r2
 8003d96:	4619      	mov	r1, r3
 8003d98:	f7fc feb6 	bl	8000b08 <__aeabi_d2iz>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	4619      	mov	r1, r3
 8003da0:	4832      	ldr	r0, [pc, #200]	@ (8003e6c <writebuffertoflash+0x110>)
 8003da2:	f013 fd44 	bl	801782e <SPIF_EraseSector>
		sectoreraseen=1;
 8003da6:	4b30      	ldr	r3, [pc, #192]	@ (8003e68 <writebuffertoflash+0x10c>)
 8003da8:	2201      	movs	r2, #1
 8003daa:	601a      	str	r2, [r3, #0]
		}

		  }
	if(bufferlenght+pageoffset<256){
 8003dac:	4b30      	ldr	r3, [pc, #192]	@ (8003e70 <writebuffertoflash+0x114>)
 8003dae:	681a      	ldr	r2, [r3, #0]
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	4413      	add	r3, r2
 8003db4:	2bff      	cmp	r3, #255	@ 0xff
 8003db6:	dc11      	bgt.n	8003ddc <writebuffertoflash+0x80>
		SPIF_WritePage(&hspif1,pagenumber, (uint8_t *)buffer, bufferlenght,pageoffset);
 8003db8:	4b2a      	ldr	r3, [pc, #168]	@ (8003e64 <writebuffertoflash+0x108>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4619      	mov	r1, r3
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	4a2b      	ldr	r2, [pc, #172]	@ (8003e70 <writebuffertoflash+0x114>)
 8003dc2:	6812      	ldr	r2, [r2, #0]
 8003dc4:	9200      	str	r2, [sp, #0]
 8003dc6:	687a      	ldr	r2, [r7, #4]
 8003dc8:	4828      	ldr	r0, [pc, #160]	@ (8003e6c <writebuffertoflash+0x110>)
 8003dca:	f013 fdb3 	bl	8017934 <SPIF_WritePage>
		pageoffset=pageoffset+bufferlenght;
 8003dce:	4b28      	ldr	r3, [pc, #160]	@ (8003e70 <writebuffertoflash+0x114>)
 8003dd0:	681a      	ldr	r2, [r3, #0]
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	4413      	add	r3, r2
 8003dd6:	4a26      	ldr	r2, [pc, #152]	@ (8003e70 <writebuffertoflash+0x114>)
 8003dd8:	6013      	str	r3, [r2, #0]
 8003dda:	e03c      	b.n	8003e56 <writebuffertoflash+0xfa>
	}
	else{
		SPIF_WritePage(&hspif1,pagenumber, (uint8_t *)buffer, 256-pageoffset,pageoffset);
 8003ddc:	4b21      	ldr	r3, [pc, #132]	@ (8003e64 <writebuffertoflash+0x108>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4619      	mov	r1, r3
 8003de2:	4b23      	ldr	r3, [pc, #140]	@ (8003e70 <writebuffertoflash+0x114>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8003dea:	461a      	mov	r2, r3
 8003dec:	4b20      	ldr	r3, [pc, #128]	@ (8003e70 <writebuffertoflash+0x114>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	9300      	str	r3, [sp, #0]
 8003df2:	4613      	mov	r3, r2
 8003df4:	687a      	ldr	r2, [r7, #4]
 8003df6:	481d      	ldr	r0, [pc, #116]	@ (8003e6c <writebuffertoflash+0x110>)
 8003df8:	f013 fd9c 	bl	8017934 <SPIF_WritePage>
		HAL_Delay(100);
 8003dfc:	2064      	movs	r0, #100	@ 0x64
 8003dfe:	f7fd fc96 	bl	800172e <HAL_Delay>
		SPIF_WritePage(&hspif1,pagenumber+1, (uint8_t *)buffer+(256-pageoffset), bufferlenght-(256-pageoffset),0);
 8003e02:	4b18      	ldr	r3, [pc, #96]	@ (8003e64 <writebuffertoflash+0x108>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	3301      	adds	r3, #1
 8003e08:	4618      	mov	r0, r3
 8003e0a:	4b19      	ldr	r3, [pc, #100]	@ (8003e70 <writebuffertoflash+0x114>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8003e12:	461a      	mov	r2, r3
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	1899      	adds	r1, r3, r2
 8003e18:	4b15      	ldr	r3, [pc, #84]	@ (8003e70 <writebuffertoflash+0x114>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8003e20:	683a      	ldr	r2, [r7, #0]
 8003e22:	1ad3      	subs	r3, r2, r3
 8003e24:	461a      	mov	r2, r3
 8003e26:	2300      	movs	r3, #0
 8003e28:	9300      	str	r3, [sp, #0]
 8003e2a:	4613      	mov	r3, r2
 8003e2c:	460a      	mov	r2, r1
 8003e2e:	4601      	mov	r1, r0
 8003e30:	480e      	ldr	r0, [pc, #56]	@ (8003e6c <writebuffertoflash+0x110>)
 8003e32:	f013 fd7f 	bl	8017934 <SPIF_WritePage>
		pagenumber=pagenumber+1;
 8003e36:	4b0b      	ldr	r3, [pc, #44]	@ (8003e64 <writebuffertoflash+0x108>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	3301      	adds	r3, #1
 8003e3c:	4a09      	ldr	r2, [pc, #36]	@ (8003e64 <writebuffertoflash+0x108>)
 8003e3e:	6013      	str	r3, [r2, #0]
		sectoreraseen=0;
 8003e40:	4b09      	ldr	r3, [pc, #36]	@ (8003e68 <writebuffertoflash+0x10c>)
 8003e42:	2200      	movs	r2, #0
 8003e44:	601a      	str	r2, [r3, #0]
		pageoffset=(bufferlenght-(256-pageoffset));
 8003e46:	4b0a      	ldr	r3, [pc, #40]	@ (8003e70 <writebuffertoflash+0x114>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8003e4e:	683a      	ldr	r2, [r7, #0]
 8003e50:	1ad3      	subs	r3, r2, r3
 8003e52:	4a07      	ldr	r2, [pc, #28]	@ (8003e70 <writebuffertoflash+0x114>)
 8003e54:	6013      	str	r3, [r2, #0]
	}
	storeindex();
 8003e56:	f7ff fed5 	bl	8003c04 <storeindex>

}
 8003e5a:	bf00      	nop
 8003e5c:	3708      	adds	r7, #8
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}
 8003e62:	bf00      	nop
 8003e64:	20000ac0 	.word	0x20000ac0
 8003e68:	20000ac4 	.word	0x20000ac4
 8003e6c:	20000888 	.word	0x20000888
 8003e70:	20000abc 	.word	0x20000abc

08003e74 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

extern uint8_t bufferscreen[50];

void ssd1306_Reset(void) {
 8003e74:	b480      	push	{r7}
 8003e76:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8003e78:	bf00      	nop
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e80:	4770      	bx	lr
	...

08003e84 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b086      	sub	sp, #24
 8003e88:	af04      	add	r7, sp, #16
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8003e8e:	f04f 33ff 	mov.w	r3, #4294967295
 8003e92:	9302      	str	r3, [sp, #8]
 8003e94:	2301      	movs	r3, #1
 8003e96:	9301      	str	r3, [sp, #4]
 8003e98:	1dfb      	adds	r3, r7, #7
 8003e9a:	9300      	str	r3, [sp, #0]
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	2178      	movs	r1, #120	@ 0x78
 8003ea2:	4803      	ldr	r0, [pc, #12]	@ (8003eb0 <ssd1306_WriteCommand+0x2c>)
 8003ea4:	f005 fb4e 	bl	8009544 <HAL_I2C_Mem_Write>
}
 8003ea8:	bf00      	nop
 8003eaa:	3708      	adds	r7, #8
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bd80      	pop	{r7, pc}
 8003eb0:	2000055c 	.word	0x2000055c

08003eb4 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b086      	sub	sp, #24
 8003eb8:	af04      	add	r7, sp, #16
 8003eba:	6078      	str	r0, [r7, #4]
 8003ebc:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	b29b      	uxth	r3, r3
 8003ec2:	f04f 32ff 	mov.w	r2, #4294967295
 8003ec6:	9202      	str	r2, [sp, #8]
 8003ec8:	9301      	str	r3, [sp, #4]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	9300      	str	r3, [sp, #0]
 8003ece:	2301      	movs	r3, #1
 8003ed0:	2240      	movs	r2, #64	@ 0x40
 8003ed2:	2178      	movs	r1, #120	@ 0x78
 8003ed4:	4803      	ldr	r0, [pc, #12]	@ (8003ee4 <ssd1306_WriteData+0x30>)
 8003ed6:	f005 fb35 	bl	8009544 <HAL_I2C_Mem_Write>
}
 8003eda:	bf00      	nop
 8003edc:	3708      	adds	r7, #8
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}
 8003ee2:	bf00      	nop
 8003ee4:	2000055c 	.word	0x2000055c

08003ee8 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8003eec:	f7ff ffc2 	bl	8003e74 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8003ef0:	2064      	movs	r0, #100	@ 0x64
 8003ef2:	f7fd fc1c 	bl	800172e <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8003ef6:	2000      	movs	r0, #0
 8003ef8:	f000 fb1a 	bl	8004530 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8003efc:	2020      	movs	r0, #32
 8003efe:	f7ff ffc1 	bl	8003e84 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8003f02:	2000      	movs	r0, #0
 8003f04:	f7ff ffbe 	bl	8003e84 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8003f08:	20b0      	movs	r0, #176	@ 0xb0
 8003f0a:	f7ff ffbb 	bl	8003e84 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8003f0e:	20c8      	movs	r0, #200	@ 0xc8
 8003f10:	f7ff ffb8 	bl	8003e84 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8003f14:	2000      	movs	r0, #0
 8003f16:	f7ff ffb5 	bl	8003e84 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8003f1a:	2010      	movs	r0, #16
 8003f1c:	f7ff ffb2 	bl	8003e84 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8003f20:	2040      	movs	r0, #64	@ 0x40
 8003f22:	f7ff ffaf 	bl	8003e84 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8003f26:	20ff      	movs	r0, #255	@ 0xff
 8003f28:	f000 faee 	bl	8004508 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8003f2c:	20a1      	movs	r0, #161	@ 0xa1
 8003f2e:	f7ff ffa9 	bl	8003e84 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8003f32:	20a6      	movs	r0, #166	@ 0xa6
 8003f34:	f7ff ffa6 	bl	8003e84 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8003f38:	20a8      	movs	r0, #168	@ 0xa8
 8003f3a:	f7ff ffa3 	bl	8003e84 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8003f3e:	203f      	movs	r0, #63	@ 0x3f
 8003f40:	f7ff ffa0 	bl	8003e84 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8003f44:	20a4      	movs	r0, #164	@ 0xa4
 8003f46:	f7ff ff9d 	bl	8003e84 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8003f4a:	20d3      	movs	r0, #211	@ 0xd3
 8003f4c:	f7ff ff9a 	bl	8003e84 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8003f50:	2000      	movs	r0, #0
 8003f52:	f7ff ff97 	bl	8003e84 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8003f56:	20d5      	movs	r0, #213	@ 0xd5
 8003f58:	f7ff ff94 	bl	8003e84 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8003f5c:	20f0      	movs	r0, #240	@ 0xf0
 8003f5e:	f7ff ff91 	bl	8003e84 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8003f62:	20d9      	movs	r0, #217	@ 0xd9
 8003f64:	f7ff ff8e 	bl	8003e84 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8003f68:	2022      	movs	r0, #34	@ 0x22
 8003f6a:	f7ff ff8b 	bl	8003e84 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8003f6e:	20da      	movs	r0, #218	@ 0xda
 8003f70:	f7ff ff88 	bl	8003e84 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8003f74:	2012      	movs	r0, #18
 8003f76:	f7ff ff85 	bl	8003e84 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8003f7a:	20db      	movs	r0, #219	@ 0xdb
 8003f7c:	f7ff ff82 	bl	8003e84 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8003f80:	2020      	movs	r0, #32
 8003f82:	f7ff ff7f 	bl	8003e84 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8003f86:	208d      	movs	r0, #141	@ 0x8d
 8003f88:	f7ff ff7c 	bl	8003e84 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8003f8c:	2014      	movs	r0, #20
 8003f8e:	f7ff ff79 	bl	8003e84 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8003f92:	2001      	movs	r0, #1
 8003f94:	f000 facc 	bl	8004530 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8003f98:	2000      	movs	r0, #0
 8003f9a:	f000 f80f 	bl	8003fbc <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8003f9e:	f000 f825 	bl	8003fec <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8003fa2:	4b05      	ldr	r3, [pc, #20]	@ (8003fb8 <ssd1306_Init+0xd0>)
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8003fa8:	4b03      	ldr	r3, [pc, #12]	@ (8003fb8 <ssd1306_Init+0xd0>)
 8003faa:	2200      	movs	r2, #0
 8003fac:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8003fae:	4b02      	ldr	r3, [pc, #8]	@ (8003fb8 <ssd1306_Init+0xd0>)
 8003fb0:	2201      	movs	r2, #1
 8003fb2:	711a      	strb	r2, [r3, #4]
}
 8003fb4:	bf00      	nop
 8003fb6:	bd80      	pop	{r7, pc}
 8003fb8:	20001200 	.word	0x20001200

08003fbc <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b082      	sub	sp, #8
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8003fc6:	79fb      	ldrb	r3, [r7, #7]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d101      	bne.n	8003fd0 <ssd1306_Fill+0x14>
 8003fcc:	2300      	movs	r3, #0
 8003fce:	e000      	b.n	8003fd2 <ssd1306_Fill+0x16>
 8003fd0:	23ff      	movs	r3, #255	@ 0xff
 8003fd2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003fd6:	4619      	mov	r1, r3
 8003fd8:	4803      	ldr	r0, [pc, #12]	@ (8003fe8 <ssd1306_Fill+0x2c>)
 8003fda:	f017 fa9a 	bl	801b512 <memset>
}
 8003fde:	bf00      	nop
 8003fe0:	3708      	adds	r7, #8
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bd80      	pop	{r7, pc}
 8003fe6:	bf00      	nop
 8003fe8:	20000e00 	.word	0x20000e00

08003fec <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b082      	sub	sp, #8
 8003ff0:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	71fb      	strb	r3, [r7, #7]
 8003ff6:	e016      	b.n	8004026 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8003ff8:	79fb      	ldrb	r3, [r7, #7]
 8003ffa:	3b50      	subs	r3, #80	@ 0x50
 8003ffc:	b2db      	uxtb	r3, r3
 8003ffe:	4618      	mov	r0, r3
 8004000:	f7ff ff40 	bl	8003e84 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8004004:	2000      	movs	r0, #0
 8004006:	f7ff ff3d 	bl	8003e84 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 800400a:	2010      	movs	r0, #16
 800400c:	f7ff ff3a 	bl	8003e84 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8004010:	79fb      	ldrb	r3, [r7, #7]
 8004012:	01db      	lsls	r3, r3, #7
 8004014:	4a08      	ldr	r2, [pc, #32]	@ (8004038 <ssd1306_UpdateScreen+0x4c>)
 8004016:	4413      	add	r3, r2
 8004018:	2180      	movs	r1, #128	@ 0x80
 800401a:	4618      	mov	r0, r3
 800401c:	f7ff ff4a 	bl	8003eb4 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8004020:	79fb      	ldrb	r3, [r7, #7]
 8004022:	3301      	adds	r3, #1
 8004024:	71fb      	strb	r3, [r7, #7]
 8004026:	79fb      	ldrb	r3, [r7, #7]
 8004028:	2b07      	cmp	r3, #7
 800402a:	d9e5      	bls.n	8003ff8 <ssd1306_UpdateScreen+0xc>
    }
}
 800402c:	bf00      	nop
 800402e:	bf00      	nop
 8004030:	3708      	adds	r7, #8
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}
 8004036:	bf00      	nop
 8004038:	20000e00 	.word	0x20000e00

0800403c <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 800403c:	b480      	push	{r7}
 800403e:	b083      	sub	sp, #12
 8004040:	af00      	add	r7, sp, #0
 8004042:	4603      	mov	r3, r0
 8004044:	71fb      	strb	r3, [r7, #7]
 8004046:	460b      	mov	r3, r1
 8004048:	71bb      	strb	r3, [r7, #6]
 800404a:	4613      	mov	r3, r2
 800404c:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800404e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004052:	2b00      	cmp	r3, #0
 8004054:	db3d      	blt.n	80040d2 <ssd1306_DrawPixel+0x96>
 8004056:	79bb      	ldrb	r3, [r7, #6]
 8004058:	2b3f      	cmp	r3, #63	@ 0x3f
 800405a:	d83a      	bhi.n	80040d2 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 800405c:	797b      	ldrb	r3, [r7, #5]
 800405e:	2b01      	cmp	r3, #1
 8004060:	d11a      	bne.n	8004098 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8004062:	79fa      	ldrb	r2, [r7, #7]
 8004064:	79bb      	ldrb	r3, [r7, #6]
 8004066:	08db      	lsrs	r3, r3, #3
 8004068:	b2d8      	uxtb	r0, r3
 800406a:	4603      	mov	r3, r0
 800406c:	01db      	lsls	r3, r3, #7
 800406e:	4413      	add	r3, r2
 8004070:	4a1b      	ldr	r2, [pc, #108]	@ (80040e0 <ssd1306_DrawPixel+0xa4>)
 8004072:	5cd3      	ldrb	r3, [r2, r3]
 8004074:	b25a      	sxtb	r2, r3
 8004076:	79bb      	ldrb	r3, [r7, #6]
 8004078:	f003 0307 	and.w	r3, r3, #7
 800407c:	2101      	movs	r1, #1
 800407e:	fa01 f303 	lsl.w	r3, r1, r3
 8004082:	b25b      	sxtb	r3, r3
 8004084:	4313      	orrs	r3, r2
 8004086:	b259      	sxtb	r1, r3
 8004088:	79fa      	ldrb	r2, [r7, #7]
 800408a:	4603      	mov	r3, r0
 800408c:	01db      	lsls	r3, r3, #7
 800408e:	4413      	add	r3, r2
 8004090:	b2c9      	uxtb	r1, r1
 8004092:	4a13      	ldr	r2, [pc, #76]	@ (80040e0 <ssd1306_DrawPixel+0xa4>)
 8004094:	54d1      	strb	r1, [r2, r3]
 8004096:	e01d      	b.n	80040d4 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8004098:	79fa      	ldrb	r2, [r7, #7]
 800409a:	79bb      	ldrb	r3, [r7, #6]
 800409c:	08db      	lsrs	r3, r3, #3
 800409e:	b2d8      	uxtb	r0, r3
 80040a0:	4603      	mov	r3, r0
 80040a2:	01db      	lsls	r3, r3, #7
 80040a4:	4413      	add	r3, r2
 80040a6:	4a0e      	ldr	r2, [pc, #56]	@ (80040e0 <ssd1306_DrawPixel+0xa4>)
 80040a8:	5cd3      	ldrb	r3, [r2, r3]
 80040aa:	b25a      	sxtb	r2, r3
 80040ac:	79bb      	ldrb	r3, [r7, #6]
 80040ae:	f003 0307 	and.w	r3, r3, #7
 80040b2:	2101      	movs	r1, #1
 80040b4:	fa01 f303 	lsl.w	r3, r1, r3
 80040b8:	b25b      	sxtb	r3, r3
 80040ba:	43db      	mvns	r3, r3
 80040bc:	b25b      	sxtb	r3, r3
 80040be:	4013      	ands	r3, r2
 80040c0:	b259      	sxtb	r1, r3
 80040c2:	79fa      	ldrb	r2, [r7, #7]
 80040c4:	4603      	mov	r3, r0
 80040c6:	01db      	lsls	r3, r3, #7
 80040c8:	4413      	add	r3, r2
 80040ca:	b2c9      	uxtb	r1, r1
 80040cc:	4a04      	ldr	r2, [pc, #16]	@ (80040e0 <ssd1306_DrawPixel+0xa4>)
 80040ce:	54d1      	strb	r1, [r2, r3]
 80040d0:	e000      	b.n	80040d4 <ssd1306_DrawPixel+0x98>
        return;
 80040d2:	bf00      	nop
    }
}
 80040d4:	370c      	adds	r7, #12
 80040d6:	46bd      	mov	sp, r7
 80040d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040dc:	4770      	bx	lr
 80040de:	bf00      	nop
 80040e0:	20000e00 	.word	0x20000e00

080040e4 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 80040e4:	b590      	push	{r4, r7, lr}
 80040e6:	b089      	sub	sp, #36	@ 0x24
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	4604      	mov	r4, r0
 80040ec:	1d38      	adds	r0, r7, #4
 80040ee:	e880 0006 	stmia.w	r0, {r1, r2}
 80040f2:	461a      	mov	r2, r3
 80040f4:	4623      	mov	r3, r4
 80040f6:	73fb      	strb	r3, [r7, #15]
 80040f8:	4613      	mov	r3, r2
 80040fa:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 80040fc:	7bfb      	ldrb	r3, [r7, #15]
 80040fe:	2b1f      	cmp	r3, #31
 8004100:	d902      	bls.n	8004108 <ssd1306_WriteChar+0x24>
 8004102:	7bfb      	ldrb	r3, [r7, #15]
 8004104:	2b7e      	cmp	r3, #126	@ 0x7e
 8004106:	d901      	bls.n	800410c <ssd1306_WriteChar+0x28>
        return 0;
 8004108:	2300      	movs	r3, #0
 800410a:	e06c      	b.n	80041e6 <ssd1306_WriteChar+0x102>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 800410c:	4b38      	ldr	r3, [pc, #224]	@ (80041f0 <ssd1306_WriteChar+0x10c>)
 800410e:	881b      	ldrh	r3, [r3, #0]
 8004110:	461a      	mov	r2, r3
 8004112:	793b      	ldrb	r3, [r7, #4]
 8004114:	4413      	add	r3, r2
 8004116:	2b80      	cmp	r3, #128	@ 0x80
 8004118:	dc06      	bgt.n	8004128 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 800411a:	4b35      	ldr	r3, [pc, #212]	@ (80041f0 <ssd1306_WriteChar+0x10c>)
 800411c:	885b      	ldrh	r3, [r3, #2]
 800411e:	461a      	mov	r2, r3
 8004120:	797b      	ldrb	r3, [r7, #5]
 8004122:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8004124:	2b40      	cmp	r3, #64	@ 0x40
 8004126:	dd01      	ble.n	800412c <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8004128:	2300      	movs	r3, #0
 800412a:	e05c      	b.n	80041e6 <ssd1306_WriteChar+0x102>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 800412c:	2300      	movs	r3, #0
 800412e:	61fb      	str	r3, [r7, #28]
 8004130:	e04c      	b.n	80041cc <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8004132:	68ba      	ldr	r2, [r7, #8]
 8004134:	7bfb      	ldrb	r3, [r7, #15]
 8004136:	3b20      	subs	r3, #32
 8004138:	7979      	ldrb	r1, [r7, #5]
 800413a:	fb01 f303 	mul.w	r3, r1, r3
 800413e:	4619      	mov	r1, r3
 8004140:	69fb      	ldr	r3, [r7, #28]
 8004142:	440b      	add	r3, r1
 8004144:	005b      	lsls	r3, r3, #1
 8004146:	4413      	add	r3, r2
 8004148:	881b      	ldrh	r3, [r3, #0]
 800414a:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 800414c:	2300      	movs	r3, #0
 800414e:	61bb      	str	r3, [r7, #24]
 8004150:	e034      	b.n	80041bc <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8004152:	697a      	ldr	r2, [r7, #20]
 8004154:	69bb      	ldr	r3, [r7, #24]
 8004156:	fa02 f303 	lsl.w	r3, r2, r3
 800415a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800415e:	2b00      	cmp	r3, #0
 8004160:	d012      	beq.n	8004188 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8004162:	4b23      	ldr	r3, [pc, #140]	@ (80041f0 <ssd1306_WriteChar+0x10c>)
 8004164:	881b      	ldrh	r3, [r3, #0]
 8004166:	b2da      	uxtb	r2, r3
 8004168:	69bb      	ldr	r3, [r7, #24]
 800416a:	b2db      	uxtb	r3, r3
 800416c:	4413      	add	r3, r2
 800416e:	b2d8      	uxtb	r0, r3
 8004170:	4b1f      	ldr	r3, [pc, #124]	@ (80041f0 <ssd1306_WriteChar+0x10c>)
 8004172:	885b      	ldrh	r3, [r3, #2]
 8004174:	b2da      	uxtb	r2, r3
 8004176:	69fb      	ldr	r3, [r7, #28]
 8004178:	b2db      	uxtb	r3, r3
 800417a:	4413      	add	r3, r2
 800417c:	b2db      	uxtb	r3, r3
 800417e:	7bba      	ldrb	r2, [r7, #14]
 8004180:	4619      	mov	r1, r3
 8004182:	f7ff ff5b 	bl	800403c <ssd1306_DrawPixel>
 8004186:	e016      	b.n	80041b6 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8004188:	4b19      	ldr	r3, [pc, #100]	@ (80041f0 <ssd1306_WriteChar+0x10c>)
 800418a:	881b      	ldrh	r3, [r3, #0]
 800418c:	b2da      	uxtb	r2, r3
 800418e:	69bb      	ldr	r3, [r7, #24]
 8004190:	b2db      	uxtb	r3, r3
 8004192:	4413      	add	r3, r2
 8004194:	b2d8      	uxtb	r0, r3
 8004196:	4b16      	ldr	r3, [pc, #88]	@ (80041f0 <ssd1306_WriteChar+0x10c>)
 8004198:	885b      	ldrh	r3, [r3, #2]
 800419a:	b2da      	uxtb	r2, r3
 800419c:	69fb      	ldr	r3, [r7, #28]
 800419e:	b2db      	uxtb	r3, r3
 80041a0:	4413      	add	r3, r2
 80041a2:	b2d9      	uxtb	r1, r3
 80041a4:	7bbb      	ldrb	r3, [r7, #14]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	bf0c      	ite	eq
 80041aa:	2301      	moveq	r3, #1
 80041ac:	2300      	movne	r3, #0
 80041ae:	b2db      	uxtb	r3, r3
 80041b0:	461a      	mov	r2, r3
 80041b2:	f7ff ff43 	bl	800403c <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 80041b6:	69bb      	ldr	r3, [r7, #24]
 80041b8:	3301      	adds	r3, #1
 80041ba:	61bb      	str	r3, [r7, #24]
 80041bc:	793b      	ldrb	r3, [r7, #4]
 80041be:	461a      	mov	r2, r3
 80041c0:	69bb      	ldr	r3, [r7, #24]
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d3c5      	bcc.n	8004152 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 80041c6:	69fb      	ldr	r3, [r7, #28]
 80041c8:	3301      	adds	r3, #1
 80041ca:	61fb      	str	r3, [r7, #28]
 80041cc:	797b      	ldrb	r3, [r7, #5]
 80041ce:	461a      	mov	r2, r3
 80041d0:	69fb      	ldr	r3, [r7, #28]
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d3ad      	bcc.n	8004132 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 80041d6:	4b06      	ldr	r3, [pc, #24]	@ (80041f0 <ssd1306_WriteChar+0x10c>)
 80041d8:	881b      	ldrh	r3, [r3, #0]
 80041da:	793a      	ldrb	r2, [r7, #4]
 80041dc:	4413      	add	r3, r2
 80041de:	b29a      	uxth	r2, r3
 80041e0:	4b03      	ldr	r3, [pc, #12]	@ (80041f0 <ssd1306_WriteChar+0x10c>)
 80041e2:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 80041e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80041e6:	4618      	mov	r0, r3
 80041e8:	3724      	adds	r7, #36	@ 0x24
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd90      	pop	{r4, r7, pc}
 80041ee:	bf00      	nop
 80041f0:	20001200 	.word	0x20001200

080041f4 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b084      	sub	sp, #16
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	60f8      	str	r0, [r7, #12]
 80041fc:	1d38      	adds	r0, r7, #4
 80041fe:	e880 0006 	stmia.w	r0, {r1, r2}
 8004202:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 8004204:	e012      	b.n	800422c <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	7818      	ldrb	r0, [r3, #0]
 800420a:	78fb      	ldrb	r3, [r7, #3]
 800420c:	1d3a      	adds	r2, r7, #4
 800420e:	ca06      	ldmia	r2, {r1, r2}
 8004210:	f7ff ff68 	bl	80040e4 <ssd1306_WriteChar>
 8004214:	4603      	mov	r3, r0
 8004216:	461a      	mov	r2, r3
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	781b      	ldrb	r3, [r3, #0]
 800421c:	429a      	cmp	r2, r3
 800421e:	d002      	beq.n	8004226 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	781b      	ldrb	r3, [r3, #0]
 8004224:	e008      	b.n	8004238 <ssd1306_WriteString+0x44>
        }
        str++;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	3301      	adds	r3, #1
 800422a:	60fb      	str	r3, [r7, #12]
    while (*str) {
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	781b      	ldrb	r3, [r3, #0]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d1e8      	bne.n	8004206 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	781b      	ldrb	r3, [r3, #0]
}
 8004238:	4618      	mov	r0, r3
 800423a:	3710      	adds	r7, #16
 800423c:	46bd      	mov	sp, r7
 800423e:	bd80      	pop	{r7, pc}

08004240 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8004240:	b480      	push	{r7}
 8004242:	b083      	sub	sp, #12
 8004244:	af00      	add	r7, sp, #0
 8004246:	4603      	mov	r3, r0
 8004248:	460a      	mov	r2, r1
 800424a:	71fb      	strb	r3, [r7, #7]
 800424c:	4613      	mov	r3, r2
 800424e:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8004250:	79fb      	ldrb	r3, [r7, #7]
 8004252:	b29a      	uxth	r2, r3
 8004254:	4b05      	ldr	r3, [pc, #20]	@ (800426c <ssd1306_SetCursor+0x2c>)
 8004256:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8004258:	79bb      	ldrb	r3, [r7, #6]
 800425a:	b29a      	uxth	r2, r3
 800425c:	4b03      	ldr	r3, [pc, #12]	@ (800426c <ssd1306_SetCursor+0x2c>)
 800425e:	805a      	strh	r2, [r3, #2]
}
 8004260:	bf00      	nop
 8004262:	370c      	adds	r7, #12
 8004264:	46bd      	mov	sp, r7
 8004266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426a:	4770      	bx	lr
 800426c:	20001200 	.word	0x20001200

08004270 <ssd1306_Line>:

/* Draw line by Bresenhem's algorithm */
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8004270:	b590      	push	{r4, r7, lr}
 8004272:	b089      	sub	sp, #36	@ 0x24
 8004274:	af00      	add	r7, sp, #0
 8004276:	4604      	mov	r4, r0
 8004278:	4608      	mov	r0, r1
 800427a:	4611      	mov	r1, r2
 800427c:	461a      	mov	r2, r3
 800427e:	4623      	mov	r3, r4
 8004280:	71fb      	strb	r3, [r7, #7]
 8004282:	4603      	mov	r3, r0
 8004284:	71bb      	strb	r3, [r7, #6]
 8004286:	460b      	mov	r3, r1
 8004288:	717b      	strb	r3, [r7, #5]
 800428a:	4613      	mov	r3, r2
 800428c:	713b      	strb	r3, [r7, #4]
    int32_t deltaX = abs(x2 - x1);
 800428e:	797a      	ldrb	r2, [r7, #5]
 8004290:	79fb      	ldrb	r3, [r7, #7]
 8004292:	1ad3      	subs	r3, r2, r3
 8004294:	2b00      	cmp	r3, #0
 8004296:	bfb8      	it	lt
 8004298:	425b      	neglt	r3, r3
 800429a:	61bb      	str	r3, [r7, #24]
    int32_t deltaY = abs(y2 - y1);
 800429c:	793a      	ldrb	r2, [r7, #4]
 800429e:	79bb      	ldrb	r3, [r7, #6]
 80042a0:	1ad3      	subs	r3, r2, r3
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	bfb8      	it	lt
 80042a6:	425b      	neglt	r3, r3
 80042a8:	617b      	str	r3, [r7, #20]
    int32_t signX = ((x1 < x2) ? 1 : -1);
 80042aa:	79fa      	ldrb	r2, [r7, #7]
 80042ac:	797b      	ldrb	r3, [r7, #5]
 80042ae:	429a      	cmp	r2, r3
 80042b0:	d201      	bcs.n	80042b6 <ssd1306_Line+0x46>
 80042b2:	2301      	movs	r3, #1
 80042b4:	e001      	b.n	80042ba <ssd1306_Line+0x4a>
 80042b6:	f04f 33ff 	mov.w	r3, #4294967295
 80042ba:	613b      	str	r3, [r7, #16]
    int32_t signY = ((y1 < y2) ? 1 : -1);
 80042bc:	79ba      	ldrb	r2, [r7, #6]
 80042be:	793b      	ldrb	r3, [r7, #4]
 80042c0:	429a      	cmp	r2, r3
 80042c2:	d201      	bcs.n	80042c8 <ssd1306_Line+0x58>
 80042c4:	2301      	movs	r3, #1
 80042c6:	e001      	b.n	80042cc <ssd1306_Line+0x5c>
 80042c8:	f04f 33ff 	mov.w	r3, #4294967295
 80042cc:	60fb      	str	r3, [r7, #12]
    int32_t error = deltaX - deltaY;
 80042ce:	69ba      	ldr	r2, [r7, #24]
 80042d0:	697b      	ldr	r3, [r7, #20]
 80042d2:	1ad3      	subs	r3, r2, r3
 80042d4:	61fb      	str	r3, [r7, #28]
    int32_t error2;
    
    ssd1306_DrawPixel(x2, y2, color);
 80042d6:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 80042da:	7939      	ldrb	r1, [r7, #4]
 80042dc:	797b      	ldrb	r3, [r7, #5]
 80042de:	4618      	mov	r0, r3
 80042e0:	f7ff feac 	bl	800403c <ssd1306_DrawPixel>

    while((x1 != x2) || (y1 != y2)) {
 80042e4:	e024      	b.n	8004330 <ssd1306_Line+0xc0>
        ssd1306_DrawPixel(x1, y1, color);
 80042e6:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 80042ea:	79b9      	ldrb	r1, [r7, #6]
 80042ec:	79fb      	ldrb	r3, [r7, #7]
 80042ee:	4618      	mov	r0, r3
 80042f0:	f7ff fea4 	bl	800403c <ssd1306_DrawPixel>
        error2 = error * 2;
 80042f4:	69fb      	ldr	r3, [r7, #28]
 80042f6:	005b      	lsls	r3, r3, #1
 80042f8:	60bb      	str	r3, [r7, #8]
        if(error2 > -deltaY) {
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	425b      	negs	r3, r3
 80042fe:	68ba      	ldr	r2, [r7, #8]
 8004300:	429a      	cmp	r2, r3
 8004302:	dd08      	ble.n	8004316 <ssd1306_Line+0xa6>
            error -= deltaY;
 8004304:	69fa      	ldr	r2, [r7, #28]
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	1ad3      	subs	r3, r2, r3
 800430a:	61fb      	str	r3, [r7, #28]
            x1 += signX;
 800430c:	693b      	ldr	r3, [r7, #16]
 800430e:	b2da      	uxtb	r2, r3
 8004310:	79fb      	ldrb	r3, [r7, #7]
 8004312:	4413      	add	r3, r2
 8004314:	71fb      	strb	r3, [r7, #7]
        }
        
        if(error2 < deltaX) {
 8004316:	68ba      	ldr	r2, [r7, #8]
 8004318:	69bb      	ldr	r3, [r7, #24]
 800431a:	429a      	cmp	r2, r3
 800431c:	da08      	bge.n	8004330 <ssd1306_Line+0xc0>
            error += deltaX;
 800431e:	69fa      	ldr	r2, [r7, #28]
 8004320:	69bb      	ldr	r3, [r7, #24]
 8004322:	4413      	add	r3, r2
 8004324:	61fb      	str	r3, [r7, #28]
            y1 += signY;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	b2da      	uxtb	r2, r3
 800432a:	79bb      	ldrb	r3, [r7, #6]
 800432c:	4413      	add	r3, r2
 800432e:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2)) {
 8004330:	79fa      	ldrb	r2, [r7, #7]
 8004332:	797b      	ldrb	r3, [r7, #5]
 8004334:	429a      	cmp	r2, r3
 8004336:	d1d6      	bne.n	80042e6 <ssd1306_Line+0x76>
 8004338:	79ba      	ldrb	r2, [r7, #6]
 800433a:	793b      	ldrb	r3, [r7, #4]
 800433c:	429a      	cmp	r2, r3
 800433e:	d1d2      	bne.n	80042e6 <ssd1306_Line+0x76>
        }
    }
    return;
 8004340:	bf00      	nop
}
 8004342:	3724      	adds	r7, #36	@ 0x24
 8004344:	46bd      	mov	sp, r7
 8004346:	bd90      	pop	{r4, r7, pc}

08004348 <ssd1306_DrawRectangle>:

    return;
}

/* Draw a rectangle */
void ssd1306_DrawRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8004348:	b590      	push	{r4, r7, lr}
 800434a:	b085      	sub	sp, #20
 800434c:	af02      	add	r7, sp, #8
 800434e:	4604      	mov	r4, r0
 8004350:	4608      	mov	r0, r1
 8004352:	4611      	mov	r1, r2
 8004354:	461a      	mov	r2, r3
 8004356:	4623      	mov	r3, r4
 8004358:	71fb      	strb	r3, [r7, #7]
 800435a:	4603      	mov	r3, r0
 800435c:	71bb      	strb	r3, [r7, #6]
 800435e:	460b      	mov	r3, r1
 8004360:	717b      	strb	r3, [r7, #5]
 8004362:	4613      	mov	r3, r2
 8004364:	713b      	strb	r3, [r7, #4]
    ssd1306_Line(x1,y1,x2,y1,color);
 8004366:	79bc      	ldrb	r4, [r7, #6]
 8004368:	797a      	ldrb	r2, [r7, #5]
 800436a:	79b9      	ldrb	r1, [r7, #6]
 800436c:	79f8      	ldrb	r0, [r7, #7]
 800436e:	7e3b      	ldrb	r3, [r7, #24]
 8004370:	9300      	str	r3, [sp, #0]
 8004372:	4623      	mov	r3, r4
 8004374:	f7ff ff7c 	bl	8004270 <ssd1306_Line>
    ssd1306_Line(x2,y1,x2,y2,color);
 8004378:	793c      	ldrb	r4, [r7, #4]
 800437a:	797a      	ldrb	r2, [r7, #5]
 800437c:	79b9      	ldrb	r1, [r7, #6]
 800437e:	7978      	ldrb	r0, [r7, #5]
 8004380:	7e3b      	ldrb	r3, [r7, #24]
 8004382:	9300      	str	r3, [sp, #0]
 8004384:	4623      	mov	r3, r4
 8004386:	f7ff ff73 	bl	8004270 <ssd1306_Line>
    ssd1306_Line(x2,y2,x1,y2,color);
 800438a:	793c      	ldrb	r4, [r7, #4]
 800438c:	79fa      	ldrb	r2, [r7, #7]
 800438e:	7939      	ldrb	r1, [r7, #4]
 8004390:	7978      	ldrb	r0, [r7, #5]
 8004392:	7e3b      	ldrb	r3, [r7, #24]
 8004394:	9300      	str	r3, [sp, #0]
 8004396:	4623      	mov	r3, r4
 8004398:	f7ff ff6a 	bl	8004270 <ssd1306_Line>
    ssd1306_Line(x1,y2,x1,y1,color);
 800439c:	79bc      	ldrb	r4, [r7, #6]
 800439e:	79fa      	ldrb	r2, [r7, #7]
 80043a0:	7939      	ldrb	r1, [r7, #4]
 80043a2:	79f8      	ldrb	r0, [r7, #7]
 80043a4:	7e3b      	ldrb	r3, [r7, #24]
 80043a6:	9300      	str	r3, [sp, #0]
 80043a8:	4623      	mov	r3, r4
 80043aa:	f7ff ff61 	bl	8004270 <ssd1306_Line>

    return;
 80043ae:	bf00      	nop
}
 80043b0:	370c      	adds	r7, #12
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd90      	pop	{r4, r7, pc}

080043b6 <ssd1306_FillRectangle>:

/* Draw a filled rectangle */
void ssd1306_FillRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 80043b6:	b590      	push	{r4, r7, lr}
 80043b8:	b085      	sub	sp, #20
 80043ba:	af00      	add	r7, sp, #0
 80043bc:	4604      	mov	r4, r0
 80043be:	4608      	mov	r0, r1
 80043c0:	4611      	mov	r1, r2
 80043c2:	461a      	mov	r2, r3
 80043c4:	4623      	mov	r3, r4
 80043c6:	71fb      	strb	r3, [r7, #7]
 80043c8:	4603      	mov	r3, r0
 80043ca:	71bb      	strb	r3, [r7, #6]
 80043cc:	460b      	mov	r3, r1
 80043ce:	717b      	strb	r3, [r7, #5]
 80043d0:	4613      	mov	r3, r2
 80043d2:	713b      	strb	r3, [r7, #4]
    uint8_t x_start = ((x1<=x2) ? x1 : x2);
 80043d4:	79fa      	ldrb	r2, [r7, #7]
 80043d6:	797b      	ldrb	r3, [r7, #5]
 80043d8:	4293      	cmp	r3, r2
 80043da:	bf28      	it	cs
 80043dc:	4613      	movcs	r3, r2
 80043de:	737b      	strb	r3, [r7, #13]
    uint8_t x_end   = ((x1<=x2) ? x2 : x1);
 80043e0:	797a      	ldrb	r2, [r7, #5]
 80043e2:	79fb      	ldrb	r3, [r7, #7]
 80043e4:	4293      	cmp	r3, r2
 80043e6:	bf38      	it	cc
 80043e8:	4613      	movcc	r3, r2
 80043ea:	733b      	strb	r3, [r7, #12]
    uint8_t y_start = ((y1<=y2) ? y1 : y2);
 80043ec:	79ba      	ldrb	r2, [r7, #6]
 80043ee:	793b      	ldrb	r3, [r7, #4]
 80043f0:	4293      	cmp	r3, r2
 80043f2:	bf28      	it	cs
 80043f4:	4613      	movcs	r3, r2
 80043f6:	72fb      	strb	r3, [r7, #11]
    uint8_t y_end   = ((y1<=y2) ? y2 : y1);
 80043f8:	793a      	ldrb	r2, [r7, #4]
 80043fa:	79bb      	ldrb	r3, [r7, #6]
 80043fc:	4293      	cmp	r3, r2
 80043fe:	bf38      	it	cc
 8004400:	4613      	movcc	r3, r2
 8004402:	72bb      	strb	r3, [r7, #10]

    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 8004404:	7afb      	ldrb	r3, [r7, #11]
 8004406:	73fb      	strb	r3, [r7, #15]
 8004408:	e017      	b.n	800443a <ssd1306_FillRectangle+0x84>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 800440a:	7b7b      	ldrb	r3, [r7, #13]
 800440c:	73bb      	strb	r3, [r7, #14]
 800440e:	e009      	b.n	8004424 <ssd1306_FillRectangle+0x6e>
            ssd1306_DrawPixel(x, y, color);
 8004410:	f897 2020 	ldrb.w	r2, [r7, #32]
 8004414:	7bf9      	ldrb	r1, [r7, #15]
 8004416:	7bbb      	ldrb	r3, [r7, #14]
 8004418:	4618      	mov	r0, r3
 800441a:	f7ff fe0f 	bl	800403c <ssd1306_DrawPixel>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 800441e:	7bbb      	ldrb	r3, [r7, #14]
 8004420:	3301      	adds	r3, #1
 8004422:	73bb      	strb	r3, [r7, #14]
 8004424:	7bba      	ldrb	r2, [r7, #14]
 8004426:	7b3b      	ldrb	r3, [r7, #12]
 8004428:	429a      	cmp	r2, r3
 800442a:	d803      	bhi.n	8004434 <ssd1306_FillRectangle+0x7e>
 800442c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004430:	2b00      	cmp	r3, #0
 8004432:	daed      	bge.n	8004410 <ssd1306_FillRectangle+0x5a>
    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 8004434:	7bfb      	ldrb	r3, [r7, #15]
 8004436:	3301      	adds	r3, #1
 8004438:	73fb      	strb	r3, [r7, #15]
 800443a:	7bfa      	ldrb	r2, [r7, #15]
 800443c:	7abb      	ldrb	r3, [r7, #10]
 800443e:	429a      	cmp	r2, r3
 8004440:	d803      	bhi.n	800444a <ssd1306_FillRectangle+0x94>
 8004442:	7bfb      	ldrb	r3, [r7, #15]
 8004444:	2b3f      	cmp	r3, #63	@ 0x3f
 8004446:	d9e0      	bls.n	800440a <ssd1306_FillRectangle+0x54>
        }
    }
    return;
 8004448:	bf00      	nop
 800444a:	bf00      	nop
}
 800444c:	3714      	adds	r7, #20
 800444e:	46bd      	mov	sp, r7
 8004450:	bd90      	pop	{r4, r7, pc}

08004452 <ssd1306_DrawBitmap>:

/* Draw a bitmap */
void ssd1306_DrawBitmap(uint8_t x, uint8_t y, const unsigned char* bitmap, uint8_t w, uint8_t h, SSD1306_COLOR color) {
 8004452:	b580      	push	{r7, lr}
 8004454:	b084      	sub	sp, #16
 8004456:	af00      	add	r7, sp, #0
 8004458:	603a      	str	r2, [r7, #0]
 800445a:	461a      	mov	r2, r3
 800445c:	4603      	mov	r3, r0
 800445e:	71fb      	strb	r3, [r7, #7]
 8004460:	460b      	mov	r3, r1
 8004462:	71bb      	strb	r3, [r7, #6]
 8004464:	4613      	mov	r3, r2
 8004466:	717b      	strb	r3, [r7, #5]
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8004468:	797b      	ldrb	r3, [r7, #5]
 800446a:	3307      	adds	r3, #7
 800446c:	2b00      	cmp	r3, #0
 800446e:	da00      	bge.n	8004472 <ssd1306_DrawBitmap+0x20>
 8004470:	3307      	adds	r3, #7
 8004472:	10db      	asrs	r3, r3, #3
 8004474:	817b      	strh	r3, [r7, #10]
    uint8_t byte = 0;
 8004476:	2300      	movs	r3, #0
 8004478:	73fb      	strb	r3, [r7, #15]

    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800447a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800447e:	2b00      	cmp	r3, #0
 8004480:	db3e      	blt.n	8004500 <ssd1306_DrawBitmap+0xae>
 8004482:	79bb      	ldrb	r3, [r7, #6]
 8004484:	2b3f      	cmp	r3, #63	@ 0x3f
 8004486:	d83b      	bhi.n	8004500 <ssd1306_DrawBitmap+0xae>
        return;
    }

    for (uint8_t j = 0; j < h; j++, y++) {
 8004488:	2300      	movs	r3, #0
 800448a:	73bb      	strb	r3, [r7, #14]
 800448c:	e033      	b.n	80044f6 <ssd1306_DrawBitmap+0xa4>
        for (uint8_t i = 0; i < w; i++) {
 800448e:	2300      	movs	r3, #0
 8004490:	737b      	strb	r3, [r7, #13]
 8004492:	e026      	b.n	80044e2 <ssd1306_DrawBitmap+0x90>
            if (i & 7) {
 8004494:	7b7b      	ldrb	r3, [r7, #13]
 8004496:	f003 0307 	and.w	r3, r3, #7
 800449a:	2b00      	cmp	r3, #0
 800449c:	d003      	beq.n	80044a6 <ssd1306_DrawBitmap+0x54>
                byte <<= 1;
 800449e:	7bfb      	ldrb	r3, [r7, #15]
 80044a0:	005b      	lsls	r3, r3, #1
 80044a2:	73fb      	strb	r3, [r7, #15]
 80044a4:	e00d      	b.n	80044c2 <ssd1306_DrawBitmap+0x70>
            } else {
                byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 80044a6:	7bbb      	ldrb	r3, [r7, #14]
 80044a8:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80044ac:	fb02 f303 	mul.w	r3, r2, r3
 80044b0:	7b7a      	ldrb	r2, [r7, #13]
 80044b2:	08d2      	lsrs	r2, r2, #3
 80044b4:	b2d2      	uxtb	r2, r2
 80044b6:	4413      	add	r3, r2
 80044b8:	461a      	mov	r2, r3
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	4413      	add	r3, r2
 80044be:	781b      	ldrb	r3, [r3, #0]
 80044c0:	73fb      	strb	r3, [r7, #15]
            }

            if (byte & 0x80) {
 80044c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	da08      	bge.n	80044dc <ssd1306_DrawBitmap+0x8a>
                ssd1306_DrawPixel(x + i, y, color);
 80044ca:	79fa      	ldrb	r2, [r7, #7]
 80044cc:	7b7b      	ldrb	r3, [r7, #13]
 80044ce:	4413      	add	r3, r2
 80044d0:	b2db      	uxtb	r3, r3
 80044d2:	7f3a      	ldrb	r2, [r7, #28]
 80044d4:	79b9      	ldrb	r1, [r7, #6]
 80044d6:	4618      	mov	r0, r3
 80044d8:	f7ff fdb0 	bl	800403c <ssd1306_DrawPixel>
        for (uint8_t i = 0; i < w; i++) {
 80044dc:	7b7b      	ldrb	r3, [r7, #13]
 80044de:	3301      	adds	r3, #1
 80044e0:	737b      	strb	r3, [r7, #13]
 80044e2:	7b7a      	ldrb	r2, [r7, #13]
 80044e4:	797b      	ldrb	r3, [r7, #5]
 80044e6:	429a      	cmp	r2, r3
 80044e8:	d3d4      	bcc.n	8004494 <ssd1306_DrawBitmap+0x42>
    for (uint8_t j = 0; j < h; j++, y++) {
 80044ea:	7bbb      	ldrb	r3, [r7, #14]
 80044ec:	3301      	adds	r3, #1
 80044ee:	73bb      	strb	r3, [r7, #14]
 80044f0:	79bb      	ldrb	r3, [r7, #6]
 80044f2:	3301      	adds	r3, #1
 80044f4:	71bb      	strb	r3, [r7, #6]
 80044f6:	7bba      	ldrb	r2, [r7, #14]
 80044f8:	7e3b      	ldrb	r3, [r7, #24]
 80044fa:	429a      	cmp	r2, r3
 80044fc:	d3c7      	bcc.n	800448e <ssd1306_DrawBitmap+0x3c>
            }
        }
    }
    return;
 80044fe:	e000      	b.n	8004502 <ssd1306_DrawBitmap+0xb0>
        return;
 8004500:	bf00      	nop
}
 8004502:	3710      	adds	r7, #16
 8004504:	46bd      	mov	sp, r7
 8004506:	bd80      	pop	{r7, pc}

08004508 <ssd1306_SetContrast>:

void ssd1306_SetContrast(const uint8_t value) {
 8004508:	b580      	push	{r7, lr}
 800450a:	b084      	sub	sp, #16
 800450c:	af00      	add	r7, sp, #0
 800450e:	4603      	mov	r3, r0
 8004510:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8004512:	2381      	movs	r3, #129	@ 0x81
 8004514:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8004516:	7bfb      	ldrb	r3, [r7, #15]
 8004518:	4618      	mov	r0, r3
 800451a:	f7ff fcb3 	bl	8003e84 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 800451e:	79fb      	ldrb	r3, [r7, #7]
 8004520:	4618      	mov	r0, r3
 8004522:	f7ff fcaf 	bl	8003e84 <ssd1306_WriteCommand>
}
 8004526:	bf00      	nop
 8004528:	3710      	adds	r7, #16
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}
	...

08004530 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8004530:	b580      	push	{r7, lr}
 8004532:	b084      	sub	sp, #16
 8004534:	af00      	add	r7, sp, #0
 8004536:	4603      	mov	r3, r0
 8004538:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 800453a:	79fb      	ldrb	r3, [r7, #7]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d005      	beq.n	800454c <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8004540:	23af      	movs	r3, #175	@ 0xaf
 8004542:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8004544:	4b08      	ldr	r3, [pc, #32]	@ (8004568 <ssd1306_SetDisplayOn+0x38>)
 8004546:	2201      	movs	r2, #1
 8004548:	715a      	strb	r2, [r3, #5]
 800454a:	e004      	b.n	8004556 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 800454c:	23ae      	movs	r3, #174	@ 0xae
 800454e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8004550:	4b05      	ldr	r3, [pc, #20]	@ (8004568 <ssd1306_SetDisplayOn+0x38>)
 8004552:	2200      	movs	r2, #0
 8004554:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8004556:	7bfb      	ldrb	r3, [r7, #15]
 8004558:	4618      	mov	r0, r3
 800455a:	f7ff fc93 	bl	8003e84 <ssd1306_WriteCommand>
}
 800455e:	bf00      	nop
 8004560:	3710      	adds	r7, #16
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}
 8004566:	bf00      	nop
 8004568:	20001200 	.word	0x20001200
 800456c:	00000000 	.word	0x00000000

08004570 <batterygauge>:



}

void batterygauge(float vbat,int x, int y,int currentsquare){
 8004570:	b590      	push	{r4, r7, lr}
 8004572:	b087      	sub	sp, #28
 8004574:	af02      	add	r7, sp, #8
 8004576:	ed87 0a03 	vstr	s0, [r7, #12]
 800457a:	60b8      	str	r0, [r7, #8]
 800457c:	6079      	str	r1, [r7, #4]
 800457e:	603a      	str	r2, [r7, #0]
	ssd1306_Line(x+15,y+1,x+15,y+5, White);
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	b2db      	uxtb	r3, r3
 8004584:	330f      	adds	r3, #15
 8004586:	b2d8      	uxtb	r0, r3
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	b2db      	uxtb	r3, r3
 800458c:	3301      	adds	r3, #1
 800458e:	b2d9      	uxtb	r1, r3
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	b2db      	uxtb	r3, r3
 8004594:	330f      	adds	r3, #15
 8004596:	b2da      	uxtb	r2, r3
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	b2db      	uxtb	r3, r3
 800459c:	3305      	adds	r3, #5
 800459e:	b2db      	uxtb	r3, r3
 80045a0:	2401      	movs	r4, #1
 80045a2:	9400      	str	r4, [sp, #0]
 80045a4:	f7ff fe64 	bl	8004270 <ssd1306_Line>
	ssd1306_Line(x+16,y+1,x+16,y+5, White);
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	b2db      	uxtb	r3, r3
 80045ac:	3310      	adds	r3, #16
 80045ae:	b2d8      	uxtb	r0, r3
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	b2db      	uxtb	r3, r3
 80045b4:	3301      	adds	r3, #1
 80045b6:	b2d9      	uxtb	r1, r3
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	b2db      	uxtb	r3, r3
 80045bc:	3310      	adds	r3, #16
 80045be:	b2da      	uxtb	r2, r3
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	b2db      	uxtb	r3, r3
 80045c4:	3305      	adds	r3, #5
 80045c6:	b2db      	uxtb	r3, r3
 80045c8:	2401      	movs	r4, #1
 80045ca:	9400      	str	r4, [sp, #0]
 80045cc:	f7ff fe50 	bl	8004270 <ssd1306_Line>
	ssd1306_DrawRectangle(x, y, x+14, y+6, White);
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	b2d8      	uxtb	r0, r3
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	b2d9      	uxtb	r1, r3
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	b2db      	uxtb	r3, r3
 80045dc:	330e      	adds	r3, #14
 80045de:	b2da      	uxtb	r2, r3
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	b2db      	uxtb	r3, r3
 80045e4:	3306      	adds	r3, #6
 80045e6:	b2db      	uxtb	r3, r3
 80045e8:	2401      	movs	r4, #1
 80045ea:	9400      	str	r4, [sp, #0]
 80045ec:	f7ff feac 	bl	8004348 <ssd1306_DrawRectangle>
	if(vbat<=3.7){
 80045f0:	68f8      	ldr	r0, [r7, #12]
 80045f2:	f7fb ff81 	bl	80004f8 <__aeabi_f2d>
 80045f6:	a396      	add	r3, pc, #600	@ (adr r3, 8004850 <batterygauge+0x2e0>)
 80045f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045fc:	f7fc fa50 	bl	8000aa0 <__aeabi_dcmple>
 8004600:	4603      	mov	r3, r0
 8004602:	2b00      	cmp	r3, #0
 8004604:	d02a      	beq.n	800465c <batterygauge+0xec>
		ssd1306_DrawRectangle(x+2, y+2, x+3, y+4, White);
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	b2db      	uxtb	r3, r3
 800460a:	3302      	adds	r3, #2
 800460c:	b2d8      	uxtb	r0, r3
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	b2db      	uxtb	r3, r3
 8004612:	3302      	adds	r3, #2
 8004614:	b2d9      	uxtb	r1, r3
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	b2db      	uxtb	r3, r3
 800461a:	3303      	adds	r3, #3
 800461c:	b2da      	uxtb	r2, r3
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	b2db      	uxtb	r3, r3
 8004622:	3304      	adds	r3, #4
 8004624:	b2db      	uxtb	r3, r3
 8004626:	2401      	movs	r4, #1
 8004628:	9400      	str	r4, [sp, #0]
 800462a:	f7ff fe8d 	bl	8004348 <ssd1306_DrawRectangle>
		if(currentsquare==1){
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	2b01      	cmp	r3, #1
 8004632:	d113      	bne.n	800465c <batterygauge+0xec>
			ssd1306_DrawRectangle(x+2, y+2, x+3, y+4, White);
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	b2db      	uxtb	r3, r3
 8004638:	3302      	adds	r3, #2
 800463a:	b2d8      	uxtb	r0, r3
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	b2db      	uxtb	r3, r3
 8004640:	3302      	adds	r3, #2
 8004642:	b2d9      	uxtb	r1, r3
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	b2db      	uxtb	r3, r3
 8004648:	3303      	adds	r3, #3
 800464a:	b2da      	uxtb	r2, r3
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	b2db      	uxtb	r3, r3
 8004650:	3304      	adds	r3, #4
 8004652:	b2db      	uxtb	r3, r3
 8004654:	2401      	movs	r4, #1
 8004656:	9400      	str	r4, [sp, #0]
 8004658:	f7ff fe76 	bl	8004348 <ssd1306_DrawRectangle>
		}
		else{

		}
	}
	if(vbat>3.7 && vbat<= 3.9){
 800465c:	68f8      	ldr	r0, [r7, #12]
 800465e:	f7fb ff4b 	bl	80004f8 <__aeabi_f2d>
 8004662:	a37b      	add	r3, pc, #492	@ (adr r3, 8004850 <batterygauge+0x2e0>)
 8004664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004668:	f7fc fa2e 	bl	8000ac8 <__aeabi_dcmpgt>
 800466c:	4603      	mov	r3, r0
 800466e:	2b00      	cmp	r3, #0
 8004670:	d035      	beq.n	80046de <batterygauge+0x16e>
 8004672:	68f8      	ldr	r0, [r7, #12]
 8004674:	f7fb ff40 	bl	80004f8 <__aeabi_f2d>
 8004678:	a377      	add	r3, pc, #476	@ (adr r3, 8004858 <batterygauge+0x2e8>)
 800467a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800467e:	f7fc fa0f 	bl	8000aa0 <__aeabi_dcmple>
 8004682:	4603      	mov	r3, r0
 8004684:	2b00      	cmp	r3, #0
 8004686:	d02a      	beq.n	80046de <batterygauge+0x16e>
		ssd1306_DrawRectangle(x+2, y+2, x+3, y+4, White);
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	b2db      	uxtb	r3, r3
 800468c:	3302      	adds	r3, #2
 800468e:	b2d8      	uxtb	r0, r3
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	b2db      	uxtb	r3, r3
 8004694:	3302      	adds	r3, #2
 8004696:	b2d9      	uxtb	r1, r3
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	b2db      	uxtb	r3, r3
 800469c:	3303      	adds	r3, #3
 800469e:	b2da      	uxtb	r2, r3
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	b2db      	uxtb	r3, r3
 80046a4:	3304      	adds	r3, #4
 80046a6:	b2db      	uxtb	r3, r3
 80046a8:	2401      	movs	r4, #1
 80046aa:	9400      	str	r4, [sp, #0]
 80046ac:	f7ff fe4c 	bl	8004348 <ssd1306_DrawRectangle>
		if(currentsquare==1){
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	2b01      	cmp	r3, #1
 80046b4:	d113      	bne.n	80046de <batterygauge+0x16e>
			ssd1306_DrawRectangle(x+5, y+2, x+6, y+4, White);
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	b2db      	uxtb	r3, r3
 80046ba:	3305      	adds	r3, #5
 80046bc:	b2d8      	uxtb	r0, r3
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	b2db      	uxtb	r3, r3
 80046c2:	3302      	adds	r3, #2
 80046c4:	b2d9      	uxtb	r1, r3
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	b2db      	uxtb	r3, r3
 80046ca:	3306      	adds	r3, #6
 80046cc:	b2da      	uxtb	r2, r3
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	b2db      	uxtb	r3, r3
 80046d2:	3304      	adds	r3, #4
 80046d4:	b2db      	uxtb	r3, r3
 80046d6:	2401      	movs	r4, #1
 80046d8:	9400      	str	r4, [sp, #0]
 80046da:	f7ff fe35 	bl	8004348 <ssd1306_DrawRectangle>
				else{

				}

	}
	if(vbat>3.9 && vbat<=4.1){
 80046de:	68f8      	ldr	r0, [r7, #12]
 80046e0:	f7fb ff0a 	bl	80004f8 <__aeabi_f2d>
 80046e4:	a35c      	add	r3, pc, #368	@ (adr r3, 8004858 <batterygauge+0x2e8>)
 80046e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046ea:	f7fc f9ed 	bl	8000ac8 <__aeabi_dcmpgt>
 80046ee:	4603      	mov	r3, r0
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d049      	beq.n	8004788 <batterygauge+0x218>
 80046f4:	68f8      	ldr	r0, [r7, #12]
 80046f6:	f7fb feff 	bl	80004f8 <__aeabi_f2d>
 80046fa:	a359      	add	r3, pc, #356	@ (adr r3, 8004860 <batterygauge+0x2f0>)
 80046fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004700:	f7fc f9ce 	bl	8000aa0 <__aeabi_dcmple>
 8004704:	4603      	mov	r3, r0
 8004706:	2b00      	cmp	r3, #0
 8004708:	d03e      	beq.n	8004788 <batterygauge+0x218>
		ssd1306_DrawRectangle(x+2, y+2, x+3, y+4, White);
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	b2db      	uxtb	r3, r3
 800470e:	3302      	adds	r3, #2
 8004710:	b2d8      	uxtb	r0, r3
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	b2db      	uxtb	r3, r3
 8004716:	3302      	adds	r3, #2
 8004718:	b2d9      	uxtb	r1, r3
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	b2db      	uxtb	r3, r3
 800471e:	3303      	adds	r3, #3
 8004720:	b2da      	uxtb	r2, r3
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	b2db      	uxtb	r3, r3
 8004726:	3304      	adds	r3, #4
 8004728:	b2db      	uxtb	r3, r3
 800472a:	2401      	movs	r4, #1
 800472c:	9400      	str	r4, [sp, #0]
 800472e:	f7ff fe0b 	bl	8004348 <ssd1306_DrawRectangle>
		ssd1306_DrawRectangle(x+5, y+2, x+6, y+4, White);
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	b2db      	uxtb	r3, r3
 8004736:	3305      	adds	r3, #5
 8004738:	b2d8      	uxtb	r0, r3
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	b2db      	uxtb	r3, r3
 800473e:	3302      	adds	r3, #2
 8004740:	b2d9      	uxtb	r1, r3
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	b2db      	uxtb	r3, r3
 8004746:	3306      	adds	r3, #6
 8004748:	b2da      	uxtb	r2, r3
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	b2db      	uxtb	r3, r3
 800474e:	3304      	adds	r3, #4
 8004750:	b2db      	uxtb	r3, r3
 8004752:	2401      	movs	r4, #1
 8004754:	9400      	str	r4, [sp, #0]
 8004756:	f7ff fdf7 	bl	8004348 <ssd1306_DrawRectangle>

		if(currentsquare==1){
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	2b01      	cmp	r3, #1
 800475e:	d113      	bne.n	8004788 <batterygauge+0x218>
			ssd1306_DrawRectangle(x+8, y+2, x+9, y+4, White);
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	b2db      	uxtb	r3, r3
 8004764:	3308      	adds	r3, #8
 8004766:	b2d8      	uxtb	r0, r3
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	b2db      	uxtb	r3, r3
 800476c:	3302      	adds	r3, #2
 800476e:	b2d9      	uxtb	r1, r3
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	b2db      	uxtb	r3, r3
 8004774:	3309      	adds	r3, #9
 8004776:	b2da      	uxtb	r2, r3
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	b2db      	uxtb	r3, r3
 800477c:	3304      	adds	r3, #4
 800477e:	b2db      	uxtb	r3, r3
 8004780:	2401      	movs	r4, #1
 8004782:	9400      	str	r4, [sp, #0]
 8004784:	f7ff fde0 	bl	8004348 <ssd1306_DrawRectangle>
				else{

				}
	}

	if(vbat>4.1){
 8004788:	68f8      	ldr	r0, [r7, #12]
 800478a:	f7fb feb5 	bl	80004f8 <__aeabi_f2d>
 800478e:	a334      	add	r3, pc, #208	@ (adr r3, 8004860 <batterygauge+0x2f0>)
 8004790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004794:	f7fc f998 	bl	8000ac8 <__aeabi_dcmpgt>
 8004798:	4603      	mov	r3, r0
 800479a:	2b00      	cmp	r3, #0
 800479c:	d100      	bne.n	80047a0 <batterygauge+0x230>
	}




}
 800479e:	e052      	b.n	8004846 <batterygauge+0x2d6>
		ssd1306_DrawRectangle(x+2, y+2, x+3, y+4, White);
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	b2db      	uxtb	r3, r3
 80047a4:	3302      	adds	r3, #2
 80047a6:	b2d8      	uxtb	r0, r3
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	b2db      	uxtb	r3, r3
 80047ac:	3302      	adds	r3, #2
 80047ae:	b2d9      	uxtb	r1, r3
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	b2db      	uxtb	r3, r3
 80047b4:	3303      	adds	r3, #3
 80047b6:	b2da      	uxtb	r2, r3
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	b2db      	uxtb	r3, r3
 80047bc:	3304      	adds	r3, #4
 80047be:	b2db      	uxtb	r3, r3
 80047c0:	2401      	movs	r4, #1
 80047c2:	9400      	str	r4, [sp, #0]
 80047c4:	f7ff fdc0 	bl	8004348 <ssd1306_DrawRectangle>
		ssd1306_DrawRectangle(x+5, y+2, x+6, y+4, White);
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	b2db      	uxtb	r3, r3
 80047cc:	3305      	adds	r3, #5
 80047ce:	b2d8      	uxtb	r0, r3
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	b2db      	uxtb	r3, r3
 80047d4:	3302      	adds	r3, #2
 80047d6:	b2d9      	uxtb	r1, r3
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	b2db      	uxtb	r3, r3
 80047dc:	3306      	adds	r3, #6
 80047de:	b2da      	uxtb	r2, r3
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	b2db      	uxtb	r3, r3
 80047e4:	3304      	adds	r3, #4
 80047e6:	b2db      	uxtb	r3, r3
 80047e8:	2401      	movs	r4, #1
 80047ea:	9400      	str	r4, [sp, #0]
 80047ec:	f7ff fdac 	bl	8004348 <ssd1306_DrawRectangle>
		ssd1306_DrawRectangle(x+8, y+2, x+9, y+4, White);
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	b2db      	uxtb	r3, r3
 80047f4:	3308      	adds	r3, #8
 80047f6:	b2d8      	uxtb	r0, r3
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	b2db      	uxtb	r3, r3
 80047fc:	3302      	adds	r3, #2
 80047fe:	b2d9      	uxtb	r1, r3
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	b2db      	uxtb	r3, r3
 8004804:	3309      	adds	r3, #9
 8004806:	b2da      	uxtb	r2, r3
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	b2db      	uxtb	r3, r3
 800480c:	3304      	adds	r3, #4
 800480e:	b2db      	uxtb	r3, r3
 8004810:	2401      	movs	r4, #1
 8004812:	9400      	str	r4, [sp, #0]
 8004814:	f7ff fd98 	bl	8004348 <ssd1306_DrawRectangle>
		if(currentsquare==1){
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	2b01      	cmp	r3, #1
 800481c:	d113      	bne.n	8004846 <batterygauge+0x2d6>
			ssd1306_DrawRectangle(x+11, y+2, x+12, y+4, White);
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	b2db      	uxtb	r3, r3
 8004822:	330b      	adds	r3, #11
 8004824:	b2d8      	uxtb	r0, r3
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	b2db      	uxtb	r3, r3
 800482a:	3302      	adds	r3, #2
 800482c:	b2d9      	uxtb	r1, r3
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	b2db      	uxtb	r3, r3
 8004832:	330c      	adds	r3, #12
 8004834:	b2da      	uxtb	r2, r3
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	b2db      	uxtb	r3, r3
 800483a:	3304      	adds	r3, #4
 800483c:	b2db      	uxtb	r3, r3
 800483e:	2401      	movs	r4, #1
 8004840:	9400      	str	r4, [sp, #0]
 8004842:	f7ff fd81 	bl	8004348 <ssd1306_DrawRectangle>
}
 8004846:	bf00      	nop
 8004848:	3714      	adds	r7, #20
 800484a:	46bd      	mov	sp, r7
 800484c:	bd90      	pop	{r4, r7, pc}
 800484e:	bf00      	nop
 8004850:	9999999a 	.word	0x9999999a
 8004854:	400d9999 	.word	0x400d9999
 8004858:	33333333 	.word	0x33333333
 800485c:	400f3333 	.word	0x400f3333
 8004860:	66666666 	.word	0x66666666
 8004864:	40106666 	.word	0x40106666

08004868 <percentage>:

void percentage(float percent){
 8004868:	b580      	push	{r7, lr}
 800486a:	b084      	sub	sp, #16
 800486c:	af02      	add	r7, sp, #8
 800486e:	ed87 0a01 	vstr	s0, [r7, #4]
	ssd1306_FillRectangle(32, 40, floor(0.64*percent+32), 56, White);
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	f7fb fe40 	bl	80004f8 <__aeabi_f2d>
 8004878:	a329      	add	r3, pc, #164	@ (adr r3, 8004920 <percentage+0xb8>)
 800487a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800487e:	f7fb fe93 	bl	80005a8 <__aeabi_dmul>
 8004882:	4602      	mov	r2, r0
 8004884:	460b      	mov	r3, r1
 8004886:	4610      	mov	r0, r2
 8004888:	4619      	mov	r1, r3
 800488a:	f04f 0200 	mov.w	r2, #0
 800488e:	4b20      	ldr	r3, [pc, #128]	@ (8004910 <percentage+0xa8>)
 8004890:	f7fb fcd4 	bl	800023c <__adddf3>
 8004894:	4602      	mov	r2, r0
 8004896:	460b      	mov	r3, r1
 8004898:	ec43 2b17 	vmov	d7, r2, r3
 800489c:	eeb0 0a47 	vmov.f32	s0, s14
 80048a0:	eef0 0a67 	vmov.f32	s1, s15
 80048a4:	f019 fcd0 	bl	801e248 <floor>
 80048a8:	ec53 2b10 	vmov	r2, r3, d0
 80048ac:	4610      	mov	r0, r2
 80048ae:	4619      	mov	r1, r3
 80048b0:	f7fc f952 	bl	8000b58 <__aeabi_d2uiz>
 80048b4:	4603      	mov	r3, r0
 80048b6:	b2da      	uxtb	r2, r3
 80048b8:	2301      	movs	r3, #1
 80048ba:	9300      	str	r3, [sp, #0]
 80048bc:	2338      	movs	r3, #56	@ 0x38
 80048be:	2128      	movs	r1, #40	@ 0x28
 80048c0:	2020      	movs	r0, #32
 80048c2:	f7ff fd78 	bl	80043b6 <ssd1306_FillRectangle>
	ssd1306_DrawRectangle(32, 40, 96, 56, White);
 80048c6:	2301      	movs	r3, #1
 80048c8:	9300      	str	r3, [sp, #0]
 80048ca:	2338      	movs	r3, #56	@ 0x38
 80048cc:	2260      	movs	r2, #96	@ 0x60
 80048ce:	2128      	movs	r1, #40	@ 0x28
 80048d0:	2020      	movs	r0, #32
 80048d2:	f7ff fd39 	bl	8004348 <ssd1306_DrawRectangle>
	snprintf((char  *)bufferscreen,20,"%0.2f %%",(float) percent);
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	f7fb fe0e 	bl	80004f8 <__aeabi_f2d>
 80048dc:	4602      	mov	r2, r0
 80048de:	460b      	mov	r3, r1
 80048e0:	e9cd 2300 	strd	r2, r3, [sp]
 80048e4:	4a0b      	ldr	r2, [pc, #44]	@ (8004914 <percentage+0xac>)
 80048e6:	2114      	movs	r1, #20
 80048e8:	480b      	ldr	r0, [pc, #44]	@ (8004918 <percentage+0xb0>)
 80048ea:	f016 fd7b 	bl	801b3e4 <sniprintf>
	ssd1306_SetCursor(45,44);
 80048ee:	212c      	movs	r1, #44	@ 0x2c
 80048f0:	202d      	movs	r0, #45	@ 0x2d
 80048f2:	f7ff fca5 	bl	8004240 <ssd1306_SetCursor>
	ssd1306_WriteString((char  *)bufferscreen,Font_6x8,White);
 80048f6:	4a09      	ldr	r2, [pc, #36]	@ (800491c <percentage+0xb4>)
 80048f8:	2301      	movs	r3, #1
 80048fa:	ca06      	ldmia	r2, {r1, r2}
 80048fc:	4806      	ldr	r0, [pc, #24]	@ (8004918 <percentage+0xb0>)
 80048fe:	f7ff fc79 	bl	80041f4 <ssd1306_WriteString>


}
 8004902:	bf00      	nop
 8004904:	3708      	adds	r7, #8
 8004906:	46bd      	mov	sp, r7
 8004908:	bd80      	pop	{r7, pc}
 800490a:	bf00      	nop
 800490c:	f3af 8000 	nop.w
 8004910:	40400000 	.word	0x40400000
 8004914:	0801fee8 	.word	0x0801fee8
 8004918:	20000ae0 	.word	0x20000ae0
 800491c:	20000014 	.word	0x20000014
 8004920:	47ae147b 	.word	0x47ae147b
 8004924:	3fe47ae1 	.word	0x3fe47ae1

08004928 <statemachine>:
extern double bmppress;
extern double bmpalt;



void statemachine(void){
 8004928:	b5b0      	push	{r4, r5, r7, lr}
 800492a:	ed2d 8b02 	vpush	{d8}
 800492e:	b08a      	sub	sp, #40	@ 0x28
 8004930:	af04      	add	r7, sp, #16
	switch(state){
 8004932:	4bbb      	ldr	r3, [pc, #748]	@ (8004c20 <statemachine+0x2f8>)
 8004934:	781b      	ldrb	r3, [r3, #0]
 8004936:	2b05      	cmp	r3, #5
 8004938:	f201 85eb 	bhi.w	8006512 <statemachine+0x1bea>
 800493c:	a201      	add	r2, pc, #4	@ (adr r2, 8004944 <statemachine+0x1c>)
 800493e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004942:	bf00      	nop
 8004944:	0800495d 	.word	0x0800495d
 8004948:	08004d03 	.word	0x08004d03
 800494c:	08005571 	.word	0x08005571
 8004950:	08005c21 	.word	0x08005c21
 8004954:	08005e9b 	.word	0x08005e9b
 8004958:	080063a7 	.word	0x080063a7
	 case STATE_SPEED:
		 nmea_parse(&myData, DataBuffer);
 800495c:	49b1      	ldr	r1, [pc, #708]	@ (8004c24 <statemachine+0x2fc>)
 800495e:	48b2      	ldr	r0, [pc, #712]	@ (8004c28 <statemachine+0x300>)
 8004960:	f7fe fdbc 	bl	80034dc <nmea_parse>
		ssd1306_Fill(Black);
 8004964:	2000      	movs	r0, #0
 8004966:	f7ff fb29 	bl	8003fbc <ssd1306_Fill>

				 if(myData.speed>=vitmax){
 800496a:	4baf      	ldr	r3, [pc, #700]	@ (8004c28 <statemachine+0x300>)
 800496c:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 8004970:	4bae      	ldr	r3, [pc, #696]	@ (8004c2c <statemachine+0x304>)
 8004972:	edd3 7a00 	vldr	s15, [r3]
 8004976:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800497a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800497e:	db03      	blt.n	8004988 <statemachine+0x60>
									 vitmax=myData.speed;
 8004980:	4ba9      	ldr	r3, [pc, #676]	@ (8004c28 <statemachine+0x300>)
 8004982:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004984:	4aa9      	ldr	r2, [pc, #676]	@ (8004c2c <statemachine+0x304>)
 8004986:	6013      	str	r3, [r2, #0]
								 }
								 float pace=0;
 8004988:	f04f 0300 	mov.w	r3, #0
 800498c:	617b      	str	r3, [r7, #20]
								 float sec=0;
 800498e:	f04f 0300 	mov.w	r3, #0
 8004992:	613b      	str	r3, [r7, #16]
								 if (myData.speed!=0){
 8004994:	4ba4      	ldr	r3, [pc, #656]	@ (8004c28 <statemachine+0x300>)
 8004996:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 800499a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800499e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049a2:	d032      	beq.n	8004a0a <statemachine+0xe2>
									 pace=1000/(60*myData.speed);
 80049a4:	4ba0      	ldr	r3, [pc, #640]	@ (8004c28 <statemachine+0x300>)
 80049a6:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80049aa:	ed9f 7aa1 	vldr	s14, [pc, #644]	@ 8004c30 <statemachine+0x308>
 80049ae:	ee27 7a87 	vmul.f32	s14, s15, s14
 80049b2:	eddf 6aa0 	vldr	s13, [pc, #640]	@ 8004c34 <statemachine+0x30c>
 80049b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049ba:	edc7 7a05 	vstr	s15, [r7, #20]
									 sec=(pace-floor(pace))*60;
 80049be:	6978      	ldr	r0, [r7, #20]
 80049c0:	f7fb fd9a 	bl	80004f8 <__aeabi_f2d>
 80049c4:	4604      	mov	r4, r0
 80049c6:	460d      	mov	r5, r1
 80049c8:	6978      	ldr	r0, [r7, #20]
 80049ca:	f7fb fd95 	bl	80004f8 <__aeabi_f2d>
 80049ce:	4602      	mov	r2, r0
 80049d0:	460b      	mov	r3, r1
 80049d2:	ec43 2b10 	vmov	d0, r2, r3
 80049d6:	f019 fc37 	bl	801e248 <floor>
 80049da:	ec53 2b10 	vmov	r2, r3, d0
 80049de:	4620      	mov	r0, r4
 80049e0:	4629      	mov	r1, r5
 80049e2:	f7fb fc29 	bl	8000238 <__aeabi_dsub>
 80049e6:	4602      	mov	r2, r0
 80049e8:	460b      	mov	r3, r1
 80049ea:	4610      	mov	r0, r2
 80049ec:	4619      	mov	r1, r3
 80049ee:	f04f 0200 	mov.w	r2, #0
 80049f2:	4b91      	ldr	r3, [pc, #580]	@ (8004c38 <statemachine+0x310>)
 80049f4:	f7fb fdd8 	bl	80005a8 <__aeabi_dmul>
 80049f8:	4602      	mov	r2, r0
 80049fa:	460b      	mov	r3, r1
 80049fc:	4610      	mov	r0, r2
 80049fe:	4619      	mov	r1, r3
 8004a00:	f7fc f8ca 	bl	8000b98 <__aeabi_d2f>
 8004a04:	4603      	mov	r3, r0
 8004a06:	613b      	str	r3, [r7, #16]
 8004a08:	e001      	b.n	8004a0e <statemachine+0xe6>
								 }
								 else {
									 pace=99;
 8004a0a:	4b8c      	ldr	r3, [pc, #560]	@ (8004c3c <statemachine+0x314>)
 8004a0c:	617b      	str	r3, [r7, #20]
								 }


				  switch(spdstate){
 8004a0e:	4b8c      	ldr	r3, [pc, #560]	@ (8004c40 <statemachine+0x318>)
 8004a10:	781b      	ldrb	r3, [r3, #0]
 8004a12:	2b02      	cmp	r3, #2
 8004a14:	f000 8087 	beq.w	8004b26 <statemachine+0x1fe>
 8004a18:	2b02      	cmp	r3, #2
 8004a1a:	f300 812c 	bgt.w	8004c76 <statemachine+0x34e>
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d002      	beq.n	8004a28 <statemachine+0x100>
 8004a22:	2b01      	cmp	r3, #1
 8004a24:	d040      	beq.n	8004aa8 <statemachine+0x180>
 8004a26:	e126      	b.n	8004c76 <statemachine+0x34e>


				 case STATE_GROS:


						ssd1306_SetCursor(32, 32);
 8004a28:	2120      	movs	r1, #32
 8004a2a:	2020      	movs	r0, #32
 8004a2c:	f7ff fc08 	bl	8004240 <ssd1306_SetCursor>
						snprintf((char *)bufferscreen,15, "%0.1f",(myData.speed)*3.6);
 8004a30:	4b7d      	ldr	r3, [pc, #500]	@ (8004c28 <statemachine+0x300>)
 8004a32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a34:	4618      	mov	r0, r3
 8004a36:	f7fb fd5f 	bl	80004f8 <__aeabi_f2d>
 8004a3a:	a377      	add	r3, pc, #476	@ (adr r3, 8004c18 <statemachine+0x2f0>)
 8004a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a40:	f7fb fdb2 	bl	80005a8 <__aeabi_dmul>
 8004a44:	4602      	mov	r2, r0
 8004a46:	460b      	mov	r3, r1
 8004a48:	e9cd 2300 	strd	r2, r3, [sp]
 8004a4c:	4a7d      	ldr	r2, [pc, #500]	@ (8004c44 <statemachine+0x31c>)
 8004a4e:	210f      	movs	r1, #15
 8004a50:	487d      	ldr	r0, [pc, #500]	@ (8004c48 <statemachine+0x320>)
 8004a52:	f016 fcc7 	bl	801b3e4 <sniprintf>
						ssd1306_WriteString((char *)bufferscreen, Font_16x24, White);
 8004a56:	4a7d      	ldr	r2, [pc, #500]	@ (8004c4c <statemachine+0x324>)
 8004a58:	2301      	movs	r3, #1
 8004a5a:	ca06      	ldmia	r2, {r1, r2}
 8004a5c:	487a      	ldr	r0, [pc, #488]	@ (8004c48 <statemachine+0x320>)
 8004a5e:	f7ff fbc9 	bl	80041f4 <ssd1306_WriteString>
						ssd1306_SetCursor(32, 56);
 8004a62:	2138      	movs	r1, #56	@ 0x38
 8004a64:	2020      	movs	r0, #32
 8004a66:	f7ff fbeb 	bl	8004240 <ssd1306_SetCursor>
						ssd1306_WriteString("Vit(kmh)", Font_6x8, White);
 8004a6a:	4a79      	ldr	r2, [pc, #484]	@ (8004c50 <statemachine+0x328>)
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	ca06      	ldmia	r2, {r1, r2}
 8004a70:	4878      	ldr	r0, [pc, #480]	@ (8004c54 <statemachine+0x32c>)
 8004a72:	f7ff fbbf 	bl	80041f4 <ssd1306_WriteString>
						batterygauge(vbat,79, 57,1);
 8004a76:	4b78      	ldr	r3, [pc, #480]	@ (8004c58 <statemachine+0x330>)
 8004a78:	edd3 7a00 	vldr	s15, [r3]
 8004a7c:	2201      	movs	r2, #1
 8004a7e:	2139      	movs	r1, #57	@ 0x39
 8004a80:	204f      	movs	r0, #79	@ 0x4f
 8004a82:	eeb0 0a67 	vmov.f32	s0, s15
 8004a86:	f7ff fd73 	bl	8004570 <batterygauge>

					 if(BTN_B>=1){
 8004a8a:	4b74      	ldr	r3, [pc, #464]	@ (8004c5c <statemachine+0x334>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	f340 80bb 	ble.w	8004c0a <statemachine+0x2e2>
							spdstate++;
 8004a94:	4b6a      	ldr	r3, [pc, #424]	@ (8004c40 <statemachine+0x318>)
 8004a96:	781b      	ldrb	r3, [r3, #0]
 8004a98:	3301      	adds	r3, #1
 8004a9a:	b2da      	uxtb	r2, r3
 8004a9c:	4b68      	ldr	r3, [pc, #416]	@ (8004c40 <statemachine+0x318>)
 8004a9e:	701a      	strb	r2, [r3, #0]
							BTN_B=0;
 8004aa0:	4b6e      	ldr	r3, [pc, #440]	@ (8004c5c <statemachine+0x334>)
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	601a      	str	r2, [r3, #0]
					 					 				  	}




				  break;
 8004aa6:	e0b0      	b.n	8004c0a <statemachine+0x2e2>
				 case STATE_GROS1:

					 ssd1306_SetCursor(32, 32);
 8004aa8:	2120      	movs	r1, #32
 8004aaa:	2020      	movs	r0, #32
 8004aac:	f7ff fbc8 	bl	8004240 <ssd1306_SetCursor>
					 snprintf((char *)bufferscreen,15, "%0.1f",vitmax*3.6);
 8004ab0:	4b5e      	ldr	r3, [pc, #376]	@ (8004c2c <statemachine+0x304>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	f7fb fd1f 	bl	80004f8 <__aeabi_f2d>
 8004aba:	a357      	add	r3, pc, #348	@ (adr r3, 8004c18 <statemachine+0x2f0>)
 8004abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ac0:	f7fb fd72 	bl	80005a8 <__aeabi_dmul>
 8004ac4:	4602      	mov	r2, r0
 8004ac6:	460b      	mov	r3, r1
 8004ac8:	e9cd 2300 	strd	r2, r3, [sp]
 8004acc:	4a5d      	ldr	r2, [pc, #372]	@ (8004c44 <statemachine+0x31c>)
 8004ace:	210f      	movs	r1, #15
 8004ad0:	485d      	ldr	r0, [pc, #372]	@ (8004c48 <statemachine+0x320>)
 8004ad2:	f016 fc87 	bl	801b3e4 <sniprintf>
					 ssd1306_WriteString((char *)bufferscreen, Font_16x24, White);
 8004ad6:	4a5d      	ldr	r2, [pc, #372]	@ (8004c4c <statemachine+0x324>)
 8004ad8:	2301      	movs	r3, #1
 8004ada:	ca06      	ldmia	r2, {r1, r2}
 8004adc:	485a      	ldr	r0, [pc, #360]	@ (8004c48 <statemachine+0x320>)
 8004ade:	f7ff fb89 	bl	80041f4 <ssd1306_WriteString>
					 ssd1306_SetCursor(32, 56);
 8004ae2:	2138      	movs	r1, #56	@ 0x38
 8004ae4:	2020      	movs	r0, #32
 8004ae6:	f7ff fbab 	bl	8004240 <ssd1306_SetCursor>
					 ssd1306_WriteString("maxV", Font_6x8, White);
 8004aea:	4a59      	ldr	r2, [pc, #356]	@ (8004c50 <statemachine+0x328>)
 8004aec:	2301      	movs	r3, #1
 8004aee:	ca06      	ldmia	r2, {r1, r2}
 8004af0:	485b      	ldr	r0, [pc, #364]	@ (8004c60 <statemachine+0x338>)
 8004af2:	f7ff fb7f 	bl	80041f4 <ssd1306_WriteString>
					 batterygauge(vbat,79, 57,1);
 8004af6:	4b58      	ldr	r3, [pc, #352]	@ (8004c58 <statemachine+0x330>)
 8004af8:	edd3 7a00 	vldr	s15, [r3]
 8004afc:	2201      	movs	r2, #1
 8004afe:	2139      	movs	r1, #57	@ 0x39
 8004b00:	204f      	movs	r0, #79	@ 0x4f
 8004b02:	eeb0 0a67 	vmov.f32	s0, s15
 8004b06:	f7ff fd33 	bl	8004570 <batterygauge>





					 if(BTN_B>=1){
 8004b0a:	4b54      	ldr	r3, [pc, #336]	@ (8004c5c <statemachine+0x334>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	dd7d      	ble.n	8004c0e <statemachine+0x2e6>
					 							spdstate++;
 8004b12:	4b4b      	ldr	r3, [pc, #300]	@ (8004c40 <statemachine+0x318>)
 8004b14:	781b      	ldrb	r3, [r3, #0]
 8004b16:	3301      	adds	r3, #1
 8004b18:	b2da      	uxtb	r2, r3
 8004b1a:	4b49      	ldr	r3, [pc, #292]	@ (8004c40 <statemachine+0x318>)
 8004b1c:	701a      	strb	r2, [r3, #0]
					 							BTN_B=0;
 8004b1e:	4b4f      	ldr	r3, [pc, #316]	@ (8004c5c <statemachine+0x334>)
 8004b20:	2200      	movs	r2, #0
 8004b22:	601a      	str	r2, [r3, #0]

					 					 					 				  	}



					 break;
 8004b24:	e073      	b.n	8004c0e <statemachine+0x2e6>
				  case STATE_SUMMARY:
				  						ssd1306_SetCursor(32, 32);
 8004b26:	2120      	movs	r1, #32
 8004b28:	2020      	movs	r0, #32
 8004b2a:	f7ff fb89 	bl	8004240 <ssd1306_SetCursor>
				  						snprintf((char *)bufferscreen,15, "%0.0fmin%0.0fs",floor(pace),floor(sec));
 8004b2e:	6978      	ldr	r0, [r7, #20]
 8004b30:	f7fb fce2 	bl	80004f8 <__aeabi_f2d>
 8004b34:	4602      	mov	r2, r0
 8004b36:	460b      	mov	r3, r1
 8004b38:	ec43 2b10 	vmov	d0, r2, r3
 8004b3c:	f019 fb84 	bl	801e248 <floor>
 8004b40:	eeb0 8a40 	vmov.f32	s16, s0
 8004b44:	eef0 8a60 	vmov.f32	s17, s1
 8004b48:	6938      	ldr	r0, [r7, #16]
 8004b4a:	f7fb fcd5 	bl	80004f8 <__aeabi_f2d>
 8004b4e:	4602      	mov	r2, r0
 8004b50:	460b      	mov	r3, r1
 8004b52:	ec43 2b10 	vmov	d0, r2, r3
 8004b56:	f019 fb77 	bl	801e248 <floor>
 8004b5a:	eeb0 7a40 	vmov.f32	s14, s0
 8004b5e:	eef0 7a60 	vmov.f32	s15, s1
 8004b62:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004b66:	ed8d 8b00 	vstr	d8, [sp]
 8004b6a:	4a3e      	ldr	r2, [pc, #248]	@ (8004c64 <statemachine+0x33c>)
 8004b6c:	210f      	movs	r1, #15
 8004b6e:	4836      	ldr	r0, [pc, #216]	@ (8004c48 <statemachine+0x320>)
 8004b70:	f016 fc38 	bl	801b3e4 <sniprintf>
				  						ssd1306_WriteString((char *)bufferscreen, Font_7x10, White);
 8004b74:	4a3c      	ldr	r2, [pc, #240]	@ (8004c68 <statemachine+0x340>)
 8004b76:	2301      	movs	r3, #1
 8004b78:	ca06      	ldmia	r2, {r1, r2}
 8004b7a:	4833      	ldr	r0, [pc, #204]	@ (8004c48 <statemachine+0x320>)
 8004b7c:	f7ff fb3a 	bl	80041f4 <ssd1306_WriteString>
				  						ssd1306_SetCursor(32, 42);
 8004b80:	212a      	movs	r1, #42	@ 0x2a
 8004b82:	2020      	movs	r0, #32
 8004b84:	f7ff fb5c 	bl	8004240 <ssd1306_SetCursor>
				  						ssd1306_WriteString("pace", Font_6x8, White);
 8004b88:	4a31      	ldr	r2, [pc, #196]	@ (8004c50 <statemachine+0x328>)
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	ca06      	ldmia	r2, {r1, r2}
 8004b8e:	4837      	ldr	r0, [pc, #220]	@ (8004c6c <statemachine+0x344>)
 8004b90:	f7ff fb30 	bl	80041f4 <ssd1306_WriteString>
				  						ssd1306_SetCursor(32, 56);
 8004b94:	2138      	movs	r1, #56	@ 0x38
 8004b96:	2020      	movs	r0, #32
 8004b98:	f7ff fb52 	bl	8004240 <ssd1306_SetCursor>
				  						snprintf((char *)bufferscreen,15, "V=%0.1fkmh",vitmax*3.6);
 8004b9c:	4b23      	ldr	r3, [pc, #140]	@ (8004c2c <statemachine+0x304>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	f7fb fca9 	bl	80004f8 <__aeabi_f2d>
 8004ba6:	a31c      	add	r3, pc, #112	@ (adr r3, 8004c18 <statemachine+0x2f0>)
 8004ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bac:	f7fb fcfc 	bl	80005a8 <__aeabi_dmul>
 8004bb0:	4602      	mov	r2, r0
 8004bb2:	460b      	mov	r3, r1
 8004bb4:	e9cd 2300 	strd	r2, r3, [sp]
 8004bb8:	4a2d      	ldr	r2, [pc, #180]	@ (8004c70 <statemachine+0x348>)
 8004bba:	210f      	movs	r1, #15
 8004bbc:	4822      	ldr	r0, [pc, #136]	@ (8004c48 <statemachine+0x320>)
 8004bbe:	f016 fc11 	bl	801b3e4 <sniprintf>
				  						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 8004bc2:	4a23      	ldr	r2, [pc, #140]	@ (8004c50 <statemachine+0x328>)
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	ca06      	ldmia	r2, {r1, r2}
 8004bc8:	481f      	ldr	r0, [pc, #124]	@ (8004c48 <statemachine+0x320>)
 8004bca:	f7ff fb13 	bl	80041f4 <ssd1306_WriteString>
				  						batterygauge(vbat,79, 43,1);
 8004bce:	4b22      	ldr	r3, [pc, #136]	@ (8004c58 <statemachine+0x330>)
 8004bd0:	edd3 7a00 	vldr	s15, [r3]
 8004bd4:	2201      	movs	r2, #1
 8004bd6:	212b      	movs	r1, #43	@ 0x2b
 8004bd8:	204f      	movs	r0, #79	@ 0x4f
 8004bda:	eeb0 0a67 	vmov.f32	s0, s15
 8004bde:	f7ff fcc7 	bl	8004570 <batterygauge>



				  					 if(BTN_B>=1){
 8004be2:	4b1e      	ldr	r3, [pc, #120]	@ (8004c5c <statemachine+0x334>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	dd44      	ble.n	8004c74 <statemachine+0x34c>
				  								spdstate--;
 8004bea:	4b15      	ldr	r3, [pc, #84]	@ (8004c40 <statemachine+0x318>)
 8004bec:	781b      	ldrb	r3, [r3, #0]
 8004bee:	3b01      	subs	r3, #1
 8004bf0:	b2da      	uxtb	r2, r3
 8004bf2:	4b13      	ldr	r3, [pc, #76]	@ (8004c40 <statemachine+0x318>)
 8004bf4:	701a      	strb	r2, [r3, #0]
				  								spdstate--;
 8004bf6:	4b12      	ldr	r3, [pc, #72]	@ (8004c40 <statemachine+0x318>)
 8004bf8:	781b      	ldrb	r3, [r3, #0]
 8004bfa:	3b01      	subs	r3, #1
 8004bfc:	b2da      	uxtb	r2, r3
 8004bfe:	4b10      	ldr	r3, [pc, #64]	@ (8004c40 <statemachine+0x318>)
 8004c00:	701a      	strb	r2, [r3, #0]
				  								BTN_B=0;
 8004c02:	4b16      	ldr	r3, [pc, #88]	@ (8004c5c <statemachine+0x334>)
 8004c04:	2200      	movs	r2, #0
 8004c06:	601a      	str	r2, [r3, #0]
				  					 					 				  	}




				  					 break;
 8004c08:	e034      	b.n	8004c74 <statemachine+0x34c>
				  break;
 8004c0a:	bf00      	nop
 8004c0c:	e033      	b.n	8004c76 <statemachine+0x34e>
					 break;
 8004c0e:	bf00      	nop
 8004c10:	e031      	b.n	8004c76 <statemachine+0x34e>
 8004c12:	bf00      	nop
 8004c14:	f3af 8000 	nop.w
 8004c18:	cccccccd 	.word	0xcccccccd
 8004c1c:	400ccccc 	.word	0x400ccccc
 8004c20:	200005ec 	.word	0x200005ec
 8004c24:	20000638 	.word	0x20000638
 8004c28:	20000840 	.word	0x20000840
 8004c2c:	20000b54 	.word	0x20000b54
 8004c30:	42700000 	.word	0x42700000
 8004c34:	447a0000 	.word	0x447a0000
 8004c38:	404e0000 	.word	0x404e0000
 8004c3c:	42c60000 	.word	0x42c60000
 8004c40:	200005ed 	.word	0x200005ed
 8004c44:	0801fef4 	.word	0x0801fef4
 8004c48:	20000ae0 	.word	0x20000ae0
 8004c4c:	20000024 	.word	0x20000024
 8004c50:	20000014 	.word	0x20000014
 8004c54:	0801fefc 	.word	0x0801fefc
 8004c58:	200008b8 	.word	0x200008b8
 8004c5c:	20000884 	.word	0x20000884
 8004c60:	0801ff08 	.word	0x0801ff08
 8004c64:	0801ff10 	.word	0x0801ff10
 8004c68:	2000001c 	.word	0x2000001c
 8004c6c:	0801ff20 	.word	0x0801ff20
 8004c70:	0801ff28 	.word	0x0801ff28
				  					 break;
 8004c74:	bf00      	nop
				  }
				  					if(BTN_A>=1){
 8004c76:	4b84      	ldr	r3, [pc, #528]	@ (8004e88 <statemachine+0x560>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	dd0b      	ble.n	8004c96 <statemachine+0x36e>
				  									 					state++;
 8004c7e:	4b83      	ldr	r3, [pc, #524]	@ (8004e8c <statemachine+0x564>)
 8004c80:	781b      	ldrb	r3, [r3, #0]
 8004c82:	3301      	adds	r3, #1
 8004c84:	b2da      	uxtb	r2, r3
 8004c86:	4b81      	ldr	r3, [pc, #516]	@ (8004e8c <statemachine+0x564>)
 8004c88:	701a      	strb	r2, [r3, #0]
				  									 					BTN_A=0;
 8004c8a:	4b7f      	ldr	r3, [pc, #508]	@ (8004e88 <statemachine+0x560>)
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	601a      	str	r2, [r3, #0]
				  									 					BTN_B=0;
 8004c90:	4b7f      	ldr	r3, [pc, #508]	@ (8004e90 <statemachine+0x568>)
 8004c92:	2200      	movs	r2, #0
 8004c94:	601a      	str	r2, [r3, #0]
				  									  	}
				  									 	 if(BTN_A_LONG>=1){
 8004c96:	4b7f      	ldr	r3, [pc, #508]	@ (8004e94 <statemachine+0x56c>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	dd23      	ble.n	8004ce6 <statemachine+0x3be>
				  									 						 				 									state++;
 8004c9e:	4b7b      	ldr	r3, [pc, #492]	@ (8004e8c <statemachine+0x564>)
 8004ca0:	781b      	ldrb	r3, [r3, #0]
 8004ca2:	3301      	adds	r3, #1
 8004ca4:	b2da      	uxtb	r2, r3
 8004ca6:	4b79      	ldr	r3, [pc, #484]	@ (8004e8c <statemachine+0x564>)
 8004ca8:	701a      	strb	r2, [r3, #0]
				  									 						 				 									state++;
 8004caa:	4b78      	ldr	r3, [pc, #480]	@ (8004e8c <statemachine+0x564>)
 8004cac:	781b      	ldrb	r3, [r3, #0]
 8004cae:	3301      	adds	r3, #1
 8004cb0:	b2da      	uxtb	r2, r3
 8004cb2:	4b76      	ldr	r3, [pc, #472]	@ (8004e8c <statemachine+0x564>)
 8004cb4:	701a      	strb	r2, [r3, #0]
				  									 						 				 									state++;
 8004cb6:	4b75      	ldr	r3, [pc, #468]	@ (8004e8c <statemachine+0x564>)
 8004cb8:	781b      	ldrb	r3, [r3, #0]
 8004cba:	3301      	adds	r3, #1
 8004cbc:	b2da      	uxtb	r2, r3
 8004cbe:	4b73      	ldr	r3, [pc, #460]	@ (8004e8c <statemachine+0x564>)
 8004cc0:	701a      	strb	r2, [r3, #0]
				  									 						 				 									state++;
 8004cc2:	4b72      	ldr	r3, [pc, #456]	@ (8004e8c <statemachine+0x564>)
 8004cc4:	781b      	ldrb	r3, [r3, #0]
 8004cc6:	3301      	adds	r3, #1
 8004cc8:	b2da      	uxtb	r2, r3
 8004cca:	4b70      	ldr	r3, [pc, #448]	@ (8004e8c <statemachine+0x564>)
 8004ccc:	701a      	strb	r2, [r3, #0]
				  									 						 				 									state++;
 8004cce:	4b6f      	ldr	r3, [pc, #444]	@ (8004e8c <statemachine+0x564>)
 8004cd0:	781b      	ldrb	r3, [r3, #0]
 8004cd2:	3301      	adds	r3, #1
 8004cd4:	b2da      	uxtb	r2, r3
 8004cd6:	4b6d      	ldr	r3, [pc, #436]	@ (8004e8c <statemachine+0x564>)
 8004cd8:	701a      	strb	r2, [r3, #0]

				  									 						 				 									  			 	BTN_A_LONG=0;
 8004cda:	4b6e      	ldr	r3, [pc, #440]	@ (8004e94 <statemachine+0x56c>)
 8004cdc:	2200      	movs	r2, #0
 8004cde:	601a      	str	r2, [r3, #0]
				  									 						 				 									  			 	BTN_B=0;
 8004ce0:	4b6b      	ldr	r3, [pc, #428]	@ (8004e90 <statemachine+0x568>)
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	601a      	str	r2, [r3, #0]
				  									 						 				 									  	}
				  									 	 if(BTN_B_LONG>=1){
 8004ce6:	4b6c      	ldr	r3, [pc, #432]	@ (8004e98 <statemachine+0x570>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	f341 8405 	ble.w	80064fa <statemachine+0x1bd2>
				  									 					  							  vitmax=0;
 8004cf0:	4b6a      	ldr	r3, [pc, #424]	@ (8004e9c <statemachine+0x574>)
 8004cf2:	f04f 0200 	mov.w	r2, #0
 8004cf6:	601a      	str	r2, [r3, #0]
				  									 					  							BTN_B_LONG=0;
 8004cf8:	4b67      	ldr	r3, [pc, #412]	@ (8004e98 <statemachine+0x570>)
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	601a      	str	r2, [r3, #0]
				  									 					  						}
				  									 	 break;
 8004cfe:	f001 bbfc 	b.w	80064fa <statemachine+0x1bd2>


				  case STATE_BALISE:
					  ssd1306_Fill(Black);
 8004d02:	2000      	movs	r0, #0
 8004d04:	f7ff f95a 	bl	8003fbc <ssd1306_Fill>

					  if(settimeen==0){
 8004d08:	4b65      	ldr	r3, [pc, #404]	@ (8004ea0 <statemachine+0x578>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d145      	bne.n	8004d9c <statemachine+0x474>

						  if(myData.fix==1){
 8004d10:	4b64      	ldr	r3, [pc, #400]	@ (8004ea4 <statemachine+0x57c>)
 8004d12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d14:	2b01      	cmp	r3, #1
 8004d16:	d141      	bne.n	8004d9c <statemachine+0x474>
							settimeen=1;
 8004d18:	4b61      	ldr	r3, [pc, #388]	@ (8004ea0 <statemachine+0x578>)
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	601a      	str	r2, [r3, #0]
							HR=(myData.lastMeasure[0]&0x0f)*10+(myData.lastMeasure[1]&0x0f);
 8004d1e:	4b61      	ldr	r3, [pc, #388]	@ (8004ea4 <statemachine+0x57c>)
 8004d20:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8004d24:	f003 030f 	and.w	r3, r3, #15
 8004d28:	b2db      	uxtb	r3, r3
 8004d2a:	461a      	mov	r2, r3
 8004d2c:	0092      	lsls	r2, r2, #2
 8004d2e:	4413      	add	r3, r2
 8004d30:	005b      	lsls	r3, r3, #1
 8004d32:	b2da      	uxtb	r2, r3
 8004d34:	4b5b      	ldr	r3, [pc, #364]	@ (8004ea4 <statemachine+0x57c>)
 8004d36:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8004d3a:	f003 030f 	and.w	r3, r3, #15
 8004d3e:	b2db      	uxtb	r3, r3
 8004d40:	4413      	add	r3, r2
 8004d42:	b2da      	uxtb	r2, r3
 8004d44:	4b58      	ldr	r3, [pc, #352]	@ (8004ea8 <statemachine+0x580>)
 8004d46:	701a      	strb	r2, [r3, #0]
							MINUTE=(myData.lastMeasure[2]&0x0f)*10+(myData.lastMeasure[3]&0x0f);
 8004d48:	4b56      	ldr	r3, [pc, #344]	@ (8004ea4 <statemachine+0x57c>)
 8004d4a:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8004d4e:	f003 030f 	and.w	r3, r3, #15
 8004d52:	b2db      	uxtb	r3, r3
 8004d54:	461a      	mov	r2, r3
 8004d56:	0092      	lsls	r2, r2, #2
 8004d58:	4413      	add	r3, r2
 8004d5a:	005b      	lsls	r3, r3, #1
 8004d5c:	b2da      	uxtb	r2, r3
 8004d5e:	4b51      	ldr	r3, [pc, #324]	@ (8004ea4 <statemachine+0x57c>)
 8004d60:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8004d64:	f003 030f 	and.w	r3, r3, #15
 8004d68:	b2db      	uxtb	r3, r3
 8004d6a:	4413      	add	r3, r2
 8004d6c:	b2da      	uxtb	r2, r3
 8004d6e:	4b4f      	ldr	r3, [pc, #316]	@ (8004eac <statemachine+0x584>)
 8004d70:	701a      	strb	r2, [r3, #0]
							SEC=(myData.lastMeasure[4]&0x0f)*10+(myData.lastMeasure[5]&0x0f);
 8004d72:	4b4c      	ldr	r3, [pc, #304]	@ (8004ea4 <statemachine+0x57c>)
 8004d74:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004d78:	f003 030f 	and.w	r3, r3, #15
 8004d7c:	b2db      	uxtb	r3, r3
 8004d7e:	461a      	mov	r2, r3
 8004d80:	0092      	lsls	r2, r2, #2
 8004d82:	4413      	add	r3, r2
 8004d84:	005b      	lsls	r3, r3, #1
 8004d86:	b2da      	uxtb	r2, r3
 8004d88:	4b46      	ldr	r3, [pc, #280]	@ (8004ea4 <statemachine+0x57c>)
 8004d8a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8004d8e:	f003 030f 	and.w	r3, r3, #15
 8004d92:	b2db      	uxtb	r3, r3
 8004d94:	4413      	add	r3, r2
 8004d96:	b2da      	uxtb	r2, r3
 8004d98:	4b45      	ldr	r3, [pc, #276]	@ (8004eb0 <statemachine+0x588>)
 8004d9a:	701a      	strb	r2, [r3, #0]





					  switch(balisestate){
 8004d9c:	4b45      	ldr	r3, [pc, #276]	@ (8004eb4 <statemachine+0x58c>)
 8004d9e:	781b      	ldrb	r3, [r3, #0]
 8004da0:	2b02      	cmp	r3, #2
 8004da2:	f000 838d 	beq.w	80054c0 <statemachine+0xb98>
 8004da6:	2b02      	cmp	r3, #2
 8004da8:	f301 83a9 	bgt.w	80064fe <statemachine+0x1bd6>
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d004      	beq.n	8004dba <statemachine+0x492>
 8004db0:	2b01      	cmp	r3, #1
 8004db2:	f000 8093 	beq.w	8004edc <statemachine+0x5b4>
						  				 									 									  	}

					  }


					  break;
 8004db6:	f001 bba2 	b.w	80064fe <statemachine+0x1bd6>
						  ssd1306_SetCursor(32,32);
 8004dba:	2120      	movs	r1, #32
 8004dbc:	2020      	movs	r0, #32
 8004dbe:	f7ff fa3f 	bl	8004240 <ssd1306_SetCursor>
						  ssd1306_WriteString("Tracker",Font_6x8,White);
 8004dc2:	4a3d      	ldr	r2, [pc, #244]	@ (8004eb8 <statemachine+0x590>)
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	ca06      	ldmia	r2, {r1, r2}
 8004dc8:	483c      	ldr	r0, [pc, #240]	@ (8004ebc <statemachine+0x594>)
 8004dca:	f7ff fa13 	bl	80041f4 <ssd1306_WriteString>
						  snprintf((char *)bufferscreen,50, "offset=%d",pageoffset);
 8004dce:	4b3c      	ldr	r3, [pc, #240]	@ (8004ec0 <statemachine+0x598>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4a3c      	ldr	r2, [pc, #240]	@ (8004ec4 <statemachine+0x59c>)
 8004dd4:	2132      	movs	r1, #50	@ 0x32
 8004dd6:	483c      	ldr	r0, [pc, #240]	@ (8004ec8 <statemachine+0x5a0>)
 8004dd8:	f016 fb04 	bl	801b3e4 <sniprintf>
						  ssd1306_SetCursor(32,42);
 8004ddc:	212a      	movs	r1, #42	@ 0x2a
 8004dde:	2020      	movs	r0, #32
 8004de0:	f7ff fa2e 	bl	8004240 <ssd1306_SetCursor>
						  ssd1306_WriteString((char *)bufferscreen,Font_7x10,White);
 8004de4:	4a39      	ldr	r2, [pc, #228]	@ (8004ecc <statemachine+0x5a4>)
 8004de6:	2301      	movs	r3, #1
 8004de8:	ca06      	ldmia	r2, {r1, r2}
 8004dea:	4837      	ldr	r0, [pc, #220]	@ (8004ec8 <statemachine+0x5a0>)
 8004dec:	f7ff fa02 	bl	80041f4 <ssd1306_WriteString>
						  snprintf((char *)bufferscreen,50, "page=%d",pagenumber);
 8004df0:	4b37      	ldr	r3, [pc, #220]	@ (8004ed0 <statemachine+0x5a8>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a37      	ldr	r2, [pc, #220]	@ (8004ed4 <statemachine+0x5ac>)
 8004df6:	2132      	movs	r1, #50	@ 0x32
 8004df8:	4833      	ldr	r0, [pc, #204]	@ (8004ec8 <statemachine+0x5a0>)
 8004dfa:	f016 faf3 	bl	801b3e4 <sniprintf>
						  ssd1306_SetCursor(32,52);
 8004dfe:	2134      	movs	r1, #52	@ 0x34
 8004e00:	2020      	movs	r0, #32
 8004e02:	f7ff fa1d 	bl	8004240 <ssd1306_SetCursor>
						  ssd1306_WriteString((char *)bufferscreen,Font_7x10,White);
 8004e06:	4a31      	ldr	r2, [pc, #196]	@ (8004ecc <statemachine+0x5a4>)
 8004e08:	2301      	movs	r3, #1
 8004e0a:	ca06      	ldmia	r2, {r1, r2}
 8004e0c:	482e      	ldr	r0, [pc, #184]	@ (8004ec8 <statemachine+0x5a0>)
 8004e0e:	f7ff f9f1 	bl	80041f4 <ssd1306_WriteString>
						  if(BTN_B_LONG>=1){
 8004e12:	4b21      	ldr	r3, [pc, #132]	@ (8004e98 <statemachine+0x570>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	dd0e      	ble.n	8004e38 <statemachine+0x510>
							balisestate++;
 8004e1a:	4b26      	ldr	r3, [pc, #152]	@ (8004eb4 <statemachine+0x58c>)
 8004e1c:	781b      	ldrb	r3, [r3, #0]
 8004e1e:	3301      	adds	r3, #1
 8004e20:	b2da      	uxtb	r2, r3
 8004e22:	4b24      	ldr	r3, [pc, #144]	@ (8004eb4 <statemachine+0x58c>)
 8004e24:	701a      	strb	r2, [r3, #0]
							BTN_B_LONG=0;
 8004e26:	4b1c      	ldr	r3, [pc, #112]	@ (8004e98 <statemachine+0x570>)
 8004e28:	2200      	movs	r2, #0
 8004e2a:	601a      	str	r2, [r3, #0]
							BTN_A=0;
 8004e2c:	4b16      	ldr	r3, [pc, #88]	@ (8004e88 <statemachine+0x560>)
 8004e2e:	2200      	movs	r2, #0
 8004e30:	601a      	str	r2, [r3, #0]
							HAL_TIM_Base_Start_IT(&htim17);
 8004e32:	4829      	ldr	r0, [pc, #164]	@ (8004ed8 <statemachine+0x5b0>)
 8004e34:	f00a f8b0 	bl	800ef98 <HAL_TIM_Base_Start_IT>
						  if(BTN_A>=1){
 8004e38:	4b13      	ldr	r3, [pc, #76]	@ (8004e88 <statemachine+0x560>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	dd0e      	ble.n	8004e5e <statemachine+0x536>
						  				  			 	state++;
 8004e40:	4b12      	ldr	r3, [pc, #72]	@ (8004e8c <statemachine+0x564>)
 8004e42:	781b      	ldrb	r3, [r3, #0]
 8004e44:	3301      	adds	r3, #1
 8004e46:	b2da      	uxtb	r2, r3
 8004e48:	4b10      	ldr	r3, [pc, #64]	@ (8004e8c <statemachine+0x564>)
 8004e4a:	701a      	strb	r2, [r3, #0]
						  				  			 	BTN_A=0;
 8004e4c:	4b0e      	ldr	r3, [pc, #56]	@ (8004e88 <statemachine+0x560>)
 8004e4e:	2200      	movs	r2, #0
 8004e50:	601a      	str	r2, [r3, #0]
						  				  			 	BTN_B=0;
 8004e52:	4b0f      	ldr	r3, [pc, #60]	@ (8004e90 <statemachine+0x568>)
 8004e54:	2200      	movs	r2, #0
 8004e56:	601a      	str	r2, [r3, #0]
						  				  			 	settimeen=0;
 8004e58:	4b11      	ldr	r3, [pc, #68]	@ (8004ea0 <statemachine+0x578>)
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	601a      	str	r2, [r3, #0]
						  if(BTN_A_LONG>=1){
 8004e5e:	4b0d      	ldr	r3, [pc, #52]	@ (8004e94 <statemachine+0x56c>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	f340 837e 	ble.w	8005564 <statemachine+0xc3c>
									  state--;
 8004e68:	4b08      	ldr	r3, [pc, #32]	@ (8004e8c <statemachine+0x564>)
 8004e6a:	781b      	ldrb	r3, [r3, #0]
 8004e6c:	3b01      	subs	r3, #1
 8004e6e:	b2da      	uxtb	r2, r3
 8004e70:	4b06      	ldr	r3, [pc, #24]	@ (8004e8c <statemachine+0x564>)
 8004e72:	701a      	strb	r2, [r3, #0]
									BTN_A_LONG=0;
 8004e74:	4b07      	ldr	r3, [pc, #28]	@ (8004e94 <statemachine+0x56c>)
 8004e76:	2200      	movs	r2, #0
 8004e78:	601a      	str	r2, [r3, #0]
									BTN_B=0;
 8004e7a:	4b05      	ldr	r3, [pc, #20]	@ (8004e90 <statemachine+0x568>)
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	601a      	str	r2, [r3, #0]
									settimeen=0;
 8004e80:	4b07      	ldr	r3, [pc, #28]	@ (8004ea0 <statemachine+0x578>)
 8004e82:	2200      	movs	r2, #0
 8004e84:	601a      	str	r2, [r3, #0]
						  break;
 8004e86:	e36d      	b.n	8005564 <statemachine+0xc3c>
 8004e88:	20000880 	.word	0x20000880
 8004e8c:	200005ec 	.word	0x200005ec
 8004e90:	20000884 	.word	0x20000884
 8004e94:	20000bb8 	.word	0x20000bb8
 8004e98:	20000bb4 	.word	0x20000bb4
 8004e9c:	20000b54 	.word	0x20000b54
 8004ea0:	20000ba0 	.word	0x20000ba0
 8004ea4:	20000840 	.word	0x20000840
 8004ea8:	20000b9d 	.word	0x20000b9d
 8004eac:	20000b9e 	.word	0x20000b9e
 8004eb0:	20000b9c 	.word	0x20000b9c
 8004eb4:	200005f1 	.word	0x200005f1
 8004eb8:	20000014 	.word	0x20000014
 8004ebc:	0801ff34 	.word	0x0801ff34
 8004ec0:	20000abc 	.word	0x20000abc
 8004ec4:	0801ff3c 	.word	0x0801ff3c
 8004ec8:	20000ae0 	.word	0x20000ae0
 8004ecc:	2000001c 	.word	0x2000001c
 8004ed0:	20000ac0 	.word	0x20000ac0
 8004ed4:	0801ff48 	.word	0x0801ff48
 8004ed8:	200012a4 	.word	0x200012a4
						  if(myData.speed>=vitmax){
 8004edc:	4baa      	ldr	r3, [pc, #680]	@ (8005188 <statemachine+0x860>)
 8004ede:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 8004ee2:	4baa      	ldr	r3, [pc, #680]	@ (800518c <statemachine+0x864>)
 8004ee4:	edd3 7a00 	vldr	s15, [r3]
 8004ee8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004eec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ef0:	db03      	blt.n	8004efa <statemachine+0x5d2>
						  									 vitmax=myData.speed;
 8004ef2:	4ba5      	ldr	r3, [pc, #660]	@ (8005188 <statemachine+0x860>)
 8004ef4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ef6:	4aa5      	ldr	r2, [pc, #660]	@ (800518c <statemachine+0x864>)
 8004ef8:	6013      	str	r3, [r2, #0]
						  if(pagenumber+1>=MAX_WRITE_PAGE){
 8004efa:	4ba5      	ldr	r3, [pc, #660]	@ (8005190 <statemachine+0x868>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f246 32fd 	movw	r2, #25597	@ 0x63fd
 8004f02:	4293      	cmp	r3, r2
 8004f04:	dd05      	ble.n	8004f12 <statemachine+0x5ea>
							  HAL_TIM_Base_Stop_IT(&htim17);
 8004f06:	48a3      	ldr	r0, [pc, #652]	@ (8005194 <statemachine+0x86c>)
 8004f08:	f00a f894 	bl	800f034 <HAL_TIM_Base_Stop_IT>
							  balisestate=2;
 8004f0c:	4ba2      	ldr	r3, [pc, #648]	@ (8005198 <statemachine+0x870>)
 8004f0e:	2202      	movs	r2, #2
 8004f10:	701a      	strb	r2, [r3, #0]
						  if(enablewrite==1){
 8004f12:	4ba2      	ldr	r3, [pc, #648]	@ (800519c <statemachine+0x874>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	2b01      	cmp	r3, #1
 8004f18:	f040 80bb 	bne.w	8005092 <statemachine+0x76a>
							  oldlat=myData.latitude;
 8004f1c:	4b9a      	ldr	r3, [pc, #616]	@ (8005188 <statemachine+0x860>)
 8004f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f22:	499f      	ldr	r1, [pc, #636]	@ (80051a0 <statemachine+0x878>)
 8004f24:	e9c1 2300 	strd	r2, r3, [r1]
							  oldlong=myData.longitude;
 8004f28:	4b97      	ldr	r3, [pc, #604]	@ (8005188 <statemachine+0x860>)
 8004f2a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8004f2e:	499d      	ldr	r1, [pc, #628]	@ (80051a4 <statemachine+0x87c>)
 8004f30:	e9c1 2300 	strd	r2, r3, [r1]
							  nmea_parse(&myData, DataBuffer);
 8004f34:	499c      	ldr	r1, [pc, #624]	@ (80051a8 <statemachine+0x880>)
 8004f36:	4894      	ldr	r0, [pc, #592]	@ (8005188 <statemachine+0x860>)
 8004f38:	f7fe fad0 	bl	80034dc <nmea_parse>
							  bmp581_read_precise_normal(&bmp581);
 8004f3c:	489b      	ldr	r0, [pc, #620]	@ (80051ac <statemachine+0x884>)
 8004f3e:	f7fc fc8f 	bl	8001860 <bmp581_read_precise_normal>
							  if(distancecalc(oldlat, myData.latitude,oldlong, myData.longitude) > 139.0){//correspond à 500kmh pendant 1sec
 8004f42:	4b97      	ldr	r3, [pc, #604]	@ (80051a0 <statemachine+0x878>)
 8004f44:	ed93 7b00 	vldr	d7, [r3]
 8004f48:	4b8f      	ldr	r3, [pc, #572]	@ (8005188 <statemachine+0x860>)
 8004f4a:	ed93 6b00 	vldr	d6, [r3]
 8004f4e:	4b95      	ldr	r3, [pc, #596]	@ (80051a4 <statemachine+0x87c>)
 8004f50:	ed93 5b00 	vldr	d5, [r3]
 8004f54:	4b8c      	ldr	r3, [pc, #560]	@ (8005188 <statemachine+0x860>)
 8004f56:	ed93 4b04 	vldr	d4, [r3, #16]
 8004f5a:	eeb0 3a44 	vmov.f32	s6, s8
 8004f5e:	eef0 3a64 	vmov.f32	s7, s9
 8004f62:	eeb0 2a45 	vmov.f32	s4, s10
 8004f66:	eef0 2a65 	vmov.f32	s5, s11
 8004f6a:	eeb0 1a46 	vmov.f32	s2, s12
 8004f6e:	eef0 1a66 	vmov.f32	s3, s13
 8004f72:	eeb0 0a47 	vmov.f32	s0, s14
 8004f76:	eef0 0a67 	vmov.f32	s1, s15
 8004f7a:	f7fe fb59 	bl	8003630 <distancecalc>
 8004f7e:	ec51 0b10 	vmov	r0, r1, d0
 8004f82:	a37f      	add	r3, pc, #508	@ (adr r3, 8005180 <statemachine+0x858>)
 8004f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f88:	f7fb fd9e 	bl	8000ac8 <__aeabi_dcmpgt>
 8004f8c:	4603      	mov	r3, r0
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d02c      	beq.n	8004fec <statemachine+0x6c4>
								  myData.latitude=oldlat;
 8004f92:	4b83      	ldr	r3, [pc, #524]	@ (80051a0 <statemachine+0x878>)
 8004f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f98:	497b      	ldr	r1, [pc, #492]	@ (8005188 <statemachine+0x860>)
 8004f9a:	e9c1 2300 	strd	r2, r3, [r1]
								  myData.longitude=oldlong;
 8004f9e:	4b81      	ldr	r3, [pc, #516]	@ (80051a4 <statemachine+0x87c>)
 8004fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fa4:	4978      	ldr	r1, [pc, #480]	@ (8005188 <statemachine+0x860>)
 8004fa6:	e9c1 2304 	strd	r2, r3, [r1, #16]
								  flashbufferlen=csvframe((uint8_t *)flashwrite,temp,vbat,&myData,myData.satelliteCount,myData.hdop,bmpalt);
 8004faa:	4b81      	ldr	r3, [pc, #516]	@ (80051b0 <statemachine+0x888>)
 8004fac:	edd3 6a00 	vldr	s13, [r3]
 8004fb0:	4b80      	ldr	r3, [pc, #512]	@ (80051b4 <statemachine+0x88c>)
 8004fb2:	ed93 6a00 	vldr	s12, [r3]
 8004fb6:	4b74      	ldr	r3, [pc, #464]	@ (8005188 <statemachine+0x860>)
 8004fb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fba:	4a73      	ldr	r2, [pc, #460]	@ (8005188 <statemachine+0x860>)
 8004fbc:	edd2 5a08 	vldr	s11, [r2, #32]
 8004fc0:	4a7d      	ldr	r2, [pc, #500]	@ (80051b8 <statemachine+0x890>)
 8004fc2:	ed92 7b00 	vldr	d7, [r2]
 8004fc6:	eeb0 2a47 	vmov.f32	s4, s14
 8004fca:	eef0 2a67 	vmov.f32	s5, s15
 8004fce:	eeb0 1a65 	vmov.f32	s2, s11
 8004fd2:	461a      	mov	r2, r3
 8004fd4:	496c      	ldr	r1, [pc, #432]	@ (8005188 <statemachine+0x860>)
 8004fd6:	eef0 0a46 	vmov.f32	s1, s12
 8004fda:	eeb0 0a66 	vmov.f32	s0, s13
 8004fde:	4877      	ldr	r0, [pc, #476]	@ (80051bc <statemachine+0x894>)
 8004fe0:	f7fe fd82 	bl	8003ae8 <csvframe>
 8004fe4:	4603      	mov	r3, r0
 8004fe6:	4a76      	ldr	r2, [pc, #472]	@ (80051c0 <statemachine+0x898>)
 8004fe8:	6013      	str	r3, [r2, #0]
 8004fea:	e049      	b.n	8005080 <statemachine+0x758>
								  distanceparcouru=distanceparcouru + distancecalc(oldlat, myData.latitude,oldlong, myData.longitude);
 8004fec:	4b6c      	ldr	r3, [pc, #432]	@ (80051a0 <statemachine+0x878>)
 8004fee:	ed93 7b00 	vldr	d7, [r3]
 8004ff2:	4b65      	ldr	r3, [pc, #404]	@ (8005188 <statemachine+0x860>)
 8004ff4:	ed93 6b00 	vldr	d6, [r3]
 8004ff8:	4b6a      	ldr	r3, [pc, #424]	@ (80051a4 <statemachine+0x87c>)
 8004ffa:	ed93 5b00 	vldr	d5, [r3]
 8004ffe:	4b62      	ldr	r3, [pc, #392]	@ (8005188 <statemachine+0x860>)
 8005000:	ed93 4b04 	vldr	d4, [r3, #16]
 8005004:	eeb0 3a44 	vmov.f32	s6, s8
 8005008:	eef0 3a64 	vmov.f32	s7, s9
 800500c:	eeb0 2a45 	vmov.f32	s4, s10
 8005010:	eef0 2a65 	vmov.f32	s5, s11
 8005014:	eeb0 1a46 	vmov.f32	s2, s12
 8005018:	eef0 1a66 	vmov.f32	s3, s13
 800501c:	eeb0 0a47 	vmov.f32	s0, s14
 8005020:	eef0 0a67 	vmov.f32	s1, s15
 8005024:	f7fe fb04 	bl	8003630 <distancecalc>
 8005028:	ec51 0b10 	vmov	r0, r1, d0
 800502c:	4b65      	ldr	r3, [pc, #404]	@ (80051c4 <statemachine+0x89c>)
 800502e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005032:	f7fb f903 	bl	800023c <__adddf3>
 8005036:	4602      	mov	r2, r0
 8005038:	460b      	mov	r3, r1
 800503a:	4962      	ldr	r1, [pc, #392]	@ (80051c4 <statemachine+0x89c>)
 800503c:	e9c1 2300 	strd	r2, r3, [r1]
								  flashbufferlen=csvframe((uint8_t *)flashwrite,temp,vbat,&myData,myData.satelliteCount,myData.hdop,bmpalt);
 8005040:	4b5b      	ldr	r3, [pc, #364]	@ (80051b0 <statemachine+0x888>)
 8005042:	edd3 6a00 	vldr	s13, [r3]
 8005046:	4b5b      	ldr	r3, [pc, #364]	@ (80051b4 <statemachine+0x88c>)
 8005048:	ed93 6a00 	vldr	s12, [r3]
 800504c:	4b4e      	ldr	r3, [pc, #312]	@ (8005188 <statemachine+0x860>)
 800504e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005050:	4a4d      	ldr	r2, [pc, #308]	@ (8005188 <statemachine+0x860>)
 8005052:	edd2 5a08 	vldr	s11, [r2, #32]
 8005056:	4a58      	ldr	r2, [pc, #352]	@ (80051b8 <statemachine+0x890>)
 8005058:	ed92 7b00 	vldr	d7, [r2]
 800505c:	eeb0 2a47 	vmov.f32	s4, s14
 8005060:	eef0 2a67 	vmov.f32	s5, s15
 8005064:	eeb0 1a65 	vmov.f32	s2, s11
 8005068:	461a      	mov	r2, r3
 800506a:	4947      	ldr	r1, [pc, #284]	@ (8005188 <statemachine+0x860>)
 800506c:	eef0 0a46 	vmov.f32	s1, s12
 8005070:	eeb0 0a66 	vmov.f32	s0, s13
 8005074:	4851      	ldr	r0, [pc, #324]	@ (80051bc <statemachine+0x894>)
 8005076:	f7fe fd37 	bl	8003ae8 <csvframe>
 800507a:	4603      	mov	r3, r0
 800507c:	4a50      	ldr	r2, [pc, #320]	@ (80051c0 <statemachine+0x898>)
 800507e:	6013      	str	r3, [r2, #0]
							  writebuffertoflash((uint8_t*)flashwrite,flashbufferlen);
 8005080:	4b4f      	ldr	r3, [pc, #316]	@ (80051c0 <statemachine+0x898>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4619      	mov	r1, r3
 8005086:	484d      	ldr	r0, [pc, #308]	@ (80051bc <statemachine+0x894>)
 8005088:	f7fe fe68 	bl	8003d5c <writebuffertoflash>
							  enablewrite=0;
 800508c:	4b43      	ldr	r3, [pc, #268]	@ (800519c <statemachine+0x874>)
 800508e:	2200      	movs	r2, #0
 8005090:	601a      	str	r2, [r3, #0]
						  ssd1306_SetCursor(32,32);
 8005092:	2120      	movs	r1, #32
 8005094:	2020      	movs	r0, #32
 8005096:	f7ff f8d3 	bl	8004240 <ssd1306_SetCursor>
						  switch(ecranstate){
 800509a:	4b4b      	ldr	r3, [pc, #300]	@ (80051c8 <statemachine+0x8a0>)
 800509c:	781b      	ldrb	r3, [r3, #0]
 800509e:	2b05      	cmp	r3, #5
 80050a0:	f200 818f 	bhi.w	80053c2 <statemachine+0xa9a>
 80050a4:	a201      	add	r2, pc, #4	@ (adr r2, 80050ac <statemachine+0x784>)
 80050a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050aa:	bf00      	nop
 80050ac:	080050c5 	.word	0x080050c5
 80050b0:	08005117 	.word	0x08005117
 80050b4:	080051f5 	.word	0x080051f5
 80050b8:	0800525f 	.word	0x0800525f
 80050bc:	080052b7 	.word	0x080052b7
 80050c0:	08005315 	.word	0x08005315
							  snprintf((char *)bufferscreen,50,"%d",pagenumber);
 80050c4:	4b32      	ldr	r3, [pc, #200]	@ (8005190 <statemachine+0x868>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4a40      	ldr	r2, [pc, #256]	@ (80051cc <statemachine+0x8a4>)
 80050ca:	2132      	movs	r1, #50	@ 0x32
 80050cc:	4840      	ldr	r0, [pc, #256]	@ (80051d0 <statemachine+0x8a8>)
 80050ce:	f016 f989 	bl	801b3e4 <sniprintf>
							  ssd1306_WriteString((char *)bufferscreen,Font_7x10,White);
 80050d2:	4a40      	ldr	r2, [pc, #256]	@ (80051d4 <statemachine+0x8ac>)
 80050d4:	2301      	movs	r3, #1
 80050d6:	ca06      	ldmia	r2, {r1, r2}
 80050d8:	483d      	ldr	r0, [pc, #244]	@ (80051d0 <statemachine+0x8a8>)
 80050da:	f7ff f88b 	bl	80041f4 <ssd1306_WriteString>
							  ssd1306_SetCursor(32,42);
 80050de:	212a      	movs	r1, #42	@ 0x2a
 80050e0:	2020      	movs	r0, #32
 80050e2:	f7ff f8ad 	bl	8004240 <ssd1306_SetCursor>
							  ssd1306_WriteString("PageNb",Font_6x8,White);
 80050e6:	4a3c      	ldr	r2, [pc, #240]	@ (80051d8 <statemachine+0x8b0>)
 80050e8:	2301      	movs	r3, #1
 80050ea:	ca06      	ldmia	r2, {r1, r2}
 80050ec:	483b      	ldr	r0, [pc, #236]	@ (80051dc <statemachine+0x8b4>)
 80050ee:	f7ff f881 	bl	80041f4 <ssd1306_WriteString>
							  if(BTN_B>=1){
 80050f2:	4b3b      	ldr	r3, [pc, #236]	@ (80051e0 <statemachine+0x8b8>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	f340 8158 	ble.w	80053ac <statemachine+0xa84>
														  ecranstate++;
 80050fc:	4b32      	ldr	r3, [pc, #200]	@ (80051c8 <statemachine+0x8a0>)
 80050fe:	781b      	ldrb	r3, [r3, #0]
 8005100:	3301      	adds	r3, #1
 8005102:	b2da      	uxtb	r2, r3
 8005104:	4b30      	ldr	r3, [pc, #192]	@ (80051c8 <statemachine+0x8a0>)
 8005106:	701a      	strb	r2, [r3, #0]
													  	BTN_B=0;
 8005108:	4b35      	ldr	r3, [pc, #212]	@ (80051e0 <statemachine+0x8b8>)
 800510a:	2200      	movs	r2, #0
 800510c:	601a      	str	r2, [r3, #0]
													  	BTN_A=0;
 800510e:	4b35      	ldr	r3, [pc, #212]	@ (80051e4 <statemachine+0x8bc>)
 8005110:	2200      	movs	r2, #0
 8005112:	601a      	str	r2, [r3, #0]
							  break;
 8005114:	e14a      	b.n	80053ac <statemachine+0xa84>
							  snprintf((char  *)bufferscreen,50,"%0.3lf",distanceparcouru/1000);
 8005116:	4b2b      	ldr	r3, [pc, #172]	@ (80051c4 <statemachine+0x89c>)
 8005118:	e9d3 0100 	ldrd	r0, r1, [r3]
 800511c:	f04f 0200 	mov.w	r2, #0
 8005120:	4b31      	ldr	r3, [pc, #196]	@ (80051e8 <statemachine+0x8c0>)
 8005122:	f7fb fb6b 	bl	80007fc <__aeabi_ddiv>
 8005126:	4602      	mov	r2, r0
 8005128:	460b      	mov	r3, r1
 800512a:	e9cd 2300 	strd	r2, r3, [sp]
 800512e:	4a2f      	ldr	r2, [pc, #188]	@ (80051ec <statemachine+0x8c4>)
 8005130:	2132      	movs	r1, #50	@ 0x32
 8005132:	4827      	ldr	r0, [pc, #156]	@ (80051d0 <statemachine+0x8a8>)
 8005134:	f016 f956 	bl	801b3e4 <sniprintf>
							  ssd1306_WriteString((char *)bufferscreen,Font_7x10,White);
 8005138:	4a26      	ldr	r2, [pc, #152]	@ (80051d4 <statemachine+0x8ac>)
 800513a:	2301      	movs	r3, #1
 800513c:	ca06      	ldmia	r2, {r1, r2}
 800513e:	4824      	ldr	r0, [pc, #144]	@ (80051d0 <statemachine+0x8a8>)
 8005140:	f7ff f858 	bl	80041f4 <ssd1306_WriteString>
							  ssd1306_SetCursor(32,42);
 8005144:	212a      	movs	r1, #42	@ 0x2a
 8005146:	2020      	movs	r0, #32
 8005148:	f7ff f87a 	bl	8004240 <ssd1306_SetCursor>
							  ssd1306_WriteString("Dist(km)",Font_6x8,White);
 800514c:	4a22      	ldr	r2, [pc, #136]	@ (80051d8 <statemachine+0x8b0>)
 800514e:	2301      	movs	r3, #1
 8005150:	ca06      	ldmia	r2, {r1, r2}
 8005152:	4827      	ldr	r0, [pc, #156]	@ (80051f0 <statemachine+0x8c8>)
 8005154:	f7ff f84e 	bl	80041f4 <ssd1306_WriteString>
							  if(BTN_B>=1){
 8005158:	4b21      	ldr	r3, [pc, #132]	@ (80051e0 <statemachine+0x8b8>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	2b00      	cmp	r3, #0
 800515e:	f340 8127 	ble.w	80053b0 <statemachine+0xa88>
							  														  ecranstate++;
 8005162:	4b19      	ldr	r3, [pc, #100]	@ (80051c8 <statemachine+0x8a0>)
 8005164:	781b      	ldrb	r3, [r3, #0]
 8005166:	3301      	adds	r3, #1
 8005168:	b2da      	uxtb	r2, r3
 800516a:	4b17      	ldr	r3, [pc, #92]	@ (80051c8 <statemachine+0x8a0>)
 800516c:	701a      	strb	r2, [r3, #0]
							  													  	BTN_B=0;
 800516e:	4b1c      	ldr	r3, [pc, #112]	@ (80051e0 <statemachine+0x8b8>)
 8005170:	2200      	movs	r2, #0
 8005172:	601a      	str	r2, [r3, #0]
							  													  	BTN_A=0;
 8005174:	4b1b      	ldr	r3, [pc, #108]	@ (80051e4 <statemachine+0x8bc>)
 8005176:	2200      	movs	r2, #0
 8005178:	601a      	str	r2, [r3, #0]
							  break;
 800517a:	e119      	b.n	80053b0 <statemachine+0xa88>
 800517c:	f3af 8000 	nop.w
 8005180:	00000000 	.word	0x00000000
 8005184:	40616000 	.word	0x40616000
 8005188:	20000840 	.word	0x20000840
 800518c:	20000b54 	.word	0x20000b54
 8005190:	20000ac0 	.word	0x20000ac0
 8005194:	200012a4 	.word	0x200012a4
 8005198:	200005f1 	.word	0x200005f1
 800519c:	20000b98 	.word	0x20000b98
 80051a0:	20000b88 	.word	0x20000b88
 80051a4:	20000b90 	.word	0x20000b90
 80051a8:	20000638 	.word	0x20000638
 80051ac:	20000d04 	.word	0x20000d04
 80051b0:	200008b0 	.word	0x200008b0
 80051b4:	200008b8 	.word	0x200008b8
 80051b8:	20000460 	.word	0x20000460
 80051bc:	200008bc 	.word	0x200008bc
 80051c0:	20000b6c 	.word	0x20000b6c
 80051c4:	20000b80 	.word	0x20000b80
 80051c8:	20000d00 	.word	0x20000d00
 80051cc:	0801ff50 	.word	0x0801ff50
 80051d0:	20000ae0 	.word	0x20000ae0
 80051d4:	2000001c 	.word	0x2000001c
 80051d8:	20000014 	.word	0x20000014
 80051dc:	0801ff54 	.word	0x0801ff54
 80051e0:	20000884 	.word	0x20000884
 80051e4:	20000880 	.word	0x20000880
 80051e8:	408f4000 	.word	0x408f4000
 80051ec:	0801ff5c 	.word	0x0801ff5c
 80051f0:	0801ff64 	.word	0x0801ff64
							  snprintf((char  *)bufferscreen,50,"%0.1f",myData.speed*3.6);
 80051f4:	4b9c      	ldr	r3, [pc, #624]	@ (8005468 <statemachine+0xb40>)
 80051f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051f8:	4618      	mov	r0, r3
 80051fa:	f7fb f97d 	bl	80004f8 <__aeabi_f2d>
 80051fe:	a398      	add	r3, pc, #608	@ (adr r3, 8005460 <statemachine+0xb38>)
 8005200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005204:	f7fb f9d0 	bl	80005a8 <__aeabi_dmul>
 8005208:	4602      	mov	r2, r0
 800520a:	460b      	mov	r3, r1
 800520c:	e9cd 2300 	strd	r2, r3, [sp]
 8005210:	4a96      	ldr	r2, [pc, #600]	@ (800546c <statemachine+0xb44>)
 8005212:	2132      	movs	r1, #50	@ 0x32
 8005214:	4896      	ldr	r0, [pc, #600]	@ (8005470 <statemachine+0xb48>)
 8005216:	f016 f8e5 	bl	801b3e4 <sniprintf>
							  ssd1306_WriteString((char *)bufferscreen,Font_7x10,White);
 800521a:	4a96      	ldr	r2, [pc, #600]	@ (8005474 <statemachine+0xb4c>)
 800521c:	2301      	movs	r3, #1
 800521e:	ca06      	ldmia	r2, {r1, r2}
 8005220:	4893      	ldr	r0, [pc, #588]	@ (8005470 <statemachine+0xb48>)
 8005222:	f7fe ffe7 	bl	80041f4 <ssd1306_WriteString>
							  ssd1306_SetCursor(32,42);
 8005226:	212a      	movs	r1, #42	@ 0x2a
 8005228:	2020      	movs	r0, #32
 800522a:	f7ff f809 	bl	8004240 <ssd1306_SetCursor>
							  ssd1306_WriteString("Vit(kmh)",Font_6x8,White);
 800522e:	4a92      	ldr	r2, [pc, #584]	@ (8005478 <statemachine+0xb50>)
 8005230:	2301      	movs	r3, #1
 8005232:	ca06      	ldmia	r2, {r1, r2}
 8005234:	4891      	ldr	r0, [pc, #580]	@ (800547c <statemachine+0xb54>)
 8005236:	f7fe ffdd 	bl	80041f4 <ssd1306_WriteString>
							  if(BTN_B>=1){
 800523a:	4b91      	ldr	r3, [pc, #580]	@ (8005480 <statemachine+0xb58>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	2b00      	cmp	r3, #0
 8005240:	f340 80b8 	ble.w	80053b4 <statemachine+0xa8c>
							  														  ecranstate++;
 8005244:	4b8f      	ldr	r3, [pc, #572]	@ (8005484 <statemachine+0xb5c>)
 8005246:	781b      	ldrb	r3, [r3, #0]
 8005248:	3301      	adds	r3, #1
 800524a:	b2da      	uxtb	r2, r3
 800524c:	4b8d      	ldr	r3, [pc, #564]	@ (8005484 <statemachine+0xb5c>)
 800524e:	701a      	strb	r2, [r3, #0]
							  													  	BTN_B=0;
 8005250:	4b8b      	ldr	r3, [pc, #556]	@ (8005480 <statemachine+0xb58>)
 8005252:	2200      	movs	r2, #0
 8005254:	601a      	str	r2, [r3, #0]
							  													  	BTN_A=0;
 8005256:	4b8c      	ldr	r3, [pc, #560]	@ (8005488 <statemachine+0xb60>)
 8005258:	2200      	movs	r2, #0
 800525a:	601a      	str	r2, [r3, #0]
							  break;
 800525c:	e0aa      	b.n	80053b4 <statemachine+0xa8c>
							  snprintf((char  *)bufferscreen,50,"%0.1lf",bmpalt);
 800525e:	4b8b      	ldr	r3, [pc, #556]	@ (800548c <statemachine+0xb64>)
 8005260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005264:	e9cd 2300 	strd	r2, r3, [sp]
 8005268:	4a89      	ldr	r2, [pc, #548]	@ (8005490 <statemachine+0xb68>)
 800526a:	2132      	movs	r1, #50	@ 0x32
 800526c:	4880      	ldr	r0, [pc, #512]	@ (8005470 <statemachine+0xb48>)
 800526e:	f016 f8b9 	bl	801b3e4 <sniprintf>
							  							  ssd1306_WriteString((char *)bufferscreen,Font_7x10,White);
 8005272:	4a80      	ldr	r2, [pc, #512]	@ (8005474 <statemachine+0xb4c>)
 8005274:	2301      	movs	r3, #1
 8005276:	ca06      	ldmia	r2, {r1, r2}
 8005278:	487d      	ldr	r0, [pc, #500]	@ (8005470 <statemachine+0xb48>)
 800527a:	f7fe ffbb 	bl	80041f4 <ssd1306_WriteString>
							  							ssd1306_SetCursor(32,42);
 800527e:	212a      	movs	r1, #42	@ 0x2a
 8005280:	2020      	movs	r0, #32
 8005282:	f7fe ffdd 	bl	8004240 <ssd1306_SetCursor>
							  							ssd1306_WriteString("alt(m)",Font_6x8,White);
 8005286:	4a7c      	ldr	r2, [pc, #496]	@ (8005478 <statemachine+0xb50>)
 8005288:	2301      	movs	r3, #1
 800528a:	ca06      	ldmia	r2, {r1, r2}
 800528c:	4881      	ldr	r0, [pc, #516]	@ (8005494 <statemachine+0xb6c>)
 800528e:	f7fe ffb1 	bl	80041f4 <ssd1306_WriteString>
							  if(BTN_B>=1){
 8005292:	4b7b      	ldr	r3, [pc, #492]	@ (8005480 <statemachine+0xb58>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	2b00      	cmp	r3, #0
 8005298:	f340 808e 	ble.w	80053b8 <statemachine+0xa90>
							  														  ecranstate++;
 800529c:	4b79      	ldr	r3, [pc, #484]	@ (8005484 <statemachine+0xb5c>)
 800529e:	781b      	ldrb	r3, [r3, #0]
 80052a0:	3301      	adds	r3, #1
 80052a2:	b2da      	uxtb	r2, r3
 80052a4:	4b77      	ldr	r3, [pc, #476]	@ (8005484 <statemachine+0xb5c>)
 80052a6:	701a      	strb	r2, [r3, #0]
							  													  	BTN_B=0;
 80052a8:	4b75      	ldr	r3, [pc, #468]	@ (8005480 <statemachine+0xb58>)
 80052aa:	2200      	movs	r2, #0
 80052ac:	601a      	str	r2, [r3, #0]
							  													  	BTN_A=0;
 80052ae:	4b76      	ldr	r3, [pc, #472]	@ (8005488 <statemachine+0xb60>)
 80052b0:	2200      	movs	r2, #0
 80052b2:	601a      	str	r2, [r3, #0]
							  break;
 80052b4:	e080      	b.n	80053b8 <statemachine+0xa90>
							  snprintf((char  *)bufferscreen,50,"%0.1f",vbat);
 80052b6:	4b78      	ldr	r3, [pc, #480]	@ (8005498 <statemachine+0xb70>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4618      	mov	r0, r3
 80052bc:	f7fb f91c 	bl	80004f8 <__aeabi_f2d>
 80052c0:	4602      	mov	r2, r0
 80052c2:	460b      	mov	r3, r1
 80052c4:	e9cd 2300 	strd	r2, r3, [sp]
 80052c8:	4a68      	ldr	r2, [pc, #416]	@ (800546c <statemachine+0xb44>)
 80052ca:	2132      	movs	r1, #50	@ 0x32
 80052cc:	4868      	ldr	r0, [pc, #416]	@ (8005470 <statemachine+0xb48>)
 80052ce:	f016 f889 	bl	801b3e4 <sniprintf>
							  ssd1306_WriteString((char *)bufferscreen,Font_7x10,White);
 80052d2:	4a68      	ldr	r2, [pc, #416]	@ (8005474 <statemachine+0xb4c>)
 80052d4:	2301      	movs	r3, #1
 80052d6:	ca06      	ldmia	r2, {r1, r2}
 80052d8:	4865      	ldr	r0, [pc, #404]	@ (8005470 <statemachine+0xb48>)
 80052da:	f7fe ff8b 	bl	80041f4 <ssd1306_WriteString>
							  ssd1306_SetCursor(32,42);
 80052de:	212a      	movs	r1, #42	@ 0x2a
 80052e0:	2020      	movs	r0, #32
 80052e2:	f7fe ffad 	bl	8004240 <ssd1306_SetCursor>
							  ssd1306_WriteString("Vbat(V)",Font_6x8,White);
 80052e6:	4a64      	ldr	r2, [pc, #400]	@ (8005478 <statemachine+0xb50>)
 80052e8:	2301      	movs	r3, #1
 80052ea:	ca06      	ldmia	r2, {r1, r2}
 80052ec:	486b      	ldr	r0, [pc, #428]	@ (800549c <statemachine+0xb74>)
 80052ee:	f7fe ff81 	bl	80041f4 <ssd1306_WriteString>
							  if(BTN_B>=1){
 80052f2:	4b63      	ldr	r3, [pc, #396]	@ (8005480 <statemachine+0xb58>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	dd60      	ble.n	80053bc <statemachine+0xa94>
							  														  ecranstate++;
 80052fa:	4b62      	ldr	r3, [pc, #392]	@ (8005484 <statemachine+0xb5c>)
 80052fc:	781b      	ldrb	r3, [r3, #0]
 80052fe:	3301      	adds	r3, #1
 8005300:	b2da      	uxtb	r2, r3
 8005302:	4b60      	ldr	r3, [pc, #384]	@ (8005484 <statemachine+0xb5c>)
 8005304:	701a      	strb	r2, [r3, #0]
							  													  	BTN_B=0;
 8005306:	4b5e      	ldr	r3, [pc, #376]	@ (8005480 <statemachine+0xb58>)
 8005308:	2200      	movs	r2, #0
 800530a:	601a      	str	r2, [r3, #0]
							  													  	BTN_A=0;
 800530c:	4b5e      	ldr	r3, [pc, #376]	@ (8005488 <statemachine+0xb60>)
 800530e:	2200      	movs	r2, #0
 8005310:	601a      	str	r2, [r3, #0]
							  break;
 8005312:	e053      	b.n	80053bc <statemachine+0xa94>
							  snprintf((char  *)bufferscreen,50,"%0.1f",vitmax*3.6);
 8005314:	4b62      	ldr	r3, [pc, #392]	@ (80054a0 <statemachine+0xb78>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4618      	mov	r0, r3
 800531a:	f7fb f8ed 	bl	80004f8 <__aeabi_f2d>
 800531e:	a350      	add	r3, pc, #320	@ (adr r3, 8005460 <statemachine+0xb38>)
 8005320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005324:	f7fb f940 	bl	80005a8 <__aeabi_dmul>
 8005328:	4602      	mov	r2, r0
 800532a:	460b      	mov	r3, r1
 800532c:	e9cd 2300 	strd	r2, r3, [sp]
 8005330:	4a4e      	ldr	r2, [pc, #312]	@ (800546c <statemachine+0xb44>)
 8005332:	2132      	movs	r1, #50	@ 0x32
 8005334:	484e      	ldr	r0, [pc, #312]	@ (8005470 <statemachine+0xb48>)
 8005336:	f016 f855 	bl	801b3e4 <sniprintf>
							  							  ssd1306_WriteString((char *)bufferscreen,Font_7x10,White);
 800533a:	4a4e      	ldr	r2, [pc, #312]	@ (8005474 <statemachine+0xb4c>)
 800533c:	2301      	movs	r3, #1
 800533e:	ca06      	ldmia	r2, {r1, r2}
 8005340:	484b      	ldr	r0, [pc, #300]	@ (8005470 <statemachine+0xb48>)
 8005342:	f7fe ff57 	bl	80041f4 <ssd1306_WriteString>
							  							ssd1306_SetCursor(32,42);
 8005346:	212a      	movs	r1, #42	@ 0x2a
 8005348:	2020      	movs	r0, #32
 800534a:	f7fe ff79 	bl	8004240 <ssd1306_SetCursor>
							  							ssd1306_WriteString("MaxV",Font_6x8,White);
 800534e:	4a4a      	ldr	r2, [pc, #296]	@ (8005478 <statemachine+0xb50>)
 8005350:	2301      	movs	r3, #1
 8005352:	ca06      	ldmia	r2, {r1, r2}
 8005354:	4853      	ldr	r0, [pc, #332]	@ (80054a4 <statemachine+0xb7c>)
 8005356:	f7fe ff4d 	bl	80041f4 <ssd1306_WriteString>
							  if(BTN_B>=1){
 800535a:	4b49      	ldr	r3, [pc, #292]	@ (8005480 <statemachine+0xb58>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	2b00      	cmp	r3, #0
 8005360:	dd2e      	ble.n	80053c0 <statemachine+0xa98>
							  														ecranstate--;
 8005362:	4b48      	ldr	r3, [pc, #288]	@ (8005484 <statemachine+0xb5c>)
 8005364:	781b      	ldrb	r3, [r3, #0]
 8005366:	3b01      	subs	r3, #1
 8005368:	b2da      	uxtb	r2, r3
 800536a:	4b46      	ldr	r3, [pc, #280]	@ (8005484 <statemachine+0xb5c>)
 800536c:	701a      	strb	r2, [r3, #0]
							  														ecranstate--;
 800536e:	4b45      	ldr	r3, [pc, #276]	@ (8005484 <statemachine+0xb5c>)
 8005370:	781b      	ldrb	r3, [r3, #0]
 8005372:	3b01      	subs	r3, #1
 8005374:	b2da      	uxtb	r2, r3
 8005376:	4b43      	ldr	r3, [pc, #268]	@ (8005484 <statemachine+0xb5c>)
 8005378:	701a      	strb	r2, [r3, #0]
							  														ecranstate--;
 800537a:	4b42      	ldr	r3, [pc, #264]	@ (8005484 <statemachine+0xb5c>)
 800537c:	781b      	ldrb	r3, [r3, #0]
 800537e:	3b01      	subs	r3, #1
 8005380:	b2da      	uxtb	r2, r3
 8005382:	4b40      	ldr	r3, [pc, #256]	@ (8005484 <statemachine+0xb5c>)
 8005384:	701a      	strb	r2, [r3, #0]
							  														ecranstate--;
 8005386:	4b3f      	ldr	r3, [pc, #252]	@ (8005484 <statemachine+0xb5c>)
 8005388:	781b      	ldrb	r3, [r3, #0]
 800538a:	3b01      	subs	r3, #1
 800538c:	b2da      	uxtb	r2, r3
 800538e:	4b3d      	ldr	r3, [pc, #244]	@ (8005484 <statemachine+0xb5c>)
 8005390:	701a      	strb	r2, [r3, #0]
							  														ecranstate--;
 8005392:	4b3c      	ldr	r3, [pc, #240]	@ (8005484 <statemachine+0xb5c>)
 8005394:	781b      	ldrb	r3, [r3, #0]
 8005396:	3b01      	subs	r3, #1
 8005398:	b2da      	uxtb	r2, r3
 800539a:	4b3a      	ldr	r3, [pc, #232]	@ (8005484 <statemachine+0xb5c>)
 800539c:	701a      	strb	r2, [r3, #0]
							  													  	BTN_B=0;
 800539e:	4b38      	ldr	r3, [pc, #224]	@ (8005480 <statemachine+0xb58>)
 80053a0:	2200      	movs	r2, #0
 80053a2:	601a      	str	r2, [r3, #0]
							  													  	BTN_A=0;
 80053a4:	4b38      	ldr	r3, [pc, #224]	@ (8005488 <statemachine+0xb60>)
 80053a6:	2200      	movs	r2, #0
 80053a8:	601a      	str	r2, [r3, #0]
							  break;
 80053aa:	e009      	b.n	80053c0 <statemachine+0xa98>
							  break;
 80053ac:	bf00      	nop
 80053ae:	e008      	b.n	80053c2 <statemachine+0xa9a>
							  break;
 80053b0:	bf00      	nop
 80053b2:	e006      	b.n	80053c2 <statemachine+0xa9a>
							  break;
 80053b4:	bf00      	nop
 80053b6:	e004      	b.n	80053c2 <statemachine+0xa9a>
							  break;
 80053b8:	bf00      	nop
 80053ba:	e002      	b.n	80053c2 <statemachine+0xa9a>
							  break;
 80053bc:	bf00      	nop
 80053be:	e000      	b.n	80053c2 <statemachine+0xa9a>
							  break;
 80053c0:	bf00      	nop
						 	batterygauge(vbat,79, 42,1);
 80053c2:	4b35      	ldr	r3, [pc, #212]	@ (8005498 <statemachine+0xb70>)
 80053c4:	edd3 7a00 	vldr	s15, [r3]
 80053c8:	2201      	movs	r2, #1
 80053ca:	212a      	movs	r1, #42	@ 0x2a
 80053cc:	204f      	movs	r0, #79	@ 0x4f
 80053ce:	eeb0 0a67 	vmov.f32	s0, s15
 80053d2:	f7ff f8cd 	bl	8004570 <batterygauge>
						 	ssd1306_SetCursor(32,52);
 80053d6:	2134      	movs	r1, #52	@ 0x34
 80053d8:	2020      	movs	r0, #32
 80053da:	f7fe ff31 	bl	8004240 <ssd1306_SetCursor>
						 	snprintf((char  *)bufferscreen,50, "%0.2fV",vbat);
 80053de:	4b2e      	ldr	r3, [pc, #184]	@ (8005498 <statemachine+0xb70>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4618      	mov	r0, r3
 80053e4:	f7fb f888 	bl	80004f8 <__aeabi_f2d>
 80053e8:	4602      	mov	r2, r0
 80053ea:	460b      	mov	r3, r1
 80053ec:	e9cd 2300 	strd	r2, r3, [sp]
 80053f0:	4a2d      	ldr	r2, [pc, #180]	@ (80054a8 <statemachine+0xb80>)
 80053f2:	2132      	movs	r1, #50	@ 0x32
 80053f4:	481e      	ldr	r0, [pc, #120]	@ (8005470 <statemachine+0xb48>)
 80053f6:	f015 fff5 	bl	801b3e4 <sniprintf>
						 	ssd1306_WriteString((char *)bufferscreen,Font_6x8,White);
 80053fa:	4a1f      	ldr	r2, [pc, #124]	@ (8005478 <statemachine+0xb50>)
 80053fc:	2301      	movs	r3, #1
 80053fe:	ca06      	ldmia	r2, {r1, r2}
 8005400:	481b      	ldr	r0, [pc, #108]	@ (8005470 <statemachine+0xb48>)
 8005402:	f7fe fef7 	bl	80041f4 <ssd1306_WriteString>
						 	ssd1306_SetCursor(65,52);
 8005406:	2134      	movs	r1, #52	@ 0x34
 8005408:	2041      	movs	r0, #65	@ 0x41
 800540a:	f7fe ff19 	bl	8004240 <ssd1306_SetCursor>
						 	snprintf((char  *)bufferscreen,50, "sat=%d",myData.satelliteCount);
 800540e:	4b16      	ldr	r3, [pc, #88]	@ (8005468 <statemachine+0xb40>)
 8005410:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005412:	4a26      	ldr	r2, [pc, #152]	@ (80054ac <statemachine+0xb84>)
 8005414:	2132      	movs	r1, #50	@ 0x32
 8005416:	4816      	ldr	r0, [pc, #88]	@ (8005470 <statemachine+0xb48>)
 8005418:	f015 ffe4 	bl	801b3e4 <sniprintf>
						 	ssd1306_WriteString((char *)bufferscreen,Font_6x8,White);
 800541c:	4a16      	ldr	r2, [pc, #88]	@ (8005478 <statemachine+0xb50>)
 800541e:	2301      	movs	r3, #1
 8005420:	ca06      	ldmia	r2, {r1, r2}
 8005422:	4813      	ldr	r0, [pc, #76]	@ (8005470 <statemachine+0xb48>)
 8005424:	f7fe fee6 	bl	80041f4 <ssd1306_WriteString>
						  if(BTN_B_LONG>=1){
 8005428:	4b21      	ldr	r3, [pc, #132]	@ (80054b0 <statemachine+0xb88>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	2b00      	cmp	r3, #0
 800542e:	f340 809c 	ble.w	800556a <statemachine+0xc42>
						  						  balisestate--;
 8005432:	4b20      	ldr	r3, [pc, #128]	@ (80054b4 <statemachine+0xb8c>)
 8005434:	781b      	ldrb	r3, [r3, #0]
 8005436:	3b01      	subs	r3, #1
 8005438:	b2da      	uxtb	r2, r3
 800543a:	4b1e      	ldr	r3, [pc, #120]	@ (80054b4 <statemachine+0xb8c>)
 800543c:	701a      	strb	r2, [r3, #0]
						  						  BTN_B_LONG=0;
 800543e:	4b1c      	ldr	r3, [pc, #112]	@ (80054b0 <statemachine+0xb88>)
 8005440:	2200      	movs	r2, #0
 8005442:	601a      	str	r2, [r3, #0]
						  						  BTN_A=0;
 8005444:	4b10      	ldr	r3, [pc, #64]	@ (8005488 <statemachine+0xb60>)
 8005446:	2200      	movs	r2, #0
 8005448:	601a      	str	r2, [r3, #0]
						  						  HAL_TIM_Base_Stop_IT(&htim17);
 800544a:	481b      	ldr	r0, [pc, #108]	@ (80054b8 <statemachine+0xb90>)
 800544c:	f009 fdf2 	bl	800f034 <HAL_TIM_Base_Stop_IT>
						  						HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1,GPIO_PIN_RESET);
 8005450:	2200      	movs	r2, #0
 8005452:	2102      	movs	r1, #2
 8005454:	4819      	ldr	r0, [pc, #100]	@ (80054bc <statemachine+0xb94>)
 8005456:	f003 ff6b 	bl	8009330 <HAL_GPIO_WritePin>
						  break;
 800545a:	e086      	b.n	800556a <statemachine+0xc42>
 800545c:	f3af 8000 	nop.w
 8005460:	cccccccd 	.word	0xcccccccd
 8005464:	400ccccc 	.word	0x400ccccc
 8005468:	20000840 	.word	0x20000840
 800546c:	0801fef4 	.word	0x0801fef4
 8005470:	20000ae0 	.word	0x20000ae0
 8005474:	2000001c 	.word	0x2000001c
 8005478:	20000014 	.word	0x20000014
 800547c:	0801fefc 	.word	0x0801fefc
 8005480:	20000884 	.word	0x20000884
 8005484:	20000d00 	.word	0x20000d00
 8005488:	20000880 	.word	0x20000880
 800548c:	20000460 	.word	0x20000460
 8005490:	0801ff70 	.word	0x0801ff70
 8005494:	0801ff78 	.word	0x0801ff78
 8005498:	200008b8 	.word	0x200008b8
 800549c:	0801ff80 	.word	0x0801ff80
 80054a0:	20000b54 	.word	0x20000b54
 80054a4:	0801ff88 	.word	0x0801ff88
 80054a8:	0801ff90 	.word	0x0801ff90
 80054ac:	0801ff98 	.word	0x0801ff98
 80054b0:	20000bb4 	.word	0x20000bb4
 80054b4:	200005f1 	.word	0x200005f1
 80054b8:	200012a4 	.word	0x200012a4
 80054bc:	48000400 	.word	0x48000400
						  ssd1306_SetCursor(32,32);
 80054c0:	2120      	movs	r1, #32
 80054c2:	2020      	movs	r0, #32
 80054c4:	f7fe febc 	bl	8004240 <ssd1306_SetCursor>
						  ssd1306_WriteString("fin de",Font_6x8,White);
 80054c8:	4a97      	ldr	r2, [pc, #604]	@ (8005728 <statemachine+0xe00>)
 80054ca:	2301      	movs	r3, #1
 80054cc:	ca06      	ldmia	r2, {r1, r2}
 80054ce:	4897      	ldr	r0, [pc, #604]	@ (800572c <statemachine+0xe04>)
 80054d0:	f7fe fe90 	bl	80041f4 <ssd1306_WriteString>
						  ssd1306_SetCursor(32,42);
 80054d4:	212a      	movs	r1, #42	@ 0x2a
 80054d6:	2020      	movs	r0, #32
 80054d8:	f7fe feb2 	bl	8004240 <ssd1306_SetCursor>
						  ssd1306_WriteString("memoire",Font_6x8,White);
 80054dc:	4a92      	ldr	r2, [pc, #584]	@ (8005728 <statemachine+0xe00>)
 80054de:	2301      	movs	r3, #1
 80054e0:	ca06      	ldmia	r2, {r1, r2}
 80054e2:	4893      	ldr	r0, [pc, #588]	@ (8005730 <statemachine+0xe08>)
 80054e4:	f7fe fe86 	bl	80041f4 <ssd1306_WriteString>
						  ssd1306_SetCursor(32,52);
 80054e8:	2134      	movs	r1, #52	@ 0x34
 80054ea:	2020      	movs	r0, #32
 80054ec:	f7fe fea8 	bl	8004240 <ssd1306_SetCursor>
						  snprintf((char *)bufferscreen,50,"%d,%d",pageoffset,pagenumber);
 80054f0:	4b90      	ldr	r3, [pc, #576]	@ (8005734 <statemachine+0xe0c>)
 80054f2:	681a      	ldr	r2, [r3, #0]
 80054f4:	4b90      	ldr	r3, [pc, #576]	@ (8005738 <statemachine+0xe10>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	9300      	str	r3, [sp, #0]
 80054fa:	4613      	mov	r3, r2
 80054fc:	4a8f      	ldr	r2, [pc, #572]	@ (800573c <statemachine+0xe14>)
 80054fe:	2132      	movs	r1, #50	@ 0x32
 8005500:	488f      	ldr	r0, [pc, #572]	@ (8005740 <statemachine+0xe18>)
 8005502:	f015 ff6f 	bl	801b3e4 <sniprintf>
						  ssd1306_WriteString((char *)bufferscreen,Font_6x8,White);
 8005506:	4a88      	ldr	r2, [pc, #544]	@ (8005728 <statemachine+0xe00>)
 8005508:	2301      	movs	r3, #1
 800550a:	ca06      	ldmia	r2, {r1, r2}
 800550c:	488c      	ldr	r0, [pc, #560]	@ (8005740 <statemachine+0xe18>)
 800550e:	f7fe fe71 	bl	80041f4 <ssd1306_WriteString>
						  if(BTN_A>=1){
 8005512:	4b8c      	ldr	r3, [pc, #560]	@ (8005744 <statemachine+0xe1c>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	2b00      	cmp	r3, #0
 8005518:	dd0e      	ble.n	8005538 <statemachine+0xc10>
						  				  			 	state++;
 800551a:	4b8b      	ldr	r3, [pc, #556]	@ (8005748 <statemachine+0xe20>)
 800551c:	781b      	ldrb	r3, [r3, #0]
 800551e:	3301      	adds	r3, #1
 8005520:	b2da      	uxtb	r2, r3
 8005522:	4b89      	ldr	r3, [pc, #548]	@ (8005748 <statemachine+0xe20>)
 8005524:	701a      	strb	r2, [r3, #0]
						  				  			 	BTN_A=0;
 8005526:	4b87      	ldr	r3, [pc, #540]	@ (8005744 <statemachine+0xe1c>)
 8005528:	2200      	movs	r2, #0
 800552a:	601a      	str	r2, [r3, #0]
						  				  			 	BTN_B=0;
 800552c:	4b87      	ldr	r3, [pc, #540]	@ (800574c <statemachine+0xe24>)
 800552e:	2200      	movs	r2, #0
 8005530:	601a      	str	r2, [r3, #0]
						  				  			settimeen=0;
 8005532:	4b87      	ldr	r3, [pc, #540]	@ (8005750 <statemachine+0xe28>)
 8005534:	2200      	movs	r2, #0
 8005536:	601a      	str	r2, [r3, #0]
						  if(BTN_A_LONG>=1){
 8005538:	4b86      	ldr	r3, [pc, #536]	@ (8005754 <statemachine+0xe2c>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	2b00      	cmp	r3, #0
 800553e:	f340 87de 	ble.w	80064fe <statemachine+0x1bd6>
						  				 									 									  			 	state--;
 8005542:	4b81      	ldr	r3, [pc, #516]	@ (8005748 <statemachine+0xe20>)
 8005544:	781b      	ldrb	r3, [r3, #0]
 8005546:	3b01      	subs	r3, #1
 8005548:	b2da      	uxtb	r2, r3
 800554a:	4b7f      	ldr	r3, [pc, #508]	@ (8005748 <statemachine+0xe20>)
 800554c:	701a      	strb	r2, [r3, #0]
						  				 									 									  			 	BTN_A=0;
 800554e:	4b7d      	ldr	r3, [pc, #500]	@ (8005744 <statemachine+0xe1c>)
 8005550:	2200      	movs	r2, #0
 8005552:	601a      	str	r2, [r3, #0]
						  				 									 									  			 	BTN_B=0;
 8005554:	4b7d      	ldr	r3, [pc, #500]	@ (800574c <statemachine+0xe24>)
 8005556:	2200      	movs	r2, #0
 8005558:	601a      	str	r2, [r3, #0]
						  				 									 									  			 	BTN_A_LONG=0;
 800555a:	4b7e      	ldr	r3, [pc, #504]	@ (8005754 <statemachine+0xe2c>)
 800555c:	2200      	movs	r2, #0
 800555e:	601a      	str	r2, [r3, #0]
					  break;
 8005560:	f000 bfcd 	b.w	80064fe <statemachine+0x1bd6>
						  break;
 8005564:	bf00      	nop
 8005566:	f000 bfca 	b.w	80064fe <statemachine+0x1bd6>
						  break;
 800556a:	bf00      	nop
					  break;
 800556c:	f000 bfc7 	b.w	80064fe <statemachine+0x1bd6>

	case STATE_POS:
			  ssd1306_Fill(Black);
 8005570:	2000      	movs	r0, #0
 8005572:	f7fe fd23 	bl	8003fbc <ssd1306_Fill>
			  nmea_parse(&myData, DataBuffer);
 8005576:	4978      	ldr	r1, [pc, #480]	@ (8005758 <statemachine+0xe30>)
 8005578:	4878      	ldr	r0, [pc, #480]	@ (800575c <statemachine+0xe34>)
 800557a:	f7fd ffaf 	bl	80034dc <nmea_parse>
			  switch(posstate){
 800557e:	4b78      	ldr	r3, [pc, #480]	@ (8005760 <statemachine+0xe38>)
 8005580:	781b      	ldrb	r3, [r3, #0]
 8005582:	2b05      	cmp	r3, #5
 8005584:	f200 8326 	bhi.w	8005bd4 <statemachine+0x12ac>
 8005588:	a201      	add	r2, pc, #4	@ (adr r2, 8005590 <statemachine+0xc68>)
 800558a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800558e:	bf00      	nop
 8005590:	080055a9 	.word	0x080055a9
 8005594:	08005653 	.word	0x08005653
 8005598:	0800578d 	.word	0x0800578d
 800559c:	0800584b 	.word	0x0800584b
 80055a0:	08005909 	.word	0x08005909
 80055a4:	08005a5d 	.word	0x08005a5d

			  case STATE_SUMMARY1:

						ssd1306_SetCursor(32, 32);
 80055a8:	2120      	movs	r1, #32
 80055aa:	2020      	movs	r0, #32
 80055ac:	f7fe fe48 	bl	8004240 <ssd1306_SetCursor>
						snprintf((char *)bufferscreen,15, "Latitude:");
 80055b0:	4a6c      	ldr	r2, [pc, #432]	@ (8005764 <statemachine+0xe3c>)
 80055b2:	210f      	movs	r1, #15
 80055b4:	4862      	ldr	r0, [pc, #392]	@ (8005740 <statemachine+0xe18>)
 80055b6:	f015 ff15 	bl	801b3e4 <sniprintf>
						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 80055ba:	4a5b      	ldr	r2, [pc, #364]	@ (8005728 <statemachine+0xe00>)
 80055bc:	2301      	movs	r3, #1
 80055be:	ca06      	ldmia	r2, {r1, r2}
 80055c0:	485f      	ldr	r0, [pc, #380]	@ (8005740 <statemachine+0xe18>)
 80055c2:	f7fe fe17 	bl	80041f4 <ssd1306_WriteString>
						snprintf((char *)bufferscreen,15, "%0.7f",myData.latitude);//pas forcement utile d'afficher 7 decimales apres la virgule, 6 donne une precision au metre ce qui est le max du gps
 80055c6:	4b65      	ldr	r3, [pc, #404]	@ (800575c <statemachine+0xe34>)
 80055c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055cc:	e9cd 2300 	strd	r2, r3, [sp]
 80055d0:	4a65      	ldr	r2, [pc, #404]	@ (8005768 <statemachine+0xe40>)
 80055d2:	210f      	movs	r1, #15
 80055d4:	485a      	ldr	r0, [pc, #360]	@ (8005740 <statemachine+0xe18>)
 80055d6:	f015 ff05 	bl	801b3e4 <sniprintf>
						ssd1306_SetCursor(32, 40);
 80055da:	2128      	movs	r1, #40	@ 0x28
 80055dc:	2020      	movs	r0, #32
 80055de:	f7fe fe2f 	bl	8004240 <ssd1306_SetCursor>
						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 80055e2:	4a51      	ldr	r2, [pc, #324]	@ (8005728 <statemachine+0xe00>)
 80055e4:	2301      	movs	r3, #1
 80055e6:	ca06      	ldmia	r2, {r1, r2}
 80055e8:	4855      	ldr	r0, [pc, #340]	@ (8005740 <statemachine+0xe18>)
 80055ea:	f7fe fe03 	bl	80041f4 <ssd1306_WriteString>
						snprintf((char *)bufferscreen,15, "Longitude:");
 80055ee:	4a5f      	ldr	r2, [pc, #380]	@ (800576c <statemachine+0xe44>)
 80055f0:	210f      	movs	r1, #15
 80055f2:	4853      	ldr	r0, [pc, #332]	@ (8005740 <statemachine+0xe18>)
 80055f4:	f015 fef6 	bl	801b3e4 <sniprintf>
						ssd1306_SetCursor(32, 48);
 80055f8:	2130      	movs	r1, #48	@ 0x30
 80055fa:	2020      	movs	r0, #32
 80055fc:	f7fe fe20 	bl	8004240 <ssd1306_SetCursor>
						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 8005600:	4a49      	ldr	r2, [pc, #292]	@ (8005728 <statemachine+0xe00>)
 8005602:	2301      	movs	r3, #1
 8005604:	ca06      	ldmia	r2, {r1, r2}
 8005606:	484e      	ldr	r0, [pc, #312]	@ (8005740 <statemachine+0xe18>)
 8005608:	f7fe fdf4 	bl	80041f4 <ssd1306_WriteString>
						snprintf((char *)bufferscreen,15, "%0.7f",myData.longitude);
 800560c:	4b53      	ldr	r3, [pc, #332]	@ (800575c <statemachine+0xe34>)
 800560e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8005612:	e9cd 2300 	strd	r2, r3, [sp]
 8005616:	4a54      	ldr	r2, [pc, #336]	@ (8005768 <statemachine+0xe40>)
 8005618:	210f      	movs	r1, #15
 800561a:	4849      	ldr	r0, [pc, #292]	@ (8005740 <statemachine+0xe18>)
 800561c:	f015 fee2 	bl	801b3e4 <sniprintf>
						ssd1306_SetCursor(32, 56);
 8005620:	2138      	movs	r1, #56	@ 0x38
 8005622:	2020      	movs	r0, #32
 8005624:	f7fe fe0c 	bl	8004240 <ssd1306_SetCursor>
						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 8005628:	4a3f      	ldr	r2, [pc, #252]	@ (8005728 <statemachine+0xe00>)
 800562a:	2301      	movs	r3, #1
 800562c:	ca06      	ldmia	r2, {r1, r2}
 800562e:	4844      	ldr	r0, [pc, #272]	@ (8005740 <statemachine+0xe18>)
 8005630:	f7fe fde0 	bl	80041f4 <ssd1306_WriteString>
				  if(BTN_B>=1){
 8005634:	4b45      	ldr	r3, [pc, #276]	@ (800574c <statemachine+0xe24>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	2b00      	cmp	r3, #0
 800563a:	f340 82c0 	ble.w	8005bbe <statemachine+0x1296>
					  posstate++;
 800563e:	4b48      	ldr	r3, [pc, #288]	@ (8005760 <statemachine+0xe38>)
 8005640:	781b      	ldrb	r3, [r3, #0]
 8005642:	3301      	adds	r3, #1
 8005644:	b2da      	uxtb	r2, r3
 8005646:	4b46      	ldr	r3, [pc, #280]	@ (8005760 <statemachine+0xe38>)
 8005648:	701a      	strb	r2, [r3, #0]
					  BTN_B=0;
 800564a:	4b40      	ldr	r3, [pc, #256]	@ (800574c <statemachine+0xe24>)
 800564c:	2200      	movs	r2, #0
 800564e:	601a      	str	r2, [r3, #0]
				  }



				  break;
 8005650:	e2b5      	b.n	8005bbe <statemachine+0x1296>
			  case STATE_INFO:
				ssd1306_Fill(Black);
 8005652:	2000      	movs	r0, #0
 8005654:	f7fe fcb2 	bl	8003fbc <ssd1306_Fill>
				nmea_parse(&myData, DataBuffer);
 8005658:	493f      	ldr	r1, [pc, #252]	@ (8005758 <statemachine+0xe30>)
 800565a:	4840      	ldr	r0, [pc, #256]	@ (800575c <statemachine+0xe34>)
 800565c:	f7fd ff3e 	bl	80034dc <nmea_parse>
				snprintf((char *)bufferscreen,15, "hdop=%.1f",myData.hdop);//sert a	connaitre la qualitée du fix si proche de 1 voir inférieur alors le fix est tres bon
 8005660:	4b3e      	ldr	r3, [pc, #248]	@ (800575c <statemachine+0xe34>)
 8005662:	6a1b      	ldr	r3, [r3, #32]
 8005664:	4618      	mov	r0, r3
 8005666:	f7fa ff47 	bl	80004f8 <__aeabi_f2d>
 800566a:	4602      	mov	r2, r0
 800566c:	460b      	mov	r3, r1
 800566e:	e9cd 2300 	strd	r2, r3, [sp]
 8005672:	4a3f      	ldr	r2, [pc, #252]	@ (8005770 <statemachine+0xe48>)
 8005674:	210f      	movs	r1, #15
 8005676:	4832      	ldr	r0, [pc, #200]	@ (8005740 <statemachine+0xe18>)
 8005678:	f015 feb4 	bl	801b3e4 <sniprintf>
				ssd1306_SetCursor(32, 32);
 800567c:	2120      	movs	r1, #32
 800567e:	2020      	movs	r0, #32
 8005680:	f7fe fdde 	bl	8004240 <ssd1306_SetCursor>
				ssd1306_WriteString((char *)bufferscreen, Font_7x10, White);
 8005684:	4a3b      	ldr	r2, [pc, #236]	@ (8005774 <statemachine+0xe4c>)
 8005686:	2301      	movs	r3, #1
 8005688:	ca06      	ldmia	r2, {r1, r2}
 800568a:	482d      	ldr	r0, [pc, #180]	@ (8005740 <statemachine+0xe18>)
 800568c:	f7fe fdb2 	bl	80041f4 <ssd1306_WriteString>
				snprintf((char *)bufferscreen,20, "v=%0.2fV",vbat);
 8005690:	4b39      	ldr	r3, [pc, #228]	@ (8005778 <statemachine+0xe50>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4618      	mov	r0, r3
 8005696:	f7fa ff2f 	bl	80004f8 <__aeabi_f2d>
 800569a:	4602      	mov	r2, r0
 800569c:	460b      	mov	r3, r1
 800569e:	e9cd 2300 	strd	r2, r3, [sp]
 80056a2:	4a36      	ldr	r2, [pc, #216]	@ (800577c <statemachine+0xe54>)
 80056a4:	2114      	movs	r1, #20
 80056a6:	4826      	ldr	r0, [pc, #152]	@ (8005740 <statemachine+0xe18>)
 80056a8:	f015 fe9c 	bl	801b3e4 <sniprintf>
				ssd1306_SetCursor(32, 42);
 80056ac:	212a      	movs	r1, #42	@ 0x2a
 80056ae:	2020      	movs	r0, #32
 80056b0:	f7fe fdc6 	bl	8004240 <ssd1306_SetCursor>
				ssd1306_WriteString((char *)bufferscreen, Font_7x10, White);
 80056b4:	4a2f      	ldr	r2, [pc, #188]	@ (8005774 <statemachine+0xe4c>)
 80056b6:	2301      	movs	r3, #1
 80056b8:	ca06      	ldmia	r2, {r1, r2}
 80056ba:	4821      	ldr	r0, [pc, #132]	@ (8005740 <statemachine+0xe18>)
 80056bc:	f7fe fd9a 	bl	80041f4 <ssd1306_WriteString>
				ssd1306_SetCursor(32, 52);
 80056c0:	2134      	movs	r1, #52	@ 0x34
 80056c2:	2020      	movs	r0, #32
 80056c4:	f7fe fdbc 	bl	8004240 <ssd1306_SetCursor>
				snprintf((char *)bufferscreen,15,  "T=%0.2fC",temp);
 80056c8:	4b2d      	ldr	r3, [pc, #180]	@ (8005780 <statemachine+0xe58>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4618      	mov	r0, r3
 80056ce:	f7fa ff13 	bl	80004f8 <__aeabi_f2d>
 80056d2:	4602      	mov	r2, r0
 80056d4:	460b      	mov	r3, r1
 80056d6:	e9cd 2300 	strd	r2, r3, [sp]
 80056da:	4a2a      	ldr	r2, [pc, #168]	@ (8005784 <statemachine+0xe5c>)
 80056dc:	210f      	movs	r1, #15
 80056de:	4818      	ldr	r0, [pc, #96]	@ (8005740 <statemachine+0xe18>)
 80056e0:	f015 fe80 	bl	801b3e4 <sniprintf>
				ssd1306_WriteString((char *)bufferscreen, Font_7x10, White);
 80056e4:	4a23      	ldr	r2, [pc, #140]	@ (8005774 <statemachine+0xe4c>)
 80056e6:	2301      	movs	r3, #1
 80056e8:	ca06      	ldmia	r2, {r1, r2}
 80056ea:	4815      	ldr	r0, [pc, #84]	@ (8005740 <statemachine+0xe18>)
 80056ec:	f7fe fd82 	bl	80041f4 <ssd1306_WriteString>
				 if(BTN_B>=1){
 80056f0:	4b16      	ldr	r3, [pc, #88]	@ (800574c <statemachine+0xe24>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	dd08      	ble.n	800570a <statemachine+0xde2>
								  					  posstate++;
 80056f8:	4b19      	ldr	r3, [pc, #100]	@ (8005760 <statemachine+0xe38>)
 80056fa:	781b      	ldrb	r3, [r3, #0]
 80056fc:	3301      	adds	r3, #1
 80056fe:	b2da      	uxtb	r2, r3
 8005700:	4b17      	ldr	r3, [pc, #92]	@ (8005760 <statemachine+0xe38>)
 8005702:	701a      	strb	r2, [r3, #0]
								  					  BTN_B=0;
 8005704:	4b11      	ldr	r3, [pc, #68]	@ (800574c <statemachine+0xe24>)
 8005706:	2200      	movs	r2, #0
 8005708:	601a      	str	r2, [r3, #0]
								  				  }
								  if(BTN_B_LONG>=1){
 800570a:	4b1f      	ldr	r3, [pc, #124]	@ (8005788 <statemachine+0xe60>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	2b00      	cmp	r3, #0
 8005710:	f340 8257 	ble.w	8005bc2 <statemachine+0x129a>
													  posstate--;
 8005714:	4b12      	ldr	r3, [pc, #72]	@ (8005760 <statemachine+0xe38>)
 8005716:	781b      	ldrb	r3, [r3, #0]
 8005718:	3b01      	subs	r3, #1
 800571a:	b2da      	uxtb	r2, r3
 800571c:	4b10      	ldr	r3, [pc, #64]	@ (8005760 <statemachine+0xe38>)
 800571e:	701a      	strb	r2, [r3, #0]
													BTN_B_LONG=0;
 8005720:	4b19      	ldr	r3, [pc, #100]	@ (8005788 <statemachine+0xe60>)
 8005722:	2200      	movs	r2, #0
 8005724:	601a      	str	r2, [r3, #0]
												}

				  break;
 8005726:	e24c      	b.n	8005bc2 <statemachine+0x129a>
 8005728:	20000014 	.word	0x20000014
 800572c:	0801ffa0 	.word	0x0801ffa0
 8005730:	0801ffa8 	.word	0x0801ffa8
 8005734:	20000abc 	.word	0x20000abc
 8005738:	20000ac0 	.word	0x20000ac0
 800573c:	0801ffb0 	.word	0x0801ffb0
 8005740:	20000ae0 	.word	0x20000ae0
 8005744:	20000880 	.word	0x20000880
 8005748:	200005ec 	.word	0x200005ec
 800574c:	20000884 	.word	0x20000884
 8005750:	20000ba0 	.word	0x20000ba0
 8005754:	20000bb8 	.word	0x20000bb8
 8005758:	20000638 	.word	0x20000638
 800575c:	20000840 	.word	0x20000840
 8005760:	200005ee 	.word	0x200005ee
 8005764:	0801ffb8 	.word	0x0801ffb8
 8005768:	0801ffc4 	.word	0x0801ffc4
 800576c:	0801ffcc 	.word	0x0801ffcc
 8005770:	0801ffd8 	.word	0x0801ffd8
 8005774:	2000001c 	.word	0x2000001c
 8005778:	200008b8 	.word	0x200008b8
 800577c:	0801ffe4 	.word	0x0801ffe4
 8005780:	200008b0 	.word	0x200008b0
 8005784:	0801fff0 	.word	0x0801fff0
 8005788:	20000bb4 	.word	0x20000bb4
			  case STATE_LAT:
						ssd1306_SetCursor(32, 32);
 800578c:	2120      	movs	r1, #32
 800578e:	2020      	movs	r0, #32
 8005790:	f7fe fd56 	bl	8004240 <ssd1306_SetCursor>
						snprintf((char *)bufferscreen,15, "LatSide:");
 8005794:	4aa0      	ldr	r2, [pc, #640]	@ (8005a18 <statemachine+0x10f0>)
 8005796:	210f      	movs	r1, #15
 8005798:	48a0      	ldr	r0, [pc, #640]	@ (8005a1c <statemachine+0x10f4>)
 800579a:	f015 fe23 	bl	801b3e4 <sniprintf>
						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 800579e:	4aa0      	ldr	r2, [pc, #640]	@ (8005a20 <statemachine+0x10f8>)
 80057a0:	2301      	movs	r3, #1
 80057a2:	ca06      	ldmia	r2, {r1, r2}
 80057a4:	489d      	ldr	r0, [pc, #628]	@ (8005a1c <statemachine+0x10f4>)
 80057a6:	f7fe fd25 	bl	80041f4 <ssd1306_WriteString>
						snprintf((char *)bufferscreen,15, "%c",myData.latSide);//pas forcement utile d'afficher 7 decimales apres la virgule, 6 donne une precision au metre ce qui est le max du gps
 80057aa:	4b9e      	ldr	r3, [pc, #632]	@ (8005a24 <statemachine+0x10fc>)
 80057ac:	7a1b      	ldrb	r3, [r3, #8]
 80057ae:	4a9e      	ldr	r2, [pc, #632]	@ (8005a28 <statemachine+0x1100>)
 80057b0:	210f      	movs	r1, #15
 80057b2:	489a      	ldr	r0, [pc, #616]	@ (8005a1c <statemachine+0x10f4>)
 80057b4:	f015 fe16 	bl	801b3e4 <sniprintf>
						ssd1306_SetCursor(32, 40);
 80057b8:	2128      	movs	r1, #40	@ 0x28
 80057ba:	2020      	movs	r0, #32
 80057bc:	f7fe fd40 	bl	8004240 <ssd1306_SetCursor>
						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 80057c0:	4a97      	ldr	r2, [pc, #604]	@ (8005a20 <statemachine+0x10f8>)
 80057c2:	2301      	movs	r3, #1
 80057c4:	ca06      	ldmia	r2, {r1, r2}
 80057c6:	4895      	ldr	r0, [pc, #596]	@ (8005a1c <statemachine+0x10f4>)
 80057c8:	f7fe fd14 	bl	80041f4 <ssd1306_WriteString>
						snprintf((char *)bufferscreen,15, "Latitude:");
 80057cc:	4a97      	ldr	r2, [pc, #604]	@ (8005a2c <statemachine+0x1104>)
 80057ce:	210f      	movs	r1, #15
 80057d0:	4892      	ldr	r0, [pc, #584]	@ (8005a1c <statemachine+0x10f4>)
 80057d2:	f015 fe07 	bl	801b3e4 <sniprintf>
						ssd1306_SetCursor(32, 48);
 80057d6:	2130      	movs	r1, #48	@ 0x30
 80057d8:	2020      	movs	r0, #32
 80057da:	f7fe fd31 	bl	8004240 <ssd1306_SetCursor>
						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 80057de:	4a90      	ldr	r2, [pc, #576]	@ (8005a20 <statemachine+0x10f8>)
 80057e0:	2301      	movs	r3, #1
 80057e2:	ca06      	ldmia	r2, {r1, r2}
 80057e4:	488d      	ldr	r0, [pc, #564]	@ (8005a1c <statemachine+0x10f4>)
 80057e6:	f7fe fd05 	bl	80041f4 <ssd1306_WriteString>
						snprintf((char *)bufferscreen,15, "%0.7f",myData.latitude);
 80057ea:	4b8e      	ldr	r3, [pc, #568]	@ (8005a24 <statemachine+0x10fc>)
 80057ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057f0:	e9cd 2300 	strd	r2, r3, [sp]
 80057f4:	4a8e      	ldr	r2, [pc, #568]	@ (8005a30 <statemachine+0x1108>)
 80057f6:	210f      	movs	r1, #15
 80057f8:	4888      	ldr	r0, [pc, #544]	@ (8005a1c <statemachine+0x10f4>)
 80057fa:	f015 fdf3 	bl	801b3e4 <sniprintf>
						ssd1306_SetCursor(32, 56);
 80057fe:	2138      	movs	r1, #56	@ 0x38
 8005800:	2020      	movs	r0, #32
 8005802:	f7fe fd1d 	bl	8004240 <ssd1306_SetCursor>
						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 8005806:	4a86      	ldr	r2, [pc, #536]	@ (8005a20 <statemachine+0x10f8>)
 8005808:	2301      	movs	r3, #1
 800580a:	ca06      	ldmia	r2, {r1, r2}
 800580c:	4883      	ldr	r0, [pc, #524]	@ (8005a1c <statemachine+0x10f4>)
 800580e:	f7fe fcf1 	bl	80041f4 <ssd1306_WriteString>


				  if(BTN_B>=1){
 8005812:	4b88      	ldr	r3, [pc, #544]	@ (8005a34 <statemachine+0x110c>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	2b00      	cmp	r3, #0
 8005818:	dd08      	ble.n	800582c <statemachine+0xf04>
				  					  posstate++;
 800581a:	4b87      	ldr	r3, [pc, #540]	@ (8005a38 <statemachine+0x1110>)
 800581c:	781b      	ldrb	r3, [r3, #0]
 800581e:	3301      	adds	r3, #1
 8005820:	b2da      	uxtb	r2, r3
 8005822:	4b85      	ldr	r3, [pc, #532]	@ (8005a38 <statemachine+0x1110>)
 8005824:	701a      	strb	r2, [r3, #0]
				  					  BTN_B=0;
 8005826:	4b83      	ldr	r3, [pc, #524]	@ (8005a34 <statemachine+0x110c>)
 8005828:	2200      	movs	r2, #0
 800582a:	601a      	str	r2, [r3, #0]
				  				  }
				  if(BTN_B_LONG>=1){
 800582c:	4b83      	ldr	r3, [pc, #524]	@ (8005a3c <statemachine+0x1114>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	2b00      	cmp	r3, #0
 8005832:	f340 81c8 	ble.w	8005bc6 <statemachine+0x129e>
									  posstate--;
 8005836:	4b80      	ldr	r3, [pc, #512]	@ (8005a38 <statemachine+0x1110>)
 8005838:	781b      	ldrb	r3, [r3, #0]
 800583a:	3b01      	subs	r3, #1
 800583c:	b2da      	uxtb	r2, r3
 800583e:	4b7e      	ldr	r3, [pc, #504]	@ (8005a38 <statemachine+0x1110>)
 8005840:	701a      	strb	r2, [r3, #0]
									BTN_B_LONG=0;
 8005842:	4b7e      	ldr	r3, [pc, #504]	@ (8005a3c <statemachine+0x1114>)
 8005844:	2200      	movs	r2, #0
 8005846:	601a      	str	r2, [r3, #0]
								}



				  break;
 8005848:	e1bd      	b.n	8005bc6 <statemachine+0x129e>
			  case STATE_LONG:

					ssd1306_SetCursor(32, 32);
 800584a:	2120      	movs	r1, #32
 800584c:	2020      	movs	r0, #32
 800584e:	f7fe fcf7 	bl	8004240 <ssd1306_SetCursor>
					snprintf((char *)bufferscreen,15, "LonSide:");
 8005852:	4a7b      	ldr	r2, [pc, #492]	@ (8005a40 <statemachine+0x1118>)
 8005854:	210f      	movs	r1, #15
 8005856:	4871      	ldr	r0, [pc, #452]	@ (8005a1c <statemachine+0x10f4>)
 8005858:	f015 fdc4 	bl	801b3e4 <sniprintf>
					ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 800585c:	4a70      	ldr	r2, [pc, #448]	@ (8005a20 <statemachine+0x10f8>)
 800585e:	2301      	movs	r3, #1
 8005860:	ca06      	ldmia	r2, {r1, r2}
 8005862:	486e      	ldr	r0, [pc, #440]	@ (8005a1c <statemachine+0x10f4>)
 8005864:	f7fe fcc6 	bl	80041f4 <ssd1306_WriteString>
					snprintf((char *)bufferscreen,15, "%c",myData.lonSide);//pas forcement utile d'afficher 7 decimales apres la virgule, 6 donne une precision au metre ce qui est le max du gps
 8005868:	4b6e      	ldr	r3, [pc, #440]	@ (8005a24 <statemachine+0x10fc>)
 800586a:	7e1b      	ldrb	r3, [r3, #24]
 800586c:	4a6e      	ldr	r2, [pc, #440]	@ (8005a28 <statemachine+0x1100>)
 800586e:	210f      	movs	r1, #15
 8005870:	486a      	ldr	r0, [pc, #424]	@ (8005a1c <statemachine+0x10f4>)
 8005872:	f015 fdb7 	bl	801b3e4 <sniprintf>
					ssd1306_SetCursor(32, 40);
 8005876:	2128      	movs	r1, #40	@ 0x28
 8005878:	2020      	movs	r0, #32
 800587a:	f7fe fce1 	bl	8004240 <ssd1306_SetCursor>
					ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 800587e:	4a68      	ldr	r2, [pc, #416]	@ (8005a20 <statemachine+0x10f8>)
 8005880:	2301      	movs	r3, #1
 8005882:	ca06      	ldmia	r2, {r1, r2}
 8005884:	4865      	ldr	r0, [pc, #404]	@ (8005a1c <statemachine+0x10f4>)
 8005886:	f7fe fcb5 	bl	80041f4 <ssd1306_WriteString>
					snprintf((char *)bufferscreen,15, "Longitude:");
 800588a:	4a6e      	ldr	r2, [pc, #440]	@ (8005a44 <statemachine+0x111c>)
 800588c:	210f      	movs	r1, #15
 800588e:	4863      	ldr	r0, [pc, #396]	@ (8005a1c <statemachine+0x10f4>)
 8005890:	f015 fda8 	bl	801b3e4 <sniprintf>
					ssd1306_SetCursor(32, 48);
 8005894:	2130      	movs	r1, #48	@ 0x30
 8005896:	2020      	movs	r0, #32
 8005898:	f7fe fcd2 	bl	8004240 <ssd1306_SetCursor>
					ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 800589c:	4a60      	ldr	r2, [pc, #384]	@ (8005a20 <statemachine+0x10f8>)
 800589e:	2301      	movs	r3, #1
 80058a0:	ca06      	ldmia	r2, {r1, r2}
 80058a2:	485e      	ldr	r0, [pc, #376]	@ (8005a1c <statemachine+0x10f4>)
 80058a4:	f7fe fca6 	bl	80041f4 <ssd1306_WriteString>
					snprintf((char *)bufferscreen,15, "%0.7f",myData.longitude);
 80058a8:	4b5e      	ldr	r3, [pc, #376]	@ (8005a24 <statemachine+0x10fc>)
 80058aa:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80058ae:	e9cd 2300 	strd	r2, r3, [sp]
 80058b2:	4a5f      	ldr	r2, [pc, #380]	@ (8005a30 <statemachine+0x1108>)
 80058b4:	210f      	movs	r1, #15
 80058b6:	4859      	ldr	r0, [pc, #356]	@ (8005a1c <statemachine+0x10f4>)
 80058b8:	f015 fd94 	bl	801b3e4 <sniprintf>
					ssd1306_SetCursor(32, 56);
 80058bc:	2138      	movs	r1, #56	@ 0x38
 80058be:	2020      	movs	r0, #32
 80058c0:	f7fe fcbe 	bl	8004240 <ssd1306_SetCursor>
					ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 80058c4:	4a56      	ldr	r2, [pc, #344]	@ (8005a20 <statemachine+0x10f8>)
 80058c6:	2301      	movs	r3, #1
 80058c8:	ca06      	ldmia	r2, {r1, r2}
 80058ca:	4854      	ldr	r0, [pc, #336]	@ (8005a1c <statemachine+0x10f4>)
 80058cc:	f7fe fc92 	bl	80041f4 <ssd1306_WriteString>

				  if(BTN_B>=1){
 80058d0:	4b58      	ldr	r3, [pc, #352]	@ (8005a34 <statemachine+0x110c>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	dd08      	ble.n	80058ea <statemachine+0xfc2>
				  					  posstate++;
 80058d8:	4b57      	ldr	r3, [pc, #348]	@ (8005a38 <statemachine+0x1110>)
 80058da:	781b      	ldrb	r3, [r3, #0]
 80058dc:	3301      	adds	r3, #1
 80058de:	b2da      	uxtb	r2, r3
 80058e0:	4b55      	ldr	r3, [pc, #340]	@ (8005a38 <statemachine+0x1110>)
 80058e2:	701a      	strb	r2, [r3, #0]
				  					  BTN_B=0;
 80058e4:	4b53      	ldr	r3, [pc, #332]	@ (8005a34 <statemachine+0x110c>)
 80058e6:	2200      	movs	r2, #0
 80058e8:	601a      	str	r2, [r3, #0]
				  				  }
				  if(BTN_B_LONG>=1){
 80058ea:	4b54      	ldr	r3, [pc, #336]	@ (8005a3c <statemachine+0x1114>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	f340 816b 	ble.w	8005bca <statemachine+0x12a2>
									  posstate--;
 80058f4:	4b50      	ldr	r3, [pc, #320]	@ (8005a38 <statemachine+0x1110>)
 80058f6:	781b      	ldrb	r3, [r3, #0]
 80058f8:	3b01      	subs	r3, #1
 80058fa:	b2da      	uxtb	r2, r3
 80058fc:	4b4e      	ldr	r3, [pc, #312]	@ (8005a38 <statemachine+0x1110>)
 80058fe:	701a      	strb	r2, [r3, #0]
									BTN_B_LONG=0;
 8005900:	4b4e      	ldr	r3, [pc, #312]	@ (8005a3c <statemachine+0x1114>)
 8005902:	2200      	movs	r2, #0
 8005904:	601a      	str	r2, [r3, #0]
								}

				  break;
 8005906:	e160      	b.n	8005bca <statemachine+0x12a2>
			  case STATE_ALT:


				  						ssd1306_SetCursor(32, 32);
 8005908:	2120      	movs	r1, #32
 800590a:	2020      	movs	r0, #32
 800590c:	f7fe fc98 	bl	8004240 <ssd1306_SetCursor>
				  						snprintf((char *)bufferscreen,15, "altitude:");
 8005910:	4a4d      	ldr	r2, [pc, #308]	@ (8005a48 <statemachine+0x1120>)
 8005912:	210f      	movs	r1, #15
 8005914:	4841      	ldr	r0, [pc, #260]	@ (8005a1c <statemachine+0x10f4>)
 8005916:	f015 fd65 	bl	801b3e4 <sniprintf>
				  						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 800591a:	4a41      	ldr	r2, [pc, #260]	@ (8005a20 <statemachine+0x10f8>)
 800591c:	2301      	movs	r3, #1
 800591e:	ca06      	ldmia	r2, {r1, r2}
 8005920:	483e      	ldr	r0, [pc, #248]	@ (8005a1c <statemachine+0x10f4>)
 8005922:	f7fe fc67 	bl	80041f4 <ssd1306_WriteString>
				  						snprintf((char *)bufferscreen,15, "%0.1f m",myData.altitude);//pas forcement utile d'afficher 7 decimales apres la virgule, 6 donne une precision au metre ce qui est le max du gps
 8005926:	4b3f      	ldr	r3, [pc, #252]	@ (8005a24 <statemachine+0x10fc>)
 8005928:	69db      	ldr	r3, [r3, #28]
 800592a:	4618      	mov	r0, r3
 800592c:	f7fa fde4 	bl	80004f8 <__aeabi_f2d>
 8005930:	4602      	mov	r2, r0
 8005932:	460b      	mov	r3, r1
 8005934:	e9cd 2300 	strd	r2, r3, [sp]
 8005938:	4a44      	ldr	r2, [pc, #272]	@ (8005a4c <statemachine+0x1124>)
 800593a:	210f      	movs	r1, #15
 800593c:	4837      	ldr	r0, [pc, #220]	@ (8005a1c <statemachine+0x10f4>)
 800593e:	f015 fd51 	bl	801b3e4 <sniprintf>
				  						ssd1306_SetCursor(32, 40);
 8005942:	2128      	movs	r1, #40	@ 0x28
 8005944:	2020      	movs	r0, #32
 8005946:	f7fe fc7b 	bl	8004240 <ssd1306_SetCursor>
				  						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 800594a:	4a35      	ldr	r2, [pc, #212]	@ (8005a20 <statemachine+0x10f8>)
 800594c:	2301      	movs	r3, #1
 800594e:	ca06      	ldmia	r2, {r1, r2}
 8005950:	4832      	ldr	r0, [pc, #200]	@ (8005a1c <statemachine+0x10f4>)
 8005952:	f7fe fc4f 	bl	80041f4 <ssd1306_WriteString>
				  						snprintf((char *)bufferscreen,15, "Pressure:");
 8005956:	4a3e      	ldr	r2, [pc, #248]	@ (8005a50 <statemachine+0x1128>)
 8005958:	210f      	movs	r1, #15
 800595a:	4830      	ldr	r0, [pc, #192]	@ (8005a1c <statemachine+0x10f4>)
 800595c:	f015 fd42 	bl	801b3e4 <sniprintf>
				  						ssd1306_SetCursor(32, 48);
 8005960:	2130      	movs	r1, #48	@ 0x30
 8005962:	2020      	movs	r0, #32
 8005964:	f7fe fc6c 	bl	8004240 <ssd1306_SetCursor>
				  						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 8005968:	4a2d      	ldr	r2, [pc, #180]	@ (8005a20 <statemachine+0x10f8>)
 800596a:	2301      	movs	r3, #1
 800596c:	ca06      	ldmia	r2, {r1, r2}
 800596e:	482b      	ldr	r0, [pc, #172]	@ (8005a1c <statemachine+0x10f4>)
 8005970:	f7fe fc40 	bl	80041f4 <ssd1306_WriteString>
				  						snprintf((char *)bufferscreen,15, "%0.1fhpa",1000*expf((-0.0001148)*(myData.altitude)));
 8005974:	4b2b      	ldr	r3, [pc, #172]	@ (8005a24 <statemachine+0x10fc>)
 8005976:	69db      	ldr	r3, [r3, #28]
 8005978:	4618      	mov	r0, r3
 800597a:	f7fa fdbd 	bl	80004f8 <__aeabi_f2d>
 800597e:	a324      	add	r3, pc, #144	@ (adr r3, 8005a10 <statemachine+0x10e8>)
 8005980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005984:	f7fa fe10 	bl	80005a8 <__aeabi_dmul>
 8005988:	4602      	mov	r2, r0
 800598a:	460b      	mov	r3, r1
 800598c:	4610      	mov	r0, r2
 800598e:	4619      	mov	r1, r3
 8005990:	f7fb f902 	bl	8000b98 <__aeabi_d2f>
 8005994:	4603      	mov	r3, r0
 8005996:	ee00 3a10 	vmov	s0, r3
 800599a:	f018 fbb9 	bl	801e110 <expf>
 800599e:	eef0 7a40 	vmov.f32	s15, s0
 80059a2:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8005a54 <statemachine+0x112c>
 80059a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80059aa:	ee17 0a90 	vmov	r0, s15
 80059ae:	f7fa fda3 	bl	80004f8 <__aeabi_f2d>
 80059b2:	4602      	mov	r2, r0
 80059b4:	460b      	mov	r3, r1
 80059b6:	e9cd 2300 	strd	r2, r3, [sp]
 80059ba:	4a27      	ldr	r2, [pc, #156]	@ (8005a58 <statemachine+0x1130>)
 80059bc:	210f      	movs	r1, #15
 80059be:	4817      	ldr	r0, [pc, #92]	@ (8005a1c <statemachine+0x10f4>)
 80059c0:	f015 fd10 	bl	801b3e4 <sniprintf>
				  						ssd1306_SetCursor(32, 56);
 80059c4:	2138      	movs	r1, #56	@ 0x38
 80059c6:	2020      	movs	r0, #32
 80059c8:	f7fe fc3a 	bl	8004240 <ssd1306_SetCursor>
				  						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 80059cc:	4a14      	ldr	r2, [pc, #80]	@ (8005a20 <statemachine+0x10f8>)
 80059ce:	2301      	movs	r3, #1
 80059d0:	ca06      	ldmia	r2, {r1, r2}
 80059d2:	4812      	ldr	r0, [pc, #72]	@ (8005a1c <statemachine+0x10f4>)
 80059d4:	f7fe fc0e 	bl	80041f4 <ssd1306_WriteString>

				  if(BTN_B>=1){
 80059d8:	4b16      	ldr	r3, [pc, #88]	@ (8005a34 <statemachine+0x110c>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	dd08      	ble.n	80059f2 <statemachine+0x10ca>
				  					posstate++;
 80059e0:	4b15      	ldr	r3, [pc, #84]	@ (8005a38 <statemachine+0x1110>)
 80059e2:	781b      	ldrb	r3, [r3, #0]
 80059e4:	3301      	adds	r3, #1
 80059e6:	b2da      	uxtb	r2, r3
 80059e8:	4b13      	ldr	r3, [pc, #76]	@ (8005a38 <statemachine+0x1110>)
 80059ea:	701a      	strb	r2, [r3, #0]
				  					BTN_B=0;
 80059ec:	4b11      	ldr	r3, [pc, #68]	@ (8005a34 <statemachine+0x110c>)
 80059ee:	2200      	movs	r2, #0
 80059f0:	601a      	str	r2, [r3, #0]
				  				  }
				  if(BTN_B_LONG>=1){
 80059f2:	4b12      	ldr	r3, [pc, #72]	@ (8005a3c <statemachine+0x1114>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	f340 80e9 	ble.w	8005bce <statemachine+0x12a6>
					  posstate--;
 80059fc:	4b0e      	ldr	r3, [pc, #56]	@ (8005a38 <statemachine+0x1110>)
 80059fe:	781b      	ldrb	r3, [r3, #0]
 8005a00:	3b01      	subs	r3, #1
 8005a02:	b2da      	uxtb	r2, r3
 8005a04:	4b0c      	ldr	r3, [pc, #48]	@ (8005a38 <statemachine+0x1110>)
 8005a06:	701a      	strb	r2, [r3, #0]
					BTN_B_LONG=0;
 8005a08:	4b0c      	ldr	r3, [pc, #48]	@ (8005a3c <statemachine+0x1114>)
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	601a      	str	r2, [r3, #0]
				}
				  break;
 8005a0e:	e0de      	b.n	8005bce <statemachine+0x12a6>
 8005a10:	fb798882 	.word	0xfb798882
 8005a14:	bf1e1818 	.word	0xbf1e1818
 8005a18:	0801fffc 	.word	0x0801fffc
 8005a1c:	20000ae0 	.word	0x20000ae0
 8005a20:	20000014 	.word	0x20000014
 8005a24:	20000840 	.word	0x20000840
 8005a28:	08020008 	.word	0x08020008
 8005a2c:	0801ffb8 	.word	0x0801ffb8
 8005a30:	0801ffc4 	.word	0x0801ffc4
 8005a34:	20000884 	.word	0x20000884
 8005a38:	200005ee 	.word	0x200005ee
 8005a3c:	20000bb4 	.word	0x20000bb4
 8005a40:	0802000c 	.word	0x0802000c
 8005a44:	0801ffcc 	.word	0x0801ffcc
 8005a48:	08020018 	.word	0x08020018
 8005a4c:	08020024 	.word	0x08020024
 8005a50:	0802002c 	.word	0x0802002c
 8005a54:	447a0000 	.word	0x447a0000
 8005a58:	08020038 	.word	0x08020038
			  case STATE_HEURE:
			  			  ssd1306_Fill(Black);
 8005a5c:	2000      	movs	r0, #0
 8005a5e:	f7fe faad 	bl	8003fbc <ssd1306_Fill>
			  			  nmea_parse(&myData, DataBuffer);
 8005a62:	4999      	ldr	r1, [pc, #612]	@ (8005cc8 <statemachine+0x13a0>)
 8005a64:	4899      	ldr	r0, [pc, #612]	@ (8005ccc <statemachine+0x13a4>)
 8005a66:	f7fd fd39 	bl	80034dc <nmea_parse>
			  			  if(settimeen==0){
 8005a6a:	4b99      	ldr	r3, [pc, #612]	@ (8005cd0 <statemachine+0x13a8>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d141      	bne.n	8005af6 <statemachine+0x11ce>

			  							settimeen=1;
 8005a72:	4b97      	ldr	r3, [pc, #604]	@ (8005cd0 <statemachine+0x13a8>)
 8005a74:	2201      	movs	r2, #1
 8005a76:	601a      	str	r2, [r3, #0]
			  							HR=(myData.lastMeasure[0]&0x0f)*10+(myData.lastMeasure[1]&0x0f);
 8005a78:	4b94      	ldr	r3, [pc, #592]	@ (8005ccc <statemachine+0x13a4>)
 8005a7a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8005a7e:	f003 030f 	and.w	r3, r3, #15
 8005a82:	b2db      	uxtb	r3, r3
 8005a84:	461a      	mov	r2, r3
 8005a86:	0092      	lsls	r2, r2, #2
 8005a88:	4413      	add	r3, r2
 8005a8a:	005b      	lsls	r3, r3, #1
 8005a8c:	b2da      	uxtb	r2, r3
 8005a8e:	4b8f      	ldr	r3, [pc, #572]	@ (8005ccc <statemachine+0x13a4>)
 8005a90:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005a94:	f003 030f 	and.w	r3, r3, #15
 8005a98:	b2db      	uxtb	r3, r3
 8005a9a:	4413      	add	r3, r2
 8005a9c:	b2da      	uxtb	r2, r3
 8005a9e:	4b8d      	ldr	r3, [pc, #564]	@ (8005cd4 <statemachine+0x13ac>)
 8005aa0:	701a      	strb	r2, [r3, #0]
			  							MINUTE=(myData.lastMeasure[2]&0x0f)*10+(myData.lastMeasure[3]&0x0f);
 8005aa2:	4b8a      	ldr	r3, [pc, #552]	@ (8005ccc <statemachine+0x13a4>)
 8005aa4:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8005aa8:	f003 030f 	and.w	r3, r3, #15
 8005aac:	b2db      	uxtb	r3, r3
 8005aae:	461a      	mov	r2, r3
 8005ab0:	0092      	lsls	r2, r2, #2
 8005ab2:	4413      	add	r3, r2
 8005ab4:	005b      	lsls	r3, r3, #1
 8005ab6:	b2da      	uxtb	r2, r3
 8005ab8:	4b84      	ldr	r3, [pc, #528]	@ (8005ccc <statemachine+0x13a4>)
 8005aba:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8005abe:	f003 030f 	and.w	r3, r3, #15
 8005ac2:	b2db      	uxtb	r3, r3
 8005ac4:	4413      	add	r3, r2
 8005ac6:	b2da      	uxtb	r2, r3
 8005ac8:	4b83      	ldr	r3, [pc, #524]	@ (8005cd8 <statemachine+0x13b0>)
 8005aca:	701a      	strb	r2, [r3, #0]
			  							SEC=(myData.lastMeasure[4]&0x0f)*10+(myData.lastMeasure[5]&0x0f);
 8005acc:	4b7f      	ldr	r3, [pc, #508]	@ (8005ccc <statemachine+0x13a4>)
 8005ace:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005ad2:	f003 030f 	and.w	r3, r3, #15
 8005ad6:	b2db      	uxtb	r3, r3
 8005ad8:	461a      	mov	r2, r3
 8005ada:	0092      	lsls	r2, r2, #2
 8005adc:	4413      	add	r3, r2
 8005ade:	005b      	lsls	r3, r3, #1
 8005ae0:	b2da      	uxtb	r2, r3
 8005ae2:	4b7a      	ldr	r3, [pc, #488]	@ (8005ccc <statemachine+0x13a4>)
 8005ae4:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8005ae8:	f003 030f 	and.w	r3, r3, #15
 8005aec:	b2db      	uxtb	r3, r3
 8005aee:	4413      	add	r3, r2
 8005af0:	b2da      	uxtb	r2, r3
 8005af2:	4b7a      	ldr	r3, [pc, #488]	@ (8005cdc <statemachine+0x13b4>)
 8005af4:	701a      	strb	r2, [r3, #0]


			  					  }


			  				  ssd1306_SetCursor(32, 32);
 8005af6:	2120      	movs	r1, #32
 8005af8:	2020      	movs	r0, #32
 8005afa:	f7fe fba1 	bl	8004240 <ssd1306_SetCursor>
			  				  ssd1306_WriteString("hr GMT:", Font_6x8, White);
 8005afe:	4a78      	ldr	r2, [pc, #480]	@ (8005ce0 <statemachine+0x13b8>)
 8005b00:	2301      	movs	r3, #1
 8005b02:	ca06      	ldmia	r2, {r1, r2}
 8005b04:	4877      	ldr	r0, [pc, #476]	@ (8005ce4 <statemachine+0x13bc>)
 8005b06:	f7fe fb75 	bl	80041f4 <ssd1306_WriteString>
			  				ssd1306_SetCursor(32, 42);
 8005b0a:	212a      	movs	r1, #42	@ 0x2a
 8005b0c:	2020      	movs	r0, #32
 8005b0e:	f7fe fb97 	bl	8004240 <ssd1306_SetCursor>
			  				snprintf((char *)bufferscreen,15, "%02d:%02d",HR,MINUTE);
 8005b12:	4b70      	ldr	r3, [pc, #448]	@ (8005cd4 <statemachine+0x13ac>)
 8005b14:	781b      	ldrb	r3, [r3, #0]
 8005b16:	461a      	mov	r2, r3
 8005b18:	4b6f      	ldr	r3, [pc, #444]	@ (8005cd8 <statemachine+0x13b0>)
 8005b1a:	781b      	ldrb	r3, [r3, #0]
 8005b1c:	9300      	str	r3, [sp, #0]
 8005b1e:	4613      	mov	r3, r2
 8005b20:	4a71      	ldr	r2, [pc, #452]	@ (8005ce8 <statemachine+0x13c0>)
 8005b22:	210f      	movs	r1, #15
 8005b24:	4871      	ldr	r0, [pc, #452]	@ (8005cec <statemachine+0x13c4>)
 8005b26:	f015 fc5d 	bl	801b3e4 <sniprintf>
			  				ssd1306_WriteString((char *)bufferscreen, Font_7x10, White);
 8005b2a:	4a71      	ldr	r2, [pc, #452]	@ (8005cf0 <statemachine+0x13c8>)
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	ca06      	ldmia	r2, {r1, r2}
 8005b30:	486e      	ldr	r0, [pc, #440]	@ (8005cec <statemachine+0x13c4>)
 8005b32:	f7fe fb5f 	bl	80041f4 <ssd1306_WriteString>
			  				ssd1306_SetCursor(32, 52);
 8005b36:	2134      	movs	r1, #52	@ 0x34
 8005b38:	2020      	movs	r0, #32
 8005b3a:	f7fe fb81 	bl	8004240 <ssd1306_SetCursor>
			  				snprintf((char *)bufferscreen,15, "%02d sec",SEC);
 8005b3e:	4b67      	ldr	r3, [pc, #412]	@ (8005cdc <statemachine+0x13b4>)
 8005b40:	781b      	ldrb	r3, [r3, #0]
 8005b42:	4a6c      	ldr	r2, [pc, #432]	@ (8005cf4 <statemachine+0x13cc>)
 8005b44:	210f      	movs	r1, #15
 8005b46:	4869      	ldr	r0, [pc, #420]	@ (8005cec <statemachine+0x13c4>)
 8005b48:	f015 fc4c 	bl	801b3e4 <sniprintf>
			  				ssd1306_WriteString((char *)bufferscreen, Font_7x10, White);
 8005b4c:	4a68      	ldr	r2, [pc, #416]	@ (8005cf0 <statemachine+0x13c8>)
 8005b4e:	2301      	movs	r3, #1
 8005b50:	ca06      	ldmia	r2, {r1, r2}
 8005b52:	4866      	ldr	r0, [pc, #408]	@ (8005cec <statemachine+0x13c4>)
 8005b54:	f7fe fb4e 	bl	80041f4 <ssd1306_WriteString>
			  				if(BTN_B>=1){
 8005b58:	4b67      	ldr	r3, [pc, #412]	@ (8005cf8 <statemachine+0x13d0>)
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	dd20      	ble.n	8005ba2 <statemachine+0x127a>
			  					posstate--;
 8005b60:	4b66      	ldr	r3, [pc, #408]	@ (8005cfc <statemachine+0x13d4>)
 8005b62:	781b      	ldrb	r3, [r3, #0]
 8005b64:	3b01      	subs	r3, #1
 8005b66:	b2da      	uxtb	r2, r3
 8005b68:	4b64      	ldr	r3, [pc, #400]	@ (8005cfc <statemachine+0x13d4>)
 8005b6a:	701a      	strb	r2, [r3, #0]
			  					posstate--;
 8005b6c:	4b63      	ldr	r3, [pc, #396]	@ (8005cfc <statemachine+0x13d4>)
 8005b6e:	781b      	ldrb	r3, [r3, #0]
 8005b70:	3b01      	subs	r3, #1
 8005b72:	b2da      	uxtb	r2, r3
 8005b74:	4b61      	ldr	r3, [pc, #388]	@ (8005cfc <statemachine+0x13d4>)
 8005b76:	701a      	strb	r2, [r3, #0]
			  					posstate--;
 8005b78:	4b60      	ldr	r3, [pc, #384]	@ (8005cfc <statemachine+0x13d4>)
 8005b7a:	781b      	ldrb	r3, [r3, #0]
 8005b7c:	3b01      	subs	r3, #1
 8005b7e:	b2da      	uxtb	r2, r3
 8005b80:	4b5e      	ldr	r3, [pc, #376]	@ (8005cfc <statemachine+0x13d4>)
 8005b82:	701a      	strb	r2, [r3, #0]
			  					posstate--;
 8005b84:	4b5d      	ldr	r3, [pc, #372]	@ (8005cfc <statemachine+0x13d4>)
 8005b86:	781b      	ldrb	r3, [r3, #0]
 8005b88:	3b01      	subs	r3, #1
 8005b8a:	b2da      	uxtb	r2, r3
 8005b8c:	4b5b      	ldr	r3, [pc, #364]	@ (8005cfc <statemachine+0x13d4>)
 8005b8e:	701a      	strb	r2, [r3, #0]
			  					posstate--;
 8005b90:	4b5a      	ldr	r3, [pc, #360]	@ (8005cfc <statemachine+0x13d4>)
 8005b92:	781b      	ldrb	r3, [r3, #0]
 8005b94:	3b01      	subs	r3, #1
 8005b96:	b2da      	uxtb	r2, r3
 8005b98:	4b58      	ldr	r3, [pc, #352]	@ (8005cfc <statemachine+0x13d4>)
 8005b9a:	701a      	strb	r2, [r3, #0]
			  					BTN_B=0;
 8005b9c:	4b56      	ldr	r3, [pc, #344]	@ (8005cf8 <statemachine+0x13d0>)
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	601a      	str	r2, [r3, #0]
			  				}
			  				if(BTN_B_LONG>=1){
 8005ba2:	4b57      	ldr	r3, [pc, #348]	@ (8005d00 <statemachine+0x13d8>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	dd13      	ble.n	8005bd2 <statemachine+0x12aa>
			  							  					posstate--;
 8005baa:	4b54      	ldr	r3, [pc, #336]	@ (8005cfc <statemachine+0x13d4>)
 8005bac:	781b      	ldrb	r3, [r3, #0]
 8005bae:	3b01      	subs	r3, #1
 8005bb0:	b2da      	uxtb	r2, r3
 8005bb2:	4b52      	ldr	r3, [pc, #328]	@ (8005cfc <statemachine+0x13d4>)
 8005bb4:	701a      	strb	r2, [r3, #0]
			  							  					BTN_B_LONG=0;
 8005bb6:	4b52      	ldr	r3, [pc, #328]	@ (8005d00 <statemachine+0x13d8>)
 8005bb8:	2200      	movs	r2, #0
 8005bba:	601a      	str	r2, [r3, #0]
			  							  				}
			  			break;
 8005bbc:	e009      	b.n	8005bd2 <statemachine+0x12aa>
				  break;
 8005bbe:	bf00      	nop
 8005bc0:	e008      	b.n	8005bd4 <statemachine+0x12ac>
				  break;
 8005bc2:	bf00      	nop
 8005bc4:	e006      	b.n	8005bd4 <statemachine+0x12ac>
				  break;
 8005bc6:	bf00      	nop
 8005bc8:	e004      	b.n	8005bd4 <statemachine+0x12ac>
				  break;
 8005bca:	bf00      	nop
 8005bcc:	e002      	b.n	8005bd4 <statemachine+0x12ac>
				  break;
 8005bce:	bf00      	nop
 8005bd0:	e000      	b.n	8005bd4 <statemachine+0x12ac>
			  			break;
 8005bd2:	bf00      	nop
			  }

					if(BTN_A>=1){
 8005bd4:	4b4b      	ldr	r3, [pc, #300]	@ (8005d04 <statemachine+0x13dc>)
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	dd0b      	ble.n	8005bf4 <statemachine+0x12cc>
							state++;
 8005bdc:	4b4a      	ldr	r3, [pc, #296]	@ (8005d08 <statemachine+0x13e0>)
 8005bde:	781b      	ldrb	r3, [r3, #0]
 8005be0:	3301      	adds	r3, #1
 8005be2:	b2da      	uxtb	r2, r3
 8005be4:	4b48      	ldr	r3, [pc, #288]	@ (8005d08 <statemachine+0x13e0>)
 8005be6:	701a      	strb	r2, [r3, #0]
							BTN_A=0;
 8005be8:	4b46      	ldr	r3, [pc, #280]	@ (8005d04 <statemachine+0x13dc>)
 8005bea:	2200      	movs	r2, #0
 8005bec:	601a      	str	r2, [r3, #0]
							BTN_B=0;
 8005bee:	4b42      	ldr	r3, [pc, #264]	@ (8005cf8 <statemachine+0x13d0>)
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	601a      	str	r2, [r3, #0]


						}
					if(BTN_A_LONG>=1){
 8005bf4:	4b45      	ldr	r3, [pc, #276]	@ (8005d0c <statemachine+0x13e4>)
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	f340 8482 	ble.w	8006502 <statemachine+0x1bda>
									 									 									  			 	state--;
 8005bfe:	4b42      	ldr	r3, [pc, #264]	@ (8005d08 <statemachine+0x13e0>)
 8005c00:	781b      	ldrb	r3, [r3, #0]
 8005c02:	3b01      	subs	r3, #1
 8005c04:	b2da      	uxtb	r2, r3
 8005c06:	4b40      	ldr	r3, [pc, #256]	@ (8005d08 <statemachine+0x13e0>)
 8005c08:	701a      	strb	r2, [r3, #0]
									 									 									  			 	BTN_A=0;
 8005c0a:	4b3e      	ldr	r3, [pc, #248]	@ (8005d04 <statemachine+0x13dc>)
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	601a      	str	r2, [r3, #0]
									 									 									  			 	BTN_B=0;
 8005c10:	4b39      	ldr	r3, [pc, #228]	@ (8005cf8 <statemachine+0x13d0>)
 8005c12:	2200      	movs	r2, #0
 8005c14:	601a      	str	r2, [r3, #0]
									 									 									  			 	BTN_A_LONG=0;
 8005c16:	4b3d      	ldr	r3, [pc, #244]	@ (8005d0c <statemachine+0x13e4>)
 8005c18:	2200      	movs	r2, #0
 8005c1a:	601a      	str	r2, [r3, #0]
									 									 									  	}
			  break;
 8005c1c:	f000 bc71 	b.w	8006502 <statemachine+0x1bda>
		  case STATE_CHRONOMETER:

			  ssd1306_Fill(Black);
 8005c20:	2000      	movs	r0, #0
 8005c22:	f7fe f9cb 	bl	8003fbc <ssd1306_Fill>
			  ssd1306_SetCursor(32, 32);
 8005c26:	2120      	movs	r1, #32
 8005c28:	2020      	movs	r0, #32
 8005c2a:	f7fe fb09 	bl	8004240 <ssd1306_SetCursor>
			  ssd1306_WriteString("chrono", Font_6x8, White);
 8005c2e:	4a2c      	ldr	r2, [pc, #176]	@ (8005ce0 <statemachine+0x13b8>)
 8005c30:	2301      	movs	r3, #1
 8005c32:	ca06      	ldmia	r2, {r1, r2}
 8005c34:	4836      	ldr	r0, [pc, #216]	@ (8005d10 <statemachine+0x13e8>)
 8005c36:	f7fe fadd 	bl	80041f4 <ssd1306_WriteString>
			  ssd1306_SetCursor(32,40);
 8005c3a:	2128      	movs	r1, #40	@ 0x28
 8005c3c:	2020      	movs	r0, #32
 8005c3e:	f7fe faff 	bl	8004240 <ssd1306_SetCursor>

			  switch(chronostate){
 8005c42:	4b34      	ldr	r3, [pc, #208]	@ (8005d14 <statemachine+0x13ec>)
 8005c44:	781b      	ldrb	r3, [r3, #0]
 8005c46:	2b02      	cmp	r3, #2
 8005c48:	d072      	beq.n	8005d30 <statemachine+0x1408>
 8005c4a:	2b02      	cmp	r3, #2
 8005c4c:	f300 80a1 	bgt.w	8005d92 <statemachine+0x146a>
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d002      	beq.n	8005c5a <statemachine+0x1332>
 8005c54:	2b01      	cmp	r3, #1
 8005c56:	d01e      	beq.n	8005c96 <statemachine+0x136e>
 8005c58:	e09b      	b.n	8005d92 <statemachine+0x146a>
			  case STATE_RESET:
				  min=0;
 8005c5a:	4b2f      	ldr	r3, [pc, #188]	@ (8005d18 <statemachine+0x13f0>)
 8005c5c:	f04f 0200 	mov.w	r2, #0
 8005c60:	601a      	str	r2, [r3, #0]
				  seconde=0;
 8005c62:	4b2e      	ldr	r3, [pc, #184]	@ (8005d1c <statemachine+0x13f4>)
 8005c64:	f04f 0200 	mov.w	r2, #0
 8005c68:	601a      	str	r2, [r3, #0]
				  calctime=0;
 8005c6a:	4b2d      	ldr	r3, [pc, #180]	@ (8005d20 <statemachine+0x13f8>)
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	601a      	str	r2, [r3, #0]

				  	 if(BTN_B>=1){
 8005c70:	4b21      	ldr	r3, [pc, #132]	@ (8005cf8 <statemachine+0x13d0>)
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	f340 8087 	ble.w	8005d88 <statemachine+0x1460>
				  		chronostate++;
 8005c7a:	4b26      	ldr	r3, [pc, #152]	@ (8005d14 <statemachine+0x13ec>)
 8005c7c:	781b      	ldrb	r3, [r3, #0]
 8005c7e:	3301      	adds	r3, #1
 8005c80:	b2da      	uxtb	r2, r3
 8005c82:	4b24      	ldr	r3, [pc, #144]	@ (8005d14 <statemachine+0x13ec>)
 8005c84:	701a      	strb	r2, [r3, #0]
				  		BTN_B=0;
 8005c86:	4b1c      	ldr	r3, [pc, #112]	@ (8005cf8 <statemachine+0x13d0>)
 8005c88:	2200      	movs	r2, #0
 8005c8a:	601a      	str	r2, [r3, #0]
				  		starttime=uwTick;
 8005c8c:	4b25      	ldr	r3, [pc, #148]	@ (8005d24 <statemachine+0x13fc>)
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4a25      	ldr	r2, [pc, #148]	@ (8005d28 <statemachine+0x1400>)
 8005c92:	6013      	str	r3, [r2, #0]

				  }


				  break;
 8005c94:	e078      	b.n	8005d88 <statemachine+0x1460>
			  case STATE_RUN:
				  calctime=uwTick-starttime+timehandler;
 8005c96:	4b23      	ldr	r3, [pc, #140]	@ (8005d24 <statemachine+0x13fc>)
 8005c98:	681a      	ldr	r2, [r3, #0]
 8005c9a:	4b23      	ldr	r3, [pc, #140]	@ (8005d28 <statemachine+0x1400>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	1ad2      	subs	r2, r2, r3
 8005ca0:	4b22      	ldr	r3, [pc, #136]	@ (8005d2c <statemachine+0x1404>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	4413      	add	r3, r2
 8005ca6:	4a1e      	ldr	r2, [pc, #120]	@ (8005d20 <statemachine+0x13f8>)
 8005ca8:	6013      	str	r3, [r2, #0]

				  if(BTN_B>=1){
 8005caa:	4b13      	ldr	r3, [pc, #76]	@ (8005cf8 <statemachine+0x13d0>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	dd6c      	ble.n	8005d8c <statemachine+0x1464>
				  		chronostate++;
 8005cb2:	4b18      	ldr	r3, [pc, #96]	@ (8005d14 <statemachine+0x13ec>)
 8005cb4:	781b      	ldrb	r3, [r3, #0]
 8005cb6:	3301      	adds	r3, #1
 8005cb8:	b2da      	uxtb	r2, r3
 8005cba:	4b16      	ldr	r3, [pc, #88]	@ (8005d14 <statemachine+0x13ec>)
 8005cbc:	701a      	strb	r2, [r3, #0]
				  		BTN_B=0;
 8005cbe:	4b0e      	ldr	r3, [pc, #56]	@ (8005cf8 <statemachine+0x13d0>)
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	601a      	str	r2, [r3, #0]
			  }


				  break;
 8005cc4:	e062      	b.n	8005d8c <statemachine+0x1464>
 8005cc6:	bf00      	nop
 8005cc8:	20000638 	.word	0x20000638
 8005ccc:	20000840 	.word	0x20000840
 8005cd0:	20000ba0 	.word	0x20000ba0
 8005cd4:	20000b9d 	.word	0x20000b9d
 8005cd8:	20000b9e 	.word	0x20000b9e
 8005cdc:	20000b9c 	.word	0x20000b9c
 8005ce0:	20000014 	.word	0x20000014
 8005ce4:	08020044 	.word	0x08020044
 8005ce8:	0802004c 	.word	0x0802004c
 8005cec:	20000ae0 	.word	0x20000ae0
 8005cf0:	2000001c 	.word	0x2000001c
 8005cf4:	08020058 	.word	0x08020058
 8005cf8:	20000884 	.word	0x20000884
 8005cfc:	200005ee 	.word	0x200005ee
 8005d00:	20000bb4 	.word	0x20000bb4
 8005d04:	20000880 	.word	0x20000880
 8005d08:	200005ec 	.word	0x200005ec
 8005d0c:	20000bb8 	.word	0x20000bb8
 8005d10:	08020064 	.word	0x08020064
 8005d14:	200005ef 	.word	0x200005ef
 8005d18:	20000b5c 	.word	0x20000b5c
 8005d1c:	20000b58 	.word	0x20000b58
 8005d20:	20000b64 	.word	0x20000b64
 8005d24:	200014d8 	.word	0x200014d8
 8005d28:	20000b60 	.word	0x20000b60
 8005d2c:	20000b68 	.word	0x20000b68
			  case STATE_PAUSE:
				  timehandler=calctime;
 8005d30:	4b88      	ldr	r3, [pc, #544]	@ (8005f54 <statemachine+0x162c>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4a88      	ldr	r2, [pc, #544]	@ (8005f58 <statemachine+0x1630>)
 8005d36:	6013      	str	r3, [r2, #0]

				  if(BTN_B>=1){
 8005d38:	4b88      	ldr	r3, [pc, #544]	@ (8005f5c <statemachine+0x1634>)
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	dd0c      	ble.n	8005d5a <statemachine+0x1432>
				  			chronostate--;
 8005d40:	4b87      	ldr	r3, [pc, #540]	@ (8005f60 <statemachine+0x1638>)
 8005d42:	781b      	ldrb	r3, [r3, #0]
 8005d44:	3b01      	subs	r3, #1
 8005d46:	b2da      	uxtb	r2, r3
 8005d48:	4b85      	ldr	r3, [pc, #532]	@ (8005f60 <statemachine+0x1638>)
 8005d4a:	701a      	strb	r2, [r3, #0]
				  			BTN_B=0;
 8005d4c:	4b83      	ldr	r3, [pc, #524]	@ (8005f5c <statemachine+0x1634>)
 8005d4e:	2200      	movs	r2, #0
 8005d50:	601a      	str	r2, [r3, #0]
				  			starttime=uwTick;
 8005d52:	4b84      	ldr	r3, [pc, #528]	@ (8005f64 <statemachine+0x163c>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4a84      	ldr	r2, [pc, #528]	@ (8005f68 <statemachine+0x1640>)
 8005d58:	6013      	str	r3, [r2, #0]

			 }
				  if(BTN_B_LONG>=1){
 8005d5a:	4b84      	ldr	r3, [pc, #528]	@ (8005f6c <statemachine+0x1644>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	dd16      	ble.n	8005d90 <statemachine+0x1468>
				  				  	chronostate--;
 8005d62:	4b7f      	ldr	r3, [pc, #508]	@ (8005f60 <statemachine+0x1638>)
 8005d64:	781b      	ldrb	r3, [r3, #0]
 8005d66:	3b01      	subs	r3, #1
 8005d68:	b2da      	uxtb	r2, r3
 8005d6a:	4b7d      	ldr	r3, [pc, #500]	@ (8005f60 <statemachine+0x1638>)
 8005d6c:	701a      	strb	r2, [r3, #0]
				  				  	chronostate--;
 8005d6e:	4b7c      	ldr	r3, [pc, #496]	@ (8005f60 <statemachine+0x1638>)
 8005d70:	781b      	ldrb	r3, [r3, #0]
 8005d72:	3b01      	subs	r3, #1
 8005d74:	b2da      	uxtb	r2, r3
 8005d76:	4b7a      	ldr	r3, [pc, #488]	@ (8005f60 <statemachine+0x1638>)
 8005d78:	701a      	strb	r2, [r3, #0]
				  				  	BTN_B_LONG=0;
 8005d7a:	4b7c      	ldr	r3, [pc, #496]	@ (8005f6c <statemachine+0x1644>)
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	601a      	str	r2, [r3, #0]
				  				  	timehandler=0;
 8005d80:	4b75      	ldr	r3, [pc, #468]	@ (8005f58 <statemachine+0x1630>)
 8005d82:	2200      	movs	r2, #0
 8005d84:	601a      	str	r2, [r3, #0]
				  			 }


				  break;
 8005d86:	e003      	b.n	8005d90 <statemachine+0x1468>
				  break;
 8005d88:	bf00      	nop
 8005d8a:	e002      	b.n	8005d92 <statemachine+0x146a>
				  break;
 8005d8c:	bf00      	nop
 8005d8e:	e000      	b.n	8005d92 <statemachine+0x146a>
				  break;
 8005d90:	bf00      	nop
			  }

			  min=floor((float) calctime/60000);
 8005d92:	4b70      	ldr	r3, [pc, #448]	@ (8005f54 <statemachine+0x162c>)
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	ee07 3a90 	vmov	s15, r3
 8005d9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d9e:	ed9f 7a74 	vldr	s14, [pc, #464]	@ 8005f70 <statemachine+0x1648>
 8005da2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005da6:	ee16 0a90 	vmov	r0, s13
 8005daa:	f7fa fba5 	bl	80004f8 <__aeabi_f2d>
 8005dae:	4602      	mov	r2, r0
 8005db0:	460b      	mov	r3, r1
 8005db2:	ec43 2b10 	vmov	d0, r2, r3
 8005db6:	f018 fa47 	bl	801e248 <floor>
 8005dba:	ec53 2b10 	vmov	r2, r3, d0
 8005dbe:	4610      	mov	r0, r2
 8005dc0:	4619      	mov	r1, r3
 8005dc2:	f7fa fee9 	bl	8000b98 <__aeabi_d2f>
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	4a6a      	ldr	r2, [pc, #424]	@ (8005f74 <statemachine+0x164c>)
 8005dca:	6013      	str	r3, [r2, #0]
			  seconde=(float) ((calctime-(min*60000))/1000);
 8005dcc:	4b61      	ldr	r3, [pc, #388]	@ (8005f54 <statemachine+0x162c>)
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	ee07 3a90 	vmov	s15, r3
 8005dd4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005dd8:	4b66      	ldr	r3, [pc, #408]	@ (8005f74 <statemachine+0x164c>)
 8005dda:	edd3 7a00 	vldr	s15, [r3]
 8005dde:	eddf 6a64 	vldr	s13, [pc, #400]	@ 8005f70 <statemachine+0x1648>
 8005de2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005de6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005dea:	eddf 6a63 	vldr	s13, [pc, #396]	@ 8005f78 <statemachine+0x1650>
 8005dee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005df2:	4b62      	ldr	r3, [pc, #392]	@ (8005f7c <statemachine+0x1654>)
 8005df4:	edc3 7a00 	vstr	s15, [r3]
			  snprintf((char *)bufferscreen,15, "%0.0fmin",min);
 8005df8:	4b5e      	ldr	r3, [pc, #376]	@ (8005f74 <statemachine+0x164c>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	f7fa fb7b 	bl	80004f8 <__aeabi_f2d>
 8005e02:	4602      	mov	r2, r0
 8005e04:	460b      	mov	r3, r1
 8005e06:	e9cd 2300 	strd	r2, r3, [sp]
 8005e0a:	4a5d      	ldr	r2, [pc, #372]	@ (8005f80 <statemachine+0x1658>)
 8005e0c:	210f      	movs	r1, #15
 8005e0e:	485d      	ldr	r0, [pc, #372]	@ (8005f84 <statemachine+0x165c>)
 8005e10:	f015 fae8 	bl	801b3e4 <sniprintf>
			  ssd1306_WriteString((char *)bufferscreen, Font_7x10, White);
 8005e14:	4a5c      	ldr	r2, [pc, #368]	@ (8005f88 <statemachine+0x1660>)
 8005e16:	2301      	movs	r3, #1
 8005e18:	ca06      	ldmia	r2, {r1, r2}
 8005e1a:	485a      	ldr	r0, [pc, #360]	@ (8005f84 <statemachine+0x165c>)
 8005e1c:	f7fe f9ea 	bl	80041f4 <ssd1306_WriteString>
			  ssd1306_SetCursor(32, 50);
 8005e20:	2132      	movs	r1, #50	@ 0x32
 8005e22:	2020      	movs	r0, #32
 8005e24:	f7fe fa0c 	bl	8004240 <ssd1306_SetCursor>
			  snprintf((char *)bufferscreen,15, "%0.3fs",seconde);
 8005e28:	4b54      	ldr	r3, [pc, #336]	@ (8005f7c <statemachine+0x1654>)
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	f7fa fb63 	bl	80004f8 <__aeabi_f2d>
 8005e32:	4602      	mov	r2, r0
 8005e34:	460b      	mov	r3, r1
 8005e36:	e9cd 2300 	strd	r2, r3, [sp]
 8005e3a:	4a54      	ldr	r2, [pc, #336]	@ (8005f8c <statemachine+0x1664>)
 8005e3c:	210f      	movs	r1, #15
 8005e3e:	4851      	ldr	r0, [pc, #324]	@ (8005f84 <statemachine+0x165c>)
 8005e40:	f015 fad0 	bl	801b3e4 <sniprintf>
			  ssd1306_WriteString((char *)bufferscreen, Font_7x10, White);
 8005e44:	4a50      	ldr	r2, [pc, #320]	@ (8005f88 <statemachine+0x1660>)
 8005e46:	2301      	movs	r3, #1
 8005e48:	ca06      	ldmia	r2, {r1, r2}
 8005e4a:	484e      	ldr	r0, [pc, #312]	@ (8005f84 <statemachine+0x165c>)
 8005e4c:	f7fe f9d2 	bl	80041f4 <ssd1306_WriteString>


			  if(BTN_A>=1){
 8005e50:	4b4f      	ldr	r3, [pc, #316]	@ (8005f90 <statemachine+0x1668>)
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	dd0b      	ble.n	8005e70 <statemachine+0x1548>
			 	state++;
 8005e58:	4b4e      	ldr	r3, [pc, #312]	@ (8005f94 <statemachine+0x166c>)
 8005e5a:	781b      	ldrb	r3, [r3, #0]
 8005e5c:	3301      	adds	r3, #1
 8005e5e:	b2da      	uxtb	r2, r3
 8005e60:	4b4c      	ldr	r3, [pc, #304]	@ (8005f94 <statemachine+0x166c>)
 8005e62:	701a      	strb	r2, [r3, #0]
			 	BTN_A=0;
 8005e64:	4b4a      	ldr	r3, [pc, #296]	@ (8005f90 <statemachine+0x1668>)
 8005e66:	2200      	movs	r2, #0
 8005e68:	601a      	str	r2, [r3, #0]
			 	BTN_B=0;
 8005e6a:	4b3c      	ldr	r3, [pc, #240]	@ (8005f5c <statemachine+0x1634>)
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	601a      	str	r2, [r3, #0]


	}
			  if(BTN_A_LONG>=1){
 8005e70:	4b49      	ldr	r3, [pc, #292]	@ (8005f98 <statemachine+0x1670>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	f340 8346 	ble.w	8006506 <statemachine+0x1bde>
			  				 									 									  			 	state--;
 8005e7a:	4b46      	ldr	r3, [pc, #280]	@ (8005f94 <statemachine+0x166c>)
 8005e7c:	781b      	ldrb	r3, [r3, #0]
 8005e7e:	3b01      	subs	r3, #1
 8005e80:	b2da      	uxtb	r2, r3
 8005e82:	4b44      	ldr	r3, [pc, #272]	@ (8005f94 <statemachine+0x166c>)
 8005e84:	701a      	strb	r2, [r3, #0]
			  				 									 									  			 	BTN_A=0;
 8005e86:	4b42      	ldr	r3, [pc, #264]	@ (8005f90 <statemachine+0x1668>)
 8005e88:	2200      	movs	r2, #0
 8005e8a:	601a      	str	r2, [r3, #0]
			  				 									 									  			 	BTN_B=0;
 8005e8c:	4b33      	ldr	r3, [pc, #204]	@ (8005f5c <statemachine+0x1634>)
 8005e8e:	2200      	movs	r2, #0
 8005e90:	601a      	str	r2, [r3, #0]
			  				 									 									  			 	BTN_A_LONG=0;
 8005e92:	4b41      	ldr	r3, [pc, #260]	@ (8005f98 <statemachine+0x1670>)
 8005e94:	2200      	movs	r2, #0
 8005e96:	601a      	str	r2, [r3, #0]
			  				 									 									  	}
			  break;
 8005e98:	e335      	b.n	8006506 <statemachine+0x1bde>




			  case STATE_USB:
				  ssd1306_Fill(Black);
 8005e9a:	2000      	movs	r0, #0
 8005e9c:	f7fe f88e 	bl	8003fbc <ssd1306_Fill>
				  ssd1306_SetCursor(32,32);
 8005ea0:	2120      	movs	r1, #32
 8005ea2:	2020      	movs	r0, #32
 8005ea4:	f7fe f9cc 	bl	8004240 <ssd1306_SetCursor>
				  ssd1306_WriteString("usb",Font_6x8,White);
 8005ea8:	4a3c      	ldr	r2, [pc, #240]	@ (8005f9c <statemachine+0x1674>)
 8005eaa:	2301      	movs	r3, #1
 8005eac:	ca06      	ldmia	r2, {r1, r2}
 8005eae:	483c      	ldr	r0, [pc, #240]	@ (8005fa0 <statemachine+0x1678>)
 8005eb0:	f7fe f9a0 	bl	80041f4 <ssd1306_WriteString>
				  switch(usbstate){
 8005eb4:	4b3b      	ldr	r3, [pc, #236]	@ (8005fa4 <statemachine+0x167c>)
 8005eb6:	781b      	ldrb	r3, [r3, #0]
 8005eb8:	2b02      	cmp	r3, #2
 8005eba:	f000 815a 	beq.w	8006172 <statemachine+0x184a>
 8005ebe:	2b02      	cmp	r3, #2
 8005ec0:	f300 8323 	bgt.w	800650a <statemachine+0x1be2>
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d002      	beq.n	8005ece <statemachine+0x15a6>
 8005ec8:	2b01      	cmp	r3, #1
 8005eca:	d071      	beq.n	8005fb0 <statemachine+0x1688>
				 									 									  			 	BTN_B=0;
				 									 									  			 	BTN_A_LONG=0;
				 									 									  	}
				 					 break;
				 				  }
				  break;
 8005ecc:	e31d      	b.n	800650a <statemachine+0x1be2>
				 					  ssd1306_SetCursor(32,40);
 8005ece:	2128      	movs	r1, #40	@ 0x28
 8005ed0:	2020      	movs	r0, #32
 8005ed2:	f7fe f9b5 	bl	8004240 <ssd1306_SetCursor>
				 					  ssd1306_WriteString("do nothing",Font_6x8,White);
 8005ed6:	4a31      	ldr	r2, [pc, #196]	@ (8005f9c <statemachine+0x1674>)
 8005ed8:	2301      	movs	r3, #1
 8005eda:	ca06      	ldmia	r2, {r1, r2}
 8005edc:	4832      	ldr	r0, [pc, #200]	@ (8005fa8 <statemachine+0x1680>)
 8005ede:	f7fe f989 	bl	80041f4 <ssd1306_WriteString>
				 					  usbtransmiten=0;
 8005ee2:	4b32      	ldr	r3, [pc, #200]	@ (8005fac <statemachine+0x1684>)
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	601a      	str	r2, [r3, #0]
				 					  if(BTN_B>=1){
 8005ee8:	4b1c      	ldr	r3, [pc, #112]	@ (8005f5c <statemachine+0x1634>)
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	dd0b      	ble.n	8005f08 <statemachine+0x15e0>
				 						  usbstate++;
 8005ef0:	4b2c      	ldr	r3, [pc, #176]	@ (8005fa4 <statemachine+0x167c>)
 8005ef2:	781b      	ldrb	r3, [r3, #0]
 8005ef4:	3301      	adds	r3, #1
 8005ef6:	b2da      	uxtb	r2, r3
 8005ef8:	4b2a      	ldr	r3, [pc, #168]	@ (8005fa4 <statemachine+0x167c>)
 8005efa:	701a      	strb	r2, [r3, #0]
				 						  BTN_B=0;
 8005efc:	4b17      	ldr	r3, [pc, #92]	@ (8005f5c <statemachine+0x1634>)
 8005efe:	2200      	movs	r2, #0
 8005f00:	601a      	str	r2, [r3, #0]
				 						  BTN_A=0;
 8005f02:	4b23      	ldr	r3, [pc, #140]	@ (8005f90 <statemachine+0x1668>)
 8005f04:	2200      	movs	r2, #0
 8005f06:	601a      	str	r2, [r3, #0]
				 					 if(BTN_A>=1){
 8005f08:	4b21      	ldr	r3, [pc, #132]	@ (8005f90 <statemachine+0x1668>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	dd0b      	ble.n	8005f28 <statemachine+0x1600>
				 						 state++;
 8005f10:	4b20      	ldr	r3, [pc, #128]	@ (8005f94 <statemachine+0x166c>)
 8005f12:	781b      	ldrb	r3, [r3, #0]
 8005f14:	3301      	adds	r3, #1
 8005f16:	b2da      	uxtb	r2, r3
 8005f18:	4b1e      	ldr	r3, [pc, #120]	@ (8005f94 <statemachine+0x166c>)
 8005f1a:	701a      	strb	r2, [r3, #0]
				 									  			 	BTN_A=0;
 8005f1c:	4b1c      	ldr	r3, [pc, #112]	@ (8005f90 <statemachine+0x1668>)
 8005f1e:	2200      	movs	r2, #0
 8005f20:	601a      	str	r2, [r3, #0]
				 									  			 	BTN_B=0;
 8005f22:	4b0e      	ldr	r3, [pc, #56]	@ (8005f5c <statemachine+0x1634>)
 8005f24:	2200      	movs	r2, #0
 8005f26:	601a      	str	r2, [r3, #0]
				 					if(BTN_A_LONG>=1){
 8005f28:	4b1b      	ldr	r3, [pc, #108]	@ (8005f98 <statemachine+0x1670>)
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	f340 8234 	ble.w	800639a <statemachine+0x1a72>
				 									 									 									  			 	state--;
 8005f32:	4b18      	ldr	r3, [pc, #96]	@ (8005f94 <statemachine+0x166c>)
 8005f34:	781b      	ldrb	r3, [r3, #0]
 8005f36:	3b01      	subs	r3, #1
 8005f38:	b2da      	uxtb	r2, r3
 8005f3a:	4b16      	ldr	r3, [pc, #88]	@ (8005f94 <statemachine+0x166c>)
 8005f3c:	701a      	strb	r2, [r3, #0]
				 									 									 									  			 	BTN_A=0;
 8005f3e:	4b14      	ldr	r3, [pc, #80]	@ (8005f90 <statemachine+0x1668>)
 8005f40:	2200      	movs	r2, #0
 8005f42:	601a      	str	r2, [r3, #0]
				 									 									 									  			 	BTN_B=0;
 8005f44:	4b05      	ldr	r3, [pc, #20]	@ (8005f5c <statemachine+0x1634>)
 8005f46:	2200      	movs	r2, #0
 8005f48:	601a      	str	r2, [r3, #0]
				 									 									 									  			 	BTN_A_LONG=0;
 8005f4a:	4b13      	ldr	r3, [pc, #76]	@ (8005f98 <statemachine+0x1670>)
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	601a      	str	r2, [r3, #0]
				 					  break;
 8005f50:	e223      	b.n	800639a <statemachine+0x1a72>
 8005f52:	bf00      	nop
 8005f54:	20000b64 	.word	0x20000b64
 8005f58:	20000b68 	.word	0x20000b68
 8005f5c:	20000884 	.word	0x20000884
 8005f60:	200005ef 	.word	0x200005ef
 8005f64:	200014d8 	.word	0x200014d8
 8005f68:	20000b60 	.word	0x20000b60
 8005f6c:	20000bb4 	.word	0x20000bb4
 8005f70:	476a6000 	.word	0x476a6000
 8005f74:	20000b5c 	.word	0x20000b5c
 8005f78:	447a0000 	.word	0x447a0000
 8005f7c:	20000b58 	.word	0x20000b58
 8005f80:	0802006c 	.word	0x0802006c
 8005f84:	20000ae0 	.word	0x20000ae0
 8005f88:	2000001c 	.word	0x2000001c
 8005f8c:	08020078 	.word	0x08020078
 8005f90:	20000880 	.word	0x20000880
 8005f94:	200005ec 	.word	0x200005ec
 8005f98:	20000bb8 	.word	0x20000bb8
 8005f9c:	20000014 	.word	0x20000014
 8005fa0:	08020080 	.word	0x08020080
 8005fa4:	200005f0 	.word	0x200005f0
 8005fa8:	08020084 	.word	0x08020084
 8005fac:	20000b78 	.word	0x20000b78
				 					 ssd1306_SetCursor(32,40);
 8005fb0:	2128      	movs	r1, #40	@ 0x28
 8005fb2:	2020      	movs	r0, #32
 8005fb4:	f7fe f944 	bl	8004240 <ssd1306_SetCursor>
				 					ssd1306_WriteString("Push A",Font_6x8,White);
 8005fb8:	4ab6      	ldr	r2, [pc, #728]	@ (8006294 <statemachine+0x196c>)
 8005fba:	2301      	movs	r3, #1
 8005fbc:	ca06      	ldmia	r2, {r1, r2}
 8005fbe:	48b6      	ldr	r0, [pc, #728]	@ (8006298 <statemachine+0x1970>)
 8005fc0:	f7fe f918 	bl	80041f4 <ssd1306_WriteString>
				 					ssd1306_SetCursor(32,48);
 8005fc4:	2130      	movs	r1, #48	@ 0x30
 8005fc6:	2020      	movs	r0, #32
 8005fc8:	f7fe f93a 	bl	8004240 <ssd1306_SetCursor>
				 					ssd1306_WriteString("to erase",Font_6x8,White);
 8005fcc:	4ab1      	ldr	r2, [pc, #708]	@ (8006294 <statemachine+0x196c>)
 8005fce:	2301      	movs	r3, #1
 8005fd0:	ca06      	ldmia	r2, {r1, r2}
 8005fd2:	48b2      	ldr	r0, [pc, #712]	@ (800629c <statemachine+0x1974>)
 8005fd4:	f7fe f90e 	bl	80041f4 <ssd1306_WriteString>
				 					if(erasedisplay==1){
 8005fd8:	4bb1      	ldr	r3, [pc, #708]	@ (80062a0 <statemachine+0x1978>)
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	2b01      	cmp	r3, #1
 8005fde:	d137      	bne.n	8006050 <statemachine+0x1728>
					 					 ssd1306_Fill(Black);
 8005fe0:	2000      	movs	r0, #0
 8005fe2:	f7fd ffeb 	bl	8003fbc <ssd1306_Fill>
					 					 ssd1306_SetCursor(32,32);
 8005fe6:	2120      	movs	r1, #32
 8005fe8:	2020      	movs	r0, #32
 8005fea:	f7fe f929 	bl	8004240 <ssd1306_SetCursor>
					 					ssd1306_WriteString("usb",Font_6x8,White);
 8005fee:	4aa9      	ldr	r2, [pc, #676]	@ (8006294 <statemachine+0x196c>)
 8005ff0:	2301      	movs	r3, #1
 8005ff2:	ca06      	ldmia	r2, {r1, r2}
 8005ff4:	48ab      	ldr	r0, [pc, #684]	@ (80062a4 <statemachine+0x197c>)
 8005ff6:	f7fe f8fd 	bl	80041f4 <ssd1306_WriteString>
					 					ssd1306_SetCursor(32,42);
 8005ffa:	212a      	movs	r1, #42	@ 0x2a
 8005ffc:	2020      	movs	r0, #32
 8005ffe:	f7fe f91f 	bl	8004240 <ssd1306_SetCursor>
					 					ssd1306_WriteString("FIN",Font_7x10,White);
 8006002:	4aa9      	ldr	r2, [pc, #676]	@ (80062a8 <statemachine+0x1980>)
 8006004:	2301      	movs	r3, #1
 8006006:	ca06      	ldmia	r2, {r1, r2}
 8006008:	48a8      	ldr	r0, [pc, #672]	@ (80062ac <statemachine+0x1984>)
 800600a:	f7fe f8f3 	bl	80041f4 <ssd1306_WriteString>
					 					ssd1306_SetCursor(32,56);
 800600e:	2138      	movs	r1, #56	@ 0x38
 8006010:	2020      	movs	r0, #32
 8006012:	f7fe f915 	bl	8004240 <ssd1306_SetCursor>
				 						snprintf((char  *)bufferscreen,50,"t=%0.2f",(float)erasetime/1000);
 8006016:	4ba6      	ldr	r3, [pc, #664]	@ (80062b0 <statemachine+0x1988>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	ee07 3a90 	vmov	s15, r3
 800601e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006022:	ed9f 7aa4 	vldr	s14, [pc, #656]	@ 80062b4 <statemachine+0x198c>
 8006026:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800602a:	ee16 0a90 	vmov	r0, s13
 800602e:	f7fa fa63 	bl	80004f8 <__aeabi_f2d>
 8006032:	4602      	mov	r2, r0
 8006034:	460b      	mov	r3, r1
 8006036:	e9cd 2300 	strd	r2, r3, [sp]
 800603a:	4a9f      	ldr	r2, [pc, #636]	@ (80062b8 <statemachine+0x1990>)
 800603c:	2132      	movs	r1, #50	@ 0x32
 800603e:	489f      	ldr	r0, [pc, #636]	@ (80062bc <statemachine+0x1994>)
 8006040:	f015 f9d0 	bl	801b3e4 <sniprintf>
				 						ssd1306_WriteString((char *)bufferscreen,Font_6x8,White);
 8006044:	4a93      	ldr	r2, [pc, #588]	@ (8006294 <statemachine+0x196c>)
 8006046:	2301      	movs	r3, #1
 8006048:	ca06      	ldmia	r2, {r1, r2}
 800604a:	489c      	ldr	r0, [pc, #624]	@ (80062bc <statemachine+0x1994>)
 800604c:	f7fe f8d2 	bl	80041f4 <ssd1306_WriteString>
				 					if(BTN_A>=1){
 8006050:	4b9b      	ldr	r3, [pc, #620]	@ (80062c0 <statemachine+0x1998>)
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	2b00      	cmp	r3, #0
 8006056:	dd7a      	ble.n	800614e <statemachine+0x1826>
				 						erasetime=HAL_GetTick();
 8006058:	f001 fa66 	bl	8007528 <HAL_GetTick>
 800605c:	4603      	mov	r3, r0
 800605e:	461a      	mov	r2, r3
 8006060:	4b93      	ldr	r3, [pc, #588]	@ (80062b0 <statemachine+0x1988>)
 8006062:	601a      	str	r2, [r3, #0]
				 						for(int i=0;i<=(int)floor((pagenumber)/16);i++){
 8006064:	2300      	movs	r3, #0
 8006066:	60fb      	str	r3, [r7, #12]
 8006068:	e03f      	b.n	80060ea <statemachine+0x17c2>
				 							ssd1306_Fill(Black);
 800606a:	2000      	movs	r0, #0
 800606c:	f7fd ffa6 	bl	8003fbc <ssd1306_Fill>
				 							ssd1306_SetCursor(32,32);
 8006070:	2120      	movs	r1, #32
 8006072:	2020      	movs	r0, #32
 8006074:	f7fe f8e4 	bl	8004240 <ssd1306_SetCursor>
				 							ssd1306_WriteString("usb",Font_6x8,White);
 8006078:	4a86      	ldr	r2, [pc, #536]	@ (8006294 <statemachine+0x196c>)
 800607a:	2301      	movs	r3, #1
 800607c:	ca06      	ldmia	r2, {r1, r2}
 800607e:	4889      	ldr	r0, [pc, #548]	@ (80062a4 <statemachine+0x197c>)
 8006080:	f7fe f8b8 	bl	80041f4 <ssd1306_WriteString>
				 							SPIF_EraseSector(&hspif1,i);
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	4619      	mov	r1, r3
 8006088:	488e      	ldr	r0, [pc, #568]	@ (80062c4 <statemachine+0x199c>)
 800608a:	f011 fbd0 	bl	801782e <SPIF_EraseSector>
				 							if(i>=1){
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	2b00      	cmp	r3, #0
 8006092:	dd21      	ble.n	80060d8 <statemachine+0x17b0>
				 							percentage((float) (i*100)/((int)floor((pagenumber)/16)));
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	2264      	movs	r2, #100	@ 0x64
 8006098:	fb02 f303 	mul.w	r3, r2, r3
 800609c:	ee07 3a90 	vmov	s15, r3
 80060a0:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 80060a4:	4b88      	ldr	r3, [pc, #544]	@ (80062c8 <statemachine+0x19a0>)
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	da00      	bge.n	80060ae <statemachine+0x1786>
 80060ac:	330f      	adds	r3, #15
 80060ae:	111b      	asrs	r3, r3, #4
 80060b0:	4618      	mov	r0, r3
 80060b2:	f7fa fa0f 	bl	80004d4 <__aeabi_i2d>
 80060b6:	4602      	mov	r2, r0
 80060b8:	460b      	mov	r3, r1
 80060ba:	4610      	mov	r0, r2
 80060bc:	4619      	mov	r1, r3
 80060be:	f7fa fd23 	bl	8000b08 <__aeabi_d2iz>
 80060c2:	ee07 0a90 	vmov	s15, r0
 80060c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80060ca:	ee88 7a27 	vdiv.f32	s14, s16, s15
 80060ce:	eeb0 0a47 	vmov.f32	s0, s14
 80060d2:	f7fe fbc9 	bl	8004868 <percentage>
 80060d6:	e003      	b.n	80060e0 <statemachine+0x17b8>
				 								percentage((float) 0);
 80060d8:	ed9f 0a7c 	vldr	s0, [pc, #496]	@ 80062cc <statemachine+0x19a4>
 80060dc:	f7fe fbc4 	bl	8004868 <percentage>
				 							ssd1306_UpdateScreen();
 80060e0:	f7fd ff84 	bl	8003fec <ssd1306_UpdateScreen>
				 						for(int i=0;i<=(int)floor((pagenumber)/16);i++){
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	3301      	adds	r3, #1
 80060e8:	60fb      	str	r3, [r7, #12]
 80060ea:	4b77      	ldr	r3, [pc, #476]	@ (80062c8 <statemachine+0x19a0>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	da00      	bge.n	80060f4 <statemachine+0x17cc>
 80060f2:	330f      	adds	r3, #15
 80060f4:	111b      	asrs	r3, r3, #4
 80060f6:	4618      	mov	r0, r3
 80060f8:	f7fa f9ec 	bl	80004d4 <__aeabi_i2d>
 80060fc:	4602      	mov	r2, r0
 80060fe:	460b      	mov	r3, r1
 8006100:	4610      	mov	r0, r2
 8006102:	4619      	mov	r1, r3
 8006104:	f7fa fd00 	bl	8000b08 <__aeabi_d2iz>
 8006108:	4602      	mov	r2, r0
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	4293      	cmp	r3, r2
 800610e:	ddac      	ble.n	800606a <statemachine+0x1742>
				 						SPIF_EraseSector(&hspif1, (int)floor((MAX_WRITE_PAGE+1)/16));
 8006110:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 8006114:	486b      	ldr	r0, [pc, #428]	@ (80062c4 <statemachine+0x199c>)
 8006116:	f011 fb8a 	bl	801782e <SPIF_EraseSector>
				 						erasetime=HAL_GetTick()-erasetime;
 800611a:	f001 fa05 	bl	8007528 <HAL_GetTick>
 800611e:	4603      	mov	r3, r0
 8006120:	4a63      	ldr	r2, [pc, #396]	@ (80062b0 <statemachine+0x1988>)
 8006122:	6812      	ldr	r2, [r2, #0]
 8006124:	1a9b      	subs	r3, r3, r2
 8006126:	461a      	mov	r2, r3
 8006128:	4b61      	ldr	r3, [pc, #388]	@ (80062b0 <statemachine+0x1988>)
 800612a:	601a      	str	r2, [r3, #0]
				 						erasedisplay=1;
 800612c:	4b5c      	ldr	r3, [pc, #368]	@ (80062a0 <statemachine+0x1978>)
 800612e:	2201      	movs	r2, #1
 8006130:	601a      	str	r2, [r3, #0]
				 						pageoffset=0;
 8006132:	4b67      	ldr	r3, [pc, #412]	@ (80062d0 <statemachine+0x19a8>)
 8006134:	2200      	movs	r2, #0
 8006136:	601a      	str	r2, [r3, #0]
				 						pagenumber=0;
 8006138:	4b63      	ldr	r3, [pc, #396]	@ (80062c8 <statemachine+0x19a0>)
 800613a:	2200      	movs	r2, #0
 800613c:	601a      	str	r2, [r3, #0]
				 						storeindex();
 800613e:	f7fd fd61 	bl	8003c04 <storeindex>
				 						BTN_A=0;
 8006142:	4b5f      	ldr	r3, [pc, #380]	@ (80062c0 <statemachine+0x1998>)
 8006144:	2200      	movs	r2, #0
 8006146:	601a      	str	r2, [r3, #0]
				 						BTN_B=0;
 8006148:	4b62      	ldr	r3, [pc, #392]	@ (80062d4 <statemachine+0x19ac>)
 800614a:	2200      	movs	r2, #0
 800614c:	601a      	str	r2, [r3, #0]
				 					if(BTN_B>=1){
 800614e:	4b61      	ldr	r3, [pc, #388]	@ (80062d4 <statemachine+0x19ac>)
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	2b00      	cmp	r3, #0
 8006154:	f340 8123 	ble.w	800639e <statemachine+0x1a76>
					 						usbstate++;
 8006158:	4b5f      	ldr	r3, [pc, #380]	@ (80062d8 <statemachine+0x19b0>)
 800615a:	781b      	ldrb	r3, [r3, #0]
 800615c:	3301      	adds	r3, #1
 800615e:	b2da      	uxtb	r2, r3
 8006160:	4b5d      	ldr	r3, [pc, #372]	@ (80062d8 <statemachine+0x19b0>)
 8006162:	701a      	strb	r2, [r3, #0]
					 						  BTN_B=0;
 8006164:	4b5b      	ldr	r3, [pc, #364]	@ (80062d4 <statemachine+0x19ac>)
 8006166:	2200      	movs	r2, #0
 8006168:	601a      	str	r2, [r3, #0]
					 						  BTN_A=0;
 800616a:	4b55      	ldr	r3, [pc, #340]	@ (80062c0 <statemachine+0x1998>)
 800616c:	2200      	movs	r2, #0
 800616e:	601a      	str	r2, [r3, #0]
				 			  break;
 8006170:	e115      	b.n	800639e <statemachine+0x1a76>
				 					ssd1306_Fill(Black);
 8006172:	2000      	movs	r0, #0
 8006174:	f7fd ff22 	bl	8003fbc <ssd1306_Fill>
				 					ssd1306_SetCursor(32,40);
 8006178:	2128      	movs	r1, #40	@ 0x28
 800617a:	2020      	movs	r0, #32
 800617c:	f7fe f860 	bl	8004240 <ssd1306_SetCursor>
				 					ssd1306_WriteString("write",Font_6x8,White);
 8006180:	4a44      	ldr	r2, [pc, #272]	@ (8006294 <statemachine+0x196c>)
 8006182:	2301      	movs	r3, #1
 8006184:	ca06      	ldmia	r2, {r1, r2}
 8006186:	4855      	ldr	r0, [pc, #340]	@ (80062dc <statemachine+0x19b4>)
 8006188:	f7fe f834 	bl	80041f4 <ssd1306_WriteString>
				 					if(pagenumber>0){
 800618c:	4b4e      	ldr	r3, [pc, #312]	@ (80062c8 <statemachine+0x19a0>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	2b00      	cmp	r3, #0
 8006192:	f340 80b1 	ble.w	80062f8 <statemachine+0x19d0>
				 					int i=0;
 8006196:	2300      	movs	r3, #0
 8006198:	60bb      	str	r3, [r7, #8]
				 					if(usbtransmiten==0){
 800619a:	4b51      	ldr	r3, [pc, #324]	@ (80062e0 <statemachine+0x19b8>)
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d165      	bne.n	800626e <statemachine+0x1946>
				 						while(i<pagenumber){
 80061a2:	e036      	b.n	8006212 <statemachine+0x18ea>
				 							ssd1306_Fill(Black);
 80061a4:	2000      	movs	r0, #0
 80061a6:	f7fd ff09 	bl	8003fbc <ssd1306_Fill>
				 							ssd1306_SetCursor(32,32);
 80061aa:	2120      	movs	r1, #32
 80061ac:	2020      	movs	r0, #32
 80061ae:	f7fe f847 	bl	8004240 <ssd1306_SetCursor>
				 							ssd1306_WriteString("write",Font_6x8,White);
 80061b2:	4a38      	ldr	r2, [pc, #224]	@ (8006294 <statemachine+0x196c>)
 80061b4:	2301      	movs	r3, #1
 80061b6:	ca06      	ldmia	r2, {r1, r2}
 80061b8:	4848      	ldr	r0, [pc, #288]	@ (80062dc <statemachine+0x19b4>)
 80061ba:	f7fe f81b 	bl	80041f4 <ssd1306_WriteString>
				 							SPIF_ReadPage(&hspif1,i, (uint8_t  *)flashread, 256, 0);
 80061be:	68b9      	ldr	r1, [r7, #8]
 80061c0:	2300      	movs	r3, #0
 80061c2:	9300      	str	r3, [sp, #0]
 80061c4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80061c8:	4a46      	ldr	r2, [pc, #280]	@ (80062e4 <statemachine+0x19bc>)
 80061ca:	483e      	ldr	r0, [pc, #248]	@ (80062c4 <statemachine+0x199c>)
 80061cc:	f011 fbd0 	bl	8017970 <SPIF_ReadPage>
				 							CDC_Transmit_FS((char  * )flashread,256);
 80061d0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80061d4:	4843      	ldr	r0, [pc, #268]	@ (80062e4 <statemachine+0x19bc>)
 80061d6:	f012 fb4b 	bl	8018870 <CDC_Transmit_FS>
				 							percentage((float) (i*100)/pagenumber);
 80061da:	68bb      	ldr	r3, [r7, #8]
 80061dc:	2264      	movs	r2, #100	@ 0x64
 80061de:	fb02 f303 	mul.w	r3, r2, r3
 80061e2:	ee07 3a90 	vmov	s15, r3
 80061e6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80061ea:	4b37      	ldr	r3, [pc, #220]	@ (80062c8 <statemachine+0x19a0>)
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	ee07 3a90 	vmov	s15, r3
 80061f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80061f6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80061fa:	eeb0 0a66 	vmov.f32	s0, s13
 80061fe:	f7fe fb33 	bl	8004868 <percentage>
				 							ssd1306_UpdateScreen();
 8006202:	f7fd fef3 	bl	8003fec <ssd1306_UpdateScreen>
				 							HAL_Delay(125);
 8006206:	207d      	movs	r0, #125	@ 0x7d
 8006208:	f7fb fa91 	bl	800172e <HAL_Delay>
				 							i++;
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	3301      	adds	r3, #1
 8006210:	60bb      	str	r3, [r7, #8]
				 						while(i<pagenumber){
 8006212:	4b2d      	ldr	r3, [pc, #180]	@ (80062c8 <statemachine+0x19a0>)
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	68ba      	ldr	r2, [r7, #8]
 8006218:	429a      	cmp	r2, r3
 800621a:	dbc3      	blt.n	80061a4 <statemachine+0x187c>
				 						SPIF_ReadPage(&hspif1,pagenumber, (uint8_t   *)flashread, pageoffset, 0);
 800621c:	4b2a      	ldr	r3, [pc, #168]	@ (80062c8 <statemachine+0x19a0>)
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	4619      	mov	r1, r3
 8006222:	4b2b      	ldr	r3, [pc, #172]	@ (80062d0 <statemachine+0x19a8>)
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	461a      	mov	r2, r3
 8006228:	2300      	movs	r3, #0
 800622a:	9300      	str	r3, [sp, #0]
 800622c:	4613      	mov	r3, r2
 800622e:	4a2d      	ldr	r2, [pc, #180]	@ (80062e4 <statemachine+0x19bc>)
 8006230:	4824      	ldr	r0, [pc, #144]	@ (80062c4 <statemachine+0x199c>)
 8006232:	f011 fb9d 	bl	8017970 <SPIF_ReadPage>
				 						CDC_Transmit_FS((uint8_t   * )flashread,pageoffset);
 8006236:	4b26      	ldr	r3, [pc, #152]	@ (80062d0 <statemachine+0x19a8>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	b29b      	uxth	r3, r3
 800623c:	4619      	mov	r1, r3
 800623e:	4829      	ldr	r0, [pc, #164]	@ (80062e4 <statemachine+0x19bc>)
 8006240:	f012 fb16 	bl	8018870 <CDC_Transmit_FS>
				 						HAL_Delay(125);
 8006244:	207d      	movs	r0, #125	@ 0x7d
 8006246:	f7fb fa72 	bl	800172e <HAL_Delay>
				 						int taillefin=0;
 800624a:	2300      	movs	r3, #0
 800624c:	607b      	str	r3, [r7, #4]
										taillefin = snprintf((char  *)usbbuffer,64,"findetrame\n\r");
 800624e:	4a26      	ldr	r2, [pc, #152]	@ (80062e8 <statemachine+0x19c0>)
 8006250:	2140      	movs	r1, #64	@ 0x40
 8006252:	4826      	ldr	r0, [pc, #152]	@ (80062ec <statemachine+0x19c4>)
 8006254:	f015 f8c6 	bl	801b3e4 <sniprintf>
 8006258:	6078      	str	r0, [r7, #4]
				 						CDC_Transmit_FS((char  *)usbbuffer,taillefin);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	b29b      	uxth	r3, r3
 800625e:	4619      	mov	r1, r3
 8006260:	4822      	ldr	r0, [pc, #136]	@ (80062ec <statemachine+0x19c4>)
 8006262:	f012 fb05 	bl	8018870 <CDC_Transmit_FS>
				 						usbtransmiten=1;
 8006266:	4b1e      	ldr	r3, [pc, #120]	@ (80062e0 <statemachine+0x19b8>)
 8006268:	2201      	movs	r2, #1
 800626a:	601a      	str	r2, [r3, #0]
 800626c:	e003      	b.n	8006276 <statemachine+0x194e>
				 						usbpercent=1;
 800626e:	4b20      	ldr	r3, [pc, #128]	@ (80062f0 <statemachine+0x19c8>)
 8006270:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8006274:	601a      	str	r2, [r3, #0]
				 					ssd1306_Fill(Black);
 8006276:	2000      	movs	r0, #0
 8006278:	f7fd fea0 	bl	8003fbc <ssd1306_Fill>
				 					ssd1306_SetCursor(32,48);
 800627c:	2130      	movs	r1, #48	@ 0x30
 800627e:	2020      	movs	r0, #32
 8006280:	f7fd ffde 	bl	8004240 <ssd1306_SetCursor>
				 					ssd1306_WriteString("finish",Font_7x10,White);
 8006284:	4a08      	ldr	r2, [pc, #32]	@ (80062a8 <statemachine+0x1980>)
 8006286:	2301      	movs	r3, #1
 8006288:	ca06      	ldmia	r2, {r1, r2}
 800628a:	481a      	ldr	r0, [pc, #104]	@ (80062f4 <statemachine+0x19cc>)
 800628c:	f7fd ffb2 	bl	80041f4 <ssd1306_WriteString>
 8006290:	e049      	b.n	8006326 <statemachine+0x19fe>
 8006292:	bf00      	nop
 8006294:	20000014 	.word	0x20000014
 8006298:	08020090 	.word	0x08020090
 800629c:	08020098 	.word	0x08020098
 80062a0:	20000b74 	.word	0x20000b74
 80062a4:	08020080 	.word	0x08020080
 80062a8:	2000001c 	.word	0x2000001c
 80062ac:	080200a4 	.word	0x080200a4
 80062b0:	20000b70 	.word	0x20000b70
 80062b4:	447a0000 	.word	0x447a0000
 80062b8:	080200a8 	.word	0x080200a8
 80062bc:	20000ae0 	.word	0x20000ae0
 80062c0:	20000880 	.word	0x20000880
 80062c4:	20000888 	.word	0x20000888
 80062c8:	20000ac0 	.word	0x20000ac0
 80062cc:	00000000 	.word	0x00000000
 80062d0:	20000abc 	.word	0x20000abc
 80062d4:	20000884 	.word	0x20000884
 80062d8:	200005f0 	.word	0x200005f0
 80062dc:	080200b0 	.word	0x080200b0
 80062e0:	20000b78 	.word	0x20000b78
 80062e4:	200009bc 	.word	0x200009bc
 80062e8:	080200b8 	.word	0x080200b8
 80062ec:	20000b14 	.word	0x20000b14
 80062f0:	20000b7c 	.word	0x20000b7c
 80062f4:	080200c8 	.word	0x080200c8
				 							ssd1306_Fill(Black);
 80062f8:	2000      	movs	r0, #0
 80062fa:	f7fd fe5f 	bl	8003fbc <ssd1306_Fill>
				 							ssd1306_SetCursor(32,40);
 80062fe:	2128      	movs	r1, #40	@ 0x28
 8006300:	2020      	movs	r0, #32
 8006302:	f7fd ff9d 	bl	8004240 <ssd1306_SetCursor>
				 							ssd1306_WriteString("write",Font_7x10,White);
 8006306:	4a86      	ldr	r2, [pc, #536]	@ (8006520 <statemachine+0x1bf8>)
 8006308:	2301      	movs	r3, #1
 800630a:	ca06      	ldmia	r2, {r1, r2}
 800630c:	4885      	ldr	r0, [pc, #532]	@ (8006524 <statemachine+0x1bfc>)
 800630e:	f7fd ff71 	bl	80041f4 <ssd1306_WriteString>
				 							ssd1306_SetCursor(32,50);
 8006312:	2132      	movs	r1, #50	@ 0x32
 8006314:	2020      	movs	r0, #32
 8006316:	f7fd ff93 	bl	8004240 <ssd1306_SetCursor>
				 							ssd1306_WriteString("nothing",Font_7x10,White);
 800631a:	4a81      	ldr	r2, [pc, #516]	@ (8006520 <statemachine+0x1bf8>)
 800631c:	2301      	movs	r3, #1
 800631e:	ca06      	ldmia	r2, {r1, r2}
 8006320:	4881      	ldr	r0, [pc, #516]	@ (8006528 <statemachine+0x1c00>)
 8006322:	f7fd ff67 	bl	80041f4 <ssd1306_WriteString>
				 					if(BTN_B>=1){
 8006326:	4b81      	ldr	r3, [pc, #516]	@ (800652c <statemachine+0x1c04>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	2b00      	cmp	r3, #0
 800632c:	dd11      	ble.n	8006352 <statemachine+0x1a2a>
				 									 						usbstate--;
 800632e:	4b80      	ldr	r3, [pc, #512]	@ (8006530 <statemachine+0x1c08>)
 8006330:	781b      	ldrb	r3, [r3, #0]
 8006332:	3b01      	subs	r3, #1
 8006334:	b2da      	uxtb	r2, r3
 8006336:	4b7e      	ldr	r3, [pc, #504]	@ (8006530 <statemachine+0x1c08>)
 8006338:	701a      	strb	r2, [r3, #0]
				 									 						usbstate--;
 800633a:	4b7d      	ldr	r3, [pc, #500]	@ (8006530 <statemachine+0x1c08>)
 800633c:	781b      	ldrb	r3, [r3, #0]
 800633e:	3b01      	subs	r3, #1
 8006340:	b2da      	uxtb	r2, r3
 8006342:	4b7b      	ldr	r3, [pc, #492]	@ (8006530 <statemachine+0x1c08>)
 8006344:	701a      	strb	r2, [r3, #0]
				 									 						  BTN_B=0;
 8006346:	4b79      	ldr	r3, [pc, #484]	@ (800652c <statemachine+0x1c04>)
 8006348:	2200      	movs	r2, #0
 800634a:	601a      	str	r2, [r3, #0]
				 									 						  BTN_A=0;
 800634c:	4b79      	ldr	r3, [pc, #484]	@ (8006534 <statemachine+0x1c0c>)
 800634e:	2200      	movs	r2, #0
 8006350:	601a      	str	r2, [r3, #0]
				 					 if(BTN_A>=1){
 8006352:	4b78      	ldr	r3, [pc, #480]	@ (8006534 <statemachine+0x1c0c>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	2b00      	cmp	r3, #0
 8006358:	dd0b      	ble.n	8006372 <statemachine+0x1a4a>
				 									  			 	state++;
 800635a:	4b77      	ldr	r3, [pc, #476]	@ (8006538 <statemachine+0x1c10>)
 800635c:	781b      	ldrb	r3, [r3, #0]
 800635e:	3301      	adds	r3, #1
 8006360:	b2da      	uxtb	r2, r3
 8006362:	4b75      	ldr	r3, [pc, #468]	@ (8006538 <statemachine+0x1c10>)
 8006364:	701a      	strb	r2, [r3, #0]
				 									  			 	BTN_A=0;
 8006366:	4b73      	ldr	r3, [pc, #460]	@ (8006534 <statemachine+0x1c0c>)
 8006368:	2200      	movs	r2, #0
 800636a:	601a      	str	r2, [r3, #0]
				 									  			 	BTN_B=0;
 800636c:	4b6f      	ldr	r3, [pc, #444]	@ (800652c <statemachine+0x1c04>)
 800636e:	2200      	movs	r2, #0
 8006370:	601a      	str	r2, [r3, #0]
				 					if(BTN_A_LONG>=1){
 8006372:	4b72      	ldr	r3, [pc, #456]	@ (800653c <statemachine+0x1c14>)
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	2b00      	cmp	r3, #0
 8006378:	dd13      	ble.n	80063a2 <statemachine+0x1a7a>
				 									 									  			 	state--;
 800637a:	4b6f      	ldr	r3, [pc, #444]	@ (8006538 <statemachine+0x1c10>)
 800637c:	781b      	ldrb	r3, [r3, #0]
 800637e:	3b01      	subs	r3, #1
 8006380:	b2da      	uxtb	r2, r3
 8006382:	4b6d      	ldr	r3, [pc, #436]	@ (8006538 <statemachine+0x1c10>)
 8006384:	701a      	strb	r2, [r3, #0]
				 									 									  			 	BTN_A=0;
 8006386:	4b6b      	ldr	r3, [pc, #428]	@ (8006534 <statemachine+0x1c0c>)
 8006388:	2200      	movs	r2, #0
 800638a:	601a      	str	r2, [r3, #0]
				 									 									  			 	BTN_B=0;
 800638c:	4b67      	ldr	r3, [pc, #412]	@ (800652c <statemachine+0x1c04>)
 800638e:	2200      	movs	r2, #0
 8006390:	601a      	str	r2, [r3, #0]
				 									 									  			 	BTN_A_LONG=0;
 8006392:	4b6a      	ldr	r3, [pc, #424]	@ (800653c <statemachine+0x1c14>)
 8006394:	2200      	movs	r2, #0
 8006396:	601a      	str	r2, [r3, #0]
				 					 break;
 8006398:	e003      	b.n	80063a2 <statemachine+0x1a7a>
				 					  break;
 800639a:	bf00      	nop
 800639c:	e0b5      	b.n	800650a <statemachine+0x1be2>
				 			  break;
 800639e:	bf00      	nop
 80063a0:	e0b3      	b.n	800650a <statemachine+0x1be2>
				 					 break;
 80063a2:	bf00      	nop
				  break;
 80063a4:	e0b1      	b.n	800650a <statemachine+0x1be2>

				  case STATE_BLUETOOTH:
					  ssd1306_Fill(Black);
 80063a6:	2000      	movs	r0, #0
 80063a8:	f7fd fe08 	bl	8003fbc <ssd1306_Fill>
					  ssd1306_SetCursor(32,32);
 80063ac:	2120      	movs	r1, #32
 80063ae:	2020      	movs	r0, #32
 80063b0:	f7fd ff46 	bl	8004240 <ssd1306_SetCursor>
					  ssd1306_WriteString("bmp581",Font_6x8,White);
 80063b4:	4a62      	ldr	r2, [pc, #392]	@ (8006540 <statemachine+0x1c18>)
 80063b6:	2301      	movs	r3, #1
 80063b8:	ca06      	ldmia	r2, {r1, r2}
 80063ba:	4862      	ldr	r0, [pc, #392]	@ (8006544 <statemachine+0x1c1c>)
 80063bc:	f7fd ff1a 	bl	80041f4 <ssd1306_WriteString>
					  ssd1306_SetCursor(32,40);
 80063c0:	2128      	movs	r1, #40	@ 0x28
 80063c2:	2020      	movs	r0, #32
 80063c4:	f7fd ff3c 	bl	8004240 <ssd1306_SetCursor>
					  HAL_Delay(100);
 80063c8:	2064      	movs	r0, #100	@ 0x64
 80063ca:	f7fb f9b0 	bl	800172e <HAL_Delay>
					  bmp581_read_precise_normal(bmp581);
 80063ce:	4b5e      	ldr	r3, [pc, #376]	@ (8006548 <statemachine+0x1c20>)
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	4618      	mov	r0, r3
 80063d4:	f7fb fa44 	bl	8001860 <bmp581_read_precise_normal>





					  snprintf((char  *)blereceivebuf,64,"%0.1lf",(double)bmppress);
 80063d8:	4b5c      	ldr	r3, [pc, #368]	@ (800654c <statemachine+0x1c24>)
 80063da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063de:	e9cd 2300 	strd	r2, r3, [sp]
 80063e2:	4a5b      	ldr	r2, [pc, #364]	@ (8006550 <statemachine+0x1c28>)
 80063e4:	2140      	movs	r1, #64	@ 0x40
 80063e6:	485b      	ldr	r0, [pc, #364]	@ (8006554 <statemachine+0x1c2c>)
 80063e8:	f014 fffc 	bl	801b3e4 <sniprintf>
					  ssd1306_WriteString((char *) blereceivebuf, Font_6x8, White);
 80063ec:	4a54      	ldr	r2, [pc, #336]	@ (8006540 <statemachine+0x1c18>)
 80063ee:	2301      	movs	r3, #1
 80063f0:	ca06      	ldmia	r2, {r1, r2}
 80063f2:	4858      	ldr	r0, [pc, #352]	@ (8006554 <statemachine+0x1c2c>)
 80063f4:	f7fd fefe 	bl	80041f4 <ssd1306_WriteString>
					  ssd1306_SetCursor(32,48);
 80063f8:	2130      	movs	r1, #48	@ 0x30
 80063fa:	2020      	movs	r0, #32
 80063fc:	f7fd ff20 	bl	8004240 <ssd1306_SetCursor>
					  snprintf((char  *)blereceivebuf,64,"%0.1lf",(double)bmptemp);
 8006400:	4b55      	ldr	r3, [pc, #340]	@ (8006558 <statemachine+0x1c30>)
 8006402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006406:	e9cd 2300 	strd	r2, r3, [sp]
 800640a:	4a51      	ldr	r2, [pc, #324]	@ (8006550 <statemachine+0x1c28>)
 800640c:	2140      	movs	r1, #64	@ 0x40
 800640e:	4851      	ldr	r0, [pc, #324]	@ (8006554 <statemachine+0x1c2c>)
 8006410:	f014 ffe8 	bl	801b3e4 <sniprintf>
					  ssd1306_WriteString((char *) blereceivebuf, Font_6x8, White);
 8006414:	4a4a      	ldr	r2, [pc, #296]	@ (8006540 <statemachine+0x1c18>)
 8006416:	2301      	movs	r3, #1
 8006418:	ca06      	ldmia	r2, {r1, r2}
 800641a:	484e      	ldr	r0, [pc, #312]	@ (8006554 <statemachine+0x1c2c>)
 800641c:	f7fd feea 	bl	80041f4 <ssd1306_WriteString>
					  ssd1306_SetCursor(32,56);
 8006420:	2138      	movs	r1, #56	@ 0x38
 8006422:	2020      	movs	r0, #32
 8006424:	f7fd ff0c 	bl	8004240 <ssd1306_SetCursor>
					  snprintf((char  *)blereceivebuf,64,"%0.1lf",(double)bmpalt);
 8006428:	4b4c      	ldr	r3, [pc, #304]	@ (800655c <statemachine+0x1c34>)
 800642a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800642e:	e9cd 2300 	strd	r2, r3, [sp]
 8006432:	4a47      	ldr	r2, [pc, #284]	@ (8006550 <statemachine+0x1c28>)
 8006434:	2140      	movs	r1, #64	@ 0x40
 8006436:	4847      	ldr	r0, [pc, #284]	@ (8006554 <statemachine+0x1c2c>)
 8006438:	f014 ffd4 	bl	801b3e4 <sniprintf>
					  ssd1306_WriteString((char *) blereceivebuf, Font_6x8, White);
 800643c:	4a40      	ldr	r2, [pc, #256]	@ (8006540 <statemachine+0x1c18>)
 800643e:	2301      	movs	r3, #1
 8006440:	ca06      	ldmia	r2, {r1, r2}
 8006442:	4844      	ldr	r0, [pc, #272]	@ (8006554 <statemachine+0x1c2c>)
 8006444:	f7fd fed6 	bl	80041f4 <ssd1306_WriteString>





						if(BTN_B_LONG>=1){
 8006448:	4b45      	ldr	r3, [pc, #276]	@ (8006560 <statemachine+0x1c38>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	2b00      	cmp	r3, #0
 800644e:	dd0b      	ble.n	8006468 <statemachine+0x1b40>
												BTN_A=0;
 8006450:	4b38      	ldr	r3, [pc, #224]	@ (8006534 <statemachine+0x1c0c>)
 8006452:	2200      	movs	r2, #0
 8006454:	601a      	str	r2, [r3, #0]
												BTN_B=0;
 8006456:	4b35      	ldr	r3, [pc, #212]	@ (800652c <statemachine+0x1c04>)
 8006458:	2200      	movs	r2, #0
 800645a:	601a      	str	r2, [r3, #0]
												BTN_A_LONG=0;
 800645c:	4b37      	ldr	r3, [pc, #220]	@ (800653c <statemachine+0x1c14>)
 800645e:	2200      	movs	r2, #0
 8006460:	601a      	str	r2, [r3, #0]
												BTN_B_LONG=0;
 8006462:	4b3f      	ldr	r3, [pc, #252]	@ (8006560 <statemachine+0x1c38>)
 8006464:	2200      	movs	r2, #0
 8006466:	601a      	str	r2, [r3, #0]
												}




					  if(BTN_B>=1){
 8006468:	4b30      	ldr	r3, [pc, #192]	@ (800652c <statemachine+0x1c04>)
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	2b00      	cmp	r3, #0
 800646e:	dd08      	ble.n	8006482 <statemachine+0x1b5a>


						  bluetoothsend=1;
 8006470:	4b3c      	ldr	r3, [pc, #240]	@ (8006564 <statemachine+0x1c3c>)
 8006472:	2201      	movs	r2, #1
 8006474:	601a      	str	r2, [r3, #0]
						  BTN_B=0;
 8006476:	4b2d      	ldr	r3, [pc, #180]	@ (800652c <statemachine+0x1c04>)
 8006478:	2200      	movs	r2, #0
 800647a:	601a      	str	r2, [r3, #0]
						  BTN_B_LONG=0;
 800647c:	4b38      	ldr	r3, [pc, #224]	@ (8006560 <statemachine+0x1c38>)
 800647e:	2200      	movs	r2, #0
 8006480:	601a      	str	r2, [r3, #0]
					  }


				  if(BTN_A>=1){
 8006482:	4b2c      	ldr	r3, [pc, #176]	@ (8006534 <statemachine+0x1c0c>)
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	2b00      	cmp	r3, #0
 8006488:	dd23      	ble.n	80064d2 <statemachine+0x1baa>
						state--;
 800648a:	4b2b      	ldr	r3, [pc, #172]	@ (8006538 <statemachine+0x1c10>)
 800648c:	781b      	ldrb	r3, [r3, #0]
 800648e:	3b01      	subs	r3, #1
 8006490:	b2da      	uxtb	r2, r3
 8006492:	4b29      	ldr	r3, [pc, #164]	@ (8006538 <statemachine+0x1c10>)
 8006494:	701a      	strb	r2, [r3, #0]
						state--;
 8006496:	4b28      	ldr	r3, [pc, #160]	@ (8006538 <statemachine+0x1c10>)
 8006498:	781b      	ldrb	r3, [r3, #0]
 800649a:	3b01      	subs	r3, #1
 800649c:	b2da      	uxtb	r2, r3
 800649e:	4b26      	ldr	r3, [pc, #152]	@ (8006538 <statemachine+0x1c10>)
 80064a0:	701a      	strb	r2, [r3, #0]
						state--;
 80064a2:	4b25      	ldr	r3, [pc, #148]	@ (8006538 <statemachine+0x1c10>)
 80064a4:	781b      	ldrb	r3, [r3, #0]
 80064a6:	3b01      	subs	r3, #1
 80064a8:	b2da      	uxtb	r2, r3
 80064aa:	4b23      	ldr	r3, [pc, #140]	@ (8006538 <statemachine+0x1c10>)
 80064ac:	701a      	strb	r2, [r3, #0]
						state--;
 80064ae:	4b22      	ldr	r3, [pc, #136]	@ (8006538 <statemachine+0x1c10>)
 80064b0:	781b      	ldrb	r3, [r3, #0]
 80064b2:	3b01      	subs	r3, #1
 80064b4:	b2da      	uxtb	r2, r3
 80064b6:	4b20      	ldr	r3, [pc, #128]	@ (8006538 <statemachine+0x1c10>)
 80064b8:	701a      	strb	r2, [r3, #0]
						state--;
 80064ba:	4b1f      	ldr	r3, [pc, #124]	@ (8006538 <statemachine+0x1c10>)
 80064bc:	781b      	ldrb	r3, [r3, #0]
 80064be:	3b01      	subs	r3, #1
 80064c0:	b2da      	uxtb	r2, r3
 80064c2:	4b1d      	ldr	r3, [pc, #116]	@ (8006538 <statemachine+0x1c10>)
 80064c4:	701a      	strb	r2, [r3, #0]
						BTN_A=0;
 80064c6:	4b1b      	ldr	r3, [pc, #108]	@ (8006534 <statemachine+0x1c0c>)
 80064c8:	2200      	movs	r2, #0
 80064ca:	601a      	str	r2, [r3, #0]
						BTN_B=0;
 80064cc:	4b17      	ldr	r3, [pc, #92]	@ (800652c <statemachine+0x1c04>)
 80064ce:	2200      	movs	r2, #0
 80064d0:	601a      	str	r2, [r3, #0]
							}
					if(BTN_A_LONG>=1){
 80064d2:	4b1a      	ldr	r3, [pc, #104]	@ (800653c <statemachine+0x1c14>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	dd19      	ble.n	800650e <statemachine+0x1be6>
							state--;
 80064da:	4b17      	ldr	r3, [pc, #92]	@ (8006538 <statemachine+0x1c10>)
 80064dc:	781b      	ldrb	r3, [r3, #0]
 80064de:	3b01      	subs	r3, #1
 80064e0:	b2da      	uxtb	r2, r3
 80064e2:	4b15      	ldr	r3, [pc, #84]	@ (8006538 <statemachine+0x1c10>)
 80064e4:	701a      	strb	r2, [r3, #0]
							BTN_A=0;
 80064e6:	4b13      	ldr	r3, [pc, #76]	@ (8006534 <statemachine+0x1c0c>)
 80064e8:	2200      	movs	r2, #0
 80064ea:	601a      	str	r2, [r3, #0]
							BTN_B=0;
 80064ec:	4b0f      	ldr	r3, [pc, #60]	@ (800652c <statemachine+0x1c04>)
 80064ee:	2200      	movs	r2, #0
 80064f0:	601a      	str	r2, [r3, #0]
							BTN_A_LONG=0;
 80064f2:	4b12      	ldr	r3, [pc, #72]	@ (800653c <statemachine+0x1c14>)
 80064f4:	2200      	movs	r2, #0
 80064f6:	601a      	str	r2, [r3, #0]
							}



					  break;
 80064f8:	e009      	b.n	800650e <statemachine+0x1be6>
				  									 	 break;
 80064fa:	bf00      	nop
 80064fc:	e008      	b.n	8006510 <statemachine+0x1be8>
					  break;
 80064fe:	bf00      	nop
 8006500:	e006      	b.n	8006510 <statemachine+0x1be8>
			  break;
 8006502:	bf00      	nop
 8006504:	e004      	b.n	8006510 <statemachine+0x1be8>
			  break;
 8006506:	bf00      	nop
 8006508:	e002      	b.n	8006510 <statemachine+0x1be8>
				  break;
 800650a:	bf00      	nop
 800650c:	e000      	b.n	8006510 <statemachine+0x1be8>
					  break;
 800650e:	bf00      	nop




	}
return ;
 8006510:	bf00      	nop
 8006512:	bf00      	nop
}
 8006514:	3718      	adds	r7, #24
 8006516:	46bd      	mov	sp, r7
 8006518:	ecbd 8b02 	vpop	{d8}
 800651c:	bdb0      	pop	{r4, r5, r7, pc}
 800651e:	bf00      	nop
 8006520:	2000001c 	.word	0x2000001c
 8006524:	080200b0 	.word	0x080200b0
 8006528:	080200d0 	.word	0x080200d0
 800652c:	20000884 	.word	0x20000884
 8006530:	200005f0 	.word	0x200005f0
 8006534:	20000880 	.word	0x20000880
 8006538:	200005ec 	.word	0x200005ec
 800653c:	20000bb8 	.word	0x20000bb8
 8006540:	20000014 	.word	0x20000014
 8006544:	080200d8 	.word	0x080200d8
 8006548:	20000d04 	.word	0x20000d04
 800654c:	20000458 	.word	0x20000458
 8006550:	0801ff70 	.word	0x0801ff70
 8006554:	20000bc0 	.word	0x20000bc0
 8006558:	20000450 	.word	0x20000450
 800655c:	20000460 	.word	0x20000460
 8006560:	20000bb4 	.word	0x20000bb4
 8006564:	20000bbc 	.word	0x20000bbc

08006568 <LL_AHB3_GRP1_EnableClock>:
{
 8006568:	b480      	push	{r7}
 800656a:	b085      	sub	sp, #20
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8006570:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006574:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006576:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	4313      	orrs	r3, r2
 800657e:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8006580:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006584:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	4013      	ands	r3, r2
 800658a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800658c:	68fb      	ldr	r3, [r7, #12]
}
 800658e:	bf00      	nop
 8006590:	3714      	adds	r7, #20
 8006592:	46bd      	mov	sp, r7
 8006594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006598:	4770      	bx	lr

0800659a <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800659a:	b580      	push	{r7, lr}
 800659c:	af00      	add	r7, sp, #0



  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 800659e:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80065a2:	f7ff ffe1 	bl	8006568 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 80065a6:	2200      	movs	r2, #0
 80065a8:	2100      	movs	r1, #0
 80065aa:	202e      	movs	r0, #46	@ 0x2e
 80065ac:	f002 f99b 	bl	80088e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 80065b0:	202e      	movs	r0, #46	@ 0x2e
 80065b2:	f002 f9b2 	bl	800891a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80065b6:	bf00      	nop
 80065b8:	bd80      	pop	{r7, pc}
	...

080065bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
  {
	   ssd1306_SetCursor(32, 20);
 80065c0:	2114      	movs	r1, #20
 80065c2:	2020      	movs	r0, #32
 80065c4:	f7fd fe3c 	bl	8004240 <ssd1306_SetCursor>
	   	  ssd1306_WriteString("NMI", Font_7x10, White);
 80065c8:	4a04      	ldr	r2, [pc, #16]	@ (80065dc <NMI_Handler+0x20>)
 80065ca:	2301      	movs	r3, #1
 80065cc:	ca06      	ldmia	r2, {r1, r2}
 80065ce:	4804      	ldr	r0, [pc, #16]	@ (80065e0 <NMI_Handler+0x24>)
 80065d0:	f7fd fe10 	bl	80041f4 <ssd1306_WriteString>
	   	  ssd1306_UpdateScreen();
 80065d4:	f7fd fd0a 	bl	8003fec <ssd1306_UpdateScreen>
	   ssd1306_SetCursor(32, 20);
 80065d8:	bf00      	nop
 80065da:	e7f1      	b.n	80065c0 <NMI_Handler+0x4>
 80065dc:	2000001c 	.word	0x2000001c
 80065e0:	080200e0 	.word	0x080200e0

080065e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  ssd1306_SetCursor(32, 20);
 80065e8:	2114      	movs	r1, #20
 80065ea:	2020      	movs	r0, #32
 80065ec:	f7fd fe28 	bl	8004240 <ssd1306_SetCursor>
	  ssd1306_WriteString("hardfault", Font_7x10, White);
 80065f0:	4a04      	ldr	r2, [pc, #16]	@ (8006604 <HardFault_Handler+0x20>)
 80065f2:	2301      	movs	r3, #1
 80065f4:	ca06      	ldmia	r2, {r1, r2}
 80065f6:	4804      	ldr	r0, [pc, #16]	@ (8006608 <HardFault_Handler+0x24>)
 80065f8:	f7fd fdfc 	bl	80041f4 <ssd1306_WriteString>
	  ssd1306_UpdateScreen();
 80065fc:	f7fd fcf6 	bl	8003fec <ssd1306_UpdateScreen>
	  ssd1306_SetCursor(32, 20);
 8006600:	bf00      	nop
 8006602:	e7f1      	b.n	80065e8 <HardFault_Handler+0x4>
 8006604:	2000001c 	.word	0x2000001c
 8006608:	080200e4 	.word	0x080200e4

0800660c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	af00      	add	r7, sp, #0

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
	  ssd1306_SetCursor(32, 20);
 8006610:	2114      	movs	r1, #20
 8006612:	2020      	movs	r0, #32
 8006614:	f7fd fe14 	bl	8004240 <ssd1306_SetCursor>
	  	  ssd1306_WriteString("mem", Font_7x10, White);
 8006618:	4a04      	ldr	r2, [pc, #16]	@ (800662c <MemManage_Handler+0x20>)
 800661a:	2301      	movs	r3, #1
 800661c:	ca06      	ldmia	r2, {r1, r2}
 800661e:	4804      	ldr	r0, [pc, #16]	@ (8006630 <MemManage_Handler+0x24>)
 8006620:	f7fd fde8 	bl	80041f4 <ssd1306_WriteString>
	  	  ssd1306_UpdateScreen();
 8006624:	f7fd fce2 	bl	8003fec <ssd1306_UpdateScreen>
	  ssd1306_SetCursor(32, 20);
 8006628:	bf00      	nop
 800662a:	e7f1      	b.n	8006610 <MemManage_Handler+0x4>
 800662c:	2000001c 	.word	0x2000001c
 8006630:	080200f0 	.word	0x080200f0

08006634 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006634:	b580      	push	{r7, lr}
 8006636:	af00      	add	r7, sp, #0

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_BusFault_IRQn 0 */
	  ssd1306_SetCursor(32, 20);
 8006638:	2114      	movs	r1, #20
 800663a:	2020      	movs	r0, #32
 800663c:	f7fd fe00 	bl	8004240 <ssd1306_SetCursor>
	  	  ssd1306_WriteString("bus", Font_7x10, White);
 8006640:	4a04      	ldr	r2, [pc, #16]	@ (8006654 <BusFault_Handler+0x20>)
 8006642:	2301      	movs	r3, #1
 8006644:	ca06      	ldmia	r2, {r1, r2}
 8006646:	4804      	ldr	r0, [pc, #16]	@ (8006658 <BusFault_Handler+0x24>)
 8006648:	f7fd fdd4 	bl	80041f4 <ssd1306_WriteString>
	  	  ssd1306_UpdateScreen();
 800664c:	f7fd fcce 	bl	8003fec <ssd1306_UpdateScreen>
	  ssd1306_SetCursor(32, 20);
 8006650:	bf00      	nop
 8006652:	e7f1      	b.n	8006638 <BusFault_Handler+0x4>
 8006654:	2000001c 	.word	0x2000001c
 8006658:	080200f4 	.word	0x080200f4

0800665c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800665c:	b580      	push	{r7, lr}
 800665e:	af00      	add	r7, sp, #0

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_UsageFault_IRQn 0 */
	  ssd1306_SetCursor(32, 20);
 8006660:	2114      	movs	r1, #20
 8006662:	2020      	movs	r0, #32
 8006664:	f7fd fdec 	bl	8004240 <ssd1306_SetCursor>
	  	  ssd1306_WriteString("usage", Font_7x10, White);
 8006668:	4a04      	ldr	r2, [pc, #16]	@ (800667c <UsageFault_Handler+0x20>)
 800666a:	2301      	movs	r3, #1
 800666c:	ca06      	ldmia	r2, {r1, r2}
 800666e:	4804      	ldr	r0, [pc, #16]	@ (8006680 <UsageFault_Handler+0x24>)
 8006670:	f7fd fdc0 	bl	80041f4 <ssd1306_WriteString>
	  	  ssd1306_UpdateScreen();
 8006674:	f7fd fcba 	bl	8003fec <ssd1306_UpdateScreen>
	  ssd1306_SetCursor(32, 20);
 8006678:	bf00      	nop
 800667a:	e7f1      	b.n	8006660 <UsageFault_Handler+0x4>
 800667c:	2000001c 	.word	0x2000001c
 8006680:	080200f8 	.word	0x080200f8

08006684 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006684:	b480      	push	{r7}
 8006686:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006688:	bf00      	nop
 800668a:	46bd      	mov	sp, r7
 800668c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006690:	4770      	bx	lr

08006692 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006692:	b480      	push	{r7}
 8006694:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006696:	bf00      	nop
 8006698:	46bd      	mov	sp, r7
 800669a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669e:	4770      	bx	lr

080066a0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80066a0:	b480      	push	{r7}
 80066a2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80066a4:	bf00      	nop
 80066a6:	46bd      	mov	sp, r7
 80066a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ac:	4770      	bx	lr

080066ae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80066ae:	b580      	push	{r7, lr}
 80066b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80066b2:	f000 ff25 	bl	8007500 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80066b6:	bf00      	nop
 80066b8:	bd80      	pop	{r7, pc}

080066ba <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 80066ba:	b580      	push	{r7, lr}
 80066bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 80066be:	f7fb fe15 	bl	80022ec <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 80066c2:	bf00      	nop
 80066c4:	bd80      	pop	{r7, pc}
	...

080066c8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80066cc:	4802      	ldr	r0, [pc, #8]	@ (80066d8 <DMA1_Channel1_IRQHandler+0x10>)
 80066ce:	f002 fb4a 	bl	8008d66 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80066d2:	bf00      	nop
 80066d4:	bd80      	pop	{r7, pc}
 80066d6:	bf00      	nop
 80066d8:	200003f0 	.word	0x200003f0

080066dc <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 80066e0:	4802      	ldr	r0, [pc, #8]	@ (80066ec <DMA1_Channel2_IRQHandler+0x10>)
 80066e2:	f002 fb40 	bl	8008d66 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80066e6:	bf00      	nop
 80066e8:	bd80      	pop	{r7, pc}
 80066ea:	bf00      	nop
 80066ec:	20001418 	.word	0x20001418

080066f0 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80066f4:	4802      	ldr	r0, [pc, #8]	@ (8006700 <DMA1_Channel3_IRQHandler+0x10>)
 80066f6:	f002 fb36 	bl	8008d66 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80066fa:	bf00      	nop
 80066fc:	bd80      	pop	{r7, pc}
 80066fe:	bf00      	nop
 8006700:	20001478 	.word	0x20001478

08006704 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt, USB wake-up interrupt through EXTI line 28.
  */
void USB_LP_IRQHandler(void)
{
 8006704:	b580      	push	{r7, lr}
 8006706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8006708:	4802      	ldr	r0, [pc, #8]	@ (8006714 <USB_LP_IRQHandler+0x10>)
 800670a:	f003 fe2b 	bl	800a364 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 800670e:	bf00      	nop
 8006710:	bd80      	pop	{r7, pc}
 8006712:	bf00      	nop
 8006714:	20002ac8 	.word	0x20002ac8

08006718 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 800671c:	4806      	ldr	r0, [pc, #24]	@ (8006738 <TIM1_UP_TIM16_IRQHandler+0x20>)
 800671e:	f008 fcb8 	bl	800f092 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */
  updatedate();
 8006722:	f000 fa7d 	bl	8006c20 <updatedate>
  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_0);
 8006726:	2101      	movs	r1, #1
 8006728:	4804      	ldr	r0, [pc, #16]	@ (800673c <TIM1_UP_TIM16_IRQHandler+0x24>)
 800672a:	f002 fe19 	bl	8009360 <HAL_GPIO_TogglePin>
  bluetoothsend=1;
 800672e:	4b04      	ldr	r3, [pc, #16]	@ (8006740 <TIM1_UP_TIM16_IRQHandler+0x28>)
 8006730:	2201      	movs	r2, #1
 8006732:	601a      	str	r2, [r3, #0]

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8006734:	bf00      	nop
 8006736:	bd80      	pop	{r7, pc}
 8006738:	20001258 	.word	0x20001258
 800673c:	48000400 	.word	0x48000400
 8006740:	20000bbc 	.word	0x20000bbc

08006744 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8006748:	4805      	ldr	r0, [pc, #20]	@ (8006760 <TIM1_TRG_COM_TIM17_IRQHandler+0x1c>)
 800674a:	f008 fca2 	bl	800f092 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */
  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_1);
 800674e:	2102      	movs	r1, #2
 8006750:	4804      	ldr	r0, [pc, #16]	@ (8006764 <TIM1_TRG_COM_TIM17_IRQHandler+0x20>)
 8006752:	f002 fe05 	bl	8009360 <HAL_GPIO_TogglePin>
  enablewrite=1;
 8006756:	4b04      	ldr	r3, [pc, #16]	@ (8006768 <TIM1_TRG_COM_TIM17_IRQHandler+0x24>)
 8006758:	2201      	movs	r2, #1
 800675a:	601a      	str	r2, [r3, #0]

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 800675c:	bf00      	nop
 800675e:	bd80      	pop	{r7, pc}
 8006760:	200012a4 	.word	0x200012a4
 8006764:	48000400 	.word	0x48000400
 8006768:	20000b98 	.word	0x20000b98

0800676c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 800676c:	b580      	push	{r7, lr}
 800676e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8006770:	4802      	ldr	r0, [pc, #8]	@ (800677c <SPI1_IRQHandler+0x10>)
 8006772:	f008 f8a3 	bl	800e8bc <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8006776:	bf00      	nop
 8006778:	bd80      	pop	{r7, pc}
 800677a:	bf00      	nop
 800677c:	20000d9c 	.word	0x20000d9c

08006780 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8006780:	b580      	push	{r7, lr}
 8006782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8006784:	4802      	ldr	r0, [pc, #8]	@ (8006790 <USART1_IRQHandler+0x10>)
 8006786:	f009 f9db 	bl	800fb40 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800678a:	bf00      	nop
 800678c:	bd80      	pop	{r7, pc}
 800678e:	bf00      	nop
 8006790:	20001384 	.word	0x20001384

08006794 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8006794:	b580      	push	{r7, lr}
 8006796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8006798:	4802      	ldr	r0, [pc, #8]	@ (80067a4 <LPUART1_IRQHandler+0x10>)
 800679a:	f009 f9d1 	bl	800fb40 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 800679e:	bf00      	nop
 80067a0:	bd80      	pop	{r7, pc}
 80067a2:	bf00      	nop
 80067a4:	200012f0 	.word	0x200012f0

080067a8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 80067ac:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80067b0:	f002 fdf0 	bl	8009394 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80067b4:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80067b8:	f002 fdec 	bl	8009394 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80067bc:	bf00      	nop
 80067be:	bd80      	pop	{r7, pc}

080067c0 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 80067c4:	f011 fe42 	bl	801844c <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 80067c8:	bf00      	nop
 80067ca:	bd80      	pop	{r7, pc}

080067cc <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 80067d0:	f011 fe72 	bl	80184b8 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 80067d4:	bf00      	nop
 80067d6:	bd80      	pop	{r7, pc}

080067d8 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 80067dc:	f002 fdf2 	bl	80093c4 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 80067e0:	bf00      	nop
 80067e2:	bd80      	pop	{r7, pc}

080067e4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80067e4:	b480      	push	{r7}
 80067e6:	af00      	add	r7, sp, #0
  return 1;
 80067e8:	2301      	movs	r3, #1
}
 80067ea:	4618      	mov	r0, r3
 80067ec:	46bd      	mov	sp, r7
 80067ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f2:	4770      	bx	lr

080067f4 <_kill>:

int _kill(int pid, int sig)
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b082      	sub	sp, #8
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
 80067fc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80067fe:	f014 ff6f 	bl	801b6e0 <__errno>
 8006802:	4603      	mov	r3, r0
 8006804:	2216      	movs	r2, #22
 8006806:	601a      	str	r2, [r3, #0]
  return -1;
 8006808:	f04f 33ff 	mov.w	r3, #4294967295
}
 800680c:	4618      	mov	r0, r3
 800680e:	3708      	adds	r7, #8
 8006810:	46bd      	mov	sp, r7
 8006812:	bd80      	pop	{r7, pc}

08006814 <_exit>:

void _exit (int status)
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b082      	sub	sp, #8
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800681c:	f04f 31ff 	mov.w	r1, #4294967295
 8006820:	6878      	ldr	r0, [r7, #4]
 8006822:	f7ff ffe7 	bl	80067f4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8006826:	bf00      	nop
 8006828:	e7fd      	b.n	8006826 <_exit+0x12>

0800682a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800682a:	b580      	push	{r7, lr}
 800682c:	b086      	sub	sp, #24
 800682e:	af00      	add	r7, sp, #0
 8006830:	60f8      	str	r0, [r7, #12]
 8006832:	60b9      	str	r1, [r7, #8]
 8006834:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006836:	2300      	movs	r3, #0
 8006838:	617b      	str	r3, [r7, #20]
 800683a:	e00a      	b.n	8006852 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800683c:	f3af 8000 	nop.w
 8006840:	4601      	mov	r1, r0
 8006842:	68bb      	ldr	r3, [r7, #8]
 8006844:	1c5a      	adds	r2, r3, #1
 8006846:	60ba      	str	r2, [r7, #8]
 8006848:	b2ca      	uxtb	r2, r1
 800684a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800684c:	697b      	ldr	r3, [r7, #20]
 800684e:	3301      	adds	r3, #1
 8006850:	617b      	str	r3, [r7, #20]
 8006852:	697a      	ldr	r2, [r7, #20]
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	429a      	cmp	r2, r3
 8006858:	dbf0      	blt.n	800683c <_read+0x12>
  }

  return len;
 800685a:	687b      	ldr	r3, [r7, #4]
}
 800685c:	4618      	mov	r0, r3
 800685e:	3718      	adds	r7, #24
 8006860:	46bd      	mov	sp, r7
 8006862:	bd80      	pop	{r7, pc}

08006864 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8006864:	b580      	push	{r7, lr}
 8006866:	b086      	sub	sp, #24
 8006868:	af00      	add	r7, sp, #0
 800686a:	60f8      	str	r0, [r7, #12]
 800686c:	60b9      	str	r1, [r7, #8]
 800686e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006870:	2300      	movs	r3, #0
 8006872:	617b      	str	r3, [r7, #20]
 8006874:	e009      	b.n	800688a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8006876:	68bb      	ldr	r3, [r7, #8]
 8006878:	1c5a      	adds	r2, r3, #1
 800687a:	60ba      	str	r2, [r7, #8]
 800687c:	781b      	ldrb	r3, [r3, #0]
 800687e:	4618      	mov	r0, r3
 8006880:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006884:	697b      	ldr	r3, [r7, #20]
 8006886:	3301      	adds	r3, #1
 8006888:	617b      	str	r3, [r7, #20]
 800688a:	697a      	ldr	r2, [r7, #20]
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	429a      	cmp	r2, r3
 8006890:	dbf1      	blt.n	8006876 <_write+0x12>
  }
  return len;
 8006892:	687b      	ldr	r3, [r7, #4]
}
 8006894:	4618      	mov	r0, r3
 8006896:	3718      	adds	r7, #24
 8006898:	46bd      	mov	sp, r7
 800689a:	bd80      	pop	{r7, pc}

0800689c <_close>:

int _close(int file)
{
 800689c:	b480      	push	{r7}
 800689e:	b083      	sub	sp, #12
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80068a4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80068a8:	4618      	mov	r0, r3
 80068aa:	370c      	adds	r7, #12
 80068ac:	46bd      	mov	sp, r7
 80068ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b2:	4770      	bx	lr

080068b4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80068b4:	b480      	push	{r7}
 80068b6:	b083      	sub	sp, #12
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
 80068bc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80068c4:	605a      	str	r2, [r3, #4]
  return 0;
 80068c6:	2300      	movs	r3, #0
}
 80068c8:	4618      	mov	r0, r3
 80068ca:	370c      	adds	r7, #12
 80068cc:	46bd      	mov	sp, r7
 80068ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d2:	4770      	bx	lr

080068d4 <_isatty>:

int _isatty(int file)
{
 80068d4:	b480      	push	{r7}
 80068d6:	b083      	sub	sp, #12
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80068dc:	2301      	movs	r3, #1
}
 80068de:	4618      	mov	r0, r3
 80068e0:	370c      	adds	r7, #12
 80068e2:	46bd      	mov	sp, r7
 80068e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e8:	4770      	bx	lr

080068ea <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80068ea:	b480      	push	{r7}
 80068ec:	b085      	sub	sp, #20
 80068ee:	af00      	add	r7, sp, #0
 80068f0:	60f8      	str	r0, [r7, #12]
 80068f2:	60b9      	str	r1, [r7, #8]
 80068f4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80068f6:	2300      	movs	r3, #0
}
 80068f8:	4618      	mov	r0, r3
 80068fa:	3714      	adds	r7, #20
 80068fc:	46bd      	mov	sp, r7
 80068fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006902:	4770      	bx	lr

08006904 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006904:	b580      	push	{r7, lr}
 8006906:	b086      	sub	sp, #24
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800690c:	4a14      	ldr	r2, [pc, #80]	@ (8006960 <_sbrk+0x5c>)
 800690e:	4b15      	ldr	r3, [pc, #84]	@ (8006964 <_sbrk+0x60>)
 8006910:	1ad3      	subs	r3, r2, r3
 8006912:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006914:	697b      	ldr	r3, [r7, #20]
 8006916:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006918:	4b13      	ldr	r3, [pc, #76]	@ (8006968 <_sbrk+0x64>)
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d102      	bne.n	8006926 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006920:	4b11      	ldr	r3, [pc, #68]	@ (8006968 <_sbrk+0x64>)
 8006922:	4a12      	ldr	r2, [pc, #72]	@ (800696c <_sbrk+0x68>)
 8006924:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006926:	4b10      	ldr	r3, [pc, #64]	@ (8006968 <_sbrk+0x64>)
 8006928:	681a      	ldr	r2, [r3, #0]
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	4413      	add	r3, r2
 800692e:	693a      	ldr	r2, [r7, #16]
 8006930:	429a      	cmp	r2, r3
 8006932:	d207      	bcs.n	8006944 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006934:	f014 fed4 	bl	801b6e0 <__errno>
 8006938:	4603      	mov	r3, r0
 800693a:	220c      	movs	r2, #12
 800693c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800693e:	f04f 33ff 	mov.w	r3, #4294967295
 8006942:	e009      	b.n	8006958 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006944:	4b08      	ldr	r3, [pc, #32]	@ (8006968 <_sbrk+0x64>)
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800694a:	4b07      	ldr	r3, [pc, #28]	@ (8006968 <_sbrk+0x64>)
 800694c:	681a      	ldr	r2, [r3, #0]
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	4413      	add	r3, r2
 8006952:	4a05      	ldr	r2, [pc, #20]	@ (8006968 <_sbrk+0x64>)
 8006954:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006956:	68fb      	ldr	r3, [r7, #12]
}
 8006958:	4618      	mov	r0, r3
 800695a:	3718      	adds	r7, #24
 800695c:	46bd      	mov	sp, r7
 800695e:	bd80      	pop	{r7, pc}
 8006960:	20030000 	.word	0x20030000
 8006964:	00000400 	.word	0x00000400
 8006968:	20001208 	.word	0x20001208
 800696c:	200031b0 	.word	0x200031b0

08006970 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006970:	b480      	push	{r7}
 8006972:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8006974:	4b24      	ldr	r3, [pc, #144]	@ (8006a08 <SystemInit+0x98>)
 8006976:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800697a:	4a23      	ldr	r2, [pc, #140]	@ (8006a08 <SystemInit+0x98>)
 800697c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006980:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8006984:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800698e:	f043 0301 	orr.w	r3, r3, #1
 8006992:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8006994:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006998:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 800699c:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 800699e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80069a2:	681a      	ldr	r2, [r3, #0]
 80069a4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80069a8:	4b18      	ldr	r3, [pc, #96]	@ (8006a0c <SystemInit+0x9c>)
 80069aa:	4013      	ands	r3, r2
 80069ac:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80069ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80069b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80069b6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80069ba:	f023 0305 	bic.w	r3, r3, #5
 80069be:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80069c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80069c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80069ca:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80069ce:	f023 0301 	bic.w	r3, r3, #1
 80069d2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80069d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80069da:	4a0d      	ldr	r2, [pc, #52]	@ (8006a10 <SystemInit+0xa0>)
 80069dc:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 80069de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80069e2:	4a0b      	ldr	r2, [pc, #44]	@ (8006a10 <SystemInit+0xa0>)
 80069e4:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80069e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80069f0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80069f4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80069f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80069fa:	2200      	movs	r2, #0
 80069fc:	619a      	str	r2, [r3, #24]
}
 80069fe:	bf00      	nop
 8006a00:	46bd      	mov	sp, r7
 8006a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a06:	4770      	bx	lr
 8006a08:	e000ed00 	.word	0xe000ed00
 8006a0c:	faf6fefb 	.word	0xfaf6fefb
 8006a10:	22041000 	.word	0x22041000

08006a14 <LL_APB1_GRP1_EnableClock>:
{
 8006a14:	b480      	push	{r7}
 8006a16:	b085      	sub	sp, #20
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8006a1c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a20:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8006a22:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	4313      	orrs	r3, r2
 8006a2a:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8006a2c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a30:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	4013      	ands	r3, r2
 8006a36:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006a38:	68fb      	ldr	r3, [r7, #12]
}
 8006a3a:	bf00      	nop
 8006a3c:	3714      	adds	r7, #20
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a44:	4770      	bx	lr

08006a46 <LL_APB2_GRP1_EnableClock>:
{
 8006a46:	b480      	push	{r7}
 8006a48:	b085      	sub	sp, #20
 8006a4a:	af00      	add	r7, sp, #0
 8006a4c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8006a4e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a52:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006a54:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	4313      	orrs	r3, r2
 8006a5c:	660b      	str	r3, [r1, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8006a5e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a62:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	4013      	ands	r3, r2
 8006a68:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
}
 8006a6c:	bf00      	nop
 8006a6e:	3714      	adds	r7, #20
 8006a70:	46bd      	mov	sp, r7
 8006a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a76:	4770      	bx	lr

08006a78 <MX_TIM2_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b088      	sub	sp, #32
 8006a7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006a7e:	f107 0310 	add.w	r3, r7, #16
 8006a82:	2200      	movs	r2, #0
 8006a84:	601a      	str	r2, [r3, #0]
 8006a86:	605a      	str	r2, [r3, #4]
 8006a88:	609a      	str	r2, [r3, #8]
 8006a8a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006a8c:	1d3b      	adds	r3, r7, #4
 8006a8e:	2200      	movs	r2, #0
 8006a90:	601a      	str	r2, [r3, #0]
 8006a92:	605a      	str	r2, [r3, #4]
 8006a94:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8006a96:	4b1e      	ldr	r3, [pc, #120]	@ (8006b10 <MX_TIM2_Init+0x98>)
 8006a98:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8006a9c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 6400-1;
 8006a9e:	4b1c      	ldr	r3, [pc, #112]	@ (8006b10 <MX_TIM2_Init+0x98>)
 8006aa0:	f641 02ff 	movw	r2, #6399	@ 0x18ff
 8006aa4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006aa6:	4b1a      	ldr	r3, [pc, #104]	@ (8006b10 <MX_TIM2_Init+0x98>)
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8006aac:	4b18      	ldr	r3, [pc, #96]	@ (8006b10 <MX_TIM2_Init+0x98>)
 8006aae:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8006ab2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006ab4:	4b16      	ldr	r3, [pc, #88]	@ (8006b10 <MX_TIM2_Init+0x98>)
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006aba:	4b15      	ldr	r3, [pc, #84]	@ (8006b10 <MX_TIM2_Init+0x98>)
 8006abc:	2200      	movs	r2, #0
 8006abe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8006ac0:	4813      	ldr	r0, [pc, #76]	@ (8006b10 <MX_TIM2_Init+0x98>)
 8006ac2:	f008 f9cb 	bl	800ee5c <HAL_TIM_Base_Init>
 8006ac6:	4603      	mov	r3, r0
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d001      	beq.n	8006ad0 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8006acc:	f7fc fa72 	bl	8002fb4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006ad0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006ad4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8006ad6:	f107 0310 	add.w	r3, r7, #16
 8006ada:	4619      	mov	r1, r3
 8006adc:	480c      	ldr	r0, [pc, #48]	@ (8006b10 <MX_TIM2_Init+0x98>)
 8006ade:	f008 fbdf 	bl	800f2a0 <HAL_TIM_ConfigClockSource>
 8006ae2:	4603      	mov	r3, r0
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d001      	beq.n	8006aec <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8006ae8:	f7fc fa64 	bl	8002fb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8006aec:	2320      	movs	r3, #32
 8006aee:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006af0:	2300      	movs	r3, #0
 8006af2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8006af4:	1d3b      	adds	r3, r7, #4
 8006af6:	4619      	mov	r1, r3
 8006af8:	4805      	ldr	r0, [pc, #20]	@ (8006b10 <MX_TIM2_Init+0x98>)
 8006afa:	f008 fdd9 	bl	800f6b0 <HAL_TIMEx_MasterConfigSynchronization>
 8006afe:	4603      	mov	r3, r0
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d001      	beq.n	8006b08 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8006b04:	f7fc fa56 	bl	8002fb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8006b08:	bf00      	nop
 8006b0a:	3720      	adds	r7, #32
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	bd80      	pop	{r7, pc}
 8006b10:	2000120c 	.word	0x2000120c

08006b14 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8006b18:	4b10      	ldr	r3, [pc, #64]	@ (8006b5c <MX_TIM16_Init+0x48>)
 8006b1a:	4a11      	ldr	r2, [pc, #68]	@ (8006b60 <MX_TIM16_Init+0x4c>)
 8006b1c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 64000-1;
 8006b1e:	4b0f      	ldr	r3, [pc, #60]	@ (8006b5c <MX_TIM16_Init+0x48>)
 8006b20:	f64f 12ff 	movw	r2, #63999	@ 0xf9ff
 8006b24:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006b26:	4b0d      	ldr	r3, [pc, #52]	@ (8006b5c <MX_TIM16_Init+0x48>)
 8006b28:	2200      	movs	r2, #0
 8006b2a:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1000-1;
 8006b2c:	4b0b      	ldr	r3, [pc, #44]	@ (8006b5c <MX_TIM16_Init+0x48>)
 8006b2e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8006b32:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006b34:	4b09      	ldr	r3, [pc, #36]	@ (8006b5c <MX_TIM16_Init+0x48>)
 8006b36:	2200      	movs	r2, #0
 8006b38:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8006b3a:	4b08      	ldr	r3, [pc, #32]	@ (8006b5c <MX_TIM16_Init+0x48>)
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006b40:	4b06      	ldr	r3, [pc, #24]	@ (8006b5c <MX_TIM16_Init+0x48>)
 8006b42:	2200      	movs	r2, #0
 8006b44:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8006b46:	4805      	ldr	r0, [pc, #20]	@ (8006b5c <MX_TIM16_Init+0x48>)
 8006b48:	f008 f988 	bl	800ee5c <HAL_TIM_Base_Init>
 8006b4c:	4603      	mov	r3, r0
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d001      	beq.n	8006b56 <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8006b52:	f7fc fa2f 	bl	8002fb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8006b56:	bf00      	nop
 8006b58:	bd80      	pop	{r7, pc}
 8006b5a:	bf00      	nop
 8006b5c:	20001258 	.word	0x20001258
 8006b60:	40014400 	.word	0x40014400

08006b64 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8006b68:	4b0f      	ldr	r3, [pc, #60]	@ (8006ba8 <MX_TIM17_Init+0x44>)
 8006b6a:	4a10      	ldr	r2, [pc, #64]	@ (8006bac <MX_TIM17_Init+0x48>)
 8006b6c:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 64000-1;
 8006b6e:	4b0e      	ldr	r3, [pc, #56]	@ (8006ba8 <MX_TIM17_Init+0x44>)
 8006b70:	f64f 12ff 	movw	r2, #63999	@ 0xf9ff
 8006b74:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006b76:	4b0c      	ldr	r3, [pc, #48]	@ (8006ba8 <MX_TIM17_Init+0x44>)
 8006b78:	2200      	movs	r2, #0
 8006b7a:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 200-1;
 8006b7c:	4b0a      	ldr	r3, [pc, #40]	@ (8006ba8 <MX_TIM17_Init+0x44>)
 8006b7e:	22c7      	movs	r2, #199	@ 0xc7
 8006b80:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006b82:	4b09      	ldr	r3, [pc, #36]	@ (8006ba8 <MX_TIM17_Init+0x44>)
 8006b84:	2200      	movs	r2, #0
 8006b86:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8006b88:	4b07      	ldr	r3, [pc, #28]	@ (8006ba8 <MX_TIM17_Init+0x44>)
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006b8e:	4b06      	ldr	r3, [pc, #24]	@ (8006ba8 <MX_TIM17_Init+0x44>)
 8006b90:	2200      	movs	r2, #0
 8006b92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8006b94:	4804      	ldr	r0, [pc, #16]	@ (8006ba8 <MX_TIM17_Init+0x44>)
 8006b96:	f008 f961 	bl	800ee5c <HAL_TIM_Base_Init>
 8006b9a:	4603      	mov	r3, r0
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d001      	beq.n	8006ba4 <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 8006ba0:	f7fc fa08 	bl	8002fb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8006ba4:	bf00      	nop
 8006ba6:	bd80      	pop	{r7, pc}
 8006ba8:	200012a4 	.word	0x200012a4
 8006bac:	40014800 	.word	0x40014800

08006bb0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b082      	sub	sp, #8
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006bc0:	d103      	bne.n	8006bca <HAL_TIM_Base_MspInit+0x1a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8006bc2:	2001      	movs	r0, #1
 8006bc4:	f7ff ff26 	bl	8006a14 <LL_APB1_GRP1_EnableClock>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8006bc8:	e022      	b.n	8006c10 <HAL_TIM_Base_MspInit+0x60>
  else if(tim_baseHandle->Instance==TIM16)
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	4a12      	ldr	r2, [pc, #72]	@ (8006c18 <HAL_TIM_Base_MspInit+0x68>)
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d10c      	bne.n	8006bee <HAL_TIM_Base_MspInit+0x3e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8006bd4:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8006bd8:	f7ff ff35 	bl	8006a46 <LL_APB2_GRP1_EnableClock>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 4, 0);
 8006bdc:	2200      	movs	r2, #0
 8006bde:	2104      	movs	r1, #4
 8006be0:	2019      	movs	r0, #25
 8006be2:	f001 fe80 	bl	80088e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8006be6:	2019      	movs	r0, #25
 8006be8:	f001 fe97 	bl	800891a <HAL_NVIC_EnableIRQ>
}
 8006bec:	e010      	b.n	8006c10 <HAL_TIM_Base_MspInit+0x60>
  else if(tim_baseHandle->Instance==TIM17)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	4a0a      	ldr	r2, [pc, #40]	@ (8006c1c <HAL_TIM_Base_MspInit+0x6c>)
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	d10b      	bne.n	8006c10 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8006bf8:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 8006bfc:	f7ff ff23 	bl	8006a46 <LL_APB2_GRP1_EnableClock>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 2, 0);
 8006c00:	2200      	movs	r2, #0
 8006c02:	2102      	movs	r1, #2
 8006c04:	201a      	movs	r0, #26
 8006c06:	f001 fe6e 	bl	80088e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8006c0a:	201a      	movs	r0, #26
 8006c0c:	f001 fe85 	bl	800891a <HAL_NVIC_EnableIRQ>
}
 8006c10:	bf00      	nop
 8006c12:	3708      	adds	r7, #8
 8006c14:	46bd      	mov	sp, r7
 8006c16:	bd80      	pop	{r7, pc}
 8006c18:	40014400 	.word	0x40014400
 8006c1c:	40014800 	.word	0x40014800

08006c20 <updatedate>:
  /* USER CODE END TIM17_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void updatedate(void){
 8006c20:	b480      	push	{r7}
 8006c22:	af00      	add	r7, sp, #0

	SEC+=1;
 8006c24:	4b98      	ldr	r3, [pc, #608]	@ (8006e88 <updatedate+0x268>)
 8006c26:	781b      	ldrb	r3, [r3, #0]
 8006c28:	3301      	adds	r3, #1
 8006c2a:	b2da      	uxtb	r2, r3
 8006c2c:	4b96      	ldr	r3, [pc, #600]	@ (8006e88 <updatedate+0x268>)
 8006c2e:	701a      	strb	r2, [r3, #0]
	if(SEC>59){
 8006c30:	4b95      	ldr	r3, [pc, #596]	@ (8006e88 <updatedate+0x268>)
 8006c32:	781b      	ldrb	r3, [r3, #0]
 8006c34:	2b3b      	cmp	r3, #59	@ 0x3b
 8006c36:	d908      	bls.n	8006c4a <updatedate+0x2a>
		SEC=0;
 8006c38:	4b93      	ldr	r3, [pc, #588]	@ (8006e88 <updatedate+0x268>)
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	701a      	strb	r2, [r3, #0]
		MINUTE+=1;
 8006c3e:	4b93      	ldr	r3, [pc, #588]	@ (8006e8c <updatedate+0x26c>)
 8006c40:	781b      	ldrb	r3, [r3, #0]
 8006c42:	3301      	adds	r3, #1
 8006c44:	b2da      	uxtb	r2, r3
 8006c46:	4b91      	ldr	r3, [pc, #580]	@ (8006e8c <updatedate+0x26c>)
 8006c48:	701a      	strb	r2, [r3, #0]
	}

	if(MINUTE>59){
 8006c4a:	4b90      	ldr	r3, [pc, #576]	@ (8006e8c <updatedate+0x26c>)
 8006c4c:	781b      	ldrb	r3, [r3, #0]
 8006c4e:	2b3b      	cmp	r3, #59	@ 0x3b
 8006c50:	d908      	bls.n	8006c64 <updatedate+0x44>

		MINUTE=0;
 8006c52:	4b8e      	ldr	r3, [pc, #568]	@ (8006e8c <updatedate+0x26c>)
 8006c54:	2200      	movs	r2, #0
 8006c56:	701a      	strb	r2, [r3, #0]
		HR+=1;
 8006c58:	4b8d      	ldr	r3, [pc, #564]	@ (8006e90 <updatedate+0x270>)
 8006c5a:	781b      	ldrb	r3, [r3, #0]
 8006c5c:	3301      	adds	r3, #1
 8006c5e:	b2da      	uxtb	r2, r3
 8006c60:	4b8b      	ldr	r3, [pc, #556]	@ (8006e90 <updatedate+0x270>)
 8006c62:	701a      	strb	r2, [r3, #0]
	}
	if(HR>=24){
 8006c64:	4b8a      	ldr	r3, [pc, #552]	@ (8006e90 <updatedate+0x270>)
 8006c66:	781b      	ldrb	r3, [r3, #0]
 8006c68:	2b17      	cmp	r3, #23
 8006c6a:	d908      	bls.n	8006c7e <updatedate+0x5e>
		HR=0;
 8006c6c:	4b88      	ldr	r3, [pc, #544]	@ (8006e90 <updatedate+0x270>)
 8006c6e:	2200      	movs	r2, #0
 8006c70:	701a      	strb	r2, [r3, #0]
		JOURS+=1;
 8006c72:	4b88      	ldr	r3, [pc, #544]	@ (8006e94 <updatedate+0x274>)
 8006c74:	781b      	ldrb	r3, [r3, #0]
 8006c76:	3301      	adds	r3, #1
 8006c78:	b2da      	uxtb	r2, r3
 8006c7a:	4b86      	ldr	r3, [pc, #536]	@ (8006e94 <updatedate+0x274>)
 8006c7c:	701a      	strb	r2, [r3, #0]
	}
	switch (mois){
 8006c7e:	4b86      	ldr	r3, [pc, #536]	@ (8006e98 <updatedate+0x278>)
 8006c80:	781b      	ldrb	r3, [r3, #0]
 8006c82:	2b0b      	cmp	r3, #11
 8006c84:	f200 8137 	bhi.w	8006ef6 <updatedate+0x2d6>
 8006c88:	a201      	add	r2, pc, #4	@ (adr r2, 8006c90 <updatedate+0x70>)
 8006c8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c8e:	bf00      	nop
 8006c90:	08006cc1 	.word	0x08006cc1
 8006c94:	08006ceb 	.word	0x08006ceb
 8006c98:	08006d15 	.word	0x08006d15
 8006c9c:	08006d3f 	.word	0x08006d3f
 8006ca0:	08006d69 	.word	0x08006d69
 8006ca4:	08006d93 	.word	0x08006d93
 8006ca8:	08006dbd 	.word	0x08006dbd
 8006cac:	08006de7 	.word	0x08006de7
 8006cb0:	08006e0f 	.word	0x08006e0f
 8006cb4:	08006e37 	.word	0x08006e37
 8006cb8:	08006e5f 	.word	0x08006e5f
 8006cbc:	08006ea1 	.word	0x08006ea1

	case JANVIER:
		if(JOURS>31){
 8006cc0:	4b74      	ldr	r3, [pc, #464]	@ (8006e94 <updatedate+0x274>)
 8006cc2:	781b      	ldrb	r3, [r3, #0]
 8006cc4:	2b1f      	cmp	r3, #31
 8006cc6:	f240 80ff 	bls.w	8006ec8 <updatedate+0x2a8>
			JOURS=1;
 8006cca:	4b72      	ldr	r3, [pc, #456]	@ (8006e94 <updatedate+0x274>)
 8006ccc:	2201      	movs	r2, #1
 8006cce:	701a      	strb	r2, [r3, #0]
			mois++;
 8006cd0:	4b71      	ldr	r3, [pc, #452]	@ (8006e98 <updatedate+0x278>)
 8006cd2:	781b      	ldrb	r3, [r3, #0]
 8006cd4:	3301      	adds	r3, #1
 8006cd6:	b2da      	uxtb	r2, r3
 8006cd8:	4b6f      	ldr	r3, [pc, #444]	@ (8006e98 <updatedate+0x278>)
 8006cda:	701a      	strb	r2, [r3, #0]
			MOIS++;
 8006cdc:	4b6f      	ldr	r3, [pc, #444]	@ (8006e9c <updatedate+0x27c>)
 8006cde:	781b      	ldrb	r3, [r3, #0]
 8006ce0:	3301      	adds	r3, #1
 8006ce2:	b2da      	uxtb	r2, r3
 8006ce4:	4b6d      	ldr	r3, [pc, #436]	@ (8006e9c <updatedate+0x27c>)
 8006ce6:	701a      	strb	r2, [r3, #0]
		}

		break;
 8006ce8:	e0ee      	b.n	8006ec8 <updatedate+0x2a8>
	case FEVRIER:
		if(JOURS>29){
 8006cea:	4b6a      	ldr	r3, [pc, #424]	@ (8006e94 <updatedate+0x274>)
 8006cec:	781b      	ldrb	r3, [r3, #0]
 8006cee:	2b1d      	cmp	r3, #29
 8006cf0:	f240 80ec 	bls.w	8006ecc <updatedate+0x2ac>
					JOURS=1;
 8006cf4:	4b67      	ldr	r3, [pc, #412]	@ (8006e94 <updatedate+0x274>)
 8006cf6:	2201      	movs	r2, #1
 8006cf8:	701a      	strb	r2, [r3, #0]
					mois++;
 8006cfa:	4b67      	ldr	r3, [pc, #412]	@ (8006e98 <updatedate+0x278>)
 8006cfc:	781b      	ldrb	r3, [r3, #0]
 8006cfe:	3301      	adds	r3, #1
 8006d00:	b2da      	uxtb	r2, r3
 8006d02:	4b65      	ldr	r3, [pc, #404]	@ (8006e98 <updatedate+0x278>)
 8006d04:	701a      	strb	r2, [r3, #0]
					MOIS++;
 8006d06:	4b65      	ldr	r3, [pc, #404]	@ (8006e9c <updatedate+0x27c>)
 8006d08:	781b      	ldrb	r3, [r3, #0]
 8006d0a:	3301      	adds	r3, #1
 8006d0c:	b2da      	uxtb	r2, r3
 8006d0e:	4b63      	ldr	r3, [pc, #396]	@ (8006e9c <updatedate+0x27c>)
 8006d10:	701a      	strb	r2, [r3, #0]
				}
		break;
 8006d12:	e0db      	b.n	8006ecc <updatedate+0x2ac>
	case MARS:
		if(JOURS>31){
 8006d14:	4b5f      	ldr	r3, [pc, #380]	@ (8006e94 <updatedate+0x274>)
 8006d16:	781b      	ldrb	r3, [r3, #0]
 8006d18:	2b1f      	cmp	r3, #31
 8006d1a:	f240 80d9 	bls.w	8006ed0 <updatedate+0x2b0>
					JOURS=1;
 8006d1e:	4b5d      	ldr	r3, [pc, #372]	@ (8006e94 <updatedate+0x274>)
 8006d20:	2201      	movs	r2, #1
 8006d22:	701a      	strb	r2, [r3, #0]
					mois++;
 8006d24:	4b5c      	ldr	r3, [pc, #368]	@ (8006e98 <updatedate+0x278>)
 8006d26:	781b      	ldrb	r3, [r3, #0]
 8006d28:	3301      	adds	r3, #1
 8006d2a:	b2da      	uxtb	r2, r3
 8006d2c:	4b5a      	ldr	r3, [pc, #360]	@ (8006e98 <updatedate+0x278>)
 8006d2e:	701a      	strb	r2, [r3, #0]
					MOIS++;
 8006d30:	4b5a      	ldr	r3, [pc, #360]	@ (8006e9c <updatedate+0x27c>)
 8006d32:	781b      	ldrb	r3, [r3, #0]
 8006d34:	3301      	adds	r3, #1
 8006d36:	b2da      	uxtb	r2, r3
 8006d38:	4b58      	ldr	r3, [pc, #352]	@ (8006e9c <updatedate+0x27c>)
 8006d3a:	701a      	strb	r2, [r3, #0]
				}
		break;
 8006d3c:	e0c8      	b.n	8006ed0 <updatedate+0x2b0>
	case AVRIL:
		if(JOURS>30){
 8006d3e:	4b55      	ldr	r3, [pc, #340]	@ (8006e94 <updatedate+0x274>)
 8006d40:	781b      	ldrb	r3, [r3, #0]
 8006d42:	2b1e      	cmp	r3, #30
 8006d44:	f240 80c6 	bls.w	8006ed4 <updatedate+0x2b4>
					JOURS=1;
 8006d48:	4b52      	ldr	r3, [pc, #328]	@ (8006e94 <updatedate+0x274>)
 8006d4a:	2201      	movs	r2, #1
 8006d4c:	701a      	strb	r2, [r3, #0]
					mois++;
 8006d4e:	4b52      	ldr	r3, [pc, #328]	@ (8006e98 <updatedate+0x278>)
 8006d50:	781b      	ldrb	r3, [r3, #0]
 8006d52:	3301      	adds	r3, #1
 8006d54:	b2da      	uxtb	r2, r3
 8006d56:	4b50      	ldr	r3, [pc, #320]	@ (8006e98 <updatedate+0x278>)
 8006d58:	701a      	strb	r2, [r3, #0]
					MOIS++;
 8006d5a:	4b50      	ldr	r3, [pc, #320]	@ (8006e9c <updatedate+0x27c>)
 8006d5c:	781b      	ldrb	r3, [r3, #0]
 8006d5e:	3301      	adds	r3, #1
 8006d60:	b2da      	uxtb	r2, r3
 8006d62:	4b4e      	ldr	r3, [pc, #312]	@ (8006e9c <updatedate+0x27c>)
 8006d64:	701a      	strb	r2, [r3, #0]
				}
		break;
 8006d66:	e0b5      	b.n	8006ed4 <updatedate+0x2b4>
	case MAI:
		if(JOURS>31){
 8006d68:	4b4a      	ldr	r3, [pc, #296]	@ (8006e94 <updatedate+0x274>)
 8006d6a:	781b      	ldrb	r3, [r3, #0]
 8006d6c:	2b1f      	cmp	r3, #31
 8006d6e:	f240 80b3 	bls.w	8006ed8 <updatedate+0x2b8>
					JOURS=1;
 8006d72:	4b48      	ldr	r3, [pc, #288]	@ (8006e94 <updatedate+0x274>)
 8006d74:	2201      	movs	r2, #1
 8006d76:	701a      	strb	r2, [r3, #0]
					mois++;
 8006d78:	4b47      	ldr	r3, [pc, #284]	@ (8006e98 <updatedate+0x278>)
 8006d7a:	781b      	ldrb	r3, [r3, #0]
 8006d7c:	3301      	adds	r3, #1
 8006d7e:	b2da      	uxtb	r2, r3
 8006d80:	4b45      	ldr	r3, [pc, #276]	@ (8006e98 <updatedate+0x278>)
 8006d82:	701a      	strb	r2, [r3, #0]
					MOIS++;
 8006d84:	4b45      	ldr	r3, [pc, #276]	@ (8006e9c <updatedate+0x27c>)
 8006d86:	781b      	ldrb	r3, [r3, #0]
 8006d88:	3301      	adds	r3, #1
 8006d8a:	b2da      	uxtb	r2, r3
 8006d8c:	4b43      	ldr	r3, [pc, #268]	@ (8006e9c <updatedate+0x27c>)
 8006d8e:	701a      	strb	r2, [r3, #0]
				}
		break;
 8006d90:	e0a2      	b.n	8006ed8 <updatedate+0x2b8>
	case JUIN:
		if(JOURS>30){
 8006d92:	4b40      	ldr	r3, [pc, #256]	@ (8006e94 <updatedate+0x274>)
 8006d94:	781b      	ldrb	r3, [r3, #0]
 8006d96:	2b1e      	cmp	r3, #30
 8006d98:	f240 80a0 	bls.w	8006edc <updatedate+0x2bc>
					JOURS=1;
 8006d9c:	4b3d      	ldr	r3, [pc, #244]	@ (8006e94 <updatedate+0x274>)
 8006d9e:	2201      	movs	r2, #1
 8006da0:	701a      	strb	r2, [r3, #0]
					mois++;
 8006da2:	4b3d      	ldr	r3, [pc, #244]	@ (8006e98 <updatedate+0x278>)
 8006da4:	781b      	ldrb	r3, [r3, #0]
 8006da6:	3301      	adds	r3, #1
 8006da8:	b2da      	uxtb	r2, r3
 8006daa:	4b3b      	ldr	r3, [pc, #236]	@ (8006e98 <updatedate+0x278>)
 8006dac:	701a      	strb	r2, [r3, #0]
					MOIS++;
 8006dae:	4b3b      	ldr	r3, [pc, #236]	@ (8006e9c <updatedate+0x27c>)
 8006db0:	781b      	ldrb	r3, [r3, #0]
 8006db2:	3301      	adds	r3, #1
 8006db4:	b2da      	uxtb	r2, r3
 8006db6:	4b39      	ldr	r3, [pc, #228]	@ (8006e9c <updatedate+0x27c>)
 8006db8:	701a      	strb	r2, [r3, #0]
				}
		break;
 8006dba:	e08f      	b.n	8006edc <updatedate+0x2bc>
	case JUILLET:
		if(JOURS>31){
 8006dbc:	4b35      	ldr	r3, [pc, #212]	@ (8006e94 <updatedate+0x274>)
 8006dbe:	781b      	ldrb	r3, [r3, #0]
 8006dc0:	2b1f      	cmp	r3, #31
 8006dc2:	f240 808d 	bls.w	8006ee0 <updatedate+0x2c0>
					JOURS=1;
 8006dc6:	4b33      	ldr	r3, [pc, #204]	@ (8006e94 <updatedate+0x274>)
 8006dc8:	2201      	movs	r2, #1
 8006dca:	701a      	strb	r2, [r3, #0]
					mois++;
 8006dcc:	4b32      	ldr	r3, [pc, #200]	@ (8006e98 <updatedate+0x278>)
 8006dce:	781b      	ldrb	r3, [r3, #0]
 8006dd0:	3301      	adds	r3, #1
 8006dd2:	b2da      	uxtb	r2, r3
 8006dd4:	4b30      	ldr	r3, [pc, #192]	@ (8006e98 <updatedate+0x278>)
 8006dd6:	701a      	strb	r2, [r3, #0]
					MOIS++;
 8006dd8:	4b30      	ldr	r3, [pc, #192]	@ (8006e9c <updatedate+0x27c>)
 8006dda:	781b      	ldrb	r3, [r3, #0]
 8006ddc:	3301      	adds	r3, #1
 8006dde:	b2da      	uxtb	r2, r3
 8006de0:	4b2e      	ldr	r3, [pc, #184]	@ (8006e9c <updatedate+0x27c>)
 8006de2:	701a      	strb	r2, [r3, #0]
				}
		break;
 8006de4:	e07c      	b.n	8006ee0 <updatedate+0x2c0>
	case AOUT:
		if(JOURS>31){
 8006de6:	4b2b      	ldr	r3, [pc, #172]	@ (8006e94 <updatedate+0x274>)
 8006de8:	781b      	ldrb	r3, [r3, #0]
 8006dea:	2b1f      	cmp	r3, #31
 8006dec:	d97a      	bls.n	8006ee4 <updatedate+0x2c4>
					JOURS=1;
 8006dee:	4b29      	ldr	r3, [pc, #164]	@ (8006e94 <updatedate+0x274>)
 8006df0:	2201      	movs	r2, #1
 8006df2:	701a      	strb	r2, [r3, #0]
					mois++;
 8006df4:	4b28      	ldr	r3, [pc, #160]	@ (8006e98 <updatedate+0x278>)
 8006df6:	781b      	ldrb	r3, [r3, #0]
 8006df8:	3301      	adds	r3, #1
 8006dfa:	b2da      	uxtb	r2, r3
 8006dfc:	4b26      	ldr	r3, [pc, #152]	@ (8006e98 <updatedate+0x278>)
 8006dfe:	701a      	strb	r2, [r3, #0]
					MOIS++;
 8006e00:	4b26      	ldr	r3, [pc, #152]	@ (8006e9c <updatedate+0x27c>)
 8006e02:	781b      	ldrb	r3, [r3, #0]
 8006e04:	3301      	adds	r3, #1
 8006e06:	b2da      	uxtb	r2, r3
 8006e08:	4b24      	ldr	r3, [pc, #144]	@ (8006e9c <updatedate+0x27c>)
 8006e0a:	701a      	strb	r2, [r3, #0]
				}
		break;
 8006e0c:	e06a      	b.n	8006ee4 <updatedate+0x2c4>
	case SEPTEMBRE:
		if(JOURS>30){
 8006e0e:	4b21      	ldr	r3, [pc, #132]	@ (8006e94 <updatedate+0x274>)
 8006e10:	781b      	ldrb	r3, [r3, #0]
 8006e12:	2b1e      	cmp	r3, #30
 8006e14:	d968      	bls.n	8006ee8 <updatedate+0x2c8>
					JOURS=1;
 8006e16:	4b1f      	ldr	r3, [pc, #124]	@ (8006e94 <updatedate+0x274>)
 8006e18:	2201      	movs	r2, #1
 8006e1a:	701a      	strb	r2, [r3, #0]
					mois++;
 8006e1c:	4b1e      	ldr	r3, [pc, #120]	@ (8006e98 <updatedate+0x278>)
 8006e1e:	781b      	ldrb	r3, [r3, #0]
 8006e20:	3301      	adds	r3, #1
 8006e22:	b2da      	uxtb	r2, r3
 8006e24:	4b1c      	ldr	r3, [pc, #112]	@ (8006e98 <updatedate+0x278>)
 8006e26:	701a      	strb	r2, [r3, #0]
					MOIS++;
 8006e28:	4b1c      	ldr	r3, [pc, #112]	@ (8006e9c <updatedate+0x27c>)
 8006e2a:	781b      	ldrb	r3, [r3, #0]
 8006e2c:	3301      	adds	r3, #1
 8006e2e:	b2da      	uxtb	r2, r3
 8006e30:	4b1a      	ldr	r3, [pc, #104]	@ (8006e9c <updatedate+0x27c>)
 8006e32:	701a      	strb	r2, [r3, #0]
				}
		break;
 8006e34:	e058      	b.n	8006ee8 <updatedate+0x2c8>
	case OCTOBRE:
		if(JOURS>31){
 8006e36:	4b17      	ldr	r3, [pc, #92]	@ (8006e94 <updatedate+0x274>)
 8006e38:	781b      	ldrb	r3, [r3, #0]
 8006e3a:	2b1f      	cmp	r3, #31
 8006e3c:	d956      	bls.n	8006eec <updatedate+0x2cc>
					JOURS=1;
 8006e3e:	4b15      	ldr	r3, [pc, #84]	@ (8006e94 <updatedate+0x274>)
 8006e40:	2201      	movs	r2, #1
 8006e42:	701a      	strb	r2, [r3, #0]
					mois++;
 8006e44:	4b14      	ldr	r3, [pc, #80]	@ (8006e98 <updatedate+0x278>)
 8006e46:	781b      	ldrb	r3, [r3, #0]
 8006e48:	3301      	adds	r3, #1
 8006e4a:	b2da      	uxtb	r2, r3
 8006e4c:	4b12      	ldr	r3, [pc, #72]	@ (8006e98 <updatedate+0x278>)
 8006e4e:	701a      	strb	r2, [r3, #0]
					MOIS++;
 8006e50:	4b12      	ldr	r3, [pc, #72]	@ (8006e9c <updatedate+0x27c>)
 8006e52:	781b      	ldrb	r3, [r3, #0]
 8006e54:	3301      	adds	r3, #1
 8006e56:	b2da      	uxtb	r2, r3
 8006e58:	4b10      	ldr	r3, [pc, #64]	@ (8006e9c <updatedate+0x27c>)
 8006e5a:	701a      	strb	r2, [r3, #0]
				}
		break;
 8006e5c:	e046      	b.n	8006eec <updatedate+0x2cc>
	case NOVEMBRE:
		if(JOURS>30){
 8006e5e:	4b0d      	ldr	r3, [pc, #52]	@ (8006e94 <updatedate+0x274>)
 8006e60:	781b      	ldrb	r3, [r3, #0]
 8006e62:	2b1e      	cmp	r3, #30
 8006e64:	d944      	bls.n	8006ef0 <updatedate+0x2d0>
					JOURS=1;
 8006e66:	4b0b      	ldr	r3, [pc, #44]	@ (8006e94 <updatedate+0x274>)
 8006e68:	2201      	movs	r2, #1
 8006e6a:	701a      	strb	r2, [r3, #0]
					mois++;
 8006e6c:	4b0a      	ldr	r3, [pc, #40]	@ (8006e98 <updatedate+0x278>)
 8006e6e:	781b      	ldrb	r3, [r3, #0]
 8006e70:	3301      	adds	r3, #1
 8006e72:	b2da      	uxtb	r2, r3
 8006e74:	4b08      	ldr	r3, [pc, #32]	@ (8006e98 <updatedate+0x278>)
 8006e76:	701a      	strb	r2, [r3, #0]
					MOIS++;
 8006e78:	4b08      	ldr	r3, [pc, #32]	@ (8006e9c <updatedate+0x27c>)
 8006e7a:	781b      	ldrb	r3, [r3, #0]
 8006e7c:	3301      	adds	r3, #1
 8006e7e:	b2da      	uxtb	r2, r3
 8006e80:	4b06      	ldr	r3, [pc, #24]	@ (8006e9c <updatedate+0x27c>)
 8006e82:	701a      	strb	r2, [r3, #0]
				}
		break;
 8006e84:	e034      	b.n	8006ef0 <updatedate+0x2d0>
 8006e86:	bf00      	nop
 8006e88:	20000b9c 	.word	0x20000b9c
 8006e8c:	20000b9e 	.word	0x20000b9e
 8006e90:	20000b9d 	.word	0x20000b9d
 8006e94:	20000010 	.word	0x20000010
 8006e98:	20000b9f 	.word	0x20000b9f
 8006e9c:	20000011 	.word	0x20000011
	case DECEMBRE:
		if(JOURS>31){
 8006ea0:	4b1f      	ldr	r3, [pc, #124]	@ (8006f20 <updatedate+0x300>)
 8006ea2:	781b      	ldrb	r3, [r3, #0]
 8006ea4:	2b1f      	cmp	r3, #31
 8006ea6:	d925      	bls.n	8006ef4 <updatedate+0x2d4>
					JOURS=1;
 8006ea8:	4b1d      	ldr	r3, [pc, #116]	@ (8006f20 <updatedate+0x300>)
 8006eaa:	2201      	movs	r2, #1
 8006eac:	701a      	strb	r2, [r3, #0]
					mois++;
 8006eae:	4b1d      	ldr	r3, [pc, #116]	@ (8006f24 <updatedate+0x304>)
 8006eb0:	781b      	ldrb	r3, [r3, #0]
 8006eb2:	3301      	adds	r3, #1
 8006eb4:	b2da      	uxtb	r2, r3
 8006eb6:	4b1b      	ldr	r3, [pc, #108]	@ (8006f24 <updatedate+0x304>)
 8006eb8:	701a      	strb	r2, [r3, #0]
					MOIS++;
 8006eba:	4b1b      	ldr	r3, [pc, #108]	@ (8006f28 <updatedate+0x308>)
 8006ebc:	781b      	ldrb	r3, [r3, #0]
 8006ebe:	3301      	adds	r3, #1
 8006ec0:	b2da      	uxtb	r2, r3
 8006ec2:	4b19      	ldr	r3, [pc, #100]	@ (8006f28 <updatedate+0x308>)
 8006ec4:	701a      	strb	r2, [r3, #0]
				}
		break;
 8006ec6:	e015      	b.n	8006ef4 <updatedate+0x2d4>
		break;
 8006ec8:	bf00      	nop
 8006eca:	e014      	b.n	8006ef6 <updatedate+0x2d6>
		break;
 8006ecc:	bf00      	nop
 8006ece:	e012      	b.n	8006ef6 <updatedate+0x2d6>
		break;
 8006ed0:	bf00      	nop
 8006ed2:	e010      	b.n	8006ef6 <updatedate+0x2d6>
		break;
 8006ed4:	bf00      	nop
 8006ed6:	e00e      	b.n	8006ef6 <updatedate+0x2d6>
		break;
 8006ed8:	bf00      	nop
 8006eda:	e00c      	b.n	8006ef6 <updatedate+0x2d6>
		break;
 8006edc:	bf00      	nop
 8006ede:	e00a      	b.n	8006ef6 <updatedate+0x2d6>
		break;
 8006ee0:	bf00      	nop
 8006ee2:	e008      	b.n	8006ef6 <updatedate+0x2d6>
		break;
 8006ee4:	bf00      	nop
 8006ee6:	e006      	b.n	8006ef6 <updatedate+0x2d6>
		break;
 8006ee8:	bf00      	nop
 8006eea:	e004      	b.n	8006ef6 <updatedate+0x2d6>
		break;
 8006eec:	bf00      	nop
 8006eee:	e002      	b.n	8006ef6 <updatedate+0x2d6>
		break;
 8006ef0:	bf00      	nop
 8006ef2:	e000      	b.n	8006ef6 <updatedate+0x2d6>
		break;
 8006ef4:	bf00      	nop

	}

	if(MOIS>12){
 8006ef6:	4b0c      	ldr	r3, [pc, #48]	@ (8006f28 <updatedate+0x308>)
 8006ef8:	781b      	ldrb	r3, [r3, #0]
 8006efa:	2b0c      	cmp	r3, #12
 8006efc:	d90b      	bls.n	8006f16 <updatedate+0x2f6>
		mois=JANVIER;
 8006efe:	4b09      	ldr	r3, [pc, #36]	@ (8006f24 <updatedate+0x304>)
 8006f00:	2200      	movs	r2, #0
 8006f02:	701a      	strb	r2, [r3, #0]
		MOIS=1;
 8006f04:	4b08      	ldr	r3, [pc, #32]	@ (8006f28 <updatedate+0x308>)
 8006f06:	2201      	movs	r2, #1
 8006f08:	701a      	strb	r2, [r3, #0]
		ANNEE++;
 8006f0a:	4b08      	ldr	r3, [pc, #32]	@ (8006f2c <updatedate+0x30c>)
 8006f0c:	881b      	ldrh	r3, [r3, #0]
 8006f0e:	3301      	adds	r3, #1
 8006f10:	b29a      	uxth	r2, r3
 8006f12:	4b06      	ldr	r3, [pc, #24]	@ (8006f2c <updatedate+0x30c>)
 8006f14:	801a      	strh	r2, [r3, #0]
	}
}
 8006f16:	bf00      	nop
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1e:	4770      	bx	lr
 8006f20:	20000010 	.word	0x20000010
 8006f24:	20000b9f 	.word	0x20000b9f
 8006f28:	20000011 	.word	0x20000011
 8006f2c:	20000012 	.word	0x20000012

08006f30 <LL_AHB2_GRP1_EnableClock>:
{
 8006f30:	b480      	push	{r7}
 8006f32:	b085      	sub	sp, #20
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8006f38:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006f3c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006f3e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	4313      	orrs	r3, r2
 8006f46:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8006f48:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006f4c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	4013      	ands	r3, r2
 8006f52:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006f54:	68fb      	ldr	r3, [r7, #12]
}
 8006f56:	bf00      	nop
 8006f58:	3714      	adds	r7, #20
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f60:	4770      	bx	lr

08006f62 <LL_APB1_GRP2_EnableClock>:
{
 8006f62:	b480      	push	{r7}
 8006f64:	b085      	sub	sp, #20
 8006f66:	af00      	add	r7, sp, #0
 8006f68:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR2, Periphs);
 8006f6a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006f6e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006f70:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	4313      	orrs	r3, r2
 8006f78:	65cb      	str	r3, [r1, #92]	@ 0x5c
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8006f7a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006f7e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	4013      	ands	r3, r2
 8006f84:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006f86:	68fb      	ldr	r3, [r7, #12]
}
 8006f88:	bf00      	nop
 8006f8a:	3714      	adds	r7, #20
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f92:	4770      	bx	lr

08006f94 <LL_APB2_GRP1_EnableClock>:
{
 8006f94:	b480      	push	{r7}
 8006f96:	b085      	sub	sp, #20
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8006f9c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006fa0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006fa2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	4313      	orrs	r3, r2
 8006faa:	660b      	str	r3, [r1, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8006fac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006fb0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	4013      	ands	r3, r2
 8006fb6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
}
 8006fba:	bf00      	nop
 8006fbc:	3714      	adds	r7, #20
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc4:	4770      	bx	lr
	...

08006fc8 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8006fcc:	4b22      	ldr	r3, [pc, #136]	@ (8007058 <MX_LPUART1_UART_Init+0x90>)
 8006fce:	4a23      	ldr	r2, [pc, #140]	@ (800705c <MX_LPUART1_UART_Init+0x94>)
 8006fd0:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8006fd2:	4b21      	ldr	r3, [pc, #132]	@ (8007058 <MX_LPUART1_UART_Init+0x90>)
 8006fd4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8006fd8:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8006fda:	4b1f      	ldr	r3, [pc, #124]	@ (8007058 <MX_LPUART1_UART_Init+0x90>)
 8006fdc:	2200      	movs	r2, #0
 8006fde:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8006fe0:	4b1d      	ldr	r3, [pc, #116]	@ (8007058 <MX_LPUART1_UART_Init+0x90>)
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8006fe6:	4b1c      	ldr	r3, [pc, #112]	@ (8007058 <MX_LPUART1_UART_Init+0x90>)
 8006fe8:	2200      	movs	r2, #0
 8006fea:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8006fec:	4b1a      	ldr	r3, [pc, #104]	@ (8007058 <MX_LPUART1_UART_Init+0x90>)
 8006fee:	220c      	movs	r2, #12
 8006ff0:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006ff2:	4b19      	ldr	r3, [pc, #100]	@ (8007058 <MX_LPUART1_UART_Init+0x90>)
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006ff8:	4b17      	ldr	r3, [pc, #92]	@ (8007058 <MX_LPUART1_UART_Init+0x90>)
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8006ffe:	4b16      	ldr	r3, [pc, #88]	@ (8007058 <MX_LPUART1_UART_Init+0x90>)
 8007000:	2200      	movs	r2, #0
 8007002:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8007004:	4b14      	ldr	r3, [pc, #80]	@ (8007058 <MX_LPUART1_UART_Init+0x90>)
 8007006:	2200      	movs	r2, #0
 8007008:	629a      	str	r2, [r3, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 800700a:	4b13      	ldr	r3, [pc, #76]	@ (8007058 <MX_LPUART1_UART_Init+0x90>)
 800700c:	2200      	movs	r2, #0
 800700e:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8007010:	4811      	ldr	r0, [pc, #68]	@ (8007058 <MX_LPUART1_UART_Init+0x90>)
 8007012:	f008 fbeb 	bl	800f7ec <HAL_UART_Init>
 8007016:	4603      	mov	r3, r0
 8007018:	2b00      	cmp	r3, #0
 800701a:	d001      	beq.n	8007020 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 800701c:	f7fb ffca 	bl	8002fb4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8007020:	2100      	movs	r1, #0
 8007022:	480d      	ldr	r0, [pc, #52]	@ (8007058 <MX_LPUART1_UART_Init+0x90>)
 8007024:	f009 ffb0 	bl	8010f88 <HAL_UARTEx_SetTxFifoThreshold>
 8007028:	4603      	mov	r3, r0
 800702a:	2b00      	cmp	r3, #0
 800702c:	d001      	beq.n	8007032 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 800702e:	f7fb ffc1 	bl	8002fb4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8007032:	2100      	movs	r1, #0
 8007034:	4808      	ldr	r0, [pc, #32]	@ (8007058 <MX_LPUART1_UART_Init+0x90>)
 8007036:	f009 ffe5 	bl	8011004 <HAL_UARTEx_SetRxFifoThreshold>
 800703a:	4603      	mov	r3, r0
 800703c:	2b00      	cmp	r3, #0
 800703e:	d001      	beq.n	8007044 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8007040:	f7fb ffb8 	bl	8002fb4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8007044:	4804      	ldr	r0, [pc, #16]	@ (8007058 <MX_LPUART1_UART_Init+0x90>)
 8007046:	f009 ff66 	bl	8010f16 <HAL_UARTEx_DisableFifoMode>
 800704a:	4603      	mov	r3, r0
 800704c:	2b00      	cmp	r3, #0
 800704e:	d001      	beq.n	8007054 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8007050:	f7fb ffb0 	bl	8002fb4 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8007054:	bf00      	nop
 8007056:	bd80      	pop	{r7, pc}
 8007058:	200012f0 	.word	0x200012f0
 800705c:	40008000 	.word	0x40008000

08007060 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8007060:	b580      	push	{r7, lr}
 8007062:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8007064:	4b22      	ldr	r3, [pc, #136]	@ (80070f0 <MX_USART1_UART_Init+0x90>)
 8007066:	4a23      	ldr	r2, [pc, #140]	@ (80070f4 <MX_USART1_UART_Init+0x94>)
 8007068:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800706a:	4b21      	ldr	r3, [pc, #132]	@ (80070f0 <MX_USART1_UART_Init+0x90>)
 800706c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8007070:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8007072:	4b1f      	ldr	r3, [pc, #124]	@ (80070f0 <MX_USART1_UART_Init+0x90>)
 8007074:	2200      	movs	r2, #0
 8007076:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8007078:	4b1d      	ldr	r3, [pc, #116]	@ (80070f0 <MX_USART1_UART_Init+0x90>)
 800707a:	2200      	movs	r2, #0
 800707c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800707e:	4b1c      	ldr	r3, [pc, #112]	@ (80070f0 <MX_USART1_UART_Init+0x90>)
 8007080:	2200      	movs	r2, #0
 8007082:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8007084:	4b1a      	ldr	r3, [pc, #104]	@ (80070f0 <MX_USART1_UART_Init+0x90>)
 8007086:	220c      	movs	r2, #12
 8007088:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800708a:	4b19      	ldr	r3, [pc, #100]	@ (80070f0 <MX_USART1_UART_Init+0x90>)
 800708c:	2200      	movs	r2, #0
 800708e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8007090:	4b17      	ldr	r3, [pc, #92]	@ (80070f0 <MX_USART1_UART_Init+0x90>)
 8007092:	2200      	movs	r2, #0
 8007094:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8007096:	4b16      	ldr	r3, [pc, #88]	@ (80070f0 <MX_USART1_UART_Init+0x90>)
 8007098:	2200      	movs	r2, #0
 800709a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800709c:	4b14      	ldr	r3, [pc, #80]	@ (80070f0 <MX_USART1_UART_Init+0x90>)
 800709e:	2200      	movs	r2, #0
 80070a0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80070a2:	4b13      	ldr	r3, [pc, #76]	@ (80070f0 <MX_USART1_UART_Init+0x90>)
 80070a4:	2200      	movs	r2, #0
 80070a6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80070a8:	4811      	ldr	r0, [pc, #68]	@ (80070f0 <MX_USART1_UART_Init+0x90>)
 80070aa:	f008 fb9f 	bl	800f7ec <HAL_UART_Init>
 80070ae:	4603      	mov	r3, r0
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d001      	beq.n	80070b8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80070b4:	f7fb ff7e 	bl	8002fb4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80070b8:	2100      	movs	r1, #0
 80070ba:	480d      	ldr	r0, [pc, #52]	@ (80070f0 <MX_USART1_UART_Init+0x90>)
 80070bc:	f009 ff64 	bl	8010f88 <HAL_UARTEx_SetTxFifoThreshold>
 80070c0:	4603      	mov	r3, r0
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d001      	beq.n	80070ca <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80070c6:	f7fb ff75 	bl	8002fb4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80070ca:	2100      	movs	r1, #0
 80070cc:	4808      	ldr	r0, [pc, #32]	@ (80070f0 <MX_USART1_UART_Init+0x90>)
 80070ce:	f009 ff99 	bl	8011004 <HAL_UARTEx_SetRxFifoThreshold>
 80070d2:	4603      	mov	r3, r0
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d001      	beq.n	80070dc <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80070d8:	f7fb ff6c 	bl	8002fb4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80070dc:	4804      	ldr	r0, [pc, #16]	@ (80070f0 <MX_USART1_UART_Init+0x90>)
 80070de:	f009 ff1a 	bl	8010f16 <HAL_UARTEx_DisableFifoMode>
 80070e2:	4603      	mov	r3, r0
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d001      	beq.n	80070ec <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80070e8:	f7fb ff64 	bl	8002fb4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80070ec:	bf00      	nop
 80070ee:	bd80      	pop	{r7, pc}
 80070f0:	20001384 	.word	0x20001384
 80070f4:	40013800 	.word	0x40013800

080070f8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b09c      	sub	sp, #112	@ 0x70
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007100:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8007104:	2200      	movs	r2, #0
 8007106:	601a      	str	r2, [r3, #0]
 8007108:	605a      	str	r2, [r3, #4]
 800710a:	609a      	str	r2, [r3, #8]
 800710c:	60da      	str	r2, [r3, #12]
 800710e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8007110:	f107 030c 	add.w	r3, r7, #12
 8007114:	2250      	movs	r2, #80	@ 0x50
 8007116:	2100      	movs	r1, #0
 8007118:	4618      	mov	r0, r3
 800711a:	f014 f9fa 	bl	801b512 <memset>
  if(uartHandle->Instance==LPUART1)
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	4a5f      	ldr	r2, [pc, #380]	@ (80072a0 <HAL_UART_MspInit+0x1a8>)
 8007124:	4293      	cmp	r3, r2
 8007126:	d158      	bne.n	80071da <HAL_UART_MspInit+0xe2>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8007128:	2302      	movs	r3, #2
 800712a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_HSI;
 800712c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007130:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007132:	f107 030c 	add.w	r3, r7, #12
 8007136:	4618      	mov	r0, r3
 8007138:	f006 f87b 	bl	800d232 <HAL_RCCEx_PeriphCLKConfig>
 800713c:	4603      	mov	r3, r0
 800713e:	2b00      	cmp	r3, #0
 8007140:	d001      	beq.n	8007146 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8007142:	f7fb ff37 	bl	8002fb4 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8007146:	2001      	movs	r0, #1
 8007148:	f7ff ff0b 	bl	8006f62 <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800714c:	2001      	movs	r0, #1
 800714e:	f7ff feef 	bl	8006f30 <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8007152:	230c      	movs	r3, #12
 8007154:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007156:	2302      	movs	r3, #2
 8007158:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800715a:	2300      	movs	r3, #0
 800715c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800715e:	2300      	movs	r3, #0
 8007160:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8007162:	2308      	movs	r3, #8
 8007164:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007166:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800716a:	4619      	mov	r1, r3
 800716c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8007170:	f001 ff56 	bl	8009020 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel2;
 8007174:	4b4b      	ldr	r3, [pc, #300]	@ (80072a4 <HAL_UART_MspInit+0x1ac>)
 8007176:	4a4c      	ldr	r2, [pc, #304]	@ (80072a8 <HAL_UART_MspInit+0x1b0>)
 8007178:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 800717a:	4b4a      	ldr	r3, [pc, #296]	@ (80072a4 <HAL_UART_MspInit+0x1ac>)
 800717c:	2210      	movs	r2, #16
 800717e:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007180:	4b48      	ldr	r3, [pc, #288]	@ (80072a4 <HAL_UART_MspInit+0x1ac>)
 8007182:	2200      	movs	r2, #0
 8007184:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007186:	4b47      	ldr	r3, [pc, #284]	@ (80072a4 <HAL_UART_MspInit+0x1ac>)
 8007188:	2200      	movs	r2, #0
 800718a:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800718c:	4b45      	ldr	r3, [pc, #276]	@ (80072a4 <HAL_UART_MspInit+0x1ac>)
 800718e:	2280      	movs	r2, #128	@ 0x80
 8007190:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007192:	4b44      	ldr	r3, [pc, #272]	@ (80072a4 <HAL_UART_MspInit+0x1ac>)
 8007194:	2200      	movs	r2, #0
 8007196:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007198:	4b42      	ldr	r3, [pc, #264]	@ (80072a4 <HAL_UART_MspInit+0x1ac>)
 800719a:	2200      	movs	r2, #0
 800719c:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
 800719e:	4b41      	ldr	r3, [pc, #260]	@ (80072a4 <HAL_UART_MspInit+0x1ac>)
 80071a0:	2220      	movs	r2, #32
 80071a2:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80071a4:	4b3f      	ldr	r3, [pc, #252]	@ (80072a4 <HAL_UART_MspInit+0x1ac>)
 80071a6:	2200      	movs	r2, #0
 80071a8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 80071aa:	483e      	ldr	r0, [pc, #248]	@ (80072a4 <HAL_UART_MspInit+0x1ac>)
 80071ac:	f001 fbfa 	bl	80089a4 <HAL_DMA_Init>
 80071b0:	4603      	mov	r3, r0
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d001      	beq.n	80071ba <HAL_UART_MspInit+0xc2>
    {
      Error_Handler();
 80071b6:	f7fb fefd 	bl	8002fb4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	4a39      	ldr	r2, [pc, #228]	@ (80072a4 <HAL_UART_MspInit+0x1ac>)
 80071be:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80071c2:	4a38      	ldr	r2, [pc, #224]	@ (80072a4 <HAL_UART_MspInit+0x1ac>)
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 2, 0);
 80071c8:	2200      	movs	r2, #0
 80071ca:	2102      	movs	r1, #2
 80071cc:	2025      	movs	r0, #37	@ 0x25
 80071ce:	f001 fb8a 	bl	80088e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 80071d2:	2025      	movs	r0, #37	@ 0x25
 80071d4:	f001 fba1 	bl	800891a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80071d8:	e05d      	b.n	8007296 <HAL_UART_MspInit+0x19e>
  else if(uartHandle->Instance==USART1)
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	4a33      	ldr	r2, [pc, #204]	@ (80072ac <HAL_UART_MspInit+0x1b4>)
 80071e0:	4293      	cmp	r3, r2
 80071e2:	d158      	bne.n	8007296 <HAL_UART_MspInit+0x19e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80071e4:	2301      	movs	r3, #1
 80071e6:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80071e8:	2300      	movs	r3, #0
 80071ea:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80071ec:	f107 030c 	add.w	r3, r7, #12
 80071f0:	4618      	mov	r0, r3
 80071f2:	f006 f81e 	bl	800d232 <HAL_RCCEx_PeriphCLKConfig>
 80071f6:	4603      	mov	r3, r0
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d001      	beq.n	8007200 <HAL_UART_MspInit+0x108>
      Error_Handler();
 80071fc:	f7fb feda 	bl	8002fb4 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8007200:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8007204:	f7ff fec6 	bl	8006f94 <LL_APB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007208:	2001      	movs	r0, #1
 800720a:	f7ff fe91 	bl	8006f30 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800720e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8007212:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007214:	2302      	movs	r3, #2
 8007216:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007218:	2300      	movs	r3, #0
 800721a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800721c:	2300      	movs	r3, #0
 800721e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8007220:	2307      	movs	r3, #7
 8007222:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007224:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8007228:	4619      	mov	r1, r3
 800722a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800722e:	f001 fef7 	bl	8009020 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel3;
 8007232:	4b1f      	ldr	r3, [pc, #124]	@ (80072b0 <HAL_UART_MspInit+0x1b8>)
 8007234:	4a1f      	ldr	r2, [pc, #124]	@ (80072b4 <HAL_UART_MspInit+0x1bc>)
 8007236:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8007238:	4b1d      	ldr	r3, [pc, #116]	@ (80072b0 <HAL_UART_MspInit+0x1b8>)
 800723a:	220e      	movs	r2, #14
 800723c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800723e:	4b1c      	ldr	r3, [pc, #112]	@ (80072b0 <HAL_UART_MspInit+0x1b8>)
 8007240:	2200      	movs	r2, #0
 8007242:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007244:	4b1a      	ldr	r3, [pc, #104]	@ (80072b0 <HAL_UART_MspInit+0x1b8>)
 8007246:	2200      	movs	r2, #0
 8007248:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800724a:	4b19      	ldr	r3, [pc, #100]	@ (80072b0 <HAL_UART_MspInit+0x1b8>)
 800724c:	2280      	movs	r2, #128	@ 0x80
 800724e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007250:	4b17      	ldr	r3, [pc, #92]	@ (80072b0 <HAL_UART_MspInit+0x1b8>)
 8007252:	2200      	movs	r2, #0
 8007254:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007256:	4b16      	ldr	r3, [pc, #88]	@ (80072b0 <HAL_UART_MspInit+0x1b8>)
 8007258:	2200      	movs	r2, #0
 800725a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800725c:	4b14      	ldr	r3, [pc, #80]	@ (80072b0 <HAL_UART_MspInit+0x1b8>)
 800725e:	2220      	movs	r2, #32
 8007260:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8007262:	4b13      	ldr	r3, [pc, #76]	@ (80072b0 <HAL_UART_MspInit+0x1b8>)
 8007264:	2200      	movs	r2, #0
 8007266:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8007268:	4811      	ldr	r0, [pc, #68]	@ (80072b0 <HAL_UART_MspInit+0x1b8>)
 800726a:	f001 fb9b 	bl	80089a4 <HAL_DMA_Init>
 800726e:	4603      	mov	r3, r0
 8007270:	2b00      	cmp	r3, #0
 8007272:	d001      	beq.n	8007278 <HAL_UART_MspInit+0x180>
      Error_Handler();
 8007274:	f7fb fe9e 	bl	8002fb4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	4a0d      	ldr	r2, [pc, #52]	@ (80072b0 <HAL_UART_MspInit+0x1b8>)
 800727c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8007280:	4a0b      	ldr	r2, [pc, #44]	@ (80072b0 <HAL_UART_MspInit+0x1b8>)
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8007286:	2200      	movs	r2, #0
 8007288:	2100      	movs	r1, #0
 800728a:	2024      	movs	r0, #36	@ 0x24
 800728c:	f001 fb2b 	bl	80088e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8007290:	2024      	movs	r0, #36	@ 0x24
 8007292:	f001 fb42 	bl	800891a <HAL_NVIC_EnableIRQ>
}
 8007296:	bf00      	nop
 8007298:	3770      	adds	r7, #112	@ 0x70
 800729a:	46bd      	mov	sp, r7
 800729c:	bd80      	pop	{r7, pc}
 800729e:	bf00      	nop
 80072a0:	40008000 	.word	0x40008000
 80072a4:	20001418 	.word	0x20001418
 80072a8:	4002001c 	.word	0x4002001c
 80072ac:	40013800 	.word	0x40013800
 80072b0:	20001478 	.word	0x20001478
 80072b4:	40020030 	.word	0x40020030

080072b8 <HAL_UART_RxCpltCallback>:
  /* USER CODE END USART1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80072b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80072ba:	b085      	sub	sp, #20
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
	if(huart->Instance==LPUART1){
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	4a3c      	ldr	r2, [pc, #240]	@ (80073b8 <HAL_UART_RxCpltCallback+0x100>)
 80072c6:	4293      	cmp	r3, r2
 80072c8:	d171      	bne.n	80073ae <HAL_UART_RxCpltCallback+0xf6>
	oldPos = newPos; //keep track of the last position in the buffer
 80072ca:	4b3c      	ldr	r3, [pc, #240]	@ (80073bc <HAL_UART_RxCpltCallback+0x104>)
 80072cc:	881a      	ldrh	r2, [r3, #0]
 80072ce:	4b3c      	ldr	r3, [pc, #240]	@ (80073c0 <HAL_UART_RxCpltCallback+0x108>)
 80072d0:	801a      	strh	r2, [r3, #0]
			if(oldPos + 64 > DataBuffer_SIZE){ //if the buffer is full, parse it, then reset the buffer
 80072d2:	4b3b      	ldr	r3, [pc, #236]	@ (80073c0 <HAL_UART_RxCpltCallback+0x108>)
 80072d4:	881b      	ldrh	r3, [r3, #0]
 80072d6:	f5b3 7fe0 	cmp.w	r3, #448	@ 0x1c0
 80072da:	d922      	bls.n	8007322 <HAL_UART_RxCpltCallback+0x6a>

				uint16_t datatocopy = DataBuffer_SIZE-oldPos;  // find out how much space is left in the main buffer
 80072dc:	4b38      	ldr	r3, [pc, #224]	@ (80073c0 <HAL_UART_RxCpltCallback+0x108>)
 80072de:	881b      	ldrh	r3, [r3, #0]
 80072e0:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 80072e4:	81fb      	strh	r3, [r7, #14]
				memcpy ((uint8_t *)DataBuffer+oldPos, RxBuffer, datatocopy);  // copy data in that remaining space
 80072e6:	4b36      	ldr	r3, [pc, #216]	@ (80073c0 <HAL_UART_RxCpltCallback+0x108>)
 80072e8:	881b      	ldrh	r3, [r3, #0]
 80072ea:	461a      	mov	r2, r3
 80072ec:	4b35      	ldr	r3, [pc, #212]	@ (80073c4 <HAL_UART_RxCpltCallback+0x10c>)
 80072ee:	4413      	add	r3, r2
 80072f0:	89fa      	ldrh	r2, [r7, #14]
 80072f2:	4935      	ldr	r1, [pc, #212]	@ (80073c8 <HAL_UART_RxCpltCallback+0x110>)
 80072f4:	4618      	mov	r0, r3
 80072f6:	f014 fa28 	bl	801b74a <memcpy>

				oldPos = 0;  // point to the start of the buffer
 80072fa:	4b31      	ldr	r3, [pc, #196]	@ (80073c0 <HAL_UART_RxCpltCallback+0x108>)
 80072fc:	2200      	movs	r2, #0
 80072fe:	801a      	strh	r2, [r3, #0]
				memcpy ((uint8_t *)DataBuffer, (uint8_t *)RxBuffer+datatocopy, (64-datatocopy));  // copy the remaining data
 8007300:	89fb      	ldrh	r3, [r7, #14]
 8007302:	4a31      	ldr	r2, [pc, #196]	@ (80073c8 <HAL_UART_RxCpltCallback+0x110>)
 8007304:	1899      	adds	r1, r3, r2
 8007306:	89fb      	ldrh	r3, [r7, #14]
 8007308:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 800730c:	461a      	mov	r2, r3
 800730e:	482d      	ldr	r0, [pc, #180]	@ (80073c4 <HAL_UART_RxCpltCallback+0x10c>)
 8007310:	f014 fa1b 	bl	801b74a <memcpy>
				newPos = (64-datatocopy);  // update the position
 8007314:	89fb      	ldrh	r3, [r7, #14]
 8007316:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 800731a:	b29a      	uxth	r2, r3
 800731c:	4b27      	ldr	r3, [pc, #156]	@ (80073bc <HAL_UART_RxCpltCallback+0x104>)
 800731e:	801a      	strh	r2, [r3, #0]
 8007320:	e01e      	b.n	8007360 <HAL_UART_RxCpltCallback+0xa8>
			}
			else{
				memcpy((uint8_t *)DataBuffer+oldPos, RxBuffer, 64); //copy received data to the buffer
 8007322:	4b27      	ldr	r3, [pc, #156]	@ (80073c0 <HAL_UART_RxCpltCallback+0x108>)
 8007324:	881b      	ldrh	r3, [r3, #0]
 8007326:	461a      	mov	r2, r3
 8007328:	4b26      	ldr	r3, [pc, #152]	@ (80073c4 <HAL_UART_RxCpltCallback+0x10c>)
 800732a:	441a      	add	r2, r3
 800732c:	4b26      	ldr	r3, [pc, #152]	@ (80073c8 <HAL_UART_RxCpltCallback+0x110>)
 800732e:	4610      	mov	r0, r2
 8007330:	f103 0440 	add.w	r4, r3, #64	@ 0x40
 8007334:	4602      	mov	r2, r0
 8007336:	4619      	mov	r1, r3
 8007338:	f8d1 c000 	ldr.w	ip, [r1]
 800733c:	684e      	ldr	r6, [r1, #4]
 800733e:	688d      	ldr	r5, [r1, #8]
 8007340:	68c9      	ldr	r1, [r1, #12]
 8007342:	f8c2 c000 	str.w	ip, [r2]
 8007346:	6056      	str	r6, [r2, #4]
 8007348:	6095      	str	r5, [r2, #8]
 800734a:	60d1      	str	r1, [r2, #12]
 800734c:	3310      	adds	r3, #16
 800734e:	3010      	adds	r0, #16
 8007350:	42a3      	cmp	r3, r4
 8007352:	d1ef      	bne.n	8007334 <HAL_UART_RxCpltCallback+0x7c>
				newPos = 64+oldPos; //update buffer position
 8007354:	4b1a      	ldr	r3, [pc, #104]	@ (80073c0 <HAL_UART_RxCpltCallback+0x108>)
 8007356:	881b      	ldrh	r3, [r3, #0]
 8007358:	3340      	adds	r3, #64	@ 0x40
 800735a:	b29a      	uxth	r2, r3
 800735c:	4b17      	ldr	r3, [pc, #92]	@ (80073bc <HAL_UART_RxCpltCallback+0x104>)
 800735e:	801a      	strh	r2, [r3, #0]

			}


			HAL_UART_Receive_DMA(&hlpuart1, (uint8_t *)RxBuffer, RxBuffer_SIZE);//on recoit par dma à nouveau 64 caractères
 8007360:	2240      	movs	r2, #64	@ 0x40
 8007362:	4919      	ldr	r1, [pc, #100]	@ (80073c8 <HAL_UART_RxCpltCallback+0x110>)
 8007364:	4819      	ldr	r0, [pc, #100]	@ (80073cc <HAL_UART_RxCpltCallback+0x114>)
 8007366:	f008 fa91 	bl	800f88c <HAL_UART_Receive_DMA>
			__HAL_DMA_DISABLE_IT(&hdma_lpuart1_rx, DMA_IT_HT);//on desactive l'interruption afin de ne pas être interrompu tout le temps
 800736a:	4b19      	ldr	r3, [pc, #100]	@ (80073d0 <HAL_UART_RxCpltCallback+0x118>)
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	681a      	ldr	r2, [r3, #0]
 8007370:	4b17      	ldr	r3, [pc, #92]	@ (80073d0 <HAL_UART_RxCpltCallback+0x118>)
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f022 0204 	bic.w	r2, r2, #4
 8007378:	601a      	str	r2, [r3, #0]
			memcpy((uint8_t *) receivedtrame,(uint8_t *)RxBuffer,64);
 800737a:	4a16      	ldr	r2, [pc, #88]	@ (80073d4 <HAL_UART_RxCpltCallback+0x11c>)
 800737c:	4b12      	ldr	r3, [pc, #72]	@ (80073c8 <HAL_UART_RxCpltCallback+0x110>)
 800737e:	4610      	mov	r0, r2
 8007380:	f103 0440 	add.w	r4, r3, #64	@ 0x40
 8007384:	4602      	mov	r2, r0
 8007386:	4619      	mov	r1, r3
 8007388:	f8d1 c000 	ldr.w	ip, [r1]
 800738c:	684e      	ldr	r6, [r1, #4]
 800738e:	688d      	ldr	r5, [r1, #8]
 8007390:	68c9      	ldr	r1, [r1, #12]
 8007392:	f8c2 c000 	str.w	ip, [r2]
 8007396:	6056      	str	r6, [r2, #4]
 8007398:	6095      	str	r5, [r2, #8]
 800739a:	60d1      	str	r1, [r2, #12]
 800739c:	3310      	adds	r3, #16
 800739e:	3010      	adds	r0, #16
 80073a0:	42a3      	cmp	r3, r4
 80073a2:	d1ef      	bne.n	8007384 <HAL_UART_RxCpltCallback+0xcc>


	HAL_UART_Receive_DMA(&hlpuart1, (uint8_t *)RxBuffer, RxBuffer_SIZE);
 80073a4:	2240      	movs	r2, #64	@ 0x40
 80073a6:	4908      	ldr	r1, [pc, #32]	@ (80073c8 <HAL_UART_RxCpltCallback+0x110>)
 80073a8:	4808      	ldr	r0, [pc, #32]	@ (80073cc <HAL_UART_RxCpltCallback+0x114>)
 80073aa:	f008 fa6f 	bl	800f88c <HAL_UART_Receive_DMA>

	}

}
 80073ae:	bf00      	nop
 80073b0:	3714      	adds	r7, #20
 80073b2:	46bd      	mov	sp, r7
 80073b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80073b6:	bf00      	nop
 80073b8:	40008000 	.word	0x40008000
 80073bc:	200005f4 	.word	0x200005f4
 80073c0:	200005f2 	.word	0x200005f2
 80073c4:	20000638 	.word	0x20000638
 80073c8:	200005f8 	.word	0x200005f8
 80073cc:	200012f0 	.word	0x200012f0
 80073d0:	20001418 	.word	0x20001418
 80073d4:	20000cc0 	.word	0x20000cc0

080073d8 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80073d8:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80073da:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80073dc:	3304      	adds	r3, #4

080073de <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80073de:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80073e0:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 80073e2:	d3f9      	bcc.n	80073d8 <CopyDataInit>
  bx lr
 80073e4:	4770      	bx	lr

080073e6 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 80073e6:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 80073e8:	3004      	adds	r0, #4

080073ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 80073ea:	4288      	cmp	r0, r1
  bcc FillZerobss
 80073ec:	d3fb      	bcc.n	80073e6 <FillZerobss>
  bx lr
 80073ee:	4770      	bx	lr

080073f0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80073f0:	480c      	ldr	r0, [pc, #48]	@ (8007424 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80073f2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80073f4:	f7ff fabc 	bl	8006970 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 80073f8:	480b      	ldr	r0, [pc, #44]	@ (8007428 <LoopForever+0x6>)
 80073fa:	490c      	ldr	r1, [pc, #48]	@ (800742c <LoopForever+0xa>)
 80073fc:	4a0c      	ldr	r2, [pc, #48]	@ (8007430 <LoopForever+0xe>)
 80073fe:	2300      	movs	r3, #0
 8007400:	f7ff ffed 	bl	80073de <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8007404:	480b      	ldr	r0, [pc, #44]	@ (8007434 <LoopForever+0x12>)
 8007406:	490c      	ldr	r1, [pc, #48]	@ (8007438 <LoopForever+0x16>)
 8007408:	4a0c      	ldr	r2, [pc, #48]	@ (800743c <LoopForever+0x1a>)
 800740a:	2300      	movs	r3, #0
 800740c:	f7ff ffe7 	bl	80073de <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8007410:	480b      	ldr	r0, [pc, #44]	@ (8007440 <LoopForever+0x1e>)
 8007412:	490c      	ldr	r1, [pc, #48]	@ (8007444 <LoopForever+0x22>)
 8007414:	2300      	movs	r3, #0
 8007416:	f7ff ffe8 	bl	80073ea <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800741a:	f014 f967 	bl	801b6ec <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800741e:	f7fb fc4d 	bl	8002cbc <main>

08007422 <LoopForever>:

LoopForever:
  b LoopForever
 8007422:	e7fe      	b.n	8007422 <LoopForever>
  ldr   r0, =_estack
 8007424:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8007428:	20000008 	.word	0x20000008
 800742c:	20000320 	.word	0x20000320
 8007430:	08022a90 	.word	0x08022a90
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8007434:	200301e4 	.word	0x200301e4
 8007438:	20030a67 	.word	0x20030a67
 800743c:	08022dee 	.word	0x08022dee
  INIT_BSS _sbss, _ebss
 8007440:	20000370 	.word	0x20000370
 8007444:	200031b0 	.word	0x200031b0

08007448 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8007448:	e7fe      	b.n	8007448 <ADC1_IRQHandler>
	...

0800744c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800744c:	b580      	push	{r7, lr}
 800744e:	b082      	sub	sp, #8
 8007450:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8007452:	2300      	movs	r3, #0
 8007454:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007456:	4b0c      	ldr	r3, [pc, #48]	@ (8007488 <HAL_Init+0x3c>)
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	4a0b      	ldr	r2, [pc, #44]	@ (8007488 <HAL_Init+0x3c>)
 800745c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007460:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007462:	2003      	movs	r0, #3
 8007464:	f001 fa34 	bl	80088d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8007468:	200f      	movs	r0, #15
 800746a:	f000 f80f 	bl	800748c <HAL_InitTick>
 800746e:	4603      	mov	r3, r0
 8007470:	2b00      	cmp	r3, #0
 8007472:	d002      	beq.n	800747a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8007474:	2301      	movs	r3, #1
 8007476:	71fb      	strb	r3, [r7, #7]
 8007478:	e001      	b.n	800747e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800747a:	f7ff f88e 	bl	800659a <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800747e:	79fb      	ldrb	r3, [r7, #7]
}
 8007480:	4618      	mov	r0, r3
 8007482:	3708      	adds	r7, #8
 8007484:	46bd      	mov	sp, r7
 8007486:	bd80      	pop	{r7, pc}
 8007488:	58004000 	.word	0x58004000

0800748c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b084      	sub	sp, #16
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8007494:	2300      	movs	r3, #0
 8007496:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8007498:	4b17      	ldr	r3, [pc, #92]	@ (80074f8 <HAL_InitTick+0x6c>)
 800749a:	781b      	ldrb	r3, [r3, #0]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d024      	beq.n	80074ea <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80074a0:	f005 fc36 	bl	800cd10 <HAL_RCC_GetHCLKFreq>
 80074a4:	4602      	mov	r2, r0
 80074a6:	4b14      	ldr	r3, [pc, #80]	@ (80074f8 <HAL_InitTick+0x6c>)
 80074a8:	781b      	ldrb	r3, [r3, #0]
 80074aa:	4619      	mov	r1, r3
 80074ac:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80074b0:	fbb3 f3f1 	udiv	r3, r3, r1
 80074b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80074b8:	4618      	mov	r0, r3
 80074ba:	f001 fa4a 	bl	8008952 <HAL_SYSTICK_Config>
 80074be:	4603      	mov	r3, r0
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d10f      	bne.n	80074e4 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2b0f      	cmp	r3, #15
 80074c8:	d809      	bhi.n	80074de <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80074ca:	2200      	movs	r2, #0
 80074cc:	6879      	ldr	r1, [r7, #4]
 80074ce:	f04f 30ff 	mov.w	r0, #4294967295
 80074d2:	f001 fa08 	bl	80088e6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80074d6:	4a09      	ldr	r2, [pc, #36]	@ (80074fc <HAL_InitTick+0x70>)
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	6013      	str	r3, [r2, #0]
 80074dc:	e007      	b.n	80074ee <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 80074de:	2301      	movs	r3, #1
 80074e0:	73fb      	strb	r3, [r7, #15]
 80074e2:	e004      	b.n	80074ee <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 80074e4:	2301      	movs	r3, #1
 80074e6:	73fb      	strb	r3, [r7, #15]
 80074e8:	e001      	b.n	80074ee <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 80074ea:	2301      	movs	r3, #1
 80074ec:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80074ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80074f0:	4618      	mov	r0, r3
 80074f2:	3710      	adds	r7, #16
 80074f4:	46bd      	mov	sp, r7
 80074f6:	bd80      	pop	{r7, pc}
 80074f8:	20000034 	.word	0x20000034
 80074fc:	20000030 	.word	0x20000030

08007500 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007500:	b480      	push	{r7}
 8007502:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8007504:	4b06      	ldr	r3, [pc, #24]	@ (8007520 <HAL_IncTick+0x20>)
 8007506:	781b      	ldrb	r3, [r3, #0]
 8007508:	461a      	mov	r2, r3
 800750a:	4b06      	ldr	r3, [pc, #24]	@ (8007524 <HAL_IncTick+0x24>)
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	4413      	add	r3, r2
 8007510:	4a04      	ldr	r2, [pc, #16]	@ (8007524 <HAL_IncTick+0x24>)
 8007512:	6013      	str	r3, [r2, #0]
}
 8007514:	bf00      	nop
 8007516:	46bd      	mov	sp, r7
 8007518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751c:	4770      	bx	lr
 800751e:	bf00      	nop
 8007520:	20000034 	.word	0x20000034
 8007524:	200014d8 	.word	0x200014d8

08007528 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007528:	b480      	push	{r7}
 800752a:	af00      	add	r7, sp, #0
  return uwTick;
 800752c:	4b03      	ldr	r3, [pc, #12]	@ (800753c <HAL_GetTick+0x14>)
 800752e:	681b      	ldr	r3, [r3, #0]
}
 8007530:	4618      	mov	r0, r3
 8007532:	46bd      	mov	sp, r7
 8007534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007538:	4770      	bx	lr
 800753a:	bf00      	nop
 800753c:	200014d8 	.word	0x200014d8

08007540 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8007540:	b480      	push	{r7}
 8007542:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8007544:	4b03      	ldr	r3, [pc, #12]	@ (8007554 <HAL_GetTickPrio+0x14>)
 8007546:	681b      	ldr	r3, [r3, #0]
}
 8007548:	4618      	mov	r0, r3
 800754a:	46bd      	mov	sp, r7
 800754c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007550:	4770      	bx	lr
 8007552:	bf00      	nop
 8007554:	20000030 	.word	0x20000030

08007558 <HAL_GetTickFreq>:
  * @brief Return tick frequency.
  * @retval Tick frequency.
  *         Value of @ref HAL_TickFreqTypeDef.
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 8007558:	b480      	push	{r7}
 800755a:	af00      	add	r7, sp, #0
  return uwTickFreq;
 800755c:	4b03      	ldr	r3, [pc, #12]	@ (800756c <HAL_GetTickFreq+0x14>)
 800755e:	781b      	ldrb	r3, [r3, #0]
}
 8007560:	4618      	mov	r0, r3
 8007562:	46bd      	mov	sp, r7
 8007564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007568:	4770      	bx	lr
 800756a:	bf00      	nop
 800756c:	20000034 	.word	0x20000034

08007570 <LL_ADC_SetCommonClock>:
  *
  *         (*) Value available on all STM32 devices except: STM32W10xxx, STM32W15xxx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8007570:	b480      	push	{r7}
 8007572:	b083      	sub	sp, #12
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
 8007578:	6039      	str	r1, [r7, #0]
#if defined(ADC_SUPPORT_2_5_MSPS)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
#else
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	689b      	ldr	r3, [r3, #8]
 800757e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	431a      	orrs	r2, r3
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	609a      	str	r2, [r3, #8]
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 800758a:	bf00      	nop
 800758c:	370c      	adds	r7, #12
 800758e:	46bd      	mov	sp, r7
 8007590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007594:	4770      	bx	lr

08007596 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8007596:	b480      	push	{r7}
 8007598:	b083      	sub	sp, #12
 800759a:	af00      	add	r7, sp, #0
 800759c:	6078      	str	r0, [r7, #4]
 800759e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	689b      	ldr	r3, [r3, #8]
 80075a4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	431a      	orrs	r2, r3
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	609a      	str	r2, [r3, #8]
}
 80075b0:	bf00      	nop
 80075b2:	370c      	adds	r7, #12
 80075b4:	46bd      	mov	sp, r7
 80075b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ba:	4770      	bx	lr

080075bc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80075bc:	b480      	push	{r7}
 80075be:	b083      	sub	sp, #12
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	689b      	ldr	r3, [r3, #8]
 80075c8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80075cc:	4618      	mov	r0, r3
 80075ce:	370c      	adds	r7, #12
 80075d0:	46bd      	mov	sp, r7
 80075d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d6:	4770      	bx	lr

080075d8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80075d8:	b480      	push	{r7}
 80075da:	b087      	sub	sp, #28
 80075dc:	af00      	add	r7, sp, #0
 80075de:	60f8      	str	r0, [r7, #12]
 80075e0:	60b9      	str	r1, [r7, #8]
 80075e2:	607a      	str	r2, [r7, #4]
 80075e4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	3360      	adds	r3, #96	@ 0x60
 80075ea:	461a      	mov	r2, r3
 80075ec:	68bb      	ldr	r3, [r7, #8]
 80075ee:	009b      	lsls	r3, r3, #2
 80075f0:	4413      	add	r3, r2
 80075f2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80075f4:	697b      	ldr	r3, [r7, #20]
 80075f6:	681a      	ldr	r2, [r3, #0]
 80075f8:	4b08      	ldr	r3, [pc, #32]	@ (800761c <LL_ADC_SetOffset+0x44>)
 80075fa:	4013      	ands	r3, r2
 80075fc:	687a      	ldr	r2, [r7, #4]
 80075fe:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8007602:	683a      	ldr	r2, [r7, #0]
 8007604:	430a      	orrs	r2, r1
 8007606:	4313      	orrs	r3, r2
 8007608:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800760c:	697b      	ldr	r3, [r7, #20]
 800760e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8007610:	bf00      	nop
 8007612:	371c      	adds	r7, #28
 8007614:	46bd      	mov	sp, r7
 8007616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761a:	4770      	bx	lr
 800761c:	03fff000 	.word	0x03fff000

08007620 <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8007620:	b480      	push	{r7}
 8007622:	b085      	sub	sp, #20
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
 8007628:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	3360      	adds	r3, #96	@ 0x60
 800762e:	461a      	mov	r2, r3
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	009b      	lsls	r3, r3, #2
 8007634:	4413      	add	r3, r2
 8007636:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8007640:	4618      	mov	r0, r3
 8007642:	3714      	adds	r7, #20
 8007644:	46bd      	mov	sp, r7
 8007646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764a:	4770      	bx	lr

0800764c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800764c:	b480      	push	{r7}
 800764e:	b087      	sub	sp, #28
 8007650:	af00      	add	r7, sp, #0
 8007652:	60f8      	str	r0, [r7, #12]
 8007654:	60b9      	str	r1, [r7, #8]
 8007656:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	3360      	adds	r3, #96	@ 0x60
 800765c:	461a      	mov	r2, r3
 800765e:	68bb      	ldr	r3, [r7, #8]
 8007660:	009b      	lsls	r3, r3, #2
 8007662:	4413      	add	r3, r2
 8007664:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8007666:	697b      	ldr	r3, [r7, #20]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	431a      	orrs	r2, r3
 8007672:	697b      	ldr	r3, [r7, #20]
 8007674:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8007676:	bf00      	nop
 8007678:	371c      	adds	r7, #28
 800767a:	46bd      	mov	sp, r7
 800767c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007680:	4770      	bx	lr

08007682 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8007682:	b480      	push	{r7}
 8007684:	b083      	sub	sp, #12
 8007686:	af00      	add	r7, sp, #0
 8007688:	6078      	str	r0, [r7, #4]
#if defined(ADC_SUPPORT_2_5_MSPS)
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
#else
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	68db      	ldr	r3, [r3, #12]
 800768e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007692:	2b00      	cmp	r3, #0
 8007694:	d101      	bne.n	800769a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8007696:	2301      	movs	r3, #1
 8007698:	e000      	b.n	800769c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800769a:	2300      	movs	r3, #0
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 800769c:	4618      	mov	r0, r3
 800769e:	370c      	adds	r7, #12
 80076a0:	46bd      	mov	sp, r7
 80076a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a6:	4770      	bx	lr

080076a8 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32WB devices (except devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx) fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80076a8:	b480      	push	{r7}
 80076aa:	b087      	sub	sp, #28
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	60f8      	str	r0, [r7, #12]
 80076b0:	60b9      	str	r1, [r7, #8]
 80076b2:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	3330      	adds	r3, #48	@ 0x30
 80076b8:	461a      	mov	r2, r3
 80076ba:	68bb      	ldr	r3, [r7, #8]
 80076bc:	0a1b      	lsrs	r3, r3, #8
 80076be:	009b      	lsls	r3, r3, #2
 80076c0:	f003 030c 	and.w	r3, r3, #12
 80076c4:	4413      	add	r3, r2
 80076c6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80076c8:	697b      	ldr	r3, [r7, #20]
 80076ca:	681a      	ldr	r2, [r3, #0]
 80076cc:	68bb      	ldr	r3, [r7, #8]
 80076ce:	f003 031f 	and.w	r3, r3, #31
 80076d2:	211f      	movs	r1, #31
 80076d4:	fa01 f303 	lsl.w	r3, r1, r3
 80076d8:	43db      	mvns	r3, r3
 80076da:	401a      	ands	r2, r3
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	0e9b      	lsrs	r3, r3, #26
 80076e0:	f003 011f 	and.w	r1, r3, #31
 80076e4:	68bb      	ldr	r3, [r7, #8]
 80076e6:	f003 031f 	and.w	r3, r3, #31
 80076ea:	fa01 f303 	lsl.w	r3, r1, r3
 80076ee:	431a      	orrs	r2, r3
 80076f0:	697b      	ldr	r3, [r7, #20]
 80076f2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 80076f4:	bf00      	nop
 80076f6:	371c      	adds	r7, #28
 80076f8:	46bd      	mov	sp, r7
 80076fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fe:	4770      	bx	lr

08007700 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8007700:	b480      	push	{r7}
 8007702:	b087      	sub	sp, #28
 8007704:	af00      	add	r7, sp, #0
 8007706:	60f8      	str	r0, [r7, #12]
 8007708:	60b9      	str	r1, [r7, #8]
 800770a:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	3314      	adds	r3, #20
 8007710:	461a      	mov	r2, r3
 8007712:	68bb      	ldr	r3, [r7, #8]
 8007714:	0e5b      	lsrs	r3, r3, #25
 8007716:	009b      	lsls	r3, r3, #2
 8007718:	f003 0304 	and.w	r3, r3, #4
 800771c:	4413      	add	r3, r2
 800771e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8007720:	697b      	ldr	r3, [r7, #20]
 8007722:	681a      	ldr	r2, [r3, #0]
 8007724:	68bb      	ldr	r3, [r7, #8]
 8007726:	0d1b      	lsrs	r3, r3, #20
 8007728:	f003 031f 	and.w	r3, r3, #31
 800772c:	2107      	movs	r1, #7
 800772e:	fa01 f303 	lsl.w	r3, r1, r3
 8007732:	43db      	mvns	r3, r3
 8007734:	401a      	ands	r2, r3
 8007736:	68bb      	ldr	r3, [r7, #8]
 8007738:	0d1b      	lsrs	r3, r3, #20
 800773a:	f003 031f 	and.w	r3, r3, #31
 800773e:	6879      	ldr	r1, [r7, #4]
 8007740:	fa01 f303 	lsl.w	r3, r1, r3
 8007744:	431a      	orrs	r2, r3
 8007746:	697b      	ldr	r3, [r7, #20]
 8007748:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 800774a:	bf00      	nop
 800774c:	371c      	adds	r7, #28
 800774e:	46bd      	mov	sp, r7
 8007750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007754:	4770      	bx	lr
	...

08007758 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8007758:	b480      	push	{r7}
 800775a:	b085      	sub	sp, #20
 800775c:	af00      	add	r7, sp, #0
 800775e:	60f8      	str	r0, [r7, #12]
 8007760:	60b9      	str	r1, [r7, #8]
 8007762:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800776a:	68bb      	ldr	r3, [r7, #8]
 800776c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007770:	43db      	mvns	r3, r3
 8007772:	401a      	ands	r2, r3
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	f003 0318 	and.w	r3, r3, #24
 800777a:	4908      	ldr	r1, [pc, #32]	@ (800779c <LL_ADC_SetChannelSingleDiff+0x44>)
 800777c:	40d9      	lsrs	r1, r3
 800777e:	68bb      	ldr	r3, [r7, #8]
 8007780:	400b      	ands	r3, r1
 8007782:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007786:	431a      	orrs	r2, r3
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800778e:	bf00      	nop
 8007790:	3714      	adds	r7, #20
 8007792:	46bd      	mov	sp, r7
 8007794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007798:	4770      	bx	lr
 800779a:	bf00      	nop
 800779c:	0007ffff 	.word	0x0007ffff

080077a0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80077a0:	b480      	push	{r7}
 80077a2:	b083      	sub	sp, #12
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	689b      	ldr	r3, [r3, #8]
 80077ac:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80077b0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80077b4:	687a      	ldr	r2, [r7, #4]
 80077b6:	6093      	str	r3, [r2, #8]
}
 80077b8:	bf00      	nop
 80077ba:	370c      	adds	r7, #12
 80077bc:	46bd      	mov	sp, r7
 80077be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c2:	4770      	bx	lr

080077c4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80077c4:	b480      	push	{r7}
 80077c6:	b083      	sub	sp, #12
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	689b      	ldr	r3, [r3, #8]
 80077d0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80077d4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80077d8:	d101      	bne.n	80077de <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80077da:	2301      	movs	r3, #1
 80077dc:	e000      	b.n	80077e0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80077de:	2300      	movs	r3, #0
}
 80077e0:	4618      	mov	r0, r3
 80077e2:	370c      	adds	r7, #12
 80077e4:	46bd      	mov	sp, r7
 80077e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ea:	4770      	bx	lr

080077ec <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80077ec:	b480      	push	{r7}
 80077ee:	b083      	sub	sp, #12
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	689b      	ldr	r3, [r3, #8]
 80077f8:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80077fc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8007800:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8007808:	bf00      	nop
 800780a:	370c      	adds	r7, #12
 800780c:	46bd      	mov	sp, r7
 800780e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007812:	4770      	bx	lr

08007814 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8007814:	b480      	push	{r7}
 8007816:	b083      	sub	sp, #12
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	689b      	ldr	r3, [r3, #8]
 8007820:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007824:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007828:	d101      	bne.n	800782e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800782a:	2301      	movs	r3, #1
 800782c:	e000      	b.n	8007830 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800782e:	2300      	movs	r3, #0
}
 8007830:	4618      	mov	r0, r3
 8007832:	370c      	adds	r7, #12
 8007834:	46bd      	mov	sp, r7
 8007836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783a:	4770      	bx	lr

0800783c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800783c:	b480      	push	{r7}
 800783e:	b083      	sub	sp, #12
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	689b      	ldr	r3, [r3, #8]
 8007848:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800784c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8007850:	f043 0201 	orr.w	r2, r3, #1
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8007858:	bf00      	nop
 800785a:	370c      	adds	r7, #12
 800785c:	46bd      	mov	sp, r7
 800785e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007862:	4770      	bx	lr

08007864 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8007864:	b480      	push	{r7}
 8007866:	b083      	sub	sp, #12
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	689b      	ldr	r3, [r3, #8]
 8007870:	f003 0301 	and.w	r3, r3, #1
 8007874:	2b01      	cmp	r3, #1
 8007876:	d101      	bne.n	800787c <LL_ADC_IsEnabled+0x18>
 8007878:	2301      	movs	r3, #1
 800787a:	e000      	b.n	800787e <LL_ADC_IsEnabled+0x1a>
 800787c:	2300      	movs	r3, #0
}
 800787e:	4618      	mov	r0, r3
 8007880:	370c      	adds	r7, #12
 8007882:	46bd      	mov	sp, r7
 8007884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007888:	4770      	bx	lr

0800788a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800788a:	b480      	push	{r7}
 800788c:	b083      	sub	sp, #12
 800788e:	af00      	add	r7, sp, #0
 8007890:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	689b      	ldr	r3, [r3, #8]
 8007896:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800789a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800789e:	f043 0204 	orr.w	r2, r3, #4
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80078a6:	bf00      	nop
 80078a8:	370c      	adds	r7, #12
 80078aa:	46bd      	mov	sp, r7
 80078ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b0:	4770      	bx	lr

080078b2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80078b2:	b480      	push	{r7}
 80078b4:	b083      	sub	sp, #12
 80078b6:	af00      	add	r7, sp, #0
 80078b8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	689b      	ldr	r3, [r3, #8]
 80078be:	f003 0304 	and.w	r3, r3, #4
 80078c2:	2b04      	cmp	r3, #4
 80078c4:	d101      	bne.n	80078ca <LL_ADC_REG_IsConversionOngoing+0x18>
 80078c6:	2301      	movs	r3, #1
 80078c8:	e000      	b.n	80078cc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80078ca:	2300      	movs	r3, #0
}
 80078cc:	4618      	mov	r0, r3
 80078ce:	370c      	adds	r7, #12
 80078d0:	46bd      	mov	sp, r7
 80078d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d6:	4770      	bx	lr

080078d8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80078d8:	b480      	push	{r7}
 80078da:	b083      	sub	sp, #12
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	689b      	ldr	r3, [r3, #8]
 80078e4:	f003 0308 	and.w	r3, r3, #8
 80078e8:	2b08      	cmp	r3, #8
 80078ea:	d101      	bne.n	80078f0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80078ec:	2301      	movs	r3, #1
 80078ee:	e000      	b.n	80078f2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80078f0:	2300      	movs	r3, #0
}
 80078f2:	4618      	mov	r0, r3
 80078f4:	370c      	adds	r7, #12
 80078f6:	46bd      	mov	sp, r7
 80078f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fc:	4770      	bx	lr
	...

08007900 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b088      	sub	sp, #32
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007908:	2300      	movs	r3, #0
 800790a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR = 0UL;
 800790c:	2300      	movs	r3, #0
 800790e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8007910:	2300      	movs	r3, #0
 8007912:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Check ADC handle */
  if (hadc == NULL)
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d101      	bne.n	800791e <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 800791a:	2301      	movs	r3, #1
 800791c:	e12e      	b.n	8007b7c <HAL_ADC_Init+0x27c>
    }
  }
#else
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	691b      	ldr	r3, [r3, #16]
 8007922:	2b00      	cmp	r3, #0
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007928:	2b00      	cmp	r3, #0
 800792a:	d109      	bne.n	8007940 <HAL_ADC_Init+0x40>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800792c:	6878      	ldr	r0, [r7, #4]
 800792e:	f7f9 fbd1 	bl	80010d4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	2200      	movs	r2, #0
 8007936:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2200      	movs	r2, #0
 800793c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* - Exit from deep power-down mode and ADC voltage regulator enable        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  /* Feature "deep power-down" not available on ADC peripheral of this STM32WB device */
#else
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	4618      	mov	r0, r3
 8007946:	f7ff ff3d 	bl	80077c4 <LL_ADC_IsDeepPowerDownEnabled>
 800794a:	4603      	mov	r3, r0
 800794c:	2b00      	cmp	r3, #0
 800794e:	d004      	beq.n	800795a <HAL_ADC_Init+0x5a>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	4618      	mov	r0, r3
 8007956:	f7ff ff23 	bl	80077a0 <LL_ADC_DisableDeepPowerDown>
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	4618      	mov	r0, r3
 8007960:	f7ff ff58 	bl	8007814 <LL_ADC_IsInternalRegulatorEnabled>
 8007964:	4603      	mov	r3, r0
 8007966:	2b00      	cmp	r3, #0
 8007968:	d115      	bne.n	8007996 <HAL_ADC_Init+0x96>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	4618      	mov	r0, r3
 8007970:	f7ff ff3c 	bl	80077ec <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007974:	4b83      	ldr	r3, [pc, #524]	@ (8007b84 <HAL_ADC_Init+0x284>)
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	099b      	lsrs	r3, r3, #6
 800797a:	4a83      	ldr	r2, [pc, #524]	@ (8007b88 <HAL_ADC_Init+0x288>)
 800797c:	fba2 2303 	umull	r2, r3, r2, r3
 8007980:	099b      	lsrs	r3, r3, #6
 8007982:	3301      	adds	r3, #1
 8007984:	005b      	lsls	r3, r3, #1
 8007986:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8007988:	e002      	b.n	8007990 <HAL_ADC_Init+0x90>
    {
      wait_loop_index--;
 800798a:	68bb      	ldr	r3, [r7, #8]
 800798c:	3b01      	subs	r3, #1
 800798e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8007990:	68bb      	ldr	r3, [r7, #8]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d1f9      	bne.n	800798a <HAL_ADC_Init+0x8a>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	4618      	mov	r0, r3
 800799c:	f7ff ff3a 	bl	8007814 <LL_ADC_IsInternalRegulatorEnabled>
 80079a0:	4603      	mov	r3, r0
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d10d      	bne.n	80079c2 <HAL_ADC_Init+0xc2>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80079aa:	f043 0210 	orr.w	r2, r3, #16
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80079b6:	f043 0201 	orr.w	r2, r3, #1
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80079be:	2301      	movs	r3, #1
 80079c0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	4618      	mov	r0, r3
 80079c8:	f7ff ff73 	bl	80078b2 <LL_ADC_REG_IsConversionOngoing>
 80079cc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80079d2:	f003 0310 	and.w	r3, r3, #16
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	f040 80c7 	bne.w	8007b6a <HAL_ADC_Init+0x26a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80079dc:	697b      	ldr	r3, [r7, #20]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	f040 80c3 	bne.w	8007b6a <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80079e8:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80079ec:	f043 0202 	orr.w	r2, r3, #2
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	4618      	mov	r0, r3
 80079fa:	f7ff ff33 	bl	8007864 <LL_ADC_IsEnabled>
 80079fe:	4603      	mov	r3, r0
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d10b      	bne.n	8007a1c <HAL_ADC_Init+0x11c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007a04:	4861      	ldr	r0, [pc, #388]	@ (8007b8c <HAL_ADC_Init+0x28c>)
 8007a06:	f7ff ff2d 	bl	8007864 <LL_ADC_IsEnabled>
 8007a0a:	4603      	mov	r3, r0
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d105      	bne.n	8007a1c <HAL_ADC_Init+0x11c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	685b      	ldr	r3, [r3, #4]
 8007a14:	4619      	mov	r1, r3
 8007a16:	485e      	ldr	r0, [pc, #376]	@ (8007b90 <HAL_ADC_Init+0x290>)
 8007a18:	f7ff fdaa 	bl	8007570 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	7e5b      	ldrb	r3, [r3, #25]
 8007a20:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8007a26:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8007a2c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8007a32:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007a3a:	041b      	lsls	r3, r3, #16
                hadc->Init.Resolution                                                  |
 8007a3c:	4313      	orrs	r3, r2
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8007a3e:	69ba      	ldr	r2, [r7, #24]
 8007a40:	4313      	orrs	r3, r2
 8007a42:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007a4a:	2b01      	cmp	r3, #1
 8007a4c:	d106      	bne.n	8007a5c <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a52:	3b01      	subs	r3, #1
 8007a54:	045b      	lsls	r3, r3, #17
 8007a56:	69ba      	ldr	r2, [r7, #24]
 8007a58:	4313      	orrs	r3, r2
 8007a5a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d009      	beq.n	8007a78 <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a68:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a70:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8007a72:	69ba      	ldr	r2, [r7, #24]
 8007a74:	4313      	orrs	r3, r2
 8007a76:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	68da      	ldr	r2, [r3, #12]
 8007a7e:	4b45      	ldr	r3, [pc, #276]	@ (8007b94 <HAL_ADC_Init+0x294>)
 8007a80:	4013      	ands	r3, r2
 8007a82:	687a      	ldr	r2, [r7, #4]
 8007a84:	6812      	ldr	r2, [r2, #0]
 8007a86:	69b9      	ldr	r1, [r7, #24]
 8007a88:	430b      	orrs	r3, r1
 8007a8a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	4618      	mov	r0, r3
 8007a92:	f7ff ff0e 	bl	80078b2 <LL_ADC_REG_IsConversionOngoing>
 8007a96:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	f7ff ff1b 	bl	80078d8 <LL_ADC_INJ_IsConversionOngoing>
 8007aa2:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8007aa4:	693b      	ldr	r3, [r7, #16]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d13d      	bne.n	8007b26 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d13a      	bne.n	8007b26 <HAL_ADC_Init+0x226>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8007ab4:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007abc:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8007abe:	4313      	orrs	r3, r2
 8007ac0:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	68db      	ldr	r3, [r3, #12]
 8007ac8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007acc:	f023 0302 	bic.w	r3, r3, #2
 8007ad0:	687a      	ldr	r2, [r7, #4]
 8007ad2:	6812      	ldr	r2, [r2, #0]
 8007ad4:	69b9      	ldr	r1, [r7, #24]
 8007ad6:	430b      	orrs	r3, r1
 8007ad8:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007ae0:	2b01      	cmp	r3, #1
 8007ae2:	d118      	bne.n	8007b16 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	691b      	ldr	r3, [r3, #16]
 8007aea:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8007aee:	f023 0304 	bic.w	r3, r3, #4
 8007af2:	687a      	ldr	r2, [r7, #4]
 8007af4:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8007af6:	687a      	ldr	r2, [r7, #4]
 8007af8:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8007afa:	4311      	orrs	r1, r2
 8007afc:	687a      	ldr	r2, [r7, #4]
 8007afe:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8007b00:	4311      	orrs	r1, r2
 8007b02:	687a      	ldr	r2, [r7, #4]
 8007b04:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8007b06:	430a      	orrs	r2, r1
 8007b08:	431a      	orrs	r2, r3
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	f042 0201 	orr.w	r2, r2, #1
 8007b12:	611a      	str	r2, [r3, #16]
 8007b14:	e007      	b.n	8007b26 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	691a      	ldr	r2, [r3, #16]
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	f022 0201 	bic.w	r2, r2, #1
 8007b24:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	691b      	ldr	r3, [r3, #16]
 8007b2a:	2b01      	cmp	r3, #1
 8007b2c:	d10c      	bne.n	8007b48 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b34:	f023 010f 	bic.w	r1, r3, #15
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	69db      	ldr	r3, [r3, #28]
 8007b3c:	1e5a      	subs	r2, r3, #1
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	430a      	orrs	r2, r1
 8007b44:	631a      	str	r2, [r3, #48]	@ 0x30
 8007b46:	e007      	b.n	8007b58 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	f022 020f 	bic.w	r2, r2, #15
 8007b56:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b5c:	f023 0303 	bic.w	r3, r3, #3
 8007b60:	f043 0201 	orr.w	r2, r3, #1
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	655a      	str	r2, [r3, #84]	@ 0x54
 8007b68:	e007      	b.n	8007b7a <HAL_ADC_Init+0x27a>
#endif /* ADC_SUPPORT_2_5_MSPS */
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b6e:	f043 0210 	orr.w	r2, r3, #16
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8007b76:	2301      	movs	r3, #1
 8007b78:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8007b7a:	7ffb      	ldrb	r3, [r7, #31]
}
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	3720      	adds	r7, #32
 8007b80:	46bd      	mov	sp, r7
 8007b82:	bd80      	pop	{r7, pc}
 8007b84:	2000002c 	.word	0x2000002c
 8007b88:	053e2d63 	.word	0x053e2d63
 8007b8c:	50040000 	.word	0x50040000
 8007b90:	50040300 	.word	0x50040300
 8007b94:	fff0c007 	.word	0xfff0c007

08007b98 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b086      	sub	sp, #24
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	60f8      	str	r0, [r7, #12]
 8007ba0:	60b9      	str	r1, [r7, #8]
 8007ba2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	4618      	mov	r0, r3
 8007baa:	f7ff fe82 	bl	80078b2 <LL_ADC_REG_IsConversionOngoing>
 8007bae:	4603      	mov	r3, r0
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d167      	bne.n	8007c84 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007bba:	2b01      	cmp	r3, #1
 8007bbc:	d101      	bne.n	8007bc2 <HAL_ADC_Start_DMA+0x2a>
 8007bbe:	2302      	movs	r3, #2
 8007bc0:	e063      	b.n	8007c8a <HAL_ADC_Start_DMA+0xf2>
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	2201      	movs	r2, #1
 8007bc6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8007bca:	68f8      	ldr	r0, [r7, #12]
 8007bcc:	f000 fc42 	bl	8008454 <ADC_Enable>
 8007bd0:	4603      	mov	r3, r0
 8007bd2:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8007bd4:	7dfb      	ldrb	r3, [r7, #23]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d14f      	bne.n	8007c7a <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007bde:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8007be2:	f023 0301 	bic.w	r3, r3, #1
 8007be6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	655a      	str	r2, [r3, #84]	@ 0x54
#if defined(ADC_SUPPORT_2_5_MSPS)
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
#else
        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007bf2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d006      	beq.n	8007c08 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007bfe:	f023 0206 	bic.w	r2, r3, #6
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	659a      	str	r2, [r3, #88]	@ 0x58
 8007c06:	e002      	b.n	8007c0e <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	659a      	str	r2, [r3, #88]	@ 0x58
        }
#endif /* ADC_SUPPORT_2_5_MSPS */

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007c12:	4a20      	ldr	r2, [pc, #128]	@ (8007c94 <HAL_ADC_Start_DMA+0xfc>)
 8007c14:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007c1a:	4a1f      	ldr	r2, [pc, #124]	@ (8007c98 <HAL_ADC_Start_DMA+0x100>)
 8007c1c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007c22:	4a1e      	ldr	r2, [pc, #120]	@ (8007c9c <HAL_ADC_Start_DMA+0x104>)
 8007c24:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	221c      	movs	r2, #28
 8007c2c:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	2200      	movs	r2, #0
 8007c32:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	685a      	ldr	r2, [r3, #4]
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	f042 0210 	orr.w	r2, r2, #16
 8007c44:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
#if  defined(ADC_SUPPORT_2_5_MSPS)
        SET_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
#else
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	68da      	ldr	r2, [r3, #12]
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	f042 0201 	orr.w	r2, r2, #1
 8007c54:	60da      	str	r2, [r3, #12]
#endif /* ADC_SUPPORT_2_5_MSPS */

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	3340      	adds	r3, #64	@ 0x40
 8007c60:	4619      	mov	r1, r3
 8007c62:	68ba      	ldr	r2, [r7, #8]
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	f000 ff45 	bl	8008af4 <HAL_DMA_Start_IT>
 8007c6a:	4603      	mov	r3, r0
 8007c6c:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	4618      	mov	r0, r3
 8007c74:	f7ff fe09 	bl	800788a <LL_ADC_REG_StartConversion>
 8007c78:	e006      	b.n	8007c88 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8007c82:	e001      	b.n	8007c88 <HAL_ADC_Start_DMA+0xf0>
      }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8007c84:	2302      	movs	r3, #2
 8007c86:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8007c88:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	3718      	adds	r7, #24
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	bd80      	pop	{r7, pc}
 8007c92:	bf00      	nop
 8007c94:	08008549 	.word	0x08008549
 8007c98:	08008621 	.word	0x08008621
 8007c9c:	0800863d 	.word	0x0800863d

08007ca0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8007ca0:	b480      	push	{r7}
 8007ca2:	b083      	sub	sp, #12
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8007ca8:	bf00      	nop
 8007caa:	370c      	adds	r7, #12
 8007cac:	46bd      	mov	sp, r7
 8007cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb2:	4770      	bx	lr

08007cb4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8007cb4:	b480      	push	{r7}
 8007cb6:	b083      	sub	sp, #12
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8007cbc:	bf00      	nop
 8007cbe:	370c      	adds	r7, #12
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc6:	4770      	bx	lr

08007cc8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *sConfig)
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b0b6      	sub	sp, #216	@ 0xd8
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
 8007cd0:	6039      	str	r1, [r7, #0]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
#else
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8007cd8:	2300      	movs	r3, #0
 8007cda:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007ce2:	2b01      	cmp	r3, #1
 8007ce4:	d101      	bne.n	8007cea <HAL_ADC_ConfigChannel+0x22>
 8007ce6:	2302      	movs	r3, #2
 8007ce8:	e39f      	b.n	800842a <HAL_ADC_ConfigChannel+0x762>
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	2201      	movs	r2, #1
 8007cee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	f7ff fddb 	bl	80078b2 <LL_ADC_REG_IsConversionOngoing>
 8007cfc:	4603      	mov	r3, r0
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	f040 8384 	bne.w	800840c <HAL_ADC_ConfigChannel+0x744>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	6818      	ldr	r0, [r3, #0]
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	6859      	ldr	r1, [r3, #4]
 8007d0c:	683b      	ldr	r3, [r7, #0]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	461a      	mov	r2, r3
 8007d12:	f7ff fcc9 	bl	80076a8 <LL_ADC_REG_SetSequencerRanks>
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
#else
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	f7ff fdc9 	bl	80078b2 <LL_ADC_REG_IsConversionOngoing>
 8007d20:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	4618      	mov	r0, r3
 8007d2a:	f7ff fdd5 	bl	80078d8 <LL_ADC_INJ_IsConversionOngoing>
 8007d2e:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8007d32:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	f040 81a6 	bne.w	8008088 <HAL_ADC_ConfigChannel+0x3c0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8007d3c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	f040 81a1 	bne.w	8008088 <HAL_ADC_ConfigChannel+0x3c0>
       )
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	6818      	ldr	r0, [r3, #0]
 8007d4a:	683b      	ldr	r3, [r7, #0]
 8007d4c:	6819      	ldr	r1, [r3, #0]
 8007d4e:	683b      	ldr	r3, [r7, #0]
 8007d50:	689b      	ldr	r3, [r3, #8]
 8007d52:	461a      	mov	r2, r3
 8007d54:	f7ff fcd4 	bl	8007700 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8007d58:	683b      	ldr	r3, [r7, #0]
 8007d5a:	695a      	ldr	r2, [r3, #20]
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	68db      	ldr	r3, [r3, #12]
 8007d62:	08db      	lsrs	r3, r3, #3
 8007d64:	f003 0303 	and.w	r3, r3, #3
 8007d68:	005b      	lsls	r3, r3, #1
 8007d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8007d6e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	691b      	ldr	r3, [r3, #16]
 8007d76:	2b04      	cmp	r3, #4
 8007d78:	d00a      	beq.n	8007d90 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	6818      	ldr	r0, [r3, #0]
 8007d7e:	683b      	ldr	r3, [r7, #0]
 8007d80:	6919      	ldr	r1, [r3, #16]
 8007d82:	683b      	ldr	r3, [r7, #0]
 8007d84:	681a      	ldr	r2, [r3, #0]
 8007d86:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007d8a:	f7ff fc25 	bl	80075d8 <LL_ADC_SetOffset>
 8007d8e:	e17b      	b.n	8008088 <HAL_ADC_ConfigChannel+0x3c0>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	2100      	movs	r1, #0
 8007d96:	4618      	mov	r0, r3
 8007d98:	f7ff fc42 	bl	8007620 <LL_ADC_GetOffsetChannel>
 8007d9c:	4603      	mov	r3, r0
 8007d9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d10a      	bne.n	8007dbc <HAL_ADC_ConfigChannel+0xf4>
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	2100      	movs	r1, #0
 8007dac:	4618      	mov	r0, r3
 8007dae:	f7ff fc37 	bl	8007620 <LL_ADC_GetOffsetChannel>
 8007db2:	4603      	mov	r3, r0
 8007db4:	0e9b      	lsrs	r3, r3, #26
 8007db6:	f003 021f 	and.w	r2, r3, #31
 8007dba:	e01e      	b.n	8007dfa <HAL_ADC_ConfigChannel+0x132>
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	2100      	movs	r1, #0
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	f7ff fc2c 	bl	8007620 <LL_ADC_GetOffsetChannel>
 8007dc8:	4603      	mov	r3, r0
 8007dca:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007dce:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8007dd2:	fa93 f3a3 	rbit	r3, r3
 8007dd6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  return result;
 8007dda:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007dde:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  if (value == 0U)
 8007de2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d101      	bne.n	8007dee <HAL_ADC_ConfigChannel+0x126>
    return 32U;
 8007dea:	2320      	movs	r3, #32
 8007dec:	e004      	b.n	8007df8 <HAL_ADC_ConfigChannel+0x130>
  return __builtin_clz(value);
 8007dee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007df2:	fab3 f383 	clz	r3, r3
 8007df6:	b2db      	uxtb	r3, r3
 8007df8:	461a      	mov	r2, r3
 8007dfa:	683b      	ldr	r3, [r7, #0]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d105      	bne.n	8007e12 <HAL_ADC_ConfigChannel+0x14a>
 8007e06:	683b      	ldr	r3, [r7, #0]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	0e9b      	lsrs	r3, r3, #26
 8007e0c:	f003 031f 	and.w	r3, r3, #31
 8007e10:	e018      	b.n	8007e44 <HAL_ADC_ConfigChannel+0x17c>
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007e1a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8007e1e:	fa93 f3a3 	rbit	r3, r3
 8007e22:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8007e26:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007e2a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8007e2e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d101      	bne.n	8007e3a <HAL_ADC_ConfigChannel+0x172>
    return 32U;
 8007e36:	2320      	movs	r3, #32
 8007e38:	e004      	b.n	8007e44 <HAL_ADC_ConfigChannel+0x17c>
  return __builtin_clz(value);
 8007e3a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007e3e:	fab3 f383 	clz	r3, r3
 8007e42:	b2db      	uxtb	r3, r3
 8007e44:	429a      	cmp	r2, r3
 8007e46:	d106      	bne.n	8007e56 <HAL_ADC_ConfigChannel+0x18e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	2100      	movs	r1, #0
 8007e50:	4618      	mov	r0, r3
 8007e52:	f7ff fbfb 	bl	800764c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	2101      	movs	r1, #1
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	f7ff fbdf 	bl	8007620 <LL_ADC_GetOffsetChannel>
 8007e62:	4603      	mov	r3, r0
 8007e64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d10a      	bne.n	8007e82 <HAL_ADC_ConfigChannel+0x1ba>
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	2101      	movs	r1, #1
 8007e72:	4618      	mov	r0, r3
 8007e74:	f7ff fbd4 	bl	8007620 <LL_ADC_GetOffsetChannel>
 8007e78:	4603      	mov	r3, r0
 8007e7a:	0e9b      	lsrs	r3, r3, #26
 8007e7c:	f003 021f 	and.w	r2, r3, #31
 8007e80:	e01e      	b.n	8007ec0 <HAL_ADC_ConfigChannel+0x1f8>
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	2101      	movs	r1, #1
 8007e88:	4618      	mov	r0, r3
 8007e8a:	f7ff fbc9 	bl	8007620 <LL_ADC_GetOffsetChannel>
 8007e8e:	4603      	mov	r3, r0
 8007e90:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007e94:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007e98:	fa93 f3a3 	rbit	r3, r3
 8007e9c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8007ea0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007ea4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8007ea8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d101      	bne.n	8007eb4 <HAL_ADC_ConfigChannel+0x1ec>
    return 32U;
 8007eb0:	2320      	movs	r3, #32
 8007eb2:	e004      	b.n	8007ebe <HAL_ADC_ConfigChannel+0x1f6>
  return __builtin_clz(value);
 8007eb4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007eb8:	fab3 f383 	clz	r3, r3
 8007ebc:	b2db      	uxtb	r3, r3
 8007ebe:	461a      	mov	r2, r3
 8007ec0:	683b      	ldr	r3, [r7, #0]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d105      	bne.n	8007ed8 <HAL_ADC_ConfigChannel+0x210>
 8007ecc:	683b      	ldr	r3, [r7, #0]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	0e9b      	lsrs	r3, r3, #26
 8007ed2:	f003 031f 	and.w	r3, r3, #31
 8007ed6:	e018      	b.n	8007f0a <HAL_ADC_ConfigChannel+0x242>
 8007ed8:	683b      	ldr	r3, [r7, #0]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007ee0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007ee4:	fa93 f3a3 	rbit	r3, r3
 8007ee8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8007eec:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007ef0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8007ef4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d101      	bne.n	8007f00 <HAL_ADC_ConfigChannel+0x238>
    return 32U;
 8007efc:	2320      	movs	r3, #32
 8007efe:	e004      	b.n	8007f0a <HAL_ADC_ConfigChannel+0x242>
  return __builtin_clz(value);
 8007f00:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007f04:	fab3 f383 	clz	r3, r3
 8007f08:	b2db      	uxtb	r3, r3
 8007f0a:	429a      	cmp	r2, r3
 8007f0c:	d106      	bne.n	8007f1c <HAL_ADC_ConfigChannel+0x254>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	2200      	movs	r2, #0
 8007f14:	2101      	movs	r1, #1
 8007f16:	4618      	mov	r0, r3
 8007f18:	f7ff fb98 	bl	800764c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	2102      	movs	r1, #2
 8007f22:	4618      	mov	r0, r3
 8007f24:	f7ff fb7c 	bl	8007620 <LL_ADC_GetOffsetChannel>
 8007f28:	4603      	mov	r3, r0
 8007f2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d10a      	bne.n	8007f48 <HAL_ADC_ConfigChannel+0x280>
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	2102      	movs	r1, #2
 8007f38:	4618      	mov	r0, r3
 8007f3a:	f7ff fb71 	bl	8007620 <LL_ADC_GetOffsetChannel>
 8007f3e:	4603      	mov	r3, r0
 8007f40:	0e9b      	lsrs	r3, r3, #26
 8007f42:	f003 021f 	and.w	r2, r3, #31
 8007f46:	e01e      	b.n	8007f86 <HAL_ADC_ConfigChannel+0x2be>
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	2102      	movs	r1, #2
 8007f4e:	4618      	mov	r0, r3
 8007f50:	f7ff fb66 	bl	8007620 <LL_ADC_GetOffsetChannel>
 8007f54:	4603      	mov	r3, r0
 8007f56:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007f5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007f5e:	fa93 f3a3 	rbit	r3, r3
 8007f62:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8007f66:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007f6a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8007f6e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d101      	bne.n	8007f7a <HAL_ADC_ConfigChannel+0x2b2>
    return 32U;
 8007f76:	2320      	movs	r3, #32
 8007f78:	e004      	b.n	8007f84 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8007f7a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007f7e:	fab3 f383 	clz	r3, r3
 8007f82:	b2db      	uxtb	r3, r3
 8007f84:	461a      	mov	r2, r3
 8007f86:	683b      	ldr	r3, [r7, #0]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d105      	bne.n	8007f9e <HAL_ADC_ConfigChannel+0x2d6>
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	0e9b      	lsrs	r3, r3, #26
 8007f98:	f003 031f 	and.w	r3, r3, #31
 8007f9c:	e016      	b.n	8007fcc <HAL_ADC_ConfigChannel+0x304>
 8007f9e:	683b      	ldr	r3, [r7, #0]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007fa6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007faa:	fa93 f3a3 	rbit	r3, r3
 8007fae:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8007fb0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007fb2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8007fb6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d101      	bne.n	8007fc2 <HAL_ADC_ConfigChannel+0x2fa>
    return 32U;
 8007fbe:	2320      	movs	r3, #32
 8007fc0:	e004      	b.n	8007fcc <HAL_ADC_ConfigChannel+0x304>
  return __builtin_clz(value);
 8007fc2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007fc6:	fab3 f383 	clz	r3, r3
 8007fca:	b2db      	uxtb	r3, r3
 8007fcc:	429a      	cmp	r2, r3
 8007fce:	d106      	bne.n	8007fde <HAL_ADC_ConfigChannel+0x316>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	2102      	movs	r1, #2
 8007fd8:	4618      	mov	r0, r3
 8007fda:	f7ff fb37 	bl	800764c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	2103      	movs	r1, #3
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	f7ff fb1b 	bl	8007620 <LL_ADC_GetOffsetChannel>
 8007fea:	4603      	mov	r3, r0
 8007fec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d10a      	bne.n	800800a <HAL_ADC_ConfigChannel+0x342>
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	2103      	movs	r1, #3
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	f7ff fb10 	bl	8007620 <LL_ADC_GetOffsetChannel>
 8008000:	4603      	mov	r3, r0
 8008002:	0e9b      	lsrs	r3, r3, #26
 8008004:	f003 021f 	and.w	r2, r3, #31
 8008008:	e017      	b.n	800803a <HAL_ADC_ConfigChannel+0x372>
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	2103      	movs	r1, #3
 8008010:	4618      	mov	r0, r3
 8008012:	f7ff fb05 	bl	8007620 <LL_ADC_GetOffsetChannel>
 8008016:	4603      	mov	r3, r0
 8008018:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800801a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800801c:	fa93 f3a3 	rbit	r3, r3
 8008020:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8008022:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008024:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8008026:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008028:	2b00      	cmp	r3, #0
 800802a:	d101      	bne.n	8008030 <HAL_ADC_ConfigChannel+0x368>
    return 32U;
 800802c:	2320      	movs	r3, #32
 800802e:	e003      	b.n	8008038 <HAL_ADC_ConfigChannel+0x370>
  return __builtin_clz(value);
 8008030:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008032:	fab3 f383 	clz	r3, r3
 8008036:	b2db      	uxtb	r3, r3
 8008038:	461a      	mov	r2, r3
 800803a:	683b      	ldr	r3, [r7, #0]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008042:	2b00      	cmp	r3, #0
 8008044:	d105      	bne.n	8008052 <HAL_ADC_ConfigChannel+0x38a>
 8008046:	683b      	ldr	r3, [r7, #0]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	0e9b      	lsrs	r3, r3, #26
 800804c:	f003 031f 	and.w	r3, r3, #31
 8008050:	e011      	b.n	8008076 <HAL_ADC_ConfigChannel+0x3ae>
 8008052:	683b      	ldr	r3, [r7, #0]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008058:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800805a:	fa93 f3a3 	rbit	r3, r3
 800805e:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8008060:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008062:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8008064:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008066:	2b00      	cmp	r3, #0
 8008068:	d101      	bne.n	800806e <HAL_ADC_ConfigChannel+0x3a6>
    return 32U;
 800806a:	2320      	movs	r3, #32
 800806c:	e003      	b.n	8008076 <HAL_ADC_ConfigChannel+0x3ae>
  return __builtin_clz(value);
 800806e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008070:	fab3 f383 	clz	r3, r3
 8008074:	b2db      	uxtb	r3, r3
 8008076:	429a      	cmp	r2, r3
 8008078:	d106      	bne.n	8008088 <HAL_ADC_ConfigChannel+0x3c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	2200      	movs	r2, #0
 8008080:	2103      	movs	r1, #3
 8008082:	4618      	mov	r0, r3
 8008084:	f7ff fae2 	bl	800764c <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	4618      	mov	r0, r3
 800808e:	f7ff fbe9 	bl	8007864 <LL_ADC_IsEnabled>
 8008092:	4603      	mov	r3, r0
 8008094:	2b00      	cmp	r3, #0
 8008096:	f040 81c2 	bne.w	800841e <HAL_ADC_ConfigChannel+0x756>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	6818      	ldr	r0, [r3, #0]
 800809e:	683b      	ldr	r3, [r7, #0]
 80080a0:	6819      	ldr	r1, [r3, #0]
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	68db      	ldr	r3, [r3, #12]
 80080a6:	461a      	mov	r2, r3
 80080a8:	f7ff fb56 	bl	8007758 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80080ac:	683b      	ldr	r3, [r7, #0]
 80080ae:	68db      	ldr	r3, [r3, #12]
 80080b0:	4a8e      	ldr	r2, [pc, #568]	@ (80082ec <HAL_ADC_ConfigChannel+0x624>)
 80080b2:	4293      	cmp	r3, r2
 80080b4:	f040 8130 	bne.w	8008318 <HAL_ADC_ConfigChannel+0x650>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80080bc:	683b      	ldr	r3, [r7, #0]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d10b      	bne.n	80080e0 <HAL_ADC_ConfigChannel+0x418>
 80080c8:	683b      	ldr	r3, [r7, #0]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	0e9b      	lsrs	r3, r3, #26
 80080ce:	3301      	adds	r3, #1
 80080d0:	f003 031f 	and.w	r3, r3, #31
 80080d4:	2b09      	cmp	r3, #9
 80080d6:	bf94      	ite	ls
 80080d8:	2301      	movls	r3, #1
 80080da:	2300      	movhi	r3, #0
 80080dc:	b2db      	uxtb	r3, r3
 80080de:	e019      	b.n	8008114 <HAL_ADC_ConfigChannel+0x44c>
 80080e0:	683b      	ldr	r3, [r7, #0]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80080e6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80080e8:	fa93 f3a3 	rbit	r3, r3
 80080ec:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80080ee:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80080f0:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80080f2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d101      	bne.n	80080fc <HAL_ADC_ConfigChannel+0x434>
    return 32U;
 80080f8:	2320      	movs	r3, #32
 80080fa:	e003      	b.n	8008104 <HAL_ADC_ConfigChannel+0x43c>
  return __builtin_clz(value);
 80080fc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80080fe:	fab3 f383 	clz	r3, r3
 8008102:	b2db      	uxtb	r3, r3
 8008104:	3301      	adds	r3, #1
 8008106:	f003 031f 	and.w	r3, r3, #31
 800810a:	2b09      	cmp	r3, #9
 800810c:	bf94      	ite	ls
 800810e:	2301      	movls	r3, #1
 8008110:	2300      	movhi	r3, #0
 8008112:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008114:	2b00      	cmp	r3, #0
 8008116:	d079      	beq.n	800820c <HAL_ADC_ConfigChannel+0x544>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8008118:	683b      	ldr	r3, [r7, #0]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008120:	2b00      	cmp	r3, #0
 8008122:	d107      	bne.n	8008134 <HAL_ADC_ConfigChannel+0x46c>
 8008124:	683b      	ldr	r3, [r7, #0]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	0e9b      	lsrs	r3, r3, #26
 800812a:	3301      	adds	r3, #1
 800812c:	069b      	lsls	r3, r3, #26
 800812e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8008132:	e015      	b.n	8008160 <HAL_ADC_ConfigChannel+0x498>
 8008134:	683b      	ldr	r3, [r7, #0]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800813a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800813c:	fa93 f3a3 	rbit	r3, r3
 8008140:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8008142:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008144:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8008146:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008148:	2b00      	cmp	r3, #0
 800814a:	d101      	bne.n	8008150 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 800814c:	2320      	movs	r3, #32
 800814e:	e003      	b.n	8008158 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8008150:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008152:	fab3 f383 	clz	r3, r3
 8008156:	b2db      	uxtb	r3, r3
 8008158:	3301      	adds	r3, #1
 800815a:	069b      	lsls	r3, r3, #26
 800815c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8008160:	683b      	ldr	r3, [r7, #0]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008168:	2b00      	cmp	r3, #0
 800816a:	d109      	bne.n	8008180 <HAL_ADC_ConfigChannel+0x4b8>
 800816c:	683b      	ldr	r3, [r7, #0]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	0e9b      	lsrs	r3, r3, #26
 8008172:	3301      	adds	r3, #1
 8008174:	f003 031f 	and.w	r3, r3, #31
 8008178:	2101      	movs	r1, #1
 800817a:	fa01 f303 	lsl.w	r3, r1, r3
 800817e:	e017      	b.n	80081b0 <HAL_ADC_ConfigChannel+0x4e8>
 8008180:	683b      	ldr	r3, [r7, #0]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008186:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008188:	fa93 f3a3 	rbit	r3, r3
 800818c:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 800818e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008190:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8008192:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008194:	2b00      	cmp	r3, #0
 8008196:	d101      	bne.n	800819c <HAL_ADC_ConfigChannel+0x4d4>
    return 32U;
 8008198:	2320      	movs	r3, #32
 800819a:	e003      	b.n	80081a4 <HAL_ADC_ConfigChannel+0x4dc>
  return __builtin_clz(value);
 800819c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800819e:	fab3 f383 	clz	r3, r3
 80081a2:	b2db      	uxtb	r3, r3
 80081a4:	3301      	adds	r3, #1
 80081a6:	f003 031f 	and.w	r3, r3, #31
 80081aa:	2101      	movs	r1, #1
 80081ac:	fa01 f303 	lsl.w	r3, r1, r3
 80081b0:	ea42 0103 	orr.w	r1, r2, r3
 80081b4:	683b      	ldr	r3, [r7, #0]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d10a      	bne.n	80081d6 <HAL_ADC_ConfigChannel+0x50e>
 80081c0:	683b      	ldr	r3, [r7, #0]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	0e9b      	lsrs	r3, r3, #26
 80081c6:	3301      	adds	r3, #1
 80081c8:	f003 021f 	and.w	r2, r3, #31
 80081cc:	4613      	mov	r3, r2
 80081ce:	005b      	lsls	r3, r3, #1
 80081d0:	4413      	add	r3, r2
 80081d2:	051b      	lsls	r3, r3, #20
 80081d4:	e018      	b.n	8008208 <HAL_ADC_ConfigChannel+0x540>
 80081d6:	683b      	ldr	r3, [r7, #0]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80081dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081de:	fa93 f3a3 	rbit	r3, r3
 80081e2:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80081e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80081e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d101      	bne.n	80081f2 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 80081ee:	2320      	movs	r3, #32
 80081f0:	e003      	b.n	80081fa <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 80081f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80081f4:	fab3 f383 	clz	r3, r3
 80081f8:	b2db      	uxtb	r3, r3
 80081fa:	3301      	adds	r3, #1
 80081fc:	f003 021f 	and.w	r2, r3, #31
 8008200:	4613      	mov	r3, r2
 8008202:	005b      	lsls	r3, r3, #1
 8008204:	4413      	add	r3, r2
 8008206:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008208:	430b      	orrs	r3, r1
 800820a:	e080      	b.n	800830e <HAL_ADC_ConfigChannel+0x646>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800820c:	683b      	ldr	r3, [r7, #0]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008214:	2b00      	cmp	r3, #0
 8008216:	d107      	bne.n	8008228 <HAL_ADC_ConfigChannel+0x560>
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	0e9b      	lsrs	r3, r3, #26
 800821e:	3301      	adds	r3, #1
 8008220:	069b      	lsls	r3, r3, #26
 8008222:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8008226:	e015      	b.n	8008254 <HAL_ADC_ConfigChannel+0x58c>
 8008228:	683b      	ldr	r3, [r7, #0]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800822e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008230:	fa93 f3a3 	rbit	r3, r3
 8008234:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8008236:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008238:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 800823a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800823c:	2b00      	cmp	r3, #0
 800823e:	d101      	bne.n	8008244 <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 8008240:	2320      	movs	r3, #32
 8008242:	e003      	b.n	800824c <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 8008244:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008246:	fab3 f383 	clz	r3, r3
 800824a:	b2db      	uxtb	r3, r3
 800824c:	3301      	adds	r3, #1
 800824e:	069b      	lsls	r3, r3, #26
 8008250:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8008254:	683b      	ldr	r3, [r7, #0]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800825c:	2b00      	cmp	r3, #0
 800825e:	d109      	bne.n	8008274 <HAL_ADC_ConfigChannel+0x5ac>
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	0e9b      	lsrs	r3, r3, #26
 8008266:	3301      	adds	r3, #1
 8008268:	f003 031f 	and.w	r3, r3, #31
 800826c:	2101      	movs	r1, #1
 800826e:	fa01 f303 	lsl.w	r3, r1, r3
 8008272:	e017      	b.n	80082a4 <HAL_ADC_ConfigChannel+0x5dc>
 8008274:	683b      	ldr	r3, [r7, #0]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800827a:	6a3b      	ldr	r3, [r7, #32]
 800827c:	fa93 f3a3 	rbit	r3, r3
 8008280:	61fb      	str	r3, [r7, #28]
  return result;
 8008282:	69fb      	ldr	r3, [r7, #28]
 8008284:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8008286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008288:	2b00      	cmp	r3, #0
 800828a:	d101      	bne.n	8008290 <HAL_ADC_ConfigChannel+0x5c8>
    return 32U;
 800828c:	2320      	movs	r3, #32
 800828e:	e003      	b.n	8008298 <HAL_ADC_ConfigChannel+0x5d0>
  return __builtin_clz(value);
 8008290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008292:	fab3 f383 	clz	r3, r3
 8008296:	b2db      	uxtb	r3, r3
 8008298:	3301      	adds	r3, #1
 800829a:	f003 031f 	and.w	r3, r3, #31
 800829e:	2101      	movs	r1, #1
 80082a0:	fa01 f303 	lsl.w	r3, r1, r3
 80082a4:	ea42 0103 	orr.w	r1, r2, r3
 80082a8:	683b      	ldr	r3, [r7, #0]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d10d      	bne.n	80082d0 <HAL_ADC_ConfigChannel+0x608>
 80082b4:	683b      	ldr	r3, [r7, #0]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	0e9b      	lsrs	r3, r3, #26
 80082ba:	3301      	adds	r3, #1
 80082bc:	f003 021f 	and.w	r2, r3, #31
 80082c0:	4613      	mov	r3, r2
 80082c2:	005b      	lsls	r3, r3, #1
 80082c4:	4413      	add	r3, r2
 80082c6:	3b1e      	subs	r3, #30
 80082c8:	051b      	lsls	r3, r3, #20
 80082ca:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80082ce:	e01d      	b.n	800830c <HAL_ADC_ConfigChannel+0x644>
 80082d0:	683b      	ldr	r3, [r7, #0]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80082d6:	697b      	ldr	r3, [r7, #20]
 80082d8:	fa93 f3a3 	rbit	r3, r3
 80082dc:	613b      	str	r3, [r7, #16]
  return result;
 80082de:	693b      	ldr	r3, [r7, #16]
 80082e0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80082e2:	69bb      	ldr	r3, [r7, #24]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d103      	bne.n	80082f0 <HAL_ADC_ConfigChannel+0x628>
    return 32U;
 80082e8:	2320      	movs	r3, #32
 80082ea:	e005      	b.n	80082f8 <HAL_ADC_ConfigChannel+0x630>
 80082ec:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80082f0:	69bb      	ldr	r3, [r7, #24]
 80082f2:	fab3 f383 	clz	r3, r3
 80082f6:	b2db      	uxtb	r3, r3
 80082f8:	3301      	adds	r3, #1
 80082fa:	f003 021f 	and.w	r2, r3, #31
 80082fe:	4613      	mov	r3, r2
 8008300:	005b      	lsls	r3, r3, #1
 8008302:	4413      	add	r3, r2
 8008304:	3b1e      	subs	r3, #30
 8008306:	051b      	lsls	r3, r3, #20
 8008308:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800830c:	430b      	orrs	r3, r1
                                      sConfig->SamplingTime);
 800830e:	683a      	ldr	r2, [r7, #0]
 8008310:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008312:	4619      	mov	r1, r3
 8008314:	f7ff f9f4 	bl	8007700 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	681a      	ldr	r2, [r3, #0]
 800831c:	4b45      	ldr	r3, [pc, #276]	@ (8008434 <HAL_ADC_ConfigChannel+0x76c>)
 800831e:	4013      	ands	r3, r2
 8008320:	2b00      	cmp	r3, #0
 8008322:	d07c      	beq.n	800841e <HAL_ADC_ConfigChannel+0x756>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8008324:	4844      	ldr	r0, [pc, #272]	@ (8008438 <HAL_ADC_ConfigChannel+0x770>)
 8008326:	f7ff f949 	bl	80075bc <LL_ADC_GetCommonPathInternalCh>
 800832a:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800832e:	4843      	ldr	r0, [pc, #268]	@ (800843c <HAL_ADC_ConfigChannel+0x774>)
 8008330:	f7ff fa98 	bl	8007864 <LL_ADC_IsEnabled>
 8008334:	4603      	mov	r3, r0
 8008336:	2b00      	cmp	r3, #0
 8008338:	d15e      	bne.n	80083f8 <HAL_ADC_ConfigChannel+0x730>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800833a:	683b      	ldr	r3, [r7, #0]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	4a40      	ldr	r2, [pc, #256]	@ (8008440 <HAL_ADC_ConfigChannel+0x778>)
 8008340:	4293      	cmp	r3, r2
 8008342:	d127      	bne.n	8008394 <HAL_ADC_ConfigChannel+0x6cc>
 8008344:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8008348:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800834c:	2b00      	cmp	r3, #0
 800834e:	d121      	bne.n	8008394 <HAL_ADC_ConfigChannel+0x6cc>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	4a39      	ldr	r2, [pc, #228]	@ (800843c <HAL_ADC_ConfigChannel+0x774>)
 8008356:	4293      	cmp	r3, r2
 8008358:	d161      	bne.n	800841e <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800835a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800835e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008362:	4619      	mov	r1, r3
 8008364:	4834      	ldr	r0, [pc, #208]	@ (8008438 <HAL_ADC_ConfigChannel+0x770>)
 8008366:	f7ff f916 	bl	8007596 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800836a:	4b36      	ldr	r3, [pc, #216]	@ (8008444 <HAL_ADC_ConfigChannel+0x77c>)
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	099b      	lsrs	r3, r3, #6
 8008370:	4a35      	ldr	r2, [pc, #212]	@ (8008448 <HAL_ADC_ConfigChannel+0x780>)
 8008372:	fba2 2303 	umull	r2, r3, r2, r3
 8008376:	099b      	lsrs	r3, r3, #6
 8008378:	1c5a      	adds	r2, r3, #1
 800837a:	4613      	mov	r3, r2
 800837c:	005b      	lsls	r3, r3, #1
 800837e:	4413      	add	r3, r2
 8008380:	009b      	lsls	r3, r3, #2
 8008382:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8008384:	e002      	b.n	800838c <HAL_ADC_ConfigChannel+0x6c4>
              {
                wait_loop_index--;
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	3b01      	subs	r3, #1
 800838a:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d1f9      	bne.n	8008386 <HAL_ADC_ConfigChannel+0x6be>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8008392:	e044      	b.n	800841e <HAL_ADC_ConfigChannel+0x756>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8008394:	683b      	ldr	r3, [r7, #0]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	4a2c      	ldr	r2, [pc, #176]	@ (800844c <HAL_ADC_ConfigChannel+0x784>)
 800839a:	4293      	cmp	r3, r2
 800839c:	d113      	bne.n	80083c6 <HAL_ADC_ConfigChannel+0x6fe>
 800839e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80083a2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d10d      	bne.n	80083c6 <HAL_ADC_ConfigChannel+0x6fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	4a23      	ldr	r2, [pc, #140]	@ (800843c <HAL_ADC_ConfigChannel+0x774>)
 80083b0:	4293      	cmp	r3, r2
 80083b2:	d134      	bne.n	800841e <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80083b4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80083b8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80083bc:	4619      	mov	r1, r3
 80083be:	481e      	ldr	r0, [pc, #120]	@ (8008438 <HAL_ADC_ConfigChannel+0x770>)
 80083c0:	f7ff f8e9 	bl	8007596 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80083c4:	e02b      	b.n	800841e <HAL_ADC_ConfigChannel+0x756>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80083c6:	683b      	ldr	r3, [r7, #0]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	4a21      	ldr	r2, [pc, #132]	@ (8008450 <HAL_ADC_ConfigChannel+0x788>)
 80083cc:	4293      	cmp	r3, r2
 80083ce:	d126      	bne.n	800841e <HAL_ADC_ConfigChannel+0x756>
 80083d0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80083d4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d120      	bne.n	800841e <HAL_ADC_ConfigChannel+0x756>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	4a16      	ldr	r2, [pc, #88]	@ (800843c <HAL_ADC_ConfigChannel+0x774>)
 80083e2:	4293      	cmp	r3, r2
 80083e4:	d11b      	bne.n	800841e <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80083e6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80083ea:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80083ee:	4619      	mov	r1, r3
 80083f0:	4811      	ldr	r0, [pc, #68]	@ (8008438 <HAL_ADC_ConfigChannel+0x770>)
 80083f2:	f7ff f8d0 	bl	8007596 <LL_ADC_SetCommonPathInternalCh>
 80083f6:	e012      	b.n	800841e <HAL_ADC_ConfigChannel+0x756>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80083fc:	f043 0220 	orr.w	r2, r3, #32
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8008404:	2301      	movs	r3, #1
 8008406:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800840a:	e008      	b.n	800841e <HAL_ADC_ConfigChannel+0x756>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008410:	f043 0220 	orr.w	r2, r3, #32
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8008418:	2301      	movs	r3, #1
 800841a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	2200      	movs	r2, #0
 8008422:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return function status */
  return tmp_hal_status;
 8008426:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800842a:	4618      	mov	r0, r3
 800842c:	37d8      	adds	r7, #216	@ 0xd8
 800842e:	46bd      	mov	sp, r7
 8008430:	bd80      	pop	{r7, pc}
 8008432:	bf00      	nop
 8008434:	80080000 	.word	0x80080000
 8008438:	50040300 	.word	0x50040300
 800843c:	50040000 	.word	0x50040000
 8008440:	c7520000 	.word	0xc7520000
 8008444:	2000002c 	.word	0x2000002c
 8008448:	053e2d63 	.word	0x053e2d63
 800844c:	cb840000 	.word	0xcb840000
 8008450:	80000001 	.word	0x80000001

08008454 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8008454:	b580      	push	{r7, lr}
 8008456:	b084      	sub	sp, #16
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800845c:	2300      	movs	r3, #0
 800845e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	4618      	mov	r0, r3
 8008466:	f7ff f9fd 	bl	8007864 <LL_ADC_IsEnabled>
 800846a:	4603      	mov	r3, r0
 800846c:	2b00      	cmp	r3, #0
 800846e:	d15e      	bne.n	800852e <ADC_Enable+0xda>
  {
    /* Check if conditions to enable the ADC are fulfilled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
#else
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	689a      	ldr	r2, [r3, #8]
 8008476:	4b30      	ldr	r3, [pc, #192]	@ (8008538 <ADC_Enable+0xe4>)
 8008478:	4013      	ands	r3, r2
 800847a:	2b00      	cmp	r3, #0
 800847c:	d00d      	beq.n	800849a <ADC_Enable+0x46>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008482:	f043 0210 	orr.w	r2, r3, #16
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800848e:	f043 0201 	orr.w	r2, r3, #1
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8008496:	2301      	movs	r3, #1
 8008498:	e04a      	b.n	8008530 <ADC_Enable+0xdc>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	4618      	mov	r0, r3
 80084a0:	f7ff f9cc 	bl	800783c <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80084a4:	4825      	ldr	r0, [pc, #148]	@ (800853c <ADC_Enable+0xe8>)
 80084a6:	f7ff f889 	bl	80075bc <LL_ADC_GetCommonPathInternalCh>
 80084aa:	4603      	mov	r3, r0
 80084ac:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d00f      	beq.n	80084d4 <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80084b4:	4b22      	ldr	r3, [pc, #136]	@ (8008540 <ADC_Enable+0xec>)
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	099b      	lsrs	r3, r3, #6
 80084ba:	4a22      	ldr	r2, [pc, #136]	@ (8008544 <ADC_Enable+0xf0>)
 80084bc:	fba2 2303 	umull	r2, r3, r2, r3
 80084c0:	099b      	lsrs	r3, r3, #6
 80084c2:	3301      	adds	r3, #1
 80084c4:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80084c6:	e002      	b.n	80084ce <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 80084c8:	68bb      	ldr	r3, [r7, #8]
 80084ca:	3b01      	subs	r3, #1
 80084cc:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80084ce:	68bb      	ldr	r3, [r7, #8]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d1f9      	bne.n	80084c8 <ADC_Enable+0x74>
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
#endif /*ADC_SUPPORT_2_5_MSPS */
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 80084d4:	f7ff f828 	bl	8007528 <HAL_GetTick>
 80084d8:	60f8      	str	r0, [r7, #12]
      
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80084da:	e021      	b.n	8008520 <ADC_Enable+0xcc>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if(LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	4618      	mov	r0, r3
 80084e2:	f7ff f9bf 	bl	8007864 <LL_ADC_IsEnabled>
 80084e6:	4603      	mov	r3, r0
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d104      	bne.n	80084f6 <ADC_Enable+0xa2>
        {
          LL_ADC_Enable(hadc->Instance);
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	4618      	mov	r0, r3
 80084f2:	f7ff f9a3 	bl	800783c <LL_ADC_Enable>
        }
        
        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80084f6:	f7ff f817 	bl	8007528 <HAL_GetTick>
 80084fa:	4602      	mov	r2, r0
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	1ad3      	subs	r3, r2, r3
 8008500:	2b02      	cmp	r3, #2
 8008502:	d90d      	bls.n	8008520 <ADC_Enable+0xcc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008508:	f043 0210 	orr.w	r2, r3, #16
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	655a      	str	r2, [r3, #84]	@ 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008514:	f043 0201 	orr.w	r2, r3, #1
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	659a      	str	r2, [r3, #88]	@ 0x58
          
          return HAL_ERROR;
 800851c:	2301      	movs	r3, #1
 800851e:	e007      	b.n	8008530 <ADC_Enable+0xdc>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	f003 0301 	and.w	r3, r3, #1
 800852a:	2b01      	cmp	r3, #1
 800852c:	d1d6      	bne.n	80084dc <ADC_Enable+0x88>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800852e:	2300      	movs	r3, #0
}
 8008530:	4618      	mov	r0, r3
 8008532:	3710      	adds	r7, #16
 8008534:	46bd      	mov	sp, r7
 8008536:	bd80      	pop	{r7, pc}
 8008538:	8000003f 	.word	0x8000003f
 800853c:	50040300 	.word	0x50040300
 8008540:	2000002c 	.word	0x2000002c
 8008544:	053e2d63 	.word	0x053e2d63

08008548 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8008548:	b580      	push	{r7, lr}
 800854a:	b084      	sub	sp, #16
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008554:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800855a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800855e:	2b00      	cmp	r3, #0
 8008560:	d14b      	bne.n	80085fa <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008566:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	655a      	str	r2, [r3, #84]	@ 0x54
        }
      }
    }
    
#else
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	f003 0308 	and.w	r3, r3, #8
 8008578:	2b00      	cmp	r3, #0
 800857a:	d021      	beq.n	80085c0 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	4618      	mov	r0, r3
 8008582:	f7ff f87e 	bl	8007682 <LL_ADC_REG_IsTriggerSourceSWStart>
 8008586:	4603      	mov	r3, r0
 8008588:	2b00      	cmp	r3, #0
 800858a:	d032      	beq.n	80085f2 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	68db      	ldr	r3, [r3, #12]
 8008592:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008596:	2b00      	cmp	r3, #0
 8008598:	d12b      	bne.n	80085f2 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800859e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80085aa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d11f      	bne.n	80085f2 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80085b6:	f043 0201 	orr.w	r2, r3, #1
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	655a      	str	r2, [r3, #84]	@ 0x54
 80085be:	e018      	b.n	80085f2 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	68db      	ldr	r3, [r3, #12]
 80085c6:	f003 0302 	and.w	r3, r3, #2
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d111      	bne.n	80085f2 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80085d2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80085de:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d105      	bne.n	80085f2 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80085ea:	f043 0201 	orr.w	r2, r3, #1
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80085f2:	68f8      	ldr	r0, [r7, #12]
 80085f4:	f7f8 fdc8 	bl	8001188 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80085f8:	e00e      	b.n	8008618 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80085fe:	f003 0310 	and.w	r3, r3, #16
 8008602:	2b00      	cmp	r3, #0
 8008604:	d003      	beq.n	800860e <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8008606:	68f8      	ldr	r0, [r7, #12]
 8008608:	f7ff fb54 	bl	8007cb4 <HAL_ADC_ErrorCallback>
}
 800860c:	e004      	b.n	8008618 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008612:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008614:	6878      	ldr	r0, [r7, #4]
 8008616:	4798      	blx	r3
}
 8008618:	bf00      	nop
 800861a:	3710      	adds	r7, #16
 800861c:	46bd      	mov	sp, r7
 800861e:	bd80      	pop	{r7, pc}

08008620 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8008620:	b580      	push	{r7, lr}
 8008622:	b084      	sub	sp, #16
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800862c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800862e:	68f8      	ldr	r0, [r7, #12]
 8008630:	f7ff fb36 	bl	8007ca0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8008634:	bf00      	nop
 8008636:	3710      	adds	r7, #16
 8008638:	46bd      	mov	sp, r7
 800863a:	bd80      	pop	{r7, pc}

0800863c <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800863c:	b580      	push	{r7, lr}
 800863e:	b084      	sub	sp, #16
 8008640:	af00      	add	r7, sp, #0
 8008642:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008648:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800864e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800865a:	f043 0204 	orr.w	r2, r3, #4
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8008662:	68f8      	ldr	r0, [r7, #12]
 8008664:	f7ff fb26 	bl	8007cb4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8008668:	bf00      	nop
 800866a:	3710      	adds	r7, #16
 800866c:	46bd      	mov	sp, r7
 800866e:	bd80      	pop	{r7, pc}

08008670 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008670:	b480      	push	{r7}
 8008672:	b085      	sub	sp, #20
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	f003 0307 	and.w	r3, r3, #7
 800867e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008680:	4b0c      	ldr	r3, [pc, #48]	@ (80086b4 <__NVIC_SetPriorityGrouping+0x44>)
 8008682:	68db      	ldr	r3, [r3, #12]
 8008684:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008686:	68ba      	ldr	r2, [r7, #8]
 8008688:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800868c:	4013      	ands	r3, r2
 800868e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008694:	68bb      	ldr	r3, [r7, #8]
 8008696:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008698:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800869c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80086a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80086a2:	4a04      	ldr	r2, [pc, #16]	@ (80086b4 <__NVIC_SetPriorityGrouping+0x44>)
 80086a4:	68bb      	ldr	r3, [r7, #8]
 80086a6:	60d3      	str	r3, [r2, #12]
}
 80086a8:	bf00      	nop
 80086aa:	3714      	adds	r7, #20
 80086ac:	46bd      	mov	sp, r7
 80086ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b2:	4770      	bx	lr
 80086b4:	e000ed00 	.word	0xe000ed00

080086b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80086b8:	b480      	push	{r7}
 80086ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80086bc:	4b04      	ldr	r3, [pc, #16]	@ (80086d0 <__NVIC_GetPriorityGrouping+0x18>)
 80086be:	68db      	ldr	r3, [r3, #12]
 80086c0:	0a1b      	lsrs	r3, r3, #8
 80086c2:	f003 0307 	and.w	r3, r3, #7
}
 80086c6:	4618      	mov	r0, r3
 80086c8:	46bd      	mov	sp, r7
 80086ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ce:	4770      	bx	lr
 80086d0:	e000ed00 	.word	0xe000ed00

080086d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80086d4:	b480      	push	{r7}
 80086d6:	b083      	sub	sp, #12
 80086d8:	af00      	add	r7, sp, #0
 80086da:	4603      	mov	r3, r0
 80086dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80086de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	db0b      	blt.n	80086fe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80086e6:	79fb      	ldrb	r3, [r7, #7]
 80086e8:	f003 021f 	and.w	r2, r3, #31
 80086ec:	4907      	ldr	r1, [pc, #28]	@ (800870c <__NVIC_EnableIRQ+0x38>)
 80086ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80086f2:	095b      	lsrs	r3, r3, #5
 80086f4:	2001      	movs	r0, #1
 80086f6:	fa00 f202 	lsl.w	r2, r0, r2
 80086fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80086fe:	bf00      	nop
 8008700:	370c      	adds	r7, #12
 8008702:	46bd      	mov	sp, r7
 8008704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008708:	4770      	bx	lr
 800870a:	bf00      	nop
 800870c:	e000e100 	.word	0xe000e100

08008710 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8008710:	b480      	push	{r7}
 8008712:	b083      	sub	sp, #12
 8008714:	af00      	add	r7, sp, #0
 8008716:	4603      	mov	r3, r0
 8008718:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800871a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800871e:	2b00      	cmp	r3, #0
 8008720:	db12      	blt.n	8008748 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008722:	79fb      	ldrb	r3, [r7, #7]
 8008724:	f003 021f 	and.w	r2, r3, #31
 8008728:	490a      	ldr	r1, [pc, #40]	@ (8008754 <__NVIC_DisableIRQ+0x44>)
 800872a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800872e:	095b      	lsrs	r3, r3, #5
 8008730:	2001      	movs	r0, #1
 8008732:	fa00 f202 	lsl.w	r2, r0, r2
 8008736:	3320      	adds	r3, #32
 8008738:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800873c:	f3bf 8f4f 	dsb	sy
}
 8008740:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8008742:	f3bf 8f6f 	isb	sy
}
 8008746:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8008748:	bf00      	nop
 800874a:	370c      	adds	r7, #12
 800874c:	46bd      	mov	sp, r7
 800874e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008752:	4770      	bx	lr
 8008754:	e000e100 	.word	0xe000e100

08008758 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8008758:	b480      	push	{r7}
 800875a:	b083      	sub	sp, #12
 800875c:	af00      	add	r7, sp, #0
 800875e:	4603      	mov	r3, r0
 8008760:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008762:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008766:	2b00      	cmp	r3, #0
 8008768:	db0c      	blt.n	8008784 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800876a:	79fb      	ldrb	r3, [r7, #7]
 800876c:	f003 021f 	and.w	r2, r3, #31
 8008770:	4907      	ldr	r1, [pc, #28]	@ (8008790 <__NVIC_SetPendingIRQ+0x38>)
 8008772:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008776:	095b      	lsrs	r3, r3, #5
 8008778:	2001      	movs	r0, #1
 800877a:	fa00 f202 	lsl.w	r2, r0, r2
 800877e:	3340      	adds	r3, #64	@ 0x40
 8008780:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8008784:	bf00      	nop
 8008786:	370c      	adds	r7, #12
 8008788:	46bd      	mov	sp, r7
 800878a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878e:	4770      	bx	lr
 8008790:	e000e100 	.word	0xe000e100

08008794 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8008794:	b480      	push	{r7}
 8008796:	b083      	sub	sp, #12
 8008798:	af00      	add	r7, sp, #0
 800879a:	4603      	mov	r3, r0
 800879c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800879e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	db0c      	blt.n	80087c0 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80087a6:	79fb      	ldrb	r3, [r7, #7]
 80087a8:	f003 021f 	and.w	r2, r3, #31
 80087ac:	4907      	ldr	r1, [pc, #28]	@ (80087cc <__NVIC_ClearPendingIRQ+0x38>)
 80087ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80087b2:	095b      	lsrs	r3, r3, #5
 80087b4:	2001      	movs	r0, #1
 80087b6:	fa00 f202 	lsl.w	r2, r0, r2
 80087ba:	3360      	adds	r3, #96	@ 0x60
 80087bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80087c0:	bf00      	nop
 80087c2:	370c      	adds	r7, #12
 80087c4:	46bd      	mov	sp, r7
 80087c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ca:	4770      	bx	lr
 80087cc:	e000e100 	.word	0xe000e100

080087d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80087d0:	b480      	push	{r7}
 80087d2:	b083      	sub	sp, #12
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	4603      	mov	r3, r0
 80087d8:	6039      	str	r1, [r7, #0]
 80087da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80087dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	db0a      	blt.n	80087fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80087e4:	683b      	ldr	r3, [r7, #0]
 80087e6:	b2da      	uxtb	r2, r3
 80087e8:	490c      	ldr	r1, [pc, #48]	@ (800881c <__NVIC_SetPriority+0x4c>)
 80087ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80087ee:	0112      	lsls	r2, r2, #4
 80087f0:	b2d2      	uxtb	r2, r2
 80087f2:	440b      	add	r3, r1
 80087f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80087f8:	e00a      	b.n	8008810 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80087fa:	683b      	ldr	r3, [r7, #0]
 80087fc:	b2da      	uxtb	r2, r3
 80087fe:	4908      	ldr	r1, [pc, #32]	@ (8008820 <__NVIC_SetPriority+0x50>)
 8008800:	79fb      	ldrb	r3, [r7, #7]
 8008802:	f003 030f 	and.w	r3, r3, #15
 8008806:	3b04      	subs	r3, #4
 8008808:	0112      	lsls	r2, r2, #4
 800880a:	b2d2      	uxtb	r2, r2
 800880c:	440b      	add	r3, r1
 800880e:	761a      	strb	r2, [r3, #24]
}
 8008810:	bf00      	nop
 8008812:	370c      	adds	r7, #12
 8008814:	46bd      	mov	sp, r7
 8008816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881a:	4770      	bx	lr
 800881c:	e000e100 	.word	0xe000e100
 8008820:	e000ed00 	.word	0xe000ed00

08008824 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008824:	b480      	push	{r7}
 8008826:	b089      	sub	sp, #36	@ 0x24
 8008828:	af00      	add	r7, sp, #0
 800882a:	60f8      	str	r0, [r7, #12]
 800882c:	60b9      	str	r1, [r7, #8]
 800882e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	f003 0307 	and.w	r3, r3, #7
 8008836:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008838:	69fb      	ldr	r3, [r7, #28]
 800883a:	f1c3 0307 	rsb	r3, r3, #7
 800883e:	2b04      	cmp	r3, #4
 8008840:	bf28      	it	cs
 8008842:	2304      	movcs	r3, #4
 8008844:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008846:	69fb      	ldr	r3, [r7, #28]
 8008848:	3304      	adds	r3, #4
 800884a:	2b06      	cmp	r3, #6
 800884c:	d902      	bls.n	8008854 <NVIC_EncodePriority+0x30>
 800884e:	69fb      	ldr	r3, [r7, #28]
 8008850:	3b03      	subs	r3, #3
 8008852:	e000      	b.n	8008856 <NVIC_EncodePriority+0x32>
 8008854:	2300      	movs	r3, #0
 8008856:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008858:	f04f 32ff 	mov.w	r2, #4294967295
 800885c:	69bb      	ldr	r3, [r7, #24]
 800885e:	fa02 f303 	lsl.w	r3, r2, r3
 8008862:	43da      	mvns	r2, r3
 8008864:	68bb      	ldr	r3, [r7, #8]
 8008866:	401a      	ands	r2, r3
 8008868:	697b      	ldr	r3, [r7, #20]
 800886a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800886c:	f04f 31ff 	mov.w	r1, #4294967295
 8008870:	697b      	ldr	r3, [r7, #20]
 8008872:	fa01 f303 	lsl.w	r3, r1, r3
 8008876:	43d9      	mvns	r1, r3
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800887c:	4313      	orrs	r3, r2
         );
}
 800887e:	4618      	mov	r0, r3
 8008880:	3724      	adds	r7, #36	@ 0x24
 8008882:	46bd      	mov	sp, r7
 8008884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008888:	4770      	bx	lr
	...

0800888c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800888c:	b580      	push	{r7, lr}
 800888e:	b082      	sub	sp, #8
 8008890:	af00      	add	r7, sp, #0
 8008892:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	3b01      	subs	r3, #1
 8008898:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800889c:	d301      	bcc.n	80088a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800889e:	2301      	movs	r3, #1
 80088a0:	e00f      	b.n	80088c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80088a2:	4a0a      	ldr	r2, [pc, #40]	@ (80088cc <SysTick_Config+0x40>)
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	3b01      	subs	r3, #1
 80088a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80088aa:	210f      	movs	r1, #15
 80088ac:	f04f 30ff 	mov.w	r0, #4294967295
 80088b0:	f7ff ff8e 	bl	80087d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80088b4:	4b05      	ldr	r3, [pc, #20]	@ (80088cc <SysTick_Config+0x40>)
 80088b6:	2200      	movs	r2, #0
 80088b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80088ba:	4b04      	ldr	r3, [pc, #16]	@ (80088cc <SysTick_Config+0x40>)
 80088bc:	2207      	movs	r2, #7
 80088be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80088c0:	2300      	movs	r3, #0
}
 80088c2:	4618      	mov	r0, r3
 80088c4:	3708      	adds	r7, #8
 80088c6:	46bd      	mov	sp, r7
 80088c8:	bd80      	pop	{r7, pc}
 80088ca:	bf00      	nop
 80088cc:	e000e010 	.word	0xe000e010

080088d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80088d0:	b580      	push	{r7, lr}
 80088d2:	b082      	sub	sp, #8
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80088d8:	6878      	ldr	r0, [r7, #4]
 80088da:	f7ff fec9 	bl	8008670 <__NVIC_SetPriorityGrouping>
}
 80088de:	bf00      	nop
 80088e0:	3708      	adds	r7, #8
 80088e2:	46bd      	mov	sp, r7
 80088e4:	bd80      	pop	{r7, pc}

080088e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80088e6:	b580      	push	{r7, lr}
 80088e8:	b086      	sub	sp, #24
 80088ea:	af00      	add	r7, sp, #0
 80088ec:	4603      	mov	r3, r0
 80088ee:	60b9      	str	r1, [r7, #8]
 80088f0:	607a      	str	r2, [r7, #4]
 80088f2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80088f4:	f7ff fee0 	bl	80086b8 <__NVIC_GetPriorityGrouping>
 80088f8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80088fa:	687a      	ldr	r2, [r7, #4]
 80088fc:	68b9      	ldr	r1, [r7, #8]
 80088fe:	6978      	ldr	r0, [r7, #20]
 8008900:	f7ff ff90 	bl	8008824 <NVIC_EncodePriority>
 8008904:	4602      	mov	r2, r0
 8008906:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800890a:	4611      	mov	r1, r2
 800890c:	4618      	mov	r0, r3
 800890e:	f7ff ff5f 	bl	80087d0 <__NVIC_SetPriority>
}
 8008912:	bf00      	nop
 8008914:	3718      	adds	r7, #24
 8008916:	46bd      	mov	sp, r7
 8008918:	bd80      	pop	{r7, pc}

0800891a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800891a:	b580      	push	{r7, lr}
 800891c:	b082      	sub	sp, #8
 800891e:	af00      	add	r7, sp, #0
 8008920:	4603      	mov	r3, r0
 8008922:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008924:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008928:	4618      	mov	r0, r3
 800892a:	f7ff fed3 	bl	80086d4 <__NVIC_EnableIRQ>
}
 800892e:	bf00      	nop
 8008930:	3708      	adds	r7, #8
 8008932:	46bd      	mov	sp, r7
 8008934:	bd80      	pop	{r7, pc}

08008936 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8008936:	b580      	push	{r7, lr}
 8008938:	b082      	sub	sp, #8
 800893a:	af00      	add	r7, sp, #0
 800893c:	4603      	mov	r3, r0
 800893e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8008940:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008944:	4618      	mov	r0, r3
 8008946:	f7ff fee3 	bl	8008710 <__NVIC_DisableIRQ>
}
 800894a:	bf00      	nop
 800894c:	3708      	adds	r7, #8
 800894e:	46bd      	mov	sp, r7
 8008950:	bd80      	pop	{r7, pc}

08008952 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008952:	b580      	push	{r7, lr}
 8008954:	b082      	sub	sp, #8
 8008956:	af00      	add	r7, sp, #0
 8008958:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800895a:	6878      	ldr	r0, [r7, #4]
 800895c:	f7ff ff96 	bl	800888c <SysTick_Config>
 8008960:	4603      	mov	r3, r0
}
 8008962:	4618      	mov	r0, r3
 8008964:	3708      	adds	r7, #8
 8008966:	46bd      	mov	sp, r7
 8008968:	bd80      	pop	{r7, pc}

0800896a <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 800896a:	b580      	push	{r7, lr}
 800896c:	b082      	sub	sp, #8
 800896e:	af00      	add	r7, sp, #0
 8008970:	4603      	mov	r3, r0
 8008972:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8008974:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008978:	4618      	mov	r0, r3
 800897a:	f7ff feed 	bl	8008758 <__NVIC_SetPendingIRQ>
}
 800897e:	bf00      	nop
 8008980:	3708      	adds	r7, #8
 8008982:	46bd      	mov	sp, r7
 8008984:	bd80      	pop	{r7, pc}

08008986 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8008986:	b580      	push	{r7, lr}
 8008988:	b082      	sub	sp, #8
 800898a:	af00      	add	r7, sp, #0
 800898c:	4603      	mov	r3, r0
 800898e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8008990:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008994:	4618      	mov	r0, r3
 8008996:	f7ff fefd 	bl	8008794 <__NVIC_ClearPendingIRQ>
}
 800899a:	bf00      	nop
 800899c:	3708      	adds	r7, #8
 800899e:	46bd      	mov	sp, r7
 80089a0:	bd80      	pop	{r7, pc}
	...

080089a4 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80089a4:	b580      	push	{r7, lr}
 80089a6:	b084      	sub	sp, #16
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d101      	bne.n	80089b6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80089b2:	2301      	movs	r3, #1
 80089b4:	e08e      	b.n	8008ad4 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	461a      	mov	r2, r3
 80089bc:	4b47      	ldr	r3, [pc, #284]	@ (8008adc <HAL_DMA_Init+0x138>)
 80089be:	429a      	cmp	r2, r3
 80089c0:	d80f      	bhi.n	80089e2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	461a      	mov	r2, r3
 80089c8:	4b45      	ldr	r3, [pc, #276]	@ (8008ae0 <HAL_DMA_Init+0x13c>)
 80089ca:	4413      	add	r3, r2
 80089cc:	4a45      	ldr	r2, [pc, #276]	@ (8008ae4 <HAL_DMA_Init+0x140>)
 80089ce:	fba2 2303 	umull	r2, r3, r2, r3
 80089d2:	091b      	lsrs	r3, r3, #4
 80089d4:	009a      	lsls	r2, r3, #2
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	4a42      	ldr	r2, [pc, #264]	@ (8008ae8 <HAL_DMA_Init+0x144>)
 80089de:	641a      	str	r2, [r3, #64]	@ 0x40
 80089e0:	e00e      	b.n	8008a00 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	461a      	mov	r2, r3
 80089e8:	4b40      	ldr	r3, [pc, #256]	@ (8008aec <HAL_DMA_Init+0x148>)
 80089ea:	4413      	add	r3, r2
 80089ec:	4a3d      	ldr	r2, [pc, #244]	@ (8008ae4 <HAL_DMA_Init+0x140>)
 80089ee:	fba2 2303 	umull	r2, r3, r2, r3
 80089f2:	091b      	lsrs	r3, r3, #4
 80089f4:	009a      	lsls	r2, r3, #2
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	4a3c      	ldr	r2, [pc, #240]	@ (8008af0 <HAL_DMA_Init+0x14c>)
 80089fe:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	2202      	movs	r2, #2
 8008a04:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8008a16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a1a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8008a24:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	691b      	ldr	r3, [r3, #16]
 8008a2a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008a30:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	699b      	ldr	r3, [r3, #24]
 8008a36:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008a3c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	6a1b      	ldr	r3, [r3, #32]
 8008a42:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8008a44:	68fa      	ldr	r2, [r7, #12]
 8008a46:	4313      	orrs	r3, r2
 8008a48:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	68fa      	ldr	r2, [r7, #12]
 8008a50:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8008a52:	6878      	ldr	r0, [r7, #4]
 8008a54:	f000 fa80 	bl	8008f58 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	689b      	ldr	r3, [r3, #8]
 8008a5c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008a60:	d102      	bne.n	8008a68 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	2200      	movs	r2, #0
 8008a66:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	685a      	ldr	r2, [r3, #4]
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008a70:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8008a74:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008a7a:	687a      	ldr	r2, [r7, #4]
 8008a7c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8008a7e:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	685b      	ldr	r3, [r3, #4]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d010      	beq.n	8008aaa <HAL_DMA_Init+0x106>
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	685b      	ldr	r3, [r3, #4]
 8008a8c:	2b04      	cmp	r3, #4
 8008a8e:	d80c      	bhi.n	8008aaa <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8008a90:	6878      	ldr	r0, [r7, #4]
 8008a92:	f000 fa9f 	bl	8008fd4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008aa2:	687a      	ldr	r2, [r7, #4]
 8008aa4:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8008aa6:	605a      	str	r2, [r3, #4]
 8008aa8:	e008      	b.n	8008abc <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	2200      	movs	r2, #0
 8008aae:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	2200      	movs	r2, #0
 8008aba:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	2200      	movs	r2, #0
 8008ac0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	2201      	movs	r2, #1
 8008ac6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	2200      	movs	r2, #0
 8008ace:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8008ad2:	2300      	movs	r3, #0
}
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	3710      	adds	r7, #16
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	bd80      	pop	{r7, pc}
 8008adc:	40020407 	.word	0x40020407
 8008ae0:	bffdfff8 	.word	0xbffdfff8
 8008ae4:	cccccccd 	.word	0xcccccccd
 8008ae8:	40020000 	.word	0x40020000
 8008aec:	bffdfbf8 	.word	0xbffdfbf8
 8008af0:	40020400 	.word	0x40020400

08008af4 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8008af4:	b580      	push	{r7, lr}
 8008af6:	b086      	sub	sp, #24
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	60f8      	str	r0, [r7, #12]
 8008afc:	60b9      	str	r1, [r7, #8]
 8008afe:	607a      	str	r2, [r7, #4]
 8008b00:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008b02:	2300      	movs	r3, #0
 8008b04:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8008b0c:	2b01      	cmp	r3, #1
 8008b0e:	d101      	bne.n	8008b14 <HAL_DMA_Start_IT+0x20>
 8008b10:	2302      	movs	r3, #2
 8008b12:	e066      	b.n	8008be2 <HAL_DMA_Start_IT+0xee>
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	2201      	movs	r2, #1
 8008b18:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8008b22:	b2db      	uxtb	r3, r3
 8008b24:	2b01      	cmp	r3, #1
 8008b26:	d155      	bne.n	8008bd4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	2202      	movs	r2, #2
 8008b2c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	2200      	movs	r2, #0
 8008b34:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	681a      	ldr	r2, [r3, #0]
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	f022 0201 	bic.w	r2, r2, #1
 8008b44:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8008b46:	683b      	ldr	r3, [r7, #0]
 8008b48:	687a      	ldr	r2, [r7, #4]
 8008b4a:	68b9      	ldr	r1, [r7, #8]
 8008b4c:	68f8      	ldr	r0, [r7, #12]
 8008b4e:	f000 f9c5 	bl	8008edc <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d008      	beq.n	8008b6c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	681a      	ldr	r2, [r3, #0]
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	f042 020e 	orr.w	r2, r2, #14
 8008b68:	601a      	str	r2, [r3, #0]
 8008b6a:	e00f      	b.n	8008b8c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	681a      	ldr	r2, [r3, #0]
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	f022 0204 	bic.w	r2, r2, #4
 8008b7a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	681a      	ldr	r2, [r3, #0]
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	f042 020a 	orr.w	r2, r2, #10
 8008b8a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d007      	beq.n	8008baa <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008b9e:	681a      	ldr	r2, [r3, #0]
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008ba4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008ba8:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d007      	beq.n	8008bc2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008bb6:	681a      	ldr	r2, [r3, #0]
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008bbc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008bc0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	681a      	ldr	r2, [r3, #0]
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	f042 0201 	orr.w	r2, r2, #1
 8008bd0:	601a      	str	r2, [r3, #0]
 8008bd2:	e005      	b.n	8008be0 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8008bdc:	2302      	movs	r3, #2
 8008bde:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8008be0:	7dfb      	ldrb	r3, [r7, #23]
}
 8008be2:	4618      	mov	r0, r3
 8008be4:	3718      	adds	r7, #24
 8008be6:	46bd      	mov	sp, r7
 8008be8:	bd80      	pop	{r7, pc}

08008bea <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8008bea:	b480      	push	{r7}
 8008bec:	b083      	sub	sp, #12
 8008bee:	af00      	add	r7, sp, #0
 8008bf0:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d101      	bne.n	8008bfc <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8008bf8:	2301      	movs	r3, #1
 8008bfa:	e04f      	b.n	8008c9c <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8008c02:	b2db      	uxtb	r3, r3
 8008c04:	2b02      	cmp	r3, #2
 8008c06:	d008      	beq.n	8008c1a <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	2204      	movs	r2, #4
 8008c0c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	2200      	movs	r2, #0
 8008c12:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8008c16:	2301      	movs	r3, #1
 8008c18:	e040      	b.n	8008c9c <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	681a      	ldr	r2, [r3, #0]
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	f022 020e 	bic.w	r2, r2, #14
 8008c28:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008c2e:	681a      	ldr	r2, [r3, #0]
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008c34:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008c38:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	681a      	ldr	r2, [r3, #0]
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	f022 0201 	bic.w	r2, r2, #1
 8008c48:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c4e:	f003 021c 	and.w	r2, r3, #28
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c56:	2101      	movs	r1, #1
 8008c58:	fa01 f202 	lsl.w	r2, r1, r2
 8008c5c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008c62:	687a      	ldr	r2, [r7, #4]
 8008c64:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8008c66:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d00c      	beq.n	8008c8a <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c74:	681a      	ldr	r2, [r3, #0]
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c7a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008c7e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008c84:	687a      	ldr	r2, [r7, #4]
 8008c86:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8008c88:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	2201      	movs	r2, #1
 8008c8e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	2200      	movs	r2, #0
 8008c96:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return HAL_OK;
 8008c9a:	2300      	movs	r3, #0
}
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	370c      	adds	r7, #12
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca6:	4770      	bx	lr

08008ca8 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b084      	sub	sp, #16
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008cb0:	2300      	movs	r3, #0
 8008cb2:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8008cba:	b2db      	uxtb	r3, r3
 8008cbc:	2b02      	cmp	r3, #2
 8008cbe:	d005      	beq.n	8008ccc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	2204      	movs	r2, #4
 8008cc4:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8008cc6:	2301      	movs	r3, #1
 8008cc8:	73fb      	strb	r3, [r7, #15]
 8008cca:	e047      	b.n	8008d5c <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	681a      	ldr	r2, [r3, #0]
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	f022 020e 	bic.w	r2, r2, #14
 8008cda:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	681a      	ldr	r2, [r3, #0]
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	f022 0201 	bic.w	r2, r2, #1
 8008cea:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008cf0:	681a      	ldr	r2, [r3, #0]
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008cf6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008cfa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d00:	f003 021c 	and.w	r2, r3, #28
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d08:	2101      	movs	r1, #1
 8008d0a:	fa01 f202 	lsl.w	r2, r1, r2
 8008d0e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008d14:	687a      	ldr	r2, [r7, #4]
 8008d16:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8008d18:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d00c      	beq.n	8008d3c <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d26:	681a      	ldr	r2, [r3, #0]
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d2c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008d30:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d36:	687a      	ldr	r2, [r7, #4]
 8008d38:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8008d3a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	2201      	movs	r2, #1
 8008d40:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	2200      	movs	r2, #0
 8008d48:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d003      	beq.n	8008d5c <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d58:	6878      	ldr	r0, [r7, #4]
 8008d5a:	4798      	blx	r3
    }
  }
  return status;
 8008d5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d5e:	4618      	mov	r0, r3
 8008d60:	3710      	adds	r7, #16
 8008d62:	46bd      	mov	sp, r7
 8008d64:	bd80      	pop	{r7, pc}

08008d66 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008d66:	b580      	push	{r7, lr}
 8008d68:	b084      	sub	sp, #16
 8008d6a:	af00      	add	r7, sp, #0
 8008d6c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d82:	f003 031c 	and.w	r3, r3, #28
 8008d86:	2204      	movs	r2, #4
 8008d88:	409a      	lsls	r2, r3
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	4013      	ands	r3, r2
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d026      	beq.n	8008de0 <HAL_DMA_IRQHandler+0x7a>
 8008d92:	68bb      	ldr	r3, [r7, #8]
 8008d94:	f003 0304 	and.w	r3, r3, #4
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d021      	beq.n	8008de0 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	f003 0320 	and.w	r3, r3, #32
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d107      	bne.n	8008dba <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	681a      	ldr	r2, [r3, #0]
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	f022 0204 	bic.w	r2, r2, #4
 8008db8:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008dbe:	f003 021c 	and.w	r2, r3, #28
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008dc6:	2104      	movs	r1, #4
 8008dc8:	fa01 f202 	lsl.w	r2, r1, r2
 8008dcc:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d071      	beq.n	8008eba <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008dda:	6878      	ldr	r0, [r7, #4]
 8008ddc:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8008dde:	e06c      	b.n	8008eba <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008de4:	f003 031c 	and.w	r3, r3, #28
 8008de8:	2202      	movs	r2, #2
 8008dea:	409a      	lsls	r2, r3
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	4013      	ands	r3, r2
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d02e      	beq.n	8008e52 <HAL_DMA_IRQHandler+0xec>
 8008df4:	68bb      	ldr	r3, [r7, #8]
 8008df6:	f003 0302 	and.w	r3, r3, #2
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d029      	beq.n	8008e52 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	f003 0320 	and.w	r3, r3, #32
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d10b      	bne.n	8008e24 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	681a      	ldr	r2, [r3, #0]
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	f022 020a 	bic.w	r2, r2, #10
 8008e1a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	2201      	movs	r2, #1
 8008e20:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e28:	f003 021c 	and.w	r2, r3, #28
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e30:	2102      	movs	r1, #2
 8008e32:	fa01 f202 	lsl.w	r2, r1, r2
 8008e36:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	2200      	movs	r2, #0
 8008e3c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d038      	beq.n	8008eba <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e4c:	6878      	ldr	r0, [r7, #4]
 8008e4e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8008e50:	e033      	b.n	8008eba <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e56:	f003 031c 	and.w	r3, r3, #28
 8008e5a:	2208      	movs	r2, #8
 8008e5c:	409a      	lsls	r2, r3
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	4013      	ands	r3, r2
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d02a      	beq.n	8008ebc <HAL_DMA_IRQHandler+0x156>
 8008e66:	68bb      	ldr	r3, [r7, #8]
 8008e68:	f003 0308 	and.w	r3, r3, #8
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d025      	beq.n	8008ebc <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	681a      	ldr	r2, [r3, #0]
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	f022 020e 	bic.w	r2, r2, #14
 8008e7e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e84:	f003 021c 	and.w	r2, r3, #28
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e8c:	2101      	movs	r1, #1
 8008e8e:	fa01 f202 	lsl.w	r2, r1, r2
 8008e92:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	2201      	movs	r2, #1
 8008e98:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	2201      	movs	r2, #1
 8008e9e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d004      	beq.n	8008ebc <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008eb6:	6878      	ldr	r0, [r7, #4]
 8008eb8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8008eba:	bf00      	nop
 8008ebc:	bf00      	nop
}
 8008ebe:	3710      	adds	r7, #16
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	bd80      	pop	{r7, pc}

08008ec4 <HAL_DMA_GetError>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8008ec4:	b480      	push	{r7}
 8008ec6:	b083      	sub	sp, #12
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	370c      	adds	r7, #12
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eda:	4770      	bx	lr

08008edc <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008edc:	b480      	push	{r7}
 8008ede:	b085      	sub	sp, #20
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	60f8      	str	r0, [r7, #12]
 8008ee4:	60b9      	str	r1, [r7, #8]
 8008ee6:	607a      	str	r2, [r7, #4]
 8008ee8:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008eee:	68fa      	ldr	r2, [r7, #12]
 8008ef0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8008ef2:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d004      	beq.n	8008f06 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f00:	68fa      	ldr	r2, [r7, #12]
 8008f02:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8008f04:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f0a:	f003 021c 	and.w	r2, r3, #28
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f12:	2101      	movs	r1, #1
 8008f14:	fa01 f202 	lsl.w	r2, r1, r2
 8008f18:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	683a      	ldr	r2, [r7, #0]
 8008f20:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	689b      	ldr	r3, [r3, #8]
 8008f26:	2b10      	cmp	r3, #16
 8008f28:	d108      	bne.n	8008f3c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	687a      	ldr	r2, [r7, #4]
 8008f30:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	68ba      	ldr	r2, [r7, #8]
 8008f38:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8008f3a:	e007      	b.n	8008f4c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	68ba      	ldr	r2, [r7, #8]
 8008f42:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	687a      	ldr	r2, [r7, #4]
 8008f4a:	60da      	str	r2, [r3, #12]
}
 8008f4c:	bf00      	nop
 8008f4e:	3714      	adds	r7, #20
 8008f50:	46bd      	mov	sp, r7
 8008f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f56:	4770      	bx	lr

08008f58 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008f58:	b480      	push	{r7}
 8008f5a:	b085      	sub	sp, #20
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	461a      	mov	r2, r3
 8008f66:	4b17      	ldr	r3, [pc, #92]	@ (8008fc4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8008f68:	429a      	cmp	r2, r3
 8008f6a:	d80a      	bhi.n	8008f82 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f70:	089b      	lsrs	r3, r3, #2
 8008f72:	009b      	lsls	r3, r3, #2
 8008f74:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008f78:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8008f7c:	687a      	ldr	r2, [r7, #4]
 8008f7e:	6493      	str	r3, [r2, #72]	@ 0x48
 8008f80:	e007      	b.n	8008f92 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f86:	089b      	lsrs	r3, r3, #2
 8008f88:	009a      	lsls	r2, r3, #2
 8008f8a:	4b0f      	ldr	r3, [pc, #60]	@ (8008fc8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8008f8c:	4413      	add	r3, r2
 8008f8e:	687a      	ldr	r2, [r7, #4]
 8008f90:	6493      	str	r3, [r2, #72]	@ 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	b2db      	uxtb	r3, r3
 8008f98:	3b08      	subs	r3, #8
 8008f9a:	4a0c      	ldr	r2, [pc, #48]	@ (8008fcc <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8008f9c:	fba2 2303 	umull	r2, r3, r2, r3
 8008fa0:	091b      	lsrs	r3, r3, #4
 8008fa2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	4a0a      	ldr	r2, [pc, #40]	@ (8008fd0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8008fa8:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	f003 031f 	and.w	r3, r3, #31
 8008fb0:	2201      	movs	r2, #1
 8008fb2:	409a      	lsls	r2, r3
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8008fb8:	bf00      	nop
 8008fba:	3714      	adds	r7, #20
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc2:	4770      	bx	lr
 8008fc4:	40020407 	.word	0x40020407
 8008fc8:	4002081c 	.word	0x4002081c
 8008fcc:	cccccccd 	.word	0xcccccccd
 8008fd0:	40020880 	.word	0x40020880

08008fd4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008fd4:	b480      	push	{r7}
 8008fd6:	b085      	sub	sp, #20
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	685b      	ldr	r3, [r3, #4]
 8008fe0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008fe4:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008fe6:	68fa      	ldr	r2, [r7, #12]
 8008fe8:	4b0b      	ldr	r3, [pc, #44]	@ (8009018 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8008fea:	4413      	add	r3, r2
 8008fec:	009b      	lsls	r3, r3, #2
 8008fee:	461a      	mov	r2, r3
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	4a09      	ldr	r2, [pc, #36]	@ (800901c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8008ff8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	3b01      	subs	r3, #1
 8008ffe:	f003 0303 	and.w	r3, r3, #3
 8009002:	2201      	movs	r2, #1
 8009004:	409a      	lsls	r2, r3
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800900a:	bf00      	nop
 800900c:	3714      	adds	r7, #20
 800900e:	46bd      	mov	sp, r7
 8009010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009014:	4770      	bx	lr
 8009016:	bf00      	nop
 8009018:	1000823f 	.word	0x1000823f
 800901c:	40020940 	.word	0x40020940

08009020 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009020:	b480      	push	{r7}
 8009022:	b087      	sub	sp, #28
 8009024:	af00      	add	r7, sp, #0
 8009026:	6078      	str	r0, [r7, #4]
 8009028:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800902a:	2300      	movs	r3, #0
 800902c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800902e:	e14c      	b.n	80092ca <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8009030:	683b      	ldr	r3, [r7, #0]
 8009032:	681a      	ldr	r2, [r3, #0]
 8009034:	2101      	movs	r1, #1
 8009036:	697b      	ldr	r3, [r7, #20]
 8009038:	fa01 f303 	lsl.w	r3, r1, r3
 800903c:	4013      	ands	r3, r2
 800903e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	2b00      	cmp	r3, #0
 8009044:	f000 813e 	beq.w	80092c4 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8009048:	683b      	ldr	r3, [r7, #0]
 800904a:	685b      	ldr	r3, [r3, #4]
 800904c:	f003 0303 	and.w	r3, r3, #3
 8009050:	2b01      	cmp	r3, #1
 8009052:	d005      	beq.n	8009060 <HAL_GPIO_Init+0x40>
 8009054:	683b      	ldr	r3, [r7, #0]
 8009056:	685b      	ldr	r3, [r3, #4]
 8009058:	f003 0303 	and.w	r3, r3, #3
 800905c:	2b02      	cmp	r3, #2
 800905e:	d130      	bne.n	80090c2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	689b      	ldr	r3, [r3, #8]
 8009064:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8009066:	697b      	ldr	r3, [r7, #20]
 8009068:	005b      	lsls	r3, r3, #1
 800906a:	2203      	movs	r2, #3
 800906c:	fa02 f303 	lsl.w	r3, r2, r3
 8009070:	43db      	mvns	r3, r3
 8009072:	693a      	ldr	r2, [r7, #16]
 8009074:	4013      	ands	r3, r2
 8009076:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8009078:	683b      	ldr	r3, [r7, #0]
 800907a:	68da      	ldr	r2, [r3, #12]
 800907c:	697b      	ldr	r3, [r7, #20]
 800907e:	005b      	lsls	r3, r3, #1
 8009080:	fa02 f303 	lsl.w	r3, r2, r3
 8009084:	693a      	ldr	r2, [r7, #16]
 8009086:	4313      	orrs	r3, r2
 8009088:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	693a      	ldr	r2, [r7, #16]
 800908e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	685b      	ldr	r3, [r3, #4]
 8009094:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8009096:	2201      	movs	r2, #1
 8009098:	697b      	ldr	r3, [r7, #20]
 800909a:	fa02 f303 	lsl.w	r3, r2, r3
 800909e:	43db      	mvns	r3, r3
 80090a0:	693a      	ldr	r2, [r7, #16]
 80090a2:	4013      	ands	r3, r2
 80090a4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80090a6:	683b      	ldr	r3, [r7, #0]
 80090a8:	685b      	ldr	r3, [r3, #4]
 80090aa:	091b      	lsrs	r3, r3, #4
 80090ac:	f003 0201 	and.w	r2, r3, #1
 80090b0:	697b      	ldr	r3, [r7, #20]
 80090b2:	fa02 f303 	lsl.w	r3, r2, r3
 80090b6:	693a      	ldr	r2, [r7, #16]
 80090b8:	4313      	orrs	r3, r2
 80090ba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	693a      	ldr	r2, [r7, #16]
 80090c0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80090c2:	683b      	ldr	r3, [r7, #0]
 80090c4:	685b      	ldr	r3, [r3, #4]
 80090c6:	f003 0303 	and.w	r3, r3, #3
 80090ca:	2b03      	cmp	r3, #3
 80090cc:	d017      	beq.n	80090fe <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	68db      	ldr	r3, [r3, #12]
 80090d2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80090d4:	697b      	ldr	r3, [r7, #20]
 80090d6:	005b      	lsls	r3, r3, #1
 80090d8:	2203      	movs	r2, #3
 80090da:	fa02 f303 	lsl.w	r3, r2, r3
 80090de:	43db      	mvns	r3, r3
 80090e0:	693a      	ldr	r2, [r7, #16]
 80090e2:	4013      	ands	r3, r2
 80090e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80090e6:	683b      	ldr	r3, [r7, #0]
 80090e8:	689a      	ldr	r2, [r3, #8]
 80090ea:	697b      	ldr	r3, [r7, #20]
 80090ec:	005b      	lsls	r3, r3, #1
 80090ee:	fa02 f303 	lsl.w	r3, r2, r3
 80090f2:	693a      	ldr	r2, [r7, #16]
 80090f4:	4313      	orrs	r3, r2
 80090f6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	693a      	ldr	r2, [r7, #16]
 80090fc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80090fe:	683b      	ldr	r3, [r7, #0]
 8009100:	685b      	ldr	r3, [r3, #4]
 8009102:	f003 0303 	and.w	r3, r3, #3
 8009106:	2b02      	cmp	r3, #2
 8009108:	d123      	bne.n	8009152 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800910a:	697b      	ldr	r3, [r7, #20]
 800910c:	08da      	lsrs	r2, r3, #3
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	3208      	adds	r2, #8
 8009112:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009116:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8009118:	697b      	ldr	r3, [r7, #20]
 800911a:	f003 0307 	and.w	r3, r3, #7
 800911e:	009b      	lsls	r3, r3, #2
 8009120:	220f      	movs	r2, #15
 8009122:	fa02 f303 	lsl.w	r3, r2, r3
 8009126:	43db      	mvns	r3, r3
 8009128:	693a      	ldr	r2, [r7, #16]
 800912a:	4013      	ands	r3, r2
 800912c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800912e:	683b      	ldr	r3, [r7, #0]
 8009130:	691a      	ldr	r2, [r3, #16]
 8009132:	697b      	ldr	r3, [r7, #20]
 8009134:	f003 0307 	and.w	r3, r3, #7
 8009138:	009b      	lsls	r3, r3, #2
 800913a:	fa02 f303 	lsl.w	r3, r2, r3
 800913e:	693a      	ldr	r2, [r7, #16]
 8009140:	4313      	orrs	r3, r2
 8009142:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8009144:	697b      	ldr	r3, [r7, #20]
 8009146:	08da      	lsrs	r2, r3, #3
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	3208      	adds	r2, #8
 800914c:	6939      	ldr	r1, [r7, #16]
 800914e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8009158:	697b      	ldr	r3, [r7, #20]
 800915a:	005b      	lsls	r3, r3, #1
 800915c:	2203      	movs	r2, #3
 800915e:	fa02 f303 	lsl.w	r3, r2, r3
 8009162:	43db      	mvns	r3, r3
 8009164:	693a      	ldr	r2, [r7, #16]
 8009166:	4013      	ands	r3, r2
 8009168:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800916a:	683b      	ldr	r3, [r7, #0]
 800916c:	685b      	ldr	r3, [r3, #4]
 800916e:	f003 0203 	and.w	r2, r3, #3
 8009172:	697b      	ldr	r3, [r7, #20]
 8009174:	005b      	lsls	r3, r3, #1
 8009176:	fa02 f303 	lsl.w	r3, r2, r3
 800917a:	693a      	ldr	r2, [r7, #16]
 800917c:	4313      	orrs	r3, r2
 800917e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	693a      	ldr	r2, [r7, #16]
 8009184:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8009186:	683b      	ldr	r3, [r7, #0]
 8009188:	685b      	ldr	r3, [r3, #4]
 800918a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800918e:	2b00      	cmp	r3, #0
 8009190:	f000 8098 	beq.w	80092c4 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8009194:	4a54      	ldr	r2, [pc, #336]	@ (80092e8 <HAL_GPIO_Init+0x2c8>)
 8009196:	697b      	ldr	r3, [r7, #20]
 8009198:	089b      	lsrs	r3, r3, #2
 800919a:	3302      	adds	r3, #2
 800919c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80091a0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80091a2:	697b      	ldr	r3, [r7, #20]
 80091a4:	f003 0303 	and.w	r3, r3, #3
 80091a8:	009b      	lsls	r3, r3, #2
 80091aa:	220f      	movs	r2, #15
 80091ac:	fa02 f303 	lsl.w	r3, r2, r3
 80091b0:	43db      	mvns	r3, r3
 80091b2:	693a      	ldr	r2, [r7, #16]
 80091b4:	4013      	ands	r3, r2
 80091b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80091be:	d019      	beq.n	80091f4 <HAL_GPIO_Init+0x1d4>
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	4a4a      	ldr	r2, [pc, #296]	@ (80092ec <HAL_GPIO_Init+0x2cc>)
 80091c4:	4293      	cmp	r3, r2
 80091c6:	d013      	beq.n	80091f0 <HAL_GPIO_Init+0x1d0>
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	4a49      	ldr	r2, [pc, #292]	@ (80092f0 <HAL_GPIO_Init+0x2d0>)
 80091cc:	4293      	cmp	r3, r2
 80091ce:	d00d      	beq.n	80091ec <HAL_GPIO_Init+0x1cc>
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	4a48      	ldr	r2, [pc, #288]	@ (80092f4 <HAL_GPIO_Init+0x2d4>)
 80091d4:	4293      	cmp	r3, r2
 80091d6:	d007      	beq.n	80091e8 <HAL_GPIO_Init+0x1c8>
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	4a47      	ldr	r2, [pc, #284]	@ (80092f8 <HAL_GPIO_Init+0x2d8>)
 80091dc:	4293      	cmp	r3, r2
 80091de:	d101      	bne.n	80091e4 <HAL_GPIO_Init+0x1c4>
 80091e0:	2304      	movs	r3, #4
 80091e2:	e008      	b.n	80091f6 <HAL_GPIO_Init+0x1d6>
 80091e4:	2307      	movs	r3, #7
 80091e6:	e006      	b.n	80091f6 <HAL_GPIO_Init+0x1d6>
 80091e8:	2303      	movs	r3, #3
 80091ea:	e004      	b.n	80091f6 <HAL_GPIO_Init+0x1d6>
 80091ec:	2302      	movs	r3, #2
 80091ee:	e002      	b.n	80091f6 <HAL_GPIO_Init+0x1d6>
 80091f0:	2301      	movs	r3, #1
 80091f2:	e000      	b.n	80091f6 <HAL_GPIO_Init+0x1d6>
 80091f4:	2300      	movs	r3, #0
 80091f6:	697a      	ldr	r2, [r7, #20]
 80091f8:	f002 0203 	and.w	r2, r2, #3
 80091fc:	0092      	lsls	r2, r2, #2
 80091fe:	4093      	lsls	r3, r2
 8009200:	693a      	ldr	r2, [r7, #16]
 8009202:	4313      	orrs	r3, r2
 8009204:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8009206:	4938      	ldr	r1, [pc, #224]	@ (80092e8 <HAL_GPIO_Init+0x2c8>)
 8009208:	697b      	ldr	r3, [r7, #20]
 800920a:	089b      	lsrs	r3, r3, #2
 800920c:	3302      	adds	r3, #2
 800920e:	693a      	ldr	r2, [r7, #16]
 8009210:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8009214:	4b39      	ldr	r3, [pc, #228]	@ (80092fc <HAL_GPIO_Init+0x2dc>)
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	43db      	mvns	r3, r3
 800921e:	693a      	ldr	r2, [r7, #16]
 8009220:	4013      	ands	r3, r2
 8009222:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8009224:	683b      	ldr	r3, [r7, #0]
 8009226:	685b      	ldr	r3, [r3, #4]
 8009228:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800922c:	2b00      	cmp	r3, #0
 800922e:	d003      	beq.n	8009238 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8009230:	693a      	ldr	r2, [r7, #16]
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	4313      	orrs	r3, r2
 8009236:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8009238:	4a30      	ldr	r2, [pc, #192]	@ (80092fc <HAL_GPIO_Init+0x2dc>)
 800923a:	693b      	ldr	r3, [r7, #16]
 800923c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800923e:	4b2f      	ldr	r3, [pc, #188]	@ (80092fc <HAL_GPIO_Init+0x2dc>)
 8009240:	685b      	ldr	r3, [r3, #4]
 8009242:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	43db      	mvns	r3, r3
 8009248:	693a      	ldr	r2, [r7, #16]
 800924a:	4013      	ands	r3, r2
 800924c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800924e:	683b      	ldr	r3, [r7, #0]
 8009250:	685b      	ldr	r3, [r3, #4]
 8009252:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009256:	2b00      	cmp	r3, #0
 8009258:	d003      	beq.n	8009262 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800925a:	693a      	ldr	r2, [r7, #16]
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	4313      	orrs	r3, r2
 8009260:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8009262:	4a26      	ldr	r2, [pc, #152]	@ (80092fc <HAL_GPIO_Init+0x2dc>)
 8009264:	693b      	ldr	r3, [r7, #16]
 8009266:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8009268:	4b24      	ldr	r3, [pc, #144]	@ (80092fc <HAL_GPIO_Init+0x2dc>)
 800926a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800926e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	43db      	mvns	r3, r3
 8009274:	693a      	ldr	r2, [r7, #16]
 8009276:	4013      	ands	r3, r2
 8009278:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800927a:	683b      	ldr	r3, [r7, #0]
 800927c:	685b      	ldr	r3, [r3, #4]
 800927e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009282:	2b00      	cmp	r3, #0
 8009284:	d003      	beq.n	800928e <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8009286:	693a      	ldr	r2, [r7, #16]
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	4313      	orrs	r3, r2
 800928c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800928e:	4a1b      	ldr	r2, [pc, #108]	@ (80092fc <HAL_GPIO_Init+0x2dc>)
 8009290:	693b      	ldr	r3, [r7, #16]
 8009292:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 8009296:	4b19      	ldr	r3, [pc, #100]	@ (80092fc <HAL_GPIO_Init+0x2dc>)
 8009298:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800929c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	43db      	mvns	r3, r3
 80092a2:	693a      	ldr	r2, [r7, #16]
 80092a4:	4013      	ands	r3, r2
 80092a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80092a8:	683b      	ldr	r3, [r7, #0]
 80092aa:	685b      	ldr	r3, [r3, #4]
 80092ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d003      	beq.n	80092bc <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80092b4:	693a      	ldr	r2, [r7, #16]
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	4313      	orrs	r3, r2
 80092ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80092bc:	4a0f      	ldr	r2, [pc, #60]	@ (80092fc <HAL_GPIO_Init+0x2dc>)
 80092be:	693b      	ldr	r3, [r7, #16]
 80092c0:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 80092c4:	697b      	ldr	r3, [r7, #20]
 80092c6:	3301      	adds	r3, #1
 80092c8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80092ca:	683b      	ldr	r3, [r7, #0]
 80092cc:	681a      	ldr	r2, [r3, #0]
 80092ce:	697b      	ldr	r3, [r7, #20]
 80092d0:	fa22 f303 	lsr.w	r3, r2, r3
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	f47f aeab 	bne.w	8009030 <HAL_GPIO_Init+0x10>
  }
}
 80092da:	bf00      	nop
 80092dc:	bf00      	nop
 80092de:	371c      	adds	r7, #28
 80092e0:	46bd      	mov	sp, r7
 80092e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e6:	4770      	bx	lr
 80092e8:	40010000 	.word	0x40010000
 80092ec:	48000400 	.word	0x48000400
 80092f0:	48000800 	.word	0x48000800
 80092f4:	48000c00 	.word	0x48000c00
 80092f8:	48001000 	.word	0x48001000
 80092fc:	58000800 	.word	0x58000800

08009300 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009300:	b480      	push	{r7}
 8009302:	b085      	sub	sp, #20
 8009304:	af00      	add	r7, sp, #0
 8009306:	6078      	str	r0, [r7, #4]
 8009308:	460b      	mov	r3, r1
 800930a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	691a      	ldr	r2, [r3, #16]
 8009310:	887b      	ldrh	r3, [r7, #2]
 8009312:	4013      	ands	r3, r2
 8009314:	2b00      	cmp	r3, #0
 8009316:	d002      	beq.n	800931e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009318:	2301      	movs	r3, #1
 800931a:	73fb      	strb	r3, [r7, #15]
 800931c:	e001      	b.n	8009322 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800931e:	2300      	movs	r3, #0
 8009320:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8009322:	7bfb      	ldrb	r3, [r7, #15]
}
 8009324:	4618      	mov	r0, r3
 8009326:	3714      	adds	r7, #20
 8009328:	46bd      	mov	sp, r7
 800932a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932e:	4770      	bx	lr

08009330 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009330:	b480      	push	{r7}
 8009332:	b083      	sub	sp, #12
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]
 8009338:	460b      	mov	r3, r1
 800933a:	807b      	strh	r3, [r7, #2]
 800933c:	4613      	mov	r3, r2
 800933e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009340:	787b      	ldrb	r3, [r7, #1]
 8009342:	2b00      	cmp	r3, #0
 8009344:	d003      	beq.n	800934e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8009346:	887a      	ldrh	r2, [r7, #2]
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800934c:	e002      	b.n	8009354 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800934e:	887a      	ldrh	r2, [r7, #2]
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8009354:	bf00      	nop
 8009356:	370c      	adds	r7, #12
 8009358:	46bd      	mov	sp, r7
 800935a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800935e:	4770      	bx	lr

08009360 <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009360:	b480      	push	{r7}
 8009362:	b085      	sub	sp, #20
 8009364:	af00      	add	r7, sp, #0
 8009366:	6078      	str	r0, [r7, #4]
 8009368:	460b      	mov	r3, r1
 800936a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	695b      	ldr	r3, [r3, #20]
 8009370:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8009372:	887a      	ldrh	r2, [r7, #2]
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	4013      	ands	r3, r2
 8009378:	041a      	lsls	r2, r3, #16
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	43d9      	mvns	r1, r3
 800937e:	887b      	ldrh	r3, [r7, #2]
 8009380:	400b      	ands	r3, r1
 8009382:	431a      	orrs	r2, r3
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	619a      	str	r2, [r3, #24]
}
 8009388:	bf00      	nop
 800938a:	3714      	adds	r7, #20
 800938c:	46bd      	mov	sp, r7
 800938e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009392:	4770      	bx	lr

08009394 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8009394:	b580      	push	{r7, lr}
 8009396:	b082      	sub	sp, #8
 8009398:	af00      	add	r7, sp, #0
 800939a:	4603      	mov	r3, r0
 800939c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800939e:	4b08      	ldr	r3, [pc, #32]	@ (80093c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80093a0:	68da      	ldr	r2, [r3, #12]
 80093a2:	88fb      	ldrh	r3, [r7, #6]
 80093a4:	4013      	ands	r3, r2
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d006      	beq.n	80093b8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80093aa:	4a05      	ldr	r2, [pc, #20]	@ (80093c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80093ac:	88fb      	ldrh	r3, [r7, #6]
 80093ae:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80093b0:	88fb      	ldrh	r3, [r7, #6]
 80093b2:	4618      	mov	r0, r3
 80093b4:	f7f9 fbfe 	bl	8002bb4 <HAL_GPIO_EXTI_Callback>
  }
}
 80093b8:	bf00      	nop
 80093ba:	3708      	adds	r7, #8
 80093bc:	46bd      	mov	sp, r7
 80093be:	bd80      	pop	{r7, pc}
 80093c0:	58000800 	.word	0x58000800

080093c4 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 80093c4:	b580      	push	{r7, lr}
 80093c6:	b082      	sub	sp, #8
 80093c8:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 80093ca:	4b0a      	ldr	r3, [pc, #40]	@ (80093f4 <HAL_HSEM_IRQHandler+0x30>)
 80093cc:	68db      	ldr	r3, [r3, #12]
 80093ce:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 80093d0:	4b08      	ldr	r3, [pc, #32]	@ (80093f4 <HAL_HSEM_IRQHandler+0x30>)
 80093d2:	681a      	ldr	r2, [r3, #0]
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	43db      	mvns	r3, r3
 80093d8:	4906      	ldr	r1, [pc, #24]	@ (80093f4 <HAL_HSEM_IRQHandler+0x30>)
 80093da:	4013      	ands	r3, r2
 80093dc:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 80093de:	4a05      	ldr	r2, [pc, #20]	@ (80093f4 <HAL_HSEM_IRQHandler+0x30>)
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 80093e4:	6878      	ldr	r0, [r7, #4]
 80093e6:	f000 f807 	bl	80093f8 <HAL_HSEM_FreeCallback>
}
 80093ea:	bf00      	nop
 80093ec:	3708      	adds	r7, #8
 80093ee:	46bd      	mov	sp, r7
 80093f0:	bd80      	pop	{r7, pc}
 80093f2:	bf00      	nop
 80093f4:	58001500 	.word	0x58001500

080093f8 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 80093f8:	b480      	push	{r7}
 80093fa:	b083      	sub	sp, #12
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8009400:	bf00      	nop
 8009402:	370c      	adds	r7, #12
 8009404:	46bd      	mov	sp, r7
 8009406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940a:	4770      	bx	lr

0800940c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800940c:	b580      	push	{r7, lr}
 800940e:	b082      	sub	sp, #8
 8009410:	af00      	add	r7, sp, #0
 8009412:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	2b00      	cmp	r3, #0
 8009418:	d101      	bne.n	800941e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800941a:	2301      	movs	r3, #1
 800941c:	e08d      	b.n	800953a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009424:	b2db      	uxtb	r3, r3
 8009426:	2b00      	cmp	r3, #0
 8009428:	d106      	bne.n	8009438 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	2200      	movs	r2, #0
 800942e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8009432:	6878      	ldr	r0, [r7, #4]
 8009434:	f7f9 faca 	bl	80029cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	2224      	movs	r2, #36	@ 0x24
 800943c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	681a      	ldr	r2, [r3, #0]
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	f022 0201 	bic.w	r2, r2, #1
 800944e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	685a      	ldr	r2, [r3, #4]
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800945c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	689a      	ldr	r2, [r3, #8]
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800946c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	68db      	ldr	r3, [r3, #12]
 8009472:	2b01      	cmp	r3, #1
 8009474:	d107      	bne.n	8009486 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	689a      	ldr	r2, [r3, #8]
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009482:	609a      	str	r2, [r3, #8]
 8009484:	e006      	b.n	8009494 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	689a      	ldr	r2, [r3, #8]
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8009492:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	68db      	ldr	r3, [r3, #12]
 8009498:	2b02      	cmp	r3, #2
 800949a:	d108      	bne.n	80094ae <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	685a      	ldr	r2, [r3, #4]
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80094aa:	605a      	str	r2, [r3, #4]
 80094ac:	e007      	b.n	80094be <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	685a      	ldr	r2, [r3, #4]
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80094bc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	685b      	ldr	r3, [r3, #4]
 80094c4:	687a      	ldr	r2, [r7, #4]
 80094c6:	6812      	ldr	r2, [r2, #0]
 80094c8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80094cc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80094d0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	68da      	ldr	r2, [r3, #12]
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80094e0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	691a      	ldr	r2, [r3, #16]
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	695b      	ldr	r3, [r3, #20]
 80094ea:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	699b      	ldr	r3, [r3, #24]
 80094f2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	430a      	orrs	r2, r1
 80094fa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	69d9      	ldr	r1, [r3, #28]
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	6a1a      	ldr	r2, [r3, #32]
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	430a      	orrs	r2, r1
 800950a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	681a      	ldr	r2, [r3, #0]
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	f042 0201 	orr.w	r2, r2, #1
 800951a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	2200      	movs	r2, #0
 8009520:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	2220      	movs	r2, #32
 8009526:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	2200      	movs	r2, #0
 800952e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	2200      	movs	r2, #0
 8009534:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8009538:	2300      	movs	r3, #0
}
 800953a:	4618      	mov	r0, r3
 800953c:	3708      	adds	r7, #8
 800953e:	46bd      	mov	sp, r7
 8009540:	bd80      	pop	{r7, pc}
	...

08009544 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009544:	b580      	push	{r7, lr}
 8009546:	b088      	sub	sp, #32
 8009548:	af02      	add	r7, sp, #8
 800954a:	60f8      	str	r0, [r7, #12]
 800954c:	4608      	mov	r0, r1
 800954e:	4611      	mov	r1, r2
 8009550:	461a      	mov	r2, r3
 8009552:	4603      	mov	r3, r0
 8009554:	817b      	strh	r3, [r7, #10]
 8009556:	460b      	mov	r3, r1
 8009558:	813b      	strh	r3, [r7, #8]
 800955a:	4613      	mov	r3, r2
 800955c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009564:	b2db      	uxtb	r3, r3
 8009566:	2b20      	cmp	r3, #32
 8009568:	f040 80f9 	bne.w	800975e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800956c:	6a3b      	ldr	r3, [r7, #32]
 800956e:	2b00      	cmp	r3, #0
 8009570:	d002      	beq.n	8009578 <HAL_I2C_Mem_Write+0x34>
 8009572:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009574:	2b00      	cmp	r3, #0
 8009576:	d105      	bne.n	8009584 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800957e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8009580:	2301      	movs	r3, #1
 8009582:	e0ed      	b.n	8009760 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800958a:	2b01      	cmp	r3, #1
 800958c:	d101      	bne.n	8009592 <HAL_I2C_Mem_Write+0x4e>
 800958e:	2302      	movs	r3, #2
 8009590:	e0e6      	b.n	8009760 <HAL_I2C_Mem_Write+0x21c>
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	2201      	movs	r2, #1
 8009596:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800959a:	f7fd ffc5 	bl	8007528 <HAL_GetTick>
 800959e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80095a0:	697b      	ldr	r3, [r7, #20]
 80095a2:	9300      	str	r3, [sp, #0]
 80095a4:	2319      	movs	r3, #25
 80095a6:	2201      	movs	r2, #1
 80095a8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80095ac:	68f8      	ldr	r0, [r7, #12]
 80095ae:	f000 fac3 	bl	8009b38 <I2C_WaitOnFlagUntilTimeout>
 80095b2:	4603      	mov	r3, r0
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d001      	beq.n	80095bc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80095b8:	2301      	movs	r3, #1
 80095ba:	e0d1      	b.n	8009760 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	2221      	movs	r2, #33	@ 0x21
 80095c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	2240      	movs	r2, #64	@ 0x40
 80095c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	2200      	movs	r2, #0
 80095d0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	6a3a      	ldr	r2, [r7, #32]
 80095d6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80095dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	2200      	movs	r2, #0
 80095e2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80095e4:	88f8      	ldrh	r0, [r7, #6]
 80095e6:	893a      	ldrh	r2, [r7, #8]
 80095e8:	8979      	ldrh	r1, [r7, #10]
 80095ea:	697b      	ldr	r3, [r7, #20]
 80095ec:	9301      	str	r3, [sp, #4]
 80095ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095f0:	9300      	str	r3, [sp, #0]
 80095f2:	4603      	mov	r3, r0
 80095f4:	68f8      	ldr	r0, [r7, #12]
 80095f6:	f000 f9d3 	bl	80099a0 <I2C_RequestMemoryWrite>
 80095fa:	4603      	mov	r3, r0
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d005      	beq.n	800960c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	2200      	movs	r2, #0
 8009604:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8009608:	2301      	movs	r3, #1
 800960a:	e0a9      	b.n	8009760 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009610:	b29b      	uxth	r3, r3
 8009612:	2bff      	cmp	r3, #255	@ 0xff
 8009614:	d90e      	bls.n	8009634 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	22ff      	movs	r2, #255	@ 0xff
 800961a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009620:	b2da      	uxtb	r2, r3
 8009622:	8979      	ldrh	r1, [r7, #10]
 8009624:	2300      	movs	r3, #0
 8009626:	9300      	str	r3, [sp, #0]
 8009628:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800962c:	68f8      	ldr	r0, [r7, #12]
 800962e:	f000 fc47 	bl	8009ec0 <I2C_TransferConfig>
 8009632:	e00f      	b.n	8009654 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009638:	b29a      	uxth	r2, r3
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009642:	b2da      	uxtb	r2, r3
 8009644:	8979      	ldrh	r1, [r7, #10]
 8009646:	2300      	movs	r3, #0
 8009648:	9300      	str	r3, [sp, #0]
 800964a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800964e:	68f8      	ldr	r0, [r7, #12]
 8009650:	f000 fc36 	bl	8009ec0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009654:	697a      	ldr	r2, [r7, #20]
 8009656:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009658:	68f8      	ldr	r0, [r7, #12]
 800965a:	f000 fac6 	bl	8009bea <I2C_WaitOnTXISFlagUntilTimeout>
 800965e:	4603      	mov	r3, r0
 8009660:	2b00      	cmp	r3, #0
 8009662:	d001      	beq.n	8009668 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8009664:	2301      	movs	r3, #1
 8009666:	e07b      	b.n	8009760 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800966c:	781a      	ldrb	r2, [r3, #0]
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009678:	1c5a      	adds	r2, r3, #1
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009682:	b29b      	uxth	r3, r3
 8009684:	3b01      	subs	r3, #1
 8009686:	b29a      	uxth	r2, r3
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009690:	3b01      	subs	r3, #1
 8009692:	b29a      	uxth	r2, r3
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800969c:	b29b      	uxth	r3, r3
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d034      	beq.n	800970c <HAL_I2C_Mem_Write+0x1c8>
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d130      	bne.n	800970c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80096aa:	697b      	ldr	r3, [r7, #20]
 80096ac:	9300      	str	r3, [sp, #0]
 80096ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096b0:	2200      	movs	r2, #0
 80096b2:	2180      	movs	r1, #128	@ 0x80
 80096b4:	68f8      	ldr	r0, [r7, #12]
 80096b6:	f000 fa3f 	bl	8009b38 <I2C_WaitOnFlagUntilTimeout>
 80096ba:	4603      	mov	r3, r0
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d001      	beq.n	80096c4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80096c0:	2301      	movs	r3, #1
 80096c2:	e04d      	b.n	8009760 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80096c8:	b29b      	uxth	r3, r3
 80096ca:	2bff      	cmp	r3, #255	@ 0xff
 80096cc:	d90e      	bls.n	80096ec <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	22ff      	movs	r2, #255	@ 0xff
 80096d2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80096d8:	b2da      	uxtb	r2, r3
 80096da:	8979      	ldrh	r1, [r7, #10]
 80096dc:	2300      	movs	r3, #0
 80096de:	9300      	str	r3, [sp, #0]
 80096e0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80096e4:	68f8      	ldr	r0, [r7, #12]
 80096e6:	f000 fbeb 	bl	8009ec0 <I2C_TransferConfig>
 80096ea:	e00f      	b.n	800970c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80096f0:	b29a      	uxth	r2, r3
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80096fa:	b2da      	uxtb	r2, r3
 80096fc:	8979      	ldrh	r1, [r7, #10]
 80096fe:	2300      	movs	r3, #0
 8009700:	9300      	str	r3, [sp, #0]
 8009702:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009706:	68f8      	ldr	r0, [r7, #12]
 8009708:	f000 fbda 	bl	8009ec0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009710:	b29b      	uxth	r3, r3
 8009712:	2b00      	cmp	r3, #0
 8009714:	d19e      	bne.n	8009654 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009716:	697a      	ldr	r2, [r7, #20]
 8009718:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800971a:	68f8      	ldr	r0, [r7, #12]
 800971c:	f000 faac 	bl	8009c78 <I2C_WaitOnSTOPFlagUntilTimeout>
 8009720:	4603      	mov	r3, r0
 8009722:	2b00      	cmp	r3, #0
 8009724:	d001      	beq.n	800972a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8009726:	2301      	movs	r3, #1
 8009728:	e01a      	b.n	8009760 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	2220      	movs	r2, #32
 8009730:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	6859      	ldr	r1, [r3, #4]
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	681a      	ldr	r2, [r3, #0]
 800973c:	4b0a      	ldr	r3, [pc, #40]	@ (8009768 <HAL_I2C_Mem_Write+0x224>)
 800973e:	400b      	ands	r3, r1
 8009740:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	2220      	movs	r2, #32
 8009746:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	2200      	movs	r2, #0
 800974e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	2200      	movs	r2, #0
 8009756:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800975a:	2300      	movs	r3, #0
 800975c:	e000      	b.n	8009760 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800975e:	2302      	movs	r3, #2
  }
}
 8009760:	4618      	mov	r0, r3
 8009762:	3718      	adds	r7, #24
 8009764:	46bd      	mov	sp, r7
 8009766:	bd80      	pop	{r7, pc}
 8009768:	fe00e800 	.word	0xfe00e800

0800976c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800976c:	b580      	push	{r7, lr}
 800976e:	b088      	sub	sp, #32
 8009770:	af02      	add	r7, sp, #8
 8009772:	60f8      	str	r0, [r7, #12]
 8009774:	4608      	mov	r0, r1
 8009776:	4611      	mov	r1, r2
 8009778:	461a      	mov	r2, r3
 800977a:	4603      	mov	r3, r0
 800977c:	817b      	strh	r3, [r7, #10]
 800977e:	460b      	mov	r3, r1
 8009780:	813b      	strh	r3, [r7, #8]
 8009782:	4613      	mov	r3, r2
 8009784:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800978c:	b2db      	uxtb	r3, r3
 800978e:	2b20      	cmp	r3, #32
 8009790:	f040 80fd 	bne.w	800998e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8009794:	6a3b      	ldr	r3, [r7, #32]
 8009796:	2b00      	cmp	r3, #0
 8009798:	d002      	beq.n	80097a0 <HAL_I2C_Mem_Read+0x34>
 800979a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800979c:	2b00      	cmp	r3, #0
 800979e:	d105      	bne.n	80097ac <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80097a6:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80097a8:	2301      	movs	r3, #1
 80097aa:	e0f1      	b.n	8009990 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80097b2:	2b01      	cmp	r3, #1
 80097b4:	d101      	bne.n	80097ba <HAL_I2C_Mem_Read+0x4e>
 80097b6:	2302      	movs	r3, #2
 80097b8:	e0ea      	b.n	8009990 <HAL_I2C_Mem_Read+0x224>
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	2201      	movs	r2, #1
 80097be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80097c2:	f7fd feb1 	bl	8007528 <HAL_GetTick>
 80097c6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80097c8:	697b      	ldr	r3, [r7, #20]
 80097ca:	9300      	str	r3, [sp, #0]
 80097cc:	2319      	movs	r3, #25
 80097ce:	2201      	movs	r2, #1
 80097d0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80097d4:	68f8      	ldr	r0, [r7, #12]
 80097d6:	f000 f9af 	bl	8009b38 <I2C_WaitOnFlagUntilTimeout>
 80097da:	4603      	mov	r3, r0
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d001      	beq.n	80097e4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80097e0:	2301      	movs	r3, #1
 80097e2:	e0d5      	b.n	8009990 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	2222      	movs	r2, #34	@ 0x22
 80097e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	2240      	movs	r2, #64	@ 0x40
 80097f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	2200      	movs	r2, #0
 80097f8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	6a3a      	ldr	r2, [r7, #32]
 80097fe:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8009804:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	2200      	movs	r2, #0
 800980a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800980c:	88f8      	ldrh	r0, [r7, #6]
 800980e:	893a      	ldrh	r2, [r7, #8]
 8009810:	8979      	ldrh	r1, [r7, #10]
 8009812:	697b      	ldr	r3, [r7, #20]
 8009814:	9301      	str	r3, [sp, #4]
 8009816:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009818:	9300      	str	r3, [sp, #0]
 800981a:	4603      	mov	r3, r0
 800981c:	68f8      	ldr	r0, [r7, #12]
 800981e:	f000 f913 	bl	8009a48 <I2C_RequestMemoryRead>
 8009822:	4603      	mov	r3, r0
 8009824:	2b00      	cmp	r3, #0
 8009826:	d005      	beq.n	8009834 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	2200      	movs	r2, #0
 800982c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8009830:	2301      	movs	r3, #1
 8009832:	e0ad      	b.n	8009990 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009838:	b29b      	uxth	r3, r3
 800983a:	2bff      	cmp	r3, #255	@ 0xff
 800983c:	d90e      	bls.n	800985c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	22ff      	movs	r2, #255	@ 0xff
 8009842:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009848:	b2da      	uxtb	r2, r3
 800984a:	8979      	ldrh	r1, [r7, #10]
 800984c:	4b52      	ldr	r3, [pc, #328]	@ (8009998 <HAL_I2C_Mem_Read+0x22c>)
 800984e:	9300      	str	r3, [sp, #0]
 8009850:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009854:	68f8      	ldr	r0, [r7, #12]
 8009856:	f000 fb33 	bl	8009ec0 <I2C_TransferConfig>
 800985a:	e00f      	b.n	800987c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009860:	b29a      	uxth	r2, r3
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800986a:	b2da      	uxtb	r2, r3
 800986c:	8979      	ldrh	r1, [r7, #10]
 800986e:	4b4a      	ldr	r3, [pc, #296]	@ (8009998 <HAL_I2C_Mem_Read+0x22c>)
 8009870:	9300      	str	r3, [sp, #0]
 8009872:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009876:	68f8      	ldr	r0, [r7, #12]
 8009878:	f000 fb22 	bl	8009ec0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800987c:	697b      	ldr	r3, [r7, #20]
 800987e:	9300      	str	r3, [sp, #0]
 8009880:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009882:	2200      	movs	r2, #0
 8009884:	2104      	movs	r1, #4
 8009886:	68f8      	ldr	r0, [r7, #12]
 8009888:	f000 f956 	bl	8009b38 <I2C_WaitOnFlagUntilTimeout>
 800988c:	4603      	mov	r3, r0
 800988e:	2b00      	cmp	r3, #0
 8009890:	d001      	beq.n	8009896 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8009892:	2301      	movs	r3, #1
 8009894:	e07c      	b.n	8009990 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098a0:	b2d2      	uxtb	r2, r2
 80098a2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098a8:	1c5a      	adds	r2, r3, #1
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80098b2:	3b01      	subs	r3, #1
 80098b4:	b29a      	uxth	r2, r3
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80098be:	b29b      	uxth	r3, r3
 80098c0:	3b01      	subs	r3, #1
 80098c2:	b29a      	uxth	r2, r3
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80098cc:	b29b      	uxth	r3, r3
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d034      	beq.n	800993c <HAL_I2C_Mem_Read+0x1d0>
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d130      	bne.n	800993c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80098da:	697b      	ldr	r3, [r7, #20]
 80098dc:	9300      	str	r3, [sp, #0]
 80098de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098e0:	2200      	movs	r2, #0
 80098e2:	2180      	movs	r1, #128	@ 0x80
 80098e4:	68f8      	ldr	r0, [r7, #12]
 80098e6:	f000 f927 	bl	8009b38 <I2C_WaitOnFlagUntilTimeout>
 80098ea:	4603      	mov	r3, r0
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d001      	beq.n	80098f4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80098f0:	2301      	movs	r3, #1
 80098f2:	e04d      	b.n	8009990 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80098f8:	b29b      	uxth	r3, r3
 80098fa:	2bff      	cmp	r3, #255	@ 0xff
 80098fc:	d90e      	bls.n	800991c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	22ff      	movs	r2, #255	@ 0xff
 8009902:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009908:	b2da      	uxtb	r2, r3
 800990a:	8979      	ldrh	r1, [r7, #10]
 800990c:	2300      	movs	r3, #0
 800990e:	9300      	str	r3, [sp, #0]
 8009910:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009914:	68f8      	ldr	r0, [r7, #12]
 8009916:	f000 fad3 	bl	8009ec0 <I2C_TransferConfig>
 800991a:	e00f      	b.n	800993c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009920:	b29a      	uxth	r2, r3
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800992a:	b2da      	uxtb	r2, r3
 800992c:	8979      	ldrh	r1, [r7, #10]
 800992e:	2300      	movs	r3, #0
 8009930:	9300      	str	r3, [sp, #0]
 8009932:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009936:	68f8      	ldr	r0, [r7, #12]
 8009938:	f000 fac2 	bl	8009ec0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009940:	b29b      	uxth	r3, r3
 8009942:	2b00      	cmp	r3, #0
 8009944:	d19a      	bne.n	800987c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009946:	697a      	ldr	r2, [r7, #20]
 8009948:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800994a:	68f8      	ldr	r0, [r7, #12]
 800994c:	f000 f994 	bl	8009c78 <I2C_WaitOnSTOPFlagUntilTimeout>
 8009950:	4603      	mov	r3, r0
 8009952:	2b00      	cmp	r3, #0
 8009954:	d001      	beq.n	800995a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8009956:	2301      	movs	r3, #1
 8009958:	e01a      	b.n	8009990 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	2220      	movs	r2, #32
 8009960:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	6859      	ldr	r1, [r3, #4]
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	681a      	ldr	r2, [r3, #0]
 800996c:	4b0b      	ldr	r3, [pc, #44]	@ (800999c <HAL_I2C_Mem_Read+0x230>)
 800996e:	400b      	ands	r3, r1
 8009970:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	2220      	movs	r2, #32
 8009976:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	2200      	movs	r2, #0
 800997e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	2200      	movs	r2, #0
 8009986:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800998a:	2300      	movs	r3, #0
 800998c:	e000      	b.n	8009990 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800998e:	2302      	movs	r3, #2
  }
}
 8009990:	4618      	mov	r0, r3
 8009992:	3718      	adds	r7, #24
 8009994:	46bd      	mov	sp, r7
 8009996:	bd80      	pop	{r7, pc}
 8009998:	80002400 	.word	0x80002400
 800999c:	fe00e800 	.word	0xfe00e800

080099a0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80099a0:	b580      	push	{r7, lr}
 80099a2:	b086      	sub	sp, #24
 80099a4:	af02      	add	r7, sp, #8
 80099a6:	60f8      	str	r0, [r7, #12]
 80099a8:	4608      	mov	r0, r1
 80099aa:	4611      	mov	r1, r2
 80099ac:	461a      	mov	r2, r3
 80099ae:	4603      	mov	r3, r0
 80099b0:	817b      	strh	r3, [r7, #10]
 80099b2:	460b      	mov	r3, r1
 80099b4:	813b      	strh	r3, [r7, #8]
 80099b6:	4613      	mov	r3, r2
 80099b8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80099ba:	88fb      	ldrh	r3, [r7, #6]
 80099bc:	b2da      	uxtb	r2, r3
 80099be:	8979      	ldrh	r1, [r7, #10]
 80099c0:	4b20      	ldr	r3, [pc, #128]	@ (8009a44 <I2C_RequestMemoryWrite+0xa4>)
 80099c2:	9300      	str	r3, [sp, #0]
 80099c4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80099c8:	68f8      	ldr	r0, [r7, #12]
 80099ca:	f000 fa79 	bl	8009ec0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80099ce:	69fa      	ldr	r2, [r7, #28]
 80099d0:	69b9      	ldr	r1, [r7, #24]
 80099d2:	68f8      	ldr	r0, [r7, #12]
 80099d4:	f000 f909 	bl	8009bea <I2C_WaitOnTXISFlagUntilTimeout>
 80099d8:	4603      	mov	r3, r0
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d001      	beq.n	80099e2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80099de:	2301      	movs	r3, #1
 80099e0:	e02c      	b.n	8009a3c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80099e2:	88fb      	ldrh	r3, [r7, #6]
 80099e4:	2b01      	cmp	r3, #1
 80099e6:	d105      	bne.n	80099f4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80099e8:	893b      	ldrh	r3, [r7, #8]
 80099ea:	b2da      	uxtb	r2, r3
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	629a      	str	r2, [r3, #40]	@ 0x28
 80099f2:	e015      	b.n	8009a20 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80099f4:	893b      	ldrh	r3, [r7, #8]
 80099f6:	0a1b      	lsrs	r3, r3, #8
 80099f8:	b29b      	uxth	r3, r3
 80099fa:	b2da      	uxtb	r2, r3
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009a02:	69fa      	ldr	r2, [r7, #28]
 8009a04:	69b9      	ldr	r1, [r7, #24]
 8009a06:	68f8      	ldr	r0, [r7, #12]
 8009a08:	f000 f8ef 	bl	8009bea <I2C_WaitOnTXISFlagUntilTimeout>
 8009a0c:	4603      	mov	r3, r0
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d001      	beq.n	8009a16 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8009a12:	2301      	movs	r3, #1
 8009a14:	e012      	b.n	8009a3c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009a16:	893b      	ldrh	r3, [r7, #8]
 8009a18:	b2da      	uxtb	r2, r3
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8009a20:	69fb      	ldr	r3, [r7, #28]
 8009a22:	9300      	str	r3, [sp, #0]
 8009a24:	69bb      	ldr	r3, [r7, #24]
 8009a26:	2200      	movs	r2, #0
 8009a28:	2180      	movs	r1, #128	@ 0x80
 8009a2a:	68f8      	ldr	r0, [r7, #12]
 8009a2c:	f000 f884 	bl	8009b38 <I2C_WaitOnFlagUntilTimeout>
 8009a30:	4603      	mov	r3, r0
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d001      	beq.n	8009a3a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8009a36:	2301      	movs	r3, #1
 8009a38:	e000      	b.n	8009a3c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8009a3a:	2300      	movs	r3, #0
}
 8009a3c:	4618      	mov	r0, r3
 8009a3e:	3710      	adds	r7, #16
 8009a40:	46bd      	mov	sp, r7
 8009a42:	bd80      	pop	{r7, pc}
 8009a44:	80002000 	.word	0x80002000

08009a48 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8009a48:	b580      	push	{r7, lr}
 8009a4a:	b086      	sub	sp, #24
 8009a4c:	af02      	add	r7, sp, #8
 8009a4e:	60f8      	str	r0, [r7, #12]
 8009a50:	4608      	mov	r0, r1
 8009a52:	4611      	mov	r1, r2
 8009a54:	461a      	mov	r2, r3
 8009a56:	4603      	mov	r3, r0
 8009a58:	817b      	strh	r3, [r7, #10]
 8009a5a:	460b      	mov	r3, r1
 8009a5c:	813b      	strh	r3, [r7, #8]
 8009a5e:	4613      	mov	r3, r2
 8009a60:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8009a62:	88fb      	ldrh	r3, [r7, #6]
 8009a64:	b2da      	uxtb	r2, r3
 8009a66:	8979      	ldrh	r1, [r7, #10]
 8009a68:	4b20      	ldr	r3, [pc, #128]	@ (8009aec <I2C_RequestMemoryRead+0xa4>)
 8009a6a:	9300      	str	r3, [sp, #0]
 8009a6c:	2300      	movs	r3, #0
 8009a6e:	68f8      	ldr	r0, [r7, #12]
 8009a70:	f000 fa26 	bl	8009ec0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009a74:	69fa      	ldr	r2, [r7, #28]
 8009a76:	69b9      	ldr	r1, [r7, #24]
 8009a78:	68f8      	ldr	r0, [r7, #12]
 8009a7a:	f000 f8b6 	bl	8009bea <I2C_WaitOnTXISFlagUntilTimeout>
 8009a7e:	4603      	mov	r3, r0
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d001      	beq.n	8009a88 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8009a84:	2301      	movs	r3, #1
 8009a86:	e02c      	b.n	8009ae2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009a88:	88fb      	ldrh	r3, [r7, #6]
 8009a8a:	2b01      	cmp	r3, #1
 8009a8c:	d105      	bne.n	8009a9a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009a8e:	893b      	ldrh	r3, [r7, #8]
 8009a90:	b2da      	uxtb	r2, r3
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	629a      	str	r2, [r3, #40]	@ 0x28
 8009a98:	e015      	b.n	8009ac6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8009a9a:	893b      	ldrh	r3, [r7, #8]
 8009a9c:	0a1b      	lsrs	r3, r3, #8
 8009a9e:	b29b      	uxth	r3, r3
 8009aa0:	b2da      	uxtb	r2, r3
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009aa8:	69fa      	ldr	r2, [r7, #28]
 8009aaa:	69b9      	ldr	r1, [r7, #24]
 8009aac:	68f8      	ldr	r0, [r7, #12]
 8009aae:	f000 f89c 	bl	8009bea <I2C_WaitOnTXISFlagUntilTimeout>
 8009ab2:	4603      	mov	r3, r0
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d001      	beq.n	8009abc <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8009ab8:	2301      	movs	r3, #1
 8009aba:	e012      	b.n	8009ae2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009abc:	893b      	ldrh	r3, [r7, #8]
 8009abe:	b2da      	uxtb	r2, r3
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8009ac6:	69fb      	ldr	r3, [r7, #28]
 8009ac8:	9300      	str	r3, [sp, #0]
 8009aca:	69bb      	ldr	r3, [r7, #24]
 8009acc:	2200      	movs	r2, #0
 8009ace:	2140      	movs	r1, #64	@ 0x40
 8009ad0:	68f8      	ldr	r0, [r7, #12]
 8009ad2:	f000 f831 	bl	8009b38 <I2C_WaitOnFlagUntilTimeout>
 8009ad6:	4603      	mov	r3, r0
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d001      	beq.n	8009ae0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8009adc:	2301      	movs	r3, #1
 8009ade:	e000      	b.n	8009ae2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8009ae0:	2300      	movs	r3, #0
}
 8009ae2:	4618      	mov	r0, r3
 8009ae4:	3710      	adds	r7, #16
 8009ae6:	46bd      	mov	sp, r7
 8009ae8:	bd80      	pop	{r7, pc}
 8009aea:	bf00      	nop
 8009aec:	80002000 	.word	0x80002000

08009af0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8009af0:	b480      	push	{r7}
 8009af2:	b083      	sub	sp, #12
 8009af4:	af00      	add	r7, sp, #0
 8009af6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	699b      	ldr	r3, [r3, #24]
 8009afe:	f003 0302 	and.w	r3, r3, #2
 8009b02:	2b02      	cmp	r3, #2
 8009b04:	d103      	bne.n	8009b0e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	2200      	movs	r2, #0
 8009b0c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	699b      	ldr	r3, [r3, #24]
 8009b14:	f003 0301 	and.w	r3, r3, #1
 8009b18:	2b01      	cmp	r3, #1
 8009b1a:	d007      	beq.n	8009b2c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	699a      	ldr	r2, [r3, #24]
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	f042 0201 	orr.w	r2, r2, #1
 8009b2a:	619a      	str	r2, [r3, #24]
  }
}
 8009b2c:	bf00      	nop
 8009b2e:	370c      	adds	r7, #12
 8009b30:	46bd      	mov	sp, r7
 8009b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b36:	4770      	bx	lr

08009b38 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8009b38:	b580      	push	{r7, lr}
 8009b3a:	b084      	sub	sp, #16
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	60f8      	str	r0, [r7, #12]
 8009b40:	60b9      	str	r1, [r7, #8]
 8009b42:	603b      	str	r3, [r7, #0]
 8009b44:	4613      	mov	r3, r2
 8009b46:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009b48:	e03b      	b.n	8009bc2 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009b4a:	69ba      	ldr	r2, [r7, #24]
 8009b4c:	6839      	ldr	r1, [r7, #0]
 8009b4e:	68f8      	ldr	r0, [r7, #12]
 8009b50:	f000 f8d6 	bl	8009d00 <I2C_IsErrorOccurred>
 8009b54:	4603      	mov	r3, r0
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d001      	beq.n	8009b5e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8009b5a:	2301      	movs	r3, #1
 8009b5c:	e041      	b.n	8009be2 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009b5e:	683b      	ldr	r3, [r7, #0]
 8009b60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b64:	d02d      	beq.n	8009bc2 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009b66:	f7fd fcdf 	bl	8007528 <HAL_GetTick>
 8009b6a:	4602      	mov	r2, r0
 8009b6c:	69bb      	ldr	r3, [r7, #24]
 8009b6e:	1ad3      	subs	r3, r2, r3
 8009b70:	683a      	ldr	r2, [r7, #0]
 8009b72:	429a      	cmp	r2, r3
 8009b74:	d302      	bcc.n	8009b7c <I2C_WaitOnFlagUntilTimeout+0x44>
 8009b76:	683b      	ldr	r3, [r7, #0]
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d122      	bne.n	8009bc2 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	699a      	ldr	r2, [r3, #24]
 8009b82:	68bb      	ldr	r3, [r7, #8]
 8009b84:	4013      	ands	r3, r2
 8009b86:	68ba      	ldr	r2, [r7, #8]
 8009b88:	429a      	cmp	r2, r3
 8009b8a:	bf0c      	ite	eq
 8009b8c:	2301      	moveq	r3, #1
 8009b8e:	2300      	movne	r3, #0
 8009b90:	b2db      	uxtb	r3, r3
 8009b92:	461a      	mov	r2, r3
 8009b94:	79fb      	ldrb	r3, [r7, #7]
 8009b96:	429a      	cmp	r2, r3
 8009b98:	d113      	bne.n	8009bc2 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009b9e:	f043 0220 	orr.w	r2, r3, #32
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	2220      	movs	r2, #32
 8009baa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	2200      	movs	r2, #0
 8009bb2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	2200      	movs	r2, #0
 8009bba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8009bbe:	2301      	movs	r3, #1
 8009bc0:	e00f      	b.n	8009be2 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	699a      	ldr	r2, [r3, #24]
 8009bc8:	68bb      	ldr	r3, [r7, #8]
 8009bca:	4013      	ands	r3, r2
 8009bcc:	68ba      	ldr	r2, [r7, #8]
 8009bce:	429a      	cmp	r2, r3
 8009bd0:	bf0c      	ite	eq
 8009bd2:	2301      	moveq	r3, #1
 8009bd4:	2300      	movne	r3, #0
 8009bd6:	b2db      	uxtb	r3, r3
 8009bd8:	461a      	mov	r2, r3
 8009bda:	79fb      	ldrb	r3, [r7, #7]
 8009bdc:	429a      	cmp	r2, r3
 8009bde:	d0b4      	beq.n	8009b4a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009be0:	2300      	movs	r3, #0
}
 8009be2:	4618      	mov	r0, r3
 8009be4:	3710      	adds	r7, #16
 8009be6:	46bd      	mov	sp, r7
 8009be8:	bd80      	pop	{r7, pc}

08009bea <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009bea:	b580      	push	{r7, lr}
 8009bec:	b084      	sub	sp, #16
 8009bee:	af00      	add	r7, sp, #0
 8009bf0:	60f8      	str	r0, [r7, #12]
 8009bf2:	60b9      	str	r1, [r7, #8]
 8009bf4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009bf6:	e033      	b.n	8009c60 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009bf8:	687a      	ldr	r2, [r7, #4]
 8009bfa:	68b9      	ldr	r1, [r7, #8]
 8009bfc:	68f8      	ldr	r0, [r7, #12]
 8009bfe:	f000 f87f 	bl	8009d00 <I2C_IsErrorOccurred>
 8009c02:	4603      	mov	r3, r0
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d001      	beq.n	8009c0c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009c08:	2301      	movs	r3, #1
 8009c0a:	e031      	b.n	8009c70 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009c0c:	68bb      	ldr	r3, [r7, #8]
 8009c0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c12:	d025      	beq.n	8009c60 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009c14:	f7fd fc88 	bl	8007528 <HAL_GetTick>
 8009c18:	4602      	mov	r2, r0
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	1ad3      	subs	r3, r2, r3
 8009c1e:	68ba      	ldr	r2, [r7, #8]
 8009c20:	429a      	cmp	r2, r3
 8009c22:	d302      	bcc.n	8009c2a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8009c24:	68bb      	ldr	r3, [r7, #8]
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d11a      	bne.n	8009c60 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	699b      	ldr	r3, [r3, #24]
 8009c30:	f003 0302 	and.w	r3, r3, #2
 8009c34:	2b02      	cmp	r3, #2
 8009c36:	d013      	beq.n	8009c60 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009c3c:	f043 0220 	orr.w	r2, r3, #32
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	2220      	movs	r2, #32
 8009c48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	2200      	movs	r2, #0
 8009c50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	2200      	movs	r2, #0
 8009c58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8009c5c:	2301      	movs	r3, #1
 8009c5e:	e007      	b.n	8009c70 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	699b      	ldr	r3, [r3, #24]
 8009c66:	f003 0302 	and.w	r3, r3, #2
 8009c6a:	2b02      	cmp	r3, #2
 8009c6c:	d1c4      	bne.n	8009bf8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8009c6e:	2300      	movs	r3, #0
}
 8009c70:	4618      	mov	r0, r3
 8009c72:	3710      	adds	r7, #16
 8009c74:	46bd      	mov	sp, r7
 8009c76:	bd80      	pop	{r7, pc}

08009c78 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009c78:	b580      	push	{r7, lr}
 8009c7a:	b084      	sub	sp, #16
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	60f8      	str	r0, [r7, #12]
 8009c80:	60b9      	str	r1, [r7, #8]
 8009c82:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009c84:	e02f      	b.n	8009ce6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009c86:	687a      	ldr	r2, [r7, #4]
 8009c88:	68b9      	ldr	r1, [r7, #8]
 8009c8a:	68f8      	ldr	r0, [r7, #12]
 8009c8c:	f000 f838 	bl	8009d00 <I2C_IsErrorOccurred>
 8009c90:	4603      	mov	r3, r0
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d001      	beq.n	8009c9a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009c96:	2301      	movs	r3, #1
 8009c98:	e02d      	b.n	8009cf6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009c9a:	f7fd fc45 	bl	8007528 <HAL_GetTick>
 8009c9e:	4602      	mov	r2, r0
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	1ad3      	subs	r3, r2, r3
 8009ca4:	68ba      	ldr	r2, [r7, #8]
 8009ca6:	429a      	cmp	r2, r3
 8009ca8:	d302      	bcc.n	8009cb0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8009caa:	68bb      	ldr	r3, [r7, #8]
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d11a      	bne.n	8009ce6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	699b      	ldr	r3, [r3, #24]
 8009cb6:	f003 0320 	and.w	r3, r3, #32
 8009cba:	2b20      	cmp	r3, #32
 8009cbc:	d013      	beq.n	8009ce6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009cc2:	f043 0220 	orr.w	r2, r3, #32
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	2220      	movs	r2, #32
 8009cce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	2200      	movs	r2, #0
 8009cd6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	2200      	movs	r2, #0
 8009cde:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8009ce2:	2301      	movs	r3, #1
 8009ce4:	e007      	b.n	8009cf6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	699b      	ldr	r3, [r3, #24]
 8009cec:	f003 0320 	and.w	r3, r3, #32
 8009cf0:	2b20      	cmp	r3, #32
 8009cf2:	d1c8      	bne.n	8009c86 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009cf4:	2300      	movs	r3, #0
}
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	3710      	adds	r7, #16
 8009cfa:	46bd      	mov	sp, r7
 8009cfc:	bd80      	pop	{r7, pc}
	...

08009d00 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009d00:	b580      	push	{r7, lr}
 8009d02:	b08a      	sub	sp, #40	@ 0x28
 8009d04:	af00      	add	r7, sp, #0
 8009d06:	60f8      	str	r0, [r7, #12]
 8009d08:	60b9      	str	r1, [r7, #8]
 8009d0a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009d0c:	2300      	movs	r3, #0
 8009d0e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	699b      	ldr	r3, [r3, #24]
 8009d18:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8009d1a:	2300      	movs	r3, #0
 8009d1c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8009d22:	69bb      	ldr	r3, [r7, #24]
 8009d24:	f003 0310 	and.w	r3, r3, #16
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d068      	beq.n	8009dfe <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	2210      	movs	r2, #16
 8009d32:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009d34:	e049      	b.n	8009dca <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8009d36:	68bb      	ldr	r3, [r7, #8]
 8009d38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d3c:	d045      	beq.n	8009dca <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8009d3e:	f7fd fbf3 	bl	8007528 <HAL_GetTick>
 8009d42:	4602      	mov	r2, r0
 8009d44:	69fb      	ldr	r3, [r7, #28]
 8009d46:	1ad3      	subs	r3, r2, r3
 8009d48:	68ba      	ldr	r2, [r7, #8]
 8009d4a:	429a      	cmp	r2, r3
 8009d4c:	d302      	bcc.n	8009d54 <I2C_IsErrorOccurred+0x54>
 8009d4e:	68bb      	ldr	r3, [r7, #8]
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d13a      	bne.n	8009dca <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	685b      	ldr	r3, [r3, #4]
 8009d5a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009d5e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009d66:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	699b      	ldr	r3, [r3, #24]
 8009d6e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009d72:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009d76:	d121      	bne.n	8009dbc <I2C_IsErrorOccurred+0xbc>
 8009d78:	697b      	ldr	r3, [r7, #20]
 8009d7a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009d7e:	d01d      	beq.n	8009dbc <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8009d80:	7cfb      	ldrb	r3, [r7, #19]
 8009d82:	2b20      	cmp	r3, #32
 8009d84:	d01a      	beq.n	8009dbc <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	685a      	ldr	r2, [r3, #4]
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009d94:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8009d96:	f7fd fbc7 	bl	8007528 <HAL_GetTick>
 8009d9a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009d9c:	e00e      	b.n	8009dbc <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8009d9e:	f7fd fbc3 	bl	8007528 <HAL_GetTick>
 8009da2:	4602      	mov	r2, r0
 8009da4:	69fb      	ldr	r3, [r7, #28]
 8009da6:	1ad3      	subs	r3, r2, r3
 8009da8:	2b19      	cmp	r3, #25
 8009daa:	d907      	bls.n	8009dbc <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8009dac:	6a3b      	ldr	r3, [r7, #32]
 8009dae:	f043 0320 	orr.w	r3, r3, #32
 8009db2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8009db4:	2301      	movs	r3, #1
 8009db6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8009dba:	e006      	b.n	8009dca <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	699b      	ldr	r3, [r3, #24]
 8009dc2:	f003 0320 	and.w	r3, r3, #32
 8009dc6:	2b20      	cmp	r3, #32
 8009dc8:	d1e9      	bne.n	8009d9e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	699b      	ldr	r3, [r3, #24]
 8009dd0:	f003 0320 	and.w	r3, r3, #32
 8009dd4:	2b20      	cmp	r3, #32
 8009dd6:	d003      	beq.n	8009de0 <I2C_IsErrorOccurred+0xe0>
 8009dd8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d0aa      	beq.n	8009d36 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8009de0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d103      	bne.n	8009df0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	2220      	movs	r2, #32
 8009dee:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8009df0:	6a3b      	ldr	r3, [r7, #32]
 8009df2:	f043 0304 	orr.w	r3, r3, #4
 8009df6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8009df8:	2301      	movs	r3, #1
 8009dfa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	699b      	ldr	r3, [r3, #24]
 8009e04:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8009e06:	69bb      	ldr	r3, [r7, #24]
 8009e08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d00b      	beq.n	8009e28 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8009e10:	6a3b      	ldr	r3, [r7, #32]
 8009e12:	f043 0301 	orr.w	r3, r3, #1
 8009e16:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009e20:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009e22:	2301      	movs	r3, #1
 8009e24:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8009e28:	69bb      	ldr	r3, [r7, #24]
 8009e2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d00b      	beq.n	8009e4a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8009e32:	6a3b      	ldr	r3, [r7, #32]
 8009e34:	f043 0308 	orr.w	r3, r3, #8
 8009e38:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8009e42:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009e44:	2301      	movs	r3, #1
 8009e46:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8009e4a:	69bb      	ldr	r3, [r7, #24]
 8009e4c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d00b      	beq.n	8009e6c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8009e54:	6a3b      	ldr	r3, [r7, #32]
 8009e56:	f043 0302 	orr.w	r3, r3, #2
 8009e5a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009e64:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009e66:	2301      	movs	r3, #1
 8009e68:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8009e6c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d01c      	beq.n	8009eae <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009e74:	68f8      	ldr	r0, [r7, #12]
 8009e76:	f7ff fe3b 	bl	8009af0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	6859      	ldr	r1, [r3, #4]
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	681a      	ldr	r2, [r3, #0]
 8009e84:	4b0d      	ldr	r3, [pc, #52]	@ (8009ebc <I2C_IsErrorOccurred+0x1bc>)
 8009e86:	400b      	ands	r3, r1
 8009e88:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009e8e:	6a3b      	ldr	r3, [r7, #32]
 8009e90:	431a      	orrs	r2, r3
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	2220      	movs	r2, #32
 8009e9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	2200      	movs	r2, #0
 8009ea2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	2200      	movs	r2, #0
 8009eaa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8009eae:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8009eb2:	4618      	mov	r0, r3
 8009eb4:	3728      	adds	r7, #40	@ 0x28
 8009eb6:	46bd      	mov	sp, r7
 8009eb8:	bd80      	pop	{r7, pc}
 8009eba:	bf00      	nop
 8009ebc:	fe00e800 	.word	0xfe00e800

08009ec0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8009ec0:	b480      	push	{r7}
 8009ec2:	b087      	sub	sp, #28
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	60f8      	str	r0, [r7, #12]
 8009ec8:	607b      	str	r3, [r7, #4]
 8009eca:	460b      	mov	r3, r1
 8009ecc:	817b      	strh	r3, [r7, #10]
 8009ece:	4613      	mov	r3, r2
 8009ed0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009ed2:	897b      	ldrh	r3, [r7, #10]
 8009ed4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009ed8:	7a7b      	ldrb	r3, [r7, #9]
 8009eda:	041b      	lsls	r3, r3, #16
 8009edc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009ee0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009ee6:	6a3b      	ldr	r3, [r7, #32]
 8009ee8:	4313      	orrs	r3, r2
 8009eea:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009eee:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	685a      	ldr	r2, [r3, #4]
 8009ef6:	6a3b      	ldr	r3, [r7, #32]
 8009ef8:	0d5b      	lsrs	r3, r3, #21
 8009efa:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8009efe:	4b08      	ldr	r3, [pc, #32]	@ (8009f20 <I2C_TransferConfig+0x60>)
 8009f00:	430b      	orrs	r3, r1
 8009f02:	43db      	mvns	r3, r3
 8009f04:	ea02 0103 	and.w	r1, r2, r3
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	697a      	ldr	r2, [r7, #20]
 8009f0e:	430a      	orrs	r2, r1
 8009f10:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8009f12:	bf00      	nop
 8009f14:	371c      	adds	r7, #28
 8009f16:	46bd      	mov	sp, r7
 8009f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f1c:	4770      	bx	lr
 8009f1e:	bf00      	nop
 8009f20:	03ff63ff 	.word	0x03ff63ff

08009f24 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009f24:	b480      	push	{r7}
 8009f26:	b083      	sub	sp, #12
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	6078      	str	r0, [r7, #4]
 8009f2c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009f34:	b2db      	uxtb	r3, r3
 8009f36:	2b20      	cmp	r3, #32
 8009f38:	d138      	bne.n	8009fac <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009f40:	2b01      	cmp	r3, #1
 8009f42:	d101      	bne.n	8009f48 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009f44:	2302      	movs	r3, #2
 8009f46:	e032      	b.n	8009fae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	2201      	movs	r2, #1
 8009f4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	2224      	movs	r2, #36	@ 0x24
 8009f54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	681a      	ldr	r2, [r3, #0]
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	f022 0201 	bic.w	r2, r2, #1
 8009f66:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	681a      	ldr	r2, [r3, #0]
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8009f76:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	6819      	ldr	r1, [r3, #0]
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	683a      	ldr	r2, [r7, #0]
 8009f84:	430a      	orrs	r2, r1
 8009f86:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	681a      	ldr	r2, [r3, #0]
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	f042 0201 	orr.w	r2, r2, #1
 8009f96:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	2220      	movs	r2, #32
 8009f9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	2200      	movs	r2, #0
 8009fa4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009fa8:	2300      	movs	r3, #0
 8009faa:	e000      	b.n	8009fae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009fac:	2302      	movs	r3, #2
  }
}
 8009fae:	4618      	mov	r0, r3
 8009fb0:	370c      	adds	r7, #12
 8009fb2:	46bd      	mov	sp, r7
 8009fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb8:	4770      	bx	lr

08009fba <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009fba:	b480      	push	{r7}
 8009fbc:	b085      	sub	sp, #20
 8009fbe:	af00      	add	r7, sp, #0
 8009fc0:	6078      	str	r0, [r7, #4]
 8009fc2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009fca:	b2db      	uxtb	r3, r3
 8009fcc:	2b20      	cmp	r3, #32
 8009fce:	d139      	bne.n	800a044 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009fd6:	2b01      	cmp	r3, #1
 8009fd8:	d101      	bne.n	8009fde <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8009fda:	2302      	movs	r3, #2
 8009fdc:	e033      	b.n	800a046 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	2201      	movs	r2, #1
 8009fe2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	2224      	movs	r2, #36	@ 0x24
 8009fea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	681a      	ldr	r2, [r3, #0]
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	f022 0201 	bic.w	r2, r2, #1
 8009ffc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800a00c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800a00e:	683b      	ldr	r3, [r7, #0]
 800a010:	021b      	lsls	r3, r3, #8
 800a012:	68fa      	ldr	r2, [r7, #12]
 800a014:	4313      	orrs	r3, r2
 800a016:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	68fa      	ldr	r2, [r7, #12]
 800a01e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	681a      	ldr	r2, [r3, #0]
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	f042 0201 	orr.w	r2, r2, #1
 800a02e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	2220      	movs	r2, #32
 800a034:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	2200      	movs	r2, #0
 800a03c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800a040:	2300      	movs	r3, #0
 800a042:	e000      	b.n	800a046 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800a044:	2302      	movs	r3, #2
  }
}
 800a046:	4618      	mov	r0, r3
 800a048:	3714      	adds	r7, #20
 800a04a:	46bd      	mov	sp, r7
 800a04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a050:	4770      	bx	lr
	...

0800a054 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C3 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C3 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 800a054:	b480      	push	{r7}
 800a056:	b083      	sub	sp, #12
 800a058:	af00      	add	r7, sp, #0
 800a05a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 800a05c:	4b05      	ldr	r3, [pc, #20]	@ (800a074 <HAL_I2CEx_EnableFastModePlus+0x20>)
 800a05e:	685a      	ldr	r2, [r3, #4]
 800a060:	4904      	ldr	r1, [pc, #16]	@ (800a074 <HAL_I2CEx_EnableFastModePlus+0x20>)
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	4313      	orrs	r3, r2
 800a066:	604b      	str	r3, [r1, #4]
}
 800a068:	bf00      	nop
 800a06a:	370c      	adds	r7, #12
 800a06c:	46bd      	mov	sp, r7
 800a06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a072:	4770      	bx	lr
 800a074:	40010000 	.word	0x40010000

0800a078 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 800a078:	b580      	push	{r7, lr}
 800a07a:	b084      	sub	sp, #16
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 800a080:	2300      	movs	r3, #0
 800a082:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	2b00      	cmp	r3, #0
 800a088:	d01e      	beq.n	800a0c8 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 800a08a:	4b13      	ldr	r3, [pc, #76]	@ (800a0d8 <HAL_IPCC_Init+0x60>)
 800a08c:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800a094:	b2db      	uxtb	r3, r3
 800a096:	2b00      	cmp	r3, #0
 800a098:	d102      	bne.n	800a0a0 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 800a09a:	6878      	ldr	r0, [r7, #4]
 800a09c:	f7f8 fd4e 	bl	8002b3c <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 800a0a0:	68b8      	ldr	r0, [r7, #8]
 800a0a2:	f000 f85b 	bl	800a15c <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 800a0a6:	68bb      	ldr	r3, [r7, #8]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	f043 1201 	orr.w	r2, r3, #65537	@ 0x10001
 800a0ae:	68bb      	ldr	r3, [r7, #8]
 800a0b0:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 800a0b2:	6878      	ldr	r0, [r7, #4]
 800a0b4:	f000 f82c 	bl	800a110 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	2200      	movs	r2, #0
 800a0bc:	635a      	str	r2, [r3, #52]	@ 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	2201      	movs	r2, #1
 800a0c2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 800a0c6:	e001      	b.n	800a0cc <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 800a0c8:	2301      	movs	r3, #1
 800a0ca:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 800a0cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0ce:	4618      	mov	r0, r3
 800a0d0:	3710      	adds	r7, #16
 800a0d2:	46bd      	mov	sp, r7
 800a0d4:	bd80      	pop	{r7, pc}
 800a0d6:	bf00      	nop
 800a0d8:	58000c00 	.word	0x58000c00

0800a0dc <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 800a0dc:	b480      	push	{r7}
 800a0de:	b085      	sub	sp, #20
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	60f8      	str	r0, [r7, #12]
 800a0e4:	60b9      	str	r1, [r7, #8]
 800a0e6:	4613      	mov	r3, r2
 800a0e8:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 800a0ea:	bf00      	nop
 800a0ec:	3714      	adds	r7, #20
 800a0ee:	46bd      	mov	sp, r7
 800a0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f4:	4770      	bx	lr

0800a0f6 <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 800a0f6:	b480      	push	{r7}
 800a0f8:	b085      	sub	sp, #20
 800a0fa:	af00      	add	r7, sp, #0
 800a0fc:	60f8      	str	r0, [r7, #12]
 800a0fe:	60b9      	str	r1, [r7, #8]
 800a100:	4613      	mov	r3, r2
 800a102:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 800a104:	bf00      	nop
 800a106:	3714      	adds	r7, #20
 800a108:	46bd      	mov	sp, r7
 800a10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a10e:	4770      	bx	lr

0800a110 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 800a110:	b480      	push	{r7}
 800a112:	b085      	sub	sp, #20
 800a114:	af00      	add	r7, sp, #0
 800a116:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 800a118:	2300      	movs	r3, #0
 800a11a:	60fb      	str	r3, [r7, #12]
 800a11c:	e00f      	b.n	800a13e <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 800a11e:	687a      	ldr	r2, [r7, #4]
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	009b      	lsls	r3, r3, #2
 800a124:	4413      	add	r3, r2
 800a126:	4a0b      	ldr	r2, [pc, #44]	@ (800a154 <IPCC_SetDefaultCallbacks+0x44>)
 800a128:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 800a12a:	687a      	ldr	r2, [r7, #4]
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	3306      	adds	r3, #6
 800a130:	009b      	lsls	r3, r3, #2
 800a132:	4413      	add	r3, r2
 800a134:	4a08      	ldr	r2, [pc, #32]	@ (800a158 <IPCC_SetDefaultCallbacks+0x48>)
 800a136:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	3301      	adds	r3, #1
 800a13c:	60fb      	str	r3, [r7, #12]
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	2b05      	cmp	r3, #5
 800a142:	d9ec      	bls.n	800a11e <IPCC_SetDefaultCallbacks+0xe>
  }
}
 800a144:	bf00      	nop
 800a146:	bf00      	nop
 800a148:	3714      	adds	r7, #20
 800a14a:	46bd      	mov	sp, r7
 800a14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a150:	4770      	bx	lr
 800a152:	bf00      	nop
 800a154:	0800a0dd 	.word	0x0800a0dd
 800a158:	0800a0f7 	.word	0x0800a0f7

0800a15c <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 800a15c:	b480      	push	{r7}
 800a15e:	b083      	sub	sp, #12
 800a160:	af00      	add	r7, sp, #0
 800a162:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	2200      	movs	r2, #0
 800a168:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	f04f 123f 	mov.w	r2, #4128831	@ 0x3f003f
 800a170:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	223f      	movs	r2, #63	@ 0x3f
 800a176:	609a      	str	r2, [r3, #8]
}
 800a178:	bf00      	nop
 800a17a:	370c      	adds	r7, #12
 800a17c:	46bd      	mov	sp, r7
 800a17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a182:	4770      	bx	lr

0800a184 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800a184:	b580      	push	{r7, lr}
 800a186:	b084      	sub	sp, #16
 800a188:	af00      	add	r7, sp, #0
 800a18a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d101      	bne.n	800a196 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800a192:	2301      	movs	r3, #1
 800a194:	e0c0      	b.n	800a318 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 800a19c:	b2db      	uxtb	r3, r3
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d106      	bne.n	800a1b0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	2200      	movs	r2, #0
 800a1a6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800a1aa:	6878      	ldr	r0, [r7, #4]
 800a1ac:	f00e fcda 	bl	8018b64 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	2203      	movs	r2, #3
 800a1b4:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	4618      	mov	r0, r3
 800a1be:	f006 ffc4 	bl	801114a <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a1c2:	2300      	movs	r3, #0
 800a1c4:	73fb      	strb	r3, [r7, #15]
 800a1c6:	e03e      	b.n	800a246 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800a1c8:	7bfa      	ldrb	r2, [r7, #15]
 800a1ca:	6879      	ldr	r1, [r7, #4]
 800a1cc:	4613      	mov	r3, r2
 800a1ce:	009b      	lsls	r3, r3, #2
 800a1d0:	4413      	add	r3, r2
 800a1d2:	00db      	lsls	r3, r3, #3
 800a1d4:	440b      	add	r3, r1
 800a1d6:	3311      	adds	r3, #17
 800a1d8:	2201      	movs	r2, #1
 800a1da:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800a1dc:	7bfa      	ldrb	r2, [r7, #15]
 800a1de:	6879      	ldr	r1, [r7, #4]
 800a1e0:	4613      	mov	r3, r2
 800a1e2:	009b      	lsls	r3, r3, #2
 800a1e4:	4413      	add	r3, r2
 800a1e6:	00db      	lsls	r3, r3, #3
 800a1e8:	440b      	add	r3, r1
 800a1ea:	3310      	adds	r3, #16
 800a1ec:	7bfa      	ldrb	r2, [r7, #15]
 800a1ee:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800a1f0:	7bfa      	ldrb	r2, [r7, #15]
 800a1f2:	6879      	ldr	r1, [r7, #4]
 800a1f4:	4613      	mov	r3, r2
 800a1f6:	009b      	lsls	r3, r3, #2
 800a1f8:	4413      	add	r3, r2
 800a1fa:	00db      	lsls	r3, r3, #3
 800a1fc:	440b      	add	r3, r1
 800a1fe:	3313      	adds	r3, #19
 800a200:	2200      	movs	r2, #0
 800a202:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800a204:	7bfa      	ldrb	r2, [r7, #15]
 800a206:	6879      	ldr	r1, [r7, #4]
 800a208:	4613      	mov	r3, r2
 800a20a:	009b      	lsls	r3, r3, #2
 800a20c:	4413      	add	r3, r2
 800a20e:	00db      	lsls	r3, r3, #3
 800a210:	440b      	add	r3, r1
 800a212:	3320      	adds	r3, #32
 800a214:	2200      	movs	r2, #0
 800a216:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800a218:	7bfa      	ldrb	r2, [r7, #15]
 800a21a:	6879      	ldr	r1, [r7, #4]
 800a21c:	4613      	mov	r3, r2
 800a21e:	009b      	lsls	r3, r3, #2
 800a220:	4413      	add	r3, r2
 800a222:	00db      	lsls	r3, r3, #3
 800a224:	440b      	add	r3, r1
 800a226:	3324      	adds	r3, #36	@ 0x24
 800a228:	2200      	movs	r2, #0
 800a22a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800a22c:	7bfb      	ldrb	r3, [r7, #15]
 800a22e:	6879      	ldr	r1, [r7, #4]
 800a230:	1c5a      	adds	r2, r3, #1
 800a232:	4613      	mov	r3, r2
 800a234:	009b      	lsls	r3, r3, #2
 800a236:	4413      	add	r3, r2
 800a238:	00db      	lsls	r3, r3, #3
 800a23a:	440b      	add	r3, r1
 800a23c:	2200      	movs	r2, #0
 800a23e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a240:	7bfb      	ldrb	r3, [r7, #15]
 800a242:	3301      	adds	r3, #1
 800a244:	73fb      	strb	r3, [r7, #15]
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	791b      	ldrb	r3, [r3, #4]
 800a24a:	7bfa      	ldrb	r2, [r7, #15]
 800a24c:	429a      	cmp	r2, r3
 800a24e:	d3bb      	bcc.n	800a1c8 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a250:	2300      	movs	r3, #0
 800a252:	73fb      	strb	r3, [r7, #15]
 800a254:	e044      	b.n	800a2e0 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800a256:	7bfa      	ldrb	r2, [r7, #15]
 800a258:	6879      	ldr	r1, [r7, #4]
 800a25a:	4613      	mov	r3, r2
 800a25c:	009b      	lsls	r3, r3, #2
 800a25e:	4413      	add	r3, r2
 800a260:	00db      	lsls	r3, r3, #3
 800a262:	440b      	add	r3, r1
 800a264:	f203 1351 	addw	r3, r3, #337	@ 0x151
 800a268:	2200      	movs	r2, #0
 800a26a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800a26c:	7bfa      	ldrb	r2, [r7, #15]
 800a26e:	6879      	ldr	r1, [r7, #4]
 800a270:	4613      	mov	r3, r2
 800a272:	009b      	lsls	r3, r3, #2
 800a274:	4413      	add	r3, r2
 800a276:	00db      	lsls	r3, r3, #3
 800a278:	440b      	add	r3, r1
 800a27a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a27e:	7bfa      	ldrb	r2, [r7, #15]
 800a280:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800a282:	7bfa      	ldrb	r2, [r7, #15]
 800a284:	6879      	ldr	r1, [r7, #4]
 800a286:	4613      	mov	r3, r2
 800a288:	009b      	lsls	r3, r3, #2
 800a28a:	4413      	add	r3, r2
 800a28c:	00db      	lsls	r3, r3, #3
 800a28e:	440b      	add	r3, r1
 800a290:	f203 1353 	addw	r3, r3, #339	@ 0x153
 800a294:	2200      	movs	r2, #0
 800a296:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800a298:	7bfa      	ldrb	r2, [r7, #15]
 800a29a:	6879      	ldr	r1, [r7, #4]
 800a29c:	4613      	mov	r3, r2
 800a29e:	009b      	lsls	r3, r3, #2
 800a2a0:	4413      	add	r3, r2
 800a2a2:	00db      	lsls	r3, r3, #3
 800a2a4:	440b      	add	r3, r1
 800a2a6:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 800a2aa:	2200      	movs	r2, #0
 800a2ac:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800a2ae:	7bfa      	ldrb	r2, [r7, #15]
 800a2b0:	6879      	ldr	r1, [r7, #4]
 800a2b2:	4613      	mov	r3, r2
 800a2b4:	009b      	lsls	r3, r3, #2
 800a2b6:	4413      	add	r3, r2
 800a2b8:	00db      	lsls	r3, r3, #3
 800a2ba:	440b      	add	r3, r1
 800a2bc:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a2c0:	2200      	movs	r2, #0
 800a2c2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800a2c4:	7bfa      	ldrb	r2, [r7, #15]
 800a2c6:	6879      	ldr	r1, [r7, #4]
 800a2c8:	4613      	mov	r3, r2
 800a2ca:	009b      	lsls	r3, r3, #2
 800a2cc:	4413      	add	r3, r2
 800a2ce:	00db      	lsls	r3, r3, #3
 800a2d0:	440b      	add	r3, r1
 800a2d2:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800a2d6:	2200      	movs	r2, #0
 800a2d8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a2da:	7bfb      	ldrb	r3, [r7, #15]
 800a2dc:	3301      	adds	r3, #1
 800a2de:	73fb      	strb	r3, [r7, #15]
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	791b      	ldrb	r3, [r3, #4]
 800a2e4:	7bfa      	ldrb	r2, [r7, #15]
 800a2e6:	429a      	cmp	r2, r3
 800a2e8:	d3b5      	bcc.n	800a256 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	6818      	ldr	r0, [r3, #0]
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	3304      	adds	r3, #4
 800a2f2:	e893 0006 	ldmia.w	r3, {r1, r2}
 800a2f6:	f006 ff43 	bl	8011180 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	2200      	movs	r2, #0
 800a2fe:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	2201      	movs	r2, #1
 800a304:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	7a9b      	ldrb	r3, [r3, #10]
 800a30c:	2b01      	cmp	r3, #1
 800a30e:	d102      	bne.n	800a316 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800a310:	6878      	ldr	r0, [r7, #4]
 800a312:	f001 fc0e 	bl	800bb32 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800a316:	2300      	movs	r3, #0
}
 800a318:	4618      	mov	r0, r3
 800a31a:	3710      	adds	r7, #16
 800a31c:	46bd      	mov	sp, r7
 800a31e:	bd80      	pop	{r7, pc}

0800a320 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800a320:	b580      	push	{r7, lr}
 800a322:	b082      	sub	sp, #8
 800a324:	af00      	add	r7, sp, #0
 800a326:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800a32e:	2b01      	cmp	r3, #1
 800a330:	d101      	bne.n	800a336 <HAL_PCD_Start+0x16>
 800a332:	2302      	movs	r3, #2
 800a334:	e012      	b.n	800a35c <HAL_PCD_Start+0x3c>
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	2201      	movs	r2, #1
 800a33a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	4618      	mov	r0, r3
 800a344:	f006 feea 	bl	801111c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	4618      	mov	r0, r3
 800a34e:	f008 fcc7 	bl	8012ce0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	2200      	movs	r2, #0
 800a356:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800a35a:	2300      	movs	r3, #0
}
 800a35c:	4618      	mov	r0, r3
 800a35e:	3708      	adds	r7, #8
 800a360:	46bd      	mov	sp, r7
 800a362:	bd80      	pop	{r7, pc}

0800a364 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800a364:	b580      	push	{r7, lr}
 800a366:	b084      	sub	sp, #16
 800a368:	af00      	add	r7, sp, #0
 800a36a:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	4618      	mov	r0, r3
 800a372:	f008 fccc 	bl	8012d0e <USB_ReadInterrupts>
 800a376:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d003      	beq.n	800a38a <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800a382:	6878      	ldr	r0, [r7, #4]
 800a384:	f000 fb06 	bl	800a994 <PCD_EP_ISR_Handler>

    return;
 800a388:	e110      	b.n	800a5ac <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a390:	2b00      	cmp	r3, #0
 800a392:	d013      	beq.n	800a3bc <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800a39c:	b29a      	uxth	r2, r3
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a3a6:	b292      	uxth	r2, r2
 800a3a8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800a3ac:	6878      	ldr	r0, [r7, #4]
 800a3ae:	f00e fc66 	bl	8018c7e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800a3b2:	2100      	movs	r1, #0
 800a3b4:	6878      	ldr	r0, [r7, #4]
 800a3b6:	f000 f8fc 	bl	800a5b2 <HAL_PCD_SetAddress>

    return;
 800a3ba:	e0f7      	b.n	800a5ac <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d00c      	beq.n	800a3e0 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800a3ce:	b29a      	uxth	r2, r3
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800a3d8:	b292      	uxth	r2, r2
 800a3da:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800a3de:	e0e5      	b.n	800a5ac <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d00c      	beq.n	800a404 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800a3f2:	b29a      	uxth	r2, r3
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800a3fc:	b292      	uxth	r2, r2
 800a3fe:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800a402:	e0d3      	b.n	800a5ac <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d034      	beq.n	800a478 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800a416:	b29a      	uxth	r2, r3
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	f022 0204 	bic.w	r2, r2, #4
 800a420:	b292      	uxth	r2, r2
 800a422:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800a42e:	b29a      	uxth	r2, r3
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	f022 0208 	bic.w	r2, r2, #8
 800a438:	b292      	uxth	r2, r2
 800a43a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 800a444:	2b01      	cmp	r3, #1
 800a446:	d107      	bne.n	800a458 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	2200      	movs	r2, #0
 800a44c:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800a450:	2100      	movs	r1, #0
 800a452:	6878      	ldr	r0, [r7, #4]
 800a454:	f00e fe08 	bl	8019068 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800a458:	6878      	ldr	r0, [r7, #4]
 800a45a:	f00e fc49 	bl	8018cf0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800a466:	b29a      	uxth	r2, r3
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800a470:	b292      	uxth	r2, r2
 800a472:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800a476:	e099      	b.n	800a5ac <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d027      	beq.n	800a4d2 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800a48a:	b29a      	uxth	r2, r3
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	f042 0208 	orr.w	r2, r2, #8
 800a494:	b292      	uxth	r2, r2
 800a496:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800a4a2:	b29a      	uxth	r2, r3
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a4ac:	b292      	uxth	r2, r2
 800a4ae:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800a4ba:	b29a      	uxth	r2, r3
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	f042 0204 	orr.w	r2, r2, #4
 800a4c4:	b292      	uxth	r2, r2
 800a4c6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800a4ca:	6878      	ldr	r0, [r7, #4]
 800a4cc:	f00e fbf6 	bl	8018cbc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800a4d0:	e06c      	b.n	800a5ac <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d040      	beq.n	800a55e <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800a4e4:	b29a      	uxth	r2, r3
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a4ee:	b292      	uxth	r2, r2
 800a4f0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d12b      	bne.n	800a556 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800a506:	b29a      	uxth	r2, r3
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	f042 0204 	orr.w	r2, r2, #4
 800a510:	b292      	uxth	r2, r2
 800a512:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800a51e:	b29a      	uxth	r2, r3
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	f042 0208 	orr.w	r2, r2, #8
 800a528:	b292      	uxth	r2, r2
 800a52a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	2201      	movs	r2, #1
 800a532:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800a53e:	b29b      	uxth	r3, r3
 800a540:	089b      	lsrs	r3, r3, #2
 800a542:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800a54c:	2101      	movs	r1, #1
 800a54e:	6878      	ldr	r0, [r7, #4]
 800a550:	f00e fd8a 	bl	8019068 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 800a554:	e02a      	b.n	800a5ac <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 800a556:	6878      	ldr	r0, [r7, #4]
 800a558:	f00e fbb0 	bl	8018cbc <HAL_PCD_SuspendCallback>
    return;
 800a55c:	e026      	b.n	800a5ac <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a564:	2b00      	cmp	r3, #0
 800a566:	d00f      	beq.n	800a588 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800a570:	b29a      	uxth	r2, r3
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800a57a:	b292      	uxth	r2, r2
 800a57c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800a580:	6878      	ldr	r0, [r7, #4]
 800a582:	f00e fb6e 	bl	8018c62 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800a586:	e011      	b.n	800a5ac <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d00c      	beq.n	800a5ac <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800a59a:	b29a      	uxth	r2, r3
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a5a4:	b292      	uxth	r2, r2
 800a5a6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800a5aa:	bf00      	nop
  }
}
 800a5ac:	3710      	adds	r7, #16
 800a5ae:	46bd      	mov	sp, r7
 800a5b0:	bd80      	pop	{r7, pc}

0800a5b2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800a5b2:	b580      	push	{r7, lr}
 800a5b4:	b082      	sub	sp, #8
 800a5b6:	af00      	add	r7, sp, #0
 800a5b8:	6078      	str	r0, [r7, #4]
 800a5ba:	460b      	mov	r3, r1
 800a5bc:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800a5c4:	2b01      	cmp	r3, #1
 800a5c6:	d101      	bne.n	800a5cc <HAL_PCD_SetAddress+0x1a>
 800a5c8:	2302      	movs	r3, #2
 800a5ca:	e012      	b.n	800a5f2 <HAL_PCD_SetAddress+0x40>
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	2201      	movs	r2, #1
 800a5d0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	78fa      	ldrb	r2, [r7, #3]
 800a5d8:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	78fa      	ldrb	r2, [r7, #3]
 800a5e0:	4611      	mov	r1, r2
 800a5e2:	4618      	mov	r0, r3
 800a5e4:	f008 fb68 	bl	8012cb8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	2200      	movs	r2, #0
 800a5ec:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800a5f0:	2300      	movs	r3, #0
}
 800a5f2:	4618      	mov	r0, r3
 800a5f4:	3708      	adds	r7, #8
 800a5f6:	46bd      	mov	sp, r7
 800a5f8:	bd80      	pop	{r7, pc}

0800a5fa <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800a5fa:	b580      	push	{r7, lr}
 800a5fc:	b084      	sub	sp, #16
 800a5fe:	af00      	add	r7, sp, #0
 800a600:	6078      	str	r0, [r7, #4]
 800a602:	4608      	mov	r0, r1
 800a604:	4611      	mov	r1, r2
 800a606:	461a      	mov	r2, r3
 800a608:	4603      	mov	r3, r0
 800a60a:	70fb      	strb	r3, [r7, #3]
 800a60c:	460b      	mov	r3, r1
 800a60e:	803b      	strh	r3, [r7, #0]
 800a610:	4613      	mov	r3, r2
 800a612:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800a614:	2300      	movs	r3, #0
 800a616:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800a618:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	da0e      	bge.n	800a63e <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a620:	78fb      	ldrb	r3, [r7, #3]
 800a622:	f003 0207 	and.w	r2, r3, #7
 800a626:	4613      	mov	r3, r2
 800a628:	009b      	lsls	r3, r3, #2
 800a62a:	4413      	add	r3, r2
 800a62c:	00db      	lsls	r3, r3, #3
 800a62e:	3310      	adds	r3, #16
 800a630:	687a      	ldr	r2, [r7, #4]
 800a632:	4413      	add	r3, r2
 800a634:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	2201      	movs	r2, #1
 800a63a:	705a      	strb	r2, [r3, #1]
 800a63c:	e00e      	b.n	800a65c <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a63e:	78fb      	ldrb	r3, [r7, #3]
 800a640:	f003 0207 	and.w	r2, r3, #7
 800a644:	4613      	mov	r3, r2
 800a646:	009b      	lsls	r3, r3, #2
 800a648:	4413      	add	r3, r2
 800a64a:	00db      	lsls	r3, r3, #3
 800a64c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a650:	687a      	ldr	r2, [r7, #4]
 800a652:	4413      	add	r3, r2
 800a654:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	2200      	movs	r2, #0
 800a65a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800a65c:	78fb      	ldrb	r3, [r7, #3]
 800a65e:	f003 0307 	and.w	r3, r3, #7
 800a662:	b2da      	uxtb	r2, r3
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 800a668:	883b      	ldrh	r3, [r7, #0]
 800a66a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	78ba      	ldrb	r2, [r7, #2]
 800a676:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800a678:	78bb      	ldrb	r3, [r7, #2]
 800a67a:	2b02      	cmp	r3, #2
 800a67c:	d102      	bne.n	800a684 <HAL_PCD_EP_Open+0x8a>
  {
    ep->data_pid_start = 0U;
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	2200      	movs	r2, #0
 800a682:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800a68a:	2b01      	cmp	r3, #1
 800a68c:	d101      	bne.n	800a692 <HAL_PCD_EP_Open+0x98>
 800a68e:	2302      	movs	r3, #2
 800a690:	e00e      	b.n	800a6b0 <HAL_PCD_EP_Open+0xb6>
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	2201      	movs	r2, #1
 800a696:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	68f9      	ldr	r1, [r7, #12]
 800a6a0:	4618      	mov	r0, r3
 800a6a2:	f006 fd8b 	bl	80111bc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	2200      	movs	r2, #0
 800a6aa:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 800a6ae:	7afb      	ldrb	r3, [r7, #11]
}
 800a6b0:	4618      	mov	r0, r3
 800a6b2:	3710      	adds	r7, #16
 800a6b4:	46bd      	mov	sp, r7
 800a6b6:	bd80      	pop	{r7, pc}

0800a6b8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a6b8:	b580      	push	{r7, lr}
 800a6ba:	b084      	sub	sp, #16
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	6078      	str	r0, [r7, #4]
 800a6c0:	460b      	mov	r3, r1
 800a6c2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800a6c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	da0e      	bge.n	800a6ea <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a6cc:	78fb      	ldrb	r3, [r7, #3]
 800a6ce:	f003 0207 	and.w	r2, r3, #7
 800a6d2:	4613      	mov	r3, r2
 800a6d4:	009b      	lsls	r3, r3, #2
 800a6d6:	4413      	add	r3, r2
 800a6d8:	00db      	lsls	r3, r3, #3
 800a6da:	3310      	adds	r3, #16
 800a6dc:	687a      	ldr	r2, [r7, #4]
 800a6de:	4413      	add	r3, r2
 800a6e0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	2201      	movs	r2, #1
 800a6e6:	705a      	strb	r2, [r3, #1]
 800a6e8:	e00e      	b.n	800a708 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a6ea:	78fb      	ldrb	r3, [r7, #3]
 800a6ec:	f003 0207 	and.w	r2, r3, #7
 800a6f0:	4613      	mov	r3, r2
 800a6f2:	009b      	lsls	r3, r3, #2
 800a6f4:	4413      	add	r3, r2
 800a6f6:	00db      	lsls	r3, r3, #3
 800a6f8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a6fc:	687a      	ldr	r2, [r7, #4]
 800a6fe:	4413      	add	r3, r2
 800a700:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	2200      	movs	r2, #0
 800a706:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800a708:	78fb      	ldrb	r3, [r7, #3]
 800a70a:	f003 0307 	and.w	r3, r3, #7
 800a70e:	b2da      	uxtb	r2, r3
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800a71a:	2b01      	cmp	r3, #1
 800a71c:	d101      	bne.n	800a722 <HAL_PCD_EP_Close+0x6a>
 800a71e:	2302      	movs	r3, #2
 800a720:	e00e      	b.n	800a740 <HAL_PCD_EP_Close+0x88>
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	2201      	movs	r2, #1
 800a726:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	68f9      	ldr	r1, [r7, #12]
 800a730:	4618      	mov	r0, r3
 800a732:	f007 fa2b 	bl	8011b8c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	2200      	movs	r2, #0
 800a73a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 800a73e:	2300      	movs	r3, #0
}
 800a740:	4618      	mov	r0, r3
 800a742:	3710      	adds	r7, #16
 800a744:	46bd      	mov	sp, r7
 800a746:	bd80      	pop	{r7, pc}

0800a748 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800a748:	b580      	push	{r7, lr}
 800a74a:	b086      	sub	sp, #24
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	60f8      	str	r0, [r7, #12]
 800a750:	607a      	str	r2, [r7, #4]
 800a752:	603b      	str	r3, [r7, #0]
 800a754:	460b      	mov	r3, r1
 800a756:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a758:	7afb      	ldrb	r3, [r7, #11]
 800a75a:	f003 0207 	and.w	r2, r3, #7
 800a75e:	4613      	mov	r3, r2
 800a760:	009b      	lsls	r3, r3, #2
 800a762:	4413      	add	r3, r2
 800a764:	00db      	lsls	r3, r3, #3
 800a766:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a76a:	68fa      	ldr	r2, [r7, #12]
 800a76c:	4413      	add	r3, r2
 800a76e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800a770:	697b      	ldr	r3, [r7, #20]
 800a772:	687a      	ldr	r2, [r7, #4]
 800a774:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800a776:	697b      	ldr	r3, [r7, #20]
 800a778:	683a      	ldr	r2, [r7, #0]
 800a77a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800a77c:	697b      	ldr	r3, [r7, #20]
 800a77e:	2200      	movs	r2, #0
 800a780:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800a782:	697b      	ldr	r3, [r7, #20]
 800a784:	2200      	movs	r2, #0
 800a786:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a788:	7afb      	ldrb	r3, [r7, #11]
 800a78a:	f003 0307 	and.w	r3, r3, #7
 800a78e:	b2da      	uxtb	r2, r3
 800a790:	697b      	ldr	r3, [r7, #20]
 800a792:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	6979      	ldr	r1, [r7, #20]
 800a79a:	4618      	mov	r0, r3
 800a79c:	f007 fbe3 	bl	8011f66 <USB_EPStartXfer>

  return HAL_OK;
 800a7a0:	2300      	movs	r3, #0
}
 800a7a2:	4618      	mov	r0, r3
 800a7a4:	3718      	adds	r7, #24
 800a7a6:	46bd      	mov	sp, r7
 800a7a8:	bd80      	pop	{r7, pc}

0800a7aa <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800a7aa:	b480      	push	{r7}
 800a7ac:	b083      	sub	sp, #12
 800a7ae:	af00      	add	r7, sp, #0
 800a7b0:	6078      	str	r0, [r7, #4]
 800a7b2:	460b      	mov	r3, r1
 800a7b4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800a7b6:	78fb      	ldrb	r3, [r7, #3]
 800a7b8:	f003 0207 	and.w	r2, r3, #7
 800a7bc:	6879      	ldr	r1, [r7, #4]
 800a7be:	4613      	mov	r3, r2
 800a7c0:	009b      	lsls	r3, r3, #2
 800a7c2:	4413      	add	r3, r2
 800a7c4:	00db      	lsls	r3, r3, #3
 800a7c6:	440b      	add	r3, r1
 800a7c8:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 800a7cc:	681b      	ldr	r3, [r3, #0]
}
 800a7ce:	4618      	mov	r0, r3
 800a7d0:	370c      	adds	r7, #12
 800a7d2:	46bd      	mov	sp, r7
 800a7d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d8:	4770      	bx	lr

0800a7da <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800a7da:	b580      	push	{r7, lr}
 800a7dc:	b086      	sub	sp, #24
 800a7de:	af00      	add	r7, sp, #0
 800a7e0:	60f8      	str	r0, [r7, #12]
 800a7e2:	607a      	str	r2, [r7, #4]
 800a7e4:	603b      	str	r3, [r7, #0]
 800a7e6:	460b      	mov	r3, r1
 800a7e8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a7ea:	7afb      	ldrb	r3, [r7, #11]
 800a7ec:	f003 0207 	and.w	r2, r3, #7
 800a7f0:	4613      	mov	r3, r2
 800a7f2:	009b      	lsls	r3, r3, #2
 800a7f4:	4413      	add	r3, r2
 800a7f6:	00db      	lsls	r3, r3, #3
 800a7f8:	3310      	adds	r3, #16
 800a7fa:	68fa      	ldr	r2, [r7, #12]
 800a7fc:	4413      	add	r3, r2
 800a7fe:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800a800:	697b      	ldr	r3, [r7, #20]
 800a802:	687a      	ldr	r2, [r7, #4]
 800a804:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800a806:	697b      	ldr	r3, [r7, #20]
 800a808:	683a      	ldr	r2, [r7, #0]
 800a80a:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800a80c:	697b      	ldr	r3, [r7, #20]
 800a80e:	2201      	movs	r2, #1
 800a810:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 800a814:	697b      	ldr	r3, [r7, #20]
 800a816:	683a      	ldr	r2, [r7, #0]
 800a818:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800a81a:	697b      	ldr	r3, [r7, #20]
 800a81c:	2200      	movs	r2, #0
 800a81e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800a820:	697b      	ldr	r3, [r7, #20]
 800a822:	2201      	movs	r2, #1
 800a824:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a826:	7afb      	ldrb	r3, [r7, #11]
 800a828:	f003 0307 	and.w	r3, r3, #7
 800a82c:	b2da      	uxtb	r2, r3
 800a82e:	697b      	ldr	r3, [r7, #20]
 800a830:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	6979      	ldr	r1, [r7, #20]
 800a838:	4618      	mov	r0, r3
 800a83a:	f007 fb94 	bl	8011f66 <USB_EPStartXfer>

  return HAL_OK;
 800a83e:	2300      	movs	r3, #0
}
 800a840:	4618      	mov	r0, r3
 800a842:	3718      	adds	r7, #24
 800a844:	46bd      	mov	sp, r7
 800a846:	bd80      	pop	{r7, pc}

0800a848 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a848:	b580      	push	{r7, lr}
 800a84a:	b084      	sub	sp, #16
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	6078      	str	r0, [r7, #4]
 800a850:	460b      	mov	r3, r1
 800a852:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800a854:	78fb      	ldrb	r3, [r7, #3]
 800a856:	f003 0307 	and.w	r3, r3, #7
 800a85a:	687a      	ldr	r2, [r7, #4]
 800a85c:	7912      	ldrb	r2, [r2, #4]
 800a85e:	4293      	cmp	r3, r2
 800a860:	d901      	bls.n	800a866 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800a862:	2301      	movs	r3, #1
 800a864:	e03e      	b.n	800a8e4 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800a866:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	da0e      	bge.n	800a88c <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a86e:	78fb      	ldrb	r3, [r7, #3]
 800a870:	f003 0207 	and.w	r2, r3, #7
 800a874:	4613      	mov	r3, r2
 800a876:	009b      	lsls	r3, r3, #2
 800a878:	4413      	add	r3, r2
 800a87a:	00db      	lsls	r3, r3, #3
 800a87c:	3310      	adds	r3, #16
 800a87e:	687a      	ldr	r2, [r7, #4]
 800a880:	4413      	add	r3, r2
 800a882:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	2201      	movs	r2, #1
 800a888:	705a      	strb	r2, [r3, #1]
 800a88a:	e00c      	b.n	800a8a6 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800a88c:	78fa      	ldrb	r2, [r7, #3]
 800a88e:	4613      	mov	r3, r2
 800a890:	009b      	lsls	r3, r3, #2
 800a892:	4413      	add	r3, r2
 800a894:	00db      	lsls	r3, r3, #3
 800a896:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a89a:	687a      	ldr	r2, [r7, #4]
 800a89c:	4413      	add	r3, r2
 800a89e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	2200      	movs	r2, #0
 800a8a4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	2201      	movs	r2, #1
 800a8aa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a8ac:	78fb      	ldrb	r3, [r7, #3]
 800a8ae:	f003 0307 	and.w	r3, r3, #7
 800a8b2:	b2da      	uxtb	r2, r3
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800a8be:	2b01      	cmp	r3, #1
 800a8c0:	d101      	bne.n	800a8c6 <HAL_PCD_EP_SetStall+0x7e>
 800a8c2:	2302      	movs	r3, #2
 800a8c4:	e00e      	b.n	800a8e4 <HAL_PCD_EP_SetStall+0x9c>
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	2201      	movs	r2, #1
 800a8ca:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	68f9      	ldr	r1, [r7, #12]
 800a8d4:	4618      	mov	r0, r3
 800a8d6:	f008 f8f5 	bl	8012ac4 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	2200      	movs	r2, #0
 800a8de:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800a8e2:	2300      	movs	r3, #0
}
 800a8e4:	4618      	mov	r0, r3
 800a8e6:	3710      	adds	r7, #16
 800a8e8:	46bd      	mov	sp, r7
 800a8ea:	bd80      	pop	{r7, pc}

0800a8ec <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a8ec:	b580      	push	{r7, lr}
 800a8ee:	b084      	sub	sp, #16
 800a8f0:	af00      	add	r7, sp, #0
 800a8f2:	6078      	str	r0, [r7, #4]
 800a8f4:	460b      	mov	r3, r1
 800a8f6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800a8f8:	78fb      	ldrb	r3, [r7, #3]
 800a8fa:	f003 030f 	and.w	r3, r3, #15
 800a8fe:	687a      	ldr	r2, [r7, #4]
 800a900:	7912      	ldrb	r2, [r2, #4]
 800a902:	4293      	cmp	r3, r2
 800a904:	d901      	bls.n	800a90a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800a906:	2301      	movs	r3, #1
 800a908:	e040      	b.n	800a98c <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800a90a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a90e:	2b00      	cmp	r3, #0
 800a910:	da0e      	bge.n	800a930 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a912:	78fb      	ldrb	r3, [r7, #3]
 800a914:	f003 0207 	and.w	r2, r3, #7
 800a918:	4613      	mov	r3, r2
 800a91a:	009b      	lsls	r3, r3, #2
 800a91c:	4413      	add	r3, r2
 800a91e:	00db      	lsls	r3, r3, #3
 800a920:	3310      	adds	r3, #16
 800a922:	687a      	ldr	r2, [r7, #4]
 800a924:	4413      	add	r3, r2
 800a926:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	2201      	movs	r2, #1
 800a92c:	705a      	strb	r2, [r3, #1]
 800a92e:	e00e      	b.n	800a94e <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a930:	78fb      	ldrb	r3, [r7, #3]
 800a932:	f003 0207 	and.w	r2, r3, #7
 800a936:	4613      	mov	r3, r2
 800a938:	009b      	lsls	r3, r3, #2
 800a93a:	4413      	add	r3, r2
 800a93c:	00db      	lsls	r3, r3, #3
 800a93e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a942:	687a      	ldr	r2, [r7, #4]
 800a944:	4413      	add	r3, r2
 800a946:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	2200      	movs	r2, #0
 800a94c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	2200      	movs	r2, #0
 800a952:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a954:	78fb      	ldrb	r3, [r7, #3]
 800a956:	f003 0307 	and.w	r3, r3, #7
 800a95a:	b2da      	uxtb	r2, r3
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800a966:	2b01      	cmp	r3, #1
 800a968:	d101      	bne.n	800a96e <HAL_PCD_EP_ClrStall+0x82>
 800a96a:	2302      	movs	r3, #2
 800a96c:	e00e      	b.n	800a98c <HAL_PCD_EP_ClrStall+0xa0>
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	2201      	movs	r2, #1
 800a972:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	68f9      	ldr	r1, [r7, #12]
 800a97c:	4618      	mov	r0, r3
 800a97e:	f008 f8f2 	bl	8012b66 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	2200      	movs	r2, #0
 800a986:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800a98a:	2300      	movs	r3, #0
}
 800a98c:	4618      	mov	r0, r3
 800a98e:	3710      	adds	r7, #16
 800a990:	46bd      	mov	sp, r7
 800a992:	bd80      	pop	{r7, pc}

0800a994 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800a994:	b580      	push	{r7, lr}
 800a996:	b092      	sub	sp, #72	@ 0x48
 800a998:	af00      	add	r7, sp, #0
 800a99a:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800a99c:	e333      	b.n	800b006 <PCD_EP_ISR_Handler+0x672>
  {
    wIstr = hpcd->Instance->ISTR;
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800a9a6:	877b      	strh	r3, [r7, #58]	@ 0x3a

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800a9a8:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800a9aa:	b2db      	uxtb	r3, r3
 800a9ac:	f003 030f 	and.w	r3, r3, #15
 800a9b0:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39

    if (epindex == 0U)
 800a9b4:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	f040 8108 	bne.w	800abce <PCD_EP_ISR_Handler+0x23a>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800a9be:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800a9c0:	f003 0310 	and.w	r3, r3, #16
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d14c      	bne.n	800aa62 <PCD_EP_ISR_Handler+0xce>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	881b      	ldrh	r3, [r3, #0]
 800a9ce:	b29b      	uxth	r3, r3
 800a9d0:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800a9d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a9d8:	813b      	strh	r3, [r7, #8]
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	681a      	ldr	r2, [r3, #0]
 800a9de:	893b      	ldrh	r3, [r7, #8]
 800a9e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a9e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a9e8:	b29b      	uxth	r3, r3
 800a9ea:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	3310      	adds	r3, #16
 800a9f0:	643b      	str	r3, [r7, #64]	@ 0x40

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a9fa:	b29b      	uxth	r3, r3
 800a9fc:	461a      	mov	r2, r3
 800a9fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aa00:	781b      	ldrb	r3, [r3, #0]
 800aa02:	00db      	lsls	r3, r3, #3
 800aa04:	4413      	add	r3, r2
 800aa06:	687a      	ldr	r2, [r7, #4]
 800aa08:	6812      	ldr	r2, [r2, #0]
 800aa0a:	4413      	add	r3, r2
 800aa0c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800aa10:	881b      	ldrh	r3, [r3, #0]
 800aa12:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800aa16:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aa18:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800aa1a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aa1c:	695a      	ldr	r2, [r3, #20]
 800aa1e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aa20:	69db      	ldr	r3, [r3, #28]
 800aa22:	441a      	add	r2, r3
 800aa24:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aa26:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800aa28:	2100      	movs	r1, #0
 800aa2a:	6878      	ldr	r0, [r7, #4]
 800aa2c:	f00e f8ff 	bl	8018c2e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	7b1b      	ldrb	r3, [r3, #12]
 800aa34:	b2db      	uxtb	r3, r3
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	f000 82e5 	beq.w	800b006 <PCD_EP_ISR_Handler+0x672>
 800aa3c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aa3e:	699b      	ldr	r3, [r3, #24]
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	f040 82e0 	bne.w	800b006 <PCD_EP_ISR_Handler+0x672>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	7b1b      	ldrb	r3, [r3, #12]
 800aa4a:	b2db      	uxtb	r3, r3
 800aa4c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800aa50:	b2da      	uxtb	r2, r3
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	2200      	movs	r2, #0
 800aa5e:	731a      	strb	r2, [r3, #12]
 800aa60:	e2d1      	b.n	800b006 <PCD_EP_ISR_Handler+0x672>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800aa68:	643b      	str	r3, [r7, #64]	@ 0x40
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	881b      	ldrh	r3, [r3, #0]
 800aa70:	86fb      	strh	r3, [r7, #54]	@ 0x36

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800aa72:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800aa74:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d032      	beq.n	800aae2 <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800aa84:	b29b      	uxth	r3, r3
 800aa86:	461a      	mov	r2, r3
 800aa88:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aa8a:	781b      	ldrb	r3, [r3, #0]
 800aa8c:	00db      	lsls	r3, r3, #3
 800aa8e:	4413      	add	r3, r2
 800aa90:	687a      	ldr	r2, [r7, #4]
 800aa92:	6812      	ldr	r2, [r2, #0]
 800aa94:	4413      	add	r3, r2
 800aa96:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800aa9a:	881b      	ldrh	r3, [r3, #0]
 800aa9c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800aaa0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aaa2:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	6818      	ldr	r0, [r3, #0]
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 800aaae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aab0:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800aab2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aab4:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800aab6:	b29b      	uxth	r3, r3
 800aab8:	f008 f97b 	bl	8012db2 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	881b      	ldrh	r3, [r3, #0]
 800aac2:	b29a      	uxth	r2, r3
 800aac4:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800aac8:	4013      	ands	r3, r2
 800aaca:	817b      	strh	r3, [r7, #10]
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	897a      	ldrh	r2, [r7, #10]
 800aad2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800aad6:	b292      	uxth	r2, r2
 800aad8:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800aada:	6878      	ldr	r0, [r7, #4]
 800aadc:	f00e f87a 	bl	8018bd4 <HAL_PCD_SetupStageCallback>
 800aae0:	e291      	b.n	800b006 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800aae2:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	f280 828d 	bge.w	800b006 <PCD_EP_ISR_Handler+0x672>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	881b      	ldrh	r3, [r3, #0]
 800aaf2:	b29a      	uxth	r2, r3
 800aaf4:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800aaf8:	4013      	ands	r3, r2
 800aafa:	81fb      	strh	r3, [r7, #14]
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	89fa      	ldrh	r2, [r7, #14]
 800ab02:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800ab06:	b292      	uxth	r2, r2
 800ab08:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ab12:	b29b      	uxth	r3, r3
 800ab14:	461a      	mov	r2, r3
 800ab16:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ab18:	781b      	ldrb	r3, [r3, #0]
 800ab1a:	00db      	lsls	r3, r3, #3
 800ab1c:	4413      	add	r3, r2
 800ab1e:	687a      	ldr	r2, [r7, #4]
 800ab20:	6812      	ldr	r2, [r2, #0]
 800ab22:	4413      	add	r3, r2
 800ab24:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800ab28:	881b      	ldrh	r3, [r3, #0]
 800ab2a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800ab2e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ab30:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800ab32:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ab34:	69db      	ldr	r3, [r3, #28]
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d019      	beq.n	800ab6e <PCD_EP_ISR_Handler+0x1da>
 800ab3a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ab3c:	695b      	ldr	r3, [r3, #20]
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d015      	beq.n	800ab6e <PCD_EP_ISR_Handler+0x1da>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	6818      	ldr	r0, [r3, #0]
 800ab46:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ab48:	6959      	ldr	r1, [r3, #20]
 800ab4a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ab4c:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800ab4e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ab50:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800ab52:	b29b      	uxth	r3, r3
 800ab54:	f008 f92d 	bl	8012db2 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800ab58:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ab5a:	695a      	ldr	r2, [r3, #20]
 800ab5c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ab5e:	69db      	ldr	r3, [r3, #28]
 800ab60:	441a      	add	r2, r3
 800ab62:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ab64:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800ab66:	2100      	movs	r1, #0
 800ab68:	6878      	ldr	r0, [r7, #4]
 800ab6a:	f00e f845 	bl	8018bf8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	881b      	ldrh	r3, [r3, #0]
 800ab74:	86fb      	strh	r3, [r7, #54]	@ 0x36

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800ab76:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800ab78:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	f040 8242 	bne.w	800b006 <PCD_EP_ISR_Handler+0x672>
 800ab82:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800ab84:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800ab88:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800ab8c:	f000 823b 	beq.w	800b006 <PCD_EP_ISR_Handler+0x672>
          {
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	881b      	ldrh	r3, [r3, #0]
 800ab96:	b29b      	uxth	r3, r3
 800ab98:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ab9c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aba0:	81bb      	strh	r3, [r7, #12]
 800aba2:	89bb      	ldrh	r3, [r7, #12]
 800aba4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800aba8:	81bb      	strh	r3, [r7, #12]
 800abaa:	89bb      	ldrh	r3, [r7, #12]
 800abac:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800abb0:	81bb      	strh	r3, [r7, #12]
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	681a      	ldr	r2, [r3, #0]
 800abb6:	89bb      	ldrh	r3, [r7, #12]
 800abb8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800abbc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800abc0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800abc4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800abc8:	b29b      	uxth	r3, r3
 800abca:	8013      	strh	r3, [r2, #0]
 800abcc:	e21b      	b.n	800b006 <PCD_EP_ISR_Handler+0x672>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	461a      	mov	r2, r3
 800abd4:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800abd8:	009b      	lsls	r3, r3, #2
 800abda:	4413      	add	r3, r2
 800abdc:	881b      	ldrh	r3, [r3, #0]
 800abde:	86fb      	strh	r3, [r7, #54]	@ 0x36

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800abe0:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	f280 80f1 	bge.w	800adcc <PCD_EP_ISR_Handler+0x438>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	461a      	mov	r2, r3
 800abf0:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800abf4:	009b      	lsls	r3, r3, #2
 800abf6:	4413      	add	r3, r2
 800abf8:	881b      	ldrh	r3, [r3, #0]
 800abfa:	b29a      	uxth	r2, r3
 800abfc:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800ac00:	4013      	ands	r3, r2
 800ac02:	86bb      	strh	r3, [r7, #52]	@ 0x34
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	461a      	mov	r2, r3
 800ac0a:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800ac0e:	009b      	lsls	r3, r3, #2
 800ac10:	4413      	add	r3, r2
 800ac12:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800ac14:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800ac18:	b292      	uxth	r2, r2
 800ac1a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800ac1c:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 800ac20:	4613      	mov	r3, r2
 800ac22:	009b      	lsls	r3, r3, #2
 800ac24:	4413      	add	r3, r2
 800ac26:	00db      	lsls	r3, r3, #3
 800ac28:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800ac2c:	687a      	ldr	r2, [r7, #4]
 800ac2e:	4413      	add	r3, r2
 800ac30:	643b      	str	r3, [r7, #64]	@ 0x40

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800ac32:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ac34:	7b1b      	ldrb	r3, [r3, #12]
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d123      	bne.n	800ac82 <PCD_EP_ISR_Handler+0x2ee>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ac42:	b29b      	uxth	r3, r3
 800ac44:	461a      	mov	r2, r3
 800ac46:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ac48:	781b      	ldrb	r3, [r3, #0]
 800ac4a:	00db      	lsls	r3, r3, #3
 800ac4c:	4413      	add	r3, r2
 800ac4e:	687a      	ldr	r2, [r7, #4]
 800ac50:	6812      	ldr	r2, [r2, #0]
 800ac52:	4413      	add	r3, r2
 800ac54:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800ac58:	881b      	ldrh	r3, [r3, #0]
 800ac5a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ac5e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

          if (count != 0U)
 800ac62:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	f000 808b 	beq.w	800ad82 <PCD_EP_ISR_Handler+0x3ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	6818      	ldr	r0, [r3, #0]
 800ac70:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ac72:	6959      	ldr	r1, [r3, #20]
 800ac74:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ac76:	88da      	ldrh	r2, [r3, #6]
 800ac78:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800ac7c:	f008 f899 	bl	8012db2 <USB_ReadPMA>
 800ac80:	e07f      	b.n	800ad82 <PCD_EP_ISR_Handler+0x3ee>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800ac82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ac84:	78db      	ldrb	r3, [r3, #3]
 800ac86:	2b02      	cmp	r3, #2
 800ac88:	d109      	bne.n	800ac9e <PCD_EP_ISR_Handler+0x30a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800ac8a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800ac8c:	461a      	mov	r2, r3
 800ac8e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ac90:	6878      	ldr	r0, [r7, #4]
 800ac92:	f000 f9c6 	bl	800b022 <HAL_PCD_EP_DB_Receive>
 800ac96:	4603      	mov	r3, r0
 800ac98:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800ac9c:	e071      	b.n	800ad82 <PCD_EP_ISR_Handler+0x3ee>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	461a      	mov	r2, r3
 800aca4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aca6:	781b      	ldrb	r3, [r3, #0]
 800aca8:	009b      	lsls	r3, r3, #2
 800acaa:	4413      	add	r3, r2
 800acac:	881b      	ldrh	r3, [r3, #0]
 800acae:	b29b      	uxth	r3, r3
 800acb0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800acb4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800acb8:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	461a      	mov	r2, r3
 800acc0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800acc2:	781b      	ldrb	r3, [r3, #0]
 800acc4:	009b      	lsls	r3, r3, #2
 800acc6:	441a      	add	r2, r3
 800acc8:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800acca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800acce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800acd2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800acd6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800acda:	b29b      	uxth	r3, r3
 800acdc:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	461a      	mov	r2, r3
 800ace4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ace6:	781b      	ldrb	r3, [r3, #0]
 800ace8:	009b      	lsls	r3, r3, #2
 800acea:	4413      	add	r3, r2
 800acec:	881b      	ldrh	r3, [r3, #0]
 800acee:	b29b      	uxth	r3, r3
 800acf0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d022      	beq.n	800ad3e <PCD_EP_ISR_Handler+0x3aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ad00:	b29b      	uxth	r3, r3
 800ad02:	461a      	mov	r2, r3
 800ad04:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ad06:	781b      	ldrb	r3, [r3, #0]
 800ad08:	00db      	lsls	r3, r3, #3
 800ad0a:	4413      	add	r3, r2
 800ad0c:	687a      	ldr	r2, [r7, #4]
 800ad0e:	6812      	ldr	r2, [r2, #0]
 800ad10:	4413      	add	r3, r2
 800ad12:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800ad16:	881b      	ldrh	r3, [r3, #0]
 800ad18:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ad1c:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 800ad20:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d02c      	beq.n	800ad82 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	6818      	ldr	r0, [r3, #0]
 800ad2c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ad2e:	6959      	ldr	r1, [r3, #20]
 800ad30:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ad32:	891a      	ldrh	r2, [r3, #8]
 800ad34:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800ad38:	f008 f83b 	bl	8012db2 <USB_ReadPMA>
 800ad3c:	e021      	b.n	800ad82 <PCD_EP_ISR_Handler+0x3ee>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ad46:	b29b      	uxth	r3, r3
 800ad48:	461a      	mov	r2, r3
 800ad4a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ad4c:	781b      	ldrb	r3, [r3, #0]
 800ad4e:	00db      	lsls	r3, r3, #3
 800ad50:	4413      	add	r3, r2
 800ad52:	687a      	ldr	r2, [r7, #4]
 800ad54:	6812      	ldr	r2, [r2, #0]
 800ad56:	4413      	add	r3, r2
 800ad58:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800ad5c:	881b      	ldrh	r3, [r3, #0]
 800ad5e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ad62:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 800ad66:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d009      	beq.n	800ad82 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	6818      	ldr	r0, [r3, #0]
 800ad72:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ad74:	6959      	ldr	r1, [r3, #20]
 800ad76:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ad78:	895a      	ldrh	r2, [r3, #10]
 800ad7a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800ad7e:	f008 f818 	bl	8012db2 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800ad82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ad84:	69da      	ldr	r2, [r3, #28]
 800ad86:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800ad8a:	441a      	add	r2, r3
 800ad8c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ad8e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800ad90:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ad92:	695a      	ldr	r2, [r3, #20]
 800ad94:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800ad98:	441a      	add	r2, r3
 800ad9a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ad9c:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800ad9e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ada0:	699b      	ldr	r3, [r3, #24]
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d005      	beq.n	800adb2 <PCD_EP_ISR_Handler+0x41e>
 800ada6:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800adaa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800adac:	691b      	ldr	r3, [r3, #16]
 800adae:	429a      	cmp	r2, r3
 800adb0:	d206      	bcs.n	800adc0 <PCD_EP_ISR_Handler+0x42c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800adb2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800adb4:	781b      	ldrb	r3, [r3, #0]
 800adb6:	4619      	mov	r1, r3
 800adb8:	6878      	ldr	r0, [r7, #4]
 800adba:	f00d ff1d 	bl	8018bf8 <HAL_PCD_DataOutStageCallback>
 800adbe:	e005      	b.n	800adcc <PCD_EP_ISR_Handler+0x438>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800adc6:	4618      	mov	r0, r3
 800adc8:	f007 f8cd 	bl	8011f66 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800adcc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800adce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800add2:	2b00      	cmp	r3, #0
 800add4:	f000 8117 	beq.w	800b006 <PCD_EP_ISR_Handler+0x672>
      {
        ep = &hpcd->IN_ep[epindex];
 800add8:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 800addc:	4613      	mov	r3, r2
 800adde:	009b      	lsls	r3, r3, #2
 800ade0:	4413      	add	r3, r2
 800ade2:	00db      	lsls	r3, r3, #3
 800ade4:	3310      	adds	r3, #16
 800ade6:	687a      	ldr	r2, [r7, #4]
 800ade8:	4413      	add	r3, r2
 800adea:	643b      	str	r3, [r7, #64]	@ 0x40

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	461a      	mov	r2, r3
 800adf2:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800adf6:	009b      	lsls	r3, r3, #2
 800adf8:	4413      	add	r3, r2
 800adfa:	881b      	ldrh	r3, [r3, #0]
 800adfc:	b29b      	uxth	r3, r3
 800adfe:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800ae02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ae06:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	461a      	mov	r2, r3
 800ae0e:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800ae12:	009b      	lsls	r3, r3, #2
 800ae14:	441a      	add	r2, r3
 800ae16:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800ae18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ae1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ae20:	b29b      	uxth	r3, r3
 800ae22:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 800ae24:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ae26:	78db      	ldrb	r3, [r3, #3]
 800ae28:	2b01      	cmp	r3, #1
 800ae2a:	f040 80a1 	bne.w	800af70 <PCD_EP_ISR_Handler+0x5dc>
        {
          ep->xfer_len = 0U;
 800ae2e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ae30:	2200      	movs	r2, #0
 800ae32:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800ae34:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ae36:	7b1b      	ldrb	r3, [r3, #12]
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	f000 8092 	beq.w	800af62 <PCD_EP_ISR_Handler+0x5ce>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800ae3e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800ae40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d046      	beq.n	800aed6 <PCD_EP_ISR_Handler+0x542>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800ae48:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ae4a:	785b      	ldrb	r3, [r3, #1]
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d126      	bne.n	800ae9e <PCD_EP_ISR_Handler+0x50a>
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	617b      	str	r3, [r7, #20]
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ae5e:	b29b      	uxth	r3, r3
 800ae60:	461a      	mov	r2, r3
 800ae62:	697b      	ldr	r3, [r7, #20]
 800ae64:	4413      	add	r3, r2
 800ae66:	617b      	str	r3, [r7, #20]
 800ae68:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ae6a:	781b      	ldrb	r3, [r3, #0]
 800ae6c:	00da      	lsls	r2, r3, #3
 800ae6e:	697b      	ldr	r3, [r7, #20]
 800ae70:	4413      	add	r3, r2
 800ae72:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800ae76:	613b      	str	r3, [r7, #16]
 800ae78:	693b      	ldr	r3, [r7, #16]
 800ae7a:	881b      	ldrh	r3, [r3, #0]
 800ae7c:	b29b      	uxth	r3, r3
 800ae7e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ae82:	b29a      	uxth	r2, r3
 800ae84:	693b      	ldr	r3, [r7, #16]
 800ae86:	801a      	strh	r2, [r3, #0]
 800ae88:	693b      	ldr	r3, [r7, #16]
 800ae8a:	881b      	ldrh	r3, [r3, #0]
 800ae8c:	b29b      	uxth	r3, r3
 800ae8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ae92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ae96:	b29a      	uxth	r2, r3
 800ae98:	693b      	ldr	r3, [r7, #16]
 800ae9a:	801a      	strh	r2, [r3, #0]
 800ae9c:	e061      	b.n	800af62 <PCD_EP_ISR_Handler+0x5ce>
 800ae9e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aea0:	785b      	ldrb	r3, [r3, #1]
 800aea2:	2b01      	cmp	r3, #1
 800aea4:	d15d      	bne.n	800af62 <PCD_EP_ISR_Handler+0x5ce>
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	61fb      	str	r3, [r7, #28]
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800aeb4:	b29b      	uxth	r3, r3
 800aeb6:	461a      	mov	r2, r3
 800aeb8:	69fb      	ldr	r3, [r7, #28]
 800aeba:	4413      	add	r3, r2
 800aebc:	61fb      	str	r3, [r7, #28]
 800aebe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aec0:	781b      	ldrb	r3, [r3, #0]
 800aec2:	00da      	lsls	r2, r3, #3
 800aec4:	69fb      	ldr	r3, [r7, #28]
 800aec6:	4413      	add	r3, r2
 800aec8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800aecc:	61bb      	str	r3, [r7, #24]
 800aece:	69bb      	ldr	r3, [r7, #24]
 800aed0:	2200      	movs	r2, #0
 800aed2:	801a      	strh	r2, [r3, #0]
 800aed4:	e045      	b.n	800af62 <PCD_EP_ISR_Handler+0x5ce>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800aedc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aede:	785b      	ldrb	r3, [r3, #1]
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d126      	bne.n	800af32 <PCD_EP_ISR_Handler+0x59e>
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	627b      	str	r3, [r7, #36]	@ 0x24
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800aef2:	b29b      	uxth	r3, r3
 800aef4:	461a      	mov	r2, r3
 800aef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aef8:	4413      	add	r3, r2
 800aefa:	627b      	str	r3, [r7, #36]	@ 0x24
 800aefc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aefe:	781b      	ldrb	r3, [r3, #0]
 800af00:	00da      	lsls	r2, r3, #3
 800af02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af04:	4413      	add	r3, r2
 800af06:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800af0a:	623b      	str	r3, [r7, #32]
 800af0c:	6a3b      	ldr	r3, [r7, #32]
 800af0e:	881b      	ldrh	r3, [r3, #0]
 800af10:	b29b      	uxth	r3, r3
 800af12:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800af16:	b29a      	uxth	r2, r3
 800af18:	6a3b      	ldr	r3, [r7, #32]
 800af1a:	801a      	strh	r2, [r3, #0]
 800af1c:	6a3b      	ldr	r3, [r7, #32]
 800af1e:	881b      	ldrh	r3, [r3, #0]
 800af20:	b29b      	uxth	r3, r3
 800af22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800af26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800af2a:	b29a      	uxth	r2, r3
 800af2c:	6a3b      	ldr	r3, [r7, #32]
 800af2e:	801a      	strh	r2, [r3, #0]
 800af30:	e017      	b.n	800af62 <PCD_EP_ISR_Handler+0x5ce>
 800af32:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800af34:	785b      	ldrb	r3, [r3, #1]
 800af36:	2b01      	cmp	r3, #1
 800af38:	d113      	bne.n	800af62 <PCD_EP_ISR_Handler+0x5ce>
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800af42:	b29b      	uxth	r3, r3
 800af44:	461a      	mov	r2, r3
 800af46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af48:	4413      	add	r3, r2
 800af4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800af4c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800af4e:	781b      	ldrb	r3, [r3, #0]
 800af50:	00da      	lsls	r2, r3, #3
 800af52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af54:	4413      	add	r3, r2
 800af56:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800af5a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800af5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af5e:	2200      	movs	r2, #0
 800af60:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800af62:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800af64:	781b      	ldrb	r3, [r3, #0]
 800af66:	4619      	mov	r1, r3
 800af68:	6878      	ldr	r0, [r7, #4]
 800af6a:	f00d fe60 	bl	8018c2e <HAL_PCD_DataInStageCallback>
 800af6e:	e04a      	b.n	800b006 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800af70:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800af72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800af76:	2b00      	cmp	r3, #0
 800af78:	d13f      	bne.n	800affa <PCD_EP_ISR_Handler+0x666>
          {
            /* Multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800af82:	b29b      	uxth	r3, r3
 800af84:	461a      	mov	r2, r3
 800af86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800af88:	781b      	ldrb	r3, [r3, #0]
 800af8a:	00db      	lsls	r3, r3, #3
 800af8c:	4413      	add	r3, r2
 800af8e:	687a      	ldr	r2, [r7, #4]
 800af90:	6812      	ldr	r2, [r2, #0]
 800af92:	4413      	add	r3, r2
 800af94:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800af98:	881b      	ldrh	r3, [r3, #0]
 800af9a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800af9e:	867b      	strh	r3, [r7, #50]	@ 0x32

            if (ep->xfer_len > TxPctSize)
 800afa0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800afa2:	699a      	ldr	r2, [r3, #24]
 800afa4:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800afa6:	429a      	cmp	r2, r3
 800afa8:	d906      	bls.n	800afb8 <PCD_EP_ISR_Handler+0x624>
            {
              ep->xfer_len -= TxPctSize;
 800afaa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800afac:	699a      	ldr	r2, [r3, #24]
 800afae:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800afb0:	1ad2      	subs	r2, r2, r3
 800afb2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800afb4:	619a      	str	r2, [r3, #24]
 800afb6:	e002      	b.n	800afbe <PCD_EP_ISR_Handler+0x62a>
            }
            else
            {
              ep->xfer_len = 0U;
 800afb8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800afba:	2200      	movs	r2, #0
 800afbc:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800afbe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800afc0:	699b      	ldr	r3, [r3, #24]
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d106      	bne.n	800afd4 <PCD_EP_ISR_Handler+0x640>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800afc6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800afc8:	781b      	ldrb	r3, [r3, #0]
 800afca:	4619      	mov	r1, r3
 800afcc:	6878      	ldr	r0, [r7, #4]
 800afce:	f00d fe2e 	bl	8018c2e <HAL_PCD_DataInStageCallback>
 800afd2:	e018      	b.n	800b006 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800afd4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800afd6:	695a      	ldr	r2, [r3, #20]
 800afd8:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800afda:	441a      	add	r2, r3
 800afdc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800afde:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800afe0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800afe2:	69da      	ldr	r2, [r3, #28]
 800afe4:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800afe6:	441a      	add	r2, r3
 800afe8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800afea:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800aff2:	4618      	mov	r0, r3
 800aff4:	f006 ffb7 	bl	8011f66 <USB_EPStartXfer>
 800aff8:	e005      	b.n	800b006 <PCD_EP_ISR_Handler+0x672>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800affa:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800affc:	461a      	mov	r2, r3
 800affe:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b000:	6878      	ldr	r0, [r7, #4]
 800b002:	f000 f917 	bl	800b234 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800b00e:	b29b      	uxth	r3, r3
 800b010:	b21b      	sxth	r3, r3
 800b012:	2b00      	cmp	r3, #0
 800b014:	f6ff acc3 	blt.w	800a99e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800b018:	2300      	movs	r3, #0
}
 800b01a:	4618      	mov	r0, r3
 800b01c:	3748      	adds	r7, #72	@ 0x48
 800b01e:	46bd      	mov	sp, r7
 800b020:	bd80      	pop	{r7, pc}

0800b022 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800b022:	b580      	push	{r7, lr}
 800b024:	b088      	sub	sp, #32
 800b026:	af00      	add	r7, sp, #0
 800b028:	60f8      	str	r0, [r7, #12]
 800b02a:	60b9      	str	r1, [r7, #8]
 800b02c:	4613      	mov	r3, r2
 800b02e:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800b030:	88fb      	ldrh	r3, [r7, #6]
 800b032:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b036:	2b00      	cmp	r3, #0
 800b038:	d07c      	beq.n	800b134 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b042:	b29b      	uxth	r3, r3
 800b044:	461a      	mov	r2, r3
 800b046:	68bb      	ldr	r3, [r7, #8]
 800b048:	781b      	ldrb	r3, [r3, #0]
 800b04a:	00db      	lsls	r3, r3, #3
 800b04c:	4413      	add	r3, r2
 800b04e:	68fa      	ldr	r2, [r7, #12]
 800b050:	6812      	ldr	r2, [r2, #0]
 800b052:	4413      	add	r3, r2
 800b054:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b058:	881b      	ldrh	r3, [r3, #0]
 800b05a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b05e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800b060:	68bb      	ldr	r3, [r7, #8]
 800b062:	699a      	ldr	r2, [r3, #24]
 800b064:	8b7b      	ldrh	r3, [r7, #26]
 800b066:	429a      	cmp	r2, r3
 800b068:	d306      	bcc.n	800b078 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 800b06a:	68bb      	ldr	r3, [r7, #8]
 800b06c:	699a      	ldr	r2, [r3, #24]
 800b06e:	8b7b      	ldrh	r3, [r7, #26]
 800b070:	1ad2      	subs	r2, r2, r3
 800b072:	68bb      	ldr	r3, [r7, #8]
 800b074:	619a      	str	r2, [r3, #24]
 800b076:	e002      	b.n	800b07e <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 800b078:	68bb      	ldr	r3, [r7, #8]
 800b07a:	2200      	movs	r2, #0
 800b07c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800b07e:	68bb      	ldr	r3, [r7, #8]
 800b080:	699b      	ldr	r3, [r3, #24]
 800b082:	2b00      	cmp	r3, #0
 800b084:	d123      	bne.n	800b0ce <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* Set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	461a      	mov	r2, r3
 800b08c:	68bb      	ldr	r3, [r7, #8]
 800b08e:	781b      	ldrb	r3, [r3, #0]
 800b090:	009b      	lsls	r3, r3, #2
 800b092:	4413      	add	r3, r2
 800b094:	881b      	ldrh	r3, [r3, #0]
 800b096:	b29b      	uxth	r3, r3
 800b098:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b09c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b0a0:	833b      	strh	r3, [r7, #24]
 800b0a2:	8b3b      	ldrh	r3, [r7, #24]
 800b0a4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800b0a8:	833b      	strh	r3, [r7, #24]
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	461a      	mov	r2, r3
 800b0b0:	68bb      	ldr	r3, [r7, #8]
 800b0b2:	781b      	ldrb	r3, [r3, #0]
 800b0b4:	009b      	lsls	r3, r3, #2
 800b0b6:	441a      	add	r2, r3
 800b0b8:	8b3b      	ldrh	r3, [r7, #24]
 800b0ba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b0be:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b0c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b0c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b0ca:	b29b      	uxth	r3, r3
 800b0cc:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800b0ce:	88fb      	ldrh	r3, [r7, #6]
 800b0d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d01f      	beq.n	800b118 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	461a      	mov	r2, r3
 800b0de:	68bb      	ldr	r3, [r7, #8]
 800b0e0:	781b      	ldrb	r3, [r3, #0]
 800b0e2:	009b      	lsls	r3, r3, #2
 800b0e4:	4413      	add	r3, r2
 800b0e6:	881b      	ldrh	r3, [r3, #0]
 800b0e8:	b29b      	uxth	r3, r3
 800b0ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b0ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b0f2:	82fb      	strh	r3, [r7, #22]
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	461a      	mov	r2, r3
 800b0fa:	68bb      	ldr	r3, [r7, #8]
 800b0fc:	781b      	ldrb	r3, [r3, #0]
 800b0fe:	009b      	lsls	r3, r3, #2
 800b100:	441a      	add	r2, r3
 800b102:	8afb      	ldrh	r3, [r7, #22]
 800b104:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b108:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b10c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b110:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800b114:	b29b      	uxth	r3, r3
 800b116:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800b118:	8b7b      	ldrh	r3, [r7, #26]
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	f000 8085 	beq.w	800b22a <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	6818      	ldr	r0, [r3, #0]
 800b124:	68bb      	ldr	r3, [r7, #8]
 800b126:	6959      	ldr	r1, [r3, #20]
 800b128:	68bb      	ldr	r3, [r7, #8]
 800b12a:	891a      	ldrh	r2, [r3, #8]
 800b12c:	8b7b      	ldrh	r3, [r7, #26]
 800b12e:	f007 fe40 	bl	8012db2 <USB_ReadPMA>
 800b132:	e07a      	b.n	800b22a <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b13c:	b29b      	uxth	r3, r3
 800b13e:	461a      	mov	r2, r3
 800b140:	68bb      	ldr	r3, [r7, #8]
 800b142:	781b      	ldrb	r3, [r3, #0]
 800b144:	00db      	lsls	r3, r3, #3
 800b146:	4413      	add	r3, r2
 800b148:	68fa      	ldr	r2, [r7, #12]
 800b14a:	6812      	ldr	r2, [r2, #0]
 800b14c:	4413      	add	r3, r2
 800b14e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b152:	881b      	ldrh	r3, [r3, #0]
 800b154:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b158:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800b15a:	68bb      	ldr	r3, [r7, #8]
 800b15c:	699a      	ldr	r2, [r3, #24]
 800b15e:	8b7b      	ldrh	r3, [r7, #26]
 800b160:	429a      	cmp	r2, r3
 800b162:	d306      	bcc.n	800b172 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 800b164:	68bb      	ldr	r3, [r7, #8]
 800b166:	699a      	ldr	r2, [r3, #24]
 800b168:	8b7b      	ldrh	r3, [r7, #26]
 800b16a:	1ad2      	subs	r2, r2, r3
 800b16c:	68bb      	ldr	r3, [r7, #8]
 800b16e:	619a      	str	r2, [r3, #24]
 800b170:	e002      	b.n	800b178 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 800b172:	68bb      	ldr	r3, [r7, #8]
 800b174:	2200      	movs	r2, #0
 800b176:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800b178:	68bb      	ldr	r3, [r7, #8]
 800b17a:	699b      	ldr	r3, [r3, #24]
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d123      	bne.n	800b1c8 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* Set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	461a      	mov	r2, r3
 800b186:	68bb      	ldr	r3, [r7, #8]
 800b188:	781b      	ldrb	r3, [r3, #0]
 800b18a:	009b      	lsls	r3, r3, #2
 800b18c:	4413      	add	r3, r2
 800b18e:	881b      	ldrh	r3, [r3, #0]
 800b190:	b29b      	uxth	r3, r3
 800b192:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b196:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b19a:	83fb      	strh	r3, [r7, #30]
 800b19c:	8bfb      	ldrh	r3, [r7, #30]
 800b19e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800b1a2:	83fb      	strh	r3, [r7, #30]
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	461a      	mov	r2, r3
 800b1aa:	68bb      	ldr	r3, [r7, #8]
 800b1ac:	781b      	ldrb	r3, [r3, #0]
 800b1ae:	009b      	lsls	r3, r3, #2
 800b1b0:	441a      	add	r2, r3
 800b1b2:	8bfb      	ldrh	r3, [r7, #30]
 800b1b4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b1b8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b1bc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b1c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b1c4:	b29b      	uxth	r3, r3
 800b1c6:	8013      	strh	r3, [r2, #0]
    }

    /* Need to FreeUser Buffer */
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800b1c8:	88fb      	ldrh	r3, [r7, #6]
 800b1ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d11f      	bne.n	800b212 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	461a      	mov	r2, r3
 800b1d8:	68bb      	ldr	r3, [r7, #8]
 800b1da:	781b      	ldrb	r3, [r3, #0]
 800b1dc:	009b      	lsls	r3, r3, #2
 800b1de:	4413      	add	r3, r2
 800b1e0:	881b      	ldrh	r3, [r3, #0]
 800b1e2:	b29b      	uxth	r3, r3
 800b1e4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b1e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b1ec:	83bb      	strh	r3, [r7, #28]
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	461a      	mov	r2, r3
 800b1f4:	68bb      	ldr	r3, [r7, #8]
 800b1f6:	781b      	ldrb	r3, [r3, #0]
 800b1f8:	009b      	lsls	r3, r3, #2
 800b1fa:	441a      	add	r2, r3
 800b1fc:	8bbb      	ldrh	r3, [r7, #28]
 800b1fe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b202:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b206:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b20a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800b20e:	b29b      	uxth	r3, r3
 800b210:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800b212:	8b7b      	ldrh	r3, [r7, #26]
 800b214:	2b00      	cmp	r3, #0
 800b216:	d008      	beq.n	800b22a <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	6818      	ldr	r0, [r3, #0]
 800b21c:	68bb      	ldr	r3, [r7, #8]
 800b21e:	6959      	ldr	r1, [r3, #20]
 800b220:	68bb      	ldr	r3, [r7, #8]
 800b222:	895a      	ldrh	r2, [r3, #10]
 800b224:	8b7b      	ldrh	r3, [r7, #26]
 800b226:	f007 fdc4 	bl	8012db2 <USB_ReadPMA>
    }
  }

  return count;
 800b22a:	8b7b      	ldrh	r3, [r7, #26]
}
 800b22c:	4618      	mov	r0, r3
 800b22e:	3720      	adds	r7, #32
 800b230:	46bd      	mov	sp, r7
 800b232:	bd80      	pop	{r7, pc}

0800b234 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800b234:	b580      	push	{r7, lr}
 800b236:	b0a6      	sub	sp, #152	@ 0x98
 800b238:	af00      	add	r7, sp, #0
 800b23a:	60f8      	str	r0, [r7, #12]
 800b23c:	60b9      	str	r1, [r7, #8]
 800b23e:	4613      	mov	r3, r2
 800b240:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800b242:	88fb      	ldrh	r3, [r7, #6]
 800b244:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b248:	2b00      	cmp	r3, #0
 800b24a:	f000 81f7 	beq.w	800b63c <HAL_PCD_EP_DB_Transmit+0x408>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b256:	b29b      	uxth	r3, r3
 800b258:	461a      	mov	r2, r3
 800b25a:	68bb      	ldr	r3, [r7, #8]
 800b25c:	781b      	ldrb	r3, [r3, #0]
 800b25e:	00db      	lsls	r3, r3, #3
 800b260:	4413      	add	r3, r2
 800b262:	68fa      	ldr	r2, [r7, #12]
 800b264:	6812      	ldr	r2, [r2, #0]
 800b266:	4413      	add	r3, r2
 800b268:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b26c:	881b      	ldrh	r3, [r3, #0]
 800b26e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b272:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len > TxPctSize)
 800b276:	68bb      	ldr	r3, [r7, #8]
 800b278:	699a      	ldr	r2, [r3, #24]
 800b27a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800b27e:	429a      	cmp	r2, r3
 800b280:	d907      	bls.n	800b292 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 800b282:	68bb      	ldr	r3, [r7, #8]
 800b284:	699a      	ldr	r2, [r3, #24]
 800b286:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800b28a:	1ad2      	subs	r2, r2, r3
 800b28c:	68bb      	ldr	r3, [r7, #8]
 800b28e:	619a      	str	r2, [r3, #24]
 800b290:	e002      	b.n	800b298 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 800b292:	68bb      	ldr	r3, [r7, #8]
 800b294:	2200      	movs	r2, #0
 800b296:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800b298:	68bb      	ldr	r3, [r7, #8]
 800b29a:	699b      	ldr	r3, [r3, #24]
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	f040 80e1 	bne.w	800b464 <HAL_PCD_EP_DB_Transmit+0x230>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800b2a2:	68bb      	ldr	r3, [r7, #8]
 800b2a4:	785b      	ldrb	r3, [r3, #1]
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d126      	bne.n	800b2f8 <HAL_PCD_EP_DB_Transmit+0xc4>
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	633b      	str	r3, [r7, #48]	@ 0x30
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b2b8:	b29b      	uxth	r3, r3
 800b2ba:	461a      	mov	r2, r3
 800b2bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2be:	4413      	add	r3, r2
 800b2c0:	633b      	str	r3, [r7, #48]	@ 0x30
 800b2c2:	68bb      	ldr	r3, [r7, #8]
 800b2c4:	781b      	ldrb	r3, [r3, #0]
 800b2c6:	00da      	lsls	r2, r3, #3
 800b2c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2ca:	4413      	add	r3, r2
 800b2cc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b2d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b2d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2d4:	881b      	ldrh	r3, [r3, #0]
 800b2d6:	b29b      	uxth	r3, r3
 800b2d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b2dc:	b29a      	uxth	r2, r3
 800b2de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2e0:	801a      	strh	r2, [r3, #0]
 800b2e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2e4:	881b      	ldrh	r3, [r3, #0]
 800b2e6:	b29b      	uxth	r3, r3
 800b2e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b2ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b2f0:	b29a      	uxth	r2, r3
 800b2f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2f4:	801a      	strh	r2, [r3, #0]
 800b2f6:	e01a      	b.n	800b32e <HAL_PCD_EP_DB_Transmit+0xfa>
 800b2f8:	68bb      	ldr	r3, [r7, #8]
 800b2fa:	785b      	ldrb	r3, [r3, #1]
 800b2fc:	2b01      	cmp	r3, #1
 800b2fe:	d116      	bne.n	800b32e <HAL_PCD_EP_DB_Transmit+0xfa>
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b30e:	b29b      	uxth	r3, r3
 800b310:	461a      	mov	r2, r3
 800b312:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b314:	4413      	add	r3, r2
 800b316:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b318:	68bb      	ldr	r3, [r7, #8]
 800b31a:	781b      	ldrb	r3, [r3, #0]
 800b31c:	00da      	lsls	r2, r3, #3
 800b31e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b320:	4413      	add	r3, r2
 800b322:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b326:	637b      	str	r3, [r7, #52]	@ 0x34
 800b328:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b32a:	2200      	movs	r2, #0
 800b32c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b334:	68bb      	ldr	r3, [r7, #8]
 800b336:	785b      	ldrb	r3, [r3, #1]
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d126      	bne.n	800b38a <HAL_PCD_EP_DB_Transmit+0x156>
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	623b      	str	r3, [r7, #32]
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b34a:	b29b      	uxth	r3, r3
 800b34c:	461a      	mov	r2, r3
 800b34e:	6a3b      	ldr	r3, [r7, #32]
 800b350:	4413      	add	r3, r2
 800b352:	623b      	str	r3, [r7, #32]
 800b354:	68bb      	ldr	r3, [r7, #8]
 800b356:	781b      	ldrb	r3, [r3, #0]
 800b358:	00da      	lsls	r2, r3, #3
 800b35a:	6a3b      	ldr	r3, [r7, #32]
 800b35c:	4413      	add	r3, r2
 800b35e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b362:	61fb      	str	r3, [r7, #28]
 800b364:	69fb      	ldr	r3, [r7, #28]
 800b366:	881b      	ldrh	r3, [r3, #0]
 800b368:	b29b      	uxth	r3, r3
 800b36a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b36e:	b29a      	uxth	r2, r3
 800b370:	69fb      	ldr	r3, [r7, #28]
 800b372:	801a      	strh	r2, [r3, #0]
 800b374:	69fb      	ldr	r3, [r7, #28]
 800b376:	881b      	ldrh	r3, [r3, #0]
 800b378:	b29b      	uxth	r3, r3
 800b37a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b37e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b382:	b29a      	uxth	r2, r3
 800b384:	69fb      	ldr	r3, [r7, #28]
 800b386:	801a      	strh	r2, [r3, #0]
 800b388:	e017      	b.n	800b3ba <HAL_PCD_EP_DB_Transmit+0x186>
 800b38a:	68bb      	ldr	r3, [r7, #8]
 800b38c:	785b      	ldrb	r3, [r3, #1]
 800b38e:	2b01      	cmp	r3, #1
 800b390:	d113      	bne.n	800b3ba <HAL_PCD_EP_DB_Transmit+0x186>
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b39a:	b29b      	uxth	r3, r3
 800b39c:	461a      	mov	r2, r3
 800b39e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3a0:	4413      	add	r3, r2
 800b3a2:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b3a4:	68bb      	ldr	r3, [r7, #8]
 800b3a6:	781b      	ldrb	r3, [r3, #0]
 800b3a8:	00da      	lsls	r2, r3, #3
 800b3aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3ac:	4413      	add	r3, r2
 800b3ae:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b3b2:	627b      	str	r3, [r7, #36]	@ 0x24
 800b3b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3b6:	2200      	movs	r2, #0
 800b3b8:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 800b3ba:	68bb      	ldr	r3, [r7, #8]
 800b3bc:	78db      	ldrb	r3, [r3, #3]
 800b3be:	2b02      	cmp	r3, #2
 800b3c0:	d123      	bne.n	800b40a <HAL_PCD_EP_DB_Transmit+0x1d6>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	461a      	mov	r2, r3
 800b3c8:	68bb      	ldr	r3, [r7, #8]
 800b3ca:	781b      	ldrb	r3, [r3, #0]
 800b3cc:	009b      	lsls	r3, r3, #2
 800b3ce:	4413      	add	r3, r2
 800b3d0:	881b      	ldrh	r3, [r3, #0]
 800b3d2:	b29b      	uxth	r3, r3
 800b3d4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b3d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b3dc:	837b      	strh	r3, [r7, #26]
 800b3de:	8b7b      	ldrh	r3, [r7, #26]
 800b3e0:	f083 0320 	eor.w	r3, r3, #32
 800b3e4:	837b      	strh	r3, [r7, #26]
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	461a      	mov	r2, r3
 800b3ec:	68bb      	ldr	r3, [r7, #8]
 800b3ee:	781b      	ldrb	r3, [r3, #0]
 800b3f0:	009b      	lsls	r3, r3, #2
 800b3f2:	441a      	add	r2, r3
 800b3f4:	8b7b      	ldrh	r3, [r7, #26]
 800b3f6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b3fa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b3fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b402:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b406:	b29b      	uxth	r3, r3
 800b408:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800b40a:	68bb      	ldr	r3, [r7, #8]
 800b40c:	781b      	ldrb	r3, [r3, #0]
 800b40e:	4619      	mov	r1, r3
 800b410:	68f8      	ldr	r0, [r7, #12]
 800b412:	f00d fc0c 	bl	8018c2e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800b416:	88fb      	ldrh	r3, [r7, #6]
 800b418:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d01f      	beq.n	800b460 <HAL_PCD_EP_DB_Transmit+0x22c>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	461a      	mov	r2, r3
 800b426:	68bb      	ldr	r3, [r7, #8]
 800b428:	781b      	ldrb	r3, [r3, #0]
 800b42a:	009b      	lsls	r3, r3, #2
 800b42c:	4413      	add	r3, r2
 800b42e:	881b      	ldrh	r3, [r3, #0]
 800b430:	b29b      	uxth	r3, r3
 800b432:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b436:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b43a:	833b      	strh	r3, [r7, #24]
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	461a      	mov	r2, r3
 800b442:	68bb      	ldr	r3, [r7, #8]
 800b444:	781b      	ldrb	r3, [r3, #0]
 800b446:	009b      	lsls	r3, r3, #2
 800b448:	441a      	add	r2, r3
 800b44a:	8b3b      	ldrh	r3, [r7, #24]
 800b44c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b450:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b454:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b458:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b45c:	b29b      	uxth	r3, r3
 800b45e:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 800b460:	2300      	movs	r3, #0
 800b462:	e31f      	b.n	800baa4 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800b464:	88fb      	ldrh	r3, [r7, #6]
 800b466:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d021      	beq.n	800b4b2 <HAL_PCD_EP_DB_Transmit+0x27e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	461a      	mov	r2, r3
 800b474:	68bb      	ldr	r3, [r7, #8]
 800b476:	781b      	ldrb	r3, [r3, #0]
 800b478:	009b      	lsls	r3, r3, #2
 800b47a:	4413      	add	r3, r2
 800b47c:	881b      	ldrh	r3, [r3, #0]
 800b47e:	b29b      	uxth	r3, r3
 800b480:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b484:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b488:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	461a      	mov	r2, r3
 800b492:	68bb      	ldr	r3, [r7, #8]
 800b494:	781b      	ldrb	r3, [r3, #0]
 800b496:	009b      	lsls	r3, r3, #2
 800b498:	441a      	add	r2, r3
 800b49a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800b49e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b4a2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b4a6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b4aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b4ae:	b29b      	uxth	r3, r3
 800b4b0:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800b4b2:	68bb      	ldr	r3, [r7, #8]
 800b4b4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800b4b8:	2b01      	cmp	r3, #1
 800b4ba:	f040 82ca 	bne.w	800ba52 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 800b4be:	68bb      	ldr	r3, [r7, #8]
 800b4c0:	695a      	ldr	r2, [r3, #20]
 800b4c2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800b4c6:	441a      	add	r2, r3
 800b4c8:	68bb      	ldr	r3, [r7, #8]
 800b4ca:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800b4cc:	68bb      	ldr	r3, [r7, #8]
 800b4ce:	69da      	ldr	r2, [r3, #28]
 800b4d0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800b4d4:	441a      	add	r2, r3
 800b4d6:	68bb      	ldr	r3, [r7, #8]
 800b4d8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800b4da:	68bb      	ldr	r3, [r7, #8]
 800b4dc:	6a1a      	ldr	r2, [r3, #32]
 800b4de:	68bb      	ldr	r3, [r7, #8]
 800b4e0:	691b      	ldr	r3, [r3, #16]
 800b4e2:	429a      	cmp	r2, r3
 800b4e4:	d309      	bcc.n	800b4fa <HAL_PCD_EP_DB_Transmit+0x2c6>
        {
          len = ep->maxpacket;
 800b4e6:	68bb      	ldr	r3, [r7, #8]
 800b4e8:	691b      	ldr	r3, [r3, #16]
 800b4ea:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 800b4ec:	68bb      	ldr	r3, [r7, #8]
 800b4ee:	6a1a      	ldr	r2, [r3, #32]
 800b4f0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b4f2:	1ad2      	subs	r2, r2, r3
 800b4f4:	68bb      	ldr	r3, [r7, #8]
 800b4f6:	621a      	str	r2, [r3, #32]
 800b4f8:	e015      	b.n	800b526 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else if (ep->xfer_len_db == 0U)
 800b4fa:	68bb      	ldr	r3, [r7, #8]
 800b4fc:	6a1b      	ldr	r3, [r3, #32]
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d107      	bne.n	800b512 <HAL_PCD_EP_DB_Transmit+0x2de>
        {
          len = TxPctSize;
 800b502:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800b506:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 800b508:	68bb      	ldr	r3, [r7, #8]
 800b50a:	2200      	movs	r2, #0
 800b50c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800b510:	e009      	b.n	800b526 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800b512:	68bb      	ldr	r3, [r7, #8]
 800b514:	2200      	movs	r2, #0
 800b516:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 800b51a:	68bb      	ldr	r3, [r7, #8]
 800b51c:	6a1b      	ldr	r3, [r3, #32]
 800b51e:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 800b520:	68bb      	ldr	r3, [r7, #8]
 800b522:	2200      	movs	r2, #0
 800b524:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer0 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800b526:	68bb      	ldr	r3, [r7, #8]
 800b528:	785b      	ldrb	r3, [r3, #1]
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d15f      	bne.n	800b5ee <HAL_PCD_EP_DB_Transmit+0x3ba>
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	643b      	str	r3, [r7, #64]	@ 0x40
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b53c:	b29b      	uxth	r3, r3
 800b53e:	461a      	mov	r2, r3
 800b540:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b542:	4413      	add	r3, r2
 800b544:	643b      	str	r3, [r7, #64]	@ 0x40
 800b546:	68bb      	ldr	r3, [r7, #8]
 800b548:	781b      	ldrb	r3, [r3, #0]
 800b54a:	00da      	lsls	r2, r3, #3
 800b54c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b54e:	4413      	add	r3, r2
 800b550:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b554:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b556:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b558:	881b      	ldrh	r3, [r3, #0]
 800b55a:	b29b      	uxth	r3, r3
 800b55c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b560:	b29a      	uxth	r2, r3
 800b562:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b564:	801a      	strh	r2, [r3, #0]
 800b566:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d10a      	bne.n	800b582 <HAL_PCD_EP_DB_Transmit+0x34e>
 800b56c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b56e:	881b      	ldrh	r3, [r3, #0]
 800b570:	b29b      	uxth	r3, r3
 800b572:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b576:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b57a:	b29a      	uxth	r2, r3
 800b57c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b57e:	801a      	strh	r2, [r3, #0]
 800b580:	e051      	b.n	800b626 <HAL_PCD_EP_DB_Transmit+0x3f2>
 800b582:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b584:	2b3e      	cmp	r3, #62	@ 0x3e
 800b586:	d816      	bhi.n	800b5b6 <HAL_PCD_EP_DB_Transmit+0x382>
 800b588:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b58a:	085b      	lsrs	r3, r3, #1
 800b58c:	653b      	str	r3, [r7, #80]	@ 0x50
 800b58e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b590:	f003 0301 	and.w	r3, r3, #1
 800b594:	2b00      	cmp	r3, #0
 800b596:	d002      	beq.n	800b59e <HAL_PCD_EP_DB_Transmit+0x36a>
 800b598:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b59a:	3301      	adds	r3, #1
 800b59c:	653b      	str	r3, [r7, #80]	@ 0x50
 800b59e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b5a0:	881b      	ldrh	r3, [r3, #0]
 800b5a2:	b29a      	uxth	r2, r3
 800b5a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b5a6:	b29b      	uxth	r3, r3
 800b5a8:	029b      	lsls	r3, r3, #10
 800b5aa:	b29b      	uxth	r3, r3
 800b5ac:	4313      	orrs	r3, r2
 800b5ae:	b29a      	uxth	r2, r3
 800b5b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b5b2:	801a      	strh	r2, [r3, #0]
 800b5b4:	e037      	b.n	800b626 <HAL_PCD_EP_DB_Transmit+0x3f2>
 800b5b6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b5b8:	095b      	lsrs	r3, r3, #5
 800b5ba:	653b      	str	r3, [r7, #80]	@ 0x50
 800b5bc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b5be:	f003 031f 	and.w	r3, r3, #31
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d102      	bne.n	800b5cc <HAL_PCD_EP_DB_Transmit+0x398>
 800b5c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b5c8:	3b01      	subs	r3, #1
 800b5ca:	653b      	str	r3, [r7, #80]	@ 0x50
 800b5cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b5ce:	881b      	ldrh	r3, [r3, #0]
 800b5d0:	b29a      	uxth	r2, r3
 800b5d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b5d4:	b29b      	uxth	r3, r3
 800b5d6:	029b      	lsls	r3, r3, #10
 800b5d8:	b29b      	uxth	r3, r3
 800b5da:	4313      	orrs	r3, r2
 800b5dc:	b29b      	uxth	r3, r3
 800b5de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b5e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b5e6:	b29a      	uxth	r2, r3
 800b5e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b5ea:	801a      	strh	r2, [r3, #0]
 800b5ec:	e01b      	b.n	800b626 <HAL_PCD_EP_DB_Transmit+0x3f2>
 800b5ee:	68bb      	ldr	r3, [r7, #8]
 800b5f0:	785b      	ldrb	r3, [r3, #1]
 800b5f2:	2b01      	cmp	r3, #1
 800b5f4:	d117      	bne.n	800b626 <HAL_PCD_EP_DB_Transmit+0x3f2>
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b604:	b29b      	uxth	r3, r3
 800b606:	461a      	mov	r2, r3
 800b608:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b60a:	4413      	add	r3, r2
 800b60c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b60e:	68bb      	ldr	r3, [r7, #8]
 800b610:	781b      	ldrb	r3, [r3, #0]
 800b612:	00da      	lsls	r2, r3, #3
 800b614:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b616:	4413      	add	r3, r2
 800b618:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b61c:	647b      	str	r3, [r7, #68]	@ 0x44
 800b61e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b620:	b29a      	uxth	r2, r3
 800b622:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b624:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	6818      	ldr	r0, [r3, #0]
 800b62a:	68bb      	ldr	r3, [r7, #8]
 800b62c:	6959      	ldr	r1, [r3, #20]
 800b62e:	68bb      	ldr	r3, [r7, #8]
 800b630:	891a      	ldrh	r2, [r3, #8]
 800b632:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b634:	b29b      	uxth	r3, r3
 800b636:	f007 fb7a 	bl	8012d2e <USB_WritePMA>
 800b63a:	e20a      	b.n	800ba52 <HAL_PCD_EP_DB_Transmit+0x81e>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b644:	b29b      	uxth	r3, r3
 800b646:	461a      	mov	r2, r3
 800b648:	68bb      	ldr	r3, [r7, #8]
 800b64a:	781b      	ldrb	r3, [r3, #0]
 800b64c:	00db      	lsls	r3, r3, #3
 800b64e:	4413      	add	r3, r2
 800b650:	68fa      	ldr	r2, [r7, #12]
 800b652:	6812      	ldr	r2, [r2, #0]
 800b654:	4413      	add	r3, r2
 800b656:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b65a:	881b      	ldrh	r3, [r3, #0]
 800b65c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b660:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len >= TxPctSize)
 800b664:	68bb      	ldr	r3, [r7, #8]
 800b666:	699a      	ldr	r2, [r3, #24]
 800b668:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800b66c:	429a      	cmp	r2, r3
 800b66e:	d307      	bcc.n	800b680 <HAL_PCD_EP_DB_Transmit+0x44c>
    {
      ep->xfer_len -= TxPctSize;
 800b670:	68bb      	ldr	r3, [r7, #8]
 800b672:	699a      	ldr	r2, [r3, #24]
 800b674:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800b678:	1ad2      	subs	r2, r2, r3
 800b67a:	68bb      	ldr	r3, [r7, #8]
 800b67c:	619a      	str	r2, [r3, #24]
 800b67e:	e002      	b.n	800b686 <HAL_PCD_EP_DB_Transmit+0x452>
    }
    else
    {
      ep->xfer_len = 0U;
 800b680:	68bb      	ldr	r3, [r7, #8]
 800b682:	2200      	movs	r2, #0
 800b684:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800b686:	68bb      	ldr	r3, [r7, #8]
 800b688:	699b      	ldr	r3, [r3, #24]
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	f040 80f6 	bne.w	800b87c <HAL_PCD_EP_DB_Transmit+0x648>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800b690:	68bb      	ldr	r3, [r7, #8]
 800b692:	785b      	ldrb	r3, [r3, #1]
 800b694:	2b00      	cmp	r3, #0
 800b696:	d126      	bne.n	800b6e6 <HAL_PCD_EP_DB_Transmit+0x4b2>
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	677b      	str	r3, [r7, #116]	@ 0x74
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b6a6:	b29b      	uxth	r3, r3
 800b6a8:	461a      	mov	r2, r3
 800b6aa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b6ac:	4413      	add	r3, r2
 800b6ae:	677b      	str	r3, [r7, #116]	@ 0x74
 800b6b0:	68bb      	ldr	r3, [r7, #8]
 800b6b2:	781b      	ldrb	r3, [r3, #0]
 800b6b4:	00da      	lsls	r2, r3, #3
 800b6b6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b6b8:	4413      	add	r3, r2
 800b6ba:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b6be:	673b      	str	r3, [r7, #112]	@ 0x70
 800b6c0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b6c2:	881b      	ldrh	r3, [r3, #0]
 800b6c4:	b29b      	uxth	r3, r3
 800b6c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b6ca:	b29a      	uxth	r2, r3
 800b6cc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b6ce:	801a      	strh	r2, [r3, #0]
 800b6d0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b6d2:	881b      	ldrh	r3, [r3, #0]
 800b6d4:	b29b      	uxth	r3, r3
 800b6d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b6da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b6de:	b29a      	uxth	r2, r3
 800b6e0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b6e2:	801a      	strh	r2, [r3, #0]
 800b6e4:	e01a      	b.n	800b71c <HAL_PCD_EP_DB_Transmit+0x4e8>
 800b6e6:	68bb      	ldr	r3, [r7, #8]
 800b6e8:	785b      	ldrb	r3, [r3, #1]
 800b6ea:	2b01      	cmp	r3, #1
 800b6ec:	d116      	bne.n	800b71c <HAL_PCD_EP_DB_Transmit+0x4e8>
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b6fc:	b29b      	uxth	r3, r3
 800b6fe:	461a      	mov	r2, r3
 800b700:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800b702:	4413      	add	r3, r2
 800b704:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800b706:	68bb      	ldr	r3, [r7, #8]
 800b708:	781b      	ldrb	r3, [r3, #0]
 800b70a:	00da      	lsls	r2, r3, #3
 800b70c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800b70e:	4413      	add	r3, r2
 800b710:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b714:	67bb      	str	r3, [r7, #120]	@ 0x78
 800b716:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b718:	2200      	movs	r2, #0
 800b71a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b724:	68bb      	ldr	r3, [r7, #8]
 800b726:	785b      	ldrb	r3, [r3, #1]
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d12f      	bne.n	800b78c <HAL_PCD_EP_DB_Transmit+0x558>
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b73c:	b29b      	uxth	r3, r3
 800b73e:	461a      	mov	r2, r3
 800b740:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b744:	4413      	add	r3, r2
 800b746:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800b74a:	68bb      	ldr	r3, [r7, #8]
 800b74c:	781b      	ldrb	r3, [r3, #0]
 800b74e:	00da      	lsls	r2, r3, #3
 800b750:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b754:	4413      	add	r3, r2
 800b756:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b75a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800b75e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b762:	881b      	ldrh	r3, [r3, #0]
 800b764:	b29b      	uxth	r3, r3
 800b766:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b76a:	b29a      	uxth	r2, r3
 800b76c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b770:	801a      	strh	r2, [r3, #0]
 800b772:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b776:	881b      	ldrh	r3, [r3, #0]
 800b778:	b29b      	uxth	r3, r3
 800b77a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b77e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b782:	b29a      	uxth	r2, r3
 800b784:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b788:	801a      	strh	r2, [r3, #0]
 800b78a:	e01c      	b.n	800b7c6 <HAL_PCD_EP_DB_Transmit+0x592>
 800b78c:	68bb      	ldr	r3, [r7, #8]
 800b78e:	785b      	ldrb	r3, [r3, #1]
 800b790:	2b01      	cmp	r3, #1
 800b792:	d118      	bne.n	800b7c6 <HAL_PCD_EP_DB_Transmit+0x592>
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b79c:	b29b      	uxth	r3, r3
 800b79e:	461a      	mov	r2, r3
 800b7a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b7a4:	4413      	add	r3, r2
 800b7a6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b7aa:	68bb      	ldr	r3, [r7, #8]
 800b7ac:	781b      	ldrb	r3, [r3, #0]
 800b7ae:	00da      	lsls	r2, r3, #3
 800b7b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b7b4:	4413      	add	r3, r2
 800b7b6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b7ba:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b7be:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800b7c2:	2200      	movs	r2, #0
 800b7c4:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 800b7c6:	68bb      	ldr	r3, [r7, #8]
 800b7c8:	78db      	ldrb	r3, [r3, #3]
 800b7ca:	2b02      	cmp	r3, #2
 800b7cc:	d127      	bne.n	800b81e <HAL_PCD_EP_DB_Transmit+0x5ea>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	461a      	mov	r2, r3
 800b7d4:	68bb      	ldr	r3, [r7, #8]
 800b7d6:	781b      	ldrb	r3, [r3, #0]
 800b7d8:	009b      	lsls	r3, r3, #2
 800b7da:	4413      	add	r3, r2
 800b7dc:	881b      	ldrh	r3, [r3, #0]
 800b7de:	b29b      	uxth	r3, r3
 800b7e0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b7e4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b7e8:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800b7ec:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800b7f0:	f083 0320 	eor.w	r3, r3, #32
 800b7f4:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	461a      	mov	r2, r3
 800b7fe:	68bb      	ldr	r3, [r7, #8]
 800b800:	781b      	ldrb	r3, [r3, #0]
 800b802:	009b      	lsls	r3, r3, #2
 800b804:	441a      	add	r2, r3
 800b806:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800b80a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b80e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b812:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b816:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b81a:	b29b      	uxth	r3, r3
 800b81c:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800b81e:	68bb      	ldr	r3, [r7, #8]
 800b820:	781b      	ldrb	r3, [r3, #0]
 800b822:	4619      	mov	r1, r3
 800b824:	68f8      	ldr	r0, [r7, #12]
 800b826:	f00d fa02 	bl	8018c2e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800b82a:	88fb      	ldrh	r3, [r7, #6]
 800b82c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b830:	2b00      	cmp	r3, #0
 800b832:	d121      	bne.n	800b878 <HAL_PCD_EP_DB_Transmit+0x644>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	461a      	mov	r2, r3
 800b83a:	68bb      	ldr	r3, [r7, #8]
 800b83c:	781b      	ldrb	r3, [r3, #0]
 800b83e:	009b      	lsls	r3, r3, #2
 800b840:	4413      	add	r3, r2
 800b842:	881b      	ldrh	r3, [r3, #0]
 800b844:	b29b      	uxth	r3, r3
 800b846:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b84a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b84e:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	461a      	mov	r2, r3
 800b858:	68bb      	ldr	r3, [r7, #8]
 800b85a:	781b      	ldrb	r3, [r3, #0]
 800b85c:	009b      	lsls	r3, r3, #2
 800b85e:	441a      	add	r2, r3
 800b860:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800b864:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b868:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b86c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b870:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b874:	b29b      	uxth	r3, r3
 800b876:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 800b878:	2300      	movs	r3, #0
 800b87a:	e113      	b.n	800baa4 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800b87c:	88fb      	ldrh	r3, [r7, #6]
 800b87e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b882:	2b00      	cmp	r3, #0
 800b884:	d121      	bne.n	800b8ca <HAL_PCD_EP_DB_Transmit+0x696>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	461a      	mov	r2, r3
 800b88c:	68bb      	ldr	r3, [r7, #8]
 800b88e:	781b      	ldrb	r3, [r3, #0]
 800b890:	009b      	lsls	r3, r3, #2
 800b892:	4413      	add	r3, r2
 800b894:	881b      	ldrh	r3, [r3, #0]
 800b896:	b29b      	uxth	r3, r3
 800b898:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b89c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b8a0:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	461a      	mov	r2, r3
 800b8aa:	68bb      	ldr	r3, [r7, #8]
 800b8ac:	781b      	ldrb	r3, [r3, #0]
 800b8ae:	009b      	lsls	r3, r3, #2
 800b8b0:	441a      	add	r2, r3
 800b8b2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800b8b6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b8ba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b8be:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b8c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b8c6:	b29b      	uxth	r3, r3
 800b8c8:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800b8ca:	68bb      	ldr	r3, [r7, #8]
 800b8cc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800b8d0:	2b01      	cmp	r3, #1
 800b8d2:	f040 80be 	bne.w	800ba52 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 800b8d6:	68bb      	ldr	r3, [r7, #8]
 800b8d8:	695a      	ldr	r2, [r3, #20]
 800b8da:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800b8de:	441a      	add	r2, r3
 800b8e0:	68bb      	ldr	r3, [r7, #8]
 800b8e2:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800b8e4:	68bb      	ldr	r3, [r7, #8]
 800b8e6:	69da      	ldr	r2, [r3, #28]
 800b8e8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800b8ec:	441a      	add	r2, r3
 800b8ee:	68bb      	ldr	r3, [r7, #8]
 800b8f0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800b8f2:	68bb      	ldr	r3, [r7, #8]
 800b8f4:	6a1a      	ldr	r2, [r3, #32]
 800b8f6:	68bb      	ldr	r3, [r7, #8]
 800b8f8:	691b      	ldr	r3, [r3, #16]
 800b8fa:	429a      	cmp	r2, r3
 800b8fc:	d309      	bcc.n	800b912 <HAL_PCD_EP_DB_Transmit+0x6de>
        {
          len = ep->maxpacket;
 800b8fe:	68bb      	ldr	r3, [r7, #8]
 800b900:	691b      	ldr	r3, [r3, #16]
 800b902:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 800b904:	68bb      	ldr	r3, [r7, #8]
 800b906:	6a1a      	ldr	r2, [r3, #32]
 800b908:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b90a:	1ad2      	subs	r2, r2, r3
 800b90c:	68bb      	ldr	r3, [r7, #8]
 800b90e:	621a      	str	r2, [r3, #32]
 800b910:	e015      	b.n	800b93e <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else if (ep->xfer_len_db == 0U)
 800b912:	68bb      	ldr	r3, [r7, #8]
 800b914:	6a1b      	ldr	r3, [r3, #32]
 800b916:	2b00      	cmp	r3, #0
 800b918:	d107      	bne.n	800b92a <HAL_PCD_EP_DB_Transmit+0x6f6>
        {
          len = TxPctSize;
 800b91a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800b91e:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 800b920:	68bb      	ldr	r3, [r7, #8]
 800b922:	2200      	movs	r2, #0
 800b924:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800b928:	e009      	b.n	800b93e <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else
        {
          len = ep->xfer_len_db;
 800b92a:	68bb      	ldr	r3, [r7, #8]
 800b92c:	6a1b      	ldr	r3, [r3, #32]
 800b92e:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 800b930:	68bb      	ldr	r3, [r7, #8]
 800b932:	2200      	movs	r2, #0
 800b934:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800b936:	68bb      	ldr	r3, [r7, #8]
 800b938:	2200      	movs	r2, #0
 800b93a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b944:	68bb      	ldr	r3, [r7, #8]
 800b946:	785b      	ldrb	r3, [r3, #1]
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d15f      	bne.n	800ba0c <HAL_PCD_EP_DB_Transmit+0x7d8>
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b95a:	b29b      	uxth	r3, r3
 800b95c:	461a      	mov	r2, r3
 800b95e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b960:	4413      	add	r3, r2
 800b962:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b964:	68bb      	ldr	r3, [r7, #8]
 800b966:	781b      	ldrb	r3, [r3, #0]
 800b968:	00da      	lsls	r2, r3, #3
 800b96a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b96c:	4413      	add	r3, r2
 800b96e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b972:	667b      	str	r3, [r7, #100]	@ 0x64
 800b974:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b976:	881b      	ldrh	r3, [r3, #0]
 800b978:	b29b      	uxth	r3, r3
 800b97a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b97e:	b29a      	uxth	r2, r3
 800b980:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b982:	801a      	strh	r2, [r3, #0]
 800b984:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b986:	2b00      	cmp	r3, #0
 800b988:	d10a      	bne.n	800b9a0 <HAL_PCD_EP_DB_Transmit+0x76c>
 800b98a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b98c:	881b      	ldrh	r3, [r3, #0]
 800b98e:	b29b      	uxth	r3, r3
 800b990:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b994:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b998:	b29a      	uxth	r2, r3
 800b99a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b99c:	801a      	strh	r2, [r3, #0]
 800b99e:	e04e      	b.n	800ba3e <HAL_PCD_EP_DB_Transmit+0x80a>
 800b9a0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b9a2:	2b3e      	cmp	r3, #62	@ 0x3e
 800b9a4:	d816      	bhi.n	800b9d4 <HAL_PCD_EP_DB_Transmit+0x7a0>
 800b9a6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b9a8:	085b      	lsrs	r3, r3, #1
 800b9aa:	663b      	str	r3, [r7, #96]	@ 0x60
 800b9ac:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b9ae:	f003 0301 	and.w	r3, r3, #1
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d002      	beq.n	800b9bc <HAL_PCD_EP_DB_Transmit+0x788>
 800b9b6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b9b8:	3301      	adds	r3, #1
 800b9ba:	663b      	str	r3, [r7, #96]	@ 0x60
 800b9bc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b9be:	881b      	ldrh	r3, [r3, #0]
 800b9c0:	b29a      	uxth	r2, r3
 800b9c2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b9c4:	b29b      	uxth	r3, r3
 800b9c6:	029b      	lsls	r3, r3, #10
 800b9c8:	b29b      	uxth	r3, r3
 800b9ca:	4313      	orrs	r3, r2
 800b9cc:	b29a      	uxth	r2, r3
 800b9ce:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b9d0:	801a      	strh	r2, [r3, #0]
 800b9d2:	e034      	b.n	800ba3e <HAL_PCD_EP_DB_Transmit+0x80a>
 800b9d4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b9d6:	095b      	lsrs	r3, r3, #5
 800b9d8:	663b      	str	r3, [r7, #96]	@ 0x60
 800b9da:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b9dc:	f003 031f 	and.w	r3, r3, #31
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d102      	bne.n	800b9ea <HAL_PCD_EP_DB_Transmit+0x7b6>
 800b9e4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b9e6:	3b01      	subs	r3, #1
 800b9e8:	663b      	str	r3, [r7, #96]	@ 0x60
 800b9ea:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b9ec:	881b      	ldrh	r3, [r3, #0]
 800b9ee:	b29a      	uxth	r2, r3
 800b9f0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b9f2:	b29b      	uxth	r3, r3
 800b9f4:	029b      	lsls	r3, r3, #10
 800b9f6:	b29b      	uxth	r3, r3
 800b9f8:	4313      	orrs	r3, r2
 800b9fa:	b29b      	uxth	r3, r3
 800b9fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ba00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ba04:	b29a      	uxth	r2, r3
 800ba06:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ba08:	801a      	strh	r2, [r3, #0]
 800ba0a:	e018      	b.n	800ba3e <HAL_PCD_EP_DB_Transmit+0x80a>
 800ba0c:	68bb      	ldr	r3, [r7, #8]
 800ba0e:	785b      	ldrb	r3, [r3, #1]
 800ba10:	2b01      	cmp	r3, #1
 800ba12:	d114      	bne.n	800ba3e <HAL_PCD_EP_DB_Transmit+0x80a>
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ba1c:	b29b      	uxth	r3, r3
 800ba1e:	461a      	mov	r2, r3
 800ba20:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ba22:	4413      	add	r3, r2
 800ba24:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ba26:	68bb      	ldr	r3, [r7, #8]
 800ba28:	781b      	ldrb	r3, [r3, #0]
 800ba2a:	00da      	lsls	r2, r3, #3
 800ba2c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ba2e:	4413      	add	r3, r2
 800ba30:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800ba34:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800ba36:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ba38:	b29a      	uxth	r2, r3
 800ba3a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ba3c:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	6818      	ldr	r0, [r3, #0]
 800ba42:	68bb      	ldr	r3, [r7, #8]
 800ba44:	6959      	ldr	r1, [r3, #20]
 800ba46:	68bb      	ldr	r3, [r7, #8]
 800ba48:	895a      	ldrh	r2, [r3, #10]
 800ba4a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ba4c:	b29b      	uxth	r3, r3
 800ba4e:	f007 f96e 	bl	8012d2e <USB_WritePMA>
      }
    }
  }

  /* Enable endpoint IN */
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	461a      	mov	r2, r3
 800ba58:	68bb      	ldr	r3, [r7, #8]
 800ba5a:	781b      	ldrb	r3, [r3, #0]
 800ba5c:	009b      	lsls	r3, r3, #2
 800ba5e:	4413      	add	r3, r2
 800ba60:	881b      	ldrh	r3, [r3, #0]
 800ba62:	b29b      	uxth	r3, r3
 800ba64:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ba68:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ba6c:	82fb      	strh	r3, [r7, #22]
 800ba6e:	8afb      	ldrh	r3, [r7, #22]
 800ba70:	f083 0310 	eor.w	r3, r3, #16
 800ba74:	82fb      	strh	r3, [r7, #22]
 800ba76:	8afb      	ldrh	r3, [r7, #22]
 800ba78:	f083 0320 	eor.w	r3, r3, #32
 800ba7c:	82fb      	strh	r3, [r7, #22]
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	461a      	mov	r2, r3
 800ba84:	68bb      	ldr	r3, [r7, #8]
 800ba86:	781b      	ldrb	r3, [r3, #0]
 800ba88:	009b      	lsls	r3, r3, #2
 800ba8a:	441a      	add	r2, r3
 800ba8c:	8afb      	ldrh	r3, [r7, #22]
 800ba8e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ba92:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ba96:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ba9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ba9e:	b29b      	uxth	r3, r3
 800baa0:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800baa2:	2300      	movs	r3, #0
}
 800baa4:	4618      	mov	r0, r3
 800baa6:	3798      	adds	r7, #152	@ 0x98
 800baa8:	46bd      	mov	sp, r7
 800baaa:	bd80      	pop	{r7, pc}

0800baac <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800baac:	b480      	push	{r7}
 800baae:	b087      	sub	sp, #28
 800bab0:	af00      	add	r7, sp, #0
 800bab2:	60f8      	str	r0, [r7, #12]
 800bab4:	607b      	str	r3, [r7, #4]
 800bab6:	460b      	mov	r3, r1
 800bab8:	817b      	strh	r3, [r7, #10]
 800baba:	4613      	mov	r3, r2
 800babc:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800babe:	897b      	ldrh	r3, [r7, #10]
 800bac0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bac4:	b29b      	uxth	r3, r3
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d00b      	beq.n	800bae2 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800baca:	897b      	ldrh	r3, [r7, #10]
 800bacc:	f003 0207 	and.w	r2, r3, #7
 800bad0:	4613      	mov	r3, r2
 800bad2:	009b      	lsls	r3, r3, #2
 800bad4:	4413      	add	r3, r2
 800bad6:	00db      	lsls	r3, r3, #3
 800bad8:	3310      	adds	r3, #16
 800bada:	68fa      	ldr	r2, [r7, #12]
 800badc:	4413      	add	r3, r2
 800bade:	617b      	str	r3, [r7, #20]
 800bae0:	e009      	b.n	800baf6 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800bae2:	897a      	ldrh	r2, [r7, #10]
 800bae4:	4613      	mov	r3, r2
 800bae6:	009b      	lsls	r3, r3, #2
 800bae8:	4413      	add	r3, r2
 800baea:	00db      	lsls	r3, r3, #3
 800baec:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800baf0:	68fa      	ldr	r2, [r7, #12]
 800baf2:	4413      	add	r3, r2
 800baf4:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800baf6:	893b      	ldrh	r3, [r7, #8]
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d107      	bne.n	800bb0c <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800bafc:	697b      	ldr	r3, [r7, #20]
 800bafe:	2200      	movs	r2, #0
 800bb00:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	b29a      	uxth	r2, r3
 800bb06:	697b      	ldr	r3, [r7, #20]
 800bb08:	80da      	strh	r2, [r3, #6]
 800bb0a:	e00b      	b.n	800bb24 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800bb0c:	697b      	ldr	r3, [r7, #20]
 800bb0e:	2201      	movs	r2, #1
 800bb10:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	b29a      	uxth	r2, r3
 800bb16:	697b      	ldr	r3, [r7, #20]
 800bb18:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	0c1b      	lsrs	r3, r3, #16
 800bb1e:	b29a      	uxth	r2, r3
 800bb20:	697b      	ldr	r3, [r7, #20]
 800bb22:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800bb24:	2300      	movs	r3, #0
}
 800bb26:	4618      	mov	r0, r3
 800bb28:	371c      	adds	r7, #28
 800bb2a:	46bd      	mov	sp, r7
 800bb2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb30:	4770      	bx	lr

0800bb32 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800bb32:	b480      	push	{r7}
 800bb34:	b085      	sub	sp, #20
 800bb36:	af00      	add	r7, sp, #0
 800bb38:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	2201      	movs	r2, #1
 800bb44:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	2200      	movs	r2, #0
 800bb4c:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800bb56:	b29b      	uxth	r3, r3
 800bb58:	f043 0301 	orr.w	r3, r3, #1
 800bb5c:	b29a      	uxth	r2, r3
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800bb6a:	b29b      	uxth	r3, r3
 800bb6c:	f043 0302 	orr.w	r3, r3, #2
 800bb70:	b29a      	uxth	r2, r3
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 800bb78:	2300      	movs	r3, #0
}
 800bb7a:	4618      	mov	r0, r3
 800bb7c:	3714      	adds	r7, #20
 800bb7e:	46bd      	mov	sp, r7
 800bb80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb84:	4770      	bx	lr
	...

0800bb88 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800bb88:	b480      	push	{r7}
 800bb8a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800bb8c:	4b05      	ldr	r3, [pc, #20]	@ (800bba4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	4a04      	ldr	r2, [pc, #16]	@ (800bba4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800bb92:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800bb96:	6013      	str	r3, [r2, #0]
}
 800bb98:	bf00      	nop
 800bb9a:	46bd      	mov	sp, r7
 800bb9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bba0:	4770      	bx	lr
 800bba2:	bf00      	nop
 800bba4:	58000400 	.word	0x58000400

0800bba8 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800bba8:	b480      	push	{r7}
 800bbaa:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 800bbac:	4b04      	ldr	r3, [pc, #16]	@ (800bbc0 <HAL_PWREx_GetVoltageRange+0x18>)
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 800bbb4:	4618      	mov	r0, r3
 800bbb6:	46bd      	mov	sp, r7
 800bbb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbbc:	4770      	bx	lr
 800bbbe:	bf00      	nop
 800bbc0:	58000400 	.word	0x58000400

0800bbc4 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800bbc4:	b480      	push	{r7}
 800bbc6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800bbc8:	4b05      	ldr	r3, [pc, #20]	@ (800bbe0 <HAL_PWREx_EnableVddUSB+0x1c>)
 800bbca:	685b      	ldr	r3, [r3, #4]
 800bbcc:	4a04      	ldr	r2, [pc, #16]	@ (800bbe0 <HAL_PWREx_EnableVddUSB+0x1c>)
 800bbce:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800bbd2:	6053      	str	r3, [r2, #4]
}
 800bbd4:	bf00      	nop
 800bbd6:	46bd      	mov	sp, r7
 800bbd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbdc:	4770      	bx	lr
 800bbde:	bf00      	nop
 800bbe0:	58000400 	.word	0x58000400

0800bbe4 <LL_RCC_HSE_IsEnabledDiv2>:
{
 800bbe4:	b480      	push	{r7}
 800bbe6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800bbe8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800bbf2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bbf6:	d101      	bne.n	800bbfc <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800bbf8:	2301      	movs	r3, #1
 800bbfa:	e000      	b.n	800bbfe <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800bbfc:	2300      	movs	r3, #0
}
 800bbfe:	4618      	mov	r0, r3
 800bc00:	46bd      	mov	sp, r7
 800bc02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc06:	4770      	bx	lr

0800bc08 <LL_RCC_HSE_Enable>:
{
 800bc08:	b480      	push	{r7}
 800bc0a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800bc0c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800bc16:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800bc1a:	6013      	str	r3, [r2, #0]
}
 800bc1c:	bf00      	nop
 800bc1e:	46bd      	mov	sp, r7
 800bc20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc24:	4770      	bx	lr

0800bc26 <LL_RCC_HSE_Disable>:
{
 800bc26:	b480      	push	{r7}
 800bc28:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800bc2a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800bc34:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800bc38:	6013      	str	r3, [r2, #0]
}
 800bc3a:	bf00      	nop
 800bc3c:	46bd      	mov	sp, r7
 800bc3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc42:	4770      	bx	lr

0800bc44 <LL_RCC_HSE_IsReady>:
{
 800bc44:	b480      	push	{r7}
 800bc46:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800bc48:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bc52:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bc56:	d101      	bne.n	800bc5c <LL_RCC_HSE_IsReady+0x18>
 800bc58:	2301      	movs	r3, #1
 800bc5a:	e000      	b.n	800bc5e <LL_RCC_HSE_IsReady+0x1a>
 800bc5c:	2300      	movs	r3, #0
}
 800bc5e:	4618      	mov	r0, r3
 800bc60:	46bd      	mov	sp, r7
 800bc62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc66:	4770      	bx	lr

0800bc68 <LL_RCC_HSI_Enable>:
{
 800bc68:	b480      	push	{r7}
 800bc6a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800bc6c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800bc76:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800bc7a:	6013      	str	r3, [r2, #0]
}
 800bc7c:	bf00      	nop
 800bc7e:	46bd      	mov	sp, r7
 800bc80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc84:	4770      	bx	lr

0800bc86 <LL_RCC_HSI_Disable>:
{
 800bc86:	b480      	push	{r7}
 800bc88:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800bc8a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800bc94:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bc98:	6013      	str	r3, [r2, #0]
}
 800bc9a:	bf00      	nop
 800bc9c:	46bd      	mov	sp, r7
 800bc9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca2:	4770      	bx	lr

0800bca4 <LL_RCC_HSI_IsReady>:
{
 800bca4:	b480      	push	{r7}
 800bca6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800bca8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800bcb2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bcb6:	d101      	bne.n	800bcbc <LL_RCC_HSI_IsReady+0x18>
 800bcb8:	2301      	movs	r3, #1
 800bcba:	e000      	b.n	800bcbe <LL_RCC_HSI_IsReady+0x1a>
 800bcbc:	2300      	movs	r3, #0
}
 800bcbe:	4618      	mov	r0, r3
 800bcc0:	46bd      	mov	sp, r7
 800bcc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc6:	4770      	bx	lr

0800bcc8 <LL_RCC_HSI_SetCalibTrimming>:
{
 800bcc8:	b480      	push	{r7}
 800bcca:	b083      	sub	sp, #12
 800bccc:	af00      	add	r7, sp, #0
 800bcce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800bcd0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bcd4:	685b      	ldr	r3, [r3, #4]
 800bcd6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	061b      	lsls	r3, r3, #24
 800bcde:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bce2:	4313      	orrs	r3, r2
 800bce4:	604b      	str	r3, [r1, #4]
}
 800bce6:	bf00      	nop
 800bce8:	370c      	adds	r7, #12
 800bcea:	46bd      	mov	sp, r7
 800bcec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcf0:	4770      	bx	lr

0800bcf2 <LL_RCC_HSI48_Enable>:
{
 800bcf2:	b480      	push	{r7}
 800bcf4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800bcf6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bcfa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800bcfe:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800bd02:	f043 0301 	orr.w	r3, r3, #1
 800bd06:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 800bd0a:	bf00      	nop
 800bd0c:	46bd      	mov	sp, r7
 800bd0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd12:	4770      	bx	lr

0800bd14 <LL_RCC_HSI48_Disable>:
{
 800bd14:	b480      	push	{r7}
 800bd16:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800bd18:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bd1c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800bd20:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800bd24:	f023 0301 	bic.w	r3, r3, #1
 800bd28:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 800bd2c:	bf00      	nop
 800bd2e:	46bd      	mov	sp, r7
 800bd30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd34:	4770      	bx	lr

0800bd36 <LL_RCC_HSI48_IsReady>:
{
 800bd36:	b480      	push	{r7}
 800bd38:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800bd3a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bd3e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800bd42:	f003 0302 	and.w	r3, r3, #2
 800bd46:	2b02      	cmp	r3, #2
 800bd48:	d101      	bne.n	800bd4e <LL_RCC_HSI48_IsReady+0x18>
 800bd4a:	2301      	movs	r3, #1
 800bd4c:	e000      	b.n	800bd50 <LL_RCC_HSI48_IsReady+0x1a>
 800bd4e:	2300      	movs	r3, #0
}
 800bd50:	4618      	mov	r0, r3
 800bd52:	46bd      	mov	sp, r7
 800bd54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd58:	4770      	bx	lr

0800bd5a <LL_RCC_LSE_Enable>:
{
 800bd5a:	b480      	push	{r7}
 800bd5c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800bd5e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bd62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bd66:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800bd6a:	f043 0301 	orr.w	r3, r3, #1
 800bd6e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800bd72:	bf00      	nop
 800bd74:	46bd      	mov	sp, r7
 800bd76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd7a:	4770      	bx	lr

0800bd7c <LL_RCC_LSE_Disable>:
{
 800bd7c:	b480      	push	{r7}
 800bd7e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800bd80:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bd84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bd88:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800bd8c:	f023 0301 	bic.w	r3, r3, #1
 800bd90:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800bd94:	bf00      	nop
 800bd96:	46bd      	mov	sp, r7
 800bd98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd9c:	4770      	bx	lr

0800bd9e <LL_RCC_LSE_EnableBypass>:
{
 800bd9e:	b480      	push	{r7}
 800bda0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800bda2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bda6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bdaa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800bdae:	f043 0304 	orr.w	r3, r3, #4
 800bdb2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800bdb6:	bf00      	nop
 800bdb8:	46bd      	mov	sp, r7
 800bdba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdbe:	4770      	bx	lr

0800bdc0 <LL_RCC_LSE_DisableBypass>:
{
 800bdc0:	b480      	push	{r7}
 800bdc2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800bdc4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bdc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bdcc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800bdd0:	f023 0304 	bic.w	r3, r3, #4
 800bdd4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800bdd8:	bf00      	nop
 800bdda:	46bd      	mov	sp, r7
 800bddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bde0:	4770      	bx	lr

0800bde2 <LL_RCC_LSE_IsReady>:
{
 800bde2:	b480      	push	{r7}
 800bde4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800bde6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bdea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bdee:	f003 0302 	and.w	r3, r3, #2
 800bdf2:	2b02      	cmp	r3, #2
 800bdf4:	d101      	bne.n	800bdfa <LL_RCC_LSE_IsReady+0x18>
 800bdf6:	2301      	movs	r3, #1
 800bdf8:	e000      	b.n	800bdfc <LL_RCC_LSE_IsReady+0x1a>
 800bdfa:	2300      	movs	r3, #0
}
 800bdfc:	4618      	mov	r0, r3
 800bdfe:	46bd      	mov	sp, r7
 800be00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be04:	4770      	bx	lr

0800be06 <LL_RCC_LSI1_Enable>:
{
 800be06:	b480      	push	{r7}
 800be08:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800be0a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800be0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800be12:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800be16:	f043 0301 	orr.w	r3, r3, #1
 800be1a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800be1e:	bf00      	nop
 800be20:	46bd      	mov	sp, r7
 800be22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be26:	4770      	bx	lr

0800be28 <LL_RCC_LSI1_Disable>:
{
 800be28:	b480      	push	{r7}
 800be2a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800be2c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800be30:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800be34:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800be38:	f023 0301 	bic.w	r3, r3, #1
 800be3c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800be40:	bf00      	nop
 800be42:	46bd      	mov	sp, r7
 800be44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be48:	4770      	bx	lr

0800be4a <LL_RCC_LSI1_IsReady>:
{
 800be4a:	b480      	push	{r7}
 800be4c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800be4e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800be52:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800be56:	f003 0302 	and.w	r3, r3, #2
 800be5a:	2b02      	cmp	r3, #2
 800be5c:	d101      	bne.n	800be62 <LL_RCC_LSI1_IsReady+0x18>
 800be5e:	2301      	movs	r3, #1
 800be60:	e000      	b.n	800be64 <LL_RCC_LSI1_IsReady+0x1a>
 800be62:	2300      	movs	r3, #0
}
 800be64:	4618      	mov	r0, r3
 800be66:	46bd      	mov	sp, r7
 800be68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be6c:	4770      	bx	lr

0800be6e <LL_RCC_LSI2_Enable>:
{
 800be6e:	b480      	push	{r7}
 800be70:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800be72:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800be76:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800be7a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800be7e:	f043 0304 	orr.w	r3, r3, #4
 800be82:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800be86:	bf00      	nop
 800be88:	46bd      	mov	sp, r7
 800be8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be8e:	4770      	bx	lr

0800be90 <LL_RCC_LSI2_Disable>:
{
 800be90:	b480      	push	{r7}
 800be92:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800be94:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800be98:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800be9c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800bea0:	f023 0304 	bic.w	r3, r3, #4
 800bea4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800bea8:	bf00      	nop
 800beaa:	46bd      	mov	sp, r7
 800beac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beb0:	4770      	bx	lr

0800beb2 <LL_RCC_LSI2_IsReady>:
{
 800beb2:	b480      	push	{r7}
 800beb4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800beb6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800beba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800bebe:	f003 0308 	and.w	r3, r3, #8
 800bec2:	2b08      	cmp	r3, #8
 800bec4:	d101      	bne.n	800beca <LL_RCC_LSI2_IsReady+0x18>
 800bec6:	2301      	movs	r3, #1
 800bec8:	e000      	b.n	800becc <LL_RCC_LSI2_IsReady+0x1a>
 800beca:	2300      	movs	r3, #0
}
 800becc:	4618      	mov	r0, r3
 800bece:	46bd      	mov	sp, r7
 800bed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bed4:	4770      	bx	lr

0800bed6 <LL_RCC_LSI2_SetTrimming>:
{
 800bed6:	b480      	push	{r7}
 800bed8:	b083      	sub	sp, #12
 800beda:	af00      	add	r7, sp, #0
 800bedc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800bede:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bee2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800bee6:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	021b      	lsls	r3, r3, #8
 800beee:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bef2:	4313      	orrs	r3, r2
 800bef4:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 800bef8:	bf00      	nop
 800befa:	370c      	adds	r7, #12
 800befc:	46bd      	mov	sp, r7
 800befe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf02:	4770      	bx	lr

0800bf04 <LL_RCC_MSI_Enable>:
{
 800bf04:	b480      	push	{r7}
 800bf06:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800bf08:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800bf12:	f043 0301 	orr.w	r3, r3, #1
 800bf16:	6013      	str	r3, [r2, #0]
}
 800bf18:	bf00      	nop
 800bf1a:	46bd      	mov	sp, r7
 800bf1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf20:	4770      	bx	lr

0800bf22 <LL_RCC_MSI_Disable>:
{
 800bf22:	b480      	push	{r7}
 800bf24:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800bf26:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800bf30:	f023 0301 	bic.w	r3, r3, #1
 800bf34:	6013      	str	r3, [r2, #0]
}
 800bf36:	bf00      	nop
 800bf38:	46bd      	mov	sp, r7
 800bf3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf3e:	4770      	bx	lr

0800bf40 <LL_RCC_MSI_IsReady>:
{
 800bf40:	b480      	push	{r7}
 800bf42:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800bf44:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	f003 0302 	and.w	r3, r3, #2
 800bf4e:	2b02      	cmp	r3, #2
 800bf50:	d101      	bne.n	800bf56 <LL_RCC_MSI_IsReady+0x16>
 800bf52:	2301      	movs	r3, #1
 800bf54:	e000      	b.n	800bf58 <LL_RCC_MSI_IsReady+0x18>
 800bf56:	2300      	movs	r3, #0
}
 800bf58:	4618      	mov	r0, r3
 800bf5a:	46bd      	mov	sp, r7
 800bf5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf60:	4770      	bx	lr

0800bf62 <LL_RCC_MSI_SetRange>:
{
 800bf62:	b480      	push	{r7}
 800bf64:	b083      	sub	sp, #12
 800bf66:	af00      	add	r7, sp, #0
 800bf68:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800bf6a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800bf74:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	4313      	orrs	r3, r2
 800bf7c:	600b      	str	r3, [r1, #0]
}
 800bf7e:	bf00      	nop
 800bf80:	370c      	adds	r7, #12
 800bf82:	46bd      	mov	sp, r7
 800bf84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf88:	4770      	bx	lr

0800bf8a <LL_RCC_MSI_GetRange>:
{
 800bf8a:	b480      	push	{r7}
 800bf8c:	b083      	sub	sp, #12
 800bf8e:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 800bf90:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800bf9a:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	2bb0      	cmp	r3, #176	@ 0xb0
 800bfa0:	d901      	bls.n	800bfa6 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 800bfa2:	23b0      	movs	r3, #176	@ 0xb0
 800bfa4:	607b      	str	r3, [r7, #4]
  return msiRange;
 800bfa6:	687b      	ldr	r3, [r7, #4]
}
 800bfa8:	4618      	mov	r0, r3
 800bfaa:	370c      	adds	r7, #12
 800bfac:	46bd      	mov	sp, r7
 800bfae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfb2:	4770      	bx	lr

0800bfb4 <LL_RCC_MSI_SetCalibTrimming>:
{
 800bfb4:	b480      	push	{r7}
 800bfb6:	b083      	sub	sp, #12
 800bfb8:	af00      	add	r7, sp, #0
 800bfba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800bfbc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bfc0:	685b      	ldr	r3, [r3, #4]
 800bfc2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	021b      	lsls	r3, r3, #8
 800bfca:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bfce:	4313      	orrs	r3, r2
 800bfd0:	604b      	str	r3, [r1, #4]
}
 800bfd2:	bf00      	nop
 800bfd4:	370c      	adds	r7, #12
 800bfd6:	46bd      	mov	sp, r7
 800bfd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfdc:	4770      	bx	lr

0800bfde <LL_RCC_SetSysClkSource>:
{
 800bfde:	b480      	push	{r7}
 800bfe0:	b083      	sub	sp, #12
 800bfe2:	af00      	add	r7, sp, #0
 800bfe4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800bfe6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bfea:	689b      	ldr	r3, [r3, #8]
 800bfec:	f023 0203 	bic.w	r2, r3, #3
 800bff0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	4313      	orrs	r3, r2
 800bff8:	608b      	str	r3, [r1, #8]
}
 800bffa:	bf00      	nop
 800bffc:	370c      	adds	r7, #12
 800bffe:	46bd      	mov	sp, r7
 800c000:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c004:	4770      	bx	lr

0800c006 <LL_RCC_GetSysClkSource>:
{
 800c006:	b480      	push	{r7}
 800c008:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800c00a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c00e:	689b      	ldr	r3, [r3, #8]
 800c010:	f003 030c 	and.w	r3, r3, #12
}
 800c014:	4618      	mov	r0, r3
 800c016:	46bd      	mov	sp, r7
 800c018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c01c:	4770      	bx	lr

0800c01e <LL_RCC_SetAHBPrescaler>:
{
 800c01e:	b480      	push	{r7}
 800c020:	b083      	sub	sp, #12
 800c022:	af00      	add	r7, sp, #0
 800c024:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800c026:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c02a:	689b      	ldr	r3, [r3, #8]
 800c02c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800c030:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	4313      	orrs	r3, r2
 800c038:	608b      	str	r3, [r1, #8]
}
 800c03a:	bf00      	nop
 800c03c:	370c      	adds	r7, #12
 800c03e:	46bd      	mov	sp, r7
 800c040:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c044:	4770      	bx	lr

0800c046 <LL_C2_RCC_SetAHBPrescaler>:
{
 800c046:	b480      	push	{r7}
 800c048:	b083      	sub	sp, #12
 800c04a:	af00      	add	r7, sp, #0
 800c04c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800c04e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c052:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800c056:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800c05a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	4313      	orrs	r3, r2
 800c062:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800c066:	bf00      	nop
 800c068:	370c      	adds	r7, #12
 800c06a:	46bd      	mov	sp, r7
 800c06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c070:	4770      	bx	lr

0800c072 <LL_RCC_SetAHB4Prescaler>:
{
 800c072:	b480      	push	{r7}
 800c074:	b083      	sub	sp, #12
 800c076:	af00      	add	r7, sp, #0
 800c078:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800c07a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c07e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800c082:	f023 020f 	bic.w	r2, r3, #15
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	091b      	lsrs	r3, r3, #4
 800c08a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c08e:	4313      	orrs	r3, r2
 800c090:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800c094:	bf00      	nop
 800c096:	370c      	adds	r7, #12
 800c098:	46bd      	mov	sp, r7
 800c09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c09e:	4770      	bx	lr

0800c0a0 <LL_RCC_SetAPB1Prescaler>:
{
 800c0a0:	b480      	push	{r7}
 800c0a2:	b083      	sub	sp, #12
 800c0a4:	af00      	add	r7, sp, #0
 800c0a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800c0a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c0ac:	689b      	ldr	r3, [r3, #8]
 800c0ae:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800c0b2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	4313      	orrs	r3, r2
 800c0ba:	608b      	str	r3, [r1, #8]
}
 800c0bc:	bf00      	nop
 800c0be:	370c      	adds	r7, #12
 800c0c0:	46bd      	mov	sp, r7
 800c0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0c6:	4770      	bx	lr

0800c0c8 <LL_RCC_SetAPB2Prescaler>:
{
 800c0c8:	b480      	push	{r7}
 800c0ca:	b083      	sub	sp, #12
 800c0cc:	af00      	add	r7, sp, #0
 800c0ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800c0d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c0d4:	689b      	ldr	r3, [r3, #8]
 800c0d6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800c0da:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	4313      	orrs	r3, r2
 800c0e2:	608b      	str	r3, [r1, #8]
}
 800c0e4:	bf00      	nop
 800c0e6:	370c      	adds	r7, #12
 800c0e8:	46bd      	mov	sp, r7
 800c0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ee:	4770      	bx	lr

0800c0f0 <LL_RCC_GetAHBPrescaler>:
{
 800c0f0:	b480      	push	{r7}
 800c0f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800c0f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c0f8:	689b      	ldr	r3, [r3, #8]
 800c0fa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800c0fe:	4618      	mov	r0, r3
 800c100:	46bd      	mov	sp, r7
 800c102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c106:	4770      	bx	lr

0800c108 <LL_RCC_GetAHB4Prescaler>:
{
 800c108:	b480      	push	{r7}
 800c10a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800c10c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c110:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800c114:	011b      	lsls	r3, r3, #4
 800c116:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800c11a:	4618      	mov	r0, r3
 800c11c:	46bd      	mov	sp, r7
 800c11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c122:	4770      	bx	lr

0800c124 <LL_RCC_GetAPB1Prescaler>:
{
 800c124:	b480      	push	{r7}
 800c126:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800c128:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c12c:	689b      	ldr	r3, [r3, #8]
 800c12e:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 800c132:	4618      	mov	r0, r3
 800c134:	46bd      	mov	sp, r7
 800c136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c13a:	4770      	bx	lr

0800c13c <LL_RCC_GetAPB2Prescaler>:
{
 800c13c:	b480      	push	{r7}
 800c13e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800c140:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c144:	689b      	ldr	r3, [r3, #8]
 800c146:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 800c14a:	4618      	mov	r0, r3
 800c14c:	46bd      	mov	sp, r7
 800c14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c152:	4770      	bx	lr

0800c154 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800c154:	b480      	push	{r7}
 800c156:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800c158:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800c162:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800c166:	6013      	str	r3, [r2, #0]
}
 800c168:	bf00      	nop
 800c16a:	46bd      	mov	sp, r7
 800c16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c170:	4770      	bx	lr

0800c172 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800c172:	b480      	push	{r7}
 800c174:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800c176:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800c180:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800c184:	6013      	str	r3, [r2, #0]
}
 800c186:	bf00      	nop
 800c188:	46bd      	mov	sp, r7
 800c18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c18e:	4770      	bx	lr

0800c190 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800c190:	b480      	push	{r7}
 800c192:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800c194:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c19e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c1a2:	d101      	bne.n	800c1a8 <LL_RCC_PLL_IsReady+0x18>
 800c1a4:	2301      	movs	r3, #1
 800c1a6:	e000      	b.n	800c1aa <LL_RCC_PLL_IsReady+0x1a>
 800c1a8:	2300      	movs	r3, #0
}
 800c1aa:	4618      	mov	r0, r3
 800c1ac:	46bd      	mov	sp, r7
 800c1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1b2:	4770      	bx	lr

0800c1b4 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800c1b4:	b480      	push	{r7}
 800c1b6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800c1b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c1bc:	68db      	ldr	r3, [r3, #12]
 800c1be:	0a1b      	lsrs	r3, r3, #8
 800c1c0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 800c1c4:	4618      	mov	r0, r3
 800c1c6:	46bd      	mov	sp, r7
 800c1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1cc:	4770      	bx	lr

0800c1ce <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800c1ce:	b480      	push	{r7}
 800c1d0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800c1d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c1d6:	68db      	ldr	r3, [r3, #12]
 800c1d8:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 800c1dc:	4618      	mov	r0, r3
 800c1de:	46bd      	mov	sp, r7
 800c1e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1e4:	4770      	bx	lr

0800c1e6 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800c1e6:	b480      	push	{r7}
 800c1e8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800c1ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c1ee:	68db      	ldr	r3, [r3, #12]
 800c1f0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 800c1f4:	4618      	mov	r0, r3
 800c1f6:	46bd      	mov	sp, r7
 800c1f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1fc:	4770      	bx	lr

0800c1fe <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800c1fe:	b480      	push	{r7}
 800c200:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800c202:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c206:	68db      	ldr	r3, [r3, #12]
 800c208:	f003 0303 	and.w	r3, r3, #3
}
 800c20c:	4618      	mov	r0, r3
 800c20e:	46bd      	mov	sp, r7
 800c210:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c214:	4770      	bx	lr

0800c216 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800c216:	b480      	push	{r7}
 800c218:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800c21a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c21e:	689b      	ldr	r3, [r3, #8]
 800c220:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c224:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c228:	d101      	bne.n	800c22e <LL_RCC_IsActiveFlag_HPRE+0x18>
 800c22a:	2301      	movs	r3, #1
 800c22c:	e000      	b.n	800c230 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800c22e:	2300      	movs	r3, #0
}
 800c230:	4618      	mov	r0, r3
 800c232:	46bd      	mov	sp, r7
 800c234:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c238:	4770      	bx	lr

0800c23a <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800c23a:	b480      	push	{r7}
 800c23c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800c23e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c242:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800c246:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c24a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c24e:	d101      	bne.n	800c254 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800c250:	2301      	movs	r3, #1
 800c252:	e000      	b.n	800c256 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 800c254:	2300      	movs	r3, #0
}
 800c256:	4618      	mov	r0, r3
 800c258:	46bd      	mov	sp, r7
 800c25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c25e:	4770      	bx	lr

0800c260 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 800c260:	b480      	push	{r7}
 800c262:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800c264:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c268:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800c26c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c270:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c274:	d101      	bne.n	800c27a <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800c276:	2301      	movs	r3, #1
 800c278:	e000      	b.n	800c27c <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800c27a:	2300      	movs	r3, #0
}
 800c27c:	4618      	mov	r0, r3
 800c27e:	46bd      	mov	sp, r7
 800c280:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c284:	4770      	bx	lr

0800c286 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800c286:	b480      	push	{r7}
 800c288:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800c28a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c28e:	689b      	ldr	r3, [r3, #8]
 800c290:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c294:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c298:	d101      	bne.n	800c29e <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800c29a:	2301      	movs	r3, #1
 800c29c:	e000      	b.n	800c2a0 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800c29e:	2300      	movs	r3, #0
}
 800c2a0:	4618      	mov	r0, r3
 800c2a2:	46bd      	mov	sp, r7
 800c2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2a8:	4770      	bx	lr

0800c2aa <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800c2aa:	b480      	push	{r7}
 800c2ac:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800c2ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c2b2:	689b      	ldr	r3, [r3, #8]
 800c2b4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800c2b8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800c2bc:	d101      	bne.n	800c2c2 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800c2be:	2301      	movs	r3, #1
 800c2c0:	e000      	b.n	800c2c4 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800c2c2:	2300      	movs	r3, #0
}
 800c2c4:	4618      	mov	r0, r3
 800c2c6:	46bd      	mov	sp, r7
 800c2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2cc:	4770      	bx	lr
	...

0800c2d0 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c2d0:	b590      	push	{r4, r7, lr}
 800c2d2:	b08d      	sub	sp, #52	@ 0x34
 800c2d4:	af00      	add	r7, sp, #0
 800c2d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d101      	bne.n	800c2e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800c2de:	2301      	movs	r3, #1
 800c2e0:	e363      	b.n	800c9aa <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	f003 0320 	and.w	r3, r3, #32
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	f000 808d 	beq.w	800c40a <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c2f0:	f7ff fe89 	bl	800c006 <LL_RCC_GetSysClkSource>
 800c2f4:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800c2f6:	f7ff ff82 	bl	800c1fe <LL_RCC_PLL_GetMainSource>
 800c2fa:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800c2fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d005      	beq.n	800c30e <HAL_RCC_OscConfig+0x3e>
 800c302:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c304:	2b0c      	cmp	r3, #12
 800c306:	d147      	bne.n	800c398 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 800c308:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c30a:	2b01      	cmp	r3, #1
 800c30c:	d144      	bne.n	800c398 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	69db      	ldr	r3, [r3, #28]
 800c312:	2b00      	cmp	r3, #0
 800c314:	d101      	bne.n	800c31a <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800c316:	2301      	movs	r3, #1
 800c318:	e347      	b.n	800c9aa <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800c31e:	f7ff fe34 	bl	800bf8a <LL_RCC_MSI_GetRange>
 800c322:	4603      	mov	r3, r0
 800c324:	429c      	cmp	r4, r3
 800c326:	d914      	bls.n	800c352 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c32c:	4618      	mov	r0, r3
 800c32e:	f000 fd2f 	bl	800cd90 <RCC_SetFlashLatencyFromMSIRange>
 800c332:	4603      	mov	r3, r0
 800c334:	2b00      	cmp	r3, #0
 800c336:	d001      	beq.n	800c33c <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 800c338:	2301      	movs	r3, #1
 800c33a:	e336      	b.n	800c9aa <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c340:	4618      	mov	r0, r3
 800c342:	f7ff fe0e 	bl	800bf62 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	6a1b      	ldr	r3, [r3, #32]
 800c34a:	4618      	mov	r0, r3
 800c34c:	f7ff fe32 	bl	800bfb4 <LL_RCC_MSI_SetCalibTrimming>
 800c350:	e013      	b.n	800c37a <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c356:	4618      	mov	r0, r3
 800c358:	f7ff fe03 	bl	800bf62 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	6a1b      	ldr	r3, [r3, #32]
 800c360:	4618      	mov	r0, r3
 800c362:	f7ff fe27 	bl	800bfb4 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c36a:	4618      	mov	r0, r3
 800c36c:	f000 fd10 	bl	800cd90 <RCC_SetFlashLatencyFromMSIRange>
 800c370:	4603      	mov	r3, r0
 800c372:	2b00      	cmp	r3, #0
 800c374:	d001      	beq.n	800c37a <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 800c376:	2301      	movs	r3, #1
 800c378:	e317      	b.n	800c9aa <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800c37a:	f000 fcc9 	bl	800cd10 <HAL_RCC_GetHCLKFreq>
 800c37e:	4603      	mov	r3, r0
 800c380:	4aa4      	ldr	r2, [pc, #656]	@ (800c614 <HAL_RCC_OscConfig+0x344>)
 800c382:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800c384:	4ba4      	ldr	r3, [pc, #656]	@ (800c618 <HAL_RCC_OscConfig+0x348>)
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	4618      	mov	r0, r3
 800c38a:	f7fb f87f 	bl	800748c <HAL_InitTick>
 800c38e:	4603      	mov	r3, r0
 800c390:	2b00      	cmp	r3, #0
 800c392:	d039      	beq.n	800c408 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 800c394:	2301      	movs	r3, #1
 800c396:	e308      	b.n	800c9aa <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	69db      	ldr	r3, [r3, #28]
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d01e      	beq.n	800c3de <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800c3a0:	f7ff fdb0 	bl	800bf04 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800c3a4:	f7fb f8c0 	bl	8007528 <HAL_GetTick>
 800c3a8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800c3aa:	e008      	b.n	800c3be <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800c3ac:	f7fb f8bc 	bl	8007528 <HAL_GetTick>
 800c3b0:	4602      	mov	r2, r0
 800c3b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3b4:	1ad3      	subs	r3, r2, r3
 800c3b6:	2b02      	cmp	r3, #2
 800c3b8:	d901      	bls.n	800c3be <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800c3ba:	2303      	movs	r3, #3
 800c3bc:	e2f5      	b.n	800c9aa <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 800c3be:	f7ff fdbf 	bl	800bf40 <LL_RCC_MSI_IsReady>
 800c3c2:	4603      	mov	r3, r0
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d0f1      	beq.n	800c3ac <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c3cc:	4618      	mov	r0, r3
 800c3ce:	f7ff fdc8 	bl	800bf62 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	6a1b      	ldr	r3, [r3, #32]
 800c3d6:	4618      	mov	r0, r3
 800c3d8:	f7ff fdec 	bl	800bfb4 <LL_RCC_MSI_SetCalibTrimming>
 800c3dc:	e015      	b.n	800c40a <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800c3de:	f7ff fda0 	bl	800bf22 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800c3e2:	f7fb f8a1 	bl	8007528 <HAL_GetTick>
 800c3e6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800c3e8:	e008      	b.n	800c3fc <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800c3ea:	f7fb f89d 	bl	8007528 <HAL_GetTick>
 800c3ee:	4602      	mov	r2, r0
 800c3f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3f2:	1ad3      	subs	r3, r2, r3
 800c3f4:	2b02      	cmp	r3, #2
 800c3f6:	d901      	bls.n	800c3fc <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800c3f8:	2303      	movs	r3, #3
 800c3fa:	e2d6      	b.n	800c9aa <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 800c3fc:	f7ff fda0 	bl	800bf40 <LL_RCC_MSI_IsReady>
 800c400:	4603      	mov	r3, r0
 800c402:	2b00      	cmp	r3, #0
 800c404:	d1f1      	bne.n	800c3ea <HAL_RCC_OscConfig+0x11a>
 800c406:	e000      	b.n	800c40a <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800c408:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	f003 0301 	and.w	r3, r3, #1
 800c412:	2b00      	cmp	r3, #0
 800c414:	d047      	beq.n	800c4a6 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c416:	f7ff fdf6 	bl	800c006 <LL_RCC_GetSysClkSource>
 800c41a:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800c41c:	f7ff feef 	bl	800c1fe <LL_RCC_PLL_GetMainSource>
 800c420:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800c422:	6a3b      	ldr	r3, [r7, #32]
 800c424:	2b08      	cmp	r3, #8
 800c426:	d005      	beq.n	800c434 <HAL_RCC_OscConfig+0x164>
 800c428:	6a3b      	ldr	r3, [r7, #32]
 800c42a:	2b0c      	cmp	r3, #12
 800c42c:	d108      	bne.n	800c440 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800c42e:	69fb      	ldr	r3, [r7, #28]
 800c430:	2b03      	cmp	r3, #3
 800c432:	d105      	bne.n	800c440 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	685b      	ldr	r3, [r3, #4]
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d134      	bne.n	800c4a6 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 800c43c:	2301      	movs	r3, #1
 800c43e:	e2b4      	b.n	800c9aa <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	685b      	ldr	r3, [r3, #4]
 800c444:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c448:	d102      	bne.n	800c450 <HAL_RCC_OscConfig+0x180>
 800c44a:	f7ff fbdd 	bl	800bc08 <LL_RCC_HSE_Enable>
 800c44e:	e001      	b.n	800c454 <HAL_RCC_OscConfig+0x184>
 800c450:	f7ff fbe9 	bl	800bc26 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	685b      	ldr	r3, [r3, #4]
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d012      	beq.n	800c482 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c45c:	f7fb f864 	bl	8007528 <HAL_GetTick>
 800c460:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800c462:	e008      	b.n	800c476 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c464:	f7fb f860 	bl	8007528 <HAL_GetTick>
 800c468:	4602      	mov	r2, r0
 800c46a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c46c:	1ad3      	subs	r3, r2, r3
 800c46e:	2b64      	cmp	r3, #100	@ 0x64
 800c470:	d901      	bls.n	800c476 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800c472:	2303      	movs	r3, #3
 800c474:	e299      	b.n	800c9aa <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 800c476:	f7ff fbe5 	bl	800bc44 <LL_RCC_HSE_IsReady>
 800c47a:	4603      	mov	r3, r0
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d0f1      	beq.n	800c464 <HAL_RCC_OscConfig+0x194>
 800c480:	e011      	b.n	800c4a6 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c482:	f7fb f851 	bl	8007528 <HAL_GetTick>
 800c486:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800c488:	e008      	b.n	800c49c <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c48a:	f7fb f84d 	bl	8007528 <HAL_GetTick>
 800c48e:	4602      	mov	r2, r0
 800c490:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c492:	1ad3      	subs	r3, r2, r3
 800c494:	2b64      	cmp	r3, #100	@ 0x64
 800c496:	d901      	bls.n	800c49c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800c498:	2303      	movs	r3, #3
 800c49a:	e286      	b.n	800c9aa <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 800c49c:	f7ff fbd2 	bl	800bc44 <LL_RCC_HSE_IsReady>
 800c4a0:	4603      	mov	r3, r0
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d1f1      	bne.n	800c48a <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	f003 0302 	and.w	r3, r3, #2
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d04c      	beq.n	800c54c <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c4b2:	f7ff fda8 	bl	800c006 <LL_RCC_GetSysClkSource>
 800c4b6:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800c4b8:	f7ff fea1 	bl	800c1fe <LL_RCC_PLL_GetMainSource>
 800c4bc:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800c4be:	69bb      	ldr	r3, [r7, #24]
 800c4c0:	2b04      	cmp	r3, #4
 800c4c2:	d005      	beq.n	800c4d0 <HAL_RCC_OscConfig+0x200>
 800c4c4:	69bb      	ldr	r3, [r7, #24]
 800c4c6:	2b0c      	cmp	r3, #12
 800c4c8:	d10e      	bne.n	800c4e8 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800c4ca:	697b      	ldr	r3, [r7, #20]
 800c4cc:	2b02      	cmp	r3, #2
 800c4ce:	d10b      	bne.n	800c4e8 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	68db      	ldr	r3, [r3, #12]
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d101      	bne.n	800c4dc <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 800c4d8:	2301      	movs	r3, #1
 800c4da:	e266      	b.n	800c9aa <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	691b      	ldr	r3, [r3, #16]
 800c4e0:	4618      	mov	r0, r3
 800c4e2:	f7ff fbf1 	bl	800bcc8 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800c4e6:	e031      	b.n	800c54c <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	68db      	ldr	r3, [r3, #12]
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d019      	beq.n	800c524 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800c4f0:	f7ff fbba 	bl	800bc68 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c4f4:	f7fb f818 	bl	8007528 <HAL_GetTick>
 800c4f8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800c4fa:	e008      	b.n	800c50e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c4fc:	f7fb f814 	bl	8007528 <HAL_GetTick>
 800c500:	4602      	mov	r2, r0
 800c502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c504:	1ad3      	subs	r3, r2, r3
 800c506:	2b02      	cmp	r3, #2
 800c508:	d901      	bls.n	800c50e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800c50a:	2303      	movs	r3, #3
 800c50c:	e24d      	b.n	800c9aa <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 800c50e:	f7ff fbc9 	bl	800bca4 <LL_RCC_HSI_IsReady>
 800c512:	4603      	mov	r3, r0
 800c514:	2b00      	cmp	r3, #0
 800c516:	d0f1      	beq.n	800c4fc <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	691b      	ldr	r3, [r3, #16]
 800c51c:	4618      	mov	r0, r3
 800c51e:	f7ff fbd3 	bl	800bcc8 <LL_RCC_HSI_SetCalibTrimming>
 800c522:	e013      	b.n	800c54c <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c524:	f7ff fbaf 	bl	800bc86 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c528:	f7fa fffe 	bl	8007528 <HAL_GetTick>
 800c52c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800c52e:	e008      	b.n	800c542 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c530:	f7fa fffa 	bl	8007528 <HAL_GetTick>
 800c534:	4602      	mov	r2, r0
 800c536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c538:	1ad3      	subs	r3, r2, r3
 800c53a:	2b02      	cmp	r3, #2
 800c53c:	d901      	bls.n	800c542 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800c53e:	2303      	movs	r3, #3
 800c540:	e233      	b.n	800c9aa <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 800c542:	f7ff fbaf 	bl	800bca4 <LL_RCC_HSI_IsReady>
 800c546:	4603      	mov	r3, r0
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d1f1      	bne.n	800c530 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	f003 0308 	and.w	r3, r3, #8
 800c554:	2b00      	cmp	r3, #0
 800c556:	d106      	bne.n	800c566 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800c560:	2b00      	cmp	r3, #0
 800c562:	f000 80a3 	beq.w	800c6ac <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	695b      	ldr	r3, [r3, #20]
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d076      	beq.n	800c65c <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	f003 0310 	and.w	r3, r3, #16
 800c576:	2b00      	cmp	r3, #0
 800c578:	d046      	beq.n	800c608 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800c57a:	f7ff fc66 	bl	800be4a <LL_RCC_LSI1_IsReady>
 800c57e:	4603      	mov	r3, r0
 800c580:	2b00      	cmp	r3, #0
 800c582:	d113      	bne.n	800c5ac <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 800c584:	f7ff fc3f 	bl	800be06 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800c588:	f7fa ffce 	bl	8007528 <HAL_GetTick>
 800c58c:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800c58e:	e008      	b.n	800c5a2 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800c590:	f7fa ffca 	bl	8007528 <HAL_GetTick>
 800c594:	4602      	mov	r2, r0
 800c596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c598:	1ad3      	subs	r3, r2, r3
 800c59a:	2b02      	cmp	r3, #2
 800c59c:	d901      	bls.n	800c5a2 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 800c59e:	2303      	movs	r3, #3
 800c5a0:	e203      	b.n	800c9aa <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800c5a2:	f7ff fc52 	bl	800be4a <LL_RCC_LSI1_IsReady>
 800c5a6:	4603      	mov	r3, r0
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d0f1      	beq.n	800c590 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 800c5ac:	f7ff fc5f 	bl	800be6e <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c5b0:	f7fa ffba 	bl	8007528 <HAL_GetTick>
 800c5b4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800c5b6:	e008      	b.n	800c5ca <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800c5b8:	f7fa ffb6 	bl	8007528 <HAL_GetTick>
 800c5bc:	4602      	mov	r2, r0
 800c5be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5c0:	1ad3      	subs	r3, r2, r3
 800c5c2:	2b03      	cmp	r3, #3
 800c5c4:	d901      	bls.n	800c5ca <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 800c5c6:	2303      	movs	r3, #3
 800c5c8:	e1ef      	b.n	800c9aa <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800c5ca:	f7ff fc72 	bl	800beb2 <LL_RCC_LSI2_IsReady>
 800c5ce:	4603      	mov	r3, r0
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d0f1      	beq.n	800c5b8 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	699b      	ldr	r3, [r3, #24]
 800c5d8:	4618      	mov	r0, r3
 800c5da:	f7ff fc7c 	bl	800bed6 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800c5de:	f7ff fc23 	bl	800be28 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c5e2:	f7fa ffa1 	bl	8007528 <HAL_GetTick>
 800c5e6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 800c5e8:	e008      	b.n	800c5fc <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800c5ea:	f7fa ff9d 	bl	8007528 <HAL_GetTick>
 800c5ee:	4602      	mov	r2, r0
 800c5f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5f2:	1ad3      	subs	r3, r2, r3
 800c5f4:	2b02      	cmp	r3, #2
 800c5f6:	d901      	bls.n	800c5fc <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 800c5f8:	2303      	movs	r3, #3
 800c5fa:	e1d6      	b.n	800c9aa <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 800c5fc:	f7ff fc25 	bl	800be4a <LL_RCC_LSI1_IsReady>
 800c600:	4603      	mov	r3, r0
 800c602:	2b00      	cmp	r3, #0
 800c604:	d1f1      	bne.n	800c5ea <HAL_RCC_OscConfig+0x31a>
 800c606:	e051      	b.n	800c6ac <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 800c608:	f7ff fbfd 	bl	800be06 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c60c:	f7fa ff8c 	bl	8007528 <HAL_GetTick>
 800c610:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800c612:	e00c      	b.n	800c62e <HAL_RCC_OscConfig+0x35e>
 800c614:	2000002c 	.word	0x2000002c
 800c618:	20000030 	.word	0x20000030
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800c61c:	f7fa ff84 	bl	8007528 <HAL_GetTick>
 800c620:	4602      	mov	r2, r0
 800c622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c624:	1ad3      	subs	r3, r2, r3
 800c626:	2b02      	cmp	r3, #2
 800c628:	d901      	bls.n	800c62e <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800c62a:	2303      	movs	r3, #3
 800c62c:	e1bd      	b.n	800c9aa <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800c62e:	f7ff fc0c 	bl	800be4a <LL_RCC_LSI1_IsReady>
 800c632:	4603      	mov	r3, r0
 800c634:	2b00      	cmp	r3, #0
 800c636:	d0f1      	beq.n	800c61c <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 800c638:	f7ff fc2a 	bl	800be90 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 800c63c:	e008      	b.n	800c650 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800c63e:	f7fa ff73 	bl	8007528 <HAL_GetTick>
 800c642:	4602      	mov	r2, r0
 800c644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c646:	1ad3      	subs	r3, r2, r3
 800c648:	2b03      	cmp	r3, #3
 800c64a:	d901      	bls.n	800c650 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 800c64c:	2303      	movs	r3, #3
 800c64e:	e1ac      	b.n	800c9aa <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 800c650:	f7ff fc2f 	bl	800beb2 <LL_RCC_LSI2_IsReady>
 800c654:	4603      	mov	r3, r0
 800c656:	2b00      	cmp	r3, #0
 800c658:	d1f1      	bne.n	800c63e <HAL_RCC_OscConfig+0x36e>
 800c65a:	e027      	b.n	800c6ac <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 800c65c:	f7ff fc18 	bl	800be90 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c660:	f7fa ff62 	bl	8007528 <HAL_GetTick>
 800c664:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800c666:	e008      	b.n	800c67a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800c668:	f7fa ff5e 	bl	8007528 <HAL_GetTick>
 800c66c:	4602      	mov	r2, r0
 800c66e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c670:	1ad3      	subs	r3, r2, r3
 800c672:	2b03      	cmp	r3, #3
 800c674:	d901      	bls.n	800c67a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800c676:	2303      	movs	r3, #3
 800c678:	e197      	b.n	800c9aa <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800c67a:	f7ff fc1a 	bl	800beb2 <LL_RCC_LSI2_IsReady>
 800c67e:	4603      	mov	r3, r0
 800c680:	2b00      	cmp	r3, #0
 800c682:	d1f1      	bne.n	800c668 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 800c684:	f7ff fbd0 	bl	800be28 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c688:	f7fa ff4e 	bl	8007528 <HAL_GetTick>
 800c68c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800c68e:	e008      	b.n	800c6a2 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800c690:	f7fa ff4a 	bl	8007528 <HAL_GetTick>
 800c694:	4602      	mov	r2, r0
 800c696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c698:	1ad3      	subs	r3, r2, r3
 800c69a:	2b02      	cmp	r3, #2
 800c69c:	d901      	bls.n	800c6a2 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 800c69e:	2303      	movs	r3, #3
 800c6a0:	e183      	b.n	800c9aa <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800c6a2:	f7ff fbd2 	bl	800be4a <LL_RCC_LSI1_IsReady>
 800c6a6:	4603      	mov	r3, r0
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d1f1      	bne.n	800c690 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	f003 0304 	and.w	r3, r3, #4
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d05b      	beq.n	800c770 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c6b8:	4ba7      	ldr	r3, [pc, #668]	@ (800c958 <HAL_RCC_OscConfig+0x688>)
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d114      	bne.n	800c6ee <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800c6c4:	f7ff fa60 	bl	800bb88 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c6c8:	f7fa ff2e 	bl	8007528 <HAL_GetTick>
 800c6cc:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c6ce:	e008      	b.n	800c6e2 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c6d0:	f7fa ff2a 	bl	8007528 <HAL_GetTick>
 800c6d4:	4602      	mov	r2, r0
 800c6d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6d8:	1ad3      	subs	r3, r2, r3
 800c6da:	2b02      	cmp	r3, #2
 800c6dc:	d901      	bls.n	800c6e2 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800c6de:	2303      	movs	r3, #3
 800c6e0:	e163      	b.n	800c9aa <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c6e2:	4b9d      	ldr	r3, [pc, #628]	@ (800c958 <HAL_RCC_OscConfig+0x688>)
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d0f0      	beq.n	800c6d0 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	689b      	ldr	r3, [r3, #8]
 800c6f2:	2b01      	cmp	r3, #1
 800c6f4:	d102      	bne.n	800c6fc <HAL_RCC_OscConfig+0x42c>
 800c6f6:	f7ff fb30 	bl	800bd5a <LL_RCC_LSE_Enable>
 800c6fa:	e00c      	b.n	800c716 <HAL_RCC_OscConfig+0x446>
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	689b      	ldr	r3, [r3, #8]
 800c700:	2b05      	cmp	r3, #5
 800c702:	d104      	bne.n	800c70e <HAL_RCC_OscConfig+0x43e>
 800c704:	f7ff fb4b 	bl	800bd9e <LL_RCC_LSE_EnableBypass>
 800c708:	f7ff fb27 	bl	800bd5a <LL_RCC_LSE_Enable>
 800c70c:	e003      	b.n	800c716 <HAL_RCC_OscConfig+0x446>
 800c70e:	f7ff fb35 	bl	800bd7c <LL_RCC_LSE_Disable>
 800c712:	f7ff fb55 	bl	800bdc0 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	689b      	ldr	r3, [r3, #8]
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d014      	beq.n	800c748 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c71e:	f7fa ff03 	bl	8007528 <HAL_GetTick>
 800c722:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800c724:	e00a      	b.n	800c73c <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c726:	f7fa feff 	bl	8007528 <HAL_GetTick>
 800c72a:	4602      	mov	r2, r0
 800c72c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c72e:	1ad3      	subs	r3, r2, r3
 800c730:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c734:	4293      	cmp	r3, r2
 800c736:	d901      	bls.n	800c73c <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 800c738:	2303      	movs	r3, #3
 800c73a:	e136      	b.n	800c9aa <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 800c73c:	f7ff fb51 	bl	800bde2 <LL_RCC_LSE_IsReady>
 800c740:	4603      	mov	r3, r0
 800c742:	2b00      	cmp	r3, #0
 800c744:	d0ef      	beq.n	800c726 <HAL_RCC_OscConfig+0x456>
 800c746:	e013      	b.n	800c770 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c748:	f7fa feee 	bl	8007528 <HAL_GetTick>
 800c74c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800c74e:	e00a      	b.n	800c766 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c750:	f7fa feea 	bl	8007528 <HAL_GetTick>
 800c754:	4602      	mov	r2, r0
 800c756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c758:	1ad3      	subs	r3, r2, r3
 800c75a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c75e:	4293      	cmp	r3, r2
 800c760:	d901      	bls.n	800c766 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 800c762:	2303      	movs	r3, #3
 800c764:	e121      	b.n	800c9aa <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 800c766:	f7ff fb3c 	bl	800bde2 <LL_RCC_LSE_IsReady>
 800c76a:	4603      	mov	r3, r0
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d1ef      	bne.n	800c750 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d02c      	beq.n	800c7d6 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c780:	2b00      	cmp	r3, #0
 800c782:	d014      	beq.n	800c7ae <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800c784:	f7ff fab5 	bl	800bcf2 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c788:	f7fa fece 	bl	8007528 <HAL_GetTick>
 800c78c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800c78e:	e008      	b.n	800c7a2 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c790:	f7fa feca 	bl	8007528 <HAL_GetTick>
 800c794:	4602      	mov	r2, r0
 800c796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c798:	1ad3      	subs	r3, r2, r3
 800c79a:	2b02      	cmp	r3, #2
 800c79c:	d901      	bls.n	800c7a2 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 800c79e:	2303      	movs	r3, #3
 800c7a0:	e103      	b.n	800c9aa <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800c7a2:	f7ff fac8 	bl	800bd36 <LL_RCC_HSI48_IsReady>
 800c7a6:	4603      	mov	r3, r0
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d0f1      	beq.n	800c790 <HAL_RCC_OscConfig+0x4c0>
 800c7ac:	e013      	b.n	800c7d6 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800c7ae:	f7ff fab1 	bl	800bd14 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c7b2:	f7fa feb9 	bl	8007528 <HAL_GetTick>
 800c7b6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 800c7b8:	e008      	b.n	800c7cc <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c7ba:	f7fa feb5 	bl	8007528 <HAL_GetTick>
 800c7be:	4602      	mov	r2, r0
 800c7c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7c2:	1ad3      	subs	r3, r2, r3
 800c7c4:	2b02      	cmp	r3, #2
 800c7c6:	d901      	bls.n	800c7cc <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 800c7c8:	2303      	movs	r3, #3
 800c7ca:	e0ee      	b.n	800c9aa <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 800c7cc:	f7ff fab3 	bl	800bd36 <LL_RCC_HSI48_IsReady>
 800c7d0:	4603      	mov	r3, r0
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d1f1      	bne.n	800c7ba <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	f000 80e4 	beq.w	800c9a8 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c7e0:	f7ff fc11 	bl	800c006 <LL_RCC_GetSysClkSource>
 800c7e4:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800c7e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c7ea:	68db      	ldr	r3, [r3, #12]
 800c7ec:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c7f2:	2b02      	cmp	r3, #2
 800c7f4:	f040 80b4 	bne.w	800c960 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c7f8:	68fb      	ldr	r3, [r7, #12]
 800c7fa:	f003 0203 	and.w	r2, r3, #3
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c802:	429a      	cmp	r2, r3
 800c804:	d123      	bne.n	800c84e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800c806:	68fb      	ldr	r3, [r7, #12]
 800c808:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c810:	429a      	cmp	r2, r3
 800c812:	d11c      	bne.n	800c84e <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	0a1b      	lsrs	r3, r3, #8
 800c818:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800c820:	429a      	cmp	r2, r3
 800c822:	d114      	bne.n	800c84e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800c82e:	429a      	cmp	r2, r3
 800c830:	d10d      	bne.n	800c84e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800c83c:	429a      	cmp	r2, r3
 800c83e:	d106      	bne.n	800c84e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800c840:	68fb      	ldr	r3, [r7, #12]
 800c842:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800c84a:	429a      	cmp	r2, r3
 800c84c:	d05d      	beq.n	800c90a <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800c84e:	693b      	ldr	r3, [r7, #16]
 800c850:	2b0c      	cmp	r3, #12
 800c852:	d058      	beq.n	800c906 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800c854:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d001      	beq.n	800c866 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 800c862:	2301      	movs	r3, #1
 800c864:	e0a1      	b.n	800c9aa <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800c866:	f7ff fc84 	bl	800c172 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800c86a:	f7fa fe5d 	bl	8007528 <HAL_GetTick>
 800c86e:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c870:	e008      	b.n	800c884 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c872:	f7fa fe59 	bl	8007528 <HAL_GetTick>
 800c876:	4602      	mov	r2, r0
 800c878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c87a:	1ad3      	subs	r3, r2, r3
 800c87c:	2b02      	cmp	r3, #2
 800c87e:	d901      	bls.n	800c884 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 800c880:	2303      	movs	r3, #3
 800c882:	e092      	b.n	800c9aa <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c884:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d1ef      	bne.n	800c872 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800c892:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c896:	68da      	ldr	r2, [r3, #12]
 800c898:	4b30      	ldr	r3, [pc, #192]	@ (800c95c <HAL_RCC_OscConfig+0x68c>)
 800c89a:	4013      	ands	r3, r2
 800c89c:	687a      	ldr	r2, [r7, #4]
 800c89e:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 800c8a0:	687a      	ldr	r2, [r7, #4]
 800c8a2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800c8a4:	4311      	orrs	r1, r2
 800c8a6:	687a      	ldr	r2, [r7, #4]
 800c8a8:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800c8aa:	0212      	lsls	r2, r2, #8
 800c8ac:	4311      	orrs	r1, r2
 800c8ae:	687a      	ldr	r2, [r7, #4]
 800c8b0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800c8b2:	4311      	orrs	r1, r2
 800c8b4:	687a      	ldr	r2, [r7, #4]
 800c8b6:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800c8b8:	4311      	orrs	r1, r2
 800c8ba:	687a      	ldr	r2, [r7, #4]
 800c8bc:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800c8be:	430a      	orrs	r2, r1
 800c8c0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c8c4:	4313      	orrs	r3, r2
 800c8c6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800c8c8:	f7ff fc44 	bl	800c154 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800c8cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c8d0:	68db      	ldr	r3, [r3, #12]
 800c8d2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800c8d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c8da:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800c8dc:	f7fa fe24 	bl	8007528 <HAL_GetTick>
 800c8e0:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c8e2:	e008      	b.n	800c8f6 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c8e4:	f7fa fe20 	bl	8007528 <HAL_GetTick>
 800c8e8:	4602      	mov	r2, r0
 800c8ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8ec:	1ad3      	subs	r3, r2, r3
 800c8ee:	2b02      	cmp	r3, #2
 800c8f0:	d901      	bls.n	800c8f6 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 800c8f2:	2303      	movs	r3, #3
 800c8f4:	e059      	b.n	800c9aa <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c8f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c900:	2b00      	cmp	r3, #0
 800c902:	d0ef      	beq.n	800c8e4 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800c904:	e050      	b.n	800c9a8 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800c906:	2301      	movs	r3, #1
 800c908:	e04f      	b.n	800c9aa <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c90a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c914:	2b00      	cmp	r3, #0
 800c916:	d147      	bne.n	800c9a8 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800c918:	f7ff fc1c 	bl	800c154 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800c91c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c920:	68db      	ldr	r3, [r3, #12]
 800c922:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800c926:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c92a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800c92c:	f7fa fdfc 	bl	8007528 <HAL_GetTick>
 800c930:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c932:	e008      	b.n	800c946 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c934:	f7fa fdf8 	bl	8007528 <HAL_GetTick>
 800c938:	4602      	mov	r2, r0
 800c93a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c93c:	1ad3      	subs	r3, r2, r3
 800c93e:	2b02      	cmp	r3, #2
 800c940:	d901      	bls.n	800c946 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 800c942:	2303      	movs	r3, #3
 800c944:	e031      	b.n	800c9aa <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c946:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c950:	2b00      	cmp	r3, #0
 800c952:	d0ef      	beq.n	800c934 <HAL_RCC_OscConfig+0x664>
 800c954:	e028      	b.n	800c9a8 <HAL_RCC_OscConfig+0x6d8>
 800c956:	bf00      	nop
 800c958:	58000400 	.word	0x58000400
 800c95c:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800c960:	693b      	ldr	r3, [r7, #16]
 800c962:	2b0c      	cmp	r3, #12
 800c964:	d01e      	beq.n	800c9a4 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c966:	f7ff fc04 	bl	800c172 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c96a:	f7fa fddd 	bl	8007528 <HAL_GetTick>
 800c96e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c970:	e008      	b.n	800c984 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c972:	f7fa fdd9 	bl	8007528 <HAL_GetTick>
 800c976:	4602      	mov	r2, r0
 800c978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c97a:	1ad3      	subs	r3, r2, r3
 800c97c:	2b02      	cmp	r3, #2
 800c97e:	d901      	bls.n	800c984 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 800c980:	2303      	movs	r3, #3
 800c982:	e012      	b.n	800c9aa <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c984:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d1ef      	bne.n	800c972 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 800c992:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c996:	68da      	ldr	r2, [r3, #12]
 800c998:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c99c:	4b05      	ldr	r3, [pc, #20]	@ (800c9b4 <HAL_RCC_OscConfig+0x6e4>)
 800c99e:	4013      	ands	r3, r2
 800c9a0:	60cb      	str	r3, [r1, #12]
 800c9a2:	e001      	b.n	800c9a8 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800c9a4:	2301      	movs	r3, #1
 800c9a6:	e000      	b.n	800c9aa <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 800c9a8:	2300      	movs	r3, #0
}
 800c9aa:	4618      	mov	r0, r3
 800c9ac:	3734      	adds	r7, #52	@ 0x34
 800c9ae:	46bd      	mov	sp, r7
 800c9b0:	bd90      	pop	{r4, r7, pc}
 800c9b2:	bf00      	nop
 800c9b4:	eefefffc 	.word	0xeefefffc

0800c9b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c9b8:	b580      	push	{r7, lr}
 800c9ba:	b084      	sub	sp, #16
 800c9bc:	af00      	add	r7, sp, #0
 800c9be:	6078      	str	r0, [r7, #4]
 800c9c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d101      	bne.n	800c9cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800c9c8:	2301      	movs	r3, #1
 800c9ca:	e12d      	b.n	800cc28 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800c9cc:	4b98      	ldr	r3, [pc, #608]	@ (800cc30 <HAL_RCC_ClockConfig+0x278>)
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	f003 0307 	and.w	r3, r3, #7
 800c9d4:	683a      	ldr	r2, [r7, #0]
 800c9d6:	429a      	cmp	r2, r3
 800c9d8:	d91b      	bls.n	800ca12 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c9da:	4b95      	ldr	r3, [pc, #596]	@ (800cc30 <HAL_RCC_ClockConfig+0x278>)
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	f023 0207 	bic.w	r2, r3, #7
 800c9e2:	4993      	ldr	r1, [pc, #588]	@ (800cc30 <HAL_RCC_ClockConfig+0x278>)
 800c9e4:	683b      	ldr	r3, [r7, #0]
 800c9e6:	4313      	orrs	r3, r2
 800c9e8:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c9ea:	f7fa fd9d 	bl	8007528 <HAL_GetTick>
 800c9ee:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c9f0:	e008      	b.n	800ca04 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800c9f2:	f7fa fd99 	bl	8007528 <HAL_GetTick>
 800c9f6:	4602      	mov	r2, r0
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	1ad3      	subs	r3, r2, r3
 800c9fc:	2b02      	cmp	r3, #2
 800c9fe:	d901      	bls.n	800ca04 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800ca00:	2303      	movs	r3, #3
 800ca02:	e111      	b.n	800cc28 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ca04:	4b8a      	ldr	r3, [pc, #552]	@ (800cc30 <HAL_RCC_ClockConfig+0x278>)
 800ca06:	681b      	ldr	r3, [r3, #0]
 800ca08:	f003 0307 	and.w	r3, r3, #7
 800ca0c:	683a      	ldr	r2, [r7, #0]
 800ca0e:	429a      	cmp	r2, r3
 800ca10:	d1ef      	bne.n	800c9f2 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	f003 0302 	and.w	r3, r3, #2
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d016      	beq.n	800ca4c <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	689b      	ldr	r3, [r3, #8]
 800ca22:	4618      	mov	r0, r3
 800ca24:	f7ff fafb 	bl	800c01e <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800ca28:	f7fa fd7e 	bl	8007528 <HAL_GetTick>
 800ca2c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800ca2e:	e008      	b.n	800ca42 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800ca30:	f7fa fd7a 	bl	8007528 <HAL_GetTick>
 800ca34:	4602      	mov	r2, r0
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	1ad3      	subs	r3, r2, r3
 800ca3a:	2b02      	cmp	r3, #2
 800ca3c:	d901      	bls.n	800ca42 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800ca3e:	2303      	movs	r3, #3
 800ca40:	e0f2      	b.n	800cc28 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800ca42:	f7ff fbe8 	bl	800c216 <LL_RCC_IsActiveFlag_HPRE>
 800ca46:	4603      	mov	r3, r0
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	d0f1      	beq.n	800ca30 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	f003 0320 	and.w	r3, r3, #32
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d016      	beq.n	800ca86 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	695b      	ldr	r3, [r3, #20]
 800ca5c:	4618      	mov	r0, r3
 800ca5e:	f7ff faf2 	bl	800c046 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800ca62:	f7fa fd61 	bl	8007528 <HAL_GetTick>
 800ca66:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800ca68:	e008      	b.n	800ca7c <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800ca6a:	f7fa fd5d 	bl	8007528 <HAL_GetTick>
 800ca6e:	4602      	mov	r2, r0
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	1ad3      	subs	r3, r2, r3
 800ca74:	2b02      	cmp	r3, #2
 800ca76:	d901      	bls.n	800ca7c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800ca78:	2303      	movs	r3, #3
 800ca7a:	e0d5      	b.n	800cc28 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800ca7c:	f7ff fbdd 	bl	800c23a <LL_RCC_IsActiveFlag_C2HPRE>
 800ca80:	4603      	mov	r3, r0
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d0f1      	beq.n	800ca6a <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d016      	beq.n	800cac0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	699b      	ldr	r3, [r3, #24]
 800ca96:	4618      	mov	r0, r3
 800ca98:	f7ff faeb 	bl	800c072 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800ca9c:	f7fa fd44 	bl	8007528 <HAL_GetTick>
 800caa0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800caa2:	e008      	b.n	800cab6 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800caa4:	f7fa fd40 	bl	8007528 <HAL_GetTick>
 800caa8:	4602      	mov	r2, r0
 800caaa:	68fb      	ldr	r3, [r7, #12]
 800caac:	1ad3      	subs	r3, r2, r3
 800caae:	2b02      	cmp	r3, #2
 800cab0:	d901      	bls.n	800cab6 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800cab2:	2303      	movs	r3, #3
 800cab4:	e0b8      	b.n	800cc28 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800cab6:	f7ff fbd3 	bl	800c260 <LL_RCC_IsActiveFlag_SHDHPRE>
 800caba:	4603      	mov	r3, r0
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d0f1      	beq.n	800caa4 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	f003 0304 	and.w	r3, r3, #4
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d016      	beq.n	800cafa <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	68db      	ldr	r3, [r3, #12]
 800cad0:	4618      	mov	r0, r3
 800cad2:	f7ff fae5 	bl	800c0a0 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800cad6:	f7fa fd27 	bl	8007528 <HAL_GetTick>
 800cada:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800cadc:	e008      	b.n	800caf0 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800cade:	f7fa fd23 	bl	8007528 <HAL_GetTick>
 800cae2:	4602      	mov	r2, r0
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	1ad3      	subs	r3, r2, r3
 800cae8:	2b02      	cmp	r3, #2
 800caea:	d901      	bls.n	800caf0 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 800caec:	2303      	movs	r3, #3
 800caee:	e09b      	b.n	800cc28 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800caf0:	f7ff fbc9 	bl	800c286 <LL_RCC_IsActiveFlag_PPRE1>
 800caf4:	4603      	mov	r3, r0
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d0f1      	beq.n	800cade <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	f003 0308 	and.w	r3, r3, #8
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	d017      	beq.n	800cb36 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	691b      	ldr	r3, [r3, #16]
 800cb0a:	00db      	lsls	r3, r3, #3
 800cb0c:	4618      	mov	r0, r3
 800cb0e:	f7ff fadb 	bl	800c0c8 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800cb12:	f7fa fd09 	bl	8007528 <HAL_GetTick>
 800cb16:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800cb18:	e008      	b.n	800cb2c <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800cb1a:	f7fa fd05 	bl	8007528 <HAL_GetTick>
 800cb1e:	4602      	mov	r2, r0
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	1ad3      	subs	r3, r2, r3
 800cb24:	2b02      	cmp	r3, #2
 800cb26:	d901      	bls.n	800cb2c <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 800cb28:	2303      	movs	r3, #3
 800cb2a:	e07d      	b.n	800cc28 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800cb2c:	f7ff fbbd 	bl	800c2aa <LL_RCC_IsActiveFlag_PPRE2>
 800cb30:	4603      	mov	r3, r0
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	d0f1      	beq.n	800cb1a <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	f003 0301 	and.w	r3, r3, #1
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d043      	beq.n	800cbca <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	685b      	ldr	r3, [r3, #4]
 800cb46:	2b02      	cmp	r3, #2
 800cb48:	d106      	bne.n	800cb58 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800cb4a:	f7ff f87b 	bl	800bc44 <LL_RCC_HSE_IsReady>
 800cb4e:	4603      	mov	r3, r0
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	d11e      	bne.n	800cb92 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800cb54:	2301      	movs	r3, #1
 800cb56:	e067      	b.n	800cc28 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	685b      	ldr	r3, [r3, #4]
 800cb5c:	2b03      	cmp	r3, #3
 800cb5e:	d106      	bne.n	800cb6e <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800cb60:	f7ff fb16 	bl	800c190 <LL_RCC_PLL_IsReady>
 800cb64:	4603      	mov	r3, r0
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	d113      	bne.n	800cb92 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800cb6a:	2301      	movs	r3, #1
 800cb6c:	e05c      	b.n	800cc28 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	685b      	ldr	r3, [r3, #4]
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	d106      	bne.n	800cb84 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800cb76:	f7ff f9e3 	bl	800bf40 <LL_RCC_MSI_IsReady>
 800cb7a:	4603      	mov	r3, r0
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d108      	bne.n	800cb92 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800cb80:	2301      	movs	r3, #1
 800cb82:	e051      	b.n	800cc28 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800cb84:	f7ff f88e 	bl	800bca4 <LL_RCC_HSI_IsReady>
 800cb88:	4603      	mov	r3, r0
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	d101      	bne.n	800cb92 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800cb8e:	2301      	movs	r3, #1
 800cb90:	e04a      	b.n	800cc28 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	685b      	ldr	r3, [r3, #4]
 800cb96:	4618      	mov	r0, r3
 800cb98:	f7ff fa21 	bl	800bfde <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cb9c:	f7fa fcc4 	bl	8007528 <HAL_GetTick>
 800cba0:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800cba2:	e00a      	b.n	800cbba <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800cba4:	f7fa fcc0 	bl	8007528 <HAL_GetTick>
 800cba8:	4602      	mov	r2, r0
 800cbaa:	68fb      	ldr	r3, [r7, #12]
 800cbac:	1ad3      	subs	r3, r2, r3
 800cbae:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cbb2:	4293      	cmp	r3, r2
 800cbb4:	d901      	bls.n	800cbba <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800cbb6:	2303      	movs	r3, #3
 800cbb8:	e036      	b.n	800cc28 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800cbba:	f7ff fa24 	bl	800c006 <LL_RCC_GetSysClkSource>
 800cbbe:	4602      	mov	r2, r0
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	685b      	ldr	r3, [r3, #4]
 800cbc4:	009b      	lsls	r3, r3, #2
 800cbc6:	429a      	cmp	r2, r3
 800cbc8:	d1ec      	bne.n	800cba4 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800cbca:	4b19      	ldr	r3, [pc, #100]	@ (800cc30 <HAL_RCC_ClockConfig+0x278>)
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	f003 0307 	and.w	r3, r3, #7
 800cbd2:	683a      	ldr	r2, [r7, #0]
 800cbd4:	429a      	cmp	r2, r3
 800cbd6:	d21b      	bcs.n	800cc10 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800cbd8:	4b15      	ldr	r3, [pc, #84]	@ (800cc30 <HAL_RCC_ClockConfig+0x278>)
 800cbda:	681b      	ldr	r3, [r3, #0]
 800cbdc:	f023 0207 	bic.w	r2, r3, #7
 800cbe0:	4913      	ldr	r1, [pc, #76]	@ (800cc30 <HAL_RCC_ClockConfig+0x278>)
 800cbe2:	683b      	ldr	r3, [r7, #0]
 800cbe4:	4313      	orrs	r3, r2
 800cbe6:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cbe8:	f7fa fc9e 	bl	8007528 <HAL_GetTick>
 800cbec:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800cbee:	e008      	b.n	800cc02 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800cbf0:	f7fa fc9a 	bl	8007528 <HAL_GetTick>
 800cbf4:	4602      	mov	r2, r0
 800cbf6:	68fb      	ldr	r3, [r7, #12]
 800cbf8:	1ad3      	subs	r3, r2, r3
 800cbfa:	2b02      	cmp	r3, #2
 800cbfc:	d901      	bls.n	800cc02 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800cbfe:	2303      	movs	r3, #3
 800cc00:	e012      	b.n	800cc28 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800cc02:	4b0b      	ldr	r3, [pc, #44]	@ (800cc30 <HAL_RCC_ClockConfig+0x278>)
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	f003 0307 	and.w	r3, r3, #7
 800cc0a:	683a      	ldr	r2, [r7, #0]
 800cc0c:	429a      	cmp	r2, r3
 800cc0e:	d1ef      	bne.n	800cbf0 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800cc10:	f000 f87e 	bl	800cd10 <HAL_RCC_GetHCLKFreq>
 800cc14:	4603      	mov	r3, r0
 800cc16:	4a07      	ldr	r2, [pc, #28]	@ (800cc34 <HAL_RCC_ClockConfig+0x27c>)
 800cc18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800cc1a:	f7fa fc91 	bl	8007540 <HAL_GetTickPrio>
 800cc1e:	4603      	mov	r3, r0
 800cc20:	4618      	mov	r0, r3
 800cc22:	f7fa fc33 	bl	800748c <HAL_InitTick>
 800cc26:	4603      	mov	r3, r0
}
 800cc28:	4618      	mov	r0, r3
 800cc2a:	3710      	adds	r7, #16
 800cc2c:	46bd      	mov	sp, r7
 800cc2e:	bd80      	pop	{r7, pc}
 800cc30:	58004000 	.word	0x58004000
 800cc34:	2000002c 	.word	0x2000002c

0800cc38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800cc38:	b590      	push	{r4, r7, lr}
 800cc3a:	b085      	sub	sp, #20
 800cc3c:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800cc3e:	f7ff f9e2 	bl	800c006 <LL_RCC_GetSysClkSource>
 800cc42:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d10a      	bne.n	800cc60 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800cc4a:	f7ff f99e 	bl	800bf8a <LL_RCC_MSI_GetRange>
 800cc4e:	4603      	mov	r3, r0
 800cc50:	091b      	lsrs	r3, r3, #4
 800cc52:	f003 030f 	and.w	r3, r3, #15
 800cc56:	4a2b      	ldr	r2, [pc, #172]	@ (800cd04 <HAL_RCC_GetSysClockFreq+0xcc>)
 800cc58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cc5c:	60fb      	str	r3, [r7, #12]
 800cc5e:	e04b      	b.n	800ccf8 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	2b04      	cmp	r3, #4
 800cc64:	d102      	bne.n	800cc6c <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800cc66:	4b28      	ldr	r3, [pc, #160]	@ (800cd08 <HAL_RCC_GetSysClockFreq+0xd0>)
 800cc68:	60fb      	str	r3, [r7, #12]
 800cc6a:	e045      	b.n	800ccf8 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	2b08      	cmp	r3, #8
 800cc70:	d10a      	bne.n	800cc88 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800cc72:	f7fe ffb7 	bl	800bbe4 <LL_RCC_HSE_IsEnabledDiv2>
 800cc76:	4603      	mov	r3, r0
 800cc78:	2b01      	cmp	r3, #1
 800cc7a:	d102      	bne.n	800cc82 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800cc7c:	4b22      	ldr	r3, [pc, #136]	@ (800cd08 <HAL_RCC_GetSysClockFreq+0xd0>)
 800cc7e:	60fb      	str	r3, [r7, #12]
 800cc80:	e03a      	b.n	800ccf8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800cc82:	4b22      	ldr	r3, [pc, #136]	@ (800cd0c <HAL_RCC_GetSysClockFreq+0xd4>)
 800cc84:	60fb      	str	r3, [r7, #12]
 800cc86:	e037      	b.n	800ccf8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800cc88:	f7ff fab9 	bl	800c1fe <LL_RCC_PLL_GetMainSource>
 800cc8c:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800cc8e:	683b      	ldr	r3, [r7, #0]
 800cc90:	2b02      	cmp	r3, #2
 800cc92:	d003      	beq.n	800cc9c <HAL_RCC_GetSysClockFreq+0x64>
 800cc94:	683b      	ldr	r3, [r7, #0]
 800cc96:	2b03      	cmp	r3, #3
 800cc98:	d003      	beq.n	800cca2 <HAL_RCC_GetSysClockFreq+0x6a>
 800cc9a:	e00d      	b.n	800ccb8 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800cc9c:	4b1a      	ldr	r3, [pc, #104]	@ (800cd08 <HAL_RCC_GetSysClockFreq+0xd0>)
 800cc9e:	60bb      	str	r3, [r7, #8]
        break;
 800cca0:	e015      	b.n	800ccce <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800cca2:	f7fe ff9f 	bl	800bbe4 <LL_RCC_HSE_IsEnabledDiv2>
 800cca6:	4603      	mov	r3, r0
 800cca8:	2b01      	cmp	r3, #1
 800ccaa:	d102      	bne.n	800ccb2 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800ccac:	4b16      	ldr	r3, [pc, #88]	@ (800cd08 <HAL_RCC_GetSysClockFreq+0xd0>)
 800ccae:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800ccb0:	e00d      	b.n	800ccce <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 800ccb2:	4b16      	ldr	r3, [pc, #88]	@ (800cd0c <HAL_RCC_GetSysClockFreq+0xd4>)
 800ccb4:	60bb      	str	r3, [r7, #8]
        break;
 800ccb6:	e00a      	b.n	800ccce <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800ccb8:	f7ff f967 	bl	800bf8a <LL_RCC_MSI_GetRange>
 800ccbc:	4603      	mov	r3, r0
 800ccbe:	091b      	lsrs	r3, r3, #4
 800ccc0:	f003 030f 	and.w	r3, r3, #15
 800ccc4:	4a0f      	ldr	r2, [pc, #60]	@ (800cd04 <HAL_RCC_GetSysClockFreq+0xcc>)
 800ccc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ccca:	60bb      	str	r3, [r7, #8]
        break;
 800cccc:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 800ccce:	f7ff fa71 	bl	800c1b4 <LL_RCC_PLL_GetN>
 800ccd2:	4602      	mov	r2, r0
 800ccd4:	68bb      	ldr	r3, [r7, #8]
 800ccd6:	fb03 f402 	mul.w	r4, r3, r2
 800ccda:	f7ff fa84 	bl	800c1e6 <LL_RCC_PLL_GetDivider>
 800ccde:	4603      	mov	r3, r0
 800cce0:	091b      	lsrs	r3, r3, #4
 800cce2:	3301      	adds	r3, #1
 800cce4:	fbb4 f4f3 	udiv	r4, r4, r3
 800cce8:	f7ff fa71 	bl	800c1ce <LL_RCC_PLL_GetR>
 800ccec:	4603      	mov	r3, r0
 800ccee:	0f5b      	lsrs	r3, r3, #29
 800ccf0:	3301      	adds	r3, #1
 800ccf2:	fbb4 f3f3 	udiv	r3, r4, r3
 800ccf6:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800ccf8:	68fb      	ldr	r3, [r7, #12]
}
 800ccfa:	4618      	mov	r0, r3
 800ccfc:	3714      	adds	r7, #20
 800ccfe:	46bd      	mov	sp, r7
 800cd00:	bd90      	pop	{r4, r7, pc}
 800cd02:	bf00      	nop
 800cd04:	08022374 	.word	0x08022374
 800cd08:	00f42400 	.word	0x00f42400
 800cd0c:	01e84800 	.word	0x01e84800

0800cd10 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800cd10:	b598      	push	{r3, r4, r7, lr}
 800cd12:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800cd14:	f7ff ff90 	bl	800cc38 <HAL_RCC_GetSysClockFreq>
 800cd18:	4604      	mov	r4, r0
 800cd1a:	f7ff f9e9 	bl	800c0f0 <LL_RCC_GetAHBPrescaler>
 800cd1e:	4603      	mov	r3, r0
 800cd20:	091b      	lsrs	r3, r3, #4
 800cd22:	f003 030f 	and.w	r3, r3, #15
 800cd26:	4a03      	ldr	r2, [pc, #12]	@ (800cd34 <HAL_RCC_GetHCLKFreq+0x24>)
 800cd28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cd2c:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800cd30:	4618      	mov	r0, r3
 800cd32:	bd98      	pop	{r3, r4, r7, pc}
 800cd34:	08022314 	.word	0x08022314

0800cd38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800cd38:	b598      	push	{r3, r4, r7, lr}
 800cd3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800cd3c:	f7ff ffe8 	bl	800cd10 <HAL_RCC_GetHCLKFreq>
 800cd40:	4604      	mov	r4, r0
 800cd42:	f7ff f9ef 	bl	800c124 <LL_RCC_GetAPB1Prescaler>
 800cd46:	4603      	mov	r3, r0
 800cd48:	0a1b      	lsrs	r3, r3, #8
 800cd4a:	f003 0307 	and.w	r3, r3, #7
 800cd4e:	4a04      	ldr	r2, [pc, #16]	@ (800cd60 <HAL_RCC_GetPCLK1Freq+0x28>)
 800cd50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cd54:	f003 031f 	and.w	r3, r3, #31
 800cd58:	fa24 f303 	lsr.w	r3, r4, r3
}
 800cd5c:	4618      	mov	r0, r3
 800cd5e:	bd98      	pop	{r3, r4, r7, pc}
 800cd60:	08022354 	.word	0x08022354

0800cd64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800cd64:	b598      	push	{r3, r4, r7, lr}
 800cd66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800cd68:	f7ff ffd2 	bl	800cd10 <HAL_RCC_GetHCLKFreq>
 800cd6c:	4604      	mov	r4, r0
 800cd6e:	f7ff f9e5 	bl	800c13c <LL_RCC_GetAPB2Prescaler>
 800cd72:	4603      	mov	r3, r0
 800cd74:	0adb      	lsrs	r3, r3, #11
 800cd76:	f003 0307 	and.w	r3, r3, #7
 800cd7a:	4a04      	ldr	r2, [pc, #16]	@ (800cd8c <HAL_RCC_GetPCLK2Freq+0x28>)
 800cd7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cd80:	f003 031f 	and.w	r3, r3, #31
 800cd84:	fa24 f303 	lsr.w	r3, r4, r3
}
 800cd88:	4618      	mov	r0, r3
 800cd8a:	bd98      	pop	{r3, r4, r7, pc}
 800cd8c:	08022354 	.word	0x08022354

0800cd90 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800cd90:	b590      	push	{r4, r7, lr}
 800cd92:	b085      	sub	sp, #20
 800cd94:	af00      	add	r7, sp, #0
 800cd96:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	2bb0      	cmp	r3, #176	@ 0xb0
 800cd9c:	d903      	bls.n	800cda6 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800cd9e:	4b15      	ldr	r3, [pc, #84]	@ (800cdf4 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800cda0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cda2:	60fb      	str	r3, [r7, #12]
 800cda4:	e007      	b.n	800cdb6 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	091b      	lsrs	r3, r3, #4
 800cdaa:	f003 030f 	and.w	r3, r3, #15
 800cdae:	4a11      	ldr	r2, [pc, #68]	@ (800cdf4 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800cdb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cdb4:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800cdb6:	f7ff f9a7 	bl	800c108 <LL_RCC_GetAHB4Prescaler>
 800cdba:	4603      	mov	r3, r0
 800cdbc:	091b      	lsrs	r3, r3, #4
 800cdbe:	f003 030f 	and.w	r3, r3, #15
 800cdc2:	4a0d      	ldr	r2, [pc, #52]	@ (800cdf8 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 800cdc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cdc8:	68fa      	ldr	r2, [r7, #12]
 800cdca:	fbb2 f3f3 	udiv	r3, r2, r3
 800cdce:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800cdd0:	68bb      	ldr	r3, [r7, #8]
 800cdd2:	4a0a      	ldr	r2, [pc, #40]	@ (800cdfc <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 800cdd4:	fba2 2303 	umull	r2, r3, r2, r3
 800cdd8:	0c9c      	lsrs	r4, r3, #18
 800cdda:	f7fe fee5 	bl	800bba8 <HAL_PWREx_GetVoltageRange>
 800cdde:	4603      	mov	r3, r0
 800cde0:	4619      	mov	r1, r3
 800cde2:	4620      	mov	r0, r4
 800cde4:	f000 f80c 	bl	800ce00 <RCC_SetFlashLatency>
 800cde8:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 800cdea:	4618      	mov	r0, r3
 800cdec:	3714      	adds	r7, #20
 800cdee:	46bd      	mov	sp, r7
 800cdf0:	bd90      	pop	{r4, r7, pc}
 800cdf2:	bf00      	nop
 800cdf4:	08022374 	.word	0x08022374
 800cdf8:	08022314 	.word	0x08022314
 800cdfc:	431bde83 	.word	0x431bde83

0800ce00 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800ce00:	b590      	push	{r4, r7, lr}
 800ce02:	b093      	sub	sp, #76	@ 0x4c
 800ce04:	af00      	add	r7, sp, #0
 800ce06:	6078      	str	r0, [r7, #4]
 800ce08:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800ce0a:	4b37      	ldr	r3, [pc, #220]	@ (800cee8 <RCC_SetFlashLatency+0xe8>)
 800ce0c:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 800ce10:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ce12:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800ce16:	4a35      	ldr	r2, [pc, #212]	@ (800ceec <RCC_SetFlashLatency+0xec>)
 800ce18:	f107 031c 	add.w	r3, r7, #28
 800ce1c:	ca07      	ldmia	r2, {r0, r1, r2}
 800ce1e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800ce22:	4b33      	ldr	r3, [pc, #204]	@ (800cef0 <RCC_SetFlashLatency+0xf0>)
 800ce24:	f107 040c 	add.w	r4, r7, #12
 800ce28:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ce2a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800ce2e:	2300      	movs	r3, #0
 800ce30:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800ce32:	683b      	ldr	r3, [r7, #0]
 800ce34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ce38:	d11a      	bne.n	800ce70 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800ce3a:	2300      	movs	r3, #0
 800ce3c:	643b      	str	r3, [r7, #64]	@ 0x40
 800ce3e:	e013      	b.n	800ce68 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800ce40:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ce42:	009b      	lsls	r3, r3, #2
 800ce44:	3348      	adds	r3, #72	@ 0x48
 800ce46:	443b      	add	r3, r7
 800ce48:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800ce4c:	687a      	ldr	r2, [r7, #4]
 800ce4e:	429a      	cmp	r2, r3
 800ce50:	d807      	bhi.n	800ce62 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800ce52:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ce54:	009b      	lsls	r3, r3, #2
 800ce56:	3348      	adds	r3, #72	@ 0x48
 800ce58:	443b      	add	r3, r7
 800ce5a:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800ce5e:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 800ce60:	e020      	b.n	800cea4 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800ce62:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ce64:	3301      	adds	r3, #1
 800ce66:	643b      	str	r3, [r7, #64]	@ 0x40
 800ce68:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ce6a:	2b03      	cmp	r3, #3
 800ce6c:	d9e8      	bls.n	800ce40 <RCC_SetFlashLatency+0x40>
 800ce6e:	e019      	b.n	800cea4 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800ce70:	2300      	movs	r3, #0
 800ce72:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ce74:	e013      	b.n	800ce9e <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800ce76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ce78:	009b      	lsls	r3, r3, #2
 800ce7a:	3348      	adds	r3, #72	@ 0x48
 800ce7c:	443b      	add	r3, r7
 800ce7e:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800ce82:	687a      	ldr	r2, [r7, #4]
 800ce84:	429a      	cmp	r2, r3
 800ce86:	d807      	bhi.n	800ce98 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800ce88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ce8a:	009b      	lsls	r3, r3, #2
 800ce8c:	3348      	adds	r3, #72	@ 0x48
 800ce8e:	443b      	add	r3, r7
 800ce90:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800ce94:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 800ce96:	e005      	b.n	800cea4 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800ce98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ce9a:	3301      	adds	r3, #1
 800ce9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ce9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cea0:	2b02      	cmp	r3, #2
 800cea2:	d9e8      	bls.n	800ce76 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 800cea4:	4b13      	ldr	r3, [pc, #76]	@ (800cef4 <RCC_SetFlashLatency+0xf4>)
 800cea6:	681b      	ldr	r3, [r3, #0]
 800cea8:	f023 0207 	bic.w	r2, r3, #7
 800ceac:	4911      	ldr	r1, [pc, #68]	@ (800cef4 <RCC_SetFlashLatency+0xf4>)
 800ceae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ceb0:	4313      	orrs	r3, r2
 800ceb2:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800ceb4:	f7fa fb38 	bl	8007528 <HAL_GetTick>
 800ceb8:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800ceba:	e008      	b.n	800cece <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800cebc:	f7fa fb34 	bl	8007528 <HAL_GetTick>
 800cec0:	4602      	mov	r2, r0
 800cec2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cec4:	1ad3      	subs	r3, r2, r3
 800cec6:	2b02      	cmp	r3, #2
 800cec8:	d901      	bls.n	800cece <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 800ceca:	2303      	movs	r3, #3
 800cecc:	e007      	b.n	800cede <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800cece:	4b09      	ldr	r3, [pc, #36]	@ (800cef4 <RCC_SetFlashLatency+0xf4>)
 800ced0:	681b      	ldr	r3, [r3, #0]
 800ced2:	f003 0307 	and.w	r3, r3, #7
 800ced6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ced8:	429a      	cmp	r2, r3
 800ceda:	d1ef      	bne.n	800cebc <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 800cedc:	2300      	movs	r3, #0
}
 800cede:	4618      	mov	r0, r3
 800cee0:	374c      	adds	r7, #76	@ 0x4c
 800cee2:	46bd      	mov	sp, r7
 800cee4:	bd90      	pop	{r4, r7, pc}
 800cee6:	bf00      	nop
 800cee8:	08020100 	.word	0x08020100
 800ceec:	08020110 	.word	0x08020110
 800cef0:	0802011c 	.word	0x0802011c
 800cef4:	58004000 	.word	0x58004000

0800cef8 <LL_RCC_LSE_IsEnabled>:
{
 800cef8:	b480      	push	{r7}
 800cefa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 800cefc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cf00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cf04:	f003 0301 	and.w	r3, r3, #1
 800cf08:	2b01      	cmp	r3, #1
 800cf0a:	d101      	bne.n	800cf10 <LL_RCC_LSE_IsEnabled+0x18>
 800cf0c:	2301      	movs	r3, #1
 800cf0e:	e000      	b.n	800cf12 <LL_RCC_LSE_IsEnabled+0x1a>
 800cf10:	2300      	movs	r3, #0
}
 800cf12:	4618      	mov	r0, r3
 800cf14:	46bd      	mov	sp, r7
 800cf16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf1a:	4770      	bx	lr

0800cf1c <LL_RCC_LSE_IsReady>:
{
 800cf1c:	b480      	push	{r7}
 800cf1e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800cf20:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cf24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cf28:	f003 0302 	and.w	r3, r3, #2
 800cf2c:	2b02      	cmp	r3, #2
 800cf2e:	d101      	bne.n	800cf34 <LL_RCC_LSE_IsReady+0x18>
 800cf30:	2301      	movs	r3, #1
 800cf32:	e000      	b.n	800cf36 <LL_RCC_LSE_IsReady+0x1a>
 800cf34:	2300      	movs	r3, #0
}
 800cf36:	4618      	mov	r0, r3
 800cf38:	46bd      	mov	sp, r7
 800cf3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf3e:	4770      	bx	lr

0800cf40 <LL_RCC_SetRFWKPClockSource>:
{
 800cf40:	b480      	push	{r7}
 800cf42:	b083      	sub	sp, #12
 800cf44:	af00      	add	r7, sp, #0
 800cf46:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 800cf48:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cf4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800cf50:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800cf54:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	4313      	orrs	r3, r2
 800cf5c:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 800cf60:	bf00      	nop
 800cf62:	370c      	adds	r7, #12
 800cf64:	46bd      	mov	sp, r7
 800cf66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf6a:	4770      	bx	lr

0800cf6c <LL_RCC_SetSMPSClockSource>:
{
 800cf6c:	b480      	push	{r7}
 800cf6e:	b083      	sub	sp, #12
 800cf70:	af00      	add	r7, sp, #0
 800cf72:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 800cf74:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cf78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cf7a:	f023 0203 	bic.w	r2, r3, #3
 800cf7e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	4313      	orrs	r3, r2
 800cf86:	624b      	str	r3, [r1, #36]	@ 0x24
}
 800cf88:	bf00      	nop
 800cf8a:	370c      	adds	r7, #12
 800cf8c:	46bd      	mov	sp, r7
 800cf8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf92:	4770      	bx	lr

0800cf94 <LL_RCC_SetSMPSPrescaler>:
{
 800cf94:	b480      	push	{r7}
 800cf96:	b083      	sub	sp, #12
 800cf98:	af00      	add	r7, sp, #0
 800cf9a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 800cf9c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cfa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cfa2:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800cfa6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	4313      	orrs	r3, r2
 800cfae:	624b      	str	r3, [r1, #36]	@ 0x24
}
 800cfb0:	bf00      	nop
 800cfb2:	370c      	adds	r7, #12
 800cfb4:	46bd      	mov	sp, r7
 800cfb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfba:	4770      	bx	lr

0800cfbc <LL_RCC_SetUSARTClockSource>:
{
 800cfbc:	b480      	push	{r7}
 800cfbe:	b083      	sub	sp, #12
 800cfc0:	af00      	add	r7, sp, #0
 800cfc2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 800cfc4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cfc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cfcc:	f023 0203 	bic.w	r2, r3, #3
 800cfd0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	4313      	orrs	r3, r2
 800cfd8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800cfdc:	bf00      	nop
 800cfde:	370c      	adds	r7, #12
 800cfe0:	46bd      	mov	sp, r7
 800cfe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfe6:	4770      	bx	lr

0800cfe8 <LL_RCC_SetLPUARTClockSource>:
{
 800cfe8:	b480      	push	{r7}
 800cfea:	b083      	sub	sp, #12
 800cfec:	af00      	add	r7, sp, #0
 800cfee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800cff0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cff4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cff8:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800cffc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	4313      	orrs	r3, r2
 800d004:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800d008:	bf00      	nop
 800d00a:	370c      	adds	r7, #12
 800d00c:	46bd      	mov	sp, r7
 800d00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d012:	4770      	bx	lr

0800d014 <LL_RCC_SetI2CClockSource>:
{
 800d014:	b480      	push	{r7}
 800d016:	b083      	sub	sp, #12
 800d018:	af00      	add	r7, sp, #0
 800d01a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800d01c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d020:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	091b      	lsrs	r3, r3, #4
 800d028:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800d02c:	43db      	mvns	r3, r3
 800d02e:	401a      	ands	r2, r3
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	011b      	lsls	r3, r3, #4
 800d034:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800d038:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d03c:	4313      	orrs	r3, r2
 800d03e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800d042:	bf00      	nop
 800d044:	370c      	adds	r7, #12
 800d046:	46bd      	mov	sp, r7
 800d048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d04c:	4770      	bx	lr

0800d04e <LL_RCC_SetLPTIMClockSource>:
{
 800d04e:	b480      	push	{r7}
 800d050:	b083      	sub	sp, #12
 800d052:	af00      	add	r7, sp, #0
 800d054:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800d056:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d05a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	0c1b      	lsrs	r3, r3, #16
 800d062:	041b      	lsls	r3, r3, #16
 800d064:	43db      	mvns	r3, r3
 800d066:	401a      	ands	r2, r3
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	041b      	lsls	r3, r3, #16
 800d06c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d070:	4313      	orrs	r3, r2
 800d072:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800d076:	bf00      	nop
 800d078:	370c      	adds	r7, #12
 800d07a:	46bd      	mov	sp, r7
 800d07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d080:	4770      	bx	lr

0800d082 <LL_RCC_SetSAIClockSource>:
{
 800d082:	b480      	push	{r7}
 800d084:	b083      	sub	sp, #12
 800d086:	af00      	add	r7, sp, #0
 800d088:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800d08a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d08e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d092:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800d096:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	4313      	orrs	r3, r2
 800d09e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800d0a2:	bf00      	nop
 800d0a4:	370c      	adds	r7, #12
 800d0a6:	46bd      	mov	sp, r7
 800d0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ac:	4770      	bx	lr

0800d0ae <LL_RCC_SetRNGClockSource>:
{
 800d0ae:	b480      	push	{r7}
 800d0b0:	b083      	sub	sp, #12
 800d0b2:	af00      	add	r7, sp, #0
 800d0b4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800d0b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d0ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d0be:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800d0c2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	4313      	orrs	r3, r2
 800d0ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800d0ce:	bf00      	nop
 800d0d0:	370c      	adds	r7, #12
 800d0d2:	46bd      	mov	sp, r7
 800d0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0d8:	4770      	bx	lr

0800d0da <LL_RCC_SetCLK48ClockSource>:
{
 800d0da:	b480      	push	{r7}
 800d0dc:	b083      	sub	sp, #12
 800d0de:	af00      	add	r7, sp, #0
 800d0e0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800d0e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d0e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d0ea:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800d0ee:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	4313      	orrs	r3, r2
 800d0f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800d0fa:	bf00      	nop
 800d0fc:	370c      	adds	r7, #12
 800d0fe:	46bd      	mov	sp, r7
 800d100:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d104:	4770      	bx	lr

0800d106 <LL_RCC_SetUSBClockSource>:
{
 800d106:	b580      	push	{r7, lr}
 800d108:	b082      	sub	sp, #8
 800d10a:	af00      	add	r7, sp, #0
 800d10c:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 800d10e:	6878      	ldr	r0, [r7, #4]
 800d110:	f7ff ffe3 	bl	800d0da <LL_RCC_SetCLK48ClockSource>
}
 800d114:	bf00      	nop
 800d116:	3708      	adds	r7, #8
 800d118:	46bd      	mov	sp, r7
 800d11a:	bd80      	pop	{r7, pc}

0800d11c <LL_RCC_SetADCClockSource>:
{
 800d11c:	b480      	push	{r7}
 800d11e:	b083      	sub	sp, #12
 800d120:	af00      	add	r7, sp, #0
 800d122:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800d124:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d128:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d12c:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800d130:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	4313      	orrs	r3, r2
 800d138:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800d13c:	bf00      	nop
 800d13e:	370c      	adds	r7, #12
 800d140:	46bd      	mov	sp, r7
 800d142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d146:	4770      	bx	lr

0800d148 <LL_RCC_SetRTCClockSource>:
{
 800d148:	b480      	push	{r7}
 800d14a:	b083      	sub	sp, #12
 800d14c:	af00      	add	r7, sp, #0
 800d14e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800d150:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d154:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d158:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800d15c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	4313      	orrs	r3, r2
 800d164:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 800d168:	bf00      	nop
 800d16a:	370c      	adds	r7, #12
 800d16c:	46bd      	mov	sp, r7
 800d16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d172:	4770      	bx	lr

0800d174 <LL_RCC_GetRTCClockSource>:
{
 800d174:	b480      	push	{r7}
 800d176:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800d178:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d17c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d180:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 800d184:	4618      	mov	r0, r3
 800d186:	46bd      	mov	sp, r7
 800d188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d18c:	4770      	bx	lr

0800d18e <LL_RCC_ForceBackupDomainReset>:
{
 800d18e:	b480      	push	{r7}
 800d190:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800d192:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d196:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d19a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800d19e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d1a2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800d1a6:	bf00      	nop
 800d1a8:	46bd      	mov	sp, r7
 800d1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ae:	4770      	bx	lr

0800d1b0 <LL_RCC_ReleaseBackupDomainReset>:
{
 800d1b0:	b480      	push	{r7}
 800d1b2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800d1b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d1b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d1bc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800d1c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800d1c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800d1c8:	bf00      	nop
 800d1ca:	46bd      	mov	sp, r7
 800d1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1d0:	4770      	bx	lr

0800d1d2 <LL_RCC_PLLSAI1_Enable>:
{
 800d1d2:	b480      	push	{r7}
 800d1d4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800d1d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800d1e0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800d1e4:	6013      	str	r3, [r2, #0]
}
 800d1e6:	bf00      	nop
 800d1e8:	46bd      	mov	sp, r7
 800d1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ee:	4770      	bx	lr

0800d1f0 <LL_RCC_PLLSAI1_Disable>:
{
 800d1f0:	b480      	push	{r7}
 800d1f2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800d1f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800d1fe:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800d202:	6013      	str	r3, [r2, #0]
}
 800d204:	bf00      	nop
 800d206:	46bd      	mov	sp, r7
 800d208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d20c:	4770      	bx	lr

0800d20e <LL_RCC_PLLSAI1_IsReady>:
{
 800d20e:	b480      	push	{r7}
 800d210:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800d212:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d21c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d220:	d101      	bne.n	800d226 <LL_RCC_PLLSAI1_IsReady+0x18>
 800d222:	2301      	movs	r3, #1
 800d224:	e000      	b.n	800d228 <LL_RCC_PLLSAI1_IsReady+0x1a>
 800d226:	2300      	movs	r3, #0
}
 800d228:	4618      	mov	r0, r3
 800d22a:	46bd      	mov	sp, r7
 800d22c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d230:	4770      	bx	lr

0800d232 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800d232:	b580      	push	{r7, lr}
 800d234:	b088      	sub	sp, #32
 800d236:	af00      	add	r7, sp, #0
 800d238:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800d23a:	2300      	movs	r3, #0
 800d23c:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800d23e:	2300      	movs	r3, #0
 800d240:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	681b      	ldr	r3, [r3, #0]
 800d246:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	d034      	beq.n	800d2b8 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d252:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800d256:	d021      	beq.n	800d29c <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800d258:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800d25c:	d81b      	bhi.n	800d296 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800d25e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800d262:	d01d      	beq.n	800d2a0 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800d264:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800d268:	d815      	bhi.n	800d296 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d00b      	beq.n	800d286 <HAL_RCCEx_PeriphCLKConfig+0x54>
 800d26e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800d272:	d110      	bne.n	800d296 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 800d274:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d278:	68db      	ldr	r3, [r3, #12]
 800d27a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800d27e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d282:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 800d284:	e00d      	b.n	800d2a2 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	3304      	adds	r3, #4
 800d28a:	4618      	mov	r0, r3
 800d28c:	f000 f947 	bl	800d51e <RCCEx_PLLSAI1_ConfigNP>
 800d290:	4603      	mov	r3, r0
 800d292:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800d294:	e005      	b.n	800d2a2 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 800d296:	2301      	movs	r3, #1
 800d298:	77fb      	strb	r3, [r7, #31]
        break;
 800d29a:	e002      	b.n	800d2a2 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800d29c:	bf00      	nop
 800d29e:	e000      	b.n	800d2a2 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800d2a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d2a2:	7ffb      	ldrb	r3, [r7, #31]
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d105      	bne.n	800d2b4 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d2ac:	4618      	mov	r0, r3
 800d2ae:	f7ff fee8 	bl	800d082 <LL_RCC_SetSAIClockSource>
 800d2b2:	e001      	b.n	800d2b8 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d2b4:	7ffb      	ldrb	r3, [r7, #31]
 800d2b6:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	d046      	beq.n	800d352 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 800d2c4:	f7ff ff56 	bl	800d174 <LL_RCC_GetRTCClockSource>
 800d2c8:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d2ce:	69ba      	ldr	r2, [r7, #24]
 800d2d0:	429a      	cmp	r2, r3
 800d2d2:	d03c      	beq.n	800d34e <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800d2d4:	f7fe fc58 	bl	800bb88 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800d2d8:	69bb      	ldr	r3, [r7, #24]
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d105      	bne.n	800d2ea <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d2e2:	4618      	mov	r0, r3
 800d2e4:	f7ff ff30 	bl	800d148 <LL_RCC_SetRTCClockSource>
 800d2e8:	e02e      	b.n	800d348 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800d2ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d2ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d2f2:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 800d2f4:	f7ff ff4b 	bl	800d18e <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800d2f8:	f7ff ff5a 	bl	800d1b0 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800d2fc:	697b      	ldr	r3, [r7, #20]
 800d2fe:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d306:	4313      	orrs	r3, r2
 800d308:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800d30a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800d30e:	697b      	ldr	r3, [r7, #20]
 800d310:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800d314:	f7ff fdf0 	bl	800cef8 <LL_RCC_LSE_IsEnabled>
 800d318:	4603      	mov	r3, r0
 800d31a:	2b01      	cmp	r3, #1
 800d31c:	d114      	bne.n	800d348 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800d31e:	f7fa f903 	bl	8007528 <HAL_GetTick>
 800d322:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800d324:	e00b      	b.n	800d33e <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d326:	f7fa f8ff 	bl	8007528 <HAL_GetTick>
 800d32a:	4602      	mov	r2, r0
 800d32c:	693b      	ldr	r3, [r7, #16]
 800d32e:	1ad3      	subs	r3, r2, r3
 800d330:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d334:	4293      	cmp	r3, r2
 800d336:	d902      	bls.n	800d33e <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 800d338:	2303      	movs	r3, #3
 800d33a:	77fb      	strb	r3, [r7, #31]
              break;
 800d33c:	e004      	b.n	800d348 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 800d33e:	f7ff fded 	bl	800cf1c <LL_RCC_LSE_IsReady>
 800d342:	4603      	mov	r3, r0
 800d344:	2b01      	cmp	r3, #1
 800d346:	d1ee      	bne.n	800d326 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800d348:	7ffb      	ldrb	r3, [r7, #31]
 800d34a:	77bb      	strb	r3, [r7, #30]
 800d34c:	e001      	b.n	800d352 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d34e:	7ffb      	ldrb	r3, [r7, #31]
 800d350:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	f003 0301 	and.w	r3, r3, #1
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d004      	beq.n	800d368 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	699b      	ldr	r3, [r3, #24]
 800d362:	4618      	mov	r0, r3
 800d364:	f7ff fe2a 	bl	800cfbc <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	f003 0302 	and.w	r3, r3, #2
 800d370:	2b00      	cmp	r3, #0
 800d372:	d004      	beq.n	800d37e <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	69db      	ldr	r3, [r3, #28]
 800d378:	4618      	mov	r0, r3
 800d37a:	f7ff fe35 	bl	800cfe8 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	f003 0310 	and.w	r3, r3, #16
 800d386:	2b00      	cmp	r3, #0
 800d388:	d004      	beq.n	800d394 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d38e:	4618      	mov	r0, r3
 800d390:	f7ff fe5d 	bl	800d04e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	f003 0320 	and.w	r3, r3, #32
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d004      	beq.n	800d3aa <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d3a4:	4618      	mov	r0, r3
 800d3a6:	f7ff fe52 	bl	800d04e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	f003 0304 	and.w	r3, r3, #4
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d004      	beq.n	800d3c0 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	6a1b      	ldr	r3, [r3, #32]
 800d3ba:	4618      	mov	r0, r3
 800d3bc:	f7ff fe2a 	bl	800d014 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	681b      	ldr	r3, [r3, #0]
 800d3c4:	f003 0308 	and.w	r3, r3, #8
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d004      	beq.n	800d3d6 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d3d0:	4618      	mov	r0, r3
 800d3d2:	f7ff fe1f 	bl	800d014 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	d022      	beq.n	800d428 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d3e6:	4618      	mov	r0, r3
 800d3e8:	f7ff fe8d 	bl	800d106 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d3f0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d3f4:	d107      	bne.n	800d406 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800d3f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d3fa:	68db      	ldr	r3, [r3, #12]
 800d3fc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800d400:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800d404:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d40a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800d40e:	d10b      	bne.n	800d428 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	3304      	adds	r3, #4
 800d414:	4618      	mov	r0, r3
 800d416:	f000 f8dd 	bl	800d5d4 <RCCEx_PLLSAI1_ConfigNQ>
 800d41a:	4603      	mov	r3, r0
 800d41c:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800d41e:	7ffb      	ldrb	r3, [r7, #31]
 800d420:	2b00      	cmp	r3, #0
 800d422:	d001      	beq.n	800d428 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 800d424:	7ffb      	ldrb	r3, [r7, #31]
 800d426:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800d430:	2b00      	cmp	r3, #0
 800d432:	d02b      	beq.n	800d48c <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d438:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d43c:	d008      	beq.n	800d450 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d442:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d446:	d003      	beq.n	800d450 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d105      	bne.n	800d45c <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d454:	4618      	mov	r0, r3
 800d456:	f7ff fe2a 	bl	800d0ae <LL_RCC_SetRNGClockSource>
 800d45a:	e00a      	b.n	800d472 <HAL_RCCEx_PeriphCLKConfig+0x240>
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d460:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800d464:	60fb      	str	r3, [r7, #12]
 800d466:	2000      	movs	r0, #0
 800d468:	f7ff fe21 	bl	800d0ae <LL_RCC_SetRNGClockSource>
 800d46c:	68f8      	ldr	r0, [r7, #12]
 800d46e:	f7ff fe34 	bl	800d0da <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d476:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 800d47a:	d107      	bne.n	800d48c <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800d47c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d480:	68db      	ldr	r3, [r3, #12]
 800d482:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800d486:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800d48a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	681b      	ldr	r3, [r3, #0]
 800d490:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d494:	2b00      	cmp	r3, #0
 800d496:	d022      	beq.n	800d4de <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d49c:	4618      	mov	r0, r3
 800d49e:	f7ff fe3d 	bl	800d11c <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d4a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d4aa:	d107      	bne.n	800d4bc <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800d4ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d4b0:	68db      	ldr	r3, [r3, #12]
 800d4b2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800d4b6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d4ba:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d4c0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d4c4:	d10b      	bne.n	800d4de <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	3304      	adds	r3, #4
 800d4ca:	4618      	mov	r0, r3
 800d4cc:	f000 f8dd 	bl	800d68a <RCCEx_PLLSAI1_ConfigNR>
 800d4d0:	4603      	mov	r3, r0
 800d4d2:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800d4d4:	7ffb      	ldrb	r3, [r7, #31]
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	d001      	beq.n	800d4de <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 800d4da:	7ffb      	ldrb	r3, [r7, #31]
 800d4dc:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	681b      	ldr	r3, [r3, #0]
 800d4e2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d004      	beq.n	800d4f4 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d4ee:	4618      	mov	r0, r3
 800d4f0:	f7ff fd26 	bl	800cf40 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	681b      	ldr	r3, [r3, #0]
 800d4f8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	d009      	beq.n	800d514 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d504:	4618      	mov	r0, r3
 800d506:	f7ff fd45 	bl	800cf94 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d50e:	4618      	mov	r0, r3
 800d510:	f7ff fd2c 	bl	800cf6c <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 800d514:	7fbb      	ldrb	r3, [r7, #30]
}
 800d516:	4618      	mov	r0, r3
 800d518:	3720      	adds	r7, #32
 800d51a:	46bd      	mov	sp, r7
 800d51c:	bd80      	pop	{r7, pc}

0800d51e <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800d51e:	b580      	push	{r7, lr}
 800d520:	b084      	sub	sp, #16
 800d522:	af00      	add	r7, sp, #0
 800d524:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d526:	2300      	movs	r3, #0
 800d528:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800d52a:	f7ff fe61 	bl	800d1f0 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800d52e:	f7f9 fffb 	bl	8007528 <HAL_GetTick>
 800d532:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800d534:	e009      	b.n	800d54a <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800d536:	f7f9 fff7 	bl	8007528 <HAL_GetTick>
 800d53a:	4602      	mov	r2, r0
 800d53c:	68bb      	ldr	r3, [r7, #8]
 800d53e:	1ad3      	subs	r3, r2, r3
 800d540:	2b02      	cmp	r3, #2
 800d542:	d902      	bls.n	800d54a <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 800d544:	2303      	movs	r3, #3
 800d546:	73fb      	strb	r3, [r7, #15]
      break;
 800d548:	e004      	b.n	800d554 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800d54a:	f7ff fe60 	bl	800d20e <LL_RCC_PLLSAI1_IsReady>
 800d54e:	4603      	mov	r3, r0
 800d550:	2b00      	cmp	r3, #0
 800d552:	d1f0      	bne.n	800d536 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 800d554:	7bfb      	ldrb	r3, [r7, #15]
 800d556:	2b00      	cmp	r3, #0
 800d558:	d137      	bne.n	800d5ca <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800d55a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d55e:	691b      	ldr	r3, [r3, #16]
 800d560:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	021b      	lsls	r3, r3, #8
 800d56a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d56e:	4313      	orrs	r3, r2
 800d570:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800d572:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d576:	691b      	ldr	r3, [r3, #16]
 800d578:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	685b      	ldr	r3, [r3, #4]
 800d580:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d584:	4313      	orrs	r3, r2
 800d586:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800d588:	f7ff fe23 	bl	800d1d2 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d58c:	f7f9 ffcc 	bl	8007528 <HAL_GetTick>
 800d590:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800d592:	e009      	b.n	800d5a8 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800d594:	f7f9 ffc8 	bl	8007528 <HAL_GetTick>
 800d598:	4602      	mov	r2, r0
 800d59a:	68bb      	ldr	r3, [r7, #8]
 800d59c:	1ad3      	subs	r3, r2, r3
 800d59e:	2b02      	cmp	r3, #2
 800d5a0:	d902      	bls.n	800d5a8 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800d5a2:	2303      	movs	r3, #3
 800d5a4:	73fb      	strb	r3, [r7, #15]
        break;
 800d5a6:	e004      	b.n	800d5b2 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800d5a8:	f7ff fe31 	bl	800d20e <LL_RCC_PLLSAI1_IsReady>
 800d5ac:	4603      	mov	r3, r0
 800d5ae:	2b01      	cmp	r3, #1
 800d5b0:	d1f0      	bne.n	800d594 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800d5b2:	7bfb      	ldrb	r3, [r7, #15]
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d108      	bne.n	800d5ca <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800d5b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d5bc:	691a      	ldr	r2, [r3, #16]
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	691b      	ldr	r3, [r3, #16]
 800d5c2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d5c6:	4313      	orrs	r3, r2
 800d5c8:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800d5ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800d5cc:	4618      	mov	r0, r3
 800d5ce:	3710      	adds	r7, #16
 800d5d0:	46bd      	mov	sp, r7
 800d5d2:	bd80      	pop	{r7, pc}

0800d5d4 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800d5d4:	b580      	push	{r7, lr}
 800d5d6:	b084      	sub	sp, #16
 800d5d8:	af00      	add	r7, sp, #0
 800d5da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d5dc:	2300      	movs	r3, #0
 800d5de:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800d5e0:	f7ff fe06 	bl	800d1f0 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800d5e4:	f7f9 ffa0 	bl	8007528 <HAL_GetTick>
 800d5e8:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800d5ea:	e009      	b.n	800d600 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800d5ec:	f7f9 ff9c 	bl	8007528 <HAL_GetTick>
 800d5f0:	4602      	mov	r2, r0
 800d5f2:	68bb      	ldr	r3, [r7, #8]
 800d5f4:	1ad3      	subs	r3, r2, r3
 800d5f6:	2b02      	cmp	r3, #2
 800d5f8:	d902      	bls.n	800d600 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800d5fa:	2303      	movs	r3, #3
 800d5fc:	73fb      	strb	r3, [r7, #15]
      break;
 800d5fe:	e004      	b.n	800d60a <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800d600:	f7ff fe05 	bl	800d20e <LL_RCC_PLLSAI1_IsReady>
 800d604:	4603      	mov	r3, r0
 800d606:	2b00      	cmp	r3, #0
 800d608:	d1f0      	bne.n	800d5ec <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800d60a:	7bfb      	ldrb	r3, [r7, #15]
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	d137      	bne.n	800d680 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800d610:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d614:	691b      	ldr	r3, [r3, #16]
 800d616:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	021b      	lsls	r3, r3, #8
 800d620:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d624:	4313      	orrs	r3, r2
 800d626:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800d628:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d62c:	691b      	ldr	r3, [r3, #16]
 800d62e:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	689b      	ldr	r3, [r3, #8]
 800d636:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d63a:	4313      	orrs	r3, r2
 800d63c:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800d63e:	f7ff fdc8 	bl	800d1d2 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d642:	f7f9 ff71 	bl	8007528 <HAL_GetTick>
 800d646:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800d648:	e009      	b.n	800d65e <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800d64a:	f7f9 ff6d 	bl	8007528 <HAL_GetTick>
 800d64e:	4602      	mov	r2, r0
 800d650:	68bb      	ldr	r3, [r7, #8]
 800d652:	1ad3      	subs	r3, r2, r3
 800d654:	2b02      	cmp	r3, #2
 800d656:	d902      	bls.n	800d65e <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 800d658:	2303      	movs	r3, #3
 800d65a:	73fb      	strb	r3, [r7, #15]
        break;
 800d65c:	e004      	b.n	800d668 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800d65e:	f7ff fdd6 	bl	800d20e <LL_RCC_PLLSAI1_IsReady>
 800d662:	4603      	mov	r3, r0
 800d664:	2b01      	cmp	r3, #1
 800d666:	d1f0      	bne.n	800d64a <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 800d668:	7bfb      	ldrb	r3, [r7, #15]
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d108      	bne.n	800d680 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800d66e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d672:	691a      	ldr	r2, [r3, #16]
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	691b      	ldr	r3, [r3, #16]
 800d678:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d67c:	4313      	orrs	r3, r2
 800d67e:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800d680:	7bfb      	ldrb	r3, [r7, #15]
}
 800d682:	4618      	mov	r0, r3
 800d684:	3710      	adds	r7, #16
 800d686:	46bd      	mov	sp, r7
 800d688:	bd80      	pop	{r7, pc}

0800d68a <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800d68a:	b580      	push	{r7, lr}
 800d68c:	b084      	sub	sp, #16
 800d68e:	af00      	add	r7, sp, #0
 800d690:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d692:	2300      	movs	r3, #0
 800d694:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800d696:	f7ff fdab 	bl	800d1f0 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800d69a:	f7f9 ff45 	bl	8007528 <HAL_GetTick>
 800d69e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800d6a0:	e009      	b.n	800d6b6 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800d6a2:	f7f9 ff41 	bl	8007528 <HAL_GetTick>
 800d6a6:	4602      	mov	r2, r0
 800d6a8:	68bb      	ldr	r3, [r7, #8]
 800d6aa:	1ad3      	subs	r3, r2, r3
 800d6ac:	2b02      	cmp	r3, #2
 800d6ae:	d902      	bls.n	800d6b6 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800d6b0:	2303      	movs	r3, #3
 800d6b2:	73fb      	strb	r3, [r7, #15]
      break;
 800d6b4:	e004      	b.n	800d6c0 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800d6b6:	f7ff fdaa 	bl	800d20e <LL_RCC_PLLSAI1_IsReady>
 800d6ba:	4603      	mov	r3, r0
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d1f0      	bne.n	800d6a2 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800d6c0:	7bfb      	ldrb	r3, [r7, #15]
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	d137      	bne.n	800d736 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800d6c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d6ca:	691b      	ldr	r3, [r3, #16]
 800d6cc:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	681b      	ldr	r3, [r3, #0]
 800d6d4:	021b      	lsls	r3, r3, #8
 800d6d6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d6da:	4313      	orrs	r3, r2
 800d6dc:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800d6de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d6e2:	691b      	ldr	r3, [r3, #16]
 800d6e4:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	68db      	ldr	r3, [r3, #12]
 800d6ec:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d6f0:	4313      	orrs	r3, r2
 800d6f2:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800d6f4:	f7ff fd6d 	bl	800d1d2 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d6f8:	f7f9 ff16 	bl	8007528 <HAL_GetTick>
 800d6fc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800d6fe:	e009      	b.n	800d714 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800d700:	f7f9 ff12 	bl	8007528 <HAL_GetTick>
 800d704:	4602      	mov	r2, r0
 800d706:	68bb      	ldr	r3, [r7, #8]
 800d708:	1ad3      	subs	r3, r2, r3
 800d70a:	2b02      	cmp	r3, #2
 800d70c:	d902      	bls.n	800d714 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800d70e:	2303      	movs	r3, #3
 800d710:	73fb      	strb	r3, [r7, #15]
        break;
 800d712:	e004      	b.n	800d71e <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800d714:	f7ff fd7b 	bl	800d20e <LL_RCC_PLLSAI1_IsReady>
 800d718:	4603      	mov	r3, r0
 800d71a:	2b01      	cmp	r3, #1
 800d71c:	d1f0      	bne.n	800d700 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800d71e:	7bfb      	ldrb	r3, [r7, #15]
 800d720:	2b00      	cmp	r3, #0
 800d722:	d108      	bne.n	800d736 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800d724:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d728:	691a      	ldr	r2, [r3, #16]
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	691b      	ldr	r3, [r3, #16]
 800d72e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d732:	4313      	orrs	r3, r2
 800d734:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800d736:	7bfb      	ldrb	r3, [r7, #15]
}
 800d738:	4618      	mov	r0, r3
 800d73a:	3710      	adds	r7, #16
 800d73c:	46bd      	mov	sp, r7
 800d73e:	bd80      	pop	{r7, pc}

0800d740 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800d740:	b580      	push	{r7, lr}
 800d742:	b084      	sub	sp, #16
 800d744:	af00      	add	r7, sp, #0
 800d746:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	d101      	bne.n	800d752 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800d74e:	2301      	movs	r3, #1
 800d750:	e09f      	b.n	800d892 <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800d758:	b2db      	uxtb	r3, r3
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	d106      	bne.n	800d76c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	2200      	movs	r2, #0
 800d762:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800d766:	6878      	ldr	r0, [r7, #4]
 800d768:	f7f6 f8ca 	bl	8003900 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	2202      	movs	r2, #2
 800d770:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800d774:	4b49      	ldr	r3, [pc, #292]	@ (800d89c <HAL_RTC_Init+0x15c>)
 800d776:	68db      	ldr	r3, [r3, #12]
 800d778:	f003 0310 	and.w	r3, r3, #16
 800d77c:	2b10      	cmp	r3, #16
 800d77e:	d07e      	beq.n	800d87e <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	681b      	ldr	r3, [r3, #0]
 800d784:	22ca      	movs	r2, #202	@ 0xca
 800d786:	625a      	str	r2, [r3, #36]	@ 0x24
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	681b      	ldr	r3, [r3, #0]
 800d78c:	2253      	movs	r2, #83	@ 0x53
 800d78e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800d790:	6878      	ldr	r0, [r7, #4]
 800d792:	f000 fa1d 	bl	800dbd0 <RTC_EnterInitMode>
 800d796:	4603      	mov	r3, r0
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d00a      	beq.n	800d7b2 <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	681b      	ldr	r3, [r3, #0]
 800d7a0:	22ff      	movs	r2, #255	@ 0xff
 800d7a2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	2204      	movs	r2, #4
 800d7a8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      status = HAL_ERROR;
 800d7ac:	2301      	movs	r3, #1
 800d7ae:	73fb      	strb	r3, [r7, #15]
 800d7b0:	e067      	b.n	800d882 <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	689b      	ldr	r3, [r3, #8]
 800d7b8:	687a      	ldr	r2, [r7, #4]
 800d7ba:	6812      	ldr	r2, [r2, #0]
 800d7bc:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800d7c0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d7c4:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	681b      	ldr	r3, [r3, #0]
 800d7ca:	6899      	ldr	r1, [r3, #8]
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	685a      	ldr	r2, [r3, #4]
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	691b      	ldr	r3, [r3, #16]
 800d7d4:	431a      	orrs	r2, r3
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	699b      	ldr	r3, [r3, #24]
 800d7da:	431a      	orrs	r2, r3
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	681b      	ldr	r3, [r3, #0]
 800d7e0:	430a      	orrs	r2, r1
 800d7e2:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	687a      	ldr	r2, [r7, #4]
 800d7ea:	68d2      	ldr	r2, [r2, #12]
 800d7ec:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	681b      	ldr	r3, [r3, #0]
 800d7f2:	6919      	ldr	r1, [r3, #16]
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	689b      	ldr	r3, [r3, #8]
 800d7f8:	041a      	lsls	r2, r3, #16
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	681b      	ldr	r3, [r3, #0]
 800d7fe:	430a      	orrs	r2, r1
 800d800:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	681b      	ldr	r3, [r3, #0]
 800d806:	68da      	ldr	r2, [r3, #12]
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	681b      	ldr	r3, [r3, #0]
 800d80c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800d810:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	681b      	ldr	r3, [r3, #0]
 800d816:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	681b      	ldr	r3, [r3, #0]
 800d81c:	f022 0203 	bic.w	r2, r2, #3
 800d820:	64da      	str	r2, [r3, #76]	@ 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	681b      	ldr	r3, [r3, #0]
 800d826:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	69da      	ldr	r2, [r3, #28]
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	695b      	ldr	r3, [r3, #20]
 800d830:	431a      	orrs	r2, r3
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	430a      	orrs	r2, r1
 800d838:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	681b      	ldr	r3, [r3, #0]
 800d83e:	689b      	ldr	r3, [r3, #8]
 800d840:	f003 0320 	and.w	r3, r3, #32
 800d844:	2b00      	cmp	r3, #0
 800d846:	d113      	bne.n	800d870 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800d848:	6878      	ldr	r0, [r7, #4]
 800d84a:	f000 f99b 	bl	800db84 <HAL_RTC_WaitForSynchro>
 800d84e:	4603      	mov	r3, r0
 800d850:	2b00      	cmp	r3, #0
 800d852:	d00d      	beq.n	800d870 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	681b      	ldr	r3, [r3, #0]
 800d858:	22ff      	movs	r2, #255	@ 0xff
 800d85a:	625a      	str	r2, [r3, #36]	@ 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	2204      	movs	r2, #4
 800d860:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	2200      	movs	r2, #0
 800d868:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 800d86c:	2301      	movs	r3, #1
 800d86e:	e010      	b.n	800d892 <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	681b      	ldr	r3, [r3, #0]
 800d874:	22ff      	movs	r2, #255	@ 0xff
 800d876:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      status = HAL_OK;
 800d878:	2300      	movs	r3, #0
 800d87a:	73fb      	strb	r3, [r7, #15]
 800d87c:	e001      	b.n	800d882 <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 800d87e:	2300      	movs	r3, #0
 800d880:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800d882:	7bfb      	ldrb	r3, [r7, #15]
 800d884:	2b00      	cmp	r3, #0
 800d886:	d103      	bne.n	800d890 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	2201      	movs	r2, #1
 800d88c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  return status;
 800d890:	7bfb      	ldrb	r3, [r7, #15]
}
 800d892:	4618      	mov	r0, r3
 800d894:	3710      	adds	r7, #16
 800d896:	46bd      	mov	sp, r7
 800d898:	bd80      	pop	{r7, pc}
 800d89a:	bf00      	nop
 800d89c:	40002800 	.word	0x40002800

0800d8a0 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800d8a0:	b590      	push	{r4, r7, lr}
 800d8a2:	b087      	sub	sp, #28
 800d8a4:	af00      	add	r7, sp, #0
 800d8a6:	60f8      	str	r0, [r7, #12]
 800d8a8:	60b9      	str	r1, [r7, #8]
 800d8aa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800d8ac:	68fb      	ldr	r3, [r7, #12]
 800d8ae:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d8b2:	2b01      	cmp	r3, #1
 800d8b4:	d101      	bne.n	800d8ba <HAL_RTC_SetTime+0x1a>
 800d8b6:	2302      	movs	r3, #2
 800d8b8:	e0b2      	b.n	800da20 <HAL_RTC_SetTime+0x180>
 800d8ba:	68fb      	ldr	r3, [r7, #12]
 800d8bc:	2201      	movs	r2, #1
 800d8be:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800d8c2:	68fb      	ldr	r3, [r7, #12]
 800d8c4:	2202      	movs	r2, #2
 800d8c6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if (Format == RTC_FORMAT_BIN)
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	d126      	bne.n	800d91e <HAL_RTC_SetTime+0x7e>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800d8d0:	68fb      	ldr	r3, [r7, #12]
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	689b      	ldr	r3, [r3, #8]
 800d8d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	d102      	bne.n	800d8e4 <HAL_RTC_SetTime+0x44>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800d8de:	68bb      	ldr	r3, [r7, #8]
 800d8e0:	2200      	movs	r2, #0
 800d8e2:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800d8e4:	68bb      	ldr	r3, [r7, #8]
 800d8e6:	781b      	ldrb	r3, [r3, #0]
 800d8e8:	4618      	mov	r0, r3
 800d8ea:	f000 f99b 	bl	800dc24 <RTC_ByteToBcd2>
 800d8ee:	4603      	mov	r3, r0
 800d8f0:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800d8f2:	68bb      	ldr	r3, [r7, #8]
 800d8f4:	785b      	ldrb	r3, [r3, #1]
 800d8f6:	4618      	mov	r0, r3
 800d8f8:	f000 f994 	bl	800dc24 <RTC_ByteToBcd2>
 800d8fc:	4603      	mov	r3, r0
 800d8fe:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800d900:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800d902:	68bb      	ldr	r3, [r7, #8]
 800d904:	789b      	ldrb	r3, [r3, #2]
 800d906:	4618      	mov	r0, r3
 800d908:	f000 f98c 	bl	800dc24 <RTC_ByteToBcd2>
 800d90c:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800d90e:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800d912:	68bb      	ldr	r3, [r7, #8]
 800d914:	78db      	ldrb	r3, [r3, #3]
 800d916:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800d918:	4313      	orrs	r3, r2
 800d91a:	617b      	str	r3, [r7, #20]
 800d91c:	e018      	b.n	800d950 <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800d91e:	68fb      	ldr	r3, [r7, #12]
 800d920:	681b      	ldr	r3, [r3, #0]
 800d922:	689b      	ldr	r3, [r3, #8]
 800d924:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d102      	bne.n	800d932 <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800d92c:	68bb      	ldr	r3, [r7, #8]
 800d92e:	2200      	movs	r2, #0
 800d930:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800d932:	68bb      	ldr	r3, [r7, #8]
 800d934:	781b      	ldrb	r3, [r3, #0]
 800d936:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800d938:	68bb      	ldr	r3, [r7, #8]
 800d93a:	785b      	ldrb	r3, [r3, #1]
 800d93c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800d93e:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800d940:	68ba      	ldr	r2, [r7, #8]
 800d942:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800d944:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800d946:	68bb      	ldr	r3, [r7, #8]
 800d948:	78db      	ldrb	r3, [r3, #3]
 800d94a:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800d94c:	4313      	orrs	r3, r2
 800d94e:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d950:	68fb      	ldr	r3, [r7, #12]
 800d952:	681b      	ldr	r3, [r3, #0]
 800d954:	22ca      	movs	r2, #202	@ 0xca
 800d956:	625a      	str	r2, [r3, #36]	@ 0x24
 800d958:	68fb      	ldr	r3, [r7, #12]
 800d95a:	681b      	ldr	r3, [r3, #0]
 800d95c:	2253      	movs	r2, #83	@ 0x53
 800d95e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800d960:	68f8      	ldr	r0, [r7, #12]
 800d962:	f000 f935 	bl	800dbd0 <RTC_EnterInitMode>
 800d966:	4603      	mov	r3, r0
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d00d      	beq.n	800d988 <HAL_RTC_SetTime+0xe8>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d96c:	68fb      	ldr	r3, [r7, #12]
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	22ff      	movs	r2, #255	@ 0xff
 800d972:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800d974:	68fb      	ldr	r3, [r7, #12]
 800d976:	2204      	movs	r2, #4
 800d978:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800d97c:	68fb      	ldr	r3, [r7, #12]
 800d97e:	2200      	movs	r2, #0
 800d980:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 800d984:	2301      	movs	r3, #1
 800d986:	e04b      	b.n	800da20 <HAL_RTC_SetTime+0x180>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800d988:	68fb      	ldr	r3, [r7, #12]
 800d98a:	681a      	ldr	r2, [r3, #0]
 800d98c:	697b      	ldr	r3, [r7, #20]
 800d98e:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 800d992:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800d996:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800d998:	68fb      	ldr	r3, [r7, #12]
 800d99a:	681b      	ldr	r3, [r3, #0]
 800d99c:	689a      	ldr	r2, [r3, #8]
 800d99e:	68fb      	ldr	r3, [r7, #12]
 800d9a0:	681b      	ldr	r3, [r3, #0]
 800d9a2:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800d9a6:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800d9a8:	68fb      	ldr	r3, [r7, #12]
 800d9aa:	681b      	ldr	r3, [r3, #0]
 800d9ac:	6899      	ldr	r1, [r3, #8]
 800d9ae:	68bb      	ldr	r3, [r7, #8]
 800d9b0:	68da      	ldr	r2, [r3, #12]
 800d9b2:	68bb      	ldr	r3, [r7, #8]
 800d9b4:	691b      	ldr	r3, [r3, #16]
 800d9b6:	431a      	orrs	r2, r3
 800d9b8:	68fb      	ldr	r3, [r7, #12]
 800d9ba:	681b      	ldr	r3, [r3, #0]
 800d9bc:	430a      	orrs	r2, r1
 800d9be:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800d9c0:	68fb      	ldr	r3, [r7, #12]
 800d9c2:	681b      	ldr	r3, [r3, #0]
 800d9c4:	68da      	ldr	r2, [r3, #12]
 800d9c6:	68fb      	ldr	r3, [r7, #12]
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800d9ce:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800d9d0:	68fb      	ldr	r3, [r7, #12]
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	689b      	ldr	r3, [r3, #8]
 800d9d6:	f003 0320 	and.w	r3, r3, #32
 800d9da:	2b00      	cmp	r3, #0
 800d9dc:	d113      	bne.n	800da06 <HAL_RTC_SetTime+0x166>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800d9de:	68f8      	ldr	r0, [r7, #12]
 800d9e0:	f000 f8d0 	bl	800db84 <HAL_RTC_WaitForSynchro>
 800d9e4:	4603      	mov	r3, r0
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	d00d      	beq.n	800da06 <HAL_RTC_SetTime+0x166>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d9ea:	68fb      	ldr	r3, [r7, #12]
 800d9ec:	681b      	ldr	r3, [r3, #0]
 800d9ee:	22ff      	movs	r2, #255	@ 0xff
 800d9f0:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800d9f2:	68fb      	ldr	r3, [r7, #12]
 800d9f4:	2204      	movs	r2, #4
 800d9f6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800d9fa:	68fb      	ldr	r3, [r7, #12]
 800d9fc:	2200      	movs	r2, #0
 800d9fe:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800da02:	2301      	movs	r3, #1
 800da04:	e00c      	b.n	800da20 <HAL_RTC_SetTime+0x180>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800da06:	68fb      	ldr	r3, [r7, #12]
 800da08:	681b      	ldr	r3, [r3, #0]
 800da0a:	22ff      	movs	r2, #255	@ 0xff
 800da0c:	625a      	str	r2, [r3, #36]	@ 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 800da0e:	68fb      	ldr	r3, [r7, #12]
 800da10:	2201      	movs	r2, #1
 800da12:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    __HAL_UNLOCK(hrtc);
 800da16:	68fb      	ldr	r3, [r7, #12]
 800da18:	2200      	movs	r2, #0
 800da1a:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_OK;
 800da1e:	2300      	movs	r3, #0
  }
}
 800da20:	4618      	mov	r0, r3
 800da22:	371c      	adds	r7, #28
 800da24:	46bd      	mov	sp, r7
 800da26:	bd90      	pop	{r4, r7, pc}

0800da28 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800da28:	b590      	push	{r4, r7, lr}
 800da2a:	b087      	sub	sp, #28
 800da2c:	af00      	add	r7, sp, #0
 800da2e:	60f8      	str	r0, [r7, #12]
 800da30:	60b9      	str	r1, [r7, #8]
 800da32:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800da34:	68fb      	ldr	r3, [r7, #12]
 800da36:	f893 3020 	ldrb.w	r3, [r3, #32]
 800da3a:	2b01      	cmp	r3, #1
 800da3c:	d101      	bne.n	800da42 <HAL_RTC_SetDate+0x1a>
 800da3e:	2302      	movs	r3, #2
 800da40:	e09c      	b.n	800db7c <HAL_RTC_SetDate+0x154>
 800da42:	68fb      	ldr	r3, [r7, #12]
 800da44:	2201      	movs	r2, #1
 800da46:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800da4a:	68fb      	ldr	r3, [r7, #12]
 800da4c:	2202      	movs	r2, #2
 800da4e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	2b00      	cmp	r3, #0
 800da56:	d10e      	bne.n	800da76 <HAL_RTC_SetDate+0x4e>
 800da58:	68bb      	ldr	r3, [r7, #8]
 800da5a:	785b      	ldrb	r3, [r3, #1]
 800da5c:	f003 0310 	and.w	r3, r3, #16
 800da60:	2b00      	cmp	r3, #0
 800da62:	d008      	beq.n	800da76 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800da64:	68bb      	ldr	r3, [r7, #8]
 800da66:	785b      	ldrb	r3, [r3, #1]
 800da68:	f023 0310 	bic.w	r3, r3, #16
 800da6c:	b2db      	uxtb	r3, r3
 800da6e:	330a      	adds	r3, #10
 800da70:	b2da      	uxtb	r2, r3
 800da72:	68bb      	ldr	r3, [r7, #8]
 800da74:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	2b00      	cmp	r3, #0
 800da7a:	d11c      	bne.n	800dab6 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800da7c:	68bb      	ldr	r3, [r7, #8]
 800da7e:	78db      	ldrb	r3, [r3, #3]
 800da80:	4618      	mov	r0, r3
 800da82:	f000 f8cf 	bl	800dc24 <RTC_ByteToBcd2>
 800da86:	4603      	mov	r3, r0
 800da88:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800da8a:	68bb      	ldr	r3, [r7, #8]
 800da8c:	785b      	ldrb	r3, [r3, #1]
 800da8e:	4618      	mov	r0, r3
 800da90:	f000 f8c8 	bl	800dc24 <RTC_ByteToBcd2>
 800da94:	4603      	mov	r3, r0
 800da96:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800da98:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800da9a:	68bb      	ldr	r3, [r7, #8]
 800da9c:	789b      	ldrb	r3, [r3, #2]
 800da9e:	4618      	mov	r0, r3
 800daa0:	f000 f8c0 	bl	800dc24 <RTC_ByteToBcd2>
 800daa4:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800daa6:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 800daaa:	68bb      	ldr	r3, [r7, #8]
 800daac:	781b      	ldrb	r3, [r3, #0]
 800daae:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800dab0:	4313      	orrs	r3, r2
 800dab2:	617b      	str	r3, [r7, #20]
 800dab4:	e00e      	b.n	800dad4 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800dab6:	68bb      	ldr	r3, [r7, #8]
 800dab8:	78db      	ldrb	r3, [r3, #3]
 800daba:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800dabc:	68bb      	ldr	r3, [r7, #8]
 800dabe:	785b      	ldrb	r3, [r3, #1]
 800dac0:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800dac2:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800dac4:	68ba      	ldr	r2, [r7, #8]
 800dac6:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800dac8:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 800daca:	68bb      	ldr	r3, [r7, #8]
 800dacc:	781b      	ldrb	r3, [r3, #0]
 800dace:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800dad0:	4313      	orrs	r3, r2
 800dad2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800dad4:	68fb      	ldr	r3, [r7, #12]
 800dad6:	681b      	ldr	r3, [r3, #0]
 800dad8:	22ca      	movs	r2, #202	@ 0xca
 800dada:	625a      	str	r2, [r3, #36]	@ 0x24
 800dadc:	68fb      	ldr	r3, [r7, #12]
 800dade:	681b      	ldr	r3, [r3, #0]
 800dae0:	2253      	movs	r2, #83	@ 0x53
 800dae2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800dae4:	68f8      	ldr	r0, [r7, #12]
 800dae6:	f000 f873 	bl	800dbd0 <RTC_EnterInitMode>
 800daea:	4603      	mov	r3, r0
 800daec:	2b00      	cmp	r3, #0
 800daee:	d00d      	beq.n	800db0c <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800daf0:	68fb      	ldr	r3, [r7, #12]
 800daf2:	681b      	ldr	r3, [r3, #0]
 800daf4:	22ff      	movs	r2, #255	@ 0xff
 800daf6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800daf8:	68fb      	ldr	r3, [r7, #12]
 800dafa:	2204      	movs	r2, #4
 800dafc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800db00:	68fb      	ldr	r3, [r7, #12]
 800db02:	2200      	movs	r2, #0
 800db04:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 800db08:	2301      	movs	r3, #1
 800db0a:	e037      	b.n	800db7c <HAL_RTC_SetDate+0x154>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800db0c:	68fb      	ldr	r3, [r7, #12]
 800db0e:	681a      	ldr	r2, [r3, #0]
 800db10:	697b      	ldr	r3, [r7, #20]
 800db12:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800db16:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800db1a:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800db1c:	68fb      	ldr	r3, [r7, #12]
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	68da      	ldr	r2, [r3, #12]
 800db22:	68fb      	ldr	r3, [r7, #12]
 800db24:	681b      	ldr	r3, [r3, #0]
 800db26:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800db2a:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800db2c:	68fb      	ldr	r3, [r7, #12]
 800db2e:	681b      	ldr	r3, [r3, #0]
 800db30:	689b      	ldr	r3, [r3, #8]
 800db32:	f003 0320 	and.w	r3, r3, #32
 800db36:	2b00      	cmp	r3, #0
 800db38:	d113      	bne.n	800db62 <HAL_RTC_SetDate+0x13a>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800db3a:	68f8      	ldr	r0, [r7, #12]
 800db3c:	f000 f822 	bl	800db84 <HAL_RTC_WaitForSynchro>
 800db40:	4603      	mov	r3, r0
 800db42:	2b00      	cmp	r3, #0
 800db44:	d00d      	beq.n	800db62 <HAL_RTC_SetDate+0x13a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800db46:	68fb      	ldr	r3, [r7, #12]
 800db48:	681b      	ldr	r3, [r3, #0]
 800db4a:	22ff      	movs	r2, #255	@ 0xff
 800db4c:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800db4e:	68fb      	ldr	r3, [r7, #12]
 800db50:	2204      	movs	r2, #4
 800db52:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800db56:	68fb      	ldr	r3, [r7, #12]
 800db58:	2200      	movs	r2, #0
 800db5a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800db5e:	2301      	movs	r3, #1
 800db60:	e00c      	b.n	800db7c <HAL_RTC_SetDate+0x154>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800db62:	68fb      	ldr	r3, [r7, #12]
 800db64:	681b      	ldr	r3, [r3, #0]
 800db66:	22ff      	movs	r2, #255	@ 0xff
 800db68:	625a      	str	r2, [r3, #36]	@ 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800db6a:	68fb      	ldr	r3, [r7, #12]
 800db6c:	2201      	movs	r2, #1
 800db6e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800db72:	68fb      	ldr	r3, [r7, #12]
 800db74:	2200      	movs	r2, #0
 800db76:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_OK;
 800db7a:	2300      	movs	r3, #0
  }
}
 800db7c:	4618      	mov	r0, r3
 800db7e:	371c      	adds	r7, #28
 800db80:	46bd      	mov	sp, r7
 800db82:	bd90      	pop	{r4, r7, pc}

0800db84 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800db84:	b580      	push	{r7, lr}
 800db86:	b084      	sub	sp, #16
 800db88:	af00      	add	r7, sp, #0
 800db8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	681b      	ldr	r3, [r3, #0]
 800db90:	68da      	ldr	r2, [r3, #12]
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	681b      	ldr	r3, [r3, #0]
 800db96:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800db9a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800db9c:	f7f9 fcc4 	bl	8007528 <HAL_GetTick>
 800dba0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800dba2:	e009      	b.n	800dbb8 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800dba4:	f7f9 fcc0 	bl	8007528 <HAL_GetTick>
 800dba8:	4602      	mov	r2, r0
 800dbaa:	68fb      	ldr	r3, [r7, #12]
 800dbac:	1ad3      	subs	r3, r2, r3
 800dbae:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800dbb2:	d901      	bls.n	800dbb8 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800dbb4:	2303      	movs	r3, #3
 800dbb6:	e007      	b.n	800dbc8 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	681b      	ldr	r3, [r3, #0]
 800dbbc:	68db      	ldr	r3, [r3, #12]
 800dbbe:	f003 0320 	and.w	r3, r3, #32
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	d0ee      	beq.n	800dba4 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800dbc6:	2300      	movs	r3, #0
}
 800dbc8:	4618      	mov	r0, r3
 800dbca:	3710      	adds	r7, #16
 800dbcc:	46bd      	mov	sp, r7
 800dbce:	bd80      	pop	{r7, pc}

0800dbd0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800dbd0:	b580      	push	{r7, lr}
 800dbd2:	b084      	sub	sp, #16
 800dbd4:	af00      	add	r7, sp, #0
 800dbd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	68db      	ldr	r3, [r3, #12]
 800dbde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	d119      	bne.n	800dc1a <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	681b      	ldr	r3, [r3, #0]
 800dbea:	f04f 32ff 	mov.w	r2, #4294967295
 800dbee:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800dbf0:	f7f9 fc9a 	bl	8007528 <HAL_GetTick>
 800dbf4:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800dbf6:	e009      	b.n	800dc0c <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800dbf8:	f7f9 fc96 	bl	8007528 <HAL_GetTick>
 800dbfc:	4602      	mov	r2, r0
 800dbfe:	68fb      	ldr	r3, [r7, #12]
 800dc00:	1ad3      	subs	r3, r2, r3
 800dc02:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800dc06:	d901      	bls.n	800dc0c <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 800dc08:	2303      	movs	r3, #3
 800dc0a:	e007      	b.n	800dc1c <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	68db      	ldr	r3, [r3, #12]
 800dc12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	d0ee      	beq.n	800dbf8 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 800dc1a:	2300      	movs	r3, #0
}
 800dc1c:	4618      	mov	r0, r3
 800dc1e:	3710      	adds	r7, #16
 800dc20:	46bd      	mov	sp, r7
 800dc22:	bd80      	pop	{r7, pc}

0800dc24 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800dc24:	b480      	push	{r7}
 800dc26:	b085      	sub	sp, #20
 800dc28:	af00      	add	r7, sp, #0
 800dc2a:	4603      	mov	r3, r0
 800dc2c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800dc2e:	2300      	movs	r3, #0
 800dc30:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 800dc32:	79fb      	ldrb	r3, [r7, #7]
 800dc34:	72fb      	strb	r3, [r7, #11]

  while (Param >= 10U)
 800dc36:	e005      	b.n	800dc44 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800dc38:	68fb      	ldr	r3, [r7, #12]
 800dc3a:	3301      	adds	r3, #1
 800dc3c:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 800dc3e:	7afb      	ldrb	r3, [r7, #11]
 800dc40:	3b0a      	subs	r3, #10
 800dc42:	72fb      	strb	r3, [r7, #11]
  while (Param >= 10U)
 800dc44:	7afb      	ldrb	r3, [r7, #11]
 800dc46:	2b09      	cmp	r3, #9
 800dc48:	d8f6      	bhi.n	800dc38 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 800dc4a:	68fb      	ldr	r3, [r7, #12]
 800dc4c:	b2db      	uxtb	r3, r3
 800dc4e:	011b      	lsls	r3, r3, #4
 800dc50:	b2da      	uxtb	r2, r3
 800dc52:	7afb      	ldrb	r3, [r7, #11]
 800dc54:	4313      	orrs	r3, r2
 800dc56:	b2db      	uxtb	r3, r3
}
 800dc58:	4618      	mov	r0, r3
 800dc5a:	3714      	adds	r7, #20
 800dc5c:	46bd      	mov	sp, r7
 800dc5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc62:	4770      	bx	lr

0800dc64 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 800dc64:	b580      	push	{r7, lr}
 800dc66:	b086      	sub	sp, #24
 800dc68:	af00      	add	r7, sp, #0
 800dc6a:	60f8      	str	r0, [r7, #12]
 800dc6c:	60b9      	str	r1, [r7, #8]
 800dc6e:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800dc70:	68fb      	ldr	r3, [r7, #12]
 800dc72:	f893 3020 	ldrb.w	r3, [r3, #32]
 800dc76:	2b01      	cmp	r3, #1
 800dc78:	d101      	bne.n	800dc7e <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 800dc7a:	2302      	movs	r3, #2
 800dc7c:	e0a8      	b.n	800ddd0 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 800dc7e:	68fb      	ldr	r3, [r7, #12]
 800dc80:	2201      	movs	r2, #1
 800dc82:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800dc86:	68fb      	ldr	r3, [r7, #12]
 800dc88:	2202      	movs	r2, #2
 800dc8a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800dc8e:	68fb      	ldr	r3, [r7, #12]
 800dc90:	681b      	ldr	r3, [r3, #0]
 800dc92:	22ca      	movs	r2, #202	@ 0xca
 800dc94:	625a      	str	r2, [r3, #36]	@ 0x24
 800dc96:	68fb      	ldr	r3, [r7, #12]
 800dc98:	681b      	ldr	r3, [r3, #0]
 800dc9a:	2253      	movs	r2, #83	@ 0x53
 800dc9c:	625a      	str	r2, [r3, #36]	@ 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 800dc9e:	68fb      	ldr	r3, [r7, #12]
 800dca0:	681b      	ldr	r3, [r3, #0]
 800dca2:	689b      	ldr	r3, [r3, #8]
 800dca4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	d020      	beq.n	800dcee <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 800dcac:	f7f9 fc3c 	bl	8007528 <HAL_GetTick>
 800dcb0:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 800dcb2:	e015      	b.n	800dce0 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800dcb4:	f7f9 fc38 	bl	8007528 <HAL_GetTick>
 800dcb8:	4602      	mov	r2, r0
 800dcba:	697b      	ldr	r3, [r7, #20]
 800dcbc:	1ad3      	subs	r3, r2, r3
 800dcbe:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800dcc2:	d90d      	bls.n	800dce0 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800dcc4:	68fb      	ldr	r3, [r7, #12]
 800dcc6:	681b      	ldr	r3, [r3, #0]
 800dcc8:	22ff      	movs	r2, #255	@ 0xff
 800dcca:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800dccc:	68fb      	ldr	r3, [r7, #12]
 800dcce:	2203      	movs	r2, #3
 800dcd0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800dcd4:	68fb      	ldr	r3, [r7, #12]
 800dcd6:	2200      	movs	r2, #0
 800dcd8:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 800dcdc:	2303      	movs	r3, #3
 800dcde:	e077      	b.n	800ddd0 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 800dce0:	68fb      	ldr	r3, [r7, #12]
 800dce2:	681b      	ldr	r3, [r3, #0]
 800dce4:	68db      	ldr	r3, [r3, #12]
 800dce6:	f003 0304 	and.w	r3, r3, #4
 800dcea:	2b00      	cmp	r3, #0
 800dcec:	d1e2      	bne.n	800dcb4 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800dcee:	68fb      	ldr	r3, [r7, #12]
 800dcf0:	681b      	ldr	r3, [r3, #0]
 800dcf2:	689a      	ldr	r2, [r3, #8]
 800dcf4:	68fb      	ldr	r3, [r7, #12]
 800dcf6:	681b      	ldr	r3, [r3, #0]
 800dcf8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800dcfc:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800dcfe:	68fb      	ldr	r3, [r7, #12]
 800dd00:	681b      	ldr	r3, [r3, #0]
 800dd02:	68db      	ldr	r3, [r3, #12]
 800dd04:	b2da      	uxtb	r2, r3
 800dd06:	68fb      	ldr	r3, [r7, #12]
 800dd08:	681b      	ldr	r3, [r3, #0]
 800dd0a:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 800dd0e:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800dd10:	f7f9 fc0a 	bl	8007528 <HAL_GetTick>
 800dd14:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800dd16:	e015      	b.n	800dd44 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800dd18:	f7f9 fc06 	bl	8007528 <HAL_GetTick>
 800dd1c:	4602      	mov	r2, r0
 800dd1e:	697b      	ldr	r3, [r7, #20]
 800dd20:	1ad3      	subs	r3, r2, r3
 800dd22:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800dd26:	d90d      	bls.n	800dd44 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800dd28:	68fb      	ldr	r3, [r7, #12]
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	22ff      	movs	r2, #255	@ 0xff
 800dd2e:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800dd30:	68fb      	ldr	r3, [r7, #12]
 800dd32:	2203      	movs	r2, #3
 800dd34:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800dd38:	68fb      	ldr	r3, [r7, #12]
 800dd3a:	2200      	movs	r2, #0
 800dd3c:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 800dd40:	2303      	movs	r3, #3
 800dd42:	e045      	b.n	800ddd0 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800dd44:	68fb      	ldr	r3, [r7, #12]
 800dd46:	681b      	ldr	r3, [r3, #0]
 800dd48:	68db      	ldr	r3, [r3, #12]
 800dd4a:	f003 0304 	and.w	r3, r3, #4
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	d0e2      	beq.n	800dd18 <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800dd52:	68fb      	ldr	r3, [r7, #12]
 800dd54:	681b      	ldr	r3, [r3, #0]
 800dd56:	68ba      	ldr	r2, [r7, #8]
 800dd58:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	681b      	ldr	r3, [r3, #0]
 800dd5e:	689a      	ldr	r2, [r3, #8]
 800dd60:	68fb      	ldr	r3, [r7, #12]
 800dd62:	681b      	ldr	r3, [r3, #0]
 800dd64:	f022 0207 	bic.w	r2, r2, #7
 800dd68:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800dd6a:	68fb      	ldr	r3, [r7, #12]
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	6899      	ldr	r1, [r3, #8]
 800dd70:	68fb      	ldr	r3, [r7, #12]
 800dd72:	681b      	ldr	r3, [r3, #0]
 800dd74:	687a      	ldr	r2, [r7, #4]
 800dd76:	430a      	orrs	r2, r1
 800dd78:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800dd7a:	4b17      	ldr	r3, [pc, #92]	@ (800ddd8 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800dd7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800dd80:	4a15      	ldr	r2, [pc, #84]	@ (800ddd8 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800dd82:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800dd86:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 800dd8a:	4b13      	ldr	r3, [pc, #76]	@ (800ddd8 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800dd8c:	681b      	ldr	r3, [r3, #0]
 800dd8e:	4a12      	ldr	r2, [pc, #72]	@ (800ddd8 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800dd90:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800dd94:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 800dd96:	68fb      	ldr	r3, [r7, #12]
 800dd98:	681b      	ldr	r3, [r3, #0]
 800dd9a:	689a      	ldr	r2, [r3, #8]
 800dd9c:	68fb      	ldr	r3, [r7, #12]
 800dd9e:	681b      	ldr	r3, [r3, #0]
 800dda0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800dda4:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800dda6:	68fb      	ldr	r3, [r7, #12]
 800dda8:	681b      	ldr	r3, [r3, #0]
 800ddaa:	689a      	ldr	r2, [r3, #8]
 800ddac:	68fb      	ldr	r3, [r7, #12]
 800ddae:	681b      	ldr	r3, [r3, #0]
 800ddb0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800ddb4:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ddb6:	68fb      	ldr	r3, [r7, #12]
 800ddb8:	681b      	ldr	r3, [r3, #0]
 800ddba:	22ff      	movs	r2, #255	@ 0xff
 800ddbc:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800ddbe:	68fb      	ldr	r3, [r7, #12]
 800ddc0:	2201      	movs	r2, #1
 800ddc2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800ddc6:	68fb      	ldr	r3, [r7, #12]
 800ddc8:	2200      	movs	r2, #0
 800ddca:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800ddce:	2300      	movs	r3, #0
}
 800ddd0:	4618      	mov	r0, r3
 800ddd2:	3718      	adds	r7, #24
 800ddd4:	46bd      	mov	sp, r7
 800ddd6:	bd80      	pop	{r7, pc}
 800ddd8:	58000800 	.word	0x58000800

0800dddc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800dddc:	b580      	push	{r7, lr}
 800ddde:	b084      	sub	sp, #16
 800dde0:	af00      	add	r7, sp, #0
 800dde2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	d101      	bne.n	800ddee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800ddea:	2301      	movs	r3, #1
 800ddec:	e095      	b.n	800df1a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ddf2:	2b00      	cmp	r3, #0
 800ddf4:	d108      	bne.n	800de08 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	685b      	ldr	r3, [r3, #4]
 800ddfa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800ddfe:	d009      	beq.n	800de14 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	2200      	movs	r2, #0
 800de04:	61da      	str	r2, [r3, #28]
 800de06:	e005      	b.n	800de14 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	2200      	movs	r2, #0
 800de0c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	2200      	movs	r2, #0
 800de12:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	2200      	movs	r2, #0
 800de18:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800de20:	b2db      	uxtb	r3, r3
 800de22:	2b00      	cmp	r3, #0
 800de24:	d106      	bne.n	800de34 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	2200      	movs	r2, #0
 800de2a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800de2e:	6878      	ldr	r0, [r7, #4]
 800de30:	f7f5 fe0e 	bl	8003a50 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	2202      	movs	r2, #2
 800de38:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	681b      	ldr	r3, [r3, #0]
 800de40:	681a      	ldr	r2, [r3, #0]
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	681b      	ldr	r3, [r3, #0]
 800de46:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800de4a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	68db      	ldr	r3, [r3, #12]
 800de50:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800de54:	d902      	bls.n	800de5c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800de56:	2300      	movs	r3, #0
 800de58:	60fb      	str	r3, [r7, #12]
 800de5a:	e002      	b.n	800de62 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800de5c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800de60:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	68db      	ldr	r3, [r3, #12]
 800de66:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800de6a:	d007      	beq.n	800de7c <HAL_SPI_Init+0xa0>
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	68db      	ldr	r3, [r3, #12]
 800de70:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800de74:	d002      	beq.n	800de7c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	2200      	movs	r2, #0
 800de7a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	685b      	ldr	r3, [r3, #4]
 800de80:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	689b      	ldr	r3, [r3, #8]
 800de88:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800de8c:	431a      	orrs	r2, r3
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	691b      	ldr	r3, [r3, #16]
 800de92:	f003 0302 	and.w	r3, r3, #2
 800de96:	431a      	orrs	r2, r3
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	695b      	ldr	r3, [r3, #20]
 800de9c:	f003 0301 	and.w	r3, r3, #1
 800dea0:	431a      	orrs	r2, r3
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	699b      	ldr	r3, [r3, #24]
 800dea6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800deaa:	431a      	orrs	r2, r3
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	69db      	ldr	r3, [r3, #28]
 800deb0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800deb4:	431a      	orrs	r2, r3
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	6a1b      	ldr	r3, [r3, #32]
 800deba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800debe:	ea42 0103 	orr.w	r1, r2, r3
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dec6:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	681b      	ldr	r3, [r3, #0]
 800dece:	430a      	orrs	r2, r1
 800ded0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	699b      	ldr	r3, [r3, #24]
 800ded6:	0c1b      	lsrs	r3, r3, #16
 800ded8:	f003 0204 	and.w	r2, r3, #4
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dee0:	f003 0310 	and.w	r3, r3, #16
 800dee4:	431a      	orrs	r2, r3
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800deea:	f003 0308 	and.w	r3, r3, #8
 800deee:	431a      	orrs	r2, r3
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	68db      	ldr	r3, [r3, #12]
 800def4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800def8:	ea42 0103 	orr.w	r1, r2, r3
 800defc:	68fb      	ldr	r3, [r7, #12]
 800defe:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	681b      	ldr	r3, [r3, #0]
 800df06:	430a      	orrs	r2, r1
 800df08:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	2200      	movs	r2, #0
 800df0e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	2201      	movs	r2, #1
 800df14:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800df18:	2300      	movs	r3, #0
}
 800df1a:	4618      	mov	r0, r3
 800df1c:	3710      	adds	r7, #16
 800df1e:	46bd      	mov	sp, r7
 800df20:	bd80      	pop	{r7, pc}

0800df22 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800df22:	b580      	push	{r7, lr}
 800df24:	b088      	sub	sp, #32
 800df26:	af00      	add	r7, sp, #0
 800df28:	60f8      	str	r0, [r7, #12]
 800df2a:	60b9      	str	r1, [r7, #8]
 800df2c:	603b      	str	r3, [r7, #0]
 800df2e:	4613      	mov	r3, r2
 800df30:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800df32:	f7f9 faf9 	bl	8007528 <HAL_GetTick>
 800df36:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800df38:	88fb      	ldrh	r3, [r7, #6]
 800df3a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800df3c:	68fb      	ldr	r3, [r7, #12]
 800df3e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800df42:	b2db      	uxtb	r3, r3
 800df44:	2b01      	cmp	r3, #1
 800df46:	d001      	beq.n	800df4c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800df48:	2302      	movs	r3, #2
 800df4a:	e15c      	b.n	800e206 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 800df4c:	68bb      	ldr	r3, [r7, #8]
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d002      	beq.n	800df58 <HAL_SPI_Transmit+0x36>
 800df52:	88fb      	ldrh	r3, [r7, #6]
 800df54:	2b00      	cmp	r3, #0
 800df56:	d101      	bne.n	800df5c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800df58:	2301      	movs	r3, #1
 800df5a:	e154      	b.n	800e206 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800df5c:	68fb      	ldr	r3, [r7, #12]
 800df5e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800df62:	2b01      	cmp	r3, #1
 800df64:	d101      	bne.n	800df6a <HAL_SPI_Transmit+0x48>
 800df66:	2302      	movs	r3, #2
 800df68:	e14d      	b.n	800e206 <HAL_SPI_Transmit+0x2e4>
 800df6a:	68fb      	ldr	r3, [r7, #12]
 800df6c:	2201      	movs	r2, #1
 800df6e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800df72:	68fb      	ldr	r3, [r7, #12]
 800df74:	2203      	movs	r2, #3
 800df76:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800df7a:	68fb      	ldr	r3, [r7, #12]
 800df7c:	2200      	movs	r2, #0
 800df7e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800df80:	68fb      	ldr	r3, [r7, #12]
 800df82:	68ba      	ldr	r2, [r7, #8]
 800df84:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800df86:	68fb      	ldr	r3, [r7, #12]
 800df88:	88fa      	ldrh	r2, [r7, #6]
 800df8a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800df8c:	68fb      	ldr	r3, [r7, #12]
 800df8e:	88fa      	ldrh	r2, [r7, #6]
 800df90:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800df92:	68fb      	ldr	r3, [r7, #12]
 800df94:	2200      	movs	r2, #0
 800df96:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800df98:	68fb      	ldr	r3, [r7, #12]
 800df9a:	2200      	movs	r2, #0
 800df9c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800dfa0:	68fb      	ldr	r3, [r7, #12]
 800dfa2:	2200      	movs	r2, #0
 800dfa4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 800dfa8:	68fb      	ldr	r3, [r7, #12]
 800dfaa:	2200      	movs	r2, #0
 800dfac:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800dfae:	68fb      	ldr	r3, [r7, #12]
 800dfb0:	2200      	movs	r2, #0
 800dfb2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800dfb4:	68fb      	ldr	r3, [r7, #12]
 800dfb6:	689b      	ldr	r3, [r3, #8]
 800dfb8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800dfbc:	d10f      	bne.n	800dfde <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800dfbe:	68fb      	ldr	r3, [r7, #12]
 800dfc0:	681b      	ldr	r3, [r3, #0]
 800dfc2:	681a      	ldr	r2, [r3, #0]
 800dfc4:	68fb      	ldr	r3, [r7, #12]
 800dfc6:	681b      	ldr	r3, [r3, #0]
 800dfc8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800dfcc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800dfce:	68fb      	ldr	r3, [r7, #12]
 800dfd0:	681b      	ldr	r3, [r3, #0]
 800dfd2:	681a      	ldr	r2, [r3, #0]
 800dfd4:	68fb      	ldr	r3, [r7, #12]
 800dfd6:	681b      	ldr	r3, [r3, #0]
 800dfd8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800dfdc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800dfde:	68fb      	ldr	r3, [r7, #12]
 800dfe0:	681b      	ldr	r3, [r3, #0]
 800dfe2:	681b      	ldr	r3, [r3, #0]
 800dfe4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dfe8:	2b40      	cmp	r3, #64	@ 0x40
 800dfea:	d007      	beq.n	800dffc <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800dfec:	68fb      	ldr	r3, [r7, #12]
 800dfee:	681b      	ldr	r3, [r3, #0]
 800dff0:	681a      	ldr	r2, [r3, #0]
 800dff2:	68fb      	ldr	r3, [r7, #12]
 800dff4:	681b      	ldr	r3, [r3, #0]
 800dff6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800dffa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800dffc:	68fb      	ldr	r3, [r7, #12]
 800dffe:	68db      	ldr	r3, [r3, #12]
 800e000:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800e004:	d952      	bls.n	800e0ac <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e006:	68fb      	ldr	r3, [r7, #12]
 800e008:	685b      	ldr	r3, [r3, #4]
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d002      	beq.n	800e014 <HAL_SPI_Transmit+0xf2>
 800e00e:	8b7b      	ldrh	r3, [r7, #26]
 800e010:	2b01      	cmp	r3, #1
 800e012:	d145      	bne.n	800e0a0 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800e014:	68fb      	ldr	r3, [r7, #12]
 800e016:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e018:	881a      	ldrh	r2, [r3, #0]
 800e01a:	68fb      	ldr	r3, [r7, #12]
 800e01c:	681b      	ldr	r3, [r3, #0]
 800e01e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800e020:	68fb      	ldr	r3, [r7, #12]
 800e022:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e024:	1c9a      	adds	r2, r3, #2
 800e026:	68fb      	ldr	r3, [r7, #12]
 800e028:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800e02a:	68fb      	ldr	r3, [r7, #12]
 800e02c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e02e:	b29b      	uxth	r3, r3
 800e030:	3b01      	subs	r3, #1
 800e032:	b29a      	uxth	r2, r3
 800e034:	68fb      	ldr	r3, [r7, #12]
 800e036:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800e038:	e032      	b.n	800e0a0 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800e03a:	68fb      	ldr	r3, [r7, #12]
 800e03c:	681b      	ldr	r3, [r3, #0]
 800e03e:	689b      	ldr	r3, [r3, #8]
 800e040:	f003 0302 	and.w	r3, r3, #2
 800e044:	2b02      	cmp	r3, #2
 800e046:	d112      	bne.n	800e06e <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800e048:	68fb      	ldr	r3, [r7, #12]
 800e04a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e04c:	881a      	ldrh	r2, [r3, #0]
 800e04e:	68fb      	ldr	r3, [r7, #12]
 800e050:	681b      	ldr	r3, [r3, #0]
 800e052:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800e054:	68fb      	ldr	r3, [r7, #12]
 800e056:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e058:	1c9a      	adds	r2, r3, #2
 800e05a:	68fb      	ldr	r3, [r7, #12]
 800e05c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800e05e:	68fb      	ldr	r3, [r7, #12]
 800e060:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e062:	b29b      	uxth	r3, r3
 800e064:	3b01      	subs	r3, #1
 800e066:	b29a      	uxth	r2, r3
 800e068:	68fb      	ldr	r3, [r7, #12]
 800e06a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800e06c:	e018      	b.n	800e0a0 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e06e:	f7f9 fa5b 	bl	8007528 <HAL_GetTick>
 800e072:	4602      	mov	r2, r0
 800e074:	69fb      	ldr	r3, [r7, #28]
 800e076:	1ad3      	subs	r3, r2, r3
 800e078:	683a      	ldr	r2, [r7, #0]
 800e07a:	429a      	cmp	r2, r3
 800e07c:	d803      	bhi.n	800e086 <HAL_SPI_Transmit+0x164>
 800e07e:	683b      	ldr	r3, [r7, #0]
 800e080:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e084:	d102      	bne.n	800e08c <HAL_SPI_Transmit+0x16a>
 800e086:	683b      	ldr	r3, [r7, #0]
 800e088:	2b00      	cmp	r3, #0
 800e08a:	d109      	bne.n	800e0a0 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800e08c:	68fb      	ldr	r3, [r7, #12]
 800e08e:	2201      	movs	r2, #1
 800e090:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800e094:	68fb      	ldr	r3, [r7, #12]
 800e096:	2200      	movs	r2, #0
 800e098:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800e09c:	2303      	movs	r3, #3
 800e09e:	e0b2      	b.n	800e206 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800e0a0:	68fb      	ldr	r3, [r7, #12]
 800e0a2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e0a4:	b29b      	uxth	r3, r3
 800e0a6:	2b00      	cmp	r3, #0
 800e0a8:	d1c7      	bne.n	800e03a <HAL_SPI_Transmit+0x118>
 800e0aa:	e083      	b.n	800e1b4 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e0ac:	68fb      	ldr	r3, [r7, #12]
 800e0ae:	685b      	ldr	r3, [r3, #4]
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	d002      	beq.n	800e0ba <HAL_SPI_Transmit+0x198>
 800e0b4:	8b7b      	ldrh	r3, [r7, #26]
 800e0b6:	2b01      	cmp	r3, #1
 800e0b8:	d177      	bne.n	800e1aa <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 800e0ba:	68fb      	ldr	r3, [r7, #12]
 800e0bc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e0be:	b29b      	uxth	r3, r3
 800e0c0:	2b01      	cmp	r3, #1
 800e0c2:	d912      	bls.n	800e0ea <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800e0c4:	68fb      	ldr	r3, [r7, #12]
 800e0c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e0c8:	881a      	ldrh	r2, [r3, #0]
 800e0ca:	68fb      	ldr	r3, [r7, #12]
 800e0cc:	681b      	ldr	r3, [r3, #0]
 800e0ce:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800e0d0:	68fb      	ldr	r3, [r7, #12]
 800e0d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e0d4:	1c9a      	adds	r2, r3, #2
 800e0d6:	68fb      	ldr	r3, [r7, #12]
 800e0d8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800e0da:	68fb      	ldr	r3, [r7, #12]
 800e0dc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e0de:	b29b      	uxth	r3, r3
 800e0e0:	3b02      	subs	r3, #2
 800e0e2:	b29a      	uxth	r2, r3
 800e0e4:	68fb      	ldr	r3, [r7, #12]
 800e0e6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800e0e8:	e05f      	b.n	800e1aa <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800e0ea:	68fb      	ldr	r3, [r7, #12]
 800e0ec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e0ee:	68fb      	ldr	r3, [r7, #12]
 800e0f0:	681b      	ldr	r3, [r3, #0]
 800e0f2:	330c      	adds	r3, #12
 800e0f4:	7812      	ldrb	r2, [r2, #0]
 800e0f6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800e0f8:	68fb      	ldr	r3, [r7, #12]
 800e0fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e0fc:	1c5a      	adds	r2, r3, #1
 800e0fe:	68fb      	ldr	r3, [r7, #12]
 800e100:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800e102:	68fb      	ldr	r3, [r7, #12]
 800e104:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e106:	b29b      	uxth	r3, r3
 800e108:	3b01      	subs	r3, #1
 800e10a:	b29a      	uxth	r2, r3
 800e10c:	68fb      	ldr	r3, [r7, #12]
 800e10e:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800e110:	e04b      	b.n	800e1aa <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800e112:	68fb      	ldr	r3, [r7, #12]
 800e114:	681b      	ldr	r3, [r3, #0]
 800e116:	689b      	ldr	r3, [r3, #8]
 800e118:	f003 0302 	and.w	r3, r3, #2
 800e11c:	2b02      	cmp	r3, #2
 800e11e:	d12b      	bne.n	800e178 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 800e120:	68fb      	ldr	r3, [r7, #12]
 800e122:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e124:	b29b      	uxth	r3, r3
 800e126:	2b01      	cmp	r3, #1
 800e128:	d912      	bls.n	800e150 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800e12a:	68fb      	ldr	r3, [r7, #12]
 800e12c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e12e:	881a      	ldrh	r2, [r3, #0]
 800e130:	68fb      	ldr	r3, [r7, #12]
 800e132:	681b      	ldr	r3, [r3, #0]
 800e134:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800e136:	68fb      	ldr	r3, [r7, #12]
 800e138:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e13a:	1c9a      	adds	r2, r3, #2
 800e13c:	68fb      	ldr	r3, [r7, #12]
 800e13e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800e140:	68fb      	ldr	r3, [r7, #12]
 800e142:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e144:	b29b      	uxth	r3, r3
 800e146:	3b02      	subs	r3, #2
 800e148:	b29a      	uxth	r2, r3
 800e14a:	68fb      	ldr	r3, [r7, #12]
 800e14c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800e14e:	e02c      	b.n	800e1aa <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800e150:	68fb      	ldr	r3, [r7, #12]
 800e152:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e154:	68fb      	ldr	r3, [r7, #12]
 800e156:	681b      	ldr	r3, [r3, #0]
 800e158:	330c      	adds	r3, #12
 800e15a:	7812      	ldrb	r2, [r2, #0]
 800e15c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800e15e:	68fb      	ldr	r3, [r7, #12]
 800e160:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e162:	1c5a      	adds	r2, r3, #1
 800e164:	68fb      	ldr	r3, [r7, #12]
 800e166:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800e168:	68fb      	ldr	r3, [r7, #12]
 800e16a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e16c:	b29b      	uxth	r3, r3
 800e16e:	3b01      	subs	r3, #1
 800e170:	b29a      	uxth	r2, r3
 800e172:	68fb      	ldr	r3, [r7, #12]
 800e174:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800e176:	e018      	b.n	800e1aa <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e178:	f7f9 f9d6 	bl	8007528 <HAL_GetTick>
 800e17c:	4602      	mov	r2, r0
 800e17e:	69fb      	ldr	r3, [r7, #28]
 800e180:	1ad3      	subs	r3, r2, r3
 800e182:	683a      	ldr	r2, [r7, #0]
 800e184:	429a      	cmp	r2, r3
 800e186:	d803      	bhi.n	800e190 <HAL_SPI_Transmit+0x26e>
 800e188:	683b      	ldr	r3, [r7, #0]
 800e18a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e18e:	d102      	bne.n	800e196 <HAL_SPI_Transmit+0x274>
 800e190:	683b      	ldr	r3, [r7, #0]
 800e192:	2b00      	cmp	r3, #0
 800e194:	d109      	bne.n	800e1aa <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800e196:	68fb      	ldr	r3, [r7, #12]
 800e198:	2201      	movs	r2, #1
 800e19a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800e19e:	68fb      	ldr	r3, [r7, #12]
 800e1a0:	2200      	movs	r2, #0
 800e1a2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800e1a6:	2303      	movs	r3, #3
 800e1a8:	e02d      	b.n	800e206 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800e1aa:	68fb      	ldr	r3, [r7, #12]
 800e1ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e1ae:	b29b      	uxth	r3, r3
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	d1ae      	bne.n	800e112 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800e1b4:	69fa      	ldr	r2, [r7, #28]
 800e1b6:	6839      	ldr	r1, [r7, #0]
 800e1b8:	68f8      	ldr	r0, [r7, #12]
 800e1ba:	f000 fe09 	bl	800edd0 <SPI_EndRxTxTransaction>
 800e1be:	4603      	mov	r3, r0
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	d002      	beq.n	800e1ca <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e1c4:	68fb      	ldr	r3, [r7, #12]
 800e1c6:	2220      	movs	r2, #32
 800e1c8:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800e1ca:	68fb      	ldr	r3, [r7, #12]
 800e1cc:	689b      	ldr	r3, [r3, #8]
 800e1ce:	2b00      	cmp	r3, #0
 800e1d0:	d10a      	bne.n	800e1e8 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e1d2:	2300      	movs	r3, #0
 800e1d4:	617b      	str	r3, [r7, #20]
 800e1d6:	68fb      	ldr	r3, [r7, #12]
 800e1d8:	681b      	ldr	r3, [r3, #0]
 800e1da:	68db      	ldr	r3, [r3, #12]
 800e1dc:	617b      	str	r3, [r7, #20]
 800e1de:	68fb      	ldr	r3, [r7, #12]
 800e1e0:	681b      	ldr	r3, [r3, #0]
 800e1e2:	689b      	ldr	r3, [r3, #8]
 800e1e4:	617b      	str	r3, [r7, #20]
 800e1e6:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800e1e8:	68fb      	ldr	r3, [r7, #12]
 800e1ea:	2201      	movs	r2, #1
 800e1ec:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800e1f0:	68fb      	ldr	r3, [r7, #12]
 800e1f2:	2200      	movs	r2, #0
 800e1f4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e1f8:	68fb      	ldr	r3, [r7, #12]
 800e1fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e1fc:	2b00      	cmp	r3, #0
 800e1fe:	d001      	beq.n	800e204 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 800e200:	2301      	movs	r3, #1
 800e202:	e000      	b.n	800e206 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 800e204:	2300      	movs	r3, #0
  }
}
 800e206:	4618      	mov	r0, r3
 800e208:	3720      	adds	r7, #32
 800e20a:	46bd      	mov	sp, r7
 800e20c:	bd80      	pop	{r7, pc}

0800e20e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e20e:	b580      	push	{r7, lr}
 800e210:	b088      	sub	sp, #32
 800e212:	af02      	add	r7, sp, #8
 800e214:	60f8      	str	r0, [r7, #12]
 800e216:	60b9      	str	r1, [r7, #8]
 800e218:	603b      	str	r3, [r7, #0]
 800e21a:	4613      	mov	r3, r2
 800e21c:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 800e21e:	68fb      	ldr	r3, [r7, #12]
 800e220:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800e224:	b2db      	uxtb	r3, r3
 800e226:	2b01      	cmp	r3, #1
 800e228:	d001      	beq.n	800e22e <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 800e22a:	2302      	movs	r3, #2
 800e22c:	e123      	b.n	800e476 <HAL_SPI_Receive+0x268>
  }

  if ((pData == NULL) || (Size == 0U))
 800e22e:	68bb      	ldr	r3, [r7, #8]
 800e230:	2b00      	cmp	r3, #0
 800e232:	d002      	beq.n	800e23a <HAL_SPI_Receive+0x2c>
 800e234:	88fb      	ldrh	r3, [r7, #6]
 800e236:	2b00      	cmp	r3, #0
 800e238:	d101      	bne.n	800e23e <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 800e23a:	2301      	movs	r3, #1
 800e23c:	e11b      	b.n	800e476 <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800e23e:	68fb      	ldr	r3, [r7, #12]
 800e240:	685b      	ldr	r3, [r3, #4]
 800e242:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800e246:	d112      	bne.n	800e26e <HAL_SPI_Receive+0x60>
 800e248:	68fb      	ldr	r3, [r7, #12]
 800e24a:	689b      	ldr	r3, [r3, #8]
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	d10e      	bne.n	800e26e <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800e250:	68fb      	ldr	r3, [r7, #12]
 800e252:	2204      	movs	r2, #4
 800e254:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800e258:	88fa      	ldrh	r2, [r7, #6]
 800e25a:	683b      	ldr	r3, [r7, #0]
 800e25c:	9300      	str	r3, [sp, #0]
 800e25e:	4613      	mov	r3, r2
 800e260:	68ba      	ldr	r2, [r7, #8]
 800e262:	68b9      	ldr	r1, [r7, #8]
 800e264:	68f8      	ldr	r0, [r7, #12]
 800e266:	f000 f90a 	bl	800e47e <HAL_SPI_TransmitReceive>
 800e26a:	4603      	mov	r3, r0
 800e26c:	e103      	b.n	800e476 <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e26e:	f7f9 f95b 	bl	8007528 <HAL_GetTick>
 800e272:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e274:	68fb      	ldr	r3, [r7, #12]
 800e276:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800e27a:	2b01      	cmp	r3, #1
 800e27c:	d101      	bne.n	800e282 <HAL_SPI_Receive+0x74>
 800e27e:	2302      	movs	r3, #2
 800e280:	e0f9      	b.n	800e476 <HAL_SPI_Receive+0x268>
 800e282:	68fb      	ldr	r3, [r7, #12]
 800e284:	2201      	movs	r2, #1
 800e286:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800e28a:	68fb      	ldr	r3, [r7, #12]
 800e28c:	2204      	movs	r2, #4
 800e28e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e292:	68fb      	ldr	r3, [r7, #12]
 800e294:	2200      	movs	r2, #0
 800e296:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800e298:	68fb      	ldr	r3, [r7, #12]
 800e29a:	68ba      	ldr	r2, [r7, #8]
 800e29c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 800e29e:	68fb      	ldr	r3, [r7, #12]
 800e2a0:	88fa      	ldrh	r2, [r7, #6]
 800e2a2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 800e2a6:	68fb      	ldr	r3, [r7, #12]
 800e2a8:	88fa      	ldrh	r2, [r7, #6]
 800e2aa:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800e2ae:	68fb      	ldr	r3, [r7, #12]
 800e2b0:	2200      	movs	r2, #0
 800e2b2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 800e2b4:	68fb      	ldr	r3, [r7, #12]
 800e2b6:	2200      	movs	r2, #0
 800e2b8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 800e2ba:	68fb      	ldr	r3, [r7, #12]
 800e2bc:	2200      	movs	r2, #0
 800e2be:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 800e2c0:	68fb      	ldr	r3, [r7, #12]
 800e2c2:	2200      	movs	r2, #0
 800e2c4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800e2c6:	68fb      	ldr	r3, [r7, #12]
 800e2c8:	2200      	movs	r2, #0
 800e2ca:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e2cc:	68fb      	ldr	r3, [r7, #12]
 800e2ce:	68db      	ldr	r3, [r3, #12]
 800e2d0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800e2d4:	d908      	bls.n	800e2e8 <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800e2d6:	68fb      	ldr	r3, [r7, #12]
 800e2d8:	681b      	ldr	r3, [r3, #0]
 800e2da:	685a      	ldr	r2, [r3, #4]
 800e2dc:	68fb      	ldr	r3, [r7, #12]
 800e2de:	681b      	ldr	r3, [r3, #0]
 800e2e0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800e2e4:	605a      	str	r2, [r3, #4]
 800e2e6:	e007      	b.n	800e2f8 <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800e2e8:	68fb      	ldr	r3, [r7, #12]
 800e2ea:	681b      	ldr	r3, [r3, #0]
 800e2ec:	685a      	ldr	r2, [r3, #4]
 800e2ee:	68fb      	ldr	r3, [r7, #12]
 800e2f0:	681b      	ldr	r3, [r3, #0]
 800e2f2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800e2f6:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e2f8:	68fb      	ldr	r3, [r7, #12]
 800e2fa:	689b      	ldr	r3, [r3, #8]
 800e2fc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e300:	d10f      	bne.n	800e322 <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800e302:	68fb      	ldr	r3, [r7, #12]
 800e304:	681b      	ldr	r3, [r3, #0]
 800e306:	681a      	ldr	r2, [r3, #0]
 800e308:	68fb      	ldr	r3, [r7, #12]
 800e30a:	681b      	ldr	r3, [r3, #0]
 800e30c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800e310:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800e312:	68fb      	ldr	r3, [r7, #12]
 800e314:	681b      	ldr	r3, [r3, #0]
 800e316:	681a      	ldr	r2, [r3, #0]
 800e318:	68fb      	ldr	r3, [r7, #12]
 800e31a:	681b      	ldr	r3, [r3, #0]
 800e31c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800e320:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e322:	68fb      	ldr	r3, [r7, #12]
 800e324:	681b      	ldr	r3, [r3, #0]
 800e326:	681b      	ldr	r3, [r3, #0]
 800e328:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e32c:	2b40      	cmp	r3, #64	@ 0x40
 800e32e:	d007      	beq.n	800e340 <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e330:	68fb      	ldr	r3, [r7, #12]
 800e332:	681b      	ldr	r3, [r3, #0]
 800e334:	681a      	ldr	r2, [r3, #0]
 800e336:	68fb      	ldr	r3, [r7, #12]
 800e338:	681b      	ldr	r3, [r3, #0]
 800e33a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e33e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800e340:	68fb      	ldr	r3, [r7, #12]
 800e342:	68db      	ldr	r3, [r3, #12]
 800e344:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800e348:	d875      	bhi.n	800e436 <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800e34a:	e037      	b.n	800e3bc <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800e34c:	68fb      	ldr	r3, [r7, #12]
 800e34e:	681b      	ldr	r3, [r3, #0]
 800e350:	689b      	ldr	r3, [r3, #8]
 800e352:	f003 0301 	and.w	r3, r3, #1
 800e356:	2b01      	cmp	r3, #1
 800e358:	d117      	bne.n	800e38a <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800e35a:	68fb      	ldr	r3, [r7, #12]
 800e35c:	681b      	ldr	r3, [r3, #0]
 800e35e:	f103 020c 	add.w	r2, r3, #12
 800e362:	68fb      	ldr	r3, [r7, #12]
 800e364:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e366:	7812      	ldrb	r2, [r2, #0]
 800e368:	b2d2      	uxtb	r2, r2
 800e36a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e36c:	68fb      	ldr	r3, [r7, #12]
 800e36e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e370:	1c5a      	adds	r2, r3, #1
 800e372:	68fb      	ldr	r3, [r7, #12]
 800e374:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800e376:	68fb      	ldr	r3, [r7, #12]
 800e378:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800e37c:	b29b      	uxth	r3, r3
 800e37e:	3b01      	subs	r3, #1
 800e380:	b29a      	uxth	r2, r3
 800e382:	68fb      	ldr	r3, [r7, #12]
 800e384:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800e388:	e018      	b.n	800e3bc <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e38a:	f7f9 f8cd 	bl	8007528 <HAL_GetTick>
 800e38e:	4602      	mov	r2, r0
 800e390:	697b      	ldr	r3, [r7, #20]
 800e392:	1ad3      	subs	r3, r2, r3
 800e394:	683a      	ldr	r2, [r7, #0]
 800e396:	429a      	cmp	r2, r3
 800e398:	d803      	bhi.n	800e3a2 <HAL_SPI_Receive+0x194>
 800e39a:	683b      	ldr	r3, [r7, #0]
 800e39c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e3a0:	d102      	bne.n	800e3a8 <HAL_SPI_Receive+0x19a>
 800e3a2:	683b      	ldr	r3, [r7, #0]
 800e3a4:	2b00      	cmp	r3, #0
 800e3a6:	d109      	bne.n	800e3bc <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800e3a8:	68fb      	ldr	r3, [r7, #12]
 800e3aa:	2201      	movs	r2, #1
 800e3ac:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800e3b0:	68fb      	ldr	r3, [r7, #12]
 800e3b2:	2200      	movs	r2, #0
 800e3b4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800e3b8:	2303      	movs	r3, #3
 800e3ba:	e05c      	b.n	800e476 <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 800e3bc:	68fb      	ldr	r3, [r7, #12]
 800e3be:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800e3c2:	b29b      	uxth	r3, r3
 800e3c4:	2b00      	cmp	r3, #0
 800e3c6:	d1c1      	bne.n	800e34c <HAL_SPI_Receive+0x13e>
 800e3c8:	e03b      	b.n	800e442 <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800e3ca:	68fb      	ldr	r3, [r7, #12]
 800e3cc:	681b      	ldr	r3, [r3, #0]
 800e3ce:	689b      	ldr	r3, [r3, #8]
 800e3d0:	f003 0301 	and.w	r3, r3, #1
 800e3d4:	2b01      	cmp	r3, #1
 800e3d6:	d115      	bne.n	800e404 <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800e3d8:	68fb      	ldr	r3, [r7, #12]
 800e3da:	681b      	ldr	r3, [r3, #0]
 800e3dc:	68da      	ldr	r2, [r3, #12]
 800e3de:	68fb      	ldr	r3, [r7, #12]
 800e3e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e3e2:	b292      	uxth	r2, r2
 800e3e4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e3e6:	68fb      	ldr	r3, [r7, #12]
 800e3e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e3ea:	1c9a      	adds	r2, r3, #2
 800e3ec:	68fb      	ldr	r3, [r7, #12]
 800e3ee:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800e3f0:	68fb      	ldr	r3, [r7, #12]
 800e3f2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800e3f6:	b29b      	uxth	r3, r3
 800e3f8:	3b01      	subs	r3, #1
 800e3fa:	b29a      	uxth	r2, r3
 800e3fc:	68fb      	ldr	r3, [r7, #12]
 800e3fe:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800e402:	e018      	b.n	800e436 <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e404:	f7f9 f890 	bl	8007528 <HAL_GetTick>
 800e408:	4602      	mov	r2, r0
 800e40a:	697b      	ldr	r3, [r7, #20]
 800e40c:	1ad3      	subs	r3, r2, r3
 800e40e:	683a      	ldr	r2, [r7, #0]
 800e410:	429a      	cmp	r2, r3
 800e412:	d803      	bhi.n	800e41c <HAL_SPI_Receive+0x20e>
 800e414:	683b      	ldr	r3, [r7, #0]
 800e416:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e41a:	d102      	bne.n	800e422 <HAL_SPI_Receive+0x214>
 800e41c:	683b      	ldr	r3, [r7, #0]
 800e41e:	2b00      	cmp	r3, #0
 800e420:	d109      	bne.n	800e436 <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800e422:	68fb      	ldr	r3, [r7, #12]
 800e424:	2201      	movs	r2, #1
 800e426:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800e42a:	68fb      	ldr	r3, [r7, #12]
 800e42c:	2200      	movs	r2, #0
 800e42e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800e432:	2303      	movs	r3, #3
 800e434:	e01f      	b.n	800e476 <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 800e436:	68fb      	ldr	r3, [r7, #12]
 800e438:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800e43c:	b29b      	uxth	r3, r3
 800e43e:	2b00      	cmp	r3, #0
 800e440:	d1c3      	bne.n	800e3ca <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800e442:	697a      	ldr	r2, [r7, #20]
 800e444:	6839      	ldr	r1, [r7, #0]
 800e446:	68f8      	ldr	r0, [r7, #12]
 800e448:	f000 fc6a 	bl	800ed20 <SPI_EndRxTransaction>
 800e44c:	4603      	mov	r3, r0
 800e44e:	2b00      	cmp	r3, #0
 800e450:	d002      	beq.n	800e458 <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e452:	68fb      	ldr	r3, [r7, #12]
 800e454:	2220      	movs	r2, #32
 800e456:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 800e458:	68fb      	ldr	r3, [r7, #12]
 800e45a:	2201      	movs	r2, #1
 800e45c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800e460:	68fb      	ldr	r3, [r7, #12]
 800e462:	2200      	movs	r2, #0
 800e464:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e468:	68fb      	ldr	r3, [r7, #12]
 800e46a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	d001      	beq.n	800e474 <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 800e470:	2301      	movs	r3, #1
 800e472:	e000      	b.n	800e476 <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 800e474:	2300      	movs	r3, #0
  }
}
 800e476:	4618      	mov	r0, r3
 800e478:	3718      	adds	r7, #24
 800e47a:	46bd      	mov	sp, r7
 800e47c:	bd80      	pop	{r7, pc}

0800e47e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800e47e:	b580      	push	{r7, lr}
 800e480:	b08a      	sub	sp, #40	@ 0x28
 800e482:	af00      	add	r7, sp, #0
 800e484:	60f8      	str	r0, [r7, #12]
 800e486:	60b9      	str	r1, [r7, #8]
 800e488:	607a      	str	r2, [r7, #4]
 800e48a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800e48c:	2301      	movs	r3, #1
 800e48e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e490:	f7f9 f84a 	bl	8007528 <HAL_GetTick>
 800e494:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800e496:	68fb      	ldr	r3, [r7, #12]
 800e498:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800e49c:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800e49e:	68fb      	ldr	r3, [r7, #12]
 800e4a0:	685b      	ldr	r3, [r3, #4]
 800e4a2:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800e4a4:	887b      	ldrh	r3, [r7, #2]
 800e4a6:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 800e4a8:	887b      	ldrh	r3, [r7, #2]
 800e4aa:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800e4ac:	7ffb      	ldrb	r3, [r7, #31]
 800e4ae:	2b01      	cmp	r3, #1
 800e4b0:	d00c      	beq.n	800e4cc <HAL_SPI_TransmitReceive+0x4e>
 800e4b2:	69bb      	ldr	r3, [r7, #24]
 800e4b4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800e4b8:	d106      	bne.n	800e4c8 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800e4ba:	68fb      	ldr	r3, [r7, #12]
 800e4bc:	689b      	ldr	r3, [r3, #8]
 800e4be:	2b00      	cmp	r3, #0
 800e4c0:	d102      	bne.n	800e4c8 <HAL_SPI_TransmitReceive+0x4a>
 800e4c2:	7ffb      	ldrb	r3, [r7, #31]
 800e4c4:	2b04      	cmp	r3, #4
 800e4c6:	d001      	beq.n	800e4cc <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800e4c8:	2302      	movs	r3, #2
 800e4ca:	e1f3      	b.n	800e8b4 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800e4cc:	68bb      	ldr	r3, [r7, #8]
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	d005      	beq.n	800e4de <HAL_SPI_TransmitReceive+0x60>
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	d002      	beq.n	800e4de <HAL_SPI_TransmitReceive+0x60>
 800e4d8:	887b      	ldrh	r3, [r7, #2]
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	d101      	bne.n	800e4e2 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 800e4de:	2301      	movs	r3, #1
 800e4e0:	e1e8      	b.n	800e8b4 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e4e2:	68fb      	ldr	r3, [r7, #12]
 800e4e4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800e4e8:	2b01      	cmp	r3, #1
 800e4ea:	d101      	bne.n	800e4f0 <HAL_SPI_TransmitReceive+0x72>
 800e4ec:	2302      	movs	r3, #2
 800e4ee:	e1e1      	b.n	800e8b4 <HAL_SPI_TransmitReceive+0x436>
 800e4f0:	68fb      	ldr	r3, [r7, #12]
 800e4f2:	2201      	movs	r2, #1
 800e4f4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800e4f8:	68fb      	ldr	r3, [r7, #12]
 800e4fa:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800e4fe:	b2db      	uxtb	r3, r3
 800e500:	2b04      	cmp	r3, #4
 800e502:	d003      	beq.n	800e50c <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800e504:	68fb      	ldr	r3, [r7, #12]
 800e506:	2205      	movs	r2, #5
 800e508:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e50c:	68fb      	ldr	r3, [r7, #12]
 800e50e:	2200      	movs	r2, #0
 800e510:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800e512:	68fb      	ldr	r3, [r7, #12]
 800e514:	687a      	ldr	r2, [r7, #4]
 800e516:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800e518:	68fb      	ldr	r3, [r7, #12]
 800e51a:	887a      	ldrh	r2, [r7, #2]
 800e51c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 800e520:	68fb      	ldr	r3, [r7, #12]
 800e522:	887a      	ldrh	r2, [r7, #2]
 800e524:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800e528:	68fb      	ldr	r3, [r7, #12]
 800e52a:	68ba      	ldr	r2, [r7, #8]
 800e52c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800e52e:	68fb      	ldr	r3, [r7, #12]
 800e530:	887a      	ldrh	r2, [r7, #2]
 800e532:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 800e534:	68fb      	ldr	r3, [r7, #12]
 800e536:	887a      	ldrh	r2, [r7, #2]
 800e538:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800e53a:	68fb      	ldr	r3, [r7, #12]
 800e53c:	2200      	movs	r2, #0
 800e53e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800e540:	68fb      	ldr	r3, [r7, #12]
 800e542:	2200      	movs	r2, #0
 800e544:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800e546:	68fb      	ldr	r3, [r7, #12]
 800e548:	68db      	ldr	r3, [r3, #12]
 800e54a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800e54e:	d802      	bhi.n	800e556 <HAL_SPI_TransmitReceive+0xd8>
 800e550:	8abb      	ldrh	r3, [r7, #20]
 800e552:	2b01      	cmp	r3, #1
 800e554:	d908      	bls.n	800e568 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800e556:	68fb      	ldr	r3, [r7, #12]
 800e558:	681b      	ldr	r3, [r3, #0]
 800e55a:	685a      	ldr	r2, [r3, #4]
 800e55c:	68fb      	ldr	r3, [r7, #12]
 800e55e:	681b      	ldr	r3, [r3, #0]
 800e560:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800e564:	605a      	str	r2, [r3, #4]
 800e566:	e007      	b.n	800e578 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800e568:	68fb      	ldr	r3, [r7, #12]
 800e56a:	681b      	ldr	r3, [r3, #0]
 800e56c:	685a      	ldr	r2, [r3, #4]
 800e56e:	68fb      	ldr	r3, [r7, #12]
 800e570:	681b      	ldr	r3, [r3, #0]
 800e572:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800e576:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e578:	68fb      	ldr	r3, [r7, #12]
 800e57a:	681b      	ldr	r3, [r3, #0]
 800e57c:	681b      	ldr	r3, [r3, #0]
 800e57e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e582:	2b40      	cmp	r3, #64	@ 0x40
 800e584:	d007      	beq.n	800e596 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e586:	68fb      	ldr	r3, [r7, #12]
 800e588:	681b      	ldr	r3, [r3, #0]
 800e58a:	681a      	ldr	r2, [r3, #0]
 800e58c:	68fb      	ldr	r3, [r7, #12]
 800e58e:	681b      	ldr	r3, [r3, #0]
 800e590:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e594:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e596:	68fb      	ldr	r3, [r7, #12]
 800e598:	68db      	ldr	r3, [r3, #12]
 800e59a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800e59e:	f240 8083 	bls.w	800e6a8 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e5a2:	68fb      	ldr	r3, [r7, #12]
 800e5a4:	685b      	ldr	r3, [r3, #4]
 800e5a6:	2b00      	cmp	r3, #0
 800e5a8:	d002      	beq.n	800e5b0 <HAL_SPI_TransmitReceive+0x132>
 800e5aa:	8afb      	ldrh	r3, [r7, #22]
 800e5ac:	2b01      	cmp	r3, #1
 800e5ae:	d16f      	bne.n	800e690 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800e5b0:	68fb      	ldr	r3, [r7, #12]
 800e5b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e5b4:	881a      	ldrh	r2, [r3, #0]
 800e5b6:	68fb      	ldr	r3, [r7, #12]
 800e5b8:	681b      	ldr	r3, [r3, #0]
 800e5ba:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800e5bc:	68fb      	ldr	r3, [r7, #12]
 800e5be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e5c0:	1c9a      	adds	r2, r3, #2
 800e5c2:	68fb      	ldr	r3, [r7, #12]
 800e5c4:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800e5c6:	68fb      	ldr	r3, [r7, #12]
 800e5c8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e5ca:	b29b      	uxth	r3, r3
 800e5cc:	3b01      	subs	r3, #1
 800e5ce:	b29a      	uxth	r2, r3
 800e5d0:	68fb      	ldr	r3, [r7, #12]
 800e5d2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e5d4:	e05c      	b.n	800e690 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800e5d6:	68fb      	ldr	r3, [r7, #12]
 800e5d8:	681b      	ldr	r3, [r3, #0]
 800e5da:	689b      	ldr	r3, [r3, #8]
 800e5dc:	f003 0302 	and.w	r3, r3, #2
 800e5e0:	2b02      	cmp	r3, #2
 800e5e2:	d11b      	bne.n	800e61c <HAL_SPI_TransmitReceive+0x19e>
 800e5e4:	68fb      	ldr	r3, [r7, #12]
 800e5e6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e5e8:	b29b      	uxth	r3, r3
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	d016      	beq.n	800e61c <HAL_SPI_TransmitReceive+0x19e>
 800e5ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e5f0:	2b01      	cmp	r3, #1
 800e5f2:	d113      	bne.n	800e61c <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800e5f4:	68fb      	ldr	r3, [r7, #12]
 800e5f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e5f8:	881a      	ldrh	r2, [r3, #0]
 800e5fa:	68fb      	ldr	r3, [r7, #12]
 800e5fc:	681b      	ldr	r3, [r3, #0]
 800e5fe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800e600:	68fb      	ldr	r3, [r7, #12]
 800e602:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e604:	1c9a      	adds	r2, r3, #2
 800e606:	68fb      	ldr	r3, [r7, #12]
 800e608:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800e60a:	68fb      	ldr	r3, [r7, #12]
 800e60c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e60e:	b29b      	uxth	r3, r3
 800e610:	3b01      	subs	r3, #1
 800e612:	b29a      	uxth	r2, r3
 800e614:	68fb      	ldr	r3, [r7, #12]
 800e616:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800e618:	2300      	movs	r3, #0
 800e61a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800e61c:	68fb      	ldr	r3, [r7, #12]
 800e61e:	681b      	ldr	r3, [r3, #0]
 800e620:	689b      	ldr	r3, [r3, #8]
 800e622:	f003 0301 	and.w	r3, r3, #1
 800e626:	2b01      	cmp	r3, #1
 800e628:	d11c      	bne.n	800e664 <HAL_SPI_TransmitReceive+0x1e6>
 800e62a:	68fb      	ldr	r3, [r7, #12]
 800e62c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800e630:	b29b      	uxth	r3, r3
 800e632:	2b00      	cmp	r3, #0
 800e634:	d016      	beq.n	800e664 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800e636:	68fb      	ldr	r3, [r7, #12]
 800e638:	681b      	ldr	r3, [r3, #0]
 800e63a:	68da      	ldr	r2, [r3, #12]
 800e63c:	68fb      	ldr	r3, [r7, #12]
 800e63e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e640:	b292      	uxth	r2, r2
 800e642:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e644:	68fb      	ldr	r3, [r7, #12]
 800e646:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e648:	1c9a      	adds	r2, r3, #2
 800e64a:	68fb      	ldr	r3, [r7, #12]
 800e64c:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800e64e:	68fb      	ldr	r3, [r7, #12]
 800e650:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800e654:	b29b      	uxth	r3, r3
 800e656:	3b01      	subs	r3, #1
 800e658:	b29a      	uxth	r2, r3
 800e65a:	68fb      	ldr	r3, [r7, #12]
 800e65c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800e660:	2301      	movs	r3, #1
 800e662:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800e664:	f7f8 ff60 	bl	8007528 <HAL_GetTick>
 800e668:	4602      	mov	r2, r0
 800e66a:	6a3b      	ldr	r3, [r7, #32]
 800e66c:	1ad3      	subs	r3, r2, r3
 800e66e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e670:	429a      	cmp	r2, r3
 800e672:	d80d      	bhi.n	800e690 <HAL_SPI_TransmitReceive+0x212>
 800e674:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e676:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e67a:	d009      	beq.n	800e690 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800e67c:	68fb      	ldr	r3, [r7, #12]
 800e67e:	2201      	movs	r2, #1
 800e680:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800e684:	68fb      	ldr	r3, [r7, #12]
 800e686:	2200      	movs	r2, #0
 800e688:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800e68c:	2303      	movs	r3, #3
 800e68e:	e111      	b.n	800e8b4 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e690:	68fb      	ldr	r3, [r7, #12]
 800e692:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e694:	b29b      	uxth	r3, r3
 800e696:	2b00      	cmp	r3, #0
 800e698:	d19d      	bne.n	800e5d6 <HAL_SPI_TransmitReceive+0x158>
 800e69a:	68fb      	ldr	r3, [r7, #12]
 800e69c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800e6a0:	b29b      	uxth	r3, r3
 800e6a2:	2b00      	cmp	r3, #0
 800e6a4:	d197      	bne.n	800e5d6 <HAL_SPI_TransmitReceive+0x158>
 800e6a6:	e0e5      	b.n	800e874 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e6a8:	68fb      	ldr	r3, [r7, #12]
 800e6aa:	685b      	ldr	r3, [r3, #4]
 800e6ac:	2b00      	cmp	r3, #0
 800e6ae:	d003      	beq.n	800e6b8 <HAL_SPI_TransmitReceive+0x23a>
 800e6b0:	8afb      	ldrh	r3, [r7, #22]
 800e6b2:	2b01      	cmp	r3, #1
 800e6b4:	f040 80d1 	bne.w	800e85a <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 800e6b8:	68fb      	ldr	r3, [r7, #12]
 800e6ba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e6bc:	b29b      	uxth	r3, r3
 800e6be:	2b01      	cmp	r3, #1
 800e6c0:	d912      	bls.n	800e6e8 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800e6c2:	68fb      	ldr	r3, [r7, #12]
 800e6c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e6c6:	881a      	ldrh	r2, [r3, #0]
 800e6c8:	68fb      	ldr	r3, [r7, #12]
 800e6ca:	681b      	ldr	r3, [r3, #0]
 800e6cc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800e6ce:	68fb      	ldr	r3, [r7, #12]
 800e6d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e6d2:	1c9a      	adds	r2, r3, #2
 800e6d4:	68fb      	ldr	r3, [r7, #12]
 800e6d6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800e6d8:	68fb      	ldr	r3, [r7, #12]
 800e6da:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e6dc:	b29b      	uxth	r3, r3
 800e6de:	3b02      	subs	r3, #2
 800e6e0:	b29a      	uxth	r2, r3
 800e6e2:	68fb      	ldr	r3, [r7, #12]
 800e6e4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800e6e6:	e0b8      	b.n	800e85a <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800e6e8:	68fb      	ldr	r3, [r7, #12]
 800e6ea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e6ec:	68fb      	ldr	r3, [r7, #12]
 800e6ee:	681b      	ldr	r3, [r3, #0]
 800e6f0:	330c      	adds	r3, #12
 800e6f2:	7812      	ldrb	r2, [r2, #0]
 800e6f4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800e6f6:	68fb      	ldr	r3, [r7, #12]
 800e6f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e6fa:	1c5a      	adds	r2, r3, #1
 800e6fc:	68fb      	ldr	r3, [r7, #12]
 800e6fe:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800e700:	68fb      	ldr	r3, [r7, #12]
 800e702:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e704:	b29b      	uxth	r3, r3
 800e706:	3b01      	subs	r3, #1
 800e708:	b29a      	uxth	r2, r3
 800e70a:	68fb      	ldr	r3, [r7, #12]
 800e70c:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e70e:	e0a4      	b.n	800e85a <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800e710:	68fb      	ldr	r3, [r7, #12]
 800e712:	681b      	ldr	r3, [r3, #0]
 800e714:	689b      	ldr	r3, [r3, #8]
 800e716:	f003 0302 	and.w	r3, r3, #2
 800e71a:	2b02      	cmp	r3, #2
 800e71c:	d134      	bne.n	800e788 <HAL_SPI_TransmitReceive+0x30a>
 800e71e:	68fb      	ldr	r3, [r7, #12]
 800e720:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e722:	b29b      	uxth	r3, r3
 800e724:	2b00      	cmp	r3, #0
 800e726:	d02f      	beq.n	800e788 <HAL_SPI_TransmitReceive+0x30a>
 800e728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e72a:	2b01      	cmp	r3, #1
 800e72c:	d12c      	bne.n	800e788 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800e72e:	68fb      	ldr	r3, [r7, #12]
 800e730:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e732:	b29b      	uxth	r3, r3
 800e734:	2b01      	cmp	r3, #1
 800e736:	d912      	bls.n	800e75e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800e738:	68fb      	ldr	r3, [r7, #12]
 800e73a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e73c:	881a      	ldrh	r2, [r3, #0]
 800e73e:	68fb      	ldr	r3, [r7, #12]
 800e740:	681b      	ldr	r3, [r3, #0]
 800e742:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800e744:	68fb      	ldr	r3, [r7, #12]
 800e746:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e748:	1c9a      	adds	r2, r3, #2
 800e74a:	68fb      	ldr	r3, [r7, #12]
 800e74c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800e74e:	68fb      	ldr	r3, [r7, #12]
 800e750:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e752:	b29b      	uxth	r3, r3
 800e754:	3b02      	subs	r3, #2
 800e756:	b29a      	uxth	r2, r3
 800e758:	68fb      	ldr	r3, [r7, #12]
 800e75a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800e75c:	e012      	b.n	800e784 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800e75e:	68fb      	ldr	r3, [r7, #12]
 800e760:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e762:	68fb      	ldr	r3, [r7, #12]
 800e764:	681b      	ldr	r3, [r3, #0]
 800e766:	330c      	adds	r3, #12
 800e768:	7812      	ldrb	r2, [r2, #0]
 800e76a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800e76c:	68fb      	ldr	r3, [r7, #12]
 800e76e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e770:	1c5a      	adds	r2, r3, #1
 800e772:	68fb      	ldr	r3, [r7, #12]
 800e774:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800e776:	68fb      	ldr	r3, [r7, #12]
 800e778:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e77a:	b29b      	uxth	r3, r3
 800e77c:	3b01      	subs	r3, #1
 800e77e:	b29a      	uxth	r2, r3
 800e780:	68fb      	ldr	r3, [r7, #12]
 800e782:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800e784:	2300      	movs	r3, #0
 800e786:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800e788:	68fb      	ldr	r3, [r7, #12]
 800e78a:	681b      	ldr	r3, [r3, #0]
 800e78c:	689b      	ldr	r3, [r3, #8]
 800e78e:	f003 0301 	and.w	r3, r3, #1
 800e792:	2b01      	cmp	r3, #1
 800e794:	d148      	bne.n	800e828 <HAL_SPI_TransmitReceive+0x3aa>
 800e796:	68fb      	ldr	r3, [r7, #12]
 800e798:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800e79c:	b29b      	uxth	r3, r3
 800e79e:	2b00      	cmp	r3, #0
 800e7a0:	d042      	beq.n	800e828 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800e7a2:	68fb      	ldr	r3, [r7, #12]
 800e7a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800e7a8:	b29b      	uxth	r3, r3
 800e7aa:	2b01      	cmp	r3, #1
 800e7ac:	d923      	bls.n	800e7f6 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800e7ae:	68fb      	ldr	r3, [r7, #12]
 800e7b0:	681b      	ldr	r3, [r3, #0]
 800e7b2:	68da      	ldr	r2, [r3, #12]
 800e7b4:	68fb      	ldr	r3, [r7, #12]
 800e7b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e7b8:	b292      	uxth	r2, r2
 800e7ba:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800e7bc:	68fb      	ldr	r3, [r7, #12]
 800e7be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e7c0:	1c9a      	adds	r2, r3, #2
 800e7c2:	68fb      	ldr	r3, [r7, #12]
 800e7c4:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800e7c6:	68fb      	ldr	r3, [r7, #12]
 800e7c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800e7cc:	b29b      	uxth	r3, r3
 800e7ce:	3b02      	subs	r3, #2
 800e7d0:	b29a      	uxth	r2, r3
 800e7d2:	68fb      	ldr	r3, [r7, #12]
 800e7d4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 800e7d8:	68fb      	ldr	r3, [r7, #12]
 800e7da:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800e7de:	b29b      	uxth	r3, r3
 800e7e0:	2b01      	cmp	r3, #1
 800e7e2:	d81f      	bhi.n	800e824 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800e7e4:	68fb      	ldr	r3, [r7, #12]
 800e7e6:	681b      	ldr	r3, [r3, #0]
 800e7e8:	685a      	ldr	r2, [r3, #4]
 800e7ea:	68fb      	ldr	r3, [r7, #12]
 800e7ec:	681b      	ldr	r3, [r3, #0]
 800e7ee:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800e7f2:	605a      	str	r2, [r3, #4]
 800e7f4:	e016      	b.n	800e824 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800e7f6:	68fb      	ldr	r3, [r7, #12]
 800e7f8:	681b      	ldr	r3, [r3, #0]
 800e7fa:	f103 020c 	add.w	r2, r3, #12
 800e7fe:	68fb      	ldr	r3, [r7, #12]
 800e800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e802:	7812      	ldrb	r2, [r2, #0]
 800e804:	b2d2      	uxtb	r2, r2
 800e806:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800e808:	68fb      	ldr	r3, [r7, #12]
 800e80a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e80c:	1c5a      	adds	r2, r3, #1
 800e80e:	68fb      	ldr	r3, [r7, #12]
 800e810:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800e812:	68fb      	ldr	r3, [r7, #12]
 800e814:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800e818:	b29b      	uxth	r3, r3
 800e81a:	3b01      	subs	r3, #1
 800e81c:	b29a      	uxth	r2, r3
 800e81e:	68fb      	ldr	r3, [r7, #12]
 800e820:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800e824:	2301      	movs	r3, #1
 800e826:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800e828:	f7f8 fe7e 	bl	8007528 <HAL_GetTick>
 800e82c:	4602      	mov	r2, r0
 800e82e:	6a3b      	ldr	r3, [r7, #32]
 800e830:	1ad3      	subs	r3, r2, r3
 800e832:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e834:	429a      	cmp	r2, r3
 800e836:	d803      	bhi.n	800e840 <HAL_SPI_TransmitReceive+0x3c2>
 800e838:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e83a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e83e:	d102      	bne.n	800e846 <HAL_SPI_TransmitReceive+0x3c8>
 800e840:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e842:	2b00      	cmp	r3, #0
 800e844:	d109      	bne.n	800e85a <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800e846:	68fb      	ldr	r3, [r7, #12]
 800e848:	2201      	movs	r2, #1
 800e84a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800e84e:	68fb      	ldr	r3, [r7, #12]
 800e850:	2200      	movs	r2, #0
 800e852:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800e856:	2303      	movs	r3, #3
 800e858:	e02c      	b.n	800e8b4 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e85a:	68fb      	ldr	r3, [r7, #12]
 800e85c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e85e:	b29b      	uxth	r3, r3
 800e860:	2b00      	cmp	r3, #0
 800e862:	f47f af55 	bne.w	800e710 <HAL_SPI_TransmitReceive+0x292>
 800e866:	68fb      	ldr	r3, [r7, #12]
 800e868:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800e86c:	b29b      	uxth	r3, r3
 800e86e:	2b00      	cmp	r3, #0
 800e870:	f47f af4e 	bne.w	800e710 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800e874:	6a3a      	ldr	r2, [r7, #32]
 800e876:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800e878:	68f8      	ldr	r0, [r7, #12]
 800e87a:	f000 faa9 	bl	800edd0 <SPI_EndRxTxTransaction>
 800e87e:	4603      	mov	r3, r0
 800e880:	2b00      	cmp	r3, #0
 800e882:	d008      	beq.n	800e896 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e884:	68fb      	ldr	r3, [r7, #12]
 800e886:	2220      	movs	r2, #32
 800e888:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 800e88a:	68fb      	ldr	r3, [r7, #12]
 800e88c:	2200      	movs	r2, #0
 800e88e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800e892:	2301      	movs	r3, #1
 800e894:	e00e      	b.n	800e8b4 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 800e896:	68fb      	ldr	r3, [r7, #12]
 800e898:	2201      	movs	r2, #1
 800e89a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800e89e:	68fb      	ldr	r3, [r7, #12]
 800e8a0:	2200      	movs	r2, #0
 800e8a2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e8a6:	68fb      	ldr	r3, [r7, #12]
 800e8a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e8aa:	2b00      	cmp	r3, #0
 800e8ac:	d001      	beq.n	800e8b2 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 800e8ae:	2301      	movs	r3, #1
 800e8b0:	e000      	b.n	800e8b4 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 800e8b2:	2300      	movs	r3, #0
  }
}
 800e8b4:	4618      	mov	r0, r3
 800e8b6:	3728      	adds	r7, #40	@ 0x28
 800e8b8:	46bd      	mov	sp, r7
 800e8ba:	bd80      	pop	{r7, pc}

0800e8bc <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800e8bc:	b580      	push	{r7, lr}
 800e8be:	b088      	sub	sp, #32
 800e8c0:	af00      	add	r7, sp, #0
 800e8c2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	681b      	ldr	r3, [r3, #0]
 800e8c8:	685b      	ldr	r3, [r3, #4]
 800e8ca:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	681b      	ldr	r3, [r3, #0]
 800e8d0:	689b      	ldr	r3, [r3, #8]
 800e8d2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800e8d4:	69bb      	ldr	r3, [r7, #24]
 800e8d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e8da:	2b00      	cmp	r3, #0
 800e8dc:	d10e      	bne.n	800e8fc <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800e8de:	69bb      	ldr	r3, [r7, #24]
 800e8e0:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800e8e4:	2b00      	cmp	r3, #0
 800e8e6:	d009      	beq.n	800e8fc <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800e8e8:	69fb      	ldr	r3, [r7, #28]
 800e8ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	d004      	beq.n	800e8fc <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e8f6:	6878      	ldr	r0, [r7, #4]
 800e8f8:	4798      	blx	r3
    return;
 800e8fa:	e0ce      	b.n	800ea9a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800e8fc:	69bb      	ldr	r3, [r7, #24]
 800e8fe:	f003 0302 	and.w	r3, r3, #2
 800e902:	2b00      	cmp	r3, #0
 800e904:	d009      	beq.n	800e91a <HAL_SPI_IRQHandler+0x5e>
 800e906:	69fb      	ldr	r3, [r7, #28]
 800e908:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e90c:	2b00      	cmp	r3, #0
 800e90e:	d004      	beq.n	800e91a <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e914:	6878      	ldr	r0, [r7, #4]
 800e916:	4798      	blx	r3
    return;
 800e918:	e0bf      	b.n	800ea9a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800e91a:	69bb      	ldr	r3, [r7, #24]
 800e91c:	f003 0320 	and.w	r3, r3, #32
 800e920:	2b00      	cmp	r3, #0
 800e922:	d10a      	bne.n	800e93a <HAL_SPI_IRQHandler+0x7e>
 800e924:	69bb      	ldr	r3, [r7, #24]
 800e926:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e92a:	2b00      	cmp	r3, #0
 800e92c:	d105      	bne.n	800e93a <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800e92e:	69bb      	ldr	r3, [r7, #24]
 800e930:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e934:	2b00      	cmp	r3, #0
 800e936:	f000 80b0 	beq.w	800ea9a <HAL_SPI_IRQHandler+0x1de>
 800e93a:	69fb      	ldr	r3, [r7, #28]
 800e93c:	f003 0320 	and.w	r3, r3, #32
 800e940:	2b00      	cmp	r3, #0
 800e942:	f000 80aa 	beq.w	800ea9a <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800e946:	69bb      	ldr	r3, [r7, #24]
 800e948:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e94c:	2b00      	cmp	r3, #0
 800e94e:	d023      	beq.n	800e998 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800e956:	b2db      	uxtb	r3, r3
 800e958:	2b03      	cmp	r3, #3
 800e95a:	d011      	beq.n	800e980 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e960:	f043 0204 	orr.w	r2, r3, #4
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e968:	2300      	movs	r3, #0
 800e96a:	617b      	str	r3, [r7, #20]
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	681b      	ldr	r3, [r3, #0]
 800e970:	68db      	ldr	r3, [r3, #12]
 800e972:	617b      	str	r3, [r7, #20]
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	681b      	ldr	r3, [r3, #0]
 800e978:	689b      	ldr	r3, [r3, #8]
 800e97a:	617b      	str	r3, [r7, #20]
 800e97c:	697b      	ldr	r3, [r7, #20]
 800e97e:	e00b      	b.n	800e998 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e980:	2300      	movs	r3, #0
 800e982:	613b      	str	r3, [r7, #16]
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	681b      	ldr	r3, [r3, #0]
 800e988:	68db      	ldr	r3, [r3, #12]
 800e98a:	613b      	str	r3, [r7, #16]
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	681b      	ldr	r3, [r3, #0]
 800e990:	689b      	ldr	r3, [r3, #8]
 800e992:	613b      	str	r3, [r7, #16]
 800e994:	693b      	ldr	r3, [r7, #16]
        return;
 800e996:	e080      	b.n	800ea9a <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800e998:	69bb      	ldr	r3, [r7, #24]
 800e99a:	f003 0320 	and.w	r3, r3, #32
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	d014      	beq.n	800e9cc <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e9a6:	f043 0201 	orr.w	r2, r3, #1
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800e9ae:	2300      	movs	r3, #0
 800e9b0:	60fb      	str	r3, [r7, #12]
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	681b      	ldr	r3, [r3, #0]
 800e9b6:	689b      	ldr	r3, [r3, #8]
 800e9b8:	60fb      	str	r3, [r7, #12]
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	681b      	ldr	r3, [r3, #0]
 800e9be:	681a      	ldr	r2, [r3, #0]
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	681b      	ldr	r3, [r3, #0]
 800e9c4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800e9c8:	601a      	str	r2, [r3, #0]
 800e9ca:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800e9cc:	69bb      	ldr	r3, [r7, #24]
 800e9ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e9d2:	2b00      	cmp	r3, #0
 800e9d4:	d00c      	beq.n	800e9f0 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e9da:	f043 0208 	orr.w	r2, r3, #8
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800e9e2:	2300      	movs	r3, #0
 800e9e4:	60bb      	str	r3, [r7, #8]
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	681b      	ldr	r3, [r3, #0]
 800e9ea:	689b      	ldr	r3, [r3, #8]
 800e9ec:	60bb      	str	r3, [r7, #8]
 800e9ee:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	d04f      	beq.n	800ea98 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	681b      	ldr	r3, [r3, #0]
 800e9fc:	685a      	ldr	r2, [r3, #4]
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	681b      	ldr	r3, [r3, #0]
 800ea02:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800ea06:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	2201      	movs	r2, #1
 800ea0c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800ea10:	69fb      	ldr	r3, [r7, #28]
 800ea12:	f003 0302 	and.w	r3, r3, #2
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	d104      	bne.n	800ea24 <HAL_SPI_IRQHandler+0x168>
 800ea1a:	69fb      	ldr	r3, [r7, #28]
 800ea1c:	f003 0301 	and.w	r3, r3, #1
 800ea20:	2b00      	cmp	r3, #0
 800ea22:	d034      	beq.n	800ea8e <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	681b      	ldr	r3, [r3, #0]
 800ea28:	685a      	ldr	r2, [r3, #4]
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	681b      	ldr	r3, [r3, #0]
 800ea2e:	f022 0203 	bic.w	r2, r2, #3
 800ea32:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ea38:	2b00      	cmp	r3, #0
 800ea3a:	d011      	beq.n	800ea60 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ea40:	4a17      	ldr	r2, [pc, #92]	@ (800eaa0 <HAL_SPI_IRQHandler+0x1e4>)
 800ea42:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ea48:	4618      	mov	r0, r3
 800ea4a:	f7fa f92d 	bl	8008ca8 <HAL_DMA_Abort_IT>
 800ea4e:	4603      	mov	r3, r0
 800ea50:	2b00      	cmp	r3, #0
 800ea52:	d005      	beq.n	800ea60 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ea58:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ea64:	2b00      	cmp	r3, #0
 800ea66:	d016      	beq.n	800ea96 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ea6c:	4a0c      	ldr	r2, [pc, #48]	@ (800eaa0 <HAL_SPI_IRQHandler+0x1e4>)
 800ea6e:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ea74:	4618      	mov	r0, r3
 800ea76:	f7fa f917 	bl	8008ca8 <HAL_DMA_Abort_IT>
 800ea7a:	4603      	mov	r3, r0
 800ea7c:	2b00      	cmp	r3, #0
 800ea7e:	d00a      	beq.n	800ea96 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ea84:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 800ea8c:	e003      	b.n	800ea96 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800ea8e:	6878      	ldr	r0, [r7, #4]
 800ea90:	f000 f808 	bl	800eaa4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800ea94:	e000      	b.n	800ea98 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 800ea96:	bf00      	nop
    return;
 800ea98:	bf00      	nop
  }
}
 800ea9a:	3720      	adds	r7, #32
 800ea9c:	46bd      	mov	sp, r7
 800ea9e:	bd80      	pop	{r7, pc}
 800eaa0:	0800eab9 	.word	0x0800eab9

0800eaa4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800eaa4:	b480      	push	{r7}
 800eaa6:	b083      	sub	sp, #12
 800eaa8:	af00      	add	r7, sp, #0
 800eaaa:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800eaac:	bf00      	nop
 800eaae:	370c      	adds	r7, #12
 800eab0:	46bd      	mov	sp, r7
 800eab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eab6:	4770      	bx	lr

0800eab8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800eab8:	b580      	push	{r7, lr}
 800eaba:	b084      	sub	sp, #16
 800eabc:	af00      	add	r7, sp, #0
 800eabe:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800eac4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800eac6:	68fb      	ldr	r3, [r7, #12]
 800eac8:	2200      	movs	r2, #0
 800eaca:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 800eace:	68fb      	ldr	r3, [r7, #12]
 800ead0:	2200      	movs	r2, #0
 800ead2:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800ead4:	68f8      	ldr	r0, [r7, #12]
 800ead6:	f7ff ffe5 	bl	800eaa4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800eada:	bf00      	nop
 800eadc:	3710      	adds	r7, #16
 800eade:	46bd      	mov	sp, r7
 800eae0:	bd80      	pop	{r7, pc}
	...

0800eae4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800eae4:	b580      	push	{r7, lr}
 800eae6:	b088      	sub	sp, #32
 800eae8:	af00      	add	r7, sp, #0
 800eaea:	60f8      	str	r0, [r7, #12]
 800eaec:	60b9      	str	r1, [r7, #8]
 800eaee:	603b      	str	r3, [r7, #0]
 800eaf0:	4613      	mov	r3, r2
 800eaf2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800eaf4:	f7f8 fd18 	bl	8007528 <HAL_GetTick>
 800eaf8:	4602      	mov	r2, r0
 800eafa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eafc:	1a9b      	subs	r3, r3, r2
 800eafe:	683a      	ldr	r2, [r7, #0]
 800eb00:	4413      	add	r3, r2
 800eb02:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800eb04:	f7f8 fd10 	bl	8007528 <HAL_GetTick>
 800eb08:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800eb0a:	4b39      	ldr	r3, [pc, #228]	@ (800ebf0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800eb0c:	681b      	ldr	r3, [r3, #0]
 800eb0e:	015b      	lsls	r3, r3, #5
 800eb10:	0d1b      	lsrs	r3, r3, #20
 800eb12:	69fa      	ldr	r2, [r7, #28]
 800eb14:	fb02 f303 	mul.w	r3, r2, r3
 800eb18:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800eb1a:	e054      	b.n	800ebc6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800eb1c:	683b      	ldr	r3, [r7, #0]
 800eb1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb22:	d050      	beq.n	800ebc6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800eb24:	f7f8 fd00 	bl	8007528 <HAL_GetTick>
 800eb28:	4602      	mov	r2, r0
 800eb2a:	69bb      	ldr	r3, [r7, #24]
 800eb2c:	1ad3      	subs	r3, r2, r3
 800eb2e:	69fa      	ldr	r2, [r7, #28]
 800eb30:	429a      	cmp	r2, r3
 800eb32:	d902      	bls.n	800eb3a <SPI_WaitFlagStateUntilTimeout+0x56>
 800eb34:	69fb      	ldr	r3, [r7, #28]
 800eb36:	2b00      	cmp	r3, #0
 800eb38:	d13d      	bne.n	800ebb6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800eb3a:	68fb      	ldr	r3, [r7, #12]
 800eb3c:	681b      	ldr	r3, [r3, #0]
 800eb3e:	685a      	ldr	r2, [r3, #4]
 800eb40:	68fb      	ldr	r3, [r7, #12]
 800eb42:	681b      	ldr	r3, [r3, #0]
 800eb44:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800eb48:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800eb4a:	68fb      	ldr	r3, [r7, #12]
 800eb4c:	685b      	ldr	r3, [r3, #4]
 800eb4e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800eb52:	d111      	bne.n	800eb78 <SPI_WaitFlagStateUntilTimeout+0x94>
 800eb54:	68fb      	ldr	r3, [r7, #12]
 800eb56:	689b      	ldr	r3, [r3, #8]
 800eb58:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800eb5c:	d004      	beq.n	800eb68 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800eb5e:	68fb      	ldr	r3, [r7, #12]
 800eb60:	689b      	ldr	r3, [r3, #8]
 800eb62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800eb66:	d107      	bne.n	800eb78 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800eb68:	68fb      	ldr	r3, [r7, #12]
 800eb6a:	681b      	ldr	r3, [r3, #0]
 800eb6c:	681a      	ldr	r2, [r3, #0]
 800eb6e:	68fb      	ldr	r3, [r7, #12]
 800eb70:	681b      	ldr	r3, [r3, #0]
 800eb72:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800eb76:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800eb78:	68fb      	ldr	r3, [r7, #12]
 800eb7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800eb7c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800eb80:	d10f      	bne.n	800eba2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800eb82:	68fb      	ldr	r3, [r7, #12]
 800eb84:	681b      	ldr	r3, [r3, #0]
 800eb86:	681a      	ldr	r2, [r3, #0]
 800eb88:	68fb      	ldr	r3, [r7, #12]
 800eb8a:	681b      	ldr	r3, [r3, #0]
 800eb8c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800eb90:	601a      	str	r2, [r3, #0]
 800eb92:	68fb      	ldr	r3, [r7, #12]
 800eb94:	681b      	ldr	r3, [r3, #0]
 800eb96:	681a      	ldr	r2, [r3, #0]
 800eb98:	68fb      	ldr	r3, [r7, #12]
 800eb9a:	681b      	ldr	r3, [r3, #0]
 800eb9c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800eba0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800eba2:	68fb      	ldr	r3, [r7, #12]
 800eba4:	2201      	movs	r2, #1
 800eba6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800ebaa:	68fb      	ldr	r3, [r7, #12]
 800ebac:	2200      	movs	r2, #0
 800ebae:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800ebb2:	2303      	movs	r3, #3
 800ebb4:	e017      	b.n	800ebe6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800ebb6:	697b      	ldr	r3, [r7, #20]
 800ebb8:	2b00      	cmp	r3, #0
 800ebba:	d101      	bne.n	800ebc0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800ebbc:	2300      	movs	r3, #0
 800ebbe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800ebc0:	697b      	ldr	r3, [r7, #20]
 800ebc2:	3b01      	subs	r3, #1
 800ebc4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ebc6:	68fb      	ldr	r3, [r7, #12]
 800ebc8:	681b      	ldr	r3, [r3, #0]
 800ebca:	689a      	ldr	r2, [r3, #8]
 800ebcc:	68bb      	ldr	r3, [r7, #8]
 800ebce:	4013      	ands	r3, r2
 800ebd0:	68ba      	ldr	r2, [r7, #8]
 800ebd2:	429a      	cmp	r2, r3
 800ebd4:	bf0c      	ite	eq
 800ebd6:	2301      	moveq	r3, #1
 800ebd8:	2300      	movne	r3, #0
 800ebda:	b2db      	uxtb	r3, r3
 800ebdc:	461a      	mov	r2, r3
 800ebde:	79fb      	ldrb	r3, [r7, #7]
 800ebe0:	429a      	cmp	r2, r3
 800ebe2:	d19b      	bne.n	800eb1c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800ebe4:	2300      	movs	r3, #0
}
 800ebe6:	4618      	mov	r0, r3
 800ebe8:	3720      	adds	r7, #32
 800ebea:	46bd      	mov	sp, r7
 800ebec:	bd80      	pop	{r7, pc}
 800ebee:	bf00      	nop
 800ebf0:	2000002c 	.word	0x2000002c

0800ebf4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800ebf4:	b580      	push	{r7, lr}
 800ebf6:	b08a      	sub	sp, #40	@ 0x28
 800ebf8:	af00      	add	r7, sp, #0
 800ebfa:	60f8      	str	r0, [r7, #12]
 800ebfc:	60b9      	str	r1, [r7, #8]
 800ebfe:	607a      	str	r2, [r7, #4]
 800ec00:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800ec02:	2300      	movs	r3, #0
 800ec04:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800ec06:	f7f8 fc8f 	bl	8007528 <HAL_GetTick>
 800ec0a:	4602      	mov	r2, r0
 800ec0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec0e:	1a9b      	subs	r3, r3, r2
 800ec10:	683a      	ldr	r2, [r7, #0]
 800ec12:	4413      	add	r3, r2
 800ec14:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800ec16:	f7f8 fc87 	bl	8007528 <HAL_GetTick>
 800ec1a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800ec1c:	68fb      	ldr	r3, [r7, #12]
 800ec1e:	681b      	ldr	r3, [r3, #0]
 800ec20:	330c      	adds	r3, #12
 800ec22:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800ec24:	4b3d      	ldr	r3, [pc, #244]	@ (800ed1c <SPI_WaitFifoStateUntilTimeout+0x128>)
 800ec26:	681a      	ldr	r2, [r3, #0]
 800ec28:	4613      	mov	r3, r2
 800ec2a:	009b      	lsls	r3, r3, #2
 800ec2c:	4413      	add	r3, r2
 800ec2e:	00da      	lsls	r2, r3, #3
 800ec30:	1ad3      	subs	r3, r2, r3
 800ec32:	0d1b      	lsrs	r3, r3, #20
 800ec34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ec36:	fb02 f303 	mul.w	r3, r2, r3
 800ec3a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800ec3c:	e060      	b.n	800ed00 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800ec3e:	68bb      	ldr	r3, [r7, #8]
 800ec40:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800ec44:	d107      	bne.n	800ec56 <SPI_WaitFifoStateUntilTimeout+0x62>
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	2b00      	cmp	r3, #0
 800ec4a:	d104      	bne.n	800ec56 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800ec4c:	69fb      	ldr	r3, [r7, #28]
 800ec4e:	781b      	ldrb	r3, [r3, #0]
 800ec50:	b2db      	uxtb	r3, r3
 800ec52:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800ec54:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800ec56:	683b      	ldr	r3, [r7, #0]
 800ec58:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec5c:	d050      	beq.n	800ed00 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800ec5e:	f7f8 fc63 	bl	8007528 <HAL_GetTick>
 800ec62:	4602      	mov	r2, r0
 800ec64:	6a3b      	ldr	r3, [r7, #32]
 800ec66:	1ad3      	subs	r3, r2, r3
 800ec68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ec6a:	429a      	cmp	r2, r3
 800ec6c:	d902      	bls.n	800ec74 <SPI_WaitFifoStateUntilTimeout+0x80>
 800ec6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec70:	2b00      	cmp	r3, #0
 800ec72:	d13d      	bne.n	800ecf0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800ec74:	68fb      	ldr	r3, [r7, #12]
 800ec76:	681b      	ldr	r3, [r3, #0]
 800ec78:	685a      	ldr	r2, [r3, #4]
 800ec7a:	68fb      	ldr	r3, [r7, #12]
 800ec7c:	681b      	ldr	r3, [r3, #0]
 800ec7e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800ec82:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ec84:	68fb      	ldr	r3, [r7, #12]
 800ec86:	685b      	ldr	r3, [r3, #4]
 800ec88:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800ec8c:	d111      	bne.n	800ecb2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800ec8e:	68fb      	ldr	r3, [r7, #12]
 800ec90:	689b      	ldr	r3, [r3, #8]
 800ec92:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ec96:	d004      	beq.n	800eca2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ec98:	68fb      	ldr	r3, [r7, #12]
 800ec9a:	689b      	ldr	r3, [r3, #8]
 800ec9c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800eca0:	d107      	bne.n	800ecb2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800eca2:	68fb      	ldr	r3, [r7, #12]
 800eca4:	681b      	ldr	r3, [r3, #0]
 800eca6:	681a      	ldr	r2, [r3, #0]
 800eca8:	68fb      	ldr	r3, [r7, #12]
 800ecaa:	681b      	ldr	r3, [r3, #0]
 800ecac:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800ecb0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800ecb2:	68fb      	ldr	r3, [r7, #12]
 800ecb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ecb6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ecba:	d10f      	bne.n	800ecdc <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800ecbc:	68fb      	ldr	r3, [r7, #12]
 800ecbe:	681b      	ldr	r3, [r3, #0]
 800ecc0:	681a      	ldr	r2, [r3, #0]
 800ecc2:	68fb      	ldr	r3, [r7, #12]
 800ecc4:	681b      	ldr	r3, [r3, #0]
 800ecc6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800ecca:	601a      	str	r2, [r3, #0]
 800eccc:	68fb      	ldr	r3, [r7, #12]
 800ecce:	681b      	ldr	r3, [r3, #0]
 800ecd0:	681a      	ldr	r2, [r3, #0]
 800ecd2:	68fb      	ldr	r3, [r7, #12]
 800ecd4:	681b      	ldr	r3, [r3, #0]
 800ecd6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800ecda:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800ecdc:	68fb      	ldr	r3, [r7, #12]
 800ecde:	2201      	movs	r2, #1
 800ece0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800ece4:	68fb      	ldr	r3, [r7, #12]
 800ece6:	2200      	movs	r2, #0
 800ece8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800ecec:	2303      	movs	r3, #3
 800ecee:	e010      	b.n	800ed12 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800ecf0:	69bb      	ldr	r3, [r7, #24]
 800ecf2:	2b00      	cmp	r3, #0
 800ecf4:	d101      	bne.n	800ecfa <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800ecf6:	2300      	movs	r3, #0
 800ecf8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800ecfa:	69bb      	ldr	r3, [r7, #24]
 800ecfc:	3b01      	subs	r3, #1
 800ecfe:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800ed00:	68fb      	ldr	r3, [r7, #12]
 800ed02:	681b      	ldr	r3, [r3, #0]
 800ed04:	689a      	ldr	r2, [r3, #8]
 800ed06:	68bb      	ldr	r3, [r7, #8]
 800ed08:	4013      	ands	r3, r2
 800ed0a:	687a      	ldr	r2, [r7, #4]
 800ed0c:	429a      	cmp	r2, r3
 800ed0e:	d196      	bne.n	800ec3e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800ed10:	2300      	movs	r3, #0
}
 800ed12:	4618      	mov	r0, r3
 800ed14:	3728      	adds	r7, #40	@ 0x28
 800ed16:	46bd      	mov	sp, r7
 800ed18:	bd80      	pop	{r7, pc}
 800ed1a:	bf00      	nop
 800ed1c:	2000002c 	.word	0x2000002c

0800ed20 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800ed20:	b580      	push	{r7, lr}
 800ed22:	b086      	sub	sp, #24
 800ed24:	af02      	add	r7, sp, #8
 800ed26:	60f8      	str	r0, [r7, #12]
 800ed28:	60b9      	str	r1, [r7, #8]
 800ed2a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ed2c:	68fb      	ldr	r3, [r7, #12]
 800ed2e:	685b      	ldr	r3, [r3, #4]
 800ed30:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800ed34:	d111      	bne.n	800ed5a <SPI_EndRxTransaction+0x3a>
 800ed36:	68fb      	ldr	r3, [r7, #12]
 800ed38:	689b      	ldr	r3, [r3, #8]
 800ed3a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ed3e:	d004      	beq.n	800ed4a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ed40:	68fb      	ldr	r3, [r7, #12]
 800ed42:	689b      	ldr	r3, [r3, #8]
 800ed44:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ed48:	d107      	bne.n	800ed5a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800ed4a:	68fb      	ldr	r3, [r7, #12]
 800ed4c:	681b      	ldr	r3, [r3, #0]
 800ed4e:	681a      	ldr	r2, [r3, #0]
 800ed50:	68fb      	ldr	r3, [r7, #12]
 800ed52:	681b      	ldr	r3, [r3, #0]
 800ed54:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800ed58:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	9300      	str	r3, [sp, #0]
 800ed5e:	68bb      	ldr	r3, [r7, #8]
 800ed60:	2200      	movs	r2, #0
 800ed62:	2180      	movs	r1, #128	@ 0x80
 800ed64:	68f8      	ldr	r0, [r7, #12]
 800ed66:	f7ff febd 	bl	800eae4 <SPI_WaitFlagStateUntilTimeout>
 800ed6a:	4603      	mov	r3, r0
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	d007      	beq.n	800ed80 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ed70:	68fb      	ldr	r3, [r7, #12]
 800ed72:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ed74:	f043 0220 	orr.w	r2, r3, #32
 800ed78:	68fb      	ldr	r3, [r7, #12]
 800ed7a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800ed7c:	2303      	movs	r3, #3
 800ed7e:	e023      	b.n	800edc8 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ed80:	68fb      	ldr	r3, [r7, #12]
 800ed82:	685b      	ldr	r3, [r3, #4]
 800ed84:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800ed88:	d11d      	bne.n	800edc6 <SPI_EndRxTransaction+0xa6>
 800ed8a:	68fb      	ldr	r3, [r7, #12]
 800ed8c:	689b      	ldr	r3, [r3, #8]
 800ed8e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ed92:	d004      	beq.n	800ed9e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ed94:	68fb      	ldr	r3, [r7, #12]
 800ed96:	689b      	ldr	r3, [r3, #8]
 800ed98:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ed9c:	d113      	bne.n	800edc6 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	9300      	str	r3, [sp, #0]
 800eda2:	68bb      	ldr	r3, [r7, #8]
 800eda4:	2200      	movs	r2, #0
 800eda6:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800edaa:	68f8      	ldr	r0, [r7, #12]
 800edac:	f7ff ff22 	bl	800ebf4 <SPI_WaitFifoStateUntilTimeout>
 800edb0:	4603      	mov	r3, r0
 800edb2:	2b00      	cmp	r3, #0
 800edb4:	d007      	beq.n	800edc6 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800edb6:	68fb      	ldr	r3, [r7, #12]
 800edb8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800edba:	f043 0220 	orr.w	r2, r3, #32
 800edbe:	68fb      	ldr	r3, [r7, #12]
 800edc0:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800edc2:	2303      	movs	r3, #3
 800edc4:	e000      	b.n	800edc8 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800edc6:	2300      	movs	r3, #0
}
 800edc8:	4618      	mov	r0, r3
 800edca:	3710      	adds	r7, #16
 800edcc:	46bd      	mov	sp, r7
 800edce:	bd80      	pop	{r7, pc}

0800edd0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800edd0:	b580      	push	{r7, lr}
 800edd2:	b086      	sub	sp, #24
 800edd4:	af02      	add	r7, sp, #8
 800edd6:	60f8      	str	r0, [r7, #12]
 800edd8:	60b9      	str	r1, [r7, #8]
 800edda:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	9300      	str	r3, [sp, #0]
 800ede0:	68bb      	ldr	r3, [r7, #8]
 800ede2:	2200      	movs	r2, #0
 800ede4:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800ede8:	68f8      	ldr	r0, [r7, #12]
 800edea:	f7ff ff03 	bl	800ebf4 <SPI_WaitFifoStateUntilTimeout>
 800edee:	4603      	mov	r3, r0
 800edf0:	2b00      	cmp	r3, #0
 800edf2:	d007      	beq.n	800ee04 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800edf4:	68fb      	ldr	r3, [r7, #12]
 800edf6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800edf8:	f043 0220 	orr.w	r2, r3, #32
 800edfc:	68fb      	ldr	r3, [r7, #12]
 800edfe:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800ee00:	2303      	movs	r3, #3
 800ee02:	e027      	b.n	800ee54 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	9300      	str	r3, [sp, #0]
 800ee08:	68bb      	ldr	r3, [r7, #8]
 800ee0a:	2200      	movs	r2, #0
 800ee0c:	2180      	movs	r1, #128	@ 0x80
 800ee0e:	68f8      	ldr	r0, [r7, #12]
 800ee10:	f7ff fe68 	bl	800eae4 <SPI_WaitFlagStateUntilTimeout>
 800ee14:	4603      	mov	r3, r0
 800ee16:	2b00      	cmp	r3, #0
 800ee18:	d007      	beq.n	800ee2a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ee1a:	68fb      	ldr	r3, [r7, #12]
 800ee1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ee1e:	f043 0220 	orr.w	r2, r3, #32
 800ee22:	68fb      	ldr	r3, [r7, #12]
 800ee24:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800ee26:	2303      	movs	r3, #3
 800ee28:	e014      	b.n	800ee54 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	9300      	str	r3, [sp, #0]
 800ee2e:	68bb      	ldr	r3, [r7, #8]
 800ee30:	2200      	movs	r2, #0
 800ee32:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800ee36:	68f8      	ldr	r0, [r7, #12]
 800ee38:	f7ff fedc 	bl	800ebf4 <SPI_WaitFifoStateUntilTimeout>
 800ee3c:	4603      	mov	r3, r0
 800ee3e:	2b00      	cmp	r3, #0
 800ee40:	d007      	beq.n	800ee52 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ee42:	68fb      	ldr	r3, [r7, #12]
 800ee44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ee46:	f043 0220 	orr.w	r2, r3, #32
 800ee4a:	68fb      	ldr	r3, [r7, #12]
 800ee4c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800ee4e:	2303      	movs	r3, #3
 800ee50:	e000      	b.n	800ee54 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800ee52:	2300      	movs	r3, #0
}
 800ee54:	4618      	mov	r0, r3
 800ee56:	3710      	adds	r7, #16
 800ee58:	46bd      	mov	sp, r7
 800ee5a:	bd80      	pop	{r7, pc}

0800ee5c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ee5c:	b580      	push	{r7, lr}
 800ee5e:	b082      	sub	sp, #8
 800ee60:	af00      	add	r7, sp, #0
 800ee62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	2b00      	cmp	r3, #0
 800ee68:	d101      	bne.n	800ee6e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ee6a:	2301      	movs	r3, #1
 800ee6c:	e049      	b.n	800ef02 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ee74:	b2db      	uxtb	r3, r3
 800ee76:	2b00      	cmp	r3, #0
 800ee78:	d106      	bne.n	800ee88 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	2200      	movs	r2, #0
 800ee7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ee82:	6878      	ldr	r0, [r7, #4]
 800ee84:	f7f7 fe94 	bl	8006bb0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	2202      	movs	r2, #2
 800ee8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	681a      	ldr	r2, [r3, #0]
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	3304      	adds	r3, #4
 800ee98:	4619      	mov	r1, r3
 800ee9a:	4610      	mov	r0, r2
 800ee9c:	f000 fafc 	bl	800f498 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	2201      	movs	r2, #1
 800eea4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	2201      	movs	r2, #1
 800eeac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	2201      	movs	r2, #1
 800eeb4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	2201      	movs	r2, #1
 800eebc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	2201      	movs	r2, #1
 800eec4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	2201      	movs	r2, #1
 800eecc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	2201      	movs	r2, #1
 800eed4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	2201      	movs	r2, #1
 800eedc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	2201      	movs	r2, #1
 800eee4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	2201      	movs	r2, #1
 800eeec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	2201      	movs	r2, #1
 800eef4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	2201      	movs	r2, #1
 800eefc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800ef00:	2300      	movs	r3, #0
}
 800ef02:	4618      	mov	r0, r3
 800ef04:	3708      	adds	r7, #8
 800ef06:	46bd      	mov	sp, r7
 800ef08:	bd80      	pop	{r7, pc}
	...

0800ef0c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800ef0c:	b480      	push	{r7}
 800ef0e:	b085      	sub	sp, #20
 800ef10:	af00      	add	r7, sp, #0
 800ef12:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ef1a:	b2db      	uxtb	r3, r3
 800ef1c:	2b01      	cmp	r3, #1
 800ef1e:	d001      	beq.n	800ef24 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800ef20:	2301      	movs	r3, #1
 800ef22:	e02e      	b.n	800ef82 <HAL_TIM_Base_Start+0x76>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	2202      	movs	r2, #2
 800ef28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	681b      	ldr	r3, [r3, #0]
 800ef30:	4a17      	ldr	r2, [pc, #92]	@ (800ef90 <HAL_TIM_Base_Start+0x84>)
 800ef32:	4293      	cmp	r3, r2
 800ef34:	d004      	beq.n	800ef40 <HAL_TIM_Base_Start+0x34>
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	681b      	ldr	r3, [r3, #0]
 800ef3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ef3e:	d115      	bne.n	800ef6c <HAL_TIM_Base_Start+0x60>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	681b      	ldr	r3, [r3, #0]
 800ef44:	689a      	ldr	r2, [r3, #8]
 800ef46:	4b13      	ldr	r3, [pc, #76]	@ (800ef94 <HAL_TIM_Base_Start+0x88>)
 800ef48:	4013      	ands	r3, r2
 800ef4a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ef4c:	68fb      	ldr	r3, [r7, #12]
 800ef4e:	2b06      	cmp	r3, #6
 800ef50:	d015      	beq.n	800ef7e <HAL_TIM_Base_Start+0x72>
 800ef52:	68fb      	ldr	r3, [r7, #12]
 800ef54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ef58:	d011      	beq.n	800ef7e <HAL_TIM_Base_Start+0x72>
    {
      __HAL_TIM_ENABLE(htim);
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	681b      	ldr	r3, [r3, #0]
 800ef5e:	681a      	ldr	r2, [r3, #0]
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	681b      	ldr	r3, [r3, #0]
 800ef64:	f042 0201 	orr.w	r2, r2, #1
 800ef68:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ef6a:	e008      	b.n	800ef7e <HAL_TIM_Base_Start+0x72>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	681b      	ldr	r3, [r3, #0]
 800ef70:	681a      	ldr	r2, [r3, #0]
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	681b      	ldr	r3, [r3, #0]
 800ef76:	f042 0201 	orr.w	r2, r2, #1
 800ef7a:	601a      	str	r2, [r3, #0]
 800ef7c:	e000      	b.n	800ef80 <HAL_TIM_Base_Start+0x74>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ef7e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ef80:	2300      	movs	r3, #0
}
 800ef82:	4618      	mov	r0, r3
 800ef84:	3714      	adds	r7, #20
 800ef86:	46bd      	mov	sp, r7
 800ef88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef8c:	4770      	bx	lr
 800ef8e:	bf00      	nop
 800ef90:	40012c00 	.word	0x40012c00
 800ef94:	00010007 	.word	0x00010007

0800ef98 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ef98:	b480      	push	{r7}
 800ef9a:	b085      	sub	sp, #20
 800ef9c:	af00      	add	r7, sp, #0
 800ef9e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800efa6:	b2db      	uxtb	r3, r3
 800efa8:	2b01      	cmp	r3, #1
 800efaa:	d001      	beq.n	800efb0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800efac:	2301      	movs	r3, #1
 800efae:	e036      	b.n	800f01e <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	2202      	movs	r2, #2
 800efb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	681b      	ldr	r3, [r3, #0]
 800efbc:	68da      	ldr	r2, [r3, #12]
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	681b      	ldr	r3, [r3, #0]
 800efc2:	f042 0201 	orr.w	r2, r2, #1
 800efc6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	681b      	ldr	r3, [r3, #0]
 800efcc:	4a17      	ldr	r2, [pc, #92]	@ (800f02c <HAL_TIM_Base_Start_IT+0x94>)
 800efce:	4293      	cmp	r3, r2
 800efd0:	d004      	beq.n	800efdc <HAL_TIM_Base_Start_IT+0x44>
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	681b      	ldr	r3, [r3, #0]
 800efd6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800efda:	d115      	bne.n	800f008 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	681b      	ldr	r3, [r3, #0]
 800efe0:	689a      	ldr	r2, [r3, #8]
 800efe2:	4b13      	ldr	r3, [pc, #76]	@ (800f030 <HAL_TIM_Base_Start_IT+0x98>)
 800efe4:	4013      	ands	r3, r2
 800efe6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800efe8:	68fb      	ldr	r3, [r7, #12]
 800efea:	2b06      	cmp	r3, #6
 800efec:	d015      	beq.n	800f01a <HAL_TIM_Base_Start_IT+0x82>
 800efee:	68fb      	ldr	r3, [r7, #12]
 800eff0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800eff4:	d011      	beq.n	800f01a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	681b      	ldr	r3, [r3, #0]
 800effa:	681a      	ldr	r2, [r3, #0]
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	681b      	ldr	r3, [r3, #0]
 800f000:	f042 0201 	orr.w	r2, r2, #1
 800f004:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f006:	e008      	b.n	800f01a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	681b      	ldr	r3, [r3, #0]
 800f00c:	681a      	ldr	r2, [r3, #0]
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	681b      	ldr	r3, [r3, #0]
 800f012:	f042 0201 	orr.w	r2, r2, #1
 800f016:	601a      	str	r2, [r3, #0]
 800f018:	e000      	b.n	800f01c <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f01a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800f01c:	2300      	movs	r3, #0
}
 800f01e:	4618      	mov	r0, r3
 800f020:	3714      	adds	r7, #20
 800f022:	46bd      	mov	sp, r7
 800f024:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f028:	4770      	bx	lr
 800f02a:	bf00      	nop
 800f02c:	40012c00 	.word	0x40012c00
 800f030:	00010007 	.word	0x00010007

0800f034 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800f034:	b480      	push	{r7}
 800f036:	b083      	sub	sp, #12
 800f038:	af00      	add	r7, sp, #0
 800f03a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	681b      	ldr	r3, [r3, #0]
 800f040:	68da      	ldr	r2, [r3, #12]
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	681b      	ldr	r3, [r3, #0]
 800f046:	f022 0201 	bic.w	r2, r2, #1
 800f04a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	681b      	ldr	r3, [r3, #0]
 800f050:	6a1a      	ldr	r2, [r3, #32]
 800f052:	f241 1311 	movw	r3, #4369	@ 0x1111
 800f056:	4013      	ands	r3, r2
 800f058:	2b00      	cmp	r3, #0
 800f05a:	d10f      	bne.n	800f07c <HAL_TIM_Base_Stop_IT+0x48>
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	681b      	ldr	r3, [r3, #0]
 800f060:	6a1a      	ldr	r2, [r3, #32]
 800f062:	f240 4344 	movw	r3, #1092	@ 0x444
 800f066:	4013      	ands	r3, r2
 800f068:	2b00      	cmp	r3, #0
 800f06a:	d107      	bne.n	800f07c <HAL_TIM_Base_Stop_IT+0x48>
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	681b      	ldr	r3, [r3, #0]
 800f070:	681a      	ldr	r2, [r3, #0]
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	681b      	ldr	r3, [r3, #0]
 800f076:	f022 0201 	bic.w	r2, r2, #1
 800f07a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	2201      	movs	r2, #1
 800f080:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800f084:	2300      	movs	r3, #0
}
 800f086:	4618      	mov	r0, r3
 800f088:	370c      	adds	r7, #12
 800f08a:	46bd      	mov	sp, r7
 800f08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f090:	4770      	bx	lr

0800f092 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800f092:	b580      	push	{r7, lr}
 800f094:	b084      	sub	sp, #16
 800f096:	af00      	add	r7, sp, #0
 800f098:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	681b      	ldr	r3, [r3, #0]
 800f09e:	68db      	ldr	r3, [r3, #12]
 800f0a0:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	681b      	ldr	r3, [r3, #0]
 800f0a6:	691b      	ldr	r3, [r3, #16]
 800f0a8:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800f0aa:	68bb      	ldr	r3, [r7, #8]
 800f0ac:	f003 0302 	and.w	r3, r3, #2
 800f0b0:	2b00      	cmp	r3, #0
 800f0b2:	d020      	beq.n	800f0f6 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800f0b4:	68fb      	ldr	r3, [r7, #12]
 800f0b6:	f003 0302 	and.w	r3, r3, #2
 800f0ba:	2b00      	cmp	r3, #0
 800f0bc:	d01b      	beq.n	800f0f6 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	681b      	ldr	r3, [r3, #0]
 800f0c2:	f06f 0202 	mvn.w	r2, #2
 800f0c6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	2201      	movs	r2, #1
 800f0cc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	681b      	ldr	r3, [r3, #0]
 800f0d2:	699b      	ldr	r3, [r3, #24]
 800f0d4:	f003 0303 	and.w	r3, r3, #3
 800f0d8:	2b00      	cmp	r3, #0
 800f0da:	d003      	beq.n	800f0e4 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800f0dc:	6878      	ldr	r0, [r7, #4]
 800f0de:	f000 f9bc 	bl	800f45a <HAL_TIM_IC_CaptureCallback>
 800f0e2:	e005      	b.n	800f0f0 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800f0e4:	6878      	ldr	r0, [r7, #4]
 800f0e6:	f000 f9ae 	bl	800f446 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f0ea:	6878      	ldr	r0, [r7, #4]
 800f0ec:	f000 f9bf 	bl	800f46e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	2200      	movs	r2, #0
 800f0f4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800f0f6:	68bb      	ldr	r3, [r7, #8]
 800f0f8:	f003 0304 	and.w	r3, r3, #4
 800f0fc:	2b00      	cmp	r3, #0
 800f0fe:	d020      	beq.n	800f142 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800f100:	68fb      	ldr	r3, [r7, #12]
 800f102:	f003 0304 	and.w	r3, r3, #4
 800f106:	2b00      	cmp	r3, #0
 800f108:	d01b      	beq.n	800f142 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	681b      	ldr	r3, [r3, #0]
 800f10e:	f06f 0204 	mvn.w	r2, #4
 800f112:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	2202      	movs	r2, #2
 800f118:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	681b      	ldr	r3, [r3, #0]
 800f11e:	699b      	ldr	r3, [r3, #24]
 800f120:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800f124:	2b00      	cmp	r3, #0
 800f126:	d003      	beq.n	800f130 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f128:	6878      	ldr	r0, [r7, #4]
 800f12a:	f000 f996 	bl	800f45a <HAL_TIM_IC_CaptureCallback>
 800f12e:	e005      	b.n	800f13c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f130:	6878      	ldr	r0, [r7, #4]
 800f132:	f000 f988 	bl	800f446 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f136:	6878      	ldr	r0, [r7, #4]
 800f138:	f000 f999 	bl	800f46e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	2200      	movs	r2, #0
 800f140:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800f142:	68bb      	ldr	r3, [r7, #8]
 800f144:	f003 0308 	and.w	r3, r3, #8
 800f148:	2b00      	cmp	r3, #0
 800f14a:	d020      	beq.n	800f18e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800f14c:	68fb      	ldr	r3, [r7, #12]
 800f14e:	f003 0308 	and.w	r3, r3, #8
 800f152:	2b00      	cmp	r3, #0
 800f154:	d01b      	beq.n	800f18e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	681b      	ldr	r3, [r3, #0]
 800f15a:	f06f 0208 	mvn.w	r2, #8
 800f15e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	2204      	movs	r2, #4
 800f164:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	681b      	ldr	r3, [r3, #0]
 800f16a:	69db      	ldr	r3, [r3, #28]
 800f16c:	f003 0303 	and.w	r3, r3, #3
 800f170:	2b00      	cmp	r3, #0
 800f172:	d003      	beq.n	800f17c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f174:	6878      	ldr	r0, [r7, #4]
 800f176:	f000 f970 	bl	800f45a <HAL_TIM_IC_CaptureCallback>
 800f17a:	e005      	b.n	800f188 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f17c:	6878      	ldr	r0, [r7, #4]
 800f17e:	f000 f962 	bl	800f446 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f182:	6878      	ldr	r0, [r7, #4]
 800f184:	f000 f973 	bl	800f46e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	2200      	movs	r2, #0
 800f18c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800f18e:	68bb      	ldr	r3, [r7, #8]
 800f190:	f003 0310 	and.w	r3, r3, #16
 800f194:	2b00      	cmp	r3, #0
 800f196:	d020      	beq.n	800f1da <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800f198:	68fb      	ldr	r3, [r7, #12]
 800f19a:	f003 0310 	and.w	r3, r3, #16
 800f19e:	2b00      	cmp	r3, #0
 800f1a0:	d01b      	beq.n	800f1da <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	681b      	ldr	r3, [r3, #0]
 800f1a6:	f06f 0210 	mvn.w	r2, #16
 800f1aa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	2208      	movs	r2, #8
 800f1b0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	681b      	ldr	r3, [r3, #0]
 800f1b6:	69db      	ldr	r3, [r3, #28]
 800f1b8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800f1bc:	2b00      	cmp	r3, #0
 800f1be:	d003      	beq.n	800f1c8 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f1c0:	6878      	ldr	r0, [r7, #4]
 800f1c2:	f000 f94a 	bl	800f45a <HAL_TIM_IC_CaptureCallback>
 800f1c6:	e005      	b.n	800f1d4 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f1c8:	6878      	ldr	r0, [r7, #4]
 800f1ca:	f000 f93c 	bl	800f446 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f1ce:	6878      	ldr	r0, [r7, #4]
 800f1d0:	f000 f94d 	bl	800f46e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	2200      	movs	r2, #0
 800f1d8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800f1da:	68bb      	ldr	r3, [r7, #8]
 800f1dc:	f003 0301 	and.w	r3, r3, #1
 800f1e0:	2b00      	cmp	r3, #0
 800f1e2:	d00c      	beq.n	800f1fe <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800f1e4:	68fb      	ldr	r3, [r7, #12]
 800f1e6:	f003 0301 	and.w	r3, r3, #1
 800f1ea:	2b00      	cmp	r3, #0
 800f1ec:	d007      	beq.n	800f1fe <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	681b      	ldr	r3, [r3, #0]
 800f1f2:	f06f 0201 	mvn.w	r2, #1
 800f1f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800f1f8:	6878      	ldr	r0, [r7, #4]
 800f1fa:	f000 f91a 	bl	800f432 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800f1fe:	68bb      	ldr	r3, [r7, #8]
 800f200:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f204:	2b00      	cmp	r3, #0
 800f206:	d104      	bne.n	800f212 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800f208:	68bb      	ldr	r3, [r7, #8]
 800f20a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800f20e:	2b00      	cmp	r3, #0
 800f210:	d00c      	beq.n	800f22c <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800f212:	68fb      	ldr	r3, [r7, #12]
 800f214:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f218:	2b00      	cmp	r3, #0
 800f21a:	d007      	beq.n	800f22c <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	681b      	ldr	r3, [r3, #0]
 800f220:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800f224:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800f226:	6878      	ldr	r0, [r7, #4]
 800f228:	f000 faac 	bl	800f784 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800f22c:	68bb      	ldr	r3, [r7, #8]
 800f22e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f232:	2b00      	cmp	r3, #0
 800f234:	d00c      	beq.n	800f250 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800f236:	68fb      	ldr	r3, [r7, #12]
 800f238:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f23c:	2b00      	cmp	r3, #0
 800f23e:	d007      	beq.n	800f250 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	681b      	ldr	r3, [r3, #0]
 800f244:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800f248:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800f24a:	6878      	ldr	r0, [r7, #4]
 800f24c:	f000 faa4 	bl	800f798 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800f250:	68bb      	ldr	r3, [r7, #8]
 800f252:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f256:	2b00      	cmp	r3, #0
 800f258:	d00c      	beq.n	800f274 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800f25a:	68fb      	ldr	r3, [r7, #12]
 800f25c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f260:	2b00      	cmp	r3, #0
 800f262:	d007      	beq.n	800f274 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	681b      	ldr	r3, [r3, #0]
 800f268:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800f26c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800f26e:	6878      	ldr	r0, [r7, #4]
 800f270:	f000 f907 	bl	800f482 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800f274:	68bb      	ldr	r3, [r7, #8]
 800f276:	f003 0320 	and.w	r3, r3, #32
 800f27a:	2b00      	cmp	r3, #0
 800f27c:	d00c      	beq.n	800f298 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800f27e:	68fb      	ldr	r3, [r7, #12]
 800f280:	f003 0320 	and.w	r3, r3, #32
 800f284:	2b00      	cmp	r3, #0
 800f286:	d007      	beq.n	800f298 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	681b      	ldr	r3, [r3, #0]
 800f28c:	f06f 0220 	mvn.w	r2, #32
 800f290:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800f292:	6878      	ldr	r0, [r7, #4]
 800f294:	f000 fa6c 	bl	800f770 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800f298:	bf00      	nop
 800f29a:	3710      	adds	r7, #16
 800f29c:	46bd      	mov	sp, r7
 800f29e:	bd80      	pop	{r7, pc}

0800f2a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800f2a0:	b580      	push	{r7, lr}
 800f2a2:	b084      	sub	sp, #16
 800f2a4:	af00      	add	r7, sp, #0
 800f2a6:	6078      	str	r0, [r7, #4]
 800f2a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f2aa:	2300      	movs	r3, #0
 800f2ac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f2b4:	2b01      	cmp	r3, #1
 800f2b6:	d101      	bne.n	800f2bc <HAL_TIM_ConfigClockSource+0x1c>
 800f2b8:	2302      	movs	r3, #2
 800f2ba:	e0b6      	b.n	800f42a <HAL_TIM_ConfigClockSource+0x18a>
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	2201      	movs	r2, #1
 800f2c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	2202      	movs	r2, #2
 800f2c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	681b      	ldr	r3, [r3, #0]
 800f2d0:	689b      	ldr	r3, [r3, #8]
 800f2d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800f2d4:	68bb      	ldr	r3, [r7, #8]
 800f2d6:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800f2da:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800f2de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f2e0:	68bb      	ldr	r3, [r7, #8]
 800f2e2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800f2e6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	681b      	ldr	r3, [r3, #0]
 800f2ec:	68ba      	ldr	r2, [r7, #8]
 800f2ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800f2f0:	683b      	ldr	r3, [r7, #0]
 800f2f2:	681b      	ldr	r3, [r3, #0]
 800f2f4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f2f8:	d03e      	beq.n	800f378 <HAL_TIM_ConfigClockSource+0xd8>
 800f2fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f2fe:	f200 8087 	bhi.w	800f410 <HAL_TIM_ConfigClockSource+0x170>
 800f302:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f306:	f000 8086 	beq.w	800f416 <HAL_TIM_ConfigClockSource+0x176>
 800f30a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f30e:	d87f      	bhi.n	800f410 <HAL_TIM_ConfigClockSource+0x170>
 800f310:	2b70      	cmp	r3, #112	@ 0x70
 800f312:	d01a      	beq.n	800f34a <HAL_TIM_ConfigClockSource+0xaa>
 800f314:	2b70      	cmp	r3, #112	@ 0x70
 800f316:	d87b      	bhi.n	800f410 <HAL_TIM_ConfigClockSource+0x170>
 800f318:	2b60      	cmp	r3, #96	@ 0x60
 800f31a:	d050      	beq.n	800f3be <HAL_TIM_ConfigClockSource+0x11e>
 800f31c:	2b60      	cmp	r3, #96	@ 0x60
 800f31e:	d877      	bhi.n	800f410 <HAL_TIM_ConfigClockSource+0x170>
 800f320:	2b50      	cmp	r3, #80	@ 0x50
 800f322:	d03c      	beq.n	800f39e <HAL_TIM_ConfigClockSource+0xfe>
 800f324:	2b50      	cmp	r3, #80	@ 0x50
 800f326:	d873      	bhi.n	800f410 <HAL_TIM_ConfigClockSource+0x170>
 800f328:	2b40      	cmp	r3, #64	@ 0x40
 800f32a:	d058      	beq.n	800f3de <HAL_TIM_ConfigClockSource+0x13e>
 800f32c:	2b40      	cmp	r3, #64	@ 0x40
 800f32e:	d86f      	bhi.n	800f410 <HAL_TIM_ConfigClockSource+0x170>
 800f330:	2b30      	cmp	r3, #48	@ 0x30
 800f332:	d064      	beq.n	800f3fe <HAL_TIM_ConfigClockSource+0x15e>
 800f334:	2b30      	cmp	r3, #48	@ 0x30
 800f336:	d86b      	bhi.n	800f410 <HAL_TIM_ConfigClockSource+0x170>
 800f338:	2b20      	cmp	r3, #32
 800f33a:	d060      	beq.n	800f3fe <HAL_TIM_ConfigClockSource+0x15e>
 800f33c:	2b20      	cmp	r3, #32
 800f33e:	d867      	bhi.n	800f410 <HAL_TIM_ConfigClockSource+0x170>
 800f340:	2b00      	cmp	r3, #0
 800f342:	d05c      	beq.n	800f3fe <HAL_TIM_ConfigClockSource+0x15e>
 800f344:	2b10      	cmp	r3, #16
 800f346:	d05a      	beq.n	800f3fe <HAL_TIM_ConfigClockSource+0x15e>
 800f348:	e062      	b.n	800f410 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800f34e:	683b      	ldr	r3, [r7, #0]
 800f350:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800f352:	683b      	ldr	r3, [r7, #0]
 800f354:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800f356:	683b      	ldr	r3, [r7, #0]
 800f358:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800f35a:	f000 f989 	bl	800f670 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	681b      	ldr	r3, [r3, #0]
 800f362:	689b      	ldr	r3, [r3, #8]
 800f364:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800f366:	68bb      	ldr	r3, [r7, #8]
 800f368:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800f36c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	681b      	ldr	r3, [r3, #0]
 800f372:	68ba      	ldr	r2, [r7, #8]
 800f374:	609a      	str	r2, [r3, #8]
      break;
 800f376:	e04f      	b.n	800f418 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800f37c:	683b      	ldr	r3, [r7, #0]
 800f37e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800f380:	683b      	ldr	r3, [r7, #0]
 800f382:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800f384:	683b      	ldr	r3, [r7, #0]
 800f386:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800f388:	f000 f972 	bl	800f670 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	681b      	ldr	r3, [r3, #0]
 800f390:	689a      	ldr	r2, [r3, #8]
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	681b      	ldr	r3, [r3, #0]
 800f396:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800f39a:	609a      	str	r2, [r3, #8]
      break;
 800f39c:	e03c      	b.n	800f418 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800f3a2:	683b      	ldr	r3, [r7, #0]
 800f3a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800f3a6:	683b      	ldr	r3, [r7, #0]
 800f3a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800f3aa:	461a      	mov	r2, r3
 800f3ac:	f000 f8e4 	bl	800f578 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	681b      	ldr	r3, [r3, #0]
 800f3b4:	2150      	movs	r1, #80	@ 0x50
 800f3b6:	4618      	mov	r0, r3
 800f3b8:	f000 f93d 	bl	800f636 <TIM_ITRx_SetConfig>
      break;
 800f3bc:	e02c      	b.n	800f418 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800f3c2:	683b      	ldr	r3, [r7, #0]
 800f3c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800f3c6:	683b      	ldr	r3, [r7, #0]
 800f3c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800f3ca:	461a      	mov	r2, r3
 800f3cc:	f000 f903 	bl	800f5d6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	681b      	ldr	r3, [r3, #0]
 800f3d4:	2160      	movs	r1, #96	@ 0x60
 800f3d6:	4618      	mov	r0, r3
 800f3d8:	f000 f92d 	bl	800f636 <TIM_ITRx_SetConfig>
      break;
 800f3dc:	e01c      	b.n	800f418 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800f3e2:	683b      	ldr	r3, [r7, #0]
 800f3e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800f3e6:	683b      	ldr	r3, [r7, #0]
 800f3e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800f3ea:	461a      	mov	r2, r3
 800f3ec:	f000 f8c4 	bl	800f578 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	681b      	ldr	r3, [r3, #0]
 800f3f4:	2140      	movs	r1, #64	@ 0x40
 800f3f6:	4618      	mov	r0, r3
 800f3f8:	f000 f91d 	bl	800f636 <TIM_ITRx_SetConfig>
      break;
 800f3fc:	e00c      	b.n	800f418 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	681a      	ldr	r2, [r3, #0]
 800f402:	683b      	ldr	r3, [r7, #0]
 800f404:	681b      	ldr	r3, [r3, #0]
 800f406:	4619      	mov	r1, r3
 800f408:	4610      	mov	r0, r2
 800f40a:	f000 f914 	bl	800f636 <TIM_ITRx_SetConfig>
      break;
 800f40e:	e003      	b.n	800f418 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800f410:	2301      	movs	r3, #1
 800f412:	73fb      	strb	r3, [r7, #15]
      break;
 800f414:	e000      	b.n	800f418 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800f416:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	2201      	movs	r2, #1
 800f41c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	2200      	movs	r2, #0
 800f424:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800f428:	7bfb      	ldrb	r3, [r7, #15]
}
 800f42a:	4618      	mov	r0, r3
 800f42c:	3710      	adds	r7, #16
 800f42e:	46bd      	mov	sp, r7
 800f430:	bd80      	pop	{r7, pc}

0800f432 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800f432:	b480      	push	{r7}
 800f434:	b083      	sub	sp, #12
 800f436:	af00      	add	r7, sp, #0
 800f438:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800f43a:	bf00      	nop
 800f43c:	370c      	adds	r7, #12
 800f43e:	46bd      	mov	sp, r7
 800f440:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f444:	4770      	bx	lr

0800f446 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800f446:	b480      	push	{r7}
 800f448:	b083      	sub	sp, #12
 800f44a:	af00      	add	r7, sp, #0
 800f44c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800f44e:	bf00      	nop
 800f450:	370c      	adds	r7, #12
 800f452:	46bd      	mov	sp, r7
 800f454:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f458:	4770      	bx	lr

0800f45a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800f45a:	b480      	push	{r7}
 800f45c:	b083      	sub	sp, #12
 800f45e:	af00      	add	r7, sp, #0
 800f460:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800f462:	bf00      	nop
 800f464:	370c      	adds	r7, #12
 800f466:	46bd      	mov	sp, r7
 800f468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f46c:	4770      	bx	lr

0800f46e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800f46e:	b480      	push	{r7}
 800f470:	b083      	sub	sp, #12
 800f472:	af00      	add	r7, sp, #0
 800f474:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800f476:	bf00      	nop
 800f478:	370c      	adds	r7, #12
 800f47a:	46bd      	mov	sp, r7
 800f47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f480:	4770      	bx	lr

0800f482 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800f482:	b480      	push	{r7}
 800f484:	b083      	sub	sp, #12
 800f486:	af00      	add	r7, sp, #0
 800f488:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800f48a:	bf00      	nop
 800f48c:	370c      	adds	r7, #12
 800f48e:	46bd      	mov	sp, r7
 800f490:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f494:	4770      	bx	lr
	...

0800f498 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800f498:	b480      	push	{r7}
 800f49a:	b085      	sub	sp, #20
 800f49c:	af00      	add	r7, sp, #0
 800f49e:	6078      	str	r0, [r7, #4]
 800f4a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	681b      	ldr	r3, [r3, #0]
 800f4a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	4a30      	ldr	r2, [pc, #192]	@ (800f56c <TIM_Base_SetConfig+0xd4>)
 800f4ac:	4293      	cmp	r3, r2
 800f4ae:	d003      	beq.n	800f4b8 <TIM_Base_SetConfig+0x20>
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f4b6:	d108      	bne.n	800f4ca <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f4b8:	68fb      	ldr	r3, [r7, #12]
 800f4ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f4be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f4c0:	683b      	ldr	r3, [r7, #0]
 800f4c2:	685b      	ldr	r3, [r3, #4]
 800f4c4:	68fa      	ldr	r2, [r7, #12]
 800f4c6:	4313      	orrs	r3, r2
 800f4c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	4a27      	ldr	r2, [pc, #156]	@ (800f56c <TIM_Base_SetConfig+0xd4>)
 800f4ce:	4293      	cmp	r3, r2
 800f4d0:	d00b      	beq.n	800f4ea <TIM_Base_SetConfig+0x52>
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f4d8:	d007      	beq.n	800f4ea <TIM_Base_SetConfig+0x52>
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	4a24      	ldr	r2, [pc, #144]	@ (800f570 <TIM_Base_SetConfig+0xd8>)
 800f4de:	4293      	cmp	r3, r2
 800f4e0:	d003      	beq.n	800f4ea <TIM_Base_SetConfig+0x52>
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	4a23      	ldr	r2, [pc, #140]	@ (800f574 <TIM_Base_SetConfig+0xdc>)
 800f4e6:	4293      	cmp	r3, r2
 800f4e8:	d108      	bne.n	800f4fc <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f4ea:	68fb      	ldr	r3, [r7, #12]
 800f4ec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800f4f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f4f2:	683b      	ldr	r3, [r7, #0]
 800f4f4:	68db      	ldr	r3, [r3, #12]
 800f4f6:	68fa      	ldr	r2, [r7, #12]
 800f4f8:	4313      	orrs	r3, r2
 800f4fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f4fc:	68fb      	ldr	r3, [r7, #12]
 800f4fe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800f502:	683b      	ldr	r3, [r7, #0]
 800f504:	695b      	ldr	r3, [r3, #20]
 800f506:	4313      	orrs	r3, r2
 800f508:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	68fa      	ldr	r2, [r7, #12]
 800f50e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f510:	683b      	ldr	r3, [r7, #0]
 800f512:	689a      	ldr	r2, [r3, #8]
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f518:	683b      	ldr	r3, [r7, #0]
 800f51a:	681a      	ldr	r2, [r3, #0]
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	4a12      	ldr	r2, [pc, #72]	@ (800f56c <TIM_Base_SetConfig+0xd4>)
 800f524:	4293      	cmp	r3, r2
 800f526:	d007      	beq.n	800f538 <TIM_Base_SetConfig+0xa0>
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	4a11      	ldr	r2, [pc, #68]	@ (800f570 <TIM_Base_SetConfig+0xd8>)
 800f52c:	4293      	cmp	r3, r2
 800f52e:	d003      	beq.n	800f538 <TIM_Base_SetConfig+0xa0>
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	4a10      	ldr	r2, [pc, #64]	@ (800f574 <TIM_Base_SetConfig+0xdc>)
 800f534:	4293      	cmp	r3, r2
 800f536:	d103      	bne.n	800f540 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f538:	683b      	ldr	r3, [r7, #0]
 800f53a:	691a      	ldr	r2, [r3, #16]
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	2201      	movs	r2, #1
 800f544:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	691b      	ldr	r3, [r3, #16]
 800f54a:	f003 0301 	and.w	r3, r3, #1
 800f54e:	2b01      	cmp	r3, #1
 800f550:	d105      	bne.n	800f55e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	691b      	ldr	r3, [r3, #16]
 800f556:	f023 0201 	bic.w	r2, r3, #1
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	611a      	str	r2, [r3, #16]
  }
}
 800f55e:	bf00      	nop
 800f560:	3714      	adds	r7, #20
 800f562:	46bd      	mov	sp, r7
 800f564:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f568:	4770      	bx	lr
 800f56a:	bf00      	nop
 800f56c:	40012c00 	.word	0x40012c00
 800f570:	40014400 	.word	0x40014400
 800f574:	40014800 	.word	0x40014800

0800f578 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f578:	b480      	push	{r7}
 800f57a:	b087      	sub	sp, #28
 800f57c:	af00      	add	r7, sp, #0
 800f57e:	60f8      	str	r0, [r7, #12]
 800f580:	60b9      	str	r1, [r7, #8]
 800f582:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800f584:	68fb      	ldr	r3, [r7, #12]
 800f586:	6a1b      	ldr	r3, [r3, #32]
 800f588:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f58a:	68fb      	ldr	r3, [r7, #12]
 800f58c:	6a1b      	ldr	r3, [r3, #32]
 800f58e:	f023 0201 	bic.w	r2, r3, #1
 800f592:	68fb      	ldr	r3, [r7, #12]
 800f594:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f596:	68fb      	ldr	r3, [r7, #12]
 800f598:	699b      	ldr	r3, [r3, #24]
 800f59a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800f59c:	693b      	ldr	r3, [r7, #16]
 800f59e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800f5a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	011b      	lsls	r3, r3, #4
 800f5a8:	693a      	ldr	r2, [r7, #16]
 800f5aa:	4313      	orrs	r3, r2
 800f5ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800f5ae:	697b      	ldr	r3, [r7, #20]
 800f5b0:	f023 030a 	bic.w	r3, r3, #10
 800f5b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800f5b6:	697a      	ldr	r2, [r7, #20]
 800f5b8:	68bb      	ldr	r3, [r7, #8]
 800f5ba:	4313      	orrs	r3, r2
 800f5bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800f5be:	68fb      	ldr	r3, [r7, #12]
 800f5c0:	693a      	ldr	r2, [r7, #16]
 800f5c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f5c4:	68fb      	ldr	r3, [r7, #12]
 800f5c6:	697a      	ldr	r2, [r7, #20]
 800f5c8:	621a      	str	r2, [r3, #32]
}
 800f5ca:	bf00      	nop
 800f5cc:	371c      	adds	r7, #28
 800f5ce:	46bd      	mov	sp, r7
 800f5d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5d4:	4770      	bx	lr

0800f5d6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f5d6:	b480      	push	{r7}
 800f5d8:	b087      	sub	sp, #28
 800f5da:	af00      	add	r7, sp, #0
 800f5dc:	60f8      	str	r0, [r7, #12]
 800f5de:	60b9      	str	r1, [r7, #8]
 800f5e0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800f5e2:	68fb      	ldr	r3, [r7, #12]
 800f5e4:	6a1b      	ldr	r3, [r3, #32]
 800f5e6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f5e8:	68fb      	ldr	r3, [r7, #12]
 800f5ea:	6a1b      	ldr	r3, [r3, #32]
 800f5ec:	f023 0210 	bic.w	r2, r3, #16
 800f5f0:	68fb      	ldr	r3, [r7, #12]
 800f5f2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f5f4:	68fb      	ldr	r3, [r7, #12]
 800f5f6:	699b      	ldr	r3, [r3, #24]
 800f5f8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800f5fa:	693b      	ldr	r3, [r7, #16]
 800f5fc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800f600:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	031b      	lsls	r3, r3, #12
 800f606:	693a      	ldr	r2, [r7, #16]
 800f608:	4313      	orrs	r3, r2
 800f60a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800f60c:	697b      	ldr	r3, [r7, #20]
 800f60e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800f612:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800f614:	68bb      	ldr	r3, [r7, #8]
 800f616:	011b      	lsls	r3, r3, #4
 800f618:	697a      	ldr	r2, [r7, #20]
 800f61a:	4313      	orrs	r3, r2
 800f61c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800f61e:	68fb      	ldr	r3, [r7, #12]
 800f620:	693a      	ldr	r2, [r7, #16]
 800f622:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f624:	68fb      	ldr	r3, [r7, #12]
 800f626:	697a      	ldr	r2, [r7, #20]
 800f628:	621a      	str	r2, [r3, #32]
}
 800f62a:	bf00      	nop
 800f62c:	371c      	adds	r7, #28
 800f62e:	46bd      	mov	sp, r7
 800f630:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f634:	4770      	bx	lr

0800f636 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800f636:	b480      	push	{r7}
 800f638:	b085      	sub	sp, #20
 800f63a:	af00      	add	r7, sp, #0
 800f63c:	6078      	str	r0, [r7, #4]
 800f63e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	689b      	ldr	r3, [r3, #8]
 800f644:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800f646:	68fb      	ldr	r3, [r7, #12]
 800f648:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800f64c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f650:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800f652:	683a      	ldr	r2, [r7, #0]
 800f654:	68fb      	ldr	r3, [r7, #12]
 800f656:	4313      	orrs	r3, r2
 800f658:	f043 0307 	orr.w	r3, r3, #7
 800f65c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	68fa      	ldr	r2, [r7, #12]
 800f662:	609a      	str	r2, [r3, #8]
}
 800f664:	bf00      	nop
 800f666:	3714      	adds	r7, #20
 800f668:	46bd      	mov	sp, r7
 800f66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f66e:	4770      	bx	lr

0800f670 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800f670:	b480      	push	{r7}
 800f672:	b087      	sub	sp, #28
 800f674:	af00      	add	r7, sp, #0
 800f676:	60f8      	str	r0, [r7, #12]
 800f678:	60b9      	str	r1, [r7, #8]
 800f67a:	607a      	str	r2, [r7, #4]
 800f67c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800f67e:	68fb      	ldr	r3, [r7, #12]
 800f680:	689b      	ldr	r3, [r3, #8]
 800f682:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f684:	697b      	ldr	r3, [r7, #20]
 800f686:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800f68a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800f68c:	683b      	ldr	r3, [r7, #0]
 800f68e:	021a      	lsls	r2, r3, #8
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	431a      	orrs	r2, r3
 800f694:	68bb      	ldr	r3, [r7, #8]
 800f696:	4313      	orrs	r3, r2
 800f698:	697a      	ldr	r2, [r7, #20]
 800f69a:	4313      	orrs	r3, r2
 800f69c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f69e:	68fb      	ldr	r3, [r7, #12]
 800f6a0:	697a      	ldr	r2, [r7, #20]
 800f6a2:	609a      	str	r2, [r3, #8]
}
 800f6a4:	bf00      	nop
 800f6a6:	371c      	adds	r7, #28
 800f6a8:	46bd      	mov	sp, r7
 800f6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ae:	4770      	bx	lr

0800f6b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800f6b0:	b480      	push	{r7}
 800f6b2:	b085      	sub	sp, #20
 800f6b4:	af00      	add	r7, sp, #0
 800f6b6:	6078      	str	r0, [r7, #4]
 800f6b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f6c0:	2b01      	cmp	r3, #1
 800f6c2:	d101      	bne.n	800f6c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800f6c4:	2302      	movs	r3, #2
 800f6c6:	e04a      	b.n	800f75e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	2201      	movs	r2, #1
 800f6cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	2202      	movs	r2, #2
 800f6d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	681b      	ldr	r3, [r3, #0]
 800f6dc:	685b      	ldr	r3, [r3, #4]
 800f6de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	681b      	ldr	r3, [r3, #0]
 800f6e4:	689b      	ldr	r3, [r3, #8]
 800f6e6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	681b      	ldr	r3, [r3, #0]
 800f6ec:	4a1f      	ldr	r2, [pc, #124]	@ (800f76c <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800f6ee:	4293      	cmp	r3, r2
 800f6f0:	d108      	bne.n	800f704 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800f6f2:	68fb      	ldr	r3, [r7, #12]
 800f6f4:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800f6f8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800f6fa:	683b      	ldr	r3, [r7, #0]
 800f6fc:	685b      	ldr	r3, [r3, #4]
 800f6fe:	68fa      	ldr	r2, [r7, #12]
 800f700:	4313      	orrs	r3, r2
 800f702:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800f704:	68fb      	ldr	r3, [r7, #12]
 800f706:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f70a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f70c:	683b      	ldr	r3, [r7, #0]
 800f70e:	681b      	ldr	r3, [r3, #0]
 800f710:	68fa      	ldr	r2, [r7, #12]
 800f712:	4313      	orrs	r3, r2
 800f714:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	681b      	ldr	r3, [r3, #0]
 800f71a:	68fa      	ldr	r2, [r7, #12]
 800f71c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	681b      	ldr	r3, [r3, #0]
 800f722:	4a12      	ldr	r2, [pc, #72]	@ (800f76c <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800f724:	4293      	cmp	r3, r2
 800f726:	d004      	beq.n	800f732 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	681b      	ldr	r3, [r3, #0]
 800f72c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f730:	d10c      	bne.n	800f74c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f732:	68bb      	ldr	r3, [r7, #8]
 800f734:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f738:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f73a:	683b      	ldr	r3, [r7, #0]
 800f73c:	689b      	ldr	r3, [r3, #8]
 800f73e:	68ba      	ldr	r2, [r7, #8]
 800f740:	4313      	orrs	r3, r2
 800f742:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	681b      	ldr	r3, [r3, #0]
 800f748:	68ba      	ldr	r2, [r7, #8]
 800f74a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	2201      	movs	r2, #1
 800f750:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	2200      	movs	r2, #0
 800f758:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800f75c:	2300      	movs	r3, #0
}
 800f75e:	4618      	mov	r0, r3
 800f760:	3714      	adds	r7, #20
 800f762:	46bd      	mov	sp, r7
 800f764:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f768:	4770      	bx	lr
 800f76a:	bf00      	nop
 800f76c:	40012c00 	.word	0x40012c00

0800f770 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800f770:	b480      	push	{r7}
 800f772:	b083      	sub	sp, #12
 800f774:	af00      	add	r7, sp, #0
 800f776:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800f778:	bf00      	nop
 800f77a:	370c      	adds	r7, #12
 800f77c:	46bd      	mov	sp, r7
 800f77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f782:	4770      	bx	lr

0800f784 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800f784:	b480      	push	{r7}
 800f786:	b083      	sub	sp, #12
 800f788:	af00      	add	r7, sp, #0
 800f78a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800f78c:	bf00      	nop
 800f78e:	370c      	adds	r7, #12
 800f790:	46bd      	mov	sp, r7
 800f792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f796:	4770      	bx	lr

0800f798 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800f798:	b480      	push	{r7}
 800f79a:	b083      	sub	sp, #12
 800f79c:	af00      	add	r7, sp, #0
 800f79e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800f7a0:	bf00      	nop
 800f7a2:	370c      	adds	r7, #12
 800f7a4:	46bd      	mov	sp, r7
 800f7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7aa:	4770      	bx	lr

0800f7ac <LL_RCC_GetUSARTClockSource>:
{
 800f7ac:	b480      	push	{r7}
 800f7ae:	b083      	sub	sp, #12
 800f7b0:	af00      	add	r7, sp, #0
 800f7b2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 800f7b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f7b8:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	4013      	ands	r3, r2
}
 800f7c0:	4618      	mov	r0, r3
 800f7c2:	370c      	adds	r7, #12
 800f7c4:	46bd      	mov	sp, r7
 800f7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7ca:	4770      	bx	lr

0800f7cc <LL_RCC_GetLPUARTClockSource>:
{
 800f7cc:	b480      	push	{r7}
 800f7ce:	b083      	sub	sp, #12
 800f7d0:	af00      	add	r7, sp, #0
 800f7d2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800f7d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f7d8:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	4013      	ands	r3, r2
}
 800f7e0:	4618      	mov	r0, r3
 800f7e2:	370c      	adds	r7, #12
 800f7e4:	46bd      	mov	sp, r7
 800f7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7ea:	4770      	bx	lr

0800f7ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f7ec:	b580      	push	{r7, lr}
 800f7ee:	b082      	sub	sp, #8
 800f7f0:	af00      	add	r7, sp, #0
 800f7f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	2b00      	cmp	r3, #0
 800f7f8:	d101      	bne.n	800f7fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f7fa:	2301      	movs	r3, #1
 800f7fc:	e042      	b.n	800f884 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f804:	2b00      	cmp	r3, #0
 800f806:	d106      	bne.n	800f816 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	2200      	movs	r2, #0
 800f80c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f810:	6878      	ldr	r0, [r7, #4]
 800f812:	f7f7 fc71 	bl	80070f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	2224      	movs	r2, #36	@ 0x24
 800f81a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	681b      	ldr	r3, [r3, #0]
 800f822:	681a      	ldr	r2, [r3, #0]
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	681b      	ldr	r3, [r3, #0]
 800f828:	f022 0201 	bic.w	r2, r2, #1
 800f82c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f832:	2b00      	cmp	r3, #0
 800f834:	d002      	beq.n	800f83c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800f836:	6878      	ldr	r0, [r7, #4]
 800f838:	f000 ff16 	bl	8010668 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800f83c:	6878      	ldr	r0, [r7, #4]
 800f83e:	f000 fceb 	bl	8010218 <UART_SetConfig>
 800f842:	4603      	mov	r3, r0
 800f844:	2b01      	cmp	r3, #1
 800f846:	d101      	bne.n	800f84c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800f848:	2301      	movs	r3, #1
 800f84a:	e01b      	b.n	800f884 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	681b      	ldr	r3, [r3, #0]
 800f850:	685a      	ldr	r2, [r3, #4]
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	681b      	ldr	r3, [r3, #0]
 800f856:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800f85a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	681b      	ldr	r3, [r3, #0]
 800f860:	689a      	ldr	r2, [r3, #8]
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	681b      	ldr	r3, [r3, #0]
 800f866:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800f86a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	681b      	ldr	r3, [r3, #0]
 800f870:	681a      	ldr	r2, [r3, #0]
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	681b      	ldr	r3, [r3, #0]
 800f876:	f042 0201 	orr.w	r2, r2, #1
 800f87a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800f87c:	6878      	ldr	r0, [r7, #4]
 800f87e:	f000 ff95 	bl	80107ac <UART_CheckIdleState>
 800f882:	4603      	mov	r3, r0
}
 800f884:	4618      	mov	r0, r3
 800f886:	3708      	adds	r7, #8
 800f888:	46bd      	mov	sp, r7
 800f88a:	bd80      	pop	{r7, pc}

0800f88c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f88c:	b580      	push	{r7, lr}
 800f88e:	b08a      	sub	sp, #40	@ 0x28
 800f890:	af00      	add	r7, sp, #0
 800f892:	60f8      	str	r0, [r7, #12]
 800f894:	60b9      	str	r1, [r7, #8]
 800f896:	4613      	mov	r3, r2
 800f898:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800f89a:	68fb      	ldr	r3, [r7, #12]
 800f89c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800f8a0:	2b20      	cmp	r3, #32
 800f8a2:	d137      	bne.n	800f914 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800f8a4:	68bb      	ldr	r3, [r7, #8]
 800f8a6:	2b00      	cmp	r3, #0
 800f8a8:	d002      	beq.n	800f8b0 <HAL_UART_Receive_DMA+0x24>
 800f8aa:	88fb      	ldrh	r3, [r7, #6]
 800f8ac:	2b00      	cmp	r3, #0
 800f8ae:	d101      	bne.n	800f8b4 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800f8b0:	2301      	movs	r3, #1
 800f8b2:	e030      	b.n	800f916 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f8b4:	68fb      	ldr	r3, [r7, #12]
 800f8b6:	2200      	movs	r2, #0
 800f8b8:	66da      	str	r2, [r3, #108]	@ 0x6c

#if defined(LPUART1)
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800f8ba:	68fb      	ldr	r3, [r7, #12]
 800f8bc:	681b      	ldr	r3, [r3, #0]
 800f8be:	4a18      	ldr	r2, [pc, #96]	@ (800f920 <HAL_UART_Receive_DMA+0x94>)
 800f8c0:	4293      	cmp	r3, r2
 800f8c2:	d01f      	beq.n	800f904 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800f8c4:	68fb      	ldr	r3, [r7, #12]
 800f8c6:	681b      	ldr	r3, [r3, #0]
 800f8c8:	685b      	ldr	r3, [r3, #4]
 800f8ca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f8ce:	2b00      	cmp	r3, #0
 800f8d0:	d018      	beq.n	800f904 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800f8d2:	68fb      	ldr	r3, [r7, #12]
 800f8d4:	681b      	ldr	r3, [r3, #0]
 800f8d6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f8d8:	697b      	ldr	r3, [r7, #20]
 800f8da:	e853 3f00 	ldrex	r3, [r3]
 800f8de:	613b      	str	r3, [r7, #16]
   return(result);
 800f8e0:	693b      	ldr	r3, [r7, #16]
 800f8e2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800f8e6:	627b      	str	r3, [r7, #36]	@ 0x24
 800f8e8:	68fb      	ldr	r3, [r7, #12]
 800f8ea:	681b      	ldr	r3, [r3, #0]
 800f8ec:	461a      	mov	r2, r3
 800f8ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f8f0:	623b      	str	r3, [r7, #32]
 800f8f2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f8f4:	69f9      	ldr	r1, [r7, #28]
 800f8f6:	6a3a      	ldr	r2, [r7, #32]
 800f8f8:	e841 2300 	strex	r3, r2, [r1]
 800f8fc:	61bb      	str	r3, [r7, #24]
   return(result);
 800f8fe:	69bb      	ldr	r3, [r7, #24]
 800f900:	2b00      	cmp	r3, #0
 800f902:	d1e6      	bne.n	800f8d2 <HAL_UART_Receive_DMA+0x46>
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
    }
#endif /* LPUART1 */

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800f904:	88fb      	ldrh	r3, [r7, #6]
 800f906:	461a      	mov	r2, r3
 800f908:	68b9      	ldr	r1, [r7, #8]
 800f90a:	68f8      	ldr	r0, [r7, #12]
 800f90c:	f001 f866 	bl	80109dc <UART_Start_Receive_DMA>
 800f910:	4603      	mov	r3, r0
 800f912:	e000      	b.n	800f916 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800f914:	2302      	movs	r3, #2
  }
}
 800f916:	4618      	mov	r0, r3
 800f918:	3728      	adds	r7, #40	@ 0x28
 800f91a:	46bd      	mov	sp, r7
 800f91c:	bd80      	pop	{r7, pc}
 800f91e:	bf00      	nop
 800f920:	40008000 	.word	0x40008000

0800f924 <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 800f924:	b580      	push	{r7, lr}
 800f926:	b0a0      	sub	sp, #128	@ 0x80
 800f928:	af00      	add	r7, sp, #0
 800f92a:	6078      	str	r0, [r7, #4]
  /* Disable TXE, TC, RXNE, PE, RXFT, TXFT and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	681b      	ldr	r3, [r3, #0]
 800f930:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f932:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f934:	e853 3f00 	ldrex	r3, [r3]
 800f938:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800f93a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800f93c:	f423 73f0 	bic.w	r3, r3, #480	@ 0x1e0
 800f940:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	681b      	ldr	r3, [r3, #0]
 800f946:	461a      	mov	r2, r3
 800f948:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800f94a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800f94c:	667a      	str	r2, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f94e:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800f950:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800f952:	e841 2300 	strex	r3, r2, [r1]
 800f956:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800f958:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f95a:	2b00      	cmp	r3, #0
 800f95c:	d1e6      	bne.n	800f92c <HAL_UART_Abort+0x8>
                                          USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE);
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	681b      	ldr	r3, [r3, #0]
 800f962:	3308      	adds	r3, #8
 800f964:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f966:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f968:	e853 3f00 	ldrex	r3, [r3]
 800f96c:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800f96e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f970:	f023 5384 	bic.w	r3, r3, #276824064	@ 0x10800000
 800f974:	f023 0301 	bic.w	r3, r3, #1
 800f978:	67bb      	str	r3, [r7, #120]	@ 0x78
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	681b      	ldr	r3, [r3, #0]
 800f97e:	3308      	adds	r3, #8
 800f980:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800f982:	657a      	str	r2, [r7, #84]	@ 0x54
 800f984:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f986:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800f988:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800f98a:	e841 2300 	strex	r3, r2, [r1]
 800f98e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800f990:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f992:	2b00      	cmp	r3, #0
 800f994:	d1e3      	bne.n	800f95e <HAL_UART_Abort+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f99a:	2b01      	cmp	r3, #1
 800f99c:	d118      	bne.n	800f9d0 <HAL_UART_Abort+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	681b      	ldr	r3, [r3, #0]
 800f9a2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f9a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f9a6:	e853 3f00 	ldrex	r3, [r3]
 800f9aa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800f9ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f9ae:	f023 0310 	bic.w	r3, r3, #16
 800f9b2:	677b      	str	r3, [r7, #116]	@ 0x74
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	681b      	ldr	r3, [r3, #0]
 800f9b8:	461a      	mov	r2, r3
 800f9ba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800f9bc:	643b      	str	r3, [r7, #64]	@ 0x40
 800f9be:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f9c0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800f9c2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800f9c4:	e841 2300 	strex	r3, r2, [r1]
 800f9c8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800f9ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f9cc:	2b00      	cmp	r3, #0
 800f9ce:	d1e6      	bne.n	800f99e <HAL_UART_Abort+0x7a>
  }

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	681b      	ldr	r3, [r3, #0]
 800f9d4:	689b      	ldr	r3, [r3, #8]
 800f9d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f9da:	2b80      	cmp	r3, #128	@ 0x80
 800f9dc:	d137      	bne.n	800fa4e <HAL_UART_Abort+0x12a>
  {
    /* Disable the UART DMA Tx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	681b      	ldr	r3, [r3, #0]
 800f9e2:	3308      	adds	r3, #8
 800f9e4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f9e6:	6a3b      	ldr	r3, [r7, #32]
 800f9e8:	e853 3f00 	ldrex	r3, [r3]
 800f9ec:	61fb      	str	r3, [r7, #28]
   return(result);
 800f9ee:	69fb      	ldr	r3, [r7, #28]
 800f9f0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f9f4:	673b      	str	r3, [r7, #112]	@ 0x70
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	681b      	ldr	r3, [r3, #0]
 800f9fa:	3308      	adds	r3, #8
 800f9fc:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800f9fe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800fa00:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa02:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800fa04:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800fa06:	e841 2300 	strex	r3, r2, [r1]
 800fa0a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800fa0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa0e:	2b00      	cmp	r3, #0
 800fa10:	d1e5      	bne.n	800f9de <HAL_UART_Abort+0xba>

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800fa16:	2b00      	cmp	r3, #0
 800fa18:	d019      	beq.n	800fa4e <HAL_UART_Abort+0x12a>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800fa1e:	2200      	movs	r2, #0
 800fa20:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800fa26:	4618      	mov	r0, r3
 800fa28:	f7f9 f8df 	bl	8008bea <HAL_DMA_Abort>
 800fa2c:	4603      	mov	r3, r0
 800fa2e:	2b00      	cmp	r3, #0
 800fa30:	d00d      	beq.n	800fa4e <HAL_UART_Abort+0x12a>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800fa36:	4618      	mov	r0, r3
 800fa38:	f7f9 fa44 	bl	8008ec4 <HAL_DMA_GetError>
 800fa3c:	4603      	mov	r3, r0
 800fa3e:	2b20      	cmp	r3, #32
 800fa40:	d105      	bne.n	800fa4e <HAL_UART_Abort+0x12a>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	2210      	movs	r2, #16
 800fa46:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 800fa4a:	2303      	movs	r3, #3
 800fa4c:	e073      	b.n	800fb36 <HAL_UART_Abort+0x212>
      }
    }
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	681b      	ldr	r3, [r3, #0]
 800fa52:	689b      	ldr	r3, [r3, #8]
 800fa54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fa58:	2b40      	cmp	r3, #64	@ 0x40
 800fa5a:	d13b      	bne.n	800fad4 <HAL_UART_Abort+0x1b0>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	681b      	ldr	r3, [r3, #0]
 800fa60:	3308      	adds	r3, #8
 800fa62:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa64:	68fb      	ldr	r3, [r7, #12]
 800fa66:	e853 3f00 	ldrex	r3, [r3]
 800fa6a:	60bb      	str	r3, [r7, #8]
   return(result);
 800fa6c:	68bb      	ldr	r3, [r7, #8]
 800fa6e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800fa72:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	681b      	ldr	r3, [r3, #0]
 800fa78:	3308      	adds	r3, #8
 800fa7a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800fa7c:	61ba      	str	r2, [r7, #24]
 800fa7e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa80:	6979      	ldr	r1, [r7, #20]
 800fa82:	69ba      	ldr	r2, [r7, #24]
 800fa84:	e841 2300 	strex	r3, r2, [r1]
 800fa88:	613b      	str	r3, [r7, #16]
   return(result);
 800fa8a:	693b      	ldr	r3, [r7, #16]
 800fa8c:	2b00      	cmp	r3, #0
 800fa8e:	d1e5      	bne.n	800fa5c <HAL_UART_Abort+0x138>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fa96:	2b00      	cmp	r3, #0
 800fa98:	d01c      	beq.n	800fad4 <HAL_UART_Abort+0x1b0>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800faa0:	2200      	movs	r2, #0
 800faa2:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800faaa:	4618      	mov	r0, r3
 800faac:	f7f9 f89d 	bl	8008bea <HAL_DMA_Abort>
 800fab0:	4603      	mov	r3, r0
 800fab2:	2b00      	cmp	r3, #0
 800fab4:	d00e      	beq.n	800fad4 <HAL_UART_Abort+0x1b0>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fabc:	4618      	mov	r0, r3
 800fabe:	f7f9 fa01 	bl	8008ec4 <HAL_DMA_GetError>
 800fac2:	4603      	mov	r3, r0
 800fac4:	2b20      	cmp	r3, #32
 800fac6:	d105      	bne.n	800fad4 <HAL_UART_Abort+0x1b0>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	2210      	movs	r2, #16
 800facc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 800fad0:	2303      	movs	r3, #3
 800fad2:	e030      	b.n	800fb36 <HAL_UART_Abort+0x212>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0U;
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	2200      	movs	r2, #0
 800fad8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
  huart->RxXferCount = 0U;
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	2200      	movs	r2, #0
 800fae0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	681b      	ldr	r3, [r3, #0]
 800fae8:	220f      	movs	r2, #15
 800faea:	621a      	str	r2, [r3, #32]

  /* Flush the whole TX FIFO (if needed) */
  if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800faf0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800faf4:	d107      	bne.n	800fb06 <HAL_UART_Abort+0x1e2>
  {
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	681b      	ldr	r3, [r3, #0]
 800fafa:	699a      	ldr	r2, [r3, #24]
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	681b      	ldr	r3, [r3, #0]
 800fb00:	f042 0210 	orr.w	r2, r2, #16
 800fb04:	619a      	str	r2, [r3, #24]
  }

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	681b      	ldr	r3, [r3, #0]
 800fb0a:	699a      	ldr	r2, [r3, #24]
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	681b      	ldr	r3, [r3, #0]
 800fb10:	f042 0208 	orr.w	r2, r2, #8
 800fb14:	619a      	str	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	2220      	movs	r2, #32
 800fb1a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	2220      	movs	r2, #32
 800fb22:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	2200      	movs	r2, #0
 800fb2a:	66da      	str	r2, [r3, #108]	@ 0x6c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	2200      	movs	r2, #0
 800fb30:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  return HAL_OK;
 800fb34:	2300      	movs	r3, #0
}
 800fb36:	4618      	mov	r0, r3
 800fb38:	3780      	adds	r7, #128	@ 0x80
 800fb3a:	46bd      	mov	sp, r7
 800fb3c:	bd80      	pop	{r7, pc}
	...

0800fb40 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800fb40:	b580      	push	{r7, lr}
 800fb42:	b0ba      	sub	sp, #232	@ 0xe8
 800fb44:	af00      	add	r7, sp, #0
 800fb46:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	681b      	ldr	r3, [r3, #0]
 800fb4c:	69db      	ldr	r3, [r3, #28]
 800fb4e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	681b      	ldr	r3, [r3, #0]
 800fb56:	681b      	ldr	r3, [r3, #0]
 800fb58:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	681b      	ldr	r3, [r3, #0]
 800fb60:	689b      	ldr	r3, [r3, #8]
 800fb62:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800fb66:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800fb6a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800fb6e:	4013      	ands	r3, r2
 800fb70:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800fb74:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800fb78:	2b00      	cmp	r3, #0
 800fb7a:	d11b      	bne.n	800fbb4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800fb7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fb80:	f003 0320 	and.w	r3, r3, #32
 800fb84:	2b00      	cmp	r3, #0
 800fb86:	d015      	beq.n	800fbb4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800fb88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fb8c:	f003 0320 	and.w	r3, r3, #32
 800fb90:	2b00      	cmp	r3, #0
 800fb92:	d105      	bne.n	800fba0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800fb94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800fb98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800fb9c:	2b00      	cmp	r3, #0
 800fb9e:	d009      	beq.n	800fbb4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fba4:	2b00      	cmp	r3, #0
 800fba6:	f000 8300 	beq.w	80101aa <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 800fbaa:	687b      	ldr	r3, [r7, #4]
 800fbac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fbae:	6878      	ldr	r0, [r7, #4]
 800fbb0:	4798      	blx	r3
      }
      return;
 800fbb2:	e2fa      	b.n	80101aa <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800fbb4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800fbb8:	2b00      	cmp	r3, #0
 800fbba:	f000 8123 	beq.w	800fe04 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800fbbe:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800fbc2:	4b8d      	ldr	r3, [pc, #564]	@ (800fdf8 <HAL_UART_IRQHandler+0x2b8>)
 800fbc4:	4013      	ands	r3, r2
 800fbc6:	2b00      	cmp	r3, #0
 800fbc8:	d106      	bne.n	800fbd8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800fbca:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800fbce:	4b8b      	ldr	r3, [pc, #556]	@ (800fdfc <HAL_UART_IRQHandler+0x2bc>)
 800fbd0:	4013      	ands	r3, r2
 800fbd2:	2b00      	cmp	r3, #0
 800fbd4:	f000 8116 	beq.w	800fe04 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800fbd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fbdc:	f003 0301 	and.w	r3, r3, #1
 800fbe0:	2b00      	cmp	r3, #0
 800fbe2:	d011      	beq.n	800fc08 <HAL_UART_IRQHandler+0xc8>
 800fbe4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fbe8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800fbec:	2b00      	cmp	r3, #0
 800fbee:	d00b      	beq.n	800fc08 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	681b      	ldr	r3, [r3, #0]
 800fbf4:	2201      	movs	r2, #1
 800fbf6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fbfe:	f043 0201 	orr.w	r2, r3, #1
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800fc08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fc0c:	f003 0302 	and.w	r3, r3, #2
 800fc10:	2b00      	cmp	r3, #0
 800fc12:	d011      	beq.n	800fc38 <HAL_UART_IRQHandler+0xf8>
 800fc14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800fc18:	f003 0301 	and.w	r3, r3, #1
 800fc1c:	2b00      	cmp	r3, #0
 800fc1e:	d00b      	beq.n	800fc38 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	681b      	ldr	r3, [r3, #0]
 800fc24:	2202      	movs	r2, #2
 800fc26:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fc2e:	f043 0204 	orr.w	r2, r3, #4
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800fc38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fc3c:	f003 0304 	and.w	r3, r3, #4
 800fc40:	2b00      	cmp	r3, #0
 800fc42:	d011      	beq.n	800fc68 <HAL_UART_IRQHandler+0x128>
 800fc44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800fc48:	f003 0301 	and.w	r3, r3, #1
 800fc4c:	2b00      	cmp	r3, #0
 800fc4e:	d00b      	beq.n	800fc68 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	681b      	ldr	r3, [r3, #0]
 800fc54:	2204      	movs	r2, #4
 800fc56:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fc5e:	f043 0202 	orr.w	r2, r3, #2
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800fc68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fc6c:	f003 0308 	and.w	r3, r3, #8
 800fc70:	2b00      	cmp	r3, #0
 800fc72:	d017      	beq.n	800fca4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800fc74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fc78:	f003 0320 	and.w	r3, r3, #32
 800fc7c:	2b00      	cmp	r3, #0
 800fc7e:	d105      	bne.n	800fc8c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800fc80:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800fc84:	4b5c      	ldr	r3, [pc, #368]	@ (800fdf8 <HAL_UART_IRQHandler+0x2b8>)
 800fc86:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800fc88:	2b00      	cmp	r3, #0
 800fc8a:	d00b      	beq.n	800fca4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	681b      	ldr	r3, [r3, #0]
 800fc90:	2208      	movs	r2, #8
 800fc92:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fc9a:	f043 0208 	orr.w	r2, r3, #8
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800fca4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fca8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800fcac:	2b00      	cmp	r3, #0
 800fcae:	d012      	beq.n	800fcd6 <HAL_UART_IRQHandler+0x196>
 800fcb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fcb4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800fcb8:	2b00      	cmp	r3, #0
 800fcba:	d00c      	beq.n	800fcd6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	681b      	ldr	r3, [r3, #0]
 800fcc0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800fcc4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fccc:	f043 0220 	orr.w	r2, r3, #32
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fcdc:	2b00      	cmp	r3, #0
 800fcde:	f000 8266 	beq.w	80101ae <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800fce2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fce6:	f003 0320 	and.w	r3, r3, #32
 800fcea:	2b00      	cmp	r3, #0
 800fcec:	d013      	beq.n	800fd16 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800fcee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fcf2:	f003 0320 	and.w	r3, r3, #32
 800fcf6:	2b00      	cmp	r3, #0
 800fcf8:	d105      	bne.n	800fd06 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800fcfa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800fcfe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800fd02:	2b00      	cmp	r3, #0
 800fd04:	d007      	beq.n	800fd16 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fd0a:	2b00      	cmp	r3, #0
 800fd0c:	d003      	beq.n	800fd16 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800fd0e:	687b      	ldr	r3, [r7, #4]
 800fd10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fd12:	6878      	ldr	r0, [r7, #4]
 800fd14:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fd1c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	681b      	ldr	r3, [r3, #0]
 800fd24:	689b      	ldr	r3, [r3, #8]
 800fd26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fd2a:	2b40      	cmp	r3, #64	@ 0x40
 800fd2c:	d005      	beq.n	800fd3a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800fd2e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800fd32:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800fd36:	2b00      	cmp	r3, #0
 800fd38:	d054      	beq.n	800fde4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800fd3a:	6878      	ldr	r0, [r7, #4]
 800fd3c:	f000 ff35 	bl	8010baa <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	681b      	ldr	r3, [r3, #0]
 800fd44:	689b      	ldr	r3, [r3, #8]
 800fd46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fd4a:	2b40      	cmp	r3, #64	@ 0x40
 800fd4c:	d146      	bne.n	800fddc <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	681b      	ldr	r3, [r3, #0]
 800fd52:	3308      	adds	r3, #8
 800fd54:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd58:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800fd5c:	e853 3f00 	ldrex	r3, [r3]
 800fd60:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800fd64:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800fd68:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800fd6c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	681b      	ldr	r3, [r3, #0]
 800fd74:	3308      	adds	r3, #8
 800fd76:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800fd7a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800fd7e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd82:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800fd86:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800fd8a:	e841 2300 	strex	r3, r2, [r1]
 800fd8e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800fd92:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800fd96:	2b00      	cmp	r3, #0
 800fd98:	d1d9      	bne.n	800fd4e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800fd9a:	687b      	ldr	r3, [r7, #4]
 800fd9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fda0:	2b00      	cmp	r3, #0
 800fda2:	d017      	beq.n	800fdd4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fdaa:	4a15      	ldr	r2, [pc, #84]	@ (800fe00 <HAL_UART_IRQHandler+0x2c0>)
 800fdac:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fdb4:	4618      	mov	r0, r3
 800fdb6:	f7f8 ff77 	bl	8008ca8 <HAL_DMA_Abort_IT>
 800fdba:	4603      	mov	r3, r0
 800fdbc:	2b00      	cmp	r3, #0
 800fdbe:	d019      	beq.n	800fdf4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fdc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fdc8:	687a      	ldr	r2, [r7, #4]
 800fdca:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800fdce:	4610      	mov	r0, r2
 800fdd0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fdd2:	e00f      	b.n	800fdf4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800fdd4:	6878      	ldr	r0, [r7, #4]
 800fdd6:	f000 fa09 	bl	80101ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fdda:	e00b      	b.n	800fdf4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800fddc:	6878      	ldr	r0, [r7, #4]
 800fdde:	f000 fa05 	bl	80101ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fde2:	e007      	b.n	800fdf4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800fde4:	6878      	ldr	r0, [r7, #4]
 800fde6:	f000 fa01 	bl	80101ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fdea:	687b      	ldr	r3, [r7, #4]
 800fdec:	2200      	movs	r2, #0
 800fdee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800fdf2:	e1dc      	b.n	80101ae <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fdf4:	bf00      	nop
    return;
 800fdf6:	e1da      	b.n	80101ae <HAL_UART_IRQHandler+0x66e>
 800fdf8:	10000001 	.word	0x10000001
 800fdfc:	04000120 	.word	0x04000120
 800fe00:	08010e61 	.word	0x08010e61

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fe04:	687b      	ldr	r3, [r7, #4]
 800fe06:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fe08:	2b01      	cmp	r3, #1
 800fe0a:	f040 8170 	bne.w	80100ee <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800fe0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fe12:	f003 0310 	and.w	r3, r3, #16
 800fe16:	2b00      	cmp	r3, #0
 800fe18:	f000 8169 	beq.w	80100ee <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800fe1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fe20:	f003 0310 	and.w	r3, r3, #16
 800fe24:	2b00      	cmp	r3, #0
 800fe26:	f000 8162 	beq.w	80100ee <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800fe2a:	687b      	ldr	r3, [r7, #4]
 800fe2c:	681b      	ldr	r3, [r3, #0]
 800fe2e:	2210      	movs	r2, #16
 800fe30:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fe32:	687b      	ldr	r3, [r7, #4]
 800fe34:	681b      	ldr	r3, [r3, #0]
 800fe36:	689b      	ldr	r3, [r3, #8]
 800fe38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fe3c:	2b40      	cmp	r3, #64	@ 0x40
 800fe3e:	f040 80d8 	bne.w	800fff2 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fe48:	681b      	ldr	r3, [r3, #0]
 800fe4a:	685b      	ldr	r3, [r3, #4]
 800fe4c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800fe50:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800fe54:	2b00      	cmp	r3, #0
 800fe56:	f000 80af 	beq.w	800ffb8 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800fe60:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800fe64:	429a      	cmp	r2, r3
 800fe66:	f080 80a7 	bcs.w	800ffb8 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800fe70:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fe7a:	681b      	ldr	r3, [r3, #0]
 800fe7c:	681b      	ldr	r3, [r3, #0]
 800fe7e:	f003 0320 	and.w	r3, r3, #32
 800fe82:	2b00      	cmp	r3, #0
 800fe84:	f040 8087 	bne.w	800ff96 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	681b      	ldr	r3, [r3, #0]
 800fe8c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe90:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800fe94:	e853 3f00 	ldrex	r3, [r3]
 800fe98:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800fe9c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800fea0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800fea4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	681b      	ldr	r3, [r3, #0]
 800feac:	461a      	mov	r2, r3
 800feae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800feb2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800feb6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800feba:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800febe:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800fec2:	e841 2300 	strex	r3, r2, [r1]
 800fec6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800feca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800fece:	2b00      	cmp	r3, #0
 800fed0:	d1da      	bne.n	800fe88 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fed2:	687b      	ldr	r3, [r7, #4]
 800fed4:	681b      	ldr	r3, [r3, #0]
 800fed6:	3308      	adds	r3, #8
 800fed8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800feda:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800fedc:	e853 3f00 	ldrex	r3, [r3]
 800fee0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800fee2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800fee4:	f023 0301 	bic.w	r3, r3, #1
 800fee8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	681b      	ldr	r3, [r3, #0]
 800fef0:	3308      	adds	r3, #8
 800fef2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800fef6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800fefa:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fefc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800fefe:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800ff02:	e841 2300 	strex	r3, r2, [r1]
 800ff06:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800ff08:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ff0a:	2b00      	cmp	r3, #0
 800ff0c:	d1e1      	bne.n	800fed2 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	681b      	ldr	r3, [r3, #0]
 800ff12:	3308      	adds	r3, #8
 800ff14:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ff16:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ff18:	e853 3f00 	ldrex	r3, [r3]
 800ff1c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800ff1e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ff20:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ff24:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	681b      	ldr	r3, [r3, #0]
 800ff2c:	3308      	adds	r3, #8
 800ff2e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800ff32:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800ff34:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ff36:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800ff38:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800ff3a:	e841 2300 	strex	r3, r2, [r1]
 800ff3e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800ff40:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ff42:	2b00      	cmp	r3, #0
 800ff44:	d1e3      	bne.n	800ff0e <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	2220      	movs	r2, #32
 800ff4a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ff4e:	687b      	ldr	r3, [r7, #4]
 800ff50:	2200      	movs	r2, #0
 800ff52:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	681b      	ldr	r3, [r3, #0]
 800ff58:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ff5a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ff5c:	e853 3f00 	ldrex	r3, [r3]
 800ff60:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800ff62:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ff64:	f023 0310 	bic.w	r3, r3, #16
 800ff68:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	681b      	ldr	r3, [r3, #0]
 800ff70:	461a      	mov	r2, r3
 800ff72:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ff76:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ff78:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ff7a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800ff7c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ff7e:	e841 2300 	strex	r3, r2, [r1]
 800ff82:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800ff84:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ff86:	2b00      	cmp	r3, #0
 800ff88:	d1e4      	bne.n	800ff54 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ff90:	4618      	mov	r0, r3
 800ff92:	f7f8 fe2a 	bl	8008bea <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	2202      	movs	r2, #2
 800ff9a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800ffa2:	687b      	ldr	r3, [r7, #4]
 800ffa4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ffa8:	b29b      	uxth	r3, r3
 800ffaa:	1ad3      	subs	r3, r2, r3
 800ffac:	b29b      	uxth	r3, r3
 800ffae:	4619      	mov	r1, r3
 800ffb0:	6878      	ldr	r0, [r7, #4]
 800ffb2:	f000 f925 	bl	8010200 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800ffb6:	e0fc      	b.n	80101b2 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ffbe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800ffc2:	429a      	cmp	r2, r3
 800ffc4:	f040 80f5 	bne.w	80101b2 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ffce:	681b      	ldr	r3, [r3, #0]
 800ffd0:	681b      	ldr	r3, [r3, #0]
 800ffd2:	f003 0320 	and.w	r3, r3, #32
 800ffd6:	2b20      	cmp	r3, #32
 800ffd8:	f040 80eb 	bne.w	80101b2 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	2202      	movs	r2, #2
 800ffe0:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ffe8:	4619      	mov	r1, r3
 800ffea:	6878      	ldr	r0, [r7, #4]
 800ffec:	f000 f908 	bl	8010200 <HAL_UARTEx_RxEventCallback>
      return;
 800fff0:	e0df      	b.n	80101b2 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800fff8:	687b      	ldr	r3, [r7, #4]
 800fffa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800fffe:	b29b      	uxth	r3, r3
 8010000:	1ad3      	subs	r3, r2, r3
 8010002:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801000c:	b29b      	uxth	r3, r3
 801000e:	2b00      	cmp	r3, #0
 8010010:	f000 80d1 	beq.w	80101b6 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8010014:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8010018:	2b00      	cmp	r3, #0
 801001a:	f000 80cc 	beq.w	80101b6 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	681b      	ldr	r3, [r3, #0]
 8010022:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010024:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010026:	e853 3f00 	ldrex	r3, [r3]
 801002a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 801002c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801002e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8010032:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	681b      	ldr	r3, [r3, #0]
 801003a:	461a      	mov	r2, r3
 801003c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8010040:	647b      	str	r3, [r7, #68]	@ 0x44
 8010042:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010044:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8010046:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010048:	e841 2300 	strex	r3, r2, [r1]
 801004c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 801004e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010050:	2b00      	cmp	r3, #0
 8010052:	d1e4      	bne.n	801001e <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	681b      	ldr	r3, [r3, #0]
 8010058:	3308      	adds	r3, #8
 801005a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801005c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801005e:	e853 3f00 	ldrex	r3, [r3]
 8010062:	623b      	str	r3, [r7, #32]
   return(result);
 8010064:	6a3b      	ldr	r3, [r7, #32]
 8010066:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 801006a:	f023 0301 	bic.w	r3, r3, #1
 801006e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	681b      	ldr	r3, [r3, #0]
 8010076:	3308      	adds	r3, #8
 8010078:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 801007c:	633a      	str	r2, [r7, #48]	@ 0x30
 801007e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010080:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010082:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010084:	e841 2300 	strex	r3, r2, [r1]
 8010088:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801008a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801008c:	2b00      	cmp	r3, #0
 801008e:	d1e1      	bne.n	8010054 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	2220      	movs	r2, #32
 8010094:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	2200      	movs	r2, #0
 801009c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	2200      	movs	r2, #0
 80100a2:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	681b      	ldr	r3, [r3, #0]
 80100a8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80100aa:	693b      	ldr	r3, [r7, #16]
 80100ac:	e853 3f00 	ldrex	r3, [r3]
 80100b0:	60fb      	str	r3, [r7, #12]
   return(result);
 80100b2:	68fb      	ldr	r3, [r7, #12]
 80100b4:	f023 0310 	bic.w	r3, r3, #16
 80100b8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	681b      	ldr	r3, [r3, #0]
 80100c0:	461a      	mov	r2, r3
 80100c2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80100c6:	61fb      	str	r3, [r7, #28]
 80100c8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80100ca:	69b9      	ldr	r1, [r7, #24]
 80100cc:	69fa      	ldr	r2, [r7, #28]
 80100ce:	e841 2300 	strex	r3, r2, [r1]
 80100d2:	617b      	str	r3, [r7, #20]
   return(result);
 80100d4:	697b      	ldr	r3, [r7, #20]
 80100d6:	2b00      	cmp	r3, #0
 80100d8:	d1e4      	bne.n	80100a4 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80100da:	687b      	ldr	r3, [r7, #4]
 80100dc:	2202      	movs	r2, #2
 80100de:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80100e0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80100e4:	4619      	mov	r1, r3
 80100e6:	6878      	ldr	r0, [r7, #4]
 80100e8:	f000 f88a 	bl	8010200 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80100ec:	e063      	b.n	80101b6 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80100ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80100f2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80100f6:	2b00      	cmp	r3, #0
 80100f8:	d00e      	beq.n	8010118 <HAL_UART_IRQHandler+0x5d8>
 80100fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80100fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8010102:	2b00      	cmp	r3, #0
 8010104:	d008      	beq.n	8010118 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	681b      	ldr	r3, [r3, #0]
 801010a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 801010e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8010110:	6878      	ldr	r0, [r7, #4]
 8010112:	f000 fee2 	bl	8010eda <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8010116:	e051      	b.n	80101bc <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8010118:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801011c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010120:	2b00      	cmp	r3, #0
 8010122:	d014      	beq.n	801014e <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8010124:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010128:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801012c:	2b00      	cmp	r3, #0
 801012e:	d105      	bne.n	801013c <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8010130:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010134:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8010138:	2b00      	cmp	r3, #0
 801013a:	d008      	beq.n	801014e <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010140:	2b00      	cmp	r3, #0
 8010142:	d03a      	beq.n	80101ba <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010148:	6878      	ldr	r0, [r7, #4]
 801014a:	4798      	blx	r3
    }
    return;
 801014c:	e035      	b.n	80101ba <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 801014e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010152:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010156:	2b00      	cmp	r3, #0
 8010158:	d009      	beq.n	801016e <HAL_UART_IRQHandler+0x62e>
 801015a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801015e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010162:	2b00      	cmp	r3, #0
 8010164:	d003      	beq.n	801016e <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8010166:	6878      	ldr	r0, [r7, #4]
 8010168:	f000 fe8c 	bl	8010e84 <UART_EndTransmit_IT>
    return;
 801016c:	e026      	b.n	80101bc <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 801016e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010172:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8010176:	2b00      	cmp	r3, #0
 8010178:	d009      	beq.n	801018e <HAL_UART_IRQHandler+0x64e>
 801017a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801017e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8010182:	2b00      	cmp	r3, #0
 8010184:	d003      	beq.n	801018e <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8010186:	6878      	ldr	r0, [r7, #4]
 8010188:	f000 febb 	bl	8010f02 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801018c:	e016      	b.n	80101bc <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 801018e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010192:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8010196:	2b00      	cmp	r3, #0
 8010198:	d010      	beq.n	80101bc <HAL_UART_IRQHandler+0x67c>
 801019a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801019e:	2b00      	cmp	r3, #0
 80101a0:	da0c      	bge.n	80101bc <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80101a2:	6878      	ldr	r0, [r7, #4]
 80101a4:	f000 fea3 	bl	8010eee <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80101a8:	e008      	b.n	80101bc <HAL_UART_IRQHandler+0x67c>
      return;
 80101aa:	bf00      	nop
 80101ac:	e006      	b.n	80101bc <HAL_UART_IRQHandler+0x67c>
    return;
 80101ae:	bf00      	nop
 80101b0:	e004      	b.n	80101bc <HAL_UART_IRQHandler+0x67c>
      return;
 80101b2:	bf00      	nop
 80101b4:	e002      	b.n	80101bc <HAL_UART_IRQHandler+0x67c>
      return;
 80101b6:	bf00      	nop
 80101b8:	e000      	b.n	80101bc <HAL_UART_IRQHandler+0x67c>
    return;
 80101ba:	bf00      	nop
  }
}
 80101bc:	37e8      	adds	r7, #232	@ 0xe8
 80101be:	46bd      	mov	sp, r7
 80101c0:	bd80      	pop	{r7, pc}
 80101c2:	bf00      	nop

080101c4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80101c4:	b480      	push	{r7}
 80101c6:	b083      	sub	sp, #12
 80101c8:	af00      	add	r7, sp, #0
 80101ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80101cc:	bf00      	nop
 80101ce:	370c      	adds	r7, #12
 80101d0:	46bd      	mov	sp, r7
 80101d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101d6:	4770      	bx	lr

080101d8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80101d8:	b480      	push	{r7}
 80101da:	b083      	sub	sp, #12
 80101dc:	af00      	add	r7, sp, #0
 80101de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80101e0:	bf00      	nop
 80101e2:	370c      	adds	r7, #12
 80101e4:	46bd      	mov	sp, r7
 80101e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101ea:	4770      	bx	lr

080101ec <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80101ec:	b480      	push	{r7}
 80101ee:	b083      	sub	sp, #12
 80101f0:	af00      	add	r7, sp, #0
 80101f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80101f4:	bf00      	nop
 80101f6:	370c      	adds	r7, #12
 80101f8:	46bd      	mov	sp, r7
 80101fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101fe:	4770      	bx	lr

08010200 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8010200:	b480      	push	{r7}
 8010202:	b083      	sub	sp, #12
 8010204:	af00      	add	r7, sp, #0
 8010206:	6078      	str	r0, [r7, #4]
 8010208:	460b      	mov	r3, r1
 801020a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 801020c:	bf00      	nop
 801020e:	370c      	adds	r7, #12
 8010210:	46bd      	mov	sp, r7
 8010212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010216:	4770      	bx	lr

08010218 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8010218:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801021c:	b08c      	sub	sp, #48	@ 0x30
 801021e:	af00      	add	r7, sp, #0
 8010220:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8010222:	2300      	movs	r3, #0
 8010224:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8010228:	697b      	ldr	r3, [r7, #20]
 801022a:	689a      	ldr	r2, [r3, #8]
 801022c:	697b      	ldr	r3, [r7, #20]
 801022e:	691b      	ldr	r3, [r3, #16]
 8010230:	431a      	orrs	r2, r3
 8010232:	697b      	ldr	r3, [r7, #20]
 8010234:	695b      	ldr	r3, [r3, #20]
 8010236:	431a      	orrs	r2, r3
 8010238:	697b      	ldr	r3, [r7, #20]
 801023a:	69db      	ldr	r3, [r3, #28]
 801023c:	4313      	orrs	r3, r2
 801023e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8010240:	697b      	ldr	r3, [r7, #20]
 8010242:	681b      	ldr	r3, [r3, #0]
 8010244:	681a      	ldr	r2, [r3, #0]
 8010246:	4baf      	ldr	r3, [pc, #700]	@ (8010504 <UART_SetConfig+0x2ec>)
 8010248:	4013      	ands	r3, r2
 801024a:	697a      	ldr	r2, [r7, #20]
 801024c:	6812      	ldr	r2, [r2, #0]
 801024e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010250:	430b      	orrs	r3, r1
 8010252:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010254:	697b      	ldr	r3, [r7, #20]
 8010256:	681b      	ldr	r3, [r3, #0]
 8010258:	685b      	ldr	r3, [r3, #4]
 801025a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 801025e:	697b      	ldr	r3, [r7, #20]
 8010260:	68da      	ldr	r2, [r3, #12]
 8010262:	697b      	ldr	r3, [r7, #20]
 8010264:	681b      	ldr	r3, [r3, #0]
 8010266:	430a      	orrs	r2, r1
 8010268:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801026a:	697b      	ldr	r3, [r7, #20]
 801026c:	699b      	ldr	r3, [r3, #24]
 801026e:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8010270:	697b      	ldr	r3, [r7, #20]
 8010272:	681b      	ldr	r3, [r3, #0]
 8010274:	4aa4      	ldr	r2, [pc, #656]	@ (8010508 <UART_SetConfig+0x2f0>)
 8010276:	4293      	cmp	r3, r2
 8010278:	d004      	beq.n	8010284 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 801027a:	697b      	ldr	r3, [r7, #20]
 801027c:	6a1b      	ldr	r3, [r3, #32]
 801027e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010280:	4313      	orrs	r3, r2
 8010282:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8010284:	697b      	ldr	r3, [r7, #20]
 8010286:	681b      	ldr	r3, [r3, #0]
 8010288:	689b      	ldr	r3, [r3, #8]
 801028a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 801028e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8010292:	697a      	ldr	r2, [r7, #20]
 8010294:	6812      	ldr	r2, [r2, #0]
 8010296:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010298:	430b      	orrs	r3, r1
 801029a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 801029c:	697b      	ldr	r3, [r7, #20]
 801029e:	681b      	ldr	r3, [r3, #0]
 80102a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80102a2:	f023 010f 	bic.w	r1, r3, #15
 80102a6:	697b      	ldr	r3, [r7, #20]
 80102a8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80102aa:	697b      	ldr	r3, [r7, #20]
 80102ac:	681b      	ldr	r3, [r3, #0]
 80102ae:	430a      	orrs	r2, r1
 80102b0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80102b2:	697b      	ldr	r3, [r7, #20]
 80102b4:	681b      	ldr	r3, [r3, #0]
 80102b6:	4a95      	ldr	r2, [pc, #596]	@ (801050c <UART_SetConfig+0x2f4>)
 80102b8:	4293      	cmp	r3, r2
 80102ba:	d125      	bne.n	8010308 <UART_SetConfig+0xf0>
 80102bc:	2003      	movs	r0, #3
 80102be:	f7ff fa75 	bl	800f7ac <LL_RCC_GetUSARTClockSource>
 80102c2:	4603      	mov	r3, r0
 80102c4:	2b03      	cmp	r3, #3
 80102c6:	d81b      	bhi.n	8010300 <UART_SetConfig+0xe8>
 80102c8:	a201      	add	r2, pc, #4	@ (adr r2, 80102d0 <UART_SetConfig+0xb8>)
 80102ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80102ce:	bf00      	nop
 80102d0:	080102e1 	.word	0x080102e1
 80102d4:	080102f1 	.word	0x080102f1
 80102d8:	080102e9 	.word	0x080102e9
 80102dc:	080102f9 	.word	0x080102f9
 80102e0:	2301      	movs	r3, #1
 80102e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80102e6:	e042      	b.n	801036e <UART_SetConfig+0x156>
 80102e8:	2302      	movs	r3, #2
 80102ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80102ee:	e03e      	b.n	801036e <UART_SetConfig+0x156>
 80102f0:	2304      	movs	r3, #4
 80102f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80102f6:	e03a      	b.n	801036e <UART_SetConfig+0x156>
 80102f8:	2308      	movs	r3, #8
 80102fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80102fe:	e036      	b.n	801036e <UART_SetConfig+0x156>
 8010300:	2310      	movs	r3, #16
 8010302:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010306:	e032      	b.n	801036e <UART_SetConfig+0x156>
 8010308:	697b      	ldr	r3, [r7, #20]
 801030a:	681b      	ldr	r3, [r3, #0]
 801030c:	4a7e      	ldr	r2, [pc, #504]	@ (8010508 <UART_SetConfig+0x2f0>)
 801030e:	4293      	cmp	r3, r2
 8010310:	d12a      	bne.n	8010368 <UART_SetConfig+0x150>
 8010312:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8010316:	f7ff fa59 	bl	800f7cc <LL_RCC_GetLPUARTClockSource>
 801031a:	4603      	mov	r3, r0
 801031c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8010320:	d01a      	beq.n	8010358 <UART_SetConfig+0x140>
 8010322:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8010326:	d81b      	bhi.n	8010360 <UART_SetConfig+0x148>
 8010328:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801032c:	d00c      	beq.n	8010348 <UART_SetConfig+0x130>
 801032e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8010332:	d815      	bhi.n	8010360 <UART_SetConfig+0x148>
 8010334:	2b00      	cmp	r3, #0
 8010336:	d003      	beq.n	8010340 <UART_SetConfig+0x128>
 8010338:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801033c:	d008      	beq.n	8010350 <UART_SetConfig+0x138>
 801033e:	e00f      	b.n	8010360 <UART_SetConfig+0x148>
 8010340:	2300      	movs	r3, #0
 8010342:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010346:	e012      	b.n	801036e <UART_SetConfig+0x156>
 8010348:	2302      	movs	r3, #2
 801034a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801034e:	e00e      	b.n	801036e <UART_SetConfig+0x156>
 8010350:	2304      	movs	r3, #4
 8010352:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010356:	e00a      	b.n	801036e <UART_SetConfig+0x156>
 8010358:	2308      	movs	r3, #8
 801035a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801035e:	e006      	b.n	801036e <UART_SetConfig+0x156>
 8010360:	2310      	movs	r3, #16
 8010362:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010366:	e002      	b.n	801036e <UART_SetConfig+0x156>
 8010368:	2310      	movs	r3, #16
 801036a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801036e:	697b      	ldr	r3, [r7, #20]
 8010370:	681b      	ldr	r3, [r3, #0]
 8010372:	4a65      	ldr	r2, [pc, #404]	@ (8010508 <UART_SetConfig+0x2f0>)
 8010374:	4293      	cmp	r3, r2
 8010376:	f040 8097 	bne.w	80104a8 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 801037a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 801037e:	2b08      	cmp	r3, #8
 8010380:	d823      	bhi.n	80103ca <UART_SetConfig+0x1b2>
 8010382:	a201      	add	r2, pc, #4	@ (adr r2, 8010388 <UART_SetConfig+0x170>)
 8010384:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010388:	080103ad 	.word	0x080103ad
 801038c:	080103cb 	.word	0x080103cb
 8010390:	080103b5 	.word	0x080103b5
 8010394:	080103cb 	.word	0x080103cb
 8010398:	080103bb 	.word	0x080103bb
 801039c:	080103cb 	.word	0x080103cb
 80103a0:	080103cb 	.word	0x080103cb
 80103a4:	080103cb 	.word	0x080103cb
 80103a8:	080103c3 	.word	0x080103c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80103ac:	f7fc fcc4 	bl	800cd38 <HAL_RCC_GetPCLK1Freq>
 80103b0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80103b2:	e010      	b.n	80103d6 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80103b4:	4b56      	ldr	r3, [pc, #344]	@ (8010510 <UART_SetConfig+0x2f8>)
 80103b6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80103b8:	e00d      	b.n	80103d6 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80103ba:	f7fc fc3d 	bl	800cc38 <HAL_RCC_GetSysClockFreq>
 80103be:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80103c0:	e009      	b.n	80103d6 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80103c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80103c6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80103c8:	e005      	b.n	80103d6 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 80103ca:	2300      	movs	r3, #0
 80103cc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80103ce:	2301      	movs	r3, #1
 80103d0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80103d4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80103d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80103d8:	2b00      	cmp	r3, #0
 80103da:	f000 812b 	beq.w	8010634 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80103de:	697b      	ldr	r3, [r7, #20]
 80103e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80103e2:	4a4c      	ldr	r2, [pc, #304]	@ (8010514 <UART_SetConfig+0x2fc>)
 80103e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80103e8:	461a      	mov	r2, r3
 80103ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80103ec:	fbb3 f3f2 	udiv	r3, r3, r2
 80103f0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80103f2:	697b      	ldr	r3, [r7, #20]
 80103f4:	685a      	ldr	r2, [r3, #4]
 80103f6:	4613      	mov	r3, r2
 80103f8:	005b      	lsls	r3, r3, #1
 80103fa:	4413      	add	r3, r2
 80103fc:	69ba      	ldr	r2, [r7, #24]
 80103fe:	429a      	cmp	r2, r3
 8010400:	d305      	bcc.n	801040e <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8010402:	697b      	ldr	r3, [r7, #20]
 8010404:	685b      	ldr	r3, [r3, #4]
 8010406:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010408:	69ba      	ldr	r2, [r7, #24]
 801040a:	429a      	cmp	r2, r3
 801040c:	d903      	bls.n	8010416 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 801040e:	2301      	movs	r3, #1
 8010410:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8010414:	e10e      	b.n	8010634 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010418:	2200      	movs	r2, #0
 801041a:	60bb      	str	r3, [r7, #8]
 801041c:	60fa      	str	r2, [r7, #12]
 801041e:	697b      	ldr	r3, [r7, #20]
 8010420:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010422:	4a3c      	ldr	r2, [pc, #240]	@ (8010514 <UART_SetConfig+0x2fc>)
 8010424:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010428:	b29b      	uxth	r3, r3
 801042a:	2200      	movs	r2, #0
 801042c:	603b      	str	r3, [r7, #0]
 801042e:	607a      	str	r2, [r7, #4]
 8010430:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010434:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8010438:	f7f0 fbfe 	bl	8000c38 <__aeabi_uldivmod>
 801043c:	4602      	mov	r2, r0
 801043e:	460b      	mov	r3, r1
 8010440:	4610      	mov	r0, r2
 8010442:	4619      	mov	r1, r3
 8010444:	f04f 0200 	mov.w	r2, #0
 8010448:	f04f 0300 	mov.w	r3, #0
 801044c:	020b      	lsls	r3, r1, #8
 801044e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8010452:	0202      	lsls	r2, r0, #8
 8010454:	6979      	ldr	r1, [r7, #20]
 8010456:	6849      	ldr	r1, [r1, #4]
 8010458:	0849      	lsrs	r1, r1, #1
 801045a:	2000      	movs	r0, #0
 801045c:	460c      	mov	r4, r1
 801045e:	4605      	mov	r5, r0
 8010460:	eb12 0804 	adds.w	r8, r2, r4
 8010464:	eb43 0905 	adc.w	r9, r3, r5
 8010468:	697b      	ldr	r3, [r7, #20]
 801046a:	685b      	ldr	r3, [r3, #4]
 801046c:	2200      	movs	r2, #0
 801046e:	469a      	mov	sl, r3
 8010470:	4693      	mov	fp, r2
 8010472:	4652      	mov	r2, sl
 8010474:	465b      	mov	r3, fp
 8010476:	4640      	mov	r0, r8
 8010478:	4649      	mov	r1, r9
 801047a:	f7f0 fbdd 	bl	8000c38 <__aeabi_uldivmod>
 801047e:	4602      	mov	r2, r0
 8010480:	460b      	mov	r3, r1
 8010482:	4613      	mov	r3, r2
 8010484:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8010486:	6a3b      	ldr	r3, [r7, #32]
 8010488:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801048c:	d308      	bcc.n	80104a0 <UART_SetConfig+0x288>
 801048e:	6a3b      	ldr	r3, [r7, #32]
 8010490:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8010494:	d204      	bcs.n	80104a0 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8010496:	697b      	ldr	r3, [r7, #20]
 8010498:	681b      	ldr	r3, [r3, #0]
 801049a:	6a3a      	ldr	r2, [r7, #32]
 801049c:	60da      	str	r2, [r3, #12]
 801049e:	e0c9      	b.n	8010634 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 80104a0:	2301      	movs	r3, #1
 80104a2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80104a6:	e0c5      	b.n	8010634 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80104a8:	697b      	ldr	r3, [r7, #20]
 80104aa:	69db      	ldr	r3, [r3, #28]
 80104ac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80104b0:	d16d      	bne.n	801058e <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 80104b2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80104b6:	3b01      	subs	r3, #1
 80104b8:	2b07      	cmp	r3, #7
 80104ba:	d82d      	bhi.n	8010518 <UART_SetConfig+0x300>
 80104bc:	a201      	add	r2, pc, #4	@ (adr r2, 80104c4 <UART_SetConfig+0x2ac>)
 80104be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80104c2:	bf00      	nop
 80104c4:	080104e5 	.word	0x080104e5
 80104c8:	080104ed 	.word	0x080104ed
 80104cc:	08010519 	.word	0x08010519
 80104d0:	080104f3 	.word	0x080104f3
 80104d4:	08010519 	.word	0x08010519
 80104d8:	08010519 	.word	0x08010519
 80104dc:	08010519 	.word	0x08010519
 80104e0:	080104fb 	.word	0x080104fb
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80104e4:	f7fc fc3e 	bl	800cd64 <HAL_RCC_GetPCLK2Freq>
 80104e8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80104ea:	e01b      	b.n	8010524 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80104ec:	4b08      	ldr	r3, [pc, #32]	@ (8010510 <UART_SetConfig+0x2f8>)
 80104ee:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80104f0:	e018      	b.n	8010524 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80104f2:	f7fc fba1 	bl	800cc38 <HAL_RCC_GetSysClockFreq>
 80104f6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80104f8:	e014      	b.n	8010524 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80104fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80104fe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8010500:	e010      	b.n	8010524 <UART_SetConfig+0x30c>
 8010502:	bf00      	nop
 8010504:	cfff69f3 	.word	0xcfff69f3
 8010508:	40008000 	.word	0x40008000
 801050c:	40013800 	.word	0x40013800
 8010510:	00f42400 	.word	0x00f42400
 8010514:	080223b4 	.word	0x080223b4
      default:
        pclk = 0U;
 8010518:	2300      	movs	r3, #0
 801051a:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 801051c:	2301      	movs	r3, #1
 801051e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8010522:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8010524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010526:	2b00      	cmp	r3, #0
 8010528:	f000 8084 	beq.w	8010634 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801052c:	697b      	ldr	r3, [r7, #20]
 801052e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010530:	4a4b      	ldr	r2, [pc, #300]	@ (8010660 <UART_SetConfig+0x448>)
 8010532:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010536:	461a      	mov	r2, r3
 8010538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801053a:	fbb3 f3f2 	udiv	r3, r3, r2
 801053e:	005a      	lsls	r2, r3, #1
 8010540:	697b      	ldr	r3, [r7, #20]
 8010542:	685b      	ldr	r3, [r3, #4]
 8010544:	085b      	lsrs	r3, r3, #1
 8010546:	441a      	add	r2, r3
 8010548:	697b      	ldr	r3, [r7, #20]
 801054a:	685b      	ldr	r3, [r3, #4]
 801054c:	fbb2 f3f3 	udiv	r3, r2, r3
 8010550:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010552:	6a3b      	ldr	r3, [r7, #32]
 8010554:	2b0f      	cmp	r3, #15
 8010556:	d916      	bls.n	8010586 <UART_SetConfig+0x36e>
 8010558:	6a3b      	ldr	r3, [r7, #32]
 801055a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801055e:	d212      	bcs.n	8010586 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8010560:	6a3b      	ldr	r3, [r7, #32]
 8010562:	b29b      	uxth	r3, r3
 8010564:	f023 030f 	bic.w	r3, r3, #15
 8010568:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801056a:	6a3b      	ldr	r3, [r7, #32]
 801056c:	085b      	lsrs	r3, r3, #1
 801056e:	b29b      	uxth	r3, r3
 8010570:	f003 0307 	and.w	r3, r3, #7
 8010574:	b29a      	uxth	r2, r3
 8010576:	8bfb      	ldrh	r3, [r7, #30]
 8010578:	4313      	orrs	r3, r2
 801057a:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 801057c:	697b      	ldr	r3, [r7, #20]
 801057e:	681b      	ldr	r3, [r3, #0]
 8010580:	8bfa      	ldrh	r2, [r7, #30]
 8010582:	60da      	str	r2, [r3, #12]
 8010584:	e056      	b.n	8010634 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8010586:	2301      	movs	r3, #1
 8010588:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 801058c:	e052      	b.n	8010634 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 801058e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8010592:	3b01      	subs	r3, #1
 8010594:	2b07      	cmp	r3, #7
 8010596:	d822      	bhi.n	80105de <UART_SetConfig+0x3c6>
 8010598:	a201      	add	r2, pc, #4	@ (adr r2, 80105a0 <UART_SetConfig+0x388>)
 801059a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801059e:	bf00      	nop
 80105a0:	080105c1 	.word	0x080105c1
 80105a4:	080105c9 	.word	0x080105c9
 80105a8:	080105df 	.word	0x080105df
 80105ac:	080105cf 	.word	0x080105cf
 80105b0:	080105df 	.word	0x080105df
 80105b4:	080105df 	.word	0x080105df
 80105b8:	080105df 	.word	0x080105df
 80105bc:	080105d7 	.word	0x080105d7
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80105c0:	f7fc fbd0 	bl	800cd64 <HAL_RCC_GetPCLK2Freq>
 80105c4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80105c6:	e010      	b.n	80105ea <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80105c8:	4b26      	ldr	r3, [pc, #152]	@ (8010664 <UART_SetConfig+0x44c>)
 80105ca:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80105cc:	e00d      	b.n	80105ea <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80105ce:	f7fc fb33 	bl	800cc38 <HAL_RCC_GetSysClockFreq>
 80105d2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80105d4:	e009      	b.n	80105ea <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80105d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80105da:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80105dc:	e005      	b.n	80105ea <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 80105de:	2300      	movs	r3, #0
 80105e0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80105e2:	2301      	movs	r3, #1
 80105e4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80105e8:	bf00      	nop
    }

    if (pclk != 0U)
 80105ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80105ec:	2b00      	cmp	r3, #0
 80105ee:	d021      	beq.n	8010634 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80105f0:	697b      	ldr	r3, [r7, #20]
 80105f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80105f4:	4a1a      	ldr	r2, [pc, #104]	@ (8010660 <UART_SetConfig+0x448>)
 80105f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80105fa:	461a      	mov	r2, r3
 80105fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80105fe:	fbb3 f2f2 	udiv	r2, r3, r2
 8010602:	697b      	ldr	r3, [r7, #20]
 8010604:	685b      	ldr	r3, [r3, #4]
 8010606:	085b      	lsrs	r3, r3, #1
 8010608:	441a      	add	r2, r3
 801060a:	697b      	ldr	r3, [r7, #20]
 801060c:	685b      	ldr	r3, [r3, #4]
 801060e:	fbb2 f3f3 	udiv	r3, r2, r3
 8010612:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010614:	6a3b      	ldr	r3, [r7, #32]
 8010616:	2b0f      	cmp	r3, #15
 8010618:	d909      	bls.n	801062e <UART_SetConfig+0x416>
 801061a:	6a3b      	ldr	r3, [r7, #32]
 801061c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010620:	d205      	bcs.n	801062e <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8010622:	6a3b      	ldr	r3, [r7, #32]
 8010624:	b29a      	uxth	r2, r3
 8010626:	697b      	ldr	r3, [r7, #20]
 8010628:	681b      	ldr	r3, [r3, #0]
 801062a:	60da      	str	r2, [r3, #12]
 801062c:	e002      	b.n	8010634 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 801062e:	2301      	movs	r3, #1
 8010630:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8010634:	697b      	ldr	r3, [r7, #20]
 8010636:	2201      	movs	r2, #1
 8010638:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 801063c:	697b      	ldr	r3, [r7, #20]
 801063e:	2201      	movs	r2, #1
 8010640:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8010644:	697b      	ldr	r3, [r7, #20]
 8010646:	2200      	movs	r2, #0
 8010648:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 801064a:	697b      	ldr	r3, [r7, #20]
 801064c:	2200      	movs	r2, #0
 801064e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8010650:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8010654:	4618      	mov	r0, r3
 8010656:	3730      	adds	r7, #48	@ 0x30
 8010658:	46bd      	mov	sp, r7
 801065a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801065e:	bf00      	nop
 8010660:	080223b4 	.word	0x080223b4
 8010664:	00f42400 	.word	0x00f42400

08010668 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8010668:	b480      	push	{r7}
 801066a:	b083      	sub	sp, #12
 801066c:	af00      	add	r7, sp, #0
 801066e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010674:	f003 0308 	and.w	r3, r3, #8
 8010678:	2b00      	cmp	r3, #0
 801067a:	d00a      	beq.n	8010692 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801067c:	687b      	ldr	r3, [r7, #4]
 801067e:	681b      	ldr	r3, [r3, #0]
 8010680:	685b      	ldr	r3, [r3, #4]
 8010682:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8010686:	687b      	ldr	r3, [r7, #4]
 8010688:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	681b      	ldr	r3, [r3, #0]
 801068e:	430a      	orrs	r2, r1
 8010690:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010696:	f003 0301 	and.w	r3, r3, #1
 801069a:	2b00      	cmp	r3, #0
 801069c:	d00a      	beq.n	80106b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801069e:	687b      	ldr	r3, [r7, #4]
 80106a0:	681b      	ldr	r3, [r3, #0]
 80106a2:	685b      	ldr	r3, [r3, #4]
 80106a4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80106a8:	687b      	ldr	r3, [r7, #4]
 80106aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80106ac:	687b      	ldr	r3, [r7, #4]
 80106ae:	681b      	ldr	r3, [r3, #0]
 80106b0:	430a      	orrs	r2, r1
 80106b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80106b4:	687b      	ldr	r3, [r7, #4]
 80106b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80106b8:	f003 0302 	and.w	r3, r3, #2
 80106bc:	2b00      	cmp	r3, #0
 80106be:	d00a      	beq.n	80106d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	681b      	ldr	r3, [r3, #0]
 80106c4:	685b      	ldr	r3, [r3, #4]
 80106c6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80106ca:	687b      	ldr	r3, [r7, #4]
 80106cc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80106ce:	687b      	ldr	r3, [r7, #4]
 80106d0:	681b      	ldr	r3, [r3, #0]
 80106d2:	430a      	orrs	r2, r1
 80106d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80106d6:	687b      	ldr	r3, [r7, #4]
 80106d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80106da:	f003 0304 	and.w	r3, r3, #4
 80106de:	2b00      	cmp	r3, #0
 80106e0:	d00a      	beq.n	80106f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80106e2:	687b      	ldr	r3, [r7, #4]
 80106e4:	681b      	ldr	r3, [r3, #0]
 80106e6:	685b      	ldr	r3, [r3, #4]
 80106e8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80106ec:	687b      	ldr	r3, [r7, #4]
 80106ee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80106f0:	687b      	ldr	r3, [r7, #4]
 80106f2:	681b      	ldr	r3, [r3, #0]
 80106f4:	430a      	orrs	r2, r1
 80106f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80106f8:	687b      	ldr	r3, [r7, #4]
 80106fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80106fc:	f003 0310 	and.w	r3, r3, #16
 8010700:	2b00      	cmp	r3, #0
 8010702:	d00a      	beq.n	801071a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8010704:	687b      	ldr	r3, [r7, #4]
 8010706:	681b      	ldr	r3, [r3, #0]
 8010708:	689b      	ldr	r3, [r3, #8]
 801070a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 801070e:	687b      	ldr	r3, [r7, #4]
 8010710:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8010712:	687b      	ldr	r3, [r7, #4]
 8010714:	681b      	ldr	r3, [r3, #0]
 8010716:	430a      	orrs	r2, r1
 8010718:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801071a:	687b      	ldr	r3, [r7, #4]
 801071c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801071e:	f003 0320 	and.w	r3, r3, #32
 8010722:	2b00      	cmp	r3, #0
 8010724:	d00a      	beq.n	801073c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8010726:	687b      	ldr	r3, [r7, #4]
 8010728:	681b      	ldr	r3, [r3, #0]
 801072a:	689b      	ldr	r3, [r3, #8]
 801072c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8010730:	687b      	ldr	r3, [r7, #4]
 8010732:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8010734:	687b      	ldr	r3, [r7, #4]
 8010736:	681b      	ldr	r3, [r3, #0]
 8010738:	430a      	orrs	r2, r1
 801073a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801073c:	687b      	ldr	r3, [r7, #4]
 801073e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010740:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010744:	2b00      	cmp	r3, #0
 8010746:	d01a      	beq.n	801077e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8010748:	687b      	ldr	r3, [r7, #4]
 801074a:	681b      	ldr	r3, [r3, #0]
 801074c:	685b      	ldr	r3, [r3, #4]
 801074e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8010752:	687b      	ldr	r3, [r7, #4]
 8010754:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8010756:	687b      	ldr	r3, [r7, #4]
 8010758:	681b      	ldr	r3, [r3, #0]
 801075a:	430a      	orrs	r2, r1
 801075c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801075e:	687b      	ldr	r3, [r7, #4]
 8010760:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010762:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8010766:	d10a      	bne.n	801077e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8010768:	687b      	ldr	r3, [r7, #4]
 801076a:	681b      	ldr	r3, [r3, #0]
 801076c:	685b      	ldr	r3, [r3, #4]
 801076e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8010772:	687b      	ldr	r3, [r7, #4]
 8010774:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8010776:	687b      	ldr	r3, [r7, #4]
 8010778:	681b      	ldr	r3, [r3, #0]
 801077a:	430a      	orrs	r2, r1
 801077c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801077e:	687b      	ldr	r3, [r7, #4]
 8010780:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010782:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010786:	2b00      	cmp	r3, #0
 8010788:	d00a      	beq.n	80107a0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801078a:	687b      	ldr	r3, [r7, #4]
 801078c:	681b      	ldr	r3, [r3, #0]
 801078e:	685b      	ldr	r3, [r3, #4]
 8010790:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8010798:	687b      	ldr	r3, [r7, #4]
 801079a:	681b      	ldr	r3, [r3, #0]
 801079c:	430a      	orrs	r2, r1
 801079e:	605a      	str	r2, [r3, #4]
  }
}
 80107a0:	bf00      	nop
 80107a2:	370c      	adds	r7, #12
 80107a4:	46bd      	mov	sp, r7
 80107a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107aa:	4770      	bx	lr

080107ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80107ac:	b580      	push	{r7, lr}
 80107ae:	b098      	sub	sp, #96	@ 0x60
 80107b0:	af02      	add	r7, sp, #8
 80107b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80107b4:	687b      	ldr	r3, [r7, #4]
 80107b6:	2200      	movs	r2, #0
 80107b8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80107bc:	f7f6 feb4 	bl	8007528 <HAL_GetTick>
 80107c0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80107c2:	687b      	ldr	r3, [r7, #4]
 80107c4:	681b      	ldr	r3, [r3, #0]
 80107c6:	681b      	ldr	r3, [r3, #0]
 80107c8:	f003 0308 	and.w	r3, r3, #8
 80107cc:	2b08      	cmp	r3, #8
 80107ce:	d12f      	bne.n	8010830 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80107d0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80107d4:	9300      	str	r3, [sp, #0]
 80107d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80107d8:	2200      	movs	r2, #0
 80107da:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80107de:	6878      	ldr	r0, [r7, #4]
 80107e0:	f000 f88e 	bl	8010900 <UART_WaitOnFlagUntilTimeout>
 80107e4:	4603      	mov	r3, r0
 80107e6:	2b00      	cmp	r3, #0
 80107e8:	d022      	beq.n	8010830 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80107ea:	687b      	ldr	r3, [r7, #4]
 80107ec:	681b      	ldr	r3, [r3, #0]
 80107ee:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80107f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80107f2:	e853 3f00 	ldrex	r3, [r3]
 80107f6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80107f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80107fa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80107fe:	653b      	str	r3, [r7, #80]	@ 0x50
 8010800:	687b      	ldr	r3, [r7, #4]
 8010802:	681b      	ldr	r3, [r3, #0]
 8010804:	461a      	mov	r2, r3
 8010806:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010808:	647b      	str	r3, [r7, #68]	@ 0x44
 801080a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801080c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801080e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010810:	e841 2300 	strex	r3, r2, [r1]
 8010814:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8010816:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010818:	2b00      	cmp	r3, #0
 801081a:	d1e6      	bne.n	80107ea <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 801081c:	687b      	ldr	r3, [r7, #4]
 801081e:	2220      	movs	r2, #32
 8010820:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	2200      	movs	r2, #0
 8010828:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801082c:	2303      	movs	r3, #3
 801082e:	e063      	b.n	80108f8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	681b      	ldr	r3, [r3, #0]
 8010834:	681b      	ldr	r3, [r3, #0]
 8010836:	f003 0304 	and.w	r3, r3, #4
 801083a:	2b04      	cmp	r3, #4
 801083c:	d149      	bne.n	80108d2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801083e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8010842:	9300      	str	r3, [sp, #0]
 8010844:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010846:	2200      	movs	r2, #0
 8010848:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 801084c:	6878      	ldr	r0, [r7, #4]
 801084e:	f000 f857 	bl	8010900 <UART_WaitOnFlagUntilTimeout>
 8010852:	4603      	mov	r3, r0
 8010854:	2b00      	cmp	r3, #0
 8010856:	d03c      	beq.n	80108d2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010858:	687b      	ldr	r3, [r7, #4]
 801085a:	681b      	ldr	r3, [r3, #0]
 801085c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801085e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010860:	e853 3f00 	ldrex	r3, [r3]
 8010864:	623b      	str	r3, [r7, #32]
   return(result);
 8010866:	6a3b      	ldr	r3, [r7, #32]
 8010868:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801086c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801086e:	687b      	ldr	r3, [r7, #4]
 8010870:	681b      	ldr	r3, [r3, #0]
 8010872:	461a      	mov	r2, r3
 8010874:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010876:	633b      	str	r3, [r7, #48]	@ 0x30
 8010878:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801087a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801087c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801087e:	e841 2300 	strex	r3, r2, [r1]
 8010882:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8010884:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010886:	2b00      	cmp	r3, #0
 8010888:	d1e6      	bne.n	8010858 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801088a:	687b      	ldr	r3, [r7, #4]
 801088c:	681b      	ldr	r3, [r3, #0]
 801088e:	3308      	adds	r3, #8
 8010890:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010892:	693b      	ldr	r3, [r7, #16]
 8010894:	e853 3f00 	ldrex	r3, [r3]
 8010898:	60fb      	str	r3, [r7, #12]
   return(result);
 801089a:	68fb      	ldr	r3, [r7, #12]
 801089c:	f023 0301 	bic.w	r3, r3, #1
 80108a0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	681b      	ldr	r3, [r3, #0]
 80108a6:	3308      	adds	r3, #8
 80108a8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80108aa:	61fa      	str	r2, [r7, #28]
 80108ac:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80108ae:	69b9      	ldr	r1, [r7, #24]
 80108b0:	69fa      	ldr	r2, [r7, #28]
 80108b2:	e841 2300 	strex	r3, r2, [r1]
 80108b6:	617b      	str	r3, [r7, #20]
   return(result);
 80108b8:	697b      	ldr	r3, [r7, #20]
 80108ba:	2b00      	cmp	r3, #0
 80108bc:	d1e5      	bne.n	801088a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80108be:	687b      	ldr	r3, [r7, #4]
 80108c0:	2220      	movs	r2, #32
 80108c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80108c6:	687b      	ldr	r3, [r7, #4]
 80108c8:	2200      	movs	r2, #0
 80108ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80108ce:	2303      	movs	r3, #3
 80108d0:	e012      	b.n	80108f8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80108d2:	687b      	ldr	r3, [r7, #4]
 80108d4:	2220      	movs	r2, #32
 80108d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80108da:	687b      	ldr	r3, [r7, #4]
 80108dc:	2220      	movs	r2, #32
 80108de:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80108e2:	687b      	ldr	r3, [r7, #4]
 80108e4:	2200      	movs	r2, #0
 80108e6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80108e8:	687b      	ldr	r3, [r7, #4]
 80108ea:	2200      	movs	r2, #0
 80108ec:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80108ee:	687b      	ldr	r3, [r7, #4]
 80108f0:	2200      	movs	r2, #0
 80108f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80108f6:	2300      	movs	r3, #0
}
 80108f8:	4618      	mov	r0, r3
 80108fa:	3758      	adds	r7, #88	@ 0x58
 80108fc:	46bd      	mov	sp, r7
 80108fe:	bd80      	pop	{r7, pc}

08010900 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8010900:	b580      	push	{r7, lr}
 8010902:	b084      	sub	sp, #16
 8010904:	af00      	add	r7, sp, #0
 8010906:	60f8      	str	r0, [r7, #12]
 8010908:	60b9      	str	r1, [r7, #8]
 801090a:	603b      	str	r3, [r7, #0]
 801090c:	4613      	mov	r3, r2
 801090e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010910:	e04f      	b.n	80109b2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010912:	69bb      	ldr	r3, [r7, #24]
 8010914:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010918:	d04b      	beq.n	80109b2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801091a:	f7f6 fe05 	bl	8007528 <HAL_GetTick>
 801091e:	4602      	mov	r2, r0
 8010920:	683b      	ldr	r3, [r7, #0]
 8010922:	1ad3      	subs	r3, r2, r3
 8010924:	69ba      	ldr	r2, [r7, #24]
 8010926:	429a      	cmp	r2, r3
 8010928:	d302      	bcc.n	8010930 <UART_WaitOnFlagUntilTimeout+0x30>
 801092a:	69bb      	ldr	r3, [r7, #24]
 801092c:	2b00      	cmp	r3, #0
 801092e:	d101      	bne.n	8010934 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8010930:	2303      	movs	r3, #3
 8010932:	e04e      	b.n	80109d2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8010934:	68fb      	ldr	r3, [r7, #12]
 8010936:	681b      	ldr	r3, [r3, #0]
 8010938:	681b      	ldr	r3, [r3, #0]
 801093a:	f003 0304 	and.w	r3, r3, #4
 801093e:	2b00      	cmp	r3, #0
 8010940:	d037      	beq.n	80109b2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8010942:	68bb      	ldr	r3, [r7, #8]
 8010944:	2b80      	cmp	r3, #128	@ 0x80
 8010946:	d034      	beq.n	80109b2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8010948:	68bb      	ldr	r3, [r7, #8]
 801094a:	2b40      	cmp	r3, #64	@ 0x40
 801094c:	d031      	beq.n	80109b2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 801094e:	68fb      	ldr	r3, [r7, #12]
 8010950:	681b      	ldr	r3, [r3, #0]
 8010952:	69db      	ldr	r3, [r3, #28]
 8010954:	f003 0308 	and.w	r3, r3, #8
 8010958:	2b08      	cmp	r3, #8
 801095a:	d110      	bne.n	801097e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801095c:	68fb      	ldr	r3, [r7, #12]
 801095e:	681b      	ldr	r3, [r3, #0]
 8010960:	2208      	movs	r2, #8
 8010962:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8010964:	68f8      	ldr	r0, [r7, #12]
 8010966:	f000 f920 	bl	8010baa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 801096a:	68fb      	ldr	r3, [r7, #12]
 801096c:	2208      	movs	r2, #8
 801096e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8010972:	68fb      	ldr	r3, [r7, #12]
 8010974:	2200      	movs	r2, #0
 8010976:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 801097a:	2301      	movs	r3, #1
 801097c:	e029      	b.n	80109d2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801097e:	68fb      	ldr	r3, [r7, #12]
 8010980:	681b      	ldr	r3, [r3, #0]
 8010982:	69db      	ldr	r3, [r3, #28]
 8010984:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8010988:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801098c:	d111      	bne.n	80109b2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801098e:	68fb      	ldr	r3, [r7, #12]
 8010990:	681b      	ldr	r3, [r3, #0]
 8010992:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8010996:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8010998:	68f8      	ldr	r0, [r7, #12]
 801099a:	f000 f906 	bl	8010baa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801099e:	68fb      	ldr	r3, [r7, #12]
 80109a0:	2220      	movs	r2, #32
 80109a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80109a6:	68fb      	ldr	r3, [r7, #12]
 80109a8:	2200      	movs	r2, #0
 80109aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80109ae:	2303      	movs	r3, #3
 80109b0:	e00f      	b.n	80109d2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80109b2:	68fb      	ldr	r3, [r7, #12]
 80109b4:	681b      	ldr	r3, [r3, #0]
 80109b6:	69da      	ldr	r2, [r3, #28]
 80109b8:	68bb      	ldr	r3, [r7, #8]
 80109ba:	4013      	ands	r3, r2
 80109bc:	68ba      	ldr	r2, [r7, #8]
 80109be:	429a      	cmp	r2, r3
 80109c0:	bf0c      	ite	eq
 80109c2:	2301      	moveq	r3, #1
 80109c4:	2300      	movne	r3, #0
 80109c6:	b2db      	uxtb	r3, r3
 80109c8:	461a      	mov	r2, r3
 80109ca:	79fb      	ldrb	r3, [r7, #7]
 80109cc:	429a      	cmp	r2, r3
 80109ce:	d0a0      	beq.n	8010912 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80109d0:	2300      	movs	r3, #0
}
 80109d2:	4618      	mov	r0, r3
 80109d4:	3710      	adds	r7, #16
 80109d6:	46bd      	mov	sp, r7
 80109d8:	bd80      	pop	{r7, pc}
	...

080109dc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80109dc:	b580      	push	{r7, lr}
 80109de:	b096      	sub	sp, #88	@ 0x58
 80109e0:	af00      	add	r7, sp, #0
 80109e2:	60f8      	str	r0, [r7, #12]
 80109e4:	60b9      	str	r1, [r7, #8]
 80109e6:	4613      	mov	r3, r2
 80109e8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80109ea:	68fb      	ldr	r3, [r7, #12]
 80109ec:	68ba      	ldr	r2, [r7, #8]
 80109ee:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 80109f0:	68fb      	ldr	r3, [r7, #12]
 80109f2:	88fa      	ldrh	r2, [r7, #6]
 80109f4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80109f8:	68fb      	ldr	r3, [r7, #12]
 80109fa:	2200      	movs	r2, #0
 80109fc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8010a00:	68fb      	ldr	r3, [r7, #12]
 8010a02:	2222      	movs	r2, #34	@ 0x22
 8010a04:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8010a08:	68fb      	ldr	r3, [r7, #12]
 8010a0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010a0e:	2b00      	cmp	r3, #0
 8010a10:	d02d      	beq.n	8010a6e <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8010a12:	68fb      	ldr	r3, [r7, #12]
 8010a14:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010a18:	4a40      	ldr	r2, [pc, #256]	@ (8010b1c <UART_Start_Receive_DMA+0x140>)
 8010a1a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8010a1c:	68fb      	ldr	r3, [r7, #12]
 8010a1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010a22:	4a3f      	ldr	r2, [pc, #252]	@ (8010b20 <UART_Start_Receive_DMA+0x144>)
 8010a24:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8010a26:	68fb      	ldr	r3, [r7, #12]
 8010a28:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010a2c:	4a3d      	ldr	r2, [pc, #244]	@ (8010b24 <UART_Start_Receive_DMA+0x148>)
 8010a2e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8010a30:	68fb      	ldr	r3, [r7, #12]
 8010a32:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010a36:	2200      	movs	r2, #0
 8010a38:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8010a3a:	68fb      	ldr	r3, [r7, #12]
 8010a3c:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8010a40:	68fb      	ldr	r3, [r7, #12]
 8010a42:	681b      	ldr	r3, [r3, #0]
 8010a44:	3324      	adds	r3, #36	@ 0x24
 8010a46:	4619      	mov	r1, r3
 8010a48:	68fb      	ldr	r3, [r7, #12]
 8010a4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010a4c:	461a      	mov	r2, r3
 8010a4e:	88fb      	ldrh	r3, [r7, #6]
 8010a50:	f7f8 f850 	bl	8008af4 <HAL_DMA_Start_IT>
 8010a54:	4603      	mov	r3, r0
 8010a56:	2b00      	cmp	r3, #0
 8010a58:	d009      	beq.n	8010a6e <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8010a5a:	68fb      	ldr	r3, [r7, #12]
 8010a5c:	2210      	movs	r2, #16
 8010a5e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8010a62:	68fb      	ldr	r3, [r7, #12]
 8010a64:	2220      	movs	r2, #32
 8010a66:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8010a6a:	2301      	movs	r3, #1
 8010a6c:	e051      	b.n	8010b12 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8010a6e:	68fb      	ldr	r3, [r7, #12]
 8010a70:	691b      	ldr	r3, [r3, #16]
 8010a72:	2b00      	cmp	r3, #0
 8010a74:	d018      	beq.n	8010aa8 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010a76:	68fb      	ldr	r3, [r7, #12]
 8010a78:	681b      	ldr	r3, [r3, #0]
 8010a7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010a7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010a7e:	e853 3f00 	ldrex	r3, [r3]
 8010a82:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8010a84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010a86:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8010a8a:	657b      	str	r3, [r7, #84]	@ 0x54
 8010a8c:	68fb      	ldr	r3, [r7, #12]
 8010a8e:	681b      	ldr	r3, [r3, #0]
 8010a90:	461a      	mov	r2, r3
 8010a92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010a94:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010a96:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a98:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8010a9a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010a9c:	e841 2300 	strex	r3, r2, [r1]
 8010aa0:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8010aa2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010aa4:	2b00      	cmp	r3, #0
 8010aa6:	d1e6      	bne.n	8010a76 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010aa8:	68fb      	ldr	r3, [r7, #12]
 8010aaa:	681b      	ldr	r3, [r3, #0]
 8010aac:	3308      	adds	r3, #8
 8010aae:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010ab0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010ab2:	e853 3f00 	ldrex	r3, [r3]
 8010ab6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8010ab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010aba:	f043 0301 	orr.w	r3, r3, #1
 8010abe:	653b      	str	r3, [r7, #80]	@ 0x50
 8010ac0:	68fb      	ldr	r3, [r7, #12]
 8010ac2:	681b      	ldr	r3, [r3, #0]
 8010ac4:	3308      	adds	r3, #8
 8010ac6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8010ac8:	637a      	str	r2, [r7, #52]	@ 0x34
 8010aca:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010acc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8010ace:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010ad0:	e841 2300 	strex	r3, r2, [r1]
 8010ad4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8010ad6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010ad8:	2b00      	cmp	r3, #0
 8010ada:	d1e5      	bne.n	8010aa8 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010adc:	68fb      	ldr	r3, [r7, #12]
 8010ade:	681b      	ldr	r3, [r3, #0]
 8010ae0:	3308      	adds	r3, #8
 8010ae2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010ae4:	697b      	ldr	r3, [r7, #20]
 8010ae6:	e853 3f00 	ldrex	r3, [r3]
 8010aea:	613b      	str	r3, [r7, #16]
   return(result);
 8010aec:	693b      	ldr	r3, [r7, #16]
 8010aee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010af2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010af4:	68fb      	ldr	r3, [r7, #12]
 8010af6:	681b      	ldr	r3, [r3, #0]
 8010af8:	3308      	adds	r3, #8
 8010afa:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8010afc:	623a      	str	r2, [r7, #32]
 8010afe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010b00:	69f9      	ldr	r1, [r7, #28]
 8010b02:	6a3a      	ldr	r2, [r7, #32]
 8010b04:	e841 2300 	strex	r3, r2, [r1]
 8010b08:	61bb      	str	r3, [r7, #24]
   return(result);
 8010b0a:	69bb      	ldr	r3, [r7, #24]
 8010b0c:	2b00      	cmp	r3, #0
 8010b0e:	d1e5      	bne.n	8010adc <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8010b10:	2300      	movs	r3, #0
}
 8010b12:	4618      	mov	r0, r3
 8010b14:	3758      	adds	r7, #88	@ 0x58
 8010b16:	46bd      	mov	sp, r7
 8010b18:	bd80      	pop	{r7, pc}
 8010b1a:	bf00      	nop
 8010b1c:	08010c77 	.word	0x08010c77
 8010b20:	08010da3 	.word	0x08010da3
 8010b24:	08010de1 	.word	0x08010de1

08010b28 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8010b28:	b480      	push	{r7}
 8010b2a:	b08f      	sub	sp, #60	@ 0x3c
 8010b2c:	af00      	add	r7, sp, #0
 8010b2e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8010b30:	687b      	ldr	r3, [r7, #4]
 8010b32:	681b      	ldr	r3, [r3, #0]
 8010b34:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010b36:	6a3b      	ldr	r3, [r7, #32]
 8010b38:	e853 3f00 	ldrex	r3, [r3]
 8010b3c:	61fb      	str	r3, [r7, #28]
   return(result);
 8010b3e:	69fb      	ldr	r3, [r7, #28]
 8010b40:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8010b44:	637b      	str	r3, [r7, #52]	@ 0x34
 8010b46:	687b      	ldr	r3, [r7, #4]
 8010b48:	681b      	ldr	r3, [r3, #0]
 8010b4a:	461a      	mov	r2, r3
 8010b4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010b4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010b50:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010b52:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010b54:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010b56:	e841 2300 	strex	r3, r2, [r1]
 8010b5a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8010b5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010b5e:	2b00      	cmp	r3, #0
 8010b60:	d1e6      	bne.n	8010b30 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8010b62:	687b      	ldr	r3, [r7, #4]
 8010b64:	681b      	ldr	r3, [r3, #0]
 8010b66:	3308      	adds	r3, #8
 8010b68:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010b6a:	68fb      	ldr	r3, [r7, #12]
 8010b6c:	e853 3f00 	ldrex	r3, [r3]
 8010b70:	60bb      	str	r3, [r7, #8]
   return(result);
 8010b72:	68bb      	ldr	r3, [r7, #8]
 8010b74:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8010b78:	633b      	str	r3, [r7, #48]	@ 0x30
 8010b7a:	687b      	ldr	r3, [r7, #4]
 8010b7c:	681b      	ldr	r3, [r3, #0]
 8010b7e:	3308      	adds	r3, #8
 8010b80:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010b82:	61ba      	str	r2, [r7, #24]
 8010b84:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010b86:	6979      	ldr	r1, [r7, #20]
 8010b88:	69ba      	ldr	r2, [r7, #24]
 8010b8a:	e841 2300 	strex	r3, r2, [r1]
 8010b8e:	613b      	str	r3, [r7, #16]
   return(result);
 8010b90:	693b      	ldr	r3, [r7, #16]
 8010b92:	2b00      	cmp	r3, #0
 8010b94:	d1e5      	bne.n	8010b62 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010b96:	687b      	ldr	r3, [r7, #4]
 8010b98:	2220      	movs	r2, #32
 8010b9a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8010b9e:	bf00      	nop
 8010ba0:	373c      	adds	r7, #60	@ 0x3c
 8010ba2:	46bd      	mov	sp, r7
 8010ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ba8:	4770      	bx	lr

08010baa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8010baa:	b480      	push	{r7}
 8010bac:	b095      	sub	sp, #84	@ 0x54
 8010bae:	af00      	add	r7, sp, #0
 8010bb0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	681b      	ldr	r3, [r3, #0]
 8010bb6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010bb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010bba:	e853 3f00 	ldrex	r3, [r3]
 8010bbe:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8010bc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010bc2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8010bc6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010bc8:	687b      	ldr	r3, [r7, #4]
 8010bca:	681b      	ldr	r3, [r3, #0]
 8010bcc:	461a      	mov	r2, r3
 8010bce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010bd0:	643b      	str	r3, [r7, #64]	@ 0x40
 8010bd2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010bd4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8010bd6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8010bd8:	e841 2300 	strex	r3, r2, [r1]
 8010bdc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8010bde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010be0:	2b00      	cmp	r3, #0
 8010be2:	d1e6      	bne.n	8010bb2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010be4:	687b      	ldr	r3, [r7, #4]
 8010be6:	681b      	ldr	r3, [r3, #0]
 8010be8:	3308      	adds	r3, #8
 8010bea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010bec:	6a3b      	ldr	r3, [r7, #32]
 8010bee:	e853 3f00 	ldrex	r3, [r3]
 8010bf2:	61fb      	str	r3, [r7, #28]
   return(result);
 8010bf4:	69fb      	ldr	r3, [r7, #28]
 8010bf6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8010bfa:	f023 0301 	bic.w	r3, r3, #1
 8010bfe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010c00:	687b      	ldr	r3, [r7, #4]
 8010c02:	681b      	ldr	r3, [r3, #0]
 8010c04:	3308      	adds	r3, #8
 8010c06:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010c08:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8010c0a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010c0c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010c0e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010c10:	e841 2300 	strex	r3, r2, [r1]
 8010c14:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8010c16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c18:	2b00      	cmp	r3, #0
 8010c1a:	d1e3      	bne.n	8010be4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010c1c:	687b      	ldr	r3, [r7, #4]
 8010c1e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010c20:	2b01      	cmp	r3, #1
 8010c22:	d118      	bne.n	8010c56 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	681b      	ldr	r3, [r3, #0]
 8010c28:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010c2a:	68fb      	ldr	r3, [r7, #12]
 8010c2c:	e853 3f00 	ldrex	r3, [r3]
 8010c30:	60bb      	str	r3, [r7, #8]
   return(result);
 8010c32:	68bb      	ldr	r3, [r7, #8]
 8010c34:	f023 0310 	bic.w	r3, r3, #16
 8010c38:	647b      	str	r3, [r7, #68]	@ 0x44
 8010c3a:	687b      	ldr	r3, [r7, #4]
 8010c3c:	681b      	ldr	r3, [r3, #0]
 8010c3e:	461a      	mov	r2, r3
 8010c40:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010c42:	61bb      	str	r3, [r7, #24]
 8010c44:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010c46:	6979      	ldr	r1, [r7, #20]
 8010c48:	69ba      	ldr	r2, [r7, #24]
 8010c4a:	e841 2300 	strex	r3, r2, [r1]
 8010c4e:	613b      	str	r3, [r7, #16]
   return(result);
 8010c50:	693b      	ldr	r3, [r7, #16]
 8010c52:	2b00      	cmp	r3, #0
 8010c54:	d1e6      	bne.n	8010c24 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8010c56:	687b      	ldr	r3, [r7, #4]
 8010c58:	2220      	movs	r2, #32
 8010c5a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010c5e:	687b      	ldr	r3, [r7, #4]
 8010c60:	2200      	movs	r2, #0
 8010c62:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8010c64:	687b      	ldr	r3, [r7, #4]
 8010c66:	2200      	movs	r2, #0
 8010c68:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8010c6a:	bf00      	nop
 8010c6c:	3754      	adds	r7, #84	@ 0x54
 8010c6e:	46bd      	mov	sp, r7
 8010c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c74:	4770      	bx	lr

08010c76 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8010c76:	b580      	push	{r7, lr}
 8010c78:	b09c      	sub	sp, #112	@ 0x70
 8010c7a:	af00      	add	r7, sp, #0
 8010c7c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010c7e:	687b      	ldr	r3, [r7, #4]
 8010c80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010c82:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8010c84:	687b      	ldr	r3, [r7, #4]
 8010c86:	681b      	ldr	r3, [r3, #0]
 8010c88:	681b      	ldr	r3, [r3, #0]
 8010c8a:	f003 0320 	and.w	r3, r3, #32
 8010c8e:	2b00      	cmp	r3, #0
 8010c90:	d171      	bne.n	8010d76 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8010c92:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010c94:	2200      	movs	r2, #0
 8010c96:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010c9a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010c9c:	681b      	ldr	r3, [r3, #0]
 8010c9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010ca0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010ca2:	e853 3f00 	ldrex	r3, [r3]
 8010ca6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8010ca8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010caa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8010cae:	66bb      	str	r3, [r7, #104]	@ 0x68
 8010cb0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010cb2:	681b      	ldr	r3, [r3, #0]
 8010cb4:	461a      	mov	r2, r3
 8010cb6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8010cb8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8010cba:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010cbc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8010cbe:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8010cc0:	e841 2300 	strex	r3, r2, [r1]
 8010cc4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8010cc6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010cc8:	2b00      	cmp	r3, #0
 8010cca:	d1e6      	bne.n	8010c9a <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010ccc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010cce:	681b      	ldr	r3, [r3, #0]
 8010cd0:	3308      	adds	r3, #8
 8010cd2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010cd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010cd6:	e853 3f00 	ldrex	r3, [r3]
 8010cda:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8010cdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010cde:	f023 0301 	bic.w	r3, r3, #1
 8010ce2:	667b      	str	r3, [r7, #100]	@ 0x64
 8010ce4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010ce6:	681b      	ldr	r3, [r3, #0]
 8010ce8:	3308      	adds	r3, #8
 8010cea:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8010cec:	647a      	str	r2, [r7, #68]	@ 0x44
 8010cee:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010cf0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8010cf2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010cf4:	e841 2300 	strex	r3, r2, [r1]
 8010cf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8010cfa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010cfc:	2b00      	cmp	r3, #0
 8010cfe:	d1e5      	bne.n	8010ccc <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010d00:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010d02:	681b      	ldr	r3, [r3, #0]
 8010d04:	3308      	adds	r3, #8
 8010d06:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010d08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d0a:	e853 3f00 	ldrex	r3, [r3]
 8010d0e:	623b      	str	r3, [r7, #32]
   return(result);
 8010d10:	6a3b      	ldr	r3, [r7, #32]
 8010d12:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010d16:	663b      	str	r3, [r7, #96]	@ 0x60
 8010d18:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010d1a:	681b      	ldr	r3, [r3, #0]
 8010d1c:	3308      	adds	r3, #8
 8010d1e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8010d20:	633a      	str	r2, [r7, #48]	@ 0x30
 8010d22:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010d24:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010d26:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010d28:	e841 2300 	strex	r3, r2, [r1]
 8010d2c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8010d2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010d30:	2b00      	cmp	r3, #0
 8010d32:	d1e5      	bne.n	8010d00 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8010d34:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010d36:	2220      	movs	r2, #32
 8010d38:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010d3c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010d3e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010d40:	2b01      	cmp	r3, #1
 8010d42:	d118      	bne.n	8010d76 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010d44:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010d46:	681b      	ldr	r3, [r3, #0]
 8010d48:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010d4a:	693b      	ldr	r3, [r7, #16]
 8010d4c:	e853 3f00 	ldrex	r3, [r3]
 8010d50:	60fb      	str	r3, [r7, #12]
   return(result);
 8010d52:	68fb      	ldr	r3, [r7, #12]
 8010d54:	f023 0310 	bic.w	r3, r3, #16
 8010d58:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8010d5a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010d5c:	681b      	ldr	r3, [r3, #0]
 8010d5e:	461a      	mov	r2, r3
 8010d60:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010d62:	61fb      	str	r3, [r7, #28]
 8010d64:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010d66:	69b9      	ldr	r1, [r7, #24]
 8010d68:	69fa      	ldr	r2, [r7, #28]
 8010d6a:	e841 2300 	strex	r3, r2, [r1]
 8010d6e:	617b      	str	r3, [r7, #20]
   return(result);
 8010d70:	697b      	ldr	r3, [r7, #20]
 8010d72:	2b00      	cmp	r3, #0
 8010d74:	d1e6      	bne.n	8010d44 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010d76:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010d78:	2200      	movs	r2, #0
 8010d7a:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010d7c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010d7e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010d80:	2b01      	cmp	r3, #1
 8010d82:	d107      	bne.n	8010d94 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010d84:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010d86:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8010d8a:	4619      	mov	r1, r3
 8010d8c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8010d8e:	f7ff fa37 	bl	8010200 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8010d92:	e002      	b.n	8010d9a <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8010d94:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8010d96:	f7f6 fa8f 	bl	80072b8 <HAL_UART_RxCpltCallback>
}
 8010d9a:	bf00      	nop
 8010d9c:	3770      	adds	r7, #112	@ 0x70
 8010d9e:	46bd      	mov	sp, r7
 8010da0:	bd80      	pop	{r7, pc}

08010da2 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8010da2:	b580      	push	{r7, lr}
 8010da4:	b084      	sub	sp, #16
 8010da6:	af00      	add	r7, sp, #0
 8010da8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010daa:	687b      	ldr	r3, [r7, #4]
 8010dac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010dae:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8010db0:	68fb      	ldr	r3, [r7, #12]
 8010db2:	2201      	movs	r2, #1
 8010db4:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010db6:	68fb      	ldr	r3, [r7, #12]
 8010db8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010dba:	2b01      	cmp	r3, #1
 8010dbc:	d109      	bne.n	8010dd2 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8010dbe:	68fb      	ldr	r3, [r7, #12]
 8010dc0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8010dc4:	085b      	lsrs	r3, r3, #1
 8010dc6:	b29b      	uxth	r3, r3
 8010dc8:	4619      	mov	r1, r3
 8010dca:	68f8      	ldr	r0, [r7, #12]
 8010dcc:	f7ff fa18 	bl	8010200 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8010dd0:	e002      	b.n	8010dd8 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8010dd2:	68f8      	ldr	r0, [r7, #12]
 8010dd4:	f7ff fa00 	bl	80101d8 <HAL_UART_RxHalfCpltCallback>
}
 8010dd8:	bf00      	nop
 8010dda:	3710      	adds	r7, #16
 8010ddc:	46bd      	mov	sp, r7
 8010dde:	bd80      	pop	{r7, pc}

08010de0 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8010de0:	b580      	push	{r7, lr}
 8010de2:	b086      	sub	sp, #24
 8010de4:	af00      	add	r7, sp, #0
 8010de6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010de8:	687b      	ldr	r3, [r7, #4]
 8010dea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010dec:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8010dee:	697b      	ldr	r3, [r7, #20]
 8010df0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010df4:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8010df6:	697b      	ldr	r3, [r7, #20]
 8010df8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010dfc:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8010dfe:	697b      	ldr	r3, [r7, #20]
 8010e00:	681b      	ldr	r3, [r3, #0]
 8010e02:	689b      	ldr	r3, [r3, #8]
 8010e04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010e08:	2b80      	cmp	r3, #128	@ 0x80
 8010e0a:	d109      	bne.n	8010e20 <UART_DMAError+0x40>
 8010e0c:	693b      	ldr	r3, [r7, #16]
 8010e0e:	2b21      	cmp	r3, #33	@ 0x21
 8010e10:	d106      	bne.n	8010e20 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8010e12:	697b      	ldr	r3, [r7, #20]
 8010e14:	2200      	movs	r2, #0
 8010e16:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8010e1a:	6978      	ldr	r0, [r7, #20]
 8010e1c:	f7ff fe84 	bl	8010b28 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8010e20:	697b      	ldr	r3, [r7, #20]
 8010e22:	681b      	ldr	r3, [r3, #0]
 8010e24:	689b      	ldr	r3, [r3, #8]
 8010e26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010e2a:	2b40      	cmp	r3, #64	@ 0x40
 8010e2c:	d109      	bne.n	8010e42 <UART_DMAError+0x62>
 8010e2e:	68fb      	ldr	r3, [r7, #12]
 8010e30:	2b22      	cmp	r3, #34	@ 0x22
 8010e32:	d106      	bne.n	8010e42 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8010e34:	697b      	ldr	r3, [r7, #20]
 8010e36:	2200      	movs	r2, #0
 8010e38:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8010e3c:	6978      	ldr	r0, [r7, #20]
 8010e3e:	f7ff feb4 	bl	8010baa <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8010e42:	697b      	ldr	r3, [r7, #20]
 8010e44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010e48:	f043 0210 	orr.w	r2, r3, #16
 8010e4c:	697b      	ldr	r3, [r7, #20]
 8010e4e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010e52:	6978      	ldr	r0, [r7, #20]
 8010e54:	f7ff f9ca 	bl	80101ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010e58:	bf00      	nop
 8010e5a:	3718      	adds	r7, #24
 8010e5c:	46bd      	mov	sp, r7
 8010e5e:	bd80      	pop	{r7, pc}

08010e60 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8010e60:	b580      	push	{r7, lr}
 8010e62:	b084      	sub	sp, #16
 8010e64:	af00      	add	r7, sp, #0
 8010e66:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010e68:	687b      	ldr	r3, [r7, #4]
 8010e6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010e6c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8010e6e:	68fb      	ldr	r3, [r7, #12]
 8010e70:	2200      	movs	r2, #0
 8010e72:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010e76:	68f8      	ldr	r0, [r7, #12]
 8010e78:	f7ff f9b8 	bl	80101ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010e7c:	bf00      	nop
 8010e7e:	3710      	adds	r7, #16
 8010e80:	46bd      	mov	sp, r7
 8010e82:	bd80      	pop	{r7, pc}

08010e84 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8010e84:	b580      	push	{r7, lr}
 8010e86:	b088      	sub	sp, #32
 8010e88:	af00      	add	r7, sp, #0
 8010e8a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8010e8c:	687b      	ldr	r3, [r7, #4]
 8010e8e:	681b      	ldr	r3, [r3, #0]
 8010e90:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010e92:	68fb      	ldr	r3, [r7, #12]
 8010e94:	e853 3f00 	ldrex	r3, [r3]
 8010e98:	60bb      	str	r3, [r7, #8]
   return(result);
 8010e9a:	68bb      	ldr	r3, [r7, #8]
 8010e9c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010ea0:	61fb      	str	r3, [r7, #28]
 8010ea2:	687b      	ldr	r3, [r7, #4]
 8010ea4:	681b      	ldr	r3, [r3, #0]
 8010ea6:	461a      	mov	r2, r3
 8010ea8:	69fb      	ldr	r3, [r7, #28]
 8010eaa:	61bb      	str	r3, [r7, #24]
 8010eac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010eae:	6979      	ldr	r1, [r7, #20]
 8010eb0:	69ba      	ldr	r2, [r7, #24]
 8010eb2:	e841 2300 	strex	r3, r2, [r1]
 8010eb6:	613b      	str	r3, [r7, #16]
   return(result);
 8010eb8:	693b      	ldr	r3, [r7, #16]
 8010eba:	2b00      	cmp	r3, #0
 8010ebc:	d1e6      	bne.n	8010e8c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010ebe:	687b      	ldr	r3, [r7, #4]
 8010ec0:	2220      	movs	r2, #32
 8010ec2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8010ec6:	687b      	ldr	r3, [r7, #4]
 8010ec8:	2200      	movs	r2, #0
 8010eca:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8010ecc:	6878      	ldr	r0, [r7, #4]
 8010ece:	f7ff f979 	bl	80101c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010ed2:	bf00      	nop
 8010ed4:	3720      	adds	r7, #32
 8010ed6:	46bd      	mov	sp, r7
 8010ed8:	bd80      	pop	{r7, pc}

08010eda <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8010eda:	b480      	push	{r7}
 8010edc:	b083      	sub	sp, #12
 8010ede:	af00      	add	r7, sp, #0
 8010ee0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8010ee2:	bf00      	nop
 8010ee4:	370c      	adds	r7, #12
 8010ee6:	46bd      	mov	sp, r7
 8010ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eec:	4770      	bx	lr

08010eee <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8010eee:	b480      	push	{r7}
 8010ef0:	b083      	sub	sp, #12
 8010ef2:	af00      	add	r7, sp, #0
 8010ef4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8010ef6:	bf00      	nop
 8010ef8:	370c      	adds	r7, #12
 8010efa:	46bd      	mov	sp, r7
 8010efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f00:	4770      	bx	lr

08010f02 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8010f02:	b480      	push	{r7}
 8010f04:	b083      	sub	sp, #12
 8010f06:	af00      	add	r7, sp, #0
 8010f08:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8010f0a:	bf00      	nop
 8010f0c:	370c      	adds	r7, #12
 8010f0e:	46bd      	mov	sp, r7
 8010f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f14:	4770      	bx	lr

08010f16 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8010f16:	b480      	push	{r7}
 8010f18:	b085      	sub	sp, #20
 8010f1a:	af00      	add	r7, sp, #0
 8010f1c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010f1e:	687b      	ldr	r3, [r7, #4]
 8010f20:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8010f24:	2b01      	cmp	r3, #1
 8010f26:	d101      	bne.n	8010f2c <HAL_UARTEx_DisableFifoMode+0x16>
 8010f28:	2302      	movs	r3, #2
 8010f2a:	e027      	b.n	8010f7c <HAL_UARTEx_DisableFifoMode+0x66>
 8010f2c:	687b      	ldr	r3, [r7, #4]
 8010f2e:	2201      	movs	r2, #1
 8010f30:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	2224      	movs	r2, #36	@ 0x24
 8010f38:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010f3c:	687b      	ldr	r3, [r7, #4]
 8010f3e:	681b      	ldr	r3, [r3, #0]
 8010f40:	681b      	ldr	r3, [r3, #0]
 8010f42:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010f44:	687b      	ldr	r3, [r7, #4]
 8010f46:	681b      	ldr	r3, [r3, #0]
 8010f48:	681a      	ldr	r2, [r3, #0]
 8010f4a:	687b      	ldr	r3, [r7, #4]
 8010f4c:	681b      	ldr	r3, [r3, #0]
 8010f4e:	f022 0201 	bic.w	r2, r2, #1
 8010f52:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8010f54:	68fb      	ldr	r3, [r7, #12]
 8010f56:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8010f5a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8010f5c:	687b      	ldr	r3, [r7, #4]
 8010f5e:	2200      	movs	r2, #0
 8010f60:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010f62:	687b      	ldr	r3, [r7, #4]
 8010f64:	681b      	ldr	r3, [r3, #0]
 8010f66:	68fa      	ldr	r2, [r7, #12]
 8010f68:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010f6a:	687b      	ldr	r3, [r7, #4]
 8010f6c:	2220      	movs	r2, #32
 8010f6e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010f72:	687b      	ldr	r3, [r7, #4]
 8010f74:	2200      	movs	r2, #0
 8010f76:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010f7a:	2300      	movs	r3, #0
}
 8010f7c:	4618      	mov	r0, r3
 8010f7e:	3714      	adds	r7, #20
 8010f80:	46bd      	mov	sp, r7
 8010f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f86:	4770      	bx	lr

08010f88 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010f88:	b580      	push	{r7, lr}
 8010f8a:	b084      	sub	sp, #16
 8010f8c:	af00      	add	r7, sp, #0
 8010f8e:	6078      	str	r0, [r7, #4]
 8010f90:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010f92:	687b      	ldr	r3, [r7, #4]
 8010f94:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8010f98:	2b01      	cmp	r3, #1
 8010f9a:	d101      	bne.n	8010fa0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8010f9c:	2302      	movs	r3, #2
 8010f9e:	e02d      	b.n	8010ffc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8010fa0:	687b      	ldr	r3, [r7, #4]
 8010fa2:	2201      	movs	r2, #1
 8010fa4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010fa8:	687b      	ldr	r3, [r7, #4]
 8010faa:	2224      	movs	r2, #36	@ 0x24
 8010fac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010fb0:	687b      	ldr	r3, [r7, #4]
 8010fb2:	681b      	ldr	r3, [r3, #0]
 8010fb4:	681b      	ldr	r3, [r3, #0]
 8010fb6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010fb8:	687b      	ldr	r3, [r7, #4]
 8010fba:	681b      	ldr	r3, [r3, #0]
 8010fbc:	681a      	ldr	r2, [r3, #0]
 8010fbe:	687b      	ldr	r3, [r7, #4]
 8010fc0:	681b      	ldr	r3, [r3, #0]
 8010fc2:	f022 0201 	bic.w	r2, r2, #1
 8010fc6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8010fc8:	687b      	ldr	r3, [r7, #4]
 8010fca:	681b      	ldr	r3, [r3, #0]
 8010fcc:	689b      	ldr	r3, [r3, #8]
 8010fce:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8010fd2:	687b      	ldr	r3, [r7, #4]
 8010fd4:	681b      	ldr	r3, [r3, #0]
 8010fd6:	683a      	ldr	r2, [r7, #0]
 8010fd8:	430a      	orrs	r2, r1
 8010fda:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010fdc:	6878      	ldr	r0, [r7, #4]
 8010fde:	f000 f84f 	bl	8011080 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010fe2:	687b      	ldr	r3, [r7, #4]
 8010fe4:	681b      	ldr	r3, [r3, #0]
 8010fe6:	68fa      	ldr	r2, [r7, #12]
 8010fe8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010fea:	687b      	ldr	r3, [r7, #4]
 8010fec:	2220      	movs	r2, #32
 8010fee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010ff2:	687b      	ldr	r3, [r7, #4]
 8010ff4:	2200      	movs	r2, #0
 8010ff6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010ffa:	2300      	movs	r3, #0
}
 8010ffc:	4618      	mov	r0, r3
 8010ffe:	3710      	adds	r7, #16
 8011000:	46bd      	mov	sp, r7
 8011002:	bd80      	pop	{r7, pc}

08011004 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8011004:	b580      	push	{r7, lr}
 8011006:	b084      	sub	sp, #16
 8011008:	af00      	add	r7, sp, #0
 801100a:	6078      	str	r0, [r7, #4]
 801100c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801100e:	687b      	ldr	r3, [r7, #4]
 8011010:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8011014:	2b01      	cmp	r3, #1
 8011016:	d101      	bne.n	801101c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8011018:	2302      	movs	r3, #2
 801101a:	e02d      	b.n	8011078 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 801101c:	687b      	ldr	r3, [r7, #4]
 801101e:	2201      	movs	r2, #1
 8011020:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011024:	687b      	ldr	r3, [r7, #4]
 8011026:	2224      	movs	r2, #36	@ 0x24
 8011028:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801102c:	687b      	ldr	r3, [r7, #4]
 801102e:	681b      	ldr	r3, [r3, #0]
 8011030:	681b      	ldr	r3, [r3, #0]
 8011032:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011034:	687b      	ldr	r3, [r7, #4]
 8011036:	681b      	ldr	r3, [r3, #0]
 8011038:	681a      	ldr	r2, [r3, #0]
 801103a:	687b      	ldr	r3, [r7, #4]
 801103c:	681b      	ldr	r3, [r3, #0]
 801103e:	f022 0201 	bic.w	r2, r2, #1
 8011042:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8011044:	687b      	ldr	r3, [r7, #4]
 8011046:	681b      	ldr	r3, [r3, #0]
 8011048:	689b      	ldr	r3, [r3, #8]
 801104a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 801104e:	687b      	ldr	r3, [r7, #4]
 8011050:	681b      	ldr	r3, [r3, #0]
 8011052:	683a      	ldr	r2, [r7, #0]
 8011054:	430a      	orrs	r2, r1
 8011056:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8011058:	6878      	ldr	r0, [r7, #4]
 801105a:	f000 f811 	bl	8011080 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801105e:	687b      	ldr	r3, [r7, #4]
 8011060:	681b      	ldr	r3, [r3, #0]
 8011062:	68fa      	ldr	r2, [r7, #12]
 8011064:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011066:	687b      	ldr	r3, [r7, #4]
 8011068:	2220      	movs	r2, #32
 801106a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801106e:	687b      	ldr	r3, [r7, #4]
 8011070:	2200      	movs	r2, #0
 8011072:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8011076:	2300      	movs	r3, #0
}
 8011078:	4618      	mov	r0, r3
 801107a:	3710      	adds	r7, #16
 801107c:	46bd      	mov	sp, r7
 801107e:	bd80      	pop	{r7, pc}

08011080 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8011080:	b480      	push	{r7}
 8011082:	b085      	sub	sp, #20
 8011084:	af00      	add	r7, sp, #0
 8011086:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8011088:	687b      	ldr	r3, [r7, #4]
 801108a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801108c:	2b00      	cmp	r3, #0
 801108e:	d108      	bne.n	80110a2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8011090:	687b      	ldr	r3, [r7, #4]
 8011092:	2201      	movs	r2, #1
 8011094:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8011098:	687b      	ldr	r3, [r7, #4]
 801109a:	2201      	movs	r2, #1
 801109c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80110a0:	e031      	b.n	8011106 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80110a2:	2308      	movs	r3, #8
 80110a4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80110a6:	2308      	movs	r3, #8
 80110a8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80110aa:	687b      	ldr	r3, [r7, #4]
 80110ac:	681b      	ldr	r3, [r3, #0]
 80110ae:	689b      	ldr	r3, [r3, #8]
 80110b0:	0e5b      	lsrs	r3, r3, #25
 80110b2:	b2db      	uxtb	r3, r3
 80110b4:	f003 0307 	and.w	r3, r3, #7
 80110b8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80110ba:	687b      	ldr	r3, [r7, #4]
 80110bc:	681b      	ldr	r3, [r3, #0]
 80110be:	689b      	ldr	r3, [r3, #8]
 80110c0:	0f5b      	lsrs	r3, r3, #29
 80110c2:	b2db      	uxtb	r3, r3
 80110c4:	f003 0307 	and.w	r3, r3, #7
 80110c8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80110ca:	7bbb      	ldrb	r3, [r7, #14]
 80110cc:	7b3a      	ldrb	r2, [r7, #12]
 80110ce:	4911      	ldr	r1, [pc, #68]	@ (8011114 <UARTEx_SetNbDataToProcess+0x94>)
 80110d0:	5c8a      	ldrb	r2, [r1, r2]
 80110d2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80110d6:	7b3a      	ldrb	r2, [r7, #12]
 80110d8:	490f      	ldr	r1, [pc, #60]	@ (8011118 <UARTEx_SetNbDataToProcess+0x98>)
 80110da:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80110dc:	fb93 f3f2 	sdiv	r3, r3, r2
 80110e0:	b29a      	uxth	r2, r3
 80110e2:	687b      	ldr	r3, [r7, #4]
 80110e4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80110e8:	7bfb      	ldrb	r3, [r7, #15]
 80110ea:	7b7a      	ldrb	r2, [r7, #13]
 80110ec:	4909      	ldr	r1, [pc, #36]	@ (8011114 <UARTEx_SetNbDataToProcess+0x94>)
 80110ee:	5c8a      	ldrb	r2, [r1, r2]
 80110f0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80110f4:	7b7a      	ldrb	r2, [r7, #13]
 80110f6:	4908      	ldr	r1, [pc, #32]	@ (8011118 <UARTEx_SetNbDataToProcess+0x98>)
 80110f8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80110fa:	fb93 f3f2 	sdiv	r3, r3, r2
 80110fe:	b29a      	uxth	r2, r3
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8011106:	bf00      	nop
 8011108:	3714      	adds	r7, #20
 801110a:	46bd      	mov	sp, r7
 801110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011110:	4770      	bx	lr
 8011112:	bf00      	nop
 8011114:	080223cc 	.word	0x080223cc
 8011118:	080223d4 	.word	0x080223d4

0801111c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 801111c:	b480      	push	{r7}
 801111e:	b085      	sub	sp, #20
 8011120:	af00      	add	r7, sp, #0
 8011122:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8011124:	687b      	ldr	r3, [r7, #4]
 8011126:	2200      	movs	r2, #0
 8011128:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 801112c:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8011130:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8011132:	68fb      	ldr	r3, [r7, #12]
 8011134:	b29a      	uxth	r2, r3
 8011136:	687b      	ldr	r3, [r7, #4]
 8011138:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 801113c:	2300      	movs	r3, #0
}
 801113e:	4618      	mov	r0, r3
 8011140:	3714      	adds	r7, #20
 8011142:	46bd      	mov	sp, r7
 8011144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011148:	4770      	bx	lr

0801114a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 801114a:	b480      	push	{r7}
 801114c:	b085      	sub	sp, #20
 801114e:	af00      	add	r7, sp, #0
 8011150:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8011152:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8011156:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8011158:	687b      	ldr	r3, [r7, #4]
 801115a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 801115e:	b29a      	uxth	r2, r3
 8011160:	68fb      	ldr	r3, [r7, #12]
 8011162:	b29b      	uxth	r3, r3
 8011164:	43db      	mvns	r3, r3
 8011166:	b29b      	uxth	r3, r3
 8011168:	4013      	ands	r3, r2
 801116a:	b29a      	uxth	r2, r3
 801116c:	687b      	ldr	r3, [r7, #4]
 801116e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8011172:	2300      	movs	r3, #0
}
 8011174:	4618      	mov	r0, r3
 8011176:	3714      	adds	r7, #20
 8011178:	46bd      	mov	sp, r7
 801117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801117e:	4770      	bx	lr

08011180 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8011180:	b480      	push	{r7}
 8011182:	b085      	sub	sp, #20
 8011184:	af00      	add	r7, sp, #0
 8011186:	60f8      	str	r0, [r7, #12]
 8011188:	1d3b      	adds	r3, r7, #4
 801118a:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 801118e:	68fb      	ldr	r3, [r7, #12]
 8011190:	2201      	movs	r2, #1
 8011192:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8011196:	68fb      	ldr	r3, [r7, #12]
 8011198:	2200      	movs	r2, #0
 801119a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 801119e:	68fb      	ldr	r3, [r7, #12]
 80111a0:	2200      	movs	r2, #0
 80111a2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80111a6:	68fb      	ldr	r3, [r7, #12]
 80111a8:	2200      	movs	r2, #0
 80111aa:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80111ae:	2300      	movs	r3, #0
}
 80111b0:	4618      	mov	r0, r3
 80111b2:	3714      	adds	r7, #20
 80111b4:	46bd      	mov	sp, r7
 80111b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111ba:	4770      	bx	lr

080111bc <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80111bc:	b480      	push	{r7}
 80111be:	b0a7      	sub	sp, #156	@ 0x9c
 80111c0:	af00      	add	r7, sp, #0
 80111c2:	6078      	str	r0, [r7, #4]
 80111c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80111c6:	2300      	movs	r3, #0
 80111c8:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80111cc:	687a      	ldr	r2, [r7, #4]
 80111ce:	683b      	ldr	r3, [r7, #0]
 80111d0:	781b      	ldrb	r3, [r3, #0]
 80111d2:	009b      	lsls	r3, r3, #2
 80111d4:	4413      	add	r3, r2
 80111d6:	881b      	ldrh	r3, [r3, #0]
 80111d8:	b29b      	uxth	r3, r3
 80111da:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 80111de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80111e2:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94

  /* initialize Endpoint */
  switch (ep->type)
 80111e6:	683b      	ldr	r3, [r7, #0]
 80111e8:	78db      	ldrb	r3, [r3, #3]
 80111ea:	2b03      	cmp	r3, #3
 80111ec:	d81f      	bhi.n	801122e <USB_ActivateEndpoint+0x72>
 80111ee:	a201      	add	r2, pc, #4	@ (adr r2, 80111f4 <USB_ActivateEndpoint+0x38>)
 80111f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80111f4:	08011205 	.word	0x08011205
 80111f8:	08011221 	.word	0x08011221
 80111fc:	08011237 	.word	0x08011237
 8011200:	08011213 	.word	0x08011213
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8011204:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8011208:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 801120c:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8011210:	e012      	b.n	8011238 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8011212:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8011216:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 801121a:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 801121e:	e00b      	b.n	8011238 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8011220:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8011224:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8011228:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 801122c:	e004      	b.n	8011238 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 801122e:	2301      	movs	r3, #1
 8011230:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
      break;
 8011234:	e000      	b.n	8011238 <USB_ActivateEndpoint+0x7c>
      break;
 8011236:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8011238:	687a      	ldr	r2, [r7, #4]
 801123a:	683b      	ldr	r3, [r7, #0]
 801123c:	781b      	ldrb	r3, [r3, #0]
 801123e:	009b      	lsls	r3, r3, #2
 8011240:	441a      	add	r2, r3
 8011242:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8011246:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 801124a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 801124e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011252:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011256:	b29b      	uxth	r3, r3
 8011258:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 801125a:	687a      	ldr	r2, [r7, #4]
 801125c:	683b      	ldr	r3, [r7, #0]
 801125e:	781b      	ldrb	r3, [r3, #0]
 8011260:	009b      	lsls	r3, r3, #2
 8011262:	4413      	add	r3, r2
 8011264:	881b      	ldrh	r3, [r3, #0]
 8011266:	b29b      	uxth	r3, r3
 8011268:	b21b      	sxth	r3, r3
 801126a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 801126e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011272:	b21a      	sxth	r2, r3
 8011274:	683b      	ldr	r3, [r7, #0]
 8011276:	781b      	ldrb	r3, [r3, #0]
 8011278:	b21b      	sxth	r3, r3
 801127a:	4313      	orrs	r3, r2
 801127c:	b21b      	sxth	r3, r3
 801127e:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
 8011282:	687a      	ldr	r2, [r7, #4]
 8011284:	683b      	ldr	r3, [r7, #0]
 8011286:	781b      	ldrb	r3, [r3, #0]
 8011288:	009b      	lsls	r3, r3, #2
 801128a:	441a      	add	r2, r3
 801128c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8011290:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011294:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011298:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801129c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80112a0:	b29b      	uxth	r3, r3
 80112a2:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80112a4:	683b      	ldr	r3, [r7, #0]
 80112a6:	7b1b      	ldrb	r3, [r3, #12]
 80112a8:	2b00      	cmp	r3, #0
 80112aa:	f040 8180 	bne.w	80115ae <USB_ActivateEndpoint+0x3f2>
  {
    if (ep->is_in != 0U)
 80112ae:	683b      	ldr	r3, [r7, #0]
 80112b0:	785b      	ldrb	r3, [r3, #1]
 80112b2:	2b00      	cmp	r3, #0
 80112b4:	f000 8084 	beq.w	80113c0 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80112b8:	687b      	ldr	r3, [r7, #4]
 80112ba:	61bb      	str	r3, [r7, #24]
 80112bc:	687b      	ldr	r3, [r7, #4]
 80112be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80112c2:	b29b      	uxth	r3, r3
 80112c4:	461a      	mov	r2, r3
 80112c6:	69bb      	ldr	r3, [r7, #24]
 80112c8:	4413      	add	r3, r2
 80112ca:	61bb      	str	r3, [r7, #24]
 80112cc:	683b      	ldr	r3, [r7, #0]
 80112ce:	781b      	ldrb	r3, [r3, #0]
 80112d0:	00da      	lsls	r2, r3, #3
 80112d2:	69bb      	ldr	r3, [r7, #24]
 80112d4:	4413      	add	r3, r2
 80112d6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80112da:	617b      	str	r3, [r7, #20]
 80112dc:	683b      	ldr	r3, [r7, #0]
 80112de:	88db      	ldrh	r3, [r3, #6]
 80112e0:	085b      	lsrs	r3, r3, #1
 80112e2:	b29b      	uxth	r3, r3
 80112e4:	005b      	lsls	r3, r3, #1
 80112e6:	b29a      	uxth	r2, r3
 80112e8:	697b      	ldr	r3, [r7, #20]
 80112ea:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80112ec:	687a      	ldr	r2, [r7, #4]
 80112ee:	683b      	ldr	r3, [r7, #0]
 80112f0:	781b      	ldrb	r3, [r3, #0]
 80112f2:	009b      	lsls	r3, r3, #2
 80112f4:	4413      	add	r3, r2
 80112f6:	881b      	ldrh	r3, [r3, #0]
 80112f8:	827b      	strh	r3, [r7, #18]
 80112fa:	8a7b      	ldrh	r3, [r7, #18]
 80112fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011300:	2b00      	cmp	r3, #0
 8011302:	d01b      	beq.n	801133c <USB_ActivateEndpoint+0x180>
 8011304:	687a      	ldr	r2, [r7, #4]
 8011306:	683b      	ldr	r3, [r7, #0]
 8011308:	781b      	ldrb	r3, [r3, #0]
 801130a:	009b      	lsls	r3, r3, #2
 801130c:	4413      	add	r3, r2
 801130e:	881b      	ldrh	r3, [r3, #0]
 8011310:	b29b      	uxth	r3, r3
 8011312:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011316:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801131a:	823b      	strh	r3, [r7, #16]
 801131c:	687a      	ldr	r2, [r7, #4]
 801131e:	683b      	ldr	r3, [r7, #0]
 8011320:	781b      	ldrb	r3, [r3, #0]
 8011322:	009b      	lsls	r3, r3, #2
 8011324:	441a      	add	r2, r3
 8011326:	8a3b      	ldrh	r3, [r7, #16]
 8011328:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 801132c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011330:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011334:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8011338:	b29b      	uxth	r3, r3
 801133a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 801133c:	683b      	ldr	r3, [r7, #0]
 801133e:	78db      	ldrb	r3, [r3, #3]
 8011340:	2b01      	cmp	r3, #1
 8011342:	d020      	beq.n	8011386 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8011344:	687a      	ldr	r2, [r7, #4]
 8011346:	683b      	ldr	r3, [r7, #0]
 8011348:	781b      	ldrb	r3, [r3, #0]
 801134a:	009b      	lsls	r3, r3, #2
 801134c:	4413      	add	r3, r2
 801134e:	881b      	ldrh	r3, [r3, #0]
 8011350:	b29b      	uxth	r3, r3
 8011352:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011356:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801135a:	81bb      	strh	r3, [r7, #12]
 801135c:	89bb      	ldrh	r3, [r7, #12]
 801135e:	f083 0320 	eor.w	r3, r3, #32
 8011362:	81bb      	strh	r3, [r7, #12]
 8011364:	687a      	ldr	r2, [r7, #4]
 8011366:	683b      	ldr	r3, [r7, #0]
 8011368:	781b      	ldrb	r3, [r3, #0]
 801136a:	009b      	lsls	r3, r3, #2
 801136c:	441a      	add	r2, r3
 801136e:	89bb      	ldrh	r3, [r7, #12]
 8011370:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011374:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011378:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801137c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011380:	b29b      	uxth	r3, r3
 8011382:	8013      	strh	r3, [r2, #0]
 8011384:	e3f9      	b.n	8011b7a <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8011386:	687a      	ldr	r2, [r7, #4]
 8011388:	683b      	ldr	r3, [r7, #0]
 801138a:	781b      	ldrb	r3, [r3, #0]
 801138c:	009b      	lsls	r3, r3, #2
 801138e:	4413      	add	r3, r2
 8011390:	881b      	ldrh	r3, [r3, #0]
 8011392:	b29b      	uxth	r3, r3
 8011394:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011398:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801139c:	81fb      	strh	r3, [r7, #14]
 801139e:	687a      	ldr	r2, [r7, #4]
 80113a0:	683b      	ldr	r3, [r7, #0]
 80113a2:	781b      	ldrb	r3, [r3, #0]
 80113a4:	009b      	lsls	r3, r3, #2
 80113a6:	441a      	add	r2, r3
 80113a8:	89fb      	ldrh	r3, [r7, #14]
 80113aa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80113ae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80113b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80113b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80113ba:	b29b      	uxth	r3, r3
 80113bc:	8013      	strh	r3, [r2, #0]
 80113be:	e3dc      	b.n	8011b7a <USB_ActivateEndpoint+0x9be>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80113c0:	687b      	ldr	r3, [r7, #4]
 80113c2:	633b      	str	r3, [r7, #48]	@ 0x30
 80113c4:	687b      	ldr	r3, [r7, #4]
 80113c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80113ca:	b29b      	uxth	r3, r3
 80113cc:	461a      	mov	r2, r3
 80113ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80113d0:	4413      	add	r3, r2
 80113d2:	633b      	str	r3, [r7, #48]	@ 0x30
 80113d4:	683b      	ldr	r3, [r7, #0]
 80113d6:	781b      	ldrb	r3, [r3, #0]
 80113d8:	00da      	lsls	r2, r3, #3
 80113da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80113dc:	4413      	add	r3, r2
 80113de:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80113e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80113e4:	683b      	ldr	r3, [r7, #0]
 80113e6:	88db      	ldrh	r3, [r3, #6]
 80113e8:	085b      	lsrs	r3, r3, #1
 80113ea:	b29b      	uxth	r3, r3
 80113ec:	005b      	lsls	r3, r3, #1
 80113ee:	b29a      	uxth	r2, r3
 80113f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80113f2:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80113f4:	687b      	ldr	r3, [r7, #4]
 80113f6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80113f8:	687b      	ldr	r3, [r7, #4]
 80113fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80113fe:	b29b      	uxth	r3, r3
 8011400:	461a      	mov	r2, r3
 8011402:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011404:	4413      	add	r3, r2
 8011406:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011408:	683b      	ldr	r3, [r7, #0]
 801140a:	781b      	ldrb	r3, [r3, #0]
 801140c:	00da      	lsls	r2, r3, #3
 801140e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011410:	4413      	add	r3, r2
 8011412:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8011416:	627b      	str	r3, [r7, #36]	@ 0x24
 8011418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801141a:	881b      	ldrh	r3, [r3, #0]
 801141c:	b29b      	uxth	r3, r3
 801141e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8011422:	b29a      	uxth	r2, r3
 8011424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011426:	801a      	strh	r2, [r3, #0]
 8011428:	683b      	ldr	r3, [r7, #0]
 801142a:	691b      	ldr	r3, [r3, #16]
 801142c:	2b00      	cmp	r3, #0
 801142e:	d10a      	bne.n	8011446 <USB_ActivateEndpoint+0x28a>
 8011430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011432:	881b      	ldrh	r3, [r3, #0]
 8011434:	b29b      	uxth	r3, r3
 8011436:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801143a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801143e:	b29a      	uxth	r2, r3
 8011440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011442:	801a      	strh	r2, [r3, #0]
 8011444:	e041      	b.n	80114ca <USB_ActivateEndpoint+0x30e>
 8011446:	683b      	ldr	r3, [r7, #0]
 8011448:	691b      	ldr	r3, [r3, #16]
 801144a:	2b3e      	cmp	r3, #62	@ 0x3e
 801144c:	d81c      	bhi.n	8011488 <USB_ActivateEndpoint+0x2cc>
 801144e:	683b      	ldr	r3, [r7, #0]
 8011450:	691b      	ldr	r3, [r3, #16]
 8011452:	085b      	lsrs	r3, r3, #1
 8011454:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8011458:	683b      	ldr	r3, [r7, #0]
 801145a:	691b      	ldr	r3, [r3, #16]
 801145c:	f003 0301 	and.w	r3, r3, #1
 8011460:	2b00      	cmp	r3, #0
 8011462:	d004      	beq.n	801146e <USB_ActivateEndpoint+0x2b2>
 8011464:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8011468:	3301      	adds	r3, #1
 801146a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 801146e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011470:	881b      	ldrh	r3, [r3, #0]
 8011472:	b29a      	uxth	r2, r3
 8011474:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8011478:	b29b      	uxth	r3, r3
 801147a:	029b      	lsls	r3, r3, #10
 801147c:	b29b      	uxth	r3, r3
 801147e:	4313      	orrs	r3, r2
 8011480:	b29a      	uxth	r2, r3
 8011482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011484:	801a      	strh	r2, [r3, #0]
 8011486:	e020      	b.n	80114ca <USB_ActivateEndpoint+0x30e>
 8011488:	683b      	ldr	r3, [r7, #0]
 801148a:	691b      	ldr	r3, [r3, #16]
 801148c:	095b      	lsrs	r3, r3, #5
 801148e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8011492:	683b      	ldr	r3, [r7, #0]
 8011494:	691b      	ldr	r3, [r3, #16]
 8011496:	f003 031f 	and.w	r3, r3, #31
 801149a:	2b00      	cmp	r3, #0
 801149c:	d104      	bne.n	80114a8 <USB_ActivateEndpoint+0x2ec>
 801149e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80114a2:	3b01      	subs	r3, #1
 80114a4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80114a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80114aa:	881b      	ldrh	r3, [r3, #0]
 80114ac:	b29a      	uxth	r2, r3
 80114ae:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80114b2:	b29b      	uxth	r3, r3
 80114b4:	029b      	lsls	r3, r3, #10
 80114b6:	b29b      	uxth	r3, r3
 80114b8:	4313      	orrs	r3, r2
 80114ba:	b29b      	uxth	r3, r3
 80114bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80114c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80114c4:	b29a      	uxth	r2, r3
 80114c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80114c8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80114ca:	687a      	ldr	r2, [r7, #4]
 80114cc:	683b      	ldr	r3, [r7, #0]
 80114ce:	781b      	ldrb	r3, [r3, #0]
 80114d0:	009b      	lsls	r3, r3, #2
 80114d2:	4413      	add	r3, r2
 80114d4:	881b      	ldrh	r3, [r3, #0]
 80114d6:	847b      	strh	r3, [r7, #34]	@ 0x22
 80114d8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80114da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80114de:	2b00      	cmp	r3, #0
 80114e0:	d01b      	beq.n	801151a <USB_ActivateEndpoint+0x35e>
 80114e2:	687a      	ldr	r2, [r7, #4]
 80114e4:	683b      	ldr	r3, [r7, #0]
 80114e6:	781b      	ldrb	r3, [r3, #0]
 80114e8:	009b      	lsls	r3, r3, #2
 80114ea:	4413      	add	r3, r2
 80114ec:	881b      	ldrh	r3, [r3, #0]
 80114ee:	b29b      	uxth	r3, r3
 80114f0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80114f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80114f8:	843b      	strh	r3, [r7, #32]
 80114fa:	687a      	ldr	r2, [r7, #4]
 80114fc:	683b      	ldr	r3, [r7, #0]
 80114fe:	781b      	ldrb	r3, [r3, #0]
 8011500:	009b      	lsls	r3, r3, #2
 8011502:	441a      	add	r2, r3
 8011504:	8c3b      	ldrh	r3, [r7, #32]
 8011506:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 801150a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 801150e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8011512:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011516:	b29b      	uxth	r3, r3
 8011518:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 801151a:	683b      	ldr	r3, [r7, #0]
 801151c:	781b      	ldrb	r3, [r3, #0]
 801151e:	2b00      	cmp	r3, #0
 8011520:	d124      	bne.n	801156c <USB_ActivateEndpoint+0x3b0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8011522:	687a      	ldr	r2, [r7, #4]
 8011524:	683b      	ldr	r3, [r7, #0]
 8011526:	781b      	ldrb	r3, [r3, #0]
 8011528:	009b      	lsls	r3, r3, #2
 801152a:	4413      	add	r3, r2
 801152c:	881b      	ldrh	r3, [r3, #0]
 801152e:	b29b      	uxth	r3, r3
 8011530:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8011534:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011538:	83bb      	strh	r3, [r7, #28]
 801153a:	8bbb      	ldrh	r3, [r7, #28]
 801153c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8011540:	83bb      	strh	r3, [r7, #28]
 8011542:	8bbb      	ldrh	r3, [r7, #28]
 8011544:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8011548:	83bb      	strh	r3, [r7, #28]
 801154a:	687a      	ldr	r2, [r7, #4]
 801154c:	683b      	ldr	r3, [r7, #0]
 801154e:	781b      	ldrb	r3, [r3, #0]
 8011550:	009b      	lsls	r3, r3, #2
 8011552:	441a      	add	r2, r3
 8011554:	8bbb      	ldrh	r3, [r7, #28]
 8011556:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 801155a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 801155e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011562:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011566:	b29b      	uxth	r3, r3
 8011568:	8013      	strh	r3, [r2, #0]
 801156a:	e306      	b.n	8011b7a <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 801156c:	687a      	ldr	r2, [r7, #4]
 801156e:	683b      	ldr	r3, [r7, #0]
 8011570:	781b      	ldrb	r3, [r3, #0]
 8011572:	009b      	lsls	r3, r3, #2
 8011574:	4413      	add	r3, r2
 8011576:	881b      	ldrh	r3, [r3, #0]
 8011578:	b29b      	uxth	r3, r3
 801157a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 801157e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011582:	83fb      	strh	r3, [r7, #30]
 8011584:	8bfb      	ldrh	r3, [r7, #30]
 8011586:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 801158a:	83fb      	strh	r3, [r7, #30]
 801158c:	687a      	ldr	r2, [r7, #4]
 801158e:	683b      	ldr	r3, [r7, #0]
 8011590:	781b      	ldrb	r3, [r3, #0]
 8011592:	009b      	lsls	r3, r3, #2
 8011594:	441a      	add	r2, r3
 8011596:	8bfb      	ldrh	r3, [r7, #30]
 8011598:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 801159c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80115a0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80115a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80115a8:	b29b      	uxth	r3, r3
 80115aa:	8013      	strh	r3, [r2, #0]
 80115ac:	e2e5      	b.n	8011b7a <USB_ActivateEndpoint+0x9be>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80115ae:	683b      	ldr	r3, [r7, #0]
 80115b0:	78db      	ldrb	r3, [r3, #3]
 80115b2:	2b02      	cmp	r3, #2
 80115b4:	d11e      	bne.n	80115f4 <USB_ActivateEndpoint+0x438>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80115b6:	687a      	ldr	r2, [r7, #4]
 80115b8:	683b      	ldr	r3, [r7, #0]
 80115ba:	781b      	ldrb	r3, [r3, #0]
 80115bc:	009b      	lsls	r3, r3, #2
 80115be:	4413      	add	r3, r2
 80115c0:	881b      	ldrh	r3, [r3, #0]
 80115c2:	b29b      	uxth	r3, r3
 80115c4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80115c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80115cc:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 80115d0:	687a      	ldr	r2, [r7, #4]
 80115d2:	683b      	ldr	r3, [r7, #0]
 80115d4:	781b      	ldrb	r3, [r3, #0]
 80115d6:	009b      	lsls	r3, r3, #2
 80115d8:	441a      	add	r2, r3
 80115da:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 80115de:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80115e2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80115e6:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80115ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80115ee:	b29b      	uxth	r3, r3
 80115f0:	8013      	strh	r3, [r2, #0]
 80115f2:	e01d      	b.n	8011630 <USB_ActivateEndpoint+0x474>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80115f4:	687a      	ldr	r2, [r7, #4]
 80115f6:	683b      	ldr	r3, [r7, #0]
 80115f8:	781b      	ldrb	r3, [r3, #0]
 80115fa:	009b      	lsls	r3, r3, #2
 80115fc:	4413      	add	r3, r2
 80115fe:	881b      	ldrh	r3, [r3, #0]
 8011600:	b29b      	uxth	r3, r3
 8011602:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8011606:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801160a:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
 801160e:	687a      	ldr	r2, [r7, #4]
 8011610:	683b      	ldr	r3, [r7, #0]
 8011612:	781b      	ldrb	r3, [r3, #0]
 8011614:	009b      	lsls	r3, r3, #2
 8011616:	441a      	add	r2, r3
 8011618:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 801161c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011620:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011624:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011628:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801162c:	b29b      	uxth	r3, r3
 801162e:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8011630:	687b      	ldr	r3, [r7, #4]
 8011632:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8011634:	687b      	ldr	r3, [r7, #4]
 8011636:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 801163a:	b29b      	uxth	r3, r3
 801163c:	461a      	mov	r2, r3
 801163e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8011640:	4413      	add	r3, r2
 8011642:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8011644:	683b      	ldr	r3, [r7, #0]
 8011646:	781b      	ldrb	r3, [r3, #0]
 8011648:	00da      	lsls	r2, r3, #3
 801164a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801164c:	4413      	add	r3, r2
 801164e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8011652:	67bb      	str	r3, [r7, #120]	@ 0x78
 8011654:	683b      	ldr	r3, [r7, #0]
 8011656:	891b      	ldrh	r3, [r3, #8]
 8011658:	085b      	lsrs	r3, r3, #1
 801165a:	b29b      	uxth	r3, r3
 801165c:	005b      	lsls	r3, r3, #1
 801165e:	b29a      	uxth	r2, r3
 8011660:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8011662:	801a      	strh	r2, [r3, #0]
 8011664:	687b      	ldr	r3, [r7, #4]
 8011666:	677b      	str	r3, [r7, #116]	@ 0x74
 8011668:	687b      	ldr	r3, [r7, #4]
 801166a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 801166e:	b29b      	uxth	r3, r3
 8011670:	461a      	mov	r2, r3
 8011672:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8011674:	4413      	add	r3, r2
 8011676:	677b      	str	r3, [r7, #116]	@ 0x74
 8011678:	683b      	ldr	r3, [r7, #0]
 801167a:	781b      	ldrb	r3, [r3, #0]
 801167c:	00da      	lsls	r2, r3, #3
 801167e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8011680:	4413      	add	r3, r2
 8011682:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8011686:	673b      	str	r3, [r7, #112]	@ 0x70
 8011688:	683b      	ldr	r3, [r7, #0]
 801168a:	895b      	ldrh	r3, [r3, #10]
 801168c:	085b      	lsrs	r3, r3, #1
 801168e:	b29b      	uxth	r3, r3
 8011690:	005b      	lsls	r3, r3, #1
 8011692:	b29a      	uxth	r2, r3
 8011694:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8011696:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8011698:	683b      	ldr	r3, [r7, #0]
 801169a:	785b      	ldrb	r3, [r3, #1]
 801169c:	2b00      	cmp	r3, #0
 801169e:	f040 81af 	bne.w	8011a00 <USB_ActivateEndpoint+0x844>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80116a2:	687a      	ldr	r2, [r7, #4]
 80116a4:	683b      	ldr	r3, [r7, #0]
 80116a6:	781b      	ldrb	r3, [r3, #0]
 80116a8:	009b      	lsls	r3, r3, #2
 80116aa:	4413      	add	r3, r2
 80116ac:	881b      	ldrh	r3, [r3, #0]
 80116ae:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 80116b2:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 80116b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80116ba:	2b00      	cmp	r3, #0
 80116bc:	d01d      	beq.n	80116fa <USB_ActivateEndpoint+0x53e>
 80116be:	687a      	ldr	r2, [r7, #4]
 80116c0:	683b      	ldr	r3, [r7, #0]
 80116c2:	781b      	ldrb	r3, [r3, #0]
 80116c4:	009b      	lsls	r3, r3, #2
 80116c6:	4413      	add	r3, r2
 80116c8:	881b      	ldrh	r3, [r3, #0]
 80116ca:	b29b      	uxth	r3, r3
 80116cc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80116d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80116d4:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 80116d8:	687a      	ldr	r2, [r7, #4]
 80116da:	683b      	ldr	r3, [r7, #0]
 80116dc:	781b      	ldrb	r3, [r3, #0]
 80116de:	009b      	lsls	r3, r3, #2
 80116e0:	441a      	add	r2, r3
 80116e2:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 80116e6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80116ea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80116ee:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80116f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80116f6:	b29b      	uxth	r3, r3
 80116f8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80116fa:	687a      	ldr	r2, [r7, #4]
 80116fc:	683b      	ldr	r3, [r7, #0]
 80116fe:	781b      	ldrb	r3, [r3, #0]
 8011700:	009b      	lsls	r3, r3, #2
 8011702:	4413      	add	r3, r2
 8011704:	881b      	ldrh	r3, [r3, #0]
 8011706:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 801170a:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 801170e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011712:	2b00      	cmp	r3, #0
 8011714:	d01d      	beq.n	8011752 <USB_ActivateEndpoint+0x596>
 8011716:	687a      	ldr	r2, [r7, #4]
 8011718:	683b      	ldr	r3, [r7, #0]
 801171a:	781b      	ldrb	r3, [r3, #0]
 801171c:	009b      	lsls	r3, r3, #2
 801171e:	4413      	add	r3, r2
 8011720:	881b      	ldrh	r3, [r3, #0]
 8011722:	b29b      	uxth	r3, r3
 8011724:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011728:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801172c:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 8011730:	687a      	ldr	r2, [r7, #4]
 8011732:	683b      	ldr	r3, [r7, #0]
 8011734:	781b      	ldrb	r3, [r3, #0]
 8011736:	009b      	lsls	r3, r3, #2
 8011738:	441a      	add	r2, r3
 801173a:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 801173e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011742:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011746:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801174a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 801174e:	b29b      	uxth	r3, r3
 8011750:	8013      	strh	r3, [r2, #0]

      /* Set endpoint RX count */
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8011752:	683b      	ldr	r3, [r7, #0]
 8011754:	785b      	ldrb	r3, [r3, #1]
 8011756:	2b00      	cmp	r3, #0
 8011758:	d16b      	bne.n	8011832 <USB_ActivateEndpoint+0x676>
 801175a:	687b      	ldr	r3, [r7, #4]
 801175c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801175e:	687b      	ldr	r3, [r7, #4]
 8011760:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8011764:	b29b      	uxth	r3, r3
 8011766:	461a      	mov	r2, r3
 8011768:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801176a:	4413      	add	r3, r2
 801176c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801176e:	683b      	ldr	r3, [r7, #0]
 8011770:	781b      	ldrb	r3, [r3, #0]
 8011772:	00da      	lsls	r2, r3, #3
 8011774:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011776:	4413      	add	r3, r2
 8011778:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 801177c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801177e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011780:	881b      	ldrh	r3, [r3, #0]
 8011782:	b29b      	uxth	r3, r3
 8011784:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8011788:	b29a      	uxth	r2, r3
 801178a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801178c:	801a      	strh	r2, [r3, #0]
 801178e:	683b      	ldr	r3, [r7, #0]
 8011790:	691b      	ldr	r3, [r3, #16]
 8011792:	2b00      	cmp	r3, #0
 8011794:	d10a      	bne.n	80117ac <USB_ActivateEndpoint+0x5f0>
 8011796:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011798:	881b      	ldrh	r3, [r3, #0]
 801179a:	b29b      	uxth	r3, r3
 801179c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80117a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80117a4:	b29a      	uxth	r2, r3
 80117a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80117a8:	801a      	strh	r2, [r3, #0]
 80117aa:	e05d      	b.n	8011868 <USB_ActivateEndpoint+0x6ac>
 80117ac:	683b      	ldr	r3, [r7, #0]
 80117ae:	691b      	ldr	r3, [r3, #16]
 80117b0:	2b3e      	cmp	r3, #62	@ 0x3e
 80117b2:	d81c      	bhi.n	80117ee <USB_ActivateEndpoint+0x632>
 80117b4:	683b      	ldr	r3, [r7, #0]
 80117b6:	691b      	ldr	r3, [r3, #16]
 80117b8:	085b      	lsrs	r3, r3, #1
 80117ba:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80117be:	683b      	ldr	r3, [r7, #0]
 80117c0:	691b      	ldr	r3, [r3, #16]
 80117c2:	f003 0301 	and.w	r3, r3, #1
 80117c6:	2b00      	cmp	r3, #0
 80117c8:	d004      	beq.n	80117d4 <USB_ActivateEndpoint+0x618>
 80117ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80117ce:	3301      	adds	r3, #1
 80117d0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80117d4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80117d6:	881b      	ldrh	r3, [r3, #0]
 80117d8:	b29a      	uxth	r2, r3
 80117da:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80117de:	b29b      	uxth	r3, r3
 80117e0:	029b      	lsls	r3, r3, #10
 80117e2:	b29b      	uxth	r3, r3
 80117e4:	4313      	orrs	r3, r2
 80117e6:	b29a      	uxth	r2, r3
 80117e8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80117ea:	801a      	strh	r2, [r3, #0]
 80117ec:	e03c      	b.n	8011868 <USB_ActivateEndpoint+0x6ac>
 80117ee:	683b      	ldr	r3, [r7, #0]
 80117f0:	691b      	ldr	r3, [r3, #16]
 80117f2:	095b      	lsrs	r3, r3, #5
 80117f4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80117f8:	683b      	ldr	r3, [r7, #0]
 80117fa:	691b      	ldr	r3, [r3, #16]
 80117fc:	f003 031f 	and.w	r3, r3, #31
 8011800:	2b00      	cmp	r3, #0
 8011802:	d104      	bne.n	801180e <USB_ActivateEndpoint+0x652>
 8011804:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8011808:	3b01      	subs	r3, #1
 801180a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 801180e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011810:	881b      	ldrh	r3, [r3, #0]
 8011812:	b29a      	uxth	r2, r3
 8011814:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8011818:	b29b      	uxth	r3, r3
 801181a:	029b      	lsls	r3, r3, #10
 801181c:	b29b      	uxth	r3, r3
 801181e:	4313      	orrs	r3, r2
 8011820:	b29b      	uxth	r3, r3
 8011822:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011826:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801182a:	b29a      	uxth	r2, r3
 801182c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801182e:	801a      	strh	r2, [r3, #0]
 8011830:	e01a      	b.n	8011868 <USB_ActivateEndpoint+0x6ac>
 8011832:	683b      	ldr	r3, [r7, #0]
 8011834:	785b      	ldrb	r3, [r3, #1]
 8011836:	2b01      	cmp	r3, #1
 8011838:	d116      	bne.n	8011868 <USB_ActivateEndpoint+0x6ac>
 801183a:	687b      	ldr	r3, [r7, #4]
 801183c:	657b      	str	r3, [r7, #84]	@ 0x54
 801183e:	687b      	ldr	r3, [r7, #4]
 8011840:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8011844:	b29b      	uxth	r3, r3
 8011846:	461a      	mov	r2, r3
 8011848:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801184a:	4413      	add	r3, r2
 801184c:	657b      	str	r3, [r7, #84]	@ 0x54
 801184e:	683b      	ldr	r3, [r7, #0]
 8011850:	781b      	ldrb	r3, [r3, #0]
 8011852:	00da      	lsls	r2, r3, #3
 8011854:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011856:	4413      	add	r3, r2
 8011858:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 801185c:	653b      	str	r3, [r7, #80]	@ 0x50
 801185e:	683b      	ldr	r3, [r7, #0]
 8011860:	691b      	ldr	r3, [r3, #16]
 8011862:	b29a      	uxth	r2, r3
 8011864:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011866:	801a      	strh	r2, [r3, #0]
 8011868:	687b      	ldr	r3, [r7, #4]
 801186a:	647b      	str	r3, [r7, #68]	@ 0x44
 801186c:	683b      	ldr	r3, [r7, #0]
 801186e:	785b      	ldrb	r3, [r3, #1]
 8011870:	2b00      	cmp	r3, #0
 8011872:	d16b      	bne.n	801194c <USB_ActivateEndpoint+0x790>
 8011874:	687b      	ldr	r3, [r7, #4]
 8011876:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8011878:	687b      	ldr	r3, [r7, #4]
 801187a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 801187e:	b29b      	uxth	r3, r3
 8011880:	461a      	mov	r2, r3
 8011882:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011884:	4413      	add	r3, r2
 8011886:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8011888:	683b      	ldr	r3, [r7, #0]
 801188a:	781b      	ldrb	r3, [r3, #0]
 801188c:	00da      	lsls	r2, r3, #3
 801188e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011890:	4413      	add	r3, r2
 8011892:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8011896:	63bb      	str	r3, [r7, #56]	@ 0x38
 8011898:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801189a:	881b      	ldrh	r3, [r3, #0]
 801189c:	b29b      	uxth	r3, r3
 801189e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80118a2:	b29a      	uxth	r2, r3
 80118a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80118a6:	801a      	strh	r2, [r3, #0]
 80118a8:	683b      	ldr	r3, [r7, #0]
 80118aa:	691b      	ldr	r3, [r3, #16]
 80118ac:	2b00      	cmp	r3, #0
 80118ae:	d10a      	bne.n	80118c6 <USB_ActivateEndpoint+0x70a>
 80118b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80118b2:	881b      	ldrh	r3, [r3, #0]
 80118b4:	b29b      	uxth	r3, r3
 80118b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80118ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80118be:	b29a      	uxth	r2, r3
 80118c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80118c2:	801a      	strh	r2, [r3, #0]
 80118c4:	e05b      	b.n	801197e <USB_ActivateEndpoint+0x7c2>
 80118c6:	683b      	ldr	r3, [r7, #0]
 80118c8:	691b      	ldr	r3, [r3, #16]
 80118ca:	2b3e      	cmp	r3, #62	@ 0x3e
 80118cc:	d81c      	bhi.n	8011908 <USB_ActivateEndpoint+0x74c>
 80118ce:	683b      	ldr	r3, [r7, #0]
 80118d0:	691b      	ldr	r3, [r3, #16]
 80118d2:	085b      	lsrs	r3, r3, #1
 80118d4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80118d8:	683b      	ldr	r3, [r7, #0]
 80118da:	691b      	ldr	r3, [r3, #16]
 80118dc:	f003 0301 	and.w	r3, r3, #1
 80118e0:	2b00      	cmp	r3, #0
 80118e2:	d004      	beq.n	80118ee <USB_ActivateEndpoint+0x732>
 80118e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80118e8:	3301      	adds	r3, #1
 80118ea:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80118ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80118f0:	881b      	ldrh	r3, [r3, #0]
 80118f2:	b29a      	uxth	r2, r3
 80118f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80118f8:	b29b      	uxth	r3, r3
 80118fa:	029b      	lsls	r3, r3, #10
 80118fc:	b29b      	uxth	r3, r3
 80118fe:	4313      	orrs	r3, r2
 8011900:	b29a      	uxth	r2, r3
 8011902:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011904:	801a      	strh	r2, [r3, #0]
 8011906:	e03a      	b.n	801197e <USB_ActivateEndpoint+0x7c2>
 8011908:	683b      	ldr	r3, [r7, #0]
 801190a:	691b      	ldr	r3, [r3, #16]
 801190c:	095b      	lsrs	r3, r3, #5
 801190e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8011912:	683b      	ldr	r3, [r7, #0]
 8011914:	691b      	ldr	r3, [r3, #16]
 8011916:	f003 031f 	and.w	r3, r3, #31
 801191a:	2b00      	cmp	r3, #0
 801191c:	d104      	bne.n	8011928 <USB_ActivateEndpoint+0x76c>
 801191e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8011922:	3b01      	subs	r3, #1
 8011924:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8011928:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801192a:	881b      	ldrh	r3, [r3, #0]
 801192c:	b29a      	uxth	r2, r3
 801192e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8011932:	b29b      	uxth	r3, r3
 8011934:	029b      	lsls	r3, r3, #10
 8011936:	b29b      	uxth	r3, r3
 8011938:	4313      	orrs	r3, r2
 801193a:	b29b      	uxth	r3, r3
 801193c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011940:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011944:	b29a      	uxth	r2, r3
 8011946:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011948:	801a      	strh	r2, [r3, #0]
 801194a:	e018      	b.n	801197e <USB_ActivateEndpoint+0x7c2>
 801194c:	683b      	ldr	r3, [r7, #0]
 801194e:	785b      	ldrb	r3, [r3, #1]
 8011950:	2b01      	cmp	r3, #1
 8011952:	d114      	bne.n	801197e <USB_ActivateEndpoint+0x7c2>
 8011954:	687b      	ldr	r3, [r7, #4]
 8011956:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 801195a:	b29b      	uxth	r3, r3
 801195c:	461a      	mov	r2, r3
 801195e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011960:	4413      	add	r3, r2
 8011962:	647b      	str	r3, [r7, #68]	@ 0x44
 8011964:	683b      	ldr	r3, [r7, #0]
 8011966:	781b      	ldrb	r3, [r3, #0]
 8011968:	00da      	lsls	r2, r3, #3
 801196a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801196c:	4413      	add	r3, r2
 801196e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8011972:	643b      	str	r3, [r7, #64]	@ 0x40
 8011974:	683b      	ldr	r3, [r7, #0]
 8011976:	691b      	ldr	r3, [r3, #16]
 8011978:	b29a      	uxth	r2, r3
 801197a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801197c:	801a      	strh	r2, [r3, #0]

      /* Set endpoint RX to valid state */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801197e:	687a      	ldr	r2, [r7, #4]
 8011980:	683b      	ldr	r3, [r7, #0]
 8011982:	781b      	ldrb	r3, [r3, #0]
 8011984:	009b      	lsls	r3, r3, #2
 8011986:	4413      	add	r3, r2
 8011988:	881b      	ldrh	r3, [r3, #0]
 801198a:	b29b      	uxth	r3, r3
 801198c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8011990:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011994:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8011996:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8011998:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 801199c:	86fb      	strh	r3, [r7, #54]	@ 0x36
 801199e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80119a0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80119a4:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80119a6:	687a      	ldr	r2, [r7, #4]
 80119a8:	683b      	ldr	r3, [r7, #0]
 80119aa:	781b      	ldrb	r3, [r3, #0]
 80119ac:	009b      	lsls	r3, r3, #2
 80119ae:	441a      	add	r2, r3
 80119b0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80119b2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80119b6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80119ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80119be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80119c2:	b29b      	uxth	r3, r3
 80119c4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80119c6:	687a      	ldr	r2, [r7, #4]
 80119c8:	683b      	ldr	r3, [r7, #0]
 80119ca:	781b      	ldrb	r3, [r3, #0]
 80119cc:	009b      	lsls	r3, r3, #2
 80119ce:	4413      	add	r3, r2
 80119d0:	881b      	ldrh	r3, [r3, #0]
 80119d2:	b29b      	uxth	r3, r3
 80119d4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80119d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80119dc:	86bb      	strh	r3, [r7, #52]	@ 0x34
 80119de:	687a      	ldr	r2, [r7, #4]
 80119e0:	683b      	ldr	r3, [r7, #0]
 80119e2:	781b      	ldrb	r3, [r3, #0]
 80119e4:	009b      	lsls	r3, r3, #2
 80119e6:	441a      	add	r2, r3
 80119e8:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80119ea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80119ee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80119f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80119f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80119fa:	b29b      	uxth	r3, r3
 80119fc:	8013      	strh	r3, [r2, #0]
 80119fe:	e0bc      	b.n	8011b7a <USB_ActivateEndpoint+0x9be>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8011a00:	687a      	ldr	r2, [r7, #4]
 8011a02:	683b      	ldr	r3, [r7, #0]
 8011a04:	781b      	ldrb	r3, [r3, #0]
 8011a06:	009b      	lsls	r3, r3, #2
 8011a08:	4413      	add	r3, r2
 8011a0a:	881b      	ldrh	r3, [r3, #0]
 8011a0c:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 8011a10:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8011a14:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8011a18:	2b00      	cmp	r3, #0
 8011a1a:	d01d      	beq.n	8011a58 <USB_ActivateEndpoint+0x89c>
 8011a1c:	687a      	ldr	r2, [r7, #4]
 8011a1e:	683b      	ldr	r3, [r7, #0]
 8011a20:	781b      	ldrb	r3, [r3, #0]
 8011a22:	009b      	lsls	r3, r3, #2
 8011a24:	4413      	add	r3, r2
 8011a26:	881b      	ldrh	r3, [r3, #0]
 8011a28:	b29b      	uxth	r3, r3
 8011a2a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011a2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011a32:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 8011a36:	687a      	ldr	r2, [r7, #4]
 8011a38:	683b      	ldr	r3, [r7, #0]
 8011a3a:	781b      	ldrb	r3, [r3, #0]
 8011a3c:	009b      	lsls	r3, r3, #2
 8011a3e:	441a      	add	r2, r3
 8011a40:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8011a44:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011a48:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011a4c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8011a50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011a54:	b29b      	uxth	r3, r3
 8011a56:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8011a58:	687a      	ldr	r2, [r7, #4]
 8011a5a:	683b      	ldr	r3, [r7, #0]
 8011a5c:	781b      	ldrb	r3, [r3, #0]
 8011a5e:	009b      	lsls	r3, r3, #2
 8011a60:	4413      	add	r3, r2
 8011a62:	881b      	ldrh	r3, [r3, #0]
 8011a64:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
 8011a68:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 8011a6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011a70:	2b00      	cmp	r3, #0
 8011a72:	d01d      	beq.n	8011ab0 <USB_ActivateEndpoint+0x8f4>
 8011a74:	687a      	ldr	r2, [r7, #4]
 8011a76:	683b      	ldr	r3, [r7, #0]
 8011a78:	781b      	ldrb	r3, [r3, #0]
 8011a7a:	009b      	lsls	r3, r3, #2
 8011a7c:	4413      	add	r3, r2
 8011a7e:	881b      	ldrh	r3, [r3, #0]
 8011a80:	b29b      	uxth	r3, r3
 8011a82:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011a86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011a8a:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 8011a8e:	687a      	ldr	r2, [r7, #4]
 8011a90:	683b      	ldr	r3, [r7, #0]
 8011a92:	781b      	ldrb	r3, [r3, #0]
 8011a94:	009b      	lsls	r3, r3, #2
 8011a96:	441a      	add	r2, r3
 8011a98:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 8011a9c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011aa0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011aa4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011aa8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8011aac:	b29b      	uxth	r3, r3
 8011aae:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8011ab0:	683b      	ldr	r3, [r7, #0]
 8011ab2:	78db      	ldrb	r3, [r3, #3]
 8011ab4:	2b01      	cmp	r3, #1
 8011ab6:	d024      	beq.n	8011b02 <USB_ActivateEndpoint+0x946>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8011ab8:	687a      	ldr	r2, [r7, #4]
 8011aba:	683b      	ldr	r3, [r7, #0]
 8011abc:	781b      	ldrb	r3, [r3, #0]
 8011abe:	009b      	lsls	r3, r3, #2
 8011ac0:	4413      	add	r3, r2
 8011ac2:	881b      	ldrh	r3, [r3, #0]
 8011ac4:	b29b      	uxth	r3, r3
 8011ac6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011aca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011ace:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8011ad2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8011ad6:	f083 0320 	eor.w	r3, r3, #32
 8011ada:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8011ade:	687a      	ldr	r2, [r7, #4]
 8011ae0:	683b      	ldr	r3, [r7, #0]
 8011ae2:	781b      	ldrb	r3, [r3, #0]
 8011ae4:	009b      	lsls	r3, r3, #2
 8011ae6:	441a      	add	r2, r3
 8011ae8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8011aec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011af0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011af4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011af8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011afc:	b29b      	uxth	r3, r3
 8011afe:	8013      	strh	r3, [r2, #0]
 8011b00:	e01d      	b.n	8011b3e <USB_ActivateEndpoint+0x982>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8011b02:	687a      	ldr	r2, [r7, #4]
 8011b04:	683b      	ldr	r3, [r7, #0]
 8011b06:	781b      	ldrb	r3, [r3, #0]
 8011b08:	009b      	lsls	r3, r3, #2
 8011b0a:	4413      	add	r3, r2
 8011b0c:	881b      	ldrh	r3, [r3, #0]
 8011b0e:	b29b      	uxth	r3, r3
 8011b10:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011b14:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011b18:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8011b1c:	687a      	ldr	r2, [r7, #4]
 8011b1e:	683b      	ldr	r3, [r7, #0]
 8011b20:	781b      	ldrb	r3, [r3, #0]
 8011b22:	009b      	lsls	r3, r3, #2
 8011b24:	441a      	add	r2, r3
 8011b26:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8011b2a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011b2e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011b32:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011b36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011b3a:	b29b      	uxth	r3, r3
 8011b3c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8011b3e:	687a      	ldr	r2, [r7, #4]
 8011b40:	683b      	ldr	r3, [r7, #0]
 8011b42:	781b      	ldrb	r3, [r3, #0]
 8011b44:	009b      	lsls	r3, r3, #2
 8011b46:	4413      	add	r3, r2
 8011b48:	881b      	ldrh	r3, [r3, #0]
 8011b4a:	b29b      	uxth	r3, r3
 8011b4c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8011b50:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011b54:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8011b58:	687a      	ldr	r2, [r7, #4]
 8011b5a:	683b      	ldr	r3, [r7, #0]
 8011b5c:	781b      	ldrb	r3, [r3, #0]
 8011b5e:	009b      	lsls	r3, r3, #2
 8011b60:	441a      	add	r2, r3
 8011b62:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8011b66:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011b6a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011b6e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011b72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011b76:	b29b      	uxth	r3, r3
 8011b78:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8011b7a:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
}
 8011b7e:	4618      	mov	r0, r3
 8011b80:	379c      	adds	r7, #156	@ 0x9c
 8011b82:	46bd      	mov	sp, r7
 8011b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b88:	4770      	bx	lr
 8011b8a:	bf00      	nop

08011b8c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8011b8c:	b480      	push	{r7}
 8011b8e:	b08d      	sub	sp, #52	@ 0x34
 8011b90:	af00      	add	r7, sp, #0
 8011b92:	6078      	str	r0, [r7, #4]
 8011b94:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8011b96:	683b      	ldr	r3, [r7, #0]
 8011b98:	7b1b      	ldrb	r3, [r3, #12]
 8011b9a:	2b00      	cmp	r3, #0
 8011b9c:	f040 808e 	bne.w	8011cbc <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8011ba0:	683b      	ldr	r3, [r7, #0]
 8011ba2:	785b      	ldrb	r3, [r3, #1]
 8011ba4:	2b00      	cmp	r3, #0
 8011ba6:	d044      	beq.n	8011c32 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8011ba8:	687a      	ldr	r2, [r7, #4]
 8011baa:	683b      	ldr	r3, [r7, #0]
 8011bac:	781b      	ldrb	r3, [r3, #0]
 8011bae:	009b      	lsls	r3, r3, #2
 8011bb0:	4413      	add	r3, r2
 8011bb2:	881b      	ldrh	r3, [r3, #0]
 8011bb4:	81bb      	strh	r3, [r7, #12]
 8011bb6:	89bb      	ldrh	r3, [r7, #12]
 8011bb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011bbc:	2b00      	cmp	r3, #0
 8011bbe:	d01b      	beq.n	8011bf8 <USB_DeactivateEndpoint+0x6c>
 8011bc0:	687a      	ldr	r2, [r7, #4]
 8011bc2:	683b      	ldr	r3, [r7, #0]
 8011bc4:	781b      	ldrb	r3, [r3, #0]
 8011bc6:	009b      	lsls	r3, r3, #2
 8011bc8:	4413      	add	r3, r2
 8011bca:	881b      	ldrh	r3, [r3, #0]
 8011bcc:	b29b      	uxth	r3, r3
 8011bce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011bd2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011bd6:	817b      	strh	r3, [r7, #10]
 8011bd8:	687a      	ldr	r2, [r7, #4]
 8011bda:	683b      	ldr	r3, [r7, #0]
 8011bdc:	781b      	ldrb	r3, [r3, #0]
 8011bde:	009b      	lsls	r3, r3, #2
 8011be0:	441a      	add	r2, r3
 8011be2:	897b      	ldrh	r3, [r7, #10]
 8011be4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011be8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011bec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011bf0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8011bf4:	b29b      	uxth	r3, r3
 8011bf6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8011bf8:	687a      	ldr	r2, [r7, #4]
 8011bfa:	683b      	ldr	r3, [r7, #0]
 8011bfc:	781b      	ldrb	r3, [r3, #0]
 8011bfe:	009b      	lsls	r3, r3, #2
 8011c00:	4413      	add	r3, r2
 8011c02:	881b      	ldrh	r3, [r3, #0]
 8011c04:	b29b      	uxth	r3, r3
 8011c06:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011c0a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011c0e:	813b      	strh	r3, [r7, #8]
 8011c10:	687a      	ldr	r2, [r7, #4]
 8011c12:	683b      	ldr	r3, [r7, #0]
 8011c14:	781b      	ldrb	r3, [r3, #0]
 8011c16:	009b      	lsls	r3, r3, #2
 8011c18:	441a      	add	r2, r3
 8011c1a:	893b      	ldrh	r3, [r7, #8]
 8011c1c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011c20:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011c24:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011c28:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011c2c:	b29b      	uxth	r3, r3
 8011c2e:	8013      	strh	r3, [r2, #0]
 8011c30:	e192      	b.n	8011f58 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8011c32:	687a      	ldr	r2, [r7, #4]
 8011c34:	683b      	ldr	r3, [r7, #0]
 8011c36:	781b      	ldrb	r3, [r3, #0]
 8011c38:	009b      	lsls	r3, r3, #2
 8011c3a:	4413      	add	r3, r2
 8011c3c:	881b      	ldrh	r3, [r3, #0]
 8011c3e:	827b      	strh	r3, [r7, #18]
 8011c40:	8a7b      	ldrh	r3, [r7, #18]
 8011c42:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8011c46:	2b00      	cmp	r3, #0
 8011c48:	d01b      	beq.n	8011c82 <USB_DeactivateEndpoint+0xf6>
 8011c4a:	687a      	ldr	r2, [r7, #4]
 8011c4c:	683b      	ldr	r3, [r7, #0]
 8011c4e:	781b      	ldrb	r3, [r3, #0]
 8011c50:	009b      	lsls	r3, r3, #2
 8011c52:	4413      	add	r3, r2
 8011c54:	881b      	ldrh	r3, [r3, #0]
 8011c56:	b29b      	uxth	r3, r3
 8011c58:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011c5c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011c60:	823b      	strh	r3, [r7, #16]
 8011c62:	687a      	ldr	r2, [r7, #4]
 8011c64:	683b      	ldr	r3, [r7, #0]
 8011c66:	781b      	ldrb	r3, [r3, #0]
 8011c68:	009b      	lsls	r3, r3, #2
 8011c6a:	441a      	add	r2, r3
 8011c6c:	8a3b      	ldrh	r3, [r7, #16]
 8011c6e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011c72:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011c76:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8011c7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011c7e:	b29b      	uxth	r3, r3
 8011c80:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8011c82:	687a      	ldr	r2, [r7, #4]
 8011c84:	683b      	ldr	r3, [r7, #0]
 8011c86:	781b      	ldrb	r3, [r3, #0]
 8011c88:	009b      	lsls	r3, r3, #2
 8011c8a:	4413      	add	r3, r2
 8011c8c:	881b      	ldrh	r3, [r3, #0]
 8011c8e:	b29b      	uxth	r3, r3
 8011c90:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8011c94:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011c98:	81fb      	strh	r3, [r7, #14]
 8011c9a:	687a      	ldr	r2, [r7, #4]
 8011c9c:	683b      	ldr	r3, [r7, #0]
 8011c9e:	781b      	ldrb	r3, [r3, #0]
 8011ca0:	009b      	lsls	r3, r3, #2
 8011ca2:	441a      	add	r2, r3
 8011ca4:	89fb      	ldrh	r3, [r7, #14]
 8011ca6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011caa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011cae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011cb2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011cb6:	b29b      	uxth	r3, r3
 8011cb8:	8013      	strh	r3, [r2, #0]
 8011cba:	e14d      	b.n	8011f58 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8011cbc:	683b      	ldr	r3, [r7, #0]
 8011cbe:	785b      	ldrb	r3, [r3, #1]
 8011cc0:	2b00      	cmp	r3, #0
 8011cc2:	f040 80a5 	bne.w	8011e10 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8011cc6:	687a      	ldr	r2, [r7, #4]
 8011cc8:	683b      	ldr	r3, [r7, #0]
 8011cca:	781b      	ldrb	r3, [r3, #0]
 8011ccc:	009b      	lsls	r3, r3, #2
 8011cce:	4413      	add	r3, r2
 8011cd0:	881b      	ldrh	r3, [r3, #0]
 8011cd2:	843b      	strh	r3, [r7, #32]
 8011cd4:	8c3b      	ldrh	r3, [r7, #32]
 8011cd6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8011cda:	2b00      	cmp	r3, #0
 8011cdc:	d01b      	beq.n	8011d16 <USB_DeactivateEndpoint+0x18a>
 8011cde:	687a      	ldr	r2, [r7, #4]
 8011ce0:	683b      	ldr	r3, [r7, #0]
 8011ce2:	781b      	ldrb	r3, [r3, #0]
 8011ce4:	009b      	lsls	r3, r3, #2
 8011ce6:	4413      	add	r3, r2
 8011ce8:	881b      	ldrh	r3, [r3, #0]
 8011cea:	b29b      	uxth	r3, r3
 8011cec:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011cf0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011cf4:	83fb      	strh	r3, [r7, #30]
 8011cf6:	687a      	ldr	r2, [r7, #4]
 8011cf8:	683b      	ldr	r3, [r7, #0]
 8011cfa:	781b      	ldrb	r3, [r3, #0]
 8011cfc:	009b      	lsls	r3, r3, #2
 8011cfe:	441a      	add	r2, r3
 8011d00:	8bfb      	ldrh	r3, [r7, #30]
 8011d02:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011d06:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011d0a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8011d0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011d12:	b29b      	uxth	r3, r3
 8011d14:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8011d16:	687a      	ldr	r2, [r7, #4]
 8011d18:	683b      	ldr	r3, [r7, #0]
 8011d1a:	781b      	ldrb	r3, [r3, #0]
 8011d1c:	009b      	lsls	r3, r3, #2
 8011d1e:	4413      	add	r3, r2
 8011d20:	881b      	ldrh	r3, [r3, #0]
 8011d22:	83bb      	strh	r3, [r7, #28]
 8011d24:	8bbb      	ldrh	r3, [r7, #28]
 8011d26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011d2a:	2b00      	cmp	r3, #0
 8011d2c:	d01b      	beq.n	8011d66 <USB_DeactivateEndpoint+0x1da>
 8011d2e:	687a      	ldr	r2, [r7, #4]
 8011d30:	683b      	ldr	r3, [r7, #0]
 8011d32:	781b      	ldrb	r3, [r3, #0]
 8011d34:	009b      	lsls	r3, r3, #2
 8011d36:	4413      	add	r3, r2
 8011d38:	881b      	ldrh	r3, [r3, #0]
 8011d3a:	b29b      	uxth	r3, r3
 8011d3c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011d40:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011d44:	837b      	strh	r3, [r7, #26]
 8011d46:	687a      	ldr	r2, [r7, #4]
 8011d48:	683b      	ldr	r3, [r7, #0]
 8011d4a:	781b      	ldrb	r3, [r3, #0]
 8011d4c:	009b      	lsls	r3, r3, #2
 8011d4e:	441a      	add	r2, r3
 8011d50:	8b7b      	ldrh	r3, [r7, #26]
 8011d52:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011d56:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011d5a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011d5e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8011d62:	b29b      	uxth	r3, r3
 8011d64:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8011d66:	687a      	ldr	r2, [r7, #4]
 8011d68:	683b      	ldr	r3, [r7, #0]
 8011d6a:	781b      	ldrb	r3, [r3, #0]
 8011d6c:	009b      	lsls	r3, r3, #2
 8011d6e:	4413      	add	r3, r2
 8011d70:	881b      	ldrh	r3, [r3, #0]
 8011d72:	b29b      	uxth	r3, r3
 8011d74:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011d78:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011d7c:	833b      	strh	r3, [r7, #24]
 8011d7e:	687a      	ldr	r2, [r7, #4]
 8011d80:	683b      	ldr	r3, [r7, #0]
 8011d82:	781b      	ldrb	r3, [r3, #0]
 8011d84:	009b      	lsls	r3, r3, #2
 8011d86:	441a      	add	r2, r3
 8011d88:	8b3b      	ldrh	r3, [r7, #24]
 8011d8a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011d8e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011d92:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011d96:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8011d9a:	b29b      	uxth	r3, r3
 8011d9c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8011d9e:	687a      	ldr	r2, [r7, #4]
 8011da0:	683b      	ldr	r3, [r7, #0]
 8011da2:	781b      	ldrb	r3, [r3, #0]
 8011da4:	009b      	lsls	r3, r3, #2
 8011da6:	4413      	add	r3, r2
 8011da8:	881b      	ldrh	r3, [r3, #0]
 8011daa:	b29b      	uxth	r3, r3
 8011dac:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8011db0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011db4:	82fb      	strh	r3, [r7, #22]
 8011db6:	687a      	ldr	r2, [r7, #4]
 8011db8:	683b      	ldr	r3, [r7, #0]
 8011dba:	781b      	ldrb	r3, [r3, #0]
 8011dbc:	009b      	lsls	r3, r3, #2
 8011dbe:	441a      	add	r2, r3
 8011dc0:	8afb      	ldrh	r3, [r7, #22]
 8011dc2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011dc6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011dca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011dce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011dd2:	b29b      	uxth	r3, r3
 8011dd4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8011dd6:	687a      	ldr	r2, [r7, #4]
 8011dd8:	683b      	ldr	r3, [r7, #0]
 8011dda:	781b      	ldrb	r3, [r3, #0]
 8011ddc:	009b      	lsls	r3, r3, #2
 8011dde:	4413      	add	r3, r2
 8011de0:	881b      	ldrh	r3, [r3, #0]
 8011de2:	b29b      	uxth	r3, r3
 8011de4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011de8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011dec:	82bb      	strh	r3, [r7, #20]
 8011dee:	687a      	ldr	r2, [r7, #4]
 8011df0:	683b      	ldr	r3, [r7, #0]
 8011df2:	781b      	ldrb	r3, [r3, #0]
 8011df4:	009b      	lsls	r3, r3, #2
 8011df6:	441a      	add	r2, r3
 8011df8:	8abb      	ldrh	r3, [r7, #20]
 8011dfa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011dfe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011e02:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011e06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011e0a:	b29b      	uxth	r3, r3
 8011e0c:	8013      	strh	r3, [r2, #0]
 8011e0e:	e0a3      	b.n	8011f58 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8011e10:	687a      	ldr	r2, [r7, #4]
 8011e12:	683b      	ldr	r3, [r7, #0]
 8011e14:	781b      	ldrb	r3, [r3, #0]
 8011e16:	009b      	lsls	r3, r3, #2
 8011e18:	4413      	add	r3, r2
 8011e1a:	881b      	ldrh	r3, [r3, #0]
 8011e1c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8011e1e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8011e20:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8011e24:	2b00      	cmp	r3, #0
 8011e26:	d01b      	beq.n	8011e60 <USB_DeactivateEndpoint+0x2d4>
 8011e28:	687a      	ldr	r2, [r7, #4]
 8011e2a:	683b      	ldr	r3, [r7, #0]
 8011e2c:	781b      	ldrb	r3, [r3, #0]
 8011e2e:	009b      	lsls	r3, r3, #2
 8011e30:	4413      	add	r3, r2
 8011e32:	881b      	ldrh	r3, [r3, #0]
 8011e34:	b29b      	uxth	r3, r3
 8011e36:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011e3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011e3e:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8011e40:	687a      	ldr	r2, [r7, #4]
 8011e42:	683b      	ldr	r3, [r7, #0]
 8011e44:	781b      	ldrb	r3, [r3, #0]
 8011e46:	009b      	lsls	r3, r3, #2
 8011e48:	441a      	add	r2, r3
 8011e4a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8011e4c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011e50:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011e54:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8011e58:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011e5c:	b29b      	uxth	r3, r3
 8011e5e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8011e60:	687a      	ldr	r2, [r7, #4]
 8011e62:	683b      	ldr	r3, [r7, #0]
 8011e64:	781b      	ldrb	r3, [r3, #0]
 8011e66:	009b      	lsls	r3, r3, #2
 8011e68:	4413      	add	r3, r2
 8011e6a:	881b      	ldrh	r3, [r3, #0]
 8011e6c:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8011e6e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8011e70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011e74:	2b00      	cmp	r3, #0
 8011e76:	d01b      	beq.n	8011eb0 <USB_DeactivateEndpoint+0x324>
 8011e78:	687a      	ldr	r2, [r7, #4]
 8011e7a:	683b      	ldr	r3, [r7, #0]
 8011e7c:	781b      	ldrb	r3, [r3, #0]
 8011e7e:	009b      	lsls	r3, r3, #2
 8011e80:	4413      	add	r3, r2
 8011e82:	881b      	ldrh	r3, [r3, #0]
 8011e84:	b29b      	uxth	r3, r3
 8011e86:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011e8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011e8e:	853b      	strh	r3, [r7, #40]	@ 0x28
 8011e90:	687a      	ldr	r2, [r7, #4]
 8011e92:	683b      	ldr	r3, [r7, #0]
 8011e94:	781b      	ldrb	r3, [r3, #0]
 8011e96:	009b      	lsls	r3, r3, #2
 8011e98:	441a      	add	r2, r3
 8011e9a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8011e9c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011ea0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011ea4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011ea8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8011eac:	b29b      	uxth	r3, r3
 8011eae:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8011eb0:	687a      	ldr	r2, [r7, #4]
 8011eb2:	683b      	ldr	r3, [r7, #0]
 8011eb4:	781b      	ldrb	r3, [r3, #0]
 8011eb6:	009b      	lsls	r3, r3, #2
 8011eb8:	4413      	add	r3, r2
 8011eba:	881b      	ldrh	r3, [r3, #0]
 8011ebc:	b29b      	uxth	r3, r3
 8011ebe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011ec2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011ec6:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8011ec8:	687a      	ldr	r2, [r7, #4]
 8011eca:	683b      	ldr	r3, [r7, #0]
 8011ecc:	781b      	ldrb	r3, [r3, #0]
 8011ece:	009b      	lsls	r3, r3, #2
 8011ed0:	441a      	add	r2, r3
 8011ed2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8011ed4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011ed8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011edc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8011ee0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011ee4:	b29b      	uxth	r3, r3
 8011ee6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8011ee8:	687a      	ldr	r2, [r7, #4]
 8011eea:	683b      	ldr	r3, [r7, #0]
 8011eec:	781b      	ldrb	r3, [r3, #0]
 8011eee:	009b      	lsls	r3, r3, #2
 8011ef0:	4413      	add	r3, r2
 8011ef2:	881b      	ldrh	r3, [r3, #0]
 8011ef4:	b29b      	uxth	r3, r3
 8011ef6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011efa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011efe:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8011f00:	687a      	ldr	r2, [r7, #4]
 8011f02:	683b      	ldr	r3, [r7, #0]
 8011f04:	781b      	ldrb	r3, [r3, #0]
 8011f06:	009b      	lsls	r3, r3, #2
 8011f08:	441a      	add	r2, r3
 8011f0a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8011f0c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011f10:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011f14:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011f18:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011f1c:	b29b      	uxth	r3, r3
 8011f1e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8011f20:	687a      	ldr	r2, [r7, #4]
 8011f22:	683b      	ldr	r3, [r7, #0]
 8011f24:	781b      	ldrb	r3, [r3, #0]
 8011f26:	009b      	lsls	r3, r3, #2
 8011f28:	4413      	add	r3, r2
 8011f2a:	881b      	ldrh	r3, [r3, #0]
 8011f2c:	b29b      	uxth	r3, r3
 8011f2e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8011f32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011f36:	847b      	strh	r3, [r7, #34]	@ 0x22
 8011f38:	687a      	ldr	r2, [r7, #4]
 8011f3a:	683b      	ldr	r3, [r7, #0]
 8011f3c:	781b      	ldrb	r3, [r3, #0]
 8011f3e:	009b      	lsls	r3, r3, #2
 8011f40:	441a      	add	r2, r3
 8011f42:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8011f44:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011f48:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011f4c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011f50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011f54:	b29b      	uxth	r3, r3
 8011f56:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8011f58:	2300      	movs	r3, #0
}
 8011f5a:	4618      	mov	r0, r3
 8011f5c:	3734      	adds	r7, #52	@ 0x34
 8011f5e:	46bd      	mov	sp, r7
 8011f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f64:	4770      	bx	lr

08011f66 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8011f66:	b580      	push	{r7, lr}
 8011f68:	b0ac      	sub	sp, #176	@ 0xb0
 8011f6a:	af00      	add	r7, sp, #0
 8011f6c:	6078      	str	r0, [r7, #4]
 8011f6e:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8011f70:	683b      	ldr	r3, [r7, #0]
 8011f72:	785b      	ldrb	r3, [r3, #1]
 8011f74:	2b01      	cmp	r3, #1
 8011f76:	f040 84ca 	bne.w	801290e <USB_EPStartXfer+0x9a8>
  {
    /* Multi packet transfer */
    if (ep->xfer_len > ep->maxpacket)
 8011f7a:	683b      	ldr	r3, [r7, #0]
 8011f7c:	699a      	ldr	r2, [r3, #24]
 8011f7e:	683b      	ldr	r3, [r7, #0]
 8011f80:	691b      	ldr	r3, [r3, #16]
 8011f82:	429a      	cmp	r2, r3
 8011f84:	d904      	bls.n	8011f90 <USB_EPStartXfer+0x2a>
    {
      len = ep->maxpacket;
 8011f86:	683b      	ldr	r3, [r7, #0]
 8011f88:	691b      	ldr	r3, [r3, #16]
 8011f8a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8011f8e:	e003      	b.n	8011f98 <USB_EPStartXfer+0x32>
    }
    else
    {
      len = ep->xfer_len;
 8011f90:	683b      	ldr	r3, [r7, #0]
 8011f92:	699b      	ldr	r3, [r3, #24]
 8011f94:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8011f98:	683b      	ldr	r3, [r7, #0]
 8011f9a:	7b1b      	ldrb	r3, [r3, #12]
 8011f9c:	2b00      	cmp	r3, #0
 8011f9e:	d122      	bne.n	8011fe6 <USB_EPStartXfer+0x80>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8011fa0:	683b      	ldr	r3, [r7, #0]
 8011fa2:	6959      	ldr	r1, [r3, #20]
 8011fa4:	683b      	ldr	r3, [r7, #0]
 8011fa6:	88da      	ldrh	r2, [r3, #6]
 8011fa8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011fac:	b29b      	uxth	r3, r3
 8011fae:	6878      	ldr	r0, [r7, #4]
 8011fb0:	f000 febd 	bl	8012d2e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8011fb4:	687b      	ldr	r3, [r7, #4]
 8011fb6:	613b      	str	r3, [r7, #16]
 8011fb8:	687b      	ldr	r3, [r7, #4]
 8011fba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8011fbe:	b29b      	uxth	r3, r3
 8011fc0:	461a      	mov	r2, r3
 8011fc2:	693b      	ldr	r3, [r7, #16]
 8011fc4:	4413      	add	r3, r2
 8011fc6:	613b      	str	r3, [r7, #16]
 8011fc8:	683b      	ldr	r3, [r7, #0]
 8011fca:	781b      	ldrb	r3, [r3, #0]
 8011fcc:	00da      	lsls	r2, r3, #3
 8011fce:	693b      	ldr	r3, [r7, #16]
 8011fd0:	4413      	add	r3, r2
 8011fd2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8011fd6:	60fb      	str	r3, [r7, #12]
 8011fd8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011fdc:	b29a      	uxth	r2, r3
 8011fde:	68fb      	ldr	r3, [r7, #12]
 8011fe0:	801a      	strh	r2, [r3, #0]
 8011fe2:	f000 bc6f 	b.w	80128c4 <USB_EPStartXfer+0x95e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8011fe6:	683b      	ldr	r3, [r7, #0]
 8011fe8:	78db      	ldrb	r3, [r3, #3]
 8011fea:	2b02      	cmp	r3, #2
 8011fec:	f040 831e 	bne.w	801262c <USB_EPStartXfer+0x6c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8011ff0:	683b      	ldr	r3, [r7, #0]
 8011ff2:	6a1a      	ldr	r2, [r3, #32]
 8011ff4:	683b      	ldr	r3, [r7, #0]
 8011ff6:	691b      	ldr	r3, [r3, #16]
 8011ff8:	429a      	cmp	r2, r3
 8011ffa:	f240 82cf 	bls.w	801259c <USB_EPStartXfer+0x636>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8011ffe:	687a      	ldr	r2, [r7, #4]
 8012000:	683b      	ldr	r3, [r7, #0]
 8012002:	781b      	ldrb	r3, [r3, #0]
 8012004:	009b      	lsls	r3, r3, #2
 8012006:	4413      	add	r3, r2
 8012008:	881b      	ldrh	r3, [r3, #0]
 801200a:	b29b      	uxth	r3, r3
 801200c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8012010:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8012014:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8012018:	687a      	ldr	r2, [r7, #4]
 801201a:	683b      	ldr	r3, [r7, #0]
 801201c:	781b      	ldrb	r3, [r3, #0]
 801201e:	009b      	lsls	r3, r3, #2
 8012020:	441a      	add	r2, r3
 8012022:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8012026:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 801202a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 801202e:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8012032:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012036:	b29b      	uxth	r3, r3
 8012038:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 801203a:	683b      	ldr	r3, [r7, #0]
 801203c:	6a1a      	ldr	r2, [r3, #32]
 801203e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012042:	1ad2      	subs	r2, r2, r3
 8012044:	683b      	ldr	r3, [r7, #0]
 8012046:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8012048:	687a      	ldr	r2, [r7, #4]
 801204a:	683b      	ldr	r3, [r7, #0]
 801204c:	781b      	ldrb	r3, [r3, #0]
 801204e:	009b      	lsls	r3, r3, #2
 8012050:	4413      	add	r3, r2
 8012052:	881b      	ldrh	r3, [r3, #0]
 8012054:	b29b      	uxth	r3, r3
 8012056:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801205a:	2b00      	cmp	r3, #0
 801205c:	f000 814f 	beq.w	80122fe <USB_EPStartXfer+0x398>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8012060:	687b      	ldr	r3, [r7, #4]
 8012062:	633b      	str	r3, [r7, #48]	@ 0x30
 8012064:	683b      	ldr	r3, [r7, #0]
 8012066:	785b      	ldrb	r3, [r3, #1]
 8012068:	2b00      	cmp	r3, #0
 801206a:	d16b      	bne.n	8012144 <USB_EPStartXfer+0x1de>
 801206c:	687b      	ldr	r3, [r7, #4]
 801206e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8012070:	687b      	ldr	r3, [r7, #4]
 8012072:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8012076:	b29b      	uxth	r3, r3
 8012078:	461a      	mov	r2, r3
 801207a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801207c:	4413      	add	r3, r2
 801207e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8012080:	683b      	ldr	r3, [r7, #0]
 8012082:	781b      	ldrb	r3, [r3, #0]
 8012084:	00da      	lsls	r2, r3, #3
 8012086:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012088:	4413      	add	r3, r2
 801208a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 801208e:	627b      	str	r3, [r7, #36]	@ 0x24
 8012090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012092:	881b      	ldrh	r3, [r3, #0]
 8012094:	b29b      	uxth	r3, r3
 8012096:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801209a:	b29a      	uxth	r2, r3
 801209c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801209e:	801a      	strh	r2, [r3, #0]
 80120a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80120a4:	2b00      	cmp	r3, #0
 80120a6:	d10a      	bne.n	80120be <USB_EPStartXfer+0x158>
 80120a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80120aa:	881b      	ldrh	r3, [r3, #0]
 80120ac:	b29b      	uxth	r3, r3
 80120ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80120b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80120b6:	b29a      	uxth	r2, r3
 80120b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80120ba:	801a      	strh	r2, [r3, #0]
 80120bc:	e05b      	b.n	8012176 <USB_EPStartXfer+0x210>
 80120be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80120c2:	2b3e      	cmp	r3, #62	@ 0x3e
 80120c4:	d81c      	bhi.n	8012100 <USB_EPStartXfer+0x19a>
 80120c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80120ca:	085b      	lsrs	r3, r3, #1
 80120cc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80120d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80120d4:	f003 0301 	and.w	r3, r3, #1
 80120d8:	2b00      	cmp	r3, #0
 80120da:	d004      	beq.n	80120e6 <USB_EPStartXfer+0x180>
 80120dc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80120e0:	3301      	adds	r3, #1
 80120e2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80120e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80120e8:	881b      	ldrh	r3, [r3, #0]
 80120ea:	b29a      	uxth	r2, r3
 80120ec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80120f0:	b29b      	uxth	r3, r3
 80120f2:	029b      	lsls	r3, r3, #10
 80120f4:	b29b      	uxth	r3, r3
 80120f6:	4313      	orrs	r3, r2
 80120f8:	b29a      	uxth	r2, r3
 80120fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80120fc:	801a      	strh	r2, [r3, #0]
 80120fe:	e03a      	b.n	8012176 <USB_EPStartXfer+0x210>
 8012100:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012104:	095b      	lsrs	r3, r3, #5
 8012106:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 801210a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801210e:	f003 031f 	and.w	r3, r3, #31
 8012112:	2b00      	cmp	r3, #0
 8012114:	d104      	bne.n	8012120 <USB_EPStartXfer+0x1ba>
 8012116:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 801211a:	3b01      	subs	r3, #1
 801211c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8012120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012122:	881b      	ldrh	r3, [r3, #0]
 8012124:	b29a      	uxth	r2, r3
 8012126:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 801212a:	b29b      	uxth	r3, r3
 801212c:	029b      	lsls	r3, r3, #10
 801212e:	b29b      	uxth	r3, r3
 8012130:	4313      	orrs	r3, r2
 8012132:	b29b      	uxth	r3, r3
 8012134:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012138:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801213c:	b29a      	uxth	r2, r3
 801213e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012140:	801a      	strh	r2, [r3, #0]
 8012142:	e018      	b.n	8012176 <USB_EPStartXfer+0x210>
 8012144:	683b      	ldr	r3, [r7, #0]
 8012146:	785b      	ldrb	r3, [r3, #1]
 8012148:	2b01      	cmp	r3, #1
 801214a:	d114      	bne.n	8012176 <USB_EPStartXfer+0x210>
 801214c:	687b      	ldr	r3, [r7, #4]
 801214e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8012152:	b29b      	uxth	r3, r3
 8012154:	461a      	mov	r2, r3
 8012156:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012158:	4413      	add	r3, r2
 801215a:	633b      	str	r3, [r7, #48]	@ 0x30
 801215c:	683b      	ldr	r3, [r7, #0]
 801215e:	781b      	ldrb	r3, [r3, #0]
 8012160:	00da      	lsls	r2, r3, #3
 8012162:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012164:	4413      	add	r3, r2
 8012166:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 801216a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801216c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012170:	b29a      	uxth	r2, r3
 8012172:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012174:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8012176:	683b      	ldr	r3, [r7, #0]
 8012178:	895b      	ldrh	r3, [r3, #10]
 801217a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801217e:	683b      	ldr	r3, [r7, #0]
 8012180:	6959      	ldr	r1, [r3, #20]
 8012182:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012186:	b29b      	uxth	r3, r3
 8012188:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 801218c:	6878      	ldr	r0, [r7, #4]
 801218e:	f000 fdce 	bl	8012d2e <USB_WritePMA>
            ep->xfer_buff += len;
 8012192:	683b      	ldr	r3, [r7, #0]
 8012194:	695a      	ldr	r2, [r3, #20]
 8012196:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801219a:	441a      	add	r2, r3
 801219c:	683b      	ldr	r3, [r7, #0]
 801219e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80121a0:	683b      	ldr	r3, [r7, #0]
 80121a2:	6a1a      	ldr	r2, [r3, #32]
 80121a4:	683b      	ldr	r3, [r7, #0]
 80121a6:	691b      	ldr	r3, [r3, #16]
 80121a8:	429a      	cmp	r2, r3
 80121aa:	d907      	bls.n	80121bc <USB_EPStartXfer+0x256>
            {
              ep->xfer_len_db -= len;
 80121ac:	683b      	ldr	r3, [r7, #0]
 80121ae:	6a1a      	ldr	r2, [r3, #32]
 80121b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80121b4:	1ad2      	subs	r2, r2, r3
 80121b6:	683b      	ldr	r3, [r7, #0]
 80121b8:	621a      	str	r2, [r3, #32]
 80121ba:	e006      	b.n	80121ca <USB_EPStartXfer+0x264>
            }
            else
            {
              len = ep->xfer_len_db;
 80121bc:	683b      	ldr	r3, [r7, #0]
 80121be:	6a1b      	ldr	r3, [r3, #32]
 80121c0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 80121c4:	683b      	ldr	r3, [r7, #0]
 80121c6:	2200      	movs	r2, #0
 80121c8:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80121ca:	683b      	ldr	r3, [r7, #0]
 80121cc:	785b      	ldrb	r3, [r3, #1]
 80121ce:	2b00      	cmp	r3, #0
 80121d0:	d16b      	bne.n	80122aa <USB_EPStartXfer+0x344>
 80121d2:	687b      	ldr	r3, [r7, #4]
 80121d4:	61bb      	str	r3, [r7, #24]
 80121d6:	687b      	ldr	r3, [r7, #4]
 80121d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80121dc:	b29b      	uxth	r3, r3
 80121de:	461a      	mov	r2, r3
 80121e0:	69bb      	ldr	r3, [r7, #24]
 80121e2:	4413      	add	r3, r2
 80121e4:	61bb      	str	r3, [r7, #24]
 80121e6:	683b      	ldr	r3, [r7, #0]
 80121e8:	781b      	ldrb	r3, [r3, #0]
 80121ea:	00da      	lsls	r2, r3, #3
 80121ec:	69bb      	ldr	r3, [r7, #24]
 80121ee:	4413      	add	r3, r2
 80121f0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80121f4:	617b      	str	r3, [r7, #20]
 80121f6:	697b      	ldr	r3, [r7, #20]
 80121f8:	881b      	ldrh	r3, [r3, #0]
 80121fa:	b29b      	uxth	r3, r3
 80121fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8012200:	b29a      	uxth	r2, r3
 8012202:	697b      	ldr	r3, [r7, #20]
 8012204:	801a      	strh	r2, [r3, #0]
 8012206:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801220a:	2b00      	cmp	r3, #0
 801220c:	d10a      	bne.n	8012224 <USB_EPStartXfer+0x2be>
 801220e:	697b      	ldr	r3, [r7, #20]
 8012210:	881b      	ldrh	r3, [r3, #0]
 8012212:	b29b      	uxth	r3, r3
 8012214:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012218:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801221c:	b29a      	uxth	r2, r3
 801221e:	697b      	ldr	r3, [r7, #20]
 8012220:	801a      	strh	r2, [r3, #0]
 8012222:	e05d      	b.n	80122e0 <USB_EPStartXfer+0x37a>
 8012224:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012228:	2b3e      	cmp	r3, #62	@ 0x3e
 801222a:	d81c      	bhi.n	8012266 <USB_EPStartXfer+0x300>
 801222c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012230:	085b      	lsrs	r3, r3, #1
 8012232:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8012236:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801223a:	f003 0301 	and.w	r3, r3, #1
 801223e:	2b00      	cmp	r3, #0
 8012240:	d004      	beq.n	801224c <USB_EPStartXfer+0x2e6>
 8012242:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8012246:	3301      	adds	r3, #1
 8012248:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 801224c:	697b      	ldr	r3, [r7, #20]
 801224e:	881b      	ldrh	r3, [r3, #0]
 8012250:	b29a      	uxth	r2, r3
 8012252:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8012256:	b29b      	uxth	r3, r3
 8012258:	029b      	lsls	r3, r3, #10
 801225a:	b29b      	uxth	r3, r3
 801225c:	4313      	orrs	r3, r2
 801225e:	b29a      	uxth	r2, r3
 8012260:	697b      	ldr	r3, [r7, #20]
 8012262:	801a      	strh	r2, [r3, #0]
 8012264:	e03c      	b.n	80122e0 <USB_EPStartXfer+0x37a>
 8012266:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801226a:	095b      	lsrs	r3, r3, #5
 801226c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8012270:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012274:	f003 031f 	and.w	r3, r3, #31
 8012278:	2b00      	cmp	r3, #0
 801227a:	d104      	bne.n	8012286 <USB_EPStartXfer+0x320>
 801227c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8012280:	3b01      	subs	r3, #1
 8012282:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8012286:	697b      	ldr	r3, [r7, #20]
 8012288:	881b      	ldrh	r3, [r3, #0]
 801228a:	b29a      	uxth	r2, r3
 801228c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8012290:	b29b      	uxth	r3, r3
 8012292:	029b      	lsls	r3, r3, #10
 8012294:	b29b      	uxth	r3, r3
 8012296:	4313      	orrs	r3, r2
 8012298:	b29b      	uxth	r3, r3
 801229a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801229e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80122a2:	b29a      	uxth	r2, r3
 80122a4:	697b      	ldr	r3, [r7, #20]
 80122a6:	801a      	strh	r2, [r3, #0]
 80122a8:	e01a      	b.n	80122e0 <USB_EPStartXfer+0x37a>
 80122aa:	683b      	ldr	r3, [r7, #0]
 80122ac:	785b      	ldrb	r3, [r3, #1]
 80122ae:	2b01      	cmp	r3, #1
 80122b0:	d116      	bne.n	80122e0 <USB_EPStartXfer+0x37a>
 80122b2:	687b      	ldr	r3, [r7, #4]
 80122b4:	623b      	str	r3, [r7, #32]
 80122b6:	687b      	ldr	r3, [r7, #4]
 80122b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80122bc:	b29b      	uxth	r3, r3
 80122be:	461a      	mov	r2, r3
 80122c0:	6a3b      	ldr	r3, [r7, #32]
 80122c2:	4413      	add	r3, r2
 80122c4:	623b      	str	r3, [r7, #32]
 80122c6:	683b      	ldr	r3, [r7, #0]
 80122c8:	781b      	ldrb	r3, [r3, #0]
 80122ca:	00da      	lsls	r2, r3, #3
 80122cc:	6a3b      	ldr	r3, [r7, #32]
 80122ce:	4413      	add	r3, r2
 80122d0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80122d4:	61fb      	str	r3, [r7, #28]
 80122d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80122da:	b29a      	uxth	r2, r3
 80122dc:	69fb      	ldr	r3, [r7, #28]
 80122de:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80122e0:	683b      	ldr	r3, [r7, #0]
 80122e2:	891b      	ldrh	r3, [r3, #8]
 80122e4:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80122e8:	683b      	ldr	r3, [r7, #0]
 80122ea:	6959      	ldr	r1, [r3, #20]
 80122ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80122f0:	b29b      	uxth	r3, r3
 80122f2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80122f6:	6878      	ldr	r0, [r7, #4]
 80122f8:	f000 fd19 	bl	8012d2e <USB_WritePMA>
 80122fc:	e2e2      	b.n	80128c4 <USB_EPStartXfer+0x95e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80122fe:	683b      	ldr	r3, [r7, #0]
 8012300:	785b      	ldrb	r3, [r3, #1]
 8012302:	2b00      	cmp	r3, #0
 8012304:	d16b      	bne.n	80123de <USB_EPStartXfer+0x478>
 8012306:	687b      	ldr	r3, [r7, #4]
 8012308:	64bb      	str	r3, [r7, #72]	@ 0x48
 801230a:	687b      	ldr	r3, [r7, #4]
 801230c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8012310:	b29b      	uxth	r3, r3
 8012312:	461a      	mov	r2, r3
 8012314:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012316:	4413      	add	r3, r2
 8012318:	64bb      	str	r3, [r7, #72]	@ 0x48
 801231a:	683b      	ldr	r3, [r7, #0]
 801231c:	781b      	ldrb	r3, [r3, #0]
 801231e:	00da      	lsls	r2, r3, #3
 8012320:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012322:	4413      	add	r3, r2
 8012324:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8012328:	647b      	str	r3, [r7, #68]	@ 0x44
 801232a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801232c:	881b      	ldrh	r3, [r3, #0]
 801232e:	b29b      	uxth	r3, r3
 8012330:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8012334:	b29a      	uxth	r2, r3
 8012336:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012338:	801a      	strh	r2, [r3, #0]
 801233a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801233e:	2b00      	cmp	r3, #0
 8012340:	d10a      	bne.n	8012358 <USB_EPStartXfer+0x3f2>
 8012342:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012344:	881b      	ldrh	r3, [r3, #0]
 8012346:	b29b      	uxth	r3, r3
 8012348:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801234c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012350:	b29a      	uxth	r2, r3
 8012352:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012354:	801a      	strh	r2, [r3, #0]
 8012356:	e05d      	b.n	8012414 <USB_EPStartXfer+0x4ae>
 8012358:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801235c:	2b3e      	cmp	r3, #62	@ 0x3e
 801235e:	d81c      	bhi.n	801239a <USB_EPStartXfer+0x434>
 8012360:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012364:	085b      	lsrs	r3, r3, #1
 8012366:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 801236a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801236e:	f003 0301 	and.w	r3, r3, #1
 8012372:	2b00      	cmp	r3, #0
 8012374:	d004      	beq.n	8012380 <USB_EPStartXfer+0x41a>
 8012376:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801237a:	3301      	adds	r3, #1
 801237c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8012380:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012382:	881b      	ldrh	r3, [r3, #0]
 8012384:	b29a      	uxth	r2, r3
 8012386:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801238a:	b29b      	uxth	r3, r3
 801238c:	029b      	lsls	r3, r3, #10
 801238e:	b29b      	uxth	r3, r3
 8012390:	4313      	orrs	r3, r2
 8012392:	b29a      	uxth	r2, r3
 8012394:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012396:	801a      	strh	r2, [r3, #0]
 8012398:	e03c      	b.n	8012414 <USB_EPStartXfer+0x4ae>
 801239a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801239e:	095b      	lsrs	r3, r3, #5
 80123a0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80123a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80123a8:	f003 031f 	and.w	r3, r3, #31
 80123ac:	2b00      	cmp	r3, #0
 80123ae:	d104      	bne.n	80123ba <USB_EPStartXfer+0x454>
 80123b0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80123b4:	3b01      	subs	r3, #1
 80123b6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80123ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80123bc:	881b      	ldrh	r3, [r3, #0]
 80123be:	b29a      	uxth	r2, r3
 80123c0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80123c4:	b29b      	uxth	r3, r3
 80123c6:	029b      	lsls	r3, r3, #10
 80123c8:	b29b      	uxth	r3, r3
 80123ca:	4313      	orrs	r3, r2
 80123cc:	b29b      	uxth	r3, r3
 80123ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80123d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80123d6:	b29a      	uxth	r2, r3
 80123d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80123da:	801a      	strh	r2, [r3, #0]
 80123dc:	e01a      	b.n	8012414 <USB_EPStartXfer+0x4ae>
 80123de:	683b      	ldr	r3, [r7, #0]
 80123e0:	785b      	ldrb	r3, [r3, #1]
 80123e2:	2b01      	cmp	r3, #1
 80123e4:	d116      	bne.n	8012414 <USB_EPStartXfer+0x4ae>
 80123e6:	687b      	ldr	r3, [r7, #4]
 80123e8:	653b      	str	r3, [r7, #80]	@ 0x50
 80123ea:	687b      	ldr	r3, [r7, #4]
 80123ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80123f0:	b29b      	uxth	r3, r3
 80123f2:	461a      	mov	r2, r3
 80123f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80123f6:	4413      	add	r3, r2
 80123f8:	653b      	str	r3, [r7, #80]	@ 0x50
 80123fa:	683b      	ldr	r3, [r7, #0]
 80123fc:	781b      	ldrb	r3, [r3, #0]
 80123fe:	00da      	lsls	r2, r3, #3
 8012400:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012402:	4413      	add	r3, r2
 8012404:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8012408:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801240a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801240e:	b29a      	uxth	r2, r3
 8012410:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012412:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8012414:	683b      	ldr	r3, [r7, #0]
 8012416:	891b      	ldrh	r3, [r3, #8]
 8012418:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801241c:	683b      	ldr	r3, [r7, #0]
 801241e:	6959      	ldr	r1, [r3, #20]
 8012420:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012424:	b29b      	uxth	r3, r3
 8012426:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 801242a:	6878      	ldr	r0, [r7, #4]
 801242c:	f000 fc7f 	bl	8012d2e <USB_WritePMA>
            ep->xfer_buff += len;
 8012430:	683b      	ldr	r3, [r7, #0]
 8012432:	695a      	ldr	r2, [r3, #20]
 8012434:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012438:	441a      	add	r2, r3
 801243a:	683b      	ldr	r3, [r7, #0]
 801243c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 801243e:	683b      	ldr	r3, [r7, #0]
 8012440:	6a1a      	ldr	r2, [r3, #32]
 8012442:	683b      	ldr	r3, [r7, #0]
 8012444:	691b      	ldr	r3, [r3, #16]
 8012446:	429a      	cmp	r2, r3
 8012448:	d907      	bls.n	801245a <USB_EPStartXfer+0x4f4>
            {
              ep->xfer_len_db -= len;
 801244a:	683b      	ldr	r3, [r7, #0]
 801244c:	6a1a      	ldr	r2, [r3, #32]
 801244e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012452:	1ad2      	subs	r2, r2, r3
 8012454:	683b      	ldr	r3, [r7, #0]
 8012456:	621a      	str	r2, [r3, #32]
 8012458:	e006      	b.n	8012468 <USB_EPStartXfer+0x502>
            }
            else
            {
              len = ep->xfer_len_db;
 801245a:	683b      	ldr	r3, [r7, #0]
 801245c:	6a1b      	ldr	r3, [r3, #32]
 801245e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 8012462:	683b      	ldr	r3, [r7, #0]
 8012464:	2200      	movs	r2, #0
 8012466:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8012468:	687b      	ldr	r3, [r7, #4]
 801246a:	643b      	str	r3, [r7, #64]	@ 0x40
 801246c:	683b      	ldr	r3, [r7, #0]
 801246e:	785b      	ldrb	r3, [r3, #1]
 8012470:	2b00      	cmp	r3, #0
 8012472:	d16b      	bne.n	801254c <USB_EPStartXfer+0x5e6>
 8012474:	687b      	ldr	r3, [r7, #4]
 8012476:	63bb      	str	r3, [r7, #56]	@ 0x38
 8012478:	687b      	ldr	r3, [r7, #4]
 801247a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 801247e:	b29b      	uxth	r3, r3
 8012480:	461a      	mov	r2, r3
 8012482:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012484:	4413      	add	r3, r2
 8012486:	63bb      	str	r3, [r7, #56]	@ 0x38
 8012488:	683b      	ldr	r3, [r7, #0]
 801248a:	781b      	ldrb	r3, [r3, #0]
 801248c:	00da      	lsls	r2, r3, #3
 801248e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012490:	4413      	add	r3, r2
 8012492:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8012496:	637b      	str	r3, [r7, #52]	@ 0x34
 8012498:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801249a:	881b      	ldrh	r3, [r3, #0]
 801249c:	b29b      	uxth	r3, r3
 801249e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80124a2:	b29a      	uxth	r2, r3
 80124a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80124a6:	801a      	strh	r2, [r3, #0]
 80124a8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80124ac:	2b00      	cmp	r3, #0
 80124ae:	d10a      	bne.n	80124c6 <USB_EPStartXfer+0x560>
 80124b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80124b2:	881b      	ldrh	r3, [r3, #0]
 80124b4:	b29b      	uxth	r3, r3
 80124b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80124ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80124be:	b29a      	uxth	r2, r3
 80124c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80124c2:	801a      	strh	r2, [r3, #0]
 80124c4:	e05b      	b.n	801257e <USB_EPStartXfer+0x618>
 80124c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80124ca:	2b3e      	cmp	r3, #62	@ 0x3e
 80124cc:	d81c      	bhi.n	8012508 <USB_EPStartXfer+0x5a2>
 80124ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80124d2:	085b      	lsrs	r3, r3, #1
 80124d4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80124d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80124dc:	f003 0301 	and.w	r3, r3, #1
 80124e0:	2b00      	cmp	r3, #0
 80124e2:	d004      	beq.n	80124ee <USB_EPStartXfer+0x588>
 80124e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80124e8:	3301      	adds	r3, #1
 80124ea:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80124ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80124f0:	881b      	ldrh	r3, [r3, #0]
 80124f2:	b29a      	uxth	r2, r3
 80124f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80124f8:	b29b      	uxth	r3, r3
 80124fa:	029b      	lsls	r3, r3, #10
 80124fc:	b29b      	uxth	r3, r3
 80124fe:	4313      	orrs	r3, r2
 8012500:	b29a      	uxth	r2, r3
 8012502:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012504:	801a      	strh	r2, [r3, #0]
 8012506:	e03a      	b.n	801257e <USB_EPStartXfer+0x618>
 8012508:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801250c:	095b      	lsrs	r3, r3, #5
 801250e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8012512:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012516:	f003 031f 	and.w	r3, r3, #31
 801251a:	2b00      	cmp	r3, #0
 801251c:	d104      	bne.n	8012528 <USB_EPStartXfer+0x5c2>
 801251e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8012522:	3b01      	subs	r3, #1
 8012524:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8012528:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801252a:	881b      	ldrh	r3, [r3, #0]
 801252c:	b29a      	uxth	r2, r3
 801252e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8012532:	b29b      	uxth	r3, r3
 8012534:	029b      	lsls	r3, r3, #10
 8012536:	b29b      	uxth	r3, r3
 8012538:	4313      	orrs	r3, r2
 801253a:	b29b      	uxth	r3, r3
 801253c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012540:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012544:	b29a      	uxth	r2, r3
 8012546:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012548:	801a      	strh	r2, [r3, #0]
 801254a:	e018      	b.n	801257e <USB_EPStartXfer+0x618>
 801254c:	683b      	ldr	r3, [r7, #0]
 801254e:	785b      	ldrb	r3, [r3, #1]
 8012550:	2b01      	cmp	r3, #1
 8012552:	d114      	bne.n	801257e <USB_EPStartXfer+0x618>
 8012554:	687b      	ldr	r3, [r7, #4]
 8012556:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 801255a:	b29b      	uxth	r3, r3
 801255c:	461a      	mov	r2, r3
 801255e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012560:	4413      	add	r3, r2
 8012562:	643b      	str	r3, [r7, #64]	@ 0x40
 8012564:	683b      	ldr	r3, [r7, #0]
 8012566:	781b      	ldrb	r3, [r3, #0]
 8012568:	00da      	lsls	r2, r3, #3
 801256a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801256c:	4413      	add	r3, r2
 801256e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8012572:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8012574:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012578:	b29a      	uxth	r2, r3
 801257a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801257c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 801257e:	683b      	ldr	r3, [r7, #0]
 8012580:	895b      	ldrh	r3, [r3, #10]
 8012582:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8012586:	683b      	ldr	r3, [r7, #0]
 8012588:	6959      	ldr	r1, [r3, #20]
 801258a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801258e:	b29b      	uxth	r3, r3
 8012590:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8012594:	6878      	ldr	r0, [r7, #4]
 8012596:	f000 fbca 	bl	8012d2e <USB_WritePMA>
 801259a:	e193      	b.n	80128c4 <USB_EPStartXfer+0x95e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 801259c:	683b      	ldr	r3, [r7, #0]
 801259e:	6a1b      	ldr	r3, [r3, #32]
 80125a0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80125a4:	687a      	ldr	r2, [r7, #4]
 80125a6:	683b      	ldr	r3, [r7, #0]
 80125a8:	781b      	ldrb	r3, [r3, #0]
 80125aa:	009b      	lsls	r3, r3, #2
 80125ac:	4413      	add	r3, r2
 80125ae:	881b      	ldrh	r3, [r3, #0]
 80125b0:	b29b      	uxth	r3, r3
 80125b2:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80125b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80125ba:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80125be:	687a      	ldr	r2, [r7, #4]
 80125c0:	683b      	ldr	r3, [r7, #0]
 80125c2:	781b      	ldrb	r3, [r3, #0]
 80125c4:	009b      	lsls	r3, r3, #2
 80125c6:	441a      	add	r2, r3
 80125c8:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80125cc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80125d0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80125d4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80125d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80125dc:	b29b      	uxth	r3, r3
 80125de:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80125e0:	687b      	ldr	r3, [r7, #4]
 80125e2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80125e4:	687b      	ldr	r3, [r7, #4]
 80125e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80125ea:	b29b      	uxth	r3, r3
 80125ec:	461a      	mov	r2, r3
 80125ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80125f0:	4413      	add	r3, r2
 80125f2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80125f4:	683b      	ldr	r3, [r7, #0]
 80125f6:	781b      	ldrb	r3, [r3, #0]
 80125f8:	00da      	lsls	r2, r3, #3
 80125fa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80125fc:	4413      	add	r3, r2
 80125fe:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8012602:	65bb      	str	r3, [r7, #88]	@ 0x58
 8012604:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012608:	b29a      	uxth	r2, r3
 801260a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801260c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 801260e:	683b      	ldr	r3, [r7, #0]
 8012610:	891b      	ldrh	r3, [r3, #8]
 8012612:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8012616:	683b      	ldr	r3, [r7, #0]
 8012618:	6959      	ldr	r1, [r3, #20]
 801261a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801261e:	b29b      	uxth	r3, r3
 8012620:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8012624:	6878      	ldr	r0, [r7, #4]
 8012626:	f000 fb82 	bl	8012d2e <USB_WritePMA>
 801262a:	e14b      	b.n	80128c4 <USB_EPStartXfer+0x95e>
        }
      }
      else /* Manage isochronous double buffer IN mode */
      {
        /* Each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 801262c:	683b      	ldr	r3, [r7, #0]
 801262e:	6a1a      	ldr	r2, [r3, #32]
 8012630:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012634:	1ad2      	subs	r2, r2, r3
 8012636:	683b      	ldr	r3, [r7, #0]
 8012638:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 801263a:	687a      	ldr	r2, [r7, #4]
 801263c:	683b      	ldr	r3, [r7, #0]
 801263e:	781b      	ldrb	r3, [r3, #0]
 8012640:	009b      	lsls	r3, r3, #2
 8012642:	4413      	add	r3, r2
 8012644:	881b      	ldrh	r3, [r3, #0]
 8012646:	b29b      	uxth	r3, r3
 8012648:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801264c:	2b00      	cmp	r3, #0
 801264e:	f000 809a 	beq.w	8012786 <USB_EPStartXfer+0x820>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8012652:	687b      	ldr	r3, [r7, #4]
 8012654:	673b      	str	r3, [r7, #112]	@ 0x70
 8012656:	683b      	ldr	r3, [r7, #0]
 8012658:	785b      	ldrb	r3, [r3, #1]
 801265a:	2b00      	cmp	r3, #0
 801265c:	d16b      	bne.n	8012736 <USB_EPStartXfer+0x7d0>
 801265e:	687b      	ldr	r3, [r7, #4]
 8012660:	66bb      	str	r3, [r7, #104]	@ 0x68
 8012662:	687b      	ldr	r3, [r7, #4]
 8012664:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8012668:	b29b      	uxth	r3, r3
 801266a:	461a      	mov	r2, r3
 801266c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801266e:	4413      	add	r3, r2
 8012670:	66bb      	str	r3, [r7, #104]	@ 0x68
 8012672:	683b      	ldr	r3, [r7, #0]
 8012674:	781b      	ldrb	r3, [r3, #0]
 8012676:	00da      	lsls	r2, r3, #3
 8012678:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801267a:	4413      	add	r3, r2
 801267c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8012680:	667b      	str	r3, [r7, #100]	@ 0x64
 8012682:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012684:	881b      	ldrh	r3, [r3, #0]
 8012686:	b29b      	uxth	r3, r3
 8012688:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801268c:	b29a      	uxth	r2, r3
 801268e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012690:	801a      	strh	r2, [r3, #0]
 8012692:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012696:	2b00      	cmp	r3, #0
 8012698:	d10a      	bne.n	80126b0 <USB_EPStartXfer+0x74a>
 801269a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801269c:	881b      	ldrh	r3, [r3, #0]
 801269e:	b29b      	uxth	r3, r3
 80126a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80126a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80126a8:	b29a      	uxth	r2, r3
 80126aa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80126ac:	801a      	strh	r2, [r3, #0]
 80126ae:	e05b      	b.n	8012768 <USB_EPStartXfer+0x802>
 80126b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80126b4:	2b3e      	cmp	r3, #62	@ 0x3e
 80126b6:	d81c      	bhi.n	80126f2 <USB_EPStartXfer+0x78c>
 80126b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80126bc:	085b      	lsrs	r3, r3, #1
 80126be:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80126c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80126c6:	f003 0301 	and.w	r3, r3, #1
 80126ca:	2b00      	cmp	r3, #0
 80126cc:	d004      	beq.n	80126d8 <USB_EPStartXfer+0x772>
 80126ce:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80126d2:	3301      	adds	r3, #1
 80126d4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80126d8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80126da:	881b      	ldrh	r3, [r3, #0]
 80126dc:	b29a      	uxth	r2, r3
 80126de:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80126e2:	b29b      	uxth	r3, r3
 80126e4:	029b      	lsls	r3, r3, #10
 80126e6:	b29b      	uxth	r3, r3
 80126e8:	4313      	orrs	r3, r2
 80126ea:	b29a      	uxth	r2, r3
 80126ec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80126ee:	801a      	strh	r2, [r3, #0]
 80126f0:	e03a      	b.n	8012768 <USB_EPStartXfer+0x802>
 80126f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80126f6:	095b      	lsrs	r3, r3, #5
 80126f8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80126fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012700:	f003 031f 	and.w	r3, r3, #31
 8012704:	2b00      	cmp	r3, #0
 8012706:	d104      	bne.n	8012712 <USB_EPStartXfer+0x7ac>
 8012708:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 801270c:	3b01      	subs	r3, #1
 801270e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8012712:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012714:	881b      	ldrh	r3, [r3, #0]
 8012716:	b29a      	uxth	r2, r3
 8012718:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 801271c:	b29b      	uxth	r3, r3
 801271e:	029b      	lsls	r3, r3, #10
 8012720:	b29b      	uxth	r3, r3
 8012722:	4313      	orrs	r3, r2
 8012724:	b29b      	uxth	r3, r3
 8012726:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801272a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801272e:	b29a      	uxth	r2, r3
 8012730:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012732:	801a      	strh	r2, [r3, #0]
 8012734:	e018      	b.n	8012768 <USB_EPStartXfer+0x802>
 8012736:	683b      	ldr	r3, [r7, #0]
 8012738:	785b      	ldrb	r3, [r3, #1]
 801273a:	2b01      	cmp	r3, #1
 801273c:	d114      	bne.n	8012768 <USB_EPStartXfer+0x802>
 801273e:	687b      	ldr	r3, [r7, #4]
 8012740:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8012744:	b29b      	uxth	r3, r3
 8012746:	461a      	mov	r2, r3
 8012748:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801274a:	4413      	add	r3, r2
 801274c:	673b      	str	r3, [r7, #112]	@ 0x70
 801274e:	683b      	ldr	r3, [r7, #0]
 8012750:	781b      	ldrb	r3, [r3, #0]
 8012752:	00da      	lsls	r2, r3, #3
 8012754:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8012756:	4413      	add	r3, r2
 8012758:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 801275c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801275e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012762:	b29a      	uxth	r2, r3
 8012764:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012766:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8012768:	683b      	ldr	r3, [r7, #0]
 801276a:	895b      	ldrh	r3, [r3, #10]
 801276c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8012770:	683b      	ldr	r3, [r7, #0]
 8012772:	6959      	ldr	r1, [r3, #20]
 8012774:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012778:	b29b      	uxth	r3, r3
 801277a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 801277e:	6878      	ldr	r0, [r7, #4]
 8012780:	f000 fad5 	bl	8012d2e <USB_WritePMA>
 8012784:	e09e      	b.n	80128c4 <USB_EPStartXfer+0x95e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8012786:	683b      	ldr	r3, [r7, #0]
 8012788:	785b      	ldrb	r3, [r3, #1]
 801278a:	2b00      	cmp	r3, #0
 801278c:	d16b      	bne.n	8012866 <USB_EPStartXfer+0x900>
 801278e:	687b      	ldr	r3, [r7, #4]
 8012790:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8012792:	687b      	ldr	r3, [r7, #4]
 8012794:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8012798:	b29b      	uxth	r3, r3
 801279a:	461a      	mov	r2, r3
 801279c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801279e:	4413      	add	r3, r2
 80127a0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80127a2:	683b      	ldr	r3, [r7, #0]
 80127a4:	781b      	ldrb	r3, [r3, #0]
 80127a6:	00da      	lsls	r2, r3, #3
 80127a8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80127aa:	4413      	add	r3, r2
 80127ac:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80127b0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80127b2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80127b4:	881b      	ldrh	r3, [r3, #0]
 80127b6:	b29b      	uxth	r3, r3
 80127b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80127bc:	b29a      	uxth	r2, r3
 80127be:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80127c0:	801a      	strh	r2, [r3, #0]
 80127c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80127c6:	2b00      	cmp	r3, #0
 80127c8:	d10a      	bne.n	80127e0 <USB_EPStartXfer+0x87a>
 80127ca:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80127cc:	881b      	ldrh	r3, [r3, #0]
 80127ce:	b29b      	uxth	r3, r3
 80127d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80127d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80127d8:	b29a      	uxth	r2, r3
 80127da:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80127dc:	801a      	strh	r2, [r3, #0]
 80127de:	e063      	b.n	80128a8 <USB_EPStartXfer+0x942>
 80127e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80127e4:	2b3e      	cmp	r3, #62	@ 0x3e
 80127e6:	d81c      	bhi.n	8012822 <USB_EPStartXfer+0x8bc>
 80127e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80127ec:	085b      	lsrs	r3, r3, #1
 80127ee:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80127f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80127f6:	f003 0301 	and.w	r3, r3, #1
 80127fa:	2b00      	cmp	r3, #0
 80127fc:	d004      	beq.n	8012808 <USB_EPStartXfer+0x8a2>
 80127fe:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8012802:	3301      	adds	r3, #1
 8012804:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8012808:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801280a:	881b      	ldrh	r3, [r3, #0]
 801280c:	b29a      	uxth	r2, r3
 801280e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8012812:	b29b      	uxth	r3, r3
 8012814:	029b      	lsls	r3, r3, #10
 8012816:	b29b      	uxth	r3, r3
 8012818:	4313      	orrs	r3, r2
 801281a:	b29a      	uxth	r2, r3
 801281c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801281e:	801a      	strh	r2, [r3, #0]
 8012820:	e042      	b.n	80128a8 <USB_EPStartXfer+0x942>
 8012822:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012826:	095b      	lsrs	r3, r3, #5
 8012828:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 801282c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012830:	f003 031f 	and.w	r3, r3, #31
 8012834:	2b00      	cmp	r3, #0
 8012836:	d104      	bne.n	8012842 <USB_EPStartXfer+0x8dc>
 8012838:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801283c:	3b01      	subs	r3, #1
 801283e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8012842:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8012844:	881b      	ldrh	r3, [r3, #0]
 8012846:	b29a      	uxth	r2, r3
 8012848:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801284c:	b29b      	uxth	r3, r3
 801284e:	029b      	lsls	r3, r3, #10
 8012850:	b29b      	uxth	r3, r3
 8012852:	4313      	orrs	r3, r2
 8012854:	b29b      	uxth	r3, r3
 8012856:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801285a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801285e:	b29a      	uxth	r2, r3
 8012860:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8012862:	801a      	strh	r2, [r3, #0]
 8012864:	e020      	b.n	80128a8 <USB_EPStartXfer+0x942>
 8012866:	683b      	ldr	r3, [r7, #0]
 8012868:	785b      	ldrb	r3, [r3, #1]
 801286a:	2b01      	cmp	r3, #1
 801286c:	d11c      	bne.n	80128a8 <USB_EPStartXfer+0x942>
 801286e:	687b      	ldr	r3, [r7, #4]
 8012870:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8012874:	687b      	ldr	r3, [r7, #4]
 8012876:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 801287a:	b29b      	uxth	r3, r3
 801287c:	461a      	mov	r2, r3
 801287e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8012882:	4413      	add	r3, r2
 8012884:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8012888:	683b      	ldr	r3, [r7, #0]
 801288a:	781b      	ldrb	r3, [r3, #0]
 801288c:	00da      	lsls	r2, r3, #3
 801288e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8012892:	4413      	add	r3, r2
 8012894:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8012898:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 801289c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80128a0:	b29a      	uxth	r2, r3
 80128a2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80128a6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80128a8:	683b      	ldr	r3, [r7, #0]
 80128aa:	891b      	ldrh	r3, [r3, #8]
 80128ac:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80128b0:	683b      	ldr	r3, [r7, #0]
 80128b2:	6959      	ldr	r1, [r3, #20]
 80128b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80128b8:	b29b      	uxth	r3, r3
 80128ba:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80128be:	6878      	ldr	r0, [r7, #4]
 80128c0:	f000 fa35 	bl	8012d2e <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80128c4:	687a      	ldr	r2, [r7, #4]
 80128c6:	683b      	ldr	r3, [r7, #0]
 80128c8:	781b      	ldrb	r3, [r3, #0]
 80128ca:	009b      	lsls	r3, r3, #2
 80128cc:	4413      	add	r3, r2
 80128ce:	881b      	ldrh	r3, [r3, #0]
 80128d0:	b29b      	uxth	r3, r3
 80128d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80128d6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80128da:	817b      	strh	r3, [r7, #10]
 80128dc:	897b      	ldrh	r3, [r7, #10]
 80128de:	f083 0310 	eor.w	r3, r3, #16
 80128e2:	817b      	strh	r3, [r7, #10]
 80128e4:	897b      	ldrh	r3, [r7, #10]
 80128e6:	f083 0320 	eor.w	r3, r3, #32
 80128ea:	817b      	strh	r3, [r7, #10]
 80128ec:	687a      	ldr	r2, [r7, #4]
 80128ee:	683b      	ldr	r3, [r7, #0]
 80128f0:	781b      	ldrb	r3, [r3, #0]
 80128f2:	009b      	lsls	r3, r3, #2
 80128f4:	441a      	add	r2, r3
 80128f6:	897b      	ldrh	r3, [r7, #10]
 80128f8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80128fc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8012900:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8012904:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012908:	b29b      	uxth	r3, r3
 801290a:	8013      	strh	r3, [r2, #0]
 801290c:	e0d5      	b.n	8012aba <USB_EPStartXfer+0xb54>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 801290e:	683b      	ldr	r3, [r7, #0]
 8012910:	7b1b      	ldrb	r3, [r3, #12]
 8012912:	2b00      	cmp	r3, #0
 8012914:	d156      	bne.n	80129c4 <USB_EPStartXfer+0xa5e>
    {
      if ((ep->xfer_len == 0U) && (ep->type == EP_TYPE_CTRL))
 8012916:	683b      	ldr	r3, [r7, #0]
 8012918:	699b      	ldr	r3, [r3, #24]
 801291a:	2b00      	cmp	r3, #0
 801291c:	d122      	bne.n	8012964 <USB_EPStartXfer+0x9fe>
 801291e:	683b      	ldr	r3, [r7, #0]
 8012920:	78db      	ldrb	r3, [r3, #3]
 8012922:	2b00      	cmp	r3, #0
 8012924:	d11e      	bne.n	8012964 <USB_EPStartXfer+0x9fe>
      {
        /* This is a status out stage set the OUT_STATUS */
        PCD_SET_OUT_STATUS(USBx, ep->num);
 8012926:	687a      	ldr	r2, [r7, #4]
 8012928:	683b      	ldr	r3, [r7, #0]
 801292a:	781b      	ldrb	r3, [r3, #0]
 801292c:	009b      	lsls	r3, r3, #2
 801292e:	4413      	add	r3, r2
 8012930:	881b      	ldrh	r3, [r3, #0]
 8012932:	b29b      	uxth	r3, r3
 8012934:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8012938:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801293c:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 8012940:	687a      	ldr	r2, [r7, #4]
 8012942:	683b      	ldr	r3, [r7, #0]
 8012944:	781b      	ldrb	r3, [r3, #0]
 8012946:	009b      	lsls	r3, r3, #2
 8012948:	441a      	add	r2, r3
 801294a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 801294e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8012952:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8012956:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 801295a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801295e:	b29b      	uxth	r3, r3
 8012960:	8013      	strh	r3, [r2, #0]
 8012962:	e01d      	b.n	80129a0 <USB_EPStartXfer+0xa3a>
      }
      else
      {
        PCD_CLEAR_OUT_STATUS(USBx, ep->num);
 8012964:	687a      	ldr	r2, [r7, #4]
 8012966:	683b      	ldr	r3, [r7, #0]
 8012968:	781b      	ldrb	r3, [r3, #0]
 801296a:	009b      	lsls	r3, r3, #2
 801296c:	4413      	add	r3, r2
 801296e:	881b      	ldrh	r3, [r3, #0]
 8012970:	b29b      	uxth	r3, r3
 8012972:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8012976:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801297a:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
 801297e:	687a      	ldr	r2, [r7, #4]
 8012980:	683b      	ldr	r3, [r7, #0]
 8012982:	781b      	ldrb	r3, [r3, #0]
 8012984:	009b      	lsls	r3, r3, #2
 8012986:	441a      	add	r2, r3
 8012988:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 801298c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8012990:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8012994:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8012998:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801299c:	b29b      	uxth	r3, r3
 801299e:	8013      	strh	r3, [r2, #0]
      }

      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80129a0:	683b      	ldr	r3, [r7, #0]
 80129a2:	699a      	ldr	r2, [r3, #24]
 80129a4:	683b      	ldr	r3, [r7, #0]
 80129a6:	691b      	ldr	r3, [r3, #16]
 80129a8:	429a      	cmp	r2, r3
 80129aa:	d907      	bls.n	80129bc <USB_EPStartXfer+0xa56>
      {
        ep->xfer_len -= ep->maxpacket;
 80129ac:	683b      	ldr	r3, [r7, #0]
 80129ae:	699a      	ldr	r2, [r3, #24]
 80129b0:	683b      	ldr	r3, [r7, #0]
 80129b2:	691b      	ldr	r3, [r3, #16]
 80129b4:	1ad2      	subs	r2, r2, r3
 80129b6:	683b      	ldr	r3, [r7, #0]
 80129b8:	619a      	str	r2, [r3, #24]
 80129ba:	e054      	b.n	8012a66 <USB_EPStartXfer+0xb00>
      }
      else
      {
        ep->xfer_len = 0U;
 80129bc:	683b      	ldr	r3, [r7, #0]
 80129be:	2200      	movs	r2, #0
 80129c0:	619a      	str	r2, [r3, #24]
 80129c2:	e050      	b.n	8012a66 <USB_EPStartXfer+0xb00>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80129c4:	683b      	ldr	r3, [r7, #0]
 80129c6:	78db      	ldrb	r3, [r3, #3]
 80129c8:	2b02      	cmp	r3, #2
 80129ca:	d142      	bne.n	8012a52 <USB_EPStartXfer+0xaec>
      {
        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80129cc:	683b      	ldr	r3, [r7, #0]
 80129ce:	69db      	ldr	r3, [r3, #28]
 80129d0:	2b00      	cmp	r3, #0
 80129d2:	d048      	beq.n	8012a66 <USB_EPStartXfer+0xb00>
        {
          /* Update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80129d4:	687a      	ldr	r2, [r7, #4]
 80129d6:	683b      	ldr	r3, [r7, #0]
 80129d8:	781b      	ldrb	r3, [r3, #0]
 80129da:	009b      	lsls	r3, r3, #2
 80129dc:	4413      	add	r3, r2
 80129de:	881b      	ldrh	r3, [r3, #0]
 80129e0:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92

          /* Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80129e4:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 80129e8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80129ec:	2b00      	cmp	r3, #0
 80129ee:	d005      	beq.n	80129fc <USB_EPStartXfer+0xa96>
 80129f0:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 80129f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80129f8:	2b00      	cmp	r3, #0
 80129fa:	d10b      	bne.n	8012a14 <USB_EPStartXfer+0xaae>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80129fc:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8012a00:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8012a04:	2b00      	cmp	r3, #0
 8012a06:	d12e      	bne.n	8012a66 <USB_EPStartXfer+0xb00>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8012a08:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8012a0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012a10:	2b00      	cmp	r3, #0
 8012a12:	d128      	bne.n	8012a66 <USB_EPStartXfer+0xb00>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8012a14:	687a      	ldr	r2, [r7, #4]
 8012a16:	683b      	ldr	r3, [r7, #0]
 8012a18:	781b      	ldrb	r3, [r3, #0]
 8012a1a:	009b      	lsls	r3, r3, #2
 8012a1c:	4413      	add	r3, r2
 8012a1e:	881b      	ldrh	r3, [r3, #0]
 8012a20:	b29b      	uxth	r3, r3
 8012a22:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8012a26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8012a2a:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 8012a2e:	687a      	ldr	r2, [r7, #4]
 8012a30:	683b      	ldr	r3, [r7, #0]
 8012a32:	781b      	ldrb	r3, [r3, #0]
 8012a34:	009b      	lsls	r3, r3, #2
 8012a36:	441a      	add	r2, r3
 8012a38:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 8012a3c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8012a40:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8012a44:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8012a48:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8012a4c:	b29b      	uxth	r3, r3
 8012a4e:	8013      	strh	r3, [r2, #0]
 8012a50:	e009      	b.n	8012a66 <USB_EPStartXfer+0xb00>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8012a52:	683b      	ldr	r3, [r7, #0]
 8012a54:	78db      	ldrb	r3, [r3, #3]
 8012a56:	2b01      	cmp	r3, #1
 8012a58:	d103      	bne.n	8012a62 <USB_EPStartXfer+0xafc>
      {
        /* Only single packet transfer supported in FS */
        ep->xfer_len = 0U;
 8012a5a:	683b      	ldr	r3, [r7, #0]
 8012a5c:	2200      	movs	r2, #0
 8012a5e:	619a      	str	r2, [r3, #24]
 8012a60:	e001      	b.n	8012a66 <USB_EPStartXfer+0xb00>
      }
      else
      {
        return HAL_ERROR;
 8012a62:	2301      	movs	r3, #1
 8012a64:	e02a      	b.n	8012abc <USB_EPStartXfer+0xb56>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8012a66:	687a      	ldr	r2, [r7, #4]
 8012a68:	683b      	ldr	r3, [r7, #0]
 8012a6a:	781b      	ldrb	r3, [r3, #0]
 8012a6c:	009b      	lsls	r3, r3, #2
 8012a6e:	4413      	add	r3, r2
 8012a70:	881b      	ldrh	r3, [r3, #0]
 8012a72:	b29b      	uxth	r3, r3
 8012a74:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8012a78:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8012a7c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8012a80:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8012a84:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8012a88:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8012a8c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8012a90:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8012a94:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8012a98:	687a      	ldr	r2, [r7, #4]
 8012a9a:	683b      	ldr	r3, [r7, #0]
 8012a9c:	781b      	ldrb	r3, [r3, #0]
 8012a9e:	009b      	lsls	r3, r3, #2
 8012aa0:	441a      	add	r2, r3
 8012aa2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8012aa6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8012aaa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8012aae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8012ab2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012ab6:	b29b      	uxth	r3, r3
 8012ab8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8012aba:	2300      	movs	r3, #0
}
 8012abc:	4618      	mov	r0, r3
 8012abe:	37b0      	adds	r7, #176	@ 0xb0
 8012ac0:	46bd      	mov	sp, r7
 8012ac2:	bd80      	pop	{r7, pc}

08012ac4 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8012ac4:	b480      	push	{r7}
 8012ac6:	b085      	sub	sp, #20
 8012ac8:	af00      	add	r7, sp, #0
 8012aca:	6078      	str	r0, [r7, #4]
 8012acc:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8012ace:	683b      	ldr	r3, [r7, #0]
 8012ad0:	785b      	ldrb	r3, [r3, #1]
 8012ad2:	2b00      	cmp	r3, #0
 8012ad4:	d020      	beq.n	8012b18 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8012ad6:	687a      	ldr	r2, [r7, #4]
 8012ad8:	683b      	ldr	r3, [r7, #0]
 8012ada:	781b      	ldrb	r3, [r3, #0]
 8012adc:	009b      	lsls	r3, r3, #2
 8012ade:	4413      	add	r3, r2
 8012ae0:	881b      	ldrh	r3, [r3, #0]
 8012ae2:	b29b      	uxth	r3, r3
 8012ae4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8012ae8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8012aec:	81bb      	strh	r3, [r7, #12]
 8012aee:	89bb      	ldrh	r3, [r7, #12]
 8012af0:	f083 0310 	eor.w	r3, r3, #16
 8012af4:	81bb      	strh	r3, [r7, #12]
 8012af6:	687a      	ldr	r2, [r7, #4]
 8012af8:	683b      	ldr	r3, [r7, #0]
 8012afa:	781b      	ldrb	r3, [r3, #0]
 8012afc:	009b      	lsls	r3, r3, #2
 8012afe:	441a      	add	r2, r3
 8012b00:	89bb      	ldrh	r3, [r7, #12]
 8012b02:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8012b06:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8012b0a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8012b0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012b12:	b29b      	uxth	r3, r3
 8012b14:	8013      	strh	r3, [r2, #0]
 8012b16:	e01f      	b.n	8012b58 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8012b18:	687a      	ldr	r2, [r7, #4]
 8012b1a:	683b      	ldr	r3, [r7, #0]
 8012b1c:	781b      	ldrb	r3, [r3, #0]
 8012b1e:	009b      	lsls	r3, r3, #2
 8012b20:	4413      	add	r3, r2
 8012b22:	881b      	ldrh	r3, [r3, #0]
 8012b24:	b29b      	uxth	r3, r3
 8012b26:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8012b2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8012b2e:	81fb      	strh	r3, [r7, #14]
 8012b30:	89fb      	ldrh	r3, [r7, #14]
 8012b32:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8012b36:	81fb      	strh	r3, [r7, #14]
 8012b38:	687a      	ldr	r2, [r7, #4]
 8012b3a:	683b      	ldr	r3, [r7, #0]
 8012b3c:	781b      	ldrb	r3, [r3, #0]
 8012b3e:	009b      	lsls	r3, r3, #2
 8012b40:	441a      	add	r2, r3
 8012b42:	89fb      	ldrh	r3, [r7, #14]
 8012b44:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8012b48:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8012b4c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8012b50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012b54:	b29b      	uxth	r3, r3
 8012b56:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8012b58:	2300      	movs	r3, #0
}
 8012b5a:	4618      	mov	r0, r3
 8012b5c:	3714      	adds	r7, #20
 8012b5e:	46bd      	mov	sp, r7
 8012b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b64:	4770      	bx	lr

08012b66 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8012b66:	b480      	push	{r7}
 8012b68:	b087      	sub	sp, #28
 8012b6a:	af00      	add	r7, sp, #0
 8012b6c:	6078      	str	r0, [r7, #4]
 8012b6e:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8012b70:	683b      	ldr	r3, [r7, #0]
 8012b72:	785b      	ldrb	r3, [r3, #1]
 8012b74:	2b00      	cmp	r3, #0
 8012b76:	d04c      	beq.n	8012c12 <USB_EPClearStall+0xac>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8012b78:	687a      	ldr	r2, [r7, #4]
 8012b7a:	683b      	ldr	r3, [r7, #0]
 8012b7c:	781b      	ldrb	r3, [r3, #0]
 8012b7e:	009b      	lsls	r3, r3, #2
 8012b80:	4413      	add	r3, r2
 8012b82:	881b      	ldrh	r3, [r3, #0]
 8012b84:	823b      	strh	r3, [r7, #16]
 8012b86:	8a3b      	ldrh	r3, [r7, #16]
 8012b88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012b8c:	2b00      	cmp	r3, #0
 8012b8e:	d01b      	beq.n	8012bc8 <USB_EPClearStall+0x62>
 8012b90:	687a      	ldr	r2, [r7, #4]
 8012b92:	683b      	ldr	r3, [r7, #0]
 8012b94:	781b      	ldrb	r3, [r3, #0]
 8012b96:	009b      	lsls	r3, r3, #2
 8012b98:	4413      	add	r3, r2
 8012b9a:	881b      	ldrh	r3, [r3, #0]
 8012b9c:	b29b      	uxth	r3, r3
 8012b9e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8012ba2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8012ba6:	81fb      	strh	r3, [r7, #14]
 8012ba8:	687a      	ldr	r2, [r7, #4]
 8012baa:	683b      	ldr	r3, [r7, #0]
 8012bac:	781b      	ldrb	r3, [r3, #0]
 8012bae:	009b      	lsls	r3, r3, #2
 8012bb0:	441a      	add	r2, r3
 8012bb2:	89fb      	ldrh	r3, [r7, #14]
 8012bb4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8012bb8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8012bbc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8012bc0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8012bc4:	b29b      	uxth	r3, r3
 8012bc6:	8013      	strh	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8012bc8:	683b      	ldr	r3, [r7, #0]
 8012bca:	78db      	ldrb	r3, [r3, #3]
 8012bcc:	2b01      	cmp	r3, #1
 8012bce:	d06c      	beq.n	8012caa <USB_EPClearStall+0x144>
    {
      /* Configure NAK status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8012bd0:	687a      	ldr	r2, [r7, #4]
 8012bd2:	683b      	ldr	r3, [r7, #0]
 8012bd4:	781b      	ldrb	r3, [r3, #0]
 8012bd6:	009b      	lsls	r3, r3, #2
 8012bd8:	4413      	add	r3, r2
 8012bda:	881b      	ldrh	r3, [r3, #0]
 8012bdc:	b29b      	uxth	r3, r3
 8012bde:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8012be2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8012be6:	81bb      	strh	r3, [r7, #12]
 8012be8:	89bb      	ldrh	r3, [r7, #12]
 8012bea:	f083 0320 	eor.w	r3, r3, #32
 8012bee:	81bb      	strh	r3, [r7, #12]
 8012bf0:	687a      	ldr	r2, [r7, #4]
 8012bf2:	683b      	ldr	r3, [r7, #0]
 8012bf4:	781b      	ldrb	r3, [r3, #0]
 8012bf6:	009b      	lsls	r3, r3, #2
 8012bf8:	441a      	add	r2, r3
 8012bfa:	89bb      	ldrh	r3, [r7, #12]
 8012bfc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8012c00:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8012c04:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8012c08:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012c0c:	b29b      	uxth	r3, r3
 8012c0e:	8013      	strh	r3, [r2, #0]
 8012c10:	e04b      	b.n	8012caa <USB_EPClearStall+0x144>
    }
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8012c12:	687a      	ldr	r2, [r7, #4]
 8012c14:	683b      	ldr	r3, [r7, #0]
 8012c16:	781b      	ldrb	r3, [r3, #0]
 8012c18:	009b      	lsls	r3, r3, #2
 8012c1a:	4413      	add	r3, r2
 8012c1c:	881b      	ldrh	r3, [r3, #0]
 8012c1e:	82fb      	strh	r3, [r7, #22]
 8012c20:	8afb      	ldrh	r3, [r7, #22]
 8012c22:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8012c26:	2b00      	cmp	r3, #0
 8012c28:	d01b      	beq.n	8012c62 <USB_EPClearStall+0xfc>
 8012c2a:	687a      	ldr	r2, [r7, #4]
 8012c2c:	683b      	ldr	r3, [r7, #0]
 8012c2e:	781b      	ldrb	r3, [r3, #0]
 8012c30:	009b      	lsls	r3, r3, #2
 8012c32:	4413      	add	r3, r2
 8012c34:	881b      	ldrh	r3, [r3, #0]
 8012c36:	b29b      	uxth	r3, r3
 8012c38:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8012c3c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8012c40:	82bb      	strh	r3, [r7, #20]
 8012c42:	687a      	ldr	r2, [r7, #4]
 8012c44:	683b      	ldr	r3, [r7, #0]
 8012c46:	781b      	ldrb	r3, [r3, #0]
 8012c48:	009b      	lsls	r3, r3, #2
 8012c4a:	441a      	add	r2, r3
 8012c4c:	8abb      	ldrh	r3, [r7, #20]
 8012c4e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8012c52:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8012c56:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8012c5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012c5e:	b29b      	uxth	r3, r3
 8012c60:	8013      	strh	r3, [r2, #0]

    /* Configure VALID status for the Endpoint */
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8012c62:	687a      	ldr	r2, [r7, #4]
 8012c64:	683b      	ldr	r3, [r7, #0]
 8012c66:	781b      	ldrb	r3, [r3, #0]
 8012c68:	009b      	lsls	r3, r3, #2
 8012c6a:	4413      	add	r3, r2
 8012c6c:	881b      	ldrh	r3, [r3, #0]
 8012c6e:	b29b      	uxth	r3, r3
 8012c70:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8012c74:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8012c78:	827b      	strh	r3, [r7, #18]
 8012c7a:	8a7b      	ldrh	r3, [r7, #18]
 8012c7c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8012c80:	827b      	strh	r3, [r7, #18]
 8012c82:	8a7b      	ldrh	r3, [r7, #18]
 8012c84:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8012c88:	827b      	strh	r3, [r7, #18]
 8012c8a:	687a      	ldr	r2, [r7, #4]
 8012c8c:	683b      	ldr	r3, [r7, #0]
 8012c8e:	781b      	ldrb	r3, [r3, #0]
 8012c90:	009b      	lsls	r3, r3, #2
 8012c92:	441a      	add	r2, r3
 8012c94:	8a7b      	ldrh	r3, [r7, #18]
 8012c96:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8012c9a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8012c9e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8012ca2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012ca6:	b29b      	uxth	r3, r3
 8012ca8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8012caa:	2300      	movs	r3, #0
}
 8012cac:	4618      	mov	r0, r3
 8012cae:	371c      	adds	r7, #28
 8012cb0:	46bd      	mov	sp, r7
 8012cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cb6:	4770      	bx	lr

08012cb8 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8012cb8:	b480      	push	{r7}
 8012cba:	b083      	sub	sp, #12
 8012cbc:	af00      	add	r7, sp, #0
 8012cbe:	6078      	str	r0, [r7, #4]
 8012cc0:	460b      	mov	r3, r1
 8012cc2:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8012cc4:	78fb      	ldrb	r3, [r7, #3]
 8012cc6:	2b00      	cmp	r3, #0
 8012cc8:	d103      	bne.n	8012cd2 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8012cca:	687b      	ldr	r3, [r7, #4]
 8012ccc:	2280      	movs	r2, #128	@ 0x80
 8012cce:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8012cd2:	2300      	movs	r3, #0
}
 8012cd4:	4618      	mov	r0, r3
 8012cd6:	370c      	adds	r7, #12
 8012cd8:	46bd      	mov	sp, r7
 8012cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cde:	4770      	bx	lr

08012ce0 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8012ce0:	b480      	push	{r7}
 8012ce2:	b083      	sub	sp, #12
 8012ce4:	af00      	add	r7, sp, #0
 8012ce6:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8012ce8:	687b      	ldr	r3, [r7, #4]
 8012cea:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8012cee:	b29b      	uxth	r3, r3
 8012cf0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012cf4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012cf8:	b29a      	uxth	r2, r3
 8012cfa:	687b      	ldr	r3, [r7, #4]
 8012cfc:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 8012d00:	2300      	movs	r3, #0
}
 8012d02:	4618      	mov	r0, r3
 8012d04:	370c      	adds	r7, #12
 8012d06:	46bd      	mov	sp, r7
 8012d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d0c:	4770      	bx	lr

08012d0e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8012d0e:	b480      	push	{r7}
 8012d10:	b085      	sub	sp, #20
 8012d12:	af00      	add	r7, sp, #0
 8012d14:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8012d16:	687b      	ldr	r3, [r7, #4]
 8012d18:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8012d1c:	b29b      	uxth	r3, r3
 8012d1e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8012d20:	68fb      	ldr	r3, [r7, #12]
}
 8012d22:	4618      	mov	r0, r3
 8012d24:	3714      	adds	r7, #20
 8012d26:	46bd      	mov	sp, r7
 8012d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d2c:	4770      	bx	lr

08012d2e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8012d2e:	b480      	push	{r7}
 8012d30:	b08b      	sub	sp, #44	@ 0x2c
 8012d32:	af00      	add	r7, sp, #0
 8012d34:	60f8      	str	r0, [r7, #12]
 8012d36:	60b9      	str	r1, [r7, #8]
 8012d38:	4611      	mov	r1, r2
 8012d3a:	461a      	mov	r2, r3
 8012d3c:	460b      	mov	r3, r1
 8012d3e:	80fb      	strh	r3, [r7, #6]
 8012d40:	4613      	mov	r3, r2
 8012d42:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8012d44:	88bb      	ldrh	r3, [r7, #4]
 8012d46:	3301      	adds	r3, #1
 8012d48:	085b      	lsrs	r3, r3, #1
 8012d4a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8012d4c:	68fb      	ldr	r3, [r7, #12]
 8012d4e:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8012d50:	68bb      	ldr	r3, [r7, #8]
 8012d52:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8012d54:	88fa      	ldrh	r2, [r7, #6]
 8012d56:	697b      	ldr	r3, [r7, #20]
 8012d58:	4413      	add	r3, r2
 8012d5a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8012d5e:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8012d60:	69bb      	ldr	r3, [r7, #24]
 8012d62:	627b      	str	r3, [r7, #36]	@ 0x24
 8012d64:	e01b      	b.n	8012d9e <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 8012d66:	69fb      	ldr	r3, [r7, #28]
 8012d68:	781b      	ldrb	r3, [r3, #0]
 8012d6a:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8012d6c:	69fb      	ldr	r3, [r7, #28]
 8012d6e:	3301      	adds	r3, #1
 8012d70:	781b      	ldrb	r3, [r3, #0]
 8012d72:	021b      	lsls	r3, r3, #8
 8012d74:	b21a      	sxth	r2, r3
 8012d76:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8012d7a:	4313      	orrs	r3, r2
 8012d7c:	b21b      	sxth	r3, r3
 8012d7e:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8012d80:	6a3b      	ldr	r3, [r7, #32]
 8012d82:	8a7a      	ldrh	r2, [r7, #18]
 8012d84:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8012d86:	6a3b      	ldr	r3, [r7, #32]
 8012d88:	3302      	adds	r3, #2
 8012d8a:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8012d8c:	69fb      	ldr	r3, [r7, #28]
 8012d8e:	3301      	adds	r3, #1
 8012d90:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8012d92:	69fb      	ldr	r3, [r7, #28]
 8012d94:	3301      	adds	r3, #1
 8012d96:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8012d98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012d9a:	3b01      	subs	r3, #1
 8012d9c:	627b      	str	r3, [r7, #36]	@ 0x24
 8012d9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012da0:	2b00      	cmp	r3, #0
 8012da2:	d1e0      	bne.n	8012d66 <USB_WritePMA+0x38>
  }
}
 8012da4:	bf00      	nop
 8012da6:	bf00      	nop
 8012da8:	372c      	adds	r7, #44	@ 0x2c
 8012daa:	46bd      	mov	sp, r7
 8012dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012db0:	4770      	bx	lr

08012db2 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8012db2:	b480      	push	{r7}
 8012db4:	b08b      	sub	sp, #44	@ 0x2c
 8012db6:	af00      	add	r7, sp, #0
 8012db8:	60f8      	str	r0, [r7, #12]
 8012dba:	60b9      	str	r1, [r7, #8]
 8012dbc:	4611      	mov	r1, r2
 8012dbe:	461a      	mov	r2, r3
 8012dc0:	460b      	mov	r3, r1
 8012dc2:	80fb      	strh	r3, [r7, #6]
 8012dc4:	4613      	mov	r3, r2
 8012dc6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8012dc8:	88bb      	ldrh	r3, [r7, #4]
 8012dca:	085b      	lsrs	r3, r3, #1
 8012dcc:	b29b      	uxth	r3, r3
 8012dce:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8012dd0:	68fb      	ldr	r3, [r7, #12]
 8012dd2:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8012dd4:	68bb      	ldr	r3, [r7, #8]
 8012dd6:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8012dd8:	88fa      	ldrh	r2, [r7, #6]
 8012dda:	697b      	ldr	r3, [r7, #20]
 8012ddc:	4413      	add	r3, r2
 8012dde:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8012de2:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8012de4:	69bb      	ldr	r3, [r7, #24]
 8012de6:	627b      	str	r3, [r7, #36]	@ 0x24
 8012de8:	e018      	b.n	8012e1c <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8012dea:	6a3b      	ldr	r3, [r7, #32]
 8012dec:	881b      	ldrh	r3, [r3, #0]
 8012dee:	b29b      	uxth	r3, r3
 8012df0:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8012df2:	6a3b      	ldr	r3, [r7, #32]
 8012df4:	3302      	adds	r3, #2
 8012df6:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8012df8:	693b      	ldr	r3, [r7, #16]
 8012dfa:	b2da      	uxtb	r2, r3
 8012dfc:	69fb      	ldr	r3, [r7, #28]
 8012dfe:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8012e00:	69fb      	ldr	r3, [r7, #28]
 8012e02:	3301      	adds	r3, #1
 8012e04:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8012e06:	693b      	ldr	r3, [r7, #16]
 8012e08:	0a1b      	lsrs	r3, r3, #8
 8012e0a:	b2da      	uxtb	r2, r3
 8012e0c:	69fb      	ldr	r3, [r7, #28]
 8012e0e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8012e10:	69fb      	ldr	r3, [r7, #28]
 8012e12:	3301      	adds	r3, #1
 8012e14:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8012e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012e18:	3b01      	subs	r3, #1
 8012e1a:	627b      	str	r3, [r7, #36]	@ 0x24
 8012e1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012e1e:	2b00      	cmp	r3, #0
 8012e20:	d1e3      	bne.n	8012dea <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8012e22:	88bb      	ldrh	r3, [r7, #4]
 8012e24:	f003 0301 	and.w	r3, r3, #1
 8012e28:	b29b      	uxth	r3, r3
 8012e2a:	2b00      	cmp	r3, #0
 8012e2c:	d007      	beq.n	8012e3e <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 8012e2e:	6a3b      	ldr	r3, [r7, #32]
 8012e30:	881b      	ldrh	r3, [r3, #0]
 8012e32:	b29b      	uxth	r3, r3
 8012e34:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8012e36:	693b      	ldr	r3, [r7, #16]
 8012e38:	b2da      	uxtb	r2, r3
 8012e3a:	69fb      	ldr	r3, [r7, #28]
 8012e3c:	701a      	strb	r2, [r3, #0]
  }
}
 8012e3e:	bf00      	nop
 8012e40:	372c      	adds	r7, #44	@ 0x2c
 8012e42:	46bd      	mov	sp, r7
 8012e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e48:	4770      	bx	lr
	...

08012e4c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8012e4c:	b580      	push	{r7, lr}
 8012e4e:	b084      	sub	sp, #16
 8012e50:	af00      	add	r7, sp, #0
 8012e52:	6078      	str	r0, [r7, #4]
 8012e54:	460b      	mov	r3, r1
 8012e56:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8012e58:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8012e5c:	f006 f93a 	bl	80190d4 <USBD_static_malloc>
 8012e60:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8012e62:	68fb      	ldr	r3, [r7, #12]
 8012e64:	2b00      	cmp	r3, #0
 8012e66:	d109      	bne.n	8012e7c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8012e68:	687b      	ldr	r3, [r7, #4]
 8012e6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012e6e:	687b      	ldr	r3, [r7, #4]
 8012e70:	32b0      	adds	r2, #176	@ 0xb0
 8012e72:	2100      	movs	r1, #0
 8012e74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8012e78:	2302      	movs	r3, #2
 8012e7a:	e0d4      	b.n	8013026 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8012e7c:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8012e80:	2100      	movs	r1, #0
 8012e82:	68f8      	ldr	r0, [r7, #12]
 8012e84:	f008 fb45 	bl	801b512 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8012e88:	687b      	ldr	r3, [r7, #4]
 8012e8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012e8e:	687b      	ldr	r3, [r7, #4]
 8012e90:	32b0      	adds	r2, #176	@ 0xb0
 8012e92:	68f9      	ldr	r1, [r7, #12]
 8012e94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8012e98:	687b      	ldr	r3, [r7, #4]
 8012e9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012e9e:	687b      	ldr	r3, [r7, #4]
 8012ea0:	32b0      	adds	r2, #176	@ 0xb0
 8012ea2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8012ea6:	687b      	ldr	r3, [r7, #4]
 8012ea8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012eac:	687b      	ldr	r3, [r7, #4]
 8012eae:	7c1b      	ldrb	r3, [r3, #16]
 8012eb0:	2b00      	cmp	r3, #0
 8012eb2:	d138      	bne.n	8012f26 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8012eb4:	4b5e      	ldr	r3, [pc, #376]	@ (8013030 <USBD_CDC_Init+0x1e4>)
 8012eb6:	7819      	ldrb	r1, [r3, #0]
 8012eb8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8012ebc:	2202      	movs	r2, #2
 8012ebe:	6878      	ldr	r0, [r7, #4]
 8012ec0:	f005 ffaf 	bl	8018e22 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8012ec4:	4b5a      	ldr	r3, [pc, #360]	@ (8013030 <USBD_CDC_Init+0x1e4>)
 8012ec6:	781b      	ldrb	r3, [r3, #0]
 8012ec8:	f003 020f 	and.w	r2, r3, #15
 8012ecc:	6879      	ldr	r1, [r7, #4]
 8012ece:	4613      	mov	r3, r2
 8012ed0:	009b      	lsls	r3, r3, #2
 8012ed2:	4413      	add	r3, r2
 8012ed4:	009b      	lsls	r3, r3, #2
 8012ed6:	440b      	add	r3, r1
 8012ed8:	3324      	adds	r3, #36	@ 0x24
 8012eda:	2201      	movs	r2, #1
 8012edc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8012ede:	4b55      	ldr	r3, [pc, #340]	@ (8013034 <USBD_CDC_Init+0x1e8>)
 8012ee0:	7819      	ldrb	r1, [r3, #0]
 8012ee2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8012ee6:	2202      	movs	r2, #2
 8012ee8:	6878      	ldr	r0, [r7, #4]
 8012eea:	f005 ff9a 	bl	8018e22 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8012eee:	4b51      	ldr	r3, [pc, #324]	@ (8013034 <USBD_CDC_Init+0x1e8>)
 8012ef0:	781b      	ldrb	r3, [r3, #0]
 8012ef2:	f003 020f 	and.w	r2, r3, #15
 8012ef6:	6879      	ldr	r1, [r7, #4]
 8012ef8:	4613      	mov	r3, r2
 8012efa:	009b      	lsls	r3, r3, #2
 8012efc:	4413      	add	r3, r2
 8012efe:	009b      	lsls	r3, r3, #2
 8012f00:	440b      	add	r3, r1
 8012f02:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8012f06:	2201      	movs	r2, #1
 8012f08:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8012f0a:	4b4b      	ldr	r3, [pc, #300]	@ (8013038 <USBD_CDC_Init+0x1ec>)
 8012f0c:	781b      	ldrb	r3, [r3, #0]
 8012f0e:	f003 020f 	and.w	r2, r3, #15
 8012f12:	6879      	ldr	r1, [r7, #4]
 8012f14:	4613      	mov	r3, r2
 8012f16:	009b      	lsls	r3, r3, #2
 8012f18:	4413      	add	r3, r2
 8012f1a:	009b      	lsls	r3, r3, #2
 8012f1c:	440b      	add	r3, r1
 8012f1e:	3326      	adds	r3, #38	@ 0x26
 8012f20:	2210      	movs	r2, #16
 8012f22:	801a      	strh	r2, [r3, #0]
 8012f24:	e035      	b.n	8012f92 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8012f26:	4b42      	ldr	r3, [pc, #264]	@ (8013030 <USBD_CDC_Init+0x1e4>)
 8012f28:	7819      	ldrb	r1, [r3, #0]
 8012f2a:	2340      	movs	r3, #64	@ 0x40
 8012f2c:	2202      	movs	r2, #2
 8012f2e:	6878      	ldr	r0, [r7, #4]
 8012f30:	f005 ff77 	bl	8018e22 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8012f34:	4b3e      	ldr	r3, [pc, #248]	@ (8013030 <USBD_CDC_Init+0x1e4>)
 8012f36:	781b      	ldrb	r3, [r3, #0]
 8012f38:	f003 020f 	and.w	r2, r3, #15
 8012f3c:	6879      	ldr	r1, [r7, #4]
 8012f3e:	4613      	mov	r3, r2
 8012f40:	009b      	lsls	r3, r3, #2
 8012f42:	4413      	add	r3, r2
 8012f44:	009b      	lsls	r3, r3, #2
 8012f46:	440b      	add	r3, r1
 8012f48:	3324      	adds	r3, #36	@ 0x24
 8012f4a:	2201      	movs	r2, #1
 8012f4c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8012f4e:	4b39      	ldr	r3, [pc, #228]	@ (8013034 <USBD_CDC_Init+0x1e8>)
 8012f50:	7819      	ldrb	r1, [r3, #0]
 8012f52:	2340      	movs	r3, #64	@ 0x40
 8012f54:	2202      	movs	r2, #2
 8012f56:	6878      	ldr	r0, [r7, #4]
 8012f58:	f005 ff63 	bl	8018e22 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8012f5c:	4b35      	ldr	r3, [pc, #212]	@ (8013034 <USBD_CDC_Init+0x1e8>)
 8012f5e:	781b      	ldrb	r3, [r3, #0]
 8012f60:	f003 020f 	and.w	r2, r3, #15
 8012f64:	6879      	ldr	r1, [r7, #4]
 8012f66:	4613      	mov	r3, r2
 8012f68:	009b      	lsls	r3, r3, #2
 8012f6a:	4413      	add	r3, r2
 8012f6c:	009b      	lsls	r3, r3, #2
 8012f6e:	440b      	add	r3, r1
 8012f70:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8012f74:	2201      	movs	r2, #1
 8012f76:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8012f78:	4b2f      	ldr	r3, [pc, #188]	@ (8013038 <USBD_CDC_Init+0x1ec>)
 8012f7a:	781b      	ldrb	r3, [r3, #0]
 8012f7c:	f003 020f 	and.w	r2, r3, #15
 8012f80:	6879      	ldr	r1, [r7, #4]
 8012f82:	4613      	mov	r3, r2
 8012f84:	009b      	lsls	r3, r3, #2
 8012f86:	4413      	add	r3, r2
 8012f88:	009b      	lsls	r3, r3, #2
 8012f8a:	440b      	add	r3, r1
 8012f8c:	3326      	adds	r3, #38	@ 0x26
 8012f8e:	2210      	movs	r2, #16
 8012f90:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8012f92:	4b29      	ldr	r3, [pc, #164]	@ (8013038 <USBD_CDC_Init+0x1ec>)
 8012f94:	7819      	ldrb	r1, [r3, #0]
 8012f96:	2308      	movs	r3, #8
 8012f98:	2203      	movs	r2, #3
 8012f9a:	6878      	ldr	r0, [r7, #4]
 8012f9c:	f005 ff41 	bl	8018e22 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8012fa0:	4b25      	ldr	r3, [pc, #148]	@ (8013038 <USBD_CDC_Init+0x1ec>)
 8012fa2:	781b      	ldrb	r3, [r3, #0]
 8012fa4:	f003 020f 	and.w	r2, r3, #15
 8012fa8:	6879      	ldr	r1, [r7, #4]
 8012faa:	4613      	mov	r3, r2
 8012fac:	009b      	lsls	r3, r3, #2
 8012fae:	4413      	add	r3, r2
 8012fb0:	009b      	lsls	r3, r3, #2
 8012fb2:	440b      	add	r3, r1
 8012fb4:	3324      	adds	r3, #36	@ 0x24
 8012fb6:	2201      	movs	r2, #1
 8012fb8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8012fba:	68fb      	ldr	r3, [r7, #12]
 8012fbc:	2200      	movs	r2, #0
 8012fbe:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8012fc2:	687b      	ldr	r3, [r7, #4]
 8012fc4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8012fc8:	687a      	ldr	r2, [r7, #4]
 8012fca:	33b0      	adds	r3, #176	@ 0xb0
 8012fcc:	009b      	lsls	r3, r3, #2
 8012fce:	4413      	add	r3, r2
 8012fd0:	685b      	ldr	r3, [r3, #4]
 8012fd2:	681b      	ldr	r3, [r3, #0]
 8012fd4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8012fd6:	68fb      	ldr	r3, [r7, #12]
 8012fd8:	2200      	movs	r2, #0
 8012fda:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8012fde:	68fb      	ldr	r3, [r7, #12]
 8012fe0:	2200      	movs	r2, #0
 8012fe2:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8012fe6:	68fb      	ldr	r3, [r7, #12]
 8012fe8:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8012fec:	2b00      	cmp	r3, #0
 8012fee:	d101      	bne.n	8012ff4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8012ff0:	2302      	movs	r3, #2
 8012ff2:	e018      	b.n	8013026 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012ff4:	687b      	ldr	r3, [r7, #4]
 8012ff6:	7c1b      	ldrb	r3, [r3, #16]
 8012ff8:	2b00      	cmp	r3, #0
 8012ffa:	d10a      	bne.n	8013012 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8012ffc:	4b0d      	ldr	r3, [pc, #52]	@ (8013034 <USBD_CDC_Init+0x1e8>)
 8012ffe:	7819      	ldrb	r1, [r3, #0]
 8013000:	68fb      	ldr	r3, [r7, #12]
 8013002:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8013006:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801300a:	6878      	ldr	r0, [r7, #4]
 801300c:	f005 fff8 	bl	8019000 <USBD_LL_PrepareReceive>
 8013010:	e008      	b.n	8013024 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8013012:	4b08      	ldr	r3, [pc, #32]	@ (8013034 <USBD_CDC_Init+0x1e8>)
 8013014:	7819      	ldrb	r1, [r3, #0]
 8013016:	68fb      	ldr	r3, [r7, #12]
 8013018:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 801301c:	2340      	movs	r3, #64	@ 0x40
 801301e:	6878      	ldr	r0, [r7, #4]
 8013020:	f005 ffee 	bl	8019000 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8013024:	2300      	movs	r3, #0
}
 8013026:	4618      	mov	r0, r3
 8013028:	3710      	adds	r7, #16
 801302a:	46bd      	mov	sp, r7
 801302c:	bd80      	pop	{r7, pc}
 801302e:	bf00      	nop
 8013030:	200000bf 	.word	0x200000bf
 8013034:	200000c0 	.word	0x200000c0
 8013038:	200000c1 	.word	0x200000c1

0801303c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801303c:	b580      	push	{r7, lr}
 801303e:	b082      	sub	sp, #8
 8013040:	af00      	add	r7, sp, #0
 8013042:	6078      	str	r0, [r7, #4]
 8013044:	460b      	mov	r3, r1
 8013046:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8013048:	4b3a      	ldr	r3, [pc, #232]	@ (8013134 <USBD_CDC_DeInit+0xf8>)
 801304a:	781b      	ldrb	r3, [r3, #0]
 801304c:	4619      	mov	r1, r3
 801304e:	6878      	ldr	r0, [r7, #4]
 8013050:	f005 ff0d 	bl	8018e6e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8013054:	4b37      	ldr	r3, [pc, #220]	@ (8013134 <USBD_CDC_DeInit+0xf8>)
 8013056:	781b      	ldrb	r3, [r3, #0]
 8013058:	f003 020f 	and.w	r2, r3, #15
 801305c:	6879      	ldr	r1, [r7, #4]
 801305e:	4613      	mov	r3, r2
 8013060:	009b      	lsls	r3, r3, #2
 8013062:	4413      	add	r3, r2
 8013064:	009b      	lsls	r3, r3, #2
 8013066:	440b      	add	r3, r1
 8013068:	3324      	adds	r3, #36	@ 0x24
 801306a:	2200      	movs	r2, #0
 801306c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 801306e:	4b32      	ldr	r3, [pc, #200]	@ (8013138 <USBD_CDC_DeInit+0xfc>)
 8013070:	781b      	ldrb	r3, [r3, #0]
 8013072:	4619      	mov	r1, r3
 8013074:	6878      	ldr	r0, [r7, #4]
 8013076:	f005 fefa 	bl	8018e6e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 801307a:	4b2f      	ldr	r3, [pc, #188]	@ (8013138 <USBD_CDC_DeInit+0xfc>)
 801307c:	781b      	ldrb	r3, [r3, #0]
 801307e:	f003 020f 	and.w	r2, r3, #15
 8013082:	6879      	ldr	r1, [r7, #4]
 8013084:	4613      	mov	r3, r2
 8013086:	009b      	lsls	r3, r3, #2
 8013088:	4413      	add	r3, r2
 801308a:	009b      	lsls	r3, r3, #2
 801308c:	440b      	add	r3, r1
 801308e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8013092:	2200      	movs	r2, #0
 8013094:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8013096:	4b29      	ldr	r3, [pc, #164]	@ (801313c <USBD_CDC_DeInit+0x100>)
 8013098:	781b      	ldrb	r3, [r3, #0]
 801309a:	4619      	mov	r1, r3
 801309c:	6878      	ldr	r0, [r7, #4]
 801309e:	f005 fee6 	bl	8018e6e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80130a2:	4b26      	ldr	r3, [pc, #152]	@ (801313c <USBD_CDC_DeInit+0x100>)
 80130a4:	781b      	ldrb	r3, [r3, #0]
 80130a6:	f003 020f 	and.w	r2, r3, #15
 80130aa:	6879      	ldr	r1, [r7, #4]
 80130ac:	4613      	mov	r3, r2
 80130ae:	009b      	lsls	r3, r3, #2
 80130b0:	4413      	add	r3, r2
 80130b2:	009b      	lsls	r3, r3, #2
 80130b4:	440b      	add	r3, r1
 80130b6:	3324      	adds	r3, #36	@ 0x24
 80130b8:	2200      	movs	r2, #0
 80130ba:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80130bc:	4b1f      	ldr	r3, [pc, #124]	@ (801313c <USBD_CDC_DeInit+0x100>)
 80130be:	781b      	ldrb	r3, [r3, #0]
 80130c0:	f003 020f 	and.w	r2, r3, #15
 80130c4:	6879      	ldr	r1, [r7, #4]
 80130c6:	4613      	mov	r3, r2
 80130c8:	009b      	lsls	r3, r3, #2
 80130ca:	4413      	add	r3, r2
 80130cc:	009b      	lsls	r3, r3, #2
 80130ce:	440b      	add	r3, r1
 80130d0:	3326      	adds	r3, #38	@ 0x26
 80130d2:	2200      	movs	r2, #0
 80130d4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80130d6:	687b      	ldr	r3, [r7, #4]
 80130d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80130dc:	687b      	ldr	r3, [r7, #4]
 80130de:	32b0      	adds	r2, #176	@ 0xb0
 80130e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80130e4:	2b00      	cmp	r3, #0
 80130e6:	d01f      	beq.n	8013128 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80130e8:	687b      	ldr	r3, [r7, #4]
 80130ea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80130ee:	687a      	ldr	r2, [r7, #4]
 80130f0:	33b0      	adds	r3, #176	@ 0xb0
 80130f2:	009b      	lsls	r3, r3, #2
 80130f4:	4413      	add	r3, r2
 80130f6:	685b      	ldr	r3, [r3, #4]
 80130f8:	685b      	ldr	r3, [r3, #4]
 80130fa:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80130fc:	687b      	ldr	r3, [r7, #4]
 80130fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013102:	687b      	ldr	r3, [r7, #4]
 8013104:	32b0      	adds	r2, #176	@ 0xb0
 8013106:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801310a:	4618      	mov	r0, r3
 801310c:	f005 fff0 	bl	80190f0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8013110:	687b      	ldr	r3, [r7, #4]
 8013112:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013116:	687b      	ldr	r3, [r7, #4]
 8013118:	32b0      	adds	r2, #176	@ 0xb0
 801311a:	2100      	movs	r1, #0
 801311c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8013120:	687b      	ldr	r3, [r7, #4]
 8013122:	2200      	movs	r2, #0
 8013124:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8013128:	2300      	movs	r3, #0
}
 801312a:	4618      	mov	r0, r3
 801312c:	3708      	adds	r7, #8
 801312e:	46bd      	mov	sp, r7
 8013130:	bd80      	pop	{r7, pc}
 8013132:	bf00      	nop
 8013134:	200000bf 	.word	0x200000bf
 8013138:	200000c0 	.word	0x200000c0
 801313c:	200000c1 	.word	0x200000c1

08013140 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8013140:	b580      	push	{r7, lr}
 8013142:	b086      	sub	sp, #24
 8013144:	af00      	add	r7, sp, #0
 8013146:	6078      	str	r0, [r7, #4]
 8013148:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801314a:	687b      	ldr	r3, [r7, #4]
 801314c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013150:	687b      	ldr	r3, [r7, #4]
 8013152:	32b0      	adds	r2, #176	@ 0xb0
 8013154:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013158:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 801315a:	2300      	movs	r3, #0
 801315c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 801315e:	2300      	movs	r3, #0
 8013160:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8013162:	2300      	movs	r3, #0
 8013164:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8013166:	693b      	ldr	r3, [r7, #16]
 8013168:	2b00      	cmp	r3, #0
 801316a:	d101      	bne.n	8013170 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 801316c:	2303      	movs	r3, #3
 801316e:	e0bf      	b.n	80132f0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8013170:	683b      	ldr	r3, [r7, #0]
 8013172:	781b      	ldrb	r3, [r3, #0]
 8013174:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8013178:	2b00      	cmp	r3, #0
 801317a:	d050      	beq.n	801321e <USBD_CDC_Setup+0xde>
 801317c:	2b20      	cmp	r3, #32
 801317e:	f040 80af 	bne.w	80132e0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8013182:	683b      	ldr	r3, [r7, #0]
 8013184:	88db      	ldrh	r3, [r3, #6]
 8013186:	2b00      	cmp	r3, #0
 8013188:	d03a      	beq.n	8013200 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 801318a:	683b      	ldr	r3, [r7, #0]
 801318c:	781b      	ldrb	r3, [r3, #0]
 801318e:	b25b      	sxtb	r3, r3
 8013190:	2b00      	cmp	r3, #0
 8013192:	da1b      	bge.n	80131cc <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8013194:	687b      	ldr	r3, [r7, #4]
 8013196:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801319a:	687a      	ldr	r2, [r7, #4]
 801319c:	33b0      	adds	r3, #176	@ 0xb0
 801319e:	009b      	lsls	r3, r3, #2
 80131a0:	4413      	add	r3, r2
 80131a2:	685b      	ldr	r3, [r3, #4]
 80131a4:	689b      	ldr	r3, [r3, #8]
 80131a6:	683a      	ldr	r2, [r7, #0]
 80131a8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80131aa:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80131ac:	683a      	ldr	r2, [r7, #0]
 80131ae:	88d2      	ldrh	r2, [r2, #6]
 80131b0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80131b2:	683b      	ldr	r3, [r7, #0]
 80131b4:	88db      	ldrh	r3, [r3, #6]
 80131b6:	2b07      	cmp	r3, #7
 80131b8:	bf28      	it	cs
 80131ba:	2307      	movcs	r3, #7
 80131bc:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80131be:	693b      	ldr	r3, [r7, #16]
 80131c0:	89fa      	ldrh	r2, [r7, #14]
 80131c2:	4619      	mov	r1, r3
 80131c4:	6878      	ldr	r0, [r7, #4]
 80131c6:	f001 fd2b 	bl	8014c20 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80131ca:	e090      	b.n	80132ee <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80131cc:	683b      	ldr	r3, [r7, #0]
 80131ce:	785a      	ldrb	r2, [r3, #1]
 80131d0:	693b      	ldr	r3, [r7, #16]
 80131d2:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80131d6:	683b      	ldr	r3, [r7, #0]
 80131d8:	88db      	ldrh	r3, [r3, #6]
 80131da:	2b3f      	cmp	r3, #63	@ 0x3f
 80131dc:	d803      	bhi.n	80131e6 <USBD_CDC_Setup+0xa6>
 80131de:	683b      	ldr	r3, [r7, #0]
 80131e0:	88db      	ldrh	r3, [r3, #6]
 80131e2:	b2da      	uxtb	r2, r3
 80131e4:	e000      	b.n	80131e8 <USBD_CDC_Setup+0xa8>
 80131e6:	2240      	movs	r2, #64	@ 0x40
 80131e8:	693b      	ldr	r3, [r7, #16]
 80131ea:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80131ee:	6939      	ldr	r1, [r7, #16]
 80131f0:	693b      	ldr	r3, [r7, #16]
 80131f2:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 80131f6:	461a      	mov	r2, r3
 80131f8:	6878      	ldr	r0, [r7, #4]
 80131fa:	f001 fd3d 	bl	8014c78 <USBD_CtlPrepareRx>
      break;
 80131fe:	e076      	b.n	80132ee <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8013200:	687b      	ldr	r3, [r7, #4]
 8013202:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8013206:	687a      	ldr	r2, [r7, #4]
 8013208:	33b0      	adds	r3, #176	@ 0xb0
 801320a:	009b      	lsls	r3, r3, #2
 801320c:	4413      	add	r3, r2
 801320e:	685b      	ldr	r3, [r3, #4]
 8013210:	689b      	ldr	r3, [r3, #8]
 8013212:	683a      	ldr	r2, [r7, #0]
 8013214:	7850      	ldrb	r0, [r2, #1]
 8013216:	2200      	movs	r2, #0
 8013218:	6839      	ldr	r1, [r7, #0]
 801321a:	4798      	blx	r3
      break;
 801321c:	e067      	b.n	80132ee <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801321e:	683b      	ldr	r3, [r7, #0]
 8013220:	785b      	ldrb	r3, [r3, #1]
 8013222:	2b0b      	cmp	r3, #11
 8013224:	d851      	bhi.n	80132ca <USBD_CDC_Setup+0x18a>
 8013226:	a201      	add	r2, pc, #4	@ (adr r2, 801322c <USBD_CDC_Setup+0xec>)
 8013228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801322c:	0801325d 	.word	0x0801325d
 8013230:	080132d9 	.word	0x080132d9
 8013234:	080132cb 	.word	0x080132cb
 8013238:	080132cb 	.word	0x080132cb
 801323c:	080132cb 	.word	0x080132cb
 8013240:	080132cb 	.word	0x080132cb
 8013244:	080132cb 	.word	0x080132cb
 8013248:	080132cb 	.word	0x080132cb
 801324c:	080132cb 	.word	0x080132cb
 8013250:	080132cb 	.word	0x080132cb
 8013254:	08013287 	.word	0x08013287
 8013258:	080132b1 	.word	0x080132b1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801325c:	687b      	ldr	r3, [r7, #4]
 801325e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013262:	b2db      	uxtb	r3, r3
 8013264:	2b03      	cmp	r3, #3
 8013266:	d107      	bne.n	8013278 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8013268:	f107 030a 	add.w	r3, r7, #10
 801326c:	2202      	movs	r2, #2
 801326e:	4619      	mov	r1, r3
 8013270:	6878      	ldr	r0, [r7, #4]
 8013272:	f001 fcd5 	bl	8014c20 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8013276:	e032      	b.n	80132de <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8013278:	6839      	ldr	r1, [r7, #0]
 801327a:	6878      	ldr	r0, [r7, #4]
 801327c:	f001 fc53 	bl	8014b26 <USBD_CtlError>
            ret = USBD_FAIL;
 8013280:	2303      	movs	r3, #3
 8013282:	75fb      	strb	r3, [r7, #23]
          break;
 8013284:	e02b      	b.n	80132de <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013286:	687b      	ldr	r3, [r7, #4]
 8013288:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801328c:	b2db      	uxtb	r3, r3
 801328e:	2b03      	cmp	r3, #3
 8013290:	d107      	bne.n	80132a2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8013292:	f107 030d 	add.w	r3, r7, #13
 8013296:	2201      	movs	r2, #1
 8013298:	4619      	mov	r1, r3
 801329a:	6878      	ldr	r0, [r7, #4]
 801329c:	f001 fcc0 	bl	8014c20 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80132a0:	e01d      	b.n	80132de <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80132a2:	6839      	ldr	r1, [r7, #0]
 80132a4:	6878      	ldr	r0, [r7, #4]
 80132a6:	f001 fc3e 	bl	8014b26 <USBD_CtlError>
            ret = USBD_FAIL;
 80132aa:	2303      	movs	r3, #3
 80132ac:	75fb      	strb	r3, [r7, #23]
          break;
 80132ae:	e016      	b.n	80132de <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80132b0:	687b      	ldr	r3, [r7, #4]
 80132b2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80132b6:	b2db      	uxtb	r3, r3
 80132b8:	2b03      	cmp	r3, #3
 80132ba:	d00f      	beq.n	80132dc <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80132bc:	6839      	ldr	r1, [r7, #0]
 80132be:	6878      	ldr	r0, [r7, #4]
 80132c0:	f001 fc31 	bl	8014b26 <USBD_CtlError>
            ret = USBD_FAIL;
 80132c4:	2303      	movs	r3, #3
 80132c6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80132c8:	e008      	b.n	80132dc <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80132ca:	6839      	ldr	r1, [r7, #0]
 80132cc:	6878      	ldr	r0, [r7, #4]
 80132ce:	f001 fc2a 	bl	8014b26 <USBD_CtlError>
          ret = USBD_FAIL;
 80132d2:	2303      	movs	r3, #3
 80132d4:	75fb      	strb	r3, [r7, #23]
          break;
 80132d6:	e002      	b.n	80132de <USBD_CDC_Setup+0x19e>
          break;
 80132d8:	bf00      	nop
 80132da:	e008      	b.n	80132ee <USBD_CDC_Setup+0x1ae>
          break;
 80132dc:	bf00      	nop
      }
      break;
 80132de:	e006      	b.n	80132ee <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80132e0:	6839      	ldr	r1, [r7, #0]
 80132e2:	6878      	ldr	r0, [r7, #4]
 80132e4:	f001 fc1f 	bl	8014b26 <USBD_CtlError>
      ret = USBD_FAIL;
 80132e8:	2303      	movs	r3, #3
 80132ea:	75fb      	strb	r3, [r7, #23]
      break;
 80132ec:	bf00      	nop
  }

  return (uint8_t)ret;
 80132ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80132f0:	4618      	mov	r0, r3
 80132f2:	3718      	adds	r7, #24
 80132f4:	46bd      	mov	sp, r7
 80132f6:	bd80      	pop	{r7, pc}

080132f8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80132f8:	b580      	push	{r7, lr}
 80132fa:	b084      	sub	sp, #16
 80132fc:	af00      	add	r7, sp, #0
 80132fe:	6078      	str	r0, [r7, #4]
 8013300:	460b      	mov	r3, r1
 8013302:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8013304:	687b      	ldr	r3, [r7, #4]
 8013306:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801330a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 801330c:	687b      	ldr	r3, [r7, #4]
 801330e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013312:	687b      	ldr	r3, [r7, #4]
 8013314:	32b0      	adds	r2, #176	@ 0xb0
 8013316:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801331a:	2b00      	cmp	r3, #0
 801331c:	d101      	bne.n	8013322 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 801331e:	2303      	movs	r3, #3
 8013320:	e065      	b.n	80133ee <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013322:	687b      	ldr	r3, [r7, #4]
 8013324:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013328:	687b      	ldr	r3, [r7, #4]
 801332a:	32b0      	adds	r2, #176	@ 0xb0
 801332c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013330:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8013332:	78fb      	ldrb	r3, [r7, #3]
 8013334:	f003 020f 	and.w	r2, r3, #15
 8013338:	6879      	ldr	r1, [r7, #4]
 801333a:	4613      	mov	r3, r2
 801333c:	009b      	lsls	r3, r3, #2
 801333e:	4413      	add	r3, r2
 8013340:	009b      	lsls	r3, r3, #2
 8013342:	440b      	add	r3, r1
 8013344:	3318      	adds	r3, #24
 8013346:	681b      	ldr	r3, [r3, #0]
 8013348:	2b00      	cmp	r3, #0
 801334a:	d02f      	beq.n	80133ac <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 801334c:	78fb      	ldrb	r3, [r7, #3]
 801334e:	f003 020f 	and.w	r2, r3, #15
 8013352:	6879      	ldr	r1, [r7, #4]
 8013354:	4613      	mov	r3, r2
 8013356:	009b      	lsls	r3, r3, #2
 8013358:	4413      	add	r3, r2
 801335a:	009b      	lsls	r3, r3, #2
 801335c:	440b      	add	r3, r1
 801335e:	3318      	adds	r3, #24
 8013360:	681a      	ldr	r2, [r3, #0]
 8013362:	78fb      	ldrb	r3, [r7, #3]
 8013364:	f003 010f 	and.w	r1, r3, #15
 8013368:	68f8      	ldr	r0, [r7, #12]
 801336a:	460b      	mov	r3, r1
 801336c:	009b      	lsls	r3, r3, #2
 801336e:	440b      	add	r3, r1
 8013370:	00db      	lsls	r3, r3, #3
 8013372:	4403      	add	r3, r0
 8013374:	3320      	adds	r3, #32
 8013376:	681b      	ldr	r3, [r3, #0]
 8013378:	fbb2 f1f3 	udiv	r1, r2, r3
 801337c:	fb01 f303 	mul.w	r3, r1, r3
 8013380:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8013382:	2b00      	cmp	r3, #0
 8013384:	d112      	bne.n	80133ac <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8013386:	78fb      	ldrb	r3, [r7, #3]
 8013388:	f003 020f 	and.w	r2, r3, #15
 801338c:	6879      	ldr	r1, [r7, #4]
 801338e:	4613      	mov	r3, r2
 8013390:	009b      	lsls	r3, r3, #2
 8013392:	4413      	add	r3, r2
 8013394:	009b      	lsls	r3, r3, #2
 8013396:	440b      	add	r3, r1
 8013398:	3318      	adds	r3, #24
 801339a:	2200      	movs	r2, #0
 801339c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 801339e:	78f9      	ldrb	r1, [r7, #3]
 80133a0:	2300      	movs	r3, #0
 80133a2:	2200      	movs	r2, #0
 80133a4:	6878      	ldr	r0, [r7, #4]
 80133a6:	f005 fe0a 	bl	8018fbe <USBD_LL_Transmit>
 80133aa:	e01f      	b.n	80133ec <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80133ac:	68bb      	ldr	r3, [r7, #8]
 80133ae:	2200      	movs	r2, #0
 80133b0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80133b4:	687b      	ldr	r3, [r7, #4]
 80133b6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80133ba:	687a      	ldr	r2, [r7, #4]
 80133bc:	33b0      	adds	r3, #176	@ 0xb0
 80133be:	009b      	lsls	r3, r3, #2
 80133c0:	4413      	add	r3, r2
 80133c2:	685b      	ldr	r3, [r3, #4]
 80133c4:	691b      	ldr	r3, [r3, #16]
 80133c6:	2b00      	cmp	r3, #0
 80133c8:	d010      	beq.n	80133ec <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80133ca:	687b      	ldr	r3, [r7, #4]
 80133cc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80133d0:	687a      	ldr	r2, [r7, #4]
 80133d2:	33b0      	adds	r3, #176	@ 0xb0
 80133d4:	009b      	lsls	r3, r3, #2
 80133d6:	4413      	add	r3, r2
 80133d8:	685b      	ldr	r3, [r3, #4]
 80133da:	691b      	ldr	r3, [r3, #16]
 80133dc:	68ba      	ldr	r2, [r7, #8]
 80133de:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 80133e2:	68ba      	ldr	r2, [r7, #8]
 80133e4:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 80133e8:	78fa      	ldrb	r2, [r7, #3]
 80133ea:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80133ec:	2300      	movs	r3, #0
}
 80133ee:	4618      	mov	r0, r3
 80133f0:	3710      	adds	r7, #16
 80133f2:	46bd      	mov	sp, r7
 80133f4:	bd80      	pop	{r7, pc}

080133f6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80133f6:	b580      	push	{r7, lr}
 80133f8:	b084      	sub	sp, #16
 80133fa:	af00      	add	r7, sp, #0
 80133fc:	6078      	str	r0, [r7, #4]
 80133fe:	460b      	mov	r3, r1
 8013400:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013402:	687b      	ldr	r3, [r7, #4]
 8013404:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013408:	687b      	ldr	r3, [r7, #4]
 801340a:	32b0      	adds	r2, #176	@ 0xb0
 801340c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013410:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8013412:	687b      	ldr	r3, [r7, #4]
 8013414:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013418:	687b      	ldr	r3, [r7, #4]
 801341a:	32b0      	adds	r2, #176	@ 0xb0
 801341c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013420:	2b00      	cmp	r3, #0
 8013422:	d101      	bne.n	8013428 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8013424:	2303      	movs	r3, #3
 8013426:	e01a      	b.n	801345e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8013428:	78fb      	ldrb	r3, [r7, #3]
 801342a:	4619      	mov	r1, r3
 801342c:	6878      	ldr	r0, [r7, #4]
 801342e:	f005 fe08 	bl	8019042 <USBD_LL_GetRxDataSize>
 8013432:	4602      	mov	r2, r0
 8013434:	68fb      	ldr	r3, [r7, #12]
 8013436:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 801343a:	687b      	ldr	r3, [r7, #4]
 801343c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8013440:	687a      	ldr	r2, [r7, #4]
 8013442:	33b0      	adds	r3, #176	@ 0xb0
 8013444:	009b      	lsls	r3, r3, #2
 8013446:	4413      	add	r3, r2
 8013448:	685b      	ldr	r3, [r3, #4]
 801344a:	68db      	ldr	r3, [r3, #12]
 801344c:	68fa      	ldr	r2, [r7, #12]
 801344e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8013452:	68fa      	ldr	r2, [r7, #12]
 8013454:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8013458:	4611      	mov	r1, r2
 801345a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 801345c:	2300      	movs	r3, #0
}
 801345e:	4618      	mov	r0, r3
 8013460:	3710      	adds	r7, #16
 8013462:	46bd      	mov	sp, r7
 8013464:	bd80      	pop	{r7, pc}

08013466 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8013466:	b580      	push	{r7, lr}
 8013468:	b084      	sub	sp, #16
 801346a:	af00      	add	r7, sp, #0
 801346c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801346e:	687b      	ldr	r3, [r7, #4]
 8013470:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013474:	687b      	ldr	r3, [r7, #4]
 8013476:	32b0      	adds	r2, #176	@ 0xb0
 8013478:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801347c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 801347e:	68fb      	ldr	r3, [r7, #12]
 8013480:	2b00      	cmp	r3, #0
 8013482:	d101      	bne.n	8013488 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8013484:	2303      	movs	r3, #3
 8013486:	e024      	b.n	80134d2 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8013488:	687b      	ldr	r3, [r7, #4]
 801348a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801348e:	687a      	ldr	r2, [r7, #4]
 8013490:	33b0      	adds	r3, #176	@ 0xb0
 8013492:	009b      	lsls	r3, r3, #2
 8013494:	4413      	add	r3, r2
 8013496:	685b      	ldr	r3, [r3, #4]
 8013498:	2b00      	cmp	r3, #0
 801349a:	d019      	beq.n	80134d0 <USBD_CDC_EP0_RxReady+0x6a>
 801349c:	68fb      	ldr	r3, [r7, #12]
 801349e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80134a2:	2bff      	cmp	r3, #255	@ 0xff
 80134a4:	d014      	beq.n	80134d0 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80134a6:	687b      	ldr	r3, [r7, #4]
 80134a8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80134ac:	687a      	ldr	r2, [r7, #4]
 80134ae:	33b0      	adds	r3, #176	@ 0xb0
 80134b0:	009b      	lsls	r3, r3, #2
 80134b2:	4413      	add	r3, r2
 80134b4:	685b      	ldr	r3, [r3, #4]
 80134b6:	689b      	ldr	r3, [r3, #8]
 80134b8:	68fa      	ldr	r2, [r7, #12]
 80134ba:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 80134be:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80134c0:	68fa      	ldr	r2, [r7, #12]
 80134c2:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80134c6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80134c8:	68fb      	ldr	r3, [r7, #12]
 80134ca:	22ff      	movs	r2, #255	@ 0xff
 80134cc:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 80134d0:	2300      	movs	r3, #0
}
 80134d2:	4618      	mov	r0, r3
 80134d4:	3710      	adds	r7, #16
 80134d6:	46bd      	mov	sp, r7
 80134d8:	bd80      	pop	{r7, pc}
	...

080134dc <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80134dc:	b580      	push	{r7, lr}
 80134de:	b086      	sub	sp, #24
 80134e0:	af00      	add	r7, sp, #0
 80134e2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80134e4:	2182      	movs	r1, #130	@ 0x82
 80134e6:	4818      	ldr	r0, [pc, #96]	@ (8013548 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80134e8:	f000 fcbd 	bl	8013e66 <USBD_GetEpDesc>
 80134ec:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80134ee:	2101      	movs	r1, #1
 80134f0:	4815      	ldr	r0, [pc, #84]	@ (8013548 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80134f2:	f000 fcb8 	bl	8013e66 <USBD_GetEpDesc>
 80134f6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80134f8:	2181      	movs	r1, #129	@ 0x81
 80134fa:	4813      	ldr	r0, [pc, #76]	@ (8013548 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80134fc:	f000 fcb3 	bl	8013e66 <USBD_GetEpDesc>
 8013500:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8013502:	697b      	ldr	r3, [r7, #20]
 8013504:	2b00      	cmp	r3, #0
 8013506:	d002      	beq.n	801350e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8013508:	697b      	ldr	r3, [r7, #20]
 801350a:	2210      	movs	r2, #16
 801350c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801350e:	693b      	ldr	r3, [r7, #16]
 8013510:	2b00      	cmp	r3, #0
 8013512:	d006      	beq.n	8013522 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8013514:	693b      	ldr	r3, [r7, #16]
 8013516:	2200      	movs	r2, #0
 8013518:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801351c:	711a      	strb	r2, [r3, #4]
 801351e:	2200      	movs	r2, #0
 8013520:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8013522:	68fb      	ldr	r3, [r7, #12]
 8013524:	2b00      	cmp	r3, #0
 8013526:	d006      	beq.n	8013536 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8013528:	68fb      	ldr	r3, [r7, #12]
 801352a:	2200      	movs	r2, #0
 801352c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8013530:	711a      	strb	r2, [r3, #4]
 8013532:	2200      	movs	r2, #0
 8013534:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8013536:	687b      	ldr	r3, [r7, #4]
 8013538:	2243      	movs	r2, #67	@ 0x43
 801353a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 801353c:	4b02      	ldr	r3, [pc, #8]	@ (8013548 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 801353e:	4618      	mov	r0, r3
 8013540:	3718      	adds	r7, #24
 8013542:	46bd      	mov	sp, r7
 8013544:	bd80      	pop	{r7, pc}
 8013546:	bf00      	nop
 8013548:	2000007c 	.word	0x2000007c

0801354c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 801354c:	b580      	push	{r7, lr}
 801354e:	b086      	sub	sp, #24
 8013550:	af00      	add	r7, sp, #0
 8013552:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8013554:	2182      	movs	r1, #130	@ 0x82
 8013556:	4818      	ldr	r0, [pc, #96]	@ (80135b8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8013558:	f000 fc85 	bl	8013e66 <USBD_GetEpDesc>
 801355c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 801355e:	2101      	movs	r1, #1
 8013560:	4815      	ldr	r0, [pc, #84]	@ (80135b8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8013562:	f000 fc80 	bl	8013e66 <USBD_GetEpDesc>
 8013566:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8013568:	2181      	movs	r1, #129	@ 0x81
 801356a:	4813      	ldr	r0, [pc, #76]	@ (80135b8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 801356c:	f000 fc7b 	bl	8013e66 <USBD_GetEpDesc>
 8013570:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8013572:	697b      	ldr	r3, [r7, #20]
 8013574:	2b00      	cmp	r3, #0
 8013576:	d002      	beq.n	801357e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8013578:	697b      	ldr	r3, [r7, #20]
 801357a:	2210      	movs	r2, #16
 801357c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801357e:	693b      	ldr	r3, [r7, #16]
 8013580:	2b00      	cmp	r3, #0
 8013582:	d006      	beq.n	8013592 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8013584:	693b      	ldr	r3, [r7, #16]
 8013586:	2200      	movs	r2, #0
 8013588:	711a      	strb	r2, [r3, #4]
 801358a:	2200      	movs	r2, #0
 801358c:	f042 0202 	orr.w	r2, r2, #2
 8013590:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8013592:	68fb      	ldr	r3, [r7, #12]
 8013594:	2b00      	cmp	r3, #0
 8013596:	d006      	beq.n	80135a6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8013598:	68fb      	ldr	r3, [r7, #12]
 801359a:	2200      	movs	r2, #0
 801359c:	711a      	strb	r2, [r3, #4]
 801359e:	2200      	movs	r2, #0
 80135a0:	f042 0202 	orr.w	r2, r2, #2
 80135a4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80135a6:	687b      	ldr	r3, [r7, #4]
 80135a8:	2243      	movs	r2, #67	@ 0x43
 80135aa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80135ac:	4b02      	ldr	r3, [pc, #8]	@ (80135b8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80135ae:	4618      	mov	r0, r3
 80135b0:	3718      	adds	r7, #24
 80135b2:	46bd      	mov	sp, r7
 80135b4:	bd80      	pop	{r7, pc}
 80135b6:	bf00      	nop
 80135b8:	2000007c 	.word	0x2000007c

080135bc <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80135bc:	b580      	push	{r7, lr}
 80135be:	b086      	sub	sp, #24
 80135c0:	af00      	add	r7, sp, #0
 80135c2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80135c4:	2182      	movs	r1, #130	@ 0x82
 80135c6:	4818      	ldr	r0, [pc, #96]	@ (8013628 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80135c8:	f000 fc4d 	bl	8013e66 <USBD_GetEpDesc>
 80135cc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80135ce:	2101      	movs	r1, #1
 80135d0:	4815      	ldr	r0, [pc, #84]	@ (8013628 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80135d2:	f000 fc48 	bl	8013e66 <USBD_GetEpDesc>
 80135d6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80135d8:	2181      	movs	r1, #129	@ 0x81
 80135da:	4813      	ldr	r0, [pc, #76]	@ (8013628 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80135dc:	f000 fc43 	bl	8013e66 <USBD_GetEpDesc>
 80135e0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80135e2:	697b      	ldr	r3, [r7, #20]
 80135e4:	2b00      	cmp	r3, #0
 80135e6:	d002      	beq.n	80135ee <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80135e8:	697b      	ldr	r3, [r7, #20]
 80135ea:	2210      	movs	r2, #16
 80135ec:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80135ee:	693b      	ldr	r3, [r7, #16]
 80135f0:	2b00      	cmp	r3, #0
 80135f2:	d006      	beq.n	8013602 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80135f4:	693b      	ldr	r3, [r7, #16]
 80135f6:	2200      	movs	r2, #0
 80135f8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80135fc:	711a      	strb	r2, [r3, #4]
 80135fe:	2200      	movs	r2, #0
 8013600:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8013602:	68fb      	ldr	r3, [r7, #12]
 8013604:	2b00      	cmp	r3, #0
 8013606:	d006      	beq.n	8013616 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8013608:	68fb      	ldr	r3, [r7, #12]
 801360a:	2200      	movs	r2, #0
 801360c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8013610:	711a      	strb	r2, [r3, #4]
 8013612:	2200      	movs	r2, #0
 8013614:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8013616:	687b      	ldr	r3, [r7, #4]
 8013618:	2243      	movs	r2, #67	@ 0x43
 801361a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 801361c:	4b02      	ldr	r3, [pc, #8]	@ (8013628 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 801361e:	4618      	mov	r0, r3
 8013620:	3718      	adds	r7, #24
 8013622:	46bd      	mov	sp, r7
 8013624:	bd80      	pop	{r7, pc}
 8013626:	bf00      	nop
 8013628:	2000007c 	.word	0x2000007c

0801362c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 801362c:	b480      	push	{r7}
 801362e:	b083      	sub	sp, #12
 8013630:	af00      	add	r7, sp, #0
 8013632:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8013634:	687b      	ldr	r3, [r7, #4]
 8013636:	220a      	movs	r2, #10
 8013638:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 801363a:	4b03      	ldr	r3, [pc, #12]	@ (8013648 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 801363c:	4618      	mov	r0, r3
 801363e:	370c      	adds	r7, #12
 8013640:	46bd      	mov	sp, r7
 8013642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013646:	4770      	bx	lr
 8013648:	20000038 	.word	0x20000038

0801364c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 801364c:	b480      	push	{r7}
 801364e:	b083      	sub	sp, #12
 8013650:	af00      	add	r7, sp, #0
 8013652:	6078      	str	r0, [r7, #4]
 8013654:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8013656:	683b      	ldr	r3, [r7, #0]
 8013658:	2b00      	cmp	r3, #0
 801365a:	d101      	bne.n	8013660 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 801365c:	2303      	movs	r3, #3
 801365e:	e009      	b.n	8013674 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8013660:	687b      	ldr	r3, [r7, #4]
 8013662:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8013666:	687a      	ldr	r2, [r7, #4]
 8013668:	33b0      	adds	r3, #176	@ 0xb0
 801366a:	009b      	lsls	r3, r3, #2
 801366c:	4413      	add	r3, r2
 801366e:	683a      	ldr	r2, [r7, #0]
 8013670:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8013672:	2300      	movs	r3, #0
}
 8013674:	4618      	mov	r0, r3
 8013676:	370c      	adds	r7, #12
 8013678:	46bd      	mov	sp, r7
 801367a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801367e:	4770      	bx	lr

08013680 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8013680:	b480      	push	{r7}
 8013682:	b087      	sub	sp, #28
 8013684:	af00      	add	r7, sp, #0
 8013686:	60f8      	str	r0, [r7, #12]
 8013688:	60b9      	str	r1, [r7, #8]
 801368a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801368c:	68fb      	ldr	r3, [r7, #12]
 801368e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013692:	68fb      	ldr	r3, [r7, #12]
 8013694:	32b0      	adds	r2, #176	@ 0xb0
 8013696:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801369a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 801369c:	697b      	ldr	r3, [r7, #20]
 801369e:	2b00      	cmp	r3, #0
 80136a0:	d101      	bne.n	80136a6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80136a2:	2303      	movs	r3, #3
 80136a4:	e008      	b.n	80136b8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80136a6:	697b      	ldr	r3, [r7, #20]
 80136a8:	68ba      	ldr	r2, [r7, #8]
 80136aa:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80136ae:	697b      	ldr	r3, [r7, #20]
 80136b0:	687a      	ldr	r2, [r7, #4]
 80136b2:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 80136b6:	2300      	movs	r3, #0
}
 80136b8:	4618      	mov	r0, r3
 80136ba:	371c      	adds	r7, #28
 80136bc:	46bd      	mov	sp, r7
 80136be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136c2:	4770      	bx	lr

080136c4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80136c4:	b480      	push	{r7}
 80136c6:	b085      	sub	sp, #20
 80136c8:	af00      	add	r7, sp, #0
 80136ca:	6078      	str	r0, [r7, #4]
 80136cc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80136ce:	687b      	ldr	r3, [r7, #4]
 80136d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80136d4:	687b      	ldr	r3, [r7, #4]
 80136d6:	32b0      	adds	r2, #176	@ 0xb0
 80136d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80136dc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80136de:	68fb      	ldr	r3, [r7, #12]
 80136e0:	2b00      	cmp	r3, #0
 80136e2:	d101      	bne.n	80136e8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80136e4:	2303      	movs	r3, #3
 80136e6:	e004      	b.n	80136f2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80136e8:	68fb      	ldr	r3, [r7, #12]
 80136ea:	683a      	ldr	r2, [r7, #0]
 80136ec:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 80136f0:	2300      	movs	r3, #0
}
 80136f2:	4618      	mov	r0, r3
 80136f4:	3714      	adds	r7, #20
 80136f6:	46bd      	mov	sp, r7
 80136f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136fc:	4770      	bx	lr
	...

08013700 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8013700:	b580      	push	{r7, lr}
 8013702:	b084      	sub	sp, #16
 8013704:	af00      	add	r7, sp, #0
 8013706:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013708:	687b      	ldr	r3, [r7, #4]
 801370a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801370e:	687b      	ldr	r3, [r7, #4]
 8013710:	32b0      	adds	r2, #176	@ 0xb0
 8013712:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013716:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8013718:	2301      	movs	r3, #1
 801371a:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 801371c:	68bb      	ldr	r3, [r7, #8]
 801371e:	2b00      	cmp	r3, #0
 8013720:	d101      	bne.n	8013726 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8013722:	2303      	movs	r3, #3
 8013724:	e025      	b.n	8013772 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8013726:	68bb      	ldr	r3, [r7, #8]
 8013728:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 801372c:	2b00      	cmp	r3, #0
 801372e:	d11f      	bne.n	8013770 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8013730:	68bb      	ldr	r3, [r7, #8]
 8013732:	2201      	movs	r2, #1
 8013734:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8013738:	4b10      	ldr	r3, [pc, #64]	@ (801377c <USBD_CDC_TransmitPacket+0x7c>)
 801373a:	781b      	ldrb	r3, [r3, #0]
 801373c:	f003 020f 	and.w	r2, r3, #15
 8013740:	68bb      	ldr	r3, [r7, #8]
 8013742:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8013746:	6878      	ldr	r0, [r7, #4]
 8013748:	4613      	mov	r3, r2
 801374a:	009b      	lsls	r3, r3, #2
 801374c:	4413      	add	r3, r2
 801374e:	009b      	lsls	r3, r3, #2
 8013750:	4403      	add	r3, r0
 8013752:	3318      	adds	r3, #24
 8013754:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8013756:	4b09      	ldr	r3, [pc, #36]	@ (801377c <USBD_CDC_TransmitPacket+0x7c>)
 8013758:	7819      	ldrb	r1, [r3, #0]
 801375a:	68bb      	ldr	r3, [r7, #8]
 801375c:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8013760:	68bb      	ldr	r3, [r7, #8]
 8013762:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8013766:	6878      	ldr	r0, [r7, #4]
 8013768:	f005 fc29 	bl	8018fbe <USBD_LL_Transmit>

    ret = USBD_OK;
 801376c:	2300      	movs	r3, #0
 801376e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8013770:	7bfb      	ldrb	r3, [r7, #15]
}
 8013772:	4618      	mov	r0, r3
 8013774:	3710      	adds	r7, #16
 8013776:	46bd      	mov	sp, r7
 8013778:	bd80      	pop	{r7, pc}
 801377a:	bf00      	nop
 801377c:	200000bf 	.word	0x200000bf

08013780 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8013780:	b580      	push	{r7, lr}
 8013782:	b084      	sub	sp, #16
 8013784:	af00      	add	r7, sp, #0
 8013786:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013788:	687b      	ldr	r3, [r7, #4]
 801378a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801378e:	687b      	ldr	r3, [r7, #4]
 8013790:	32b0      	adds	r2, #176	@ 0xb0
 8013792:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013796:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8013798:	687b      	ldr	r3, [r7, #4]
 801379a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801379e:	687b      	ldr	r3, [r7, #4]
 80137a0:	32b0      	adds	r2, #176	@ 0xb0
 80137a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80137a6:	2b00      	cmp	r3, #0
 80137a8:	d101      	bne.n	80137ae <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80137aa:	2303      	movs	r3, #3
 80137ac:	e018      	b.n	80137e0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80137ae:	687b      	ldr	r3, [r7, #4]
 80137b0:	7c1b      	ldrb	r3, [r3, #16]
 80137b2:	2b00      	cmp	r3, #0
 80137b4:	d10a      	bne.n	80137cc <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80137b6:	4b0c      	ldr	r3, [pc, #48]	@ (80137e8 <USBD_CDC_ReceivePacket+0x68>)
 80137b8:	7819      	ldrb	r1, [r3, #0]
 80137ba:	68fb      	ldr	r3, [r7, #12]
 80137bc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80137c0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80137c4:	6878      	ldr	r0, [r7, #4]
 80137c6:	f005 fc1b 	bl	8019000 <USBD_LL_PrepareReceive>
 80137ca:	e008      	b.n	80137de <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80137cc:	4b06      	ldr	r3, [pc, #24]	@ (80137e8 <USBD_CDC_ReceivePacket+0x68>)
 80137ce:	7819      	ldrb	r1, [r3, #0]
 80137d0:	68fb      	ldr	r3, [r7, #12]
 80137d2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80137d6:	2340      	movs	r3, #64	@ 0x40
 80137d8:	6878      	ldr	r0, [r7, #4]
 80137da:	f005 fc11 	bl	8019000 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80137de:	2300      	movs	r3, #0
}
 80137e0:	4618      	mov	r0, r3
 80137e2:	3710      	adds	r7, #16
 80137e4:	46bd      	mov	sp, r7
 80137e6:	bd80      	pop	{r7, pc}
 80137e8:	200000c0 	.word	0x200000c0

080137ec <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80137ec:	b580      	push	{r7, lr}
 80137ee:	b086      	sub	sp, #24
 80137f0:	af00      	add	r7, sp, #0
 80137f2:	60f8      	str	r0, [r7, #12]
 80137f4:	60b9      	str	r1, [r7, #8]
 80137f6:	4613      	mov	r3, r2
 80137f8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80137fa:	68fb      	ldr	r3, [r7, #12]
 80137fc:	2b00      	cmp	r3, #0
 80137fe:	d101      	bne.n	8013804 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8013800:	2303      	movs	r3, #3
 8013802:	e01f      	b.n	8013844 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8013804:	68fb      	ldr	r3, [r7, #12]
 8013806:	2200      	movs	r2, #0
 8013808:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 801380c:	68fb      	ldr	r3, [r7, #12]
 801380e:	2200      	movs	r2, #0
 8013810:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8013814:	68fb      	ldr	r3, [r7, #12]
 8013816:	2200      	movs	r2, #0
 8013818:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 801381c:	68bb      	ldr	r3, [r7, #8]
 801381e:	2b00      	cmp	r3, #0
 8013820:	d003      	beq.n	801382a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8013822:	68fb      	ldr	r3, [r7, #12]
 8013824:	68ba      	ldr	r2, [r7, #8]
 8013826:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801382a:	68fb      	ldr	r3, [r7, #12]
 801382c:	2201      	movs	r2, #1
 801382e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8013832:	68fb      	ldr	r3, [r7, #12]
 8013834:	79fa      	ldrb	r2, [r7, #7]
 8013836:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8013838:	68f8      	ldr	r0, [r7, #12]
 801383a:	f005 fa75 	bl	8018d28 <USBD_LL_Init>
 801383e:	4603      	mov	r3, r0
 8013840:	75fb      	strb	r3, [r7, #23]

  return ret;
 8013842:	7dfb      	ldrb	r3, [r7, #23]
}
 8013844:	4618      	mov	r0, r3
 8013846:	3718      	adds	r7, #24
 8013848:	46bd      	mov	sp, r7
 801384a:	bd80      	pop	{r7, pc}

0801384c <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 801384c:	b580      	push	{r7, lr}
 801384e:	b084      	sub	sp, #16
 8013850:	af00      	add	r7, sp, #0
 8013852:	6078      	str	r0, [r7, #4]
 8013854:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8013856:	2300      	movs	r3, #0
 8013858:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 801385a:	683b      	ldr	r3, [r7, #0]
 801385c:	2b00      	cmp	r3, #0
 801385e:	d101      	bne.n	8013864 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8013860:	2303      	movs	r3, #3
 8013862:	e025      	b.n	80138b0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8013864:	687b      	ldr	r3, [r7, #4]
 8013866:	683a      	ldr	r2, [r7, #0]
 8013868:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 801386c:	687b      	ldr	r3, [r7, #4]
 801386e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013872:	687b      	ldr	r3, [r7, #4]
 8013874:	32ae      	adds	r2, #174	@ 0xae
 8013876:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801387a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801387c:	2b00      	cmp	r3, #0
 801387e:	d00f      	beq.n	80138a0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8013880:	687b      	ldr	r3, [r7, #4]
 8013882:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013886:	687b      	ldr	r3, [r7, #4]
 8013888:	32ae      	adds	r2, #174	@ 0xae
 801388a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801388e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013890:	f107 020e 	add.w	r2, r7, #14
 8013894:	4610      	mov	r0, r2
 8013896:	4798      	blx	r3
 8013898:	4602      	mov	r2, r0
 801389a:	687b      	ldr	r3, [r7, #4]
 801389c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 80138a0:	687b      	ldr	r3, [r7, #4]
 80138a2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80138a6:	1c5a      	adds	r2, r3, #1
 80138a8:	687b      	ldr	r3, [r7, #4]
 80138aa:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 80138ae:	2300      	movs	r3, #0
}
 80138b0:	4618      	mov	r0, r3
 80138b2:	3710      	adds	r7, #16
 80138b4:	46bd      	mov	sp, r7
 80138b6:	bd80      	pop	{r7, pc}

080138b8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80138b8:	b580      	push	{r7, lr}
 80138ba:	b082      	sub	sp, #8
 80138bc:	af00      	add	r7, sp, #0
 80138be:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80138c0:	6878      	ldr	r0, [r7, #4]
 80138c2:	f005 fa93 	bl	8018dec <USBD_LL_Start>
 80138c6:	4603      	mov	r3, r0
}
 80138c8:	4618      	mov	r0, r3
 80138ca:	3708      	adds	r7, #8
 80138cc:	46bd      	mov	sp, r7
 80138ce:	bd80      	pop	{r7, pc}

080138d0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80138d0:	b480      	push	{r7}
 80138d2:	b083      	sub	sp, #12
 80138d4:	af00      	add	r7, sp, #0
 80138d6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80138d8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80138da:	4618      	mov	r0, r3
 80138dc:	370c      	adds	r7, #12
 80138de:	46bd      	mov	sp, r7
 80138e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138e4:	4770      	bx	lr

080138e6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80138e6:	b580      	push	{r7, lr}
 80138e8:	b084      	sub	sp, #16
 80138ea:	af00      	add	r7, sp, #0
 80138ec:	6078      	str	r0, [r7, #4]
 80138ee:	460b      	mov	r3, r1
 80138f0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80138f2:	2300      	movs	r3, #0
 80138f4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80138f6:	687b      	ldr	r3, [r7, #4]
 80138f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80138fc:	2b00      	cmp	r3, #0
 80138fe:	d009      	beq.n	8013914 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8013900:	687b      	ldr	r3, [r7, #4]
 8013902:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013906:	681b      	ldr	r3, [r3, #0]
 8013908:	78fa      	ldrb	r2, [r7, #3]
 801390a:	4611      	mov	r1, r2
 801390c:	6878      	ldr	r0, [r7, #4]
 801390e:	4798      	blx	r3
 8013910:	4603      	mov	r3, r0
 8013912:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8013914:	7bfb      	ldrb	r3, [r7, #15]
}
 8013916:	4618      	mov	r0, r3
 8013918:	3710      	adds	r7, #16
 801391a:	46bd      	mov	sp, r7
 801391c:	bd80      	pop	{r7, pc}

0801391e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801391e:	b580      	push	{r7, lr}
 8013920:	b084      	sub	sp, #16
 8013922:	af00      	add	r7, sp, #0
 8013924:	6078      	str	r0, [r7, #4]
 8013926:	460b      	mov	r3, r1
 8013928:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 801392a:	2300      	movs	r3, #0
 801392c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 801392e:	687b      	ldr	r3, [r7, #4]
 8013930:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013934:	685b      	ldr	r3, [r3, #4]
 8013936:	78fa      	ldrb	r2, [r7, #3]
 8013938:	4611      	mov	r1, r2
 801393a:	6878      	ldr	r0, [r7, #4]
 801393c:	4798      	blx	r3
 801393e:	4603      	mov	r3, r0
 8013940:	2b00      	cmp	r3, #0
 8013942:	d001      	beq.n	8013948 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8013944:	2303      	movs	r3, #3
 8013946:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8013948:	7bfb      	ldrb	r3, [r7, #15]
}
 801394a:	4618      	mov	r0, r3
 801394c:	3710      	adds	r7, #16
 801394e:	46bd      	mov	sp, r7
 8013950:	bd80      	pop	{r7, pc}

08013952 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8013952:	b580      	push	{r7, lr}
 8013954:	b084      	sub	sp, #16
 8013956:	af00      	add	r7, sp, #0
 8013958:	6078      	str	r0, [r7, #4]
 801395a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 801395c:	687b      	ldr	r3, [r7, #4]
 801395e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8013962:	6839      	ldr	r1, [r7, #0]
 8013964:	4618      	mov	r0, r3
 8013966:	f001 f8a4 	bl	8014ab2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 801396a:	687b      	ldr	r3, [r7, #4]
 801396c:	2201      	movs	r2, #1
 801396e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8013972:	687b      	ldr	r3, [r7, #4]
 8013974:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8013978:	461a      	mov	r2, r3
 801397a:	687b      	ldr	r3, [r7, #4]
 801397c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8013980:	687b      	ldr	r3, [r7, #4]
 8013982:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8013986:	f003 031f 	and.w	r3, r3, #31
 801398a:	2b02      	cmp	r3, #2
 801398c:	d01a      	beq.n	80139c4 <USBD_LL_SetupStage+0x72>
 801398e:	2b02      	cmp	r3, #2
 8013990:	d822      	bhi.n	80139d8 <USBD_LL_SetupStage+0x86>
 8013992:	2b00      	cmp	r3, #0
 8013994:	d002      	beq.n	801399c <USBD_LL_SetupStage+0x4a>
 8013996:	2b01      	cmp	r3, #1
 8013998:	d00a      	beq.n	80139b0 <USBD_LL_SetupStage+0x5e>
 801399a:	e01d      	b.n	80139d8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 801399c:	687b      	ldr	r3, [r7, #4]
 801399e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80139a2:	4619      	mov	r1, r3
 80139a4:	6878      	ldr	r0, [r7, #4]
 80139a6:	f000 fad1 	bl	8013f4c <USBD_StdDevReq>
 80139aa:	4603      	mov	r3, r0
 80139ac:	73fb      	strb	r3, [r7, #15]
      break;
 80139ae:	e020      	b.n	80139f2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80139b0:	687b      	ldr	r3, [r7, #4]
 80139b2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80139b6:	4619      	mov	r1, r3
 80139b8:	6878      	ldr	r0, [r7, #4]
 80139ba:	f000 fb39 	bl	8014030 <USBD_StdItfReq>
 80139be:	4603      	mov	r3, r0
 80139c0:	73fb      	strb	r3, [r7, #15]
      break;
 80139c2:	e016      	b.n	80139f2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80139c4:	687b      	ldr	r3, [r7, #4]
 80139c6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80139ca:	4619      	mov	r1, r3
 80139cc:	6878      	ldr	r0, [r7, #4]
 80139ce:	f000 fb9b 	bl	8014108 <USBD_StdEPReq>
 80139d2:	4603      	mov	r3, r0
 80139d4:	73fb      	strb	r3, [r7, #15]
      break;
 80139d6:	e00c      	b.n	80139f2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80139d8:	687b      	ldr	r3, [r7, #4]
 80139da:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80139de:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80139e2:	b2db      	uxtb	r3, r3
 80139e4:	4619      	mov	r1, r3
 80139e6:	6878      	ldr	r0, [r7, #4]
 80139e8:	f005 fa60 	bl	8018eac <USBD_LL_StallEP>
 80139ec:	4603      	mov	r3, r0
 80139ee:	73fb      	strb	r3, [r7, #15]
      break;
 80139f0:	bf00      	nop
  }

  return ret;
 80139f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80139f4:	4618      	mov	r0, r3
 80139f6:	3710      	adds	r7, #16
 80139f8:	46bd      	mov	sp, r7
 80139fa:	bd80      	pop	{r7, pc}

080139fc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80139fc:	b580      	push	{r7, lr}
 80139fe:	b086      	sub	sp, #24
 8013a00:	af00      	add	r7, sp, #0
 8013a02:	60f8      	str	r0, [r7, #12]
 8013a04:	460b      	mov	r3, r1
 8013a06:	607a      	str	r2, [r7, #4]
 8013a08:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8013a0a:	2300      	movs	r3, #0
 8013a0c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8013a0e:	7afb      	ldrb	r3, [r7, #11]
 8013a10:	2b00      	cmp	r3, #0
 8013a12:	d16e      	bne.n	8013af2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8013a14:	68fb      	ldr	r3, [r7, #12]
 8013a16:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8013a1a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8013a1c:	68fb      	ldr	r3, [r7, #12]
 8013a1e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8013a22:	2b03      	cmp	r3, #3
 8013a24:	f040 8098 	bne.w	8013b58 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8013a28:	693b      	ldr	r3, [r7, #16]
 8013a2a:	689a      	ldr	r2, [r3, #8]
 8013a2c:	693b      	ldr	r3, [r7, #16]
 8013a2e:	68db      	ldr	r3, [r3, #12]
 8013a30:	429a      	cmp	r2, r3
 8013a32:	d913      	bls.n	8013a5c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8013a34:	693b      	ldr	r3, [r7, #16]
 8013a36:	689a      	ldr	r2, [r3, #8]
 8013a38:	693b      	ldr	r3, [r7, #16]
 8013a3a:	68db      	ldr	r3, [r3, #12]
 8013a3c:	1ad2      	subs	r2, r2, r3
 8013a3e:	693b      	ldr	r3, [r7, #16]
 8013a40:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8013a42:	693b      	ldr	r3, [r7, #16]
 8013a44:	68da      	ldr	r2, [r3, #12]
 8013a46:	693b      	ldr	r3, [r7, #16]
 8013a48:	689b      	ldr	r3, [r3, #8]
 8013a4a:	4293      	cmp	r3, r2
 8013a4c:	bf28      	it	cs
 8013a4e:	4613      	movcs	r3, r2
 8013a50:	461a      	mov	r2, r3
 8013a52:	6879      	ldr	r1, [r7, #4]
 8013a54:	68f8      	ldr	r0, [r7, #12]
 8013a56:	f001 f92c 	bl	8014cb2 <USBD_CtlContinueRx>
 8013a5a:	e07d      	b.n	8013b58 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8013a5c:	68fb      	ldr	r3, [r7, #12]
 8013a5e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8013a62:	f003 031f 	and.w	r3, r3, #31
 8013a66:	2b02      	cmp	r3, #2
 8013a68:	d014      	beq.n	8013a94 <USBD_LL_DataOutStage+0x98>
 8013a6a:	2b02      	cmp	r3, #2
 8013a6c:	d81d      	bhi.n	8013aaa <USBD_LL_DataOutStage+0xae>
 8013a6e:	2b00      	cmp	r3, #0
 8013a70:	d002      	beq.n	8013a78 <USBD_LL_DataOutStage+0x7c>
 8013a72:	2b01      	cmp	r3, #1
 8013a74:	d003      	beq.n	8013a7e <USBD_LL_DataOutStage+0x82>
 8013a76:	e018      	b.n	8013aaa <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8013a78:	2300      	movs	r3, #0
 8013a7a:	75bb      	strb	r3, [r7, #22]
            break;
 8013a7c:	e018      	b.n	8013ab0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8013a7e:	68fb      	ldr	r3, [r7, #12]
 8013a80:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8013a84:	b2db      	uxtb	r3, r3
 8013a86:	4619      	mov	r1, r3
 8013a88:	68f8      	ldr	r0, [r7, #12]
 8013a8a:	f000 f9d2 	bl	8013e32 <USBD_CoreFindIF>
 8013a8e:	4603      	mov	r3, r0
 8013a90:	75bb      	strb	r3, [r7, #22]
            break;
 8013a92:	e00d      	b.n	8013ab0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8013a94:	68fb      	ldr	r3, [r7, #12]
 8013a96:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8013a9a:	b2db      	uxtb	r3, r3
 8013a9c:	4619      	mov	r1, r3
 8013a9e:	68f8      	ldr	r0, [r7, #12]
 8013aa0:	f000 f9d4 	bl	8013e4c <USBD_CoreFindEP>
 8013aa4:	4603      	mov	r3, r0
 8013aa6:	75bb      	strb	r3, [r7, #22]
            break;
 8013aa8:	e002      	b.n	8013ab0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8013aaa:	2300      	movs	r3, #0
 8013aac:	75bb      	strb	r3, [r7, #22]
            break;
 8013aae:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8013ab0:	7dbb      	ldrb	r3, [r7, #22]
 8013ab2:	2b00      	cmp	r3, #0
 8013ab4:	d119      	bne.n	8013aea <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013ab6:	68fb      	ldr	r3, [r7, #12]
 8013ab8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013abc:	b2db      	uxtb	r3, r3
 8013abe:	2b03      	cmp	r3, #3
 8013ac0:	d113      	bne.n	8013aea <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8013ac2:	7dba      	ldrb	r2, [r7, #22]
 8013ac4:	68fb      	ldr	r3, [r7, #12]
 8013ac6:	32ae      	adds	r2, #174	@ 0xae
 8013ac8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013acc:	691b      	ldr	r3, [r3, #16]
 8013ace:	2b00      	cmp	r3, #0
 8013ad0:	d00b      	beq.n	8013aea <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8013ad2:	7dba      	ldrb	r2, [r7, #22]
 8013ad4:	68fb      	ldr	r3, [r7, #12]
 8013ad6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8013ada:	7dba      	ldrb	r2, [r7, #22]
 8013adc:	68fb      	ldr	r3, [r7, #12]
 8013ade:	32ae      	adds	r2, #174	@ 0xae
 8013ae0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013ae4:	691b      	ldr	r3, [r3, #16]
 8013ae6:	68f8      	ldr	r0, [r7, #12]
 8013ae8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8013aea:	68f8      	ldr	r0, [r7, #12]
 8013aec:	f001 f8f2 	bl	8014cd4 <USBD_CtlSendStatus>
 8013af0:	e032      	b.n	8013b58 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8013af2:	7afb      	ldrb	r3, [r7, #11]
 8013af4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013af8:	b2db      	uxtb	r3, r3
 8013afa:	4619      	mov	r1, r3
 8013afc:	68f8      	ldr	r0, [r7, #12]
 8013afe:	f000 f9a5 	bl	8013e4c <USBD_CoreFindEP>
 8013b02:	4603      	mov	r3, r0
 8013b04:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8013b06:	7dbb      	ldrb	r3, [r7, #22]
 8013b08:	2bff      	cmp	r3, #255	@ 0xff
 8013b0a:	d025      	beq.n	8013b58 <USBD_LL_DataOutStage+0x15c>
 8013b0c:	7dbb      	ldrb	r3, [r7, #22]
 8013b0e:	2b00      	cmp	r3, #0
 8013b10:	d122      	bne.n	8013b58 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013b12:	68fb      	ldr	r3, [r7, #12]
 8013b14:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013b18:	b2db      	uxtb	r3, r3
 8013b1a:	2b03      	cmp	r3, #3
 8013b1c:	d117      	bne.n	8013b4e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8013b1e:	7dba      	ldrb	r2, [r7, #22]
 8013b20:	68fb      	ldr	r3, [r7, #12]
 8013b22:	32ae      	adds	r2, #174	@ 0xae
 8013b24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013b28:	699b      	ldr	r3, [r3, #24]
 8013b2a:	2b00      	cmp	r3, #0
 8013b2c:	d00f      	beq.n	8013b4e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8013b2e:	7dba      	ldrb	r2, [r7, #22]
 8013b30:	68fb      	ldr	r3, [r7, #12]
 8013b32:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8013b36:	7dba      	ldrb	r2, [r7, #22]
 8013b38:	68fb      	ldr	r3, [r7, #12]
 8013b3a:	32ae      	adds	r2, #174	@ 0xae
 8013b3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013b40:	699b      	ldr	r3, [r3, #24]
 8013b42:	7afa      	ldrb	r2, [r7, #11]
 8013b44:	4611      	mov	r1, r2
 8013b46:	68f8      	ldr	r0, [r7, #12]
 8013b48:	4798      	blx	r3
 8013b4a:	4603      	mov	r3, r0
 8013b4c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8013b4e:	7dfb      	ldrb	r3, [r7, #23]
 8013b50:	2b00      	cmp	r3, #0
 8013b52:	d001      	beq.n	8013b58 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8013b54:	7dfb      	ldrb	r3, [r7, #23]
 8013b56:	e000      	b.n	8013b5a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8013b58:	2300      	movs	r3, #0
}
 8013b5a:	4618      	mov	r0, r3
 8013b5c:	3718      	adds	r7, #24
 8013b5e:	46bd      	mov	sp, r7
 8013b60:	bd80      	pop	{r7, pc}

08013b62 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8013b62:	b580      	push	{r7, lr}
 8013b64:	b086      	sub	sp, #24
 8013b66:	af00      	add	r7, sp, #0
 8013b68:	60f8      	str	r0, [r7, #12]
 8013b6a:	460b      	mov	r3, r1
 8013b6c:	607a      	str	r2, [r7, #4]
 8013b6e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8013b70:	7afb      	ldrb	r3, [r7, #11]
 8013b72:	2b00      	cmp	r3, #0
 8013b74:	d16f      	bne.n	8013c56 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8013b76:	68fb      	ldr	r3, [r7, #12]
 8013b78:	3314      	adds	r3, #20
 8013b7a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8013b7c:	68fb      	ldr	r3, [r7, #12]
 8013b7e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8013b82:	2b02      	cmp	r3, #2
 8013b84:	d15a      	bne.n	8013c3c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8013b86:	693b      	ldr	r3, [r7, #16]
 8013b88:	689a      	ldr	r2, [r3, #8]
 8013b8a:	693b      	ldr	r3, [r7, #16]
 8013b8c:	68db      	ldr	r3, [r3, #12]
 8013b8e:	429a      	cmp	r2, r3
 8013b90:	d914      	bls.n	8013bbc <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8013b92:	693b      	ldr	r3, [r7, #16]
 8013b94:	689a      	ldr	r2, [r3, #8]
 8013b96:	693b      	ldr	r3, [r7, #16]
 8013b98:	68db      	ldr	r3, [r3, #12]
 8013b9a:	1ad2      	subs	r2, r2, r3
 8013b9c:	693b      	ldr	r3, [r7, #16]
 8013b9e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8013ba0:	693b      	ldr	r3, [r7, #16]
 8013ba2:	689b      	ldr	r3, [r3, #8]
 8013ba4:	461a      	mov	r2, r3
 8013ba6:	6879      	ldr	r1, [r7, #4]
 8013ba8:	68f8      	ldr	r0, [r7, #12]
 8013baa:	f001 f854 	bl	8014c56 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8013bae:	2300      	movs	r3, #0
 8013bb0:	2200      	movs	r2, #0
 8013bb2:	2100      	movs	r1, #0
 8013bb4:	68f8      	ldr	r0, [r7, #12]
 8013bb6:	f005 fa23 	bl	8019000 <USBD_LL_PrepareReceive>
 8013bba:	e03f      	b.n	8013c3c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8013bbc:	693b      	ldr	r3, [r7, #16]
 8013bbe:	68da      	ldr	r2, [r3, #12]
 8013bc0:	693b      	ldr	r3, [r7, #16]
 8013bc2:	689b      	ldr	r3, [r3, #8]
 8013bc4:	429a      	cmp	r2, r3
 8013bc6:	d11c      	bne.n	8013c02 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8013bc8:	693b      	ldr	r3, [r7, #16]
 8013bca:	685a      	ldr	r2, [r3, #4]
 8013bcc:	693b      	ldr	r3, [r7, #16]
 8013bce:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8013bd0:	429a      	cmp	r2, r3
 8013bd2:	d316      	bcc.n	8013c02 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8013bd4:	693b      	ldr	r3, [r7, #16]
 8013bd6:	685a      	ldr	r2, [r3, #4]
 8013bd8:	68fb      	ldr	r3, [r7, #12]
 8013bda:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8013bde:	429a      	cmp	r2, r3
 8013be0:	d20f      	bcs.n	8013c02 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8013be2:	2200      	movs	r2, #0
 8013be4:	2100      	movs	r1, #0
 8013be6:	68f8      	ldr	r0, [r7, #12]
 8013be8:	f001 f835 	bl	8014c56 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8013bec:	68fb      	ldr	r3, [r7, #12]
 8013bee:	2200      	movs	r2, #0
 8013bf0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8013bf4:	2300      	movs	r3, #0
 8013bf6:	2200      	movs	r2, #0
 8013bf8:	2100      	movs	r1, #0
 8013bfa:	68f8      	ldr	r0, [r7, #12]
 8013bfc:	f005 fa00 	bl	8019000 <USBD_LL_PrepareReceive>
 8013c00:	e01c      	b.n	8013c3c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013c02:	68fb      	ldr	r3, [r7, #12]
 8013c04:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013c08:	b2db      	uxtb	r3, r3
 8013c0a:	2b03      	cmp	r3, #3
 8013c0c:	d10f      	bne.n	8013c2e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8013c0e:	68fb      	ldr	r3, [r7, #12]
 8013c10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013c14:	68db      	ldr	r3, [r3, #12]
 8013c16:	2b00      	cmp	r3, #0
 8013c18:	d009      	beq.n	8013c2e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8013c1a:	68fb      	ldr	r3, [r7, #12]
 8013c1c:	2200      	movs	r2, #0
 8013c1e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8013c22:	68fb      	ldr	r3, [r7, #12]
 8013c24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013c28:	68db      	ldr	r3, [r3, #12]
 8013c2a:	68f8      	ldr	r0, [r7, #12]
 8013c2c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8013c2e:	2180      	movs	r1, #128	@ 0x80
 8013c30:	68f8      	ldr	r0, [r7, #12]
 8013c32:	f005 f93b 	bl	8018eac <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8013c36:	68f8      	ldr	r0, [r7, #12]
 8013c38:	f001 f85f 	bl	8014cfa <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8013c3c:	68fb      	ldr	r3, [r7, #12]
 8013c3e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8013c42:	2b00      	cmp	r3, #0
 8013c44:	d03a      	beq.n	8013cbc <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8013c46:	68f8      	ldr	r0, [r7, #12]
 8013c48:	f7ff fe42 	bl	80138d0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8013c4c:	68fb      	ldr	r3, [r7, #12]
 8013c4e:	2200      	movs	r2, #0
 8013c50:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8013c54:	e032      	b.n	8013cbc <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8013c56:	7afb      	ldrb	r3, [r7, #11]
 8013c58:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8013c5c:	b2db      	uxtb	r3, r3
 8013c5e:	4619      	mov	r1, r3
 8013c60:	68f8      	ldr	r0, [r7, #12]
 8013c62:	f000 f8f3 	bl	8013e4c <USBD_CoreFindEP>
 8013c66:	4603      	mov	r3, r0
 8013c68:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8013c6a:	7dfb      	ldrb	r3, [r7, #23]
 8013c6c:	2bff      	cmp	r3, #255	@ 0xff
 8013c6e:	d025      	beq.n	8013cbc <USBD_LL_DataInStage+0x15a>
 8013c70:	7dfb      	ldrb	r3, [r7, #23]
 8013c72:	2b00      	cmp	r3, #0
 8013c74:	d122      	bne.n	8013cbc <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013c76:	68fb      	ldr	r3, [r7, #12]
 8013c78:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013c7c:	b2db      	uxtb	r3, r3
 8013c7e:	2b03      	cmp	r3, #3
 8013c80:	d11c      	bne.n	8013cbc <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8013c82:	7dfa      	ldrb	r2, [r7, #23]
 8013c84:	68fb      	ldr	r3, [r7, #12]
 8013c86:	32ae      	adds	r2, #174	@ 0xae
 8013c88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013c8c:	695b      	ldr	r3, [r3, #20]
 8013c8e:	2b00      	cmp	r3, #0
 8013c90:	d014      	beq.n	8013cbc <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8013c92:	7dfa      	ldrb	r2, [r7, #23]
 8013c94:	68fb      	ldr	r3, [r7, #12]
 8013c96:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8013c9a:	7dfa      	ldrb	r2, [r7, #23]
 8013c9c:	68fb      	ldr	r3, [r7, #12]
 8013c9e:	32ae      	adds	r2, #174	@ 0xae
 8013ca0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013ca4:	695b      	ldr	r3, [r3, #20]
 8013ca6:	7afa      	ldrb	r2, [r7, #11]
 8013ca8:	4611      	mov	r1, r2
 8013caa:	68f8      	ldr	r0, [r7, #12]
 8013cac:	4798      	blx	r3
 8013cae:	4603      	mov	r3, r0
 8013cb0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8013cb2:	7dbb      	ldrb	r3, [r7, #22]
 8013cb4:	2b00      	cmp	r3, #0
 8013cb6:	d001      	beq.n	8013cbc <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8013cb8:	7dbb      	ldrb	r3, [r7, #22]
 8013cba:	e000      	b.n	8013cbe <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8013cbc:	2300      	movs	r3, #0
}
 8013cbe:	4618      	mov	r0, r3
 8013cc0:	3718      	adds	r7, #24
 8013cc2:	46bd      	mov	sp, r7
 8013cc4:	bd80      	pop	{r7, pc}

08013cc6 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8013cc6:	b580      	push	{r7, lr}
 8013cc8:	b084      	sub	sp, #16
 8013cca:	af00      	add	r7, sp, #0
 8013ccc:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8013cce:	2300      	movs	r3, #0
 8013cd0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8013cd2:	687b      	ldr	r3, [r7, #4]
 8013cd4:	2201      	movs	r2, #1
 8013cd6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8013cda:	687b      	ldr	r3, [r7, #4]
 8013cdc:	2200      	movs	r2, #0
 8013cde:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8013ce2:	687b      	ldr	r3, [r7, #4]
 8013ce4:	2200      	movs	r2, #0
 8013ce6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8013ce8:	687b      	ldr	r3, [r7, #4]
 8013cea:	2200      	movs	r2, #0
 8013cec:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8013cf0:	687b      	ldr	r3, [r7, #4]
 8013cf2:	2200      	movs	r2, #0
 8013cf4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8013cf8:	687b      	ldr	r3, [r7, #4]
 8013cfa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013cfe:	2b00      	cmp	r3, #0
 8013d00:	d014      	beq.n	8013d2c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8013d02:	687b      	ldr	r3, [r7, #4]
 8013d04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013d08:	685b      	ldr	r3, [r3, #4]
 8013d0a:	2b00      	cmp	r3, #0
 8013d0c:	d00e      	beq.n	8013d2c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8013d0e:	687b      	ldr	r3, [r7, #4]
 8013d10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013d14:	685b      	ldr	r3, [r3, #4]
 8013d16:	687a      	ldr	r2, [r7, #4]
 8013d18:	6852      	ldr	r2, [r2, #4]
 8013d1a:	b2d2      	uxtb	r2, r2
 8013d1c:	4611      	mov	r1, r2
 8013d1e:	6878      	ldr	r0, [r7, #4]
 8013d20:	4798      	blx	r3
 8013d22:	4603      	mov	r3, r0
 8013d24:	2b00      	cmp	r3, #0
 8013d26:	d001      	beq.n	8013d2c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8013d28:	2303      	movs	r3, #3
 8013d2a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8013d2c:	2340      	movs	r3, #64	@ 0x40
 8013d2e:	2200      	movs	r2, #0
 8013d30:	2100      	movs	r1, #0
 8013d32:	6878      	ldr	r0, [r7, #4]
 8013d34:	f005 f875 	bl	8018e22 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8013d38:	687b      	ldr	r3, [r7, #4]
 8013d3a:	2201      	movs	r2, #1
 8013d3c:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8013d40:	687b      	ldr	r3, [r7, #4]
 8013d42:	2240      	movs	r2, #64	@ 0x40
 8013d44:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8013d48:	2340      	movs	r3, #64	@ 0x40
 8013d4a:	2200      	movs	r2, #0
 8013d4c:	2180      	movs	r1, #128	@ 0x80
 8013d4e:	6878      	ldr	r0, [r7, #4]
 8013d50:	f005 f867 	bl	8018e22 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8013d54:	687b      	ldr	r3, [r7, #4]
 8013d56:	2201      	movs	r2, #1
 8013d58:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8013d5a:	687b      	ldr	r3, [r7, #4]
 8013d5c:	2240      	movs	r2, #64	@ 0x40
 8013d5e:	621a      	str	r2, [r3, #32]

  return ret;
 8013d60:	7bfb      	ldrb	r3, [r7, #15]
}
 8013d62:	4618      	mov	r0, r3
 8013d64:	3710      	adds	r7, #16
 8013d66:	46bd      	mov	sp, r7
 8013d68:	bd80      	pop	{r7, pc}

08013d6a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8013d6a:	b480      	push	{r7}
 8013d6c:	b083      	sub	sp, #12
 8013d6e:	af00      	add	r7, sp, #0
 8013d70:	6078      	str	r0, [r7, #4]
 8013d72:	460b      	mov	r3, r1
 8013d74:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8013d76:	687b      	ldr	r3, [r7, #4]
 8013d78:	78fa      	ldrb	r2, [r7, #3]
 8013d7a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8013d7c:	2300      	movs	r3, #0
}
 8013d7e:	4618      	mov	r0, r3
 8013d80:	370c      	adds	r7, #12
 8013d82:	46bd      	mov	sp, r7
 8013d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d88:	4770      	bx	lr

08013d8a <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8013d8a:	b480      	push	{r7}
 8013d8c:	b083      	sub	sp, #12
 8013d8e:	af00      	add	r7, sp, #0
 8013d90:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8013d92:	687b      	ldr	r3, [r7, #4]
 8013d94:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013d98:	b2db      	uxtb	r3, r3
 8013d9a:	2b04      	cmp	r3, #4
 8013d9c:	d006      	beq.n	8013dac <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8013d9e:	687b      	ldr	r3, [r7, #4]
 8013da0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013da4:	b2da      	uxtb	r2, r3
 8013da6:	687b      	ldr	r3, [r7, #4]
 8013da8:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8013dac:	687b      	ldr	r3, [r7, #4]
 8013dae:	2204      	movs	r2, #4
 8013db0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8013db4:	2300      	movs	r3, #0
}
 8013db6:	4618      	mov	r0, r3
 8013db8:	370c      	adds	r7, #12
 8013dba:	46bd      	mov	sp, r7
 8013dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dc0:	4770      	bx	lr

08013dc2 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8013dc2:	b480      	push	{r7}
 8013dc4:	b083      	sub	sp, #12
 8013dc6:	af00      	add	r7, sp, #0
 8013dc8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8013dca:	687b      	ldr	r3, [r7, #4]
 8013dcc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013dd0:	b2db      	uxtb	r3, r3
 8013dd2:	2b04      	cmp	r3, #4
 8013dd4:	d106      	bne.n	8013de4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8013dd6:	687b      	ldr	r3, [r7, #4]
 8013dd8:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8013ddc:	b2da      	uxtb	r2, r3
 8013dde:	687b      	ldr	r3, [r7, #4]
 8013de0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8013de4:	2300      	movs	r3, #0
}
 8013de6:	4618      	mov	r0, r3
 8013de8:	370c      	adds	r7, #12
 8013dea:	46bd      	mov	sp, r7
 8013dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013df0:	4770      	bx	lr

08013df2 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8013df2:	b580      	push	{r7, lr}
 8013df4:	b082      	sub	sp, #8
 8013df6:	af00      	add	r7, sp, #0
 8013df8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013dfa:	687b      	ldr	r3, [r7, #4]
 8013dfc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013e00:	b2db      	uxtb	r3, r3
 8013e02:	2b03      	cmp	r3, #3
 8013e04:	d110      	bne.n	8013e28 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8013e06:	687b      	ldr	r3, [r7, #4]
 8013e08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013e0c:	2b00      	cmp	r3, #0
 8013e0e:	d00b      	beq.n	8013e28 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8013e10:	687b      	ldr	r3, [r7, #4]
 8013e12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013e16:	69db      	ldr	r3, [r3, #28]
 8013e18:	2b00      	cmp	r3, #0
 8013e1a:	d005      	beq.n	8013e28 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8013e1c:	687b      	ldr	r3, [r7, #4]
 8013e1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013e22:	69db      	ldr	r3, [r3, #28]
 8013e24:	6878      	ldr	r0, [r7, #4]
 8013e26:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8013e28:	2300      	movs	r3, #0
}
 8013e2a:	4618      	mov	r0, r3
 8013e2c:	3708      	adds	r7, #8
 8013e2e:	46bd      	mov	sp, r7
 8013e30:	bd80      	pop	{r7, pc}

08013e32 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8013e32:	b480      	push	{r7}
 8013e34:	b083      	sub	sp, #12
 8013e36:	af00      	add	r7, sp, #0
 8013e38:	6078      	str	r0, [r7, #4]
 8013e3a:	460b      	mov	r3, r1
 8013e3c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8013e3e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8013e40:	4618      	mov	r0, r3
 8013e42:	370c      	adds	r7, #12
 8013e44:	46bd      	mov	sp, r7
 8013e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e4a:	4770      	bx	lr

08013e4c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8013e4c:	b480      	push	{r7}
 8013e4e:	b083      	sub	sp, #12
 8013e50:	af00      	add	r7, sp, #0
 8013e52:	6078      	str	r0, [r7, #4]
 8013e54:	460b      	mov	r3, r1
 8013e56:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8013e58:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8013e5a:	4618      	mov	r0, r3
 8013e5c:	370c      	adds	r7, #12
 8013e5e:	46bd      	mov	sp, r7
 8013e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e64:	4770      	bx	lr

08013e66 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8013e66:	b580      	push	{r7, lr}
 8013e68:	b086      	sub	sp, #24
 8013e6a:	af00      	add	r7, sp, #0
 8013e6c:	6078      	str	r0, [r7, #4]
 8013e6e:	460b      	mov	r3, r1
 8013e70:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8013e72:	687b      	ldr	r3, [r7, #4]
 8013e74:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8013e76:	687b      	ldr	r3, [r7, #4]
 8013e78:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8013e7a:	2300      	movs	r3, #0
 8013e7c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8013e7e:	68fb      	ldr	r3, [r7, #12]
 8013e80:	885b      	ldrh	r3, [r3, #2]
 8013e82:	b29b      	uxth	r3, r3
 8013e84:	68fa      	ldr	r2, [r7, #12]
 8013e86:	7812      	ldrb	r2, [r2, #0]
 8013e88:	4293      	cmp	r3, r2
 8013e8a:	d91f      	bls.n	8013ecc <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8013e8c:	68fb      	ldr	r3, [r7, #12]
 8013e8e:	781b      	ldrb	r3, [r3, #0]
 8013e90:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8013e92:	e013      	b.n	8013ebc <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8013e94:	f107 030a 	add.w	r3, r7, #10
 8013e98:	4619      	mov	r1, r3
 8013e9a:	6978      	ldr	r0, [r7, #20]
 8013e9c:	f000 f81b 	bl	8013ed6 <USBD_GetNextDesc>
 8013ea0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8013ea2:	697b      	ldr	r3, [r7, #20]
 8013ea4:	785b      	ldrb	r3, [r3, #1]
 8013ea6:	2b05      	cmp	r3, #5
 8013ea8:	d108      	bne.n	8013ebc <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8013eaa:	697b      	ldr	r3, [r7, #20]
 8013eac:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8013eae:	693b      	ldr	r3, [r7, #16]
 8013eb0:	789b      	ldrb	r3, [r3, #2]
 8013eb2:	78fa      	ldrb	r2, [r7, #3]
 8013eb4:	429a      	cmp	r2, r3
 8013eb6:	d008      	beq.n	8013eca <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8013eb8:	2300      	movs	r3, #0
 8013eba:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8013ebc:	68fb      	ldr	r3, [r7, #12]
 8013ebe:	885b      	ldrh	r3, [r3, #2]
 8013ec0:	b29a      	uxth	r2, r3
 8013ec2:	897b      	ldrh	r3, [r7, #10]
 8013ec4:	429a      	cmp	r2, r3
 8013ec6:	d8e5      	bhi.n	8013e94 <USBD_GetEpDesc+0x2e>
 8013ec8:	e000      	b.n	8013ecc <USBD_GetEpDesc+0x66>
          break;
 8013eca:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8013ecc:	693b      	ldr	r3, [r7, #16]
}
 8013ece:	4618      	mov	r0, r3
 8013ed0:	3718      	adds	r7, #24
 8013ed2:	46bd      	mov	sp, r7
 8013ed4:	bd80      	pop	{r7, pc}

08013ed6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8013ed6:	b480      	push	{r7}
 8013ed8:	b085      	sub	sp, #20
 8013eda:	af00      	add	r7, sp, #0
 8013edc:	6078      	str	r0, [r7, #4]
 8013ede:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8013ee0:	687b      	ldr	r3, [r7, #4]
 8013ee2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8013ee4:	683b      	ldr	r3, [r7, #0]
 8013ee6:	881b      	ldrh	r3, [r3, #0]
 8013ee8:	68fa      	ldr	r2, [r7, #12]
 8013eea:	7812      	ldrb	r2, [r2, #0]
 8013eec:	4413      	add	r3, r2
 8013eee:	b29a      	uxth	r2, r3
 8013ef0:	683b      	ldr	r3, [r7, #0]
 8013ef2:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8013ef4:	68fb      	ldr	r3, [r7, #12]
 8013ef6:	781b      	ldrb	r3, [r3, #0]
 8013ef8:	461a      	mov	r2, r3
 8013efa:	687b      	ldr	r3, [r7, #4]
 8013efc:	4413      	add	r3, r2
 8013efe:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8013f00:	68fb      	ldr	r3, [r7, #12]
}
 8013f02:	4618      	mov	r0, r3
 8013f04:	3714      	adds	r7, #20
 8013f06:	46bd      	mov	sp, r7
 8013f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f0c:	4770      	bx	lr

08013f0e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8013f0e:	b480      	push	{r7}
 8013f10:	b087      	sub	sp, #28
 8013f12:	af00      	add	r7, sp, #0
 8013f14:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8013f16:	687b      	ldr	r3, [r7, #4]
 8013f18:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8013f1a:	697b      	ldr	r3, [r7, #20]
 8013f1c:	781b      	ldrb	r3, [r3, #0]
 8013f1e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8013f20:	697b      	ldr	r3, [r7, #20]
 8013f22:	3301      	adds	r3, #1
 8013f24:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8013f26:	697b      	ldr	r3, [r7, #20]
 8013f28:	781b      	ldrb	r3, [r3, #0]
 8013f2a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8013f2c:	8a3b      	ldrh	r3, [r7, #16]
 8013f2e:	021b      	lsls	r3, r3, #8
 8013f30:	b21a      	sxth	r2, r3
 8013f32:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8013f36:	4313      	orrs	r3, r2
 8013f38:	b21b      	sxth	r3, r3
 8013f3a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8013f3c:	89fb      	ldrh	r3, [r7, #14]
}
 8013f3e:	4618      	mov	r0, r3
 8013f40:	371c      	adds	r7, #28
 8013f42:	46bd      	mov	sp, r7
 8013f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f48:	4770      	bx	lr
	...

08013f4c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013f4c:	b580      	push	{r7, lr}
 8013f4e:	b084      	sub	sp, #16
 8013f50:	af00      	add	r7, sp, #0
 8013f52:	6078      	str	r0, [r7, #4]
 8013f54:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8013f56:	2300      	movs	r3, #0
 8013f58:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8013f5a:	683b      	ldr	r3, [r7, #0]
 8013f5c:	781b      	ldrb	r3, [r3, #0]
 8013f5e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8013f62:	2b40      	cmp	r3, #64	@ 0x40
 8013f64:	d005      	beq.n	8013f72 <USBD_StdDevReq+0x26>
 8013f66:	2b40      	cmp	r3, #64	@ 0x40
 8013f68:	d857      	bhi.n	801401a <USBD_StdDevReq+0xce>
 8013f6a:	2b00      	cmp	r3, #0
 8013f6c:	d00f      	beq.n	8013f8e <USBD_StdDevReq+0x42>
 8013f6e:	2b20      	cmp	r3, #32
 8013f70:	d153      	bne.n	801401a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8013f72:	687b      	ldr	r3, [r7, #4]
 8013f74:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013f78:	687b      	ldr	r3, [r7, #4]
 8013f7a:	32ae      	adds	r2, #174	@ 0xae
 8013f7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013f80:	689b      	ldr	r3, [r3, #8]
 8013f82:	6839      	ldr	r1, [r7, #0]
 8013f84:	6878      	ldr	r0, [r7, #4]
 8013f86:	4798      	blx	r3
 8013f88:	4603      	mov	r3, r0
 8013f8a:	73fb      	strb	r3, [r7, #15]
      break;
 8013f8c:	e04a      	b.n	8014024 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8013f8e:	683b      	ldr	r3, [r7, #0]
 8013f90:	785b      	ldrb	r3, [r3, #1]
 8013f92:	2b09      	cmp	r3, #9
 8013f94:	d83b      	bhi.n	801400e <USBD_StdDevReq+0xc2>
 8013f96:	a201      	add	r2, pc, #4	@ (adr r2, 8013f9c <USBD_StdDevReq+0x50>)
 8013f98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013f9c:	08013ff1 	.word	0x08013ff1
 8013fa0:	08014005 	.word	0x08014005
 8013fa4:	0801400f 	.word	0x0801400f
 8013fa8:	08013ffb 	.word	0x08013ffb
 8013fac:	0801400f 	.word	0x0801400f
 8013fb0:	08013fcf 	.word	0x08013fcf
 8013fb4:	08013fc5 	.word	0x08013fc5
 8013fb8:	0801400f 	.word	0x0801400f
 8013fbc:	08013fe7 	.word	0x08013fe7
 8013fc0:	08013fd9 	.word	0x08013fd9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8013fc4:	6839      	ldr	r1, [r7, #0]
 8013fc6:	6878      	ldr	r0, [r7, #4]
 8013fc8:	f000 fa3c 	bl	8014444 <USBD_GetDescriptor>
          break;
 8013fcc:	e024      	b.n	8014018 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8013fce:	6839      	ldr	r1, [r7, #0]
 8013fd0:	6878      	ldr	r0, [r7, #4]
 8013fd2:	f000 fbcb 	bl	801476c <USBD_SetAddress>
          break;
 8013fd6:	e01f      	b.n	8014018 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8013fd8:	6839      	ldr	r1, [r7, #0]
 8013fda:	6878      	ldr	r0, [r7, #4]
 8013fdc:	f000 fc0a 	bl	80147f4 <USBD_SetConfig>
 8013fe0:	4603      	mov	r3, r0
 8013fe2:	73fb      	strb	r3, [r7, #15]
          break;
 8013fe4:	e018      	b.n	8014018 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8013fe6:	6839      	ldr	r1, [r7, #0]
 8013fe8:	6878      	ldr	r0, [r7, #4]
 8013fea:	f000 fcad 	bl	8014948 <USBD_GetConfig>
          break;
 8013fee:	e013      	b.n	8014018 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8013ff0:	6839      	ldr	r1, [r7, #0]
 8013ff2:	6878      	ldr	r0, [r7, #4]
 8013ff4:	f000 fcde 	bl	80149b4 <USBD_GetStatus>
          break;
 8013ff8:	e00e      	b.n	8014018 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8013ffa:	6839      	ldr	r1, [r7, #0]
 8013ffc:	6878      	ldr	r0, [r7, #4]
 8013ffe:	f000 fd0d 	bl	8014a1c <USBD_SetFeature>
          break;
 8014002:	e009      	b.n	8014018 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8014004:	6839      	ldr	r1, [r7, #0]
 8014006:	6878      	ldr	r0, [r7, #4]
 8014008:	f000 fd31 	bl	8014a6e <USBD_ClrFeature>
          break;
 801400c:	e004      	b.n	8014018 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 801400e:	6839      	ldr	r1, [r7, #0]
 8014010:	6878      	ldr	r0, [r7, #4]
 8014012:	f000 fd88 	bl	8014b26 <USBD_CtlError>
          break;
 8014016:	bf00      	nop
      }
      break;
 8014018:	e004      	b.n	8014024 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 801401a:	6839      	ldr	r1, [r7, #0]
 801401c:	6878      	ldr	r0, [r7, #4]
 801401e:	f000 fd82 	bl	8014b26 <USBD_CtlError>
      break;
 8014022:	bf00      	nop
  }

  return ret;
 8014024:	7bfb      	ldrb	r3, [r7, #15]
}
 8014026:	4618      	mov	r0, r3
 8014028:	3710      	adds	r7, #16
 801402a:	46bd      	mov	sp, r7
 801402c:	bd80      	pop	{r7, pc}
 801402e:	bf00      	nop

08014030 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014030:	b580      	push	{r7, lr}
 8014032:	b084      	sub	sp, #16
 8014034:	af00      	add	r7, sp, #0
 8014036:	6078      	str	r0, [r7, #4]
 8014038:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801403a:	2300      	movs	r3, #0
 801403c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801403e:	683b      	ldr	r3, [r7, #0]
 8014040:	781b      	ldrb	r3, [r3, #0]
 8014042:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8014046:	2b40      	cmp	r3, #64	@ 0x40
 8014048:	d005      	beq.n	8014056 <USBD_StdItfReq+0x26>
 801404a:	2b40      	cmp	r3, #64	@ 0x40
 801404c:	d852      	bhi.n	80140f4 <USBD_StdItfReq+0xc4>
 801404e:	2b00      	cmp	r3, #0
 8014050:	d001      	beq.n	8014056 <USBD_StdItfReq+0x26>
 8014052:	2b20      	cmp	r3, #32
 8014054:	d14e      	bne.n	80140f4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8014056:	687b      	ldr	r3, [r7, #4]
 8014058:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801405c:	b2db      	uxtb	r3, r3
 801405e:	3b01      	subs	r3, #1
 8014060:	2b02      	cmp	r3, #2
 8014062:	d840      	bhi.n	80140e6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8014064:	683b      	ldr	r3, [r7, #0]
 8014066:	889b      	ldrh	r3, [r3, #4]
 8014068:	b2db      	uxtb	r3, r3
 801406a:	2b01      	cmp	r3, #1
 801406c:	d836      	bhi.n	80140dc <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 801406e:	683b      	ldr	r3, [r7, #0]
 8014070:	889b      	ldrh	r3, [r3, #4]
 8014072:	b2db      	uxtb	r3, r3
 8014074:	4619      	mov	r1, r3
 8014076:	6878      	ldr	r0, [r7, #4]
 8014078:	f7ff fedb 	bl	8013e32 <USBD_CoreFindIF>
 801407c:	4603      	mov	r3, r0
 801407e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8014080:	7bbb      	ldrb	r3, [r7, #14]
 8014082:	2bff      	cmp	r3, #255	@ 0xff
 8014084:	d01d      	beq.n	80140c2 <USBD_StdItfReq+0x92>
 8014086:	7bbb      	ldrb	r3, [r7, #14]
 8014088:	2b00      	cmp	r3, #0
 801408a:	d11a      	bne.n	80140c2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 801408c:	7bba      	ldrb	r2, [r7, #14]
 801408e:	687b      	ldr	r3, [r7, #4]
 8014090:	32ae      	adds	r2, #174	@ 0xae
 8014092:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014096:	689b      	ldr	r3, [r3, #8]
 8014098:	2b00      	cmp	r3, #0
 801409a:	d00f      	beq.n	80140bc <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 801409c:	7bba      	ldrb	r2, [r7, #14]
 801409e:	687b      	ldr	r3, [r7, #4]
 80140a0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80140a4:	7bba      	ldrb	r2, [r7, #14]
 80140a6:	687b      	ldr	r3, [r7, #4]
 80140a8:	32ae      	adds	r2, #174	@ 0xae
 80140aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80140ae:	689b      	ldr	r3, [r3, #8]
 80140b0:	6839      	ldr	r1, [r7, #0]
 80140b2:	6878      	ldr	r0, [r7, #4]
 80140b4:	4798      	blx	r3
 80140b6:	4603      	mov	r3, r0
 80140b8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80140ba:	e004      	b.n	80140c6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80140bc:	2303      	movs	r3, #3
 80140be:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80140c0:	e001      	b.n	80140c6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80140c2:	2303      	movs	r3, #3
 80140c4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80140c6:	683b      	ldr	r3, [r7, #0]
 80140c8:	88db      	ldrh	r3, [r3, #6]
 80140ca:	2b00      	cmp	r3, #0
 80140cc:	d110      	bne.n	80140f0 <USBD_StdItfReq+0xc0>
 80140ce:	7bfb      	ldrb	r3, [r7, #15]
 80140d0:	2b00      	cmp	r3, #0
 80140d2:	d10d      	bne.n	80140f0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80140d4:	6878      	ldr	r0, [r7, #4]
 80140d6:	f000 fdfd 	bl	8014cd4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80140da:	e009      	b.n	80140f0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80140dc:	6839      	ldr	r1, [r7, #0]
 80140de:	6878      	ldr	r0, [r7, #4]
 80140e0:	f000 fd21 	bl	8014b26 <USBD_CtlError>
          break;
 80140e4:	e004      	b.n	80140f0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80140e6:	6839      	ldr	r1, [r7, #0]
 80140e8:	6878      	ldr	r0, [r7, #4]
 80140ea:	f000 fd1c 	bl	8014b26 <USBD_CtlError>
          break;
 80140ee:	e000      	b.n	80140f2 <USBD_StdItfReq+0xc2>
          break;
 80140f0:	bf00      	nop
      }
      break;
 80140f2:	e004      	b.n	80140fe <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80140f4:	6839      	ldr	r1, [r7, #0]
 80140f6:	6878      	ldr	r0, [r7, #4]
 80140f8:	f000 fd15 	bl	8014b26 <USBD_CtlError>
      break;
 80140fc:	bf00      	nop
  }

  return ret;
 80140fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8014100:	4618      	mov	r0, r3
 8014102:	3710      	adds	r7, #16
 8014104:	46bd      	mov	sp, r7
 8014106:	bd80      	pop	{r7, pc}

08014108 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014108:	b580      	push	{r7, lr}
 801410a:	b084      	sub	sp, #16
 801410c:	af00      	add	r7, sp, #0
 801410e:	6078      	str	r0, [r7, #4]
 8014110:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8014112:	2300      	movs	r3, #0
 8014114:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8014116:	683b      	ldr	r3, [r7, #0]
 8014118:	889b      	ldrh	r3, [r3, #4]
 801411a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801411c:	683b      	ldr	r3, [r7, #0]
 801411e:	781b      	ldrb	r3, [r3, #0]
 8014120:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8014124:	2b40      	cmp	r3, #64	@ 0x40
 8014126:	d007      	beq.n	8014138 <USBD_StdEPReq+0x30>
 8014128:	2b40      	cmp	r3, #64	@ 0x40
 801412a:	f200 817f 	bhi.w	801442c <USBD_StdEPReq+0x324>
 801412e:	2b00      	cmp	r3, #0
 8014130:	d02a      	beq.n	8014188 <USBD_StdEPReq+0x80>
 8014132:	2b20      	cmp	r3, #32
 8014134:	f040 817a 	bne.w	801442c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8014138:	7bbb      	ldrb	r3, [r7, #14]
 801413a:	4619      	mov	r1, r3
 801413c:	6878      	ldr	r0, [r7, #4]
 801413e:	f7ff fe85 	bl	8013e4c <USBD_CoreFindEP>
 8014142:	4603      	mov	r3, r0
 8014144:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8014146:	7b7b      	ldrb	r3, [r7, #13]
 8014148:	2bff      	cmp	r3, #255	@ 0xff
 801414a:	f000 8174 	beq.w	8014436 <USBD_StdEPReq+0x32e>
 801414e:	7b7b      	ldrb	r3, [r7, #13]
 8014150:	2b00      	cmp	r3, #0
 8014152:	f040 8170 	bne.w	8014436 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8014156:	7b7a      	ldrb	r2, [r7, #13]
 8014158:	687b      	ldr	r3, [r7, #4]
 801415a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 801415e:	7b7a      	ldrb	r2, [r7, #13]
 8014160:	687b      	ldr	r3, [r7, #4]
 8014162:	32ae      	adds	r2, #174	@ 0xae
 8014164:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014168:	689b      	ldr	r3, [r3, #8]
 801416a:	2b00      	cmp	r3, #0
 801416c:	f000 8163 	beq.w	8014436 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8014170:	7b7a      	ldrb	r2, [r7, #13]
 8014172:	687b      	ldr	r3, [r7, #4]
 8014174:	32ae      	adds	r2, #174	@ 0xae
 8014176:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801417a:	689b      	ldr	r3, [r3, #8]
 801417c:	6839      	ldr	r1, [r7, #0]
 801417e:	6878      	ldr	r0, [r7, #4]
 8014180:	4798      	blx	r3
 8014182:	4603      	mov	r3, r0
 8014184:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8014186:	e156      	b.n	8014436 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8014188:	683b      	ldr	r3, [r7, #0]
 801418a:	785b      	ldrb	r3, [r3, #1]
 801418c:	2b03      	cmp	r3, #3
 801418e:	d008      	beq.n	80141a2 <USBD_StdEPReq+0x9a>
 8014190:	2b03      	cmp	r3, #3
 8014192:	f300 8145 	bgt.w	8014420 <USBD_StdEPReq+0x318>
 8014196:	2b00      	cmp	r3, #0
 8014198:	f000 809b 	beq.w	80142d2 <USBD_StdEPReq+0x1ca>
 801419c:	2b01      	cmp	r3, #1
 801419e:	d03c      	beq.n	801421a <USBD_StdEPReq+0x112>
 80141a0:	e13e      	b.n	8014420 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80141a2:	687b      	ldr	r3, [r7, #4]
 80141a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80141a8:	b2db      	uxtb	r3, r3
 80141aa:	2b02      	cmp	r3, #2
 80141ac:	d002      	beq.n	80141b4 <USBD_StdEPReq+0xac>
 80141ae:	2b03      	cmp	r3, #3
 80141b0:	d016      	beq.n	80141e0 <USBD_StdEPReq+0xd8>
 80141b2:	e02c      	b.n	801420e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80141b4:	7bbb      	ldrb	r3, [r7, #14]
 80141b6:	2b00      	cmp	r3, #0
 80141b8:	d00d      	beq.n	80141d6 <USBD_StdEPReq+0xce>
 80141ba:	7bbb      	ldrb	r3, [r7, #14]
 80141bc:	2b80      	cmp	r3, #128	@ 0x80
 80141be:	d00a      	beq.n	80141d6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80141c0:	7bbb      	ldrb	r3, [r7, #14]
 80141c2:	4619      	mov	r1, r3
 80141c4:	6878      	ldr	r0, [r7, #4]
 80141c6:	f004 fe71 	bl	8018eac <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80141ca:	2180      	movs	r1, #128	@ 0x80
 80141cc:	6878      	ldr	r0, [r7, #4]
 80141ce:	f004 fe6d 	bl	8018eac <USBD_LL_StallEP>
 80141d2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80141d4:	e020      	b.n	8014218 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80141d6:	6839      	ldr	r1, [r7, #0]
 80141d8:	6878      	ldr	r0, [r7, #4]
 80141da:	f000 fca4 	bl	8014b26 <USBD_CtlError>
              break;
 80141de:	e01b      	b.n	8014218 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80141e0:	683b      	ldr	r3, [r7, #0]
 80141e2:	885b      	ldrh	r3, [r3, #2]
 80141e4:	2b00      	cmp	r3, #0
 80141e6:	d10e      	bne.n	8014206 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80141e8:	7bbb      	ldrb	r3, [r7, #14]
 80141ea:	2b00      	cmp	r3, #0
 80141ec:	d00b      	beq.n	8014206 <USBD_StdEPReq+0xfe>
 80141ee:	7bbb      	ldrb	r3, [r7, #14]
 80141f0:	2b80      	cmp	r3, #128	@ 0x80
 80141f2:	d008      	beq.n	8014206 <USBD_StdEPReq+0xfe>
 80141f4:	683b      	ldr	r3, [r7, #0]
 80141f6:	88db      	ldrh	r3, [r3, #6]
 80141f8:	2b00      	cmp	r3, #0
 80141fa:	d104      	bne.n	8014206 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80141fc:	7bbb      	ldrb	r3, [r7, #14]
 80141fe:	4619      	mov	r1, r3
 8014200:	6878      	ldr	r0, [r7, #4]
 8014202:	f004 fe53 	bl	8018eac <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8014206:	6878      	ldr	r0, [r7, #4]
 8014208:	f000 fd64 	bl	8014cd4 <USBD_CtlSendStatus>

              break;
 801420c:	e004      	b.n	8014218 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 801420e:	6839      	ldr	r1, [r7, #0]
 8014210:	6878      	ldr	r0, [r7, #4]
 8014212:	f000 fc88 	bl	8014b26 <USBD_CtlError>
              break;
 8014216:	bf00      	nop
          }
          break;
 8014218:	e107      	b.n	801442a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 801421a:	687b      	ldr	r3, [r7, #4]
 801421c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014220:	b2db      	uxtb	r3, r3
 8014222:	2b02      	cmp	r3, #2
 8014224:	d002      	beq.n	801422c <USBD_StdEPReq+0x124>
 8014226:	2b03      	cmp	r3, #3
 8014228:	d016      	beq.n	8014258 <USBD_StdEPReq+0x150>
 801422a:	e04b      	b.n	80142c4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801422c:	7bbb      	ldrb	r3, [r7, #14]
 801422e:	2b00      	cmp	r3, #0
 8014230:	d00d      	beq.n	801424e <USBD_StdEPReq+0x146>
 8014232:	7bbb      	ldrb	r3, [r7, #14]
 8014234:	2b80      	cmp	r3, #128	@ 0x80
 8014236:	d00a      	beq.n	801424e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8014238:	7bbb      	ldrb	r3, [r7, #14]
 801423a:	4619      	mov	r1, r3
 801423c:	6878      	ldr	r0, [r7, #4]
 801423e:	f004 fe35 	bl	8018eac <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8014242:	2180      	movs	r1, #128	@ 0x80
 8014244:	6878      	ldr	r0, [r7, #4]
 8014246:	f004 fe31 	bl	8018eac <USBD_LL_StallEP>
 801424a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801424c:	e040      	b.n	80142d0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 801424e:	6839      	ldr	r1, [r7, #0]
 8014250:	6878      	ldr	r0, [r7, #4]
 8014252:	f000 fc68 	bl	8014b26 <USBD_CtlError>
              break;
 8014256:	e03b      	b.n	80142d0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8014258:	683b      	ldr	r3, [r7, #0]
 801425a:	885b      	ldrh	r3, [r3, #2]
 801425c:	2b00      	cmp	r3, #0
 801425e:	d136      	bne.n	80142ce <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8014260:	7bbb      	ldrb	r3, [r7, #14]
 8014262:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8014266:	2b00      	cmp	r3, #0
 8014268:	d004      	beq.n	8014274 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 801426a:	7bbb      	ldrb	r3, [r7, #14]
 801426c:	4619      	mov	r1, r3
 801426e:	6878      	ldr	r0, [r7, #4]
 8014270:	f004 fe3b 	bl	8018eea <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8014274:	6878      	ldr	r0, [r7, #4]
 8014276:	f000 fd2d 	bl	8014cd4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 801427a:	7bbb      	ldrb	r3, [r7, #14]
 801427c:	4619      	mov	r1, r3
 801427e:	6878      	ldr	r0, [r7, #4]
 8014280:	f7ff fde4 	bl	8013e4c <USBD_CoreFindEP>
 8014284:	4603      	mov	r3, r0
 8014286:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8014288:	7b7b      	ldrb	r3, [r7, #13]
 801428a:	2bff      	cmp	r3, #255	@ 0xff
 801428c:	d01f      	beq.n	80142ce <USBD_StdEPReq+0x1c6>
 801428e:	7b7b      	ldrb	r3, [r7, #13]
 8014290:	2b00      	cmp	r3, #0
 8014292:	d11c      	bne.n	80142ce <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8014294:	7b7a      	ldrb	r2, [r7, #13]
 8014296:	687b      	ldr	r3, [r7, #4]
 8014298:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 801429c:	7b7a      	ldrb	r2, [r7, #13]
 801429e:	687b      	ldr	r3, [r7, #4]
 80142a0:	32ae      	adds	r2, #174	@ 0xae
 80142a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80142a6:	689b      	ldr	r3, [r3, #8]
 80142a8:	2b00      	cmp	r3, #0
 80142aa:	d010      	beq.n	80142ce <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80142ac:	7b7a      	ldrb	r2, [r7, #13]
 80142ae:	687b      	ldr	r3, [r7, #4]
 80142b0:	32ae      	adds	r2, #174	@ 0xae
 80142b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80142b6:	689b      	ldr	r3, [r3, #8]
 80142b8:	6839      	ldr	r1, [r7, #0]
 80142ba:	6878      	ldr	r0, [r7, #4]
 80142bc:	4798      	blx	r3
 80142be:	4603      	mov	r3, r0
 80142c0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80142c2:	e004      	b.n	80142ce <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80142c4:	6839      	ldr	r1, [r7, #0]
 80142c6:	6878      	ldr	r0, [r7, #4]
 80142c8:	f000 fc2d 	bl	8014b26 <USBD_CtlError>
              break;
 80142cc:	e000      	b.n	80142d0 <USBD_StdEPReq+0x1c8>
              break;
 80142ce:	bf00      	nop
          }
          break;
 80142d0:	e0ab      	b.n	801442a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80142d2:	687b      	ldr	r3, [r7, #4]
 80142d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80142d8:	b2db      	uxtb	r3, r3
 80142da:	2b02      	cmp	r3, #2
 80142dc:	d002      	beq.n	80142e4 <USBD_StdEPReq+0x1dc>
 80142de:	2b03      	cmp	r3, #3
 80142e0:	d032      	beq.n	8014348 <USBD_StdEPReq+0x240>
 80142e2:	e097      	b.n	8014414 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80142e4:	7bbb      	ldrb	r3, [r7, #14]
 80142e6:	2b00      	cmp	r3, #0
 80142e8:	d007      	beq.n	80142fa <USBD_StdEPReq+0x1f2>
 80142ea:	7bbb      	ldrb	r3, [r7, #14]
 80142ec:	2b80      	cmp	r3, #128	@ 0x80
 80142ee:	d004      	beq.n	80142fa <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80142f0:	6839      	ldr	r1, [r7, #0]
 80142f2:	6878      	ldr	r0, [r7, #4]
 80142f4:	f000 fc17 	bl	8014b26 <USBD_CtlError>
                break;
 80142f8:	e091      	b.n	801441e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80142fa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80142fe:	2b00      	cmp	r3, #0
 8014300:	da0b      	bge.n	801431a <USBD_StdEPReq+0x212>
 8014302:	7bbb      	ldrb	r3, [r7, #14]
 8014304:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8014308:	4613      	mov	r3, r2
 801430a:	009b      	lsls	r3, r3, #2
 801430c:	4413      	add	r3, r2
 801430e:	009b      	lsls	r3, r3, #2
 8014310:	3310      	adds	r3, #16
 8014312:	687a      	ldr	r2, [r7, #4]
 8014314:	4413      	add	r3, r2
 8014316:	3304      	adds	r3, #4
 8014318:	e00b      	b.n	8014332 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801431a:	7bbb      	ldrb	r3, [r7, #14]
 801431c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014320:	4613      	mov	r3, r2
 8014322:	009b      	lsls	r3, r3, #2
 8014324:	4413      	add	r3, r2
 8014326:	009b      	lsls	r3, r3, #2
 8014328:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 801432c:	687a      	ldr	r2, [r7, #4]
 801432e:	4413      	add	r3, r2
 8014330:	3304      	adds	r3, #4
 8014332:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8014334:	68bb      	ldr	r3, [r7, #8]
 8014336:	2200      	movs	r2, #0
 8014338:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801433a:	68bb      	ldr	r3, [r7, #8]
 801433c:	2202      	movs	r2, #2
 801433e:	4619      	mov	r1, r3
 8014340:	6878      	ldr	r0, [r7, #4]
 8014342:	f000 fc6d 	bl	8014c20 <USBD_CtlSendData>
              break;
 8014346:	e06a      	b.n	801441e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8014348:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801434c:	2b00      	cmp	r3, #0
 801434e:	da11      	bge.n	8014374 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8014350:	7bbb      	ldrb	r3, [r7, #14]
 8014352:	f003 020f 	and.w	r2, r3, #15
 8014356:	6879      	ldr	r1, [r7, #4]
 8014358:	4613      	mov	r3, r2
 801435a:	009b      	lsls	r3, r3, #2
 801435c:	4413      	add	r3, r2
 801435e:	009b      	lsls	r3, r3, #2
 8014360:	440b      	add	r3, r1
 8014362:	3324      	adds	r3, #36	@ 0x24
 8014364:	881b      	ldrh	r3, [r3, #0]
 8014366:	2b00      	cmp	r3, #0
 8014368:	d117      	bne.n	801439a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 801436a:	6839      	ldr	r1, [r7, #0]
 801436c:	6878      	ldr	r0, [r7, #4]
 801436e:	f000 fbda 	bl	8014b26 <USBD_CtlError>
                  break;
 8014372:	e054      	b.n	801441e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8014374:	7bbb      	ldrb	r3, [r7, #14]
 8014376:	f003 020f 	and.w	r2, r3, #15
 801437a:	6879      	ldr	r1, [r7, #4]
 801437c:	4613      	mov	r3, r2
 801437e:	009b      	lsls	r3, r3, #2
 8014380:	4413      	add	r3, r2
 8014382:	009b      	lsls	r3, r3, #2
 8014384:	440b      	add	r3, r1
 8014386:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 801438a:	881b      	ldrh	r3, [r3, #0]
 801438c:	2b00      	cmp	r3, #0
 801438e:	d104      	bne.n	801439a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8014390:	6839      	ldr	r1, [r7, #0]
 8014392:	6878      	ldr	r0, [r7, #4]
 8014394:	f000 fbc7 	bl	8014b26 <USBD_CtlError>
                  break;
 8014398:	e041      	b.n	801441e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801439a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801439e:	2b00      	cmp	r3, #0
 80143a0:	da0b      	bge.n	80143ba <USBD_StdEPReq+0x2b2>
 80143a2:	7bbb      	ldrb	r3, [r7, #14]
 80143a4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80143a8:	4613      	mov	r3, r2
 80143aa:	009b      	lsls	r3, r3, #2
 80143ac:	4413      	add	r3, r2
 80143ae:	009b      	lsls	r3, r3, #2
 80143b0:	3310      	adds	r3, #16
 80143b2:	687a      	ldr	r2, [r7, #4]
 80143b4:	4413      	add	r3, r2
 80143b6:	3304      	adds	r3, #4
 80143b8:	e00b      	b.n	80143d2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80143ba:	7bbb      	ldrb	r3, [r7, #14]
 80143bc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80143c0:	4613      	mov	r3, r2
 80143c2:	009b      	lsls	r3, r3, #2
 80143c4:	4413      	add	r3, r2
 80143c6:	009b      	lsls	r3, r3, #2
 80143c8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80143cc:	687a      	ldr	r2, [r7, #4]
 80143ce:	4413      	add	r3, r2
 80143d0:	3304      	adds	r3, #4
 80143d2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80143d4:	7bbb      	ldrb	r3, [r7, #14]
 80143d6:	2b00      	cmp	r3, #0
 80143d8:	d002      	beq.n	80143e0 <USBD_StdEPReq+0x2d8>
 80143da:	7bbb      	ldrb	r3, [r7, #14]
 80143dc:	2b80      	cmp	r3, #128	@ 0x80
 80143de:	d103      	bne.n	80143e8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80143e0:	68bb      	ldr	r3, [r7, #8]
 80143e2:	2200      	movs	r2, #0
 80143e4:	601a      	str	r2, [r3, #0]
 80143e6:	e00e      	b.n	8014406 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80143e8:	7bbb      	ldrb	r3, [r7, #14]
 80143ea:	4619      	mov	r1, r3
 80143ec:	6878      	ldr	r0, [r7, #4]
 80143ee:	f004 fd9b 	bl	8018f28 <USBD_LL_IsStallEP>
 80143f2:	4603      	mov	r3, r0
 80143f4:	2b00      	cmp	r3, #0
 80143f6:	d003      	beq.n	8014400 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80143f8:	68bb      	ldr	r3, [r7, #8]
 80143fa:	2201      	movs	r2, #1
 80143fc:	601a      	str	r2, [r3, #0]
 80143fe:	e002      	b.n	8014406 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8014400:	68bb      	ldr	r3, [r7, #8]
 8014402:	2200      	movs	r2, #0
 8014404:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8014406:	68bb      	ldr	r3, [r7, #8]
 8014408:	2202      	movs	r2, #2
 801440a:	4619      	mov	r1, r3
 801440c:	6878      	ldr	r0, [r7, #4]
 801440e:	f000 fc07 	bl	8014c20 <USBD_CtlSendData>
              break;
 8014412:	e004      	b.n	801441e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8014414:	6839      	ldr	r1, [r7, #0]
 8014416:	6878      	ldr	r0, [r7, #4]
 8014418:	f000 fb85 	bl	8014b26 <USBD_CtlError>
              break;
 801441c:	bf00      	nop
          }
          break;
 801441e:	e004      	b.n	801442a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8014420:	6839      	ldr	r1, [r7, #0]
 8014422:	6878      	ldr	r0, [r7, #4]
 8014424:	f000 fb7f 	bl	8014b26 <USBD_CtlError>
          break;
 8014428:	bf00      	nop
      }
      break;
 801442a:	e005      	b.n	8014438 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 801442c:	6839      	ldr	r1, [r7, #0]
 801442e:	6878      	ldr	r0, [r7, #4]
 8014430:	f000 fb79 	bl	8014b26 <USBD_CtlError>
      break;
 8014434:	e000      	b.n	8014438 <USBD_StdEPReq+0x330>
      break;
 8014436:	bf00      	nop
  }

  return ret;
 8014438:	7bfb      	ldrb	r3, [r7, #15]
}
 801443a:	4618      	mov	r0, r3
 801443c:	3710      	adds	r7, #16
 801443e:	46bd      	mov	sp, r7
 8014440:	bd80      	pop	{r7, pc}
	...

08014444 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014444:	b580      	push	{r7, lr}
 8014446:	b084      	sub	sp, #16
 8014448:	af00      	add	r7, sp, #0
 801444a:	6078      	str	r0, [r7, #4]
 801444c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801444e:	2300      	movs	r3, #0
 8014450:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8014452:	2300      	movs	r3, #0
 8014454:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8014456:	2300      	movs	r3, #0
 8014458:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 801445a:	683b      	ldr	r3, [r7, #0]
 801445c:	885b      	ldrh	r3, [r3, #2]
 801445e:	0a1b      	lsrs	r3, r3, #8
 8014460:	b29b      	uxth	r3, r3
 8014462:	3b01      	subs	r3, #1
 8014464:	2b0e      	cmp	r3, #14
 8014466:	f200 8152 	bhi.w	801470e <USBD_GetDescriptor+0x2ca>
 801446a:	a201      	add	r2, pc, #4	@ (adr r2, 8014470 <USBD_GetDescriptor+0x2c>)
 801446c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014470:	080144e1 	.word	0x080144e1
 8014474:	080144f9 	.word	0x080144f9
 8014478:	08014539 	.word	0x08014539
 801447c:	0801470f 	.word	0x0801470f
 8014480:	0801470f 	.word	0x0801470f
 8014484:	080146af 	.word	0x080146af
 8014488:	080146db 	.word	0x080146db
 801448c:	0801470f 	.word	0x0801470f
 8014490:	0801470f 	.word	0x0801470f
 8014494:	0801470f 	.word	0x0801470f
 8014498:	0801470f 	.word	0x0801470f
 801449c:	0801470f 	.word	0x0801470f
 80144a0:	0801470f 	.word	0x0801470f
 80144a4:	0801470f 	.word	0x0801470f
 80144a8:	080144ad 	.word	0x080144ad
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 80144ac:	687b      	ldr	r3, [r7, #4]
 80144ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80144b2:	69db      	ldr	r3, [r3, #28]
 80144b4:	2b00      	cmp	r3, #0
 80144b6:	d00b      	beq.n	80144d0 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80144b8:	687b      	ldr	r3, [r7, #4]
 80144ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80144be:	69db      	ldr	r3, [r3, #28]
 80144c0:	687a      	ldr	r2, [r7, #4]
 80144c2:	7c12      	ldrb	r2, [r2, #16]
 80144c4:	f107 0108 	add.w	r1, r7, #8
 80144c8:	4610      	mov	r0, r2
 80144ca:	4798      	blx	r3
 80144cc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80144ce:	e126      	b.n	801471e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80144d0:	6839      	ldr	r1, [r7, #0]
 80144d2:	6878      	ldr	r0, [r7, #4]
 80144d4:	f000 fb27 	bl	8014b26 <USBD_CtlError>
        err++;
 80144d8:	7afb      	ldrb	r3, [r7, #11]
 80144da:	3301      	adds	r3, #1
 80144dc:	72fb      	strb	r3, [r7, #11]
      break;
 80144de:	e11e      	b.n	801471e <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80144e0:	687b      	ldr	r3, [r7, #4]
 80144e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80144e6:	681b      	ldr	r3, [r3, #0]
 80144e8:	687a      	ldr	r2, [r7, #4]
 80144ea:	7c12      	ldrb	r2, [r2, #16]
 80144ec:	f107 0108 	add.w	r1, r7, #8
 80144f0:	4610      	mov	r0, r2
 80144f2:	4798      	blx	r3
 80144f4:	60f8      	str	r0, [r7, #12]
      break;
 80144f6:	e112      	b.n	801471e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80144f8:	687b      	ldr	r3, [r7, #4]
 80144fa:	7c1b      	ldrb	r3, [r3, #16]
 80144fc:	2b00      	cmp	r3, #0
 80144fe:	d10d      	bne.n	801451c <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8014500:	687b      	ldr	r3, [r7, #4]
 8014502:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8014506:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014508:	f107 0208 	add.w	r2, r7, #8
 801450c:	4610      	mov	r0, r2
 801450e:	4798      	blx	r3
 8014510:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8014512:	68fb      	ldr	r3, [r7, #12]
 8014514:	3301      	adds	r3, #1
 8014516:	2202      	movs	r2, #2
 8014518:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 801451a:	e100      	b.n	801471e <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 801451c:	687b      	ldr	r3, [r7, #4]
 801451e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8014522:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014524:	f107 0208 	add.w	r2, r7, #8
 8014528:	4610      	mov	r0, r2
 801452a:	4798      	blx	r3
 801452c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801452e:	68fb      	ldr	r3, [r7, #12]
 8014530:	3301      	adds	r3, #1
 8014532:	2202      	movs	r2, #2
 8014534:	701a      	strb	r2, [r3, #0]
      break;
 8014536:	e0f2      	b.n	801471e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8014538:	683b      	ldr	r3, [r7, #0]
 801453a:	885b      	ldrh	r3, [r3, #2]
 801453c:	b2db      	uxtb	r3, r3
 801453e:	2b05      	cmp	r3, #5
 8014540:	f200 80ac 	bhi.w	801469c <USBD_GetDescriptor+0x258>
 8014544:	a201      	add	r2, pc, #4	@ (adr r2, 801454c <USBD_GetDescriptor+0x108>)
 8014546:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801454a:	bf00      	nop
 801454c:	08014565 	.word	0x08014565
 8014550:	08014599 	.word	0x08014599
 8014554:	080145cd 	.word	0x080145cd
 8014558:	08014601 	.word	0x08014601
 801455c:	08014635 	.word	0x08014635
 8014560:	08014669 	.word	0x08014669
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8014564:	687b      	ldr	r3, [r7, #4]
 8014566:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801456a:	685b      	ldr	r3, [r3, #4]
 801456c:	2b00      	cmp	r3, #0
 801456e:	d00b      	beq.n	8014588 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8014570:	687b      	ldr	r3, [r7, #4]
 8014572:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8014576:	685b      	ldr	r3, [r3, #4]
 8014578:	687a      	ldr	r2, [r7, #4]
 801457a:	7c12      	ldrb	r2, [r2, #16]
 801457c:	f107 0108 	add.w	r1, r7, #8
 8014580:	4610      	mov	r0, r2
 8014582:	4798      	blx	r3
 8014584:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014586:	e091      	b.n	80146ac <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8014588:	6839      	ldr	r1, [r7, #0]
 801458a:	6878      	ldr	r0, [r7, #4]
 801458c:	f000 facb 	bl	8014b26 <USBD_CtlError>
            err++;
 8014590:	7afb      	ldrb	r3, [r7, #11]
 8014592:	3301      	adds	r3, #1
 8014594:	72fb      	strb	r3, [r7, #11]
          break;
 8014596:	e089      	b.n	80146ac <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8014598:	687b      	ldr	r3, [r7, #4]
 801459a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801459e:	689b      	ldr	r3, [r3, #8]
 80145a0:	2b00      	cmp	r3, #0
 80145a2:	d00b      	beq.n	80145bc <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80145a4:	687b      	ldr	r3, [r7, #4]
 80145a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80145aa:	689b      	ldr	r3, [r3, #8]
 80145ac:	687a      	ldr	r2, [r7, #4]
 80145ae:	7c12      	ldrb	r2, [r2, #16]
 80145b0:	f107 0108 	add.w	r1, r7, #8
 80145b4:	4610      	mov	r0, r2
 80145b6:	4798      	blx	r3
 80145b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80145ba:	e077      	b.n	80146ac <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80145bc:	6839      	ldr	r1, [r7, #0]
 80145be:	6878      	ldr	r0, [r7, #4]
 80145c0:	f000 fab1 	bl	8014b26 <USBD_CtlError>
            err++;
 80145c4:	7afb      	ldrb	r3, [r7, #11]
 80145c6:	3301      	adds	r3, #1
 80145c8:	72fb      	strb	r3, [r7, #11]
          break;
 80145ca:	e06f      	b.n	80146ac <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80145cc:	687b      	ldr	r3, [r7, #4]
 80145ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80145d2:	68db      	ldr	r3, [r3, #12]
 80145d4:	2b00      	cmp	r3, #0
 80145d6:	d00b      	beq.n	80145f0 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80145d8:	687b      	ldr	r3, [r7, #4]
 80145da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80145de:	68db      	ldr	r3, [r3, #12]
 80145e0:	687a      	ldr	r2, [r7, #4]
 80145e2:	7c12      	ldrb	r2, [r2, #16]
 80145e4:	f107 0108 	add.w	r1, r7, #8
 80145e8:	4610      	mov	r0, r2
 80145ea:	4798      	blx	r3
 80145ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80145ee:	e05d      	b.n	80146ac <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80145f0:	6839      	ldr	r1, [r7, #0]
 80145f2:	6878      	ldr	r0, [r7, #4]
 80145f4:	f000 fa97 	bl	8014b26 <USBD_CtlError>
            err++;
 80145f8:	7afb      	ldrb	r3, [r7, #11]
 80145fa:	3301      	adds	r3, #1
 80145fc:	72fb      	strb	r3, [r7, #11]
          break;
 80145fe:	e055      	b.n	80146ac <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8014600:	687b      	ldr	r3, [r7, #4]
 8014602:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8014606:	691b      	ldr	r3, [r3, #16]
 8014608:	2b00      	cmp	r3, #0
 801460a:	d00b      	beq.n	8014624 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 801460c:	687b      	ldr	r3, [r7, #4]
 801460e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8014612:	691b      	ldr	r3, [r3, #16]
 8014614:	687a      	ldr	r2, [r7, #4]
 8014616:	7c12      	ldrb	r2, [r2, #16]
 8014618:	f107 0108 	add.w	r1, r7, #8
 801461c:	4610      	mov	r0, r2
 801461e:	4798      	blx	r3
 8014620:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014622:	e043      	b.n	80146ac <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8014624:	6839      	ldr	r1, [r7, #0]
 8014626:	6878      	ldr	r0, [r7, #4]
 8014628:	f000 fa7d 	bl	8014b26 <USBD_CtlError>
            err++;
 801462c:	7afb      	ldrb	r3, [r7, #11]
 801462e:	3301      	adds	r3, #1
 8014630:	72fb      	strb	r3, [r7, #11]
          break;
 8014632:	e03b      	b.n	80146ac <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8014634:	687b      	ldr	r3, [r7, #4]
 8014636:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801463a:	695b      	ldr	r3, [r3, #20]
 801463c:	2b00      	cmp	r3, #0
 801463e:	d00b      	beq.n	8014658 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8014640:	687b      	ldr	r3, [r7, #4]
 8014642:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8014646:	695b      	ldr	r3, [r3, #20]
 8014648:	687a      	ldr	r2, [r7, #4]
 801464a:	7c12      	ldrb	r2, [r2, #16]
 801464c:	f107 0108 	add.w	r1, r7, #8
 8014650:	4610      	mov	r0, r2
 8014652:	4798      	blx	r3
 8014654:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014656:	e029      	b.n	80146ac <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8014658:	6839      	ldr	r1, [r7, #0]
 801465a:	6878      	ldr	r0, [r7, #4]
 801465c:	f000 fa63 	bl	8014b26 <USBD_CtlError>
            err++;
 8014660:	7afb      	ldrb	r3, [r7, #11]
 8014662:	3301      	adds	r3, #1
 8014664:	72fb      	strb	r3, [r7, #11]
          break;
 8014666:	e021      	b.n	80146ac <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8014668:	687b      	ldr	r3, [r7, #4]
 801466a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801466e:	699b      	ldr	r3, [r3, #24]
 8014670:	2b00      	cmp	r3, #0
 8014672:	d00b      	beq.n	801468c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8014674:	687b      	ldr	r3, [r7, #4]
 8014676:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801467a:	699b      	ldr	r3, [r3, #24]
 801467c:	687a      	ldr	r2, [r7, #4]
 801467e:	7c12      	ldrb	r2, [r2, #16]
 8014680:	f107 0108 	add.w	r1, r7, #8
 8014684:	4610      	mov	r0, r2
 8014686:	4798      	blx	r3
 8014688:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801468a:	e00f      	b.n	80146ac <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801468c:	6839      	ldr	r1, [r7, #0]
 801468e:	6878      	ldr	r0, [r7, #4]
 8014690:	f000 fa49 	bl	8014b26 <USBD_CtlError>
            err++;
 8014694:	7afb      	ldrb	r3, [r7, #11]
 8014696:	3301      	adds	r3, #1
 8014698:	72fb      	strb	r3, [r7, #11]
          break;
 801469a:	e007      	b.n	80146ac <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 801469c:	6839      	ldr	r1, [r7, #0]
 801469e:	6878      	ldr	r0, [r7, #4]
 80146a0:	f000 fa41 	bl	8014b26 <USBD_CtlError>
          err++;
 80146a4:	7afb      	ldrb	r3, [r7, #11]
 80146a6:	3301      	adds	r3, #1
 80146a8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80146aa:	bf00      	nop
      }
      break;
 80146ac:	e037      	b.n	801471e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80146ae:	687b      	ldr	r3, [r7, #4]
 80146b0:	7c1b      	ldrb	r3, [r3, #16]
 80146b2:	2b00      	cmp	r3, #0
 80146b4:	d109      	bne.n	80146ca <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80146b6:	687b      	ldr	r3, [r7, #4]
 80146b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80146bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80146be:	f107 0208 	add.w	r2, r7, #8
 80146c2:	4610      	mov	r0, r2
 80146c4:	4798      	blx	r3
 80146c6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80146c8:	e029      	b.n	801471e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80146ca:	6839      	ldr	r1, [r7, #0]
 80146cc:	6878      	ldr	r0, [r7, #4]
 80146ce:	f000 fa2a 	bl	8014b26 <USBD_CtlError>
        err++;
 80146d2:	7afb      	ldrb	r3, [r7, #11]
 80146d4:	3301      	adds	r3, #1
 80146d6:	72fb      	strb	r3, [r7, #11]
      break;
 80146d8:	e021      	b.n	801471e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80146da:	687b      	ldr	r3, [r7, #4]
 80146dc:	7c1b      	ldrb	r3, [r3, #16]
 80146de:	2b00      	cmp	r3, #0
 80146e0:	d10d      	bne.n	80146fe <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80146e2:	687b      	ldr	r3, [r7, #4]
 80146e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80146e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80146ea:	f107 0208 	add.w	r2, r7, #8
 80146ee:	4610      	mov	r0, r2
 80146f0:	4798      	blx	r3
 80146f2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80146f4:	68fb      	ldr	r3, [r7, #12]
 80146f6:	3301      	adds	r3, #1
 80146f8:	2207      	movs	r2, #7
 80146fa:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80146fc:	e00f      	b.n	801471e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80146fe:	6839      	ldr	r1, [r7, #0]
 8014700:	6878      	ldr	r0, [r7, #4]
 8014702:	f000 fa10 	bl	8014b26 <USBD_CtlError>
        err++;
 8014706:	7afb      	ldrb	r3, [r7, #11]
 8014708:	3301      	adds	r3, #1
 801470a:	72fb      	strb	r3, [r7, #11]
      break;
 801470c:	e007      	b.n	801471e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 801470e:	6839      	ldr	r1, [r7, #0]
 8014710:	6878      	ldr	r0, [r7, #4]
 8014712:	f000 fa08 	bl	8014b26 <USBD_CtlError>
      err++;
 8014716:	7afb      	ldrb	r3, [r7, #11]
 8014718:	3301      	adds	r3, #1
 801471a:	72fb      	strb	r3, [r7, #11]
      break;
 801471c:	bf00      	nop
  }

  if (err != 0U)
 801471e:	7afb      	ldrb	r3, [r7, #11]
 8014720:	2b00      	cmp	r3, #0
 8014722:	d11e      	bne.n	8014762 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8014724:	683b      	ldr	r3, [r7, #0]
 8014726:	88db      	ldrh	r3, [r3, #6]
 8014728:	2b00      	cmp	r3, #0
 801472a:	d016      	beq.n	801475a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 801472c:	893b      	ldrh	r3, [r7, #8]
 801472e:	2b00      	cmp	r3, #0
 8014730:	d00e      	beq.n	8014750 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8014732:	683b      	ldr	r3, [r7, #0]
 8014734:	88da      	ldrh	r2, [r3, #6]
 8014736:	893b      	ldrh	r3, [r7, #8]
 8014738:	4293      	cmp	r3, r2
 801473a:	bf28      	it	cs
 801473c:	4613      	movcs	r3, r2
 801473e:	b29b      	uxth	r3, r3
 8014740:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8014742:	893b      	ldrh	r3, [r7, #8]
 8014744:	461a      	mov	r2, r3
 8014746:	68f9      	ldr	r1, [r7, #12]
 8014748:	6878      	ldr	r0, [r7, #4]
 801474a:	f000 fa69 	bl	8014c20 <USBD_CtlSendData>
 801474e:	e009      	b.n	8014764 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8014750:	6839      	ldr	r1, [r7, #0]
 8014752:	6878      	ldr	r0, [r7, #4]
 8014754:	f000 f9e7 	bl	8014b26 <USBD_CtlError>
 8014758:	e004      	b.n	8014764 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 801475a:	6878      	ldr	r0, [r7, #4]
 801475c:	f000 faba 	bl	8014cd4 <USBD_CtlSendStatus>
 8014760:	e000      	b.n	8014764 <USBD_GetDescriptor+0x320>
    return;
 8014762:	bf00      	nop
  }
}
 8014764:	3710      	adds	r7, #16
 8014766:	46bd      	mov	sp, r7
 8014768:	bd80      	pop	{r7, pc}
 801476a:	bf00      	nop

0801476c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801476c:	b580      	push	{r7, lr}
 801476e:	b084      	sub	sp, #16
 8014770:	af00      	add	r7, sp, #0
 8014772:	6078      	str	r0, [r7, #4]
 8014774:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8014776:	683b      	ldr	r3, [r7, #0]
 8014778:	889b      	ldrh	r3, [r3, #4]
 801477a:	2b00      	cmp	r3, #0
 801477c:	d131      	bne.n	80147e2 <USBD_SetAddress+0x76>
 801477e:	683b      	ldr	r3, [r7, #0]
 8014780:	88db      	ldrh	r3, [r3, #6]
 8014782:	2b00      	cmp	r3, #0
 8014784:	d12d      	bne.n	80147e2 <USBD_SetAddress+0x76>
 8014786:	683b      	ldr	r3, [r7, #0]
 8014788:	885b      	ldrh	r3, [r3, #2]
 801478a:	2b7f      	cmp	r3, #127	@ 0x7f
 801478c:	d829      	bhi.n	80147e2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801478e:	683b      	ldr	r3, [r7, #0]
 8014790:	885b      	ldrh	r3, [r3, #2]
 8014792:	b2db      	uxtb	r3, r3
 8014794:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8014798:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801479a:	687b      	ldr	r3, [r7, #4]
 801479c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80147a0:	b2db      	uxtb	r3, r3
 80147a2:	2b03      	cmp	r3, #3
 80147a4:	d104      	bne.n	80147b0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80147a6:	6839      	ldr	r1, [r7, #0]
 80147a8:	6878      	ldr	r0, [r7, #4]
 80147aa:	f000 f9bc 	bl	8014b26 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80147ae:	e01d      	b.n	80147ec <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80147b0:	687b      	ldr	r3, [r7, #4]
 80147b2:	7bfa      	ldrb	r2, [r7, #15]
 80147b4:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80147b8:	7bfb      	ldrb	r3, [r7, #15]
 80147ba:	4619      	mov	r1, r3
 80147bc:	6878      	ldr	r0, [r7, #4]
 80147be:	f004 fbdf 	bl	8018f80 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80147c2:	6878      	ldr	r0, [r7, #4]
 80147c4:	f000 fa86 	bl	8014cd4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80147c8:	7bfb      	ldrb	r3, [r7, #15]
 80147ca:	2b00      	cmp	r3, #0
 80147cc:	d004      	beq.n	80147d8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80147ce:	687b      	ldr	r3, [r7, #4]
 80147d0:	2202      	movs	r2, #2
 80147d2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80147d6:	e009      	b.n	80147ec <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80147d8:	687b      	ldr	r3, [r7, #4]
 80147da:	2201      	movs	r2, #1
 80147dc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80147e0:	e004      	b.n	80147ec <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80147e2:	6839      	ldr	r1, [r7, #0]
 80147e4:	6878      	ldr	r0, [r7, #4]
 80147e6:	f000 f99e 	bl	8014b26 <USBD_CtlError>
  }
}
 80147ea:	bf00      	nop
 80147ec:	bf00      	nop
 80147ee:	3710      	adds	r7, #16
 80147f0:	46bd      	mov	sp, r7
 80147f2:	bd80      	pop	{r7, pc}

080147f4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80147f4:	b580      	push	{r7, lr}
 80147f6:	b084      	sub	sp, #16
 80147f8:	af00      	add	r7, sp, #0
 80147fa:	6078      	str	r0, [r7, #4]
 80147fc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80147fe:	2300      	movs	r3, #0
 8014800:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8014802:	683b      	ldr	r3, [r7, #0]
 8014804:	885b      	ldrh	r3, [r3, #2]
 8014806:	b2da      	uxtb	r2, r3
 8014808:	4b4e      	ldr	r3, [pc, #312]	@ (8014944 <USBD_SetConfig+0x150>)
 801480a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 801480c:	4b4d      	ldr	r3, [pc, #308]	@ (8014944 <USBD_SetConfig+0x150>)
 801480e:	781b      	ldrb	r3, [r3, #0]
 8014810:	2b01      	cmp	r3, #1
 8014812:	d905      	bls.n	8014820 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8014814:	6839      	ldr	r1, [r7, #0]
 8014816:	6878      	ldr	r0, [r7, #4]
 8014818:	f000 f985 	bl	8014b26 <USBD_CtlError>
    return USBD_FAIL;
 801481c:	2303      	movs	r3, #3
 801481e:	e08c      	b.n	801493a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8014820:	687b      	ldr	r3, [r7, #4]
 8014822:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014826:	b2db      	uxtb	r3, r3
 8014828:	2b02      	cmp	r3, #2
 801482a:	d002      	beq.n	8014832 <USBD_SetConfig+0x3e>
 801482c:	2b03      	cmp	r3, #3
 801482e:	d029      	beq.n	8014884 <USBD_SetConfig+0x90>
 8014830:	e075      	b.n	801491e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8014832:	4b44      	ldr	r3, [pc, #272]	@ (8014944 <USBD_SetConfig+0x150>)
 8014834:	781b      	ldrb	r3, [r3, #0]
 8014836:	2b00      	cmp	r3, #0
 8014838:	d020      	beq.n	801487c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 801483a:	4b42      	ldr	r3, [pc, #264]	@ (8014944 <USBD_SetConfig+0x150>)
 801483c:	781b      	ldrb	r3, [r3, #0]
 801483e:	461a      	mov	r2, r3
 8014840:	687b      	ldr	r3, [r7, #4]
 8014842:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8014844:	4b3f      	ldr	r3, [pc, #252]	@ (8014944 <USBD_SetConfig+0x150>)
 8014846:	781b      	ldrb	r3, [r3, #0]
 8014848:	4619      	mov	r1, r3
 801484a:	6878      	ldr	r0, [r7, #4]
 801484c:	f7ff f84b 	bl	80138e6 <USBD_SetClassConfig>
 8014850:	4603      	mov	r3, r0
 8014852:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8014854:	7bfb      	ldrb	r3, [r7, #15]
 8014856:	2b00      	cmp	r3, #0
 8014858:	d008      	beq.n	801486c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 801485a:	6839      	ldr	r1, [r7, #0]
 801485c:	6878      	ldr	r0, [r7, #4]
 801485e:	f000 f962 	bl	8014b26 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8014862:	687b      	ldr	r3, [r7, #4]
 8014864:	2202      	movs	r2, #2
 8014866:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801486a:	e065      	b.n	8014938 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 801486c:	6878      	ldr	r0, [r7, #4]
 801486e:	f000 fa31 	bl	8014cd4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8014872:	687b      	ldr	r3, [r7, #4]
 8014874:	2203      	movs	r2, #3
 8014876:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 801487a:	e05d      	b.n	8014938 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 801487c:	6878      	ldr	r0, [r7, #4]
 801487e:	f000 fa29 	bl	8014cd4 <USBD_CtlSendStatus>
      break;
 8014882:	e059      	b.n	8014938 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8014884:	4b2f      	ldr	r3, [pc, #188]	@ (8014944 <USBD_SetConfig+0x150>)
 8014886:	781b      	ldrb	r3, [r3, #0]
 8014888:	2b00      	cmp	r3, #0
 801488a:	d112      	bne.n	80148b2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801488c:	687b      	ldr	r3, [r7, #4]
 801488e:	2202      	movs	r2, #2
 8014890:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8014894:	4b2b      	ldr	r3, [pc, #172]	@ (8014944 <USBD_SetConfig+0x150>)
 8014896:	781b      	ldrb	r3, [r3, #0]
 8014898:	461a      	mov	r2, r3
 801489a:	687b      	ldr	r3, [r7, #4]
 801489c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 801489e:	4b29      	ldr	r3, [pc, #164]	@ (8014944 <USBD_SetConfig+0x150>)
 80148a0:	781b      	ldrb	r3, [r3, #0]
 80148a2:	4619      	mov	r1, r3
 80148a4:	6878      	ldr	r0, [r7, #4]
 80148a6:	f7ff f83a 	bl	801391e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80148aa:	6878      	ldr	r0, [r7, #4]
 80148ac:	f000 fa12 	bl	8014cd4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80148b0:	e042      	b.n	8014938 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80148b2:	4b24      	ldr	r3, [pc, #144]	@ (8014944 <USBD_SetConfig+0x150>)
 80148b4:	781b      	ldrb	r3, [r3, #0]
 80148b6:	461a      	mov	r2, r3
 80148b8:	687b      	ldr	r3, [r7, #4]
 80148ba:	685b      	ldr	r3, [r3, #4]
 80148bc:	429a      	cmp	r2, r3
 80148be:	d02a      	beq.n	8014916 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80148c0:	687b      	ldr	r3, [r7, #4]
 80148c2:	685b      	ldr	r3, [r3, #4]
 80148c4:	b2db      	uxtb	r3, r3
 80148c6:	4619      	mov	r1, r3
 80148c8:	6878      	ldr	r0, [r7, #4]
 80148ca:	f7ff f828 	bl	801391e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80148ce:	4b1d      	ldr	r3, [pc, #116]	@ (8014944 <USBD_SetConfig+0x150>)
 80148d0:	781b      	ldrb	r3, [r3, #0]
 80148d2:	461a      	mov	r2, r3
 80148d4:	687b      	ldr	r3, [r7, #4]
 80148d6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80148d8:	4b1a      	ldr	r3, [pc, #104]	@ (8014944 <USBD_SetConfig+0x150>)
 80148da:	781b      	ldrb	r3, [r3, #0]
 80148dc:	4619      	mov	r1, r3
 80148de:	6878      	ldr	r0, [r7, #4]
 80148e0:	f7ff f801 	bl	80138e6 <USBD_SetClassConfig>
 80148e4:	4603      	mov	r3, r0
 80148e6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80148e8:	7bfb      	ldrb	r3, [r7, #15]
 80148ea:	2b00      	cmp	r3, #0
 80148ec:	d00f      	beq.n	801490e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80148ee:	6839      	ldr	r1, [r7, #0]
 80148f0:	6878      	ldr	r0, [r7, #4]
 80148f2:	f000 f918 	bl	8014b26 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80148f6:	687b      	ldr	r3, [r7, #4]
 80148f8:	685b      	ldr	r3, [r3, #4]
 80148fa:	b2db      	uxtb	r3, r3
 80148fc:	4619      	mov	r1, r3
 80148fe:	6878      	ldr	r0, [r7, #4]
 8014900:	f7ff f80d 	bl	801391e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8014904:	687b      	ldr	r3, [r7, #4]
 8014906:	2202      	movs	r2, #2
 8014908:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 801490c:	e014      	b.n	8014938 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 801490e:	6878      	ldr	r0, [r7, #4]
 8014910:	f000 f9e0 	bl	8014cd4 <USBD_CtlSendStatus>
      break;
 8014914:	e010      	b.n	8014938 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8014916:	6878      	ldr	r0, [r7, #4]
 8014918:	f000 f9dc 	bl	8014cd4 <USBD_CtlSendStatus>
      break;
 801491c:	e00c      	b.n	8014938 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 801491e:	6839      	ldr	r1, [r7, #0]
 8014920:	6878      	ldr	r0, [r7, #4]
 8014922:	f000 f900 	bl	8014b26 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8014926:	4b07      	ldr	r3, [pc, #28]	@ (8014944 <USBD_SetConfig+0x150>)
 8014928:	781b      	ldrb	r3, [r3, #0]
 801492a:	4619      	mov	r1, r3
 801492c:	6878      	ldr	r0, [r7, #4]
 801492e:	f7fe fff6 	bl	801391e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8014932:	2303      	movs	r3, #3
 8014934:	73fb      	strb	r3, [r7, #15]
      break;
 8014936:	bf00      	nop
  }

  return ret;
 8014938:	7bfb      	ldrb	r3, [r7, #15]
}
 801493a:	4618      	mov	r0, r3
 801493c:	3710      	adds	r7, #16
 801493e:	46bd      	mov	sp, r7
 8014940:	bd80      	pop	{r7, pc}
 8014942:	bf00      	nop
 8014944:	200014dc 	.word	0x200014dc

08014948 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014948:	b580      	push	{r7, lr}
 801494a:	b082      	sub	sp, #8
 801494c:	af00      	add	r7, sp, #0
 801494e:	6078      	str	r0, [r7, #4]
 8014950:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8014952:	683b      	ldr	r3, [r7, #0]
 8014954:	88db      	ldrh	r3, [r3, #6]
 8014956:	2b01      	cmp	r3, #1
 8014958:	d004      	beq.n	8014964 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 801495a:	6839      	ldr	r1, [r7, #0]
 801495c:	6878      	ldr	r0, [r7, #4]
 801495e:	f000 f8e2 	bl	8014b26 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8014962:	e023      	b.n	80149ac <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8014964:	687b      	ldr	r3, [r7, #4]
 8014966:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801496a:	b2db      	uxtb	r3, r3
 801496c:	2b02      	cmp	r3, #2
 801496e:	dc02      	bgt.n	8014976 <USBD_GetConfig+0x2e>
 8014970:	2b00      	cmp	r3, #0
 8014972:	dc03      	bgt.n	801497c <USBD_GetConfig+0x34>
 8014974:	e015      	b.n	80149a2 <USBD_GetConfig+0x5a>
 8014976:	2b03      	cmp	r3, #3
 8014978:	d00b      	beq.n	8014992 <USBD_GetConfig+0x4a>
 801497a:	e012      	b.n	80149a2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 801497c:	687b      	ldr	r3, [r7, #4]
 801497e:	2200      	movs	r2, #0
 8014980:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8014982:	687b      	ldr	r3, [r7, #4]
 8014984:	3308      	adds	r3, #8
 8014986:	2201      	movs	r2, #1
 8014988:	4619      	mov	r1, r3
 801498a:	6878      	ldr	r0, [r7, #4]
 801498c:	f000 f948 	bl	8014c20 <USBD_CtlSendData>
        break;
 8014990:	e00c      	b.n	80149ac <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8014992:	687b      	ldr	r3, [r7, #4]
 8014994:	3304      	adds	r3, #4
 8014996:	2201      	movs	r2, #1
 8014998:	4619      	mov	r1, r3
 801499a:	6878      	ldr	r0, [r7, #4]
 801499c:	f000 f940 	bl	8014c20 <USBD_CtlSendData>
        break;
 80149a0:	e004      	b.n	80149ac <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80149a2:	6839      	ldr	r1, [r7, #0]
 80149a4:	6878      	ldr	r0, [r7, #4]
 80149a6:	f000 f8be 	bl	8014b26 <USBD_CtlError>
        break;
 80149aa:	bf00      	nop
}
 80149ac:	bf00      	nop
 80149ae:	3708      	adds	r7, #8
 80149b0:	46bd      	mov	sp, r7
 80149b2:	bd80      	pop	{r7, pc}

080149b4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80149b4:	b580      	push	{r7, lr}
 80149b6:	b082      	sub	sp, #8
 80149b8:	af00      	add	r7, sp, #0
 80149ba:	6078      	str	r0, [r7, #4]
 80149bc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80149be:	687b      	ldr	r3, [r7, #4]
 80149c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80149c4:	b2db      	uxtb	r3, r3
 80149c6:	3b01      	subs	r3, #1
 80149c8:	2b02      	cmp	r3, #2
 80149ca:	d81e      	bhi.n	8014a0a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80149cc:	683b      	ldr	r3, [r7, #0]
 80149ce:	88db      	ldrh	r3, [r3, #6]
 80149d0:	2b02      	cmp	r3, #2
 80149d2:	d004      	beq.n	80149de <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80149d4:	6839      	ldr	r1, [r7, #0]
 80149d6:	6878      	ldr	r0, [r7, #4]
 80149d8:	f000 f8a5 	bl	8014b26 <USBD_CtlError>
        break;
 80149dc:	e01a      	b.n	8014a14 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80149de:	687b      	ldr	r3, [r7, #4]
 80149e0:	2201      	movs	r2, #1
 80149e2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80149e4:	687b      	ldr	r3, [r7, #4]
 80149e6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80149ea:	2b00      	cmp	r3, #0
 80149ec:	d005      	beq.n	80149fa <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80149ee:	687b      	ldr	r3, [r7, #4]
 80149f0:	68db      	ldr	r3, [r3, #12]
 80149f2:	f043 0202 	orr.w	r2, r3, #2
 80149f6:	687b      	ldr	r3, [r7, #4]
 80149f8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80149fa:	687b      	ldr	r3, [r7, #4]
 80149fc:	330c      	adds	r3, #12
 80149fe:	2202      	movs	r2, #2
 8014a00:	4619      	mov	r1, r3
 8014a02:	6878      	ldr	r0, [r7, #4]
 8014a04:	f000 f90c 	bl	8014c20 <USBD_CtlSendData>
      break;
 8014a08:	e004      	b.n	8014a14 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8014a0a:	6839      	ldr	r1, [r7, #0]
 8014a0c:	6878      	ldr	r0, [r7, #4]
 8014a0e:	f000 f88a 	bl	8014b26 <USBD_CtlError>
      break;
 8014a12:	bf00      	nop
  }
}
 8014a14:	bf00      	nop
 8014a16:	3708      	adds	r7, #8
 8014a18:	46bd      	mov	sp, r7
 8014a1a:	bd80      	pop	{r7, pc}

08014a1c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014a1c:	b580      	push	{r7, lr}
 8014a1e:	b082      	sub	sp, #8
 8014a20:	af00      	add	r7, sp, #0
 8014a22:	6078      	str	r0, [r7, #4]
 8014a24:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8014a26:	683b      	ldr	r3, [r7, #0]
 8014a28:	885b      	ldrh	r3, [r3, #2]
 8014a2a:	2b01      	cmp	r3, #1
 8014a2c:	d107      	bne.n	8014a3e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8014a2e:	687b      	ldr	r3, [r7, #4]
 8014a30:	2201      	movs	r2, #1
 8014a32:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8014a36:	6878      	ldr	r0, [r7, #4]
 8014a38:	f000 f94c 	bl	8014cd4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8014a3c:	e013      	b.n	8014a66 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8014a3e:	683b      	ldr	r3, [r7, #0]
 8014a40:	885b      	ldrh	r3, [r3, #2]
 8014a42:	2b02      	cmp	r3, #2
 8014a44:	d10b      	bne.n	8014a5e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8014a46:	683b      	ldr	r3, [r7, #0]
 8014a48:	889b      	ldrh	r3, [r3, #4]
 8014a4a:	0a1b      	lsrs	r3, r3, #8
 8014a4c:	b29b      	uxth	r3, r3
 8014a4e:	b2da      	uxtb	r2, r3
 8014a50:	687b      	ldr	r3, [r7, #4]
 8014a52:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8014a56:	6878      	ldr	r0, [r7, #4]
 8014a58:	f000 f93c 	bl	8014cd4 <USBD_CtlSendStatus>
}
 8014a5c:	e003      	b.n	8014a66 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8014a5e:	6839      	ldr	r1, [r7, #0]
 8014a60:	6878      	ldr	r0, [r7, #4]
 8014a62:	f000 f860 	bl	8014b26 <USBD_CtlError>
}
 8014a66:	bf00      	nop
 8014a68:	3708      	adds	r7, #8
 8014a6a:	46bd      	mov	sp, r7
 8014a6c:	bd80      	pop	{r7, pc}

08014a6e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014a6e:	b580      	push	{r7, lr}
 8014a70:	b082      	sub	sp, #8
 8014a72:	af00      	add	r7, sp, #0
 8014a74:	6078      	str	r0, [r7, #4]
 8014a76:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8014a78:	687b      	ldr	r3, [r7, #4]
 8014a7a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014a7e:	b2db      	uxtb	r3, r3
 8014a80:	3b01      	subs	r3, #1
 8014a82:	2b02      	cmp	r3, #2
 8014a84:	d80b      	bhi.n	8014a9e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8014a86:	683b      	ldr	r3, [r7, #0]
 8014a88:	885b      	ldrh	r3, [r3, #2]
 8014a8a:	2b01      	cmp	r3, #1
 8014a8c:	d10c      	bne.n	8014aa8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8014a8e:	687b      	ldr	r3, [r7, #4]
 8014a90:	2200      	movs	r2, #0
 8014a92:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8014a96:	6878      	ldr	r0, [r7, #4]
 8014a98:	f000 f91c 	bl	8014cd4 <USBD_CtlSendStatus>
      }
      break;
 8014a9c:	e004      	b.n	8014aa8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8014a9e:	6839      	ldr	r1, [r7, #0]
 8014aa0:	6878      	ldr	r0, [r7, #4]
 8014aa2:	f000 f840 	bl	8014b26 <USBD_CtlError>
      break;
 8014aa6:	e000      	b.n	8014aaa <USBD_ClrFeature+0x3c>
      break;
 8014aa8:	bf00      	nop
  }
}
 8014aaa:	bf00      	nop
 8014aac:	3708      	adds	r7, #8
 8014aae:	46bd      	mov	sp, r7
 8014ab0:	bd80      	pop	{r7, pc}

08014ab2 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8014ab2:	b580      	push	{r7, lr}
 8014ab4:	b084      	sub	sp, #16
 8014ab6:	af00      	add	r7, sp, #0
 8014ab8:	6078      	str	r0, [r7, #4]
 8014aba:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8014abc:	683b      	ldr	r3, [r7, #0]
 8014abe:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8014ac0:	68fb      	ldr	r3, [r7, #12]
 8014ac2:	781a      	ldrb	r2, [r3, #0]
 8014ac4:	687b      	ldr	r3, [r7, #4]
 8014ac6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8014ac8:	68fb      	ldr	r3, [r7, #12]
 8014aca:	3301      	adds	r3, #1
 8014acc:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8014ace:	68fb      	ldr	r3, [r7, #12]
 8014ad0:	781a      	ldrb	r2, [r3, #0]
 8014ad2:	687b      	ldr	r3, [r7, #4]
 8014ad4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8014ad6:	68fb      	ldr	r3, [r7, #12]
 8014ad8:	3301      	adds	r3, #1
 8014ada:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8014adc:	68f8      	ldr	r0, [r7, #12]
 8014ade:	f7ff fa16 	bl	8013f0e <SWAPBYTE>
 8014ae2:	4603      	mov	r3, r0
 8014ae4:	461a      	mov	r2, r3
 8014ae6:	687b      	ldr	r3, [r7, #4]
 8014ae8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8014aea:	68fb      	ldr	r3, [r7, #12]
 8014aec:	3301      	adds	r3, #1
 8014aee:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8014af0:	68fb      	ldr	r3, [r7, #12]
 8014af2:	3301      	adds	r3, #1
 8014af4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8014af6:	68f8      	ldr	r0, [r7, #12]
 8014af8:	f7ff fa09 	bl	8013f0e <SWAPBYTE>
 8014afc:	4603      	mov	r3, r0
 8014afe:	461a      	mov	r2, r3
 8014b00:	687b      	ldr	r3, [r7, #4]
 8014b02:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8014b04:	68fb      	ldr	r3, [r7, #12]
 8014b06:	3301      	adds	r3, #1
 8014b08:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8014b0a:	68fb      	ldr	r3, [r7, #12]
 8014b0c:	3301      	adds	r3, #1
 8014b0e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8014b10:	68f8      	ldr	r0, [r7, #12]
 8014b12:	f7ff f9fc 	bl	8013f0e <SWAPBYTE>
 8014b16:	4603      	mov	r3, r0
 8014b18:	461a      	mov	r2, r3
 8014b1a:	687b      	ldr	r3, [r7, #4]
 8014b1c:	80da      	strh	r2, [r3, #6]
}
 8014b1e:	bf00      	nop
 8014b20:	3710      	adds	r7, #16
 8014b22:	46bd      	mov	sp, r7
 8014b24:	bd80      	pop	{r7, pc}

08014b26 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014b26:	b580      	push	{r7, lr}
 8014b28:	b082      	sub	sp, #8
 8014b2a:	af00      	add	r7, sp, #0
 8014b2c:	6078      	str	r0, [r7, #4]
 8014b2e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8014b30:	2180      	movs	r1, #128	@ 0x80
 8014b32:	6878      	ldr	r0, [r7, #4]
 8014b34:	f004 f9ba 	bl	8018eac <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8014b38:	2100      	movs	r1, #0
 8014b3a:	6878      	ldr	r0, [r7, #4]
 8014b3c:	f004 f9b6 	bl	8018eac <USBD_LL_StallEP>
}
 8014b40:	bf00      	nop
 8014b42:	3708      	adds	r7, #8
 8014b44:	46bd      	mov	sp, r7
 8014b46:	bd80      	pop	{r7, pc}

08014b48 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8014b48:	b580      	push	{r7, lr}
 8014b4a:	b086      	sub	sp, #24
 8014b4c:	af00      	add	r7, sp, #0
 8014b4e:	60f8      	str	r0, [r7, #12]
 8014b50:	60b9      	str	r1, [r7, #8]
 8014b52:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8014b54:	2300      	movs	r3, #0
 8014b56:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8014b58:	68fb      	ldr	r3, [r7, #12]
 8014b5a:	2b00      	cmp	r3, #0
 8014b5c:	d042      	beq.n	8014be4 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8014b5e:	68fb      	ldr	r3, [r7, #12]
 8014b60:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8014b62:	6938      	ldr	r0, [r7, #16]
 8014b64:	f000 f842 	bl	8014bec <USBD_GetLen>
 8014b68:	4603      	mov	r3, r0
 8014b6a:	3301      	adds	r3, #1
 8014b6c:	005b      	lsls	r3, r3, #1
 8014b6e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8014b72:	d808      	bhi.n	8014b86 <USBD_GetString+0x3e>
 8014b74:	6938      	ldr	r0, [r7, #16]
 8014b76:	f000 f839 	bl	8014bec <USBD_GetLen>
 8014b7a:	4603      	mov	r3, r0
 8014b7c:	3301      	adds	r3, #1
 8014b7e:	b29b      	uxth	r3, r3
 8014b80:	005b      	lsls	r3, r3, #1
 8014b82:	b29a      	uxth	r2, r3
 8014b84:	e001      	b.n	8014b8a <USBD_GetString+0x42>
 8014b86:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8014b8a:	687b      	ldr	r3, [r7, #4]
 8014b8c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8014b8e:	7dfb      	ldrb	r3, [r7, #23]
 8014b90:	68ba      	ldr	r2, [r7, #8]
 8014b92:	4413      	add	r3, r2
 8014b94:	687a      	ldr	r2, [r7, #4]
 8014b96:	7812      	ldrb	r2, [r2, #0]
 8014b98:	701a      	strb	r2, [r3, #0]
  idx++;
 8014b9a:	7dfb      	ldrb	r3, [r7, #23]
 8014b9c:	3301      	adds	r3, #1
 8014b9e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8014ba0:	7dfb      	ldrb	r3, [r7, #23]
 8014ba2:	68ba      	ldr	r2, [r7, #8]
 8014ba4:	4413      	add	r3, r2
 8014ba6:	2203      	movs	r2, #3
 8014ba8:	701a      	strb	r2, [r3, #0]
  idx++;
 8014baa:	7dfb      	ldrb	r3, [r7, #23]
 8014bac:	3301      	adds	r3, #1
 8014bae:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8014bb0:	e013      	b.n	8014bda <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8014bb2:	7dfb      	ldrb	r3, [r7, #23]
 8014bb4:	68ba      	ldr	r2, [r7, #8]
 8014bb6:	4413      	add	r3, r2
 8014bb8:	693a      	ldr	r2, [r7, #16]
 8014bba:	7812      	ldrb	r2, [r2, #0]
 8014bbc:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8014bbe:	693b      	ldr	r3, [r7, #16]
 8014bc0:	3301      	adds	r3, #1
 8014bc2:	613b      	str	r3, [r7, #16]
    idx++;
 8014bc4:	7dfb      	ldrb	r3, [r7, #23]
 8014bc6:	3301      	adds	r3, #1
 8014bc8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8014bca:	7dfb      	ldrb	r3, [r7, #23]
 8014bcc:	68ba      	ldr	r2, [r7, #8]
 8014bce:	4413      	add	r3, r2
 8014bd0:	2200      	movs	r2, #0
 8014bd2:	701a      	strb	r2, [r3, #0]
    idx++;
 8014bd4:	7dfb      	ldrb	r3, [r7, #23]
 8014bd6:	3301      	adds	r3, #1
 8014bd8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8014bda:	693b      	ldr	r3, [r7, #16]
 8014bdc:	781b      	ldrb	r3, [r3, #0]
 8014bde:	2b00      	cmp	r3, #0
 8014be0:	d1e7      	bne.n	8014bb2 <USBD_GetString+0x6a>
 8014be2:	e000      	b.n	8014be6 <USBD_GetString+0x9e>
    return;
 8014be4:	bf00      	nop
  }
}
 8014be6:	3718      	adds	r7, #24
 8014be8:	46bd      	mov	sp, r7
 8014bea:	bd80      	pop	{r7, pc}

08014bec <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8014bec:	b480      	push	{r7}
 8014bee:	b085      	sub	sp, #20
 8014bf0:	af00      	add	r7, sp, #0
 8014bf2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8014bf4:	2300      	movs	r3, #0
 8014bf6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8014bf8:	687b      	ldr	r3, [r7, #4]
 8014bfa:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8014bfc:	e005      	b.n	8014c0a <USBD_GetLen+0x1e>
  {
    len++;
 8014bfe:	7bfb      	ldrb	r3, [r7, #15]
 8014c00:	3301      	adds	r3, #1
 8014c02:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8014c04:	68bb      	ldr	r3, [r7, #8]
 8014c06:	3301      	adds	r3, #1
 8014c08:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8014c0a:	68bb      	ldr	r3, [r7, #8]
 8014c0c:	781b      	ldrb	r3, [r3, #0]
 8014c0e:	2b00      	cmp	r3, #0
 8014c10:	d1f5      	bne.n	8014bfe <USBD_GetLen+0x12>
  }

  return len;
 8014c12:	7bfb      	ldrb	r3, [r7, #15]
}
 8014c14:	4618      	mov	r0, r3
 8014c16:	3714      	adds	r7, #20
 8014c18:	46bd      	mov	sp, r7
 8014c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c1e:	4770      	bx	lr

08014c20 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8014c20:	b580      	push	{r7, lr}
 8014c22:	b084      	sub	sp, #16
 8014c24:	af00      	add	r7, sp, #0
 8014c26:	60f8      	str	r0, [r7, #12]
 8014c28:	60b9      	str	r1, [r7, #8]
 8014c2a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8014c2c:	68fb      	ldr	r3, [r7, #12]
 8014c2e:	2202      	movs	r2, #2
 8014c30:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8014c34:	68fb      	ldr	r3, [r7, #12]
 8014c36:	687a      	ldr	r2, [r7, #4]
 8014c38:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8014c3a:	68fb      	ldr	r3, [r7, #12]
 8014c3c:	687a      	ldr	r2, [r7, #4]
 8014c3e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8014c40:	687b      	ldr	r3, [r7, #4]
 8014c42:	68ba      	ldr	r2, [r7, #8]
 8014c44:	2100      	movs	r1, #0
 8014c46:	68f8      	ldr	r0, [r7, #12]
 8014c48:	f004 f9b9 	bl	8018fbe <USBD_LL_Transmit>

  return USBD_OK;
 8014c4c:	2300      	movs	r3, #0
}
 8014c4e:	4618      	mov	r0, r3
 8014c50:	3710      	adds	r7, #16
 8014c52:	46bd      	mov	sp, r7
 8014c54:	bd80      	pop	{r7, pc}

08014c56 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8014c56:	b580      	push	{r7, lr}
 8014c58:	b084      	sub	sp, #16
 8014c5a:	af00      	add	r7, sp, #0
 8014c5c:	60f8      	str	r0, [r7, #12]
 8014c5e:	60b9      	str	r1, [r7, #8]
 8014c60:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8014c62:	687b      	ldr	r3, [r7, #4]
 8014c64:	68ba      	ldr	r2, [r7, #8]
 8014c66:	2100      	movs	r1, #0
 8014c68:	68f8      	ldr	r0, [r7, #12]
 8014c6a:	f004 f9a8 	bl	8018fbe <USBD_LL_Transmit>

  return USBD_OK;
 8014c6e:	2300      	movs	r3, #0
}
 8014c70:	4618      	mov	r0, r3
 8014c72:	3710      	adds	r7, #16
 8014c74:	46bd      	mov	sp, r7
 8014c76:	bd80      	pop	{r7, pc}

08014c78 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8014c78:	b580      	push	{r7, lr}
 8014c7a:	b084      	sub	sp, #16
 8014c7c:	af00      	add	r7, sp, #0
 8014c7e:	60f8      	str	r0, [r7, #12]
 8014c80:	60b9      	str	r1, [r7, #8]
 8014c82:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8014c84:	68fb      	ldr	r3, [r7, #12]
 8014c86:	2203      	movs	r2, #3
 8014c88:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8014c8c:	68fb      	ldr	r3, [r7, #12]
 8014c8e:	687a      	ldr	r2, [r7, #4]
 8014c90:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8014c94:	68fb      	ldr	r3, [r7, #12]
 8014c96:	687a      	ldr	r2, [r7, #4]
 8014c98:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8014c9c:	687b      	ldr	r3, [r7, #4]
 8014c9e:	68ba      	ldr	r2, [r7, #8]
 8014ca0:	2100      	movs	r1, #0
 8014ca2:	68f8      	ldr	r0, [r7, #12]
 8014ca4:	f004 f9ac 	bl	8019000 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8014ca8:	2300      	movs	r3, #0
}
 8014caa:	4618      	mov	r0, r3
 8014cac:	3710      	adds	r7, #16
 8014cae:	46bd      	mov	sp, r7
 8014cb0:	bd80      	pop	{r7, pc}

08014cb2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8014cb2:	b580      	push	{r7, lr}
 8014cb4:	b084      	sub	sp, #16
 8014cb6:	af00      	add	r7, sp, #0
 8014cb8:	60f8      	str	r0, [r7, #12]
 8014cba:	60b9      	str	r1, [r7, #8]
 8014cbc:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8014cbe:	687b      	ldr	r3, [r7, #4]
 8014cc0:	68ba      	ldr	r2, [r7, #8]
 8014cc2:	2100      	movs	r1, #0
 8014cc4:	68f8      	ldr	r0, [r7, #12]
 8014cc6:	f004 f99b 	bl	8019000 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8014cca:	2300      	movs	r3, #0
}
 8014ccc:	4618      	mov	r0, r3
 8014cce:	3710      	adds	r7, #16
 8014cd0:	46bd      	mov	sp, r7
 8014cd2:	bd80      	pop	{r7, pc}

08014cd4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8014cd4:	b580      	push	{r7, lr}
 8014cd6:	b082      	sub	sp, #8
 8014cd8:	af00      	add	r7, sp, #0
 8014cda:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8014cdc:	687b      	ldr	r3, [r7, #4]
 8014cde:	2204      	movs	r2, #4
 8014ce0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8014ce4:	2300      	movs	r3, #0
 8014ce6:	2200      	movs	r2, #0
 8014ce8:	2100      	movs	r1, #0
 8014cea:	6878      	ldr	r0, [r7, #4]
 8014cec:	f004 f967 	bl	8018fbe <USBD_LL_Transmit>

  return USBD_OK;
 8014cf0:	2300      	movs	r3, #0
}
 8014cf2:	4618      	mov	r0, r3
 8014cf4:	3708      	adds	r7, #8
 8014cf6:	46bd      	mov	sp, r7
 8014cf8:	bd80      	pop	{r7, pc}

08014cfa <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8014cfa:	b580      	push	{r7, lr}
 8014cfc:	b082      	sub	sp, #8
 8014cfe:	af00      	add	r7, sp, #0
 8014d00:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8014d02:	687b      	ldr	r3, [r7, #4]
 8014d04:	2205      	movs	r2, #5
 8014d06:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8014d0a:	2300      	movs	r3, #0
 8014d0c:	2200      	movs	r2, #0
 8014d0e:	2100      	movs	r1, #0
 8014d10:	6878      	ldr	r0, [r7, #4]
 8014d12:	f004 f975 	bl	8019000 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8014d16:	2300      	movs	r3, #0
}
 8014d18:	4618      	mov	r0, r3
 8014d1a:	3708      	adds	r7, #8
 8014d1c:	46bd      	mov	sp, r7
 8014d1e:	bd80      	pop	{r7, pc}

08014d20 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 8014d20:	b580      	push	{r7, lr}
 8014d22:	b088      	sub	sp, #32
 8014d24:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8014d26:	2300      	movs	r3, #0
 8014d28:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8014d2a:	f107 0308 	add.w	r3, r7, #8
 8014d2e:	2218      	movs	r2, #24
 8014d30:	2100      	movs	r1, #0
 8014d32:	4618      	mov	r0, r3
 8014d34:	f001 f92d 	bl	8015f92 <Osal_MemSet>
  rq.ogf = 0x3f;
 8014d38:	233f      	movs	r3, #63	@ 0x3f
 8014d3a:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 8014d3c:	2381      	movs	r3, #129	@ 0x81
 8014d3e:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8014d40:	1dfb      	adds	r3, r7, #7
 8014d42:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8014d44:	2301      	movs	r3, #1
 8014d46:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8014d48:	f107 0308 	add.w	r3, r7, #8
 8014d4c:	2100      	movs	r1, #0
 8014d4e:	4618      	mov	r0, r3
 8014d50:	f001 fba8 	bl	80164a4 <hci_send_req>
 8014d54:	4603      	mov	r3, r0
 8014d56:	2b00      	cmp	r3, #0
 8014d58:	da01      	bge.n	8014d5e <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 8014d5a:	23ff      	movs	r3, #255	@ 0xff
 8014d5c:	e000      	b.n	8014d60 <aci_gap_set_non_discoverable+0x40>
  return status;
 8014d5e:	79fb      	ldrb	r3, [r7, #7]
}
 8014d60:	4618      	mov	r0, r3
 8014d62:	3720      	adds	r7, #32
 8014d64:	46bd      	mov	sp, r7
 8014d66:	bd80      	pop	{r7, pc}

08014d68 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Conn_Interval_Min,
                                     uint16_t Conn_Interval_Max )
{
 8014d68:	b5b0      	push	{r4, r5, r7, lr}
 8014d6a:	b0ce      	sub	sp, #312	@ 0x138
 8014d6c:	af00      	add	r7, sp, #0
 8014d6e:	4605      	mov	r5, r0
 8014d70:	460c      	mov	r4, r1
 8014d72:	4610      	mov	r0, r2
 8014d74:	4619      	mov	r1, r3
 8014d76:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014d7a:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8014d7e:	462a      	mov	r2, r5
 8014d80:	701a      	strb	r2, [r3, #0]
 8014d82:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014d86:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8014d8a:	4622      	mov	r2, r4
 8014d8c:	801a      	strh	r2, [r3, #0]
 8014d8e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014d92:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 8014d96:	4602      	mov	r2, r0
 8014d98:	801a      	strh	r2, [r3, #0]
 8014d9a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014d9e:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 8014da2:	460a      	mov	r2, r1
 8014da4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 8014da6:	f107 0310 	add.w	r3, r7, #16
 8014daa:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 8014dae:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 8014db2:	3308      	adds	r3, #8
 8014db4:	f107 0210 	add.w	r2, r7, #16
 8014db8:	4413      	add	r3, r2
 8014dba:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 8014dbe:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 8014dc2:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 8014dc6:	4413      	add	r3, r2
 8014dc8:	3309      	adds	r3, #9
 8014dca:	f107 0210 	add.w	r2, r7, #16
 8014dce:	4413      	add	r3, r2
 8014dd0:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8014dd4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014dd8:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8014ddc:	2200      	movs	r2, #0
 8014dde:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8014de0:	2300      	movs	r3, #0
 8014de2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Type = Advertising_Type;
 8014de6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014dea:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8014dee:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 8014df2:	7812      	ldrb	r2, [r2, #0]
 8014df4:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8014df6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014dfa:	3301      	adds	r3, #1
 8014dfc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 8014e00:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014e04:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8014e08:	f5a2 729a 	sub.w	r2, r2, #308	@ 0x134
 8014e0c:	8812      	ldrh	r2, [r2, #0]
 8014e0e:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 8014e12:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014e16:	3302      	adds	r3, #2
 8014e18:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 8014e1c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014e20:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8014e24:	f5a2 729b 	sub.w	r2, r2, #310	@ 0x136
 8014e28:	8812      	ldrh	r2, [r2, #0]
 8014e2a:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 8014e2e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014e32:	3302      	adds	r3, #2
 8014e34:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 8014e38:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014e3c:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8014e40:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 8014e44:	7812      	ldrb	r2, [r2, #0]
 8014e46:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8014e48:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014e4c:	3301      	adds	r3, #1
 8014e4e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 8014e52:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014e56:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 8014e5a:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8014e5c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014e60:	3301      	adds	r3, #1
 8014e62:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 8014e66:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014e6a:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 8014e6e:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 8014e70:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014e74:	3301      	adds	r3, #1
 8014e76:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 8014e7a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014e7e:	3308      	adds	r3, #8
 8014e80:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 8014e84:	f8d7 1150 	ldr.w	r1, [r7, #336]	@ 0x150
 8014e88:	4618      	mov	r0, r3
 8014e8a:	f001 f872 	bl	8015f72 <Osal_MemCpy>
    index_input += Local_Name_Length;
 8014e8e:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 8014e92:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8014e96:	4413      	add	r3, r2
 8014e98:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 8014e9c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8014ea0:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 8014ea4:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8014ea6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014eaa:	3301      	adds	r3, #1
 8014eac:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 8014eb0:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8014eb4:	3301      	adds	r3, #1
 8014eb6:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 8014eba:	f8d7 1158 	ldr.w	r1, [r7, #344]	@ 0x158
 8014ebe:	4618      	mov	r0, r3
 8014ec0:	f001 f857 	bl	8015f72 <Osal_MemCpy>
    index_input += Service_Uuid_length;
 8014ec4:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 8014ec8:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8014ecc:	4413      	add	r3, r2
 8014ece:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Min = Conn_Interval_Min;
 8014ed2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8014ed6:	f8b7 215c 	ldrh.w	r2, [r7, #348]	@ 0x15c
 8014eda:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8014edc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014ee0:	3302      	adds	r3, #2
 8014ee2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Max = Conn_Interval_Max;
 8014ee6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8014eea:	f8b7 2160 	ldrh.w	r2, [r7, #352]	@ 0x160
 8014eee:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 8014ef0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014ef4:	3302      	adds	r3, #2
 8014ef6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8014efa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8014efe:	2218      	movs	r2, #24
 8014f00:	2100      	movs	r1, #0
 8014f02:	4618      	mov	r0, r3
 8014f04:	f001 f845 	bl	8015f92 <Osal_MemSet>
  rq.ogf = 0x3f;
 8014f08:	233f      	movs	r3, #63	@ 0x3f
 8014f0a:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x083;
 8014f0e:	2383      	movs	r3, #131	@ 0x83
 8014f10:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8014f14:	f107 0310 	add.w	r3, r7, #16
 8014f18:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8014f1c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014f20:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8014f24:	f107 030f 	add.w	r3, r7, #15
 8014f28:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8014f2c:	2301      	movs	r3, #1
 8014f2e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8014f32:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8014f36:	2100      	movs	r1, #0
 8014f38:	4618      	mov	r0, r3
 8014f3a:	f001 fab3 	bl	80164a4 <hci_send_req>
 8014f3e:	4603      	mov	r3, r0
 8014f40:	2b00      	cmp	r3, #0
 8014f42:	da01      	bge.n	8014f48 <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 8014f44:	23ff      	movs	r3, #255	@ 0xff
 8014f46:	e004      	b.n	8014f52 <aci_gap_set_discoverable+0x1ea>
  return status;
 8014f48:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014f4c:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8014f50:	781b      	ldrb	r3, [r3, #0]
}
 8014f52:	4618      	mov	r0, r3
 8014f54:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 8014f58:	46bd      	mov	sp, r7
 8014f5a:	bdb0      	pop	{r4, r5, r7, pc}

08014f5c <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 8014f5c:	b580      	push	{r7, lr}
 8014f5e:	b0cc      	sub	sp, #304	@ 0x130
 8014f60:	af00      	add	r7, sp, #0
 8014f62:	4602      	mov	r2, r0
 8014f64:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014f68:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8014f6c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 8014f6e:	f107 0310 	add.w	r3, r7, #16
 8014f72:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8014f76:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014f7a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8014f7e:	2200      	movs	r2, #0
 8014f80:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8014f82:	2300      	movs	r3, #0
 8014f84:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->IO_Capability = IO_Capability;
 8014f88:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8014f8c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8014f90:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8014f94:	7812      	ldrb	r2, [r2, #0]
 8014f96:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8014f98:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014f9c:	3301      	adds	r3, #1
 8014f9e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8014fa2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8014fa6:	2218      	movs	r2, #24
 8014fa8:	2100      	movs	r1, #0
 8014faa:	4618      	mov	r0, r3
 8014fac:	f000 fff1 	bl	8015f92 <Osal_MemSet>
  rq.ogf = 0x3f;
 8014fb0:	233f      	movs	r3, #63	@ 0x3f
 8014fb2:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x085;
 8014fb6:	2385      	movs	r3, #133	@ 0x85
 8014fb8:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8014fbc:	f107 0310 	add.w	r3, r7, #16
 8014fc0:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8014fc4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014fc8:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8014fcc:	f107 030f 	add.w	r3, r7, #15
 8014fd0:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8014fd4:	2301      	movs	r3, #1
 8014fd6:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8014fda:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8014fde:	2100      	movs	r1, #0
 8014fe0:	4618      	mov	r0, r3
 8014fe2:	f001 fa5f 	bl	80164a4 <hci_send_req>
 8014fe6:	4603      	mov	r3, r0
 8014fe8:	2b00      	cmp	r3, #0
 8014fea:	da01      	bge.n	8014ff0 <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 8014fec:	23ff      	movs	r3, #255	@ 0xff
 8014fee:	e004      	b.n	8014ffa <aci_gap_set_io_capability+0x9e>
  return status;
 8014ff0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014ff4:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8014ff8:	781b      	ldrb	r3, [r3, #0]
}
 8014ffa:	4618      	mov	r0, r3
 8014ffc:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8015000:	46bd      	mov	sp, r7
 8015002:	bd80      	pop	{r7, pc}

08015004 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 8015004:	b5b0      	push	{r4, r5, r7, lr}
 8015006:	b0cc      	sub	sp, #304	@ 0x130
 8015008:	af00      	add	r7, sp, #0
 801500a:	4605      	mov	r5, r0
 801500c:	460c      	mov	r4, r1
 801500e:	4610      	mov	r0, r2
 8015010:	4619      	mov	r1, r3
 8015012:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015016:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 801501a:	462a      	mov	r2, r5
 801501c:	701a      	strb	r2, [r3, #0]
 801501e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015022:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8015026:	4622      	mov	r2, r4
 8015028:	701a      	strb	r2, [r3, #0]
 801502a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801502e:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8015032:	4602      	mov	r2, r0
 8015034:	701a      	strb	r2, [r3, #0]
 8015036:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801503a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801503e:	460a      	mov	r2, r1
 8015040:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 8015042:	f107 0310 	add.w	r3, r7, #16
 8015046:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 801504a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801504e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8015052:	2200      	movs	r2, #0
 8015054:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8015056:	2300      	movs	r3, #0
 8015058:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 801505c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015060:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8015064:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8015068:	7812      	ldrb	r2, [r2, #0]
 801506a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 801506c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015070:	3301      	adds	r3, #1
 8015072:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->MITM_Mode = MITM_Mode;
 8015076:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801507a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 801507e:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8015082:	7812      	ldrb	r2, [r2, #0]
 8015084:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8015086:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801508a:	3301      	adds	r3, #1
 801508c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->SC_Support = SC_Support;
 8015090:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015094:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8015098:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 801509c:	7812      	ldrb	r2, [r2, #0]
 801509e:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80150a0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80150a4:	3301      	adds	r3, #1
 80150a6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 80150aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80150ae:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80150b2:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 80150b6:	7812      	ldrb	r2, [r2, #0]
 80150b8:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 80150ba:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80150be:	3301      	adds	r3, #1
 80150c0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 80150c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80150c8:	f897 2140 	ldrb.w	r2, [r7, #320]	@ 0x140
 80150cc:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 80150ce:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80150d2:	3301      	adds	r3, #1
 80150d4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 80150d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80150dc:	f897 2144 	ldrb.w	r2, [r7, #324]	@ 0x144
 80150e0:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80150e2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80150e6:	3301      	adds	r3, #1
 80150e8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 80150ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80150f0:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 80150f4:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 80150f6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80150fa:	3301      	adds	r3, #1
 80150fc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 8015100:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015104:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8015108:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 801510c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015110:	3304      	adds	r3, #4
 8015112:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 8015116:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801511a:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 801511e:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 8015120:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015124:	3301      	adds	r3, #1
 8015126:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 801512a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801512e:	2218      	movs	r2, #24
 8015130:	2100      	movs	r1, #0
 8015132:	4618      	mov	r0, r3
 8015134:	f000 ff2d 	bl	8015f92 <Osal_MemSet>
  rq.ogf = 0x3f;
 8015138:	233f      	movs	r3, #63	@ 0x3f
 801513a:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x086;
 801513e:	2386      	movs	r3, #134	@ 0x86
 8015140:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8015144:	f107 0310 	add.w	r3, r7, #16
 8015148:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 801514c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015150:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8015154:	f107 030f 	add.w	r3, r7, #15
 8015158:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 801515c:	2301      	movs	r3, #1
 801515e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8015162:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8015166:	2100      	movs	r1, #0
 8015168:	4618      	mov	r0, r3
 801516a:	f001 f99b 	bl	80164a4 <hci_send_req>
 801516e:	4603      	mov	r3, r0
 8015170:	2b00      	cmp	r3, #0
 8015172:	da01      	bge.n	8015178 <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 8015174:	23ff      	movs	r3, #255	@ 0xff
 8015176:	e004      	b.n	8015182 <aci_gap_set_authentication_requirement+0x17e>
  return status;
 8015178:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801517c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8015180:	781b      	ldrb	r3, [r3, #0]
}
 8015182:	4618      	mov	r0, r3
 8015184:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8015188:	46bd      	mov	sp, r7
 801518a:	bdb0      	pop	{r4, r5, r7, pc}

0801518c <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 801518c:	b580      	push	{r7, lr}
 801518e:	b0cc      	sub	sp, #304	@ 0x130
 8015190:	af00      	add	r7, sp, #0
 8015192:	4602      	mov	r2, r0
 8015194:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015198:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 801519c:	6019      	str	r1, [r3, #0]
 801519e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80151a2:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80151a6:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 80151a8:	f107 0310 	add.w	r3, r7, #16
 80151ac:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80151b0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80151b4:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80151b8:	2200      	movs	r2, #0
 80151ba:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80151bc:	2300      	movs	r3, #0
 80151be:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 80151c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80151c6:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80151ca:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 80151ce:	8812      	ldrh	r2, [r2, #0]
 80151d0:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80151d2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80151d6:	3302      	adds	r3, #2
 80151d8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Pass_Key = Pass_Key;
 80151dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80151e0:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80151e4:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 80151e8:	6812      	ldr	r2, [r2, #0]
 80151ea:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 80151ee:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80151f2:	3304      	adds	r3, #4
 80151f4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80151f8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80151fc:	2218      	movs	r2, #24
 80151fe:	2100      	movs	r1, #0
 8015200:	4618      	mov	r0, r3
 8015202:	f000 fec6 	bl	8015f92 <Osal_MemSet>
  rq.ogf = 0x3f;
 8015206:	233f      	movs	r3, #63	@ 0x3f
 8015208:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x088;
 801520c:	2388      	movs	r3, #136	@ 0x88
 801520e:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8015212:	f107 0310 	add.w	r3, r7, #16
 8015216:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 801521a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801521e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8015222:	f107 030f 	add.w	r3, r7, #15
 8015226:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 801522a:	2301      	movs	r3, #1
 801522c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8015230:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8015234:	2100      	movs	r1, #0
 8015236:	4618      	mov	r0, r3
 8015238:	f001 f934 	bl	80164a4 <hci_send_req>
 801523c:	4603      	mov	r3, r0
 801523e:	2b00      	cmp	r3, #0
 8015240:	da01      	bge.n	8015246 <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 8015242:	23ff      	movs	r3, #255	@ 0xff
 8015244:	e004      	b.n	8015250 <aci_gap_pass_key_resp+0xc4>
  return status;
 8015246:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801524a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 801524e:	781b      	ldrb	r3, [r3, #0]
}
 8015250:	4618      	mov	r0, r3
 8015252:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8015256:	46bd      	mov	sp, r7
 8015258:	bd80      	pop	{r7, pc}

0801525a <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 801525a:	b590      	push	{r4, r7, lr}
 801525c:	b0cd      	sub	sp, #308	@ 0x134
 801525e:	af00      	add	r7, sp, #0
 8015260:	4604      	mov	r4, r0
 8015262:	4608      	mov	r0, r1
 8015264:	4611      	mov	r1, r2
 8015266:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 801526a:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 801526e:	6013      	str	r3, [r2, #0]
 8015270:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015274:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8015278:	4622      	mov	r2, r4
 801527a:	701a      	strb	r2, [r3, #0]
 801527c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015280:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8015284:	4602      	mov	r2, r0
 8015286:	701a      	strb	r2, [r3, #0]
 8015288:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801528c:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8015290:	460a      	mov	r2, r1
 8015292:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 8015294:	f107 0310 	add.w	r3, r7, #16
 8015298:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 801529c:	f107 0308 	add.w	r3, r7, #8
 80152a0:	2207      	movs	r2, #7
 80152a2:	2100      	movs	r1, #0
 80152a4:	4618      	mov	r0, r3
 80152a6:	f000 fe74 	bl	8015f92 <Osal_MemSet>
  int index_input = 0;
 80152aa:	2300      	movs	r3, #0
 80152ac:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Role = Role;
 80152b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80152b4:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80152b8:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 80152bc:	7812      	ldrb	r2, [r2, #0]
 80152be:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80152c0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80152c4:	3301      	adds	r3, #1
 80152c6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->privacy_enabled = privacy_enabled;
 80152ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80152ce:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80152d2:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 80152d6:	7812      	ldrb	r2, [r2, #0]
 80152d8:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80152da:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80152de:	3301      	adds	r3, #1
 80152e0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->device_name_char_len = device_name_char_len;
 80152e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80152e8:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80152ec:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 80152f0:	7812      	ldrb	r2, [r2, #0]
 80152f2:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80152f4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80152f8:	3301      	adds	r3, #1
 80152fa:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80152fe:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8015302:	2218      	movs	r2, #24
 8015304:	2100      	movs	r1, #0
 8015306:	4618      	mov	r0, r3
 8015308:	f000 fe43 	bl	8015f92 <Osal_MemSet>
  rq.ogf = 0x3f;
 801530c:	233f      	movs	r3, #63	@ 0x3f
 801530e:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08a;
 8015312:	238a      	movs	r3, #138	@ 0x8a
 8015314:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8015318:	f107 0310 	add.w	r3, r7, #16
 801531c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8015320:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015324:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 8015328:	f107 0308 	add.w	r3, r7, #8
 801532c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 8015330:	2307      	movs	r3, #7
 8015332:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8015336:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801533a:	2100      	movs	r1, #0
 801533c:	4618      	mov	r0, r3
 801533e:	f001 f8b1 	bl	80164a4 <hci_send_req>
 8015342:	4603      	mov	r3, r0
 8015344:	2b00      	cmp	r3, #0
 8015346:	da01      	bge.n	801534c <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 8015348:	23ff      	movs	r3, #255	@ 0xff
 801534a:	e02e      	b.n	80153aa <aci_gap_init+0x150>
  if ( resp.Status )
 801534c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015350:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8015354:	781b      	ldrb	r3, [r3, #0]
 8015356:	2b00      	cmp	r3, #0
 8015358:	d005      	beq.n	8015366 <aci_gap_init+0x10c>
    return resp.Status;
 801535a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801535e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8015362:	781b      	ldrb	r3, [r3, #0]
 8015364:	e021      	b.n	80153aa <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 8015366:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801536a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 801536e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8015372:	b29a      	uxth	r2, r3
 8015374:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015378:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 801537c:	681b      	ldr	r3, [r3, #0]
 801537e:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 8015380:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015384:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8015388:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 801538c:	b29a      	uxth	r2, r3
 801538e:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8015392:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 8015394:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015398:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 801539c:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 80153a0:	b29a      	uxth	r2, r3
 80153a2:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80153a6:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80153a8:	2300      	movs	r3, #0
}
 80153aa:	4618      	mov	r0, r3
 80153ac:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 80153b0:	46bd      	mov	sp, r7
 80153b2:	bd90      	pop	{r4, r7, pc}

080153b4 <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 80153b4:	b580      	push	{r7, lr}
 80153b6:	b0cc      	sub	sp, #304	@ 0x130
 80153b8:	af00      	add	r7, sp, #0
 80153ba:	4602      	mov	r2, r0
 80153bc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80153c0:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80153c4:	6019      	str	r1, [r3, #0]
 80153c6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80153ca:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80153ce:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 80153d0:	f107 0310 	add.w	r3, r7, #16
 80153d4:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80153d8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80153dc:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80153e0:	2200      	movs	r2, #0
 80153e2:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80153e4:	2300      	movs	r3, #0
 80153e6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->AdvDataLen = AdvDataLen;
 80153ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80153ee:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80153f2:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 80153f6:	7812      	ldrb	r2, [r2, #0]
 80153f8:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80153fa:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80153fe:	3301      	adds	r3, #1
 8015400:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 8015404:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015408:	1c58      	adds	r0, r3, #1
 801540a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801540e:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8015412:	781a      	ldrb	r2, [r3, #0]
 8015414:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015418:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 801541c:	6819      	ldr	r1, [r3, #0]
 801541e:	f000 fda8 	bl	8015f72 <Osal_MemCpy>
  index_input += AdvDataLen;
 8015422:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015426:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 801542a:	781b      	ldrb	r3, [r3, #0]
 801542c:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8015430:	4413      	add	r3, r2
 8015432:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8015436:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801543a:	2218      	movs	r2, #24
 801543c:	2100      	movs	r1, #0
 801543e:	4618      	mov	r0, r3
 8015440:	f000 fda7 	bl	8015f92 <Osal_MemSet>
  rq.ogf = 0x3f;
 8015444:	233f      	movs	r3, #63	@ 0x3f
 8015446:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08e;
 801544a:	238e      	movs	r3, #142	@ 0x8e
 801544c:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8015450:	f107 0310 	add.w	r3, r7, #16
 8015454:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8015458:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801545c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8015460:	f107 030f 	add.w	r3, r7, #15
 8015464:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8015468:	2301      	movs	r3, #1
 801546a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 801546e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8015472:	2100      	movs	r1, #0
 8015474:	4618      	mov	r0, r3
 8015476:	f001 f815 	bl	80164a4 <hci_send_req>
 801547a:	4603      	mov	r3, r0
 801547c:	2b00      	cmp	r3, #0
 801547e:	da01      	bge.n	8015484 <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 8015480:	23ff      	movs	r3, #255	@ 0xff
 8015482:	e004      	b.n	801548e <aci_gap_update_adv_data+0xda>
  return status;
 8015484:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015488:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 801548c:	781b      	ldrb	r3, [r3, #0]
}
 801548e:	4618      	mov	r0, r3
 8015490:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8015494:	46bd      	mov	sp, r7
 8015496:	bd80      	pop	{r7, pc}

08015498 <aci_gap_configure_filter_accept_list>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_filter_accept_list( void )
{
 8015498:	b580      	push	{r7, lr}
 801549a:	b088      	sub	sp, #32
 801549c:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 801549e:	2300      	movs	r3, #0
 80154a0:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80154a2:	f107 0308 	add.w	r3, r7, #8
 80154a6:	2218      	movs	r2, #24
 80154a8:	2100      	movs	r1, #0
 80154aa:	4618      	mov	r0, r3
 80154ac:	f000 fd71 	bl	8015f92 <Osal_MemSet>
  rq.ogf = 0x3f;
 80154b0:	233f      	movs	r3, #63	@ 0x3f
 80154b2:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 80154b4:	2392      	movs	r3, #146	@ 0x92
 80154b6:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80154b8:	1dfb      	adds	r3, r7, #7
 80154ba:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80154bc:	2301      	movs	r3, #1
 80154be:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80154c0:	f107 0308 	add.w	r3, r7, #8
 80154c4:	2100      	movs	r1, #0
 80154c6:	4618      	mov	r0, r3
 80154c8:	f000 ffec 	bl	80164a4 <hci_send_req>
 80154cc:	4603      	mov	r3, r0
 80154ce:	2b00      	cmp	r3, #0
 80154d0:	da01      	bge.n	80154d6 <aci_gap_configure_filter_accept_list+0x3e>
    return BLE_STATUS_TIMEOUT;
 80154d2:	23ff      	movs	r3, #255	@ 0xff
 80154d4:	e000      	b.n	80154d8 <aci_gap_configure_filter_accept_list+0x40>
  return status;
 80154d6:	79fb      	ldrb	r3, [r7, #7]
}
 80154d8:	4618      	mov	r0, r3
 80154da:	3720      	adds	r7, #32
 80154dc:	46bd      	mov	sp, r7
 80154de:	bd80      	pop	{r7, pc}

080154e0 <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 80154e0:	b580      	push	{r7, lr}
 80154e2:	b0cc      	sub	sp, #304	@ 0x130
 80154e4:	af00      	add	r7, sp, #0
 80154e6:	4602      	mov	r2, r0
 80154e8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80154ec:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80154f0:	801a      	strh	r2, [r3, #0]
 80154f2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80154f6:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 80154fa:	460a      	mov	r2, r1
 80154fc:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 80154fe:	f107 0310 	add.w	r3, r7, #16
 8015502:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8015506:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801550a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 801550e:	2200      	movs	r2, #0
 8015510:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8015512:	2300      	movs	r3, #0
 8015514:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 8015518:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801551c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8015520:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8015524:	8812      	ldrh	r2, [r2, #0]
 8015526:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8015528:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801552c:	3302      	adds	r3, #2
 801552e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 8015532:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015536:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 801553a:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 801553e:	7812      	ldrb	r2, [r2, #0]
 8015540:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8015542:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015546:	3301      	adds	r3, #1
 8015548:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 801554c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8015550:	2218      	movs	r2, #24
 8015552:	2100      	movs	r1, #0
 8015554:	4618      	mov	r0, r3
 8015556:	f000 fd1c 	bl	8015f92 <Osal_MemSet>
  rq.ogf = 0x3f;
 801555a:	233f      	movs	r3, #63	@ 0x3f
 801555c:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x0a5;
 8015560:	23a5      	movs	r3, #165	@ 0xa5
 8015562:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8015566:	f107 0310 	add.w	r3, r7, #16
 801556a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 801556e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015572:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8015576:	f107 030f 	add.w	r3, r7, #15
 801557a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 801557e:	2301      	movs	r3, #1
 8015580:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8015584:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8015588:	2100      	movs	r1, #0
 801558a:	4618      	mov	r0, r3
 801558c:	f000 ff8a 	bl	80164a4 <hci_send_req>
 8015590:	4603      	mov	r3, r0
 8015592:	2b00      	cmp	r3, #0
 8015594:	da01      	bge.n	801559a <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
    return BLE_STATUS_TIMEOUT;
 8015596:	23ff      	movs	r3, #255	@ 0xff
 8015598:	e004      	b.n	80155a4 <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
  return status;
 801559a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801559e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80155a2:	781b      	ldrb	r3, [r3, #0]
}
 80155a4:	4618      	mov	r0, r3
 80155a6:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80155aa:	46bd      	mov	sp, r7
 80155ac:	bd80      	pop	{r7, pc}

080155ae <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 80155ae:	b580      	push	{r7, lr}
 80155b0:	b088      	sub	sp, #32
 80155b2:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80155b4:	2300      	movs	r3, #0
 80155b6:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80155b8:	f107 0308 	add.w	r3, r7, #8
 80155bc:	2218      	movs	r2, #24
 80155be:	2100      	movs	r1, #0
 80155c0:	4618      	mov	r0, r3
 80155c2:	f000 fce6 	bl	8015f92 <Osal_MemSet>
  rq.ogf = 0x3f;
 80155c6:	233f      	movs	r3, #63	@ 0x3f
 80155c8:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 80155ca:	f240 1301 	movw	r3, #257	@ 0x101
 80155ce:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80155d0:	1dfb      	adds	r3, r7, #7
 80155d2:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80155d4:	2301      	movs	r3, #1
 80155d6:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80155d8:	f107 0308 	add.w	r3, r7, #8
 80155dc:	2100      	movs	r1, #0
 80155de:	4618      	mov	r0, r3
 80155e0:	f000 ff60 	bl	80164a4 <hci_send_req>
 80155e4:	4603      	mov	r3, r0
 80155e6:	2b00      	cmp	r3, #0
 80155e8:	da01      	bge.n	80155ee <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 80155ea:	23ff      	movs	r3, #255	@ 0xff
 80155ec:	e000      	b.n	80155f0 <aci_gatt_init+0x42>
  return status;
 80155ee:	79fb      	ldrb	r3, [r7, #7]
}
 80155f0:	4618      	mov	r0, r3
 80155f2:	3720      	adds	r7, #32
 80155f4:	46bd      	mov	sp, r7
 80155f6:	bd80      	pop	{r7, pc}

080155f8 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 80155f8:	b590      	push	{r4, r7, lr}
 80155fa:	b0cf      	sub	sp, #316	@ 0x13c
 80155fc:	af00      	add	r7, sp, #0
 80155fe:	4604      	mov	r4, r0
 8015600:	f507 709c 	add.w	r0, r7, #312	@ 0x138
 8015604:	f5a0 709c 	sub.w	r0, r0, #312	@ 0x138
 8015608:	6001      	str	r1, [r0, #0]
 801560a:	4610      	mov	r0, r2
 801560c:	4619      	mov	r1, r3
 801560e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015612:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8015616:	4622      	mov	r2, r4
 8015618:	701a      	strb	r2, [r3, #0]
 801561a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801561e:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 8015622:	4602      	mov	r2, r0
 8015624:	701a      	strb	r2, [r3, #0]
 8015626:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801562a:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 801562e:	460a      	mov	r2, r1
 8015630:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 8015632:	f107 0310 	add.w	r3, r7, #16
 8015636:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 801563a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801563e:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8015642:	781b      	ldrb	r3, [r3, #0]
 8015644:	2b01      	cmp	r3, #1
 8015646:	d00a      	beq.n	801565e <aci_gatt_add_service+0x66>
 8015648:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801564c:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8015650:	781b      	ldrb	r3, [r3, #0]
 8015652:	2b02      	cmp	r3, #2
 8015654:	d101      	bne.n	801565a <aci_gatt_add_service+0x62>
 8015656:	2311      	movs	r3, #17
 8015658:	e002      	b.n	8015660 <aci_gatt_add_service+0x68>
 801565a:	2301      	movs	r3, #1
 801565c:	e000      	b.n	8015660 <aci_gatt_add_service+0x68>
 801565e:	2303      	movs	r3, #3
 8015660:	f107 0210 	add.w	r2, r7, #16
 8015664:	4413      	add	r3, r2
 8015666:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 801566a:	f107 030c 	add.w	r3, r7, #12
 801566e:	2203      	movs	r2, #3
 8015670:	2100      	movs	r1, #0
 8015672:	4618      	mov	r0, r3
 8015674:	f000 fc8d 	bl	8015f92 <Osal_MemSet>
  int index_input = 0;
 8015678:	2300      	movs	r3, #0
 801567a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 801567e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8015682:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8015686:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 801568a:	7812      	ldrb	r2, [r2, #0]
 801568c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 801568e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015692:	3301      	adds	r3, #1
 8015694:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 8015698:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801569c:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 80156a0:	781b      	ldrb	r3, [r3, #0]
 80156a2:	2b01      	cmp	r3, #1
 80156a4:	d002      	beq.n	80156ac <aci_gatt_add_service+0xb4>
 80156a6:	2b02      	cmp	r3, #2
 80156a8:	d004      	beq.n	80156b4 <aci_gatt_add_service+0xbc>
 80156aa:	e007      	b.n	80156bc <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 80156ac:	2302      	movs	r3, #2
 80156ae:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 80156b2:	e005      	b.n	80156c0 <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 80156b4:	2310      	movs	r3, #16
 80156b6:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 80156ba:	e001      	b.n	80156c0 <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 80156bc:	2397      	movs	r3, #151	@ 0x97
 80156be:	e06c      	b.n	801579a <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 80156c0:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80156c4:	1c58      	adds	r0, r3, #1
 80156c6:	f897 2137 	ldrb.w	r2, [r7, #311]	@ 0x137
 80156ca:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80156ce:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80156d2:	6819      	ldr	r1, [r3, #0]
 80156d4:	f000 fc4d 	bl	8015f72 <Osal_MemCpy>
    index_input += size;
 80156d8:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
 80156dc:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 80156e0:	4413      	add	r3, r2
 80156e2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Type = Service_Type;
 80156e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80156ea:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 80156ee:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 80156f2:	7812      	ldrb	r2, [r2, #0]
 80156f4:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 80156f6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80156fa:	3301      	adds	r3, #1
 80156fc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 8015700:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015704:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8015708:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 801570c:	7812      	ldrb	r2, [r2, #0]
 801570e:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 8015710:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015714:	3301      	adds	r3, #1
 8015716:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 801571a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801571e:	2218      	movs	r2, #24
 8015720:	2100      	movs	r1, #0
 8015722:	4618      	mov	r0, r3
 8015724:	f000 fc35 	bl	8015f92 <Osal_MemSet>
  rq.ogf = 0x3f;
 8015728:	233f      	movs	r3, #63	@ 0x3f
 801572a:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x102;
 801572e:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8015732:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8015736:	f107 0310 	add.w	r3, r7, #16
 801573a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 801573e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015742:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 8015746:	f107 030c 	add.w	r3, r7, #12
 801574a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 801574e:	2303      	movs	r3, #3
 8015750:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8015754:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8015758:	2100      	movs	r1, #0
 801575a:	4618      	mov	r0, r3
 801575c:	f000 fea2 	bl	80164a4 <hci_send_req>
 8015760:	4603      	mov	r3, r0
 8015762:	2b00      	cmp	r3, #0
 8015764:	da01      	bge.n	801576a <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 8015766:	23ff      	movs	r3, #255	@ 0xff
 8015768:	e017      	b.n	801579a <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 801576a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801576e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8015772:	781b      	ldrb	r3, [r3, #0]
 8015774:	2b00      	cmp	r3, #0
 8015776:	d005      	beq.n	8015784 <aci_gatt_add_service+0x18c>
    return resp.Status;
 8015778:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801577c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8015780:	781b      	ldrb	r3, [r3, #0]
 8015782:	e00a      	b.n	801579a <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 8015784:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015788:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801578c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8015790:	b29a      	uxth	r2, r3
 8015792:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8015796:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8015798:	2300      	movs	r3, #0
}
 801579a:	4618      	mov	r0, r3
 801579c:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 80157a0:	46bd      	mov	sp, r7
 80157a2:	bd90      	pop	{r4, r7, pc}

080157a4 <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 80157a4:	b590      	push	{r4, r7, lr}
 80157a6:	b0d1      	sub	sp, #324	@ 0x144
 80157a8:	af00      	add	r7, sp, #0
 80157aa:	4604      	mov	r4, r0
 80157ac:	4608      	mov	r0, r1
 80157ae:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 80157b2:	f5a1 719c 	sub.w	r1, r1, #312	@ 0x138
 80157b6:	600a      	str	r2, [r1, #0]
 80157b8:	4619      	mov	r1, r3
 80157ba:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80157be:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 80157c2:	4622      	mov	r2, r4
 80157c4:	801a      	strh	r2, [r3, #0]
 80157c6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80157ca:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 80157ce:	4602      	mov	r2, r0
 80157d0:	701a      	strb	r2, [r3, #0]
 80157d2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80157d6:	f5a3 739d 	sub.w	r3, r3, #314	@ 0x13a
 80157da:	460a      	mov	r2, r1
 80157dc:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 80157de:	f107 0318 	add.w	r3, r7, #24
 80157e2:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 80157e6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80157ea:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 80157ee:	781b      	ldrb	r3, [r3, #0]
 80157f0:	2b01      	cmp	r3, #1
 80157f2:	d00a      	beq.n	801580a <aci_gatt_add_char+0x66>
 80157f4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80157f8:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 80157fc:	781b      	ldrb	r3, [r3, #0]
 80157fe:	2b02      	cmp	r3, #2
 8015800:	d101      	bne.n	8015806 <aci_gatt_add_char+0x62>
 8015802:	2313      	movs	r3, #19
 8015804:	e002      	b.n	801580c <aci_gatt_add_char+0x68>
 8015806:	2303      	movs	r3, #3
 8015808:	e000      	b.n	801580c <aci_gatt_add_char+0x68>
 801580a:	2305      	movs	r3, #5
 801580c:	f107 0218 	add.w	r2, r7, #24
 8015810:	4413      	add	r3, r2
 8015812:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8015816:	f107 0314 	add.w	r3, r7, #20
 801581a:	2203      	movs	r2, #3
 801581c:	2100      	movs	r1, #0
 801581e:	4618      	mov	r0, r3
 8015820:	f000 fbb7 	bl	8015f92 <Osal_MemSet>
  int index_input = 0;
 8015824:	2300      	movs	r3, #0
 8015826:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Service_Handle = Service_Handle;
 801582a:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 801582e:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8015832:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 8015836:	8812      	ldrh	r2, [r2, #0]
 8015838:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 801583a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 801583e:	3302      	adds	r3, #2
 8015840:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 8015844:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8015848:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 801584c:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 8015850:	7812      	ldrb	r2, [r2, #0]
 8015852:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8015854:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8015858:	3301      	adds	r3, #1
 801585a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 801585e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8015862:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8015866:	781b      	ldrb	r3, [r3, #0]
 8015868:	2b01      	cmp	r3, #1
 801586a:	d002      	beq.n	8015872 <aci_gatt_add_char+0xce>
 801586c:	2b02      	cmp	r3, #2
 801586e:	d004      	beq.n	801587a <aci_gatt_add_char+0xd6>
 8015870:	e007      	b.n	8015882 <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 8015872:	2302      	movs	r3, #2
 8015874:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 8015878:	e005      	b.n	8015886 <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 801587a:	2310      	movs	r3, #16
 801587c:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 8015880:	e001      	b.n	8015886 <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 8015882:	2397      	movs	r3, #151	@ 0x97
 8015884:	e091      	b.n	80159aa <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 8015886:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 801588a:	1cd8      	adds	r0, r3, #3
 801588c:	f897 213f 	ldrb.w	r2, [r7, #319]	@ 0x13f
 8015890:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8015894:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8015898:	6819      	ldr	r1, [r3, #0]
 801589a:	f000 fb6a 	bl	8015f72 <Osal_MemCpy>
    index_input += size;
 801589e:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 80158a2:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 80158a6:	4413      	add	r3, r2
 80158a8:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 80158ac:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80158b0:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 80158b4:	f5a2 729d 	sub.w	r2, r2, #314	@ 0x13a
 80158b8:	8812      	ldrh	r2, [r2, #0]
 80158ba:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 80158bc:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80158c0:	3302      	adds	r3, #2
 80158c2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Properties = Char_Properties;
 80158c6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80158ca:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 80158ce:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 80158d0:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80158d4:	3301      	adds	r3, #1
 80158d6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 80158da:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80158de:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 80158e2:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 80158e4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80158e8:	3301      	adds	r3, #1
 80158ea:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 80158ee:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80158f2:	f897 2158 	ldrb.w	r2, [r7, #344]	@ 0x158
 80158f6:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 80158f8:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80158fc:	3301      	adds	r3, #1
 80158fe:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 8015902:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8015906:	f897 215c 	ldrb.w	r2, [r7, #348]	@ 0x15c
 801590a:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 801590c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8015910:	3301      	adds	r3, #1
 8015912:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Is_Variable = Is_Variable;
 8015916:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 801591a:	f897 2160 	ldrb.w	r2, [r7, #352]	@ 0x160
 801591e:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 8015920:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8015924:	3301      	adds	r3, #1
 8015926:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 801592a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 801592e:	2218      	movs	r2, #24
 8015930:	2100      	movs	r1, #0
 8015932:	4618      	mov	r0, r3
 8015934:	f000 fb2d 	bl	8015f92 <Osal_MemSet>
  rq.ogf = 0x3f;
 8015938:	233f      	movs	r3, #63	@ 0x3f
 801593a:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
  rq.ocf = 0x104;
 801593e:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8015942:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
  rq.cparam = cmd_buffer;
 8015946:	f107 0318 	add.w	r3, r7, #24
 801594a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.clen = index_input;
 801594e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8015952:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  rq.rparam = &resp;
 8015956:	f107 0314 	add.w	r3, r7, #20
 801595a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  rq.rlen = sizeof(resp);
 801595e:	2303      	movs	r3, #3
 8015960:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8015964:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8015968:	2100      	movs	r1, #0
 801596a:	4618      	mov	r0, r3
 801596c:	f000 fd9a 	bl	80164a4 <hci_send_req>
 8015970:	4603      	mov	r3, r0
 8015972:	2b00      	cmp	r3, #0
 8015974:	da01      	bge.n	801597a <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 8015976:	23ff      	movs	r3, #255	@ 0xff
 8015978:	e017      	b.n	80159aa <aci_gatt_add_char+0x206>
  if ( resp.Status )
 801597a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801597e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8015982:	781b      	ldrb	r3, [r3, #0]
 8015984:	2b00      	cmp	r3, #0
 8015986:	d005      	beq.n	8015994 <aci_gatt_add_char+0x1f0>
    return resp.Status;
 8015988:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801598c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8015990:	781b      	ldrb	r3, [r3, #0]
 8015992:	e00a      	b.n	80159aa <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 8015994:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8015998:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801599c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80159a0:	b29a      	uxth	r2, r3
 80159a2:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 80159a6:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80159a8:	2300      	movs	r3, #0
}
 80159aa:	4618      	mov	r0, r3
 80159ac:	f507 77a2 	add.w	r7, r7, #324	@ 0x144
 80159b0:	46bd      	mov	sp, r7
 80159b2:	bd90      	pop	{r4, r7, pc}

080159b4 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 80159b4:	b5b0      	push	{r4, r5, r7, lr}
 80159b6:	b0cc      	sub	sp, #304	@ 0x130
 80159b8:	af00      	add	r7, sp, #0
 80159ba:	4605      	mov	r5, r0
 80159bc:	460c      	mov	r4, r1
 80159be:	4610      	mov	r0, r2
 80159c0:	4619      	mov	r1, r3
 80159c2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80159c6:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80159ca:	462a      	mov	r2, r5
 80159cc:	801a      	strh	r2, [r3, #0]
 80159ce:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80159d2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80159d6:	4622      	mov	r2, r4
 80159d8:	801a      	strh	r2, [r3, #0]
 80159da:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80159de:	f2a3 132d 	subw	r3, r3, #301	@ 0x12d
 80159e2:	4602      	mov	r2, r0
 80159e4:	701a      	strb	r2, [r3, #0]
 80159e6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80159ea:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 80159ee:	460a      	mov	r2, r1
 80159f0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 80159f2:	f107 0310 	add.w	r3, r7, #16
 80159f6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80159fa:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80159fe:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8015a02:	2200      	movs	r2, #0
 8015a04:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8015a06:	2300      	movs	r3, #0
 8015a08:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_Handle = Service_Handle;
 8015a0c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015a10:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8015a14:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8015a18:	8812      	ldrh	r2, [r2, #0]
 8015a1a:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8015a1c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015a20:	3302      	adds	r3, #2
 8015a22:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Handle = Char_Handle;
 8015a26:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015a2a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8015a2e:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 8015a32:	8812      	ldrh	r2, [r2, #0]
 8015a34:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8015a36:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015a3a:	3302      	adds	r3, #2
 8015a3c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Val_Offset = Val_Offset;
 8015a40:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015a44:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8015a48:	f2a2 122d 	subw	r2, r2, #301	@ 0x12d
 8015a4c:	7812      	ldrb	r2, [r2, #0]
 8015a4e:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8015a50:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015a54:	3301      	adds	r3, #1
 8015a56:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 8015a5a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015a5e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8015a62:	f5a2 7297 	sub.w	r2, r2, #302	@ 0x12e
 8015a66:	7812      	ldrb	r2, [r2, #0]
 8015a68:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8015a6a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015a6e:	3301      	adds	r3, #1
 8015a70:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 8015a74:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015a78:	1d98      	adds	r0, r3, #6
 8015a7a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015a7e:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 8015a82:	781b      	ldrb	r3, [r3, #0]
 8015a84:	461a      	mov	r2, r3
 8015a86:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8015a8a:	f000 fa72 	bl	8015f72 <Osal_MemCpy>
  index_input += Char_Value_Length;
 8015a8e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015a92:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 8015a96:	781b      	ldrb	r3, [r3, #0]
 8015a98:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8015a9c:	4413      	add	r3, r2
 8015a9e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8015aa2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8015aa6:	2218      	movs	r2, #24
 8015aa8:	2100      	movs	r1, #0
 8015aaa:	4618      	mov	r0, r3
 8015aac:	f000 fa71 	bl	8015f92 <Osal_MemSet>
  rq.ogf = 0x3f;
 8015ab0:	233f      	movs	r3, #63	@ 0x3f
 8015ab2:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x106;
 8015ab6:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8015aba:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8015abe:	f107 0310 	add.w	r3, r7, #16
 8015ac2:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8015ac6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015aca:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8015ace:	f107 030f 	add.w	r3, r7, #15
 8015ad2:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8015ad6:	2301      	movs	r3, #1
 8015ad8:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8015adc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8015ae0:	2100      	movs	r1, #0
 8015ae2:	4618      	mov	r0, r3
 8015ae4:	f000 fcde 	bl	80164a4 <hci_send_req>
 8015ae8:	4603      	mov	r3, r0
 8015aea:	2b00      	cmp	r3, #0
 8015aec:	da01      	bge.n	8015af2 <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 8015aee:	23ff      	movs	r3, #255	@ 0xff
 8015af0:	e004      	b.n	8015afc <aci_gatt_update_char_value+0x148>
  return status;
 8015af2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015af6:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8015afa:	781b      	ldrb	r3, [r3, #0]
}
 8015afc:	4618      	mov	r0, r3
 8015afe:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8015b02:	46bd      	mov	sp, r7
 8015b04:	bdb0      	pop	{r4, r5, r7, pc}

08015b06 <aci_gatt_confirm_indication>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gatt_confirm_indication( uint16_t Connection_Handle )
{
 8015b06:	b580      	push	{r7, lr}
 8015b08:	b0cc      	sub	sp, #304	@ 0x130
 8015b0a:	af00      	add	r7, sp, #0
 8015b0c:	4602      	mov	r2, r0
 8015b0e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015b12:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8015b16:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_confirm_indication_cp0 *cp0 = (aci_gatt_confirm_indication_cp0*)(cmd_buffer);
 8015b18:	f107 0310 	add.w	r3, r7, #16
 8015b1c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8015b20:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015b24:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8015b28:	2200      	movs	r2, #0
 8015b2a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8015b2c:	2300      	movs	r3, #0
 8015b2e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 8015b32:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015b36:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8015b3a:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8015b3e:	8812      	ldrh	r2, [r2, #0]
 8015b40:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8015b42:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015b46:	3302      	adds	r3, #2
 8015b48:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8015b4c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8015b50:	2218      	movs	r2, #24
 8015b52:	2100      	movs	r1, #0
 8015b54:	4618      	mov	r0, r3
 8015b56:	f000 fa1c 	bl	8015f92 <Osal_MemSet>
  rq.ogf = 0x3f;
 8015b5a:	233f      	movs	r3, #63	@ 0x3f
 8015b5c:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x125;
 8015b60:	f240 1325 	movw	r3, #293	@ 0x125
 8015b64:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8015b68:	f107 0310 	add.w	r3, r7, #16
 8015b6c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8015b70:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015b74:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8015b78:	f107 030f 	add.w	r3, r7, #15
 8015b7c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8015b80:	2301      	movs	r3, #1
 8015b82:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8015b86:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8015b8a:	2100      	movs	r1, #0
 8015b8c:	4618      	mov	r0, r3
 8015b8e:	f000 fc89 	bl	80164a4 <hci_send_req>
 8015b92:	4603      	mov	r3, r0
 8015b94:	2b00      	cmp	r3, #0
 8015b96:	da01      	bge.n	8015b9c <aci_gatt_confirm_indication+0x96>
    return BLE_STATUS_TIMEOUT;
 8015b98:	23ff      	movs	r3, #255	@ 0xff
 8015b9a:	e004      	b.n	8015ba6 <aci_gatt_confirm_indication+0xa0>
  return status;
 8015b9c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015ba0:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8015ba4:	781b      	ldrb	r3, [r3, #0]
}
 8015ba6:	4618      	mov	r0, r3
 8015ba8:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8015bac:	46bd      	mov	sp, r7
 8015bae:	bd80      	pop	{r7, pc}

08015bb0 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 8015bb0:	b580      	push	{r7, lr}
 8015bb2:	b0cc      	sub	sp, #304	@ 0x130
 8015bb4:	af00      	add	r7, sp, #0
 8015bb6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015bba:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8015bbe:	601a      	str	r2, [r3, #0]
 8015bc0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015bc4:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8015bc8:	4602      	mov	r2, r0
 8015bca:	701a      	strb	r2, [r3, #0]
 8015bcc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015bd0:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8015bd4:	460a      	mov	r2, r1
 8015bd6:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 8015bd8:	f107 0310 	add.w	r3, r7, #16
 8015bdc:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8015be0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015be4:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8015be8:	2200      	movs	r2, #0
 8015bea:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8015bec:	2300      	movs	r3, #0
 8015bee:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Offset = Offset;
 8015bf2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015bf6:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8015bfa:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8015bfe:	7812      	ldrb	r2, [r2, #0]
 8015c00:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8015c02:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015c06:	3301      	adds	r3, #1
 8015c08:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Length = Length;
 8015c0c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015c10:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8015c14:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8015c18:	7812      	ldrb	r2, [r2, #0]
 8015c1a:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8015c1c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015c20:	3301      	adds	r3, #1
 8015c22:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 8015c26:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015c2a:	1c98      	adds	r0, r3, #2
 8015c2c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015c30:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8015c34:	781a      	ldrb	r2, [r3, #0]
 8015c36:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015c3a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8015c3e:	6819      	ldr	r1, [r3, #0]
 8015c40:	f000 f997 	bl	8015f72 <Osal_MemCpy>
  index_input += Length;
 8015c44:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015c48:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8015c4c:	781b      	ldrb	r3, [r3, #0]
 8015c4e:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8015c52:	4413      	add	r3, r2
 8015c54:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8015c58:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8015c5c:	2218      	movs	r2, #24
 8015c5e:	2100      	movs	r1, #0
 8015c60:	4618      	mov	r0, r3
 8015c62:	f000 f996 	bl	8015f92 <Osal_MemSet>
  rq.ogf = 0x3f;
 8015c66:	233f      	movs	r3, #63	@ 0x3f
 8015c68:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00c;
 8015c6c:	230c      	movs	r3, #12
 8015c6e:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8015c72:	f107 0310 	add.w	r3, r7, #16
 8015c76:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8015c7a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015c7e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8015c82:	f107 030f 	add.w	r3, r7, #15
 8015c86:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8015c8a:	2301      	movs	r3, #1
 8015c8c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8015c90:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8015c94:	2100      	movs	r1, #0
 8015c96:	4618      	mov	r0, r3
 8015c98:	f000 fc04 	bl	80164a4 <hci_send_req>
 8015c9c:	4603      	mov	r3, r0
 8015c9e:	2b00      	cmp	r3, #0
 8015ca0:	da01      	bge.n	8015ca6 <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 8015ca2:	23ff      	movs	r3, #255	@ 0xff
 8015ca4:	e004      	b.n	8015cb0 <aci_hal_write_config_data+0x100>
  return status;
 8015ca6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015caa:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8015cae:	781b      	ldrb	r3, [r3, #0]
}
 8015cb0:	4618      	mov	r0, r3
 8015cb2:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8015cb6:	46bd      	mov	sp, r7
 8015cb8:	bd80      	pop	{r7, pc}

08015cba <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 8015cba:	b580      	push	{r7, lr}
 8015cbc:	b0cc      	sub	sp, #304	@ 0x130
 8015cbe:	af00      	add	r7, sp, #0
 8015cc0:	4602      	mov	r2, r0
 8015cc2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015cc6:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8015cca:	701a      	strb	r2, [r3, #0]
 8015ccc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015cd0:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8015cd4:	460a      	mov	r2, r1
 8015cd6:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 8015cd8:	f107 0310 	add.w	r3, r7, #16
 8015cdc:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8015ce0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015ce4:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8015ce8:	2200      	movs	r2, #0
 8015cea:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8015cec:	2300      	movs	r3, #0
 8015cee:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->En_High_Power = En_High_Power;
 8015cf2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015cf6:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8015cfa:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8015cfe:	7812      	ldrb	r2, [r2, #0]
 8015d00:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8015d02:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015d06:	3301      	adds	r3, #1
 8015d08:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->PA_Level = PA_Level;
 8015d0c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015d10:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8015d14:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8015d18:	7812      	ldrb	r2, [r2, #0]
 8015d1a:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8015d1c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015d20:	3301      	adds	r3, #1
 8015d22:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8015d26:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8015d2a:	2218      	movs	r2, #24
 8015d2c:	2100      	movs	r1, #0
 8015d2e:	4618      	mov	r0, r3
 8015d30:	f000 f92f 	bl	8015f92 <Osal_MemSet>
  rq.ogf = 0x3f;
 8015d34:	233f      	movs	r3, #63	@ 0x3f
 8015d36:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00f;
 8015d3a:	230f      	movs	r3, #15
 8015d3c:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8015d40:	f107 0310 	add.w	r3, r7, #16
 8015d44:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8015d48:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015d4c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8015d50:	f107 030f 	add.w	r3, r7, #15
 8015d54:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8015d58:	2301      	movs	r3, #1
 8015d5a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8015d5e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8015d62:	2100      	movs	r1, #0
 8015d64:	4618      	mov	r0, r3
 8015d66:	f000 fb9d 	bl	80164a4 <hci_send_req>
 8015d6a:	4603      	mov	r3, r0
 8015d6c:	2b00      	cmp	r3, #0
 8015d6e:	da01      	bge.n	8015d74 <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 8015d70:	23ff      	movs	r3, #255	@ 0xff
 8015d72:	e004      	b.n	8015d7e <aci_hal_set_tx_power_level+0xc4>
  return status;
 8015d74:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015d78:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8015d7c:	781b      	ldrb	r3, [r3, #0]
}
 8015d7e:	4618      	mov	r0, r3
 8015d80:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8015d84:	46bd      	mov	sp, r7
 8015d86:	bd80      	pop	{r7, pc}

08015d88 <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 8015d88:	b580      	push	{r7, lr}
 8015d8a:	b0cc      	sub	sp, #304	@ 0x130
 8015d8c:	af00      	add	r7, sp, #0
 8015d8e:	4602      	mov	r2, r0
 8015d90:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015d94:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8015d98:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 8015d9a:	f107 0310 	add.w	r3, r7, #16
 8015d9e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8015da2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015da6:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8015daa:	2200      	movs	r2, #0
 8015dac:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8015dae:	2300      	movs	r3, #0
 8015db0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 8015db4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015db8:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8015dbc:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8015dc0:	8812      	ldrh	r2, [r2, #0]
 8015dc2:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8015dc4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015dc8:	3302      	adds	r3, #2
 8015dca:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8015dce:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8015dd2:	2218      	movs	r2, #24
 8015dd4:	2100      	movs	r1, #0
 8015dd6:	4618      	mov	r0, r3
 8015dd8:	f000 f8db 	bl	8015f92 <Osal_MemSet>
  rq.ogf = 0x3f;
 8015ddc:	233f      	movs	r3, #63	@ 0x3f
 8015dde:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x018;
 8015de2:	2318      	movs	r3, #24
 8015de4:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8015de8:	f107 0310 	add.w	r3, r7, #16
 8015dec:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8015df0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015df4:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8015df8:	f107 030f 	add.w	r3, r7, #15
 8015dfc:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8015e00:	2301      	movs	r3, #1
 8015e02:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8015e06:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8015e0a:	2100      	movs	r1, #0
 8015e0c:	4618      	mov	r0, r3
 8015e0e:	f000 fb49 	bl	80164a4 <hci_send_req>
 8015e12:	4603      	mov	r3, r0
 8015e14:	2b00      	cmp	r3, #0
 8015e16:	da01      	bge.n	8015e1c <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 8015e18:	23ff      	movs	r3, #255	@ 0xff
 8015e1a:	e004      	b.n	8015e26 <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 8015e1c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015e20:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8015e24:	781b      	ldrb	r3, [r3, #0]
}
 8015e26:	4618      	mov	r0, r3
 8015e28:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8015e2c:	46bd      	mov	sp, r7
 8015e2e:	bd80      	pop	{r7, pc}

08015e30 <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 8015e30:	b580      	push	{r7, lr}
 8015e32:	b088      	sub	sp, #32
 8015e34:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8015e36:	2300      	movs	r3, #0
 8015e38:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8015e3a:	f107 0308 	add.w	r3, r7, #8
 8015e3e:	2218      	movs	r2, #24
 8015e40:	2100      	movs	r1, #0
 8015e42:	4618      	mov	r0, r3
 8015e44:	f000 f8a5 	bl	8015f92 <Osal_MemSet>
  rq.ogf = 0x03;
 8015e48:	2303      	movs	r3, #3
 8015e4a:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 8015e4c:	2303      	movs	r3, #3
 8015e4e:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8015e50:	1dfb      	adds	r3, r7, #7
 8015e52:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8015e54:	2301      	movs	r3, #1
 8015e56:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8015e58:	f107 0308 	add.w	r3, r7, #8
 8015e5c:	2100      	movs	r1, #0
 8015e5e:	4618      	mov	r0, r3
 8015e60:	f000 fb20 	bl	80164a4 <hci_send_req>
 8015e64:	4603      	mov	r3, r0
 8015e66:	2b00      	cmp	r3, #0
 8015e68:	da01      	bge.n	8015e6e <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 8015e6a:	23ff      	movs	r3, #255	@ 0xff
 8015e6c:	e000      	b.n	8015e70 <hci_reset+0x40>
  return status;
 8015e6e:	79fb      	ldrb	r3, [r7, #7]
}
 8015e70:	4618      	mov	r0, r3
 8015e72:	3720      	adds	r7, #32
 8015e74:	46bd      	mov	sp, r7
 8015e76:	bd80      	pop	{r7, pc}

08015e78 <hci_le_set_default_phy>:
}

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 8015e78:	b590      	push	{r4, r7, lr}
 8015e7a:	b0cd      	sub	sp, #308	@ 0x134
 8015e7c:	af00      	add	r7, sp, #0
 8015e7e:	4604      	mov	r4, r0
 8015e80:	4608      	mov	r0, r1
 8015e82:	4611      	mov	r1, r2
 8015e84:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015e88:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8015e8c:	4622      	mov	r2, r4
 8015e8e:	701a      	strb	r2, [r3, #0]
 8015e90:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015e94:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8015e98:	4602      	mov	r2, r0
 8015e9a:	701a      	strb	r2, [r3, #0]
 8015e9c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015ea0:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8015ea4:	460a      	mov	r2, r1
 8015ea6:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 8015ea8:	f107 0310 	add.w	r3, r7, #16
 8015eac:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8015eb0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015eb4:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8015eb8:	2200      	movs	r2, #0
 8015eba:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8015ebc:	2300      	movs	r3, #0
 8015ebe:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 8015ec2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015ec6:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8015eca:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8015ece:	7812      	ldrb	r2, [r2, #0]
 8015ed0:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8015ed2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015ed6:	3301      	adds	r3, #1
 8015ed8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->TX_PHYS = TX_PHYS;
 8015edc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015ee0:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8015ee4:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8015ee8:	7812      	ldrb	r2, [r2, #0]
 8015eea:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8015eec:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015ef0:	3301      	adds	r3, #1
 8015ef2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->RX_PHYS = RX_PHYS;
 8015ef6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015efa:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8015efe:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8015f02:	7812      	ldrb	r2, [r2, #0]
 8015f04:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8015f06:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015f0a:	3301      	adds	r3, #1
 8015f0c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8015f10:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8015f14:	2218      	movs	r2, #24
 8015f16:	2100      	movs	r1, #0
 8015f18:	4618      	mov	r0, r3
 8015f1a:	f000 f83a 	bl	8015f92 <Osal_MemSet>
  rq.ogf = 0x08;
 8015f1e:	2308      	movs	r3, #8
 8015f20:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x031;
 8015f24:	2331      	movs	r3, #49	@ 0x31
 8015f26:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8015f2a:	f107 0310 	add.w	r3, r7, #16
 8015f2e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8015f32:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015f36:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8015f3a:	f107 030f 	add.w	r3, r7, #15
 8015f3e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8015f42:	2301      	movs	r3, #1
 8015f44:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8015f48:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8015f4c:	2100      	movs	r1, #0
 8015f4e:	4618      	mov	r0, r3
 8015f50:	f000 faa8 	bl	80164a4 <hci_send_req>
 8015f54:	4603      	mov	r3, r0
 8015f56:	2b00      	cmp	r3, #0
 8015f58:	da01      	bge.n	8015f5e <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 8015f5a:	23ff      	movs	r3, #255	@ 0xff
 8015f5c:	e004      	b.n	8015f68 <hci_le_set_default_phy+0xf0>
  return status;
 8015f5e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015f62:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8015f66:	781b      	ldrb	r3, [r3, #0]
}
 8015f68:	4618      	mov	r0, r3
 8015f6a:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 8015f6e:	46bd      	mov	sp, r7
 8015f70:	bd90      	pop	{r4, r7, pc}

08015f72 <Osal_MemCpy>:
 * Osal_MemCpy
 *
 */

void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 8015f72:	b580      	push	{r7, lr}
 8015f74:	b084      	sub	sp, #16
 8015f76:	af00      	add	r7, sp, #0
 8015f78:	60f8      	str	r0, [r7, #12]
 8015f7a:	60b9      	str	r1, [r7, #8]
 8015f7c:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size );
 8015f7e:	687a      	ldr	r2, [r7, #4]
 8015f80:	68b9      	ldr	r1, [r7, #8]
 8015f82:	68f8      	ldr	r0, [r7, #12]
 8015f84:	f005 fbe1 	bl	801b74a <memcpy>
 8015f88:	4603      	mov	r3, r0
}
 8015f8a:	4618      	mov	r0, r3
 8015f8c:	3710      	adds	r7, #16
 8015f8e:	46bd      	mov	sp, r7
 8015f90:	bd80      	pop	{r7, pc}

08015f92 <Osal_MemSet>:
 * Osal_MemSet
 *
 */

void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 8015f92:	b580      	push	{r7, lr}
 8015f94:	b084      	sub	sp, #16
 8015f96:	af00      	add	r7, sp, #0
 8015f98:	60f8      	str	r0, [r7, #12]
 8015f9a:	60b9      	str	r1, [r7, #8]
 8015f9c:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 8015f9e:	687a      	ldr	r2, [r7, #4]
 8015fa0:	68b9      	ldr	r1, [r7, #8]
 8015fa2:	68f8      	ldr	r0, [r7, #12]
 8015fa4:	f005 fab5 	bl	801b512 <memset>
 8015fa8:	4603      	mov	r3, r0
}
 8015faa:	4618      	mov	r0, r3
 8015fac:	3710      	adds	r7, #16
 8015fae:	46bd      	mov	sp, r7
 8015fb0:	bd80      	pop	{r7, pc}

08015fb2 <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 8015fb2:	b480      	push	{r7}
 8015fb4:	af00      	add	r7, sp, #0
  return;
 8015fb6:	bf00      	nop
}
 8015fb8:	46bd      	mov	sp, r7
 8015fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fbe:	4770      	bx	lr

08015fc0 <BLS_Init>:

__WEAK void BLS_Init( void )
{
 8015fc0:	b480      	push	{r7}
 8015fc2:	af00      	add	r7, sp, #0
  return;
 8015fc4:	bf00      	nop
}
 8015fc6:	46bd      	mov	sp, r7
 8015fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fcc:	4770      	bx	lr

08015fce <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 8015fce:	b480      	push	{r7}
 8015fd0:	af00      	add	r7, sp, #0
  return;
 8015fd2:	bf00      	nop
}
 8015fd4:	46bd      	mov	sp, r7
 8015fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fda:	4770      	bx	lr

08015fdc <DIS_Init>:
__WEAK void DIS_Init( void )
{
 8015fdc:	b480      	push	{r7}
 8015fde:	af00      	add	r7, sp, #0
  return;
 8015fe0:	bf00      	nop
}
 8015fe2:	46bd      	mov	sp, r7
 8015fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fe8:	4770      	bx	lr

08015fea <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 8015fea:	b480      	push	{r7}
 8015fec:	af00      	add	r7, sp, #0
  return;
 8015fee:	bf00      	nop
}
 8015ff0:	46bd      	mov	sp, r7
 8015ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ff6:	4770      	bx	lr

08015ff8 <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 8015ff8:	b480      	push	{r7}
 8015ffa:	af00      	add	r7, sp, #0
  return;
 8015ffc:	bf00      	nop
}
 8015ffe:	46bd      	mov	sp, r7
 8016000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016004:	4770      	bx	lr

08016006 <HRS_Init>:
__WEAK void HRS_Init( void )
{
 8016006:	b480      	push	{r7}
 8016008:	af00      	add	r7, sp, #0
  return;
 801600a:	bf00      	nop
}
 801600c:	46bd      	mov	sp, r7
 801600e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016012:	4770      	bx	lr

08016014 <HTS_Init>:
__WEAK void HTS_Init( void )
{
 8016014:	b480      	push	{r7}
 8016016:	af00      	add	r7, sp, #0
  return;
 8016018:	bf00      	nop
}
 801601a:	46bd      	mov	sp, r7
 801601c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016020:	4770      	bx	lr

08016022 <IAS_Init>:
__WEAK void IAS_Init( void )
{
 8016022:	b480      	push	{r7}
 8016024:	af00      	add	r7, sp, #0
  return;
 8016026:	bf00      	nop
}
 8016028:	46bd      	mov	sp, r7
 801602a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801602e:	4770      	bx	lr

08016030 <LLS_Init>:
__WEAK void LLS_Init( void )
{
 8016030:	b480      	push	{r7}
 8016032:	af00      	add	r7, sp, #0
  return;
 8016034:	bf00      	nop
}
 8016036:	46bd      	mov	sp, r7
 8016038:	f85d 7b04 	ldr.w	r7, [sp], #4
 801603c:	4770      	bx	lr

0801603e <TPS_Init>:
__WEAK void TPS_Init( void )
{
 801603e:	b480      	push	{r7}
 8016040:	af00      	add	r7, sp, #0
  return;
 8016042:	bf00      	nop
}
 8016044:	46bd      	mov	sp, r7
 8016046:	f85d 7b04 	ldr.w	r7, [sp], #4
 801604a:	4770      	bx	lr

0801604c <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 801604c:	b480      	push	{r7}
 801604e:	af00      	add	r7, sp, #0
  return;
 8016050:	bf00      	nop
}
 8016052:	46bd      	mov	sp, r7
 8016054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016058:	4770      	bx	lr

0801605a <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 801605a:	b480      	push	{r7}
 801605c:	af00      	add	r7, sp, #0
  return;
 801605e:	bf00      	nop
}
 8016060:	46bd      	mov	sp, r7
 8016062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016066:	4770      	bx	lr

08016068 <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 8016068:	b480      	push	{r7}
 801606a:	af00      	add	r7, sp, #0
  return;
 801606c:	bf00      	nop
}
 801606e:	46bd      	mov	sp, r7
 8016070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016074:	4770      	bx	lr

08016076 <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 8016076:	b480      	push	{r7}
 8016078:	af00      	add	r7, sp, #0
  return;
 801607a:	bf00      	nop
}
 801607c:	46bd      	mov	sp, r7
 801607e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016082:	4770      	bx	lr

08016084 <MESH_Init>:
__WEAK void MESH_Init( void )
{
 8016084:	b480      	push	{r7}
 8016086:	af00      	add	r7, sp, #0
  return;
 8016088:	bf00      	nop
}
 801608a:	46bd      	mov	sp, r7
 801608c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016090:	4770      	bx	lr

08016092 <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 8016092:	b480      	push	{r7}
 8016094:	af00      	add	r7, sp, #0
  return;
 8016096:	bf00      	nop
}
 8016098:	46bd      	mov	sp, r7
 801609a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801609e:	4770      	bx	lr

080160a0 <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 80160a0:	b580      	push	{r7, lr}
 80160a2:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 80160a4:	4b04      	ldr	r3, [pc, #16]	@ (80160b8 <SVCCTL_Init+0x18>)
 80160a6:	2200      	movs	r2, #0
 80160a8:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 80160aa:	4b04      	ldr	r3, [pc, #16]	@ (80160bc <SVCCTL_Init+0x1c>)
 80160ac:	2200      	movs	r2, #0
 80160ae:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 80160b0:	f000 f806 	bl	80160c0 <SVCCTL_SvcInit>

  return;
 80160b4:	bf00      	nop
}
 80160b6:	bd80      	pop	{r7, pc}
 80160b8:	20000320 	.word	0x20000320
 80160bc:	20000340 	.word	0x20000340

080160c0 <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 80160c0:	b580      	push	{r7, lr}
 80160c2:	af00      	add	r7, sp, #0
  BAS_Init();
 80160c4:	f7ff ff75 	bl	8015fb2 <BAS_Init>

  BLS_Init();
 80160c8:	f7ff ff7a 	bl	8015fc0 <BLS_Init>

  CRS_STM_Init();
 80160cc:	f7ff ff7f 	bl	8015fce <CRS_STM_Init>

  DIS_Init();
 80160d0:	f7ff ff84 	bl	8015fdc <DIS_Init>

  EDS_STM_Init();
 80160d4:	f7ff ff89 	bl	8015fea <EDS_STM_Init>

  HIDS_Init();
 80160d8:	f7ff ff8e 	bl	8015ff8 <HIDS_Init>

  HRS_Init();
 80160dc:	f7ff ff93 	bl	8016006 <HRS_Init>

  HTS_Init();
 80160e0:	f7ff ff98 	bl	8016014 <HTS_Init>

  IAS_Init();
 80160e4:	f7ff ff9d 	bl	8016022 <IAS_Init>

  LLS_Init();
 80160e8:	f7ff ffa2 	bl	8016030 <LLS_Init>

  TPS_Init();
 80160ec:	f7ff ffa7 	bl	801603e <TPS_Init>

  MOTENV_STM_Init();
 80160f0:	f7ff ffac 	bl	801604c <MOTENV_STM_Init>

  P2PS_STM_Init();
 80160f4:	f7ff ffb1 	bl	801605a <P2PS_STM_Init>

  ZDD_STM_Init();
 80160f8:	f7ff ffb6 	bl	8016068 <ZDD_STM_Init>

  OTAS_STM_Init();
 80160fc:	f7ff ffbb 	bl	8016076 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 8016100:	f7ff ffc7 	bl	8016092 <BVOPUS_STM_Init>

  MESH_Init();
 8016104:	f7ff ffbe 	bl	8016084 <MESH_Init>

  SVCCTL_InitCustomSvc();
 8016108:	f002 f820 	bl	801814c <SVCCTL_InitCustomSvc>
  
  return;
 801610c:	bf00      	nop
}
 801610e:	bd80      	pop	{r7, pc}

08016110 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 8016110:	b480      	push	{r7}
 8016112:	b083      	sub	sp, #12
 8016114:	af00      	add	r7, sp, #0
 8016116:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 8016118:	4b09      	ldr	r3, [pc, #36]	@ (8016140 <SVCCTL_RegisterSvcHandler+0x30>)
 801611a:	7f1b      	ldrb	r3, [r3, #28]
 801611c:	4619      	mov	r1, r3
 801611e:	4a08      	ldr	r2, [pc, #32]	@ (8016140 <SVCCTL_RegisterSvcHandler+0x30>)
 8016120:	687b      	ldr	r3, [r7, #4]
 8016122:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 8016126:	4b06      	ldr	r3, [pc, #24]	@ (8016140 <SVCCTL_RegisterSvcHandler+0x30>)
 8016128:	7f1b      	ldrb	r3, [r3, #28]
 801612a:	3301      	adds	r3, #1
 801612c:	b2da      	uxtb	r2, r3
 801612e:	4b04      	ldr	r3, [pc, #16]	@ (8016140 <SVCCTL_RegisterSvcHandler+0x30>)
 8016130:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 8016132:	bf00      	nop
}
 8016134:	370c      	adds	r7, #12
 8016136:	46bd      	mov	sp, r7
 8016138:	f85d 7b04 	ldr.w	r7, [sp], #4
 801613c:	4770      	bx	lr
 801613e:	bf00      	nop
 8016140:	20000320 	.word	0x20000320

08016144 <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 8016144:	b580      	push	{r7, lr}
 8016146:	b086      	sub	sp, #24
 8016148:	af00      	add	r7, sp, #0
 801614a:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 801614c:	687b      	ldr	r3, [r7, #4]
 801614e:	3301      	adds	r3, #1
 8016150:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 8016152:	2300      	movs	r3, #0
 8016154:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 8016156:	693b      	ldr	r3, [r7, #16]
 8016158:	781b      	ldrb	r3, [r3, #0]
 801615a:	2bff      	cmp	r3, #255	@ 0xff
 801615c:	d125      	bne.n	80161aa <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 801615e:	693b      	ldr	r3, [r7, #16]
 8016160:	3302      	adds	r3, #2
 8016162:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 8016164:	68fb      	ldr	r3, [r7, #12]
 8016166:	881b      	ldrh	r3, [r3, #0]
 8016168:	b29b      	uxth	r3, r3
 801616a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801616e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8016172:	d118      	bne.n	80161a6 <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8016174:	2300      	movs	r3, #0
 8016176:	757b      	strb	r3, [r7, #21]
 8016178:	e00d      	b.n	8016196 <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 801617a:	7d7b      	ldrb	r3, [r7, #21]
 801617c:	4a1a      	ldr	r2, [pc, #104]	@ (80161e8 <SVCCTL_UserEvtRx+0xa4>)
 801617e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016182:	6878      	ldr	r0, [r7, #4]
 8016184:	4798      	blx	r3
 8016186:	4603      	mov	r3, r0
 8016188:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 801618a:	7dfb      	ldrb	r3, [r7, #23]
 801618c:	2b00      	cmp	r3, #0
 801618e:	d108      	bne.n	80161a2 <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8016190:	7d7b      	ldrb	r3, [r7, #21]
 8016192:	3301      	adds	r3, #1
 8016194:	757b      	strb	r3, [r7, #21]
 8016196:	4b14      	ldr	r3, [pc, #80]	@ (80161e8 <SVCCTL_UserEvtRx+0xa4>)
 8016198:	7f1b      	ldrb	r3, [r3, #28]
 801619a:	7d7a      	ldrb	r2, [r7, #21]
 801619c:	429a      	cmp	r2, r3
 801619e:	d3ec      	bcc.n	801617a <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 80161a0:	e002      	b.n	80161a8 <SVCCTL_UserEvtRx+0x64>
              break;
 80161a2:	bf00      	nop
          break;
 80161a4:	e000      	b.n	80161a8 <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 80161a6:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 80161a8:	e000      	b.n	80161ac <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 80161aa:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the application.
   */
  switch (event_notification_status)
 80161ac:	7dfb      	ldrb	r3, [r7, #23]
 80161ae:	2b02      	cmp	r3, #2
 80161b0:	d00f      	beq.n	80161d2 <SVCCTL_UserEvtRx+0x8e>
 80161b2:	2b02      	cmp	r3, #2
 80161b4:	dc10      	bgt.n	80161d8 <SVCCTL_UserEvtRx+0x94>
 80161b6:	2b00      	cmp	r3, #0
 80161b8:	d002      	beq.n	80161c0 <SVCCTL_UserEvtRx+0x7c>
 80161ba:	2b01      	cmp	r3, #1
 80161bc:	d006      	beq.n	80161cc <SVCCTL_UserEvtRx+0x88>
 80161be:	e00b      	b.n	80161d8 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 80161c0:	6878      	ldr	r0, [r7, #4]
 80161c2:	f001 fc7f 	bl	8017ac4 <SVCCTL_App_Notification>
 80161c6:	4603      	mov	r3, r0
 80161c8:	75bb      	strb	r3, [r7, #22]
      break;
 80161ca:	e008      	b.n	80161de <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 80161cc:	2301      	movs	r3, #1
 80161ce:	75bb      	strb	r3, [r7, #22]
      break;
 80161d0:	e005      	b.n	80161de <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 80161d2:	2300      	movs	r3, #0
 80161d4:	75bb      	strb	r3, [r7, #22]
      break;
 80161d6:	e002      	b.n	80161de <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 80161d8:	2301      	movs	r3, #1
 80161da:	75bb      	strb	r3, [r7, #22]
      break;
 80161dc:	bf00      	nop
  }

  return (return_status);
 80161de:	7dbb      	ldrb	r3, [r7, #22]
}
 80161e0:	4618      	mov	r0, r3
 80161e2:	3718      	adds	r7, #24
 80161e4:	46bd      	mov	sp, r7
 80161e6:	bd80      	pop	{r7, pc}
 80161e8:	20000320 	.word	0x20000320

080161ec <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 80161ec:	b580      	push	{r7, lr}
 80161ee:	b088      	sub	sp, #32
 80161f0:	af00      	add	r7, sp, #0
 80161f2:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 80161f4:	f107 030c 	add.w	r3, r7, #12
 80161f8:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 80161fa:	687b      	ldr	r3, [r7, #4]
 80161fc:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 8016200:	69fb      	ldr	r3, [r7, #28]
 8016202:	212e      	movs	r1, #46	@ 0x2e
 8016204:	f64f 4066 	movw	r0, #64614	@ 0xfc66
 8016208:	f000 fae8 	bl	80167dc <shci_send>
            p_rsp );
 
  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 801620c:	69fb      	ldr	r3, [r7, #28]
 801620e:	330b      	adds	r3, #11
 8016210:	78db      	ldrb	r3, [r3, #3]
}
 8016212:	4618      	mov	r0, r3
 8016214:	3720      	adds	r7, #32
 8016216:	46bd      	mov	sp, r7
 8016218:	bd80      	pop	{r7, pc}

0801621a <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 801621a:	b580      	push	{r7, lr}
 801621c:	b088      	sub	sp, #32
 801621e:	af00      	add	r7, sp, #0
 8016220:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8016222:	f107 030c 	add.w	r3, r7, #12
 8016226:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 8016228:	687b      	ldr	r3, [r7, #4]
 801622a:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 801622e:	69fb      	ldr	r3, [r7, #28]
 8016230:	210f      	movs	r1, #15
 8016232:	f64f 4068 	movw	r0, #64616	@ 0xfc68
 8016236:	f000 fad1 	bl	80167dc <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 801623a:	69fb      	ldr	r3, [r7, #28]
 801623c:	330b      	adds	r3, #11
 801623e:	78db      	ldrb	r3, [r3, #3]
}
 8016240:	4618      	mov	r0, r3
 8016242:	3720      	adds	r7, #32
 8016244:	46bd      	mov	sp, r7
 8016246:	bd80      	pop	{r7, pc}

08016248 <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 8016248:	b580      	push	{r7, lr}
 801624a:	b088      	sub	sp, #32
 801624c:	af00      	add	r7, sp, #0
 801624e:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8016250:	f107 030c 	add.w	r3, r7, #12
 8016254:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 8016256:	69fb      	ldr	r3, [r7, #28]
 8016258:	687a      	ldr	r2, [r7, #4]
 801625a:	2110      	movs	r1, #16
 801625c:	f64f 4075 	movw	r0, #64629	@ 0xfc75
 8016260:	f000 fabc 	bl	80167dc <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8016264:	69fb      	ldr	r3, [r7, #28]
 8016266:	330b      	adds	r3, #11
 8016268:	78db      	ldrb	r3, [r3, #3]
}
 801626a:	4618      	mov	r0, r3
 801626c:	3720      	adds	r7, #32
 801626e:	46bd      	mov	sp, r7
 8016270:	bd80      	pop	{r7, pc}
	...

08016274 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 8016274:	b480      	push	{r7}
 8016276:	b08b      	sub	sp, #44	@ 0x2c
 8016278:	af00      	add	r7, sp, #0
 801627a:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 801627c:	2300      	movs	r3, #0
 801627e:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 8016280:	2300      	movs	r3, #0
 8016282:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 8016284:	2300      	movs	r3, #0
 8016286:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t wireless_firmware_memorySize = 0;
 8016288:	2300      	movs	r3, #0
 801628a:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 801628c:	2300      	movs	r3, #0
 801628e:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 8016290:	2300      	movs	r3, #0
 8016292:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 8016294:	2300      	movs	r3, #0
 8016296:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 8016298:	2300      	movs	r3, #0
 801629a:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 801629c:	4b4a      	ldr	r3, [pc, #296]	@ (80163c8 <SHCI_GetWirelessFwInfo+0x154>)
 801629e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80162a0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80162a4:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 80162a6:	693b      	ldr	r3, [r7, #16]
 80162a8:	009b      	lsls	r3, r3, #2
 80162aa:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 80162ae:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 80162b2:	681b      	ldr	r3, [r3, #0]
 80162b4:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 80162b6:	68bb      	ldr	r3, [r7, #8]
 80162b8:	681b      	ldr	r3, [r3, #0]
 80162ba:	4a44      	ldr	r2, [pc, #272]	@ (80163cc <SHCI_GetWirelessFwInfo+0x158>)
 80162bc:	4293      	cmp	r3, r2
 80162be:	d10f      	bne.n	80162e0 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 80162c0:	68bb      	ldr	r3, [r7, #8]
 80162c2:	695b      	ldr	r3, [r3, #20]
 80162c4:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 80162c6:	68bb      	ldr	r3, [r7, #8]
 80162c8:	699b      	ldr	r3, [r3, #24]
 80162ca:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 80162cc:	68bb      	ldr	r3, [r7, #8]
 80162ce:	69db      	ldr	r3, [r3, #28]
 80162d0:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 80162d2:	68bb      	ldr	r3, [r7, #8]
 80162d4:	68db      	ldr	r3, [r3, #12]
 80162d6:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 80162d8:	68bb      	ldr	r3, [r7, #8]
 80162da:	691b      	ldr	r3, [r3, #16]
 80162dc:	617b      	str	r3, [r7, #20]
 80162de:	e01a      	b.n	8016316 <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 80162e0:	693b      	ldr	r3, [r7, #16]
 80162e2:	009b      	lsls	r3, r3, #2
 80162e4:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 80162e8:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 80162ec:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 80162ee:	68fb      	ldr	r3, [r7, #12]
 80162f0:	681b      	ldr	r3, [r3, #0]
 80162f2:	691b      	ldr	r3, [r3, #16]
 80162f4:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 80162f6:	68fb      	ldr	r3, [r7, #12]
 80162f8:	681b      	ldr	r3, [r3, #0]
 80162fa:	695b      	ldr	r3, [r3, #20]
 80162fc:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 80162fe:	68fb      	ldr	r3, [r7, #12]
 8016300:	681b      	ldr	r3, [r3, #0]
 8016302:	699b      	ldr	r3, [r3, #24]
 8016304:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 8016306:	68fb      	ldr	r3, [r7, #12]
 8016308:	681b      	ldr	r3, [r3, #0]
 801630a:	685b      	ldr	r3, [r3, #4]
 801630c:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 801630e:	68fb      	ldr	r3, [r7, #12]
 8016310:	681b      	ldr	r3, [r3, #0]
 8016312:	689b      	ldr	r3, [r3, #8]
 8016314:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8016316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016318:	0e1b      	lsrs	r3, r3, #24
 801631a:	b2da      	uxtb	r2, r3
 801631c:	687b      	ldr	r3, [r7, #4]
 801631e:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8016320:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016322:	0c1b      	lsrs	r3, r3, #16
 8016324:	b2da      	uxtb	r2, r3
 8016326:	687b      	ldr	r3, [r7, #4]
 8016328:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 801632a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801632c:	0a1b      	lsrs	r3, r3, #8
 801632e:	b2da      	uxtb	r2, r3
 8016330:	687b      	ldr	r3, [r7, #4]
 8016332:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 8016334:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016336:	091b      	lsrs	r3, r3, #4
 8016338:	b2db      	uxtb	r3, r3
 801633a:	f003 030f 	and.w	r3, r3, #15
 801633e:	b2da      	uxtb	r2, r3
 8016340:	687b      	ldr	r3, [r7, #4]
 8016342:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 8016344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016346:	b2db      	uxtb	r3, r3
 8016348:	f003 030f 	and.w	r3, r3, #15
 801634c:	b2da      	uxtb	r2, r3
 801634e:	687b      	ldr	r3, [r7, #4]
 8016350:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8016352:	6a3b      	ldr	r3, [r7, #32]
 8016354:	0e1b      	lsrs	r3, r3, #24
 8016356:	b2da      	uxtb	r2, r3
 8016358:	687b      	ldr	r3, [r7, #4]
 801635a:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 801635c:	6a3b      	ldr	r3, [r7, #32]
 801635e:	0c1b      	lsrs	r3, r3, #16
 8016360:	b2da      	uxtb	r2, r3
 8016362:	687b      	ldr	r3, [r7, #4]
 8016364:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 8016366:	6a3b      	ldr	r3, [r7, #32]
 8016368:	0a1b      	lsrs	r3, r3, #8
 801636a:	b2da      	uxtb	r2, r3
 801636c:	687b      	ldr	r3, [r7, #4]
 801636e:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8016370:	6a3b      	ldr	r3, [r7, #32]
 8016372:	b2da      	uxtb	r2, r3
 8016374:	687b      	ldr	r3, [r7, #4]
 8016376:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 8016378:	69fb      	ldr	r3, [r7, #28]
 801637a:	b2da      	uxtb	r2, r3
 801637c:	687b      	ldr	r3, [r7, #4]
 801637e:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8016380:	69bb      	ldr	r3, [r7, #24]
 8016382:	0e1b      	lsrs	r3, r3, #24
 8016384:	b2da      	uxtb	r2, r3
 8016386:	687b      	ldr	r3, [r7, #4]
 8016388:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 801638a:	69bb      	ldr	r3, [r7, #24]
 801638c:	0c1b      	lsrs	r3, r3, #16
 801638e:	b2da      	uxtb	r2, r3
 8016390:	687b      	ldr	r3, [r7, #4]
 8016392:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8016394:	69bb      	ldr	r3, [r7, #24]
 8016396:	0a1b      	lsrs	r3, r3, #8
 8016398:	b2da      	uxtb	r2, r3
 801639a:	687b      	ldr	r3, [r7, #4]
 801639c:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 801639e:	697b      	ldr	r3, [r7, #20]
 80163a0:	0e1b      	lsrs	r3, r3, #24
 80163a2:	b2da      	uxtb	r2, r3
 80163a4:	687b      	ldr	r3, [r7, #4]
 80163a6:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 80163a8:	697b      	ldr	r3, [r7, #20]
 80163aa:	0c1b      	lsrs	r3, r3, #16
 80163ac:	b2da      	uxtb	r2, r3
 80163ae:	687b      	ldr	r3, [r7, #4]
 80163b0:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 80163b2:	697b      	ldr	r3, [r7, #20]
 80163b4:	b2da      	uxtb	r2, r3
 80163b6:	687b      	ldr	r3, [r7, #4]
 80163b8:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 80163ba:	2300      	movs	r3, #0
}
 80163bc:	4618      	mov	r0, r3
 80163be:	372c      	adds	r7, #44	@ 0x2c
 80163c0:	46bd      	mov	sp, r7
 80163c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163c6:	4770      	bx	lr
 80163c8:	58004000 	.word	0x58004000
 80163cc:	a94656b9 	.word	0xa94656b9

080163d0 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 80163d0:	b580      	push	{r7, lr}
 80163d2:	b082      	sub	sp, #8
 80163d4:	af00      	add	r7, sp, #0
 80163d6:	6078      	str	r0, [r7, #4]
 80163d8:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 80163da:	683b      	ldr	r3, [r7, #0]
 80163dc:	685b      	ldr	r3, [r3, #4]
 80163de:	4a08      	ldr	r2, [pc, #32]	@ (8016400 <hci_init+0x30>)
 80163e0:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 80163e2:	4a08      	ldr	r2, [pc, #32]	@ (8016404 <hci_init+0x34>)
 80163e4:	687b      	ldr	r3, [r7, #4]
 80163e6:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 80163e8:	4806      	ldr	r0, [pc, #24]	@ (8016404 <hci_init+0x34>)
 80163ea:	f000 f979 	bl	80166e0 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 80163ee:	683b      	ldr	r3, [r7, #0]
 80163f0:	681b      	ldr	r3, [r3, #0]
 80163f2:	4618      	mov	r0, r3
 80163f4:	f000 f8da 	bl	80165ac <TlInit>

  return;
 80163f8:	bf00      	nop
}
 80163fa:	3708      	adds	r7, #8
 80163fc:	46bd      	mov	sp, r7
 80163fe:	bd80      	pop	{r7, pc}
 8016400:	20001508 	.word	0x20001508
 8016404:	200014e0 	.word	0x200014e0

08016408 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8016408:	b580      	push	{r7, lr}
 801640a:	b084      	sub	sp, #16
 801640c:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 801640e:	4822      	ldr	r0, [pc, #136]	@ (8016498 <hci_user_evt_proc+0x90>)
 8016410:	f000 fd32 	bl	8016e78 <LST_is_empty>
 8016414:	4603      	mov	r3, r0
 8016416:	2b00      	cmp	r3, #0
 8016418:	d12b      	bne.n	8016472 <hci_user_evt_proc+0x6a>
 801641a:	4b20      	ldr	r3, [pc, #128]	@ (801649c <hci_user_evt_proc+0x94>)
 801641c:	781b      	ldrb	r3, [r3, #0]
 801641e:	2b00      	cmp	r3, #0
 8016420:	d027      	beq.n	8016472 <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8016422:	f107 030c 	add.w	r3, r7, #12
 8016426:	4619      	mov	r1, r3
 8016428:	481b      	ldr	r0, [pc, #108]	@ (8016498 <hci_user_evt_proc+0x90>)
 801642a:	f000 fdb4 	bl	8016f96 <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 801642e:	4b1c      	ldr	r3, [pc, #112]	@ (80164a0 <hci_user_evt_proc+0x98>)
 8016430:	69db      	ldr	r3, [r3, #28]
 8016432:	2b00      	cmp	r3, #0
 8016434:	d00c      	beq.n	8016450 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8016436:	68fb      	ldr	r3, [r7, #12]
 8016438:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 801643a:	2301      	movs	r3, #1
 801643c:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 801643e:	4b18      	ldr	r3, [pc, #96]	@ (80164a0 <hci_user_evt_proc+0x98>)
 8016440:	69db      	ldr	r3, [r3, #28]
 8016442:	1d3a      	adds	r2, r7, #4
 8016444:	4610      	mov	r0, r2
 8016446:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 8016448:	793a      	ldrb	r2, [r7, #4]
 801644a:	4b14      	ldr	r3, [pc, #80]	@ (801649c <hci_user_evt_proc+0x94>)
 801644c:	701a      	strb	r2, [r3, #0]
 801644e:	e002      	b.n	8016456 <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8016450:	4b12      	ldr	r3, [pc, #72]	@ (801649c <hci_user_evt_proc+0x94>)
 8016452:	2201      	movs	r2, #1
 8016454:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 8016456:	4b11      	ldr	r3, [pc, #68]	@ (801649c <hci_user_evt_proc+0x94>)
 8016458:	781b      	ldrb	r3, [r3, #0]
 801645a:	2b00      	cmp	r3, #0
 801645c:	d004      	beq.n	8016468 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 801645e:	68fb      	ldr	r3, [r7, #12]
 8016460:	4618      	mov	r0, r3
 8016462:	f000 fc0d 	bl	8016c80 <TL_MM_EvtDone>
 8016466:	e004      	b.n	8016472 <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8016468:	68fb      	ldr	r3, [r7, #12]
 801646a:	4619      	mov	r1, r3
 801646c:	480a      	ldr	r0, [pc, #40]	@ (8016498 <hci_user_evt_proc+0x90>)
 801646e:	f000 fd25 	bl	8016ebc <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8016472:	4809      	ldr	r0, [pc, #36]	@ (8016498 <hci_user_evt_proc+0x90>)
 8016474:	f000 fd00 	bl	8016e78 <LST_is_empty>
 8016478:	4603      	mov	r3, r0
 801647a:	2b00      	cmp	r3, #0
 801647c:	d107      	bne.n	801648e <hci_user_evt_proc+0x86>
 801647e:	4b07      	ldr	r3, [pc, #28]	@ (801649c <hci_user_evt_proc+0x94>)
 8016480:	781b      	ldrb	r3, [r3, #0]
 8016482:	2b00      	cmp	r3, #0
 8016484:	d003      	beq.n	801648e <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 8016486:	4804      	ldr	r0, [pc, #16]	@ (8016498 <hci_user_evt_proc+0x90>)
 8016488:	f001 fd50 	bl	8017f2c <hci_notify_asynch_evt>
  }


  return;
 801648c:	bf00      	nop
 801648e:	bf00      	nop
}
 8016490:	3710      	adds	r7, #16
 8016492:	46bd      	mov	sp, r7
 8016494:	bd80      	pop	{r7, pc}
 8016496:	bf00      	nop
 8016498:	20000348 	.word	0x20000348
 801649c:	20000354 	.word	0x20000354
 80164a0:	200014e0 	.word	0x200014e0

080164a4 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 80164a4:	b580      	push	{r7, lr}
 80164a6:	b088      	sub	sp, #32
 80164a8:	af00      	add	r7, sp, #0
 80164aa:	6078      	str	r0, [r7, #4]
 80164ac:	460b      	mov	r3, r1
 80164ae:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 80164b0:	2000      	movs	r0, #0
 80164b2:	f000 f8d1 	bl	8016658 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 80164b6:	2300      	movs	r3, #0
 80164b8:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 80164ba:	687b      	ldr	r3, [r7, #4]
 80164bc:	885b      	ldrh	r3, [r3, #2]
 80164be:	b21b      	sxth	r3, r3
 80164c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80164c4:	b21a      	sxth	r2, r3
 80164c6:	687b      	ldr	r3, [r7, #4]
 80164c8:	881b      	ldrh	r3, [r3, #0]
 80164ca:	029b      	lsls	r3, r3, #10
 80164cc:	b21b      	sxth	r3, r3
 80164ce:	4313      	orrs	r3, r2
 80164d0:	b21b      	sxth	r3, r3
 80164d2:	83bb      	strh	r3, [r7, #28]
  
  CmdRspStatusFlag = HCI_TL_CMD_RESP_WAIT;
 80164d4:	4b33      	ldr	r3, [pc, #204]	@ (80165a4 <hci_send_req+0x100>)
 80164d6:	2201      	movs	r2, #1
 80164d8:	701a      	strb	r2, [r3, #0]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 80164da:	687b      	ldr	r3, [r7, #4]
 80164dc:	68db      	ldr	r3, [r3, #12]
 80164de:	b2d9      	uxtb	r1, r3
 80164e0:	687b      	ldr	r3, [r7, #4]
 80164e2:	689a      	ldr	r2, [r3, #8]
 80164e4:	8bbb      	ldrh	r3, [r7, #28]
 80164e6:	4618      	mov	r0, r3
 80164e8:	f000 f890 	bl	801660c <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 80164ec:	e04e      	b.n	801658c <hci_send_req+0xe8>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 80164ee:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 80164f2:	f001 fd32 	bl	8017f5a <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 80164f6:	e043      	b.n	8016580 <hci_send_req+0xdc>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 80164f8:	f107 030c 	add.w	r3, r7, #12
 80164fc:	4619      	mov	r1, r3
 80164fe:	482a      	ldr	r0, [pc, #168]	@ (80165a8 <hci_send_req+0x104>)
 8016500:	f000 fd49 	bl	8016f96 <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 8016504:	68fb      	ldr	r3, [r7, #12]
 8016506:	7a5b      	ldrb	r3, [r3, #9]
 8016508:	2b0f      	cmp	r3, #15
 801650a:	d114      	bne.n	8016536 <hci_send_req+0x92>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 801650c:	68fb      	ldr	r3, [r7, #12]
 801650e:	330b      	adds	r3, #11
 8016510:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 8016512:	693b      	ldr	r3, [r7, #16]
 8016514:	885b      	ldrh	r3, [r3, #2]
 8016516:	b29b      	uxth	r3, r3
 8016518:	8bba      	ldrh	r2, [r7, #28]
 801651a:	429a      	cmp	r2, r3
 801651c:	d104      	bne.n	8016528 <hci_send_req+0x84>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 801651e:	687b      	ldr	r3, [r7, #4]
 8016520:	691b      	ldr	r3, [r3, #16]
 8016522:	693a      	ldr	r2, [r7, #16]
 8016524:	7812      	ldrb	r2, [r2, #0]
 8016526:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 8016528:	693b      	ldr	r3, [r7, #16]
 801652a:	785b      	ldrb	r3, [r3, #1]
 801652c:	2b00      	cmp	r3, #0
 801652e:	d027      	beq.n	8016580 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8016530:	2301      	movs	r3, #1
 8016532:	77fb      	strb	r3, [r7, #31]
 8016534:	e024      	b.n	8016580 <hci_send_req+0xdc>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 8016536:	68fb      	ldr	r3, [r7, #12]
 8016538:	330b      	adds	r3, #11
 801653a:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 801653c:	69bb      	ldr	r3, [r7, #24]
 801653e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8016542:	b29b      	uxth	r3, r3
 8016544:	8bba      	ldrh	r2, [r7, #28]
 8016546:	429a      	cmp	r2, r3
 8016548:	d114      	bne.n	8016574 <hci_send_req+0xd0>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 801654a:	68fb      	ldr	r3, [r7, #12]
 801654c:	7a9b      	ldrb	r3, [r3, #10]
 801654e:	3b03      	subs	r3, #3
 8016550:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 8016552:	687b      	ldr	r3, [r7, #4]
 8016554:	695a      	ldr	r2, [r3, #20]
 8016556:	7dfb      	ldrb	r3, [r7, #23]
 8016558:	429a      	cmp	r2, r3
 801655a:	bfa8      	it	ge
 801655c:	461a      	movge	r2, r3
 801655e:	687b      	ldr	r3, [r7, #4]
 8016560:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 8016562:	687b      	ldr	r3, [r7, #4]
 8016564:	6918      	ldr	r0, [r3, #16]
 8016566:	69bb      	ldr	r3, [r7, #24]
 8016568:	1cd9      	adds	r1, r3, #3
 801656a:	687b      	ldr	r3, [r7, #4]
 801656c:	695b      	ldr	r3, [r3, #20]
 801656e:	461a      	mov	r2, r3
 8016570:	f005 f8eb 	bl	801b74a <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 8016574:	69bb      	ldr	r3, [r7, #24]
 8016576:	781b      	ldrb	r3, [r3, #0]
 8016578:	2b00      	cmp	r3, #0
 801657a:	d001      	beq.n	8016580 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 801657c:	2301      	movs	r3, #1
 801657e:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8016580:	4809      	ldr	r0, [pc, #36]	@ (80165a8 <hci_send_req+0x104>)
 8016582:	f000 fc79 	bl	8016e78 <LST_is_empty>
 8016586:	4603      	mov	r3, r0
 8016588:	2b00      	cmp	r3, #0
 801658a:	d0b5      	beq.n	80164f8 <hci_send_req+0x54>
  while(local_cmd_status == HCI_TL_CmdBusy)
 801658c:	7ffb      	ldrb	r3, [r7, #31]
 801658e:	2b00      	cmp	r3, #0
 8016590:	d0ad      	beq.n	80164ee <hci_send_req+0x4a>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 8016592:	2001      	movs	r0, #1
 8016594:	f000 f860 	bl	8016658 <NotifyCmdStatus>

  return 0;
 8016598:	2300      	movs	r3, #0
}
 801659a:	4618      	mov	r0, r3
 801659c:	3720      	adds	r7, #32
 801659e:	46bd      	mov	sp, r7
 80165a0:	bd80      	pop	{r7, pc}
 80165a2:	bf00      	nop
 80165a4:	2000150c 	.word	0x2000150c
 80165a8:	20001500 	.word	0x20001500

080165ac <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 80165ac:	b580      	push	{r7, lr}
 80165ae:	b086      	sub	sp, #24
 80165b0:	af00      	add	r7, sp, #0
 80165b2:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 80165b4:	480f      	ldr	r0, [pc, #60]	@ (80165f4 <TlInit+0x48>)
 80165b6:	f000 fc4f 	bl	8016e58 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 80165ba:	4a0f      	ldr	r2, [pc, #60]	@ (80165f8 <TlInit+0x4c>)
 80165bc:	687b      	ldr	r3, [r7, #4]
 80165be:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 80165c0:	480e      	ldr	r0, [pc, #56]	@ (80165fc <TlInit+0x50>)
 80165c2:	f000 fc49 	bl	8016e58 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 80165c6:	4b0e      	ldr	r3, [pc, #56]	@ (8016600 <TlInit+0x54>)
 80165c8:	2201      	movs	r2, #1
 80165ca:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 80165cc:	4b0d      	ldr	r3, [pc, #52]	@ (8016604 <TlInit+0x58>)
 80165ce:	681b      	ldr	r3, [r3, #0]
 80165d0:	2b00      	cmp	r3, #0
 80165d2:	d00a      	beq.n	80165ea <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 80165d4:	687b      	ldr	r3, [r7, #4]
 80165d6:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 80165d8:	4b0b      	ldr	r3, [pc, #44]	@ (8016608 <TlInit+0x5c>)
 80165da:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 80165dc:	4b09      	ldr	r3, [pc, #36]	@ (8016604 <TlInit+0x58>)
 80165de:	681b      	ldr	r3, [r3, #0]
 80165e0:	f107 0208 	add.w	r2, r7, #8
 80165e4:	4610      	mov	r0, r2
 80165e6:	4798      	blx	r3
  }

  return;
 80165e8:	bf00      	nop
 80165ea:	bf00      	nop
}
 80165ec:	3718      	adds	r7, #24
 80165ee:	46bd      	mov	sp, r7
 80165f0:	bd80      	pop	{r7, pc}
 80165f2:	bf00      	nop
 80165f4:	20001500 	.word	0x20001500
 80165f8:	20000350 	.word	0x20000350
 80165fc:	20000348 	.word	0x20000348
 8016600:	20000354 	.word	0x20000354
 8016604:	200014e0 	.word	0x200014e0
 8016608:	08016699 	.word	0x08016699

0801660c <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 801660c:	b580      	push	{r7, lr}
 801660e:	b082      	sub	sp, #8
 8016610:	af00      	add	r7, sp, #0
 8016612:	4603      	mov	r3, r0
 8016614:	603a      	str	r2, [r7, #0]
 8016616:	80fb      	strh	r3, [r7, #6]
 8016618:	460b      	mov	r3, r1
 801661a:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 801661c:	4b0c      	ldr	r3, [pc, #48]	@ (8016650 <SendCmd+0x44>)
 801661e:	681b      	ldr	r3, [r3, #0]
 8016620:	88fa      	ldrh	r2, [r7, #6]
 8016622:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 8016626:	4b0a      	ldr	r3, [pc, #40]	@ (8016650 <SendCmd+0x44>)
 8016628:	681b      	ldr	r3, [r3, #0]
 801662a:	797a      	ldrb	r2, [r7, #5]
 801662c:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 801662e:	4b08      	ldr	r3, [pc, #32]	@ (8016650 <SendCmd+0x44>)
 8016630:	681b      	ldr	r3, [r3, #0]
 8016632:	330c      	adds	r3, #12
 8016634:	797a      	ldrb	r2, [r7, #5]
 8016636:	6839      	ldr	r1, [r7, #0]
 8016638:	4618      	mov	r0, r3
 801663a:	f005 f886 	bl	801b74a <memcpy>

  hciContext.io.Send(0,0);
 801663e:	4b05      	ldr	r3, [pc, #20]	@ (8016654 <SendCmd+0x48>)
 8016640:	691b      	ldr	r3, [r3, #16]
 8016642:	2100      	movs	r1, #0
 8016644:	2000      	movs	r0, #0
 8016646:	4798      	blx	r3

  return;
 8016648:	bf00      	nop
}
 801664a:	3708      	adds	r7, #8
 801664c:	46bd      	mov	sp, r7
 801664e:	bd80      	pop	{r7, pc}
 8016650:	20000350 	.word	0x20000350
 8016654:	200014e0 	.word	0x200014e0

08016658 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 8016658:	b580      	push	{r7, lr}
 801665a:	b082      	sub	sp, #8
 801665c:	af00      	add	r7, sp, #0
 801665e:	4603      	mov	r3, r0
 8016660:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 8016662:	79fb      	ldrb	r3, [r7, #7]
 8016664:	2b00      	cmp	r3, #0
 8016666:	d108      	bne.n	801667a <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 8016668:	4b0a      	ldr	r3, [pc, #40]	@ (8016694 <NotifyCmdStatus+0x3c>)
 801666a:	681b      	ldr	r3, [r3, #0]
 801666c:	2b00      	cmp	r3, #0
 801666e:	d00d      	beq.n	801668c <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 8016670:	4b08      	ldr	r3, [pc, #32]	@ (8016694 <NotifyCmdStatus+0x3c>)
 8016672:	681b      	ldr	r3, [r3, #0]
 8016674:	2000      	movs	r0, #0
 8016676:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 8016678:	e008      	b.n	801668c <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 801667a:	4b06      	ldr	r3, [pc, #24]	@ (8016694 <NotifyCmdStatus+0x3c>)
 801667c:	681b      	ldr	r3, [r3, #0]
 801667e:	2b00      	cmp	r3, #0
 8016680:	d004      	beq.n	801668c <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 8016682:	4b04      	ldr	r3, [pc, #16]	@ (8016694 <NotifyCmdStatus+0x3c>)
 8016684:	681b      	ldr	r3, [r3, #0]
 8016686:	2001      	movs	r0, #1
 8016688:	4798      	blx	r3
  return;
 801668a:	bf00      	nop
 801668c:	bf00      	nop
}
 801668e:	3708      	adds	r7, #8
 8016690:	46bd      	mov	sp, r7
 8016692:	bd80      	pop	{r7, pc}
 8016694:	20001508 	.word	0x20001508

08016698 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 8016698:	b580      	push	{r7, lr}
 801669a:	b082      	sub	sp, #8
 801669c:	af00      	add	r7, sp, #0
 801669e:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 80166a0:	687b      	ldr	r3, [r7, #4]
 80166a2:	7a5b      	ldrb	r3, [r3, #9]
 80166a4:	2b0f      	cmp	r3, #15
 80166a6:	d003      	beq.n	80166b0 <TlEvtReceived+0x18>
 80166a8:	687b      	ldr	r3, [r7, #4]
 80166aa:	7a5b      	ldrb	r3, [r3, #9]
 80166ac:	2b0e      	cmp	r3, #14
 80166ae:	d107      	bne.n	80166c0 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 80166b0:	6879      	ldr	r1, [r7, #4]
 80166b2:	4809      	ldr	r0, [pc, #36]	@ (80166d8 <TlEvtReceived+0x40>)
 80166b4:	f000 fc28 	bl	8016f08 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 80166b8:	2000      	movs	r0, #0
 80166ba:	f001 fc43 	bl	8017f44 <hci_cmd_resp_release>
 80166be:	e006      	b.n	80166ce <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 80166c0:	6879      	ldr	r1, [r7, #4]
 80166c2:	4806      	ldr	r0, [pc, #24]	@ (80166dc <TlEvtReceived+0x44>)
 80166c4:	f000 fc20 	bl	8016f08 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 80166c8:	4804      	ldr	r0, [pc, #16]	@ (80166dc <TlEvtReceived+0x44>)
 80166ca:	f001 fc2f 	bl	8017f2c <hci_notify_asynch_evt>
  }

  return;
 80166ce:	bf00      	nop
}
 80166d0:	3708      	adds	r7, #8
 80166d2:	46bd      	mov	sp, r7
 80166d4:	bd80      	pop	{r7, pc}
 80166d6:	bf00      	nop
 80166d8:	20001500 	.word	0x20001500
 80166dc:	20000348 	.word	0x20000348

080166e0 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 80166e0:	b480      	push	{r7}
 80166e2:	b083      	sub	sp, #12
 80166e4:	af00      	add	r7, sp, #0
 80166e6:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 80166e8:	687b      	ldr	r3, [r7, #4]
 80166ea:	4a05      	ldr	r2, [pc, #20]	@ (8016700 <hci_register_io_bus+0x20>)
 80166ec:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 80166ee:	687b      	ldr	r3, [r7, #4]
 80166f0:	4a04      	ldr	r2, [pc, #16]	@ (8016704 <hci_register_io_bus+0x24>)
 80166f2:	611a      	str	r2, [r3, #16]

  return;
 80166f4:	bf00      	nop
}
 80166f6:	370c      	adds	r7, #12
 80166f8:	46bd      	mov	sp, r7
 80166fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166fe:	4770      	bx	lr
 8016700:	080169f9 	.word	0x080169f9
 8016704:	08016a61 	.word	0x08016a61

08016708 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8016708:	b580      	push	{r7, lr}
 801670a:	b082      	sub	sp, #8
 801670c:	af00      	add	r7, sp, #0
 801670e:	6078      	str	r0, [r7, #4]
 8016710:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8016712:	683b      	ldr	r3, [r7, #0]
 8016714:	685b      	ldr	r3, [r3, #4]
 8016716:	4a08      	ldr	r2, [pc, #32]	@ (8016738 <shci_init+0x30>)
 8016718:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 801671a:	4a08      	ldr	r2, [pc, #32]	@ (801673c <shci_init+0x34>)
 801671c:	687b      	ldr	r3, [r7, #4]
 801671e:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 8016720:	4806      	ldr	r0, [pc, #24]	@ (801673c <shci_init+0x34>)
 8016722:	f000 f915 	bl	8016950 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8016726:	683b      	ldr	r3, [r7, #0]
 8016728:	681b      	ldr	r3, [r3, #0]
 801672a:	4618      	mov	r0, r3
 801672c:	f000 f898 	bl	8016860 <TlInit>

  return;
 8016730:	bf00      	nop
}
 8016732:	3708      	adds	r7, #8
 8016734:	46bd      	mov	sp, r7
 8016736:	bd80      	pop	{r7, pc}
 8016738:	20001530 	.word	0x20001530
 801673c:	20001510 	.word	0x20001510

08016740 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 8016740:	b580      	push	{r7, lr}
 8016742:	b084      	sub	sp, #16
 8016744:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8016746:	4822      	ldr	r0, [pc, #136]	@ (80167d0 <shci_user_evt_proc+0x90>)
 8016748:	f000 fb96 	bl	8016e78 <LST_is_empty>
 801674c:	4603      	mov	r3, r0
 801674e:	2b00      	cmp	r3, #0
 8016750:	d12b      	bne.n	80167aa <shci_user_evt_proc+0x6a>
 8016752:	4b20      	ldr	r3, [pc, #128]	@ (80167d4 <shci_user_evt_proc+0x94>)
 8016754:	781b      	ldrb	r3, [r3, #0]
 8016756:	2b00      	cmp	r3, #0
 8016758:	d027      	beq.n	80167aa <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 801675a:	f107 030c 	add.w	r3, r7, #12
 801675e:	4619      	mov	r1, r3
 8016760:	481b      	ldr	r0, [pc, #108]	@ (80167d0 <shci_user_evt_proc+0x90>)
 8016762:	f000 fc18 	bl	8016f96 <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 8016766:	4b1c      	ldr	r3, [pc, #112]	@ (80167d8 <shci_user_evt_proc+0x98>)
 8016768:	69db      	ldr	r3, [r3, #28]
 801676a:	2b00      	cmp	r3, #0
 801676c:	d00c      	beq.n	8016788 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 801676e:	68fb      	ldr	r3, [r7, #12]
 8016770:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 8016772:	2301      	movs	r3, #1
 8016774:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 8016776:	4b18      	ldr	r3, [pc, #96]	@ (80167d8 <shci_user_evt_proc+0x98>)
 8016778:	69db      	ldr	r3, [r3, #28]
 801677a:	1d3a      	adds	r2, r7, #4
 801677c:	4610      	mov	r0, r2
 801677e:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 8016780:	793a      	ldrb	r2, [r7, #4]
 8016782:	4b14      	ldr	r3, [pc, #80]	@ (80167d4 <shci_user_evt_proc+0x94>)
 8016784:	701a      	strb	r2, [r3, #0]
 8016786:	e002      	b.n	801678e <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8016788:	4b12      	ldr	r3, [pc, #72]	@ (80167d4 <shci_user_evt_proc+0x94>)
 801678a:	2201      	movs	r2, #1
 801678c:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 801678e:	4b11      	ldr	r3, [pc, #68]	@ (80167d4 <shci_user_evt_proc+0x94>)
 8016790:	781b      	ldrb	r3, [r3, #0]
 8016792:	2b00      	cmp	r3, #0
 8016794:	d004      	beq.n	80167a0 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8016796:	68fb      	ldr	r3, [r7, #12]
 8016798:	4618      	mov	r0, r3
 801679a:	f000 fa71 	bl	8016c80 <TL_MM_EvtDone>
 801679e:	e004      	b.n	80167aa <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 80167a0:	68fb      	ldr	r3, [r7, #12]
 80167a2:	4619      	mov	r1, r3
 80167a4:	480a      	ldr	r0, [pc, #40]	@ (80167d0 <shci_user_evt_proc+0x90>)
 80167a6:	f000 fb89 	bl	8016ebc <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 80167aa:	4809      	ldr	r0, [pc, #36]	@ (80167d0 <shci_user_evt_proc+0x90>)
 80167ac:	f000 fb64 	bl	8016e78 <LST_is_empty>
 80167b0:	4603      	mov	r3, r0
 80167b2:	2b00      	cmp	r3, #0
 80167b4:	d107      	bne.n	80167c6 <shci_user_evt_proc+0x86>
 80167b6:	4b07      	ldr	r3, [pc, #28]	@ (80167d4 <shci_user_evt_proc+0x94>)
 80167b8:	781b      	ldrb	r3, [r3, #0]
 80167ba:	2b00      	cmp	r3, #0
 80167bc:	d003      	beq.n	80167c6 <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 80167be:	4804      	ldr	r0, [pc, #16]	@ (80167d0 <shci_user_evt_proc+0x90>)
 80167c0:	f7ea fff6 	bl	80017b0 <shci_notify_asynch_evt>
  }


  return;
 80167c4:	bf00      	nop
 80167c6:	bf00      	nop
}
 80167c8:	3710      	adds	r7, #16
 80167ca:	46bd      	mov	sp, r7
 80167cc:	bd80      	pop	{r7, pc}
 80167ce:	bf00      	nop
 80167d0:	20000358 	.word	0x20000358
 80167d4:	20000368 	.word	0x20000368
 80167d8:	20001510 	.word	0x20001510

080167dc <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 80167dc:	b580      	push	{r7, lr}
 80167de:	b084      	sub	sp, #16
 80167e0:	af00      	add	r7, sp, #0
 80167e2:	60ba      	str	r2, [r7, #8]
 80167e4:	607b      	str	r3, [r7, #4]
 80167e6:	4603      	mov	r3, r0
 80167e8:	81fb      	strh	r3, [r7, #14]
 80167ea:	460b      	mov	r3, r1
 80167ec:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 80167ee:	2000      	movs	r0, #0
 80167f0:	f000 f868 	bl	80168c4 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 80167f4:	4b17      	ldr	r3, [pc, #92]	@ (8016854 <shci_send+0x78>)
 80167f6:	681b      	ldr	r3, [r3, #0]
 80167f8:	89fa      	ldrh	r2, [r7, #14]
 80167fa:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 80167fe:	4b15      	ldr	r3, [pc, #84]	@ (8016854 <shci_send+0x78>)
 8016800:	681b      	ldr	r3, [r3, #0]
 8016802:	7b7a      	ldrb	r2, [r7, #13]
 8016804:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 8016806:	4b13      	ldr	r3, [pc, #76]	@ (8016854 <shci_send+0x78>)
 8016808:	681b      	ldr	r3, [r3, #0]
 801680a:	330c      	adds	r3, #12
 801680c:	7b7a      	ldrb	r2, [r7, #13]
 801680e:	68b9      	ldr	r1, [r7, #8]
 8016810:	4618      	mov	r0, r3
 8016812:	f004 ff9a 	bl	801b74a <memcpy>
  CmdRspStatusFlag = SHCI_TL_CMD_RESP_WAIT;
 8016816:	4b10      	ldr	r3, [pc, #64]	@ (8016858 <shci_send+0x7c>)
 8016818:	2201      	movs	r2, #1
 801681a:	701a      	strb	r2, [r3, #0]
  shciContext.io.Send(0,0);
 801681c:	4b0f      	ldr	r3, [pc, #60]	@ (801685c <shci_send+0x80>)
 801681e:	691b      	ldr	r3, [r3, #16]
 8016820:	2100      	movs	r1, #0
 8016822:	2000      	movs	r0, #0
 8016824:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 8016826:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 801682a:	f7ea ffd8 	bl	80017de <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 801682e:	687b      	ldr	r3, [r7, #4]
 8016830:	f103 0008 	add.w	r0, r3, #8
 8016834:	4b07      	ldr	r3, [pc, #28]	@ (8016854 <shci_send+0x78>)
 8016836:	6819      	ldr	r1, [r3, #0]
 8016838:	4b06      	ldr	r3, [pc, #24]	@ (8016854 <shci_send+0x78>)
 801683a:	681b      	ldr	r3, [r3, #0]
 801683c:	789b      	ldrb	r3, [r3, #2]
 801683e:	3303      	adds	r3, #3
 8016840:	461a      	mov	r2, r3
 8016842:	f004 ff82 	bl	801b74a <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8016846:	2001      	movs	r0, #1
 8016848:	f000 f83c 	bl	80168c4 <Cmd_SetStatus>

  return;
 801684c:	bf00      	nop
}
 801684e:	3710      	adds	r7, #16
 8016850:	46bd      	mov	sp, r7
 8016852:	bd80      	pop	{r7, pc}
 8016854:	20000364 	.word	0x20000364
 8016858:	20001534 	.word	0x20001534
 801685c:	20001510 	.word	0x20001510

08016860 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8016860:	b580      	push	{r7, lr}
 8016862:	b086      	sub	sp, #24
 8016864:	af00      	add	r7, sp, #0
 8016866:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 8016868:	4a10      	ldr	r2, [pc, #64]	@ (80168ac <TlInit+0x4c>)
 801686a:	687b      	ldr	r3, [r7, #4]
 801686c:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 801686e:	4810      	ldr	r0, [pc, #64]	@ (80168b0 <TlInit+0x50>)
 8016870:	f000 faf2 	bl	8016e58 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8016874:	2001      	movs	r0, #1
 8016876:	f000 f825 	bl	80168c4 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 801687a:	4b0e      	ldr	r3, [pc, #56]	@ (80168b4 <TlInit+0x54>)
 801687c:	2201      	movs	r2, #1
 801687e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 8016880:	4b0d      	ldr	r3, [pc, #52]	@ (80168b8 <TlInit+0x58>)
 8016882:	681b      	ldr	r3, [r3, #0]
 8016884:	2b00      	cmp	r3, #0
 8016886:	d00c      	beq.n	80168a2 <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8016888:	687b      	ldr	r3, [r7, #4]
 801688a:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 801688c:	4b0b      	ldr	r3, [pc, #44]	@ (80168bc <TlInit+0x5c>)
 801688e:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 8016890:	4b0b      	ldr	r3, [pc, #44]	@ (80168c0 <TlInit+0x60>)
 8016892:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 8016894:	4b08      	ldr	r3, [pc, #32]	@ (80168b8 <TlInit+0x58>)
 8016896:	681b      	ldr	r3, [r3, #0]
 8016898:	f107 020c 	add.w	r2, r7, #12
 801689c:	4610      	mov	r0, r2
 801689e:	4798      	blx	r3
  }

  return;
 80168a0:	bf00      	nop
 80168a2:	bf00      	nop
}
 80168a4:	3718      	adds	r7, #24
 80168a6:	46bd      	mov	sp, r7
 80168a8:	bd80      	pop	{r7, pc}
 80168aa:	bf00      	nop
 80168ac:	20000364 	.word	0x20000364
 80168b0:	20000358 	.word	0x20000358
 80168b4:	20000368 	.word	0x20000368
 80168b8:	20001510 	.word	0x20001510
 80168bc:	08016915 	.word	0x08016915
 80168c0:	0801692d 	.word	0x0801692d

080168c4 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 80168c4:	b580      	push	{r7, lr}
 80168c6:	b082      	sub	sp, #8
 80168c8:	af00      	add	r7, sp, #0
 80168ca:	4603      	mov	r3, r0
 80168cc:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 80168ce:	79fb      	ldrb	r3, [r7, #7]
 80168d0:	2b00      	cmp	r3, #0
 80168d2:	d10b      	bne.n	80168ec <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 80168d4:	4b0d      	ldr	r3, [pc, #52]	@ (801690c <Cmd_SetStatus+0x48>)
 80168d6:	681b      	ldr	r3, [r3, #0]
 80168d8:	2b00      	cmp	r3, #0
 80168da:	d003      	beq.n	80168e4 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 80168dc:	4b0b      	ldr	r3, [pc, #44]	@ (801690c <Cmd_SetStatus+0x48>)
 80168de:	681b      	ldr	r3, [r3, #0]
 80168e0:	2000      	movs	r0, #0
 80168e2:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 80168e4:	4b0a      	ldr	r3, [pc, #40]	@ (8016910 <Cmd_SetStatus+0x4c>)
 80168e6:	2200      	movs	r2, #0
 80168e8:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 80168ea:	e00b      	b.n	8016904 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 80168ec:	4b08      	ldr	r3, [pc, #32]	@ (8016910 <Cmd_SetStatus+0x4c>)
 80168ee:	2201      	movs	r2, #1
 80168f0:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 80168f2:	4b06      	ldr	r3, [pc, #24]	@ (801690c <Cmd_SetStatus+0x48>)
 80168f4:	681b      	ldr	r3, [r3, #0]
 80168f6:	2b00      	cmp	r3, #0
 80168f8:	d004      	beq.n	8016904 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 80168fa:	4b04      	ldr	r3, [pc, #16]	@ (801690c <Cmd_SetStatus+0x48>)
 80168fc:	681b      	ldr	r3, [r3, #0]
 80168fe:	2001      	movs	r0, #1
 8016900:	4798      	blx	r3
  return;
 8016902:	bf00      	nop
 8016904:	bf00      	nop
}
 8016906:	3708      	adds	r7, #8
 8016908:	46bd      	mov	sp, r7
 801690a:	bd80      	pop	{r7, pc}
 801690c:	20001530 	.word	0x20001530
 8016910:	20000360 	.word	0x20000360

08016914 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 8016914:	b580      	push	{r7, lr}
 8016916:	b082      	sub	sp, #8
 8016918:	af00      	add	r7, sp, #0
 801691a:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 801691c:	2000      	movs	r0, #0
 801691e:	f7ea ff53 	bl	80017c8 <shci_cmd_resp_release>

  return;
 8016922:	bf00      	nop
}
 8016924:	3708      	adds	r7, #8
 8016926:	46bd      	mov	sp, r7
 8016928:	bd80      	pop	{r7, pc}
	...

0801692c <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 801692c:	b580      	push	{r7, lr}
 801692e:	b082      	sub	sp, #8
 8016930:	af00      	add	r7, sp, #0
 8016932:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 8016934:	6879      	ldr	r1, [r7, #4]
 8016936:	4805      	ldr	r0, [pc, #20]	@ (801694c <TlUserEvtReceived+0x20>)
 8016938:	f000 fae6 	bl	8016f08 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 801693c:	4803      	ldr	r0, [pc, #12]	@ (801694c <TlUserEvtReceived+0x20>)
 801693e:	f7ea ff37 	bl	80017b0 <shci_notify_asynch_evt>

  return;
 8016942:	bf00      	nop
}
 8016944:	3708      	adds	r7, #8
 8016946:	46bd      	mov	sp, r7
 8016948:	bd80      	pop	{r7, pc}
 801694a:	bf00      	nop
 801694c:	20000358 	.word	0x20000358

08016950 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 8016950:	b480      	push	{r7}
 8016952:	b083      	sub	sp, #12
 8016954:	af00      	add	r7, sp, #0
 8016956:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 8016958:	687b      	ldr	r3, [r7, #4]
 801695a:	4a05      	ldr	r2, [pc, #20]	@ (8016970 <shci_register_io_bus+0x20>)
 801695c:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 801695e:	687b      	ldr	r3, [r7, #4]
 8016960:	4a04      	ldr	r2, [pc, #16]	@ (8016974 <shci_register_io_bus+0x24>)
 8016962:	611a      	str	r2, [r3, #16]

  return;
 8016964:	bf00      	nop
}
 8016966:	370c      	adds	r7, #12
 8016968:	46bd      	mov	sp, r7
 801696a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801696e:	4770      	bx	lr
 8016970:	08016b0d 	.word	0x08016b0d
 8016974:	08016b61 	.word	0x08016b61

08016978 <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 8016978:	b580      	push	{r7, lr}
 801697a:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 801697c:	f001 fdd2 	bl	8018524 <HW_IPCC_Enable>

  return;
 8016980:	bf00      	nop
}
 8016982:	bd80      	pop	{r7, pc}

08016984 <TL_Init>:


void TL_Init( void )
{
 8016984:	b580      	push	{r7, lr}
 8016986:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 8016988:	4b10      	ldr	r3, [pc, #64]	@ (80169cc <TL_Init+0x48>)
 801698a:	4a11      	ldr	r2, [pc, #68]	@ (80169d0 <TL_Init+0x4c>)
 801698c:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 801698e:	4b0f      	ldr	r3, [pc, #60]	@ (80169cc <TL_Init+0x48>)
 8016990:	4a10      	ldr	r2, [pc, #64]	@ (80169d4 <TL_Init+0x50>)
 8016992:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 8016994:	4b0d      	ldr	r3, [pc, #52]	@ (80169cc <TL_Init+0x48>)
 8016996:	4a10      	ldr	r2, [pc, #64]	@ (80169d8 <TL_Init+0x54>)
 8016998:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 801699a:	4b0c      	ldr	r3, [pc, #48]	@ (80169cc <TL_Init+0x48>)
 801699c:	4a0f      	ldr	r2, [pc, #60]	@ (80169dc <TL_Init+0x58>)
 801699e:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 80169a0:	4b0a      	ldr	r3, [pc, #40]	@ (80169cc <TL_Init+0x48>)
 80169a2:	4a0f      	ldr	r2, [pc, #60]	@ (80169e0 <TL_Init+0x5c>)
 80169a4:	625a      	str	r2, [r3, #36]	@ 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 80169a6:	4b09      	ldr	r3, [pc, #36]	@ (80169cc <TL_Init+0x48>)
 80169a8:	4a0e      	ldr	r2, [pc, #56]	@ (80169e4 <TL_Init+0x60>)
 80169aa:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 80169ac:	4b07      	ldr	r3, [pc, #28]	@ (80169cc <TL_Init+0x48>)
 80169ae:	4a0e      	ldr	r2, [pc, #56]	@ (80169e8 <TL_Init+0x64>)
 80169b0:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 80169b2:	4b06      	ldr	r3, [pc, #24]	@ (80169cc <TL_Init+0x48>)
 80169b4:	4a0d      	ldr	r2, [pc, #52]	@ (80169ec <TL_Init+0x68>)
 80169b6:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 80169b8:	4b04      	ldr	r3, [pc, #16]	@ (80169cc <TL_Init+0x48>)
 80169ba:	4a0d      	ldr	r2, [pc, #52]	@ (80169f0 <TL_Init+0x6c>)
 80169bc:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 80169be:	4b03      	ldr	r3, [pc, #12]	@ (80169cc <TL_Init+0x48>)
 80169c0:	4a0c      	ldr	r2, [pc, #48]	@ (80169f4 <TL_Init+0x70>)
 80169c2:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 80169c4:	f001 fdc2 	bl	801854c <HW_IPCC_Init>

  return;
 80169c8:	bf00      	nop
}
 80169ca:	bd80      	pop	{r7, pc}
 80169cc:	20030000 	.word	0x20030000
 80169d0:	20030028 	.word	0x20030028
 80169d4:	20030048 	.word	0x20030048
 80169d8:	20030058 	.word	0x20030058
 80169dc:	20030068 	.word	0x20030068
 80169e0:	20030070 	.word	0x20030070
 80169e4:	20030078 	.word	0x20030078
 80169e8:	20030080 	.word	0x20030080
 80169ec:	2003009c 	.word	0x2003009c
 80169f0:	200300a0 	.word	0x200300a0
 80169f4:	200300ac 	.word	0x200300ac

080169f8 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 80169f8:	b580      	push	{r7, lr}
 80169fa:	b084      	sub	sp, #16
 80169fc:	af00      	add	r7, sp, #0
 80169fe:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 8016a00:	687b      	ldr	r3, [r7, #4]
 8016a02:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 8016a04:	4811      	ldr	r0, [pc, #68]	@ (8016a4c <TL_BLE_Init+0x54>)
 8016a06:	f000 fa27 	bl	8016e58 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 8016a0a:	4b11      	ldr	r3, [pc, #68]	@ (8016a50 <TL_BLE_Init+0x58>)
 8016a0c:	685b      	ldr	r3, [r3, #4]
 8016a0e:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8016a10:	68fb      	ldr	r3, [r7, #12]
 8016a12:	689a      	ldr	r2, [r3, #8]
 8016a14:	68bb      	ldr	r3, [r7, #8]
 8016a16:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 8016a18:	68fb      	ldr	r3, [r7, #12]
 8016a1a:	68da      	ldr	r2, [r3, #12]
 8016a1c:	68bb      	ldr	r3, [r7, #8]
 8016a1e:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 8016a20:	68bb      	ldr	r3, [r7, #8]
 8016a22:	4a0c      	ldr	r2, [pc, #48]	@ (8016a54 <TL_BLE_Init+0x5c>)
 8016a24:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 8016a26:	68bb      	ldr	r3, [r7, #8]
 8016a28:	4a08      	ldr	r2, [pc, #32]	@ (8016a4c <TL_BLE_Init+0x54>)
 8016a2a:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 8016a2c:	f001 fda4 	bl	8018578 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 8016a30:	68fb      	ldr	r3, [r7, #12]
 8016a32:	681b      	ldr	r3, [r3, #0]
 8016a34:	4a08      	ldr	r2, [pc, #32]	@ (8016a58 <TL_BLE_Init+0x60>)
 8016a36:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 8016a38:	68fb      	ldr	r3, [r7, #12]
 8016a3a:	685b      	ldr	r3, [r3, #4]
 8016a3c:	4a07      	ldr	r2, [pc, #28]	@ (8016a5c <TL_BLE_Init+0x64>)
 8016a3e:	6013      	str	r3, [r2, #0]

  return 0;
 8016a40:	2300      	movs	r3, #0
}
 8016a42:	4618      	mov	r0, r3
 8016a44:	3710      	adds	r7, #16
 8016a46:	46bd      	mov	sp, r7
 8016a48:	bd80      	pop	{r7, pc}
 8016a4a:	bf00      	nop
 8016a4c:	200300c8 	.word	0x200300c8
 8016a50:	20030000 	.word	0x20030000
 8016a54:	20030a58 	.word	0x20030a58
 8016a58:	20001540 	.word	0x20001540
 8016a5c:	20001544 	.word	0x20001544

08016a60 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 8016a60:	b580      	push	{r7, lr}
 8016a62:	b082      	sub	sp, #8
 8016a64:	af00      	add	r7, sp, #0
 8016a66:	6078      	str	r0, [r7, #4]
 8016a68:	460b      	mov	r3, r1
 8016a6a:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 8016a6c:	4b09      	ldr	r3, [pc, #36]	@ (8016a94 <TL_BLE_SendCmd+0x34>)
 8016a6e:	685b      	ldr	r3, [r3, #4]
 8016a70:	681b      	ldr	r3, [r3, #0]
 8016a72:	2201      	movs	r2, #1
 8016a74:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 8016a76:	4b07      	ldr	r3, [pc, #28]	@ (8016a94 <TL_BLE_SendCmd+0x34>)
 8016a78:	685b      	ldr	r3, [r3, #4]
 8016a7a:	681b      	ldr	r3, [r3, #0]
 8016a7c:	4619      	mov	r1, r3
 8016a7e:	2001      	movs	r0, #1
 8016a80:	f000 f96c 	bl	8016d5c <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 8016a84:	f001 fd82 	bl	801858c <HW_IPCC_BLE_SendCmd>

  return 0;
 8016a88:	2300      	movs	r3, #0
}
 8016a8a:	4618      	mov	r0, r3
 8016a8c:	3708      	adds	r7, #8
 8016a8e:	46bd      	mov	sp, r7
 8016a90:	bd80      	pop	{r7, pc}
 8016a92:	bf00      	nop
 8016a94:	20030000 	.word	0x20030000

08016a98 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 8016a98:	b580      	push	{r7, lr}
 8016a9a:	b082      	sub	sp, #8
 8016a9c:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 8016a9e:	e01c      	b.n	8016ada <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 8016aa0:	1d3b      	adds	r3, r7, #4
 8016aa2:	4619      	mov	r1, r3
 8016aa4:	4812      	ldr	r0, [pc, #72]	@ (8016af0 <HW_IPCC_BLE_RxEvtNot+0x58>)
 8016aa6:	f000 fa76 	bl	8016f96 <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8016aaa:	687b      	ldr	r3, [r7, #4]
 8016aac:	7a5b      	ldrb	r3, [r3, #9]
 8016aae:	2b0f      	cmp	r3, #15
 8016ab0:	d003      	beq.n	8016aba <HW_IPCC_BLE_RxEvtNot+0x22>
 8016ab2:	687b      	ldr	r3, [r7, #4]
 8016ab4:	7a5b      	ldrb	r3, [r3, #9]
 8016ab6:	2b0e      	cmp	r3, #14
 8016ab8:	d105      	bne.n	8016ac6 <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 8016aba:	687b      	ldr	r3, [r7, #4]
 8016abc:	4619      	mov	r1, r3
 8016abe:	2002      	movs	r0, #2
 8016ac0:	f000 f94c 	bl	8016d5c <OutputDbgTrace>
 8016ac4:	e004      	b.n	8016ad0 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 8016ac6:	687b      	ldr	r3, [r7, #4]
 8016ac8:	4619      	mov	r1, r3
 8016aca:	2003      	movs	r0, #3
 8016acc:	f000 f946 	bl	8016d5c <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 8016ad0:	4b08      	ldr	r3, [pc, #32]	@ (8016af4 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 8016ad2:	681b      	ldr	r3, [r3, #0]
 8016ad4:	687a      	ldr	r2, [r7, #4]
 8016ad6:	4610      	mov	r0, r2
 8016ad8:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 8016ada:	4805      	ldr	r0, [pc, #20]	@ (8016af0 <HW_IPCC_BLE_RxEvtNot+0x58>)
 8016adc:	f000 f9cc 	bl	8016e78 <LST_is_empty>
 8016ae0:	4603      	mov	r3, r0
 8016ae2:	2b00      	cmp	r3, #0
 8016ae4:	d0dc      	beq.n	8016aa0 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 8016ae6:	bf00      	nop
}
 8016ae8:	3708      	adds	r7, #8
 8016aea:	46bd      	mov	sp, r7
 8016aec:	bd80      	pop	{r7, pc}
 8016aee:	bf00      	nop
 8016af0:	200300c8 	.word	0x200300c8
 8016af4:	20001540 	.word	0x20001540

08016af8 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 8016af8:	b580      	push	{r7, lr}
 8016afa:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 8016afc:	4b02      	ldr	r3, [pc, #8]	@ (8016b08 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 8016afe:	681b      	ldr	r3, [r3, #0]
 8016b00:	4798      	blx	r3

  return;
 8016b02:	bf00      	nop
}
 8016b04:	bd80      	pop	{r7, pc}
 8016b06:	bf00      	nop
 8016b08:	20001544 	.word	0x20001544

08016b0c <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 8016b0c:	b580      	push	{r7, lr}
 8016b0e:	b084      	sub	sp, #16
 8016b10:	af00      	add	r7, sp, #0
 8016b12:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 8016b14:	687b      	ldr	r3, [r7, #4]
 8016b16:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 8016b18:	480d      	ldr	r0, [pc, #52]	@ (8016b50 <TL_SYS_Init+0x44>)
 8016b1a:	f000 f99d 	bl	8016e58 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 8016b1e:	4b0d      	ldr	r3, [pc, #52]	@ (8016b54 <TL_SYS_Init+0x48>)
 8016b20:	68db      	ldr	r3, [r3, #12]
 8016b22:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8016b24:	68fb      	ldr	r3, [r7, #12]
 8016b26:	689a      	ldr	r2, [r3, #8]
 8016b28:	68bb      	ldr	r3, [r7, #8]
 8016b2a:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 8016b2c:	68bb      	ldr	r3, [r7, #8]
 8016b2e:	4a08      	ldr	r2, [pc, #32]	@ (8016b50 <TL_SYS_Init+0x44>)
 8016b30:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 8016b32:	f001 fd4d 	bl	80185d0 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 8016b36:	68fb      	ldr	r3, [r7, #12]
 8016b38:	681b      	ldr	r3, [r3, #0]
 8016b3a:	4a07      	ldr	r2, [pc, #28]	@ (8016b58 <TL_SYS_Init+0x4c>)
 8016b3c:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 8016b3e:	68fb      	ldr	r3, [r7, #12]
 8016b40:	685b      	ldr	r3, [r3, #4]
 8016b42:	4a06      	ldr	r2, [pc, #24]	@ (8016b5c <TL_SYS_Init+0x50>)
 8016b44:	6013      	str	r3, [r2, #0]

  return 0;
 8016b46:	2300      	movs	r3, #0
}
 8016b48:	4618      	mov	r0, r3
 8016b4a:	3710      	adds	r7, #16
 8016b4c:	46bd      	mov	sp, r7
 8016b4e:	bd80      	pop	{r7, pc}
 8016b50:	200300d0 	.word	0x200300d0
 8016b54:	20030000 	.word	0x20030000
 8016b58:	20001548 	.word	0x20001548
 8016b5c:	2000154c 	.word	0x2000154c

08016b60 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 8016b60:	b580      	push	{r7, lr}
 8016b62:	b082      	sub	sp, #8
 8016b64:	af00      	add	r7, sp, #0
 8016b66:	6078      	str	r0, [r7, #4]
 8016b68:	460b      	mov	r3, r1
 8016b6a:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 8016b6c:	4b09      	ldr	r3, [pc, #36]	@ (8016b94 <TL_SYS_SendCmd+0x34>)
 8016b6e:	68db      	ldr	r3, [r3, #12]
 8016b70:	681b      	ldr	r3, [r3, #0]
 8016b72:	2210      	movs	r2, #16
 8016b74:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 8016b76:	4b07      	ldr	r3, [pc, #28]	@ (8016b94 <TL_SYS_SendCmd+0x34>)
 8016b78:	68db      	ldr	r3, [r3, #12]
 8016b7a:	681b      	ldr	r3, [r3, #0]
 8016b7c:	4619      	mov	r1, r3
 8016b7e:	2004      	movs	r0, #4
 8016b80:	f000 f8ec 	bl	8016d5c <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 8016b84:	f001 fd2e 	bl	80185e4 <HW_IPCC_SYS_SendCmd>

  return 0;
 8016b88:	2300      	movs	r3, #0
}
 8016b8a:	4618      	mov	r0, r3
 8016b8c:	3708      	adds	r7, #8
 8016b8e:	46bd      	mov	sp, r7
 8016b90:	bd80      	pop	{r7, pc}
 8016b92:	bf00      	nop
 8016b94:	20030000 	.word	0x20030000

08016b98 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 8016b98:	b580      	push	{r7, lr}
 8016b9a:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8016b9c:	4b07      	ldr	r3, [pc, #28]	@ (8016bbc <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8016b9e:	68db      	ldr	r3, [r3, #12]
 8016ba0:	681b      	ldr	r3, [r3, #0]
 8016ba2:	4619      	mov	r1, r3
 8016ba4:	2005      	movs	r0, #5
 8016ba6:	f000 f8d9 	bl	8016d5c <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8016baa:	4b05      	ldr	r3, [pc, #20]	@ (8016bc0 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 8016bac:	681b      	ldr	r3, [r3, #0]
 8016bae:	4a03      	ldr	r2, [pc, #12]	@ (8016bbc <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8016bb0:	68d2      	ldr	r2, [r2, #12]
 8016bb2:	6812      	ldr	r2, [r2, #0]
 8016bb4:	4610      	mov	r0, r2
 8016bb6:	4798      	blx	r3

  return;
 8016bb8:	bf00      	nop
}
 8016bba:	bd80      	pop	{r7, pc}
 8016bbc:	20030000 	.word	0x20030000
 8016bc0:	20001548 	.word	0x20001548

08016bc4 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 8016bc4:	b580      	push	{r7, lr}
 8016bc6:	b082      	sub	sp, #8
 8016bc8:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8016bca:	e00e      	b.n	8016bea <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 8016bcc:	1d3b      	adds	r3, r7, #4
 8016bce:	4619      	mov	r1, r3
 8016bd0:	480b      	ldr	r0, [pc, #44]	@ (8016c00 <HW_IPCC_SYS_EvtNot+0x3c>)
 8016bd2:	f000 f9e0 	bl	8016f96 <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 8016bd6:	687b      	ldr	r3, [r7, #4]
 8016bd8:	4619      	mov	r1, r3
 8016bda:	2006      	movs	r0, #6
 8016bdc:	f000 f8be 	bl	8016d5c <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 8016be0:	4b08      	ldr	r3, [pc, #32]	@ (8016c04 <HW_IPCC_SYS_EvtNot+0x40>)
 8016be2:	681b      	ldr	r3, [r3, #0]
 8016be4:	687a      	ldr	r2, [r7, #4]
 8016be6:	4610      	mov	r0, r2
 8016be8:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8016bea:	4805      	ldr	r0, [pc, #20]	@ (8016c00 <HW_IPCC_SYS_EvtNot+0x3c>)
 8016bec:	f000 f944 	bl	8016e78 <LST_is_empty>
 8016bf0:	4603      	mov	r3, r0
 8016bf2:	2b00      	cmp	r3, #0
 8016bf4:	d0ea      	beq.n	8016bcc <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 8016bf6:	bf00      	nop
}
 8016bf8:	3708      	adds	r7, #8
 8016bfa:	46bd      	mov	sp, r7
 8016bfc:	bd80      	pop	{r7, pc}
 8016bfe:	bf00      	nop
 8016c00:	200300d0 	.word	0x200300d0
 8016c04:	2000154c 	.word	0x2000154c

08016c08 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 8016c08:	b580      	push	{r7, lr}
 8016c0a:	b082      	sub	sp, #8
 8016c0c:	af00      	add	r7, sp, #0
 8016c0e:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 8016c10:	4817      	ldr	r0, [pc, #92]	@ (8016c70 <TL_MM_Init+0x68>)
 8016c12:	f000 f921 	bl	8016e58 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 8016c16:	4817      	ldr	r0, [pc, #92]	@ (8016c74 <TL_MM_Init+0x6c>)
 8016c18:	f000 f91e 	bl	8016e58 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 8016c1c:	4b16      	ldr	r3, [pc, #88]	@ (8016c78 <TL_MM_Init+0x70>)
 8016c1e:	691b      	ldr	r3, [r3, #16]
 8016c20:	4a16      	ldr	r2, [pc, #88]	@ (8016c7c <TL_MM_Init+0x74>)
 8016c22:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 8016c24:	4b15      	ldr	r3, [pc, #84]	@ (8016c7c <TL_MM_Init+0x74>)
 8016c26:	681b      	ldr	r3, [r3, #0]
 8016c28:	687a      	ldr	r2, [r7, #4]
 8016c2a:	6892      	ldr	r2, [r2, #8]
 8016c2c:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 8016c2e:	4b13      	ldr	r3, [pc, #76]	@ (8016c7c <TL_MM_Init+0x74>)
 8016c30:	681b      	ldr	r3, [r3, #0]
 8016c32:	687a      	ldr	r2, [r7, #4]
 8016c34:	68d2      	ldr	r2, [r2, #12]
 8016c36:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 8016c38:	4b10      	ldr	r3, [pc, #64]	@ (8016c7c <TL_MM_Init+0x74>)
 8016c3a:	681b      	ldr	r3, [r3, #0]
 8016c3c:	4a0c      	ldr	r2, [pc, #48]	@ (8016c70 <TL_MM_Init+0x68>)
 8016c3e:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 8016c40:	4b0e      	ldr	r3, [pc, #56]	@ (8016c7c <TL_MM_Init+0x74>)
 8016c42:	681b      	ldr	r3, [r3, #0]
 8016c44:	687a      	ldr	r2, [r7, #4]
 8016c46:	6812      	ldr	r2, [r2, #0]
 8016c48:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 8016c4a:	4b0c      	ldr	r3, [pc, #48]	@ (8016c7c <TL_MM_Init+0x74>)
 8016c4c:	681b      	ldr	r3, [r3, #0]
 8016c4e:	687a      	ldr	r2, [r7, #4]
 8016c50:	6852      	ldr	r2, [r2, #4]
 8016c52:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 8016c54:	4b09      	ldr	r3, [pc, #36]	@ (8016c7c <TL_MM_Init+0x74>)
 8016c56:	681b      	ldr	r3, [r3, #0]
 8016c58:	687a      	ldr	r2, [r7, #4]
 8016c5a:	6912      	ldr	r2, [r2, #16]
 8016c5c:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 8016c5e:	4b07      	ldr	r3, [pc, #28]	@ (8016c7c <TL_MM_Init+0x74>)
 8016c60:	681b      	ldr	r3, [r3, #0]
 8016c62:	687a      	ldr	r2, [r7, #4]
 8016c64:	6952      	ldr	r2, [r2, #20]
 8016c66:	619a      	str	r2, [r3, #24]

  return;
 8016c68:	bf00      	nop
}
 8016c6a:	3708      	adds	r7, #8
 8016c6c:	46bd      	mov	sp, r7
 8016c6e:	bd80      	pop	{r7, pc}
 8016c70:	200300b8 	.word	0x200300b8
 8016c74:	20001538 	.word	0x20001538
 8016c78:	20030000 	.word	0x20030000
 8016c7c:	20001550 	.word	0x20001550

08016c80 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 8016c80:	b580      	push	{r7, lr}
 8016c82:	b082      	sub	sp, #8
 8016c84:	af00      	add	r7, sp, #0
 8016c86:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 8016c88:	6879      	ldr	r1, [r7, #4]
 8016c8a:	4807      	ldr	r0, [pc, #28]	@ (8016ca8 <TL_MM_EvtDone+0x28>)
 8016c8c:	f000 f93c 	bl	8016f08 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 8016c90:	6879      	ldr	r1, [r7, #4]
 8016c92:	2000      	movs	r0, #0
 8016c94:	f000 f862 	bl	8016d5c <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 8016c98:	4804      	ldr	r0, [pc, #16]	@ (8016cac <TL_MM_EvtDone+0x2c>)
 8016c9a:	f001 fcc9 	bl	8018630 <HW_IPCC_MM_SendFreeBuf>

  return;
 8016c9e:	bf00      	nop
}
 8016ca0:	3708      	adds	r7, #8
 8016ca2:	46bd      	mov	sp, r7
 8016ca4:	bd80      	pop	{r7, pc}
 8016ca6:	bf00      	nop
 8016ca8:	20001538 	.word	0x20001538
 8016cac:	08016cb1 	.word	0x08016cb1

08016cb0 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 8016cb0:	b580      	push	{r7, lr}
 8016cb2:	b082      	sub	sp, #8
 8016cb4:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8016cb6:	e00c      	b.n	8016cd2 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 8016cb8:	1d3b      	adds	r3, r7, #4
 8016cba:	4619      	mov	r1, r3
 8016cbc:	480a      	ldr	r0, [pc, #40]	@ (8016ce8 <SendFreeBuf+0x38>)
 8016cbe:	f000 f96a 	bl	8016f96 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 8016cc2:	4b0a      	ldr	r3, [pc, #40]	@ (8016cec <SendFreeBuf+0x3c>)
 8016cc4:	691b      	ldr	r3, [r3, #16]
 8016cc6:	691b      	ldr	r3, [r3, #16]
 8016cc8:	687a      	ldr	r2, [r7, #4]
 8016cca:	4611      	mov	r1, r2
 8016ccc:	4618      	mov	r0, r3
 8016cce:	f000 f91b 	bl	8016f08 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8016cd2:	4805      	ldr	r0, [pc, #20]	@ (8016ce8 <SendFreeBuf+0x38>)
 8016cd4:	f000 f8d0 	bl	8016e78 <LST_is_empty>
 8016cd8:	4603      	mov	r3, r0
 8016cda:	2b00      	cmp	r3, #0
 8016cdc:	d0ec      	beq.n	8016cb8 <SendFreeBuf+0x8>
  }

  return;
 8016cde:	bf00      	nop
}
 8016ce0:	3708      	adds	r7, #8
 8016ce2:	46bd      	mov	sp, r7
 8016ce4:	bd80      	pop	{r7, pc}
 8016ce6:	bf00      	nop
 8016ce8:	20001538 	.word	0x20001538
 8016cec:	20030000 	.word	0x20030000

08016cf0 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 8016cf0:	b580      	push	{r7, lr}
 8016cf2:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 8016cf4:	4805      	ldr	r0, [pc, #20]	@ (8016d0c <TL_TRACES_Init+0x1c>)
 8016cf6:	f000 f8af 	bl	8016e58 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 8016cfa:	4b05      	ldr	r3, [pc, #20]	@ (8016d10 <TL_TRACES_Init+0x20>)
 8016cfc:	695b      	ldr	r3, [r3, #20]
 8016cfe:	4a03      	ldr	r2, [pc, #12]	@ (8016d0c <TL_TRACES_Init+0x1c>)
 8016d00:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 8016d02:	f001 fccb 	bl	801869c <HW_IPCC_TRACES_Init>

  return;
 8016d06:	bf00      	nop
}
 8016d08:	bd80      	pop	{r7, pc}
 8016d0a:	bf00      	nop
 8016d0c:	200300c0 	.word	0x200300c0
 8016d10:	20030000 	.word	0x20030000

08016d14 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 8016d14:	b580      	push	{r7, lr}
 8016d16:	b082      	sub	sp, #8
 8016d18:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8016d1a:	e008      	b.n	8016d2e <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 8016d1c:	1d3b      	adds	r3, r7, #4
 8016d1e:	4619      	mov	r1, r3
 8016d20:	4808      	ldr	r0, [pc, #32]	@ (8016d44 <HW_IPCC_TRACES_EvtNot+0x30>)
 8016d22:	f000 f938 	bl	8016f96 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 8016d26:	687b      	ldr	r3, [r7, #4]
 8016d28:	4618      	mov	r0, r3
 8016d2a:	f000 f80d 	bl	8016d48 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8016d2e:	4805      	ldr	r0, [pc, #20]	@ (8016d44 <HW_IPCC_TRACES_EvtNot+0x30>)
 8016d30:	f000 f8a2 	bl	8016e78 <LST_is_empty>
 8016d34:	4603      	mov	r3, r0
 8016d36:	2b00      	cmp	r3, #0
 8016d38:	d0f0      	beq.n	8016d1c <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 8016d3a:	bf00      	nop
}
 8016d3c:	3708      	adds	r7, #8
 8016d3e:	46bd      	mov	sp, r7
 8016d40:	bd80      	pop	{r7, pc}
 8016d42:	bf00      	nop
 8016d44:	200300c0 	.word	0x200300c0

08016d48 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 8016d48:	b480      	push	{r7}
 8016d4a:	b083      	sub	sp, #12
 8016d4c:	af00      	add	r7, sp, #0
 8016d4e:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 8016d50:	bf00      	nop
 8016d52:	370c      	adds	r7, #12
 8016d54:	46bd      	mov	sp, r7
 8016d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d5a:	4770      	bx	lr

08016d5c <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 8016d5c:	b480      	push	{r7}
 8016d5e:	b087      	sub	sp, #28
 8016d60:	af00      	add	r7, sp, #0
 8016d62:	4603      	mov	r3, r0
 8016d64:	6039      	str	r1, [r7, #0]
 8016d66:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;
  TL_EvtSerial_t *p_cmd_rsp_packet;

  switch(packet_type)
 8016d68:	79fb      	ldrb	r3, [r7, #7]
 8016d6a:	2b06      	cmp	r3, #6
 8016d6c:	d845      	bhi.n	8016dfa <OutputDbgTrace+0x9e>
 8016d6e:	a201      	add	r2, pc, #4	@ (adr r2, 8016d74 <OutputDbgTrace+0x18>)
 8016d70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016d74:	08016d91 	.word	0x08016d91
 8016d78:	08016db5 	.word	0x08016db5
 8016d7c:	08016dbb 	.word	0x08016dbb
 8016d80:	08016dcf 	.word	0x08016dcf
 8016d84:	08016ddb 	.word	0x08016ddb
 8016d88:	08016de1 	.word	0x08016de1
 8016d8c:	08016def 	.word	0x08016def
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8016d90:	683b      	ldr	r3, [r7, #0]
 8016d92:	617b      	str	r3, [r7, #20]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8016d94:	697b      	ldr	r3, [r7, #20]
 8016d96:	7a5b      	ldrb	r3, [r3, #9]
 8016d98:	2bff      	cmp	r3, #255	@ 0xff
 8016d9a:	d005      	beq.n	8016da8 <OutputDbgTrace+0x4c>
 8016d9c:	2bff      	cmp	r3, #255	@ 0xff
 8016d9e:	dc05      	bgt.n	8016dac <OutputDbgTrace+0x50>
 8016da0:	2b0e      	cmp	r3, #14
 8016da2:	d005      	beq.n	8016db0 <OutputDbgTrace+0x54>
 8016da4:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 8016da6:	e001      	b.n	8016dac <OutputDbgTrace+0x50>
          break;
 8016da8:	bf00      	nop
 8016daa:	e027      	b.n	8016dfc <OutputDbgTrace+0xa0>
          break;
 8016dac:	bf00      	nop
 8016dae:	e025      	b.n	8016dfc <OutputDbgTrace+0xa0>
          break;
 8016db0:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 8016db2:	e023      	b.n	8016dfc <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8016db4:	683b      	ldr	r3, [r7, #0]
 8016db6:	60fb      	str	r3, [r7, #12]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8016db8:	e020      	b.n	8016dfc <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8016dba:	683b      	ldr	r3, [r7, #0]
 8016dbc:	617b      	str	r3, [r7, #20]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8016dbe:	697b      	ldr	r3, [r7, #20]
 8016dc0:	7a5b      	ldrb	r3, [r3, #9]
 8016dc2:	2b0e      	cmp	r3, #14
 8016dc4:	d001      	beq.n	8016dca <OutputDbgTrace+0x6e>
 8016dc6:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8016dc8:	e000      	b.n	8016dcc <OutputDbgTrace+0x70>
          break;
 8016dca:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8016dcc:	e016      	b.n	8016dfc <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8016dce:	683b      	ldr	r3, [r7, #0]
 8016dd0:	617b      	str	r3, [r7, #20]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8016dd2:	697b      	ldr	r3, [r7, #20]
 8016dd4:	7a5b      	ldrb	r3, [r3, #9]
 8016dd6:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8016dd8:	e010      	b.n	8016dfc <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8016dda:	683b      	ldr	r3, [r7, #0]
 8016ddc:	60fb      	str	r3, [r7, #12]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8016dde:	e00d      	b.n	8016dfc <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_cmd_rsp_packet = (TL_EvtSerial_t*)buffer;
 8016de0:	683b      	ldr	r3, [r7, #0]
 8016de2:	613b      	str	r3, [r7, #16]
      switch(p_cmd_rsp_packet->evt.evtcode)
 8016de4:	693b      	ldr	r3, [r7, #16]
 8016de6:	785b      	ldrb	r3, [r3, #1]
 8016de8:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_cmd_rsp_packet->evt.evtcode);
          break;
 8016dea:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_rsp_packet->evt, p_cmd_rsp_packet->evt.plen+TL_EVT_HDR_SIZE);
      break;
 8016dec:	e006      	b.n	8016dfc <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8016dee:	683b      	ldr	r3, [r7, #0]
 8016df0:	617b      	str	r3, [r7, #20]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8016df2:	697b      	ldr	r3, [r7, #20]
 8016df4:	7a5b      	ldrb	r3, [r3, #9]
 8016df6:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8016df8:	e000      	b.n	8016dfc <OutputDbgTrace+0xa0>

    default:
      break;
 8016dfa:	bf00      	nop
  }

  return;
 8016dfc:	bf00      	nop
}
 8016dfe:	371c      	adds	r7, #28
 8016e00:	46bd      	mov	sp, r7
 8016e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e06:	4770      	bx	lr

08016e08 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 8016e08:	b480      	push	{r7}
 8016e0a:	b085      	sub	sp, #20
 8016e0c:	af00      	add	r7, sp, #0
 8016e0e:	4603      	mov	r3, r0
 8016e10:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 8016e12:	4b0f      	ldr	r3, [pc, #60]	@ (8016e50 <OTP_Read+0x48>)
 8016e14:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8016e16:	e002      	b.n	8016e1e <OTP_Read+0x16>
  {
    p_id -= 8 ;
 8016e18:	68fb      	ldr	r3, [r7, #12]
 8016e1a:	3b08      	subs	r3, #8
 8016e1c:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8016e1e:	68fb      	ldr	r3, [r7, #12]
 8016e20:	3307      	adds	r3, #7
 8016e22:	781b      	ldrb	r3, [r3, #0]
 8016e24:	79fa      	ldrb	r2, [r7, #7]
 8016e26:	429a      	cmp	r2, r3
 8016e28:	d003      	beq.n	8016e32 <OTP_Read+0x2a>
 8016e2a:	68fb      	ldr	r3, [r7, #12]
 8016e2c:	4a09      	ldr	r2, [pc, #36]	@ (8016e54 <OTP_Read+0x4c>)
 8016e2e:	4293      	cmp	r3, r2
 8016e30:	d1f2      	bne.n	8016e18 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 8016e32:	68fb      	ldr	r3, [r7, #12]
 8016e34:	3307      	adds	r3, #7
 8016e36:	781b      	ldrb	r3, [r3, #0]
 8016e38:	79fa      	ldrb	r2, [r7, #7]
 8016e3a:	429a      	cmp	r2, r3
 8016e3c:	d001      	beq.n	8016e42 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 8016e3e:	2300      	movs	r3, #0
 8016e40:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 8016e42:	68fb      	ldr	r3, [r7, #12]
}
 8016e44:	4618      	mov	r0, r3
 8016e46:	3714      	adds	r7, #20
 8016e48:	46bd      	mov	sp, r7
 8016e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e4e:	4770      	bx	lr
 8016e50:	1fff73f8 	.word	0x1fff73f8
 8016e54:	1fff7000 	.word	0x1fff7000

08016e58 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 8016e58:	b480      	push	{r7}
 8016e5a:	b083      	sub	sp, #12
 8016e5c:	af00      	add	r7, sp, #0
 8016e5e:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8016e60:	687b      	ldr	r3, [r7, #4]
 8016e62:	687a      	ldr	r2, [r7, #4]
 8016e64:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 8016e66:	687b      	ldr	r3, [r7, #4]
 8016e68:	687a      	ldr	r2, [r7, #4]
 8016e6a:	605a      	str	r2, [r3, #4]
}
 8016e6c:	bf00      	nop
 8016e6e:	370c      	adds	r7, #12
 8016e70:	46bd      	mov	sp, r7
 8016e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e76:	4770      	bx	lr

08016e78 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 8016e78:	b480      	push	{r7}
 8016e7a:	b087      	sub	sp, #28
 8016e7c:	af00      	add	r7, sp, #0
 8016e7e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016e80:	f3ef 8310 	mrs	r3, PRIMASK
 8016e84:	60fb      	str	r3, [r7, #12]
  return(result);
 8016e86:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8016e88:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8016e8a:	b672      	cpsid	i
}
 8016e8c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 8016e8e:	687b      	ldr	r3, [r7, #4]
 8016e90:	681b      	ldr	r3, [r3, #0]
 8016e92:	687a      	ldr	r2, [r7, #4]
 8016e94:	429a      	cmp	r2, r3
 8016e96:	d102      	bne.n	8016e9e <LST_is_empty+0x26>
  {
    return_value = TRUE;
 8016e98:	2301      	movs	r3, #1
 8016e9a:	75fb      	strb	r3, [r7, #23]
 8016e9c:	e001      	b.n	8016ea2 <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 8016e9e:	2300      	movs	r3, #0
 8016ea0:	75fb      	strb	r3, [r7, #23]
 8016ea2:	693b      	ldr	r3, [r7, #16]
 8016ea4:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016ea6:	68bb      	ldr	r3, [r7, #8]
 8016ea8:	f383 8810 	msr	PRIMASK, r3
}
 8016eac:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 8016eae:	7dfb      	ldrb	r3, [r7, #23]
}
 8016eb0:	4618      	mov	r0, r3
 8016eb2:	371c      	adds	r7, #28
 8016eb4:	46bd      	mov	sp, r7
 8016eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016eba:	4770      	bx	lr

08016ebc <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 8016ebc:	b480      	push	{r7}
 8016ebe:	b087      	sub	sp, #28
 8016ec0:	af00      	add	r7, sp, #0
 8016ec2:	6078      	str	r0, [r7, #4]
 8016ec4:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016ec6:	f3ef 8310 	mrs	r3, PRIMASK
 8016eca:	60fb      	str	r3, [r7, #12]
  return(result);
 8016ecc:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8016ece:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8016ed0:	b672      	cpsid	i
}
 8016ed2:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 8016ed4:	687b      	ldr	r3, [r7, #4]
 8016ed6:	681a      	ldr	r2, [r3, #0]
 8016ed8:	683b      	ldr	r3, [r7, #0]
 8016eda:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8016edc:	683b      	ldr	r3, [r7, #0]
 8016ede:	687a      	ldr	r2, [r7, #4]
 8016ee0:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8016ee2:	687b      	ldr	r3, [r7, #4]
 8016ee4:	683a      	ldr	r2, [r7, #0]
 8016ee6:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8016ee8:	683b      	ldr	r3, [r7, #0]
 8016eea:	681b      	ldr	r3, [r3, #0]
 8016eec:	683a      	ldr	r2, [r7, #0]
 8016eee:	605a      	str	r2, [r3, #4]
 8016ef0:	697b      	ldr	r3, [r7, #20]
 8016ef2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016ef4:	693b      	ldr	r3, [r7, #16]
 8016ef6:	f383 8810 	msr	PRIMASK, r3
}
 8016efa:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8016efc:	bf00      	nop
 8016efe:	371c      	adds	r7, #28
 8016f00:	46bd      	mov	sp, r7
 8016f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f06:	4770      	bx	lr

08016f08 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 8016f08:	b480      	push	{r7}
 8016f0a:	b087      	sub	sp, #28
 8016f0c:	af00      	add	r7, sp, #0
 8016f0e:	6078      	str	r0, [r7, #4]
 8016f10:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016f12:	f3ef 8310 	mrs	r3, PRIMASK
 8016f16:	60fb      	str	r3, [r7, #12]
  return(result);
 8016f18:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8016f1a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8016f1c:	b672      	cpsid	i
}
 8016f1e:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 8016f20:	683b      	ldr	r3, [r7, #0]
 8016f22:	687a      	ldr	r2, [r7, #4]
 8016f24:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8016f26:	687b      	ldr	r3, [r7, #4]
 8016f28:	685a      	ldr	r2, [r3, #4]
 8016f2a:	683b      	ldr	r3, [r7, #0]
 8016f2c:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 8016f2e:	687b      	ldr	r3, [r7, #4]
 8016f30:	683a      	ldr	r2, [r7, #0]
 8016f32:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8016f34:	683b      	ldr	r3, [r7, #0]
 8016f36:	685b      	ldr	r3, [r3, #4]
 8016f38:	683a      	ldr	r2, [r7, #0]
 8016f3a:	601a      	str	r2, [r3, #0]
 8016f3c:	697b      	ldr	r3, [r7, #20]
 8016f3e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016f40:	693b      	ldr	r3, [r7, #16]
 8016f42:	f383 8810 	msr	PRIMASK, r3
}
 8016f46:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8016f48:	bf00      	nop
 8016f4a:	371c      	adds	r7, #28
 8016f4c:	46bd      	mov	sp, r7
 8016f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f52:	4770      	bx	lr

08016f54 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 8016f54:	b480      	push	{r7}
 8016f56:	b087      	sub	sp, #28
 8016f58:	af00      	add	r7, sp, #0
 8016f5a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016f5c:	f3ef 8310 	mrs	r3, PRIMASK
 8016f60:	60fb      	str	r3, [r7, #12]
  return(result);
 8016f62:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8016f64:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8016f66:	b672      	cpsid	i
}
 8016f68:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 8016f6a:	687b      	ldr	r3, [r7, #4]
 8016f6c:	685b      	ldr	r3, [r3, #4]
 8016f6e:	687a      	ldr	r2, [r7, #4]
 8016f70:	6812      	ldr	r2, [r2, #0]
 8016f72:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8016f74:	687b      	ldr	r3, [r7, #4]
 8016f76:	681b      	ldr	r3, [r3, #0]
 8016f78:	687a      	ldr	r2, [r7, #4]
 8016f7a:	6852      	ldr	r2, [r2, #4]
 8016f7c:	605a      	str	r2, [r3, #4]
 8016f7e:	697b      	ldr	r3, [r7, #20]
 8016f80:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016f82:	693b      	ldr	r3, [r7, #16]
 8016f84:	f383 8810 	msr	PRIMASK, r3
}
 8016f88:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8016f8a:	bf00      	nop
 8016f8c:	371c      	adds	r7, #28
 8016f8e:	46bd      	mov	sp, r7
 8016f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f94:	4770      	bx	lr

08016f96 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 8016f96:	b580      	push	{r7, lr}
 8016f98:	b086      	sub	sp, #24
 8016f9a:	af00      	add	r7, sp, #0
 8016f9c:	6078      	str	r0, [r7, #4]
 8016f9e:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016fa0:	f3ef 8310 	mrs	r3, PRIMASK
 8016fa4:	60fb      	str	r3, [r7, #12]
  return(result);
 8016fa6:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8016fa8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8016faa:	b672      	cpsid	i
}
 8016fac:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 8016fae:	687b      	ldr	r3, [r7, #4]
 8016fb0:	681a      	ldr	r2, [r3, #0]
 8016fb2:	683b      	ldr	r3, [r7, #0]
 8016fb4:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 8016fb6:	687b      	ldr	r3, [r7, #4]
 8016fb8:	681b      	ldr	r3, [r3, #0]
 8016fba:	4618      	mov	r0, r3
 8016fbc:	f7ff ffca 	bl	8016f54 <LST_remove_node>
 8016fc0:	697b      	ldr	r3, [r7, #20]
 8016fc2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016fc4:	693b      	ldr	r3, [r7, #16]
 8016fc6:	f383 8810 	msr	PRIMASK, r3
}
 8016fca:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8016fcc:	bf00      	nop
 8016fce:	3718      	adds	r7, #24
 8016fd0:	46bd      	mov	sp, r7
 8016fd2:	bd80      	pop	{r7, pc}

08016fd4 <SPIF_Delay>:
bool     SPIF_ReadFn(SPIF_HandleTypeDef *Handle, uint32_t Address, uint8_t *Data, uint32_t Size);

/***********************************************************************************************************/

void SPIF_Delay(uint32_t Delay)
{
 8016fd4:	b580      	push	{r7, lr}
 8016fd6:	b082      	sub	sp, #8
 8016fd8:	af00      	add	r7, sp, #0
 8016fda:	6078      	str	r0, [r7, #4]
#if SPIF_RTOS == SPIF_RTOS_DISABLE
  HAL_Delay(Delay);
 8016fdc:	6878      	ldr	r0, [r7, #4]
 8016fde:	f7ea fba6 	bl	800172e <HAL_Delay>
  uint32_t d = (TX_TIMER_TICKS_PER_SECOND * Delay) / 1000;
  if (d == 0)
    d = 1;
  tx_thread_sleep(d);
#endif
}
 8016fe2:	bf00      	nop
 8016fe4:	3708      	adds	r7, #8
 8016fe6:	46bd      	mov	sp, r7
 8016fe8:	bd80      	pop	{r7, pc}

08016fea <SPIF_Lock>:

/***********************************************************************************************************/

void SPIF_Lock(SPIF_HandleTypeDef *Handle)
{
 8016fea:	b580      	push	{r7, lr}
 8016fec:	b082      	sub	sp, #8
 8016fee:	af00      	add	r7, sp, #0
 8016ff0:	6078      	str	r0, [r7, #4]
  while (Handle->Lock)
 8016ff2:	e002      	b.n	8016ffa <SPIF_Lock+0x10>
  {
    SPIF_Delay(1);
 8016ff4:	2001      	movs	r0, #1
 8016ff6:	f7ff ffed 	bl	8016fd4 <SPIF_Delay>
  while (Handle->Lock)
 8016ffa:	687b      	ldr	r3, [r7, #4]
 8016ffc:	7b1b      	ldrb	r3, [r3, #12]
 8016ffe:	2b00      	cmp	r3, #0
 8017000:	d1f8      	bne.n	8016ff4 <SPIF_Lock+0xa>
  }
  Handle->Lock = 1;
 8017002:	687b      	ldr	r3, [r7, #4]
 8017004:	2201      	movs	r2, #1
 8017006:	731a      	strb	r2, [r3, #12]
}
 8017008:	bf00      	nop
 801700a:	3708      	adds	r7, #8
 801700c:	46bd      	mov	sp, r7
 801700e:	bd80      	pop	{r7, pc}

08017010 <SPIF_UnLock>:

/***********************************************************************************************************/

void SPIF_UnLock(SPIF_HandleTypeDef *Handle)
{
 8017010:	b480      	push	{r7}
 8017012:	b083      	sub	sp, #12
 8017014:	af00      	add	r7, sp, #0
 8017016:	6078      	str	r0, [r7, #4]
  Handle->Lock = 0;
 8017018:	687b      	ldr	r3, [r7, #4]
 801701a:	2200      	movs	r2, #0
 801701c:	731a      	strb	r2, [r3, #12]
}
 801701e:	bf00      	nop
 8017020:	370c      	adds	r7, #12
 8017022:	46bd      	mov	sp, r7
 8017024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017028:	4770      	bx	lr

0801702a <SPIF_CsPin>:

/***********************************************************************************************************/

void SPIF_CsPin(SPIF_HandleTypeDef *Handle, bool Select)
{
 801702a:	b580      	push	{r7, lr}
 801702c:	b084      	sub	sp, #16
 801702e:	af00      	add	r7, sp, #0
 8017030:	6078      	str	r0, [r7, #4]
 8017032:	460b      	mov	r3, r1
 8017034:	70fb      	strb	r3, [r7, #3]
  HAL_GPIO_WritePin(Handle->Gpio, Handle->Pin, (GPIO_PinState)Select);
 8017036:	687b      	ldr	r3, [r7, #4]
 8017038:	6858      	ldr	r0, [r3, #4]
 801703a:	687b      	ldr	r3, [r7, #4]
 801703c:	691b      	ldr	r3, [r3, #16]
 801703e:	b29b      	uxth	r3, r3
 8017040:	78fa      	ldrb	r2, [r7, #3]
 8017042:	4619      	mov	r1, r3
 8017044:	f7f2 f974 	bl	8009330 <HAL_GPIO_WritePin>
  for (int i = 0; i < 10; i++);
 8017048:	2300      	movs	r3, #0
 801704a:	60fb      	str	r3, [r7, #12]
 801704c:	e002      	b.n	8017054 <SPIF_CsPin+0x2a>
 801704e:	68fb      	ldr	r3, [r7, #12]
 8017050:	3301      	adds	r3, #1
 8017052:	60fb      	str	r3, [r7, #12]
 8017054:	68fb      	ldr	r3, [r7, #12]
 8017056:	2b09      	cmp	r3, #9
 8017058:	ddf9      	ble.n	801704e <SPIF_CsPin+0x24>
}
 801705a:	bf00      	nop
 801705c:	bf00      	nop
 801705e:	3710      	adds	r7, #16
 8017060:	46bd      	mov	sp, r7
 8017062:	bd80      	pop	{r7, pc}

08017064 <SPIF_TransmitReceive>:

/***********************************************************************************************************/

bool SPIF_TransmitReceive(SPIF_HandleTypeDef *Handle, uint8_t *Tx, uint8_t *Rx, size_t Size, uint32_t Timeout)
{
 8017064:	b580      	push	{r7, lr}
 8017066:	b088      	sub	sp, #32
 8017068:	af02      	add	r7, sp, #8
 801706a:	60f8      	str	r0, [r7, #12]
 801706c:	60b9      	str	r1, [r7, #8]
 801706e:	607a      	str	r2, [r7, #4]
 8017070:	603b      	str	r3, [r7, #0]
  bool retVal = false;
 8017072:	2300      	movs	r3, #0
 8017074:	75fb      	strb	r3, [r7, #23]
#if (SPIF_PLATFORM == SPIF_PLATFORM_HAL)
  if (HAL_SPI_TransmitReceive(Handle->HSpi, Tx, Rx, Size, Timeout) == HAL_OK)
 8017076:	68fb      	ldr	r3, [r7, #12]
 8017078:	6818      	ldr	r0, [r3, #0]
 801707a:	683b      	ldr	r3, [r7, #0]
 801707c:	b29a      	uxth	r2, r3
 801707e:	6a3b      	ldr	r3, [r7, #32]
 8017080:	9300      	str	r3, [sp, #0]
 8017082:	4613      	mov	r3, r2
 8017084:	687a      	ldr	r2, [r7, #4]
 8017086:	68b9      	ldr	r1, [r7, #8]
 8017088:	f7f7 f9f9 	bl	800e47e <HAL_SPI_TransmitReceive>
 801708c:	4603      	mov	r3, r0
 801708e:	2b00      	cmp	r3, #0
 8017090:	d101      	bne.n	8017096 <SPIF_TransmitReceive+0x32>
  {
    retVal = true;
 8017092:	2301      	movs	r3, #1
 8017094:	75fb      	strb	r3, [r7, #23]
        break;
      }
    }
  }
#endif
  return retVal;
 8017096:	7dfb      	ldrb	r3, [r7, #23]
}
 8017098:	4618      	mov	r0, r3
 801709a:	3718      	adds	r7, #24
 801709c:	46bd      	mov	sp, r7
 801709e:	bd80      	pop	{r7, pc}

080170a0 <SPIF_Transmit>:

/***********************************************************************************************************/

bool SPIF_Transmit(SPIF_HandleTypeDef *Handle, uint8_t *Tx, size_t Size, uint32_t Timeout)
{
 80170a0:	b580      	push	{r7, lr}
 80170a2:	b086      	sub	sp, #24
 80170a4:	af00      	add	r7, sp, #0
 80170a6:	60f8      	str	r0, [r7, #12]
 80170a8:	60b9      	str	r1, [r7, #8]
 80170aa:	607a      	str	r2, [r7, #4]
 80170ac:	603b      	str	r3, [r7, #0]
  bool retVal = false;
 80170ae:	2300      	movs	r3, #0
 80170b0:	75fb      	strb	r3, [r7, #23]
#if (SPIF_PLATFORM == SPIF_PLATFORM_HAL)
  if (HAL_SPI_Transmit(Handle->HSpi, Tx, Size, Timeout) == HAL_OK)
 80170b2:	68fb      	ldr	r3, [r7, #12]
 80170b4:	6818      	ldr	r0, [r3, #0]
 80170b6:	687b      	ldr	r3, [r7, #4]
 80170b8:	b29a      	uxth	r2, r3
 80170ba:	683b      	ldr	r3, [r7, #0]
 80170bc:	68b9      	ldr	r1, [r7, #8]
 80170be:	f7f6 ff30 	bl	800df22 <HAL_SPI_Transmit>
 80170c2:	4603      	mov	r3, r0
 80170c4:	2b00      	cmp	r3, #0
 80170c6:	d101      	bne.n	80170cc <SPIF_Transmit+0x2c>
  {
    retVal = true;
 80170c8:	2301      	movs	r3, #1
 80170ca:	75fb      	strb	r3, [r7, #23]
        break;
      }
    }
  }
#endif
  return retVal;
 80170cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80170ce:	4618      	mov	r0, r3
 80170d0:	3718      	adds	r7, #24
 80170d2:	46bd      	mov	sp, r7
 80170d4:	bd80      	pop	{r7, pc}

080170d6 <SPIF_Receive>:

/***********************************************************************************************************/

bool SPIF_Receive(SPIF_HandleTypeDef *Handle, uint8_t *Rx, size_t Size, uint32_t Timeout)
{
 80170d6:	b580      	push	{r7, lr}
 80170d8:	b086      	sub	sp, #24
 80170da:	af00      	add	r7, sp, #0
 80170dc:	60f8      	str	r0, [r7, #12]
 80170de:	60b9      	str	r1, [r7, #8]
 80170e0:	607a      	str	r2, [r7, #4]
 80170e2:	603b      	str	r3, [r7, #0]
  bool retVal = false;
 80170e4:	2300      	movs	r3, #0
 80170e6:	75fb      	strb	r3, [r7, #23]
#if (SPIF_PLATFORM == SPIF_PLATFORM_HAL)
  if (HAL_SPI_Receive(Handle->HSpi, Rx, Size, Timeout) == HAL_OK)
 80170e8:	68fb      	ldr	r3, [r7, #12]
 80170ea:	6818      	ldr	r0, [r3, #0]
 80170ec:	687b      	ldr	r3, [r7, #4]
 80170ee:	b29a      	uxth	r2, r3
 80170f0:	683b      	ldr	r3, [r7, #0]
 80170f2:	68b9      	ldr	r1, [r7, #8]
 80170f4:	f7f7 f88b 	bl	800e20e <HAL_SPI_Receive>
 80170f8:	4603      	mov	r3, r0
 80170fa:	2b00      	cmp	r3, #0
 80170fc:	d101      	bne.n	8017102 <SPIF_Receive+0x2c>
  {
    retVal = true;
 80170fe:	2301      	movs	r3, #1
 8017100:	75fb      	strb	r3, [r7, #23]
        break;
      }
    }
  }
#endif
  return retVal;
 8017102:	7dfb      	ldrb	r3, [r7, #23]
}
 8017104:	4618      	mov	r0, r3
 8017106:	3718      	adds	r7, #24
 8017108:	46bd      	mov	sp, r7
 801710a:	bd80      	pop	{r7, pc}

0801710c <SPIF_WriteEnable>:

/***********************************************************************************************************/

bool SPIF_WriteEnable(SPIF_HandleTypeDef *Handle)
{
 801710c:	b580      	push	{r7, lr}
 801710e:	b084      	sub	sp, #16
 8017110:	af00      	add	r7, sp, #0
 8017112:	6078      	str	r0, [r7, #4]
  bool retVal = true;
 8017114:	2301      	movs	r3, #1
 8017116:	73fb      	strb	r3, [r7, #15]
  uint8_t tx[1] = {SPIF_CMD_WRITEENABLE};
 8017118:	2306      	movs	r3, #6
 801711a:	733b      	strb	r3, [r7, #12]
  SPIF_CsPin(Handle, 0);
 801711c:	2100      	movs	r1, #0
 801711e:	6878      	ldr	r0, [r7, #4]
 8017120:	f7ff ff83 	bl	801702a <SPIF_CsPin>
  if (SPIF_Transmit(Handle, tx, 1, 100) == false)
 8017124:	f107 010c 	add.w	r1, r7, #12
 8017128:	2364      	movs	r3, #100	@ 0x64
 801712a:	2201      	movs	r2, #1
 801712c:	6878      	ldr	r0, [r7, #4]
 801712e:	f7ff ffb7 	bl	80170a0 <SPIF_Transmit>
 8017132:	4603      	mov	r3, r0
 8017134:	f083 0301 	eor.w	r3, r3, #1
 8017138:	b2db      	uxtb	r3, r3
 801713a:	2b00      	cmp	r3, #0
 801713c:	d001      	beq.n	8017142 <SPIF_WriteEnable+0x36>
  {
    retVal = false;
 801713e:	2300      	movs	r3, #0
 8017140:	73fb      	strb	r3, [r7, #15]
    dprintf("SPIF_WriteEnable() Error\r\n");
  }
  SPIF_CsPin(Handle, 1);
 8017142:	2101      	movs	r1, #1
 8017144:	6878      	ldr	r0, [r7, #4]
 8017146:	f7ff ff70 	bl	801702a <SPIF_CsPin>
  return retVal;
 801714a:	7bfb      	ldrb	r3, [r7, #15]
}
 801714c:	4618      	mov	r0, r3
 801714e:	3710      	adds	r7, #16
 8017150:	46bd      	mov	sp, r7
 8017152:	bd80      	pop	{r7, pc}

08017154 <SPIF_WriteDisable>:

/***********************************************************************************************************/

bool SPIF_WriteDisable(SPIF_HandleTypeDef *Handle)
{
 8017154:	b580      	push	{r7, lr}
 8017156:	b084      	sub	sp, #16
 8017158:	af00      	add	r7, sp, #0
 801715a:	6078      	str	r0, [r7, #4]
  bool retVal = true;
 801715c:	2301      	movs	r3, #1
 801715e:	73fb      	strb	r3, [r7, #15]
  uint8_t tx[1] = {SPIF_CMD_WRITEDISABLE};
 8017160:	2304      	movs	r3, #4
 8017162:	733b      	strb	r3, [r7, #12]
  SPIF_CsPin(Handle, 0);
 8017164:	2100      	movs	r1, #0
 8017166:	6878      	ldr	r0, [r7, #4]
 8017168:	f7ff ff5f 	bl	801702a <SPIF_CsPin>
  if (SPIF_Transmit(Handle, tx, 1, 100) == false)
 801716c:	f107 010c 	add.w	r1, r7, #12
 8017170:	2364      	movs	r3, #100	@ 0x64
 8017172:	2201      	movs	r2, #1
 8017174:	6878      	ldr	r0, [r7, #4]
 8017176:	f7ff ff93 	bl	80170a0 <SPIF_Transmit>
 801717a:	4603      	mov	r3, r0
 801717c:	f083 0301 	eor.w	r3, r3, #1
 8017180:	b2db      	uxtb	r3, r3
 8017182:	2b00      	cmp	r3, #0
 8017184:	d001      	beq.n	801718a <SPIF_WriteDisable+0x36>
  {
    retVal = false;
 8017186:	2300      	movs	r3, #0
 8017188:	73fb      	strb	r3, [r7, #15]
    dprintf("SPIF_WriteDisable() Error\r\n");
  }
  SPIF_CsPin(Handle, 1);
 801718a:	2101      	movs	r1, #1
 801718c:	6878      	ldr	r0, [r7, #4]
 801718e:	f7ff ff4c 	bl	801702a <SPIF_CsPin>
  return retVal;
 8017192:	7bfb      	ldrb	r3, [r7, #15]
}
 8017194:	4618      	mov	r0, r3
 8017196:	3710      	adds	r7, #16
 8017198:	46bd      	mov	sp, r7
 801719a:	bd80      	pop	{r7, pc}

0801719c <SPIF_ReadReg1>:

/***********************************************************************************************************/

uint8_t SPIF_ReadReg1(SPIF_HandleTypeDef *Handle)
{
 801719c:	b580      	push	{r7, lr}
 801719e:	b086      	sub	sp, #24
 80171a0:	af02      	add	r7, sp, #8
 80171a2:	6078      	str	r0, [r7, #4]
  uint8_t retVal = 0;
 80171a4:	2300      	movs	r3, #0
 80171a6:	73fb      	strb	r3, [r7, #15]
  uint8_t tx[2] = {SPIF_CMD_READSTATUS1, SPIF_DUMMY_BYTE};
 80171a8:	f24a 5305 	movw	r3, #42245	@ 0xa505
 80171ac:	81bb      	strh	r3, [r7, #12]
  uint8_t rx[2];
  SPIF_CsPin(Handle, 0);
 80171ae:	2100      	movs	r1, #0
 80171b0:	6878      	ldr	r0, [r7, #4]
 80171b2:	f7ff ff3a 	bl	801702a <SPIF_CsPin>
  if (SPIF_TransmitReceive(Handle, tx, rx, 2, 100) == true)
 80171b6:	f107 0208 	add.w	r2, r7, #8
 80171ba:	f107 010c 	add.w	r1, r7, #12
 80171be:	2364      	movs	r3, #100	@ 0x64
 80171c0:	9300      	str	r3, [sp, #0]
 80171c2:	2302      	movs	r3, #2
 80171c4:	6878      	ldr	r0, [r7, #4]
 80171c6:	f7ff ff4d 	bl	8017064 <SPIF_TransmitReceive>
 80171ca:	4603      	mov	r3, r0
 80171cc:	2b00      	cmp	r3, #0
 80171ce:	d001      	beq.n	80171d4 <SPIF_ReadReg1+0x38>
  {
    retVal = rx[1];
 80171d0:	7a7b      	ldrb	r3, [r7, #9]
 80171d2:	73fb      	strb	r3, [r7, #15]
  }
  SPIF_CsPin(Handle, 1);
 80171d4:	2101      	movs	r1, #1
 80171d6:	6878      	ldr	r0, [r7, #4]
 80171d8:	f7ff ff27 	bl	801702a <SPIF_CsPin>
  return retVal;
 80171dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80171de:	4618      	mov	r0, r3
 80171e0:	3710      	adds	r7, #16
 80171e2:	46bd      	mov	sp, r7
 80171e4:	bd80      	pop	{r7, pc}

080171e6 <SPIF_WaitForWriting>:
}

/***********************************************************************************************************/

bool SPIF_WaitForWriting(SPIF_HandleTypeDef *Handle, uint32_t Timeout)
{
 80171e6:	b580      	push	{r7, lr}
 80171e8:	b084      	sub	sp, #16
 80171ea:	af00      	add	r7, sp, #0
 80171ec:	6078      	str	r0, [r7, #4]
 80171ee:	6039      	str	r1, [r7, #0]
  bool retVal = false;
 80171f0:	2300      	movs	r3, #0
 80171f2:	73fb      	strb	r3, [r7, #15]
  uint32_t startTime = HAL_GetTick();
 80171f4:	f7f0 f998 	bl	8007528 <HAL_GetTick>
 80171f8:	60b8      	str	r0, [r7, #8]
  while (1)
  {
    SPIF_Delay(1);
 80171fa:	2001      	movs	r0, #1
 80171fc:	f7ff feea 	bl	8016fd4 <SPIF_Delay>
    if (HAL_GetTick() - startTime >= Timeout)
 8017200:	f7f0 f992 	bl	8007528 <HAL_GetTick>
 8017204:	4602      	mov	r2, r0
 8017206:	68bb      	ldr	r3, [r7, #8]
 8017208:	1ad3      	subs	r3, r2, r3
 801720a:	683a      	ldr	r2, [r7, #0]
 801720c:	429a      	cmp	r2, r3
 801720e:	d90a      	bls.n	8017226 <SPIF_WaitForWriting+0x40>
    {
      dprintf("SPIF_WaitForWriting() TIMEOUT\r\n");
      break;
    }
    if ((SPIF_ReadReg1(Handle) & SPIF_STATUS1_BUSY) == 0)
 8017210:	6878      	ldr	r0, [r7, #4]
 8017212:	f7ff ffc3 	bl	801719c <SPIF_ReadReg1>
 8017216:	4603      	mov	r3, r0
 8017218:	f003 0301 	and.w	r3, r3, #1
 801721c:	2b00      	cmp	r3, #0
 801721e:	d1ec      	bne.n	80171fa <SPIF_WaitForWriting+0x14>
    {
      retVal = true;
 8017220:	2301      	movs	r3, #1
 8017222:	73fb      	strb	r3, [r7, #15]
      break;
 8017224:	e000      	b.n	8017228 <SPIF_WaitForWriting+0x42>
      break;
 8017226:	bf00      	nop
    }
  }
  return retVal;
 8017228:	7bfb      	ldrb	r3, [r7, #15]
}
 801722a:	4618      	mov	r0, r3
 801722c:	3710      	adds	r7, #16
 801722e:	46bd      	mov	sp, r7
 8017230:	bd80      	pop	{r7, pc}
	...

08017234 <SPIF_FindChip>:

/***********************************************************************************************************/

bool SPIF_FindChip(SPIF_HandleTypeDef *Handle)
{
 8017234:	b580      	push	{r7, lr}
 8017236:	b088      	sub	sp, #32
 8017238:	af02      	add	r7, sp, #8
 801723a:	6078      	str	r0, [r7, #4]
  uint8_t tx[4] = {SPIF_CMD_JEDECID, 0xFF, 0xFF, 0xFF};
 801723c:	f06f 0360 	mvn.w	r3, #96	@ 0x60
 8017240:	613b      	str	r3, [r7, #16]
  uint8_t rx[4];
  bool retVal = false;
 8017242:	2300      	movs	r3, #0
 8017244:	75fb      	strb	r3, [r7, #23]
  do
  {
    dprintf("SPIF_FindChip()\r\n");
    SPIF_CsPin(Handle, 0);
 8017246:	2100      	movs	r1, #0
 8017248:	6878      	ldr	r0, [r7, #4]
 801724a:	f7ff feee 	bl	801702a <SPIF_CsPin>
    if (SPIF_TransmitReceive(Handle, tx, rx, 4, 100) == false)
 801724e:	f107 020c 	add.w	r2, r7, #12
 8017252:	f107 0110 	add.w	r1, r7, #16
 8017256:	2364      	movs	r3, #100	@ 0x64
 8017258:	9300      	str	r3, [sp, #0]
 801725a:	2304      	movs	r3, #4
 801725c:	6878      	ldr	r0, [r7, #4]
 801725e:	f7ff ff01 	bl	8017064 <SPIF_TransmitReceive>
 8017262:	4603      	mov	r3, r0
 8017264:	f083 0301 	eor.w	r3, r3, #1
 8017268:	b2db      	uxtb	r3, r3
 801726a:	2b00      	cmp	r3, #0
 801726c:	d004      	beq.n	8017278 <SPIF_FindChip+0x44>
    {
      SPIF_CsPin(Handle, 1);
 801726e:	2101      	movs	r1, #1
 8017270:	6878      	ldr	r0, [r7, #4]
 8017272:	f7ff feda 	bl	801702a <SPIF_CsPin>
      break;
 8017276:	e16f      	b.n	8017558 <SPIF_FindChip+0x324>
    }
    SPIF_CsPin(Handle, 1);
 8017278:	2101      	movs	r1, #1
 801727a:	6878      	ldr	r0, [r7, #4]
 801727c:	f7ff fed5 	bl	801702a <SPIF_CsPin>
    dprintf("CHIP ID: 0x%02X%02X%02X\r\n", rx[1], rx[2], rx[3]);
    Handle->Manufactor = rx[1];
 8017280:	7b7a      	ldrb	r2, [r7, #13]
 8017282:	687b      	ldr	r3, [r7, #4]
 8017284:	721a      	strb	r2, [r3, #8]
    Handle->MemType = rx[2];
 8017286:	7bba      	ldrb	r2, [r7, #14]
 8017288:	687b      	ldr	r3, [r7, #4]
 801728a:	72da      	strb	r2, [r3, #11]
    Handle->Size = rx[3];
 801728c:	7bfa      	ldrb	r2, [r7, #15]
 801728e:	687b      	ldr	r3, [r7, #4]
 8017290:	725a      	strb	r2, [r3, #9]

    dprintf("SPIF MANUFACTURE: ");
    switch (Handle->Manufactor)
 8017292:	687b      	ldr	r3, [r7, #4]
 8017294:	7a1b      	ldrb	r3, [r3, #8]
 8017296:	2bef      	cmp	r3, #239	@ 0xef
 8017298:	f000 80f0 	beq.w	801747c <SPIF_FindChip+0x248>
 801729c:	2bef      	cmp	r3, #239	@ 0xef
 801729e:	f300 80e9 	bgt.w	8017474 <SPIF_FindChip+0x240>
 80172a2:	2bc8      	cmp	r3, #200	@ 0xc8
 80172a4:	f300 80e6 	bgt.w	8017474 <SPIF_FindChip+0x240>
 80172a8:	2b85      	cmp	r3, #133	@ 0x85
 80172aa:	da0c      	bge.n	80172c6 <SPIF_FindChip+0x92>
 80172ac:	2b62      	cmp	r3, #98	@ 0x62
 80172ae:	f000 80e7 	beq.w	8017480 <SPIF_FindChip+0x24c>
 80172b2:	2b62      	cmp	r3, #98	@ 0x62
 80172b4:	f300 80de 	bgt.w	8017474 <SPIF_FindChip+0x240>
 80172b8:	2b20      	cmp	r3, #32
 80172ba:	f300 80d9 	bgt.w	8017470 <SPIF_FindChip+0x23c>
 80172be:	2b00      	cmp	r3, #0
 80172c0:	f300 8090 	bgt.w	80173e4 <SPIF_FindChip+0x1b0>
 80172c4:	e0d6      	b.n	8017474 <SPIF_FindChip+0x240>
 80172c6:	3b85      	subs	r3, #133	@ 0x85
 80172c8:	2b43      	cmp	r3, #67	@ 0x43
 80172ca:	f200 80d3 	bhi.w	8017474 <SPIF_FindChip+0x240>
 80172ce:	a201      	add	r2, pc, #4	@ (adr r2, 80172d4 <SPIF_FindChip+0xa0>)
 80172d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80172d4:	08017485 	.word	0x08017485
 80172d8:	08017475 	.word	0x08017475
 80172dc:	08017475 	.word	0x08017475
 80172e0:	08017475 	.word	0x08017475
 80172e4:	08017485 	.word	0x08017485
 80172e8:	08017475 	.word	0x08017475
 80172ec:	08017475 	.word	0x08017475
 80172f0:	08017485 	.word	0x08017485
 80172f4:	08017475 	.word	0x08017475
 80172f8:	08017475 	.word	0x08017475
 80172fc:	08017475 	.word	0x08017475
 8017300:	08017475 	.word	0x08017475
 8017304:	08017475 	.word	0x08017475
 8017308:	08017475 	.word	0x08017475
 801730c:	08017475 	.word	0x08017475
 8017310:	08017475 	.word	0x08017475
 8017314:	08017475 	.word	0x08017475
 8017318:	08017475 	.word	0x08017475
 801731c:	08017475 	.word	0x08017475
 8017320:	08017475 	.word	0x08017475
 8017324:	08017475 	.word	0x08017475
 8017328:	08017475 	.word	0x08017475
 801732c:	08017475 	.word	0x08017475
 8017330:	08017475 	.word	0x08017475
 8017334:	08017485 	.word	0x08017485
 8017338:	08017475 	.word	0x08017475
 801733c:	08017475 	.word	0x08017475
 8017340:	08017475 	.word	0x08017475
 8017344:	08017485 	.word	0x08017485
 8017348:	08017475 	.word	0x08017475
 801734c:	08017475 	.word	0x08017475
 8017350:	08017475 	.word	0x08017475
 8017354:	08017475 	.word	0x08017475
 8017358:	08017475 	.word	0x08017475
 801735c:	08017475 	.word	0x08017475
 8017360:	08017475 	.word	0x08017475
 8017364:	08017475 	.word	0x08017475
 8017368:	08017475 	.word	0x08017475
 801736c:	08017475 	.word	0x08017475
 8017370:	08017475 	.word	0x08017475
 8017374:	08017485 	.word	0x08017485
 8017378:	08017475 	.word	0x08017475
 801737c:	08017475 	.word	0x08017475
 8017380:	08017475 	.word	0x08017475
 8017384:	08017475 	.word	0x08017475
 8017388:	08017475 	.word	0x08017475
 801738c:	08017475 	.word	0x08017475
 8017390:	08017475 	.word	0x08017475
 8017394:	08017475 	.word	0x08017475
 8017398:	08017475 	.word	0x08017475
 801739c:	08017475 	.word	0x08017475
 80173a0:	08017475 	.word	0x08017475
 80173a4:	08017475 	.word	0x08017475
 80173a8:	08017475 	.word	0x08017475
 80173ac:	08017475 	.word	0x08017475
 80173b0:	08017475 	.word	0x08017475
 80173b4:	08017475 	.word	0x08017475
 80173b8:	08017475 	.word	0x08017475
 80173bc:	08017485 	.word	0x08017485
 80173c0:	08017475 	.word	0x08017475
 80173c4:	08017475 	.word	0x08017475
 80173c8:	08017485 	.word	0x08017485
 80173cc:	08017475 	.word	0x08017475
 80173d0:	08017475 	.word	0x08017475
 80173d4:	08017475 	.word	0x08017475
 80173d8:	08017475 	.word	0x08017475
 80173dc:	08017475 	.word	0x08017475
 80173e0:	08017485 	.word	0x08017485
 80173e4:	3b01      	subs	r3, #1
 80173e6:	2b1f      	cmp	r3, #31
 80173e8:	d844      	bhi.n	8017474 <SPIF_FindChip+0x240>
 80173ea:	a201      	add	r2, pc, #4	@ (adr r2, 80173f0 <SPIF_FindChip+0x1bc>)
 80173ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80173f0:	08017489 	.word	0x08017489
 80173f4:	08017475 	.word	0x08017475
 80173f8:	08017475 	.word	0x08017475
 80173fc:	08017489 	.word	0x08017489
 8017400:	08017475 	.word	0x08017475
 8017404:	08017475 	.word	0x08017475
 8017408:	08017475 	.word	0x08017475
 801740c:	08017475 	.word	0x08017475
 8017410:	08017475 	.word	0x08017475
 8017414:	08017475 	.word	0x08017475
 8017418:	08017475 	.word	0x08017475
 801741c:	08017475 	.word	0x08017475
 8017420:	08017475 	.word	0x08017475
 8017424:	08017475 	.word	0x08017475
 8017428:	08017475 	.word	0x08017475
 801742c:	08017475 	.word	0x08017475
 8017430:	08017475 	.word	0x08017475
 8017434:	08017475 	.word	0x08017475
 8017438:	08017475 	.word	0x08017475
 801743c:	08017475 	.word	0x08017475
 8017440:	08017475 	.word	0x08017475
 8017444:	08017475 	.word	0x08017475
 8017448:	08017475 	.word	0x08017475
 801744c:	08017475 	.word	0x08017475
 8017450:	08017475 	.word	0x08017475
 8017454:	08017475 	.word	0x08017475
 8017458:	08017475 	.word	0x08017475
 801745c:	08017489 	.word	0x08017489
 8017460:	08017475 	.word	0x08017475
 8017464:	08017475 	.word	0x08017475
 8017468:	08017475 	.word	0x08017475
 801746c:	08017489 	.word	0x08017489
 8017470:	2b37      	cmp	r3, #55	@ 0x37
 8017472:	d00b      	beq.n	801748c <SPIF_FindChip+0x258>
      break;
    case SPIF_MANUFACTOR_PUYA:
      dprintf("PUYA");
      break;
    default:
      Handle->Manufactor = SPIF_MANUFACTOR_ERROR;
 8017474:	687b      	ldr	r3, [r7, #4]
 8017476:	2200      	movs	r2, #0
 8017478:	721a      	strb	r2, [r3, #8]
      dprintf("ERROR");
      break;
 801747a:	e008      	b.n	801748e <SPIF_FindChip+0x25a>
      break;
 801747c:	bf00      	nop
 801747e:	e006      	b.n	801748e <SPIF_FindChip+0x25a>
      break;
 8017480:	bf00      	nop
 8017482:	e004      	b.n	801748e <SPIF_FindChip+0x25a>
      break;
 8017484:	bf00      	nop
 8017486:	e002      	b.n	801748e <SPIF_FindChip+0x25a>
      break;
 8017488:	bf00      	nop
 801748a:	e000      	b.n	801748e <SPIF_FindChip+0x25a>
      break;
 801748c:	bf00      	nop
    }
    dprintf(" - MEMTYPE: 0x%02X", Handle->MemType);
    dprintf(" - SIZE: ");
    switch (Handle->Size)
 801748e:	687b      	ldr	r3, [r7, #4]
 8017490:	7a5b      	ldrb	r3, [r3, #9]
 8017492:	3b11      	subs	r3, #17
 8017494:	2b0f      	cmp	r3, #15
 8017496:	d84e      	bhi.n	8017536 <SPIF_FindChip+0x302>
 8017498:	a201      	add	r2, pc, #4	@ (adr r2, 80174a0 <SPIF_FindChip+0x26c>)
 801749a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801749e:	bf00      	nop
 80174a0:	080174e1 	.word	0x080174e1
 80174a4:	080174e9 	.word	0x080174e9
 80174a8:	080174f1 	.word	0x080174f1
 80174ac:	080174f9 	.word	0x080174f9
 80174b0:	08017501 	.word	0x08017501
 80174b4:	08017509 	.word	0x08017509
 80174b8:	08017511 	.word	0x08017511
 80174bc:	08017519 	.word	0x08017519
 80174c0:	08017523 	.word	0x08017523
 80174c4:	08017537 	.word	0x08017537
 80174c8:	08017537 	.word	0x08017537
 80174cc:	08017537 	.word	0x08017537
 80174d0:	08017537 	.word	0x08017537
 80174d4:	08017537 	.word	0x08017537
 80174d8:	08017537 	.word	0x08017537
 80174dc:	0801752d 	.word	0x0801752d
    {
    case SPIF_SIZE_1MBIT:
      Handle->BlockCnt = 2;
 80174e0:	687b      	ldr	r3, [r7, #4]
 80174e2:	2202      	movs	r2, #2
 80174e4:	61da      	str	r2, [r3, #28]
      dprintf("1 MBIT\r\n");
      break;
 80174e6:	e02a      	b.n	801753e <SPIF_FindChip+0x30a>
    case SPIF_SIZE_2MBIT:
      Handle->BlockCnt = 4;
 80174e8:	687b      	ldr	r3, [r7, #4]
 80174ea:	2204      	movs	r2, #4
 80174ec:	61da      	str	r2, [r3, #28]
      dprintf("2 MBIT\r\n");
      break;
 80174ee:	e026      	b.n	801753e <SPIF_FindChip+0x30a>
    case SPIF_SIZE_4MBIT:
      Handle->BlockCnt = 8;
 80174f0:	687b      	ldr	r3, [r7, #4]
 80174f2:	2208      	movs	r2, #8
 80174f4:	61da      	str	r2, [r3, #28]
      dprintf("4 MBIT\r\n");
      break;
 80174f6:	e022      	b.n	801753e <SPIF_FindChip+0x30a>
    case SPIF_SIZE_8MBIT:
      Handle->BlockCnt = 16;
 80174f8:	687b      	ldr	r3, [r7, #4]
 80174fa:	2210      	movs	r2, #16
 80174fc:	61da      	str	r2, [r3, #28]
      dprintf("8 MBIT\r\n");
      break;
 80174fe:	e01e      	b.n	801753e <SPIF_FindChip+0x30a>
    case SPIF_SIZE_16MBIT:
      Handle->BlockCnt = 32;
 8017500:	687b      	ldr	r3, [r7, #4]
 8017502:	2220      	movs	r2, #32
 8017504:	61da      	str	r2, [r3, #28]
      dprintf("16 MBIT\r\n");
      break;
 8017506:	e01a      	b.n	801753e <SPIF_FindChip+0x30a>
    case SPIF_SIZE_32MBIT:
      Handle->BlockCnt = 64;
 8017508:	687b      	ldr	r3, [r7, #4]
 801750a:	2240      	movs	r2, #64	@ 0x40
 801750c:	61da      	str	r2, [r3, #28]
      dprintf("32 MBIT\r\n");
      break;
 801750e:	e016      	b.n	801753e <SPIF_FindChip+0x30a>
    case SPIF_SIZE_64MBIT:
      Handle->BlockCnt = 128;
 8017510:	687b      	ldr	r3, [r7, #4]
 8017512:	2280      	movs	r2, #128	@ 0x80
 8017514:	61da      	str	r2, [r3, #28]
      dprintf("64 MBIT\r\n");
      break;
 8017516:	e012      	b.n	801753e <SPIF_FindChip+0x30a>
    case SPIF_SIZE_128MBIT:
      Handle->BlockCnt = 256;
 8017518:	687b      	ldr	r3, [r7, #4]
 801751a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801751e:	61da      	str	r2, [r3, #28]
      dprintf("128 MBIT\r\n");
      break;
 8017520:	e00d      	b.n	801753e <SPIF_FindChip+0x30a>
    case SPIF_SIZE_256MBIT:
      Handle->BlockCnt = 512;
 8017522:	687b      	ldr	r3, [r7, #4]
 8017524:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8017528:	61da      	str	r2, [r3, #28]
      dprintf("256 MBIT\r\n");
      break;
 801752a:	e008      	b.n	801753e <SPIF_FindChip+0x30a>
    case SPIF_SIZE_512MBIT:
      Handle->BlockCnt = 1024;
 801752c:	687b      	ldr	r3, [r7, #4]
 801752e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8017532:	61da      	str	r2, [r3, #28]
      dprintf("512 MBIT\r\n");
      break;
 8017534:	e003      	b.n	801753e <SPIF_FindChip+0x30a>
    default:
      Handle->Size = SPIF_SIZE_ERROR;
 8017536:	687b      	ldr	r3, [r7, #4]
 8017538:	2200      	movs	r2, #0
 801753a:	725a      	strb	r2, [r3, #9]
      dprintf("ERROR\r\n");
      break;
 801753c:	bf00      	nop
    }

    Handle->SectorCnt = Handle->BlockCnt * 16;
 801753e:	687b      	ldr	r3, [r7, #4]
 8017540:	69db      	ldr	r3, [r3, #28]
 8017542:	011a      	lsls	r2, r3, #4
 8017544:	687b      	ldr	r3, [r7, #4]
 8017546:	619a      	str	r2, [r3, #24]
    Handle->PageCnt = (Handle->SectorCnt * SPIF_SECTOR_SIZE) / SPIF_PAGE_SIZE;
 8017548:	687b      	ldr	r3, [r7, #4]
 801754a:	699b      	ldr	r3, [r3, #24]
 801754c:	031b      	lsls	r3, r3, #12
 801754e:	0a1a      	lsrs	r2, r3, #8
 8017550:	687b      	ldr	r3, [r7, #4]
 8017552:	615a      	str	r2, [r3, #20]
    dprintf("SPIF SECTOR CNT: %ld\r\n", Handle->SectorCnt);
    dprintf("SPIF PAGE CNT: %ld\r\n", Handle->PageCnt);
    dprintf("SPIF STATUS1: 0x%02X\r\n", SPIF_ReadReg1(Handle));
    dprintf("SPIF STATUS2: 0x%02X\r\n", SPIF_ReadReg2(Handle));
    dprintf("SPIF STATUS3: 0x%02X\r\n", SPIF_ReadReg3(Handle));
    retVal = true;
 8017554:	2301      	movs	r3, #1
 8017556:	75fb      	strb	r3, [r7, #23]

  } while (0);

  return retVal;
 8017558:	7dfb      	ldrb	r3, [r7, #23]
}
 801755a:	4618      	mov	r0, r3
 801755c:	3718      	adds	r7, #24
 801755e:	46bd      	mov	sp, r7
 8017560:	bd80      	pop	{r7, pc}
 8017562:	bf00      	nop

08017564 <SPIF_WriteFn>:

/***********************************************************************************************************/

bool SPIF_WriteFn(SPIF_HandleTypeDef *Handle, uint32_t PageNumber, uint8_t *Data, uint32_t Size, uint32_t Offset)
{
 8017564:	b580      	push	{r7, lr}
 8017566:	b08a      	sub	sp, #40	@ 0x28
 8017568:	af00      	add	r7, sp, #0
 801756a:	60f8      	str	r0, [r7, #12]
 801756c:	60b9      	str	r1, [r7, #8]
 801756e:	607a      	str	r2, [r7, #4]
 8017570:	603b      	str	r3, [r7, #0]
  bool retVal = false;
 8017572:	2300      	movs	r3, #0
 8017574:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t address = 0, maximum = SPIF_PAGE_SIZE - Offset;
 8017578:	2300      	movs	r3, #0
 801757a:	623b      	str	r3, [r7, #32]
 801757c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801757e:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8017582:	61fb      	str	r3, [r7, #28]
  {
#if SPIF_DEBUG != SPIF_DEBUG_DISABLE
    uint32_t dbgTime = HAL_GetTick();
#endif
    dprintf("SPIF_WritePage() START PAGE %ld\r\n", PageNumber);
    if (PageNumber >= Handle->PageCnt)
 8017584:	68fb      	ldr	r3, [r7, #12]
 8017586:	695b      	ldr	r3, [r3, #20]
 8017588:	68ba      	ldr	r2, [r7, #8]
 801758a:	429a      	cmp	r2, r3
 801758c:	f080 8084 	bcs.w	8017698 <SPIF_WriteFn+0x134>
    {
      dprintf("SPIF_WritePage() ERROR PageNumber\r\n");
      break;
    }
    if (Offset >= SPIF_PAGE_SIZE)
 8017590:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017592:	2bff      	cmp	r3, #255	@ 0xff
 8017594:	f200 8082 	bhi.w	801769c <SPIF_WriteFn+0x138>
    {
      dprintf("SPIF_WritePage() ERROR Offset\r\n");
      break;
    }
    if (Size > maximum)
 8017598:	683a      	ldr	r2, [r7, #0]
 801759a:	69fb      	ldr	r3, [r7, #28]
 801759c:	429a      	cmp	r2, r3
 801759e:	d901      	bls.n	80175a4 <SPIF_WriteFn+0x40>
    {
      Size = maximum;
 80175a0:	69fb      	ldr	r3, [r7, #28]
 80175a2:	603b      	str	r3, [r7, #0]
    }
    address = SPIF_PageToAddress(PageNumber) + Offset;
 80175a4:	68bb      	ldr	r3, [r7, #8]
 80175a6:	021b      	lsls	r3, r3, #8
 80175a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80175aa:	4413      	add	r3, r2
 80175ac:	623b      	str	r3, [r7, #32]
        }
        dprintf(", 0x%02X", Data[i]);
      }
      dprintf("\r\n}\r\n");
#endif
    if (SPIF_WriteEnable(Handle) == false)
 80175ae:	68f8      	ldr	r0, [r7, #12]
 80175b0:	f7ff fdac 	bl	801710c <SPIF_WriteEnable>
 80175b4:	4603      	mov	r3, r0
 80175b6:	f083 0301 	eor.w	r3, r3, #1
 80175ba:	b2db      	uxtb	r3, r3
 80175bc:	2b00      	cmp	r3, #0
 80175be:	d16f      	bne.n	80176a0 <SPIF_WriteFn+0x13c>
    {
      break;
    }
    SPIF_CsPin(Handle, 0);
 80175c0:	2100      	movs	r1, #0
 80175c2:	68f8      	ldr	r0, [r7, #12]
 80175c4:	f7ff fd31 	bl	801702a <SPIF_CsPin>
    if (Handle->BlockCnt >= 512)
 80175c8:	68fb      	ldr	r3, [r7, #12]
 80175ca:	69db      	ldr	r3, [r3, #28]
 80175cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80175d0:	d322      	bcc.n	8017618 <SPIF_WriteFn+0xb4>
    {
      tx[0] = SPIF_CMD_PAGEPROG4ADD;
 80175d2:	2312      	movs	r3, #18
 80175d4:	753b      	strb	r3, [r7, #20]
      tx[1] = (address & 0xFF000000) >> 24;
 80175d6:	6a3b      	ldr	r3, [r7, #32]
 80175d8:	0e1b      	lsrs	r3, r3, #24
 80175da:	b2db      	uxtb	r3, r3
 80175dc:	757b      	strb	r3, [r7, #21]
      tx[2] = (address & 0x00FF0000) >> 16;
 80175de:	6a3b      	ldr	r3, [r7, #32]
 80175e0:	0c1b      	lsrs	r3, r3, #16
 80175e2:	b2db      	uxtb	r3, r3
 80175e4:	75bb      	strb	r3, [r7, #22]
      tx[3] = (address & 0x0000FF00) >> 8;
 80175e6:	6a3b      	ldr	r3, [r7, #32]
 80175e8:	0a1b      	lsrs	r3, r3, #8
 80175ea:	b2db      	uxtb	r3, r3
 80175ec:	75fb      	strb	r3, [r7, #23]
      tx[4] = (address & 0x000000FF);
 80175ee:	6a3b      	ldr	r3, [r7, #32]
 80175f0:	b2db      	uxtb	r3, r3
 80175f2:	763b      	strb	r3, [r7, #24]
      if (SPIF_Transmit(Handle, tx, 5, 100) == false)
 80175f4:	f107 0114 	add.w	r1, r7, #20
 80175f8:	2364      	movs	r3, #100	@ 0x64
 80175fa:	2205      	movs	r2, #5
 80175fc:	68f8      	ldr	r0, [r7, #12]
 80175fe:	f7ff fd4f 	bl	80170a0 <SPIF_Transmit>
 8017602:	4603      	mov	r3, r0
 8017604:	f083 0301 	eor.w	r3, r3, #1
 8017608:	b2db      	uxtb	r3, r3
 801760a:	2b00      	cmp	r3, #0
 801760c:	d023      	beq.n	8017656 <SPIF_WriteFn+0xf2>
      {
        SPIF_CsPin(Handle, 1);
 801760e:	2101      	movs	r1, #1
 8017610:	68f8      	ldr	r0, [r7, #12]
 8017612:	f7ff fd0a 	bl	801702a <SPIF_CsPin>
        break;
 8017616:	e044      	b.n	80176a2 <SPIF_WriteFn+0x13e>
      }
    }
    else
    {
      tx[0] = SPIF_CMD_PAGEPROG3ADD;
 8017618:	2302      	movs	r3, #2
 801761a:	753b      	strb	r3, [r7, #20]
      tx[1] = (address & 0x00FF0000) >> 16;
 801761c:	6a3b      	ldr	r3, [r7, #32]
 801761e:	0c1b      	lsrs	r3, r3, #16
 8017620:	b2db      	uxtb	r3, r3
 8017622:	757b      	strb	r3, [r7, #21]
      tx[2] = (address & 0x0000FF00) >> 8;
 8017624:	6a3b      	ldr	r3, [r7, #32]
 8017626:	0a1b      	lsrs	r3, r3, #8
 8017628:	b2db      	uxtb	r3, r3
 801762a:	75bb      	strb	r3, [r7, #22]
      tx[3] = (address & 0x000000FF);
 801762c:	6a3b      	ldr	r3, [r7, #32]
 801762e:	b2db      	uxtb	r3, r3
 8017630:	75fb      	strb	r3, [r7, #23]
      if (SPIF_Transmit(Handle, tx, 4, 100) == false)
 8017632:	f107 0114 	add.w	r1, r7, #20
 8017636:	2364      	movs	r3, #100	@ 0x64
 8017638:	2204      	movs	r2, #4
 801763a:	68f8      	ldr	r0, [r7, #12]
 801763c:	f7ff fd30 	bl	80170a0 <SPIF_Transmit>
 8017640:	4603      	mov	r3, r0
 8017642:	f083 0301 	eor.w	r3, r3, #1
 8017646:	b2db      	uxtb	r3, r3
 8017648:	2b00      	cmp	r3, #0
 801764a:	d004      	beq.n	8017656 <SPIF_WriteFn+0xf2>
      {
        SPIF_CsPin(Handle, 1);
 801764c:	2101      	movs	r1, #1
 801764e:	68f8      	ldr	r0, [r7, #12]
 8017650:	f7ff fceb 	bl	801702a <SPIF_CsPin>
        break;
 8017654:	e025      	b.n	80176a2 <SPIF_WriteFn+0x13e>
      }
    }
    if (SPIF_Transmit(Handle, Data, Size, 1000) == false)
 8017656:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801765a:	683a      	ldr	r2, [r7, #0]
 801765c:	6879      	ldr	r1, [r7, #4]
 801765e:	68f8      	ldr	r0, [r7, #12]
 8017660:	f7ff fd1e 	bl	80170a0 <SPIF_Transmit>
 8017664:	4603      	mov	r3, r0
 8017666:	f083 0301 	eor.w	r3, r3, #1
 801766a:	b2db      	uxtb	r3, r3
 801766c:	2b00      	cmp	r3, #0
 801766e:	d004      	beq.n	801767a <SPIF_WriteFn+0x116>
    {
      SPIF_CsPin(Handle, 1);
 8017670:	2101      	movs	r1, #1
 8017672:	68f8      	ldr	r0, [r7, #12]
 8017674:	f7ff fcd9 	bl	801702a <SPIF_CsPin>
      break;
 8017678:	e013      	b.n	80176a2 <SPIF_WriteFn+0x13e>
    }
    SPIF_CsPin(Handle, 1);
 801767a:	2101      	movs	r1, #1
 801767c:	68f8      	ldr	r0, [r7, #12]
 801767e:	f7ff fcd4 	bl	801702a <SPIF_CsPin>
    if (SPIF_WaitForWriting(Handle, 100))
 8017682:	2164      	movs	r1, #100	@ 0x64
 8017684:	68f8      	ldr	r0, [r7, #12]
 8017686:	f7ff fdae 	bl	80171e6 <SPIF_WaitForWriting>
 801768a:	4603      	mov	r3, r0
 801768c:	2b00      	cmp	r3, #0
 801768e:	d008      	beq.n	80176a2 <SPIF_WriteFn+0x13e>
    {
      dprintf("SPIF_WritePage() %d BYTES WITERN DONE AFTER %ld ms\r\n", (uint16_t)Size, HAL_GetTick() - dbgTime);
      retVal = true;
 8017690:	2301      	movs	r3, #1
 8017692:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8017696:	e004      	b.n	80176a2 <SPIF_WriteFn+0x13e>
      break;
 8017698:	bf00      	nop
 801769a:	e002      	b.n	80176a2 <SPIF_WriteFn+0x13e>
      break;
 801769c:	bf00      	nop
 801769e:	e000      	b.n	80176a2 <SPIF_WriteFn+0x13e>
      break;
 80176a0:	bf00      	nop
    }

  } while (0);

  SPIF_WriteDisable(Handle);
 80176a2:	68f8      	ldr	r0, [r7, #12]
 80176a4:	f7ff fd56 	bl	8017154 <SPIF_WriteDisable>
  return retVal;
 80176a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80176ac:	4618      	mov	r0, r3
 80176ae:	3728      	adds	r7, #40	@ 0x28
 80176b0:	46bd      	mov	sp, r7
 80176b2:	bd80      	pop	{r7, pc}

080176b4 <SPIF_ReadFn>:

/***********************************************************************************************************/

bool SPIF_ReadFn(SPIF_HandleTypeDef *Handle, uint32_t Address, uint8_t *Data, uint32_t Size)
{
 80176b4:	b580      	push	{r7, lr}
 80176b6:	b086      	sub	sp, #24
 80176b8:	af00      	add	r7, sp, #0
 80176ba:	60f8      	str	r0, [r7, #12]
 80176bc:	60b9      	str	r1, [r7, #8]
 80176be:	607a      	str	r2, [r7, #4]
 80176c0:	603b      	str	r3, [r7, #0]
  bool retVal = false;
 80176c2:	2300      	movs	r3, #0
 80176c4:	75fb      	strb	r3, [r7, #23]
  {
#if SPIF_DEBUG != SPIF_DEBUG_DISABLE
    uint32_t dbgTime = HAL_GetTick();
#endif
    dprintf("SPIF_ReadAddress() START ADDRESS %ld\r\n", Address);
    SPIF_CsPin(Handle, 0);
 80176c6:	2100      	movs	r1, #0
 80176c8:	68f8      	ldr	r0, [r7, #12]
 80176ca:	f7ff fcae 	bl	801702a <SPIF_CsPin>
    if (Handle->BlockCnt >= 512)
 80176ce:	68fb      	ldr	r3, [r7, #12]
 80176d0:	69db      	ldr	r3, [r3, #28]
 80176d2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80176d6:	d322      	bcc.n	801771e <SPIF_ReadFn+0x6a>
    {
      tx[0] = SPIF_CMD_READDATA4ADD;
 80176d8:	2313      	movs	r3, #19
 80176da:	743b      	strb	r3, [r7, #16]
      tx[1] = (Address & 0xFF000000) >> 24;
 80176dc:	68bb      	ldr	r3, [r7, #8]
 80176de:	0e1b      	lsrs	r3, r3, #24
 80176e0:	b2db      	uxtb	r3, r3
 80176e2:	747b      	strb	r3, [r7, #17]
      tx[2] = (Address & 0x00FF0000) >> 16;
 80176e4:	68bb      	ldr	r3, [r7, #8]
 80176e6:	0c1b      	lsrs	r3, r3, #16
 80176e8:	b2db      	uxtb	r3, r3
 80176ea:	74bb      	strb	r3, [r7, #18]
      tx[3] = (Address & 0x0000FF00) >> 8;
 80176ec:	68bb      	ldr	r3, [r7, #8]
 80176ee:	0a1b      	lsrs	r3, r3, #8
 80176f0:	b2db      	uxtb	r3, r3
 80176f2:	74fb      	strb	r3, [r7, #19]
      tx[4] = (Address & 0x000000FF);
 80176f4:	68bb      	ldr	r3, [r7, #8]
 80176f6:	b2db      	uxtb	r3, r3
 80176f8:	753b      	strb	r3, [r7, #20]
      if (SPIF_Transmit(Handle, tx, 5, 100) == false)
 80176fa:	f107 0110 	add.w	r1, r7, #16
 80176fe:	2364      	movs	r3, #100	@ 0x64
 8017700:	2205      	movs	r2, #5
 8017702:	68f8      	ldr	r0, [r7, #12]
 8017704:	f7ff fccc 	bl	80170a0 <SPIF_Transmit>
 8017708:	4603      	mov	r3, r0
 801770a:	f083 0301 	eor.w	r3, r3, #1
 801770e:	b2db      	uxtb	r3, r3
 8017710:	2b00      	cmp	r3, #0
 8017712:	d023      	beq.n	801775c <SPIF_ReadFn+0xa8>
      {
        SPIF_CsPin(Handle, 1);
 8017714:	2101      	movs	r1, #1
 8017716:	68f8      	ldr	r0, [r7, #12]
 8017718:	f7ff fc87 	bl	801702a <SPIF_CsPin>
        break;
 801771c:	e036      	b.n	801778c <SPIF_ReadFn+0xd8>
      }
    }
    else
    {
      tx[0] = SPIF_CMD_READDATA3ADD;
 801771e:	2303      	movs	r3, #3
 8017720:	743b      	strb	r3, [r7, #16]
      tx[1] = (Address & 0x00FF0000) >> 16;
 8017722:	68bb      	ldr	r3, [r7, #8]
 8017724:	0c1b      	lsrs	r3, r3, #16
 8017726:	b2db      	uxtb	r3, r3
 8017728:	747b      	strb	r3, [r7, #17]
      tx[2] = (Address & 0x0000FF00) >> 8;
 801772a:	68bb      	ldr	r3, [r7, #8]
 801772c:	0a1b      	lsrs	r3, r3, #8
 801772e:	b2db      	uxtb	r3, r3
 8017730:	74bb      	strb	r3, [r7, #18]
      tx[3] = (Address & 0x000000FF);
 8017732:	68bb      	ldr	r3, [r7, #8]
 8017734:	b2db      	uxtb	r3, r3
 8017736:	74fb      	strb	r3, [r7, #19]
      if (SPIF_Transmit(Handle, tx, 4, 100) == false)
 8017738:	f107 0110 	add.w	r1, r7, #16
 801773c:	2364      	movs	r3, #100	@ 0x64
 801773e:	2204      	movs	r2, #4
 8017740:	68f8      	ldr	r0, [r7, #12]
 8017742:	f7ff fcad 	bl	80170a0 <SPIF_Transmit>
 8017746:	4603      	mov	r3, r0
 8017748:	f083 0301 	eor.w	r3, r3, #1
 801774c:	b2db      	uxtb	r3, r3
 801774e:	2b00      	cmp	r3, #0
 8017750:	d004      	beq.n	801775c <SPIF_ReadFn+0xa8>
      {
        SPIF_CsPin(Handle, 1);
 8017752:	2101      	movs	r1, #1
 8017754:	68f8      	ldr	r0, [r7, #12]
 8017756:	f7ff fc68 	bl	801702a <SPIF_CsPin>
        break;
 801775a:	e017      	b.n	801778c <SPIF_ReadFn+0xd8>
      }
    }
    if (SPIF_Receive(Handle, Data, Size, 2000) == false)
 801775c:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8017760:	683a      	ldr	r2, [r7, #0]
 8017762:	6879      	ldr	r1, [r7, #4]
 8017764:	68f8      	ldr	r0, [r7, #12]
 8017766:	f7ff fcb6 	bl	80170d6 <SPIF_Receive>
 801776a:	4603      	mov	r3, r0
 801776c:	f083 0301 	eor.w	r3, r3, #1
 8017770:	b2db      	uxtb	r3, r3
 8017772:	2b00      	cmp	r3, #0
 8017774:	d004      	beq.n	8017780 <SPIF_ReadFn+0xcc>
    {
      SPIF_CsPin(Handle, 1);
 8017776:	2101      	movs	r1, #1
 8017778:	68f8      	ldr	r0, [r7, #12]
 801777a:	f7ff fc56 	bl	801702a <SPIF_CsPin>
      break;
 801777e:	e005      	b.n	801778c <SPIF_ReadFn+0xd8>
    }
    SPIF_CsPin(Handle, 1);
 8017780:	2101      	movs	r1, #1
 8017782:	68f8      	ldr	r0, [r7, #12]
 8017784:	f7ff fc51 	bl	801702a <SPIF_CsPin>
      }
      dprintf(", 0x%02X", Data[i]);
    }
    dprintf("\r\n}\r\n");
#endif
    retVal = true;
 8017788:	2301      	movs	r3, #1
 801778a:	75fb      	strb	r3, [r7, #23]

  } while (0);

  return retVal;
 801778c:	7dfb      	ldrb	r3, [r7, #23]
}
 801778e:	4618      	mov	r0, r3
 8017790:	3718      	adds	r7, #24
 8017792:	46bd      	mov	sp, r7
 8017794:	bd80      	pop	{r7, pc}

08017796 <SPIF_Init>:
  * @param  Pin: Pin of CS
  *
  * @retval bool: true or false
  */
bool SPIF_Init(SPIF_HandleTypeDef *Handle, SPI_HandleTypeDef *HSpi, GPIO_TypeDef *Gpio, uint16_t Pin)
{
 8017796:	b580      	push	{r7, lr}
 8017798:	b086      	sub	sp, #24
 801779a:	af00      	add	r7, sp, #0
 801779c:	60f8      	str	r0, [r7, #12]
 801779e:	60b9      	str	r1, [r7, #8]
 80177a0:	607a      	str	r2, [r7, #4]
 80177a2:	807b      	strh	r3, [r7, #2]
  bool retVal = false;
 80177a4:	2300      	movs	r3, #0
 80177a6:	75fb      	strb	r3, [r7, #23]
  do
  {
    if ((Handle == NULL) || (HSpi == NULL) || (Gpio == NULL) || (Handle->Inited == 1))
 80177a8:	68fb      	ldr	r3, [r7, #12]
 80177aa:	2b00      	cmp	r3, #0
 80177ac:	d03a      	beq.n	8017824 <SPIF_Init+0x8e>
 80177ae:	68bb      	ldr	r3, [r7, #8]
 80177b0:	2b00      	cmp	r3, #0
 80177b2:	d037      	beq.n	8017824 <SPIF_Init+0x8e>
 80177b4:	687b      	ldr	r3, [r7, #4]
 80177b6:	2b00      	cmp	r3, #0
 80177b8:	d034      	beq.n	8017824 <SPIF_Init+0x8e>
 80177ba:	68fb      	ldr	r3, [r7, #12]
 80177bc:	7a9b      	ldrb	r3, [r3, #10]
 80177be:	2b01      	cmp	r3, #1
 80177c0:	d030      	beq.n	8017824 <SPIF_Init+0x8e>
    {
      dprintf("SPIF_Init() Error, Wrong Parameter\r\n");
      break;
    }
    memset(Handle, 0, sizeof(SPIF_HandleTypeDef));
 80177c2:	2220      	movs	r2, #32
 80177c4:	2100      	movs	r1, #0
 80177c6:	68f8      	ldr	r0, [r7, #12]
 80177c8:	f003 fea3 	bl	801b512 <memset>
    Handle->HSpi = HSpi;
 80177cc:	68fb      	ldr	r3, [r7, #12]
 80177ce:	68ba      	ldr	r2, [r7, #8]
 80177d0:	601a      	str	r2, [r3, #0]
    Handle->Gpio = Gpio;
 80177d2:	68fb      	ldr	r3, [r7, #12]
 80177d4:	687a      	ldr	r2, [r7, #4]
 80177d6:	605a      	str	r2, [r3, #4]
    Handle->Pin = Pin;
 80177d8:	887a      	ldrh	r2, [r7, #2]
 80177da:	68fb      	ldr	r3, [r7, #12]
 80177dc:	611a      	str	r2, [r3, #16]
    SPIF_CsPin(Handle, 1);
 80177de:	2101      	movs	r1, #1
 80177e0:	68f8      	ldr	r0, [r7, #12]
 80177e2:	f7ff fc22 	bl	801702a <SPIF_CsPin>
    /* wait for stable VCC */
    while (HAL_GetTick() < 20)
 80177e6:	e002      	b.n	80177ee <SPIF_Init+0x58>
    {
      SPIF_Delay(1);
 80177e8:	2001      	movs	r0, #1
 80177ea:	f7ff fbf3 	bl	8016fd4 <SPIF_Delay>
    while (HAL_GetTick() < 20)
 80177ee:	f7ef fe9b 	bl	8007528 <HAL_GetTick>
 80177f2:	4603      	mov	r3, r0
 80177f4:	2b13      	cmp	r3, #19
 80177f6:	d9f7      	bls.n	80177e8 <SPIF_Init+0x52>
    }
    if (SPIF_WriteDisable(Handle) == false)
 80177f8:	68f8      	ldr	r0, [r7, #12]
 80177fa:	f7ff fcab 	bl	8017154 <SPIF_WriteDisable>
 80177fe:	4603      	mov	r3, r0
 8017800:	f083 0301 	eor.w	r3, r3, #1
 8017804:	b2db      	uxtb	r3, r3
 8017806:	2b00      	cmp	r3, #0
 8017808:	d10b      	bne.n	8017822 <SPIF_Init+0x8c>
    {
      break;
    }
    retVal = SPIF_FindChip(Handle);
 801780a:	68f8      	ldr	r0, [r7, #12]
 801780c:	f7ff fd12 	bl	8017234 <SPIF_FindChip>
 8017810:	4603      	mov	r3, r0
 8017812:	75fb      	strb	r3, [r7, #23]
    if (retVal)
 8017814:	7dfb      	ldrb	r3, [r7, #23]
 8017816:	2b00      	cmp	r3, #0
 8017818:	d004      	beq.n	8017824 <SPIF_Init+0x8e>
    {
      Handle->Inited = 1;
 801781a:	68fb      	ldr	r3, [r7, #12]
 801781c:	2201      	movs	r2, #1
 801781e:	729a      	strb	r2, [r3, #10]
 8017820:	e000      	b.n	8017824 <SPIF_Init+0x8e>
      break;
 8017822:	bf00      	nop
      dprintf("SPIF_Init() Done\r\n");
    }

  } while (0);

  return retVal;
 8017824:	7dfb      	ldrb	r3, [r7, #23]
}
 8017826:	4618      	mov	r0, r3
 8017828:	3718      	adds	r7, #24
 801782a:	46bd      	mov	sp, r7
 801782c:	bd80      	pop	{r7, pc}

0801782e <SPIF_EraseSector>:
  * @param  Sector: Selected Sector
  *
  * @retval bool: true or false
  */
bool SPIF_EraseSector(SPIF_HandleTypeDef *Handle, uint32_t Sector)
{
 801782e:	b580      	push	{r7, lr}
 8017830:	b086      	sub	sp, #24
 8017832:	af00      	add	r7, sp, #0
 8017834:	6078      	str	r0, [r7, #4]
 8017836:	6039      	str	r1, [r7, #0]
  SPIF_Lock(Handle);
 8017838:	6878      	ldr	r0, [r7, #4]
 801783a:	f7ff fbd6 	bl	8016fea <SPIF_Lock>
  bool retVal = false;
 801783e:	2300      	movs	r3, #0
 8017840:	75fb      	strb	r3, [r7, #23]
  uint32_t address = Sector * SPIF_SECTOR_SIZE;
 8017842:	683b      	ldr	r3, [r7, #0]
 8017844:	031b      	lsls	r3, r3, #12
 8017846:	613b      	str	r3, [r7, #16]
  {
#if SPIF_DEBUG != SPIF_DEBUG_DISABLE
    uint32_t dbgTime = HAL_GetTick();
#endif
    dprintf("SPIF_EraseSector() START SECTOR %ld\r\n", Sector);
    if (Sector >= Handle->SectorCnt)
 8017848:	687b      	ldr	r3, [r7, #4]
 801784a:	699b      	ldr	r3, [r3, #24]
 801784c:	683a      	ldr	r2, [r7, #0]
 801784e:	429a      	cmp	r2, r3
 8017850:	d262      	bcs.n	8017918 <SPIF_EraseSector+0xea>
    {
      dprintf("SPIF_EraseSector() ERROR Sector NUMBER\r\n");
      break;
    }
    if (SPIF_WriteEnable(Handle) == false)
 8017852:	6878      	ldr	r0, [r7, #4]
 8017854:	f7ff fc5a 	bl	801710c <SPIF_WriteEnable>
 8017858:	4603      	mov	r3, r0
 801785a:	f083 0301 	eor.w	r3, r3, #1
 801785e:	b2db      	uxtb	r3, r3
 8017860:	2b00      	cmp	r3, #0
 8017862:	d15b      	bne.n	801791c <SPIF_EraseSector+0xee>
    {
      break;
    }
    SPIF_CsPin(Handle, 0);
 8017864:	2100      	movs	r1, #0
 8017866:	6878      	ldr	r0, [r7, #4]
 8017868:	f7ff fbdf 	bl	801702a <SPIF_CsPin>
    if (Handle->BlockCnt >= 512)
 801786c:	687b      	ldr	r3, [r7, #4]
 801786e:	69db      	ldr	r3, [r3, #28]
 8017870:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8017874:	d322      	bcc.n	80178bc <SPIF_EraseSector+0x8e>
    {
      tx[0] = SPIF_CMD_SECTORERASE4ADD;
 8017876:	2321      	movs	r3, #33	@ 0x21
 8017878:	723b      	strb	r3, [r7, #8]
      tx[1] = (address & 0xFF000000) >> 24;
 801787a:	693b      	ldr	r3, [r7, #16]
 801787c:	0e1b      	lsrs	r3, r3, #24
 801787e:	b2db      	uxtb	r3, r3
 8017880:	727b      	strb	r3, [r7, #9]
      tx[2] = (address & 0x00FF0000) >> 16;
 8017882:	693b      	ldr	r3, [r7, #16]
 8017884:	0c1b      	lsrs	r3, r3, #16
 8017886:	b2db      	uxtb	r3, r3
 8017888:	72bb      	strb	r3, [r7, #10]
      tx[3] = (address & 0x0000FF00) >> 8;
 801788a:	693b      	ldr	r3, [r7, #16]
 801788c:	0a1b      	lsrs	r3, r3, #8
 801788e:	b2db      	uxtb	r3, r3
 8017890:	72fb      	strb	r3, [r7, #11]
      tx[4] = (address & 0x000000FF);
 8017892:	693b      	ldr	r3, [r7, #16]
 8017894:	b2db      	uxtb	r3, r3
 8017896:	733b      	strb	r3, [r7, #12]
      if (SPIF_Transmit(Handle, tx, 5, 100) == false)
 8017898:	f107 0108 	add.w	r1, r7, #8
 801789c:	2364      	movs	r3, #100	@ 0x64
 801789e:	2205      	movs	r2, #5
 80178a0:	6878      	ldr	r0, [r7, #4]
 80178a2:	f7ff fbfd 	bl	80170a0 <SPIF_Transmit>
 80178a6:	4603      	mov	r3, r0
 80178a8:	f083 0301 	eor.w	r3, r3, #1
 80178ac:	b2db      	uxtb	r3, r3
 80178ae:	2b00      	cmp	r3, #0
 80178b0:	d023      	beq.n	80178fa <SPIF_EraseSector+0xcc>
      {
        SPIF_CsPin(Handle, 1);
 80178b2:	2101      	movs	r1, #1
 80178b4:	6878      	ldr	r0, [r7, #4]
 80178b6:	f7ff fbb8 	bl	801702a <SPIF_CsPin>
        break;
 80178ba:	e030      	b.n	801791e <SPIF_EraseSector+0xf0>
      }
    }
    else
    {
      tx[0] = SPIF_CMD_SECTORERASE3ADD;
 80178bc:	2320      	movs	r3, #32
 80178be:	723b      	strb	r3, [r7, #8]
      tx[1] = (address & 0x00FF0000) >> 16;
 80178c0:	693b      	ldr	r3, [r7, #16]
 80178c2:	0c1b      	lsrs	r3, r3, #16
 80178c4:	b2db      	uxtb	r3, r3
 80178c6:	727b      	strb	r3, [r7, #9]
      tx[2] = (address & 0x0000FF00) >> 8;
 80178c8:	693b      	ldr	r3, [r7, #16]
 80178ca:	0a1b      	lsrs	r3, r3, #8
 80178cc:	b2db      	uxtb	r3, r3
 80178ce:	72bb      	strb	r3, [r7, #10]
      tx[3] = (address & 0x000000FF);
 80178d0:	693b      	ldr	r3, [r7, #16]
 80178d2:	b2db      	uxtb	r3, r3
 80178d4:	72fb      	strb	r3, [r7, #11]
      if (SPIF_Transmit(Handle, tx, 4, 100) == false)
 80178d6:	f107 0108 	add.w	r1, r7, #8
 80178da:	2364      	movs	r3, #100	@ 0x64
 80178dc:	2204      	movs	r2, #4
 80178de:	6878      	ldr	r0, [r7, #4]
 80178e0:	f7ff fbde 	bl	80170a0 <SPIF_Transmit>
 80178e4:	4603      	mov	r3, r0
 80178e6:	f083 0301 	eor.w	r3, r3, #1
 80178ea:	b2db      	uxtb	r3, r3
 80178ec:	2b00      	cmp	r3, #0
 80178ee:	d004      	beq.n	80178fa <SPIF_EraseSector+0xcc>
      {
        SPIF_CsPin(Handle, 1);
 80178f0:	2101      	movs	r1, #1
 80178f2:	6878      	ldr	r0, [r7, #4]
 80178f4:	f7ff fb99 	bl	801702a <SPIF_CsPin>
        break;
 80178f8:	e011      	b.n	801791e <SPIF_EraseSector+0xf0>
      }
    }
    SPIF_CsPin(Handle, 1);
 80178fa:	2101      	movs	r1, #1
 80178fc:	6878      	ldr	r0, [r7, #4]
 80178fe:	f7ff fb94 	bl	801702a <SPIF_CsPin>
    if (SPIF_WaitForWriting(Handle, 1000))
 8017902:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8017906:	6878      	ldr	r0, [r7, #4]
 8017908:	f7ff fc6d 	bl	80171e6 <SPIF_WaitForWriting>
 801790c:	4603      	mov	r3, r0
 801790e:	2b00      	cmp	r3, #0
 8017910:	d005      	beq.n	801791e <SPIF_EraseSector+0xf0>
    {
      dprintf("SPIF_EraseSector() DONE AFTER %ld ms\r\n", HAL_GetTick() - dbgTime);
      retVal = true;
 8017912:	2301      	movs	r3, #1
 8017914:	75fb      	strb	r3, [r7, #23]
 8017916:	e002      	b.n	801791e <SPIF_EraseSector+0xf0>
      break;
 8017918:	bf00      	nop
 801791a:	e000      	b.n	801791e <SPIF_EraseSector+0xf0>
      break;
 801791c:	bf00      	nop
    }

  } while (0);

  SPIF_WriteDisable(Handle);
 801791e:	6878      	ldr	r0, [r7, #4]
 8017920:	f7ff fc18 	bl	8017154 <SPIF_WriteDisable>
  SPIF_UnLock(Handle);
 8017924:	6878      	ldr	r0, [r7, #4]
 8017926:	f7ff fb73 	bl	8017010 <SPIF_UnLock>
  return retVal;
 801792a:	7dfb      	ldrb	r3, [r7, #23]
}
 801792c:	4618      	mov	r0, r3
 801792e:	3718      	adds	r7, #24
 8017930:	46bd      	mov	sp, r7
 8017932:	bd80      	pop	{r7, pc}

08017934 <SPIF_WritePage>:
  * @param  Offset: The start point for writing data. (in byte)
  *
  * @retval bool: true or false
  */
bool SPIF_WritePage(SPIF_HandleTypeDef *Handle, uint32_t PageNumber, uint8_t *Data, uint32_t Size, uint32_t Offset)
{
 8017934:	b580      	push	{r7, lr}
 8017936:	b088      	sub	sp, #32
 8017938:	af02      	add	r7, sp, #8
 801793a:	60f8      	str	r0, [r7, #12]
 801793c:	60b9      	str	r1, [r7, #8]
 801793e:	607a      	str	r2, [r7, #4]
 8017940:	603b      	str	r3, [r7, #0]
  SPIF_Lock(Handle);
 8017942:	68f8      	ldr	r0, [r7, #12]
 8017944:	f7ff fb51 	bl	8016fea <SPIF_Lock>
  bool retVal = false;
 8017948:	2300      	movs	r3, #0
 801794a:	75fb      	strb	r3, [r7, #23]
  retVal = SPIF_WriteFn(Handle, PageNumber, Data, Size, Offset);
 801794c:	6a3b      	ldr	r3, [r7, #32]
 801794e:	9300      	str	r3, [sp, #0]
 8017950:	683b      	ldr	r3, [r7, #0]
 8017952:	687a      	ldr	r2, [r7, #4]
 8017954:	68b9      	ldr	r1, [r7, #8]
 8017956:	68f8      	ldr	r0, [r7, #12]
 8017958:	f7ff fe04 	bl	8017564 <SPIF_WriteFn>
 801795c:	4603      	mov	r3, r0
 801795e:	75fb      	strb	r3, [r7, #23]
  SPIF_UnLock(Handle);
 8017960:	68f8      	ldr	r0, [r7, #12]
 8017962:	f7ff fb55 	bl	8017010 <SPIF_UnLock>
  return retVal;
 8017966:	7dfb      	ldrb	r3, [r7, #23]
}
 8017968:	4618      	mov	r0, r3
 801796a:	3718      	adds	r7, #24
 801796c:	46bd      	mov	sp, r7
 801796e:	bd80      	pop	{r7, pc}

08017970 <SPIF_ReadPage>:
  * @param  Offset: The start point for Reading data. (in byte)
  *
  * @retval bool: true or false
  */
bool SPIF_ReadPage(SPIF_HandleTypeDef *Handle, uint32_t PageNumber, uint8_t *Data, uint32_t Size, uint32_t Offset)
{
 8017970:	b580      	push	{r7, lr}
 8017972:	b088      	sub	sp, #32
 8017974:	af00      	add	r7, sp, #0
 8017976:	60f8      	str	r0, [r7, #12]
 8017978:	60b9      	str	r1, [r7, #8]
 801797a:	607a      	str	r2, [r7, #4]
 801797c:	603b      	str	r3, [r7, #0]
  SPIF_Lock(Handle);
 801797e:	68f8      	ldr	r0, [r7, #12]
 8017980:	f7ff fb33 	bl	8016fea <SPIF_Lock>
  bool retVal = false;
 8017984:	2300      	movs	r3, #0
 8017986:	77fb      	strb	r3, [r7, #31]
  uint32_t address = SPIF_PageToAddress(PageNumber) + Offset;
 8017988:	68bb      	ldr	r3, [r7, #8]
 801798a:	021b      	lsls	r3, r3, #8
 801798c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801798e:	4413      	add	r3, r2
 8017990:	61bb      	str	r3, [r7, #24]
  uint32_t maximum = SPIF_PAGE_SIZE - Offset;
 8017992:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017994:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8017998:	617b      	str	r3, [r7, #20]
  if (Size > maximum)
 801799a:	683a      	ldr	r2, [r7, #0]
 801799c:	697b      	ldr	r3, [r7, #20]
 801799e:	429a      	cmp	r2, r3
 80179a0:	d901      	bls.n	80179a6 <SPIF_ReadPage+0x36>
  {
    Size = maximum;
 80179a2:	697b      	ldr	r3, [r7, #20]
 80179a4:	603b      	str	r3, [r7, #0]
  }
  retVal = SPIF_ReadFn(Handle, address, Data, Size);
 80179a6:	683b      	ldr	r3, [r7, #0]
 80179a8:	687a      	ldr	r2, [r7, #4]
 80179aa:	69b9      	ldr	r1, [r7, #24]
 80179ac:	68f8      	ldr	r0, [r7, #12]
 80179ae:	f7ff fe81 	bl	80176b4 <SPIF_ReadFn>
 80179b2:	4603      	mov	r3, r0
 80179b4:	77fb      	strb	r3, [r7, #31]
  SPIF_UnLock(Handle);
 80179b6:	68f8      	ldr	r0, [r7, #12]
 80179b8:	f7ff fb2a 	bl	8017010 <SPIF_UnLock>
  return retVal;
 80179bc:	7ffb      	ldrb	r3, [r7, #31]
}
 80179be:	4618      	mov	r0, r3
 80179c0:	3720      	adds	r7, #32
 80179c2:	46bd      	mov	sp, r7
 80179c4:	bd80      	pop	{r7, pc}
	...

080179c8 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 80179c8:	b480      	push	{r7}
 80179ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 80179cc:	4b03      	ldr	r3, [pc, #12]	@ (80179dc <LL_FLASH_GetUDN+0x14>)
 80179ce:	681b      	ldr	r3, [r3, #0]
}
 80179d0:	4618      	mov	r0, r3
 80179d2:	46bd      	mov	sp, r7
 80179d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179d8:	4770      	bx	lr
 80179da:	bf00      	nop
 80179dc:	1fff7580 	.word	0x1fff7580

080179e0 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 80179e0:	b480      	push	{r7}
 80179e2:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 80179e4:	4b03      	ldr	r3, [pc, #12]	@ (80179f4 <LL_FLASH_GetDeviceID+0x14>)
 80179e6:	681b      	ldr	r3, [r3, #0]
 80179e8:	b2db      	uxtb	r3, r3
}
 80179ea:	4618      	mov	r0, r3
 80179ec:	46bd      	mov	sp, r7
 80179ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179f2:	4770      	bx	lr
 80179f4:	1fff7584 	.word	0x1fff7584

080179f8 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 80179f8:	b480      	push	{r7}
 80179fa:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 80179fc:	4b03      	ldr	r3, [pc, #12]	@ (8017a0c <LL_FLASH_GetSTCompanyID+0x14>)
 80179fe:	681b      	ldr	r3, [r3, #0]
 8017a00:	0a1b      	lsrs	r3, r3, #8
}
 8017a02:	4618      	mov	r0, r3
 8017a04:	46bd      	mov	sp, r7
 8017a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a0a:	4770      	bx	lr
 8017a0c:	1fff7584 	.word	0x1fff7584

08017a10 <APP_BLE_Init>:
/* USER CODE BEGIN EV */
/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 8017a10:	b5b0      	push	{r4, r5, r7, lr}
 8017a12:	b090      	sub	sp, #64	@ 0x40
 8017a14:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
#if (RADIO_ACTIVITY_EVENT != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8017a16:	2392      	movs	r3, #146	@ 0x92
 8017a18:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#endif /* RADIO_ACTIVITY_EVENT != 0 */
  /* USER CODE BEGIN APP_BLE_Init_1 */
  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 8017a1c:	4b25      	ldr	r3, [pc, #148]	@ (8017ab4 <APP_BLE_Init+0xa4>)
 8017a1e:	1d3c      	adds	r4, r7, #4
 8017a20:	461d      	mov	r5, r3
 8017a22:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017a24:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017a26:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017a28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017a2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017a2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017a2e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8017a32:	c403      	stmia	r4!, {r0, r1}
 8017a34:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 8017a36:	f000 f921 	bl	8017c7c <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 8017a3a:	2101      	movs	r1, #1
 8017a3c:	2002      	movs	r0, #2
 8017a3e:	f001 fba5 	bl	801918c <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 8017a42:	4a1d      	ldr	r2, [pc, #116]	@ (8017ab8 <APP_BLE_Init+0xa8>)
 8017a44:	2100      	movs	r1, #0
 8017a46:	2002      	movs	r0, #2
 8017a48:	f001 fccc 	bl	80193e4 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 8017a4c:	1d3b      	adds	r3, r7, #4
 8017a4e:	4618      	mov	r0, r3
 8017a50:	f7fe fbcc 	bl	80161ec <SHCI_C2_BLE_Init>
 8017a54:	4603      	mov	r3, r0
 8017a56:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  if (status != SHCI_Success)
 8017a5a:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8017a5e:	2b00      	cmp	r3, #0
 8017a60:	d001      	beq.n	8017a66 <APP_BLE_Init+0x56>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 8017a62:	f7eb faa7 	bl	8002fb4 <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 8017a66:	f000 f91f 	bl	8017ca8 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 8017a6a:	f7fe fb19 	bl	80160a0 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8017a6e:	4b13      	ldr	r3, [pc, #76]	@ (8017abc <APP_BLE_Init+0xac>)
 8017a70:	2200      	movs	r2, #0
 8017a72:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 8017a76:	4b11      	ldr	r3, [pc, #68]	@ (8017abc <APP_BLE_Init+0xac>)
 8017a78:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8017a7c:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */

  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 8017a7e:	4a10      	ldr	r2, [pc, #64]	@ (8017ac0 <APP_BLE_Init+0xb0>)
 8017a80:	2100      	movs	r1, #0
 8017a82:	2001      	movs	r0, #1
 8017a84:	f001 fcae 	bl	80193e4 <UTIL_SEQ_RegTask>

  /**
   * Initialization of ADV - Ad Manufacturer Element - Support OTA Bit Mask
   */
#if (RADIO_ACTIVITY_EVENT != 0)
  ret = aci_hal_set_radio_activity_mask(0x0006);
 8017a88:	2006      	movs	r0, #6
 8017a8a:	f7fe f97d 	bl	8015d88 <aci_hal_set_radio_activity_mask>
 8017a8e:	4603      	mov	r3, r0
 8017a90:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

  /**
   * Initialize Custom Template Application
   */
  Custom_APP_Init();
 8017a94:	f000 facb 	bl	801802e <Custom_APP_Init>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 8017a98:	4b08      	ldr	r3, [pc, #32]	@ (8017abc <APP_BLE_Init+0xac>)
 8017a9a:	2200      	movs	r2, #0
 8017a9c:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 8017a9e:	4b07      	ldr	r3, [pc, #28]	@ (8017abc <APP_BLE_Init+0xac>)
 8017aa0:	2200      	movs	r2, #0
 8017aa2:	761a      	strb	r2, [r3, #24]

  /**
   * Start to Advertise to be connected by a Client
   */
  Adv_Request(APP_BLE_FAST_ADV);
 8017aa4:	2001      	movs	r0, #1
 8017aa6:	f000 f9b3 	bl	8017e10 <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */
  /* USER CODE END APP_BLE_Init_2 */

  return;
 8017aaa:	bf00      	nop
}
 8017aac:	3740      	adds	r7, #64	@ 0x40
 8017aae:	46bd      	mov	sp, r7
 8017ab0:	bdb0      	pop	{r4, r5, r7, pc}
 8017ab2:	bf00      	nop
 8017ab4:	0802012c 	.word	0x0802012c
 8017ab8:	08016409 	.word	0x08016409
 8017abc:	2000155c 	.word	0x2000155c
 8017ac0:	08017ef9 	.word	0x08017ef9

08017ac4 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 8017ac4:	b580      	push	{r7, lr}
 8017ac6:	b08c      	sub	sp, #48	@ 0x30
 8017ac8:	af00      	add	r7, sp, #0
 8017aca:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 8017acc:	2392      	movs	r3, #146	@ 0x92
 8017ace:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  /* PAIRING */

  /* USER CODE BEGIN SVCCTL_App_Notification */
  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 8017ad2:	687b      	ldr	r3, [r7, #4]
 8017ad4:	3301      	adds	r3, #1
 8017ad6:	62bb      	str	r3, [r7, #40]	@ 0x28

  switch (p_event_pckt->evt)
 8017ad8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017ada:	781b      	ldrb	r3, [r3, #0]
 8017adc:	2bff      	cmp	r3, #255	@ 0xff
 8017ade:	d05c      	beq.n	8017b9a <SVCCTL_App_Notification+0xd6>
 8017ae0:	2bff      	cmp	r3, #255	@ 0xff
 8017ae2:	f300 80bd 	bgt.w	8017c60 <SVCCTL_App_Notification+0x19c>
 8017ae6:	2b3e      	cmp	r3, #62	@ 0x3e
 8017ae8:	d02b      	beq.n	8017b42 <SVCCTL_App_Notification+0x7e>
 8017aea:	2b3e      	cmp	r3, #62	@ 0x3e
 8017aec:	f300 80b8 	bgt.w	8017c60 <SVCCTL_App_Notification+0x19c>
 8017af0:	2b05      	cmp	r3, #5
 8017af2:	d002      	beq.n	8017afa <SVCCTL_App_Notification+0x36>
 8017af4:	2b10      	cmp	r3, #16
 8017af6:	d020      	beq.n	8017b3a <SVCCTL_App_Notification+0x76>
      /* USER CODE END EVENT_PCKT */

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/
      /* USER CODE END ECODE_DEFAULT*/
      break;
 8017af8:	e0b2      	b.n	8017c60 <SVCCTL_App_Notification+0x19c>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 8017afa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017afc:	3302      	adds	r3, #2
 8017afe:	60fb      	str	r3, [r7, #12]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 8017b00:	68fb      	ldr	r3, [r7, #12]
 8017b02:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8017b06:	b29a      	uxth	r2, r3
 8017b08:	4b59      	ldr	r3, [pc, #356]	@ (8017c70 <SVCCTL_App_Notification+0x1ac>)
 8017b0a:	8adb      	ldrh	r3, [r3, #22]
 8017b0c:	429a      	cmp	r2, r3
 8017b0e:	d106      	bne.n	8017b1e <SVCCTL_App_Notification+0x5a>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 8017b10:	4b57      	ldr	r3, [pc, #348]	@ (8017c70 <SVCCTL_App_Notification+0x1ac>)
 8017b12:	2200      	movs	r2, #0
 8017b14:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8017b16:	4b56      	ldr	r3, [pc, #344]	@ (8017c70 <SVCCTL_App_Notification+0x1ac>)
 8017b18:	2200      	movs	r2, #0
 8017b1a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
      Adv_Request(APP_BLE_FAST_ADV);
 8017b1e:	2001      	movs	r0, #1
 8017b20:	f000 f976 	bl	8017e10 <Adv_Request>
      HandleNotification.Custom_Evt_Opcode = CUSTOM_DISCON_HANDLE_EVT;
 8017b24:	4b53      	ldr	r3, [pc, #332]	@ (8017c74 <SVCCTL_App_Notification+0x1b0>)
 8017b26:	2201      	movs	r2, #1
 8017b28:	701a      	strb	r2, [r3, #0]
      HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8017b2a:	4b51      	ldr	r3, [pc, #324]	@ (8017c70 <SVCCTL_App_Notification+0x1ac>)
 8017b2c:	8ada      	ldrh	r2, [r3, #22]
 8017b2e:	4b51      	ldr	r3, [pc, #324]	@ (8017c74 <SVCCTL_App_Notification+0x1b0>)
 8017b30:	805a      	strh	r2, [r3, #2]
      Custom_APP_Notification(&HandleNotification);
 8017b32:	4850      	ldr	r0, [pc, #320]	@ (8017c74 <SVCCTL_App_Notification+0x1b0>)
 8017b34:	f000 fa67 	bl	8018006 <Custom_APP_Notification>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 8017b38:	e095      	b.n	8017c66 <SVCCTL_App_Notification+0x1a2>
      p_hardware_error_event = (hci_hardware_error_event_rp0 *)p_event_pckt->data;
 8017b3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017b3c:	3302      	adds	r3, #2
 8017b3e:	613b      	str	r3, [r7, #16]
      break; /* HCI_HARDWARE_ERROR_EVT_CODE */
 8017b40:	e091      	b.n	8017c66 <SVCCTL_App_Notification+0x1a2>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 8017b42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017b44:	3302      	adds	r3, #2
 8017b46:	61bb      	str	r3, [r7, #24]
      switch (p_meta_evt->subevent)
 8017b48:	69bb      	ldr	r3, [r7, #24]
 8017b4a:	781b      	ldrb	r3, [r3, #0]
 8017b4c:	2b01      	cmp	r3, #1
 8017b4e:	d001      	beq.n	8017b54 <SVCCTL_App_Notification+0x90>
 8017b50:	2b03      	cmp	r3, #3
          break;
 8017b52:	e021      	b.n	8017b98 <SVCCTL_App_Notification+0xd4>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 8017b54:	69bb      	ldr	r3, [r7, #24]
 8017b56:	3301      	adds	r3, #1
 8017b58:	617b      	str	r3, [r7, #20]
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 8017b5a:	4b45      	ldr	r3, [pc, #276]	@ (8017c70 <SVCCTL_App_Notification+0x1ac>)
 8017b5c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8017b60:	2b04      	cmp	r3, #4
 8017b62:	d104      	bne.n	8017b6e <SVCCTL_App_Notification+0xaa>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 8017b64:	4b42      	ldr	r3, [pc, #264]	@ (8017c70 <SVCCTL_App_Notification+0x1ac>)
 8017b66:	2206      	movs	r2, #6
 8017b68:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 8017b6c:	e003      	b.n	8017b76 <SVCCTL_App_Notification+0xb2>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 8017b6e:	4b40      	ldr	r3, [pc, #256]	@ (8017c70 <SVCCTL_App_Notification+0x1ac>)
 8017b70:	2205      	movs	r2, #5
 8017b72:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 8017b76:	697b      	ldr	r3, [r7, #20]
 8017b78:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8017b7c:	b29a      	uxth	r2, r3
 8017b7e:	4b3c      	ldr	r3, [pc, #240]	@ (8017c70 <SVCCTL_App_Notification+0x1ac>)
 8017b80:	82da      	strh	r2, [r3, #22]
          HandleNotification.Custom_Evt_Opcode = CUSTOM_CONN_HANDLE_EVT;
 8017b82:	4b3c      	ldr	r3, [pc, #240]	@ (8017c74 <SVCCTL_App_Notification+0x1b0>)
 8017b84:	2200      	movs	r2, #0
 8017b86:	701a      	strb	r2, [r3, #0]
          HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8017b88:	4b39      	ldr	r3, [pc, #228]	@ (8017c70 <SVCCTL_App_Notification+0x1ac>)
 8017b8a:	8ada      	ldrh	r2, [r3, #22]
 8017b8c:	4b39      	ldr	r3, [pc, #228]	@ (8017c74 <SVCCTL_App_Notification+0x1b0>)
 8017b8e:	805a      	strh	r2, [r3, #2]
          Custom_APP_Notification(&HandleNotification);
 8017b90:	4838      	ldr	r0, [pc, #224]	@ (8017c74 <SVCCTL_App_Notification+0x1b0>)
 8017b92:	f000 fa38 	bl	8018006 <Custom_APP_Notification>
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 8017b96:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 8017b98:	e065      	b.n	8017c66 <SVCCTL_App_Notification+0x1a2>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 8017b9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017b9c:	3302      	adds	r3, #2
 8017b9e:	627b      	str	r3, [r7, #36]	@ 0x24
      switch (p_blecore_evt->ecode)
 8017ba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017ba2:	881b      	ldrh	r3, [r3, #0]
 8017ba4:	b29b      	uxth	r3, r3
 8017ba6:	f640 420e 	movw	r2, #3086	@ 0xc0e
 8017baa:	4293      	cmp	r3, r2
 8017bac:	d048      	beq.n	8017c40 <SVCCTL_App_Notification+0x17c>
 8017bae:	f640 420e 	movw	r2, #3086	@ 0xc0e
 8017bb2:	4293      	cmp	r3, r2
 8017bb4:	dc56      	bgt.n	8017c64 <SVCCTL_App_Notification+0x1a0>
 8017bb6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8017bba:	d04b      	beq.n	8017c54 <SVCCTL_App_Notification+0x190>
 8017bbc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8017bc0:	dc50      	bgt.n	8017c64 <SVCCTL_App_Notification+0x1a0>
 8017bc2:	f240 420a 	movw	r2, #1034	@ 0x40a
 8017bc6:	4293      	cmp	r3, r2
 8017bc8:	dc4c      	bgt.n	8017c64 <SVCCTL_App_Notification+0x1a0>
 8017bca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8017bce:	dc04      	bgt.n	8017bda <SVCCTL_App_Notification+0x116>
 8017bd0:	2b04      	cmp	r3, #4
 8017bd2:	d041      	beq.n	8017c58 <SVCCTL_App_Notification+0x194>
 8017bd4:	2b06      	cmp	r3, #6
 8017bd6:	d039      	beq.n	8017c4c <SVCCTL_App_Notification+0x188>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8017bd8:	e044      	b.n	8017c64 <SVCCTL_App_Notification+0x1a0>
 8017bda:	f2a3 4301 	subw	r3, r3, #1025	@ 0x401
 8017bde:	2b09      	cmp	r3, #9
 8017be0:	d840      	bhi.n	8017c64 <SVCCTL_App_Notification+0x1a0>
 8017be2:	a201      	add	r2, pc, #4	@ (adr r2, 8017be8 <SVCCTL_App_Notification+0x124>)
 8017be4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017be8:	08017c39 	.word	0x08017c39
 8017bec:	08017c11 	.word	0x08017c11
 8017bf0:	08017c65 	.word	0x08017c65
 8017bf4:	08017c65 	.word	0x08017c65
 8017bf8:	08017c65 	.word	0x08017c65
 8017bfc:	08017c65 	.word	0x08017c65
 8017c00:	08017c5d 	.word	0x08017c5d
 8017c04:	08017c65 	.word	0x08017c65
 8017c08:	08017c25 	.word	0x08017c25
 8017c0c:	08017c5d 	.word	0x08017c5d
          ret = aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, CFG_FIXED_PIN);
 8017c10:	4b17      	ldr	r3, [pc, #92]	@ (8017c70 <SVCCTL_App_Notification+0x1ac>)
 8017c12:	8adb      	ldrh	r3, [r3, #22]
 8017c14:	4918      	ldr	r1, [pc, #96]	@ (8017c78 <SVCCTL_App_Notification+0x1b4>)
 8017c16:	4618      	mov	r0, r3
 8017c18:	f7fd fab8 	bl	801518c <aci_gap_pass_key_resp>
 8017c1c:	4603      	mov	r3, r0
 8017c1e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
          break;
 8017c22:	e01c      	b.n	8017c5e <SVCCTL_App_Notification+0x19a>
          ret = aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES);
 8017c24:	4b12      	ldr	r3, [pc, #72]	@ (8017c70 <SVCCTL_App_Notification+0x1ac>)
 8017c26:	8adb      	ldrh	r3, [r3, #22]
 8017c28:	2101      	movs	r1, #1
 8017c2a:	4618      	mov	r0, r3
 8017c2c:	f7fd fc58 	bl	80154e0 <aci_gap_numeric_comparison_value_confirm_yesno>
 8017c30:	4603      	mov	r3, r0
 8017c32:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
          break;
 8017c36:	e012      	b.n	8017c5e <SVCCTL_App_Notification+0x19a>
          p_pairing_complete = (aci_gap_pairing_complete_event_rp0*)p_blecore_evt->data;
 8017c38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017c3a:	3302      	adds	r3, #2
 8017c3c:	623b      	str	r3, [r7, #32]
          break;
 8017c3e:	e00e      	b.n	8017c5e <SVCCTL_App_Notification+0x19a>
          aci_gatt_confirm_indication(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 8017c40:	4b0b      	ldr	r3, [pc, #44]	@ (8017c70 <SVCCTL_App_Notification+0x1ac>)
 8017c42:	8adb      	ldrh	r3, [r3, #22]
 8017c44:	4618      	mov	r0, r3
 8017c46:	f7fd ff5e 	bl	8015b06 <aci_gatt_confirm_indication>
        break;
 8017c4a:	e008      	b.n	8017c5e <SVCCTL_App_Notification+0x19a>
	      p_fw_error_event = (aci_hal_fw_error_event_rp0 *)p_blecore_evt->data;
 8017c4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017c4e:	3302      	adds	r3, #2
 8017c50:	61fb      	str	r3, [r7, #28]
          break;
 8017c52:	e004      	b.n	8017c5e <SVCCTL_App_Notification+0x19a>
          break;
 8017c54:	bf00      	nop
 8017c56:	e005      	b.n	8017c64 <SVCCTL_App_Notification+0x1a0>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 8017c58:	bf00      	nop
 8017c5a:	e003      	b.n	8017c64 <SVCCTL_App_Notification+0x1a0>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 8017c5c:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8017c5e:	e001      	b.n	8017c64 <SVCCTL_App_Notification+0x1a0>
      break;
 8017c60:	bf00      	nop
 8017c62:	e000      	b.n	8017c66 <SVCCTL_App_Notification+0x1a2>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8017c64:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 8017c66:	2301      	movs	r3, #1
}
 8017c68:	4618      	mov	r0, r3
 8017c6a:	3730      	adds	r7, #48	@ 0x30
 8017c6c:	46bd      	mov	sp, r7
 8017c6e:	bd80      	pop	{r7, pc}
 8017c70:	2000155c 	.word	0x2000155c
 8017c74:	200015e0 	.word	0x200015e0
 8017c78:	0001b207 	.word	0x0001b207

08017c7c <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 8017c7c:	b580      	push	{r7, lr}
 8017c7e:	b082      	sub	sp, #8
 8017c80:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 8017c82:	4b06      	ldr	r3, [pc, #24]	@ (8017c9c <Ble_Tl_Init+0x20>)
 8017c84:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 8017c86:	4b06      	ldr	r3, [pc, #24]	@ (8017ca0 <Ble_Tl_Init+0x24>)
 8017c88:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 8017c8a:	463b      	mov	r3, r7
 8017c8c:	4619      	mov	r1, r3
 8017c8e:	4805      	ldr	r0, [pc, #20]	@ (8017ca4 <Ble_Tl_Init+0x28>)
 8017c90:	f7fe fb9e 	bl	80163d0 <hci_init>

  return;
 8017c94:	bf00      	nop
}
 8017c96:	3708      	adds	r7, #8
 8017c98:	46bd      	mov	sp, r7
 8017c9a:	bd80      	pop	{r7, pc}
 8017c9c:	200300d8 	.word	0x200300d8
 8017ca0:	08017fa9 	.word	0x08017fa9
 8017ca4:	08017f71 	.word	0x08017f71

08017ca8 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 8017ca8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017caa:	b08d      	sub	sp, #52	@ 0x34
 8017cac:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 8017cae:	2300      	movs	r3, #0
 8017cb0:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8017cb2:	2392      	movs	r3, #146	@ 0x92
 8017cb4:	75fb      	strb	r3, [r7, #23]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 8017cb6:	f7fe f8bb 	bl	8015e30 <hci_reset>
 8017cba:	4603      	mov	r3, r0
 8017cbc:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 8017cbe:	f000 f8d7 	bl	8017e70 <BleGetBdAddress>
 8017cc2:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 8017cc4:	693a      	ldr	r2, [r7, #16]
 8017cc6:	2106      	movs	r1, #6
 8017cc8:	2000      	movs	r0, #0
 8017cca:	f7fd ff71 	bl	8015bb0 <aci_hal_write_config_data>
 8017cce:	4603      	mov	r3, r0
 8017cd0:	75fb      	strb	r3, [r7, #23]
#endif /* CFG_BLE_ADDRESS_TYPE != GAP_PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive IRK and DHK(Legacy)
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 8017cd2:	4a4a      	ldr	r2, [pc, #296]	@ (8017dfc <Ble_Hci_Gap_Gatt_Init+0x154>)
 8017cd4:	2110      	movs	r1, #16
 8017cd6:	2018      	movs	r0, #24
 8017cd8:	f7fd ff6a 	bl	8015bb0 <aci_hal_write_config_data>
 8017cdc:	4603      	mov	r3, r0
 8017cde:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 8017ce0:	4a47      	ldr	r2, [pc, #284]	@ (8017e00 <Ble_Hci_Gap_Gatt_Init+0x158>)
 8017ce2:	2110      	movs	r1, #16
 8017ce4:	2008      	movs	r0, #8
 8017ce6:	f7fd ff63 	bl	8015bb0 <aci_hal_write_config_data>
 8017cea:	4603      	mov	r3, r0
 8017cec:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 8017cee:	210a      	movs	r1, #10
 8017cf0:	2001      	movs	r0, #1
 8017cf2:	f7fd ffe2 	bl	8015cba <aci_hal_set_tx_power_level>
 8017cf6:	4603      	mov	r3, r0
 8017cf8:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 8017cfa:	f7fd fc58 	bl	80155ae <aci_gatt_init>
 8017cfe:	4603      	mov	r3, r0
 8017d00:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 8017d02:	2300      	movs	r3, #0
 8017d04:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 8017d06:	7bfb      	ldrb	r3, [r7, #15]
 8017d08:	f043 0301 	orr.w	r3, r3, #1
 8017d0c:	73fb      	strb	r3, [r7, #15]
#endif /* BLE_CFG_CENTRAL == 1 */

/* USER CODE BEGIN Role_Mngt*/
/* USER CODE END Role_Mngt */

  if (role > 0)
 8017d0e:	7bfb      	ldrb	r3, [r7, #15]
 8017d10:	2b00      	cmp	r3, #0
 8017d12:	d01f      	beq.n	8017d54 <Ble_Hci_Gap_Gatt_Init+0xac>
  {
    const char *name = CFG_GAP_DEVICE_NAME;
 8017d14:	4b3b      	ldr	r3, [pc, #236]	@ (8017e04 <Ble_Hci_Gap_Gatt_Init+0x15c>)
 8017d16:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 8017d18:	1dba      	adds	r2, r7, #6
 8017d1a:	7bf8      	ldrb	r0, [r7, #15]
 8017d1c:	1cbb      	adds	r3, r7, #2
 8017d1e:	9301      	str	r3, [sp, #4]
 8017d20:	1d3b      	adds	r3, r7, #4
 8017d22:	9300      	str	r3, [sp, #0]
 8017d24:	4613      	mov	r3, r2
 8017d26:	2208      	movs	r2, #8
 8017d28:	2100      	movs	r1, #0
 8017d2a:	f7fd fa96 	bl	801525a <aci_gap_init>
 8017d2e:	4603      	mov	r3, r0
 8017d30:	75fb      	strb	r3, [r7, #23]
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 8017d32:	88fc      	ldrh	r4, [r7, #6]
 8017d34:	88bd      	ldrh	r5, [r7, #4]
 8017d36:	68b8      	ldr	r0, [r7, #8]
 8017d38:	f7e8 fa72 	bl	8000220 <strlen>
 8017d3c:	4603      	mov	r3, r0
 8017d3e:	b2da      	uxtb	r2, r3
 8017d40:	68bb      	ldr	r3, [r7, #8]
 8017d42:	9300      	str	r3, [sp, #0]
 8017d44:	4613      	mov	r3, r2
 8017d46:	2200      	movs	r2, #0
 8017d48:	4629      	mov	r1, r5
 8017d4a:	4620      	mov	r0, r4
 8017d4c:	f7fd fe32 	bl	80159b4 <aci_gatt_update_char_value>
 8017d50:	4603      	mov	r3, r0
 8017d52:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 8017d54:	88f8      	ldrh	r0, [r7, #6]
 8017d56:	8879      	ldrh	r1, [r7, #2]
 8017d58:	463b      	mov	r3, r7
 8017d5a:	9300      	str	r3, [sp, #0]
 8017d5c:	2302      	movs	r3, #2
 8017d5e:	2200      	movs	r2, #0
 8017d60:	f7fd fe28 	bl	80159b4 <aci_gatt_update_char_value>
 8017d64:	4603      	mov	r3, r0
 8017d66:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 8017d68:	2202      	movs	r2, #2
 8017d6a:	2102      	movs	r1, #2
 8017d6c:	2000      	movs	r0, #0
 8017d6e:	f7fe f883 	bl	8015e78 <hci_le_set_default_phy>
 8017d72:	4603      	mov	r3, r0
 8017d74:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 8017d76:	4b24      	ldr	r3, [pc, #144]	@ (8017e08 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8017d78:	2201      	movs	r2, #1
 8017d7a:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 8017d7c:	4b22      	ldr	r3, [pc, #136]	@ (8017e08 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8017d7e:	781b      	ldrb	r3, [r3, #0]
 8017d80:	4618      	mov	r0, r3
 8017d82:	f7fd f8eb 	bl	8014f5c <aci_gap_set_io_capability>
 8017d86:	4603      	mov	r3, r0
 8017d88:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 8017d8a:	4b1f      	ldr	r3, [pc, #124]	@ (8017e08 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8017d8c:	2201      	movs	r2, #1
 8017d8e:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 8017d90:	4b1d      	ldr	r3, [pc, #116]	@ (8017e08 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8017d92:	2208      	movs	r2, #8
 8017d94:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 8017d96:	4b1c      	ldr	r3, [pc, #112]	@ (8017e08 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8017d98:	2210      	movs	r2, #16
 8017d9a:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 8017d9c:	4b1a      	ldr	r3, [pc, #104]	@ (8017e08 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8017d9e:	2200      	movs	r2, #0
 8017da0:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 8017da2:	4b19      	ldr	r3, [pc, #100]	@ (8017e08 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8017da4:	4a19      	ldr	r2, [pc, #100]	@ (8017e0c <Ble_Hci_Gap_Gatt_Init+0x164>)
 8017da6:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 8017da8:	4b17      	ldr	r3, [pc, #92]	@ (8017e08 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8017daa:	2200      	movs	r2, #0
 8017dac:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 8017dae:	4b16      	ldr	r3, [pc, #88]	@ (8017e08 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8017db0:	789c      	ldrb	r4, [r3, #2]
 8017db2:	4b15      	ldr	r3, [pc, #84]	@ (8017e08 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8017db4:	785d      	ldrb	r5, [r3, #1]
 8017db6:	4b14      	ldr	r3, [pc, #80]	@ (8017e08 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8017db8:	791b      	ldrb	r3, [r3, #4]
 8017dba:	4a13      	ldr	r2, [pc, #76]	@ (8017e08 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8017dbc:	7952      	ldrb	r2, [r2, #5]
 8017dbe:	4912      	ldr	r1, [pc, #72]	@ (8017e08 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8017dc0:	78c9      	ldrb	r1, [r1, #3]
 8017dc2:	4811      	ldr	r0, [pc, #68]	@ (8017e08 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8017dc4:	6880      	ldr	r0, [r0, #8]
 8017dc6:	2600      	movs	r6, #0
 8017dc8:	9604      	str	r6, [sp, #16]
 8017dca:	9003      	str	r0, [sp, #12]
 8017dcc:	9102      	str	r1, [sp, #8]
 8017dce:	9201      	str	r2, [sp, #4]
 8017dd0:	9300      	str	r3, [sp, #0]
 8017dd2:	2300      	movs	r3, #0
 8017dd4:	2201      	movs	r2, #1
 8017dd6:	4629      	mov	r1, r5
 8017dd8:	4620      	mov	r0, r4
 8017dda:	f7fd f913 	bl	8015004 <aci_gap_set_authentication_requirement>
 8017dde:	4603      	mov	r3, r0
 8017de0:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 8017de2:	4b09      	ldr	r3, [pc, #36]	@ (8017e08 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8017de4:	789b      	ldrb	r3, [r3, #2]
 8017de6:	2b00      	cmp	r3, #0
 8017de8:	d003      	beq.n	8017df2 <Ble_Hci_Gap_Gatt_Init+0x14a>
  {
    ret = aci_gap_configure_whitelist();
 8017dea:	f7fd fb55 	bl	8015498 <aci_gap_configure_filter_accept_list>
 8017dee:	4603      	mov	r3, r0
 8017df0:	75fb      	strb	r3, [r7, #23]
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
}
 8017df2:	bf00      	nop
 8017df4:	371c      	adds	r7, #28
 8017df6:	46bd      	mov	sp, r7
 8017df8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017dfa:	bf00      	nop
 8017dfc:	080223e4 	.word	0x080223e4
 8017e00:	080223f4 	.word	0x080223f4
 8017e04:	08020168 	.word	0x08020168
 8017e08:	2000155c 	.word	0x2000155c
 8017e0c:	0001b207 	.word	0x0001b207

08017e10 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 8017e10:	b580      	push	{r7, lr}
 8017e12:	b08c      	sub	sp, #48	@ 0x30
 8017e14:	af08      	add	r7, sp, #32
 8017e16:	4603      	mov	r3, r0
 8017e18:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8017e1a:	2392      	movs	r3, #146	@ 0x92
 8017e1c:	73fb      	strb	r3, [r7, #15]

  BleApplicationContext.Device_Connection_Status = NewStatus;
 8017e1e:	4a12      	ldr	r2, [pc, #72]	@ (8017e68 <Adv_Request+0x58>)
 8017e20:	79fb      	ldrb	r3, [r7, #7]
 8017e22:	f882 3080 	strb.w	r3, [r2, #128]	@ 0x80
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_TYPE,
 8017e26:	2300      	movs	r3, #0
 8017e28:	9306      	str	r3, [sp, #24]
 8017e2a:	2300      	movs	r3, #0
 8017e2c:	9305      	str	r3, [sp, #20]
 8017e2e:	2300      	movs	r3, #0
 8017e30:	9304      	str	r3, [sp, #16]
 8017e32:	2300      	movs	r3, #0
 8017e34:	9303      	str	r3, [sp, #12]
 8017e36:	2300      	movs	r3, #0
 8017e38:	9302      	str	r3, [sp, #8]
 8017e3a:	2300      	movs	r3, #0
 8017e3c:	9301      	str	r3, [sp, #4]
 8017e3e:	2300      	movs	r3, #0
 8017e40:	9300      	str	r3, [sp, #0]
 8017e42:	2300      	movs	r3, #0
 8017e44:	22a0      	movs	r2, #160	@ 0xa0
 8017e46:	2180      	movs	r1, #128	@ 0x80
 8017e48:	2000      	movs	r0, #0
 8017e4a:	f7fc ff8d 	bl	8014d68 <aci_gap_set_discoverable>
 8017e4e:	4603      	mov	r3, r0
 8017e50:	73fb      	strb	r3, [r7, #15]
/* USER CODE BEGIN Adv_Request_1*/

/* USER CODE END Adv_Request_1*/

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_AdvData), (uint8_t*) a_AdvData);
 8017e52:	4906      	ldr	r1, [pc, #24]	@ (8017e6c <Adv_Request+0x5c>)
 8017e54:	200e      	movs	r0, #14
 8017e56:	f7fd faad 	bl	80153b4 <aci_gap_update_adv_data>
 8017e5a:	4603      	mov	r3, r0
 8017e5c:	73fb      	strb	r3, [r7, #15]
  else
  {
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
  }

  return;
 8017e5e:	bf00      	nop
}
 8017e60:	3710      	adds	r7, #16
 8017e62:	46bd      	mov	sp, r7
 8017e64:	bd80      	pop	{r7, pc}
 8017e66:	bf00      	nop
 8017e68:	2000155c 	.word	0x2000155c
 8017e6c:	200000c4 	.word	0x200000c4

08017e70 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 8017e70:	b580      	push	{r7, lr}
 8017e72:	b086      	sub	sp, #24
 8017e74:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 8017e76:	f7ff fda7 	bl	80179c8 <LL_FLASH_GetUDN>
 8017e7a:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 8017e7c:	693b      	ldr	r3, [r7, #16]
 8017e7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017e82:	d023      	beq.n	8017ecc <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 8017e84:	f7ff fdb8 	bl	80179f8 <LL_FLASH_GetSTCompanyID>
 8017e88:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 8017e8a:	f7ff fda9 	bl	80179e0 <LL_FLASH_GetDeviceID>
 8017e8e:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 8017e90:	693b      	ldr	r3, [r7, #16]
 8017e92:	b2da      	uxtb	r2, r3
 8017e94:	4b16      	ldr	r3, [pc, #88]	@ (8017ef0 <BleGetBdAddress+0x80>)
 8017e96:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 8017e98:	693b      	ldr	r3, [r7, #16]
 8017e9a:	0a1b      	lsrs	r3, r3, #8
 8017e9c:	b2da      	uxtb	r2, r3
 8017e9e:	4b14      	ldr	r3, [pc, #80]	@ (8017ef0 <BleGetBdAddress+0x80>)
 8017ea0:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 8017ea2:	687b      	ldr	r3, [r7, #4]
 8017ea4:	b2da      	uxtb	r2, r3
 8017ea6:	4b12      	ldr	r3, [pc, #72]	@ (8017ef0 <BleGetBdAddress+0x80>)
 8017ea8:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 8017eaa:	68bb      	ldr	r3, [r7, #8]
 8017eac:	b2da      	uxtb	r2, r3
 8017eae:	4b10      	ldr	r3, [pc, #64]	@ (8017ef0 <BleGetBdAddress+0x80>)
 8017eb0:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 8017eb2:	68bb      	ldr	r3, [r7, #8]
 8017eb4:	0a1b      	lsrs	r3, r3, #8
 8017eb6:	b2da      	uxtb	r2, r3
 8017eb8:	4b0d      	ldr	r3, [pc, #52]	@ (8017ef0 <BleGetBdAddress+0x80>)
 8017eba:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 8017ebc:	68bb      	ldr	r3, [r7, #8]
 8017ebe:	0c1b      	lsrs	r3, r3, #16
 8017ec0:	b2da      	uxtb	r2, r3
 8017ec2:	4b0b      	ldr	r3, [pc, #44]	@ (8017ef0 <BleGetBdAddress+0x80>)
 8017ec4:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 8017ec6:	4b0a      	ldr	r3, [pc, #40]	@ (8017ef0 <BleGetBdAddress+0x80>)
 8017ec8:	617b      	str	r3, [r7, #20]
 8017eca:	e00b      	b.n	8017ee4 <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 8017ecc:	2000      	movs	r0, #0
 8017ece:	f7fe ff9b 	bl	8016e08 <OTP_Read>
 8017ed2:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 8017ed4:	68fb      	ldr	r3, [r7, #12]
 8017ed6:	2b00      	cmp	r3, #0
 8017ed8:	d002      	beq.n	8017ee0 <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 8017eda:	68fb      	ldr	r3, [r7, #12]
 8017edc:	617b      	str	r3, [r7, #20]
 8017ede:	e001      	b.n	8017ee4 <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 8017ee0:	4b04      	ldr	r3, [pc, #16]	@ (8017ef4 <BleGetBdAddress+0x84>)
 8017ee2:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 8017ee4:	697b      	ldr	r3, [r7, #20]
}
 8017ee6:	4618      	mov	r0, r3
 8017ee8:	3718      	adds	r7, #24
 8017eea:	46bd      	mov	sp, r7
 8017eec:	bd80      	pop	{r7, pc}
 8017eee:	bf00      	nop
 8017ef0:	20001554 	.word	0x20001554
 8017ef4:	080223dc 	.word	0x080223dc

08017ef8 <Adv_Cancel>:
 *
 * SPECIFIC FUNCTIONS FOR CUSTOM
 *
 *************************************************************/
static void Adv_Cancel(void)
{
 8017ef8:	b580      	push	{r7, lr}
 8017efa:	b082      	sub	sp, #8
 8017efc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_1 */

  /* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 8017efe:	4b0a      	ldr	r3, [pc, #40]	@ (8017f28 <Adv_Cancel+0x30>)
 8017f00:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8017f04:	2b05      	cmp	r3, #5
 8017f06:	d00a      	beq.n	8017f1e <Adv_Cancel+0x26>
  {
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8017f08:	2392      	movs	r3, #146	@ 0x92
 8017f0a:	71fb      	strb	r3, [r7, #7]

    ret = aci_gap_set_non_discoverable();
 8017f0c:	f7fc ff08 	bl	8014d20 <aci_gap_set_non_discoverable>
 8017f10:	4603      	mov	r3, r0
 8017f12:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8017f14:	4b04      	ldr	r3, [pc, #16]	@ (8017f28 <Adv_Cancel+0x30>)
 8017f16:	2200      	movs	r2, #0
 8017f18:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* USER CODE BEGIN Adv_Cancel_2 */

  /* USER CODE END Adv_Cancel_2 */

  return;
 8017f1c:	bf00      	nop
 8017f1e:	bf00      	nop
}
 8017f20:	3708      	adds	r7, #8
 8017f22:	46bd      	mov	sp, r7
 8017f24:	bd80      	pop	{r7, pc}
 8017f26:	bf00      	nop
 8017f28:	2000155c 	.word	0x2000155c

08017f2c <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 8017f2c:	b580      	push	{r7, lr}
 8017f2e:	b082      	sub	sp, #8
 8017f30:	af00      	add	r7, sp, #0
 8017f32:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8017f34:	2100      	movs	r1, #0
 8017f36:	2002      	movs	r0, #2
 8017f38:	f001 fa76 	bl	8019428 <UTIL_SEQ_SetTask>

  return;
 8017f3c:	bf00      	nop
}
 8017f3e:	3708      	adds	r7, #8
 8017f40:	46bd      	mov	sp, r7
 8017f42:	bd80      	pop	{r7, pc}

08017f44 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 8017f44:	b580      	push	{r7, lr}
 8017f46:	b082      	sub	sp, #8
 8017f48:	af00      	add	r7, sp, #0
 8017f4a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8017f4c:	2001      	movs	r0, #1
 8017f4e:	f001 fad7 	bl	8019500 <UTIL_SEQ_SetEvt>

  return;
 8017f52:	bf00      	nop
}
 8017f54:	3708      	adds	r7, #8
 8017f56:	46bd      	mov	sp, r7
 8017f58:	bd80      	pop	{r7, pc}

08017f5a <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 8017f5a:	b580      	push	{r7, lr}
 8017f5c:	b082      	sub	sp, #8
 8017f5e:	af00      	add	r7, sp, #0
 8017f60:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8017f62:	2001      	movs	r0, #1
 8017f64:	f001 faec 	bl	8019540 <UTIL_SEQ_WaitEvt>

  return;
 8017f68:	bf00      	nop
}
 8017f6a:	3708      	adds	r7, #8
 8017f6c:	46bd      	mov	sp, r7
 8017f6e:	bd80      	pop	{r7, pc}

08017f70 <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 8017f70:	b580      	push	{r7, lr}
 8017f72:	b084      	sub	sp, #16
 8017f74:	af00      	add	r7, sp, #0
 8017f76:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 8017f78:	687b      	ldr	r3, [r7, #4]
 8017f7a:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 8017f7c:	68fb      	ldr	r3, [r7, #12]
 8017f7e:	685b      	ldr	r3, [r3, #4]
 8017f80:	3308      	adds	r3, #8
 8017f82:	4618      	mov	r0, r3
 8017f84:	f7fe f8de 	bl	8016144 <SVCCTL_UserEvtRx>
 8017f88:	4603      	mov	r3, r0
 8017f8a:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 8017f8c:	7afb      	ldrb	r3, [r7, #11]
 8017f8e:	2b00      	cmp	r3, #0
 8017f90:	d003      	beq.n	8017f9a <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 8017f92:	68fb      	ldr	r3, [r7, #12]
 8017f94:	2201      	movs	r2, #1
 8017f96:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 8017f98:	e003      	b.n	8017fa2 <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 8017f9a:	68fb      	ldr	r3, [r7, #12]
 8017f9c:	2200      	movs	r2, #0
 8017f9e:	701a      	strb	r2, [r3, #0]
  return;
 8017fa0:	bf00      	nop
}
 8017fa2:	3710      	adds	r7, #16
 8017fa4:	46bd      	mov	sp, r7
 8017fa6:	bd80      	pop	{r7, pc}

08017fa8 <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 8017fa8:	b580      	push	{r7, lr}
 8017faa:	b084      	sub	sp, #16
 8017fac:	af00      	add	r7, sp, #0
 8017fae:	4603      	mov	r3, r0
 8017fb0:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 8017fb2:	79fb      	ldrb	r3, [r7, #7]
 8017fb4:	2b00      	cmp	r3, #0
 8017fb6:	d002      	beq.n	8017fbe <BLE_StatusNot+0x16>
 8017fb8:	2b01      	cmp	r3, #1
 8017fba:	d006      	beq.n	8017fca <BLE_StatusNot+0x22>
      break;

    default:
      /* USER CODE BEGIN Status */
      /* USER CODE END Status */
      break;
 8017fbc:	e00b      	b.n	8017fd6 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8017fbe:	2307      	movs	r3, #7
 8017fc0:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 8017fc2:	68f8      	ldr	r0, [r7, #12]
 8017fc4:	f001 fa5c 	bl	8019480 <UTIL_SEQ_PauseTask>
      break;
 8017fc8:	e005      	b.n	8017fd6 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8017fca:	2307      	movs	r3, #7
 8017fcc:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 8017fce:	68f8      	ldr	r0, [r7, #12]
 8017fd0:	f001 fa76 	bl	80194c0 <UTIL_SEQ_ResumeTask>
      break;
 8017fd4:	bf00      	nop
  }

  return;
 8017fd6:	bf00      	nop
}
 8017fd8:	3710      	adds	r7, #16
 8017fda:	46bd      	mov	sp, r7
 8017fdc:	bd80      	pop	{r7, pc}

08017fde <Custom_STM_App_Notification>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void Custom_STM_App_Notification(Custom_STM_App_Notification_evt_t *pNotification)
{
 8017fde:	b480      	push	{r7}
 8017fe0:	b083      	sub	sp, #12
 8017fe2:	af00      	add	r7, sp, #0
 8017fe4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_1 */

  /* USER CODE END CUSTOM_STM_App_Notification_1 */
  switch (pNotification->Custom_Evt_Opcode)
 8017fe6:	687b      	ldr	r3, [r7, #4]
 8017fe8:	781b      	ldrb	r3, [r3, #0]
 8017fea:	2b00      	cmp	r3, #0
 8017fec:	d002      	beq.n	8017ff4 <Custom_STM_App_Notification+0x16>
 8017fee:	2b01      	cmp	r3, #1
 8017ff0:	d002      	beq.n	8017ff8 <Custom_STM_App_Notification+0x1a>

    default:
      /* USER CODE BEGIN CUSTOM_STM_App_Notification_default */

      /* USER CODE END CUSTOM_STM_App_Notification_default */
      break;
 8017ff2:	e002      	b.n	8017ffa <Custom_STM_App_Notification+0x1c>
      break;
 8017ff4:	bf00      	nop
 8017ff6:	e000      	b.n	8017ffa <Custom_STM_App_Notification+0x1c>
      break;
 8017ff8:	bf00      	nop
  }
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_2 */

  /* USER CODE END CUSTOM_STM_App_Notification_2 */
  return;
 8017ffa:	bf00      	nop
}
 8017ffc:	370c      	adds	r7, #12
 8017ffe:	46bd      	mov	sp, r7
 8018000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018004:	4770      	bx	lr

08018006 <Custom_APP_Notification>:

void Custom_APP_Notification(Custom_App_ConnHandle_Not_evt_t *pNotification)
{
 8018006:	b480      	push	{r7}
 8018008:	b083      	sub	sp, #12
 801800a:	af00      	add	r7, sp, #0
 801800c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_APP_Notification_1 */

  /* USER CODE END CUSTOM_APP_Notification_1 */

  switch (pNotification->Custom_Evt_Opcode)
 801800e:	687b      	ldr	r3, [r7, #4]
 8018010:	781b      	ldrb	r3, [r3, #0]
 8018012:	2b00      	cmp	r3, #0
 8018014:	d002      	beq.n	801801c <Custom_APP_Notification+0x16>
 8018016:	2b01      	cmp	r3, #1
 8018018:	d002      	beq.n	8018020 <Custom_APP_Notification+0x1a>

    default:
      /* USER CODE BEGIN CUSTOM_APP_Notification_default */

      /* USER CODE END CUSTOM_APP_Notification_default */
      break;
 801801a:	e002      	b.n	8018022 <Custom_APP_Notification+0x1c>
      break;
 801801c:	bf00      	nop
 801801e:	e000      	b.n	8018022 <Custom_APP_Notification+0x1c>
      break;
 8018020:	bf00      	nop

  /* USER CODE BEGIN CUSTOM_APP_Notification_2 */

  /* USER CODE END CUSTOM_APP_Notification_2 */

  return;
 8018022:	bf00      	nop
}
 8018024:	370c      	adds	r7, #12
 8018026:	46bd      	mov	sp, r7
 8018028:	f85d 7b04 	ldr.w	r7, [sp], #4
 801802c:	4770      	bx	lr

0801802e <Custom_APP_Init>:

void Custom_APP_Init(void)
{
 801802e:	b480      	push	{r7}
 8018030:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CUSTOM_APP_Init */

  /* USER CODE END CUSTOM_APP_Init */
  return;
 8018032:	bf00      	nop
}
 8018034:	46bd      	mov	sp, r7
 8018036:	f85d 7b04 	ldr.w	r7, [sp], #4
 801803a:	4770      	bx	lr

0801803c <Custom_STM_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Custom_STM_Event_Handler(void *Event)
{
 801803c:	b580      	push	{r7, lr}
 801803e:	b08c      	sub	sp, #48	@ 0x30
 8018040:	af00      	add	r7, sp, #0
 8018042:	6078      	str	r0, [r7, #4]
  Custom_STM_App_Notification_evt_t     Notification;
  /* USER CODE BEGIN Custom_STM_Event_Handler_1 */

  /* USER CODE END Custom_STM_Event_Handler_1 */

  return_value = SVCCTL_EvtNotAck;
 8018044:	2300      	movs	r3, #0
 8018046:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 801804a:	687b      	ldr	r3, [r7, #4]
 801804c:	3301      	adds	r3, #1
 801804e:	62bb      	str	r3, [r7, #40]	@ 0x28

  switch (event_pckt->evt)
 8018050:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018052:	781b      	ldrb	r3, [r3, #0]
 8018054:	2bff      	cmp	r3, #255	@ 0xff
 8018056:	d16d      	bne.n	8018134 <Custom_STM_Event_Handler+0xf8>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 8018058:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801805a:	3302      	adds	r3, #2
 801805c:	627b      	str	r3, [r7, #36]	@ 0x24
      switch (blecore_evt->ecode)
 801805e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018060:	881b      	ldrh	r3, [r3, #0]
 8018062:	b29b      	uxth	r3, r3
 8018064:	f6a3 4301 	subw	r3, r3, #3073	@ 0xc01
 8018068:	2b1a      	cmp	r3, #26
 801806a:	d85f      	bhi.n	801812c <Custom_STM_Event_Handler+0xf0>
 801806c:	a201      	add	r2, pc, #4	@ (adr r2, 8018074 <Custom_STM_Event_Handler+0x38>)
 801806e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018072:	bf00      	nop
 8018074:	080180e1 	.word	0x080180e1
 8018078:	0801812d 	.word	0x0801812d
 801807c:	0801812d 	.word	0x0801812d
 8018080:	0801812d 	.word	0x0801812d
 8018084:	0801812d 	.word	0x0801812d
 8018088:	0801812d 	.word	0x0801812d
 801808c:	0801812d 	.word	0x0801812d
 8018090:	0801812d 	.word	0x0801812d
 8018094:	0801812d 	.word	0x0801812d
 8018098:	0801812d 	.word	0x0801812d
 801809c:	0801812d 	.word	0x0801812d
 80180a0:	0801812d 	.word	0x0801812d
 80180a4:	0801812d 	.word	0x0801812d
 80180a8:	0801812d 	.word	0x0801812d
 80180ac:	0801812d 	.word	0x0801812d
 80180b0:	0801812d 	.word	0x0801812d
 80180b4:	0801812d 	.word	0x0801812d
 80180b8:	0801812d 	.word	0x0801812d
 80180bc:	0801812d 	.word	0x0801812d
 80180c0:	0801812d 	.word	0x0801812d
 80180c4:	0801812d 	.word	0x0801812d
 80180c8:	0801812d 	.word	0x0801812d
 80180cc:	0801812d 	.word	0x0801812d
 80180d0:	0801812d 	.word	0x0801812d
 80180d4:	0801812d 	.word	0x0801812d
 80180d8:	0801812d 	.word	0x0801812d
 80180dc:	0801810f 	.word	0x0801810f
      {
        case ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE:
          /* USER CODE BEGIN EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_BEGIN */

          /* USER CODE END EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_BEGIN */
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 80180e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80180e2:	3302      	adds	r3, #2
 80180e4:	61fb      	str	r3, [r7, #28]
          if (attribute_modified->Attr_Handle == (CustomContext.CustomCharwriteHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 80180e6:	69fb      	ldr	r3, [r7, #28]
 80180e8:	885b      	ldrh	r3, [r3, #2]
 80180ea:	b29b      	uxth	r3, r3
 80180ec:	461a      	mov	r2, r3
 80180ee:	4b15      	ldr	r3, [pc, #84]	@ (8018144 <Custom_STM_Event_Handler+0x108>)
 80180f0:	885b      	ldrh	r3, [r3, #2]
 80180f2:	3301      	adds	r3, #1
 80180f4:	429a      	cmp	r2, r3
 80180f6:	d11b      	bne.n	8018130 <Custom_STM_Event_Handler+0xf4>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 80180f8:	2301      	movs	r3, #1
 80180fa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_1_ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE */
            memcpy((char *) blereceivebuf,(char *)attribute_modified->Attr_Data,64);
 80180fe:	69fb      	ldr	r3, [r7, #28]
 8018100:	3308      	adds	r3, #8
 8018102:	2240      	movs	r2, #64	@ 0x40
 8018104:	4619      	mov	r1, r3
 8018106:	4810      	ldr	r0, [pc, #64]	@ (8018148 <Custom_STM_Event_Handler+0x10c>)
 8018108:	f003 fb1f 	bl	801b74a <memcpy>
            /* USER CODE END CUSTOM_STM_Service_1_Char_1_ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE */
          } /* if (attribute_modified->Attr_Handle == (CustomContext.CustomCharwriteHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))*/
          /* USER CODE BEGIN EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_END */

          /* USER CODE END EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_END */
          break;
 801810c:	e010      	b.n	8018130 <Custom_STM_Event_Handler+0xf4>
		case ACI_GATT_NOTIFICATION_COMPLETE_VSEVT_CODE:
        {
          /* USER CODE BEGIN EVT_BLUE_GATT_NOTIFICATION_COMPLETE_BEGIN */

          /* USER CODE END EVT_BLUE_GATT_NOTIFICATION_COMPLETE_BEGIN */
          notification_complete = (aci_gatt_notification_complete_event_rp0*)blecore_evt->data;
 801810e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018110:	3302      	adds	r3, #2
 8018112:	623b      	str	r3, [r7, #32]
          Notification.Custom_Evt_Opcode = CUSTOM_STM_NOTIFICATION_COMPLETE_EVT;
 8018114:	2301      	movs	r3, #1
 8018116:	723b      	strb	r3, [r7, #8]
          Notification.AttrHandle = notification_complete->Attr_Handle;
 8018118:	6a3b      	ldr	r3, [r7, #32]
 801811a:	881b      	ldrh	r3, [r3, #0]
 801811c:	b29b      	uxth	r3, r3
 801811e:	833b      	strh	r3, [r7, #24]
          Custom_STM_App_Notification(&Notification);
 8018120:	f107 0308 	add.w	r3, r7, #8
 8018124:	4618      	mov	r0, r3
 8018126:	f7ff ff5a 	bl	8017fde <Custom_STM_App_Notification>
          /* USER CODE BEGIN EVT_BLUE_GATT_NOTIFICATION_COMPLETE_END */

          /* USER CODE END EVT_BLUE_GATT_NOTIFICATION_COMPLETE_END */
          break;
 801812a:	e002      	b.n	8018132 <Custom_STM_Event_Handler+0xf6>
        /* USER CODE END BLECORE_EVT */
        default:
          /* USER CODE BEGIN EVT_DEFAULT */

          /* USER CODE END EVT_DEFAULT */
          break;
 801812c:	bf00      	nop
 801812e:	e002      	b.n	8018136 <Custom_STM_Event_Handler+0xfa>
          break;
 8018130:	bf00      	nop
      }
      /* USER CODE BEGIN EVT_VENDOR*/

      /* USER CODE END EVT_VENDOR*/
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8018132:	e000      	b.n	8018136 <Custom_STM_Event_Handler+0xfa>

    default:
      /* USER CODE BEGIN EVENT_PCKT*/

      /* USER CODE END EVENT_PCKT*/
      break;
 8018134:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_Event_Handler_2 */

  /* USER CODE END Custom_STM_Event_Handler_2 */

  return(return_value);
 8018136:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}/* end Custom_STM_Event_Handler */
 801813a:	4618      	mov	r0, r3
 801813c:	3730      	adds	r7, #48	@ 0x30
 801813e:	46bd      	mov	sp, r7
 8018140:	bd80      	pop	{r7, pc}
 8018142:	bf00      	nop
 8018144:	200015e4 	.word	0x200015e4
 8018148:	20000bc0 	.word	0x20000bc0

0801814c <SVCCTL_InitCustomSvc>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void SVCCTL_InitCustomSvc(void)
{
 801814c:	b580      	push	{r7, lr}
 801814e:	b08c      	sub	sp, #48	@ 0x30
 8018150:	af06      	add	r7, sp, #24

  Char_UUID_t  uuid;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8018152:	2392      	movs	r3, #146	@ 0x92
 8018154:	75fb      	strb	r3, [r7, #23]
  /* USER CODE END SVCCTL_InitCustomSvc_1 */

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(Custom_STM_Event_Handler);
 8018156:	4834      	ldr	r0, [pc, #208]	@ (8018228 <SVCCTL_InitCustomSvc+0xdc>)
 8018158:	f7fd ffda 	bl	8016110 <SVCCTL_RegisterSvcHandler>
   *                              = 3
   *
   * This value doesn't take into account number of descriptors manually added
   * In case of descriptors added, please update the max_attr_record value accordingly in the next SVCCTL_InitService User Section
   */
  max_attr_record = 3;
 801815c:	2303      	movs	r3, #3
 801815e:	75bb      	strb	r3, [r7, #22]
  /* USER CODE BEGIN SVCCTL_InitService */
  /* max_attr_record to be updated if descriptors have been added */

  /* USER CODE END SVCCTL_InitService */

  COPY_BPSERVICE_UUID(uuid.Char_UUID_128);
 8018160:	238f      	movs	r3, #143	@ 0x8f
 8018162:	713b      	strb	r3, [r7, #4]
 8018164:	23e5      	movs	r3, #229	@ 0xe5
 8018166:	717b      	strb	r3, [r7, #5]
 8018168:	23b3      	movs	r3, #179	@ 0xb3
 801816a:	71bb      	strb	r3, [r7, #6]
 801816c:	23d5      	movs	r3, #213	@ 0xd5
 801816e:	71fb      	strb	r3, [r7, #7]
 8018170:	232e      	movs	r3, #46	@ 0x2e
 8018172:	723b      	strb	r3, [r7, #8]
 8018174:	237f      	movs	r3, #127	@ 0x7f
 8018176:	727b      	strb	r3, [r7, #9]
 8018178:	234a      	movs	r3, #74	@ 0x4a
 801817a:	72bb      	strb	r3, [r7, #10]
 801817c:	2398      	movs	r3, #152	@ 0x98
 801817e:	72fb      	strb	r3, [r7, #11]
 8018180:	232a      	movs	r3, #42	@ 0x2a
 8018182:	733b      	strb	r3, [r7, #12]
 8018184:	2348      	movs	r3, #72	@ 0x48
 8018186:	737b      	strb	r3, [r7, #13]
 8018188:	237a      	movs	r3, #122	@ 0x7a
 801818a:	73bb      	strb	r3, [r7, #14]
 801818c:	23cc      	movs	r3, #204	@ 0xcc
 801818e:	73fb      	strb	r3, [r7, #15]
 8018190:	2300      	movs	r3, #0
 8018192:	743b      	strb	r3, [r7, #16]
 8018194:	2300      	movs	r3, #0
 8018196:	747b      	strb	r3, [r7, #17]
 8018198:	2300      	movs	r3, #0
 801819a:	74bb      	strb	r3, [r7, #18]
 801819c:	2300      	movs	r3, #0
 801819e:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_service(UUID_TYPE_128,
 80181a0:	7dbb      	ldrb	r3, [r7, #22]
 80181a2:	1d39      	adds	r1, r7, #4
 80181a4:	4a21      	ldr	r2, [pc, #132]	@ (801822c <SVCCTL_InitCustomSvc+0xe0>)
 80181a6:	9200      	str	r2, [sp, #0]
 80181a8:	2201      	movs	r2, #1
 80181aa:	2002      	movs	r0, #2
 80181ac:	f7fd fa24 	bl	80155f8 <aci_gatt_add_service>
 80181b0:	4603      	mov	r3, r0
 80181b2:	75fb      	strb	r3, [r7, #23]
  }

  /**
   *  charWrite
   */
  COPY_CHARWRITE_UUID(uuid.Char_UUID_128);
 80181b4:	2319      	movs	r3, #25
 80181b6:	713b      	strb	r3, [r7, #4]
 80181b8:	23ed      	movs	r3, #237	@ 0xed
 80181ba:	717b      	strb	r3, [r7, #5]
 80181bc:	2382      	movs	r3, #130	@ 0x82
 80181be:	71bb      	strb	r3, [r7, #6]
 80181c0:	23ae      	movs	r3, #174	@ 0xae
 80181c2:	71fb      	strb	r3, [r7, #7]
 80181c4:	23ed      	movs	r3, #237	@ 0xed
 80181c6:	723b      	strb	r3, [r7, #8]
 80181c8:	2321      	movs	r3, #33	@ 0x21
 80181ca:	727b      	strb	r3, [r7, #9]
 80181cc:	234c      	movs	r3, #76	@ 0x4c
 80181ce:	72bb      	strb	r3, [r7, #10]
 80181d0:	239d      	movs	r3, #157	@ 0x9d
 80181d2:	72fb      	strb	r3, [r7, #11]
 80181d4:	2341      	movs	r3, #65	@ 0x41
 80181d6:	733b      	strb	r3, [r7, #12]
 80181d8:	2345      	movs	r3, #69	@ 0x45
 80181da:	737b      	strb	r3, [r7, #13]
 80181dc:	2322      	movs	r3, #34	@ 0x22
 80181de:	73bb      	strb	r3, [r7, #14]
 80181e0:	238e      	movs	r3, #142	@ 0x8e
 80181e2:	73fb      	strb	r3, [r7, #15]
 80181e4:	2300      	movs	r3, #0
 80181e6:	743b      	strb	r3, [r7, #16]
 80181e8:	2300      	movs	r3, #0
 80181ea:	747b      	strb	r3, [r7, #17]
 80181ec:	2300      	movs	r3, #0
 80181ee:	74bb      	strb	r3, [r7, #18]
 80181f0:	2300      	movs	r3, #0
 80181f2:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomBpserviceHdle,
 80181f4:	4b0d      	ldr	r3, [pc, #52]	@ (801822c <SVCCTL_InitCustomSvc+0xe0>)
 80181f6:	8818      	ldrh	r0, [r3, #0]
 80181f8:	4b0d      	ldr	r3, [pc, #52]	@ (8018230 <SVCCTL_InitCustomSvc+0xe4>)
 80181fa:	881b      	ldrh	r3, [r3, #0]
 80181fc:	1d3a      	adds	r2, r7, #4
 80181fe:	490d      	ldr	r1, [pc, #52]	@ (8018234 <SVCCTL_InitCustomSvc+0xe8>)
 8018200:	9105      	str	r1, [sp, #20]
 8018202:	2100      	movs	r1, #0
 8018204:	9104      	str	r1, [sp, #16]
 8018206:	2110      	movs	r1, #16
 8018208:	9103      	str	r1, [sp, #12]
 801820a:	2101      	movs	r1, #1
 801820c:	9102      	str	r1, [sp, #8]
 801820e:	2100      	movs	r1, #0
 8018210:	9101      	str	r1, [sp, #4]
 8018212:	2108      	movs	r1, #8
 8018214:	9100      	str	r1, [sp, #0]
 8018216:	2102      	movs	r1, #2
 8018218:	f7fd fac4 	bl	80157a4 <aci_gatt_add_char>
 801821c:	4603      	mov	r3, r0
 801821e:	75fb      	strb	r3, [r7, #23]

  /* USER CODE BEGIN SVCCTL_InitCustomSvc_2 */

  /* USER CODE END SVCCTL_InitCustomSvc_2 */

  return;
 8018220:	bf00      	nop
}
 8018222:	3718      	adds	r7, #24
 8018224:	46bd      	mov	sp, r7
 8018226:	bd80      	pop	{r7, pc}
 8018228:	0801803d 	.word	0x0801803d
 801822c:	200015e4 	.word	0x200015e4
 8018230:	200000d2 	.word	0x200000d2
 8018234:	200015e6 	.word	0x200015e6

08018238 <LL_PWR_EnableBootC2>:
{
 8018238:	b480      	push	{r7}
 801823a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 801823c:	4b05      	ldr	r3, [pc, #20]	@ (8018254 <LL_PWR_EnableBootC2+0x1c>)
 801823e:	68db      	ldr	r3, [r3, #12]
 8018240:	4a04      	ldr	r2, [pc, #16]	@ (8018254 <LL_PWR_EnableBootC2+0x1c>)
 8018242:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8018246:	60d3      	str	r3, [r2, #12]
}
 8018248:	bf00      	nop
 801824a:	46bd      	mov	sp, r7
 801824c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018250:	4770      	bx	lr
 8018252:	bf00      	nop
 8018254:	58000400 	.word	0x58000400

08018258 <LL_C2_EXTI_EnableEvent_32_63>:
{
 8018258:	b480      	push	{r7}
 801825a:	b083      	sub	sp, #12
 801825c:	af00      	add	r7, sp, #0
 801825e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 8018260:	4b06      	ldr	r3, [pc, #24]	@ (801827c <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8018262:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8018266:	4905      	ldr	r1, [pc, #20]	@ (801827c <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8018268:	687b      	ldr	r3, [r7, #4]
 801826a:	4313      	orrs	r3, r2
 801826c:	f8c1 30d4 	str.w	r3, [r1, #212]	@ 0xd4
}
 8018270:	bf00      	nop
 8018272:	370c      	adds	r7, #12
 8018274:	46bd      	mov	sp, r7
 8018276:	f85d 7b04 	ldr.w	r7, [sp], #4
 801827a:	4770      	bx	lr
 801827c:	58000800 	.word	0x58000800

08018280 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8018280:	b480      	push	{r7}
 8018282:	b083      	sub	sp, #12
 8018284:	af00      	add	r7, sp, #0
 8018286:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8018288:	4b05      	ldr	r3, [pc, #20]	@ (80182a0 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 801828a:	6a1a      	ldr	r2, [r3, #32]
 801828c:	4904      	ldr	r1, [pc, #16]	@ (80182a0 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 801828e:	687b      	ldr	r3, [r7, #4]
 8018290:	4313      	orrs	r3, r2
 8018292:	620b      	str	r3, [r1, #32]
}
 8018294:	bf00      	nop
 8018296:	370c      	adds	r7, #12
 8018298:	46bd      	mov	sp, r7
 801829a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801829e:	4770      	bx	lr
 80182a0:	58000800 	.word	0x58000800

080182a4 <LL_AHB3_GRP1_EnableClock>:
{
 80182a4:	b480      	push	{r7}
 80182a6:	b085      	sub	sp, #20
 80182a8:	af00      	add	r7, sp, #0
 80182aa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 80182ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80182b0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80182b2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80182b6:	687b      	ldr	r3, [r7, #4]
 80182b8:	4313      	orrs	r3, r2
 80182ba:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80182bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80182c0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80182c2:	687b      	ldr	r3, [r7, #4]
 80182c4:	4013      	ands	r3, r2
 80182c6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80182c8:	68fb      	ldr	r3, [r7, #12]
}
 80182ca:	bf00      	nop
 80182cc:	3714      	adds	r7, #20
 80182ce:	46bd      	mov	sp, r7
 80182d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80182d4:	4770      	bx	lr

080182d6 <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 80182d6:	b480      	push	{r7}
 80182d8:	b085      	sub	sp, #20
 80182da:	af00      	add	r7, sp, #0
 80182dc:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 80182de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80182e2:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 80182e6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80182ea:	687b      	ldr	r3, [r7, #4]
 80182ec:	4313      	orrs	r3, r2
 80182ee:	f8c1 3150 	str.w	r3, [r1, #336]	@ 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 80182f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80182f6:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 80182fa:	687b      	ldr	r3, [r7, #4]
 80182fc:	4013      	ands	r3, r2
 80182fe:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8018300:	68fb      	ldr	r3, [r7, #12]
}
 8018302:	bf00      	nop
 8018304:	3714      	adds	r7, #20
 8018306:	46bd      	mov	sp, r7
 8018308:	f85d 7b04 	ldr.w	r7, [sp], #4
 801830c:	4770      	bx	lr

0801830e <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 801830e:	b480      	push	{r7}
 8018310:	b083      	sub	sp, #12
 8018312:	af00      	add	r7, sp, #0
 8018314:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 8018316:	687b      	ldr	r3, [r7, #4]
 8018318:	681b      	ldr	r3, [r3, #0]
 801831a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 801831e:	687b      	ldr	r3, [r7, #4]
 8018320:	601a      	str	r2, [r3, #0]
}
 8018322:	bf00      	nop
 8018324:	370c      	adds	r7, #12
 8018326:	46bd      	mov	sp, r7
 8018328:	f85d 7b04 	ldr.w	r7, [sp], #4
 801832c:	4770      	bx	lr

0801832e <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 801832e:	b480      	push	{r7}
 8018330:	b083      	sub	sp, #12
 8018332:	af00      	add	r7, sp, #0
 8018334:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 8018336:	687b      	ldr	r3, [r7, #4]
 8018338:	681b      	ldr	r3, [r3, #0]
 801833a:	f043 0201 	orr.w	r2, r3, #1
 801833e:	687b      	ldr	r3, [r7, #4]
 8018340:	601a      	str	r2, [r3, #0]
}
 8018342:	bf00      	nop
 8018344:	370c      	adds	r7, #12
 8018346:	46bd      	mov	sp, r7
 8018348:	f85d 7b04 	ldr.w	r7, [sp], #4
 801834c:	4770      	bx	lr

0801834e <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 801834e:	b480      	push	{r7}
 8018350:	b083      	sub	sp, #12
 8018352:	af00      	add	r7, sp, #0
 8018354:	6078      	str	r0, [r7, #4]
 8018356:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8018358:	687b      	ldr	r3, [r7, #4]
 801835a:	685a      	ldr	r2, [r3, #4]
 801835c:	683b      	ldr	r3, [r7, #0]
 801835e:	041b      	lsls	r3, r3, #16
 8018360:	43db      	mvns	r3, r3
 8018362:	401a      	ands	r2, r3
 8018364:	687b      	ldr	r3, [r7, #4]
 8018366:	605a      	str	r2, [r3, #4]
}
 8018368:	bf00      	nop
 801836a:	370c      	adds	r7, #12
 801836c:	46bd      	mov	sp, r7
 801836e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018372:	4770      	bx	lr

08018374 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8018374:	b480      	push	{r7}
 8018376:	b083      	sub	sp, #12
 8018378:	af00      	add	r7, sp, #0
 801837a:	6078      	str	r0, [r7, #4]
 801837c:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 801837e:	687b      	ldr	r3, [r7, #4]
 8018380:	685a      	ldr	r2, [r3, #4]
 8018382:	683b      	ldr	r3, [r7, #0]
 8018384:	041b      	lsls	r3, r3, #16
 8018386:	431a      	orrs	r2, r3
 8018388:	687b      	ldr	r3, [r7, #4]
 801838a:	605a      	str	r2, [r3, #4]
}
 801838c:	bf00      	nop
 801838e:	370c      	adds	r7, #12
 8018390:	46bd      	mov	sp, r7
 8018392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018396:	4770      	bx	lr

08018398 <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8018398:	b480      	push	{r7}
 801839a:	b083      	sub	sp, #12
 801839c:	af00      	add	r7, sp, #0
 801839e:	6078      	str	r0, [r7, #4]
 80183a0:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 80183a2:	687b      	ldr	r3, [r7, #4]
 80183a4:	685a      	ldr	r2, [r3, #4]
 80183a6:	683b      	ldr	r3, [r7, #0]
 80183a8:	43db      	mvns	r3, r3
 80183aa:	401a      	ands	r2, r3
 80183ac:	687b      	ldr	r3, [r7, #4]
 80183ae:	605a      	str	r2, [r3, #4]
}
 80183b0:	bf00      	nop
 80183b2:	370c      	adds	r7, #12
 80183b4:	46bd      	mov	sp, r7
 80183b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80183ba:	4770      	bx	lr

080183bc <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80183bc:	b480      	push	{r7}
 80183be:	b083      	sub	sp, #12
 80183c0:	af00      	add	r7, sp, #0
 80183c2:	6078      	str	r0, [r7, #4]
 80183c4:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 80183c6:	687b      	ldr	r3, [r7, #4]
 80183c8:	683a      	ldr	r2, [r7, #0]
 80183ca:	609a      	str	r2, [r3, #8]
}
 80183cc:	bf00      	nop
 80183ce:	370c      	adds	r7, #12
 80183d0:	46bd      	mov	sp, r7
 80183d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80183d6:	4770      	bx	lr

080183d8 <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80183d8:	b480      	push	{r7}
 80183da:	b083      	sub	sp, #12
 80183dc:	af00      	add	r7, sp, #0
 80183de:	6078      	str	r0, [r7, #4]
 80183e0:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 80183e2:	683b      	ldr	r3, [r7, #0]
 80183e4:	041a      	lsls	r2, r3, #16
 80183e6:	687b      	ldr	r3, [r7, #4]
 80183e8:	609a      	str	r2, [r3, #8]
}
 80183ea:	bf00      	nop
 80183ec:	370c      	adds	r7, #12
 80183ee:	46bd      	mov	sp, r7
 80183f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80183f4:	4770      	bx	lr

080183f6 <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 80183f6:	b480      	push	{r7}
 80183f8:	b083      	sub	sp, #12
 80183fa:	af00      	add	r7, sp, #0
 80183fc:	6078      	str	r0, [r7, #4]
 80183fe:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8018400:	687b      	ldr	r3, [r7, #4]
 8018402:	68da      	ldr	r2, [r3, #12]
 8018404:	683b      	ldr	r3, [r7, #0]
 8018406:	4013      	ands	r3, r2
 8018408:	683a      	ldr	r2, [r7, #0]
 801840a:	429a      	cmp	r2, r3
 801840c:	d101      	bne.n	8018412 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 801840e:	2301      	movs	r3, #1
 8018410:	e000      	b.n	8018414 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 8018412:	2300      	movs	r3, #0
}
 8018414:	4618      	mov	r0, r3
 8018416:	370c      	adds	r7, #12
 8018418:	46bd      	mov	sp, r7
 801841a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801841e:	4770      	bx	lr

08018420 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8018420:	b480      	push	{r7}
 8018422:	b083      	sub	sp, #12
 8018424:	af00      	add	r7, sp, #0
 8018426:	6078      	str	r0, [r7, #4]
 8018428:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 801842a:	687b      	ldr	r3, [r7, #4]
 801842c:	69da      	ldr	r2, [r3, #28]
 801842e:	683b      	ldr	r3, [r7, #0]
 8018430:	4013      	ands	r3, r2
 8018432:	683a      	ldr	r2, [r7, #0]
 8018434:	429a      	cmp	r2, r3
 8018436:	d101      	bne.n	801843c <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 8018438:	2301      	movs	r3, #1
 801843a:	e000      	b.n	801843e <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 801843c:	2300      	movs	r3, #0
}
 801843e:	4618      	mov	r0, r3
 8018440:	370c      	adds	r7, #12
 8018442:	46bd      	mov	sp, r7
 8018444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018448:	4770      	bx	lr
	...

0801844c <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 801844c:	b580      	push	{r7, lr}
 801844e:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 8018450:	2102      	movs	r1, #2
 8018452:	4818      	ldr	r0, [pc, #96]	@ (80184b4 <HW_IPCC_Rx_Handler+0x68>)
 8018454:	f7ff ffe4 	bl	8018420 <LL_C2_IPCC_IsActiveFlag_CHx>
 8018458:	4603      	mov	r3, r0
 801845a:	2b00      	cmp	r3, #0
 801845c:	d008      	beq.n	8018470 <HW_IPCC_Rx_Handler+0x24>
 801845e:	4b15      	ldr	r3, [pc, #84]	@ (80184b4 <HW_IPCC_Rx_Handler+0x68>)
 8018460:	685b      	ldr	r3, [r3, #4]
 8018462:	f003 0302 	and.w	r3, r3, #2
 8018466:	2b00      	cmp	r3, #0
 8018468:	d102      	bne.n	8018470 <HW_IPCC_Rx_Handler+0x24>
  {
      HW_IPCC_SYS_EvtHandler();
 801846a:	f000 f8d5 	bl	8018618 <HW_IPCC_SYS_EvtHandler>
 801846e:	e01e      	b.n	80184ae <HW_IPCC_Rx_Handler+0x62>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 8018470:	2101      	movs	r1, #1
 8018472:	4810      	ldr	r0, [pc, #64]	@ (80184b4 <HW_IPCC_Rx_Handler+0x68>)
 8018474:	f7ff ffd4 	bl	8018420 <LL_C2_IPCC_IsActiveFlag_CHx>
 8018478:	4603      	mov	r3, r0
 801847a:	2b00      	cmp	r3, #0
 801847c:	d008      	beq.n	8018490 <HW_IPCC_Rx_Handler+0x44>
 801847e:	4b0d      	ldr	r3, [pc, #52]	@ (80184b4 <HW_IPCC_Rx_Handler+0x68>)
 8018480:	685b      	ldr	r3, [r3, #4]
 8018482:	f003 0301 	and.w	r3, r3, #1
 8018486:	2b00      	cmp	r3, #0
 8018488:	d102      	bne.n	8018490 <HW_IPCC_Rx_Handler+0x44>
  {
    HW_IPCC_BLE_EvtHandler();
 801848a:	f000 f889 	bl	80185a0 <HW_IPCC_BLE_EvtHandler>
 801848e:	e00e      	b.n	80184ae <HW_IPCC_Rx_Handler+0x62>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 8018490:	2108      	movs	r1, #8
 8018492:	4808      	ldr	r0, [pc, #32]	@ (80184b4 <HW_IPCC_Rx_Handler+0x68>)
 8018494:	f7ff ffc4 	bl	8018420 <LL_C2_IPCC_IsActiveFlag_CHx>
 8018498:	4603      	mov	r3, r0
 801849a:	2b00      	cmp	r3, #0
 801849c:	d008      	beq.n	80184b0 <HW_IPCC_Rx_Handler+0x64>
 801849e:	4b05      	ldr	r3, [pc, #20]	@ (80184b4 <HW_IPCC_Rx_Handler+0x68>)
 80184a0:	685b      	ldr	r3, [r3, #4]
 80184a2:	f003 0308 	and.w	r3, r3, #8
 80184a6:	2b00      	cmp	r3, #0
 80184a8:	d102      	bne.n	80184b0 <HW_IPCC_Rx_Handler+0x64>
  {
    HW_IPCC_TRACES_EvtHandler();
 80184aa:	f000 f901 	bl	80186b0 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 80184ae:	bf00      	nop
 80184b0:	bf00      	nop
}
 80184b2:	bd80      	pop	{r7, pc}
 80184b4:	58000c00 	.word	0x58000c00

080184b8 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 80184b8:	b580      	push	{r7, lr}
 80184ba:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 80184bc:	2102      	movs	r1, #2
 80184be:	4818      	ldr	r0, [pc, #96]	@ (8018520 <HW_IPCC_Tx_Handler+0x68>)
 80184c0:	f7ff ff99 	bl	80183f6 <LL_C1_IPCC_IsActiveFlag_CHx>
 80184c4:	4603      	mov	r3, r0
 80184c6:	2b00      	cmp	r3, #0
 80184c8:	d108      	bne.n	80184dc <HW_IPCC_Tx_Handler+0x24>
 80184ca:	4b15      	ldr	r3, [pc, #84]	@ (8018520 <HW_IPCC_Tx_Handler+0x68>)
 80184cc:	685b      	ldr	r3, [r3, #4]
 80184ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80184d2:	2b00      	cmp	r3, #0
 80184d4:	d102      	bne.n	80184dc <HW_IPCC_Tx_Handler+0x24>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 80184d6:	f000 f893 	bl	8018600 <HW_IPCC_SYS_CmdEvtHandler>
 80184da:	e01e      	b.n	801851a <HW_IPCC_Tx_Handler+0x62>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 80184dc:	2108      	movs	r1, #8
 80184de:	4810      	ldr	r0, [pc, #64]	@ (8018520 <HW_IPCC_Tx_Handler+0x68>)
 80184e0:	f7ff ff89 	bl	80183f6 <LL_C1_IPCC_IsActiveFlag_CHx>
 80184e4:	4603      	mov	r3, r0
 80184e6:	2b00      	cmp	r3, #0
 80184e8:	d108      	bne.n	80184fc <HW_IPCC_Tx_Handler+0x44>
 80184ea:	4b0d      	ldr	r3, [pc, #52]	@ (8018520 <HW_IPCC_Tx_Handler+0x68>)
 80184ec:	685b      	ldr	r3, [r3, #4]
 80184ee:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80184f2:	2b00      	cmp	r3, #0
 80184f4:	d102      	bne.n	80184fc <HW_IPCC_Tx_Handler+0x44>
  {
    HW_IPCC_MM_FreeBufHandler();
 80184f6:	f000 f8bd 	bl	8018674 <HW_IPCC_MM_FreeBufHandler>
 80184fa:	e00e      	b.n	801851a <HW_IPCC_Tx_Handler+0x62>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 80184fc:	2120      	movs	r1, #32
 80184fe:	4808      	ldr	r0, [pc, #32]	@ (8018520 <HW_IPCC_Tx_Handler+0x68>)
 8018500:	f7ff ff79 	bl	80183f6 <LL_C1_IPCC_IsActiveFlag_CHx>
 8018504:	4603      	mov	r3, r0
 8018506:	2b00      	cmp	r3, #0
 8018508:	d108      	bne.n	801851c <HW_IPCC_Tx_Handler+0x64>
 801850a:	4b05      	ldr	r3, [pc, #20]	@ (8018520 <HW_IPCC_Tx_Handler+0x68>)
 801850c:	685b      	ldr	r3, [r3, #4]
 801850e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8018512:	2b00      	cmp	r3, #0
 8018514:	d102      	bne.n	801851c <HW_IPCC_Tx_Handler+0x64>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 8018516:	f000 f84f 	bl	80185b8 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 801851a:	bf00      	nop
 801851c:	bf00      	nop
}
 801851e:	bd80      	pop	{r7, pc}
 8018520:	58000c00 	.word	0x58000c00

08018524 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8018524:	b580      	push	{r7, lr}
 8018526:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 8018528:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 801852c:	f7ff fed3 	bl	80182d6 <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 8018530:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8018534:	f7ff fea4 	bl	8018280 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 8018538:	f44f 7000 	mov.w	r0, #512	@ 0x200
 801853c:	f7ff fe8c 	bl	8018258 <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 8018540:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 8018542:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 8018544:	f7ff fe78 	bl	8018238 <LL_PWR_EnableBootC2>

  return;
 8018548:	bf00      	nop
}
 801854a:	bd80      	pop	{r7, pc}

0801854c <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 801854c:	b580      	push	{r7, lr}
 801854e:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 8018550:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8018554:	f7ff fea6 	bl	80182a4 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 8018558:	4806      	ldr	r0, [pc, #24]	@ (8018574 <HW_IPCC_Init+0x28>)
 801855a:	f7ff fee8 	bl	801832e <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 801855e:	4805      	ldr	r0, [pc, #20]	@ (8018574 <HW_IPCC_Init+0x28>)
 8018560:	f7ff fed5 	bl	801830e <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8018564:	202c      	movs	r0, #44	@ 0x2c
 8018566:	f7f0 f9d8 	bl	800891a <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 801856a:	202d      	movs	r0, #45	@ 0x2d
 801856c:	f7f0 f9d5 	bl	800891a <HAL_NVIC_EnableIRQ>

  return;
 8018570:	bf00      	nop
}
 8018572:	bd80      	pop	{r7, pc}
 8018574:	58000c00 	.word	0x58000c00

08018578 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 8018578:	b580      	push	{r7, lr}
 801857a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 801857c:	2101      	movs	r1, #1
 801857e:	4802      	ldr	r0, [pc, #8]	@ (8018588 <HW_IPCC_BLE_Init+0x10>)
 8018580:	f7ff ff0a 	bl	8018398 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8018584:	bf00      	nop
}
 8018586:	bd80      	pop	{r7, pc}
 8018588:	58000c00 	.word	0x58000c00

0801858c <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 801858c:	b580      	push	{r7, lr}
 801858e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 8018590:	2101      	movs	r1, #1
 8018592:	4802      	ldr	r0, [pc, #8]	@ (801859c <HW_IPCC_BLE_SendCmd+0x10>)
 8018594:	f7ff ff20 	bl	80183d8 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8018598:	bf00      	nop
}
 801859a:	bd80      	pop	{r7, pc}
 801859c:	58000c00 	.word	0x58000c00

080185a0 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 80185a0:	b580      	push	{r7, lr}
 80185a2:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 80185a4:	f7fe fa78 	bl	8016a98 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 80185a8:	2101      	movs	r1, #1
 80185aa:	4802      	ldr	r0, [pc, #8]	@ (80185b4 <HW_IPCC_BLE_EvtHandler+0x14>)
 80185ac:	f7ff ff06 	bl	80183bc <LL_C1_IPCC_ClearFlag_CHx>

  return;
 80185b0:	bf00      	nop
}
 80185b2:	bd80      	pop	{r7, pc}
 80185b4:	58000c00 	.word	0x58000c00

080185b8 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 80185b8:	b580      	push	{r7, lr}
 80185ba:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 80185bc:	2120      	movs	r1, #32
 80185be:	4803      	ldr	r0, [pc, #12]	@ (80185cc <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 80185c0:	f7ff fed8 	bl	8018374 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 80185c4:	f7fe fa98 	bl	8016af8 <HW_IPCC_BLE_AclDataAckNot>

  return;
 80185c8:	bf00      	nop
}
 80185ca:	bd80      	pop	{r7, pc}
 80185cc:	58000c00 	.word	0x58000c00

080185d0 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 80185d0:	b580      	push	{r7, lr}
 80185d2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 80185d4:	2102      	movs	r1, #2
 80185d6:	4802      	ldr	r0, [pc, #8]	@ (80185e0 <HW_IPCC_SYS_Init+0x10>)
 80185d8:	f7ff fede 	bl	8018398 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80185dc:	bf00      	nop
}
 80185de:	bd80      	pop	{r7, pc}
 80185e0:	58000c00 	.word	0x58000c00

080185e4 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 80185e4:	b580      	push	{r7, lr}
 80185e6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 80185e8:	2102      	movs	r1, #2
 80185ea:	4804      	ldr	r0, [pc, #16]	@ (80185fc <HW_IPCC_SYS_SendCmd+0x18>)
 80185ec:	f7ff fef4 	bl	80183d8 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 80185f0:	2102      	movs	r1, #2
 80185f2:	4802      	ldr	r0, [pc, #8]	@ (80185fc <HW_IPCC_SYS_SendCmd+0x18>)
 80185f4:	f7ff feab 	bl	801834e <LL_C1_IPCC_EnableTransmitChannel>

  return;
 80185f8:	bf00      	nop
}
 80185fa:	bd80      	pop	{r7, pc}
 80185fc:	58000c00 	.word	0x58000c00

08018600 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8018600:	b580      	push	{r7, lr}
 8018602:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8018604:	2102      	movs	r1, #2
 8018606:	4803      	ldr	r0, [pc, #12]	@ (8018614 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 8018608:	f7ff feb4 	bl	8018374 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 801860c:	f7fe fac4 	bl	8016b98 <HW_IPCC_SYS_CmdEvtNot>

  return;
 8018610:	bf00      	nop
}
 8018612:	bd80      	pop	{r7, pc}
 8018614:	58000c00 	.word	0x58000c00

08018618 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8018618:	b580      	push	{r7, lr}
 801861a:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 801861c:	f7fe fad2 	bl	8016bc4 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8018620:	2102      	movs	r1, #2
 8018622:	4802      	ldr	r0, [pc, #8]	@ (801862c <HW_IPCC_SYS_EvtHandler+0x14>)
 8018624:	f7ff feca 	bl	80183bc <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8018628:	bf00      	nop
}
 801862a:	bd80      	pop	{r7, pc}
 801862c:	58000c00 	.word	0x58000c00

08018630 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 8018630:	b580      	push	{r7, lr}
 8018632:	b082      	sub	sp, #8
 8018634:	af00      	add	r7, sp, #0
 8018636:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 8018638:	2108      	movs	r1, #8
 801863a:	480c      	ldr	r0, [pc, #48]	@ (801866c <HW_IPCC_MM_SendFreeBuf+0x3c>)
 801863c:	f7ff fedb 	bl	80183f6 <LL_C1_IPCC_IsActiveFlag_CHx>
 8018640:	4603      	mov	r3, r0
 8018642:	2b00      	cmp	r3, #0
 8018644:	d007      	beq.n	8018656 <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 8018646:	4a0a      	ldr	r2, [pc, #40]	@ (8018670 <HW_IPCC_MM_SendFreeBuf+0x40>)
 8018648:	687b      	ldr	r3, [r7, #4]
 801864a:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 801864c:	2108      	movs	r1, #8
 801864e:	4807      	ldr	r0, [pc, #28]	@ (801866c <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8018650:	f7ff fe7d 	bl	801834e <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 8018654:	e006      	b.n	8018664 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 8018656:	687b      	ldr	r3, [r7, #4]
 8018658:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 801865a:	2108      	movs	r1, #8
 801865c:	4803      	ldr	r0, [pc, #12]	@ (801866c <HW_IPCC_MM_SendFreeBuf+0x3c>)
 801865e:	f7ff febb 	bl	80183d8 <LL_C1_IPCC_SetFlag_CHx>
  return;
 8018662:	bf00      	nop
}
 8018664:	3708      	adds	r7, #8
 8018666:	46bd      	mov	sp, r7
 8018668:	bd80      	pop	{r7, pc}
 801866a:	bf00      	nop
 801866c:	58000c00 	.word	0x58000c00
 8018670:	200015e8 	.word	0x200015e8

08018674 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 8018674:	b580      	push	{r7, lr}
 8018676:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8018678:	2108      	movs	r1, #8
 801867a:	4806      	ldr	r0, [pc, #24]	@ (8018694 <HW_IPCC_MM_FreeBufHandler+0x20>)
 801867c:	f7ff fe7a 	bl	8018374 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 8018680:	4b05      	ldr	r3, [pc, #20]	@ (8018698 <HW_IPCC_MM_FreeBufHandler+0x24>)
 8018682:	681b      	ldr	r3, [r3, #0]
 8018684:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8018686:	2108      	movs	r1, #8
 8018688:	4802      	ldr	r0, [pc, #8]	@ (8018694 <HW_IPCC_MM_FreeBufHandler+0x20>)
 801868a:	f7ff fea5 	bl	80183d8 <LL_C1_IPCC_SetFlag_CHx>

  return;
 801868e:	bf00      	nop
}
 8018690:	bd80      	pop	{r7, pc}
 8018692:	bf00      	nop
 8018694:	58000c00 	.word	0x58000c00
 8018698:	200015e8 	.word	0x200015e8

0801869c <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 801869c:	b580      	push	{r7, lr}
 801869e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 80186a0:	2108      	movs	r1, #8
 80186a2:	4802      	ldr	r0, [pc, #8]	@ (80186ac <HW_IPCC_TRACES_Init+0x10>)
 80186a4:	f7ff fe78 	bl	8018398 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80186a8:	bf00      	nop
}
 80186aa:	bd80      	pop	{r7, pc}
 80186ac:	58000c00 	.word	0x58000c00

080186b0 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 80186b0:	b580      	push	{r7, lr}
 80186b2:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 80186b4:	f7fe fb2e 	bl	8016d14 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 80186b8:	2108      	movs	r1, #8
 80186ba:	4802      	ldr	r0, [pc, #8]	@ (80186c4 <HW_IPCC_TRACES_EvtHandler+0x14>)
 80186bc:	f7ff fe7e 	bl	80183bc <LL_C1_IPCC_ClearFlag_CHx>

  return;
 80186c0:	bf00      	nop
}
 80186c2:	bd80      	pop	{r7, pc}
 80186c4:	58000c00 	.word	0x58000c00

080186c8 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 80186c8:	b580      	push	{r7, lr}
 80186ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 80186cc:	2200      	movs	r2, #0
 80186ce:	4912      	ldr	r1, [pc, #72]	@ (8018718 <MX_USB_Device_Init+0x50>)
 80186d0:	4812      	ldr	r0, [pc, #72]	@ (801871c <MX_USB_Device_Init+0x54>)
 80186d2:	f7fb f88b 	bl	80137ec <USBD_Init>
 80186d6:	4603      	mov	r3, r0
 80186d8:	2b00      	cmp	r3, #0
 80186da:	d001      	beq.n	80186e0 <MX_USB_Device_Init+0x18>
    Error_Handler();
 80186dc:	f7ea fc6a 	bl	8002fb4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 80186e0:	490f      	ldr	r1, [pc, #60]	@ (8018720 <MX_USB_Device_Init+0x58>)
 80186e2:	480e      	ldr	r0, [pc, #56]	@ (801871c <MX_USB_Device_Init+0x54>)
 80186e4:	f7fb f8b2 	bl	801384c <USBD_RegisterClass>
 80186e8:	4603      	mov	r3, r0
 80186ea:	2b00      	cmp	r3, #0
 80186ec:	d001      	beq.n	80186f2 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 80186ee:	f7ea fc61 	bl	8002fb4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 80186f2:	490c      	ldr	r1, [pc, #48]	@ (8018724 <MX_USB_Device_Init+0x5c>)
 80186f4:	4809      	ldr	r0, [pc, #36]	@ (801871c <MX_USB_Device_Init+0x54>)
 80186f6:	f7fa ffa9 	bl	801364c <USBD_CDC_RegisterInterface>
 80186fa:	4603      	mov	r3, r0
 80186fc:	2b00      	cmp	r3, #0
 80186fe:	d001      	beq.n	8018704 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8018700:	f7ea fc58 	bl	8002fb4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8018704:	4805      	ldr	r0, [pc, #20]	@ (801871c <MX_USB_Device_Init+0x54>)
 8018706:	f7fb f8d7 	bl	80138b8 <USBD_Start>
 801870a:	4603      	mov	r3, r0
 801870c:	2b00      	cmp	r3, #0
 801870e:	d001      	beq.n	8018714 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8018710:	f7ea fc50 	bl	8002fb4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8018714:	bf00      	nop
 8018716:	bd80      	pop	{r7, pc}
 8018718:	200000e8 	.word	0x200000e8
 801871c:	200015ec 	.word	0x200015ec
 8018720:	20000044 	.word	0x20000044
 8018724:	200000d4 	.word	0x200000d4

08018728 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8018728:	b580      	push	{r7, lr}
 801872a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 801872c:	2200      	movs	r2, #0
 801872e:	4905      	ldr	r1, [pc, #20]	@ (8018744 <CDC_Init_FS+0x1c>)
 8018730:	4805      	ldr	r0, [pc, #20]	@ (8018748 <CDC_Init_FS+0x20>)
 8018732:	f7fa ffa5 	bl	8013680 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8018736:	4905      	ldr	r1, [pc, #20]	@ (801874c <CDC_Init_FS+0x24>)
 8018738:	4803      	ldr	r0, [pc, #12]	@ (8018748 <CDC_Init_FS+0x20>)
 801873a:	f7fa ffc3 	bl	80136c4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801873e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8018740:	4618      	mov	r0, r3
 8018742:	bd80      	pop	{r7, pc}
 8018744:	200020c8 	.word	0x200020c8
 8018748:	200015ec 	.word	0x200015ec
 801874c:	200018c8 	.word	0x200018c8

08018750 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8018750:	b480      	push	{r7}
 8018752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8018754:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8018756:	4618      	mov	r0, r3
 8018758:	46bd      	mov	sp, r7
 801875a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801875e:	4770      	bx	lr

08018760 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8018760:	b480      	push	{r7}
 8018762:	b083      	sub	sp, #12
 8018764:	af00      	add	r7, sp, #0
 8018766:	4603      	mov	r3, r0
 8018768:	6039      	str	r1, [r7, #0]
 801876a:	71fb      	strb	r3, [r7, #7]
 801876c:	4613      	mov	r3, r2
 801876e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8018770:	79fb      	ldrb	r3, [r7, #7]
 8018772:	2b23      	cmp	r3, #35	@ 0x23
 8018774:	d84a      	bhi.n	801880c <CDC_Control_FS+0xac>
 8018776:	a201      	add	r2, pc, #4	@ (adr r2, 801877c <CDC_Control_FS+0x1c>)
 8018778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801877c:	0801880d 	.word	0x0801880d
 8018780:	0801880d 	.word	0x0801880d
 8018784:	0801880d 	.word	0x0801880d
 8018788:	0801880d 	.word	0x0801880d
 801878c:	0801880d 	.word	0x0801880d
 8018790:	0801880d 	.word	0x0801880d
 8018794:	0801880d 	.word	0x0801880d
 8018798:	0801880d 	.word	0x0801880d
 801879c:	0801880d 	.word	0x0801880d
 80187a0:	0801880d 	.word	0x0801880d
 80187a4:	0801880d 	.word	0x0801880d
 80187a8:	0801880d 	.word	0x0801880d
 80187ac:	0801880d 	.word	0x0801880d
 80187b0:	0801880d 	.word	0x0801880d
 80187b4:	0801880d 	.word	0x0801880d
 80187b8:	0801880d 	.word	0x0801880d
 80187bc:	0801880d 	.word	0x0801880d
 80187c0:	0801880d 	.word	0x0801880d
 80187c4:	0801880d 	.word	0x0801880d
 80187c8:	0801880d 	.word	0x0801880d
 80187cc:	0801880d 	.word	0x0801880d
 80187d0:	0801880d 	.word	0x0801880d
 80187d4:	0801880d 	.word	0x0801880d
 80187d8:	0801880d 	.word	0x0801880d
 80187dc:	0801880d 	.word	0x0801880d
 80187e0:	0801880d 	.word	0x0801880d
 80187e4:	0801880d 	.word	0x0801880d
 80187e8:	0801880d 	.word	0x0801880d
 80187ec:	0801880d 	.word	0x0801880d
 80187f0:	0801880d 	.word	0x0801880d
 80187f4:	0801880d 	.word	0x0801880d
 80187f8:	0801880d 	.word	0x0801880d
 80187fc:	0801880d 	.word	0x0801880d
 8018800:	0801880d 	.word	0x0801880d
 8018804:	0801880d 	.word	0x0801880d
 8018808:	0801880d 	.word	0x0801880d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 801880c:	bf00      	nop
  }

  return (USBD_OK);
 801880e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8018810:	4618      	mov	r0, r3
 8018812:	370c      	adds	r7, #12
 8018814:	46bd      	mov	sp, r7
 8018816:	f85d 7b04 	ldr.w	r7, [sp], #4
 801881a:	4770      	bx	lr

0801881c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 801881c:	b580      	push	{r7, lr}
 801881e:	b084      	sub	sp, #16
 8018820:	af00      	add	r7, sp, #0
 8018822:	6078      	str	r0, [r7, #4]
 8018824:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8018826:	6879      	ldr	r1, [r7, #4]
 8018828:	480f      	ldr	r0, [pc, #60]	@ (8018868 <CDC_Receive_FS+0x4c>)
 801882a:	f7fa ff4b 	bl	80136c4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801882e:	480e      	ldr	r0, [pc, #56]	@ (8018868 <CDC_Receive_FS+0x4c>)
 8018830:	f7fa ffa6 	bl	8013780 <USBD_CDC_ReceivePacket>

  memset (usbbuffer, '\0', 64);  // clear the buffer
 8018834:	2240      	movs	r2, #64	@ 0x40
 8018836:	2100      	movs	r1, #0
 8018838:	480c      	ldr	r0, [pc, #48]	@ (801886c <CDC_Receive_FS+0x50>)
 801883a:	f002 fe6a 	bl	801b512 <memset>
  uint8_t len = (uint8_t)*Len;
 801883e:	683b      	ldr	r3, [r7, #0]
 8018840:	681b      	ldr	r3, [r3, #0]
 8018842:	73fb      	strb	r3, [r7, #15]
  memcpy((uint8_t *) usbbuffer,(uint8_t *) Buf, len);  // copy the data to the buffer
 8018844:	7bfb      	ldrb	r3, [r7, #15]
 8018846:	461a      	mov	r2, r3
 8018848:	6879      	ldr	r1, [r7, #4]
 801884a:	4808      	ldr	r0, [pc, #32]	@ (801886c <CDC_Receive_FS+0x50>)
 801884c:	f002 ff7d 	bl	801b74a <memcpy>
  memset(Buf, '\0', len);
 8018850:	7bfb      	ldrb	r3, [r7, #15]
 8018852:	461a      	mov	r2, r3
 8018854:	2100      	movs	r1, #0
 8018856:	6878      	ldr	r0, [r7, #4]
 8018858:	f002 fe5b 	bl	801b512 <memset>
  return (USBD_OK);
 801885c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801885e:	4618      	mov	r0, r3
 8018860:	3710      	adds	r7, #16
 8018862:	46bd      	mov	sp, r7
 8018864:	bd80      	pop	{r7, pc}
 8018866:	bf00      	nop
 8018868:	200015ec 	.word	0x200015ec
 801886c:	20000b14 	.word	0x20000b14

08018870 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8018870:	b580      	push	{r7, lr}
 8018872:	b084      	sub	sp, #16
 8018874:	af00      	add	r7, sp, #0
 8018876:	6078      	str	r0, [r7, #4]
 8018878:	460b      	mov	r3, r1
 801887a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 801887c:	2300      	movs	r3, #0
 801887e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8018880:	4b0d      	ldr	r3, [pc, #52]	@ (80188b8 <CDC_Transmit_FS+0x48>)
 8018882:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8018886:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8018888:	68bb      	ldr	r3, [r7, #8]
 801888a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 801888e:	2b00      	cmp	r3, #0
 8018890:	d001      	beq.n	8018896 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8018892:	2301      	movs	r3, #1
 8018894:	e00b      	b.n	80188ae <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8018896:	887b      	ldrh	r3, [r7, #2]
 8018898:	461a      	mov	r2, r3
 801889a:	6879      	ldr	r1, [r7, #4]
 801889c:	4806      	ldr	r0, [pc, #24]	@ (80188b8 <CDC_Transmit_FS+0x48>)
 801889e:	f7fa feef 	bl	8013680 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80188a2:	4805      	ldr	r0, [pc, #20]	@ (80188b8 <CDC_Transmit_FS+0x48>)
 80188a4:	f7fa ff2c 	bl	8013700 <USBD_CDC_TransmitPacket>
 80188a8:	4603      	mov	r3, r0
 80188aa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80188ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80188ae:	4618      	mov	r0, r3
 80188b0:	3710      	adds	r7, #16
 80188b2:	46bd      	mov	sp, r7
 80188b4:	bd80      	pop	{r7, pc}
 80188b6:	bf00      	nop
 80188b8:	200015ec 	.word	0x200015ec

080188bc <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80188bc:	b480      	push	{r7}
 80188be:	b087      	sub	sp, #28
 80188c0:	af00      	add	r7, sp, #0
 80188c2:	60f8      	str	r0, [r7, #12]
 80188c4:	60b9      	str	r1, [r7, #8]
 80188c6:	4613      	mov	r3, r2
 80188c8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80188ca:	2300      	movs	r3, #0
 80188cc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80188ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80188d2:	4618      	mov	r0, r3
 80188d4:	371c      	adds	r7, #28
 80188d6:	46bd      	mov	sp, r7
 80188d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80188dc:	4770      	bx	lr
	...

080188e0 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80188e0:	b480      	push	{r7}
 80188e2:	b083      	sub	sp, #12
 80188e4:	af00      	add	r7, sp, #0
 80188e6:	4603      	mov	r3, r0
 80188e8:	6039      	str	r1, [r7, #0]
 80188ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 80188ec:	683b      	ldr	r3, [r7, #0]
 80188ee:	2212      	movs	r2, #18
 80188f0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 80188f2:	4b03      	ldr	r3, [pc, #12]	@ (8018900 <USBD_CDC_DeviceDescriptor+0x20>)
}
 80188f4:	4618      	mov	r0, r3
 80188f6:	370c      	adds	r7, #12
 80188f8:	46bd      	mov	sp, r7
 80188fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80188fe:	4770      	bx	lr
 8018900:	20000108 	.word	0x20000108

08018904 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018904:	b480      	push	{r7}
 8018906:	b083      	sub	sp, #12
 8018908:	af00      	add	r7, sp, #0
 801890a:	4603      	mov	r3, r0
 801890c:	6039      	str	r1, [r7, #0]
 801890e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8018910:	683b      	ldr	r3, [r7, #0]
 8018912:	2204      	movs	r2, #4
 8018914:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8018916:	4b03      	ldr	r3, [pc, #12]	@ (8018924 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8018918:	4618      	mov	r0, r3
 801891a:	370c      	adds	r7, #12
 801891c:	46bd      	mov	sp, r7
 801891e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018922:	4770      	bx	lr
 8018924:	2000011c 	.word	0x2000011c

08018928 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018928:	b580      	push	{r7, lr}
 801892a:	b082      	sub	sp, #8
 801892c:	af00      	add	r7, sp, #0
 801892e:	4603      	mov	r3, r0
 8018930:	6039      	str	r1, [r7, #0]
 8018932:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8018934:	79fb      	ldrb	r3, [r7, #7]
 8018936:	2b00      	cmp	r3, #0
 8018938:	d105      	bne.n	8018946 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 801893a:	683a      	ldr	r2, [r7, #0]
 801893c:	4907      	ldr	r1, [pc, #28]	@ (801895c <USBD_CDC_ProductStrDescriptor+0x34>)
 801893e:	4808      	ldr	r0, [pc, #32]	@ (8018960 <USBD_CDC_ProductStrDescriptor+0x38>)
 8018940:	f7fc f902 	bl	8014b48 <USBD_GetString>
 8018944:	e004      	b.n	8018950 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8018946:	683a      	ldr	r2, [r7, #0]
 8018948:	4904      	ldr	r1, [pc, #16]	@ (801895c <USBD_CDC_ProductStrDescriptor+0x34>)
 801894a:	4805      	ldr	r0, [pc, #20]	@ (8018960 <USBD_CDC_ProductStrDescriptor+0x38>)
 801894c:	f7fc f8fc 	bl	8014b48 <USBD_GetString>
  }
  return USBD_StrDesc;
 8018950:	4b02      	ldr	r3, [pc, #8]	@ (801895c <USBD_CDC_ProductStrDescriptor+0x34>)
}
 8018952:	4618      	mov	r0, r3
 8018954:	3708      	adds	r7, #8
 8018956:	46bd      	mov	sp, r7
 8018958:	bd80      	pop	{r7, pc}
 801895a:	bf00      	nop
 801895c:	200028c8 	.word	0x200028c8
 8018960:	08020170 	.word	0x08020170

08018964 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018964:	b580      	push	{r7, lr}
 8018966:	b082      	sub	sp, #8
 8018968:	af00      	add	r7, sp, #0
 801896a:	4603      	mov	r3, r0
 801896c:	6039      	str	r1, [r7, #0]
 801896e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8018970:	683a      	ldr	r2, [r7, #0]
 8018972:	4904      	ldr	r1, [pc, #16]	@ (8018984 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8018974:	4804      	ldr	r0, [pc, #16]	@ (8018988 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 8018976:	f7fc f8e7 	bl	8014b48 <USBD_GetString>
  return USBD_StrDesc;
 801897a:	4b02      	ldr	r3, [pc, #8]	@ (8018984 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 801897c:	4618      	mov	r0, r3
 801897e:	3708      	adds	r7, #8
 8018980:	46bd      	mov	sp, r7
 8018982:	bd80      	pop	{r7, pc}
 8018984:	200028c8 	.word	0x200028c8
 8018988:	08020188 	.word	0x08020188

0801898c <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801898c:	b580      	push	{r7, lr}
 801898e:	b082      	sub	sp, #8
 8018990:	af00      	add	r7, sp, #0
 8018992:	4603      	mov	r3, r0
 8018994:	6039      	str	r1, [r7, #0]
 8018996:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8018998:	683b      	ldr	r3, [r7, #0]
 801899a:	221a      	movs	r2, #26
 801899c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801899e:	f000 f843 	bl	8018a28 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 80189a2:	4b02      	ldr	r3, [pc, #8]	@ (80189ac <USBD_CDC_SerialStrDescriptor+0x20>)
}
 80189a4:	4618      	mov	r0, r3
 80189a6:	3708      	adds	r7, #8
 80189a8:	46bd      	mov	sp, r7
 80189aa:	bd80      	pop	{r7, pc}
 80189ac:	20000120 	.word	0x20000120

080189b0 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80189b0:	b580      	push	{r7, lr}
 80189b2:	b082      	sub	sp, #8
 80189b4:	af00      	add	r7, sp, #0
 80189b6:	4603      	mov	r3, r0
 80189b8:	6039      	str	r1, [r7, #0]
 80189ba:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80189bc:	79fb      	ldrb	r3, [r7, #7]
 80189be:	2b00      	cmp	r3, #0
 80189c0:	d105      	bne.n	80189ce <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80189c2:	683a      	ldr	r2, [r7, #0]
 80189c4:	4907      	ldr	r1, [pc, #28]	@ (80189e4 <USBD_CDC_ConfigStrDescriptor+0x34>)
 80189c6:	4808      	ldr	r0, [pc, #32]	@ (80189e8 <USBD_CDC_ConfigStrDescriptor+0x38>)
 80189c8:	f7fc f8be 	bl	8014b48 <USBD_GetString>
 80189cc:	e004      	b.n	80189d8 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80189ce:	683a      	ldr	r2, [r7, #0]
 80189d0:	4904      	ldr	r1, [pc, #16]	@ (80189e4 <USBD_CDC_ConfigStrDescriptor+0x34>)
 80189d2:	4805      	ldr	r0, [pc, #20]	@ (80189e8 <USBD_CDC_ConfigStrDescriptor+0x38>)
 80189d4:	f7fc f8b8 	bl	8014b48 <USBD_GetString>
  }
  return USBD_StrDesc;
 80189d8:	4b02      	ldr	r3, [pc, #8]	@ (80189e4 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 80189da:	4618      	mov	r0, r3
 80189dc:	3708      	adds	r7, #8
 80189de:	46bd      	mov	sp, r7
 80189e0:	bd80      	pop	{r7, pc}
 80189e2:	bf00      	nop
 80189e4:	200028c8 	.word	0x200028c8
 80189e8:	0802019c 	.word	0x0802019c

080189ec <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80189ec:	b580      	push	{r7, lr}
 80189ee:	b082      	sub	sp, #8
 80189f0:	af00      	add	r7, sp, #0
 80189f2:	4603      	mov	r3, r0
 80189f4:	6039      	str	r1, [r7, #0]
 80189f6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80189f8:	79fb      	ldrb	r3, [r7, #7]
 80189fa:	2b00      	cmp	r3, #0
 80189fc:	d105      	bne.n	8018a0a <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 80189fe:	683a      	ldr	r2, [r7, #0]
 8018a00:	4907      	ldr	r1, [pc, #28]	@ (8018a20 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8018a02:	4808      	ldr	r0, [pc, #32]	@ (8018a24 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8018a04:	f7fc f8a0 	bl	8014b48 <USBD_GetString>
 8018a08:	e004      	b.n	8018a14 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8018a0a:	683a      	ldr	r2, [r7, #0]
 8018a0c:	4904      	ldr	r1, [pc, #16]	@ (8018a20 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8018a0e:	4805      	ldr	r0, [pc, #20]	@ (8018a24 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8018a10:	f7fc f89a 	bl	8014b48 <USBD_GetString>
  }
  return USBD_StrDesc;
 8018a14:	4b02      	ldr	r3, [pc, #8]	@ (8018a20 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 8018a16:	4618      	mov	r0, r3
 8018a18:	3708      	adds	r7, #8
 8018a1a:	46bd      	mov	sp, r7
 8018a1c:	bd80      	pop	{r7, pc}
 8018a1e:	bf00      	nop
 8018a20:	200028c8 	.word	0x200028c8
 8018a24:	080201a8 	.word	0x080201a8

08018a28 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8018a28:	b580      	push	{r7, lr}
 8018a2a:	b084      	sub	sp, #16
 8018a2c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8018a2e:	4b0f      	ldr	r3, [pc, #60]	@ (8018a6c <Get_SerialNum+0x44>)
 8018a30:	681b      	ldr	r3, [r3, #0]
 8018a32:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8018a34:	4b0e      	ldr	r3, [pc, #56]	@ (8018a70 <Get_SerialNum+0x48>)
 8018a36:	681b      	ldr	r3, [r3, #0]
 8018a38:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8018a3a:	4b0e      	ldr	r3, [pc, #56]	@ (8018a74 <Get_SerialNum+0x4c>)
 8018a3c:	681b      	ldr	r3, [r3, #0]
 8018a3e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8018a40:	68fa      	ldr	r2, [r7, #12]
 8018a42:	687b      	ldr	r3, [r7, #4]
 8018a44:	4413      	add	r3, r2
 8018a46:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8018a48:	68fb      	ldr	r3, [r7, #12]
 8018a4a:	2b00      	cmp	r3, #0
 8018a4c:	d009      	beq.n	8018a62 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8018a4e:	2208      	movs	r2, #8
 8018a50:	4909      	ldr	r1, [pc, #36]	@ (8018a78 <Get_SerialNum+0x50>)
 8018a52:	68f8      	ldr	r0, [r7, #12]
 8018a54:	f000 f814 	bl	8018a80 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8018a58:	2204      	movs	r2, #4
 8018a5a:	4908      	ldr	r1, [pc, #32]	@ (8018a7c <Get_SerialNum+0x54>)
 8018a5c:	68b8      	ldr	r0, [r7, #8]
 8018a5e:	f000 f80f 	bl	8018a80 <IntToUnicode>
  }
}
 8018a62:	bf00      	nop
 8018a64:	3710      	adds	r7, #16
 8018a66:	46bd      	mov	sp, r7
 8018a68:	bd80      	pop	{r7, pc}
 8018a6a:	bf00      	nop
 8018a6c:	1fff7590 	.word	0x1fff7590
 8018a70:	1fff7594 	.word	0x1fff7594
 8018a74:	1fff7598 	.word	0x1fff7598
 8018a78:	20000122 	.word	0x20000122
 8018a7c:	20000132 	.word	0x20000132

08018a80 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8018a80:	b480      	push	{r7}
 8018a82:	b087      	sub	sp, #28
 8018a84:	af00      	add	r7, sp, #0
 8018a86:	60f8      	str	r0, [r7, #12]
 8018a88:	60b9      	str	r1, [r7, #8]
 8018a8a:	4613      	mov	r3, r2
 8018a8c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8018a8e:	2300      	movs	r3, #0
 8018a90:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8018a92:	2300      	movs	r3, #0
 8018a94:	75fb      	strb	r3, [r7, #23]
 8018a96:	e027      	b.n	8018ae8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8018a98:	68fb      	ldr	r3, [r7, #12]
 8018a9a:	0f1b      	lsrs	r3, r3, #28
 8018a9c:	2b09      	cmp	r3, #9
 8018a9e:	d80b      	bhi.n	8018ab8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8018aa0:	68fb      	ldr	r3, [r7, #12]
 8018aa2:	0f1b      	lsrs	r3, r3, #28
 8018aa4:	b2da      	uxtb	r2, r3
 8018aa6:	7dfb      	ldrb	r3, [r7, #23]
 8018aa8:	005b      	lsls	r3, r3, #1
 8018aaa:	4619      	mov	r1, r3
 8018aac:	68bb      	ldr	r3, [r7, #8]
 8018aae:	440b      	add	r3, r1
 8018ab0:	3230      	adds	r2, #48	@ 0x30
 8018ab2:	b2d2      	uxtb	r2, r2
 8018ab4:	701a      	strb	r2, [r3, #0]
 8018ab6:	e00a      	b.n	8018ace <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8018ab8:	68fb      	ldr	r3, [r7, #12]
 8018aba:	0f1b      	lsrs	r3, r3, #28
 8018abc:	b2da      	uxtb	r2, r3
 8018abe:	7dfb      	ldrb	r3, [r7, #23]
 8018ac0:	005b      	lsls	r3, r3, #1
 8018ac2:	4619      	mov	r1, r3
 8018ac4:	68bb      	ldr	r3, [r7, #8]
 8018ac6:	440b      	add	r3, r1
 8018ac8:	3237      	adds	r2, #55	@ 0x37
 8018aca:	b2d2      	uxtb	r2, r2
 8018acc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8018ace:	68fb      	ldr	r3, [r7, #12]
 8018ad0:	011b      	lsls	r3, r3, #4
 8018ad2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8018ad4:	7dfb      	ldrb	r3, [r7, #23]
 8018ad6:	005b      	lsls	r3, r3, #1
 8018ad8:	3301      	adds	r3, #1
 8018ada:	68ba      	ldr	r2, [r7, #8]
 8018adc:	4413      	add	r3, r2
 8018ade:	2200      	movs	r2, #0
 8018ae0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8018ae2:	7dfb      	ldrb	r3, [r7, #23]
 8018ae4:	3301      	adds	r3, #1
 8018ae6:	75fb      	strb	r3, [r7, #23]
 8018ae8:	7dfa      	ldrb	r2, [r7, #23]
 8018aea:	79fb      	ldrb	r3, [r7, #7]
 8018aec:	429a      	cmp	r2, r3
 8018aee:	d3d3      	bcc.n	8018a98 <IntToUnicode+0x18>
  }
}
 8018af0:	bf00      	nop
 8018af2:	bf00      	nop
 8018af4:	371c      	adds	r7, #28
 8018af6:	46bd      	mov	sp, r7
 8018af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018afc:	4770      	bx	lr

08018afe <LL_AHB2_GRP1_EnableClock>:
{
 8018afe:	b480      	push	{r7}
 8018b00:	b085      	sub	sp, #20
 8018b02:	af00      	add	r7, sp, #0
 8018b04:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8018b06:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8018b0a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8018b0c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8018b10:	687b      	ldr	r3, [r7, #4]
 8018b12:	4313      	orrs	r3, r2
 8018b14:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8018b16:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8018b1a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8018b1c:	687b      	ldr	r3, [r7, #4]
 8018b1e:	4013      	ands	r3, r2
 8018b20:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8018b22:	68fb      	ldr	r3, [r7, #12]
}
 8018b24:	bf00      	nop
 8018b26:	3714      	adds	r7, #20
 8018b28:	46bd      	mov	sp, r7
 8018b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b2e:	4770      	bx	lr

08018b30 <LL_APB1_GRP1_EnableClock>:
{
 8018b30:	b480      	push	{r7}
 8018b32:	b085      	sub	sp, #20
 8018b34:	af00      	add	r7, sp, #0
 8018b36:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8018b38:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8018b3c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8018b3e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8018b42:	687b      	ldr	r3, [r7, #4]
 8018b44:	4313      	orrs	r3, r2
 8018b46:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8018b48:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8018b4c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8018b4e:	687b      	ldr	r3, [r7, #4]
 8018b50:	4013      	ands	r3, r2
 8018b52:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8018b54:	68fb      	ldr	r3, [r7, #12]
}
 8018b56:	bf00      	nop
 8018b58:	3714      	adds	r7, #20
 8018b5a:	46bd      	mov	sp, r7
 8018b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b60:	4770      	bx	lr
	...

08018b64 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018b64:	b580      	push	{r7, lr}
 8018b66:	b088      	sub	sp, #32
 8018b68:	af00      	add	r7, sp, #0
 8018b6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8018b6c:	f107 030c 	add.w	r3, r7, #12
 8018b70:	2200      	movs	r2, #0
 8018b72:	601a      	str	r2, [r3, #0]
 8018b74:	605a      	str	r2, [r3, #4]
 8018b76:	609a      	str	r2, [r3, #8]
 8018b78:	60da      	str	r2, [r3, #12]
 8018b7a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 8018b7c:	687b      	ldr	r3, [r7, #4]
 8018b7e:	681b      	ldr	r3, [r3, #0]
 8018b80:	4a13      	ldr	r2, [pc, #76]	@ (8018bd0 <HAL_PCD_MspInit+0x6c>)
 8018b82:	4293      	cmp	r3, r2
 8018b84:	d120      	bne.n	8018bc8 <HAL_PCD_MspInit+0x64>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8018b86:	2001      	movs	r0, #1
 8018b88:	f7ff ffb9 	bl	8018afe <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8018b8c:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8018b90:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8018b92:	2302      	movs	r3, #2
 8018b94:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018b96:	2300      	movs	r3, #0
 8018b98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8018b9a:	2300      	movs	r3, #0
 8018b9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8018b9e:	230a      	movs	r3, #10
 8018ba0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8018ba2:	f107 030c 	add.w	r3, r7, #12
 8018ba6:	4619      	mov	r1, r3
 8018ba8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8018bac:	f7f0 fa38 	bl	8009020 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8018bb0:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 8018bb4:	f7ff ffbc 	bl	8018b30 <LL_APB1_GRP1_EnableClock>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 5, 0);
 8018bb8:	2200      	movs	r2, #0
 8018bba:	2105      	movs	r1, #5
 8018bbc:	2014      	movs	r0, #20
 8018bbe:	f7ef fe92 	bl	80088e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8018bc2:	2014      	movs	r0, #20
 8018bc4:	f7ef fea9 	bl	800891a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8018bc8:	bf00      	nop
 8018bca:	3720      	adds	r7, #32
 8018bcc:	46bd      	mov	sp, r7
 8018bce:	bd80      	pop	{r7, pc}
 8018bd0:	40006800 	.word	0x40006800

08018bd4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018bd4:	b580      	push	{r7, lr}
 8018bd6:	b082      	sub	sp, #8
 8018bd8:	af00      	add	r7, sp, #0
 8018bda:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8018bdc:	687b      	ldr	r3, [r7, #4]
 8018bde:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 8018be2:	687b      	ldr	r3, [r7, #4]
 8018be4:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8018be8:	4619      	mov	r1, r3
 8018bea:	4610      	mov	r0, r2
 8018bec:	f7fa feb1 	bl	8013952 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8018bf0:	bf00      	nop
 8018bf2:	3708      	adds	r7, #8
 8018bf4:	46bd      	mov	sp, r7
 8018bf6:	bd80      	pop	{r7, pc}

08018bf8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018bf8:	b580      	push	{r7, lr}
 8018bfa:	b082      	sub	sp, #8
 8018bfc:	af00      	add	r7, sp, #0
 8018bfe:	6078      	str	r0, [r7, #4]
 8018c00:	460b      	mov	r3, r1
 8018c02:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8018c04:	687b      	ldr	r3, [r7, #4]
 8018c06:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 8018c0a:	78fa      	ldrb	r2, [r7, #3]
 8018c0c:	6879      	ldr	r1, [r7, #4]
 8018c0e:	4613      	mov	r3, r2
 8018c10:	009b      	lsls	r3, r3, #2
 8018c12:	4413      	add	r3, r2
 8018c14:	00db      	lsls	r3, r3, #3
 8018c16:	440b      	add	r3, r1
 8018c18:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8018c1c:	681a      	ldr	r2, [r3, #0]
 8018c1e:	78fb      	ldrb	r3, [r7, #3]
 8018c20:	4619      	mov	r1, r3
 8018c22:	f7fa feeb 	bl	80139fc <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8018c26:	bf00      	nop
 8018c28:	3708      	adds	r7, #8
 8018c2a:	46bd      	mov	sp, r7
 8018c2c:	bd80      	pop	{r7, pc}

08018c2e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018c2e:	b580      	push	{r7, lr}
 8018c30:	b082      	sub	sp, #8
 8018c32:	af00      	add	r7, sp, #0
 8018c34:	6078      	str	r0, [r7, #4]
 8018c36:	460b      	mov	r3, r1
 8018c38:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8018c3a:	687b      	ldr	r3, [r7, #4]
 8018c3c:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 8018c40:	78fa      	ldrb	r2, [r7, #3]
 8018c42:	6879      	ldr	r1, [r7, #4]
 8018c44:	4613      	mov	r3, r2
 8018c46:	009b      	lsls	r3, r3, #2
 8018c48:	4413      	add	r3, r2
 8018c4a:	00db      	lsls	r3, r3, #3
 8018c4c:	440b      	add	r3, r1
 8018c4e:	3324      	adds	r3, #36	@ 0x24
 8018c50:	681a      	ldr	r2, [r3, #0]
 8018c52:	78fb      	ldrb	r3, [r7, #3]
 8018c54:	4619      	mov	r1, r3
 8018c56:	f7fa ff84 	bl	8013b62 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 8018c5a:	bf00      	nop
 8018c5c:	3708      	adds	r7, #8
 8018c5e:	46bd      	mov	sp, r7
 8018c60:	bd80      	pop	{r7, pc}

08018c62 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018c62:	b580      	push	{r7, lr}
 8018c64:	b082      	sub	sp, #8
 8018c66:	af00      	add	r7, sp, #0
 8018c68:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8018c6a:	687b      	ldr	r3, [r7, #4]
 8018c6c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8018c70:	4618      	mov	r0, r3
 8018c72:	f7fb f8be 	bl	8013df2 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 8018c76:	bf00      	nop
 8018c78:	3708      	adds	r7, #8
 8018c7a:	46bd      	mov	sp, r7
 8018c7c:	bd80      	pop	{r7, pc}

08018c7e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018c7e:	b580      	push	{r7, lr}
 8018c80:	b084      	sub	sp, #16
 8018c82:	af00      	add	r7, sp, #0
 8018c84:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8018c86:	2301      	movs	r3, #1
 8018c88:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8018c8a:	687b      	ldr	r3, [r7, #4]
 8018c8c:	795b      	ldrb	r3, [r3, #5]
 8018c8e:	2b02      	cmp	r3, #2
 8018c90:	d001      	beq.n	8018c96 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8018c92:	f7ea f98f 	bl	8002fb4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8018c96:	687b      	ldr	r3, [r7, #4]
 8018c98:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8018c9c:	7bfa      	ldrb	r2, [r7, #15]
 8018c9e:	4611      	mov	r1, r2
 8018ca0:	4618      	mov	r0, r3
 8018ca2:	f7fb f862 	bl	8013d6a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8018ca6:	687b      	ldr	r3, [r7, #4]
 8018ca8:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8018cac:	4618      	mov	r0, r3
 8018cae:	f7fb f80a 	bl	8013cc6 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8018cb2:	bf00      	nop
 8018cb4:	3710      	adds	r7, #16
 8018cb6:	46bd      	mov	sp, r7
 8018cb8:	bd80      	pop	{r7, pc}
	...

08018cbc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018cbc:	b580      	push	{r7, lr}
 8018cbe:	b082      	sub	sp, #8
 8018cc0:	af00      	add	r7, sp, #0
 8018cc2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8018cc4:	687b      	ldr	r3, [r7, #4]
 8018cc6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8018cca:	4618      	mov	r0, r3
 8018ccc:	f7fb f85d 	bl	8013d8a <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8018cd0:	687b      	ldr	r3, [r7, #4]
 8018cd2:	7a5b      	ldrb	r3, [r3, #9]
 8018cd4:	2b00      	cmp	r3, #0
 8018cd6:	d005      	beq.n	8018ce4 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8018cd8:	4b04      	ldr	r3, [pc, #16]	@ (8018cec <HAL_PCD_SuspendCallback+0x30>)
 8018cda:	691b      	ldr	r3, [r3, #16]
 8018cdc:	4a03      	ldr	r2, [pc, #12]	@ (8018cec <HAL_PCD_SuspendCallback+0x30>)
 8018cde:	f043 0306 	orr.w	r3, r3, #6
 8018ce2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8018ce4:	bf00      	nop
 8018ce6:	3708      	adds	r7, #8
 8018ce8:	46bd      	mov	sp, r7
 8018cea:	bd80      	pop	{r7, pc}
 8018cec:	e000ed00 	.word	0xe000ed00

08018cf0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018cf0:	b580      	push	{r7, lr}
 8018cf2:	b082      	sub	sp, #8
 8018cf4:	af00      	add	r7, sp, #0
 8018cf6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8018cf8:	687b      	ldr	r3, [r7, #4]
 8018cfa:	7a5b      	ldrb	r3, [r3, #9]
 8018cfc:	2b00      	cmp	r3, #0
 8018cfe:	d007      	beq.n	8018d10 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8018d00:	4b08      	ldr	r3, [pc, #32]	@ (8018d24 <HAL_PCD_ResumeCallback+0x34>)
 8018d02:	691b      	ldr	r3, [r3, #16]
 8018d04:	4a07      	ldr	r2, [pc, #28]	@ (8018d24 <HAL_PCD_ResumeCallback+0x34>)
 8018d06:	f023 0306 	bic.w	r3, r3, #6
 8018d0a:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8018d0c:	f000 f9fa 	bl	8019104 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8018d10:	687b      	ldr	r3, [r7, #4]
 8018d12:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8018d16:	4618      	mov	r0, r3
 8018d18:	f7fb f853 	bl	8013dc2 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8018d1c:	bf00      	nop
 8018d1e:	3708      	adds	r7, #8
 8018d20:	46bd      	mov	sp, r7
 8018d22:	bd80      	pop	{r7, pc}
 8018d24:	e000ed00 	.word	0xe000ed00

08018d28 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8018d28:	b580      	push	{r7, lr}
 8018d2a:	b082      	sub	sp, #8
 8018d2c:	af00      	add	r7, sp, #0
 8018d2e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8018d30:	4a2c      	ldr	r2, [pc, #176]	@ (8018de4 <USBD_LL_Init+0xbc>)
 8018d32:	687b      	ldr	r3, [r7, #4]
 8018d34:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8018d38:	687b      	ldr	r3, [r7, #4]
 8018d3a:	4a2a      	ldr	r2, [pc, #168]	@ (8018de4 <USBD_LL_Init+0xbc>)
 8018d3c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8
/* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 8018d40:	f7f2 ff40 	bl	800bbc4 <HAL_PWREx_EnableVddUSB>

  hpcd_USB_FS.Instance = USB;
 8018d44:	4b27      	ldr	r3, [pc, #156]	@ (8018de4 <USBD_LL_Init+0xbc>)
 8018d46:	4a28      	ldr	r2, [pc, #160]	@ (8018de8 <USBD_LL_Init+0xc0>)
 8018d48:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8018d4a:	4b26      	ldr	r3, [pc, #152]	@ (8018de4 <USBD_LL_Init+0xbc>)
 8018d4c:	2208      	movs	r2, #8
 8018d4e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8018d50:	4b24      	ldr	r3, [pc, #144]	@ (8018de4 <USBD_LL_Init+0xbc>)
 8018d52:	2202      	movs	r2, #2
 8018d54:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8018d56:	4b23      	ldr	r3, [pc, #140]	@ (8018de4 <USBD_LL_Init+0xbc>)
 8018d58:	2202      	movs	r2, #2
 8018d5a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8018d5c:	4b21      	ldr	r3, [pc, #132]	@ (8018de4 <USBD_LL_Init+0xbc>)
 8018d5e:	2200      	movs	r2, #0
 8018d60:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8018d62:	4b20      	ldr	r3, [pc, #128]	@ (8018de4 <USBD_LL_Init+0xbc>)
 8018d64:	2200      	movs	r2, #0
 8018d66:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8018d68:	4b1e      	ldr	r3, [pc, #120]	@ (8018de4 <USBD_LL_Init+0xbc>)
 8018d6a:	2200      	movs	r2, #0
 8018d6c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8018d6e:	4b1d      	ldr	r3, [pc, #116]	@ (8018de4 <USBD_LL_Init+0xbc>)
 8018d70:	2200      	movs	r2, #0
 8018d72:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8018d74:	481b      	ldr	r0, [pc, #108]	@ (8018de4 <USBD_LL_Init+0xbc>)
 8018d76:	f7f1 fa05 	bl	800a184 <HAL_PCD_Init>
 8018d7a:	4603      	mov	r3, r0
 8018d7c:	2b00      	cmp	r3, #0
 8018d7e:	d001      	beq.n	8018d84 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 8018d80:	f7ea f918 	bl	8002fb4 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8018d84:	687b      	ldr	r3, [r7, #4]
 8018d86:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8018d8a:	2318      	movs	r3, #24
 8018d8c:	2200      	movs	r2, #0
 8018d8e:	2100      	movs	r1, #0
 8018d90:	f7f2 fe8c 	bl	800baac <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8018d94:	687b      	ldr	r3, [r7, #4]
 8018d96:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8018d9a:	2358      	movs	r3, #88	@ 0x58
 8018d9c:	2200      	movs	r2, #0
 8018d9e:	2180      	movs	r1, #128	@ 0x80
 8018da0:	f7f2 fe84 	bl	800baac <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8018da4:	687b      	ldr	r3, [r7, #4]
 8018da6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8018daa:	23c0      	movs	r3, #192	@ 0xc0
 8018dac:	2200      	movs	r2, #0
 8018dae:	2181      	movs	r1, #129	@ 0x81
 8018db0:	f7f2 fe7c 	bl	800baac <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8018db4:	687b      	ldr	r3, [r7, #4]
 8018db6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8018dba:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8018dbe:	2200      	movs	r2, #0
 8018dc0:	2101      	movs	r1, #1
 8018dc2:	f7f2 fe73 	bl	800baac <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8018dc6:	687b      	ldr	r3, [r7, #4]
 8018dc8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8018dcc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8018dd0:	2200      	movs	r2, #0
 8018dd2:	2182      	movs	r1, #130	@ 0x82
 8018dd4:	f7f2 fe6a 	bl	800baac <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8018dd8:	2300      	movs	r3, #0
}
 8018dda:	4618      	mov	r0, r3
 8018ddc:	3708      	adds	r7, #8
 8018dde:	46bd      	mov	sp, r7
 8018de0:	bd80      	pop	{r7, pc}
 8018de2:	bf00      	nop
 8018de4:	20002ac8 	.word	0x20002ac8
 8018de8:	40006800 	.word	0x40006800

08018dec <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8018dec:	b580      	push	{r7, lr}
 8018dee:	b084      	sub	sp, #16
 8018df0:	af00      	add	r7, sp, #0
 8018df2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018df4:	2300      	movs	r3, #0
 8018df6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018df8:	2300      	movs	r3, #0
 8018dfa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8018dfc:	687b      	ldr	r3, [r7, #4]
 8018dfe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8018e02:	4618      	mov	r0, r3
 8018e04:	f7f1 fa8c 	bl	800a320 <HAL_PCD_Start>
 8018e08:	4603      	mov	r3, r0
 8018e0a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018e0c:	7bfb      	ldrb	r3, [r7, #15]
 8018e0e:	4618      	mov	r0, r3
 8018e10:	f000 f97e 	bl	8019110 <USBD_Get_USB_Status>
 8018e14:	4603      	mov	r3, r0
 8018e16:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018e18:	7bbb      	ldrb	r3, [r7, #14]
}
 8018e1a:	4618      	mov	r0, r3
 8018e1c:	3710      	adds	r7, #16
 8018e1e:	46bd      	mov	sp, r7
 8018e20:	bd80      	pop	{r7, pc}

08018e22 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8018e22:	b580      	push	{r7, lr}
 8018e24:	b084      	sub	sp, #16
 8018e26:	af00      	add	r7, sp, #0
 8018e28:	6078      	str	r0, [r7, #4]
 8018e2a:	4608      	mov	r0, r1
 8018e2c:	4611      	mov	r1, r2
 8018e2e:	461a      	mov	r2, r3
 8018e30:	4603      	mov	r3, r0
 8018e32:	70fb      	strb	r3, [r7, #3]
 8018e34:	460b      	mov	r3, r1
 8018e36:	70bb      	strb	r3, [r7, #2]
 8018e38:	4613      	mov	r3, r2
 8018e3a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018e3c:	2300      	movs	r3, #0
 8018e3e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018e40:	2300      	movs	r3, #0
 8018e42:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8018e44:	687b      	ldr	r3, [r7, #4]
 8018e46:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8018e4a:	78bb      	ldrb	r3, [r7, #2]
 8018e4c:	883a      	ldrh	r2, [r7, #0]
 8018e4e:	78f9      	ldrb	r1, [r7, #3]
 8018e50:	f7f1 fbd3 	bl	800a5fa <HAL_PCD_EP_Open>
 8018e54:	4603      	mov	r3, r0
 8018e56:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018e58:	7bfb      	ldrb	r3, [r7, #15]
 8018e5a:	4618      	mov	r0, r3
 8018e5c:	f000 f958 	bl	8019110 <USBD_Get_USB_Status>
 8018e60:	4603      	mov	r3, r0
 8018e62:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018e64:	7bbb      	ldrb	r3, [r7, #14]
}
 8018e66:	4618      	mov	r0, r3
 8018e68:	3710      	adds	r7, #16
 8018e6a:	46bd      	mov	sp, r7
 8018e6c:	bd80      	pop	{r7, pc}

08018e6e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018e6e:	b580      	push	{r7, lr}
 8018e70:	b084      	sub	sp, #16
 8018e72:	af00      	add	r7, sp, #0
 8018e74:	6078      	str	r0, [r7, #4]
 8018e76:	460b      	mov	r3, r1
 8018e78:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018e7a:	2300      	movs	r3, #0
 8018e7c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018e7e:	2300      	movs	r3, #0
 8018e80:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8018e82:	687b      	ldr	r3, [r7, #4]
 8018e84:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8018e88:	78fa      	ldrb	r2, [r7, #3]
 8018e8a:	4611      	mov	r1, r2
 8018e8c:	4618      	mov	r0, r3
 8018e8e:	f7f1 fc13 	bl	800a6b8 <HAL_PCD_EP_Close>
 8018e92:	4603      	mov	r3, r0
 8018e94:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018e96:	7bfb      	ldrb	r3, [r7, #15]
 8018e98:	4618      	mov	r0, r3
 8018e9a:	f000 f939 	bl	8019110 <USBD_Get_USB_Status>
 8018e9e:	4603      	mov	r3, r0
 8018ea0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018ea2:	7bbb      	ldrb	r3, [r7, #14]
}
 8018ea4:	4618      	mov	r0, r3
 8018ea6:	3710      	adds	r7, #16
 8018ea8:	46bd      	mov	sp, r7
 8018eaa:	bd80      	pop	{r7, pc}

08018eac <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018eac:	b580      	push	{r7, lr}
 8018eae:	b084      	sub	sp, #16
 8018eb0:	af00      	add	r7, sp, #0
 8018eb2:	6078      	str	r0, [r7, #4]
 8018eb4:	460b      	mov	r3, r1
 8018eb6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018eb8:	2300      	movs	r3, #0
 8018eba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018ebc:	2300      	movs	r3, #0
 8018ebe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8018ec0:	687b      	ldr	r3, [r7, #4]
 8018ec2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8018ec6:	78fa      	ldrb	r2, [r7, #3]
 8018ec8:	4611      	mov	r1, r2
 8018eca:	4618      	mov	r0, r3
 8018ecc:	f7f1 fcbc 	bl	800a848 <HAL_PCD_EP_SetStall>
 8018ed0:	4603      	mov	r3, r0
 8018ed2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018ed4:	7bfb      	ldrb	r3, [r7, #15]
 8018ed6:	4618      	mov	r0, r3
 8018ed8:	f000 f91a 	bl	8019110 <USBD_Get_USB_Status>
 8018edc:	4603      	mov	r3, r0
 8018ede:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018ee0:	7bbb      	ldrb	r3, [r7, #14]
}
 8018ee2:	4618      	mov	r0, r3
 8018ee4:	3710      	adds	r7, #16
 8018ee6:	46bd      	mov	sp, r7
 8018ee8:	bd80      	pop	{r7, pc}

08018eea <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018eea:	b580      	push	{r7, lr}
 8018eec:	b084      	sub	sp, #16
 8018eee:	af00      	add	r7, sp, #0
 8018ef0:	6078      	str	r0, [r7, #4]
 8018ef2:	460b      	mov	r3, r1
 8018ef4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018ef6:	2300      	movs	r3, #0
 8018ef8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018efa:	2300      	movs	r3, #0
 8018efc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8018efe:	687b      	ldr	r3, [r7, #4]
 8018f00:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8018f04:	78fa      	ldrb	r2, [r7, #3]
 8018f06:	4611      	mov	r1, r2
 8018f08:	4618      	mov	r0, r3
 8018f0a:	f7f1 fcef 	bl	800a8ec <HAL_PCD_EP_ClrStall>
 8018f0e:	4603      	mov	r3, r0
 8018f10:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018f12:	7bfb      	ldrb	r3, [r7, #15]
 8018f14:	4618      	mov	r0, r3
 8018f16:	f000 f8fb 	bl	8019110 <USBD_Get_USB_Status>
 8018f1a:	4603      	mov	r3, r0
 8018f1c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018f1e:	7bbb      	ldrb	r3, [r7, #14]
}
 8018f20:	4618      	mov	r0, r3
 8018f22:	3710      	adds	r7, #16
 8018f24:	46bd      	mov	sp, r7
 8018f26:	bd80      	pop	{r7, pc}

08018f28 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018f28:	b480      	push	{r7}
 8018f2a:	b085      	sub	sp, #20
 8018f2c:	af00      	add	r7, sp, #0
 8018f2e:	6078      	str	r0, [r7, #4]
 8018f30:	460b      	mov	r3, r1
 8018f32:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8018f34:	687b      	ldr	r3, [r7, #4]
 8018f36:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8018f3a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8018f3c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8018f40:	2b00      	cmp	r3, #0
 8018f42:	da0b      	bge.n	8018f5c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8018f44:	78fb      	ldrb	r3, [r7, #3]
 8018f46:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8018f4a:	68f9      	ldr	r1, [r7, #12]
 8018f4c:	4613      	mov	r3, r2
 8018f4e:	009b      	lsls	r3, r3, #2
 8018f50:	4413      	add	r3, r2
 8018f52:	00db      	lsls	r3, r3, #3
 8018f54:	440b      	add	r3, r1
 8018f56:	3312      	adds	r3, #18
 8018f58:	781b      	ldrb	r3, [r3, #0]
 8018f5a:	e00b      	b.n	8018f74 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8018f5c:	78fb      	ldrb	r3, [r7, #3]
 8018f5e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8018f62:	68f9      	ldr	r1, [r7, #12]
 8018f64:	4613      	mov	r3, r2
 8018f66:	009b      	lsls	r3, r3, #2
 8018f68:	4413      	add	r3, r2
 8018f6a:	00db      	lsls	r3, r3, #3
 8018f6c:	440b      	add	r3, r1
 8018f6e:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 8018f72:	781b      	ldrb	r3, [r3, #0]
  }
}
 8018f74:	4618      	mov	r0, r3
 8018f76:	3714      	adds	r7, #20
 8018f78:	46bd      	mov	sp, r7
 8018f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f7e:	4770      	bx	lr

08018f80 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8018f80:	b580      	push	{r7, lr}
 8018f82:	b084      	sub	sp, #16
 8018f84:	af00      	add	r7, sp, #0
 8018f86:	6078      	str	r0, [r7, #4]
 8018f88:	460b      	mov	r3, r1
 8018f8a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018f8c:	2300      	movs	r3, #0
 8018f8e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018f90:	2300      	movs	r3, #0
 8018f92:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8018f94:	687b      	ldr	r3, [r7, #4]
 8018f96:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8018f9a:	78fa      	ldrb	r2, [r7, #3]
 8018f9c:	4611      	mov	r1, r2
 8018f9e:	4618      	mov	r0, r3
 8018fa0:	f7f1 fb07 	bl	800a5b2 <HAL_PCD_SetAddress>
 8018fa4:	4603      	mov	r3, r0
 8018fa6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018fa8:	7bfb      	ldrb	r3, [r7, #15]
 8018faa:	4618      	mov	r0, r3
 8018fac:	f000 f8b0 	bl	8019110 <USBD_Get_USB_Status>
 8018fb0:	4603      	mov	r3, r0
 8018fb2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018fb4:	7bbb      	ldrb	r3, [r7, #14]
}
 8018fb6:	4618      	mov	r0, r3
 8018fb8:	3710      	adds	r7, #16
 8018fba:	46bd      	mov	sp, r7
 8018fbc:	bd80      	pop	{r7, pc}

08018fbe <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8018fbe:	b580      	push	{r7, lr}
 8018fc0:	b086      	sub	sp, #24
 8018fc2:	af00      	add	r7, sp, #0
 8018fc4:	60f8      	str	r0, [r7, #12]
 8018fc6:	607a      	str	r2, [r7, #4]
 8018fc8:	603b      	str	r3, [r7, #0]
 8018fca:	460b      	mov	r3, r1
 8018fcc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018fce:	2300      	movs	r3, #0
 8018fd0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018fd2:	2300      	movs	r3, #0
 8018fd4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8018fd6:	68fb      	ldr	r3, [r7, #12]
 8018fd8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8018fdc:	7af9      	ldrb	r1, [r7, #11]
 8018fde:	683b      	ldr	r3, [r7, #0]
 8018fe0:	687a      	ldr	r2, [r7, #4]
 8018fe2:	f7f1 fbfa 	bl	800a7da <HAL_PCD_EP_Transmit>
 8018fe6:	4603      	mov	r3, r0
 8018fe8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018fea:	7dfb      	ldrb	r3, [r7, #23]
 8018fec:	4618      	mov	r0, r3
 8018fee:	f000 f88f 	bl	8019110 <USBD_Get_USB_Status>
 8018ff2:	4603      	mov	r3, r0
 8018ff4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8018ff6:	7dbb      	ldrb	r3, [r7, #22]
}
 8018ff8:	4618      	mov	r0, r3
 8018ffa:	3718      	adds	r7, #24
 8018ffc:	46bd      	mov	sp, r7
 8018ffe:	bd80      	pop	{r7, pc}

08019000 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8019000:	b580      	push	{r7, lr}
 8019002:	b086      	sub	sp, #24
 8019004:	af00      	add	r7, sp, #0
 8019006:	60f8      	str	r0, [r7, #12]
 8019008:	607a      	str	r2, [r7, #4]
 801900a:	603b      	str	r3, [r7, #0]
 801900c:	460b      	mov	r3, r1
 801900e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019010:	2300      	movs	r3, #0
 8019012:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019014:	2300      	movs	r3, #0
 8019016:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8019018:	68fb      	ldr	r3, [r7, #12]
 801901a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801901e:	7af9      	ldrb	r1, [r7, #11]
 8019020:	683b      	ldr	r3, [r7, #0]
 8019022:	687a      	ldr	r2, [r7, #4]
 8019024:	f7f1 fb90 	bl	800a748 <HAL_PCD_EP_Receive>
 8019028:	4603      	mov	r3, r0
 801902a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801902c:	7dfb      	ldrb	r3, [r7, #23]
 801902e:	4618      	mov	r0, r3
 8019030:	f000 f86e 	bl	8019110 <USBD_Get_USB_Status>
 8019034:	4603      	mov	r3, r0
 8019036:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8019038:	7dbb      	ldrb	r3, [r7, #22]
}
 801903a:	4618      	mov	r0, r3
 801903c:	3718      	adds	r7, #24
 801903e:	46bd      	mov	sp, r7
 8019040:	bd80      	pop	{r7, pc}

08019042 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019042:	b580      	push	{r7, lr}
 8019044:	b082      	sub	sp, #8
 8019046:	af00      	add	r7, sp, #0
 8019048:	6078      	str	r0, [r7, #4]
 801904a:	460b      	mov	r3, r1
 801904c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801904e:	687b      	ldr	r3, [r7, #4]
 8019050:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8019054:	78fa      	ldrb	r2, [r7, #3]
 8019056:	4611      	mov	r1, r2
 8019058:	4618      	mov	r0, r3
 801905a:	f7f1 fba6 	bl	800a7aa <HAL_PCD_EP_GetRxCount>
 801905e:	4603      	mov	r3, r0
}
 8019060:	4618      	mov	r0, r3
 8019062:	3708      	adds	r7, #8
 8019064:	46bd      	mov	sp, r7
 8019066:	bd80      	pop	{r7, pc}

08019068 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019068:	b580      	push	{r7, lr}
 801906a:	b082      	sub	sp, #8
 801906c:	af00      	add	r7, sp, #0
 801906e:	6078      	str	r0, [r7, #4]
 8019070:	460b      	mov	r3, r1
 8019072:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8019074:	78fb      	ldrb	r3, [r7, #3]
 8019076:	2b00      	cmp	r3, #0
 8019078:	d002      	beq.n	8019080 <HAL_PCDEx_LPM_Callback+0x18>
 801907a:	2b01      	cmp	r3, #1
 801907c:	d013      	beq.n	80190a6 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 801907e:	e023      	b.n	80190c8 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8019080:	687b      	ldr	r3, [r7, #4]
 8019082:	7a5b      	ldrb	r3, [r3, #9]
 8019084:	2b00      	cmp	r3, #0
 8019086:	d007      	beq.n	8019098 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8019088:	f000 f83c 	bl	8019104 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801908c:	4b10      	ldr	r3, [pc, #64]	@ (80190d0 <HAL_PCDEx_LPM_Callback+0x68>)
 801908e:	691b      	ldr	r3, [r3, #16]
 8019090:	4a0f      	ldr	r2, [pc, #60]	@ (80190d0 <HAL_PCDEx_LPM_Callback+0x68>)
 8019092:	f023 0306 	bic.w	r3, r3, #6
 8019096:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8019098:	687b      	ldr	r3, [r7, #4]
 801909a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 801909e:	4618      	mov	r0, r3
 80190a0:	f7fa fe8f 	bl	8013dc2 <USBD_LL_Resume>
    break;
 80190a4:	e010      	b.n	80190c8 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 80190a6:	687b      	ldr	r3, [r7, #4]
 80190a8:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80190ac:	4618      	mov	r0, r3
 80190ae:	f7fa fe6c 	bl	8013d8a <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80190b2:	687b      	ldr	r3, [r7, #4]
 80190b4:	7a5b      	ldrb	r3, [r3, #9]
 80190b6:	2b00      	cmp	r3, #0
 80190b8:	d005      	beq.n	80190c6 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80190ba:	4b05      	ldr	r3, [pc, #20]	@ (80190d0 <HAL_PCDEx_LPM_Callback+0x68>)
 80190bc:	691b      	ldr	r3, [r3, #16]
 80190be:	4a04      	ldr	r2, [pc, #16]	@ (80190d0 <HAL_PCDEx_LPM_Callback+0x68>)
 80190c0:	f043 0306 	orr.w	r3, r3, #6
 80190c4:	6113      	str	r3, [r2, #16]
    break;
 80190c6:	bf00      	nop
}
 80190c8:	bf00      	nop
 80190ca:	3708      	adds	r7, #8
 80190cc:	46bd      	mov	sp, r7
 80190ce:	bd80      	pop	{r7, pc}
 80190d0:	e000ed00 	.word	0xe000ed00

080190d4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80190d4:	b480      	push	{r7}
 80190d6:	b083      	sub	sp, #12
 80190d8:	af00      	add	r7, sp, #0
 80190da:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80190dc:	4b03      	ldr	r3, [pc, #12]	@ (80190ec <USBD_static_malloc+0x18>)
}
 80190de:	4618      	mov	r0, r3
 80190e0:	370c      	adds	r7, #12
 80190e2:	46bd      	mov	sp, r7
 80190e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80190e8:	4770      	bx	lr
 80190ea:	bf00      	nop
 80190ec:	20002da4 	.word	0x20002da4

080190f0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80190f0:	b480      	push	{r7}
 80190f2:	b083      	sub	sp, #12
 80190f4:	af00      	add	r7, sp, #0
 80190f6:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 80190f8:	bf00      	nop
 80190fa:	370c      	adds	r7, #12
 80190fc:	46bd      	mov	sp, r7
 80190fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019102:	4770      	bx	lr

08019104 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8019104:	b580      	push	{r7, lr}
 8019106:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8019108:	f7e9 feb6 	bl	8002e78 <SystemClock_Config>
}
 801910c:	bf00      	nop
 801910e:	bd80      	pop	{r7, pc}

08019110 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8019110:	b480      	push	{r7}
 8019112:	b085      	sub	sp, #20
 8019114:	af00      	add	r7, sp, #0
 8019116:	4603      	mov	r3, r0
 8019118:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801911a:	2300      	movs	r3, #0
 801911c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801911e:	79fb      	ldrb	r3, [r7, #7]
 8019120:	2b03      	cmp	r3, #3
 8019122:	d817      	bhi.n	8019154 <USBD_Get_USB_Status+0x44>
 8019124:	a201      	add	r2, pc, #4	@ (adr r2, 801912c <USBD_Get_USB_Status+0x1c>)
 8019126:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801912a:	bf00      	nop
 801912c:	0801913d 	.word	0x0801913d
 8019130:	08019143 	.word	0x08019143
 8019134:	08019149 	.word	0x08019149
 8019138:	0801914f 	.word	0x0801914f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801913c:	2300      	movs	r3, #0
 801913e:	73fb      	strb	r3, [r7, #15]
    break;
 8019140:	e00b      	b.n	801915a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8019142:	2303      	movs	r3, #3
 8019144:	73fb      	strb	r3, [r7, #15]
    break;
 8019146:	e008      	b.n	801915a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8019148:	2301      	movs	r3, #1
 801914a:	73fb      	strb	r3, [r7, #15]
    break;
 801914c:	e005      	b.n	801915a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801914e:	2303      	movs	r3, #3
 8019150:	73fb      	strb	r3, [r7, #15]
    break;
 8019152:	e002      	b.n	801915a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8019154:	2303      	movs	r3, #3
 8019156:	73fb      	strb	r3, [r7, #15]
    break;
 8019158:	bf00      	nop
  }
  return usb_status;
 801915a:	7bfb      	ldrb	r3, [r7, #15]
}
 801915c:	4618      	mov	r0, r3
 801915e:	3714      	adds	r7, #20
 8019160:	46bd      	mov	sp, r7
 8019162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019166:	4770      	bx	lr

08019168 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 8019168:	b480      	push	{r7}
 801916a:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 801916c:	4b05      	ldr	r3, [pc, #20]	@ (8019184 <UTIL_LPM_Init+0x1c>)
 801916e:	2200      	movs	r2, #0
 8019170:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8019172:	4b05      	ldr	r3, [pc, #20]	@ (8019188 <UTIL_LPM_Init+0x20>)
 8019174:	2200      	movs	r2, #0
 8019176:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8019178:	bf00      	nop
 801917a:	46bd      	mov	sp, r7
 801917c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019180:	4770      	bx	lr
 8019182:	bf00      	nop
 8019184:	20002fc4 	.word	0x20002fc4
 8019188:	20002fc8 	.word	0x20002fc8

0801918c <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801918c:	b480      	push	{r7}
 801918e:	b087      	sub	sp, #28
 8019190:	af00      	add	r7, sp, #0
 8019192:	6078      	str	r0, [r7, #4]
 8019194:	460b      	mov	r3, r1
 8019196:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019198:	f3ef 8310 	mrs	r3, PRIMASK
 801919c:	613b      	str	r3, [r7, #16]
  return(result);
 801919e:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 80191a0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80191a2:	b672      	cpsid	i
}
 80191a4:	bf00      	nop
  
  switch(state)
 80191a6:	78fb      	ldrb	r3, [r7, #3]
 80191a8:	2b00      	cmp	r3, #0
 80191aa:	d008      	beq.n	80191be <UTIL_LPM_SetOffMode+0x32>
 80191ac:	2b01      	cmp	r3, #1
 80191ae:	d10e      	bne.n	80191ce <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 80191b0:	4b0d      	ldr	r3, [pc, #52]	@ (80191e8 <UTIL_LPM_SetOffMode+0x5c>)
 80191b2:	681a      	ldr	r2, [r3, #0]
 80191b4:	687b      	ldr	r3, [r7, #4]
 80191b6:	4313      	orrs	r3, r2
 80191b8:	4a0b      	ldr	r2, [pc, #44]	@ (80191e8 <UTIL_LPM_SetOffMode+0x5c>)
 80191ba:	6013      	str	r3, [r2, #0]
      break;
 80191bc:	e008      	b.n	80191d0 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 80191be:	687b      	ldr	r3, [r7, #4]
 80191c0:	43da      	mvns	r2, r3
 80191c2:	4b09      	ldr	r3, [pc, #36]	@ (80191e8 <UTIL_LPM_SetOffMode+0x5c>)
 80191c4:	681b      	ldr	r3, [r3, #0]
 80191c6:	4013      	ands	r3, r2
 80191c8:	4a07      	ldr	r2, [pc, #28]	@ (80191e8 <UTIL_LPM_SetOffMode+0x5c>)
 80191ca:	6013      	str	r3, [r2, #0]
      break;
 80191cc:	e000      	b.n	80191d0 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 80191ce:	bf00      	nop
 80191d0:	697b      	ldr	r3, [r7, #20]
 80191d2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80191d4:	68fb      	ldr	r3, [r7, #12]
 80191d6:	f383 8810 	msr	PRIMASK, r3
}
 80191da:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 80191dc:	bf00      	nop
 80191de:	371c      	adds	r7, #28
 80191e0:	46bd      	mov	sp, r7
 80191e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191e6:	4770      	bx	lr
 80191e8:	20002fc8 	.word	0x20002fc8

080191ec <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 80191ec:	b580      	push	{r7, lr}
 80191ee:	b090      	sub	sp, #64	@ 0x40
 80191f0:	af00      	add	r7, sp, #0
 80191f2:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 80191f4:	4b73      	ldr	r3, [pc, #460]	@ (80193c4 <UTIL_SEQ_Run+0x1d8>)
 80191f6:	681b      	ldr	r3, [r3, #0]
 80191f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  SuperMask &= Mask_bm;
 80191fa:	4b72      	ldr	r3, [pc, #456]	@ (80193c4 <UTIL_SEQ_Run+0x1d8>)
 80191fc:	681a      	ldr	r2, [r3, #0]
 80191fe:	687b      	ldr	r3, [r7, #4]
 8019200:	4013      	ands	r3, r2
 8019202:	4a70      	ldr	r2, [pc, #448]	@ (80193c4 <UTIL_SEQ_Run+0x1d8>)
 8019204:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 8019206:	4b70      	ldr	r3, [pc, #448]	@ (80193c8 <UTIL_SEQ_Run+0x1dc>)
 8019208:	681b      	ldr	r3, [r3, #0]
 801920a:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 801920c:	4b6f      	ldr	r3, [pc, #444]	@ (80193cc <UTIL_SEQ_Run+0x1e0>)
 801920e:	681b      	ldr	r3, [r3, #0]
 8019210:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 8019212:	4b6f      	ldr	r3, [pc, #444]	@ (80193d0 <UTIL_SEQ_Run+0x1e4>)
 8019214:	681b      	ldr	r3, [r3, #0]
 8019216:	633b      	str	r3, [r7, #48]	@ 0x30
  local_evtwaited =  EvtWaited;
 8019218:	4b6e      	ldr	r3, [pc, #440]	@ (80193d4 <UTIL_SEQ_Run+0x1e8>)
 801921a:	681b      	ldr	r3, [r3, #0]
 801921c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 801921e:	e08d      	b.n	801933c <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 8019220:	2300      	movs	r3, #0
 8019222:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8019224:	e002      	b.n	801922c <UTIL_SEQ_Run+0x40>
    {
      counter++;
 8019226:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019228:	3301      	adds	r3, #1
 801922a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 801922c:	4a6a      	ldr	r2, [pc, #424]	@ (80193d8 <UTIL_SEQ_Run+0x1ec>)
 801922e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019230:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8019234:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019236:	401a      	ands	r2, r3
 8019238:	4b62      	ldr	r3, [pc, #392]	@ (80193c4 <UTIL_SEQ_Run+0x1d8>)
 801923a:	681b      	ldr	r3, [r3, #0]
 801923c:	4013      	ands	r3, r2
 801923e:	2b00      	cmp	r3, #0
 8019240:	d0f1      	beq.n	8019226 <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 8019242:	4a65      	ldr	r2, [pc, #404]	@ (80193d8 <UTIL_SEQ_Run+0x1ec>)
 8019244:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019246:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801924a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801924c:	401a      	ands	r2, r3
 801924e:	4b5d      	ldr	r3, [pc, #372]	@ (80193c4 <UTIL_SEQ_Run+0x1d8>)
 8019250:	681b      	ldr	r3, [r3, #0]
 8019252:	4013      	ands	r3, r2
 8019254:	627b      	str	r3, [r7, #36]	@ 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 8019256:	4a60      	ldr	r2, [pc, #384]	@ (80193d8 <UTIL_SEQ_Run+0x1ec>)
 8019258:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801925a:	00db      	lsls	r3, r3, #3
 801925c:	4413      	add	r3, r2
 801925e:	685a      	ldr	r2, [r3, #4]
 8019260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019262:	4013      	ands	r3, r2
 8019264:	2b00      	cmp	r3, #0
 8019266:	d106      	bne.n	8019276 <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 8019268:	4a5b      	ldr	r2, [pc, #364]	@ (80193d8 <UTIL_SEQ_Run+0x1ec>)
 801926a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801926c:	00db      	lsls	r3, r3, #3
 801926e:	4413      	add	r3, r2
 8019270:	f04f 32ff 	mov.w	r2, #4294967295
 8019274:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 8019276:	4a58      	ldr	r2, [pc, #352]	@ (80193d8 <UTIL_SEQ_Run+0x1ec>)
 8019278:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801927a:	00db      	lsls	r3, r3, #3
 801927c:	4413      	add	r3, r2
 801927e:	685a      	ldr	r2, [r3, #4]
 8019280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019282:	4013      	ands	r3, r2
 8019284:	4618      	mov	r0, r3
 8019286:	f000 f9b3 	bl	80195f0 <SEQ_BitPosition>
 801928a:	4603      	mov	r3, r0
 801928c:	461a      	mov	r2, r3
 801928e:	4b53      	ldr	r3, [pc, #332]	@ (80193dc <UTIL_SEQ_Run+0x1f0>)
 8019290:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 8019292:	4a51      	ldr	r2, [pc, #324]	@ (80193d8 <UTIL_SEQ_Run+0x1ec>)
 8019294:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019296:	00db      	lsls	r3, r3, #3
 8019298:	4413      	add	r3, r2
 801929a:	685a      	ldr	r2, [r3, #4]
 801929c:	4b4f      	ldr	r3, [pc, #316]	@ (80193dc <UTIL_SEQ_Run+0x1f0>)
 801929e:	681b      	ldr	r3, [r3, #0]
 80192a0:	2101      	movs	r1, #1
 80192a2:	fa01 f303 	lsl.w	r3, r1, r3
 80192a6:	43db      	mvns	r3, r3
 80192a8:	401a      	ands	r2, r3
 80192aa:	494b      	ldr	r1, [pc, #300]	@ (80193d8 <UTIL_SEQ_Run+0x1ec>)
 80192ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80192ae:	00db      	lsls	r3, r3, #3
 80192b0:	440b      	add	r3, r1
 80192b2:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80192b4:	f3ef 8310 	mrs	r3, PRIMASK
 80192b8:	61bb      	str	r3, [r7, #24]
  return(result);
 80192ba:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80192bc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 80192be:	b672      	cpsid	i
}
 80192c0:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 80192c2:	4b46      	ldr	r3, [pc, #280]	@ (80193dc <UTIL_SEQ_Run+0x1f0>)
 80192c4:	681b      	ldr	r3, [r3, #0]
 80192c6:	2201      	movs	r2, #1
 80192c8:	fa02 f303 	lsl.w	r3, r2, r3
 80192cc:	43da      	mvns	r2, r3
 80192ce:	4b3e      	ldr	r3, [pc, #248]	@ (80193c8 <UTIL_SEQ_Run+0x1dc>)
 80192d0:	681b      	ldr	r3, [r3, #0]
 80192d2:	4013      	ands	r3, r2
 80192d4:	4a3c      	ldr	r2, [pc, #240]	@ (80193c8 <UTIL_SEQ_Run+0x1dc>)
 80192d6:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 80192d8:	2301      	movs	r3, #1
 80192da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80192dc:	e013      	b.n	8019306 <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 80192de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80192e0:	3b01      	subs	r3, #1
 80192e2:	4a3d      	ldr	r2, [pc, #244]	@ (80193d8 <UTIL_SEQ_Run+0x1ec>)
 80192e4:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 80192e8:	4b3c      	ldr	r3, [pc, #240]	@ (80193dc <UTIL_SEQ_Run+0x1f0>)
 80192ea:	681b      	ldr	r3, [r3, #0]
 80192ec:	2201      	movs	r2, #1
 80192ee:	fa02 f303 	lsl.w	r3, r2, r3
 80192f2:	43da      	mvns	r2, r3
 80192f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80192f6:	3b01      	subs	r3, #1
 80192f8:	400a      	ands	r2, r1
 80192fa:	4937      	ldr	r1, [pc, #220]	@ (80193d8 <UTIL_SEQ_Run+0x1ec>)
 80192fc:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8019300:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019302:	3b01      	subs	r3, #1
 8019304:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8019306:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019308:	2b00      	cmp	r3, #0
 801930a:	d1e8      	bne.n	80192de <UTIL_SEQ_Run+0xf2>
 801930c:	6a3b      	ldr	r3, [r7, #32]
 801930e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019310:	697b      	ldr	r3, [r7, #20]
 8019312:	f383 8810 	msr	PRIMASK, r3
}
 8019316:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 8019318:	4b30      	ldr	r3, [pc, #192]	@ (80193dc <UTIL_SEQ_Run+0x1f0>)
 801931a:	681b      	ldr	r3, [r3, #0]
 801931c:	4a30      	ldr	r2, [pc, #192]	@ (80193e0 <UTIL_SEQ_Run+0x1f4>)
 801931e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8019322:	4798      	blx	r3

    local_taskset = TaskSet;
 8019324:	4b28      	ldr	r3, [pc, #160]	@ (80193c8 <UTIL_SEQ_Run+0x1dc>)
 8019326:	681b      	ldr	r3, [r3, #0]
 8019328:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
 801932a:	4b28      	ldr	r3, [pc, #160]	@ (80193cc <UTIL_SEQ_Run+0x1e0>)
 801932c:	681b      	ldr	r3, [r3, #0]
 801932e:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
 8019330:	4b27      	ldr	r3, [pc, #156]	@ (80193d0 <UTIL_SEQ_Run+0x1e4>)
 8019332:	681b      	ldr	r3, [r3, #0]
 8019334:	633b      	str	r3, [r7, #48]	@ 0x30
    local_evtwaited = EvtWaited;
 8019336:	4b27      	ldr	r3, [pc, #156]	@ (80193d4 <UTIL_SEQ_Run+0x1e8>)
 8019338:	681b      	ldr	r3, [r3, #0]
 801933a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 801933c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801933e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019340:	401a      	ands	r2, r3
 8019342:	4b20      	ldr	r3, [pc, #128]	@ (80193c4 <UTIL_SEQ_Run+0x1d8>)
 8019344:	681b      	ldr	r3, [r3, #0]
 8019346:	4013      	ands	r3, r2
 8019348:	2b00      	cmp	r3, #0
 801934a:	d005      	beq.n	8019358 <UTIL_SEQ_Run+0x16c>
 801934c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801934e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019350:	4013      	ands	r3, r2
 8019352:	2b00      	cmp	r3, #0
 8019354:	f43f af64 	beq.w	8019220 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 8019358:	4b20      	ldr	r3, [pc, #128]	@ (80193dc <UTIL_SEQ_Run+0x1f0>)
 801935a:	f04f 32ff 	mov.w	r2, #4294967295
 801935e:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 8019360:	f000 f938 	bl	80195d4 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019364:	f3ef 8310 	mrs	r3, PRIMASK
 8019368:	613b      	str	r3, [r7, #16]
  return(result);
 801936a:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 801936c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801936e:	b672      	cpsid	i
}
 8019370:	bf00      	nop
  local_taskset = TaskSet;
 8019372:	4b15      	ldr	r3, [pc, #84]	@ (80193c8 <UTIL_SEQ_Run+0x1dc>)
 8019374:	681b      	ldr	r3, [r3, #0]
 8019376:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 8019378:	4b14      	ldr	r3, [pc, #80]	@ (80193cc <UTIL_SEQ_Run+0x1e0>)
 801937a:	681b      	ldr	r3, [r3, #0]
 801937c:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 801937e:	4b14      	ldr	r3, [pc, #80]	@ (80193d0 <UTIL_SEQ_Run+0x1e4>)
 8019380:	681b      	ldr	r3, [r3, #0]
 8019382:	633b      	str	r3, [r7, #48]	@ 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 8019384:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8019386:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019388:	401a      	ands	r2, r3
 801938a:	4b0e      	ldr	r3, [pc, #56]	@ (80193c4 <UTIL_SEQ_Run+0x1d8>)
 801938c:	681b      	ldr	r3, [r3, #0]
 801938e:	4013      	ands	r3, r2
 8019390:	2b00      	cmp	r3, #0
 8019392:	d107      	bne.n	80193a4 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 8019394:	4b0f      	ldr	r3, [pc, #60]	@ (80193d4 <UTIL_SEQ_Run+0x1e8>)
 8019396:	681a      	ldr	r2, [r3, #0]
 8019398:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801939a:	4013      	ands	r3, r2
 801939c:	2b00      	cmp	r3, #0
 801939e:	d101      	bne.n	80193a4 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 80193a0:	f7e8 f9f2 	bl	8001788 <UTIL_SEQ_Idle>
 80193a4:	69fb      	ldr	r3, [r7, #28]
 80193a6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80193a8:	68fb      	ldr	r3, [r7, #12]
 80193aa:	f383 8810 	msr	PRIMASK, r3
}
 80193ae:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 80193b0:	f000 f917 	bl	80195e2 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 80193b4:	4a03      	ldr	r2, [pc, #12]	@ (80193c4 <UTIL_SEQ_Run+0x1d8>)
 80193b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80193b8:	6013      	str	r3, [r2, #0]

  return;
 80193ba:	bf00      	nop
}
 80193bc:	3740      	adds	r7, #64	@ 0x40
 80193be:	46bd      	mov	sp, r7
 80193c0:	bd80      	pop	{r7, pc}
 80193c2:	bf00      	nop
 80193c4:	20000140 	.word	0x20000140
 80193c8:	20002fcc 	.word	0x20002fcc
 80193cc:	20002fd0 	.word	0x20002fd0
 80193d0:	2000013c 	.word	0x2000013c
 80193d4:	20002fd4 	.word	0x20002fd4
 80193d8:	2000305c 	.word	0x2000305c
 80193dc:	20002fd8 	.word	0x20002fd8
 80193e0:	20002fdc 	.word	0x20002fdc

080193e4 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 80193e4:	b580      	push	{r7, lr}
 80193e6:	b088      	sub	sp, #32
 80193e8:	af00      	add	r7, sp, #0
 80193ea:	60f8      	str	r0, [r7, #12]
 80193ec:	60b9      	str	r1, [r7, #8]
 80193ee:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80193f0:	f3ef 8310 	mrs	r3, PRIMASK
 80193f4:	617b      	str	r3, [r7, #20]
  return(result);
 80193f6:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 80193f8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 80193fa:	b672      	cpsid	i
}
 80193fc:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 80193fe:	68f8      	ldr	r0, [r7, #12]
 8019400:	f000 f8f6 	bl	80195f0 <SEQ_BitPosition>
 8019404:	4603      	mov	r3, r0
 8019406:	4619      	mov	r1, r3
 8019408:	4a06      	ldr	r2, [pc, #24]	@ (8019424 <UTIL_SEQ_RegTask+0x40>)
 801940a:	687b      	ldr	r3, [r7, #4]
 801940c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8019410:	69fb      	ldr	r3, [r7, #28]
 8019412:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019414:	69bb      	ldr	r3, [r7, #24]
 8019416:	f383 8810 	msr	PRIMASK, r3
}
 801941a:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 801941c:	bf00      	nop
}
 801941e:	3720      	adds	r7, #32
 8019420:	46bd      	mov	sp, r7
 8019422:	bd80      	pop	{r7, pc}
 8019424:	20002fdc 	.word	0x20002fdc

08019428 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 8019428:	b480      	push	{r7}
 801942a:	b087      	sub	sp, #28
 801942c:	af00      	add	r7, sp, #0
 801942e:	6078      	str	r0, [r7, #4]
 8019430:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019432:	f3ef 8310 	mrs	r3, PRIMASK
 8019436:	60fb      	str	r3, [r7, #12]
  return(result);
 8019438:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801943a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801943c:	b672      	cpsid	i
}
 801943e:	bf00      	nop

  TaskSet |= TaskId_bm;
 8019440:	4b0d      	ldr	r3, [pc, #52]	@ (8019478 <UTIL_SEQ_SetTask+0x50>)
 8019442:	681a      	ldr	r2, [r3, #0]
 8019444:	687b      	ldr	r3, [r7, #4]
 8019446:	4313      	orrs	r3, r2
 8019448:	4a0b      	ldr	r2, [pc, #44]	@ (8019478 <UTIL_SEQ_SetTask+0x50>)
 801944a:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 801944c:	4a0b      	ldr	r2, [pc, #44]	@ (801947c <UTIL_SEQ_SetTask+0x54>)
 801944e:	683b      	ldr	r3, [r7, #0]
 8019450:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8019454:	687b      	ldr	r3, [r7, #4]
 8019456:	431a      	orrs	r2, r3
 8019458:	4908      	ldr	r1, [pc, #32]	@ (801947c <UTIL_SEQ_SetTask+0x54>)
 801945a:	683b      	ldr	r3, [r7, #0]
 801945c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 8019460:	697b      	ldr	r3, [r7, #20]
 8019462:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019464:	693b      	ldr	r3, [r7, #16]
 8019466:	f383 8810 	msr	PRIMASK, r3
}
 801946a:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 801946c:	bf00      	nop
}
 801946e:	371c      	adds	r7, #28
 8019470:	46bd      	mov	sp, r7
 8019472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019476:	4770      	bx	lr
 8019478:	20002fcc 	.word	0x20002fcc
 801947c:	2000305c 	.word	0x2000305c

08019480 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8019480:	b480      	push	{r7}
 8019482:	b087      	sub	sp, #28
 8019484:	af00      	add	r7, sp, #0
 8019486:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019488:	f3ef 8310 	mrs	r3, PRIMASK
 801948c:	60fb      	str	r3, [r7, #12]
  return(result);
 801948e:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8019490:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8019492:	b672      	cpsid	i
}
 8019494:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 8019496:	687b      	ldr	r3, [r7, #4]
 8019498:	43da      	mvns	r2, r3
 801949a:	4b08      	ldr	r3, [pc, #32]	@ (80194bc <UTIL_SEQ_PauseTask+0x3c>)
 801949c:	681b      	ldr	r3, [r3, #0]
 801949e:	4013      	ands	r3, r2
 80194a0:	4a06      	ldr	r2, [pc, #24]	@ (80194bc <UTIL_SEQ_PauseTask+0x3c>)
 80194a2:	6013      	str	r3, [r2, #0]
 80194a4:	697b      	ldr	r3, [r7, #20]
 80194a6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80194a8:	693b      	ldr	r3, [r7, #16]
 80194aa:	f383 8810 	msr	PRIMASK, r3
}
 80194ae:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 80194b0:	bf00      	nop
}
 80194b2:	371c      	adds	r7, #28
 80194b4:	46bd      	mov	sp, r7
 80194b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80194ba:	4770      	bx	lr
 80194bc:	2000013c 	.word	0x2000013c

080194c0 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 80194c0:	b480      	push	{r7}
 80194c2:	b087      	sub	sp, #28
 80194c4:	af00      	add	r7, sp, #0
 80194c6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80194c8:	f3ef 8310 	mrs	r3, PRIMASK
 80194cc:	60fb      	str	r3, [r7, #12]
  return(result);
 80194ce:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80194d0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80194d2:	b672      	cpsid	i
}
 80194d4:	bf00      	nop

  TaskMask |= TaskId_bm;
 80194d6:	4b09      	ldr	r3, [pc, #36]	@ (80194fc <UTIL_SEQ_ResumeTask+0x3c>)
 80194d8:	681a      	ldr	r2, [r3, #0]
 80194da:	687b      	ldr	r3, [r7, #4]
 80194dc:	4313      	orrs	r3, r2
 80194de:	4a07      	ldr	r2, [pc, #28]	@ (80194fc <UTIL_SEQ_ResumeTask+0x3c>)
 80194e0:	6013      	str	r3, [r2, #0]
 80194e2:	697b      	ldr	r3, [r7, #20]
 80194e4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80194e6:	693b      	ldr	r3, [r7, #16]
 80194e8:	f383 8810 	msr	PRIMASK, r3
}
 80194ec:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 80194ee:	bf00      	nop
}
 80194f0:	371c      	adds	r7, #28
 80194f2:	46bd      	mov	sp, r7
 80194f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80194f8:	4770      	bx	lr
 80194fa:	bf00      	nop
 80194fc:	2000013c 	.word	0x2000013c

08019500 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 8019500:	b480      	push	{r7}
 8019502:	b087      	sub	sp, #28
 8019504:	af00      	add	r7, sp, #0
 8019506:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019508:	f3ef 8310 	mrs	r3, PRIMASK
 801950c:	60fb      	str	r3, [r7, #12]
  return(result);
 801950e:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8019510:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8019512:	b672      	cpsid	i
}
 8019514:	bf00      	nop

  EvtSet |= EvtId_bm;
 8019516:	4b09      	ldr	r3, [pc, #36]	@ (801953c <UTIL_SEQ_SetEvt+0x3c>)
 8019518:	681a      	ldr	r2, [r3, #0]
 801951a:	687b      	ldr	r3, [r7, #4]
 801951c:	4313      	orrs	r3, r2
 801951e:	4a07      	ldr	r2, [pc, #28]	@ (801953c <UTIL_SEQ_SetEvt+0x3c>)
 8019520:	6013      	str	r3, [r2, #0]
 8019522:	697b      	ldr	r3, [r7, #20]
 8019524:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019526:	693b      	ldr	r3, [r7, #16]
 8019528:	f383 8810 	msr	PRIMASK, r3
}
 801952c:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 801952e:	bf00      	nop
}
 8019530:	371c      	adds	r7, #28
 8019532:	46bd      	mov	sp, r7
 8019534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019538:	4770      	bx	lr
 801953a:	bf00      	nop
 801953c:	20002fd0 	.word	0x20002fd0

08019540 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 8019540:	b580      	push	{r7, lr}
 8019542:	b088      	sub	sp, #32
 8019544:	af00      	add	r7, sp, #0
 8019546:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 8019548:	4b1f      	ldr	r3, [pc, #124]	@ (80195c8 <UTIL_SEQ_WaitEvt+0x88>)
 801954a:	681b      	ldr	r3, [r3, #0]
 801954c:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 801954e:	4b1e      	ldr	r3, [pc, #120]	@ (80195c8 <UTIL_SEQ_WaitEvt+0x88>)
 8019550:	681b      	ldr	r3, [r3, #0]
 8019552:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019556:	d102      	bne.n	801955e <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 8019558:	2300      	movs	r3, #0
 801955a:	61fb      	str	r3, [r7, #28]
 801955c:	e005      	b.n	801956a <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 801955e:	4b1a      	ldr	r3, [pc, #104]	@ (80195c8 <UTIL_SEQ_WaitEvt+0x88>)
 8019560:	681b      	ldr	r3, [r3, #0]
 8019562:	2201      	movs	r2, #1
 8019564:	fa02 f303 	lsl.w	r3, r2, r3
 8019568:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 801956a:	4b18      	ldr	r3, [pc, #96]	@ (80195cc <UTIL_SEQ_WaitEvt+0x8c>)
 801956c:	681b      	ldr	r3, [r3, #0]
 801956e:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 8019570:	4a16      	ldr	r2, [pc, #88]	@ (80195cc <UTIL_SEQ_WaitEvt+0x8c>)
 8019572:	687b      	ldr	r3, [r7, #4]
 8019574:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 8019576:	e003      	b.n	8019580 <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 8019578:	6879      	ldr	r1, [r7, #4]
 801957a:	69f8      	ldr	r0, [r7, #28]
 801957c:	f7e8 f90b 	bl	8001796 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 8019580:	4b13      	ldr	r3, [pc, #76]	@ (80195d0 <UTIL_SEQ_WaitEvt+0x90>)
 8019582:	681a      	ldr	r2, [r3, #0]
 8019584:	687b      	ldr	r3, [r7, #4]
 8019586:	4013      	ands	r3, r2
 8019588:	2b00      	cmp	r3, #0
 801958a:	d0f5      	beq.n	8019578 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 801958c:	4a0e      	ldr	r2, [pc, #56]	@ (80195c8 <UTIL_SEQ_WaitEvt+0x88>)
 801958e:	69bb      	ldr	r3, [r7, #24]
 8019590:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019592:	f3ef 8310 	mrs	r3, PRIMASK
 8019596:	60bb      	str	r3, [r7, #8]
  return(result);
 8019598:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801959a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801959c:	b672      	cpsid	i
}
 801959e:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 80195a0:	687b      	ldr	r3, [r7, #4]
 80195a2:	43da      	mvns	r2, r3
 80195a4:	4b0a      	ldr	r3, [pc, #40]	@ (80195d0 <UTIL_SEQ_WaitEvt+0x90>)
 80195a6:	681b      	ldr	r3, [r3, #0]
 80195a8:	4013      	ands	r3, r2
 80195aa:	4a09      	ldr	r2, [pc, #36]	@ (80195d0 <UTIL_SEQ_WaitEvt+0x90>)
 80195ac:	6013      	str	r3, [r2, #0]
 80195ae:	693b      	ldr	r3, [r7, #16]
 80195b0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80195b2:	68fb      	ldr	r3, [r7, #12]
 80195b4:	f383 8810 	msr	PRIMASK, r3
}
 80195b8:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 80195ba:	4a04      	ldr	r2, [pc, #16]	@ (80195cc <UTIL_SEQ_WaitEvt+0x8c>)
 80195bc:	697b      	ldr	r3, [r7, #20]
 80195be:	6013      	str	r3, [r2, #0]
  return;
 80195c0:	bf00      	nop
}
 80195c2:	3720      	adds	r7, #32
 80195c4:	46bd      	mov	sp, r7
 80195c6:	bd80      	pop	{r7, pc}
 80195c8:	20002fd8 	.word	0x20002fd8
 80195cc:	20002fd4 	.word	0x20002fd4
 80195d0:	20002fd0 	.word	0x20002fd0

080195d4 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 80195d4:	b480      	push	{r7}
 80195d6:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 80195d8:	bf00      	nop
}
 80195da:	46bd      	mov	sp, r7
 80195dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80195e0:	4770      	bx	lr

080195e2 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 80195e2:	b480      	push	{r7}
 80195e4:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 80195e6:	bf00      	nop
}
 80195e8:	46bd      	mov	sp, r7
 80195ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80195ee:	4770      	bx	lr

080195f0 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 80195f0:	b480      	push	{r7}
 80195f2:	b085      	sub	sp, #20
 80195f4:	af00      	add	r7, sp, #0
 80195f6:	6078      	str	r0, [r7, #4]
 80195f8:	687b      	ldr	r3, [r7, #4]
 80195fa:	60fb      	str	r3, [r7, #12]
  if (value == 0U)
 80195fc:	68fb      	ldr	r3, [r7, #12]
 80195fe:	2b00      	cmp	r3, #0
 8019600:	d101      	bne.n	8019606 <SEQ_BitPosition+0x16>
    return 32U;
 8019602:	2320      	movs	r3, #32
 8019604:	e003      	b.n	801960e <SEQ_BitPosition+0x1e>
  return __builtin_clz(value);
 8019606:	68fb      	ldr	r3, [r7, #12]
 8019608:	fab3 f383 	clz	r3, r3
 801960c:	b2db      	uxtb	r3, r3
  return (uint8_t)(31 -__CLZ( Value ));
 801960e:	f1c3 031f 	rsb	r3, r3, #31
 8019612:	b2db      	uxtb	r3, r3
}
 8019614:	4618      	mov	r0, r3
 8019616:	3714      	adds	r7, #20
 8019618:	46bd      	mov	sp, r7
 801961a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801961e:	4770      	bx	lr

08019620 <atoi>:
 8019620:	220a      	movs	r2, #10
 8019622:	2100      	movs	r1, #0
 8019624:	f000 bfa6 	b.w	801a574 <strtol>

08019628 <malloc>:
 8019628:	4b02      	ldr	r3, [pc, #8]	@ (8019634 <malloc+0xc>)
 801962a:	4601      	mov	r1, r0
 801962c:	6818      	ldr	r0, [r3, #0]
 801962e:	f000 b82d 	b.w	801968c <_malloc_r>
 8019632:	bf00      	nop
 8019634:	200002bc 	.word	0x200002bc

08019638 <free>:
 8019638:	4b02      	ldr	r3, [pc, #8]	@ (8019644 <free+0xc>)
 801963a:	4601      	mov	r1, r0
 801963c:	6818      	ldr	r0, [r3, #0]
 801963e:	f002 bf0b 	b.w	801c458 <_free_r>
 8019642:	bf00      	nop
 8019644:	200002bc 	.word	0x200002bc

08019648 <sbrk_aligned>:
 8019648:	b570      	push	{r4, r5, r6, lr}
 801964a:	4e0f      	ldr	r6, [pc, #60]	@ (8019688 <sbrk_aligned+0x40>)
 801964c:	460c      	mov	r4, r1
 801964e:	6831      	ldr	r1, [r6, #0]
 8019650:	4605      	mov	r5, r0
 8019652:	b911      	cbnz	r1, 801965a <sbrk_aligned+0x12>
 8019654:	f002 f822 	bl	801b69c <_sbrk_r>
 8019658:	6030      	str	r0, [r6, #0]
 801965a:	4621      	mov	r1, r4
 801965c:	4628      	mov	r0, r5
 801965e:	f002 f81d 	bl	801b69c <_sbrk_r>
 8019662:	1c43      	adds	r3, r0, #1
 8019664:	d103      	bne.n	801966e <sbrk_aligned+0x26>
 8019666:	f04f 34ff 	mov.w	r4, #4294967295
 801966a:	4620      	mov	r0, r4
 801966c:	bd70      	pop	{r4, r5, r6, pc}
 801966e:	1cc4      	adds	r4, r0, #3
 8019670:	f024 0403 	bic.w	r4, r4, #3
 8019674:	42a0      	cmp	r0, r4
 8019676:	d0f8      	beq.n	801966a <sbrk_aligned+0x22>
 8019678:	1a21      	subs	r1, r4, r0
 801967a:	4628      	mov	r0, r5
 801967c:	f002 f80e 	bl	801b69c <_sbrk_r>
 8019680:	3001      	adds	r0, #1
 8019682:	d1f2      	bne.n	801966a <sbrk_aligned+0x22>
 8019684:	e7ef      	b.n	8019666 <sbrk_aligned+0x1e>
 8019686:	bf00      	nop
 8019688:	20003064 	.word	0x20003064

0801968c <_malloc_r>:
 801968c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019690:	1ccd      	adds	r5, r1, #3
 8019692:	f025 0503 	bic.w	r5, r5, #3
 8019696:	3508      	adds	r5, #8
 8019698:	2d0c      	cmp	r5, #12
 801969a:	bf38      	it	cc
 801969c:	250c      	movcc	r5, #12
 801969e:	2d00      	cmp	r5, #0
 80196a0:	4606      	mov	r6, r0
 80196a2:	db01      	blt.n	80196a8 <_malloc_r+0x1c>
 80196a4:	42a9      	cmp	r1, r5
 80196a6:	d904      	bls.n	80196b2 <_malloc_r+0x26>
 80196a8:	230c      	movs	r3, #12
 80196aa:	6033      	str	r3, [r6, #0]
 80196ac:	2000      	movs	r0, #0
 80196ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80196b2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8019788 <_malloc_r+0xfc>
 80196b6:	f000 f869 	bl	801978c <__malloc_lock>
 80196ba:	f8d8 3000 	ldr.w	r3, [r8]
 80196be:	461c      	mov	r4, r3
 80196c0:	bb44      	cbnz	r4, 8019714 <_malloc_r+0x88>
 80196c2:	4629      	mov	r1, r5
 80196c4:	4630      	mov	r0, r6
 80196c6:	f7ff ffbf 	bl	8019648 <sbrk_aligned>
 80196ca:	1c43      	adds	r3, r0, #1
 80196cc:	4604      	mov	r4, r0
 80196ce:	d158      	bne.n	8019782 <_malloc_r+0xf6>
 80196d0:	f8d8 4000 	ldr.w	r4, [r8]
 80196d4:	4627      	mov	r7, r4
 80196d6:	2f00      	cmp	r7, #0
 80196d8:	d143      	bne.n	8019762 <_malloc_r+0xd6>
 80196da:	2c00      	cmp	r4, #0
 80196dc:	d04b      	beq.n	8019776 <_malloc_r+0xea>
 80196de:	6823      	ldr	r3, [r4, #0]
 80196e0:	4639      	mov	r1, r7
 80196e2:	4630      	mov	r0, r6
 80196e4:	eb04 0903 	add.w	r9, r4, r3
 80196e8:	f001 ffd8 	bl	801b69c <_sbrk_r>
 80196ec:	4581      	cmp	r9, r0
 80196ee:	d142      	bne.n	8019776 <_malloc_r+0xea>
 80196f0:	6821      	ldr	r1, [r4, #0]
 80196f2:	1a6d      	subs	r5, r5, r1
 80196f4:	4629      	mov	r1, r5
 80196f6:	4630      	mov	r0, r6
 80196f8:	f7ff ffa6 	bl	8019648 <sbrk_aligned>
 80196fc:	3001      	adds	r0, #1
 80196fe:	d03a      	beq.n	8019776 <_malloc_r+0xea>
 8019700:	6823      	ldr	r3, [r4, #0]
 8019702:	442b      	add	r3, r5
 8019704:	6023      	str	r3, [r4, #0]
 8019706:	f8d8 3000 	ldr.w	r3, [r8]
 801970a:	685a      	ldr	r2, [r3, #4]
 801970c:	bb62      	cbnz	r2, 8019768 <_malloc_r+0xdc>
 801970e:	f8c8 7000 	str.w	r7, [r8]
 8019712:	e00f      	b.n	8019734 <_malloc_r+0xa8>
 8019714:	6822      	ldr	r2, [r4, #0]
 8019716:	1b52      	subs	r2, r2, r5
 8019718:	d420      	bmi.n	801975c <_malloc_r+0xd0>
 801971a:	2a0b      	cmp	r2, #11
 801971c:	d917      	bls.n	801974e <_malloc_r+0xc2>
 801971e:	1961      	adds	r1, r4, r5
 8019720:	42a3      	cmp	r3, r4
 8019722:	6025      	str	r5, [r4, #0]
 8019724:	bf18      	it	ne
 8019726:	6059      	strne	r1, [r3, #4]
 8019728:	6863      	ldr	r3, [r4, #4]
 801972a:	bf08      	it	eq
 801972c:	f8c8 1000 	streq.w	r1, [r8]
 8019730:	5162      	str	r2, [r4, r5]
 8019732:	604b      	str	r3, [r1, #4]
 8019734:	4630      	mov	r0, r6
 8019736:	f000 f82f 	bl	8019798 <__malloc_unlock>
 801973a:	f104 000b 	add.w	r0, r4, #11
 801973e:	1d23      	adds	r3, r4, #4
 8019740:	f020 0007 	bic.w	r0, r0, #7
 8019744:	1ac2      	subs	r2, r0, r3
 8019746:	bf1c      	itt	ne
 8019748:	1a1b      	subne	r3, r3, r0
 801974a:	50a3      	strne	r3, [r4, r2]
 801974c:	e7af      	b.n	80196ae <_malloc_r+0x22>
 801974e:	6862      	ldr	r2, [r4, #4]
 8019750:	42a3      	cmp	r3, r4
 8019752:	bf0c      	ite	eq
 8019754:	f8c8 2000 	streq.w	r2, [r8]
 8019758:	605a      	strne	r2, [r3, #4]
 801975a:	e7eb      	b.n	8019734 <_malloc_r+0xa8>
 801975c:	4623      	mov	r3, r4
 801975e:	6864      	ldr	r4, [r4, #4]
 8019760:	e7ae      	b.n	80196c0 <_malloc_r+0x34>
 8019762:	463c      	mov	r4, r7
 8019764:	687f      	ldr	r7, [r7, #4]
 8019766:	e7b6      	b.n	80196d6 <_malloc_r+0x4a>
 8019768:	461a      	mov	r2, r3
 801976a:	685b      	ldr	r3, [r3, #4]
 801976c:	42a3      	cmp	r3, r4
 801976e:	d1fb      	bne.n	8019768 <_malloc_r+0xdc>
 8019770:	2300      	movs	r3, #0
 8019772:	6053      	str	r3, [r2, #4]
 8019774:	e7de      	b.n	8019734 <_malloc_r+0xa8>
 8019776:	230c      	movs	r3, #12
 8019778:	6033      	str	r3, [r6, #0]
 801977a:	4630      	mov	r0, r6
 801977c:	f000 f80c 	bl	8019798 <__malloc_unlock>
 8019780:	e794      	b.n	80196ac <_malloc_r+0x20>
 8019782:	6005      	str	r5, [r0, #0]
 8019784:	e7d6      	b.n	8019734 <_malloc_r+0xa8>
 8019786:	bf00      	nop
 8019788:	20003068 	.word	0x20003068

0801978c <__malloc_lock>:
 801978c:	4801      	ldr	r0, [pc, #4]	@ (8019794 <__malloc_lock+0x8>)
 801978e:	f001 bfd2 	b.w	801b736 <__retarget_lock_acquire_recursive>
 8019792:	bf00      	nop
 8019794:	200031ac 	.word	0x200031ac

08019798 <__malloc_unlock>:
 8019798:	4801      	ldr	r0, [pc, #4]	@ (80197a0 <__malloc_unlock+0x8>)
 801979a:	f001 bfcd 	b.w	801b738 <__retarget_lock_release_recursive>
 801979e:	bf00      	nop
 80197a0:	200031ac 	.word	0x200031ac

080197a4 <sulp>:
 80197a4:	b570      	push	{r4, r5, r6, lr}
 80197a6:	4604      	mov	r4, r0
 80197a8:	460d      	mov	r5, r1
 80197aa:	ec45 4b10 	vmov	d0, r4, r5
 80197ae:	4616      	mov	r6, r2
 80197b0:	f003 fd5c 	bl	801d26c <__ulp>
 80197b4:	ec51 0b10 	vmov	r0, r1, d0
 80197b8:	b17e      	cbz	r6, 80197da <sulp+0x36>
 80197ba:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80197be:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80197c2:	2b00      	cmp	r3, #0
 80197c4:	dd09      	ble.n	80197da <sulp+0x36>
 80197c6:	051b      	lsls	r3, r3, #20
 80197c8:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80197cc:	2400      	movs	r4, #0
 80197ce:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80197d2:	4622      	mov	r2, r4
 80197d4:	462b      	mov	r3, r5
 80197d6:	f7e6 fee7 	bl	80005a8 <__aeabi_dmul>
 80197da:	ec41 0b10 	vmov	d0, r0, r1
 80197de:	bd70      	pop	{r4, r5, r6, pc}

080197e0 <_strtod_l>:
 80197e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80197e4:	b09f      	sub	sp, #124	@ 0x7c
 80197e6:	460c      	mov	r4, r1
 80197e8:	9217      	str	r2, [sp, #92]	@ 0x5c
 80197ea:	2200      	movs	r2, #0
 80197ec:	921a      	str	r2, [sp, #104]	@ 0x68
 80197ee:	9005      	str	r0, [sp, #20]
 80197f0:	f04f 0a00 	mov.w	sl, #0
 80197f4:	f04f 0b00 	mov.w	fp, #0
 80197f8:	460a      	mov	r2, r1
 80197fa:	9219      	str	r2, [sp, #100]	@ 0x64
 80197fc:	7811      	ldrb	r1, [r2, #0]
 80197fe:	292b      	cmp	r1, #43	@ 0x2b
 8019800:	d04a      	beq.n	8019898 <_strtod_l+0xb8>
 8019802:	d838      	bhi.n	8019876 <_strtod_l+0x96>
 8019804:	290d      	cmp	r1, #13
 8019806:	d832      	bhi.n	801986e <_strtod_l+0x8e>
 8019808:	2908      	cmp	r1, #8
 801980a:	d832      	bhi.n	8019872 <_strtod_l+0x92>
 801980c:	2900      	cmp	r1, #0
 801980e:	d03b      	beq.n	8019888 <_strtod_l+0xa8>
 8019810:	2200      	movs	r2, #0
 8019812:	920b      	str	r2, [sp, #44]	@ 0x2c
 8019814:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8019816:	782a      	ldrb	r2, [r5, #0]
 8019818:	2a30      	cmp	r2, #48	@ 0x30
 801981a:	f040 80b3 	bne.w	8019984 <_strtod_l+0x1a4>
 801981e:	786a      	ldrb	r2, [r5, #1]
 8019820:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8019824:	2a58      	cmp	r2, #88	@ 0x58
 8019826:	d16e      	bne.n	8019906 <_strtod_l+0x126>
 8019828:	9302      	str	r3, [sp, #8]
 801982a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801982c:	9301      	str	r3, [sp, #4]
 801982e:	ab1a      	add	r3, sp, #104	@ 0x68
 8019830:	9300      	str	r3, [sp, #0]
 8019832:	4a8e      	ldr	r2, [pc, #568]	@ (8019a6c <_strtod_l+0x28c>)
 8019834:	9805      	ldr	r0, [sp, #20]
 8019836:	ab1b      	add	r3, sp, #108	@ 0x6c
 8019838:	a919      	add	r1, sp, #100	@ 0x64
 801983a:	f002 febf 	bl	801c5bc <__gethex>
 801983e:	f010 060f 	ands.w	r6, r0, #15
 8019842:	4604      	mov	r4, r0
 8019844:	d005      	beq.n	8019852 <_strtod_l+0x72>
 8019846:	2e06      	cmp	r6, #6
 8019848:	d128      	bne.n	801989c <_strtod_l+0xbc>
 801984a:	3501      	adds	r5, #1
 801984c:	2300      	movs	r3, #0
 801984e:	9519      	str	r5, [sp, #100]	@ 0x64
 8019850:	930b      	str	r3, [sp, #44]	@ 0x2c
 8019852:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8019854:	2b00      	cmp	r3, #0
 8019856:	f040 858e 	bne.w	801a376 <_strtod_l+0xb96>
 801985a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801985c:	b1cb      	cbz	r3, 8019892 <_strtod_l+0xb2>
 801985e:	4652      	mov	r2, sl
 8019860:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8019864:	ec43 2b10 	vmov	d0, r2, r3
 8019868:	b01f      	add	sp, #124	@ 0x7c
 801986a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801986e:	2920      	cmp	r1, #32
 8019870:	d1ce      	bne.n	8019810 <_strtod_l+0x30>
 8019872:	3201      	adds	r2, #1
 8019874:	e7c1      	b.n	80197fa <_strtod_l+0x1a>
 8019876:	292d      	cmp	r1, #45	@ 0x2d
 8019878:	d1ca      	bne.n	8019810 <_strtod_l+0x30>
 801987a:	2101      	movs	r1, #1
 801987c:	910b      	str	r1, [sp, #44]	@ 0x2c
 801987e:	1c51      	adds	r1, r2, #1
 8019880:	9119      	str	r1, [sp, #100]	@ 0x64
 8019882:	7852      	ldrb	r2, [r2, #1]
 8019884:	2a00      	cmp	r2, #0
 8019886:	d1c5      	bne.n	8019814 <_strtod_l+0x34>
 8019888:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801988a:	9419      	str	r4, [sp, #100]	@ 0x64
 801988c:	2b00      	cmp	r3, #0
 801988e:	f040 8570 	bne.w	801a372 <_strtod_l+0xb92>
 8019892:	4652      	mov	r2, sl
 8019894:	465b      	mov	r3, fp
 8019896:	e7e5      	b.n	8019864 <_strtod_l+0x84>
 8019898:	2100      	movs	r1, #0
 801989a:	e7ef      	b.n	801987c <_strtod_l+0x9c>
 801989c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801989e:	b13a      	cbz	r2, 80198b0 <_strtod_l+0xd0>
 80198a0:	2135      	movs	r1, #53	@ 0x35
 80198a2:	a81c      	add	r0, sp, #112	@ 0x70
 80198a4:	f003 fddc 	bl	801d460 <__copybits>
 80198a8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80198aa:	9805      	ldr	r0, [sp, #20]
 80198ac:	f003 f9aa 	bl	801cc04 <_Bfree>
 80198b0:	3e01      	subs	r6, #1
 80198b2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80198b4:	2e04      	cmp	r6, #4
 80198b6:	d806      	bhi.n	80198c6 <_strtod_l+0xe6>
 80198b8:	e8df f006 	tbb	[pc, r6]
 80198bc:	201d0314 	.word	0x201d0314
 80198c0:	14          	.byte	0x14
 80198c1:	00          	.byte	0x00
 80198c2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80198c6:	05e1      	lsls	r1, r4, #23
 80198c8:	bf48      	it	mi
 80198ca:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80198ce:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80198d2:	0d1b      	lsrs	r3, r3, #20
 80198d4:	051b      	lsls	r3, r3, #20
 80198d6:	2b00      	cmp	r3, #0
 80198d8:	d1bb      	bne.n	8019852 <_strtod_l+0x72>
 80198da:	f001 ff01 	bl	801b6e0 <__errno>
 80198de:	2322      	movs	r3, #34	@ 0x22
 80198e0:	6003      	str	r3, [r0, #0]
 80198e2:	e7b6      	b.n	8019852 <_strtod_l+0x72>
 80198e4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80198e8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80198ec:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80198f0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80198f4:	e7e7      	b.n	80198c6 <_strtod_l+0xe6>
 80198f6:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8019a74 <_strtod_l+0x294>
 80198fa:	e7e4      	b.n	80198c6 <_strtod_l+0xe6>
 80198fc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8019900:	f04f 3aff 	mov.w	sl, #4294967295
 8019904:	e7df      	b.n	80198c6 <_strtod_l+0xe6>
 8019906:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8019908:	1c5a      	adds	r2, r3, #1
 801990a:	9219      	str	r2, [sp, #100]	@ 0x64
 801990c:	785b      	ldrb	r3, [r3, #1]
 801990e:	2b30      	cmp	r3, #48	@ 0x30
 8019910:	d0f9      	beq.n	8019906 <_strtod_l+0x126>
 8019912:	2b00      	cmp	r3, #0
 8019914:	d09d      	beq.n	8019852 <_strtod_l+0x72>
 8019916:	2301      	movs	r3, #1
 8019918:	9309      	str	r3, [sp, #36]	@ 0x24
 801991a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801991c:	930c      	str	r3, [sp, #48]	@ 0x30
 801991e:	2300      	movs	r3, #0
 8019920:	9308      	str	r3, [sp, #32]
 8019922:	930a      	str	r3, [sp, #40]	@ 0x28
 8019924:	461f      	mov	r7, r3
 8019926:	220a      	movs	r2, #10
 8019928:	9819      	ldr	r0, [sp, #100]	@ 0x64
 801992a:	7805      	ldrb	r5, [r0, #0]
 801992c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8019930:	b2d9      	uxtb	r1, r3
 8019932:	2909      	cmp	r1, #9
 8019934:	d928      	bls.n	8019988 <_strtod_l+0x1a8>
 8019936:	494e      	ldr	r1, [pc, #312]	@ (8019a70 <_strtod_l+0x290>)
 8019938:	2201      	movs	r2, #1
 801993a:	f001 fdf2 	bl	801b522 <strncmp>
 801993e:	2800      	cmp	r0, #0
 8019940:	d032      	beq.n	80199a8 <_strtod_l+0x1c8>
 8019942:	2000      	movs	r0, #0
 8019944:	462a      	mov	r2, r5
 8019946:	4681      	mov	r9, r0
 8019948:	463d      	mov	r5, r7
 801994a:	4603      	mov	r3, r0
 801994c:	2a65      	cmp	r2, #101	@ 0x65
 801994e:	d001      	beq.n	8019954 <_strtod_l+0x174>
 8019950:	2a45      	cmp	r2, #69	@ 0x45
 8019952:	d114      	bne.n	801997e <_strtod_l+0x19e>
 8019954:	b91d      	cbnz	r5, 801995e <_strtod_l+0x17e>
 8019956:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019958:	4302      	orrs	r2, r0
 801995a:	d095      	beq.n	8019888 <_strtod_l+0xa8>
 801995c:	2500      	movs	r5, #0
 801995e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8019960:	1c62      	adds	r2, r4, #1
 8019962:	9219      	str	r2, [sp, #100]	@ 0x64
 8019964:	7862      	ldrb	r2, [r4, #1]
 8019966:	2a2b      	cmp	r2, #43	@ 0x2b
 8019968:	d077      	beq.n	8019a5a <_strtod_l+0x27a>
 801996a:	2a2d      	cmp	r2, #45	@ 0x2d
 801996c:	d07b      	beq.n	8019a66 <_strtod_l+0x286>
 801996e:	f04f 0c00 	mov.w	ip, #0
 8019972:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8019976:	2909      	cmp	r1, #9
 8019978:	f240 8082 	bls.w	8019a80 <_strtod_l+0x2a0>
 801997c:	9419      	str	r4, [sp, #100]	@ 0x64
 801997e:	f04f 0800 	mov.w	r8, #0
 8019982:	e0a2      	b.n	8019aca <_strtod_l+0x2ea>
 8019984:	2300      	movs	r3, #0
 8019986:	e7c7      	b.n	8019918 <_strtod_l+0x138>
 8019988:	2f08      	cmp	r7, #8
 801998a:	bfd5      	itete	le
 801998c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 801998e:	9908      	ldrgt	r1, [sp, #32]
 8019990:	fb02 3301 	mlale	r3, r2, r1, r3
 8019994:	fb02 3301 	mlagt	r3, r2, r1, r3
 8019998:	f100 0001 	add.w	r0, r0, #1
 801999c:	bfd4      	ite	le
 801999e:	930a      	strle	r3, [sp, #40]	@ 0x28
 80199a0:	9308      	strgt	r3, [sp, #32]
 80199a2:	3701      	adds	r7, #1
 80199a4:	9019      	str	r0, [sp, #100]	@ 0x64
 80199a6:	e7bf      	b.n	8019928 <_strtod_l+0x148>
 80199a8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80199aa:	1c5a      	adds	r2, r3, #1
 80199ac:	9219      	str	r2, [sp, #100]	@ 0x64
 80199ae:	785a      	ldrb	r2, [r3, #1]
 80199b0:	b37f      	cbz	r7, 8019a12 <_strtod_l+0x232>
 80199b2:	4681      	mov	r9, r0
 80199b4:	463d      	mov	r5, r7
 80199b6:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80199ba:	2b09      	cmp	r3, #9
 80199bc:	d912      	bls.n	80199e4 <_strtod_l+0x204>
 80199be:	2301      	movs	r3, #1
 80199c0:	e7c4      	b.n	801994c <_strtod_l+0x16c>
 80199c2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80199c4:	1c5a      	adds	r2, r3, #1
 80199c6:	9219      	str	r2, [sp, #100]	@ 0x64
 80199c8:	785a      	ldrb	r2, [r3, #1]
 80199ca:	3001      	adds	r0, #1
 80199cc:	2a30      	cmp	r2, #48	@ 0x30
 80199ce:	d0f8      	beq.n	80199c2 <_strtod_l+0x1e2>
 80199d0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80199d4:	2b08      	cmp	r3, #8
 80199d6:	f200 84d3 	bhi.w	801a380 <_strtod_l+0xba0>
 80199da:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80199dc:	930c      	str	r3, [sp, #48]	@ 0x30
 80199de:	4681      	mov	r9, r0
 80199e0:	2000      	movs	r0, #0
 80199e2:	4605      	mov	r5, r0
 80199e4:	3a30      	subs	r2, #48	@ 0x30
 80199e6:	f100 0301 	add.w	r3, r0, #1
 80199ea:	d02a      	beq.n	8019a42 <_strtod_l+0x262>
 80199ec:	4499      	add	r9, r3
 80199ee:	eb00 0c05 	add.w	ip, r0, r5
 80199f2:	462b      	mov	r3, r5
 80199f4:	210a      	movs	r1, #10
 80199f6:	4563      	cmp	r3, ip
 80199f8:	d10d      	bne.n	8019a16 <_strtod_l+0x236>
 80199fa:	1c69      	adds	r1, r5, #1
 80199fc:	4401      	add	r1, r0
 80199fe:	4428      	add	r0, r5
 8019a00:	2808      	cmp	r0, #8
 8019a02:	dc16      	bgt.n	8019a32 <_strtod_l+0x252>
 8019a04:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8019a06:	230a      	movs	r3, #10
 8019a08:	fb03 2300 	mla	r3, r3, r0, r2
 8019a0c:	930a      	str	r3, [sp, #40]	@ 0x28
 8019a0e:	2300      	movs	r3, #0
 8019a10:	e018      	b.n	8019a44 <_strtod_l+0x264>
 8019a12:	4638      	mov	r0, r7
 8019a14:	e7da      	b.n	80199cc <_strtod_l+0x1ec>
 8019a16:	2b08      	cmp	r3, #8
 8019a18:	f103 0301 	add.w	r3, r3, #1
 8019a1c:	dc03      	bgt.n	8019a26 <_strtod_l+0x246>
 8019a1e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8019a20:	434e      	muls	r6, r1
 8019a22:	960a      	str	r6, [sp, #40]	@ 0x28
 8019a24:	e7e7      	b.n	80199f6 <_strtod_l+0x216>
 8019a26:	2b10      	cmp	r3, #16
 8019a28:	bfde      	ittt	le
 8019a2a:	9e08      	ldrle	r6, [sp, #32]
 8019a2c:	434e      	mulle	r6, r1
 8019a2e:	9608      	strle	r6, [sp, #32]
 8019a30:	e7e1      	b.n	80199f6 <_strtod_l+0x216>
 8019a32:	280f      	cmp	r0, #15
 8019a34:	dceb      	bgt.n	8019a0e <_strtod_l+0x22e>
 8019a36:	9808      	ldr	r0, [sp, #32]
 8019a38:	230a      	movs	r3, #10
 8019a3a:	fb03 2300 	mla	r3, r3, r0, r2
 8019a3e:	9308      	str	r3, [sp, #32]
 8019a40:	e7e5      	b.n	8019a0e <_strtod_l+0x22e>
 8019a42:	4629      	mov	r1, r5
 8019a44:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8019a46:	1c50      	adds	r0, r2, #1
 8019a48:	9019      	str	r0, [sp, #100]	@ 0x64
 8019a4a:	7852      	ldrb	r2, [r2, #1]
 8019a4c:	4618      	mov	r0, r3
 8019a4e:	460d      	mov	r5, r1
 8019a50:	e7b1      	b.n	80199b6 <_strtod_l+0x1d6>
 8019a52:	f04f 0900 	mov.w	r9, #0
 8019a56:	2301      	movs	r3, #1
 8019a58:	e77d      	b.n	8019956 <_strtod_l+0x176>
 8019a5a:	f04f 0c00 	mov.w	ip, #0
 8019a5e:	1ca2      	adds	r2, r4, #2
 8019a60:	9219      	str	r2, [sp, #100]	@ 0x64
 8019a62:	78a2      	ldrb	r2, [r4, #2]
 8019a64:	e785      	b.n	8019972 <_strtod_l+0x192>
 8019a66:	f04f 0c01 	mov.w	ip, #1
 8019a6a:	e7f8      	b.n	8019a5e <_strtod_l+0x27e>
 8019a6c:	0802241c 	.word	0x0802241c
 8019a70:	08022404 	.word	0x08022404
 8019a74:	7ff00000 	.word	0x7ff00000
 8019a78:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8019a7a:	1c51      	adds	r1, r2, #1
 8019a7c:	9119      	str	r1, [sp, #100]	@ 0x64
 8019a7e:	7852      	ldrb	r2, [r2, #1]
 8019a80:	2a30      	cmp	r2, #48	@ 0x30
 8019a82:	d0f9      	beq.n	8019a78 <_strtod_l+0x298>
 8019a84:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8019a88:	2908      	cmp	r1, #8
 8019a8a:	f63f af78 	bhi.w	801997e <_strtod_l+0x19e>
 8019a8e:	3a30      	subs	r2, #48	@ 0x30
 8019a90:	920e      	str	r2, [sp, #56]	@ 0x38
 8019a92:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8019a94:	920f      	str	r2, [sp, #60]	@ 0x3c
 8019a96:	f04f 080a 	mov.w	r8, #10
 8019a9a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8019a9c:	1c56      	adds	r6, r2, #1
 8019a9e:	9619      	str	r6, [sp, #100]	@ 0x64
 8019aa0:	7852      	ldrb	r2, [r2, #1]
 8019aa2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8019aa6:	f1be 0f09 	cmp.w	lr, #9
 8019aaa:	d939      	bls.n	8019b20 <_strtod_l+0x340>
 8019aac:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8019aae:	1a76      	subs	r6, r6, r1
 8019ab0:	2e08      	cmp	r6, #8
 8019ab2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8019ab6:	dc03      	bgt.n	8019ac0 <_strtod_l+0x2e0>
 8019ab8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8019aba:	4588      	cmp	r8, r1
 8019abc:	bfa8      	it	ge
 8019abe:	4688      	movge	r8, r1
 8019ac0:	f1bc 0f00 	cmp.w	ip, #0
 8019ac4:	d001      	beq.n	8019aca <_strtod_l+0x2ea>
 8019ac6:	f1c8 0800 	rsb	r8, r8, #0
 8019aca:	2d00      	cmp	r5, #0
 8019acc:	d14e      	bne.n	8019b6c <_strtod_l+0x38c>
 8019ace:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8019ad0:	4308      	orrs	r0, r1
 8019ad2:	f47f aebe 	bne.w	8019852 <_strtod_l+0x72>
 8019ad6:	2b00      	cmp	r3, #0
 8019ad8:	f47f aed6 	bne.w	8019888 <_strtod_l+0xa8>
 8019adc:	2a69      	cmp	r2, #105	@ 0x69
 8019ade:	d028      	beq.n	8019b32 <_strtod_l+0x352>
 8019ae0:	dc25      	bgt.n	8019b2e <_strtod_l+0x34e>
 8019ae2:	2a49      	cmp	r2, #73	@ 0x49
 8019ae4:	d025      	beq.n	8019b32 <_strtod_l+0x352>
 8019ae6:	2a4e      	cmp	r2, #78	@ 0x4e
 8019ae8:	f47f aece 	bne.w	8019888 <_strtod_l+0xa8>
 8019aec:	499b      	ldr	r1, [pc, #620]	@ (8019d5c <_strtod_l+0x57c>)
 8019aee:	a819      	add	r0, sp, #100	@ 0x64
 8019af0:	f002 ff86 	bl	801ca00 <__match>
 8019af4:	2800      	cmp	r0, #0
 8019af6:	f43f aec7 	beq.w	8019888 <_strtod_l+0xa8>
 8019afa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8019afc:	781b      	ldrb	r3, [r3, #0]
 8019afe:	2b28      	cmp	r3, #40	@ 0x28
 8019b00:	d12e      	bne.n	8019b60 <_strtod_l+0x380>
 8019b02:	4997      	ldr	r1, [pc, #604]	@ (8019d60 <_strtod_l+0x580>)
 8019b04:	aa1c      	add	r2, sp, #112	@ 0x70
 8019b06:	a819      	add	r0, sp, #100	@ 0x64
 8019b08:	f002 ff8e 	bl	801ca28 <__hexnan>
 8019b0c:	2805      	cmp	r0, #5
 8019b0e:	d127      	bne.n	8019b60 <_strtod_l+0x380>
 8019b10:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8019b12:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8019b16:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8019b1a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8019b1e:	e698      	b.n	8019852 <_strtod_l+0x72>
 8019b20:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8019b22:	fb08 2101 	mla	r1, r8, r1, r2
 8019b26:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8019b2a:	920e      	str	r2, [sp, #56]	@ 0x38
 8019b2c:	e7b5      	b.n	8019a9a <_strtod_l+0x2ba>
 8019b2e:	2a6e      	cmp	r2, #110	@ 0x6e
 8019b30:	e7da      	b.n	8019ae8 <_strtod_l+0x308>
 8019b32:	498c      	ldr	r1, [pc, #560]	@ (8019d64 <_strtod_l+0x584>)
 8019b34:	a819      	add	r0, sp, #100	@ 0x64
 8019b36:	f002 ff63 	bl	801ca00 <__match>
 8019b3a:	2800      	cmp	r0, #0
 8019b3c:	f43f aea4 	beq.w	8019888 <_strtod_l+0xa8>
 8019b40:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8019b42:	4989      	ldr	r1, [pc, #548]	@ (8019d68 <_strtod_l+0x588>)
 8019b44:	3b01      	subs	r3, #1
 8019b46:	a819      	add	r0, sp, #100	@ 0x64
 8019b48:	9319      	str	r3, [sp, #100]	@ 0x64
 8019b4a:	f002 ff59 	bl	801ca00 <__match>
 8019b4e:	b910      	cbnz	r0, 8019b56 <_strtod_l+0x376>
 8019b50:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8019b52:	3301      	adds	r3, #1
 8019b54:	9319      	str	r3, [sp, #100]	@ 0x64
 8019b56:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8019d78 <_strtod_l+0x598>
 8019b5a:	f04f 0a00 	mov.w	sl, #0
 8019b5e:	e678      	b.n	8019852 <_strtod_l+0x72>
 8019b60:	4882      	ldr	r0, [pc, #520]	@ (8019d6c <_strtod_l+0x58c>)
 8019b62:	f001 fe01 	bl	801b768 <nan>
 8019b66:	ec5b ab10 	vmov	sl, fp, d0
 8019b6a:	e672      	b.n	8019852 <_strtod_l+0x72>
 8019b6c:	eba8 0309 	sub.w	r3, r8, r9
 8019b70:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8019b72:	9309      	str	r3, [sp, #36]	@ 0x24
 8019b74:	2f00      	cmp	r7, #0
 8019b76:	bf08      	it	eq
 8019b78:	462f      	moveq	r7, r5
 8019b7a:	2d10      	cmp	r5, #16
 8019b7c:	462c      	mov	r4, r5
 8019b7e:	bfa8      	it	ge
 8019b80:	2410      	movge	r4, #16
 8019b82:	f7e6 fc97 	bl	80004b4 <__aeabi_ui2d>
 8019b86:	2d09      	cmp	r5, #9
 8019b88:	4682      	mov	sl, r0
 8019b8a:	468b      	mov	fp, r1
 8019b8c:	dc13      	bgt.n	8019bb6 <_strtod_l+0x3d6>
 8019b8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019b90:	2b00      	cmp	r3, #0
 8019b92:	f43f ae5e 	beq.w	8019852 <_strtod_l+0x72>
 8019b96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019b98:	dd78      	ble.n	8019c8c <_strtod_l+0x4ac>
 8019b9a:	2b16      	cmp	r3, #22
 8019b9c:	dc5f      	bgt.n	8019c5e <_strtod_l+0x47e>
 8019b9e:	4974      	ldr	r1, [pc, #464]	@ (8019d70 <_strtod_l+0x590>)
 8019ba0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8019ba4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019ba8:	4652      	mov	r2, sl
 8019baa:	465b      	mov	r3, fp
 8019bac:	f7e6 fcfc 	bl	80005a8 <__aeabi_dmul>
 8019bb0:	4682      	mov	sl, r0
 8019bb2:	468b      	mov	fp, r1
 8019bb4:	e64d      	b.n	8019852 <_strtod_l+0x72>
 8019bb6:	4b6e      	ldr	r3, [pc, #440]	@ (8019d70 <_strtod_l+0x590>)
 8019bb8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8019bbc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8019bc0:	f7e6 fcf2 	bl	80005a8 <__aeabi_dmul>
 8019bc4:	4682      	mov	sl, r0
 8019bc6:	9808      	ldr	r0, [sp, #32]
 8019bc8:	468b      	mov	fp, r1
 8019bca:	f7e6 fc73 	bl	80004b4 <__aeabi_ui2d>
 8019bce:	4602      	mov	r2, r0
 8019bd0:	460b      	mov	r3, r1
 8019bd2:	4650      	mov	r0, sl
 8019bd4:	4659      	mov	r1, fp
 8019bd6:	f7e6 fb31 	bl	800023c <__adddf3>
 8019bda:	2d0f      	cmp	r5, #15
 8019bdc:	4682      	mov	sl, r0
 8019bde:	468b      	mov	fp, r1
 8019be0:	ddd5      	ble.n	8019b8e <_strtod_l+0x3ae>
 8019be2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019be4:	1b2c      	subs	r4, r5, r4
 8019be6:	441c      	add	r4, r3
 8019be8:	2c00      	cmp	r4, #0
 8019bea:	f340 8096 	ble.w	8019d1a <_strtod_l+0x53a>
 8019bee:	f014 030f 	ands.w	r3, r4, #15
 8019bf2:	d00a      	beq.n	8019c0a <_strtod_l+0x42a>
 8019bf4:	495e      	ldr	r1, [pc, #376]	@ (8019d70 <_strtod_l+0x590>)
 8019bf6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8019bfa:	4652      	mov	r2, sl
 8019bfc:	465b      	mov	r3, fp
 8019bfe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019c02:	f7e6 fcd1 	bl	80005a8 <__aeabi_dmul>
 8019c06:	4682      	mov	sl, r0
 8019c08:	468b      	mov	fp, r1
 8019c0a:	f034 040f 	bics.w	r4, r4, #15
 8019c0e:	d073      	beq.n	8019cf8 <_strtod_l+0x518>
 8019c10:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8019c14:	dd48      	ble.n	8019ca8 <_strtod_l+0x4c8>
 8019c16:	2400      	movs	r4, #0
 8019c18:	46a0      	mov	r8, r4
 8019c1a:	940a      	str	r4, [sp, #40]	@ 0x28
 8019c1c:	46a1      	mov	r9, r4
 8019c1e:	9a05      	ldr	r2, [sp, #20]
 8019c20:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8019d78 <_strtod_l+0x598>
 8019c24:	2322      	movs	r3, #34	@ 0x22
 8019c26:	6013      	str	r3, [r2, #0]
 8019c28:	f04f 0a00 	mov.w	sl, #0
 8019c2c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8019c2e:	2b00      	cmp	r3, #0
 8019c30:	f43f ae0f 	beq.w	8019852 <_strtod_l+0x72>
 8019c34:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8019c36:	9805      	ldr	r0, [sp, #20]
 8019c38:	f002 ffe4 	bl	801cc04 <_Bfree>
 8019c3c:	9805      	ldr	r0, [sp, #20]
 8019c3e:	4649      	mov	r1, r9
 8019c40:	f002 ffe0 	bl	801cc04 <_Bfree>
 8019c44:	9805      	ldr	r0, [sp, #20]
 8019c46:	4641      	mov	r1, r8
 8019c48:	f002 ffdc 	bl	801cc04 <_Bfree>
 8019c4c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8019c4e:	9805      	ldr	r0, [sp, #20]
 8019c50:	f002 ffd8 	bl	801cc04 <_Bfree>
 8019c54:	9805      	ldr	r0, [sp, #20]
 8019c56:	4621      	mov	r1, r4
 8019c58:	f002 ffd4 	bl	801cc04 <_Bfree>
 8019c5c:	e5f9      	b.n	8019852 <_strtod_l+0x72>
 8019c5e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019c60:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8019c64:	4293      	cmp	r3, r2
 8019c66:	dbbc      	blt.n	8019be2 <_strtod_l+0x402>
 8019c68:	4c41      	ldr	r4, [pc, #260]	@ (8019d70 <_strtod_l+0x590>)
 8019c6a:	f1c5 050f 	rsb	r5, r5, #15
 8019c6e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8019c72:	4652      	mov	r2, sl
 8019c74:	465b      	mov	r3, fp
 8019c76:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019c7a:	f7e6 fc95 	bl	80005a8 <__aeabi_dmul>
 8019c7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019c80:	1b5d      	subs	r5, r3, r5
 8019c82:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8019c86:	e9d4 2300 	ldrd	r2, r3, [r4]
 8019c8a:	e78f      	b.n	8019bac <_strtod_l+0x3cc>
 8019c8c:	3316      	adds	r3, #22
 8019c8e:	dba8      	blt.n	8019be2 <_strtod_l+0x402>
 8019c90:	4b37      	ldr	r3, [pc, #220]	@ (8019d70 <_strtod_l+0x590>)
 8019c92:	eba9 0808 	sub.w	r8, r9, r8
 8019c96:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8019c9a:	e9d8 2300 	ldrd	r2, r3, [r8]
 8019c9e:	4650      	mov	r0, sl
 8019ca0:	4659      	mov	r1, fp
 8019ca2:	f7e6 fdab 	bl	80007fc <__aeabi_ddiv>
 8019ca6:	e783      	b.n	8019bb0 <_strtod_l+0x3d0>
 8019ca8:	4b32      	ldr	r3, [pc, #200]	@ (8019d74 <_strtod_l+0x594>)
 8019caa:	9308      	str	r3, [sp, #32]
 8019cac:	2300      	movs	r3, #0
 8019cae:	1124      	asrs	r4, r4, #4
 8019cb0:	4650      	mov	r0, sl
 8019cb2:	4659      	mov	r1, fp
 8019cb4:	461e      	mov	r6, r3
 8019cb6:	2c01      	cmp	r4, #1
 8019cb8:	dc21      	bgt.n	8019cfe <_strtod_l+0x51e>
 8019cba:	b10b      	cbz	r3, 8019cc0 <_strtod_l+0x4e0>
 8019cbc:	4682      	mov	sl, r0
 8019cbe:	468b      	mov	fp, r1
 8019cc0:	492c      	ldr	r1, [pc, #176]	@ (8019d74 <_strtod_l+0x594>)
 8019cc2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8019cc6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8019cca:	4652      	mov	r2, sl
 8019ccc:	465b      	mov	r3, fp
 8019cce:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019cd2:	f7e6 fc69 	bl	80005a8 <__aeabi_dmul>
 8019cd6:	4b28      	ldr	r3, [pc, #160]	@ (8019d78 <_strtod_l+0x598>)
 8019cd8:	460a      	mov	r2, r1
 8019cda:	400b      	ands	r3, r1
 8019cdc:	4927      	ldr	r1, [pc, #156]	@ (8019d7c <_strtod_l+0x59c>)
 8019cde:	428b      	cmp	r3, r1
 8019ce0:	4682      	mov	sl, r0
 8019ce2:	d898      	bhi.n	8019c16 <_strtod_l+0x436>
 8019ce4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8019ce8:	428b      	cmp	r3, r1
 8019cea:	bf86      	itte	hi
 8019cec:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8019d80 <_strtod_l+0x5a0>
 8019cf0:	f04f 3aff 	movhi.w	sl, #4294967295
 8019cf4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8019cf8:	2300      	movs	r3, #0
 8019cfa:	9308      	str	r3, [sp, #32]
 8019cfc:	e07a      	b.n	8019df4 <_strtod_l+0x614>
 8019cfe:	07e2      	lsls	r2, r4, #31
 8019d00:	d505      	bpl.n	8019d0e <_strtod_l+0x52e>
 8019d02:	9b08      	ldr	r3, [sp, #32]
 8019d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019d08:	f7e6 fc4e 	bl	80005a8 <__aeabi_dmul>
 8019d0c:	2301      	movs	r3, #1
 8019d0e:	9a08      	ldr	r2, [sp, #32]
 8019d10:	3208      	adds	r2, #8
 8019d12:	3601      	adds	r6, #1
 8019d14:	1064      	asrs	r4, r4, #1
 8019d16:	9208      	str	r2, [sp, #32]
 8019d18:	e7cd      	b.n	8019cb6 <_strtod_l+0x4d6>
 8019d1a:	d0ed      	beq.n	8019cf8 <_strtod_l+0x518>
 8019d1c:	4264      	negs	r4, r4
 8019d1e:	f014 020f 	ands.w	r2, r4, #15
 8019d22:	d00a      	beq.n	8019d3a <_strtod_l+0x55a>
 8019d24:	4b12      	ldr	r3, [pc, #72]	@ (8019d70 <_strtod_l+0x590>)
 8019d26:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8019d2a:	4650      	mov	r0, sl
 8019d2c:	4659      	mov	r1, fp
 8019d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019d32:	f7e6 fd63 	bl	80007fc <__aeabi_ddiv>
 8019d36:	4682      	mov	sl, r0
 8019d38:	468b      	mov	fp, r1
 8019d3a:	1124      	asrs	r4, r4, #4
 8019d3c:	d0dc      	beq.n	8019cf8 <_strtod_l+0x518>
 8019d3e:	2c1f      	cmp	r4, #31
 8019d40:	dd20      	ble.n	8019d84 <_strtod_l+0x5a4>
 8019d42:	2400      	movs	r4, #0
 8019d44:	46a0      	mov	r8, r4
 8019d46:	940a      	str	r4, [sp, #40]	@ 0x28
 8019d48:	46a1      	mov	r9, r4
 8019d4a:	9a05      	ldr	r2, [sp, #20]
 8019d4c:	2322      	movs	r3, #34	@ 0x22
 8019d4e:	f04f 0a00 	mov.w	sl, #0
 8019d52:	f04f 0b00 	mov.w	fp, #0
 8019d56:	6013      	str	r3, [r2, #0]
 8019d58:	e768      	b.n	8019c2c <_strtod_l+0x44c>
 8019d5a:	bf00      	nop
 8019d5c:	08022566 	.word	0x08022566
 8019d60:	08022408 	.word	0x08022408
 8019d64:	0802255e 	.word	0x0802255e
 8019d68:	0802264a 	.word	0x0802264a
 8019d6c:	08022646 	.word	0x08022646
 8019d70:	080227b0 	.word	0x080227b0
 8019d74:	08022788 	.word	0x08022788
 8019d78:	7ff00000 	.word	0x7ff00000
 8019d7c:	7ca00000 	.word	0x7ca00000
 8019d80:	7fefffff 	.word	0x7fefffff
 8019d84:	f014 0310 	ands.w	r3, r4, #16
 8019d88:	bf18      	it	ne
 8019d8a:	236a      	movne	r3, #106	@ 0x6a
 8019d8c:	4ea9      	ldr	r6, [pc, #676]	@ (801a034 <_strtod_l+0x854>)
 8019d8e:	9308      	str	r3, [sp, #32]
 8019d90:	4650      	mov	r0, sl
 8019d92:	4659      	mov	r1, fp
 8019d94:	2300      	movs	r3, #0
 8019d96:	07e2      	lsls	r2, r4, #31
 8019d98:	d504      	bpl.n	8019da4 <_strtod_l+0x5c4>
 8019d9a:	e9d6 2300 	ldrd	r2, r3, [r6]
 8019d9e:	f7e6 fc03 	bl	80005a8 <__aeabi_dmul>
 8019da2:	2301      	movs	r3, #1
 8019da4:	1064      	asrs	r4, r4, #1
 8019da6:	f106 0608 	add.w	r6, r6, #8
 8019daa:	d1f4      	bne.n	8019d96 <_strtod_l+0x5b6>
 8019dac:	b10b      	cbz	r3, 8019db2 <_strtod_l+0x5d2>
 8019dae:	4682      	mov	sl, r0
 8019db0:	468b      	mov	fp, r1
 8019db2:	9b08      	ldr	r3, [sp, #32]
 8019db4:	b1b3      	cbz	r3, 8019de4 <_strtod_l+0x604>
 8019db6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8019dba:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8019dbe:	2b00      	cmp	r3, #0
 8019dc0:	4659      	mov	r1, fp
 8019dc2:	dd0f      	ble.n	8019de4 <_strtod_l+0x604>
 8019dc4:	2b1f      	cmp	r3, #31
 8019dc6:	dd55      	ble.n	8019e74 <_strtod_l+0x694>
 8019dc8:	2b34      	cmp	r3, #52	@ 0x34
 8019dca:	bfde      	ittt	le
 8019dcc:	f04f 33ff 	movle.w	r3, #4294967295
 8019dd0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8019dd4:	4093      	lslle	r3, r2
 8019dd6:	f04f 0a00 	mov.w	sl, #0
 8019dda:	bfcc      	ite	gt
 8019ddc:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8019de0:	ea03 0b01 	andle.w	fp, r3, r1
 8019de4:	2200      	movs	r2, #0
 8019de6:	2300      	movs	r3, #0
 8019de8:	4650      	mov	r0, sl
 8019dea:	4659      	mov	r1, fp
 8019dec:	f7e6 fe44 	bl	8000a78 <__aeabi_dcmpeq>
 8019df0:	2800      	cmp	r0, #0
 8019df2:	d1a6      	bne.n	8019d42 <_strtod_l+0x562>
 8019df4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8019df6:	9300      	str	r3, [sp, #0]
 8019df8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8019dfa:	9805      	ldr	r0, [sp, #20]
 8019dfc:	462b      	mov	r3, r5
 8019dfe:	463a      	mov	r2, r7
 8019e00:	f002 ff68 	bl	801ccd4 <__s2b>
 8019e04:	900a      	str	r0, [sp, #40]	@ 0x28
 8019e06:	2800      	cmp	r0, #0
 8019e08:	f43f af05 	beq.w	8019c16 <_strtod_l+0x436>
 8019e0c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019e0e:	2a00      	cmp	r2, #0
 8019e10:	eba9 0308 	sub.w	r3, r9, r8
 8019e14:	bfa8      	it	ge
 8019e16:	2300      	movge	r3, #0
 8019e18:	9312      	str	r3, [sp, #72]	@ 0x48
 8019e1a:	2400      	movs	r4, #0
 8019e1c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8019e20:	9316      	str	r3, [sp, #88]	@ 0x58
 8019e22:	46a0      	mov	r8, r4
 8019e24:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8019e26:	9805      	ldr	r0, [sp, #20]
 8019e28:	6859      	ldr	r1, [r3, #4]
 8019e2a:	f002 feab 	bl	801cb84 <_Balloc>
 8019e2e:	4681      	mov	r9, r0
 8019e30:	2800      	cmp	r0, #0
 8019e32:	f43f aef4 	beq.w	8019c1e <_strtod_l+0x43e>
 8019e36:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8019e38:	691a      	ldr	r2, [r3, #16]
 8019e3a:	3202      	adds	r2, #2
 8019e3c:	f103 010c 	add.w	r1, r3, #12
 8019e40:	0092      	lsls	r2, r2, #2
 8019e42:	300c      	adds	r0, #12
 8019e44:	f001 fc81 	bl	801b74a <memcpy>
 8019e48:	ec4b ab10 	vmov	d0, sl, fp
 8019e4c:	9805      	ldr	r0, [sp, #20]
 8019e4e:	aa1c      	add	r2, sp, #112	@ 0x70
 8019e50:	a91b      	add	r1, sp, #108	@ 0x6c
 8019e52:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8019e56:	f003 fa79 	bl	801d34c <__d2b>
 8019e5a:	901a      	str	r0, [sp, #104]	@ 0x68
 8019e5c:	2800      	cmp	r0, #0
 8019e5e:	f43f aede 	beq.w	8019c1e <_strtod_l+0x43e>
 8019e62:	9805      	ldr	r0, [sp, #20]
 8019e64:	2101      	movs	r1, #1
 8019e66:	f002 ffcb 	bl	801ce00 <__i2b>
 8019e6a:	4680      	mov	r8, r0
 8019e6c:	b948      	cbnz	r0, 8019e82 <_strtod_l+0x6a2>
 8019e6e:	f04f 0800 	mov.w	r8, #0
 8019e72:	e6d4      	b.n	8019c1e <_strtod_l+0x43e>
 8019e74:	f04f 32ff 	mov.w	r2, #4294967295
 8019e78:	fa02 f303 	lsl.w	r3, r2, r3
 8019e7c:	ea03 0a0a 	and.w	sl, r3, sl
 8019e80:	e7b0      	b.n	8019de4 <_strtod_l+0x604>
 8019e82:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8019e84:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8019e86:	2d00      	cmp	r5, #0
 8019e88:	bfab      	itete	ge
 8019e8a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8019e8c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8019e8e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8019e90:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8019e92:	bfac      	ite	ge
 8019e94:	18ef      	addge	r7, r5, r3
 8019e96:	1b5e      	sublt	r6, r3, r5
 8019e98:	9b08      	ldr	r3, [sp, #32]
 8019e9a:	1aed      	subs	r5, r5, r3
 8019e9c:	4415      	add	r5, r2
 8019e9e:	4b66      	ldr	r3, [pc, #408]	@ (801a038 <_strtod_l+0x858>)
 8019ea0:	3d01      	subs	r5, #1
 8019ea2:	429d      	cmp	r5, r3
 8019ea4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8019ea8:	da50      	bge.n	8019f4c <_strtod_l+0x76c>
 8019eaa:	1b5b      	subs	r3, r3, r5
 8019eac:	2b1f      	cmp	r3, #31
 8019eae:	eba2 0203 	sub.w	r2, r2, r3
 8019eb2:	f04f 0101 	mov.w	r1, #1
 8019eb6:	dc3d      	bgt.n	8019f34 <_strtod_l+0x754>
 8019eb8:	fa01 f303 	lsl.w	r3, r1, r3
 8019ebc:	9313      	str	r3, [sp, #76]	@ 0x4c
 8019ebe:	2300      	movs	r3, #0
 8019ec0:	9310      	str	r3, [sp, #64]	@ 0x40
 8019ec2:	18bd      	adds	r5, r7, r2
 8019ec4:	9b08      	ldr	r3, [sp, #32]
 8019ec6:	42af      	cmp	r7, r5
 8019ec8:	4416      	add	r6, r2
 8019eca:	441e      	add	r6, r3
 8019ecc:	463b      	mov	r3, r7
 8019ece:	bfa8      	it	ge
 8019ed0:	462b      	movge	r3, r5
 8019ed2:	42b3      	cmp	r3, r6
 8019ed4:	bfa8      	it	ge
 8019ed6:	4633      	movge	r3, r6
 8019ed8:	2b00      	cmp	r3, #0
 8019eda:	bfc2      	ittt	gt
 8019edc:	1aed      	subgt	r5, r5, r3
 8019ede:	1af6      	subgt	r6, r6, r3
 8019ee0:	1aff      	subgt	r7, r7, r3
 8019ee2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8019ee4:	2b00      	cmp	r3, #0
 8019ee6:	dd16      	ble.n	8019f16 <_strtod_l+0x736>
 8019ee8:	4641      	mov	r1, r8
 8019eea:	9805      	ldr	r0, [sp, #20]
 8019eec:	461a      	mov	r2, r3
 8019eee:	f003 f847 	bl	801cf80 <__pow5mult>
 8019ef2:	4680      	mov	r8, r0
 8019ef4:	2800      	cmp	r0, #0
 8019ef6:	d0ba      	beq.n	8019e6e <_strtod_l+0x68e>
 8019ef8:	4601      	mov	r1, r0
 8019efa:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8019efc:	9805      	ldr	r0, [sp, #20]
 8019efe:	f002 ff95 	bl	801ce2c <__multiply>
 8019f02:	900e      	str	r0, [sp, #56]	@ 0x38
 8019f04:	2800      	cmp	r0, #0
 8019f06:	f43f ae8a 	beq.w	8019c1e <_strtod_l+0x43e>
 8019f0a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8019f0c:	9805      	ldr	r0, [sp, #20]
 8019f0e:	f002 fe79 	bl	801cc04 <_Bfree>
 8019f12:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8019f14:	931a      	str	r3, [sp, #104]	@ 0x68
 8019f16:	2d00      	cmp	r5, #0
 8019f18:	dc1d      	bgt.n	8019f56 <_strtod_l+0x776>
 8019f1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019f1c:	2b00      	cmp	r3, #0
 8019f1e:	dd23      	ble.n	8019f68 <_strtod_l+0x788>
 8019f20:	4649      	mov	r1, r9
 8019f22:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8019f24:	9805      	ldr	r0, [sp, #20]
 8019f26:	f003 f82b 	bl	801cf80 <__pow5mult>
 8019f2a:	4681      	mov	r9, r0
 8019f2c:	b9e0      	cbnz	r0, 8019f68 <_strtod_l+0x788>
 8019f2e:	f04f 0900 	mov.w	r9, #0
 8019f32:	e674      	b.n	8019c1e <_strtod_l+0x43e>
 8019f34:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8019f38:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8019f3c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8019f40:	35e2      	adds	r5, #226	@ 0xe2
 8019f42:	fa01 f305 	lsl.w	r3, r1, r5
 8019f46:	9310      	str	r3, [sp, #64]	@ 0x40
 8019f48:	9113      	str	r1, [sp, #76]	@ 0x4c
 8019f4a:	e7ba      	b.n	8019ec2 <_strtod_l+0x6e2>
 8019f4c:	2300      	movs	r3, #0
 8019f4e:	9310      	str	r3, [sp, #64]	@ 0x40
 8019f50:	2301      	movs	r3, #1
 8019f52:	9313      	str	r3, [sp, #76]	@ 0x4c
 8019f54:	e7b5      	b.n	8019ec2 <_strtod_l+0x6e2>
 8019f56:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8019f58:	9805      	ldr	r0, [sp, #20]
 8019f5a:	462a      	mov	r2, r5
 8019f5c:	f003 f86a 	bl	801d034 <__lshift>
 8019f60:	901a      	str	r0, [sp, #104]	@ 0x68
 8019f62:	2800      	cmp	r0, #0
 8019f64:	d1d9      	bne.n	8019f1a <_strtod_l+0x73a>
 8019f66:	e65a      	b.n	8019c1e <_strtod_l+0x43e>
 8019f68:	2e00      	cmp	r6, #0
 8019f6a:	dd07      	ble.n	8019f7c <_strtod_l+0x79c>
 8019f6c:	4649      	mov	r1, r9
 8019f6e:	9805      	ldr	r0, [sp, #20]
 8019f70:	4632      	mov	r2, r6
 8019f72:	f003 f85f 	bl	801d034 <__lshift>
 8019f76:	4681      	mov	r9, r0
 8019f78:	2800      	cmp	r0, #0
 8019f7a:	d0d8      	beq.n	8019f2e <_strtod_l+0x74e>
 8019f7c:	2f00      	cmp	r7, #0
 8019f7e:	dd08      	ble.n	8019f92 <_strtod_l+0x7b2>
 8019f80:	4641      	mov	r1, r8
 8019f82:	9805      	ldr	r0, [sp, #20]
 8019f84:	463a      	mov	r2, r7
 8019f86:	f003 f855 	bl	801d034 <__lshift>
 8019f8a:	4680      	mov	r8, r0
 8019f8c:	2800      	cmp	r0, #0
 8019f8e:	f43f ae46 	beq.w	8019c1e <_strtod_l+0x43e>
 8019f92:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8019f94:	9805      	ldr	r0, [sp, #20]
 8019f96:	464a      	mov	r2, r9
 8019f98:	f003 f8d4 	bl	801d144 <__mdiff>
 8019f9c:	4604      	mov	r4, r0
 8019f9e:	2800      	cmp	r0, #0
 8019fa0:	f43f ae3d 	beq.w	8019c1e <_strtod_l+0x43e>
 8019fa4:	68c3      	ldr	r3, [r0, #12]
 8019fa6:	930f      	str	r3, [sp, #60]	@ 0x3c
 8019fa8:	2300      	movs	r3, #0
 8019faa:	60c3      	str	r3, [r0, #12]
 8019fac:	4641      	mov	r1, r8
 8019fae:	f003 f8ad 	bl	801d10c <__mcmp>
 8019fb2:	2800      	cmp	r0, #0
 8019fb4:	da46      	bge.n	801a044 <_strtod_l+0x864>
 8019fb6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8019fb8:	ea53 030a 	orrs.w	r3, r3, sl
 8019fbc:	d16c      	bne.n	801a098 <_strtod_l+0x8b8>
 8019fbe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8019fc2:	2b00      	cmp	r3, #0
 8019fc4:	d168      	bne.n	801a098 <_strtod_l+0x8b8>
 8019fc6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8019fca:	0d1b      	lsrs	r3, r3, #20
 8019fcc:	051b      	lsls	r3, r3, #20
 8019fce:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8019fd2:	d961      	bls.n	801a098 <_strtod_l+0x8b8>
 8019fd4:	6963      	ldr	r3, [r4, #20]
 8019fd6:	b913      	cbnz	r3, 8019fde <_strtod_l+0x7fe>
 8019fd8:	6923      	ldr	r3, [r4, #16]
 8019fda:	2b01      	cmp	r3, #1
 8019fdc:	dd5c      	ble.n	801a098 <_strtod_l+0x8b8>
 8019fde:	4621      	mov	r1, r4
 8019fe0:	2201      	movs	r2, #1
 8019fe2:	9805      	ldr	r0, [sp, #20]
 8019fe4:	f003 f826 	bl	801d034 <__lshift>
 8019fe8:	4641      	mov	r1, r8
 8019fea:	4604      	mov	r4, r0
 8019fec:	f003 f88e 	bl	801d10c <__mcmp>
 8019ff0:	2800      	cmp	r0, #0
 8019ff2:	dd51      	ble.n	801a098 <_strtod_l+0x8b8>
 8019ff4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8019ff8:	9a08      	ldr	r2, [sp, #32]
 8019ffa:	0d1b      	lsrs	r3, r3, #20
 8019ffc:	051b      	lsls	r3, r3, #20
 8019ffe:	2a00      	cmp	r2, #0
 801a000:	d06b      	beq.n	801a0da <_strtod_l+0x8fa>
 801a002:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 801a006:	d868      	bhi.n	801a0da <_strtod_l+0x8fa>
 801a008:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 801a00c:	f67f ae9d 	bls.w	8019d4a <_strtod_l+0x56a>
 801a010:	4b0a      	ldr	r3, [pc, #40]	@ (801a03c <_strtod_l+0x85c>)
 801a012:	4650      	mov	r0, sl
 801a014:	4659      	mov	r1, fp
 801a016:	2200      	movs	r2, #0
 801a018:	f7e6 fac6 	bl	80005a8 <__aeabi_dmul>
 801a01c:	4b08      	ldr	r3, [pc, #32]	@ (801a040 <_strtod_l+0x860>)
 801a01e:	400b      	ands	r3, r1
 801a020:	4682      	mov	sl, r0
 801a022:	468b      	mov	fp, r1
 801a024:	2b00      	cmp	r3, #0
 801a026:	f47f ae05 	bne.w	8019c34 <_strtod_l+0x454>
 801a02a:	9a05      	ldr	r2, [sp, #20]
 801a02c:	2322      	movs	r3, #34	@ 0x22
 801a02e:	6013      	str	r3, [r2, #0]
 801a030:	e600      	b.n	8019c34 <_strtod_l+0x454>
 801a032:	bf00      	nop
 801a034:	08022430 	.word	0x08022430
 801a038:	fffffc02 	.word	0xfffffc02
 801a03c:	39500000 	.word	0x39500000
 801a040:	7ff00000 	.word	0x7ff00000
 801a044:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 801a048:	d165      	bne.n	801a116 <_strtod_l+0x936>
 801a04a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801a04c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801a050:	b35a      	cbz	r2, 801a0aa <_strtod_l+0x8ca>
 801a052:	4a9f      	ldr	r2, [pc, #636]	@ (801a2d0 <_strtod_l+0xaf0>)
 801a054:	4293      	cmp	r3, r2
 801a056:	d12b      	bne.n	801a0b0 <_strtod_l+0x8d0>
 801a058:	9b08      	ldr	r3, [sp, #32]
 801a05a:	4651      	mov	r1, sl
 801a05c:	b303      	cbz	r3, 801a0a0 <_strtod_l+0x8c0>
 801a05e:	4b9d      	ldr	r3, [pc, #628]	@ (801a2d4 <_strtod_l+0xaf4>)
 801a060:	465a      	mov	r2, fp
 801a062:	4013      	ands	r3, r2
 801a064:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 801a068:	f04f 32ff 	mov.w	r2, #4294967295
 801a06c:	d81b      	bhi.n	801a0a6 <_strtod_l+0x8c6>
 801a06e:	0d1b      	lsrs	r3, r3, #20
 801a070:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801a074:	fa02 f303 	lsl.w	r3, r2, r3
 801a078:	4299      	cmp	r1, r3
 801a07a:	d119      	bne.n	801a0b0 <_strtod_l+0x8d0>
 801a07c:	4b96      	ldr	r3, [pc, #600]	@ (801a2d8 <_strtod_l+0xaf8>)
 801a07e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801a080:	429a      	cmp	r2, r3
 801a082:	d102      	bne.n	801a08a <_strtod_l+0x8aa>
 801a084:	3101      	adds	r1, #1
 801a086:	f43f adca 	beq.w	8019c1e <_strtod_l+0x43e>
 801a08a:	4b92      	ldr	r3, [pc, #584]	@ (801a2d4 <_strtod_l+0xaf4>)
 801a08c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801a08e:	401a      	ands	r2, r3
 801a090:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 801a094:	f04f 0a00 	mov.w	sl, #0
 801a098:	9b08      	ldr	r3, [sp, #32]
 801a09a:	2b00      	cmp	r3, #0
 801a09c:	d1b8      	bne.n	801a010 <_strtod_l+0x830>
 801a09e:	e5c9      	b.n	8019c34 <_strtod_l+0x454>
 801a0a0:	f04f 33ff 	mov.w	r3, #4294967295
 801a0a4:	e7e8      	b.n	801a078 <_strtod_l+0x898>
 801a0a6:	4613      	mov	r3, r2
 801a0a8:	e7e6      	b.n	801a078 <_strtod_l+0x898>
 801a0aa:	ea53 030a 	orrs.w	r3, r3, sl
 801a0ae:	d0a1      	beq.n	8019ff4 <_strtod_l+0x814>
 801a0b0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801a0b2:	b1db      	cbz	r3, 801a0ec <_strtod_l+0x90c>
 801a0b4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801a0b6:	4213      	tst	r3, r2
 801a0b8:	d0ee      	beq.n	801a098 <_strtod_l+0x8b8>
 801a0ba:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801a0bc:	9a08      	ldr	r2, [sp, #32]
 801a0be:	4650      	mov	r0, sl
 801a0c0:	4659      	mov	r1, fp
 801a0c2:	b1bb      	cbz	r3, 801a0f4 <_strtod_l+0x914>
 801a0c4:	f7ff fb6e 	bl	80197a4 <sulp>
 801a0c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801a0cc:	ec53 2b10 	vmov	r2, r3, d0
 801a0d0:	f7e6 f8b4 	bl	800023c <__adddf3>
 801a0d4:	4682      	mov	sl, r0
 801a0d6:	468b      	mov	fp, r1
 801a0d8:	e7de      	b.n	801a098 <_strtod_l+0x8b8>
 801a0da:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 801a0de:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801a0e2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801a0e6:	f04f 3aff 	mov.w	sl, #4294967295
 801a0ea:	e7d5      	b.n	801a098 <_strtod_l+0x8b8>
 801a0ec:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801a0ee:	ea13 0f0a 	tst.w	r3, sl
 801a0f2:	e7e1      	b.n	801a0b8 <_strtod_l+0x8d8>
 801a0f4:	f7ff fb56 	bl	80197a4 <sulp>
 801a0f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801a0fc:	ec53 2b10 	vmov	r2, r3, d0
 801a100:	f7e6 f89a 	bl	8000238 <__aeabi_dsub>
 801a104:	2200      	movs	r2, #0
 801a106:	2300      	movs	r3, #0
 801a108:	4682      	mov	sl, r0
 801a10a:	468b      	mov	fp, r1
 801a10c:	f7e6 fcb4 	bl	8000a78 <__aeabi_dcmpeq>
 801a110:	2800      	cmp	r0, #0
 801a112:	d0c1      	beq.n	801a098 <_strtod_l+0x8b8>
 801a114:	e619      	b.n	8019d4a <_strtod_l+0x56a>
 801a116:	4641      	mov	r1, r8
 801a118:	4620      	mov	r0, r4
 801a11a:	f003 f96f 	bl	801d3fc <__ratio>
 801a11e:	ec57 6b10 	vmov	r6, r7, d0
 801a122:	2200      	movs	r2, #0
 801a124:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 801a128:	4630      	mov	r0, r6
 801a12a:	4639      	mov	r1, r7
 801a12c:	f7e6 fcb8 	bl	8000aa0 <__aeabi_dcmple>
 801a130:	2800      	cmp	r0, #0
 801a132:	d06f      	beq.n	801a214 <_strtod_l+0xa34>
 801a134:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801a136:	2b00      	cmp	r3, #0
 801a138:	d17a      	bne.n	801a230 <_strtod_l+0xa50>
 801a13a:	f1ba 0f00 	cmp.w	sl, #0
 801a13e:	d158      	bne.n	801a1f2 <_strtod_l+0xa12>
 801a140:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801a142:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801a146:	2b00      	cmp	r3, #0
 801a148:	d15a      	bne.n	801a200 <_strtod_l+0xa20>
 801a14a:	4b64      	ldr	r3, [pc, #400]	@ (801a2dc <_strtod_l+0xafc>)
 801a14c:	2200      	movs	r2, #0
 801a14e:	4630      	mov	r0, r6
 801a150:	4639      	mov	r1, r7
 801a152:	f7e6 fc9b 	bl	8000a8c <__aeabi_dcmplt>
 801a156:	2800      	cmp	r0, #0
 801a158:	d159      	bne.n	801a20e <_strtod_l+0xa2e>
 801a15a:	4630      	mov	r0, r6
 801a15c:	4639      	mov	r1, r7
 801a15e:	4b60      	ldr	r3, [pc, #384]	@ (801a2e0 <_strtod_l+0xb00>)
 801a160:	2200      	movs	r2, #0
 801a162:	f7e6 fa21 	bl	80005a8 <__aeabi_dmul>
 801a166:	4606      	mov	r6, r0
 801a168:	460f      	mov	r7, r1
 801a16a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 801a16e:	9606      	str	r6, [sp, #24]
 801a170:	9307      	str	r3, [sp, #28]
 801a172:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801a176:	4d57      	ldr	r5, [pc, #348]	@ (801a2d4 <_strtod_l+0xaf4>)
 801a178:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 801a17c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801a17e:	401d      	ands	r5, r3
 801a180:	4b58      	ldr	r3, [pc, #352]	@ (801a2e4 <_strtod_l+0xb04>)
 801a182:	429d      	cmp	r5, r3
 801a184:	f040 80b2 	bne.w	801a2ec <_strtod_l+0xb0c>
 801a188:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801a18a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 801a18e:	ec4b ab10 	vmov	d0, sl, fp
 801a192:	f003 f86b 	bl	801d26c <__ulp>
 801a196:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801a19a:	ec51 0b10 	vmov	r0, r1, d0
 801a19e:	f7e6 fa03 	bl	80005a8 <__aeabi_dmul>
 801a1a2:	4652      	mov	r2, sl
 801a1a4:	465b      	mov	r3, fp
 801a1a6:	f7e6 f849 	bl	800023c <__adddf3>
 801a1aa:	460b      	mov	r3, r1
 801a1ac:	4949      	ldr	r1, [pc, #292]	@ (801a2d4 <_strtod_l+0xaf4>)
 801a1ae:	4a4e      	ldr	r2, [pc, #312]	@ (801a2e8 <_strtod_l+0xb08>)
 801a1b0:	4019      	ands	r1, r3
 801a1b2:	4291      	cmp	r1, r2
 801a1b4:	4682      	mov	sl, r0
 801a1b6:	d942      	bls.n	801a23e <_strtod_l+0xa5e>
 801a1b8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801a1ba:	4b47      	ldr	r3, [pc, #284]	@ (801a2d8 <_strtod_l+0xaf8>)
 801a1bc:	429a      	cmp	r2, r3
 801a1be:	d103      	bne.n	801a1c8 <_strtod_l+0x9e8>
 801a1c0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801a1c2:	3301      	adds	r3, #1
 801a1c4:	f43f ad2b 	beq.w	8019c1e <_strtod_l+0x43e>
 801a1c8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 801a2d8 <_strtod_l+0xaf8>
 801a1cc:	f04f 3aff 	mov.w	sl, #4294967295
 801a1d0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801a1d2:	9805      	ldr	r0, [sp, #20]
 801a1d4:	f002 fd16 	bl	801cc04 <_Bfree>
 801a1d8:	9805      	ldr	r0, [sp, #20]
 801a1da:	4649      	mov	r1, r9
 801a1dc:	f002 fd12 	bl	801cc04 <_Bfree>
 801a1e0:	9805      	ldr	r0, [sp, #20]
 801a1e2:	4641      	mov	r1, r8
 801a1e4:	f002 fd0e 	bl	801cc04 <_Bfree>
 801a1e8:	9805      	ldr	r0, [sp, #20]
 801a1ea:	4621      	mov	r1, r4
 801a1ec:	f002 fd0a 	bl	801cc04 <_Bfree>
 801a1f0:	e618      	b.n	8019e24 <_strtod_l+0x644>
 801a1f2:	f1ba 0f01 	cmp.w	sl, #1
 801a1f6:	d103      	bne.n	801a200 <_strtod_l+0xa20>
 801a1f8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801a1fa:	2b00      	cmp	r3, #0
 801a1fc:	f43f ada5 	beq.w	8019d4a <_strtod_l+0x56a>
 801a200:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 801a2b0 <_strtod_l+0xad0>
 801a204:	4f35      	ldr	r7, [pc, #212]	@ (801a2dc <_strtod_l+0xafc>)
 801a206:	ed8d 7b06 	vstr	d7, [sp, #24]
 801a20a:	2600      	movs	r6, #0
 801a20c:	e7b1      	b.n	801a172 <_strtod_l+0x992>
 801a20e:	4f34      	ldr	r7, [pc, #208]	@ (801a2e0 <_strtod_l+0xb00>)
 801a210:	2600      	movs	r6, #0
 801a212:	e7aa      	b.n	801a16a <_strtod_l+0x98a>
 801a214:	4b32      	ldr	r3, [pc, #200]	@ (801a2e0 <_strtod_l+0xb00>)
 801a216:	4630      	mov	r0, r6
 801a218:	4639      	mov	r1, r7
 801a21a:	2200      	movs	r2, #0
 801a21c:	f7e6 f9c4 	bl	80005a8 <__aeabi_dmul>
 801a220:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801a222:	4606      	mov	r6, r0
 801a224:	460f      	mov	r7, r1
 801a226:	2b00      	cmp	r3, #0
 801a228:	d09f      	beq.n	801a16a <_strtod_l+0x98a>
 801a22a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 801a22e:	e7a0      	b.n	801a172 <_strtod_l+0x992>
 801a230:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 801a2b8 <_strtod_l+0xad8>
 801a234:	ed8d 7b06 	vstr	d7, [sp, #24]
 801a238:	ec57 6b17 	vmov	r6, r7, d7
 801a23c:	e799      	b.n	801a172 <_strtod_l+0x992>
 801a23e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 801a242:	9b08      	ldr	r3, [sp, #32]
 801a244:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 801a248:	2b00      	cmp	r3, #0
 801a24a:	d1c1      	bne.n	801a1d0 <_strtod_l+0x9f0>
 801a24c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801a250:	0d1b      	lsrs	r3, r3, #20
 801a252:	051b      	lsls	r3, r3, #20
 801a254:	429d      	cmp	r5, r3
 801a256:	d1bb      	bne.n	801a1d0 <_strtod_l+0x9f0>
 801a258:	4630      	mov	r0, r6
 801a25a:	4639      	mov	r1, r7
 801a25c:	f7e6 fd04 	bl	8000c68 <__aeabi_d2lz>
 801a260:	f7e6 f974 	bl	800054c <__aeabi_l2d>
 801a264:	4602      	mov	r2, r0
 801a266:	460b      	mov	r3, r1
 801a268:	4630      	mov	r0, r6
 801a26a:	4639      	mov	r1, r7
 801a26c:	f7e5 ffe4 	bl	8000238 <__aeabi_dsub>
 801a270:	460b      	mov	r3, r1
 801a272:	4602      	mov	r2, r0
 801a274:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 801a278:	f3cb 0613 	ubfx	r6, fp, #0, #20
 801a27c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801a27e:	ea46 060a 	orr.w	r6, r6, sl
 801a282:	431e      	orrs	r6, r3
 801a284:	d06f      	beq.n	801a366 <_strtod_l+0xb86>
 801a286:	a30e      	add	r3, pc, #56	@ (adr r3, 801a2c0 <_strtod_l+0xae0>)
 801a288:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a28c:	f7e6 fbfe 	bl	8000a8c <__aeabi_dcmplt>
 801a290:	2800      	cmp	r0, #0
 801a292:	f47f accf 	bne.w	8019c34 <_strtod_l+0x454>
 801a296:	a30c      	add	r3, pc, #48	@ (adr r3, 801a2c8 <_strtod_l+0xae8>)
 801a298:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a29c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801a2a0:	f7e6 fc12 	bl	8000ac8 <__aeabi_dcmpgt>
 801a2a4:	2800      	cmp	r0, #0
 801a2a6:	d093      	beq.n	801a1d0 <_strtod_l+0x9f0>
 801a2a8:	e4c4      	b.n	8019c34 <_strtod_l+0x454>
 801a2aa:	bf00      	nop
 801a2ac:	f3af 8000 	nop.w
 801a2b0:	00000000 	.word	0x00000000
 801a2b4:	bff00000 	.word	0xbff00000
 801a2b8:	00000000 	.word	0x00000000
 801a2bc:	3ff00000 	.word	0x3ff00000
 801a2c0:	94a03595 	.word	0x94a03595
 801a2c4:	3fdfffff 	.word	0x3fdfffff
 801a2c8:	35afe535 	.word	0x35afe535
 801a2cc:	3fe00000 	.word	0x3fe00000
 801a2d0:	000fffff 	.word	0x000fffff
 801a2d4:	7ff00000 	.word	0x7ff00000
 801a2d8:	7fefffff 	.word	0x7fefffff
 801a2dc:	3ff00000 	.word	0x3ff00000
 801a2e0:	3fe00000 	.word	0x3fe00000
 801a2e4:	7fe00000 	.word	0x7fe00000
 801a2e8:	7c9fffff 	.word	0x7c9fffff
 801a2ec:	9b08      	ldr	r3, [sp, #32]
 801a2ee:	b323      	cbz	r3, 801a33a <_strtod_l+0xb5a>
 801a2f0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 801a2f4:	d821      	bhi.n	801a33a <_strtod_l+0xb5a>
 801a2f6:	a328      	add	r3, pc, #160	@ (adr r3, 801a398 <_strtod_l+0xbb8>)
 801a2f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a2fc:	4630      	mov	r0, r6
 801a2fe:	4639      	mov	r1, r7
 801a300:	f7e6 fbce 	bl	8000aa0 <__aeabi_dcmple>
 801a304:	b1a0      	cbz	r0, 801a330 <_strtod_l+0xb50>
 801a306:	4639      	mov	r1, r7
 801a308:	4630      	mov	r0, r6
 801a30a:	f7e6 fc25 	bl	8000b58 <__aeabi_d2uiz>
 801a30e:	2801      	cmp	r0, #1
 801a310:	bf38      	it	cc
 801a312:	2001      	movcc	r0, #1
 801a314:	f7e6 f8ce 	bl	80004b4 <__aeabi_ui2d>
 801a318:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801a31a:	4606      	mov	r6, r0
 801a31c:	460f      	mov	r7, r1
 801a31e:	b9fb      	cbnz	r3, 801a360 <_strtod_l+0xb80>
 801a320:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801a324:	9014      	str	r0, [sp, #80]	@ 0x50
 801a326:	9315      	str	r3, [sp, #84]	@ 0x54
 801a328:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 801a32c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 801a330:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801a332:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 801a336:	1b5b      	subs	r3, r3, r5
 801a338:	9311      	str	r3, [sp, #68]	@ 0x44
 801a33a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801a33e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 801a342:	f002 ff93 	bl	801d26c <__ulp>
 801a346:	4650      	mov	r0, sl
 801a348:	ec53 2b10 	vmov	r2, r3, d0
 801a34c:	4659      	mov	r1, fp
 801a34e:	f7e6 f92b 	bl	80005a8 <__aeabi_dmul>
 801a352:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 801a356:	f7e5 ff71 	bl	800023c <__adddf3>
 801a35a:	4682      	mov	sl, r0
 801a35c:	468b      	mov	fp, r1
 801a35e:	e770      	b.n	801a242 <_strtod_l+0xa62>
 801a360:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 801a364:	e7e0      	b.n	801a328 <_strtod_l+0xb48>
 801a366:	a30e      	add	r3, pc, #56	@ (adr r3, 801a3a0 <_strtod_l+0xbc0>)
 801a368:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a36c:	f7e6 fb8e 	bl	8000a8c <__aeabi_dcmplt>
 801a370:	e798      	b.n	801a2a4 <_strtod_l+0xac4>
 801a372:	2300      	movs	r3, #0
 801a374:	930b      	str	r3, [sp, #44]	@ 0x2c
 801a376:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 801a378:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801a37a:	6013      	str	r3, [r2, #0]
 801a37c:	f7ff ba6d 	b.w	801985a <_strtod_l+0x7a>
 801a380:	2a65      	cmp	r2, #101	@ 0x65
 801a382:	f43f ab66 	beq.w	8019a52 <_strtod_l+0x272>
 801a386:	2a45      	cmp	r2, #69	@ 0x45
 801a388:	f43f ab63 	beq.w	8019a52 <_strtod_l+0x272>
 801a38c:	2301      	movs	r3, #1
 801a38e:	f7ff bb9e 	b.w	8019ace <_strtod_l+0x2ee>
 801a392:	bf00      	nop
 801a394:	f3af 8000 	nop.w
 801a398:	ffc00000 	.word	0xffc00000
 801a39c:	41dfffff 	.word	0x41dfffff
 801a3a0:	94a03595 	.word	0x94a03595
 801a3a4:	3fcfffff 	.word	0x3fcfffff

0801a3a8 <_strtod_r>:
 801a3a8:	4b01      	ldr	r3, [pc, #4]	@ (801a3b0 <_strtod_r+0x8>)
 801a3aa:	f7ff ba19 	b.w	80197e0 <_strtod_l>
 801a3ae:	bf00      	nop
 801a3b0:	20000150 	.word	0x20000150

0801a3b4 <strtof>:
 801a3b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a3b8:	f8df 80bc 	ldr.w	r8, [pc, #188]	@ 801a478 <strtof+0xc4>
 801a3bc:	4b29      	ldr	r3, [pc, #164]	@ (801a464 <strtof+0xb0>)
 801a3be:	460a      	mov	r2, r1
 801a3c0:	ed2d 8b02 	vpush	{d8}
 801a3c4:	4601      	mov	r1, r0
 801a3c6:	f8d8 0000 	ldr.w	r0, [r8]
 801a3ca:	f7ff fa09 	bl	80197e0 <_strtod_l>
 801a3ce:	ec55 4b10 	vmov	r4, r5, d0
 801a3d2:	4622      	mov	r2, r4
 801a3d4:	462b      	mov	r3, r5
 801a3d6:	4620      	mov	r0, r4
 801a3d8:	4629      	mov	r1, r5
 801a3da:	f7e6 fb7f 	bl	8000adc <__aeabi_dcmpun>
 801a3de:	b190      	cbz	r0, 801a406 <strtof+0x52>
 801a3e0:	2d00      	cmp	r5, #0
 801a3e2:	4821      	ldr	r0, [pc, #132]	@ (801a468 <strtof+0xb4>)
 801a3e4:	da09      	bge.n	801a3fa <strtof+0x46>
 801a3e6:	f001 f9c7 	bl	801b778 <nanf>
 801a3ea:	eeb1 8a40 	vneg.f32	s16, s0
 801a3ee:	eeb0 0a48 	vmov.f32	s0, s16
 801a3f2:	ecbd 8b02 	vpop	{d8}
 801a3f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a3fa:	ecbd 8b02 	vpop	{d8}
 801a3fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a402:	f001 b9b9 	b.w	801b778 <nanf>
 801a406:	4620      	mov	r0, r4
 801a408:	4629      	mov	r1, r5
 801a40a:	f7e6 fbc5 	bl	8000b98 <__aeabi_d2f>
 801a40e:	ee08 0a10 	vmov	s16, r0
 801a412:	eddf 7a16 	vldr	s15, [pc, #88]	@ 801a46c <strtof+0xb8>
 801a416:	eeb0 7ac8 	vabs.f32	s14, s16
 801a41a:	eeb4 7a67 	vcmp.f32	s14, s15
 801a41e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a422:	dd11      	ble.n	801a448 <strtof+0x94>
 801a424:	f025 4700 	bic.w	r7, r5, #2147483648	@ 0x80000000
 801a428:	4b11      	ldr	r3, [pc, #68]	@ (801a470 <strtof+0xbc>)
 801a42a:	f04f 32ff 	mov.w	r2, #4294967295
 801a42e:	4620      	mov	r0, r4
 801a430:	4639      	mov	r1, r7
 801a432:	f7e6 fb53 	bl	8000adc <__aeabi_dcmpun>
 801a436:	b980      	cbnz	r0, 801a45a <strtof+0xa6>
 801a438:	4b0d      	ldr	r3, [pc, #52]	@ (801a470 <strtof+0xbc>)
 801a43a:	f04f 32ff 	mov.w	r2, #4294967295
 801a43e:	4620      	mov	r0, r4
 801a440:	4639      	mov	r1, r7
 801a442:	f7e6 fb2d 	bl	8000aa0 <__aeabi_dcmple>
 801a446:	b940      	cbnz	r0, 801a45a <strtof+0xa6>
 801a448:	ee18 3a10 	vmov	r3, s16
 801a44c:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 801a450:	d1cd      	bne.n	801a3ee <strtof+0x3a>
 801a452:	4b08      	ldr	r3, [pc, #32]	@ (801a474 <strtof+0xc0>)
 801a454:	402b      	ands	r3, r5
 801a456:	2b00      	cmp	r3, #0
 801a458:	d0c9      	beq.n	801a3ee <strtof+0x3a>
 801a45a:	f8d8 3000 	ldr.w	r3, [r8]
 801a45e:	2222      	movs	r2, #34	@ 0x22
 801a460:	601a      	str	r2, [r3, #0]
 801a462:	e7c4      	b.n	801a3ee <strtof+0x3a>
 801a464:	20000150 	.word	0x20000150
 801a468:	08022646 	.word	0x08022646
 801a46c:	7f7fffff 	.word	0x7f7fffff
 801a470:	7fefffff 	.word	0x7fefffff
 801a474:	7ff00000 	.word	0x7ff00000
 801a478:	200002bc 	.word	0x200002bc

0801a47c <_strtol_l.constprop.0>:
 801a47c:	2b24      	cmp	r3, #36	@ 0x24
 801a47e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a482:	4686      	mov	lr, r0
 801a484:	4690      	mov	r8, r2
 801a486:	d801      	bhi.n	801a48c <_strtol_l.constprop.0+0x10>
 801a488:	2b01      	cmp	r3, #1
 801a48a:	d106      	bne.n	801a49a <_strtol_l.constprop.0+0x1e>
 801a48c:	f001 f928 	bl	801b6e0 <__errno>
 801a490:	2316      	movs	r3, #22
 801a492:	6003      	str	r3, [r0, #0]
 801a494:	2000      	movs	r0, #0
 801a496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a49a:	4834      	ldr	r0, [pc, #208]	@ (801a56c <_strtol_l.constprop.0+0xf0>)
 801a49c:	460d      	mov	r5, r1
 801a49e:	462a      	mov	r2, r5
 801a4a0:	f815 4b01 	ldrb.w	r4, [r5], #1
 801a4a4:	5d06      	ldrb	r6, [r0, r4]
 801a4a6:	f016 0608 	ands.w	r6, r6, #8
 801a4aa:	d1f8      	bne.n	801a49e <_strtol_l.constprop.0+0x22>
 801a4ac:	2c2d      	cmp	r4, #45	@ 0x2d
 801a4ae:	d12d      	bne.n	801a50c <_strtol_l.constprop.0+0x90>
 801a4b0:	782c      	ldrb	r4, [r5, #0]
 801a4b2:	2601      	movs	r6, #1
 801a4b4:	1c95      	adds	r5, r2, #2
 801a4b6:	f033 0210 	bics.w	r2, r3, #16
 801a4ba:	d109      	bne.n	801a4d0 <_strtol_l.constprop.0+0x54>
 801a4bc:	2c30      	cmp	r4, #48	@ 0x30
 801a4be:	d12a      	bne.n	801a516 <_strtol_l.constprop.0+0x9a>
 801a4c0:	782a      	ldrb	r2, [r5, #0]
 801a4c2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801a4c6:	2a58      	cmp	r2, #88	@ 0x58
 801a4c8:	d125      	bne.n	801a516 <_strtol_l.constprop.0+0x9a>
 801a4ca:	786c      	ldrb	r4, [r5, #1]
 801a4cc:	2310      	movs	r3, #16
 801a4ce:	3502      	adds	r5, #2
 801a4d0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 801a4d4:	f10c 3cff 	add.w	ip, ip, #4294967295
 801a4d8:	2200      	movs	r2, #0
 801a4da:	fbbc f9f3 	udiv	r9, ip, r3
 801a4de:	4610      	mov	r0, r2
 801a4e0:	fb03 ca19 	mls	sl, r3, r9, ip
 801a4e4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 801a4e8:	2f09      	cmp	r7, #9
 801a4ea:	d81b      	bhi.n	801a524 <_strtol_l.constprop.0+0xa8>
 801a4ec:	463c      	mov	r4, r7
 801a4ee:	42a3      	cmp	r3, r4
 801a4f0:	dd27      	ble.n	801a542 <_strtol_l.constprop.0+0xc6>
 801a4f2:	1c57      	adds	r7, r2, #1
 801a4f4:	d007      	beq.n	801a506 <_strtol_l.constprop.0+0x8a>
 801a4f6:	4581      	cmp	r9, r0
 801a4f8:	d320      	bcc.n	801a53c <_strtol_l.constprop.0+0xc0>
 801a4fa:	d101      	bne.n	801a500 <_strtol_l.constprop.0+0x84>
 801a4fc:	45a2      	cmp	sl, r4
 801a4fe:	db1d      	blt.n	801a53c <_strtol_l.constprop.0+0xc0>
 801a500:	fb00 4003 	mla	r0, r0, r3, r4
 801a504:	2201      	movs	r2, #1
 801a506:	f815 4b01 	ldrb.w	r4, [r5], #1
 801a50a:	e7eb      	b.n	801a4e4 <_strtol_l.constprop.0+0x68>
 801a50c:	2c2b      	cmp	r4, #43	@ 0x2b
 801a50e:	bf04      	itt	eq
 801a510:	782c      	ldrbeq	r4, [r5, #0]
 801a512:	1c95      	addeq	r5, r2, #2
 801a514:	e7cf      	b.n	801a4b6 <_strtol_l.constprop.0+0x3a>
 801a516:	2b00      	cmp	r3, #0
 801a518:	d1da      	bne.n	801a4d0 <_strtol_l.constprop.0+0x54>
 801a51a:	2c30      	cmp	r4, #48	@ 0x30
 801a51c:	bf0c      	ite	eq
 801a51e:	2308      	moveq	r3, #8
 801a520:	230a      	movne	r3, #10
 801a522:	e7d5      	b.n	801a4d0 <_strtol_l.constprop.0+0x54>
 801a524:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 801a528:	2f19      	cmp	r7, #25
 801a52a:	d801      	bhi.n	801a530 <_strtol_l.constprop.0+0xb4>
 801a52c:	3c37      	subs	r4, #55	@ 0x37
 801a52e:	e7de      	b.n	801a4ee <_strtol_l.constprop.0+0x72>
 801a530:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 801a534:	2f19      	cmp	r7, #25
 801a536:	d804      	bhi.n	801a542 <_strtol_l.constprop.0+0xc6>
 801a538:	3c57      	subs	r4, #87	@ 0x57
 801a53a:	e7d8      	b.n	801a4ee <_strtol_l.constprop.0+0x72>
 801a53c:	f04f 32ff 	mov.w	r2, #4294967295
 801a540:	e7e1      	b.n	801a506 <_strtol_l.constprop.0+0x8a>
 801a542:	1c53      	adds	r3, r2, #1
 801a544:	d108      	bne.n	801a558 <_strtol_l.constprop.0+0xdc>
 801a546:	2322      	movs	r3, #34	@ 0x22
 801a548:	f8ce 3000 	str.w	r3, [lr]
 801a54c:	4660      	mov	r0, ip
 801a54e:	f1b8 0f00 	cmp.w	r8, #0
 801a552:	d0a0      	beq.n	801a496 <_strtol_l.constprop.0+0x1a>
 801a554:	1e69      	subs	r1, r5, #1
 801a556:	e006      	b.n	801a566 <_strtol_l.constprop.0+0xea>
 801a558:	b106      	cbz	r6, 801a55c <_strtol_l.constprop.0+0xe0>
 801a55a:	4240      	negs	r0, r0
 801a55c:	f1b8 0f00 	cmp.w	r8, #0
 801a560:	d099      	beq.n	801a496 <_strtol_l.constprop.0+0x1a>
 801a562:	2a00      	cmp	r2, #0
 801a564:	d1f6      	bne.n	801a554 <_strtol_l.constprop.0+0xd8>
 801a566:	f8c8 1000 	str.w	r1, [r8]
 801a56a:	e794      	b.n	801a496 <_strtol_l.constprop.0+0x1a>
 801a56c:	08022459 	.word	0x08022459

0801a570 <_strtol_r>:
 801a570:	f7ff bf84 	b.w	801a47c <_strtol_l.constprop.0>

0801a574 <strtol>:
 801a574:	4613      	mov	r3, r2
 801a576:	460a      	mov	r2, r1
 801a578:	4601      	mov	r1, r0
 801a57a:	4802      	ldr	r0, [pc, #8]	@ (801a584 <strtol+0x10>)
 801a57c:	6800      	ldr	r0, [r0, #0]
 801a57e:	f7ff bf7d 	b.w	801a47c <_strtol_l.constprop.0>
 801a582:	bf00      	nop
 801a584:	200002bc 	.word	0x200002bc

0801a588 <__cvt>:
 801a588:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801a58c:	ec57 6b10 	vmov	r6, r7, d0
 801a590:	2f00      	cmp	r7, #0
 801a592:	460c      	mov	r4, r1
 801a594:	4619      	mov	r1, r3
 801a596:	463b      	mov	r3, r7
 801a598:	bfbb      	ittet	lt
 801a59a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 801a59e:	461f      	movlt	r7, r3
 801a5a0:	2300      	movge	r3, #0
 801a5a2:	232d      	movlt	r3, #45	@ 0x2d
 801a5a4:	700b      	strb	r3, [r1, #0]
 801a5a6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801a5a8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 801a5ac:	4691      	mov	r9, r2
 801a5ae:	f023 0820 	bic.w	r8, r3, #32
 801a5b2:	bfbc      	itt	lt
 801a5b4:	4632      	movlt	r2, r6
 801a5b6:	4616      	movlt	r6, r2
 801a5b8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801a5bc:	d005      	beq.n	801a5ca <__cvt+0x42>
 801a5be:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 801a5c2:	d100      	bne.n	801a5c6 <__cvt+0x3e>
 801a5c4:	3401      	adds	r4, #1
 801a5c6:	2102      	movs	r1, #2
 801a5c8:	e000      	b.n	801a5cc <__cvt+0x44>
 801a5ca:	2103      	movs	r1, #3
 801a5cc:	ab03      	add	r3, sp, #12
 801a5ce:	9301      	str	r3, [sp, #4]
 801a5d0:	ab02      	add	r3, sp, #8
 801a5d2:	9300      	str	r3, [sp, #0]
 801a5d4:	ec47 6b10 	vmov	d0, r6, r7
 801a5d8:	4653      	mov	r3, sl
 801a5da:	4622      	mov	r2, r4
 801a5dc:	f001 f978 	bl	801b8d0 <_dtoa_r>
 801a5e0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 801a5e4:	4605      	mov	r5, r0
 801a5e6:	d119      	bne.n	801a61c <__cvt+0x94>
 801a5e8:	f019 0f01 	tst.w	r9, #1
 801a5ec:	d00e      	beq.n	801a60c <__cvt+0x84>
 801a5ee:	eb00 0904 	add.w	r9, r0, r4
 801a5f2:	2200      	movs	r2, #0
 801a5f4:	2300      	movs	r3, #0
 801a5f6:	4630      	mov	r0, r6
 801a5f8:	4639      	mov	r1, r7
 801a5fa:	f7e6 fa3d 	bl	8000a78 <__aeabi_dcmpeq>
 801a5fe:	b108      	cbz	r0, 801a604 <__cvt+0x7c>
 801a600:	f8cd 900c 	str.w	r9, [sp, #12]
 801a604:	2230      	movs	r2, #48	@ 0x30
 801a606:	9b03      	ldr	r3, [sp, #12]
 801a608:	454b      	cmp	r3, r9
 801a60a:	d31e      	bcc.n	801a64a <__cvt+0xc2>
 801a60c:	9b03      	ldr	r3, [sp, #12]
 801a60e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801a610:	1b5b      	subs	r3, r3, r5
 801a612:	4628      	mov	r0, r5
 801a614:	6013      	str	r3, [r2, #0]
 801a616:	b004      	add	sp, #16
 801a618:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a61c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801a620:	eb00 0904 	add.w	r9, r0, r4
 801a624:	d1e5      	bne.n	801a5f2 <__cvt+0x6a>
 801a626:	7803      	ldrb	r3, [r0, #0]
 801a628:	2b30      	cmp	r3, #48	@ 0x30
 801a62a:	d10a      	bne.n	801a642 <__cvt+0xba>
 801a62c:	2200      	movs	r2, #0
 801a62e:	2300      	movs	r3, #0
 801a630:	4630      	mov	r0, r6
 801a632:	4639      	mov	r1, r7
 801a634:	f7e6 fa20 	bl	8000a78 <__aeabi_dcmpeq>
 801a638:	b918      	cbnz	r0, 801a642 <__cvt+0xba>
 801a63a:	f1c4 0401 	rsb	r4, r4, #1
 801a63e:	f8ca 4000 	str.w	r4, [sl]
 801a642:	f8da 3000 	ldr.w	r3, [sl]
 801a646:	4499      	add	r9, r3
 801a648:	e7d3      	b.n	801a5f2 <__cvt+0x6a>
 801a64a:	1c59      	adds	r1, r3, #1
 801a64c:	9103      	str	r1, [sp, #12]
 801a64e:	701a      	strb	r2, [r3, #0]
 801a650:	e7d9      	b.n	801a606 <__cvt+0x7e>

0801a652 <__exponent>:
 801a652:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801a654:	2900      	cmp	r1, #0
 801a656:	bfba      	itte	lt
 801a658:	4249      	neglt	r1, r1
 801a65a:	232d      	movlt	r3, #45	@ 0x2d
 801a65c:	232b      	movge	r3, #43	@ 0x2b
 801a65e:	2909      	cmp	r1, #9
 801a660:	7002      	strb	r2, [r0, #0]
 801a662:	7043      	strb	r3, [r0, #1]
 801a664:	dd29      	ble.n	801a6ba <__exponent+0x68>
 801a666:	f10d 0307 	add.w	r3, sp, #7
 801a66a:	461d      	mov	r5, r3
 801a66c:	270a      	movs	r7, #10
 801a66e:	461a      	mov	r2, r3
 801a670:	fbb1 f6f7 	udiv	r6, r1, r7
 801a674:	fb07 1416 	mls	r4, r7, r6, r1
 801a678:	3430      	adds	r4, #48	@ 0x30
 801a67a:	f802 4c01 	strb.w	r4, [r2, #-1]
 801a67e:	460c      	mov	r4, r1
 801a680:	2c63      	cmp	r4, #99	@ 0x63
 801a682:	f103 33ff 	add.w	r3, r3, #4294967295
 801a686:	4631      	mov	r1, r6
 801a688:	dcf1      	bgt.n	801a66e <__exponent+0x1c>
 801a68a:	3130      	adds	r1, #48	@ 0x30
 801a68c:	1e94      	subs	r4, r2, #2
 801a68e:	f803 1c01 	strb.w	r1, [r3, #-1]
 801a692:	1c41      	adds	r1, r0, #1
 801a694:	4623      	mov	r3, r4
 801a696:	42ab      	cmp	r3, r5
 801a698:	d30a      	bcc.n	801a6b0 <__exponent+0x5e>
 801a69a:	f10d 0309 	add.w	r3, sp, #9
 801a69e:	1a9b      	subs	r3, r3, r2
 801a6a0:	42ac      	cmp	r4, r5
 801a6a2:	bf88      	it	hi
 801a6a4:	2300      	movhi	r3, #0
 801a6a6:	3302      	adds	r3, #2
 801a6a8:	4403      	add	r3, r0
 801a6aa:	1a18      	subs	r0, r3, r0
 801a6ac:	b003      	add	sp, #12
 801a6ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a6b0:	f813 6b01 	ldrb.w	r6, [r3], #1
 801a6b4:	f801 6f01 	strb.w	r6, [r1, #1]!
 801a6b8:	e7ed      	b.n	801a696 <__exponent+0x44>
 801a6ba:	2330      	movs	r3, #48	@ 0x30
 801a6bc:	3130      	adds	r1, #48	@ 0x30
 801a6be:	7083      	strb	r3, [r0, #2]
 801a6c0:	70c1      	strb	r1, [r0, #3]
 801a6c2:	1d03      	adds	r3, r0, #4
 801a6c4:	e7f1      	b.n	801a6aa <__exponent+0x58>
	...

0801a6c8 <_printf_float>:
 801a6c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a6cc:	b08d      	sub	sp, #52	@ 0x34
 801a6ce:	460c      	mov	r4, r1
 801a6d0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 801a6d4:	4616      	mov	r6, r2
 801a6d6:	461f      	mov	r7, r3
 801a6d8:	4605      	mov	r5, r0
 801a6da:	f000 ffa7 	bl	801b62c <_localeconv_r>
 801a6de:	6803      	ldr	r3, [r0, #0]
 801a6e0:	9304      	str	r3, [sp, #16]
 801a6e2:	4618      	mov	r0, r3
 801a6e4:	f7e5 fd9c 	bl	8000220 <strlen>
 801a6e8:	2300      	movs	r3, #0
 801a6ea:	930a      	str	r3, [sp, #40]	@ 0x28
 801a6ec:	f8d8 3000 	ldr.w	r3, [r8]
 801a6f0:	9005      	str	r0, [sp, #20]
 801a6f2:	3307      	adds	r3, #7
 801a6f4:	f023 0307 	bic.w	r3, r3, #7
 801a6f8:	f103 0208 	add.w	r2, r3, #8
 801a6fc:	f894 a018 	ldrb.w	sl, [r4, #24]
 801a700:	f8d4 b000 	ldr.w	fp, [r4]
 801a704:	f8c8 2000 	str.w	r2, [r8]
 801a708:	e9d3 8900 	ldrd	r8, r9, [r3]
 801a70c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 801a710:	9307      	str	r3, [sp, #28]
 801a712:	f8cd 8018 	str.w	r8, [sp, #24]
 801a716:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 801a71a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801a71e:	4b9c      	ldr	r3, [pc, #624]	@ (801a990 <_printf_float+0x2c8>)
 801a720:	f04f 32ff 	mov.w	r2, #4294967295
 801a724:	f7e6 f9da 	bl	8000adc <__aeabi_dcmpun>
 801a728:	bb70      	cbnz	r0, 801a788 <_printf_float+0xc0>
 801a72a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801a72e:	4b98      	ldr	r3, [pc, #608]	@ (801a990 <_printf_float+0x2c8>)
 801a730:	f04f 32ff 	mov.w	r2, #4294967295
 801a734:	f7e6 f9b4 	bl	8000aa0 <__aeabi_dcmple>
 801a738:	bb30      	cbnz	r0, 801a788 <_printf_float+0xc0>
 801a73a:	2200      	movs	r2, #0
 801a73c:	2300      	movs	r3, #0
 801a73e:	4640      	mov	r0, r8
 801a740:	4649      	mov	r1, r9
 801a742:	f7e6 f9a3 	bl	8000a8c <__aeabi_dcmplt>
 801a746:	b110      	cbz	r0, 801a74e <_printf_float+0x86>
 801a748:	232d      	movs	r3, #45	@ 0x2d
 801a74a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801a74e:	4a91      	ldr	r2, [pc, #580]	@ (801a994 <_printf_float+0x2cc>)
 801a750:	4b91      	ldr	r3, [pc, #580]	@ (801a998 <_printf_float+0x2d0>)
 801a752:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801a756:	bf94      	ite	ls
 801a758:	4690      	movls	r8, r2
 801a75a:	4698      	movhi	r8, r3
 801a75c:	2303      	movs	r3, #3
 801a75e:	6123      	str	r3, [r4, #16]
 801a760:	f02b 0304 	bic.w	r3, fp, #4
 801a764:	6023      	str	r3, [r4, #0]
 801a766:	f04f 0900 	mov.w	r9, #0
 801a76a:	9700      	str	r7, [sp, #0]
 801a76c:	4633      	mov	r3, r6
 801a76e:	aa0b      	add	r2, sp, #44	@ 0x2c
 801a770:	4621      	mov	r1, r4
 801a772:	4628      	mov	r0, r5
 801a774:	f000 f9d2 	bl	801ab1c <_printf_common>
 801a778:	3001      	adds	r0, #1
 801a77a:	f040 808d 	bne.w	801a898 <_printf_float+0x1d0>
 801a77e:	f04f 30ff 	mov.w	r0, #4294967295
 801a782:	b00d      	add	sp, #52	@ 0x34
 801a784:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a788:	4642      	mov	r2, r8
 801a78a:	464b      	mov	r3, r9
 801a78c:	4640      	mov	r0, r8
 801a78e:	4649      	mov	r1, r9
 801a790:	f7e6 f9a4 	bl	8000adc <__aeabi_dcmpun>
 801a794:	b140      	cbz	r0, 801a7a8 <_printf_float+0xe0>
 801a796:	464b      	mov	r3, r9
 801a798:	2b00      	cmp	r3, #0
 801a79a:	bfbc      	itt	lt
 801a79c:	232d      	movlt	r3, #45	@ 0x2d
 801a79e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 801a7a2:	4a7e      	ldr	r2, [pc, #504]	@ (801a99c <_printf_float+0x2d4>)
 801a7a4:	4b7e      	ldr	r3, [pc, #504]	@ (801a9a0 <_printf_float+0x2d8>)
 801a7a6:	e7d4      	b.n	801a752 <_printf_float+0x8a>
 801a7a8:	6863      	ldr	r3, [r4, #4]
 801a7aa:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 801a7ae:	9206      	str	r2, [sp, #24]
 801a7b0:	1c5a      	adds	r2, r3, #1
 801a7b2:	d13b      	bne.n	801a82c <_printf_float+0x164>
 801a7b4:	2306      	movs	r3, #6
 801a7b6:	6063      	str	r3, [r4, #4]
 801a7b8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 801a7bc:	2300      	movs	r3, #0
 801a7be:	6022      	str	r2, [r4, #0]
 801a7c0:	9303      	str	r3, [sp, #12]
 801a7c2:	ab0a      	add	r3, sp, #40	@ 0x28
 801a7c4:	e9cd a301 	strd	sl, r3, [sp, #4]
 801a7c8:	ab09      	add	r3, sp, #36	@ 0x24
 801a7ca:	9300      	str	r3, [sp, #0]
 801a7cc:	6861      	ldr	r1, [r4, #4]
 801a7ce:	ec49 8b10 	vmov	d0, r8, r9
 801a7d2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 801a7d6:	4628      	mov	r0, r5
 801a7d8:	f7ff fed6 	bl	801a588 <__cvt>
 801a7dc:	9b06      	ldr	r3, [sp, #24]
 801a7de:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801a7e0:	2b47      	cmp	r3, #71	@ 0x47
 801a7e2:	4680      	mov	r8, r0
 801a7e4:	d129      	bne.n	801a83a <_printf_float+0x172>
 801a7e6:	1cc8      	adds	r0, r1, #3
 801a7e8:	db02      	blt.n	801a7f0 <_printf_float+0x128>
 801a7ea:	6863      	ldr	r3, [r4, #4]
 801a7ec:	4299      	cmp	r1, r3
 801a7ee:	dd41      	ble.n	801a874 <_printf_float+0x1ac>
 801a7f0:	f1aa 0a02 	sub.w	sl, sl, #2
 801a7f4:	fa5f fa8a 	uxtb.w	sl, sl
 801a7f8:	3901      	subs	r1, #1
 801a7fa:	4652      	mov	r2, sl
 801a7fc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 801a800:	9109      	str	r1, [sp, #36]	@ 0x24
 801a802:	f7ff ff26 	bl	801a652 <__exponent>
 801a806:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801a808:	1813      	adds	r3, r2, r0
 801a80a:	2a01      	cmp	r2, #1
 801a80c:	4681      	mov	r9, r0
 801a80e:	6123      	str	r3, [r4, #16]
 801a810:	dc02      	bgt.n	801a818 <_printf_float+0x150>
 801a812:	6822      	ldr	r2, [r4, #0]
 801a814:	07d2      	lsls	r2, r2, #31
 801a816:	d501      	bpl.n	801a81c <_printf_float+0x154>
 801a818:	3301      	adds	r3, #1
 801a81a:	6123      	str	r3, [r4, #16]
 801a81c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 801a820:	2b00      	cmp	r3, #0
 801a822:	d0a2      	beq.n	801a76a <_printf_float+0xa2>
 801a824:	232d      	movs	r3, #45	@ 0x2d
 801a826:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801a82a:	e79e      	b.n	801a76a <_printf_float+0xa2>
 801a82c:	9a06      	ldr	r2, [sp, #24]
 801a82e:	2a47      	cmp	r2, #71	@ 0x47
 801a830:	d1c2      	bne.n	801a7b8 <_printf_float+0xf0>
 801a832:	2b00      	cmp	r3, #0
 801a834:	d1c0      	bne.n	801a7b8 <_printf_float+0xf0>
 801a836:	2301      	movs	r3, #1
 801a838:	e7bd      	b.n	801a7b6 <_printf_float+0xee>
 801a83a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801a83e:	d9db      	bls.n	801a7f8 <_printf_float+0x130>
 801a840:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 801a844:	d118      	bne.n	801a878 <_printf_float+0x1b0>
 801a846:	2900      	cmp	r1, #0
 801a848:	6863      	ldr	r3, [r4, #4]
 801a84a:	dd0b      	ble.n	801a864 <_printf_float+0x19c>
 801a84c:	6121      	str	r1, [r4, #16]
 801a84e:	b913      	cbnz	r3, 801a856 <_printf_float+0x18e>
 801a850:	6822      	ldr	r2, [r4, #0]
 801a852:	07d0      	lsls	r0, r2, #31
 801a854:	d502      	bpl.n	801a85c <_printf_float+0x194>
 801a856:	3301      	adds	r3, #1
 801a858:	440b      	add	r3, r1
 801a85a:	6123      	str	r3, [r4, #16]
 801a85c:	65a1      	str	r1, [r4, #88]	@ 0x58
 801a85e:	f04f 0900 	mov.w	r9, #0
 801a862:	e7db      	b.n	801a81c <_printf_float+0x154>
 801a864:	b913      	cbnz	r3, 801a86c <_printf_float+0x1a4>
 801a866:	6822      	ldr	r2, [r4, #0]
 801a868:	07d2      	lsls	r2, r2, #31
 801a86a:	d501      	bpl.n	801a870 <_printf_float+0x1a8>
 801a86c:	3302      	adds	r3, #2
 801a86e:	e7f4      	b.n	801a85a <_printf_float+0x192>
 801a870:	2301      	movs	r3, #1
 801a872:	e7f2      	b.n	801a85a <_printf_float+0x192>
 801a874:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 801a878:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801a87a:	4299      	cmp	r1, r3
 801a87c:	db05      	blt.n	801a88a <_printf_float+0x1c2>
 801a87e:	6823      	ldr	r3, [r4, #0]
 801a880:	6121      	str	r1, [r4, #16]
 801a882:	07d8      	lsls	r0, r3, #31
 801a884:	d5ea      	bpl.n	801a85c <_printf_float+0x194>
 801a886:	1c4b      	adds	r3, r1, #1
 801a888:	e7e7      	b.n	801a85a <_printf_float+0x192>
 801a88a:	2900      	cmp	r1, #0
 801a88c:	bfd4      	ite	le
 801a88e:	f1c1 0202 	rsble	r2, r1, #2
 801a892:	2201      	movgt	r2, #1
 801a894:	4413      	add	r3, r2
 801a896:	e7e0      	b.n	801a85a <_printf_float+0x192>
 801a898:	6823      	ldr	r3, [r4, #0]
 801a89a:	055a      	lsls	r2, r3, #21
 801a89c:	d407      	bmi.n	801a8ae <_printf_float+0x1e6>
 801a89e:	6923      	ldr	r3, [r4, #16]
 801a8a0:	4642      	mov	r2, r8
 801a8a2:	4631      	mov	r1, r6
 801a8a4:	4628      	mov	r0, r5
 801a8a6:	47b8      	blx	r7
 801a8a8:	3001      	adds	r0, #1
 801a8aa:	d12b      	bne.n	801a904 <_printf_float+0x23c>
 801a8ac:	e767      	b.n	801a77e <_printf_float+0xb6>
 801a8ae:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801a8b2:	f240 80dd 	bls.w	801aa70 <_printf_float+0x3a8>
 801a8b6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801a8ba:	2200      	movs	r2, #0
 801a8bc:	2300      	movs	r3, #0
 801a8be:	f7e6 f8db 	bl	8000a78 <__aeabi_dcmpeq>
 801a8c2:	2800      	cmp	r0, #0
 801a8c4:	d033      	beq.n	801a92e <_printf_float+0x266>
 801a8c6:	4a37      	ldr	r2, [pc, #220]	@ (801a9a4 <_printf_float+0x2dc>)
 801a8c8:	2301      	movs	r3, #1
 801a8ca:	4631      	mov	r1, r6
 801a8cc:	4628      	mov	r0, r5
 801a8ce:	47b8      	blx	r7
 801a8d0:	3001      	adds	r0, #1
 801a8d2:	f43f af54 	beq.w	801a77e <_printf_float+0xb6>
 801a8d6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 801a8da:	4543      	cmp	r3, r8
 801a8dc:	db02      	blt.n	801a8e4 <_printf_float+0x21c>
 801a8de:	6823      	ldr	r3, [r4, #0]
 801a8e0:	07d8      	lsls	r0, r3, #31
 801a8e2:	d50f      	bpl.n	801a904 <_printf_float+0x23c>
 801a8e4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801a8e8:	4631      	mov	r1, r6
 801a8ea:	4628      	mov	r0, r5
 801a8ec:	47b8      	blx	r7
 801a8ee:	3001      	adds	r0, #1
 801a8f0:	f43f af45 	beq.w	801a77e <_printf_float+0xb6>
 801a8f4:	f04f 0900 	mov.w	r9, #0
 801a8f8:	f108 38ff 	add.w	r8, r8, #4294967295
 801a8fc:	f104 0a1a 	add.w	sl, r4, #26
 801a900:	45c8      	cmp	r8, r9
 801a902:	dc09      	bgt.n	801a918 <_printf_float+0x250>
 801a904:	6823      	ldr	r3, [r4, #0]
 801a906:	079b      	lsls	r3, r3, #30
 801a908:	f100 8103 	bmi.w	801ab12 <_printf_float+0x44a>
 801a90c:	68e0      	ldr	r0, [r4, #12]
 801a90e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801a910:	4298      	cmp	r0, r3
 801a912:	bfb8      	it	lt
 801a914:	4618      	movlt	r0, r3
 801a916:	e734      	b.n	801a782 <_printf_float+0xba>
 801a918:	2301      	movs	r3, #1
 801a91a:	4652      	mov	r2, sl
 801a91c:	4631      	mov	r1, r6
 801a91e:	4628      	mov	r0, r5
 801a920:	47b8      	blx	r7
 801a922:	3001      	adds	r0, #1
 801a924:	f43f af2b 	beq.w	801a77e <_printf_float+0xb6>
 801a928:	f109 0901 	add.w	r9, r9, #1
 801a92c:	e7e8      	b.n	801a900 <_printf_float+0x238>
 801a92e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a930:	2b00      	cmp	r3, #0
 801a932:	dc39      	bgt.n	801a9a8 <_printf_float+0x2e0>
 801a934:	4a1b      	ldr	r2, [pc, #108]	@ (801a9a4 <_printf_float+0x2dc>)
 801a936:	2301      	movs	r3, #1
 801a938:	4631      	mov	r1, r6
 801a93a:	4628      	mov	r0, r5
 801a93c:	47b8      	blx	r7
 801a93e:	3001      	adds	r0, #1
 801a940:	f43f af1d 	beq.w	801a77e <_printf_float+0xb6>
 801a944:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 801a948:	ea59 0303 	orrs.w	r3, r9, r3
 801a94c:	d102      	bne.n	801a954 <_printf_float+0x28c>
 801a94e:	6823      	ldr	r3, [r4, #0]
 801a950:	07d9      	lsls	r1, r3, #31
 801a952:	d5d7      	bpl.n	801a904 <_printf_float+0x23c>
 801a954:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801a958:	4631      	mov	r1, r6
 801a95a:	4628      	mov	r0, r5
 801a95c:	47b8      	blx	r7
 801a95e:	3001      	adds	r0, #1
 801a960:	f43f af0d 	beq.w	801a77e <_printf_float+0xb6>
 801a964:	f04f 0a00 	mov.w	sl, #0
 801a968:	f104 0b1a 	add.w	fp, r4, #26
 801a96c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a96e:	425b      	negs	r3, r3
 801a970:	4553      	cmp	r3, sl
 801a972:	dc01      	bgt.n	801a978 <_printf_float+0x2b0>
 801a974:	464b      	mov	r3, r9
 801a976:	e793      	b.n	801a8a0 <_printf_float+0x1d8>
 801a978:	2301      	movs	r3, #1
 801a97a:	465a      	mov	r2, fp
 801a97c:	4631      	mov	r1, r6
 801a97e:	4628      	mov	r0, r5
 801a980:	47b8      	blx	r7
 801a982:	3001      	adds	r0, #1
 801a984:	f43f aefb 	beq.w	801a77e <_printf_float+0xb6>
 801a988:	f10a 0a01 	add.w	sl, sl, #1
 801a98c:	e7ee      	b.n	801a96c <_printf_float+0x2a4>
 801a98e:	bf00      	nop
 801a990:	7fefffff 	.word	0x7fefffff
 801a994:	08022559 	.word	0x08022559
 801a998:	0802255d 	.word	0x0802255d
 801a99c:	08022561 	.word	0x08022561
 801a9a0:	08022565 	.word	0x08022565
 801a9a4:	08022569 	.word	0x08022569
 801a9a8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801a9aa:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801a9ae:	4553      	cmp	r3, sl
 801a9b0:	bfa8      	it	ge
 801a9b2:	4653      	movge	r3, sl
 801a9b4:	2b00      	cmp	r3, #0
 801a9b6:	4699      	mov	r9, r3
 801a9b8:	dc36      	bgt.n	801aa28 <_printf_float+0x360>
 801a9ba:	f04f 0b00 	mov.w	fp, #0
 801a9be:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801a9c2:	f104 021a 	add.w	r2, r4, #26
 801a9c6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801a9c8:	9306      	str	r3, [sp, #24]
 801a9ca:	eba3 0309 	sub.w	r3, r3, r9
 801a9ce:	455b      	cmp	r3, fp
 801a9d0:	dc31      	bgt.n	801aa36 <_printf_float+0x36e>
 801a9d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a9d4:	459a      	cmp	sl, r3
 801a9d6:	dc3a      	bgt.n	801aa4e <_printf_float+0x386>
 801a9d8:	6823      	ldr	r3, [r4, #0]
 801a9da:	07da      	lsls	r2, r3, #31
 801a9dc:	d437      	bmi.n	801aa4e <_printf_float+0x386>
 801a9de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a9e0:	ebaa 0903 	sub.w	r9, sl, r3
 801a9e4:	9b06      	ldr	r3, [sp, #24]
 801a9e6:	ebaa 0303 	sub.w	r3, sl, r3
 801a9ea:	4599      	cmp	r9, r3
 801a9ec:	bfa8      	it	ge
 801a9ee:	4699      	movge	r9, r3
 801a9f0:	f1b9 0f00 	cmp.w	r9, #0
 801a9f4:	dc33      	bgt.n	801aa5e <_printf_float+0x396>
 801a9f6:	f04f 0800 	mov.w	r8, #0
 801a9fa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801a9fe:	f104 0b1a 	add.w	fp, r4, #26
 801aa02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801aa04:	ebaa 0303 	sub.w	r3, sl, r3
 801aa08:	eba3 0309 	sub.w	r3, r3, r9
 801aa0c:	4543      	cmp	r3, r8
 801aa0e:	f77f af79 	ble.w	801a904 <_printf_float+0x23c>
 801aa12:	2301      	movs	r3, #1
 801aa14:	465a      	mov	r2, fp
 801aa16:	4631      	mov	r1, r6
 801aa18:	4628      	mov	r0, r5
 801aa1a:	47b8      	blx	r7
 801aa1c:	3001      	adds	r0, #1
 801aa1e:	f43f aeae 	beq.w	801a77e <_printf_float+0xb6>
 801aa22:	f108 0801 	add.w	r8, r8, #1
 801aa26:	e7ec      	b.n	801aa02 <_printf_float+0x33a>
 801aa28:	4642      	mov	r2, r8
 801aa2a:	4631      	mov	r1, r6
 801aa2c:	4628      	mov	r0, r5
 801aa2e:	47b8      	blx	r7
 801aa30:	3001      	adds	r0, #1
 801aa32:	d1c2      	bne.n	801a9ba <_printf_float+0x2f2>
 801aa34:	e6a3      	b.n	801a77e <_printf_float+0xb6>
 801aa36:	2301      	movs	r3, #1
 801aa38:	4631      	mov	r1, r6
 801aa3a:	4628      	mov	r0, r5
 801aa3c:	9206      	str	r2, [sp, #24]
 801aa3e:	47b8      	blx	r7
 801aa40:	3001      	adds	r0, #1
 801aa42:	f43f ae9c 	beq.w	801a77e <_printf_float+0xb6>
 801aa46:	9a06      	ldr	r2, [sp, #24]
 801aa48:	f10b 0b01 	add.w	fp, fp, #1
 801aa4c:	e7bb      	b.n	801a9c6 <_printf_float+0x2fe>
 801aa4e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801aa52:	4631      	mov	r1, r6
 801aa54:	4628      	mov	r0, r5
 801aa56:	47b8      	blx	r7
 801aa58:	3001      	adds	r0, #1
 801aa5a:	d1c0      	bne.n	801a9de <_printf_float+0x316>
 801aa5c:	e68f      	b.n	801a77e <_printf_float+0xb6>
 801aa5e:	9a06      	ldr	r2, [sp, #24]
 801aa60:	464b      	mov	r3, r9
 801aa62:	4442      	add	r2, r8
 801aa64:	4631      	mov	r1, r6
 801aa66:	4628      	mov	r0, r5
 801aa68:	47b8      	blx	r7
 801aa6a:	3001      	adds	r0, #1
 801aa6c:	d1c3      	bne.n	801a9f6 <_printf_float+0x32e>
 801aa6e:	e686      	b.n	801a77e <_printf_float+0xb6>
 801aa70:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801aa74:	f1ba 0f01 	cmp.w	sl, #1
 801aa78:	dc01      	bgt.n	801aa7e <_printf_float+0x3b6>
 801aa7a:	07db      	lsls	r3, r3, #31
 801aa7c:	d536      	bpl.n	801aaec <_printf_float+0x424>
 801aa7e:	2301      	movs	r3, #1
 801aa80:	4642      	mov	r2, r8
 801aa82:	4631      	mov	r1, r6
 801aa84:	4628      	mov	r0, r5
 801aa86:	47b8      	blx	r7
 801aa88:	3001      	adds	r0, #1
 801aa8a:	f43f ae78 	beq.w	801a77e <_printf_float+0xb6>
 801aa8e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801aa92:	4631      	mov	r1, r6
 801aa94:	4628      	mov	r0, r5
 801aa96:	47b8      	blx	r7
 801aa98:	3001      	adds	r0, #1
 801aa9a:	f43f ae70 	beq.w	801a77e <_printf_float+0xb6>
 801aa9e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801aaa2:	2200      	movs	r2, #0
 801aaa4:	2300      	movs	r3, #0
 801aaa6:	f10a 3aff 	add.w	sl, sl, #4294967295
 801aaaa:	f7e5 ffe5 	bl	8000a78 <__aeabi_dcmpeq>
 801aaae:	b9c0      	cbnz	r0, 801aae2 <_printf_float+0x41a>
 801aab0:	4653      	mov	r3, sl
 801aab2:	f108 0201 	add.w	r2, r8, #1
 801aab6:	4631      	mov	r1, r6
 801aab8:	4628      	mov	r0, r5
 801aaba:	47b8      	blx	r7
 801aabc:	3001      	adds	r0, #1
 801aabe:	d10c      	bne.n	801aada <_printf_float+0x412>
 801aac0:	e65d      	b.n	801a77e <_printf_float+0xb6>
 801aac2:	2301      	movs	r3, #1
 801aac4:	465a      	mov	r2, fp
 801aac6:	4631      	mov	r1, r6
 801aac8:	4628      	mov	r0, r5
 801aaca:	47b8      	blx	r7
 801aacc:	3001      	adds	r0, #1
 801aace:	f43f ae56 	beq.w	801a77e <_printf_float+0xb6>
 801aad2:	f108 0801 	add.w	r8, r8, #1
 801aad6:	45d0      	cmp	r8, sl
 801aad8:	dbf3      	blt.n	801aac2 <_printf_float+0x3fa>
 801aada:	464b      	mov	r3, r9
 801aadc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 801aae0:	e6df      	b.n	801a8a2 <_printf_float+0x1da>
 801aae2:	f04f 0800 	mov.w	r8, #0
 801aae6:	f104 0b1a 	add.w	fp, r4, #26
 801aaea:	e7f4      	b.n	801aad6 <_printf_float+0x40e>
 801aaec:	2301      	movs	r3, #1
 801aaee:	4642      	mov	r2, r8
 801aaf0:	e7e1      	b.n	801aab6 <_printf_float+0x3ee>
 801aaf2:	2301      	movs	r3, #1
 801aaf4:	464a      	mov	r2, r9
 801aaf6:	4631      	mov	r1, r6
 801aaf8:	4628      	mov	r0, r5
 801aafa:	47b8      	blx	r7
 801aafc:	3001      	adds	r0, #1
 801aafe:	f43f ae3e 	beq.w	801a77e <_printf_float+0xb6>
 801ab02:	f108 0801 	add.w	r8, r8, #1
 801ab06:	68e3      	ldr	r3, [r4, #12]
 801ab08:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801ab0a:	1a5b      	subs	r3, r3, r1
 801ab0c:	4543      	cmp	r3, r8
 801ab0e:	dcf0      	bgt.n	801aaf2 <_printf_float+0x42a>
 801ab10:	e6fc      	b.n	801a90c <_printf_float+0x244>
 801ab12:	f04f 0800 	mov.w	r8, #0
 801ab16:	f104 0919 	add.w	r9, r4, #25
 801ab1a:	e7f4      	b.n	801ab06 <_printf_float+0x43e>

0801ab1c <_printf_common>:
 801ab1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ab20:	4616      	mov	r6, r2
 801ab22:	4698      	mov	r8, r3
 801ab24:	688a      	ldr	r2, [r1, #8]
 801ab26:	690b      	ldr	r3, [r1, #16]
 801ab28:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801ab2c:	4293      	cmp	r3, r2
 801ab2e:	bfb8      	it	lt
 801ab30:	4613      	movlt	r3, r2
 801ab32:	6033      	str	r3, [r6, #0]
 801ab34:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801ab38:	4607      	mov	r7, r0
 801ab3a:	460c      	mov	r4, r1
 801ab3c:	b10a      	cbz	r2, 801ab42 <_printf_common+0x26>
 801ab3e:	3301      	adds	r3, #1
 801ab40:	6033      	str	r3, [r6, #0]
 801ab42:	6823      	ldr	r3, [r4, #0]
 801ab44:	0699      	lsls	r1, r3, #26
 801ab46:	bf42      	ittt	mi
 801ab48:	6833      	ldrmi	r3, [r6, #0]
 801ab4a:	3302      	addmi	r3, #2
 801ab4c:	6033      	strmi	r3, [r6, #0]
 801ab4e:	6825      	ldr	r5, [r4, #0]
 801ab50:	f015 0506 	ands.w	r5, r5, #6
 801ab54:	d106      	bne.n	801ab64 <_printf_common+0x48>
 801ab56:	f104 0a19 	add.w	sl, r4, #25
 801ab5a:	68e3      	ldr	r3, [r4, #12]
 801ab5c:	6832      	ldr	r2, [r6, #0]
 801ab5e:	1a9b      	subs	r3, r3, r2
 801ab60:	42ab      	cmp	r3, r5
 801ab62:	dc26      	bgt.n	801abb2 <_printf_common+0x96>
 801ab64:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801ab68:	6822      	ldr	r2, [r4, #0]
 801ab6a:	3b00      	subs	r3, #0
 801ab6c:	bf18      	it	ne
 801ab6e:	2301      	movne	r3, #1
 801ab70:	0692      	lsls	r2, r2, #26
 801ab72:	d42b      	bmi.n	801abcc <_printf_common+0xb0>
 801ab74:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801ab78:	4641      	mov	r1, r8
 801ab7a:	4638      	mov	r0, r7
 801ab7c:	47c8      	blx	r9
 801ab7e:	3001      	adds	r0, #1
 801ab80:	d01e      	beq.n	801abc0 <_printf_common+0xa4>
 801ab82:	6823      	ldr	r3, [r4, #0]
 801ab84:	6922      	ldr	r2, [r4, #16]
 801ab86:	f003 0306 	and.w	r3, r3, #6
 801ab8a:	2b04      	cmp	r3, #4
 801ab8c:	bf02      	ittt	eq
 801ab8e:	68e5      	ldreq	r5, [r4, #12]
 801ab90:	6833      	ldreq	r3, [r6, #0]
 801ab92:	1aed      	subeq	r5, r5, r3
 801ab94:	68a3      	ldr	r3, [r4, #8]
 801ab96:	bf0c      	ite	eq
 801ab98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801ab9c:	2500      	movne	r5, #0
 801ab9e:	4293      	cmp	r3, r2
 801aba0:	bfc4      	itt	gt
 801aba2:	1a9b      	subgt	r3, r3, r2
 801aba4:	18ed      	addgt	r5, r5, r3
 801aba6:	2600      	movs	r6, #0
 801aba8:	341a      	adds	r4, #26
 801abaa:	42b5      	cmp	r5, r6
 801abac:	d11a      	bne.n	801abe4 <_printf_common+0xc8>
 801abae:	2000      	movs	r0, #0
 801abb0:	e008      	b.n	801abc4 <_printf_common+0xa8>
 801abb2:	2301      	movs	r3, #1
 801abb4:	4652      	mov	r2, sl
 801abb6:	4641      	mov	r1, r8
 801abb8:	4638      	mov	r0, r7
 801abba:	47c8      	blx	r9
 801abbc:	3001      	adds	r0, #1
 801abbe:	d103      	bne.n	801abc8 <_printf_common+0xac>
 801abc0:	f04f 30ff 	mov.w	r0, #4294967295
 801abc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801abc8:	3501      	adds	r5, #1
 801abca:	e7c6      	b.n	801ab5a <_printf_common+0x3e>
 801abcc:	18e1      	adds	r1, r4, r3
 801abce:	1c5a      	adds	r2, r3, #1
 801abd0:	2030      	movs	r0, #48	@ 0x30
 801abd2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801abd6:	4422      	add	r2, r4
 801abd8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801abdc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801abe0:	3302      	adds	r3, #2
 801abe2:	e7c7      	b.n	801ab74 <_printf_common+0x58>
 801abe4:	2301      	movs	r3, #1
 801abe6:	4622      	mov	r2, r4
 801abe8:	4641      	mov	r1, r8
 801abea:	4638      	mov	r0, r7
 801abec:	47c8      	blx	r9
 801abee:	3001      	adds	r0, #1
 801abf0:	d0e6      	beq.n	801abc0 <_printf_common+0xa4>
 801abf2:	3601      	adds	r6, #1
 801abf4:	e7d9      	b.n	801abaa <_printf_common+0x8e>
	...

0801abf8 <_printf_i>:
 801abf8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801abfc:	7e0f      	ldrb	r7, [r1, #24]
 801abfe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801ac00:	2f78      	cmp	r7, #120	@ 0x78
 801ac02:	4691      	mov	r9, r2
 801ac04:	4680      	mov	r8, r0
 801ac06:	460c      	mov	r4, r1
 801ac08:	469a      	mov	sl, r3
 801ac0a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801ac0e:	d807      	bhi.n	801ac20 <_printf_i+0x28>
 801ac10:	2f62      	cmp	r7, #98	@ 0x62
 801ac12:	d80a      	bhi.n	801ac2a <_printf_i+0x32>
 801ac14:	2f00      	cmp	r7, #0
 801ac16:	f000 80d2 	beq.w	801adbe <_printf_i+0x1c6>
 801ac1a:	2f58      	cmp	r7, #88	@ 0x58
 801ac1c:	f000 80b9 	beq.w	801ad92 <_printf_i+0x19a>
 801ac20:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801ac24:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801ac28:	e03a      	b.n	801aca0 <_printf_i+0xa8>
 801ac2a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801ac2e:	2b15      	cmp	r3, #21
 801ac30:	d8f6      	bhi.n	801ac20 <_printf_i+0x28>
 801ac32:	a101      	add	r1, pc, #4	@ (adr r1, 801ac38 <_printf_i+0x40>)
 801ac34:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801ac38:	0801ac91 	.word	0x0801ac91
 801ac3c:	0801aca5 	.word	0x0801aca5
 801ac40:	0801ac21 	.word	0x0801ac21
 801ac44:	0801ac21 	.word	0x0801ac21
 801ac48:	0801ac21 	.word	0x0801ac21
 801ac4c:	0801ac21 	.word	0x0801ac21
 801ac50:	0801aca5 	.word	0x0801aca5
 801ac54:	0801ac21 	.word	0x0801ac21
 801ac58:	0801ac21 	.word	0x0801ac21
 801ac5c:	0801ac21 	.word	0x0801ac21
 801ac60:	0801ac21 	.word	0x0801ac21
 801ac64:	0801ada5 	.word	0x0801ada5
 801ac68:	0801accf 	.word	0x0801accf
 801ac6c:	0801ad5f 	.word	0x0801ad5f
 801ac70:	0801ac21 	.word	0x0801ac21
 801ac74:	0801ac21 	.word	0x0801ac21
 801ac78:	0801adc7 	.word	0x0801adc7
 801ac7c:	0801ac21 	.word	0x0801ac21
 801ac80:	0801accf 	.word	0x0801accf
 801ac84:	0801ac21 	.word	0x0801ac21
 801ac88:	0801ac21 	.word	0x0801ac21
 801ac8c:	0801ad67 	.word	0x0801ad67
 801ac90:	6833      	ldr	r3, [r6, #0]
 801ac92:	1d1a      	adds	r2, r3, #4
 801ac94:	681b      	ldr	r3, [r3, #0]
 801ac96:	6032      	str	r2, [r6, #0]
 801ac98:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801ac9c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801aca0:	2301      	movs	r3, #1
 801aca2:	e09d      	b.n	801ade0 <_printf_i+0x1e8>
 801aca4:	6833      	ldr	r3, [r6, #0]
 801aca6:	6820      	ldr	r0, [r4, #0]
 801aca8:	1d19      	adds	r1, r3, #4
 801acaa:	6031      	str	r1, [r6, #0]
 801acac:	0606      	lsls	r6, r0, #24
 801acae:	d501      	bpl.n	801acb4 <_printf_i+0xbc>
 801acb0:	681d      	ldr	r5, [r3, #0]
 801acb2:	e003      	b.n	801acbc <_printf_i+0xc4>
 801acb4:	0645      	lsls	r5, r0, #25
 801acb6:	d5fb      	bpl.n	801acb0 <_printf_i+0xb8>
 801acb8:	f9b3 5000 	ldrsh.w	r5, [r3]
 801acbc:	2d00      	cmp	r5, #0
 801acbe:	da03      	bge.n	801acc8 <_printf_i+0xd0>
 801acc0:	232d      	movs	r3, #45	@ 0x2d
 801acc2:	426d      	negs	r5, r5
 801acc4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801acc8:	4859      	ldr	r0, [pc, #356]	@ (801ae30 <_printf_i+0x238>)
 801acca:	230a      	movs	r3, #10
 801accc:	e011      	b.n	801acf2 <_printf_i+0xfa>
 801acce:	6821      	ldr	r1, [r4, #0]
 801acd0:	6833      	ldr	r3, [r6, #0]
 801acd2:	0608      	lsls	r0, r1, #24
 801acd4:	f853 5b04 	ldr.w	r5, [r3], #4
 801acd8:	d402      	bmi.n	801ace0 <_printf_i+0xe8>
 801acda:	0649      	lsls	r1, r1, #25
 801acdc:	bf48      	it	mi
 801acde:	b2ad      	uxthmi	r5, r5
 801ace0:	2f6f      	cmp	r7, #111	@ 0x6f
 801ace2:	4853      	ldr	r0, [pc, #332]	@ (801ae30 <_printf_i+0x238>)
 801ace4:	6033      	str	r3, [r6, #0]
 801ace6:	bf14      	ite	ne
 801ace8:	230a      	movne	r3, #10
 801acea:	2308      	moveq	r3, #8
 801acec:	2100      	movs	r1, #0
 801acee:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801acf2:	6866      	ldr	r6, [r4, #4]
 801acf4:	60a6      	str	r6, [r4, #8]
 801acf6:	2e00      	cmp	r6, #0
 801acf8:	bfa2      	ittt	ge
 801acfa:	6821      	ldrge	r1, [r4, #0]
 801acfc:	f021 0104 	bicge.w	r1, r1, #4
 801ad00:	6021      	strge	r1, [r4, #0]
 801ad02:	b90d      	cbnz	r5, 801ad08 <_printf_i+0x110>
 801ad04:	2e00      	cmp	r6, #0
 801ad06:	d04b      	beq.n	801ada0 <_printf_i+0x1a8>
 801ad08:	4616      	mov	r6, r2
 801ad0a:	fbb5 f1f3 	udiv	r1, r5, r3
 801ad0e:	fb03 5711 	mls	r7, r3, r1, r5
 801ad12:	5dc7      	ldrb	r7, [r0, r7]
 801ad14:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801ad18:	462f      	mov	r7, r5
 801ad1a:	42bb      	cmp	r3, r7
 801ad1c:	460d      	mov	r5, r1
 801ad1e:	d9f4      	bls.n	801ad0a <_printf_i+0x112>
 801ad20:	2b08      	cmp	r3, #8
 801ad22:	d10b      	bne.n	801ad3c <_printf_i+0x144>
 801ad24:	6823      	ldr	r3, [r4, #0]
 801ad26:	07df      	lsls	r7, r3, #31
 801ad28:	d508      	bpl.n	801ad3c <_printf_i+0x144>
 801ad2a:	6923      	ldr	r3, [r4, #16]
 801ad2c:	6861      	ldr	r1, [r4, #4]
 801ad2e:	4299      	cmp	r1, r3
 801ad30:	bfde      	ittt	le
 801ad32:	2330      	movle	r3, #48	@ 0x30
 801ad34:	f806 3c01 	strble.w	r3, [r6, #-1]
 801ad38:	f106 36ff 	addle.w	r6, r6, #4294967295
 801ad3c:	1b92      	subs	r2, r2, r6
 801ad3e:	6122      	str	r2, [r4, #16]
 801ad40:	f8cd a000 	str.w	sl, [sp]
 801ad44:	464b      	mov	r3, r9
 801ad46:	aa03      	add	r2, sp, #12
 801ad48:	4621      	mov	r1, r4
 801ad4a:	4640      	mov	r0, r8
 801ad4c:	f7ff fee6 	bl	801ab1c <_printf_common>
 801ad50:	3001      	adds	r0, #1
 801ad52:	d14a      	bne.n	801adea <_printf_i+0x1f2>
 801ad54:	f04f 30ff 	mov.w	r0, #4294967295
 801ad58:	b004      	add	sp, #16
 801ad5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ad5e:	6823      	ldr	r3, [r4, #0]
 801ad60:	f043 0320 	orr.w	r3, r3, #32
 801ad64:	6023      	str	r3, [r4, #0]
 801ad66:	4833      	ldr	r0, [pc, #204]	@ (801ae34 <_printf_i+0x23c>)
 801ad68:	2778      	movs	r7, #120	@ 0x78
 801ad6a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801ad6e:	6823      	ldr	r3, [r4, #0]
 801ad70:	6831      	ldr	r1, [r6, #0]
 801ad72:	061f      	lsls	r7, r3, #24
 801ad74:	f851 5b04 	ldr.w	r5, [r1], #4
 801ad78:	d402      	bmi.n	801ad80 <_printf_i+0x188>
 801ad7a:	065f      	lsls	r7, r3, #25
 801ad7c:	bf48      	it	mi
 801ad7e:	b2ad      	uxthmi	r5, r5
 801ad80:	6031      	str	r1, [r6, #0]
 801ad82:	07d9      	lsls	r1, r3, #31
 801ad84:	bf44      	itt	mi
 801ad86:	f043 0320 	orrmi.w	r3, r3, #32
 801ad8a:	6023      	strmi	r3, [r4, #0]
 801ad8c:	b11d      	cbz	r5, 801ad96 <_printf_i+0x19e>
 801ad8e:	2310      	movs	r3, #16
 801ad90:	e7ac      	b.n	801acec <_printf_i+0xf4>
 801ad92:	4827      	ldr	r0, [pc, #156]	@ (801ae30 <_printf_i+0x238>)
 801ad94:	e7e9      	b.n	801ad6a <_printf_i+0x172>
 801ad96:	6823      	ldr	r3, [r4, #0]
 801ad98:	f023 0320 	bic.w	r3, r3, #32
 801ad9c:	6023      	str	r3, [r4, #0]
 801ad9e:	e7f6      	b.n	801ad8e <_printf_i+0x196>
 801ada0:	4616      	mov	r6, r2
 801ada2:	e7bd      	b.n	801ad20 <_printf_i+0x128>
 801ada4:	6833      	ldr	r3, [r6, #0]
 801ada6:	6825      	ldr	r5, [r4, #0]
 801ada8:	6961      	ldr	r1, [r4, #20]
 801adaa:	1d18      	adds	r0, r3, #4
 801adac:	6030      	str	r0, [r6, #0]
 801adae:	062e      	lsls	r6, r5, #24
 801adb0:	681b      	ldr	r3, [r3, #0]
 801adb2:	d501      	bpl.n	801adb8 <_printf_i+0x1c0>
 801adb4:	6019      	str	r1, [r3, #0]
 801adb6:	e002      	b.n	801adbe <_printf_i+0x1c6>
 801adb8:	0668      	lsls	r0, r5, #25
 801adba:	d5fb      	bpl.n	801adb4 <_printf_i+0x1bc>
 801adbc:	8019      	strh	r1, [r3, #0]
 801adbe:	2300      	movs	r3, #0
 801adc0:	6123      	str	r3, [r4, #16]
 801adc2:	4616      	mov	r6, r2
 801adc4:	e7bc      	b.n	801ad40 <_printf_i+0x148>
 801adc6:	6833      	ldr	r3, [r6, #0]
 801adc8:	1d1a      	adds	r2, r3, #4
 801adca:	6032      	str	r2, [r6, #0]
 801adcc:	681e      	ldr	r6, [r3, #0]
 801adce:	6862      	ldr	r2, [r4, #4]
 801add0:	2100      	movs	r1, #0
 801add2:	4630      	mov	r0, r6
 801add4:	f7e5 f9d4 	bl	8000180 <memchr>
 801add8:	b108      	cbz	r0, 801adde <_printf_i+0x1e6>
 801adda:	1b80      	subs	r0, r0, r6
 801addc:	6060      	str	r0, [r4, #4]
 801adde:	6863      	ldr	r3, [r4, #4]
 801ade0:	6123      	str	r3, [r4, #16]
 801ade2:	2300      	movs	r3, #0
 801ade4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801ade8:	e7aa      	b.n	801ad40 <_printf_i+0x148>
 801adea:	6923      	ldr	r3, [r4, #16]
 801adec:	4632      	mov	r2, r6
 801adee:	4649      	mov	r1, r9
 801adf0:	4640      	mov	r0, r8
 801adf2:	47d0      	blx	sl
 801adf4:	3001      	adds	r0, #1
 801adf6:	d0ad      	beq.n	801ad54 <_printf_i+0x15c>
 801adf8:	6823      	ldr	r3, [r4, #0]
 801adfa:	079b      	lsls	r3, r3, #30
 801adfc:	d413      	bmi.n	801ae26 <_printf_i+0x22e>
 801adfe:	68e0      	ldr	r0, [r4, #12]
 801ae00:	9b03      	ldr	r3, [sp, #12]
 801ae02:	4298      	cmp	r0, r3
 801ae04:	bfb8      	it	lt
 801ae06:	4618      	movlt	r0, r3
 801ae08:	e7a6      	b.n	801ad58 <_printf_i+0x160>
 801ae0a:	2301      	movs	r3, #1
 801ae0c:	4632      	mov	r2, r6
 801ae0e:	4649      	mov	r1, r9
 801ae10:	4640      	mov	r0, r8
 801ae12:	47d0      	blx	sl
 801ae14:	3001      	adds	r0, #1
 801ae16:	d09d      	beq.n	801ad54 <_printf_i+0x15c>
 801ae18:	3501      	adds	r5, #1
 801ae1a:	68e3      	ldr	r3, [r4, #12]
 801ae1c:	9903      	ldr	r1, [sp, #12]
 801ae1e:	1a5b      	subs	r3, r3, r1
 801ae20:	42ab      	cmp	r3, r5
 801ae22:	dcf2      	bgt.n	801ae0a <_printf_i+0x212>
 801ae24:	e7eb      	b.n	801adfe <_printf_i+0x206>
 801ae26:	2500      	movs	r5, #0
 801ae28:	f104 0619 	add.w	r6, r4, #25
 801ae2c:	e7f5      	b.n	801ae1a <_printf_i+0x222>
 801ae2e:	bf00      	nop
 801ae30:	0802256b 	.word	0x0802256b
 801ae34:	0802257c 	.word	0x0802257c

0801ae38 <_scanf_float>:
 801ae38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ae3c:	b087      	sub	sp, #28
 801ae3e:	4617      	mov	r7, r2
 801ae40:	9303      	str	r3, [sp, #12]
 801ae42:	688b      	ldr	r3, [r1, #8]
 801ae44:	1e5a      	subs	r2, r3, #1
 801ae46:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 801ae4a:	bf81      	itttt	hi
 801ae4c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 801ae50:	eb03 0b05 	addhi.w	fp, r3, r5
 801ae54:	f240 135d 	movwhi	r3, #349	@ 0x15d
 801ae58:	608b      	strhi	r3, [r1, #8]
 801ae5a:	680b      	ldr	r3, [r1, #0]
 801ae5c:	460a      	mov	r2, r1
 801ae5e:	f04f 0500 	mov.w	r5, #0
 801ae62:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 801ae66:	f842 3b1c 	str.w	r3, [r2], #28
 801ae6a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801ae6e:	4680      	mov	r8, r0
 801ae70:	460c      	mov	r4, r1
 801ae72:	bf98      	it	ls
 801ae74:	f04f 0b00 	movls.w	fp, #0
 801ae78:	9201      	str	r2, [sp, #4]
 801ae7a:	4616      	mov	r6, r2
 801ae7c:	46aa      	mov	sl, r5
 801ae7e:	46a9      	mov	r9, r5
 801ae80:	9502      	str	r5, [sp, #8]
 801ae82:	68a2      	ldr	r2, [r4, #8]
 801ae84:	b152      	cbz	r2, 801ae9c <_scanf_float+0x64>
 801ae86:	683b      	ldr	r3, [r7, #0]
 801ae88:	781b      	ldrb	r3, [r3, #0]
 801ae8a:	2b4e      	cmp	r3, #78	@ 0x4e
 801ae8c:	d864      	bhi.n	801af58 <_scanf_float+0x120>
 801ae8e:	2b40      	cmp	r3, #64	@ 0x40
 801ae90:	d83c      	bhi.n	801af0c <_scanf_float+0xd4>
 801ae92:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 801ae96:	b2c8      	uxtb	r0, r1
 801ae98:	280e      	cmp	r0, #14
 801ae9a:	d93a      	bls.n	801af12 <_scanf_float+0xda>
 801ae9c:	f1b9 0f00 	cmp.w	r9, #0
 801aea0:	d003      	beq.n	801aeaa <_scanf_float+0x72>
 801aea2:	6823      	ldr	r3, [r4, #0]
 801aea4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801aea8:	6023      	str	r3, [r4, #0]
 801aeaa:	f10a 3aff 	add.w	sl, sl, #4294967295
 801aeae:	f1ba 0f01 	cmp.w	sl, #1
 801aeb2:	f200 8117 	bhi.w	801b0e4 <_scanf_float+0x2ac>
 801aeb6:	9b01      	ldr	r3, [sp, #4]
 801aeb8:	429e      	cmp	r6, r3
 801aeba:	f200 8108 	bhi.w	801b0ce <_scanf_float+0x296>
 801aebe:	2001      	movs	r0, #1
 801aec0:	b007      	add	sp, #28
 801aec2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aec6:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 801aeca:	2a0d      	cmp	r2, #13
 801aecc:	d8e6      	bhi.n	801ae9c <_scanf_float+0x64>
 801aece:	a101      	add	r1, pc, #4	@ (adr r1, 801aed4 <_scanf_float+0x9c>)
 801aed0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801aed4:	0801b01b 	.word	0x0801b01b
 801aed8:	0801ae9d 	.word	0x0801ae9d
 801aedc:	0801ae9d 	.word	0x0801ae9d
 801aee0:	0801ae9d 	.word	0x0801ae9d
 801aee4:	0801b07b 	.word	0x0801b07b
 801aee8:	0801b053 	.word	0x0801b053
 801aeec:	0801ae9d 	.word	0x0801ae9d
 801aef0:	0801ae9d 	.word	0x0801ae9d
 801aef4:	0801b029 	.word	0x0801b029
 801aef8:	0801ae9d 	.word	0x0801ae9d
 801aefc:	0801ae9d 	.word	0x0801ae9d
 801af00:	0801ae9d 	.word	0x0801ae9d
 801af04:	0801ae9d 	.word	0x0801ae9d
 801af08:	0801afe1 	.word	0x0801afe1
 801af0c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 801af10:	e7db      	b.n	801aeca <_scanf_float+0x92>
 801af12:	290e      	cmp	r1, #14
 801af14:	d8c2      	bhi.n	801ae9c <_scanf_float+0x64>
 801af16:	a001      	add	r0, pc, #4	@ (adr r0, 801af1c <_scanf_float+0xe4>)
 801af18:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801af1c:	0801afd1 	.word	0x0801afd1
 801af20:	0801ae9d 	.word	0x0801ae9d
 801af24:	0801afd1 	.word	0x0801afd1
 801af28:	0801b067 	.word	0x0801b067
 801af2c:	0801ae9d 	.word	0x0801ae9d
 801af30:	0801af79 	.word	0x0801af79
 801af34:	0801afb7 	.word	0x0801afb7
 801af38:	0801afb7 	.word	0x0801afb7
 801af3c:	0801afb7 	.word	0x0801afb7
 801af40:	0801afb7 	.word	0x0801afb7
 801af44:	0801afb7 	.word	0x0801afb7
 801af48:	0801afb7 	.word	0x0801afb7
 801af4c:	0801afb7 	.word	0x0801afb7
 801af50:	0801afb7 	.word	0x0801afb7
 801af54:	0801afb7 	.word	0x0801afb7
 801af58:	2b6e      	cmp	r3, #110	@ 0x6e
 801af5a:	d809      	bhi.n	801af70 <_scanf_float+0x138>
 801af5c:	2b60      	cmp	r3, #96	@ 0x60
 801af5e:	d8b2      	bhi.n	801aec6 <_scanf_float+0x8e>
 801af60:	2b54      	cmp	r3, #84	@ 0x54
 801af62:	d07b      	beq.n	801b05c <_scanf_float+0x224>
 801af64:	2b59      	cmp	r3, #89	@ 0x59
 801af66:	d199      	bne.n	801ae9c <_scanf_float+0x64>
 801af68:	2d07      	cmp	r5, #7
 801af6a:	d197      	bne.n	801ae9c <_scanf_float+0x64>
 801af6c:	2508      	movs	r5, #8
 801af6e:	e02c      	b.n	801afca <_scanf_float+0x192>
 801af70:	2b74      	cmp	r3, #116	@ 0x74
 801af72:	d073      	beq.n	801b05c <_scanf_float+0x224>
 801af74:	2b79      	cmp	r3, #121	@ 0x79
 801af76:	e7f6      	b.n	801af66 <_scanf_float+0x12e>
 801af78:	6821      	ldr	r1, [r4, #0]
 801af7a:	05c8      	lsls	r0, r1, #23
 801af7c:	d51b      	bpl.n	801afb6 <_scanf_float+0x17e>
 801af7e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 801af82:	6021      	str	r1, [r4, #0]
 801af84:	f109 0901 	add.w	r9, r9, #1
 801af88:	f1bb 0f00 	cmp.w	fp, #0
 801af8c:	d003      	beq.n	801af96 <_scanf_float+0x15e>
 801af8e:	3201      	adds	r2, #1
 801af90:	f10b 3bff 	add.w	fp, fp, #4294967295
 801af94:	60a2      	str	r2, [r4, #8]
 801af96:	68a3      	ldr	r3, [r4, #8]
 801af98:	3b01      	subs	r3, #1
 801af9a:	60a3      	str	r3, [r4, #8]
 801af9c:	6923      	ldr	r3, [r4, #16]
 801af9e:	3301      	adds	r3, #1
 801afa0:	6123      	str	r3, [r4, #16]
 801afa2:	687b      	ldr	r3, [r7, #4]
 801afa4:	3b01      	subs	r3, #1
 801afa6:	2b00      	cmp	r3, #0
 801afa8:	607b      	str	r3, [r7, #4]
 801afaa:	f340 8087 	ble.w	801b0bc <_scanf_float+0x284>
 801afae:	683b      	ldr	r3, [r7, #0]
 801afb0:	3301      	adds	r3, #1
 801afb2:	603b      	str	r3, [r7, #0]
 801afb4:	e765      	b.n	801ae82 <_scanf_float+0x4a>
 801afb6:	eb1a 0105 	adds.w	r1, sl, r5
 801afba:	f47f af6f 	bne.w	801ae9c <_scanf_float+0x64>
 801afbe:	6822      	ldr	r2, [r4, #0]
 801afc0:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 801afc4:	6022      	str	r2, [r4, #0]
 801afc6:	460d      	mov	r5, r1
 801afc8:	468a      	mov	sl, r1
 801afca:	f806 3b01 	strb.w	r3, [r6], #1
 801afce:	e7e2      	b.n	801af96 <_scanf_float+0x15e>
 801afd0:	6822      	ldr	r2, [r4, #0]
 801afd2:	0610      	lsls	r0, r2, #24
 801afd4:	f57f af62 	bpl.w	801ae9c <_scanf_float+0x64>
 801afd8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 801afdc:	6022      	str	r2, [r4, #0]
 801afde:	e7f4      	b.n	801afca <_scanf_float+0x192>
 801afe0:	f1ba 0f00 	cmp.w	sl, #0
 801afe4:	d10e      	bne.n	801b004 <_scanf_float+0x1cc>
 801afe6:	f1b9 0f00 	cmp.w	r9, #0
 801afea:	d10e      	bne.n	801b00a <_scanf_float+0x1d2>
 801afec:	6822      	ldr	r2, [r4, #0]
 801afee:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 801aff2:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 801aff6:	d108      	bne.n	801b00a <_scanf_float+0x1d2>
 801aff8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801affc:	6022      	str	r2, [r4, #0]
 801affe:	f04f 0a01 	mov.w	sl, #1
 801b002:	e7e2      	b.n	801afca <_scanf_float+0x192>
 801b004:	f1ba 0f02 	cmp.w	sl, #2
 801b008:	d055      	beq.n	801b0b6 <_scanf_float+0x27e>
 801b00a:	2d01      	cmp	r5, #1
 801b00c:	d002      	beq.n	801b014 <_scanf_float+0x1dc>
 801b00e:	2d04      	cmp	r5, #4
 801b010:	f47f af44 	bne.w	801ae9c <_scanf_float+0x64>
 801b014:	3501      	adds	r5, #1
 801b016:	b2ed      	uxtb	r5, r5
 801b018:	e7d7      	b.n	801afca <_scanf_float+0x192>
 801b01a:	f1ba 0f01 	cmp.w	sl, #1
 801b01e:	f47f af3d 	bne.w	801ae9c <_scanf_float+0x64>
 801b022:	f04f 0a02 	mov.w	sl, #2
 801b026:	e7d0      	b.n	801afca <_scanf_float+0x192>
 801b028:	b97d      	cbnz	r5, 801b04a <_scanf_float+0x212>
 801b02a:	f1b9 0f00 	cmp.w	r9, #0
 801b02e:	f47f af38 	bne.w	801aea2 <_scanf_float+0x6a>
 801b032:	6822      	ldr	r2, [r4, #0]
 801b034:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 801b038:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 801b03c:	f040 8108 	bne.w	801b250 <_scanf_float+0x418>
 801b040:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801b044:	6022      	str	r2, [r4, #0]
 801b046:	2501      	movs	r5, #1
 801b048:	e7bf      	b.n	801afca <_scanf_float+0x192>
 801b04a:	2d03      	cmp	r5, #3
 801b04c:	d0e2      	beq.n	801b014 <_scanf_float+0x1dc>
 801b04e:	2d05      	cmp	r5, #5
 801b050:	e7de      	b.n	801b010 <_scanf_float+0x1d8>
 801b052:	2d02      	cmp	r5, #2
 801b054:	f47f af22 	bne.w	801ae9c <_scanf_float+0x64>
 801b058:	2503      	movs	r5, #3
 801b05a:	e7b6      	b.n	801afca <_scanf_float+0x192>
 801b05c:	2d06      	cmp	r5, #6
 801b05e:	f47f af1d 	bne.w	801ae9c <_scanf_float+0x64>
 801b062:	2507      	movs	r5, #7
 801b064:	e7b1      	b.n	801afca <_scanf_float+0x192>
 801b066:	6822      	ldr	r2, [r4, #0]
 801b068:	0591      	lsls	r1, r2, #22
 801b06a:	f57f af17 	bpl.w	801ae9c <_scanf_float+0x64>
 801b06e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 801b072:	6022      	str	r2, [r4, #0]
 801b074:	f8cd 9008 	str.w	r9, [sp, #8]
 801b078:	e7a7      	b.n	801afca <_scanf_float+0x192>
 801b07a:	6822      	ldr	r2, [r4, #0]
 801b07c:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 801b080:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 801b084:	d006      	beq.n	801b094 <_scanf_float+0x25c>
 801b086:	0550      	lsls	r0, r2, #21
 801b088:	f57f af08 	bpl.w	801ae9c <_scanf_float+0x64>
 801b08c:	f1b9 0f00 	cmp.w	r9, #0
 801b090:	f000 80de 	beq.w	801b250 <_scanf_float+0x418>
 801b094:	0591      	lsls	r1, r2, #22
 801b096:	bf58      	it	pl
 801b098:	9902      	ldrpl	r1, [sp, #8]
 801b09a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801b09e:	bf58      	it	pl
 801b0a0:	eba9 0101 	subpl.w	r1, r9, r1
 801b0a4:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 801b0a8:	bf58      	it	pl
 801b0aa:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801b0ae:	6022      	str	r2, [r4, #0]
 801b0b0:	f04f 0900 	mov.w	r9, #0
 801b0b4:	e789      	b.n	801afca <_scanf_float+0x192>
 801b0b6:	f04f 0a03 	mov.w	sl, #3
 801b0ba:	e786      	b.n	801afca <_scanf_float+0x192>
 801b0bc:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 801b0c0:	4639      	mov	r1, r7
 801b0c2:	4640      	mov	r0, r8
 801b0c4:	4798      	blx	r3
 801b0c6:	2800      	cmp	r0, #0
 801b0c8:	f43f aedb 	beq.w	801ae82 <_scanf_float+0x4a>
 801b0cc:	e6e6      	b.n	801ae9c <_scanf_float+0x64>
 801b0ce:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801b0d2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801b0d6:	463a      	mov	r2, r7
 801b0d8:	4640      	mov	r0, r8
 801b0da:	4798      	blx	r3
 801b0dc:	6923      	ldr	r3, [r4, #16]
 801b0de:	3b01      	subs	r3, #1
 801b0e0:	6123      	str	r3, [r4, #16]
 801b0e2:	e6e8      	b.n	801aeb6 <_scanf_float+0x7e>
 801b0e4:	1e6b      	subs	r3, r5, #1
 801b0e6:	2b06      	cmp	r3, #6
 801b0e8:	d824      	bhi.n	801b134 <_scanf_float+0x2fc>
 801b0ea:	2d02      	cmp	r5, #2
 801b0ec:	d836      	bhi.n	801b15c <_scanf_float+0x324>
 801b0ee:	9b01      	ldr	r3, [sp, #4]
 801b0f0:	429e      	cmp	r6, r3
 801b0f2:	f67f aee4 	bls.w	801aebe <_scanf_float+0x86>
 801b0f6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801b0fa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801b0fe:	463a      	mov	r2, r7
 801b100:	4640      	mov	r0, r8
 801b102:	4798      	blx	r3
 801b104:	6923      	ldr	r3, [r4, #16]
 801b106:	3b01      	subs	r3, #1
 801b108:	6123      	str	r3, [r4, #16]
 801b10a:	e7f0      	b.n	801b0ee <_scanf_float+0x2b6>
 801b10c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801b110:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 801b114:	463a      	mov	r2, r7
 801b116:	4640      	mov	r0, r8
 801b118:	4798      	blx	r3
 801b11a:	6923      	ldr	r3, [r4, #16]
 801b11c:	3b01      	subs	r3, #1
 801b11e:	6123      	str	r3, [r4, #16]
 801b120:	f10a 3aff 	add.w	sl, sl, #4294967295
 801b124:	fa5f fa8a 	uxtb.w	sl, sl
 801b128:	f1ba 0f02 	cmp.w	sl, #2
 801b12c:	d1ee      	bne.n	801b10c <_scanf_float+0x2d4>
 801b12e:	3d03      	subs	r5, #3
 801b130:	b2ed      	uxtb	r5, r5
 801b132:	1b76      	subs	r6, r6, r5
 801b134:	6823      	ldr	r3, [r4, #0]
 801b136:	05da      	lsls	r2, r3, #23
 801b138:	d530      	bpl.n	801b19c <_scanf_float+0x364>
 801b13a:	055b      	lsls	r3, r3, #21
 801b13c:	d511      	bpl.n	801b162 <_scanf_float+0x32a>
 801b13e:	9b01      	ldr	r3, [sp, #4]
 801b140:	429e      	cmp	r6, r3
 801b142:	f67f aebc 	bls.w	801aebe <_scanf_float+0x86>
 801b146:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801b14a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801b14e:	463a      	mov	r2, r7
 801b150:	4640      	mov	r0, r8
 801b152:	4798      	blx	r3
 801b154:	6923      	ldr	r3, [r4, #16]
 801b156:	3b01      	subs	r3, #1
 801b158:	6123      	str	r3, [r4, #16]
 801b15a:	e7f0      	b.n	801b13e <_scanf_float+0x306>
 801b15c:	46aa      	mov	sl, r5
 801b15e:	46b3      	mov	fp, r6
 801b160:	e7de      	b.n	801b120 <_scanf_float+0x2e8>
 801b162:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801b166:	6923      	ldr	r3, [r4, #16]
 801b168:	2965      	cmp	r1, #101	@ 0x65
 801b16a:	f103 33ff 	add.w	r3, r3, #4294967295
 801b16e:	f106 35ff 	add.w	r5, r6, #4294967295
 801b172:	6123      	str	r3, [r4, #16]
 801b174:	d00c      	beq.n	801b190 <_scanf_float+0x358>
 801b176:	2945      	cmp	r1, #69	@ 0x45
 801b178:	d00a      	beq.n	801b190 <_scanf_float+0x358>
 801b17a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801b17e:	463a      	mov	r2, r7
 801b180:	4640      	mov	r0, r8
 801b182:	4798      	blx	r3
 801b184:	6923      	ldr	r3, [r4, #16]
 801b186:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801b18a:	3b01      	subs	r3, #1
 801b18c:	1eb5      	subs	r5, r6, #2
 801b18e:	6123      	str	r3, [r4, #16]
 801b190:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801b194:	463a      	mov	r2, r7
 801b196:	4640      	mov	r0, r8
 801b198:	4798      	blx	r3
 801b19a:	462e      	mov	r6, r5
 801b19c:	6822      	ldr	r2, [r4, #0]
 801b19e:	f012 0210 	ands.w	r2, r2, #16
 801b1a2:	d001      	beq.n	801b1a8 <_scanf_float+0x370>
 801b1a4:	2000      	movs	r0, #0
 801b1a6:	e68b      	b.n	801aec0 <_scanf_float+0x88>
 801b1a8:	7032      	strb	r2, [r6, #0]
 801b1aa:	6823      	ldr	r3, [r4, #0]
 801b1ac:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 801b1b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801b1b4:	d11c      	bne.n	801b1f0 <_scanf_float+0x3b8>
 801b1b6:	9b02      	ldr	r3, [sp, #8]
 801b1b8:	454b      	cmp	r3, r9
 801b1ba:	eba3 0209 	sub.w	r2, r3, r9
 801b1be:	d123      	bne.n	801b208 <_scanf_float+0x3d0>
 801b1c0:	9901      	ldr	r1, [sp, #4]
 801b1c2:	2200      	movs	r2, #0
 801b1c4:	4640      	mov	r0, r8
 801b1c6:	f7ff f8ef 	bl	801a3a8 <_strtod_r>
 801b1ca:	9b03      	ldr	r3, [sp, #12]
 801b1cc:	6821      	ldr	r1, [r4, #0]
 801b1ce:	681b      	ldr	r3, [r3, #0]
 801b1d0:	f011 0f02 	tst.w	r1, #2
 801b1d4:	ec57 6b10 	vmov	r6, r7, d0
 801b1d8:	f103 0204 	add.w	r2, r3, #4
 801b1dc:	d01f      	beq.n	801b21e <_scanf_float+0x3e6>
 801b1de:	9903      	ldr	r1, [sp, #12]
 801b1e0:	600a      	str	r2, [r1, #0]
 801b1e2:	681b      	ldr	r3, [r3, #0]
 801b1e4:	e9c3 6700 	strd	r6, r7, [r3]
 801b1e8:	68e3      	ldr	r3, [r4, #12]
 801b1ea:	3301      	adds	r3, #1
 801b1ec:	60e3      	str	r3, [r4, #12]
 801b1ee:	e7d9      	b.n	801b1a4 <_scanf_float+0x36c>
 801b1f0:	9b04      	ldr	r3, [sp, #16]
 801b1f2:	2b00      	cmp	r3, #0
 801b1f4:	d0e4      	beq.n	801b1c0 <_scanf_float+0x388>
 801b1f6:	9905      	ldr	r1, [sp, #20]
 801b1f8:	230a      	movs	r3, #10
 801b1fa:	3101      	adds	r1, #1
 801b1fc:	4640      	mov	r0, r8
 801b1fe:	f7ff f9b7 	bl	801a570 <_strtol_r>
 801b202:	9b04      	ldr	r3, [sp, #16]
 801b204:	9e05      	ldr	r6, [sp, #20]
 801b206:	1ac2      	subs	r2, r0, r3
 801b208:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 801b20c:	429e      	cmp	r6, r3
 801b20e:	bf28      	it	cs
 801b210:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 801b214:	4910      	ldr	r1, [pc, #64]	@ (801b258 <_scanf_float+0x420>)
 801b216:	4630      	mov	r0, r6
 801b218:	f000 f918 	bl	801b44c <siprintf>
 801b21c:	e7d0      	b.n	801b1c0 <_scanf_float+0x388>
 801b21e:	f011 0f04 	tst.w	r1, #4
 801b222:	9903      	ldr	r1, [sp, #12]
 801b224:	600a      	str	r2, [r1, #0]
 801b226:	d1dc      	bne.n	801b1e2 <_scanf_float+0x3aa>
 801b228:	681d      	ldr	r5, [r3, #0]
 801b22a:	4632      	mov	r2, r6
 801b22c:	463b      	mov	r3, r7
 801b22e:	4630      	mov	r0, r6
 801b230:	4639      	mov	r1, r7
 801b232:	f7e5 fc53 	bl	8000adc <__aeabi_dcmpun>
 801b236:	b128      	cbz	r0, 801b244 <_scanf_float+0x40c>
 801b238:	4808      	ldr	r0, [pc, #32]	@ (801b25c <_scanf_float+0x424>)
 801b23a:	f000 fa9d 	bl	801b778 <nanf>
 801b23e:	ed85 0a00 	vstr	s0, [r5]
 801b242:	e7d1      	b.n	801b1e8 <_scanf_float+0x3b0>
 801b244:	4630      	mov	r0, r6
 801b246:	4639      	mov	r1, r7
 801b248:	f7e5 fca6 	bl	8000b98 <__aeabi_d2f>
 801b24c:	6028      	str	r0, [r5, #0]
 801b24e:	e7cb      	b.n	801b1e8 <_scanf_float+0x3b0>
 801b250:	f04f 0900 	mov.w	r9, #0
 801b254:	e629      	b.n	801aeaa <_scanf_float+0x72>
 801b256:	bf00      	nop
 801b258:	0802258d 	.word	0x0802258d
 801b25c:	08022646 	.word	0x08022646

0801b260 <std>:
 801b260:	2300      	movs	r3, #0
 801b262:	b510      	push	{r4, lr}
 801b264:	4604      	mov	r4, r0
 801b266:	e9c0 3300 	strd	r3, r3, [r0]
 801b26a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801b26e:	6083      	str	r3, [r0, #8]
 801b270:	8181      	strh	r1, [r0, #12]
 801b272:	6643      	str	r3, [r0, #100]	@ 0x64
 801b274:	81c2      	strh	r2, [r0, #14]
 801b276:	6183      	str	r3, [r0, #24]
 801b278:	4619      	mov	r1, r3
 801b27a:	2208      	movs	r2, #8
 801b27c:	305c      	adds	r0, #92	@ 0x5c
 801b27e:	f000 f948 	bl	801b512 <memset>
 801b282:	4b0d      	ldr	r3, [pc, #52]	@ (801b2b8 <std+0x58>)
 801b284:	6263      	str	r3, [r4, #36]	@ 0x24
 801b286:	4b0d      	ldr	r3, [pc, #52]	@ (801b2bc <std+0x5c>)
 801b288:	62a3      	str	r3, [r4, #40]	@ 0x28
 801b28a:	4b0d      	ldr	r3, [pc, #52]	@ (801b2c0 <std+0x60>)
 801b28c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801b28e:	4b0d      	ldr	r3, [pc, #52]	@ (801b2c4 <std+0x64>)
 801b290:	6323      	str	r3, [r4, #48]	@ 0x30
 801b292:	4b0d      	ldr	r3, [pc, #52]	@ (801b2c8 <std+0x68>)
 801b294:	6224      	str	r4, [r4, #32]
 801b296:	429c      	cmp	r4, r3
 801b298:	d006      	beq.n	801b2a8 <std+0x48>
 801b29a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801b29e:	4294      	cmp	r4, r2
 801b2a0:	d002      	beq.n	801b2a8 <std+0x48>
 801b2a2:	33d0      	adds	r3, #208	@ 0xd0
 801b2a4:	429c      	cmp	r4, r3
 801b2a6:	d105      	bne.n	801b2b4 <std+0x54>
 801b2a8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801b2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b2b0:	f000 ba40 	b.w	801b734 <__retarget_lock_init_recursive>
 801b2b4:	bd10      	pop	{r4, pc}
 801b2b6:	bf00      	nop
 801b2b8:	0801b48d 	.word	0x0801b48d
 801b2bc:	0801b4af 	.word	0x0801b4af
 801b2c0:	0801b4e7 	.word	0x0801b4e7
 801b2c4:	0801b50b 	.word	0x0801b50b
 801b2c8:	2000306c 	.word	0x2000306c

0801b2cc <stdio_exit_handler>:
 801b2cc:	4a02      	ldr	r2, [pc, #8]	@ (801b2d8 <stdio_exit_handler+0xc>)
 801b2ce:	4903      	ldr	r1, [pc, #12]	@ (801b2dc <stdio_exit_handler+0x10>)
 801b2d0:	4803      	ldr	r0, [pc, #12]	@ (801b2e0 <stdio_exit_handler+0x14>)
 801b2d2:	f000 b869 	b.w	801b3a8 <_fwalk_sglue>
 801b2d6:	bf00      	nop
 801b2d8:	20000144 	.word	0x20000144
 801b2dc:	0801db3d 	.word	0x0801db3d
 801b2e0:	200002c0 	.word	0x200002c0

0801b2e4 <cleanup_stdio>:
 801b2e4:	6841      	ldr	r1, [r0, #4]
 801b2e6:	4b0c      	ldr	r3, [pc, #48]	@ (801b318 <cleanup_stdio+0x34>)
 801b2e8:	4299      	cmp	r1, r3
 801b2ea:	b510      	push	{r4, lr}
 801b2ec:	4604      	mov	r4, r0
 801b2ee:	d001      	beq.n	801b2f4 <cleanup_stdio+0x10>
 801b2f0:	f002 fc24 	bl	801db3c <_fflush_r>
 801b2f4:	68a1      	ldr	r1, [r4, #8]
 801b2f6:	4b09      	ldr	r3, [pc, #36]	@ (801b31c <cleanup_stdio+0x38>)
 801b2f8:	4299      	cmp	r1, r3
 801b2fa:	d002      	beq.n	801b302 <cleanup_stdio+0x1e>
 801b2fc:	4620      	mov	r0, r4
 801b2fe:	f002 fc1d 	bl	801db3c <_fflush_r>
 801b302:	68e1      	ldr	r1, [r4, #12]
 801b304:	4b06      	ldr	r3, [pc, #24]	@ (801b320 <cleanup_stdio+0x3c>)
 801b306:	4299      	cmp	r1, r3
 801b308:	d004      	beq.n	801b314 <cleanup_stdio+0x30>
 801b30a:	4620      	mov	r0, r4
 801b30c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b310:	f002 bc14 	b.w	801db3c <_fflush_r>
 801b314:	bd10      	pop	{r4, pc}
 801b316:	bf00      	nop
 801b318:	2000306c 	.word	0x2000306c
 801b31c:	200030d4 	.word	0x200030d4
 801b320:	2000313c 	.word	0x2000313c

0801b324 <global_stdio_init.part.0>:
 801b324:	b510      	push	{r4, lr}
 801b326:	4b0b      	ldr	r3, [pc, #44]	@ (801b354 <global_stdio_init.part.0+0x30>)
 801b328:	4c0b      	ldr	r4, [pc, #44]	@ (801b358 <global_stdio_init.part.0+0x34>)
 801b32a:	4a0c      	ldr	r2, [pc, #48]	@ (801b35c <global_stdio_init.part.0+0x38>)
 801b32c:	601a      	str	r2, [r3, #0]
 801b32e:	4620      	mov	r0, r4
 801b330:	2200      	movs	r2, #0
 801b332:	2104      	movs	r1, #4
 801b334:	f7ff ff94 	bl	801b260 <std>
 801b338:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801b33c:	2201      	movs	r2, #1
 801b33e:	2109      	movs	r1, #9
 801b340:	f7ff ff8e 	bl	801b260 <std>
 801b344:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801b348:	2202      	movs	r2, #2
 801b34a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b34e:	2112      	movs	r1, #18
 801b350:	f7ff bf86 	b.w	801b260 <std>
 801b354:	200031a4 	.word	0x200031a4
 801b358:	2000306c 	.word	0x2000306c
 801b35c:	0801b2cd 	.word	0x0801b2cd

0801b360 <__sfp_lock_acquire>:
 801b360:	4801      	ldr	r0, [pc, #4]	@ (801b368 <__sfp_lock_acquire+0x8>)
 801b362:	f000 b9e8 	b.w	801b736 <__retarget_lock_acquire_recursive>
 801b366:	bf00      	nop
 801b368:	200031ad 	.word	0x200031ad

0801b36c <__sfp_lock_release>:
 801b36c:	4801      	ldr	r0, [pc, #4]	@ (801b374 <__sfp_lock_release+0x8>)
 801b36e:	f000 b9e3 	b.w	801b738 <__retarget_lock_release_recursive>
 801b372:	bf00      	nop
 801b374:	200031ad 	.word	0x200031ad

0801b378 <__sinit>:
 801b378:	b510      	push	{r4, lr}
 801b37a:	4604      	mov	r4, r0
 801b37c:	f7ff fff0 	bl	801b360 <__sfp_lock_acquire>
 801b380:	6a23      	ldr	r3, [r4, #32]
 801b382:	b11b      	cbz	r3, 801b38c <__sinit+0x14>
 801b384:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b388:	f7ff bff0 	b.w	801b36c <__sfp_lock_release>
 801b38c:	4b04      	ldr	r3, [pc, #16]	@ (801b3a0 <__sinit+0x28>)
 801b38e:	6223      	str	r3, [r4, #32]
 801b390:	4b04      	ldr	r3, [pc, #16]	@ (801b3a4 <__sinit+0x2c>)
 801b392:	681b      	ldr	r3, [r3, #0]
 801b394:	2b00      	cmp	r3, #0
 801b396:	d1f5      	bne.n	801b384 <__sinit+0xc>
 801b398:	f7ff ffc4 	bl	801b324 <global_stdio_init.part.0>
 801b39c:	e7f2      	b.n	801b384 <__sinit+0xc>
 801b39e:	bf00      	nop
 801b3a0:	0801b2e5 	.word	0x0801b2e5
 801b3a4:	200031a4 	.word	0x200031a4

0801b3a8 <_fwalk_sglue>:
 801b3a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b3ac:	4607      	mov	r7, r0
 801b3ae:	4688      	mov	r8, r1
 801b3b0:	4614      	mov	r4, r2
 801b3b2:	2600      	movs	r6, #0
 801b3b4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801b3b8:	f1b9 0901 	subs.w	r9, r9, #1
 801b3bc:	d505      	bpl.n	801b3ca <_fwalk_sglue+0x22>
 801b3be:	6824      	ldr	r4, [r4, #0]
 801b3c0:	2c00      	cmp	r4, #0
 801b3c2:	d1f7      	bne.n	801b3b4 <_fwalk_sglue+0xc>
 801b3c4:	4630      	mov	r0, r6
 801b3c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b3ca:	89ab      	ldrh	r3, [r5, #12]
 801b3cc:	2b01      	cmp	r3, #1
 801b3ce:	d907      	bls.n	801b3e0 <_fwalk_sglue+0x38>
 801b3d0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801b3d4:	3301      	adds	r3, #1
 801b3d6:	d003      	beq.n	801b3e0 <_fwalk_sglue+0x38>
 801b3d8:	4629      	mov	r1, r5
 801b3da:	4638      	mov	r0, r7
 801b3dc:	47c0      	blx	r8
 801b3de:	4306      	orrs	r6, r0
 801b3e0:	3568      	adds	r5, #104	@ 0x68
 801b3e2:	e7e9      	b.n	801b3b8 <_fwalk_sglue+0x10>

0801b3e4 <sniprintf>:
 801b3e4:	b40c      	push	{r2, r3}
 801b3e6:	b530      	push	{r4, r5, lr}
 801b3e8:	4b17      	ldr	r3, [pc, #92]	@ (801b448 <sniprintf+0x64>)
 801b3ea:	1e0c      	subs	r4, r1, #0
 801b3ec:	681d      	ldr	r5, [r3, #0]
 801b3ee:	b09d      	sub	sp, #116	@ 0x74
 801b3f0:	da08      	bge.n	801b404 <sniprintf+0x20>
 801b3f2:	238b      	movs	r3, #139	@ 0x8b
 801b3f4:	602b      	str	r3, [r5, #0]
 801b3f6:	f04f 30ff 	mov.w	r0, #4294967295
 801b3fa:	b01d      	add	sp, #116	@ 0x74
 801b3fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801b400:	b002      	add	sp, #8
 801b402:	4770      	bx	lr
 801b404:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801b408:	f8ad 3014 	strh.w	r3, [sp, #20]
 801b40c:	bf14      	ite	ne
 801b40e:	f104 33ff 	addne.w	r3, r4, #4294967295
 801b412:	4623      	moveq	r3, r4
 801b414:	9304      	str	r3, [sp, #16]
 801b416:	9307      	str	r3, [sp, #28]
 801b418:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801b41c:	9002      	str	r0, [sp, #8]
 801b41e:	9006      	str	r0, [sp, #24]
 801b420:	f8ad 3016 	strh.w	r3, [sp, #22]
 801b424:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801b426:	ab21      	add	r3, sp, #132	@ 0x84
 801b428:	a902      	add	r1, sp, #8
 801b42a:	4628      	mov	r0, r5
 801b42c:	9301      	str	r3, [sp, #4]
 801b42e:	f002 f8c3 	bl	801d5b8 <_svfiprintf_r>
 801b432:	1c43      	adds	r3, r0, #1
 801b434:	bfbc      	itt	lt
 801b436:	238b      	movlt	r3, #139	@ 0x8b
 801b438:	602b      	strlt	r3, [r5, #0]
 801b43a:	2c00      	cmp	r4, #0
 801b43c:	d0dd      	beq.n	801b3fa <sniprintf+0x16>
 801b43e:	9b02      	ldr	r3, [sp, #8]
 801b440:	2200      	movs	r2, #0
 801b442:	701a      	strb	r2, [r3, #0]
 801b444:	e7d9      	b.n	801b3fa <sniprintf+0x16>
 801b446:	bf00      	nop
 801b448:	200002bc 	.word	0x200002bc

0801b44c <siprintf>:
 801b44c:	b40e      	push	{r1, r2, r3}
 801b44e:	b500      	push	{lr}
 801b450:	b09c      	sub	sp, #112	@ 0x70
 801b452:	ab1d      	add	r3, sp, #116	@ 0x74
 801b454:	9002      	str	r0, [sp, #8]
 801b456:	9006      	str	r0, [sp, #24]
 801b458:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801b45c:	4809      	ldr	r0, [pc, #36]	@ (801b484 <siprintf+0x38>)
 801b45e:	9107      	str	r1, [sp, #28]
 801b460:	9104      	str	r1, [sp, #16]
 801b462:	4909      	ldr	r1, [pc, #36]	@ (801b488 <siprintf+0x3c>)
 801b464:	f853 2b04 	ldr.w	r2, [r3], #4
 801b468:	9105      	str	r1, [sp, #20]
 801b46a:	6800      	ldr	r0, [r0, #0]
 801b46c:	9301      	str	r3, [sp, #4]
 801b46e:	a902      	add	r1, sp, #8
 801b470:	f002 f8a2 	bl	801d5b8 <_svfiprintf_r>
 801b474:	9b02      	ldr	r3, [sp, #8]
 801b476:	2200      	movs	r2, #0
 801b478:	701a      	strb	r2, [r3, #0]
 801b47a:	b01c      	add	sp, #112	@ 0x70
 801b47c:	f85d eb04 	ldr.w	lr, [sp], #4
 801b480:	b003      	add	sp, #12
 801b482:	4770      	bx	lr
 801b484:	200002bc 	.word	0x200002bc
 801b488:	ffff0208 	.word	0xffff0208

0801b48c <__sread>:
 801b48c:	b510      	push	{r4, lr}
 801b48e:	460c      	mov	r4, r1
 801b490:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b494:	f000 f8f0 	bl	801b678 <_read_r>
 801b498:	2800      	cmp	r0, #0
 801b49a:	bfab      	itete	ge
 801b49c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801b49e:	89a3      	ldrhlt	r3, [r4, #12]
 801b4a0:	181b      	addge	r3, r3, r0
 801b4a2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801b4a6:	bfac      	ite	ge
 801b4a8:	6563      	strge	r3, [r4, #84]	@ 0x54
 801b4aa:	81a3      	strhlt	r3, [r4, #12]
 801b4ac:	bd10      	pop	{r4, pc}

0801b4ae <__swrite>:
 801b4ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b4b2:	461f      	mov	r7, r3
 801b4b4:	898b      	ldrh	r3, [r1, #12]
 801b4b6:	05db      	lsls	r3, r3, #23
 801b4b8:	4605      	mov	r5, r0
 801b4ba:	460c      	mov	r4, r1
 801b4bc:	4616      	mov	r6, r2
 801b4be:	d505      	bpl.n	801b4cc <__swrite+0x1e>
 801b4c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b4c4:	2302      	movs	r3, #2
 801b4c6:	2200      	movs	r2, #0
 801b4c8:	f000 f8c4 	bl	801b654 <_lseek_r>
 801b4cc:	89a3      	ldrh	r3, [r4, #12]
 801b4ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b4d2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801b4d6:	81a3      	strh	r3, [r4, #12]
 801b4d8:	4632      	mov	r2, r6
 801b4da:	463b      	mov	r3, r7
 801b4dc:	4628      	mov	r0, r5
 801b4de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b4e2:	f000 b8eb 	b.w	801b6bc <_write_r>

0801b4e6 <__sseek>:
 801b4e6:	b510      	push	{r4, lr}
 801b4e8:	460c      	mov	r4, r1
 801b4ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b4ee:	f000 f8b1 	bl	801b654 <_lseek_r>
 801b4f2:	1c43      	adds	r3, r0, #1
 801b4f4:	89a3      	ldrh	r3, [r4, #12]
 801b4f6:	bf15      	itete	ne
 801b4f8:	6560      	strne	r0, [r4, #84]	@ 0x54
 801b4fa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801b4fe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801b502:	81a3      	strheq	r3, [r4, #12]
 801b504:	bf18      	it	ne
 801b506:	81a3      	strhne	r3, [r4, #12]
 801b508:	bd10      	pop	{r4, pc}

0801b50a <__sclose>:
 801b50a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b50e:	f000 b891 	b.w	801b634 <_close_r>

0801b512 <memset>:
 801b512:	4402      	add	r2, r0
 801b514:	4603      	mov	r3, r0
 801b516:	4293      	cmp	r3, r2
 801b518:	d100      	bne.n	801b51c <memset+0xa>
 801b51a:	4770      	bx	lr
 801b51c:	f803 1b01 	strb.w	r1, [r3], #1
 801b520:	e7f9      	b.n	801b516 <memset+0x4>

0801b522 <strncmp>:
 801b522:	b510      	push	{r4, lr}
 801b524:	b16a      	cbz	r2, 801b542 <strncmp+0x20>
 801b526:	3901      	subs	r1, #1
 801b528:	1884      	adds	r4, r0, r2
 801b52a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b52e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801b532:	429a      	cmp	r2, r3
 801b534:	d103      	bne.n	801b53e <strncmp+0x1c>
 801b536:	42a0      	cmp	r0, r4
 801b538:	d001      	beq.n	801b53e <strncmp+0x1c>
 801b53a:	2a00      	cmp	r2, #0
 801b53c:	d1f5      	bne.n	801b52a <strncmp+0x8>
 801b53e:	1ad0      	subs	r0, r2, r3
 801b540:	bd10      	pop	{r4, pc}
 801b542:	4610      	mov	r0, r2
 801b544:	e7fc      	b.n	801b540 <strncmp+0x1e>
	...

0801b548 <strtok>:
 801b548:	4b16      	ldr	r3, [pc, #88]	@ (801b5a4 <strtok+0x5c>)
 801b54a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b54e:	681f      	ldr	r7, [r3, #0]
 801b550:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 801b552:	4605      	mov	r5, r0
 801b554:	460e      	mov	r6, r1
 801b556:	b9ec      	cbnz	r4, 801b594 <strtok+0x4c>
 801b558:	2050      	movs	r0, #80	@ 0x50
 801b55a:	f7fe f865 	bl	8019628 <malloc>
 801b55e:	4602      	mov	r2, r0
 801b560:	6478      	str	r0, [r7, #68]	@ 0x44
 801b562:	b920      	cbnz	r0, 801b56e <strtok+0x26>
 801b564:	4b10      	ldr	r3, [pc, #64]	@ (801b5a8 <strtok+0x60>)
 801b566:	4811      	ldr	r0, [pc, #68]	@ (801b5ac <strtok+0x64>)
 801b568:	215b      	movs	r1, #91	@ 0x5b
 801b56a:	f000 f90b 	bl	801b784 <__assert_func>
 801b56e:	e9c0 4400 	strd	r4, r4, [r0]
 801b572:	e9c0 4402 	strd	r4, r4, [r0, #8]
 801b576:	e9c0 4404 	strd	r4, r4, [r0, #16]
 801b57a:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 801b57e:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 801b582:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 801b586:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 801b58a:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 801b58e:	6184      	str	r4, [r0, #24]
 801b590:	7704      	strb	r4, [r0, #28]
 801b592:	6244      	str	r4, [r0, #36]	@ 0x24
 801b594:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801b596:	4631      	mov	r1, r6
 801b598:	4628      	mov	r0, r5
 801b59a:	2301      	movs	r3, #1
 801b59c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b5a0:	f000 b806 	b.w	801b5b0 <__strtok_r>
 801b5a4:	200002bc 	.word	0x200002bc
 801b5a8:	08022592 	.word	0x08022592
 801b5ac:	080225a9 	.word	0x080225a9

0801b5b0 <__strtok_r>:
 801b5b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b5b2:	4604      	mov	r4, r0
 801b5b4:	b908      	cbnz	r0, 801b5ba <__strtok_r+0xa>
 801b5b6:	6814      	ldr	r4, [r2, #0]
 801b5b8:	b144      	cbz	r4, 801b5cc <__strtok_r+0x1c>
 801b5ba:	4620      	mov	r0, r4
 801b5bc:	f814 5b01 	ldrb.w	r5, [r4], #1
 801b5c0:	460f      	mov	r7, r1
 801b5c2:	f817 6b01 	ldrb.w	r6, [r7], #1
 801b5c6:	b91e      	cbnz	r6, 801b5d0 <__strtok_r+0x20>
 801b5c8:	b965      	cbnz	r5, 801b5e4 <__strtok_r+0x34>
 801b5ca:	6015      	str	r5, [r2, #0]
 801b5cc:	2000      	movs	r0, #0
 801b5ce:	e005      	b.n	801b5dc <__strtok_r+0x2c>
 801b5d0:	42b5      	cmp	r5, r6
 801b5d2:	d1f6      	bne.n	801b5c2 <__strtok_r+0x12>
 801b5d4:	2b00      	cmp	r3, #0
 801b5d6:	d1f0      	bne.n	801b5ba <__strtok_r+0xa>
 801b5d8:	6014      	str	r4, [r2, #0]
 801b5da:	7003      	strb	r3, [r0, #0]
 801b5dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b5de:	461c      	mov	r4, r3
 801b5e0:	e00c      	b.n	801b5fc <__strtok_r+0x4c>
 801b5e2:	b915      	cbnz	r5, 801b5ea <__strtok_r+0x3a>
 801b5e4:	f814 3b01 	ldrb.w	r3, [r4], #1
 801b5e8:	460e      	mov	r6, r1
 801b5ea:	f816 5b01 	ldrb.w	r5, [r6], #1
 801b5ee:	42ab      	cmp	r3, r5
 801b5f0:	d1f7      	bne.n	801b5e2 <__strtok_r+0x32>
 801b5f2:	2b00      	cmp	r3, #0
 801b5f4:	d0f3      	beq.n	801b5de <__strtok_r+0x2e>
 801b5f6:	2300      	movs	r3, #0
 801b5f8:	f804 3c01 	strb.w	r3, [r4, #-1]
 801b5fc:	6014      	str	r4, [r2, #0]
 801b5fe:	e7ed      	b.n	801b5dc <__strtok_r+0x2c>

0801b600 <strstr>:
 801b600:	780a      	ldrb	r2, [r1, #0]
 801b602:	b570      	push	{r4, r5, r6, lr}
 801b604:	b96a      	cbnz	r2, 801b622 <strstr+0x22>
 801b606:	bd70      	pop	{r4, r5, r6, pc}
 801b608:	429a      	cmp	r2, r3
 801b60a:	d109      	bne.n	801b620 <strstr+0x20>
 801b60c:	460c      	mov	r4, r1
 801b60e:	4605      	mov	r5, r0
 801b610:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801b614:	2b00      	cmp	r3, #0
 801b616:	d0f6      	beq.n	801b606 <strstr+0x6>
 801b618:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801b61c:	429e      	cmp	r6, r3
 801b61e:	d0f7      	beq.n	801b610 <strstr+0x10>
 801b620:	3001      	adds	r0, #1
 801b622:	7803      	ldrb	r3, [r0, #0]
 801b624:	2b00      	cmp	r3, #0
 801b626:	d1ef      	bne.n	801b608 <strstr+0x8>
 801b628:	4618      	mov	r0, r3
 801b62a:	e7ec      	b.n	801b606 <strstr+0x6>

0801b62c <_localeconv_r>:
 801b62c:	4800      	ldr	r0, [pc, #0]	@ (801b630 <_localeconv_r+0x4>)
 801b62e:	4770      	bx	lr
 801b630:	20000240 	.word	0x20000240

0801b634 <_close_r>:
 801b634:	b538      	push	{r3, r4, r5, lr}
 801b636:	4d06      	ldr	r5, [pc, #24]	@ (801b650 <_close_r+0x1c>)
 801b638:	2300      	movs	r3, #0
 801b63a:	4604      	mov	r4, r0
 801b63c:	4608      	mov	r0, r1
 801b63e:	602b      	str	r3, [r5, #0]
 801b640:	f7eb f92c 	bl	800689c <_close>
 801b644:	1c43      	adds	r3, r0, #1
 801b646:	d102      	bne.n	801b64e <_close_r+0x1a>
 801b648:	682b      	ldr	r3, [r5, #0]
 801b64a:	b103      	cbz	r3, 801b64e <_close_r+0x1a>
 801b64c:	6023      	str	r3, [r4, #0]
 801b64e:	bd38      	pop	{r3, r4, r5, pc}
 801b650:	200031a8 	.word	0x200031a8

0801b654 <_lseek_r>:
 801b654:	b538      	push	{r3, r4, r5, lr}
 801b656:	4d07      	ldr	r5, [pc, #28]	@ (801b674 <_lseek_r+0x20>)
 801b658:	4604      	mov	r4, r0
 801b65a:	4608      	mov	r0, r1
 801b65c:	4611      	mov	r1, r2
 801b65e:	2200      	movs	r2, #0
 801b660:	602a      	str	r2, [r5, #0]
 801b662:	461a      	mov	r2, r3
 801b664:	f7eb f941 	bl	80068ea <_lseek>
 801b668:	1c43      	adds	r3, r0, #1
 801b66a:	d102      	bne.n	801b672 <_lseek_r+0x1e>
 801b66c:	682b      	ldr	r3, [r5, #0]
 801b66e:	b103      	cbz	r3, 801b672 <_lseek_r+0x1e>
 801b670:	6023      	str	r3, [r4, #0]
 801b672:	bd38      	pop	{r3, r4, r5, pc}
 801b674:	200031a8 	.word	0x200031a8

0801b678 <_read_r>:
 801b678:	b538      	push	{r3, r4, r5, lr}
 801b67a:	4d07      	ldr	r5, [pc, #28]	@ (801b698 <_read_r+0x20>)
 801b67c:	4604      	mov	r4, r0
 801b67e:	4608      	mov	r0, r1
 801b680:	4611      	mov	r1, r2
 801b682:	2200      	movs	r2, #0
 801b684:	602a      	str	r2, [r5, #0]
 801b686:	461a      	mov	r2, r3
 801b688:	f7eb f8cf 	bl	800682a <_read>
 801b68c:	1c43      	adds	r3, r0, #1
 801b68e:	d102      	bne.n	801b696 <_read_r+0x1e>
 801b690:	682b      	ldr	r3, [r5, #0]
 801b692:	b103      	cbz	r3, 801b696 <_read_r+0x1e>
 801b694:	6023      	str	r3, [r4, #0]
 801b696:	bd38      	pop	{r3, r4, r5, pc}
 801b698:	200031a8 	.word	0x200031a8

0801b69c <_sbrk_r>:
 801b69c:	b538      	push	{r3, r4, r5, lr}
 801b69e:	4d06      	ldr	r5, [pc, #24]	@ (801b6b8 <_sbrk_r+0x1c>)
 801b6a0:	2300      	movs	r3, #0
 801b6a2:	4604      	mov	r4, r0
 801b6a4:	4608      	mov	r0, r1
 801b6a6:	602b      	str	r3, [r5, #0]
 801b6a8:	f7eb f92c 	bl	8006904 <_sbrk>
 801b6ac:	1c43      	adds	r3, r0, #1
 801b6ae:	d102      	bne.n	801b6b6 <_sbrk_r+0x1a>
 801b6b0:	682b      	ldr	r3, [r5, #0]
 801b6b2:	b103      	cbz	r3, 801b6b6 <_sbrk_r+0x1a>
 801b6b4:	6023      	str	r3, [r4, #0]
 801b6b6:	bd38      	pop	{r3, r4, r5, pc}
 801b6b8:	200031a8 	.word	0x200031a8

0801b6bc <_write_r>:
 801b6bc:	b538      	push	{r3, r4, r5, lr}
 801b6be:	4d07      	ldr	r5, [pc, #28]	@ (801b6dc <_write_r+0x20>)
 801b6c0:	4604      	mov	r4, r0
 801b6c2:	4608      	mov	r0, r1
 801b6c4:	4611      	mov	r1, r2
 801b6c6:	2200      	movs	r2, #0
 801b6c8:	602a      	str	r2, [r5, #0]
 801b6ca:	461a      	mov	r2, r3
 801b6cc:	f7eb f8ca 	bl	8006864 <_write>
 801b6d0:	1c43      	adds	r3, r0, #1
 801b6d2:	d102      	bne.n	801b6da <_write_r+0x1e>
 801b6d4:	682b      	ldr	r3, [r5, #0]
 801b6d6:	b103      	cbz	r3, 801b6da <_write_r+0x1e>
 801b6d8:	6023      	str	r3, [r4, #0]
 801b6da:	bd38      	pop	{r3, r4, r5, pc}
 801b6dc:	200031a8 	.word	0x200031a8

0801b6e0 <__errno>:
 801b6e0:	4b01      	ldr	r3, [pc, #4]	@ (801b6e8 <__errno+0x8>)
 801b6e2:	6818      	ldr	r0, [r3, #0]
 801b6e4:	4770      	bx	lr
 801b6e6:	bf00      	nop
 801b6e8:	200002bc 	.word	0x200002bc

0801b6ec <__libc_init_array>:
 801b6ec:	b570      	push	{r4, r5, r6, lr}
 801b6ee:	4d0d      	ldr	r5, [pc, #52]	@ (801b724 <__libc_init_array+0x38>)
 801b6f0:	4c0d      	ldr	r4, [pc, #52]	@ (801b728 <__libc_init_array+0x3c>)
 801b6f2:	1b64      	subs	r4, r4, r5
 801b6f4:	10a4      	asrs	r4, r4, #2
 801b6f6:	2600      	movs	r6, #0
 801b6f8:	42a6      	cmp	r6, r4
 801b6fa:	d109      	bne.n	801b710 <__libc_init_array+0x24>
 801b6fc:	4d0b      	ldr	r5, [pc, #44]	@ (801b72c <__libc_init_array+0x40>)
 801b6fe:	4c0c      	ldr	r4, [pc, #48]	@ (801b730 <__libc_init_array+0x44>)
 801b700:	f004 fb92 	bl	801fe28 <_init>
 801b704:	1b64      	subs	r4, r4, r5
 801b706:	10a4      	asrs	r4, r4, #2
 801b708:	2600      	movs	r6, #0
 801b70a:	42a6      	cmp	r6, r4
 801b70c:	d105      	bne.n	801b71a <__libc_init_array+0x2e>
 801b70e:	bd70      	pop	{r4, r5, r6, pc}
 801b710:	f855 3b04 	ldr.w	r3, [r5], #4
 801b714:	4798      	blx	r3
 801b716:	3601      	adds	r6, #1
 801b718:	e7ee      	b.n	801b6f8 <__libc_init_array+0xc>
 801b71a:	f855 3b04 	ldr.w	r3, [r5], #4
 801b71e:	4798      	blx	r3
 801b720:	3601      	adds	r6, #1
 801b722:	e7f2      	b.n	801b70a <__libc_init_array+0x1e>
 801b724:	08022a88 	.word	0x08022a88
 801b728:	08022a88 	.word	0x08022a88
 801b72c:	08022a88 	.word	0x08022a88
 801b730:	08022a8c 	.word	0x08022a8c

0801b734 <__retarget_lock_init_recursive>:
 801b734:	4770      	bx	lr

0801b736 <__retarget_lock_acquire_recursive>:
 801b736:	4770      	bx	lr

0801b738 <__retarget_lock_release_recursive>:
 801b738:	4770      	bx	lr

0801b73a <strcpy>:
 801b73a:	4603      	mov	r3, r0
 801b73c:	f811 2b01 	ldrb.w	r2, [r1], #1
 801b740:	f803 2b01 	strb.w	r2, [r3], #1
 801b744:	2a00      	cmp	r2, #0
 801b746:	d1f9      	bne.n	801b73c <strcpy+0x2>
 801b748:	4770      	bx	lr

0801b74a <memcpy>:
 801b74a:	440a      	add	r2, r1
 801b74c:	4291      	cmp	r1, r2
 801b74e:	f100 33ff 	add.w	r3, r0, #4294967295
 801b752:	d100      	bne.n	801b756 <memcpy+0xc>
 801b754:	4770      	bx	lr
 801b756:	b510      	push	{r4, lr}
 801b758:	f811 4b01 	ldrb.w	r4, [r1], #1
 801b75c:	f803 4f01 	strb.w	r4, [r3, #1]!
 801b760:	4291      	cmp	r1, r2
 801b762:	d1f9      	bne.n	801b758 <memcpy+0xe>
 801b764:	bd10      	pop	{r4, pc}
	...

0801b768 <nan>:
 801b768:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 801b770 <nan+0x8>
 801b76c:	4770      	bx	lr
 801b76e:	bf00      	nop
 801b770:	00000000 	.word	0x00000000
 801b774:	7ff80000 	.word	0x7ff80000

0801b778 <nanf>:
 801b778:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 801b780 <nanf+0x8>
 801b77c:	4770      	bx	lr
 801b77e:	bf00      	nop
 801b780:	7fc00000 	.word	0x7fc00000

0801b784 <__assert_func>:
 801b784:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801b786:	4614      	mov	r4, r2
 801b788:	461a      	mov	r2, r3
 801b78a:	4b09      	ldr	r3, [pc, #36]	@ (801b7b0 <__assert_func+0x2c>)
 801b78c:	681b      	ldr	r3, [r3, #0]
 801b78e:	4605      	mov	r5, r0
 801b790:	68d8      	ldr	r0, [r3, #12]
 801b792:	b954      	cbnz	r4, 801b7aa <__assert_func+0x26>
 801b794:	4b07      	ldr	r3, [pc, #28]	@ (801b7b4 <__assert_func+0x30>)
 801b796:	461c      	mov	r4, r3
 801b798:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801b79c:	9100      	str	r1, [sp, #0]
 801b79e:	462b      	mov	r3, r5
 801b7a0:	4905      	ldr	r1, [pc, #20]	@ (801b7b8 <__assert_func+0x34>)
 801b7a2:	f002 f9f3 	bl	801db8c <fiprintf>
 801b7a6:	f002 fab1 	bl	801dd0c <abort>
 801b7aa:	4b04      	ldr	r3, [pc, #16]	@ (801b7bc <__assert_func+0x38>)
 801b7ac:	e7f4      	b.n	801b798 <__assert_func+0x14>
 801b7ae:	bf00      	nop
 801b7b0:	200002bc 	.word	0x200002bc
 801b7b4:	08022646 	.word	0x08022646
 801b7b8:	08022618 	.word	0x08022618
 801b7bc:	0802260b 	.word	0x0802260b

0801b7c0 <quorem>:
 801b7c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b7c4:	6903      	ldr	r3, [r0, #16]
 801b7c6:	690c      	ldr	r4, [r1, #16]
 801b7c8:	42a3      	cmp	r3, r4
 801b7ca:	4607      	mov	r7, r0
 801b7cc:	db7e      	blt.n	801b8cc <quorem+0x10c>
 801b7ce:	3c01      	subs	r4, #1
 801b7d0:	f101 0814 	add.w	r8, r1, #20
 801b7d4:	00a3      	lsls	r3, r4, #2
 801b7d6:	f100 0514 	add.w	r5, r0, #20
 801b7da:	9300      	str	r3, [sp, #0]
 801b7dc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801b7e0:	9301      	str	r3, [sp, #4]
 801b7e2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801b7e6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801b7ea:	3301      	adds	r3, #1
 801b7ec:	429a      	cmp	r2, r3
 801b7ee:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801b7f2:	fbb2 f6f3 	udiv	r6, r2, r3
 801b7f6:	d32e      	bcc.n	801b856 <quorem+0x96>
 801b7f8:	f04f 0a00 	mov.w	sl, #0
 801b7fc:	46c4      	mov	ip, r8
 801b7fe:	46ae      	mov	lr, r5
 801b800:	46d3      	mov	fp, sl
 801b802:	f85c 3b04 	ldr.w	r3, [ip], #4
 801b806:	b298      	uxth	r0, r3
 801b808:	fb06 a000 	mla	r0, r6, r0, sl
 801b80c:	0c02      	lsrs	r2, r0, #16
 801b80e:	0c1b      	lsrs	r3, r3, #16
 801b810:	fb06 2303 	mla	r3, r6, r3, r2
 801b814:	f8de 2000 	ldr.w	r2, [lr]
 801b818:	b280      	uxth	r0, r0
 801b81a:	b292      	uxth	r2, r2
 801b81c:	1a12      	subs	r2, r2, r0
 801b81e:	445a      	add	r2, fp
 801b820:	f8de 0000 	ldr.w	r0, [lr]
 801b824:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801b828:	b29b      	uxth	r3, r3
 801b82a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801b82e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801b832:	b292      	uxth	r2, r2
 801b834:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801b838:	45e1      	cmp	r9, ip
 801b83a:	f84e 2b04 	str.w	r2, [lr], #4
 801b83e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801b842:	d2de      	bcs.n	801b802 <quorem+0x42>
 801b844:	9b00      	ldr	r3, [sp, #0]
 801b846:	58eb      	ldr	r3, [r5, r3]
 801b848:	b92b      	cbnz	r3, 801b856 <quorem+0x96>
 801b84a:	9b01      	ldr	r3, [sp, #4]
 801b84c:	3b04      	subs	r3, #4
 801b84e:	429d      	cmp	r5, r3
 801b850:	461a      	mov	r2, r3
 801b852:	d32f      	bcc.n	801b8b4 <quorem+0xf4>
 801b854:	613c      	str	r4, [r7, #16]
 801b856:	4638      	mov	r0, r7
 801b858:	f001 fc58 	bl	801d10c <__mcmp>
 801b85c:	2800      	cmp	r0, #0
 801b85e:	db25      	blt.n	801b8ac <quorem+0xec>
 801b860:	4629      	mov	r1, r5
 801b862:	2000      	movs	r0, #0
 801b864:	f858 2b04 	ldr.w	r2, [r8], #4
 801b868:	f8d1 c000 	ldr.w	ip, [r1]
 801b86c:	fa1f fe82 	uxth.w	lr, r2
 801b870:	fa1f f38c 	uxth.w	r3, ip
 801b874:	eba3 030e 	sub.w	r3, r3, lr
 801b878:	4403      	add	r3, r0
 801b87a:	0c12      	lsrs	r2, r2, #16
 801b87c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 801b880:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 801b884:	b29b      	uxth	r3, r3
 801b886:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801b88a:	45c1      	cmp	r9, r8
 801b88c:	f841 3b04 	str.w	r3, [r1], #4
 801b890:	ea4f 4022 	mov.w	r0, r2, asr #16
 801b894:	d2e6      	bcs.n	801b864 <quorem+0xa4>
 801b896:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801b89a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801b89e:	b922      	cbnz	r2, 801b8aa <quorem+0xea>
 801b8a0:	3b04      	subs	r3, #4
 801b8a2:	429d      	cmp	r5, r3
 801b8a4:	461a      	mov	r2, r3
 801b8a6:	d30b      	bcc.n	801b8c0 <quorem+0x100>
 801b8a8:	613c      	str	r4, [r7, #16]
 801b8aa:	3601      	adds	r6, #1
 801b8ac:	4630      	mov	r0, r6
 801b8ae:	b003      	add	sp, #12
 801b8b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b8b4:	6812      	ldr	r2, [r2, #0]
 801b8b6:	3b04      	subs	r3, #4
 801b8b8:	2a00      	cmp	r2, #0
 801b8ba:	d1cb      	bne.n	801b854 <quorem+0x94>
 801b8bc:	3c01      	subs	r4, #1
 801b8be:	e7c6      	b.n	801b84e <quorem+0x8e>
 801b8c0:	6812      	ldr	r2, [r2, #0]
 801b8c2:	3b04      	subs	r3, #4
 801b8c4:	2a00      	cmp	r2, #0
 801b8c6:	d1ef      	bne.n	801b8a8 <quorem+0xe8>
 801b8c8:	3c01      	subs	r4, #1
 801b8ca:	e7ea      	b.n	801b8a2 <quorem+0xe2>
 801b8cc:	2000      	movs	r0, #0
 801b8ce:	e7ee      	b.n	801b8ae <quorem+0xee>

0801b8d0 <_dtoa_r>:
 801b8d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b8d4:	69c7      	ldr	r7, [r0, #28]
 801b8d6:	b099      	sub	sp, #100	@ 0x64
 801b8d8:	ed8d 0b02 	vstr	d0, [sp, #8]
 801b8dc:	ec55 4b10 	vmov	r4, r5, d0
 801b8e0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 801b8e2:	9109      	str	r1, [sp, #36]	@ 0x24
 801b8e4:	4683      	mov	fp, r0
 801b8e6:	920e      	str	r2, [sp, #56]	@ 0x38
 801b8e8:	9313      	str	r3, [sp, #76]	@ 0x4c
 801b8ea:	b97f      	cbnz	r7, 801b90c <_dtoa_r+0x3c>
 801b8ec:	2010      	movs	r0, #16
 801b8ee:	f7fd fe9b 	bl	8019628 <malloc>
 801b8f2:	4602      	mov	r2, r0
 801b8f4:	f8cb 001c 	str.w	r0, [fp, #28]
 801b8f8:	b920      	cbnz	r0, 801b904 <_dtoa_r+0x34>
 801b8fa:	4ba7      	ldr	r3, [pc, #668]	@ (801bb98 <_dtoa_r+0x2c8>)
 801b8fc:	21ef      	movs	r1, #239	@ 0xef
 801b8fe:	48a7      	ldr	r0, [pc, #668]	@ (801bb9c <_dtoa_r+0x2cc>)
 801b900:	f7ff ff40 	bl	801b784 <__assert_func>
 801b904:	e9c0 7701 	strd	r7, r7, [r0, #4]
 801b908:	6007      	str	r7, [r0, #0]
 801b90a:	60c7      	str	r7, [r0, #12]
 801b90c:	f8db 301c 	ldr.w	r3, [fp, #28]
 801b910:	6819      	ldr	r1, [r3, #0]
 801b912:	b159      	cbz	r1, 801b92c <_dtoa_r+0x5c>
 801b914:	685a      	ldr	r2, [r3, #4]
 801b916:	604a      	str	r2, [r1, #4]
 801b918:	2301      	movs	r3, #1
 801b91a:	4093      	lsls	r3, r2
 801b91c:	608b      	str	r3, [r1, #8]
 801b91e:	4658      	mov	r0, fp
 801b920:	f001 f970 	bl	801cc04 <_Bfree>
 801b924:	f8db 301c 	ldr.w	r3, [fp, #28]
 801b928:	2200      	movs	r2, #0
 801b92a:	601a      	str	r2, [r3, #0]
 801b92c:	1e2b      	subs	r3, r5, #0
 801b92e:	bfb9      	ittee	lt
 801b930:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801b934:	9303      	strlt	r3, [sp, #12]
 801b936:	2300      	movge	r3, #0
 801b938:	6033      	strge	r3, [r6, #0]
 801b93a:	9f03      	ldr	r7, [sp, #12]
 801b93c:	4b98      	ldr	r3, [pc, #608]	@ (801bba0 <_dtoa_r+0x2d0>)
 801b93e:	bfbc      	itt	lt
 801b940:	2201      	movlt	r2, #1
 801b942:	6032      	strlt	r2, [r6, #0]
 801b944:	43bb      	bics	r3, r7
 801b946:	d112      	bne.n	801b96e <_dtoa_r+0x9e>
 801b948:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801b94a:	f242 730f 	movw	r3, #9999	@ 0x270f
 801b94e:	6013      	str	r3, [r2, #0]
 801b950:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801b954:	4323      	orrs	r3, r4
 801b956:	f000 854d 	beq.w	801c3f4 <_dtoa_r+0xb24>
 801b95a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801b95c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 801bbb4 <_dtoa_r+0x2e4>
 801b960:	2b00      	cmp	r3, #0
 801b962:	f000 854f 	beq.w	801c404 <_dtoa_r+0xb34>
 801b966:	f10a 0303 	add.w	r3, sl, #3
 801b96a:	f000 bd49 	b.w	801c400 <_dtoa_r+0xb30>
 801b96e:	ed9d 7b02 	vldr	d7, [sp, #8]
 801b972:	2200      	movs	r2, #0
 801b974:	ec51 0b17 	vmov	r0, r1, d7
 801b978:	2300      	movs	r3, #0
 801b97a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 801b97e:	f7e5 f87b 	bl	8000a78 <__aeabi_dcmpeq>
 801b982:	4680      	mov	r8, r0
 801b984:	b158      	cbz	r0, 801b99e <_dtoa_r+0xce>
 801b986:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801b988:	2301      	movs	r3, #1
 801b98a:	6013      	str	r3, [r2, #0]
 801b98c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801b98e:	b113      	cbz	r3, 801b996 <_dtoa_r+0xc6>
 801b990:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801b992:	4b84      	ldr	r3, [pc, #528]	@ (801bba4 <_dtoa_r+0x2d4>)
 801b994:	6013      	str	r3, [r2, #0]
 801b996:	f8df a220 	ldr.w	sl, [pc, #544]	@ 801bbb8 <_dtoa_r+0x2e8>
 801b99a:	f000 bd33 	b.w	801c404 <_dtoa_r+0xb34>
 801b99e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801b9a2:	aa16      	add	r2, sp, #88	@ 0x58
 801b9a4:	a917      	add	r1, sp, #92	@ 0x5c
 801b9a6:	4658      	mov	r0, fp
 801b9a8:	f001 fcd0 	bl	801d34c <__d2b>
 801b9ac:	f3c7 560a 	ubfx	r6, r7, #20, #11
 801b9b0:	4681      	mov	r9, r0
 801b9b2:	2e00      	cmp	r6, #0
 801b9b4:	d077      	beq.n	801baa6 <_dtoa_r+0x1d6>
 801b9b6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801b9b8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 801b9bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801b9c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801b9c4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 801b9c8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 801b9cc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 801b9d0:	4619      	mov	r1, r3
 801b9d2:	2200      	movs	r2, #0
 801b9d4:	4b74      	ldr	r3, [pc, #464]	@ (801bba8 <_dtoa_r+0x2d8>)
 801b9d6:	f7e4 fc2f 	bl	8000238 <__aeabi_dsub>
 801b9da:	a369      	add	r3, pc, #420	@ (adr r3, 801bb80 <_dtoa_r+0x2b0>)
 801b9dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b9e0:	f7e4 fde2 	bl	80005a8 <__aeabi_dmul>
 801b9e4:	a368      	add	r3, pc, #416	@ (adr r3, 801bb88 <_dtoa_r+0x2b8>)
 801b9e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b9ea:	f7e4 fc27 	bl	800023c <__adddf3>
 801b9ee:	4604      	mov	r4, r0
 801b9f0:	4630      	mov	r0, r6
 801b9f2:	460d      	mov	r5, r1
 801b9f4:	f7e4 fd6e 	bl	80004d4 <__aeabi_i2d>
 801b9f8:	a365      	add	r3, pc, #404	@ (adr r3, 801bb90 <_dtoa_r+0x2c0>)
 801b9fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b9fe:	f7e4 fdd3 	bl	80005a8 <__aeabi_dmul>
 801ba02:	4602      	mov	r2, r0
 801ba04:	460b      	mov	r3, r1
 801ba06:	4620      	mov	r0, r4
 801ba08:	4629      	mov	r1, r5
 801ba0a:	f7e4 fc17 	bl	800023c <__adddf3>
 801ba0e:	4604      	mov	r4, r0
 801ba10:	460d      	mov	r5, r1
 801ba12:	f7e5 f879 	bl	8000b08 <__aeabi_d2iz>
 801ba16:	2200      	movs	r2, #0
 801ba18:	4607      	mov	r7, r0
 801ba1a:	2300      	movs	r3, #0
 801ba1c:	4620      	mov	r0, r4
 801ba1e:	4629      	mov	r1, r5
 801ba20:	f7e5 f834 	bl	8000a8c <__aeabi_dcmplt>
 801ba24:	b140      	cbz	r0, 801ba38 <_dtoa_r+0x168>
 801ba26:	4638      	mov	r0, r7
 801ba28:	f7e4 fd54 	bl	80004d4 <__aeabi_i2d>
 801ba2c:	4622      	mov	r2, r4
 801ba2e:	462b      	mov	r3, r5
 801ba30:	f7e5 f822 	bl	8000a78 <__aeabi_dcmpeq>
 801ba34:	b900      	cbnz	r0, 801ba38 <_dtoa_r+0x168>
 801ba36:	3f01      	subs	r7, #1
 801ba38:	2f16      	cmp	r7, #22
 801ba3a:	d851      	bhi.n	801bae0 <_dtoa_r+0x210>
 801ba3c:	4b5b      	ldr	r3, [pc, #364]	@ (801bbac <_dtoa_r+0x2dc>)
 801ba3e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801ba42:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ba46:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801ba4a:	f7e5 f81f 	bl	8000a8c <__aeabi_dcmplt>
 801ba4e:	2800      	cmp	r0, #0
 801ba50:	d048      	beq.n	801bae4 <_dtoa_r+0x214>
 801ba52:	3f01      	subs	r7, #1
 801ba54:	2300      	movs	r3, #0
 801ba56:	9312      	str	r3, [sp, #72]	@ 0x48
 801ba58:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801ba5a:	1b9b      	subs	r3, r3, r6
 801ba5c:	1e5a      	subs	r2, r3, #1
 801ba5e:	bf44      	itt	mi
 801ba60:	f1c3 0801 	rsbmi	r8, r3, #1
 801ba64:	2300      	movmi	r3, #0
 801ba66:	9208      	str	r2, [sp, #32]
 801ba68:	bf54      	ite	pl
 801ba6a:	f04f 0800 	movpl.w	r8, #0
 801ba6e:	9308      	strmi	r3, [sp, #32]
 801ba70:	2f00      	cmp	r7, #0
 801ba72:	db39      	blt.n	801bae8 <_dtoa_r+0x218>
 801ba74:	9b08      	ldr	r3, [sp, #32]
 801ba76:	970f      	str	r7, [sp, #60]	@ 0x3c
 801ba78:	443b      	add	r3, r7
 801ba7a:	9308      	str	r3, [sp, #32]
 801ba7c:	2300      	movs	r3, #0
 801ba7e:	930a      	str	r3, [sp, #40]	@ 0x28
 801ba80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ba82:	2b09      	cmp	r3, #9
 801ba84:	d864      	bhi.n	801bb50 <_dtoa_r+0x280>
 801ba86:	2b05      	cmp	r3, #5
 801ba88:	bfc4      	itt	gt
 801ba8a:	3b04      	subgt	r3, #4
 801ba8c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 801ba8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ba90:	f1a3 0302 	sub.w	r3, r3, #2
 801ba94:	bfcc      	ite	gt
 801ba96:	2400      	movgt	r4, #0
 801ba98:	2401      	movle	r4, #1
 801ba9a:	2b03      	cmp	r3, #3
 801ba9c:	d863      	bhi.n	801bb66 <_dtoa_r+0x296>
 801ba9e:	e8df f003 	tbb	[pc, r3]
 801baa2:	372a      	.short	0x372a
 801baa4:	5535      	.short	0x5535
 801baa6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 801baaa:	441e      	add	r6, r3
 801baac:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 801bab0:	2b20      	cmp	r3, #32
 801bab2:	bfc1      	itttt	gt
 801bab4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 801bab8:	409f      	lslgt	r7, r3
 801baba:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 801babe:	fa24 f303 	lsrgt.w	r3, r4, r3
 801bac2:	bfd6      	itet	le
 801bac4:	f1c3 0320 	rsble	r3, r3, #32
 801bac8:	ea47 0003 	orrgt.w	r0, r7, r3
 801bacc:	fa04 f003 	lslle.w	r0, r4, r3
 801bad0:	f7e4 fcf0 	bl	80004b4 <__aeabi_ui2d>
 801bad4:	2201      	movs	r2, #1
 801bad6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 801bada:	3e01      	subs	r6, #1
 801badc:	9214      	str	r2, [sp, #80]	@ 0x50
 801bade:	e777      	b.n	801b9d0 <_dtoa_r+0x100>
 801bae0:	2301      	movs	r3, #1
 801bae2:	e7b8      	b.n	801ba56 <_dtoa_r+0x186>
 801bae4:	9012      	str	r0, [sp, #72]	@ 0x48
 801bae6:	e7b7      	b.n	801ba58 <_dtoa_r+0x188>
 801bae8:	427b      	negs	r3, r7
 801baea:	930a      	str	r3, [sp, #40]	@ 0x28
 801baec:	2300      	movs	r3, #0
 801baee:	eba8 0807 	sub.w	r8, r8, r7
 801baf2:	930f      	str	r3, [sp, #60]	@ 0x3c
 801baf4:	e7c4      	b.n	801ba80 <_dtoa_r+0x1b0>
 801baf6:	2300      	movs	r3, #0
 801baf8:	930b      	str	r3, [sp, #44]	@ 0x2c
 801bafa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801bafc:	2b00      	cmp	r3, #0
 801bafe:	dc35      	bgt.n	801bb6c <_dtoa_r+0x29c>
 801bb00:	2301      	movs	r3, #1
 801bb02:	9300      	str	r3, [sp, #0]
 801bb04:	9307      	str	r3, [sp, #28]
 801bb06:	461a      	mov	r2, r3
 801bb08:	920e      	str	r2, [sp, #56]	@ 0x38
 801bb0a:	e00b      	b.n	801bb24 <_dtoa_r+0x254>
 801bb0c:	2301      	movs	r3, #1
 801bb0e:	e7f3      	b.n	801baf8 <_dtoa_r+0x228>
 801bb10:	2300      	movs	r3, #0
 801bb12:	930b      	str	r3, [sp, #44]	@ 0x2c
 801bb14:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801bb16:	18fb      	adds	r3, r7, r3
 801bb18:	9300      	str	r3, [sp, #0]
 801bb1a:	3301      	adds	r3, #1
 801bb1c:	2b01      	cmp	r3, #1
 801bb1e:	9307      	str	r3, [sp, #28]
 801bb20:	bfb8      	it	lt
 801bb22:	2301      	movlt	r3, #1
 801bb24:	f8db 001c 	ldr.w	r0, [fp, #28]
 801bb28:	2100      	movs	r1, #0
 801bb2a:	2204      	movs	r2, #4
 801bb2c:	f102 0514 	add.w	r5, r2, #20
 801bb30:	429d      	cmp	r5, r3
 801bb32:	d91f      	bls.n	801bb74 <_dtoa_r+0x2a4>
 801bb34:	6041      	str	r1, [r0, #4]
 801bb36:	4658      	mov	r0, fp
 801bb38:	f001 f824 	bl	801cb84 <_Balloc>
 801bb3c:	4682      	mov	sl, r0
 801bb3e:	2800      	cmp	r0, #0
 801bb40:	d13c      	bne.n	801bbbc <_dtoa_r+0x2ec>
 801bb42:	4b1b      	ldr	r3, [pc, #108]	@ (801bbb0 <_dtoa_r+0x2e0>)
 801bb44:	4602      	mov	r2, r0
 801bb46:	f240 11af 	movw	r1, #431	@ 0x1af
 801bb4a:	e6d8      	b.n	801b8fe <_dtoa_r+0x2e>
 801bb4c:	2301      	movs	r3, #1
 801bb4e:	e7e0      	b.n	801bb12 <_dtoa_r+0x242>
 801bb50:	2401      	movs	r4, #1
 801bb52:	2300      	movs	r3, #0
 801bb54:	9309      	str	r3, [sp, #36]	@ 0x24
 801bb56:	940b      	str	r4, [sp, #44]	@ 0x2c
 801bb58:	f04f 33ff 	mov.w	r3, #4294967295
 801bb5c:	9300      	str	r3, [sp, #0]
 801bb5e:	9307      	str	r3, [sp, #28]
 801bb60:	2200      	movs	r2, #0
 801bb62:	2312      	movs	r3, #18
 801bb64:	e7d0      	b.n	801bb08 <_dtoa_r+0x238>
 801bb66:	2301      	movs	r3, #1
 801bb68:	930b      	str	r3, [sp, #44]	@ 0x2c
 801bb6a:	e7f5      	b.n	801bb58 <_dtoa_r+0x288>
 801bb6c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801bb6e:	9300      	str	r3, [sp, #0]
 801bb70:	9307      	str	r3, [sp, #28]
 801bb72:	e7d7      	b.n	801bb24 <_dtoa_r+0x254>
 801bb74:	3101      	adds	r1, #1
 801bb76:	0052      	lsls	r2, r2, #1
 801bb78:	e7d8      	b.n	801bb2c <_dtoa_r+0x25c>
 801bb7a:	bf00      	nop
 801bb7c:	f3af 8000 	nop.w
 801bb80:	636f4361 	.word	0x636f4361
 801bb84:	3fd287a7 	.word	0x3fd287a7
 801bb88:	8b60c8b3 	.word	0x8b60c8b3
 801bb8c:	3fc68a28 	.word	0x3fc68a28
 801bb90:	509f79fb 	.word	0x509f79fb
 801bb94:	3fd34413 	.word	0x3fd34413
 801bb98:	08022592 	.word	0x08022592
 801bb9c:	08022654 	.word	0x08022654
 801bba0:	7ff00000 	.word	0x7ff00000
 801bba4:	0802256a 	.word	0x0802256a
 801bba8:	3ff80000 	.word	0x3ff80000
 801bbac:	080227b0 	.word	0x080227b0
 801bbb0:	080226ac 	.word	0x080226ac
 801bbb4:	08022650 	.word	0x08022650
 801bbb8:	08022569 	.word	0x08022569
 801bbbc:	f8db 301c 	ldr.w	r3, [fp, #28]
 801bbc0:	6018      	str	r0, [r3, #0]
 801bbc2:	9b07      	ldr	r3, [sp, #28]
 801bbc4:	2b0e      	cmp	r3, #14
 801bbc6:	f200 80a4 	bhi.w	801bd12 <_dtoa_r+0x442>
 801bbca:	2c00      	cmp	r4, #0
 801bbcc:	f000 80a1 	beq.w	801bd12 <_dtoa_r+0x442>
 801bbd0:	2f00      	cmp	r7, #0
 801bbd2:	dd33      	ble.n	801bc3c <_dtoa_r+0x36c>
 801bbd4:	4bad      	ldr	r3, [pc, #692]	@ (801be8c <_dtoa_r+0x5bc>)
 801bbd6:	f007 020f 	and.w	r2, r7, #15
 801bbda:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801bbde:	ed93 7b00 	vldr	d7, [r3]
 801bbe2:	05f8      	lsls	r0, r7, #23
 801bbe4:	ed8d 7b04 	vstr	d7, [sp, #16]
 801bbe8:	ea4f 1427 	mov.w	r4, r7, asr #4
 801bbec:	d516      	bpl.n	801bc1c <_dtoa_r+0x34c>
 801bbee:	4ba8      	ldr	r3, [pc, #672]	@ (801be90 <_dtoa_r+0x5c0>)
 801bbf0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801bbf4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801bbf8:	f7e4 fe00 	bl	80007fc <__aeabi_ddiv>
 801bbfc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801bc00:	f004 040f 	and.w	r4, r4, #15
 801bc04:	2603      	movs	r6, #3
 801bc06:	4da2      	ldr	r5, [pc, #648]	@ (801be90 <_dtoa_r+0x5c0>)
 801bc08:	b954      	cbnz	r4, 801bc20 <_dtoa_r+0x350>
 801bc0a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801bc0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801bc12:	f7e4 fdf3 	bl	80007fc <__aeabi_ddiv>
 801bc16:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801bc1a:	e028      	b.n	801bc6e <_dtoa_r+0x39e>
 801bc1c:	2602      	movs	r6, #2
 801bc1e:	e7f2      	b.n	801bc06 <_dtoa_r+0x336>
 801bc20:	07e1      	lsls	r1, r4, #31
 801bc22:	d508      	bpl.n	801bc36 <_dtoa_r+0x366>
 801bc24:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801bc28:	e9d5 2300 	ldrd	r2, r3, [r5]
 801bc2c:	f7e4 fcbc 	bl	80005a8 <__aeabi_dmul>
 801bc30:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801bc34:	3601      	adds	r6, #1
 801bc36:	1064      	asrs	r4, r4, #1
 801bc38:	3508      	adds	r5, #8
 801bc3a:	e7e5      	b.n	801bc08 <_dtoa_r+0x338>
 801bc3c:	f000 80d2 	beq.w	801bde4 <_dtoa_r+0x514>
 801bc40:	427c      	negs	r4, r7
 801bc42:	4b92      	ldr	r3, [pc, #584]	@ (801be8c <_dtoa_r+0x5bc>)
 801bc44:	4d92      	ldr	r5, [pc, #584]	@ (801be90 <_dtoa_r+0x5c0>)
 801bc46:	f004 020f 	and.w	r2, r4, #15
 801bc4a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801bc4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bc52:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801bc56:	f7e4 fca7 	bl	80005a8 <__aeabi_dmul>
 801bc5a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801bc5e:	1124      	asrs	r4, r4, #4
 801bc60:	2300      	movs	r3, #0
 801bc62:	2602      	movs	r6, #2
 801bc64:	2c00      	cmp	r4, #0
 801bc66:	f040 80b2 	bne.w	801bdce <_dtoa_r+0x4fe>
 801bc6a:	2b00      	cmp	r3, #0
 801bc6c:	d1d3      	bne.n	801bc16 <_dtoa_r+0x346>
 801bc6e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801bc70:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801bc74:	2b00      	cmp	r3, #0
 801bc76:	f000 80b7 	beq.w	801bde8 <_dtoa_r+0x518>
 801bc7a:	4b86      	ldr	r3, [pc, #536]	@ (801be94 <_dtoa_r+0x5c4>)
 801bc7c:	2200      	movs	r2, #0
 801bc7e:	4620      	mov	r0, r4
 801bc80:	4629      	mov	r1, r5
 801bc82:	f7e4 ff03 	bl	8000a8c <__aeabi_dcmplt>
 801bc86:	2800      	cmp	r0, #0
 801bc88:	f000 80ae 	beq.w	801bde8 <_dtoa_r+0x518>
 801bc8c:	9b07      	ldr	r3, [sp, #28]
 801bc8e:	2b00      	cmp	r3, #0
 801bc90:	f000 80aa 	beq.w	801bde8 <_dtoa_r+0x518>
 801bc94:	9b00      	ldr	r3, [sp, #0]
 801bc96:	2b00      	cmp	r3, #0
 801bc98:	dd37      	ble.n	801bd0a <_dtoa_r+0x43a>
 801bc9a:	1e7b      	subs	r3, r7, #1
 801bc9c:	9304      	str	r3, [sp, #16]
 801bc9e:	4620      	mov	r0, r4
 801bca0:	4b7d      	ldr	r3, [pc, #500]	@ (801be98 <_dtoa_r+0x5c8>)
 801bca2:	2200      	movs	r2, #0
 801bca4:	4629      	mov	r1, r5
 801bca6:	f7e4 fc7f 	bl	80005a8 <__aeabi_dmul>
 801bcaa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801bcae:	9c00      	ldr	r4, [sp, #0]
 801bcb0:	3601      	adds	r6, #1
 801bcb2:	4630      	mov	r0, r6
 801bcb4:	f7e4 fc0e 	bl	80004d4 <__aeabi_i2d>
 801bcb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801bcbc:	f7e4 fc74 	bl	80005a8 <__aeabi_dmul>
 801bcc0:	4b76      	ldr	r3, [pc, #472]	@ (801be9c <_dtoa_r+0x5cc>)
 801bcc2:	2200      	movs	r2, #0
 801bcc4:	f7e4 faba 	bl	800023c <__adddf3>
 801bcc8:	4605      	mov	r5, r0
 801bcca:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 801bcce:	2c00      	cmp	r4, #0
 801bcd0:	f040 808d 	bne.w	801bdee <_dtoa_r+0x51e>
 801bcd4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801bcd8:	4b71      	ldr	r3, [pc, #452]	@ (801bea0 <_dtoa_r+0x5d0>)
 801bcda:	2200      	movs	r2, #0
 801bcdc:	f7e4 faac 	bl	8000238 <__aeabi_dsub>
 801bce0:	4602      	mov	r2, r0
 801bce2:	460b      	mov	r3, r1
 801bce4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801bce8:	462a      	mov	r2, r5
 801bcea:	4633      	mov	r3, r6
 801bcec:	f7e4 feec 	bl	8000ac8 <__aeabi_dcmpgt>
 801bcf0:	2800      	cmp	r0, #0
 801bcf2:	f040 828b 	bne.w	801c20c <_dtoa_r+0x93c>
 801bcf6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801bcfa:	462a      	mov	r2, r5
 801bcfc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 801bd00:	f7e4 fec4 	bl	8000a8c <__aeabi_dcmplt>
 801bd04:	2800      	cmp	r0, #0
 801bd06:	f040 8128 	bne.w	801bf5a <_dtoa_r+0x68a>
 801bd0a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 801bd0e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801bd12:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801bd14:	2b00      	cmp	r3, #0
 801bd16:	f2c0 815a 	blt.w	801bfce <_dtoa_r+0x6fe>
 801bd1a:	2f0e      	cmp	r7, #14
 801bd1c:	f300 8157 	bgt.w	801bfce <_dtoa_r+0x6fe>
 801bd20:	4b5a      	ldr	r3, [pc, #360]	@ (801be8c <_dtoa_r+0x5bc>)
 801bd22:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801bd26:	ed93 7b00 	vldr	d7, [r3]
 801bd2a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801bd2c:	2b00      	cmp	r3, #0
 801bd2e:	ed8d 7b00 	vstr	d7, [sp]
 801bd32:	da03      	bge.n	801bd3c <_dtoa_r+0x46c>
 801bd34:	9b07      	ldr	r3, [sp, #28]
 801bd36:	2b00      	cmp	r3, #0
 801bd38:	f340 8101 	ble.w	801bf3e <_dtoa_r+0x66e>
 801bd3c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801bd40:	4656      	mov	r6, sl
 801bd42:	e9dd 2300 	ldrd	r2, r3, [sp]
 801bd46:	4620      	mov	r0, r4
 801bd48:	4629      	mov	r1, r5
 801bd4a:	f7e4 fd57 	bl	80007fc <__aeabi_ddiv>
 801bd4e:	f7e4 fedb 	bl	8000b08 <__aeabi_d2iz>
 801bd52:	4680      	mov	r8, r0
 801bd54:	f7e4 fbbe 	bl	80004d4 <__aeabi_i2d>
 801bd58:	e9dd 2300 	ldrd	r2, r3, [sp]
 801bd5c:	f7e4 fc24 	bl	80005a8 <__aeabi_dmul>
 801bd60:	4602      	mov	r2, r0
 801bd62:	460b      	mov	r3, r1
 801bd64:	4620      	mov	r0, r4
 801bd66:	4629      	mov	r1, r5
 801bd68:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 801bd6c:	f7e4 fa64 	bl	8000238 <__aeabi_dsub>
 801bd70:	f806 4b01 	strb.w	r4, [r6], #1
 801bd74:	9d07      	ldr	r5, [sp, #28]
 801bd76:	eba6 040a 	sub.w	r4, r6, sl
 801bd7a:	42a5      	cmp	r5, r4
 801bd7c:	4602      	mov	r2, r0
 801bd7e:	460b      	mov	r3, r1
 801bd80:	f040 8117 	bne.w	801bfb2 <_dtoa_r+0x6e2>
 801bd84:	f7e4 fa5a 	bl	800023c <__adddf3>
 801bd88:	e9dd 2300 	ldrd	r2, r3, [sp]
 801bd8c:	4604      	mov	r4, r0
 801bd8e:	460d      	mov	r5, r1
 801bd90:	f7e4 fe9a 	bl	8000ac8 <__aeabi_dcmpgt>
 801bd94:	2800      	cmp	r0, #0
 801bd96:	f040 80f9 	bne.w	801bf8c <_dtoa_r+0x6bc>
 801bd9a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801bd9e:	4620      	mov	r0, r4
 801bda0:	4629      	mov	r1, r5
 801bda2:	f7e4 fe69 	bl	8000a78 <__aeabi_dcmpeq>
 801bda6:	b118      	cbz	r0, 801bdb0 <_dtoa_r+0x4e0>
 801bda8:	f018 0f01 	tst.w	r8, #1
 801bdac:	f040 80ee 	bne.w	801bf8c <_dtoa_r+0x6bc>
 801bdb0:	4649      	mov	r1, r9
 801bdb2:	4658      	mov	r0, fp
 801bdb4:	f000 ff26 	bl	801cc04 <_Bfree>
 801bdb8:	2300      	movs	r3, #0
 801bdba:	7033      	strb	r3, [r6, #0]
 801bdbc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801bdbe:	3701      	adds	r7, #1
 801bdc0:	601f      	str	r7, [r3, #0]
 801bdc2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801bdc4:	2b00      	cmp	r3, #0
 801bdc6:	f000 831d 	beq.w	801c404 <_dtoa_r+0xb34>
 801bdca:	601e      	str	r6, [r3, #0]
 801bdcc:	e31a      	b.n	801c404 <_dtoa_r+0xb34>
 801bdce:	07e2      	lsls	r2, r4, #31
 801bdd0:	d505      	bpl.n	801bdde <_dtoa_r+0x50e>
 801bdd2:	e9d5 2300 	ldrd	r2, r3, [r5]
 801bdd6:	f7e4 fbe7 	bl	80005a8 <__aeabi_dmul>
 801bdda:	3601      	adds	r6, #1
 801bddc:	2301      	movs	r3, #1
 801bdde:	1064      	asrs	r4, r4, #1
 801bde0:	3508      	adds	r5, #8
 801bde2:	e73f      	b.n	801bc64 <_dtoa_r+0x394>
 801bde4:	2602      	movs	r6, #2
 801bde6:	e742      	b.n	801bc6e <_dtoa_r+0x39e>
 801bde8:	9c07      	ldr	r4, [sp, #28]
 801bdea:	9704      	str	r7, [sp, #16]
 801bdec:	e761      	b.n	801bcb2 <_dtoa_r+0x3e2>
 801bdee:	4b27      	ldr	r3, [pc, #156]	@ (801be8c <_dtoa_r+0x5bc>)
 801bdf0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801bdf2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801bdf6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801bdfa:	4454      	add	r4, sl
 801bdfc:	2900      	cmp	r1, #0
 801bdfe:	d053      	beq.n	801bea8 <_dtoa_r+0x5d8>
 801be00:	4928      	ldr	r1, [pc, #160]	@ (801bea4 <_dtoa_r+0x5d4>)
 801be02:	2000      	movs	r0, #0
 801be04:	f7e4 fcfa 	bl	80007fc <__aeabi_ddiv>
 801be08:	4633      	mov	r3, r6
 801be0a:	462a      	mov	r2, r5
 801be0c:	f7e4 fa14 	bl	8000238 <__aeabi_dsub>
 801be10:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801be14:	4656      	mov	r6, sl
 801be16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801be1a:	f7e4 fe75 	bl	8000b08 <__aeabi_d2iz>
 801be1e:	4605      	mov	r5, r0
 801be20:	f7e4 fb58 	bl	80004d4 <__aeabi_i2d>
 801be24:	4602      	mov	r2, r0
 801be26:	460b      	mov	r3, r1
 801be28:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801be2c:	f7e4 fa04 	bl	8000238 <__aeabi_dsub>
 801be30:	3530      	adds	r5, #48	@ 0x30
 801be32:	4602      	mov	r2, r0
 801be34:	460b      	mov	r3, r1
 801be36:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801be3a:	f806 5b01 	strb.w	r5, [r6], #1
 801be3e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801be42:	f7e4 fe23 	bl	8000a8c <__aeabi_dcmplt>
 801be46:	2800      	cmp	r0, #0
 801be48:	d171      	bne.n	801bf2e <_dtoa_r+0x65e>
 801be4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801be4e:	4911      	ldr	r1, [pc, #68]	@ (801be94 <_dtoa_r+0x5c4>)
 801be50:	2000      	movs	r0, #0
 801be52:	f7e4 f9f1 	bl	8000238 <__aeabi_dsub>
 801be56:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801be5a:	f7e4 fe17 	bl	8000a8c <__aeabi_dcmplt>
 801be5e:	2800      	cmp	r0, #0
 801be60:	f040 8095 	bne.w	801bf8e <_dtoa_r+0x6be>
 801be64:	42a6      	cmp	r6, r4
 801be66:	f43f af50 	beq.w	801bd0a <_dtoa_r+0x43a>
 801be6a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801be6e:	4b0a      	ldr	r3, [pc, #40]	@ (801be98 <_dtoa_r+0x5c8>)
 801be70:	2200      	movs	r2, #0
 801be72:	f7e4 fb99 	bl	80005a8 <__aeabi_dmul>
 801be76:	4b08      	ldr	r3, [pc, #32]	@ (801be98 <_dtoa_r+0x5c8>)
 801be78:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801be7c:	2200      	movs	r2, #0
 801be7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801be82:	f7e4 fb91 	bl	80005a8 <__aeabi_dmul>
 801be86:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801be8a:	e7c4      	b.n	801be16 <_dtoa_r+0x546>
 801be8c:	080227b0 	.word	0x080227b0
 801be90:	08022788 	.word	0x08022788
 801be94:	3ff00000 	.word	0x3ff00000
 801be98:	40240000 	.word	0x40240000
 801be9c:	401c0000 	.word	0x401c0000
 801bea0:	40140000 	.word	0x40140000
 801bea4:	3fe00000 	.word	0x3fe00000
 801bea8:	4631      	mov	r1, r6
 801beaa:	4628      	mov	r0, r5
 801beac:	f7e4 fb7c 	bl	80005a8 <__aeabi_dmul>
 801beb0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801beb4:	9415      	str	r4, [sp, #84]	@ 0x54
 801beb6:	4656      	mov	r6, sl
 801beb8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801bebc:	f7e4 fe24 	bl	8000b08 <__aeabi_d2iz>
 801bec0:	4605      	mov	r5, r0
 801bec2:	f7e4 fb07 	bl	80004d4 <__aeabi_i2d>
 801bec6:	4602      	mov	r2, r0
 801bec8:	460b      	mov	r3, r1
 801beca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801bece:	f7e4 f9b3 	bl	8000238 <__aeabi_dsub>
 801bed2:	3530      	adds	r5, #48	@ 0x30
 801bed4:	f806 5b01 	strb.w	r5, [r6], #1
 801bed8:	4602      	mov	r2, r0
 801beda:	460b      	mov	r3, r1
 801bedc:	42a6      	cmp	r6, r4
 801bede:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801bee2:	f04f 0200 	mov.w	r2, #0
 801bee6:	d124      	bne.n	801bf32 <_dtoa_r+0x662>
 801bee8:	4bac      	ldr	r3, [pc, #688]	@ (801c19c <_dtoa_r+0x8cc>)
 801beea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801beee:	f7e4 f9a5 	bl	800023c <__adddf3>
 801bef2:	4602      	mov	r2, r0
 801bef4:	460b      	mov	r3, r1
 801bef6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801befa:	f7e4 fde5 	bl	8000ac8 <__aeabi_dcmpgt>
 801befe:	2800      	cmp	r0, #0
 801bf00:	d145      	bne.n	801bf8e <_dtoa_r+0x6be>
 801bf02:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801bf06:	49a5      	ldr	r1, [pc, #660]	@ (801c19c <_dtoa_r+0x8cc>)
 801bf08:	2000      	movs	r0, #0
 801bf0a:	f7e4 f995 	bl	8000238 <__aeabi_dsub>
 801bf0e:	4602      	mov	r2, r0
 801bf10:	460b      	mov	r3, r1
 801bf12:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801bf16:	f7e4 fdb9 	bl	8000a8c <__aeabi_dcmplt>
 801bf1a:	2800      	cmp	r0, #0
 801bf1c:	f43f aef5 	beq.w	801bd0a <_dtoa_r+0x43a>
 801bf20:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 801bf22:	1e73      	subs	r3, r6, #1
 801bf24:	9315      	str	r3, [sp, #84]	@ 0x54
 801bf26:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801bf2a:	2b30      	cmp	r3, #48	@ 0x30
 801bf2c:	d0f8      	beq.n	801bf20 <_dtoa_r+0x650>
 801bf2e:	9f04      	ldr	r7, [sp, #16]
 801bf30:	e73e      	b.n	801bdb0 <_dtoa_r+0x4e0>
 801bf32:	4b9b      	ldr	r3, [pc, #620]	@ (801c1a0 <_dtoa_r+0x8d0>)
 801bf34:	f7e4 fb38 	bl	80005a8 <__aeabi_dmul>
 801bf38:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801bf3c:	e7bc      	b.n	801beb8 <_dtoa_r+0x5e8>
 801bf3e:	d10c      	bne.n	801bf5a <_dtoa_r+0x68a>
 801bf40:	4b98      	ldr	r3, [pc, #608]	@ (801c1a4 <_dtoa_r+0x8d4>)
 801bf42:	2200      	movs	r2, #0
 801bf44:	e9dd 0100 	ldrd	r0, r1, [sp]
 801bf48:	f7e4 fb2e 	bl	80005a8 <__aeabi_dmul>
 801bf4c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801bf50:	f7e4 fdb0 	bl	8000ab4 <__aeabi_dcmpge>
 801bf54:	2800      	cmp	r0, #0
 801bf56:	f000 8157 	beq.w	801c208 <_dtoa_r+0x938>
 801bf5a:	2400      	movs	r4, #0
 801bf5c:	4625      	mov	r5, r4
 801bf5e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801bf60:	43db      	mvns	r3, r3
 801bf62:	9304      	str	r3, [sp, #16]
 801bf64:	4656      	mov	r6, sl
 801bf66:	2700      	movs	r7, #0
 801bf68:	4621      	mov	r1, r4
 801bf6a:	4658      	mov	r0, fp
 801bf6c:	f000 fe4a 	bl	801cc04 <_Bfree>
 801bf70:	2d00      	cmp	r5, #0
 801bf72:	d0dc      	beq.n	801bf2e <_dtoa_r+0x65e>
 801bf74:	b12f      	cbz	r7, 801bf82 <_dtoa_r+0x6b2>
 801bf76:	42af      	cmp	r7, r5
 801bf78:	d003      	beq.n	801bf82 <_dtoa_r+0x6b2>
 801bf7a:	4639      	mov	r1, r7
 801bf7c:	4658      	mov	r0, fp
 801bf7e:	f000 fe41 	bl	801cc04 <_Bfree>
 801bf82:	4629      	mov	r1, r5
 801bf84:	4658      	mov	r0, fp
 801bf86:	f000 fe3d 	bl	801cc04 <_Bfree>
 801bf8a:	e7d0      	b.n	801bf2e <_dtoa_r+0x65e>
 801bf8c:	9704      	str	r7, [sp, #16]
 801bf8e:	4633      	mov	r3, r6
 801bf90:	461e      	mov	r6, r3
 801bf92:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801bf96:	2a39      	cmp	r2, #57	@ 0x39
 801bf98:	d107      	bne.n	801bfaa <_dtoa_r+0x6da>
 801bf9a:	459a      	cmp	sl, r3
 801bf9c:	d1f8      	bne.n	801bf90 <_dtoa_r+0x6c0>
 801bf9e:	9a04      	ldr	r2, [sp, #16]
 801bfa0:	3201      	adds	r2, #1
 801bfa2:	9204      	str	r2, [sp, #16]
 801bfa4:	2230      	movs	r2, #48	@ 0x30
 801bfa6:	f88a 2000 	strb.w	r2, [sl]
 801bfaa:	781a      	ldrb	r2, [r3, #0]
 801bfac:	3201      	adds	r2, #1
 801bfae:	701a      	strb	r2, [r3, #0]
 801bfb0:	e7bd      	b.n	801bf2e <_dtoa_r+0x65e>
 801bfb2:	4b7b      	ldr	r3, [pc, #492]	@ (801c1a0 <_dtoa_r+0x8d0>)
 801bfb4:	2200      	movs	r2, #0
 801bfb6:	f7e4 faf7 	bl	80005a8 <__aeabi_dmul>
 801bfba:	2200      	movs	r2, #0
 801bfbc:	2300      	movs	r3, #0
 801bfbe:	4604      	mov	r4, r0
 801bfc0:	460d      	mov	r5, r1
 801bfc2:	f7e4 fd59 	bl	8000a78 <__aeabi_dcmpeq>
 801bfc6:	2800      	cmp	r0, #0
 801bfc8:	f43f aebb 	beq.w	801bd42 <_dtoa_r+0x472>
 801bfcc:	e6f0      	b.n	801bdb0 <_dtoa_r+0x4e0>
 801bfce:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801bfd0:	2a00      	cmp	r2, #0
 801bfd2:	f000 80db 	beq.w	801c18c <_dtoa_r+0x8bc>
 801bfd6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801bfd8:	2a01      	cmp	r2, #1
 801bfda:	f300 80bf 	bgt.w	801c15c <_dtoa_r+0x88c>
 801bfde:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801bfe0:	2a00      	cmp	r2, #0
 801bfe2:	f000 80b7 	beq.w	801c154 <_dtoa_r+0x884>
 801bfe6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801bfea:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801bfec:	4646      	mov	r6, r8
 801bfee:	9a08      	ldr	r2, [sp, #32]
 801bff0:	2101      	movs	r1, #1
 801bff2:	441a      	add	r2, r3
 801bff4:	4658      	mov	r0, fp
 801bff6:	4498      	add	r8, r3
 801bff8:	9208      	str	r2, [sp, #32]
 801bffa:	f000 ff01 	bl	801ce00 <__i2b>
 801bffe:	4605      	mov	r5, r0
 801c000:	b15e      	cbz	r6, 801c01a <_dtoa_r+0x74a>
 801c002:	9b08      	ldr	r3, [sp, #32]
 801c004:	2b00      	cmp	r3, #0
 801c006:	dd08      	ble.n	801c01a <_dtoa_r+0x74a>
 801c008:	42b3      	cmp	r3, r6
 801c00a:	9a08      	ldr	r2, [sp, #32]
 801c00c:	bfa8      	it	ge
 801c00e:	4633      	movge	r3, r6
 801c010:	eba8 0803 	sub.w	r8, r8, r3
 801c014:	1af6      	subs	r6, r6, r3
 801c016:	1ad3      	subs	r3, r2, r3
 801c018:	9308      	str	r3, [sp, #32]
 801c01a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c01c:	b1f3      	cbz	r3, 801c05c <_dtoa_r+0x78c>
 801c01e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801c020:	2b00      	cmp	r3, #0
 801c022:	f000 80b7 	beq.w	801c194 <_dtoa_r+0x8c4>
 801c026:	b18c      	cbz	r4, 801c04c <_dtoa_r+0x77c>
 801c028:	4629      	mov	r1, r5
 801c02a:	4622      	mov	r2, r4
 801c02c:	4658      	mov	r0, fp
 801c02e:	f000 ffa7 	bl	801cf80 <__pow5mult>
 801c032:	464a      	mov	r2, r9
 801c034:	4601      	mov	r1, r0
 801c036:	4605      	mov	r5, r0
 801c038:	4658      	mov	r0, fp
 801c03a:	f000 fef7 	bl	801ce2c <__multiply>
 801c03e:	4649      	mov	r1, r9
 801c040:	9004      	str	r0, [sp, #16]
 801c042:	4658      	mov	r0, fp
 801c044:	f000 fdde 	bl	801cc04 <_Bfree>
 801c048:	9b04      	ldr	r3, [sp, #16]
 801c04a:	4699      	mov	r9, r3
 801c04c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c04e:	1b1a      	subs	r2, r3, r4
 801c050:	d004      	beq.n	801c05c <_dtoa_r+0x78c>
 801c052:	4649      	mov	r1, r9
 801c054:	4658      	mov	r0, fp
 801c056:	f000 ff93 	bl	801cf80 <__pow5mult>
 801c05a:	4681      	mov	r9, r0
 801c05c:	2101      	movs	r1, #1
 801c05e:	4658      	mov	r0, fp
 801c060:	f000 fece 	bl	801ce00 <__i2b>
 801c064:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801c066:	4604      	mov	r4, r0
 801c068:	2b00      	cmp	r3, #0
 801c06a:	f000 81cf 	beq.w	801c40c <_dtoa_r+0xb3c>
 801c06e:	461a      	mov	r2, r3
 801c070:	4601      	mov	r1, r0
 801c072:	4658      	mov	r0, fp
 801c074:	f000 ff84 	bl	801cf80 <__pow5mult>
 801c078:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c07a:	2b01      	cmp	r3, #1
 801c07c:	4604      	mov	r4, r0
 801c07e:	f300 8095 	bgt.w	801c1ac <_dtoa_r+0x8dc>
 801c082:	9b02      	ldr	r3, [sp, #8]
 801c084:	2b00      	cmp	r3, #0
 801c086:	f040 8087 	bne.w	801c198 <_dtoa_r+0x8c8>
 801c08a:	9b03      	ldr	r3, [sp, #12]
 801c08c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801c090:	2b00      	cmp	r3, #0
 801c092:	f040 8089 	bne.w	801c1a8 <_dtoa_r+0x8d8>
 801c096:	9b03      	ldr	r3, [sp, #12]
 801c098:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801c09c:	0d1b      	lsrs	r3, r3, #20
 801c09e:	051b      	lsls	r3, r3, #20
 801c0a0:	b12b      	cbz	r3, 801c0ae <_dtoa_r+0x7de>
 801c0a2:	9b08      	ldr	r3, [sp, #32]
 801c0a4:	3301      	adds	r3, #1
 801c0a6:	9308      	str	r3, [sp, #32]
 801c0a8:	f108 0801 	add.w	r8, r8, #1
 801c0ac:	2301      	movs	r3, #1
 801c0ae:	930a      	str	r3, [sp, #40]	@ 0x28
 801c0b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801c0b2:	2b00      	cmp	r3, #0
 801c0b4:	f000 81b0 	beq.w	801c418 <_dtoa_r+0xb48>
 801c0b8:	6923      	ldr	r3, [r4, #16]
 801c0ba:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801c0be:	6918      	ldr	r0, [r3, #16]
 801c0c0:	f000 fe52 	bl	801cd68 <__hi0bits>
 801c0c4:	f1c0 0020 	rsb	r0, r0, #32
 801c0c8:	9b08      	ldr	r3, [sp, #32]
 801c0ca:	4418      	add	r0, r3
 801c0cc:	f010 001f 	ands.w	r0, r0, #31
 801c0d0:	d077      	beq.n	801c1c2 <_dtoa_r+0x8f2>
 801c0d2:	f1c0 0320 	rsb	r3, r0, #32
 801c0d6:	2b04      	cmp	r3, #4
 801c0d8:	dd6b      	ble.n	801c1b2 <_dtoa_r+0x8e2>
 801c0da:	9b08      	ldr	r3, [sp, #32]
 801c0dc:	f1c0 001c 	rsb	r0, r0, #28
 801c0e0:	4403      	add	r3, r0
 801c0e2:	4480      	add	r8, r0
 801c0e4:	4406      	add	r6, r0
 801c0e6:	9308      	str	r3, [sp, #32]
 801c0e8:	f1b8 0f00 	cmp.w	r8, #0
 801c0ec:	dd05      	ble.n	801c0fa <_dtoa_r+0x82a>
 801c0ee:	4649      	mov	r1, r9
 801c0f0:	4642      	mov	r2, r8
 801c0f2:	4658      	mov	r0, fp
 801c0f4:	f000 ff9e 	bl	801d034 <__lshift>
 801c0f8:	4681      	mov	r9, r0
 801c0fa:	9b08      	ldr	r3, [sp, #32]
 801c0fc:	2b00      	cmp	r3, #0
 801c0fe:	dd05      	ble.n	801c10c <_dtoa_r+0x83c>
 801c100:	4621      	mov	r1, r4
 801c102:	461a      	mov	r2, r3
 801c104:	4658      	mov	r0, fp
 801c106:	f000 ff95 	bl	801d034 <__lshift>
 801c10a:	4604      	mov	r4, r0
 801c10c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801c10e:	2b00      	cmp	r3, #0
 801c110:	d059      	beq.n	801c1c6 <_dtoa_r+0x8f6>
 801c112:	4621      	mov	r1, r4
 801c114:	4648      	mov	r0, r9
 801c116:	f000 fff9 	bl	801d10c <__mcmp>
 801c11a:	2800      	cmp	r0, #0
 801c11c:	da53      	bge.n	801c1c6 <_dtoa_r+0x8f6>
 801c11e:	1e7b      	subs	r3, r7, #1
 801c120:	9304      	str	r3, [sp, #16]
 801c122:	4649      	mov	r1, r9
 801c124:	2300      	movs	r3, #0
 801c126:	220a      	movs	r2, #10
 801c128:	4658      	mov	r0, fp
 801c12a:	f000 fd8d 	bl	801cc48 <__multadd>
 801c12e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801c130:	4681      	mov	r9, r0
 801c132:	2b00      	cmp	r3, #0
 801c134:	f000 8172 	beq.w	801c41c <_dtoa_r+0xb4c>
 801c138:	2300      	movs	r3, #0
 801c13a:	4629      	mov	r1, r5
 801c13c:	220a      	movs	r2, #10
 801c13e:	4658      	mov	r0, fp
 801c140:	f000 fd82 	bl	801cc48 <__multadd>
 801c144:	9b00      	ldr	r3, [sp, #0]
 801c146:	2b00      	cmp	r3, #0
 801c148:	4605      	mov	r5, r0
 801c14a:	dc67      	bgt.n	801c21c <_dtoa_r+0x94c>
 801c14c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c14e:	2b02      	cmp	r3, #2
 801c150:	dc41      	bgt.n	801c1d6 <_dtoa_r+0x906>
 801c152:	e063      	b.n	801c21c <_dtoa_r+0x94c>
 801c154:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801c156:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 801c15a:	e746      	b.n	801bfea <_dtoa_r+0x71a>
 801c15c:	9b07      	ldr	r3, [sp, #28]
 801c15e:	1e5c      	subs	r4, r3, #1
 801c160:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c162:	42a3      	cmp	r3, r4
 801c164:	bfbf      	itttt	lt
 801c166:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 801c168:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 801c16a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 801c16c:	1ae3      	sublt	r3, r4, r3
 801c16e:	bfb4      	ite	lt
 801c170:	18d2      	addlt	r2, r2, r3
 801c172:	1b1c      	subge	r4, r3, r4
 801c174:	9b07      	ldr	r3, [sp, #28]
 801c176:	bfbc      	itt	lt
 801c178:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 801c17a:	2400      	movlt	r4, #0
 801c17c:	2b00      	cmp	r3, #0
 801c17e:	bfb5      	itete	lt
 801c180:	eba8 0603 	sublt.w	r6, r8, r3
 801c184:	9b07      	ldrge	r3, [sp, #28]
 801c186:	2300      	movlt	r3, #0
 801c188:	4646      	movge	r6, r8
 801c18a:	e730      	b.n	801bfee <_dtoa_r+0x71e>
 801c18c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801c18e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 801c190:	4646      	mov	r6, r8
 801c192:	e735      	b.n	801c000 <_dtoa_r+0x730>
 801c194:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801c196:	e75c      	b.n	801c052 <_dtoa_r+0x782>
 801c198:	2300      	movs	r3, #0
 801c19a:	e788      	b.n	801c0ae <_dtoa_r+0x7de>
 801c19c:	3fe00000 	.word	0x3fe00000
 801c1a0:	40240000 	.word	0x40240000
 801c1a4:	40140000 	.word	0x40140000
 801c1a8:	9b02      	ldr	r3, [sp, #8]
 801c1aa:	e780      	b.n	801c0ae <_dtoa_r+0x7de>
 801c1ac:	2300      	movs	r3, #0
 801c1ae:	930a      	str	r3, [sp, #40]	@ 0x28
 801c1b0:	e782      	b.n	801c0b8 <_dtoa_r+0x7e8>
 801c1b2:	d099      	beq.n	801c0e8 <_dtoa_r+0x818>
 801c1b4:	9a08      	ldr	r2, [sp, #32]
 801c1b6:	331c      	adds	r3, #28
 801c1b8:	441a      	add	r2, r3
 801c1ba:	4498      	add	r8, r3
 801c1bc:	441e      	add	r6, r3
 801c1be:	9208      	str	r2, [sp, #32]
 801c1c0:	e792      	b.n	801c0e8 <_dtoa_r+0x818>
 801c1c2:	4603      	mov	r3, r0
 801c1c4:	e7f6      	b.n	801c1b4 <_dtoa_r+0x8e4>
 801c1c6:	9b07      	ldr	r3, [sp, #28]
 801c1c8:	9704      	str	r7, [sp, #16]
 801c1ca:	2b00      	cmp	r3, #0
 801c1cc:	dc20      	bgt.n	801c210 <_dtoa_r+0x940>
 801c1ce:	9300      	str	r3, [sp, #0]
 801c1d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c1d2:	2b02      	cmp	r3, #2
 801c1d4:	dd1e      	ble.n	801c214 <_dtoa_r+0x944>
 801c1d6:	9b00      	ldr	r3, [sp, #0]
 801c1d8:	2b00      	cmp	r3, #0
 801c1da:	f47f aec0 	bne.w	801bf5e <_dtoa_r+0x68e>
 801c1de:	4621      	mov	r1, r4
 801c1e0:	2205      	movs	r2, #5
 801c1e2:	4658      	mov	r0, fp
 801c1e4:	f000 fd30 	bl	801cc48 <__multadd>
 801c1e8:	4601      	mov	r1, r0
 801c1ea:	4604      	mov	r4, r0
 801c1ec:	4648      	mov	r0, r9
 801c1ee:	f000 ff8d 	bl	801d10c <__mcmp>
 801c1f2:	2800      	cmp	r0, #0
 801c1f4:	f77f aeb3 	ble.w	801bf5e <_dtoa_r+0x68e>
 801c1f8:	4656      	mov	r6, sl
 801c1fa:	2331      	movs	r3, #49	@ 0x31
 801c1fc:	f806 3b01 	strb.w	r3, [r6], #1
 801c200:	9b04      	ldr	r3, [sp, #16]
 801c202:	3301      	adds	r3, #1
 801c204:	9304      	str	r3, [sp, #16]
 801c206:	e6ae      	b.n	801bf66 <_dtoa_r+0x696>
 801c208:	9c07      	ldr	r4, [sp, #28]
 801c20a:	9704      	str	r7, [sp, #16]
 801c20c:	4625      	mov	r5, r4
 801c20e:	e7f3      	b.n	801c1f8 <_dtoa_r+0x928>
 801c210:	9b07      	ldr	r3, [sp, #28]
 801c212:	9300      	str	r3, [sp, #0]
 801c214:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801c216:	2b00      	cmp	r3, #0
 801c218:	f000 8104 	beq.w	801c424 <_dtoa_r+0xb54>
 801c21c:	2e00      	cmp	r6, #0
 801c21e:	dd05      	ble.n	801c22c <_dtoa_r+0x95c>
 801c220:	4629      	mov	r1, r5
 801c222:	4632      	mov	r2, r6
 801c224:	4658      	mov	r0, fp
 801c226:	f000 ff05 	bl	801d034 <__lshift>
 801c22a:	4605      	mov	r5, r0
 801c22c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c22e:	2b00      	cmp	r3, #0
 801c230:	d05a      	beq.n	801c2e8 <_dtoa_r+0xa18>
 801c232:	6869      	ldr	r1, [r5, #4]
 801c234:	4658      	mov	r0, fp
 801c236:	f000 fca5 	bl	801cb84 <_Balloc>
 801c23a:	4606      	mov	r6, r0
 801c23c:	b928      	cbnz	r0, 801c24a <_dtoa_r+0x97a>
 801c23e:	4b84      	ldr	r3, [pc, #528]	@ (801c450 <_dtoa_r+0xb80>)
 801c240:	4602      	mov	r2, r0
 801c242:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801c246:	f7ff bb5a 	b.w	801b8fe <_dtoa_r+0x2e>
 801c24a:	692a      	ldr	r2, [r5, #16]
 801c24c:	3202      	adds	r2, #2
 801c24e:	0092      	lsls	r2, r2, #2
 801c250:	f105 010c 	add.w	r1, r5, #12
 801c254:	300c      	adds	r0, #12
 801c256:	f7ff fa78 	bl	801b74a <memcpy>
 801c25a:	2201      	movs	r2, #1
 801c25c:	4631      	mov	r1, r6
 801c25e:	4658      	mov	r0, fp
 801c260:	f000 fee8 	bl	801d034 <__lshift>
 801c264:	f10a 0301 	add.w	r3, sl, #1
 801c268:	9307      	str	r3, [sp, #28]
 801c26a:	9b00      	ldr	r3, [sp, #0]
 801c26c:	4453      	add	r3, sl
 801c26e:	930b      	str	r3, [sp, #44]	@ 0x2c
 801c270:	9b02      	ldr	r3, [sp, #8]
 801c272:	f003 0301 	and.w	r3, r3, #1
 801c276:	462f      	mov	r7, r5
 801c278:	930a      	str	r3, [sp, #40]	@ 0x28
 801c27a:	4605      	mov	r5, r0
 801c27c:	9b07      	ldr	r3, [sp, #28]
 801c27e:	4621      	mov	r1, r4
 801c280:	3b01      	subs	r3, #1
 801c282:	4648      	mov	r0, r9
 801c284:	9300      	str	r3, [sp, #0]
 801c286:	f7ff fa9b 	bl	801b7c0 <quorem>
 801c28a:	4639      	mov	r1, r7
 801c28c:	9002      	str	r0, [sp, #8]
 801c28e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801c292:	4648      	mov	r0, r9
 801c294:	f000 ff3a 	bl	801d10c <__mcmp>
 801c298:	462a      	mov	r2, r5
 801c29a:	9008      	str	r0, [sp, #32]
 801c29c:	4621      	mov	r1, r4
 801c29e:	4658      	mov	r0, fp
 801c2a0:	f000 ff50 	bl	801d144 <__mdiff>
 801c2a4:	68c2      	ldr	r2, [r0, #12]
 801c2a6:	4606      	mov	r6, r0
 801c2a8:	bb02      	cbnz	r2, 801c2ec <_dtoa_r+0xa1c>
 801c2aa:	4601      	mov	r1, r0
 801c2ac:	4648      	mov	r0, r9
 801c2ae:	f000 ff2d 	bl	801d10c <__mcmp>
 801c2b2:	4602      	mov	r2, r0
 801c2b4:	4631      	mov	r1, r6
 801c2b6:	4658      	mov	r0, fp
 801c2b8:	920e      	str	r2, [sp, #56]	@ 0x38
 801c2ba:	f000 fca3 	bl	801cc04 <_Bfree>
 801c2be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c2c0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801c2c2:	9e07      	ldr	r6, [sp, #28]
 801c2c4:	ea43 0102 	orr.w	r1, r3, r2
 801c2c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c2ca:	4319      	orrs	r1, r3
 801c2cc:	d110      	bne.n	801c2f0 <_dtoa_r+0xa20>
 801c2ce:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801c2d2:	d029      	beq.n	801c328 <_dtoa_r+0xa58>
 801c2d4:	9b08      	ldr	r3, [sp, #32]
 801c2d6:	2b00      	cmp	r3, #0
 801c2d8:	dd02      	ble.n	801c2e0 <_dtoa_r+0xa10>
 801c2da:	9b02      	ldr	r3, [sp, #8]
 801c2dc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 801c2e0:	9b00      	ldr	r3, [sp, #0]
 801c2e2:	f883 8000 	strb.w	r8, [r3]
 801c2e6:	e63f      	b.n	801bf68 <_dtoa_r+0x698>
 801c2e8:	4628      	mov	r0, r5
 801c2ea:	e7bb      	b.n	801c264 <_dtoa_r+0x994>
 801c2ec:	2201      	movs	r2, #1
 801c2ee:	e7e1      	b.n	801c2b4 <_dtoa_r+0x9e4>
 801c2f0:	9b08      	ldr	r3, [sp, #32]
 801c2f2:	2b00      	cmp	r3, #0
 801c2f4:	db04      	blt.n	801c300 <_dtoa_r+0xa30>
 801c2f6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801c2f8:	430b      	orrs	r3, r1
 801c2fa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801c2fc:	430b      	orrs	r3, r1
 801c2fe:	d120      	bne.n	801c342 <_dtoa_r+0xa72>
 801c300:	2a00      	cmp	r2, #0
 801c302:	dded      	ble.n	801c2e0 <_dtoa_r+0xa10>
 801c304:	4649      	mov	r1, r9
 801c306:	2201      	movs	r2, #1
 801c308:	4658      	mov	r0, fp
 801c30a:	f000 fe93 	bl	801d034 <__lshift>
 801c30e:	4621      	mov	r1, r4
 801c310:	4681      	mov	r9, r0
 801c312:	f000 fefb 	bl	801d10c <__mcmp>
 801c316:	2800      	cmp	r0, #0
 801c318:	dc03      	bgt.n	801c322 <_dtoa_r+0xa52>
 801c31a:	d1e1      	bne.n	801c2e0 <_dtoa_r+0xa10>
 801c31c:	f018 0f01 	tst.w	r8, #1
 801c320:	d0de      	beq.n	801c2e0 <_dtoa_r+0xa10>
 801c322:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801c326:	d1d8      	bne.n	801c2da <_dtoa_r+0xa0a>
 801c328:	9a00      	ldr	r2, [sp, #0]
 801c32a:	2339      	movs	r3, #57	@ 0x39
 801c32c:	7013      	strb	r3, [r2, #0]
 801c32e:	4633      	mov	r3, r6
 801c330:	461e      	mov	r6, r3
 801c332:	3b01      	subs	r3, #1
 801c334:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801c338:	2a39      	cmp	r2, #57	@ 0x39
 801c33a:	d052      	beq.n	801c3e2 <_dtoa_r+0xb12>
 801c33c:	3201      	adds	r2, #1
 801c33e:	701a      	strb	r2, [r3, #0]
 801c340:	e612      	b.n	801bf68 <_dtoa_r+0x698>
 801c342:	2a00      	cmp	r2, #0
 801c344:	dd07      	ble.n	801c356 <_dtoa_r+0xa86>
 801c346:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801c34a:	d0ed      	beq.n	801c328 <_dtoa_r+0xa58>
 801c34c:	9a00      	ldr	r2, [sp, #0]
 801c34e:	f108 0301 	add.w	r3, r8, #1
 801c352:	7013      	strb	r3, [r2, #0]
 801c354:	e608      	b.n	801bf68 <_dtoa_r+0x698>
 801c356:	9b07      	ldr	r3, [sp, #28]
 801c358:	9a07      	ldr	r2, [sp, #28]
 801c35a:	f803 8c01 	strb.w	r8, [r3, #-1]
 801c35e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801c360:	4293      	cmp	r3, r2
 801c362:	d028      	beq.n	801c3b6 <_dtoa_r+0xae6>
 801c364:	4649      	mov	r1, r9
 801c366:	2300      	movs	r3, #0
 801c368:	220a      	movs	r2, #10
 801c36a:	4658      	mov	r0, fp
 801c36c:	f000 fc6c 	bl	801cc48 <__multadd>
 801c370:	42af      	cmp	r7, r5
 801c372:	4681      	mov	r9, r0
 801c374:	f04f 0300 	mov.w	r3, #0
 801c378:	f04f 020a 	mov.w	r2, #10
 801c37c:	4639      	mov	r1, r7
 801c37e:	4658      	mov	r0, fp
 801c380:	d107      	bne.n	801c392 <_dtoa_r+0xac2>
 801c382:	f000 fc61 	bl	801cc48 <__multadd>
 801c386:	4607      	mov	r7, r0
 801c388:	4605      	mov	r5, r0
 801c38a:	9b07      	ldr	r3, [sp, #28]
 801c38c:	3301      	adds	r3, #1
 801c38e:	9307      	str	r3, [sp, #28]
 801c390:	e774      	b.n	801c27c <_dtoa_r+0x9ac>
 801c392:	f000 fc59 	bl	801cc48 <__multadd>
 801c396:	4629      	mov	r1, r5
 801c398:	4607      	mov	r7, r0
 801c39a:	2300      	movs	r3, #0
 801c39c:	220a      	movs	r2, #10
 801c39e:	4658      	mov	r0, fp
 801c3a0:	f000 fc52 	bl	801cc48 <__multadd>
 801c3a4:	4605      	mov	r5, r0
 801c3a6:	e7f0      	b.n	801c38a <_dtoa_r+0xaba>
 801c3a8:	9b00      	ldr	r3, [sp, #0]
 801c3aa:	2b00      	cmp	r3, #0
 801c3ac:	bfcc      	ite	gt
 801c3ae:	461e      	movgt	r6, r3
 801c3b0:	2601      	movle	r6, #1
 801c3b2:	4456      	add	r6, sl
 801c3b4:	2700      	movs	r7, #0
 801c3b6:	4649      	mov	r1, r9
 801c3b8:	2201      	movs	r2, #1
 801c3ba:	4658      	mov	r0, fp
 801c3bc:	f000 fe3a 	bl	801d034 <__lshift>
 801c3c0:	4621      	mov	r1, r4
 801c3c2:	4681      	mov	r9, r0
 801c3c4:	f000 fea2 	bl	801d10c <__mcmp>
 801c3c8:	2800      	cmp	r0, #0
 801c3ca:	dcb0      	bgt.n	801c32e <_dtoa_r+0xa5e>
 801c3cc:	d102      	bne.n	801c3d4 <_dtoa_r+0xb04>
 801c3ce:	f018 0f01 	tst.w	r8, #1
 801c3d2:	d1ac      	bne.n	801c32e <_dtoa_r+0xa5e>
 801c3d4:	4633      	mov	r3, r6
 801c3d6:	461e      	mov	r6, r3
 801c3d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801c3dc:	2a30      	cmp	r2, #48	@ 0x30
 801c3de:	d0fa      	beq.n	801c3d6 <_dtoa_r+0xb06>
 801c3e0:	e5c2      	b.n	801bf68 <_dtoa_r+0x698>
 801c3e2:	459a      	cmp	sl, r3
 801c3e4:	d1a4      	bne.n	801c330 <_dtoa_r+0xa60>
 801c3e6:	9b04      	ldr	r3, [sp, #16]
 801c3e8:	3301      	adds	r3, #1
 801c3ea:	9304      	str	r3, [sp, #16]
 801c3ec:	2331      	movs	r3, #49	@ 0x31
 801c3ee:	f88a 3000 	strb.w	r3, [sl]
 801c3f2:	e5b9      	b.n	801bf68 <_dtoa_r+0x698>
 801c3f4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801c3f6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 801c454 <_dtoa_r+0xb84>
 801c3fa:	b11b      	cbz	r3, 801c404 <_dtoa_r+0xb34>
 801c3fc:	f10a 0308 	add.w	r3, sl, #8
 801c400:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801c402:	6013      	str	r3, [r2, #0]
 801c404:	4650      	mov	r0, sl
 801c406:	b019      	add	sp, #100	@ 0x64
 801c408:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c40c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c40e:	2b01      	cmp	r3, #1
 801c410:	f77f ae37 	ble.w	801c082 <_dtoa_r+0x7b2>
 801c414:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801c416:	930a      	str	r3, [sp, #40]	@ 0x28
 801c418:	2001      	movs	r0, #1
 801c41a:	e655      	b.n	801c0c8 <_dtoa_r+0x7f8>
 801c41c:	9b00      	ldr	r3, [sp, #0]
 801c41e:	2b00      	cmp	r3, #0
 801c420:	f77f aed6 	ble.w	801c1d0 <_dtoa_r+0x900>
 801c424:	4656      	mov	r6, sl
 801c426:	4621      	mov	r1, r4
 801c428:	4648      	mov	r0, r9
 801c42a:	f7ff f9c9 	bl	801b7c0 <quorem>
 801c42e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801c432:	f806 8b01 	strb.w	r8, [r6], #1
 801c436:	9b00      	ldr	r3, [sp, #0]
 801c438:	eba6 020a 	sub.w	r2, r6, sl
 801c43c:	4293      	cmp	r3, r2
 801c43e:	ddb3      	ble.n	801c3a8 <_dtoa_r+0xad8>
 801c440:	4649      	mov	r1, r9
 801c442:	2300      	movs	r3, #0
 801c444:	220a      	movs	r2, #10
 801c446:	4658      	mov	r0, fp
 801c448:	f000 fbfe 	bl	801cc48 <__multadd>
 801c44c:	4681      	mov	r9, r0
 801c44e:	e7ea      	b.n	801c426 <_dtoa_r+0xb56>
 801c450:	080226ac 	.word	0x080226ac
 801c454:	08022647 	.word	0x08022647

0801c458 <_free_r>:
 801c458:	b538      	push	{r3, r4, r5, lr}
 801c45a:	4605      	mov	r5, r0
 801c45c:	2900      	cmp	r1, #0
 801c45e:	d041      	beq.n	801c4e4 <_free_r+0x8c>
 801c460:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801c464:	1f0c      	subs	r4, r1, #4
 801c466:	2b00      	cmp	r3, #0
 801c468:	bfb8      	it	lt
 801c46a:	18e4      	addlt	r4, r4, r3
 801c46c:	f7fd f98e 	bl	801978c <__malloc_lock>
 801c470:	4a1d      	ldr	r2, [pc, #116]	@ (801c4e8 <_free_r+0x90>)
 801c472:	6813      	ldr	r3, [r2, #0]
 801c474:	b933      	cbnz	r3, 801c484 <_free_r+0x2c>
 801c476:	6063      	str	r3, [r4, #4]
 801c478:	6014      	str	r4, [r2, #0]
 801c47a:	4628      	mov	r0, r5
 801c47c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801c480:	f7fd b98a 	b.w	8019798 <__malloc_unlock>
 801c484:	42a3      	cmp	r3, r4
 801c486:	d908      	bls.n	801c49a <_free_r+0x42>
 801c488:	6820      	ldr	r0, [r4, #0]
 801c48a:	1821      	adds	r1, r4, r0
 801c48c:	428b      	cmp	r3, r1
 801c48e:	bf01      	itttt	eq
 801c490:	6819      	ldreq	r1, [r3, #0]
 801c492:	685b      	ldreq	r3, [r3, #4]
 801c494:	1809      	addeq	r1, r1, r0
 801c496:	6021      	streq	r1, [r4, #0]
 801c498:	e7ed      	b.n	801c476 <_free_r+0x1e>
 801c49a:	461a      	mov	r2, r3
 801c49c:	685b      	ldr	r3, [r3, #4]
 801c49e:	b10b      	cbz	r3, 801c4a4 <_free_r+0x4c>
 801c4a0:	42a3      	cmp	r3, r4
 801c4a2:	d9fa      	bls.n	801c49a <_free_r+0x42>
 801c4a4:	6811      	ldr	r1, [r2, #0]
 801c4a6:	1850      	adds	r0, r2, r1
 801c4a8:	42a0      	cmp	r0, r4
 801c4aa:	d10b      	bne.n	801c4c4 <_free_r+0x6c>
 801c4ac:	6820      	ldr	r0, [r4, #0]
 801c4ae:	4401      	add	r1, r0
 801c4b0:	1850      	adds	r0, r2, r1
 801c4b2:	4283      	cmp	r3, r0
 801c4b4:	6011      	str	r1, [r2, #0]
 801c4b6:	d1e0      	bne.n	801c47a <_free_r+0x22>
 801c4b8:	6818      	ldr	r0, [r3, #0]
 801c4ba:	685b      	ldr	r3, [r3, #4]
 801c4bc:	6053      	str	r3, [r2, #4]
 801c4be:	4408      	add	r0, r1
 801c4c0:	6010      	str	r0, [r2, #0]
 801c4c2:	e7da      	b.n	801c47a <_free_r+0x22>
 801c4c4:	d902      	bls.n	801c4cc <_free_r+0x74>
 801c4c6:	230c      	movs	r3, #12
 801c4c8:	602b      	str	r3, [r5, #0]
 801c4ca:	e7d6      	b.n	801c47a <_free_r+0x22>
 801c4cc:	6820      	ldr	r0, [r4, #0]
 801c4ce:	1821      	adds	r1, r4, r0
 801c4d0:	428b      	cmp	r3, r1
 801c4d2:	bf04      	itt	eq
 801c4d4:	6819      	ldreq	r1, [r3, #0]
 801c4d6:	685b      	ldreq	r3, [r3, #4]
 801c4d8:	6063      	str	r3, [r4, #4]
 801c4da:	bf04      	itt	eq
 801c4dc:	1809      	addeq	r1, r1, r0
 801c4de:	6021      	streq	r1, [r4, #0]
 801c4e0:	6054      	str	r4, [r2, #4]
 801c4e2:	e7ca      	b.n	801c47a <_free_r+0x22>
 801c4e4:	bd38      	pop	{r3, r4, r5, pc}
 801c4e6:	bf00      	nop
 801c4e8:	20003068 	.word	0x20003068

0801c4ec <rshift>:
 801c4ec:	6903      	ldr	r3, [r0, #16]
 801c4ee:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801c4f2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801c4f6:	ea4f 1261 	mov.w	r2, r1, asr #5
 801c4fa:	f100 0414 	add.w	r4, r0, #20
 801c4fe:	dd45      	ble.n	801c58c <rshift+0xa0>
 801c500:	f011 011f 	ands.w	r1, r1, #31
 801c504:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801c508:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801c50c:	d10c      	bne.n	801c528 <rshift+0x3c>
 801c50e:	f100 0710 	add.w	r7, r0, #16
 801c512:	4629      	mov	r1, r5
 801c514:	42b1      	cmp	r1, r6
 801c516:	d334      	bcc.n	801c582 <rshift+0x96>
 801c518:	1a9b      	subs	r3, r3, r2
 801c51a:	009b      	lsls	r3, r3, #2
 801c51c:	1eea      	subs	r2, r5, #3
 801c51e:	4296      	cmp	r6, r2
 801c520:	bf38      	it	cc
 801c522:	2300      	movcc	r3, #0
 801c524:	4423      	add	r3, r4
 801c526:	e015      	b.n	801c554 <rshift+0x68>
 801c528:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801c52c:	f1c1 0820 	rsb	r8, r1, #32
 801c530:	40cf      	lsrs	r7, r1
 801c532:	f105 0e04 	add.w	lr, r5, #4
 801c536:	46a1      	mov	r9, r4
 801c538:	4576      	cmp	r6, lr
 801c53a:	46f4      	mov	ip, lr
 801c53c:	d815      	bhi.n	801c56a <rshift+0x7e>
 801c53e:	1a9a      	subs	r2, r3, r2
 801c540:	0092      	lsls	r2, r2, #2
 801c542:	3a04      	subs	r2, #4
 801c544:	3501      	adds	r5, #1
 801c546:	42ae      	cmp	r6, r5
 801c548:	bf38      	it	cc
 801c54a:	2200      	movcc	r2, #0
 801c54c:	18a3      	adds	r3, r4, r2
 801c54e:	50a7      	str	r7, [r4, r2]
 801c550:	b107      	cbz	r7, 801c554 <rshift+0x68>
 801c552:	3304      	adds	r3, #4
 801c554:	1b1a      	subs	r2, r3, r4
 801c556:	42a3      	cmp	r3, r4
 801c558:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801c55c:	bf08      	it	eq
 801c55e:	2300      	moveq	r3, #0
 801c560:	6102      	str	r2, [r0, #16]
 801c562:	bf08      	it	eq
 801c564:	6143      	streq	r3, [r0, #20]
 801c566:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c56a:	f8dc c000 	ldr.w	ip, [ip]
 801c56e:	fa0c fc08 	lsl.w	ip, ip, r8
 801c572:	ea4c 0707 	orr.w	r7, ip, r7
 801c576:	f849 7b04 	str.w	r7, [r9], #4
 801c57a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801c57e:	40cf      	lsrs	r7, r1
 801c580:	e7da      	b.n	801c538 <rshift+0x4c>
 801c582:	f851 cb04 	ldr.w	ip, [r1], #4
 801c586:	f847 cf04 	str.w	ip, [r7, #4]!
 801c58a:	e7c3      	b.n	801c514 <rshift+0x28>
 801c58c:	4623      	mov	r3, r4
 801c58e:	e7e1      	b.n	801c554 <rshift+0x68>

0801c590 <__hexdig_fun>:
 801c590:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 801c594:	2b09      	cmp	r3, #9
 801c596:	d802      	bhi.n	801c59e <__hexdig_fun+0xe>
 801c598:	3820      	subs	r0, #32
 801c59a:	b2c0      	uxtb	r0, r0
 801c59c:	4770      	bx	lr
 801c59e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 801c5a2:	2b05      	cmp	r3, #5
 801c5a4:	d801      	bhi.n	801c5aa <__hexdig_fun+0x1a>
 801c5a6:	3847      	subs	r0, #71	@ 0x47
 801c5a8:	e7f7      	b.n	801c59a <__hexdig_fun+0xa>
 801c5aa:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 801c5ae:	2b05      	cmp	r3, #5
 801c5b0:	d801      	bhi.n	801c5b6 <__hexdig_fun+0x26>
 801c5b2:	3827      	subs	r0, #39	@ 0x27
 801c5b4:	e7f1      	b.n	801c59a <__hexdig_fun+0xa>
 801c5b6:	2000      	movs	r0, #0
 801c5b8:	4770      	bx	lr
	...

0801c5bc <__gethex>:
 801c5bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c5c0:	b085      	sub	sp, #20
 801c5c2:	468a      	mov	sl, r1
 801c5c4:	9302      	str	r3, [sp, #8]
 801c5c6:	680b      	ldr	r3, [r1, #0]
 801c5c8:	9001      	str	r0, [sp, #4]
 801c5ca:	4690      	mov	r8, r2
 801c5cc:	1c9c      	adds	r4, r3, #2
 801c5ce:	46a1      	mov	r9, r4
 801c5d0:	f814 0b01 	ldrb.w	r0, [r4], #1
 801c5d4:	2830      	cmp	r0, #48	@ 0x30
 801c5d6:	d0fa      	beq.n	801c5ce <__gethex+0x12>
 801c5d8:	eba9 0303 	sub.w	r3, r9, r3
 801c5dc:	f1a3 0b02 	sub.w	fp, r3, #2
 801c5e0:	f7ff ffd6 	bl	801c590 <__hexdig_fun>
 801c5e4:	4605      	mov	r5, r0
 801c5e6:	2800      	cmp	r0, #0
 801c5e8:	d168      	bne.n	801c6bc <__gethex+0x100>
 801c5ea:	49a0      	ldr	r1, [pc, #640]	@ (801c86c <__gethex+0x2b0>)
 801c5ec:	2201      	movs	r2, #1
 801c5ee:	4648      	mov	r0, r9
 801c5f0:	f7fe ff97 	bl	801b522 <strncmp>
 801c5f4:	4607      	mov	r7, r0
 801c5f6:	2800      	cmp	r0, #0
 801c5f8:	d167      	bne.n	801c6ca <__gethex+0x10e>
 801c5fa:	f899 0001 	ldrb.w	r0, [r9, #1]
 801c5fe:	4626      	mov	r6, r4
 801c600:	f7ff ffc6 	bl	801c590 <__hexdig_fun>
 801c604:	2800      	cmp	r0, #0
 801c606:	d062      	beq.n	801c6ce <__gethex+0x112>
 801c608:	4623      	mov	r3, r4
 801c60a:	7818      	ldrb	r0, [r3, #0]
 801c60c:	2830      	cmp	r0, #48	@ 0x30
 801c60e:	4699      	mov	r9, r3
 801c610:	f103 0301 	add.w	r3, r3, #1
 801c614:	d0f9      	beq.n	801c60a <__gethex+0x4e>
 801c616:	f7ff ffbb 	bl	801c590 <__hexdig_fun>
 801c61a:	fab0 f580 	clz	r5, r0
 801c61e:	096d      	lsrs	r5, r5, #5
 801c620:	f04f 0b01 	mov.w	fp, #1
 801c624:	464a      	mov	r2, r9
 801c626:	4616      	mov	r6, r2
 801c628:	3201      	adds	r2, #1
 801c62a:	7830      	ldrb	r0, [r6, #0]
 801c62c:	f7ff ffb0 	bl	801c590 <__hexdig_fun>
 801c630:	2800      	cmp	r0, #0
 801c632:	d1f8      	bne.n	801c626 <__gethex+0x6a>
 801c634:	498d      	ldr	r1, [pc, #564]	@ (801c86c <__gethex+0x2b0>)
 801c636:	2201      	movs	r2, #1
 801c638:	4630      	mov	r0, r6
 801c63a:	f7fe ff72 	bl	801b522 <strncmp>
 801c63e:	2800      	cmp	r0, #0
 801c640:	d13f      	bne.n	801c6c2 <__gethex+0x106>
 801c642:	b944      	cbnz	r4, 801c656 <__gethex+0x9a>
 801c644:	1c74      	adds	r4, r6, #1
 801c646:	4622      	mov	r2, r4
 801c648:	4616      	mov	r6, r2
 801c64a:	3201      	adds	r2, #1
 801c64c:	7830      	ldrb	r0, [r6, #0]
 801c64e:	f7ff ff9f 	bl	801c590 <__hexdig_fun>
 801c652:	2800      	cmp	r0, #0
 801c654:	d1f8      	bne.n	801c648 <__gethex+0x8c>
 801c656:	1ba4      	subs	r4, r4, r6
 801c658:	00a7      	lsls	r7, r4, #2
 801c65a:	7833      	ldrb	r3, [r6, #0]
 801c65c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 801c660:	2b50      	cmp	r3, #80	@ 0x50
 801c662:	d13e      	bne.n	801c6e2 <__gethex+0x126>
 801c664:	7873      	ldrb	r3, [r6, #1]
 801c666:	2b2b      	cmp	r3, #43	@ 0x2b
 801c668:	d033      	beq.n	801c6d2 <__gethex+0x116>
 801c66a:	2b2d      	cmp	r3, #45	@ 0x2d
 801c66c:	d034      	beq.n	801c6d8 <__gethex+0x11c>
 801c66e:	1c71      	adds	r1, r6, #1
 801c670:	2400      	movs	r4, #0
 801c672:	7808      	ldrb	r0, [r1, #0]
 801c674:	f7ff ff8c 	bl	801c590 <__hexdig_fun>
 801c678:	1e43      	subs	r3, r0, #1
 801c67a:	b2db      	uxtb	r3, r3
 801c67c:	2b18      	cmp	r3, #24
 801c67e:	d830      	bhi.n	801c6e2 <__gethex+0x126>
 801c680:	f1a0 0210 	sub.w	r2, r0, #16
 801c684:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801c688:	f7ff ff82 	bl	801c590 <__hexdig_fun>
 801c68c:	f100 3cff 	add.w	ip, r0, #4294967295
 801c690:	fa5f fc8c 	uxtb.w	ip, ip
 801c694:	f1bc 0f18 	cmp.w	ip, #24
 801c698:	f04f 030a 	mov.w	r3, #10
 801c69c:	d91e      	bls.n	801c6dc <__gethex+0x120>
 801c69e:	b104      	cbz	r4, 801c6a2 <__gethex+0xe6>
 801c6a0:	4252      	negs	r2, r2
 801c6a2:	4417      	add	r7, r2
 801c6a4:	f8ca 1000 	str.w	r1, [sl]
 801c6a8:	b1ed      	cbz	r5, 801c6e6 <__gethex+0x12a>
 801c6aa:	f1bb 0f00 	cmp.w	fp, #0
 801c6ae:	bf0c      	ite	eq
 801c6b0:	2506      	moveq	r5, #6
 801c6b2:	2500      	movne	r5, #0
 801c6b4:	4628      	mov	r0, r5
 801c6b6:	b005      	add	sp, #20
 801c6b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c6bc:	2500      	movs	r5, #0
 801c6be:	462c      	mov	r4, r5
 801c6c0:	e7b0      	b.n	801c624 <__gethex+0x68>
 801c6c2:	2c00      	cmp	r4, #0
 801c6c4:	d1c7      	bne.n	801c656 <__gethex+0x9a>
 801c6c6:	4627      	mov	r7, r4
 801c6c8:	e7c7      	b.n	801c65a <__gethex+0x9e>
 801c6ca:	464e      	mov	r6, r9
 801c6cc:	462f      	mov	r7, r5
 801c6ce:	2501      	movs	r5, #1
 801c6d0:	e7c3      	b.n	801c65a <__gethex+0x9e>
 801c6d2:	2400      	movs	r4, #0
 801c6d4:	1cb1      	adds	r1, r6, #2
 801c6d6:	e7cc      	b.n	801c672 <__gethex+0xb6>
 801c6d8:	2401      	movs	r4, #1
 801c6da:	e7fb      	b.n	801c6d4 <__gethex+0x118>
 801c6dc:	fb03 0002 	mla	r0, r3, r2, r0
 801c6e0:	e7ce      	b.n	801c680 <__gethex+0xc4>
 801c6e2:	4631      	mov	r1, r6
 801c6e4:	e7de      	b.n	801c6a4 <__gethex+0xe8>
 801c6e6:	eba6 0309 	sub.w	r3, r6, r9
 801c6ea:	3b01      	subs	r3, #1
 801c6ec:	4629      	mov	r1, r5
 801c6ee:	2b07      	cmp	r3, #7
 801c6f0:	dc0a      	bgt.n	801c708 <__gethex+0x14c>
 801c6f2:	9801      	ldr	r0, [sp, #4]
 801c6f4:	f000 fa46 	bl	801cb84 <_Balloc>
 801c6f8:	4604      	mov	r4, r0
 801c6fa:	b940      	cbnz	r0, 801c70e <__gethex+0x152>
 801c6fc:	4b5c      	ldr	r3, [pc, #368]	@ (801c870 <__gethex+0x2b4>)
 801c6fe:	4602      	mov	r2, r0
 801c700:	21e4      	movs	r1, #228	@ 0xe4
 801c702:	485c      	ldr	r0, [pc, #368]	@ (801c874 <__gethex+0x2b8>)
 801c704:	f7ff f83e 	bl	801b784 <__assert_func>
 801c708:	3101      	adds	r1, #1
 801c70a:	105b      	asrs	r3, r3, #1
 801c70c:	e7ef      	b.n	801c6ee <__gethex+0x132>
 801c70e:	f100 0a14 	add.w	sl, r0, #20
 801c712:	2300      	movs	r3, #0
 801c714:	4655      	mov	r5, sl
 801c716:	469b      	mov	fp, r3
 801c718:	45b1      	cmp	r9, r6
 801c71a:	d337      	bcc.n	801c78c <__gethex+0x1d0>
 801c71c:	f845 bb04 	str.w	fp, [r5], #4
 801c720:	eba5 050a 	sub.w	r5, r5, sl
 801c724:	10ad      	asrs	r5, r5, #2
 801c726:	6125      	str	r5, [r4, #16]
 801c728:	4658      	mov	r0, fp
 801c72a:	f000 fb1d 	bl	801cd68 <__hi0bits>
 801c72e:	016d      	lsls	r5, r5, #5
 801c730:	f8d8 6000 	ldr.w	r6, [r8]
 801c734:	1a2d      	subs	r5, r5, r0
 801c736:	42b5      	cmp	r5, r6
 801c738:	dd54      	ble.n	801c7e4 <__gethex+0x228>
 801c73a:	1bad      	subs	r5, r5, r6
 801c73c:	4629      	mov	r1, r5
 801c73e:	4620      	mov	r0, r4
 801c740:	f000 feb1 	bl	801d4a6 <__any_on>
 801c744:	4681      	mov	r9, r0
 801c746:	b178      	cbz	r0, 801c768 <__gethex+0x1ac>
 801c748:	1e6b      	subs	r3, r5, #1
 801c74a:	1159      	asrs	r1, r3, #5
 801c74c:	f003 021f 	and.w	r2, r3, #31
 801c750:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 801c754:	f04f 0901 	mov.w	r9, #1
 801c758:	fa09 f202 	lsl.w	r2, r9, r2
 801c75c:	420a      	tst	r2, r1
 801c75e:	d003      	beq.n	801c768 <__gethex+0x1ac>
 801c760:	454b      	cmp	r3, r9
 801c762:	dc36      	bgt.n	801c7d2 <__gethex+0x216>
 801c764:	f04f 0902 	mov.w	r9, #2
 801c768:	4629      	mov	r1, r5
 801c76a:	4620      	mov	r0, r4
 801c76c:	f7ff febe 	bl	801c4ec <rshift>
 801c770:	442f      	add	r7, r5
 801c772:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801c776:	42bb      	cmp	r3, r7
 801c778:	da42      	bge.n	801c800 <__gethex+0x244>
 801c77a:	9801      	ldr	r0, [sp, #4]
 801c77c:	4621      	mov	r1, r4
 801c77e:	f000 fa41 	bl	801cc04 <_Bfree>
 801c782:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801c784:	2300      	movs	r3, #0
 801c786:	6013      	str	r3, [r2, #0]
 801c788:	25a3      	movs	r5, #163	@ 0xa3
 801c78a:	e793      	b.n	801c6b4 <__gethex+0xf8>
 801c78c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 801c790:	2a2e      	cmp	r2, #46	@ 0x2e
 801c792:	d012      	beq.n	801c7ba <__gethex+0x1fe>
 801c794:	2b20      	cmp	r3, #32
 801c796:	d104      	bne.n	801c7a2 <__gethex+0x1e6>
 801c798:	f845 bb04 	str.w	fp, [r5], #4
 801c79c:	f04f 0b00 	mov.w	fp, #0
 801c7a0:	465b      	mov	r3, fp
 801c7a2:	7830      	ldrb	r0, [r6, #0]
 801c7a4:	9303      	str	r3, [sp, #12]
 801c7a6:	f7ff fef3 	bl	801c590 <__hexdig_fun>
 801c7aa:	9b03      	ldr	r3, [sp, #12]
 801c7ac:	f000 000f 	and.w	r0, r0, #15
 801c7b0:	4098      	lsls	r0, r3
 801c7b2:	ea4b 0b00 	orr.w	fp, fp, r0
 801c7b6:	3304      	adds	r3, #4
 801c7b8:	e7ae      	b.n	801c718 <__gethex+0x15c>
 801c7ba:	45b1      	cmp	r9, r6
 801c7bc:	d8ea      	bhi.n	801c794 <__gethex+0x1d8>
 801c7be:	492b      	ldr	r1, [pc, #172]	@ (801c86c <__gethex+0x2b0>)
 801c7c0:	9303      	str	r3, [sp, #12]
 801c7c2:	2201      	movs	r2, #1
 801c7c4:	4630      	mov	r0, r6
 801c7c6:	f7fe feac 	bl	801b522 <strncmp>
 801c7ca:	9b03      	ldr	r3, [sp, #12]
 801c7cc:	2800      	cmp	r0, #0
 801c7ce:	d1e1      	bne.n	801c794 <__gethex+0x1d8>
 801c7d0:	e7a2      	b.n	801c718 <__gethex+0x15c>
 801c7d2:	1ea9      	subs	r1, r5, #2
 801c7d4:	4620      	mov	r0, r4
 801c7d6:	f000 fe66 	bl	801d4a6 <__any_on>
 801c7da:	2800      	cmp	r0, #0
 801c7dc:	d0c2      	beq.n	801c764 <__gethex+0x1a8>
 801c7de:	f04f 0903 	mov.w	r9, #3
 801c7e2:	e7c1      	b.n	801c768 <__gethex+0x1ac>
 801c7e4:	da09      	bge.n	801c7fa <__gethex+0x23e>
 801c7e6:	1b75      	subs	r5, r6, r5
 801c7e8:	4621      	mov	r1, r4
 801c7ea:	9801      	ldr	r0, [sp, #4]
 801c7ec:	462a      	mov	r2, r5
 801c7ee:	f000 fc21 	bl	801d034 <__lshift>
 801c7f2:	1b7f      	subs	r7, r7, r5
 801c7f4:	4604      	mov	r4, r0
 801c7f6:	f100 0a14 	add.w	sl, r0, #20
 801c7fa:	f04f 0900 	mov.w	r9, #0
 801c7fe:	e7b8      	b.n	801c772 <__gethex+0x1b6>
 801c800:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801c804:	42bd      	cmp	r5, r7
 801c806:	dd6f      	ble.n	801c8e8 <__gethex+0x32c>
 801c808:	1bed      	subs	r5, r5, r7
 801c80a:	42ae      	cmp	r6, r5
 801c80c:	dc34      	bgt.n	801c878 <__gethex+0x2bc>
 801c80e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801c812:	2b02      	cmp	r3, #2
 801c814:	d022      	beq.n	801c85c <__gethex+0x2a0>
 801c816:	2b03      	cmp	r3, #3
 801c818:	d024      	beq.n	801c864 <__gethex+0x2a8>
 801c81a:	2b01      	cmp	r3, #1
 801c81c:	d115      	bne.n	801c84a <__gethex+0x28e>
 801c81e:	42ae      	cmp	r6, r5
 801c820:	d113      	bne.n	801c84a <__gethex+0x28e>
 801c822:	2e01      	cmp	r6, #1
 801c824:	d10b      	bne.n	801c83e <__gethex+0x282>
 801c826:	9a02      	ldr	r2, [sp, #8]
 801c828:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801c82c:	6013      	str	r3, [r2, #0]
 801c82e:	2301      	movs	r3, #1
 801c830:	6123      	str	r3, [r4, #16]
 801c832:	f8ca 3000 	str.w	r3, [sl]
 801c836:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c838:	2562      	movs	r5, #98	@ 0x62
 801c83a:	601c      	str	r4, [r3, #0]
 801c83c:	e73a      	b.n	801c6b4 <__gethex+0xf8>
 801c83e:	1e71      	subs	r1, r6, #1
 801c840:	4620      	mov	r0, r4
 801c842:	f000 fe30 	bl	801d4a6 <__any_on>
 801c846:	2800      	cmp	r0, #0
 801c848:	d1ed      	bne.n	801c826 <__gethex+0x26a>
 801c84a:	9801      	ldr	r0, [sp, #4]
 801c84c:	4621      	mov	r1, r4
 801c84e:	f000 f9d9 	bl	801cc04 <_Bfree>
 801c852:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801c854:	2300      	movs	r3, #0
 801c856:	6013      	str	r3, [r2, #0]
 801c858:	2550      	movs	r5, #80	@ 0x50
 801c85a:	e72b      	b.n	801c6b4 <__gethex+0xf8>
 801c85c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801c85e:	2b00      	cmp	r3, #0
 801c860:	d1f3      	bne.n	801c84a <__gethex+0x28e>
 801c862:	e7e0      	b.n	801c826 <__gethex+0x26a>
 801c864:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801c866:	2b00      	cmp	r3, #0
 801c868:	d1dd      	bne.n	801c826 <__gethex+0x26a>
 801c86a:	e7ee      	b.n	801c84a <__gethex+0x28e>
 801c86c:	08022404 	.word	0x08022404
 801c870:	080226ac 	.word	0x080226ac
 801c874:	080226bd 	.word	0x080226bd
 801c878:	1e6f      	subs	r7, r5, #1
 801c87a:	f1b9 0f00 	cmp.w	r9, #0
 801c87e:	d130      	bne.n	801c8e2 <__gethex+0x326>
 801c880:	b127      	cbz	r7, 801c88c <__gethex+0x2d0>
 801c882:	4639      	mov	r1, r7
 801c884:	4620      	mov	r0, r4
 801c886:	f000 fe0e 	bl	801d4a6 <__any_on>
 801c88a:	4681      	mov	r9, r0
 801c88c:	117a      	asrs	r2, r7, #5
 801c88e:	2301      	movs	r3, #1
 801c890:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801c894:	f007 071f 	and.w	r7, r7, #31
 801c898:	40bb      	lsls	r3, r7
 801c89a:	4213      	tst	r3, r2
 801c89c:	4629      	mov	r1, r5
 801c89e:	4620      	mov	r0, r4
 801c8a0:	bf18      	it	ne
 801c8a2:	f049 0902 	orrne.w	r9, r9, #2
 801c8a6:	f7ff fe21 	bl	801c4ec <rshift>
 801c8aa:	f8d8 7004 	ldr.w	r7, [r8, #4]
 801c8ae:	1b76      	subs	r6, r6, r5
 801c8b0:	2502      	movs	r5, #2
 801c8b2:	f1b9 0f00 	cmp.w	r9, #0
 801c8b6:	d047      	beq.n	801c948 <__gethex+0x38c>
 801c8b8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801c8bc:	2b02      	cmp	r3, #2
 801c8be:	d015      	beq.n	801c8ec <__gethex+0x330>
 801c8c0:	2b03      	cmp	r3, #3
 801c8c2:	d017      	beq.n	801c8f4 <__gethex+0x338>
 801c8c4:	2b01      	cmp	r3, #1
 801c8c6:	d109      	bne.n	801c8dc <__gethex+0x320>
 801c8c8:	f019 0f02 	tst.w	r9, #2
 801c8cc:	d006      	beq.n	801c8dc <__gethex+0x320>
 801c8ce:	f8da 3000 	ldr.w	r3, [sl]
 801c8d2:	ea49 0903 	orr.w	r9, r9, r3
 801c8d6:	f019 0f01 	tst.w	r9, #1
 801c8da:	d10e      	bne.n	801c8fa <__gethex+0x33e>
 801c8dc:	f045 0510 	orr.w	r5, r5, #16
 801c8e0:	e032      	b.n	801c948 <__gethex+0x38c>
 801c8e2:	f04f 0901 	mov.w	r9, #1
 801c8e6:	e7d1      	b.n	801c88c <__gethex+0x2d0>
 801c8e8:	2501      	movs	r5, #1
 801c8ea:	e7e2      	b.n	801c8b2 <__gethex+0x2f6>
 801c8ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801c8ee:	f1c3 0301 	rsb	r3, r3, #1
 801c8f2:	930f      	str	r3, [sp, #60]	@ 0x3c
 801c8f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801c8f6:	2b00      	cmp	r3, #0
 801c8f8:	d0f0      	beq.n	801c8dc <__gethex+0x320>
 801c8fa:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801c8fe:	f104 0314 	add.w	r3, r4, #20
 801c902:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801c906:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801c90a:	f04f 0c00 	mov.w	ip, #0
 801c90e:	4618      	mov	r0, r3
 801c910:	f853 2b04 	ldr.w	r2, [r3], #4
 801c914:	f1b2 3fff 	cmp.w	r2, #4294967295
 801c918:	d01b      	beq.n	801c952 <__gethex+0x396>
 801c91a:	3201      	adds	r2, #1
 801c91c:	6002      	str	r2, [r0, #0]
 801c91e:	2d02      	cmp	r5, #2
 801c920:	f104 0314 	add.w	r3, r4, #20
 801c924:	d13c      	bne.n	801c9a0 <__gethex+0x3e4>
 801c926:	f8d8 2000 	ldr.w	r2, [r8]
 801c92a:	3a01      	subs	r2, #1
 801c92c:	42b2      	cmp	r2, r6
 801c92e:	d109      	bne.n	801c944 <__gethex+0x388>
 801c930:	1171      	asrs	r1, r6, #5
 801c932:	2201      	movs	r2, #1
 801c934:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801c938:	f006 061f 	and.w	r6, r6, #31
 801c93c:	fa02 f606 	lsl.w	r6, r2, r6
 801c940:	421e      	tst	r6, r3
 801c942:	d13a      	bne.n	801c9ba <__gethex+0x3fe>
 801c944:	f045 0520 	orr.w	r5, r5, #32
 801c948:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c94a:	601c      	str	r4, [r3, #0]
 801c94c:	9b02      	ldr	r3, [sp, #8]
 801c94e:	601f      	str	r7, [r3, #0]
 801c950:	e6b0      	b.n	801c6b4 <__gethex+0xf8>
 801c952:	4299      	cmp	r1, r3
 801c954:	f843 cc04 	str.w	ip, [r3, #-4]
 801c958:	d8d9      	bhi.n	801c90e <__gethex+0x352>
 801c95a:	68a3      	ldr	r3, [r4, #8]
 801c95c:	459b      	cmp	fp, r3
 801c95e:	db17      	blt.n	801c990 <__gethex+0x3d4>
 801c960:	6861      	ldr	r1, [r4, #4]
 801c962:	9801      	ldr	r0, [sp, #4]
 801c964:	3101      	adds	r1, #1
 801c966:	f000 f90d 	bl	801cb84 <_Balloc>
 801c96a:	4681      	mov	r9, r0
 801c96c:	b918      	cbnz	r0, 801c976 <__gethex+0x3ba>
 801c96e:	4b1a      	ldr	r3, [pc, #104]	@ (801c9d8 <__gethex+0x41c>)
 801c970:	4602      	mov	r2, r0
 801c972:	2184      	movs	r1, #132	@ 0x84
 801c974:	e6c5      	b.n	801c702 <__gethex+0x146>
 801c976:	6922      	ldr	r2, [r4, #16]
 801c978:	3202      	adds	r2, #2
 801c97a:	f104 010c 	add.w	r1, r4, #12
 801c97e:	0092      	lsls	r2, r2, #2
 801c980:	300c      	adds	r0, #12
 801c982:	f7fe fee2 	bl	801b74a <memcpy>
 801c986:	4621      	mov	r1, r4
 801c988:	9801      	ldr	r0, [sp, #4]
 801c98a:	f000 f93b 	bl	801cc04 <_Bfree>
 801c98e:	464c      	mov	r4, r9
 801c990:	6923      	ldr	r3, [r4, #16]
 801c992:	1c5a      	adds	r2, r3, #1
 801c994:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801c998:	6122      	str	r2, [r4, #16]
 801c99a:	2201      	movs	r2, #1
 801c99c:	615a      	str	r2, [r3, #20]
 801c99e:	e7be      	b.n	801c91e <__gethex+0x362>
 801c9a0:	6922      	ldr	r2, [r4, #16]
 801c9a2:	455a      	cmp	r2, fp
 801c9a4:	dd0b      	ble.n	801c9be <__gethex+0x402>
 801c9a6:	2101      	movs	r1, #1
 801c9a8:	4620      	mov	r0, r4
 801c9aa:	f7ff fd9f 	bl	801c4ec <rshift>
 801c9ae:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801c9b2:	3701      	adds	r7, #1
 801c9b4:	42bb      	cmp	r3, r7
 801c9b6:	f6ff aee0 	blt.w	801c77a <__gethex+0x1be>
 801c9ba:	2501      	movs	r5, #1
 801c9bc:	e7c2      	b.n	801c944 <__gethex+0x388>
 801c9be:	f016 061f 	ands.w	r6, r6, #31
 801c9c2:	d0fa      	beq.n	801c9ba <__gethex+0x3fe>
 801c9c4:	4453      	add	r3, sl
 801c9c6:	f1c6 0620 	rsb	r6, r6, #32
 801c9ca:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801c9ce:	f000 f9cb 	bl	801cd68 <__hi0bits>
 801c9d2:	42b0      	cmp	r0, r6
 801c9d4:	dbe7      	blt.n	801c9a6 <__gethex+0x3ea>
 801c9d6:	e7f0      	b.n	801c9ba <__gethex+0x3fe>
 801c9d8:	080226ac 	.word	0x080226ac

0801c9dc <L_shift>:
 801c9dc:	f1c2 0208 	rsb	r2, r2, #8
 801c9e0:	0092      	lsls	r2, r2, #2
 801c9e2:	b570      	push	{r4, r5, r6, lr}
 801c9e4:	f1c2 0620 	rsb	r6, r2, #32
 801c9e8:	6843      	ldr	r3, [r0, #4]
 801c9ea:	6804      	ldr	r4, [r0, #0]
 801c9ec:	fa03 f506 	lsl.w	r5, r3, r6
 801c9f0:	432c      	orrs	r4, r5
 801c9f2:	40d3      	lsrs	r3, r2
 801c9f4:	6004      	str	r4, [r0, #0]
 801c9f6:	f840 3f04 	str.w	r3, [r0, #4]!
 801c9fa:	4288      	cmp	r0, r1
 801c9fc:	d3f4      	bcc.n	801c9e8 <L_shift+0xc>
 801c9fe:	bd70      	pop	{r4, r5, r6, pc}

0801ca00 <__match>:
 801ca00:	b530      	push	{r4, r5, lr}
 801ca02:	6803      	ldr	r3, [r0, #0]
 801ca04:	3301      	adds	r3, #1
 801ca06:	f811 4b01 	ldrb.w	r4, [r1], #1
 801ca0a:	b914      	cbnz	r4, 801ca12 <__match+0x12>
 801ca0c:	6003      	str	r3, [r0, #0]
 801ca0e:	2001      	movs	r0, #1
 801ca10:	bd30      	pop	{r4, r5, pc}
 801ca12:	f813 2b01 	ldrb.w	r2, [r3], #1
 801ca16:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 801ca1a:	2d19      	cmp	r5, #25
 801ca1c:	bf98      	it	ls
 801ca1e:	3220      	addls	r2, #32
 801ca20:	42a2      	cmp	r2, r4
 801ca22:	d0f0      	beq.n	801ca06 <__match+0x6>
 801ca24:	2000      	movs	r0, #0
 801ca26:	e7f3      	b.n	801ca10 <__match+0x10>

0801ca28 <__hexnan>:
 801ca28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ca2c:	680b      	ldr	r3, [r1, #0]
 801ca2e:	6801      	ldr	r1, [r0, #0]
 801ca30:	115e      	asrs	r6, r3, #5
 801ca32:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801ca36:	f013 031f 	ands.w	r3, r3, #31
 801ca3a:	b087      	sub	sp, #28
 801ca3c:	bf18      	it	ne
 801ca3e:	3604      	addne	r6, #4
 801ca40:	2500      	movs	r5, #0
 801ca42:	1f37      	subs	r7, r6, #4
 801ca44:	4682      	mov	sl, r0
 801ca46:	4690      	mov	r8, r2
 801ca48:	9301      	str	r3, [sp, #4]
 801ca4a:	f846 5c04 	str.w	r5, [r6, #-4]
 801ca4e:	46b9      	mov	r9, r7
 801ca50:	463c      	mov	r4, r7
 801ca52:	9502      	str	r5, [sp, #8]
 801ca54:	46ab      	mov	fp, r5
 801ca56:	784a      	ldrb	r2, [r1, #1]
 801ca58:	1c4b      	adds	r3, r1, #1
 801ca5a:	9303      	str	r3, [sp, #12]
 801ca5c:	b342      	cbz	r2, 801cab0 <__hexnan+0x88>
 801ca5e:	4610      	mov	r0, r2
 801ca60:	9105      	str	r1, [sp, #20]
 801ca62:	9204      	str	r2, [sp, #16]
 801ca64:	f7ff fd94 	bl	801c590 <__hexdig_fun>
 801ca68:	2800      	cmp	r0, #0
 801ca6a:	d151      	bne.n	801cb10 <__hexnan+0xe8>
 801ca6c:	9a04      	ldr	r2, [sp, #16]
 801ca6e:	9905      	ldr	r1, [sp, #20]
 801ca70:	2a20      	cmp	r2, #32
 801ca72:	d818      	bhi.n	801caa6 <__hexnan+0x7e>
 801ca74:	9b02      	ldr	r3, [sp, #8]
 801ca76:	459b      	cmp	fp, r3
 801ca78:	dd13      	ble.n	801caa2 <__hexnan+0x7a>
 801ca7a:	454c      	cmp	r4, r9
 801ca7c:	d206      	bcs.n	801ca8c <__hexnan+0x64>
 801ca7e:	2d07      	cmp	r5, #7
 801ca80:	dc04      	bgt.n	801ca8c <__hexnan+0x64>
 801ca82:	462a      	mov	r2, r5
 801ca84:	4649      	mov	r1, r9
 801ca86:	4620      	mov	r0, r4
 801ca88:	f7ff ffa8 	bl	801c9dc <L_shift>
 801ca8c:	4544      	cmp	r4, r8
 801ca8e:	d952      	bls.n	801cb36 <__hexnan+0x10e>
 801ca90:	2300      	movs	r3, #0
 801ca92:	f1a4 0904 	sub.w	r9, r4, #4
 801ca96:	f844 3c04 	str.w	r3, [r4, #-4]
 801ca9a:	f8cd b008 	str.w	fp, [sp, #8]
 801ca9e:	464c      	mov	r4, r9
 801caa0:	461d      	mov	r5, r3
 801caa2:	9903      	ldr	r1, [sp, #12]
 801caa4:	e7d7      	b.n	801ca56 <__hexnan+0x2e>
 801caa6:	2a29      	cmp	r2, #41	@ 0x29
 801caa8:	d157      	bne.n	801cb5a <__hexnan+0x132>
 801caaa:	3102      	adds	r1, #2
 801caac:	f8ca 1000 	str.w	r1, [sl]
 801cab0:	f1bb 0f00 	cmp.w	fp, #0
 801cab4:	d051      	beq.n	801cb5a <__hexnan+0x132>
 801cab6:	454c      	cmp	r4, r9
 801cab8:	d206      	bcs.n	801cac8 <__hexnan+0xa0>
 801caba:	2d07      	cmp	r5, #7
 801cabc:	dc04      	bgt.n	801cac8 <__hexnan+0xa0>
 801cabe:	462a      	mov	r2, r5
 801cac0:	4649      	mov	r1, r9
 801cac2:	4620      	mov	r0, r4
 801cac4:	f7ff ff8a 	bl	801c9dc <L_shift>
 801cac8:	4544      	cmp	r4, r8
 801caca:	d936      	bls.n	801cb3a <__hexnan+0x112>
 801cacc:	f1a8 0204 	sub.w	r2, r8, #4
 801cad0:	4623      	mov	r3, r4
 801cad2:	f853 1b04 	ldr.w	r1, [r3], #4
 801cad6:	f842 1f04 	str.w	r1, [r2, #4]!
 801cada:	429f      	cmp	r7, r3
 801cadc:	d2f9      	bcs.n	801cad2 <__hexnan+0xaa>
 801cade:	1b3b      	subs	r3, r7, r4
 801cae0:	f023 0303 	bic.w	r3, r3, #3
 801cae4:	3304      	adds	r3, #4
 801cae6:	3401      	adds	r4, #1
 801cae8:	3e03      	subs	r6, #3
 801caea:	42b4      	cmp	r4, r6
 801caec:	bf88      	it	hi
 801caee:	2304      	movhi	r3, #4
 801caf0:	4443      	add	r3, r8
 801caf2:	2200      	movs	r2, #0
 801caf4:	f843 2b04 	str.w	r2, [r3], #4
 801caf8:	429f      	cmp	r7, r3
 801cafa:	d2fb      	bcs.n	801caf4 <__hexnan+0xcc>
 801cafc:	683b      	ldr	r3, [r7, #0]
 801cafe:	b91b      	cbnz	r3, 801cb08 <__hexnan+0xe0>
 801cb00:	4547      	cmp	r7, r8
 801cb02:	d128      	bne.n	801cb56 <__hexnan+0x12e>
 801cb04:	2301      	movs	r3, #1
 801cb06:	603b      	str	r3, [r7, #0]
 801cb08:	2005      	movs	r0, #5
 801cb0a:	b007      	add	sp, #28
 801cb0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cb10:	3501      	adds	r5, #1
 801cb12:	2d08      	cmp	r5, #8
 801cb14:	f10b 0b01 	add.w	fp, fp, #1
 801cb18:	dd06      	ble.n	801cb28 <__hexnan+0x100>
 801cb1a:	4544      	cmp	r4, r8
 801cb1c:	d9c1      	bls.n	801caa2 <__hexnan+0x7a>
 801cb1e:	2300      	movs	r3, #0
 801cb20:	f844 3c04 	str.w	r3, [r4, #-4]
 801cb24:	2501      	movs	r5, #1
 801cb26:	3c04      	subs	r4, #4
 801cb28:	6822      	ldr	r2, [r4, #0]
 801cb2a:	f000 000f 	and.w	r0, r0, #15
 801cb2e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801cb32:	6020      	str	r0, [r4, #0]
 801cb34:	e7b5      	b.n	801caa2 <__hexnan+0x7a>
 801cb36:	2508      	movs	r5, #8
 801cb38:	e7b3      	b.n	801caa2 <__hexnan+0x7a>
 801cb3a:	9b01      	ldr	r3, [sp, #4]
 801cb3c:	2b00      	cmp	r3, #0
 801cb3e:	d0dd      	beq.n	801cafc <__hexnan+0xd4>
 801cb40:	f1c3 0320 	rsb	r3, r3, #32
 801cb44:	f04f 32ff 	mov.w	r2, #4294967295
 801cb48:	40da      	lsrs	r2, r3
 801cb4a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801cb4e:	4013      	ands	r3, r2
 801cb50:	f846 3c04 	str.w	r3, [r6, #-4]
 801cb54:	e7d2      	b.n	801cafc <__hexnan+0xd4>
 801cb56:	3f04      	subs	r7, #4
 801cb58:	e7d0      	b.n	801cafc <__hexnan+0xd4>
 801cb5a:	2004      	movs	r0, #4
 801cb5c:	e7d5      	b.n	801cb0a <__hexnan+0xe2>

0801cb5e <__ascii_mbtowc>:
 801cb5e:	b082      	sub	sp, #8
 801cb60:	b901      	cbnz	r1, 801cb64 <__ascii_mbtowc+0x6>
 801cb62:	a901      	add	r1, sp, #4
 801cb64:	b142      	cbz	r2, 801cb78 <__ascii_mbtowc+0x1a>
 801cb66:	b14b      	cbz	r3, 801cb7c <__ascii_mbtowc+0x1e>
 801cb68:	7813      	ldrb	r3, [r2, #0]
 801cb6a:	600b      	str	r3, [r1, #0]
 801cb6c:	7812      	ldrb	r2, [r2, #0]
 801cb6e:	1e10      	subs	r0, r2, #0
 801cb70:	bf18      	it	ne
 801cb72:	2001      	movne	r0, #1
 801cb74:	b002      	add	sp, #8
 801cb76:	4770      	bx	lr
 801cb78:	4610      	mov	r0, r2
 801cb7a:	e7fb      	b.n	801cb74 <__ascii_mbtowc+0x16>
 801cb7c:	f06f 0001 	mvn.w	r0, #1
 801cb80:	e7f8      	b.n	801cb74 <__ascii_mbtowc+0x16>
	...

0801cb84 <_Balloc>:
 801cb84:	b570      	push	{r4, r5, r6, lr}
 801cb86:	69c6      	ldr	r6, [r0, #28]
 801cb88:	4604      	mov	r4, r0
 801cb8a:	460d      	mov	r5, r1
 801cb8c:	b976      	cbnz	r6, 801cbac <_Balloc+0x28>
 801cb8e:	2010      	movs	r0, #16
 801cb90:	f7fc fd4a 	bl	8019628 <malloc>
 801cb94:	4602      	mov	r2, r0
 801cb96:	61e0      	str	r0, [r4, #28]
 801cb98:	b920      	cbnz	r0, 801cba4 <_Balloc+0x20>
 801cb9a:	4b18      	ldr	r3, [pc, #96]	@ (801cbfc <_Balloc+0x78>)
 801cb9c:	4818      	ldr	r0, [pc, #96]	@ (801cc00 <_Balloc+0x7c>)
 801cb9e:	216b      	movs	r1, #107	@ 0x6b
 801cba0:	f7fe fdf0 	bl	801b784 <__assert_func>
 801cba4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801cba8:	6006      	str	r6, [r0, #0]
 801cbaa:	60c6      	str	r6, [r0, #12]
 801cbac:	69e6      	ldr	r6, [r4, #28]
 801cbae:	68f3      	ldr	r3, [r6, #12]
 801cbb0:	b183      	cbz	r3, 801cbd4 <_Balloc+0x50>
 801cbb2:	69e3      	ldr	r3, [r4, #28]
 801cbb4:	68db      	ldr	r3, [r3, #12]
 801cbb6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801cbba:	b9b8      	cbnz	r0, 801cbec <_Balloc+0x68>
 801cbbc:	2101      	movs	r1, #1
 801cbbe:	fa01 f605 	lsl.w	r6, r1, r5
 801cbc2:	1d72      	adds	r2, r6, #5
 801cbc4:	0092      	lsls	r2, r2, #2
 801cbc6:	4620      	mov	r0, r4
 801cbc8:	f001 f8a7 	bl	801dd1a <_calloc_r>
 801cbcc:	b160      	cbz	r0, 801cbe8 <_Balloc+0x64>
 801cbce:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801cbd2:	e00e      	b.n	801cbf2 <_Balloc+0x6e>
 801cbd4:	2221      	movs	r2, #33	@ 0x21
 801cbd6:	2104      	movs	r1, #4
 801cbd8:	4620      	mov	r0, r4
 801cbda:	f001 f89e 	bl	801dd1a <_calloc_r>
 801cbde:	69e3      	ldr	r3, [r4, #28]
 801cbe0:	60f0      	str	r0, [r6, #12]
 801cbe2:	68db      	ldr	r3, [r3, #12]
 801cbe4:	2b00      	cmp	r3, #0
 801cbe6:	d1e4      	bne.n	801cbb2 <_Balloc+0x2e>
 801cbe8:	2000      	movs	r0, #0
 801cbea:	bd70      	pop	{r4, r5, r6, pc}
 801cbec:	6802      	ldr	r2, [r0, #0]
 801cbee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801cbf2:	2300      	movs	r3, #0
 801cbf4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801cbf8:	e7f7      	b.n	801cbea <_Balloc+0x66>
 801cbfa:	bf00      	nop
 801cbfc:	08022592 	.word	0x08022592
 801cc00:	0802271d 	.word	0x0802271d

0801cc04 <_Bfree>:
 801cc04:	b570      	push	{r4, r5, r6, lr}
 801cc06:	69c6      	ldr	r6, [r0, #28]
 801cc08:	4605      	mov	r5, r0
 801cc0a:	460c      	mov	r4, r1
 801cc0c:	b976      	cbnz	r6, 801cc2c <_Bfree+0x28>
 801cc0e:	2010      	movs	r0, #16
 801cc10:	f7fc fd0a 	bl	8019628 <malloc>
 801cc14:	4602      	mov	r2, r0
 801cc16:	61e8      	str	r0, [r5, #28]
 801cc18:	b920      	cbnz	r0, 801cc24 <_Bfree+0x20>
 801cc1a:	4b09      	ldr	r3, [pc, #36]	@ (801cc40 <_Bfree+0x3c>)
 801cc1c:	4809      	ldr	r0, [pc, #36]	@ (801cc44 <_Bfree+0x40>)
 801cc1e:	218f      	movs	r1, #143	@ 0x8f
 801cc20:	f7fe fdb0 	bl	801b784 <__assert_func>
 801cc24:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801cc28:	6006      	str	r6, [r0, #0]
 801cc2a:	60c6      	str	r6, [r0, #12]
 801cc2c:	b13c      	cbz	r4, 801cc3e <_Bfree+0x3a>
 801cc2e:	69eb      	ldr	r3, [r5, #28]
 801cc30:	6862      	ldr	r2, [r4, #4]
 801cc32:	68db      	ldr	r3, [r3, #12]
 801cc34:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801cc38:	6021      	str	r1, [r4, #0]
 801cc3a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801cc3e:	bd70      	pop	{r4, r5, r6, pc}
 801cc40:	08022592 	.word	0x08022592
 801cc44:	0802271d 	.word	0x0802271d

0801cc48 <__multadd>:
 801cc48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cc4c:	690d      	ldr	r5, [r1, #16]
 801cc4e:	4607      	mov	r7, r0
 801cc50:	460c      	mov	r4, r1
 801cc52:	461e      	mov	r6, r3
 801cc54:	f101 0c14 	add.w	ip, r1, #20
 801cc58:	2000      	movs	r0, #0
 801cc5a:	f8dc 3000 	ldr.w	r3, [ip]
 801cc5e:	b299      	uxth	r1, r3
 801cc60:	fb02 6101 	mla	r1, r2, r1, r6
 801cc64:	0c1e      	lsrs	r6, r3, #16
 801cc66:	0c0b      	lsrs	r3, r1, #16
 801cc68:	fb02 3306 	mla	r3, r2, r6, r3
 801cc6c:	b289      	uxth	r1, r1
 801cc6e:	3001      	adds	r0, #1
 801cc70:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801cc74:	4285      	cmp	r5, r0
 801cc76:	f84c 1b04 	str.w	r1, [ip], #4
 801cc7a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801cc7e:	dcec      	bgt.n	801cc5a <__multadd+0x12>
 801cc80:	b30e      	cbz	r6, 801ccc6 <__multadd+0x7e>
 801cc82:	68a3      	ldr	r3, [r4, #8]
 801cc84:	42ab      	cmp	r3, r5
 801cc86:	dc19      	bgt.n	801ccbc <__multadd+0x74>
 801cc88:	6861      	ldr	r1, [r4, #4]
 801cc8a:	4638      	mov	r0, r7
 801cc8c:	3101      	adds	r1, #1
 801cc8e:	f7ff ff79 	bl	801cb84 <_Balloc>
 801cc92:	4680      	mov	r8, r0
 801cc94:	b928      	cbnz	r0, 801cca2 <__multadd+0x5a>
 801cc96:	4602      	mov	r2, r0
 801cc98:	4b0c      	ldr	r3, [pc, #48]	@ (801cccc <__multadd+0x84>)
 801cc9a:	480d      	ldr	r0, [pc, #52]	@ (801ccd0 <__multadd+0x88>)
 801cc9c:	21ba      	movs	r1, #186	@ 0xba
 801cc9e:	f7fe fd71 	bl	801b784 <__assert_func>
 801cca2:	6922      	ldr	r2, [r4, #16]
 801cca4:	3202      	adds	r2, #2
 801cca6:	f104 010c 	add.w	r1, r4, #12
 801ccaa:	0092      	lsls	r2, r2, #2
 801ccac:	300c      	adds	r0, #12
 801ccae:	f7fe fd4c 	bl	801b74a <memcpy>
 801ccb2:	4621      	mov	r1, r4
 801ccb4:	4638      	mov	r0, r7
 801ccb6:	f7ff ffa5 	bl	801cc04 <_Bfree>
 801ccba:	4644      	mov	r4, r8
 801ccbc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801ccc0:	3501      	adds	r5, #1
 801ccc2:	615e      	str	r6, [r3, #20]
 801ccc4:	6125      	str	r5, [r4, #16]
 801ccc6:	4620      	mov	r0, r4
 801ccc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cccc:	080226ac 	.word	0x080226ac
 801ccd0:	0802271d 	.word	0x0802271d

0801ccd4 <__s2b>:
 801ccd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ccd8:	460c      	mov	r4, r1
 801ccda:	4615      	mov	r5, r2
 801ccdc:	461f      	mov	r7, r3
 801ccde:	2209      	movs	r2, #9
 801cce0:	3308      	adds	r3, #8
 801cce2:	4606      	mov	r6, r0
 801cce4:	fb93 f3f2 	sdiv	r3, r3, r2
 801cce8:	2100      	movs	r1, #0
 801ccea:	2201      	movs	r2, #1
 801ccec:	429a      	cmp	r2, r3
 801ccee:	db09      	blt.n	801cd04 <__s2b+0x30>
 801ccf0:	4630      	mov	r0, r6
 801ccf2:	f7ff ff47 	bl	801cb84 <_Balloc>
 801ccf6:	b940      	cbnz	r0, 801cd0a <__s2b+0x36>
 801ccf8:	4602      	mov	r2, r0
 801ccfa:	4b19      	ldr	r3, [pc, #100]	@ (801cd60 <__s2b+0x8c>)
 801ccfc:	4819      	ldr	r0, [pc, #100]	@ (801cd64 <__s2b+0x90>)
 801ccfe:	21d3      	movs	r1, #211	@ 0xd3
 801cd00:	f7fe fd40 	bl	801b784 <__assert_func>
 801cd04:	0052      	lsls	r2, r2, #1
 801cd06:	3101      	adds	r1, #1
 801cd08:	e7f0      	b.n	801ccec <__s2b+0x18>
 801cd0a:	9b08      	ldr	r3, [sp, #32]
 801cd0c:	6143      	str	r3, [r0, #20]
 801cd0e:	2d09      	cmp	r5, #9
 801cd10:	f04f 0301 	mov.w	r3, #1
 801cd14:	6103      	str	r3, [r0, #16]
 801cd16:	dd16      	ble.n	801cd46 <__s2b+0x72>
 801cd18:	f104 0909 	add.w	r9, r4, #9
 801cd1c:	46c8      	mov	r8, r9
 801cd1e:	442c      	add	r4, r5
 801cd20:	f818 3b01 	ldrb.w	r3, [r8], #1
 801cd24:	4601      	mov	r1, r0
 801cd26:	3b30      	subs	r3, #48	@ 0x30
 801cd28:	220a      	movs	r2, #10
 801cd2a:	4630      	mov	r0, r6
 801cd2c:	f7ff ff8c 	bl	801cc48 <__multadd>
 801cd30:	45a0      	cmp	r8, r4
 801cd32:	d1f5      	bne.n	801cd20 <__s2b+0x4c>
 801cd34:	f1a5 0408 	sub.w	r4, r5, #8
 801cd38:	444c      	add	r4, r9
 801cd3a:	1b2d      	subs	r5, r5, r4
 801cd3c:	1963      	adds	r3, r4, r5
 801cd3e:	42bb      	cmp	r3, r7
 801cd40:	db04      	blt.n	801cd4c <__s2b+0x78>
 801cd42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801cd46:	340a      	adds	r4, #10
 801cd48:	2509      	movs	r5, #9
 801cd4a:	e7f6      	b.n	801cd3a <__s2b+0x66>
 801cd4c:	f814 3b01 	ldrb.w	r3, [r4], #1
 801cd50:	4601      	mov	r1, r0
 801cd52:	3b30      	subs	r3, #48	@ 0x30
 801cd54:	220a      	movs	r2, #10
 801cd56:	4630      	mov	r0, r6
 801cd58:	f7ff ff76 	bl	801cc48 <__multadd>
 801cd5c:	e7ee      	b.n	801cd3c <__s2b+0x68>
 801cd5e:	bf00      	nop
 801cd60:	080226ac 	.word	0x080226ac
 801cd64:	0802271d 	.word	0x0802271d

0801cd68 <__hi0bits>:
 801cd68:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801cd6c:	4603      	mov	r3, r0
 801cd6e:	bf36      	itet	cc
 801cd70:	0403      	lslcc	r3, r0, #16
 801cd72:	2000      	movcs	r0, #0
 801cd74:	2010      	movcc	r0, #16
 801cd76:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801cd7a:	bf3c      	itt	cc
 801cd7c:	021b      	lslcc	r3, r3, #8
 801cd7e:	3008      	addcc	r0, #8
 801cd80:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801cd84:	bf3c      	itt	cc
 801cd86:	011b      	lslcc	r3, r3, #4
 801cd88:	3004      	addcc	r0, #4
 801cd8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801cd8e:	bf3c      	itt	cc
 801cd90:	009b      	lslcc	r3, r3, #2
 801cd92:	3002      	addcc	r0, #2
 801cd94:	2b00      	cmp	r3, #0
 801cd96:	db05      	blt.n	801cda4 <__hi0bits+0x3c>
 801cd98:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 801cd9c:	f100 0001 	add.w	r0, r0, #1
 801cda0:	bf08      	it	eq
 801cda2:	2020      	moveq	r0, #32
 801cda4:	4770      	bx	lr

0801cda6 <__lo0bits>:
 801cda6:	6803      	ldr	r3, [r0, #0]
 801cda8:	4602      	mov	r2, r0
 801cdaa:	f013 0007 	ands.w	r0, r3, #7
 801cdae:	d00b      	beq.n	801cdc8 <__lo0bits+0x22>
 801cdb0:	07d9      	lsls	r1, r3, #31
 801cdb2:	d421      	bmi.n	801cdf8 <__lo0bits+0x52>
 801cdb4:	0798      	lsls	r0, r3, #30
 801cdb6:	bf49      	itett	mi
 801cdb8:	085b      	lsrmi	r3, r3, #1
 801cdba:	089b      	lsrpl	r3, r3, #2
 801cdbc:	2001      	movmi	r0, #1
 801cdbe:	6013      	strmi	r3, [r2, #0]
 801cdc0:	bf5c      	itt	pl
 801cdc2:	6013      	strpl	r3, [r2, #0]
 801cdc4:	2002      	movpl	r0, #2
 801cdc6:	4770      	bx	lr
 801cdc8:	b299      	uxth	r1, r3
 801cdca:	b909      	cbnz	r1, 801cdd0 <__lo0bits+0x2a>
 801cdcc:	0c1b      	lsrs	r3, r3, #16
 801cdce:	2010      	movs	r0, #16
 801cdd0:	b2d9      	uxtb	r1, r3
 801cdd2:	b909      	cbnz	r1, 801cdd8 <__lo0bits+0x32>
 801cdd4:	3008      	adds	r0, #8
 801cdd6:	0a1b      	lsrs	r3, r3, #8
 801cdd8:	0719      	lsls	r1, r3, #28
 801cdda:	bf04      	itt	eq
 801cddc:	091b      	lsreq	r3, r3, #4
 801cdde:	3004      	addeq	r0, #4
 801cde0:	0799      	lsls	r1, r3, #30
 801cde2:	bf04      	itt	eq
 801cde4:	089b      	lsreq	r3, r3, #2
 801cde6:	3002      	addeq	r0, #2
 801cde8:	07d9      	lsls	r1, r3, #31
 801cdea:	d403      	bmi.n	801cdf4 <__lo0bits+0x4e>
 801cdec:	085b      	lsrs	r3, r3, #1
 801cdee:	f100 0001 	add.w	r0, r0, #1
 801cdf2:	d003      	beq.n	801cdfc <__lo0bits+0x56>
 801cdf4:	6013      	str	r3, [r2, #0]
 801cdf6:	4770      	bx	lr
 801cdf8:	2000      	movs	r0, #0
 801cdfa:	4770      	bx	lr
 801cdfc:	2020      	movs	r0, #32
 801cdfe:	4770      	bx	lr

0801ce00 <__i2b>:
 801ce00:	b510      	push	{r4, lr}
 801ce02:	460c      	mov	r4, r1
 801ce04:	2101      	movs	r1, #1
 801ce06:	f7ff febd 	bl	801cb84 <_Balloc>
 801ce0a:	4602      	mov	r2, r0
 801ce0c:	b928      	cbnz	r0, 801ce1a <__i2b+0x1a>
 801ce0e:	4b05      	ldr	r3, [pc, #20]	@ (801ce24 <__i2b+0x24>)
 801ce10:	4805      	ldr	r0, [pc, #20]	@ (801ce28 <__i2b+0x28>)
 801ce12:	f240 1145 	movw	r1, #325	@ 0x145
 801ce16:	f7fe fcb5 	bl	801b784 <__assert_func>
 801ce1a:	2301      	movs	r3, #1
 801ce1c:	6144      	str	r4, [r0, #20]
 801ce1e:	6103      	str	r3, [r0, #16]
 801ce20:	bd10      	pop	{r4, pc}
 801ce22:	bf00      	nop
 801ce24:	080226ac 	.word	0x080226ac
 801ce28:	0802271d 	.word	0x0802271d

0801ce2c <__multiply>:
 801ce2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ce30:	4614      	mov	r4, r2
 801ce32:	690a      	ldr	r2, [r1, #16]
 801ce34:	6923      	ldr	r3, [r4, #16]
 801ce36:	429a      	cmp	r2, r3
 801ce38:	bfa8      	it	ge
 801ce3a:	4623      	movge	r3, r4
 801ce3c:	460f      	mov	r7, r1
 801ce3e:	bfa4      	itt	ge
 801ce40:	460c      	movge	r4, r1
 801ce42:	461f      	movge	r7, r3
 801ce44:	f8d4 a010 	ldr.w	sl, [r4, #16]
 801ce48:	f8d7 9010 	ldr.w	r9, [r7, #16]
 801ce4c:	68a3      	ldr	r3, [r4, #8]
 801ce4e:	6861      	ldr	r1, [r4, #4]
 801ce50:	eb0a 0609 	add.w	r6, sl, r9
 801ce54:	42b3      	cmp	r3, r6
 801ce56:	b085      	sub	sp, #20
 801ce58:	bfb8      	it	lt
 801ce5a:	3101      	addlt	r1, #1
 801ce5c:	f7ff fe92 	bl	801cb84 <_Balloc>
 801ce60:	b930      	cbnz	r0, 801ce70 <__multiply+0x44>
 801ce62:	4602      	mov	r2, r0
 801ce64:	4b44      	ldr	r3, [pc, #272]	@ (801cf78 <__multiply+0x14c>)
 801ce66:	4845      	ldr	r0, [pc, #276]	@ (801cf7c <__multiply+0x150>)
 801ce68:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801ce6c:	f7fe fc8a 	bl	801b784 <__assert_func>
 801ce70:	f100 0514 	add.w	r5, r0, #20
 801ce74:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801ce78:	462b      	mov	r3, r5
 801ce7a:	2200      	movs	r2, #0
 801ce7c:	4543      	cmp	r3, r8
 801ce7e:	d321      	bcc.n	801cec4 <__multiply+0x98>
 801ce80:	f107 0114 	add.w	r1, r7, #20
 801ce84:	f104 0214 	add.w	r2, r4, #20
 801ce88:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 801ce8c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 801ce90:	9302      	str	r3, [sp, #8]
 801ce92:	1b13      	subs	r3, r2, r4
 801ce94:	3b15      	subs	r3, #21
 801ce96:	f023 0303 	bic.w	r3, r3, #3
 801ce9a:	3304      	adds	r3, #4
 801ce9c:	f104 0715 	add.w	r7, r4, #21
 801cea0:	42ba      	cmp	r2, r7
 801cea2:	bf38      	it	cc
 801cea4:	2304      	movcc	r3, #4
 801cea6:	9301      	str	r3, [sp, #4]
 801cea8:	9b02      	ldr	r3, [sp, #8]
 801ceaa:	9103      	str	r1, [sp, #12]
 801ceac:	428b      	cmp	r3, r1
 801ceae:	d80c      	bhi.n	801ceca <__multiply+0x9e>
 801ceb0:	2e00      	cmp	r6, #0
 801ceb2:	dd03      	ble.n	801cebc <__multiply+0x90>
 801ceb4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801ceb8:	2b00      	cmp	r3, #0
 801ceba:	d05b      	beq.n	801cf74 <__multiply+0x148>
 801cebc:	6106      	str	r6, [r0, #16]
 801cebe:	b005      	add	sp, #20
 801cec0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cec4:	f843 2b04 	str.w	r2, [r3], #4
 801cec8:	e7d8      	b.n	801ce7c <__multiply+0x50>
 801ceca:	f8b1 a000 	ldrh.w	sl, [r1]
 801cece:	f1ba 0f00 	cmp.w	sl, #0
 801ced2:	d024      	beq.n	801cf1e <__multiply+0xf2>
 801ced4:	f104 0e14 	add.w	lr, r4, #20
 801ced8:	46a9      	mov	r9, r5
 801ceda:	f04f 0c00 	mov.w	ip, #0
 801cede:	f85e 7b04 	ldr.w	r7, [lr], #4
 801cee2:	f8d9 3000 	ldr.w	r3, [r9]
 801cee6:	fa1f fb87 	uxth.w	fp, r7
 801ceea:	b29b      	uxth	r3, r3
 801ceec:	fb0a 330b 	mla	r3, sl, fp, r3
 801cef0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 801cef4:	f8d9 7000 	ldr.w	r7, [r9]
 801cef8:	4463      	add	r3, ip
 801cefa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801cefe:	fb0a c70b 	mla	r7, sl, fp, ip
 801cf02:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 801cf06:	b29b      	uxth	r3, r3
 801cf08:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801cf0c:	4572      	cmp	r2, lr
 801cf0e:	f849 3b04 	str.w	r3, [r9], #4
 801cf12:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801cf16:	d8e2      	bhi.n	801cede <__multiply+0xb2>
 801cf18:	9b01      	ldr	r3, [sp, #4]
 801cf1a:	f845 c003 	str.w	ip, [r5, r3]
 801cf1e:	9b03      	ldr	r3, [sp, #12]
 801cf20:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801cf24:	3104      	adds	r1, #4
 801cf26:	f1b9 0f00 	cmp.w	r9, #0
 801cf2a:	d021      	beq.n	801cf70 <__multiply+0x144>
 801cf2c:	682b      	ldr	r3, [r5, #0]
 801cf2e:	f104 0c14 	add.w	ip, r4, #20
 801cf32:	46ae      	mov	lr, r5
 801cf34:	f04f 0a00 	mov.w	sl, #0
 801cf38:	f8bc b000 	ldrh.w	fp, [ip]
 801cf3c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 801cf40:	fb09 770b 	mla	r7, r9, fp, r7
 801cf44:	4457      	add	r7, sl
 801cf46:	b29b      	uxth	r3, r3
 801cf48:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801cf4c:	f84e 3b04 	str.w	r3, [lr], #4
 801cf50:	f85c 3b04 	ldr.w	r3, [ip], #4
 801cf54:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801cf58:	f8be 3000 	ldrh.w	r3, [lr]
 801cf5c:	fb09 330a 	mla	r3, r9, sl, r3
 801cf60:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 801cf64:	4562      	cmp	r2, ip
 801cf66:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801cf6a:	d8e5      	bhi.n	801cf38 <__multiply+0x10c>
 801cf6c:	9f01      	ldr	r7, [sp, #4]
 801cf6e:	51eb      	str	r3, [r5, r7]
 801cf70:	3504      	adds	r5, #4
 801cf72:	e799      	b.n	801cea8 <__multiply+0x7c>
 801cf74:	3e01      	subs	r6, #1
 801cf76:	e79b      	b.n	801ceb0 <__multiply+0x84>
 801cf78:	080226ac 	.word	0x080226ac
 801cf7c:	0802271d 	.word	0x0802271d

0801cf80 <__pow5mult>:
 801cf80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801cf84:	4615      	mov	r5, r2
 801cf86:	f012 0203 	ands.w	r2, r2, #3
 801cf8a:	4607      	mov	r7, r0
 801cf8c:	460e      	mov	r6, r1
 801cf8e:	d007      	beq.n	801cfa0 <__pow5mult+0x20>
 801cf90:	4c25      	ldr	r4, [pc, #148]	@ (801d028 <__pow5mult+0xa8>)
 801cf92:	3a01      	subs	r2, #1
 801cf94:	2300      	movs	r3, #0
 801cf96:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801cf9a:	f7ff fe55 	bl	801cc48 <__multadd>
 801cf9e:	4606      	mov	r6, r0
 801cfa0:	10ad      	asrs	r5, r5, #2
 801cfa2:	d03d      	beq.n	801d020 <__pow5mult+0xa0>
 801cfa4:	69fc      	ldr	r4, [r7, #28]
 801cfa6:	b97c      	cbnz	r4, 801cfc8 <__pow5mult+0x48>
 801cfa8:	2010      	movs	r0, #16
 801cfaa:	f7fc fb3d 	bl	8019628 <malloc>
 801cfae:	4602      	mov	r2, r0
 801cfb0:	61f8      	str	r0, [r7, #28]
 801cfb2:	b928      	cbnz	r0, 801cfc0 <__pow5mult+0x40>
 801cfb4:	4b1d      	ldr	r3, [pc, #116]	@ (801d02c <__pow5mult+0xac>)
 801cfb6:	481e      	ldr	r0, [pc, #120]	@ (801d030 <__pow5mult+0xb0>)
 801cfb8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 801cfbc:	f7fe fbe2 	bl	801b784 <__assert_func>
 801cfc0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801cfc4:	6004      	str	r4, [r0, #0]
 801cfc6:	60c4      	str	r4, [r0, #12]
 801cfc8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 801cfcc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801cfd0:	b94c      	cbnz	r4, 801cfe6 <__pow5mult+0x66>
 801cfd2:	f240 2171 	movw	r1, #625	@ 0x271
 801cfd6:	4638      	mov	r0, r7
 801cfd8:	f7ff ff12 	bl	801ce00 <__i2b>
 801cfdc:	2300      	movs	r3, #0
 801cfde:	f8c8 0008 	str.w	r0, [r8, #8]
 801cfe2:	4604      	mov	r4, r0
 801cfe4:	6003      	str	r3, [r0, #0]
 801cfe6:	f04f 0900 	mov.w	r9, #0
 801cfea:	07eb      	lsls	r3, r5, #31
 801cfec:	d50a      	bpl.n	801d004 <__pow5mult+0x84>
 801cfee:	4631      	mov	r1, r6
 801cff0:	4622      	mov	r2, r4
 801cff2:	4638      	mov	r0, r7
 801cff4:	f7ff ff1a 	bl	801ce2c <__multiply>
 801cff8:	4631      	mov	r1, r6
 801cffa:	4680      	mov	r8, r0
 801cffc:	4638      	mov	r0, r7
 801cffe:	f7ff fe01 	bl	801cc04 <_Bfree>
 801d002:	4646      	mov	r6, r8
 801d004:	106d      	asrs	r5, r5, #1
 801d006:	d00b      	beq.n	801d020 <__pow5mult+0xa0>
 801d008:	6820      	ldr	r0, [r4, #0]
 801d00a:	b938      	cbnz	r0, 801d01c <__pow5mult+0x9c>
 801d00c:	4622      	mov	r2, r4
 801d00e:	4621      	mov	r1, r4
 801d010:	4638      	mov	r0, r7
 801d012:	f7ff ff0b 	bl	801ce2c <__multiply>
 801d016:	6020      	str	r0, [r4, #0]
 801d018:	f8c0 9000 	str.w	r9, [r0]
 801d01c:	4604      	mov	r4, r0
 801d01e:	e7e4      	b.n	801cfea <__pow5mult+0x6a>
 801d020:	4630      	mov	r0, r6
 801d022:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d026:	bf00      	nop
 801d028:	08022778 	.word	0x08022778
 801d02c:	08022592 	.word	0x08022592
 801d030:	0802271d 	.word	0x0802271d

0801d034 <__lshift>:
 801d034:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d038:	460c      	mov	r4, r1
 801d03a:	6849      	ldr	r1, [r1, #4]
 801d03c:	6923      	ldr	r3, [r4, #16]
 801d03e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801d042:	68a3      	ldr	r3, [r4, #8]
 801d044:	4607      	mov	r7, r0
 801d046:	4691      	mov	r9, r2
 801d048:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801d04c:	f108 0601 	add.w	r6, r8, #1
 801d050:	42b3      	cmp	r3, r6
 801d052:	db0b      	blt.n	801d06c <__lshift+0x38>
 801d054:	4638      	mov	r0, r7
 801d056:	f7ff fd95 	bl	801cb84 <_Balloc>
 801d05a:	4605      	mov	r5, r0
 801d05c:	b948      	cbnz	r0, 801d072 <__lshift+0x3e>
 801d05e:	4602      	mov	r2, r0
 801d060:	4b28      	ldr	r3, [pc, #160]	@ (801d104 <__lshift+0xd0>)
 801d062:	4829      	ldr	r0, [pc, #164]	@ (801d108 <__lshift+0xd4>)
 801d064:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801d068:	f7fe fb8c 	bl	801b784 <__assert_func>
 801d06c:	3101      	adds	r1, #1
 801d06e:	005b      	lsls	r3, r3, #1
 801d070:	e7ee      	b.n	801d050 <__lshift+0x1c>
 801d072:	2300      	movs	r3, #0
 801d074:	f100 0114 	add.w	r1, r0, #20
 801d078:	f100 0210 	add.w	r2, r0, #16
 801d07c:	4618      	mov	r0, r3
 801d07e:	4553      	cmp	r3, sl
 801d080:	db33      	blt.n	801d0ea <__lshift+0xb6>
 801d082:	6920      	ldr	r0, [r4, #16]
 801d084:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801d088:	f104 0314 	add.w	r3, r4, #20
 801d08c:	f019 091f 	ands.w	r9, r9, #31
 801d090:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801d094:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801d098:	d02b      	beq.n	801d0f2 <__lshift+0xbe>
 801d09a:	f1c9 0e20 	rsb	lr, r9, #32
 801d09e:	468a      	mov	sl, r1
 801d0a0:	2200      	movs	r2, #0
 801d0a2:	6818      	ldr	r0, [r3, #0]
 801d0a4:	fa00 f009 	lsl.w	r0, r0, r9
 801d0a8:	4310      	orrs	r0, r2
 801d0aa:	f84a 0b04 	str.w	r0, [sl], #4
 801d0ae:	f853 2b04 	ldr.w	r2, [r3], #4
 801d0b2:	459c      	cmp	ip, r3
 801d0b4:	fa22 f20e 	lsr.w	r2, r2, lr
 801d0b8:	d8f3      	bhi.n	801d0a2 <__lshift+0x6e>
 801d0ba:	ebac 0304 	sub.w	r3, ip, r4
 801d0be:	3b15      	subs	r3, #21
 801d0c0:	f023 0303 	bic.w	r3, r3, #3
 801d0c4:	3304      	adds	r3, #4
 801d0c6:	f104 0015 	add.w	r0, r4, #21
 801d0ca:	4584      	cmp	ip, r0
 801d0cc:	bf38      	it	cc
 801d0ce:	2304      	movcc	r3, #4
 801d0d0:	50ca      	str	r2, [r1, r3]
 801d0d2:	b10a      	cbz	r2, 801d0d8 <__lshift+0xa4>
 801d0d4:	f108 0602 	add.w	r6, r8, #2
 801d0d8:	3e01      	subs	r6, #1
 801d0da:	4638      	mov	r0, r7
 801d0dc:	612e      	str	r6, [r5, #16]
 801d0de:	4621      	mov	r1, r4
 801d0e0:	f7ff fd90 	bl	801cc04 <_Bfree>
 801d0e4:	4628      	mov	r0, r5
 801d0e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d0ea:	f842 0f04 	str.w	r0, [r2, #4]!
 801d0ee:	3301      	adds	r3, #1
 801d0f0:	e7c5      	b.n	801d07e <__lshift+0x4a>
 801d0f2:	3904      	subs	r1, #4
 801d0f4:	f853 2b04 	ldr.w	r2, [r3], #4
 801d0f8:	f841 2f04 	str.w	r2, [r1, #4]!
 801d0fc:	459c      	cmp	ip, r3
 801d0fe:	d8f9      	bhi.n	801d0f4 <__lshift+0xc0>
 801d100:	e7ea      	b.n	801d0d8 <__lshift+0xa4>
 801d102:	bf00      	nop
 801d104:	080226ac 	.word	0x080226ac
 801d108:	0802271d 	.word	0x0802271d

0801d10c <__mcmp>:
 801d10c:	690a      	ldr	r2, [r1, #16]
 801d10e:	4603      	mov	r3, r0
 801d110:	6900      	ldr	r0, [r0, #16]
 801d112:	1a80      	subs	r0, r0, r2
 801d114:	b530      	push	{r4, r5, lr}
 801d116:	d10e      	bne.n	801d136 <__mcmp+0x2a>
 801d118:	3314      	adds	r3, #20
 801d11a:	3114      	adds	r1, #20
 801d11c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801d120:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801d124:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801d128:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801d12c:	4295      	cmp	r5, r2
 801d12e:	d003      	beq.n	801d138 <__mcmp+0x2c>
 801d130:	d205      	bcs.n	801d13e <__mcmp+0x32>
 801d132:	f04f 30ff 	mov.w	r0, #4294967295
 801d136:	bd30      	pop	{r4, r5, pc}
 801d138:	42a3      	cmp	r3, r4
 801d13a:	d3f3      	bcc.n	801d124 <__mcmp+0x18>
 801d13c:	e7fb      	b.n	801d136 <__mcmp+0x2a>
 801d13e:	2001      	movs	r0, #1
 801d140:	e7f9      	b.n	801d136 <__mcmp+0x2a>
	...

0801d144 <__mdiff>:
 801d144:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d148:	4689      	mov	r9, r1
 801d14a:	4606      	mov	r6, r0
 801d14c:	4611      	mov	r1, r2
 801d14e:	4648      	mov	r0, r9
 801d150:	4614      	mov	r4, r2
 801d152:	f7ff ffdb 	bl	801d10c <__mcmp>
 801d156:	1e05      	subs	r5, r0, #0
 801d158:	d112      	bne.n	801d180 <__mdiff+0x3c>
 801d15a:	4629      	mov	r1, r5
 801d15c:	4630      	mov	r0, r6
 801d15e:	f7ff fd11 	bl	801cb84 <_Balloc>
 801d162:	4602      	mov	r2, r0
 801d164:	b928      	cbnz	r0, 801d172 <__mdiff+0x2e>
 801d166:	4b3f      	ldr	r3, [pc, #252]	@ (801d264 <__mdiff+0x120>)
 801d168:	f240 2137 	movw	r1, #567	@ 0x237
 801d16c:	483e      	ldr	r0, [pc, #248]	@ (801d268 <__mdiff+0x124>)
 801d16e:	f7fe fb09 	bl	801b784 <__assert_func>
 801d172:	2301      	movs	r3, #1
 801d174:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801d178:	4610      	mov	r0, r2
 801d17a:	b003      	add	sp, #12
 801d17c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d180:	bfbc      	itt	lt
 801d182:	464b      	movlt	r3, r9
 801d184:	46a1      	movlt	r9, r4
 801d186:	4630      	mov	r0, r6
 801d188:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801d18c:	bfba      	itte	lt
 801d18e:	461c      	movlt	r4, r3
 801d190:	2501      	movlt	r5, #1
 801d192:	2500      	movge	r5, #0
 801d194:	f7ff fcf6 	bl	801cb84 <_Balloc>
 801d198:	4602      	mov	r2, r0
 801d19a:	b918      	cbnz	r0, 801d1a4 <__mdiff+0x60>
 801d19c:	4b31      	ldr	r3, [pc, #196]	@ (801d264 <__mdiff+0x120>)
 801d19e:	f240 2145 	movw	r1, #581	@ 0x245
 801d1a2:	e7e3      	b.n	801d16c <__mdiff+0x28>
 801d1a4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801d1a8:	6926      	ldr	r6, [r4, #16]
 801d1aa:	60c5      	str	r5, [r0, #12]
 801d1ac:	f109 0310 	add.w	r3, r9, #16
 801d1b0:	f109 0514 	add.w	r5, r9, #20
 801d1b4:	f104 0e14 	add.w	lr, r4, #20
 801d1b8:	f100 0b14 	add.w	fp, r0, #20
 801d1bc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801d1c0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801d1c4:	9301      	str	r3, [sp, #4]
 801d1c6:	46d9      	mov	r9, fp
 801d1c8:	f04f 0c00 	mov.w	ip, #0
 801d1cc:	9b01      	ldr	r3, [sp, #4]
 801d1ce:	f85e 0b04 	ldr.w	r0, [lr], #4
 801d1d2:	f853 af04 	ldr.w	sl, [r3, #4]!
 801d1d6:	9301      	str	r3, [sp, #4]
 801d1d8:	fa1f f38a 	uxth.w	r3, sl
 801d1dc:	4619      	mov	r1, r3
 801d1de:	b283      	uxth	r3, r0
 801d1e0:	1acb      	subs	r3, r1, r3
 801d1e2:	0c00      	lsrs	r0, r0, #16
 801d1e4:	4463      	add	r3, ip
 801d1e6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801d1ea:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801d1ee:	b29b      	uxth	r3, r3
 801d1f0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801d1f4:	4576      	cmp	r6, lr
 801d1f6:	f849 3b04 	str.w	r3, [r9], #4
 801d1fa:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801d1fe:	d8e5      	bhi.n	801d1cc <__mdiff+0x88>
 801d200:	1b33      	subs	r3, r6, r4
 801d202:	3b15      	subs	r3, #21
 801d204:	f023 0303 	bic.w	r3, r3, #3
 801d208:	3415      	adds	r4, #21
 801d20a:	3304      	adds	r3, #4
 801d20c:	42a6      	cmp	r6, r4
 801d20e:	bf38      	it	cc
 801d210:	2304      	movcc	r3, #4
 801d212:	441d      	add	r5, r3
 801d214:	445b      	add	r3, fp
 801d216:	461e      	mov	r6, r3
 801d218:	462c      	mov	r4, r5
 801d21a:	4544      	cmp	r4, r8
 801d21c:	d30e      	bcc.n	801d23c <__mdiff+0xf8>
 801d21e:	f108 0103 	add.w	r1, r8, #3
 801d222:	1b49      	subs	r1, r1, r5
 801d224:	f021 0103 	bic.w	r1, r1, #3
 801d228:	3d03      	subs	r5, #3
 801d22a:	45a8      	cmp	r8, r5
 801d22c:	bf38      	it	cc
 801d22e:	2100      	movcc	r1, #0
 801d230:	440b      	add	r3, r1
 801d232:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801d236:	b191      	cbz	r1, 801d25e <__mdiff+0x11a>
 801d238:	6117      	str	r7, [r2, #16]
 801d23a:	e79d      	b.n	801d178 <__mdiff+0x34>
 801d23c:	f854 1b04 	ldr.w	r1, [r4], #4
 801d240:	46e6      	mov	lr, ip
 801d242:	0c08      	lsrs	r0, r1, #16
 801d244:	fa1c fc81 	uxtah	ip, ip, r1
 801d248:	4471      	add	r1, lr
 801d24a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801d24e:	b289      	uxth	r1, r1
 801d250:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801d254:	f846 1b04 	str.w	r1, [r6], #4
 801d258:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801d25c:	e7dd      	b.n	801d21a <__mdiff+0xd6>
 801d25e:	3f01      	subs	r7, #1
 801d260:	e7e7      	b.n	801d232 <__mdiff+0xee>
 801d262:	bf00      	nop
 801d264:	080226ac 	.word	0x080226ac
 801d268:	0802271d 	.word	0x0802271d

0801d26c <__ulp>:
 801d26c:	b082      	sub	sp, #8
 801d26e:	ed8d 0b00 	vstr	d0, [sp]
 801d272:	9a01      	ldr	r2, [sp, #4]
 801d274:	4b0f      	ldr	r3, [pc, #60]	@ (801d2b4 <__ulp+0x48>)
 801d276:	4013      	ands	r3, r2
 801d278:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 801d27c:	2b00      	cmp	r3, #0
 801d27e:	dc08      	bgt.n	801d292 <__ulp+0x26>
 801d280:	425b      	negs	r3, r3
 801d282:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 801d286:	ea4f 5223 	mov.w	r2, r3, asr #20
 801d28a:	da04      	bge.n	801d296 <__ulp+0x2a>
 801d28c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 801d290:	4113      	asrs	r3, r2
 801d292:	2200      	movs	r2, #0
 801d294:	e008      	b.n	801d2a8 <__ulp+0x3c>
 801d296:	f1a2 0314 	sub.w	r3, r2, #20
 801d29a:	2b1e      	cmp	r3, #30
 801d29c:	bfda      	itte	le
 801d29e:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 801d2a2:	40da      	lsrle	r2, r3
 801d2a4:	2201      	movgt	r2, #1
 801d2a6:	2300      	movs	r3, #0
 801d2a8:	4619      	mov	r1, r3
 801d2aa:	4610      	mov	r0, r2
 801d2ac:	ec41 0b10 	vmov	d0, r0, r1
 801d2b0:	b002      	add	sp, #8
 801d2b2:	4770      	bx	lr
 801d2b4:	7ff00000 	.word	0x7ff00000

0801d2b8 <__b2d>:
 801d2b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d2bc:	6906      	ldr	r6, [r0, #16]
 801d2be:	f100 0814 	add.w	r8, r0, #20
 801d2c2:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801d2c6:	1f37      	subs	r7, r6, #4
 801d2c8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801d2cc:	4610      	mov	r0, r2
 801d2ce:	f7ff fd4b 	bl	801cd68 <__hi0bits>
 801d2d2:	f1c0 0320 	rsb	r3, r0, #32
 801d2d6:	280a      	cmp	r0, #10
 801d2d8:	600b      	str	r3, [r1, #0]
 801d2da:	491b      	ldr	r1, [pc, #108]	@ (801d348 <__b2d+0x90>)
 801d2dc:	dc15      	bgt.n	801d30a <__b2d+0x52>
 801d2de:	f1c0 0c0b 	rsb	ip, r0, #11
 801d2e2:	fa22 f30c 	lsr.w	r3, r2, ip
 801d2e6:	45b8      	cmp	r8, r7
 801d2e8:	ea43 0501 	orr.w	r5, r3, r1
 801d2ec:	bf34      	ite	cc
 801d2ee:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801d2f2:	2300      	movcs	r3, #0
 801d2f4:	3015      	adds	r0, #21
 801d2f6:	fa02 f000 	lsl.w	r0, r2, r0
 801d2fa:	fa23 f30c 	lsr.w	r3, r3, ip
 801d2fe:	4303      	orrs	r3, r0
 801d300:	461c      	mov	r4, r3
 801d302:	ec45 4b10 	vmov	d0, r4, r5
 801d306:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d30a:	45b8      	cmp	r8, r7
 801d30c:	bf3a      	itte	cc
 801d30e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801d312:	f1a6 0708 	subcc.w	r7, r6, #8
 801d316:	2300      	movcs	r3, #0
 801d318:	380b      	subs	r0, #11
 801d31a:	d012      	beq.n	801d342 <__b2d+0x8a>
 801d31c:	f1c0 0120 	rsb	r1, r0, #32
 801d320:	fa23 f401 	lsr.w	r4, r3, r1
 801d324:	4082      	lsls	r2, r0
 801d326:	4322      	orrs	r2, r4
 801d328:	4547      	cmp	r7, r8
 801d32a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 801d32e:	bf8c      	ite	hi
 801d330:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 801d334:	2200      	movls	r2, #0
 801d336:	4083      	lsls	r3, r0
 801d338:	40ca      	lsrs	r2, r1
 801d33a:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 801d33e:	4313      	orrs	r3, r2
 801d340:	e7de      	b.n	801d300 <__b2d+0x48>
 801d342:	ea42 0501 	orr.w	r5, r2, r1
 801d346:	e7db      	b.n	801d300 <__b2d+0x48>
 801d348:	3ff00000 	.word	0x3ff00000

0801d34c <__d2b>:
 801d34c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801d350:	460f      	mov	r7, r1
 801d352:	2101      	movs	r1, #1
 801d354:	ec59 8b10 	vmov	r8, r9, d0
 801d358:	4616      	mov	r6, r2
 801d35a:	f7ff fc13 	bl	801cb84 <_Balloc>
 801d35e:	4604      	mov	r4, r0
 801d360:	b930      	cbnz	r0, 801d370 <__d2b+0x24>
 801d362:	4602      	mov	r2, r0
 801d364:	4b23      	ldr	r3, [pc, #140]	@ (801d3f4 <__d2b+0xa8>)
 801d366:	4824      	ldr	r0, [pc, #144]	@ (801d3f8 <__d2b+0xac>)
 801d368:	f240 310f 	movw	r1, #783	@ 0x30f
 801d36c:	f7fe fa0a 	bl	801b784 <__assert_func>
 801d370:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801d374:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801d378:	b10d      	cbz	r5, 801d37e <__d2b+0x32>
 801d37a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801d37e:	9301      	str	r3, [sp, #4]
 801d380:	f1b8 0300 	subs.w	r3, r8, #0
 801d384:	d023      	beq.n	801d3ce <__d2b+0x82>
 801d386:	4668      	mov	r0, sp
 801d388:	9300      	str	r3, [sp, #0]
 801d38a:	f7ff fd0c 	bl	801cda6 <__lo0bits>
 801d38e:	e9dd 1200 	ldrd	r1, r2, [sp]
 801d392:	b1d0      	cbz	r0, 801d3ca <__d2b+0x7e>
 801d394:	f1c0 0320 	rsb	r3, r0, #32
 801d398:	fa02 f303 	lsl.w	r3, r2, r3
 801d39c:	430b      	orrs	r3, r1
 801d39e:	40c2      	lsrs	r2, r0
 801d3a0:	6163      	str	r3, [r4, #20]
 801d3a2:	9201      	str	r2, [sp, #4]
 801d3a4:	9b01      	ldr	r3, [sp, #4]
 801d3a6:	61a3      	str	r3, [r4, #24]
 801d3a8:	2b00      	cmp	r3, #0
 801d3aa:	bf0c      	ite	eq
 801d3ac:	2201      	moveq	r2, #1
 801d3ae:	2202      	movne	r2, #2
 801d3b0:	6122      	str	r2, [r4, #16]
 801d3b2:	b1a5      	cbz	r5, 801d3de <__d2b+0x92>
 801d3b4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801d3b8:	4405      	add	r5, r0
 801d3ba:	603d      	str	r5, [r7, #0]
 801d3bc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801d3c0:	6030      	str	r0, [r6, #0]
 801d3c2:	4620      	mov	r0, r4
 801d3c4:	b003      	add	sp, #12
 801d3c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d3ca:	6161      	str	r1, [r4, #20]
 801d3cc:	e7ea      	b.n	801d3a4 <__d2b+0x58>
 801d3ce:	a801      	add	r0, sp, #4
 801d3d0:	f7ff fce9 	bl	801cda6 <__lo0bits>
 801d3d4:	9b01      	ldr	r3, [sp, #4]
 801d3d6:	6163      	str	r3, [r4, #20]
 801d3d8:	3020      	adds	r0, #32
 801d3da:	2201      	movs	r2, #1
 801d3dc:	e7e8      	b.n	801d3b0 <__d2b+0x64>
 801d3de:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801d3e2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801d3e6:	6038      	str	r0, [r7, #0]
 801d3e8:	6918      	ldr	r0, [r3, #16]
 801d3ea:	f7ff fcbd 	bl	801cd68 <__hi0bits>
 801d3ee:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801d3f2:	e7e5      	b.n	801d3c0 <__d2b+0x74>
 801d3f4:	080226ac 	.word	0x080226ac
 801d3f8:	0802271d 	.word	0x0802271d

0801d3fc <__ratio>:
 801d3fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d400:	b085      	sub	sp, #20
 801d402:	e9cd 1000 	strd	r1, r0, [sp]
 801d406:	a902      	add	r1, sp, #8
 801d408:	f7ff ff56 	bl	801d2b8 <__b2d>
 801d40c:	9800      	ldr	r0, [sp, #0]
 801d40e:	a903      	add	r1, sp, #12
 801d410:	ec55 4b10 	vmov	r4, r5, d0
 801d414:	f7ff ff50 	bl	801d2b8 <__b2d>
 801d418:	9b01      	ldr	r3, [sp, #4]
 801d41a:	6919      	ldr	r1, [r3, #16]
 801d41c:	9b00      	ldr	r3, [sp, #0]
 801d41e:	691b      	ldr	r3, [r3, #16]
 801d420:	1ac9      	subs	r1, r1, r3
 801d422:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 801d426:	1a9b      	subs	r3, r3, r2
 801d428:	ec5b ab10 	vmov	sl, fp, d0
 801d42c:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 801d430:	2b00      	cmp	r3, #0
 801d432:	bfce      	itee	gt
 801d434:	462a      	movgt	r2, r5
 801d436:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801d43a:	465a      	movle	r2, fp
 801d43c:	462f      	mov	r7, r5
 801d43e:	46d9      	mov	r9, fp
 801d440:	bfcc      	ite	gt
 801d442:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801d446:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 801d44a:	464b      	mov	r3, r9
 801d44c:	4652      	mov	r2, sl
 801d44e:	4620      	mov	r0, r4
 801d450:	4639      	mov	r1, r7
 801d452:	f7e3 f9d3 	bl	80007fc <__aeabi_ddiv>
 801d456:	ec41 0b10 	vmov	d0, r0, r1
 801d45a:	b005      	add	sp, #20
 801d45c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d460 <__copybits>:
 801d460:	3901      	subs	r1, #1
 801d462:	b570      	push	{r4, r5, r6, lr}
 801d464:	1149      	asrs	r1, r1, #5
 801d466:	6914      	ldr	r4, [r2, #16]
 801d468:	3101      	adds	r1, #1
 801d46a:	f102 0314 	add.w	r3, r2, #20
 801d46e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801d472:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801d476:	1f05      	subs	r5, r0, #4
 801d478:	42a3      	cmp	r3, r4
 801d47a:	d30c      	bcc.n	801d496 <__copybits+0x36>
 801d47c:	1aa3      	subs	r3, r4, r2
 801d47e:	3b11      	subs	r3, #17
 801d480:	f023 0303 	bic.w	r3, r3, #3
 801d484:	3211      	adds	r2, #17
 801d486:	42a2      	cmp	r2, r4
 801d488:	bf88      	it	hi
 801d48a:	2300      	movhi	r3, #0
 801d48c:	4418      	add	r0, r3
 801d48e:	2300      	movs	r3, #0
 801d490:	4288      	cmp	r0, r1
 801d492:	d305      	bcc.n	801d4a0 <__copybits+0x40>
 801d494:	bd70      	pop	{r4, r5, r6, pc}
 801d496:	f853 6b04 	ldr.w	r6, [r3], #4
 801d49a:	f845 6f04 	str.w	r6, [r5, #4]!
 801d49e:	e7eb      	b.n	801d478 <__copybits+0x18>
 801d4a0:	f840 3b04 	str.w	r3, [r0], #4
 801d4a4:	e7f4      	b.n	801d490 <__copybits+0x30>

0801d4a6 <__any_on>:
 801d4a6:	f100 0214 	add.w	r2, r0, #20
 801d4aa:	6900      	ldr	r0, [r0, #16]
 801d4ac:	114b      	asrs	r3, r1, #5
 801d4ae:	4298      	cmp	r0, r3
 801d4b0:	b510      	push	{r4, lr}
 801d4b2:	db11      	blt.n	801d4d8 <__any_on+0x32>
 801d4b4:	dd0a      	ble.n	801d4cc <__any_on+0x26>
 801d4b6:	f011 011f 	ands.w	r1, r1, #31
 801d4ba:	d007      	beq.n	801d4cc <__any_on+0x26>
 801d4bc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801d4c0:	fa24 f001 	lsr.w	r0, r4, r1
 801d4c4:	fa00 f101 	lsl.w	r1, r0, r1
 801d4c8:	428c      	cmp	r4, r1
 801d4ca:	d10b      	bne.n	801d4e4 <__any_on+0x3e>
 801d4cc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801d4d0:	4293      	cmp	r3, r2
 801d4d2:	d803      	bhi.n	801d4dc <__any_on+0x36>
 801d4d4:	2000      	movs	r0, #0
 801d4d6:	bd10      	pop	{r4, pc}
 801d4d8:	4603      	mov	r3, r0
 801d4da:	e7f7      	b.n	801d4cc <__any_on+0x26>
 801d4dc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801d4e0:	2900      	cmp	r1, #0
 801d4e2:	d0f5      	beq.n	801d4d0 <__any_on+0x2a>
 801d4e4:	2001      	movs	r0, #1
 801d4e6:	e7f6      	b.n	801d4d6 <__any_on+0x30>

0801d4e8 <__ascii_wctomb>:
 801d4e8:	4603      	mov	r3, r0
 801d4ea:	4608      	mov	r0, r1
 801d4ec:	b141      	cbz	r1, 801d500 <__ascii_wctomb+0x18>
 801d4ee:	2aff      	cmp	r2, #255	@ 0xff
 801d4f0:	d904      	bls.n	801d4fc <__ascii_wctomb+0x14>
 801d4f2:	228a      	movs	r2, #138	@ 0x8a
 801d4f4:	601a      	str	r2, [r3, #0]
 801d4f6:	f04f 30ff 	mov.w	r0, #4294967295
 801d4fa:	4770      	bx	lr
 801d4fc:	700a      	strb	r2, [r1, #0]
 801d4fe:	2001      	movs	r0, #1
 801d500:	4770      	bx	lr

0801d502 <__ssputs_r>:
 801d502:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d506:	688e      	ldr	r6, [r1, #8]
 801d508:	461f      	mov	r7, r3
 801d50a:	42be      	cmp	r6, r7
 801d50c:	680b      	ldr	r3, [r1, #0]
 801d50e:	4682      	mov	sl, r0
 801d510:	460c      	mov	r4, r1
 801d512:	4690      	mov	r8, r2
 801d514:	d82d      	bhi.n	801d572 <__ssputs_r+0x70>
 801d516:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801d51a:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801d51e:	d026      	beq.n	801d56e <__ssputs_r+0x6c>
 801d520:	6965      	ldr	r5, [r4, #20]
 801d522:	6909      	ldr	r1, [r1, #16]
 801d524:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801d528:	eba3 0901 	sub.w	r9, r3, r1
 801d52c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801d530:	1c7b      	adds	r3, r7, #1
 801d532:	444b      	add	r3, r9
 801d534:	106d      	asrs	r5, r5, #1
 801d536:	429d      	cmp	r5, r3
 801d538:	bf38      	it	cc
 801d53a:	461d      	movcc	r5, r3
 801d53c:	0553      	lsls	r3, r2, #21
 801d53e:	d527      	bpl.n	801d590 <__ssputs_r+0x8e>
 801d540:	4629      	mov	r1, r5
 801d542:	f7fc f8a3 	bl	801968c <_malloc_r>
 801d546:	4606      	mov	r6, r0
 801d548:	b360      	cbz	r0, 801d5a4 <__ssputs_r+0xa2>
 801d54a:	6921      	ldr	r1, [r4, #16]
 801d54c:	464a      	mov	r2, r9
 801d54e:	f7fe f8fc 	bl	801b74a <memcpy>
 801d552:	89a3      	ldrh	r3, [r4, #12]
 801d554:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801d558:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801d55c:	81a3      	strh	r3, [r4, #12]
 801d55e:	6126      	str	r6, [r4, #16]
 801d560:	6165      	str	r5, [r4, #20]
 801d562:	444e      	add	r6, r9
 801d564:	eba5 0509 	sub.w	r5, r5, r9
 801d568:	6026      	str	r6, [r4, #0]
 801d56a:	60a5      	str	r5, [r4, #8]
 801d56c:	463e      	mov	r6, r7
 801d56e:	42be      	cmp	r6, r7
 801d570:	d900      	bls.n	801d574 <__ssputs_r+0x72>
 801d572:	463e      	mov	r6, r7
 801d574:	6820      	ldr	r0, [r4, #0]
 801d576:	4632      	mov	r2, r6
 801d578:	4641      	mov	r1, r8
 801d57a:	f000 fbad 	bl	801dcd8 <memmove>
 801d57e:	68a3      	ldr	r3, [r4, #8]
 801d580:	1b9b      	subs	r3, r3, r6
 801d582:	60a3      	str	r3, [r4, #8]
 801d584:	6823      	ldr	r3, [r4, #0]
 801d586:	4433      	add	r3, r6
 801d588:	6023      	str	r3, [r4, #0]
 801d58a:	2000      	movs	r0, #0
 801d58c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d590:	462a      	mov	r2, r5
 801d592:	f000 fbd6 	bl	801dd42 <_realloc_r>
 801d596:	4606      	mov	r6, r0
 801d598:	2800      	cmp	r0, #0
 801d59a:	d1e0      	bne.n	801d55e <__ssputs_r+0x5c>
 801d59c:	6921      	ldr	r1, [r4, #16]
 801d59e:	4650      	mov	r0, sl
 801d5a0:	f7fe ff5a 	bl	801c458 <_free_r>
 801d5a4:	230c      	movs	r3, #12
 801d5a6:	f8ca 3000 	str.w	r3, [sl]
 801d5aa:	89a3      	ldrh	r3, [r4, #12]
 801d5ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801d5b0:	81a3      	strh	r3, [r4, #12]
 801d5b2:	f04f 30ff 	mov.w	r0, #4294967295
 801d5b6:	e7e9      	b.n	801d58c <__ssputs_r+0x8a>

0801d5b8 <_svfiprintf_r>:
 801d5b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d5bc:	4698      	mov	r8, r3
 801d5be:	898b      	ldrh	r3, [r1, #12]
 801d5c0:	061b      	lsls	r3, r3, #24
 801d5c2:	b09d      	sub	sp, #116	@ 0x74
 801d5c4:	4607      	mov	r7, r0
 801d5c6:	460d      	mov	r5, r1
 801d5c8:	4614      	mov	r4, r2
 801d5ca:	d510      	bpl.n	801d5ee <_svfiprintf_r+0x36>
 801d5cc:	690b      	ldr	r3, [r1, #16]
 801d5ce:	b973      	cbnz	r3, 801d5ee <_svfiprintf_r+0x36>
 801d5d0:	2140      	movs	r1, #64	@ 0x40
 801d5d2:	f7fc f85b 	bl	801968c <_malloc_r>
 801d5d6:	6028      	str	r0, [r5, #0]
 801d5d8:	6128      	str	r0, [r5, #16]
 801d5da:	b930      	cbnz	r0, 801d5ea <_svfiprintf_r+0x32>
 801d5dc:	230c      	movs	r3, #12
 801d5de:	603b      	str	r3, [r7, #0]
 801d5e0:	f04f 30ff 	mov.w	r0, #4294967295
 801d5e4:	b01d      	add	sp, #116	@ 0x74
 801d5e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d5ea:	2340      	movs	r3, #64	@ 0x40
 801d5ec:	616b      	str	r3, [r5, #20]
 801d5ee:	2300      	movs	r3, #0
 801d5f0:	9309      	str	r3, [sp, #36]	@ 0x24
 801d5f2:	2320      	movs	r3, #32
 801d5f4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801d5f8:	f8cd 800c 	str.w	r8, [sp, #12]
 801d5fc:	2330      	movs	r3, #48	@ 0x30
 801d5fe:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801d79c <_svfiprintf_r+0x1e4>
 801d602:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801d606:	f04f 0901 	mov.w	r9, #1
 801d60a:	4623      	mov	r3, r4
 801d60c:	469a      	mov	sl, r3
 801d60e:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d612:	b10a      	cbz	r2, 801d618 <_svfiprintf_r+0x60>
 801d614:	2a25      	cmp	r2, #37	@ 0x25
 801d616:	d1f9      	bne.n	801d60c <_svfiprintf_r+0x54>
 801d618:	ebba 0b04 	subs.w	fp, sl, r4
 801d61c:	d00b      	beq.n	801d636 <_svfiprintf_r+0x7e>
 801d61e:	465b      	mov	r3, fp
 801d620:	4622      	mov	r2, r4
 801d622:	4629      	mov	r1, r5
 801d624:	4638      	mov	r0, r7
 801d626:	f7ff ff6c 	bl	801d502 <__ssputs_r>
 801d62a:	3001      	adds	r0, #1
 801d62c:	f000 80a7 	beq.w	801d77e <_svfiprintf_r+0x1c6>
 801d630:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801d632:	445a      	add	r2, fp
 801d634:	9209      	str	r2, [sp, #36]	@ 0x24
 801d636:	f89a 3000 	ldrb.w	r3, [sl]
 801d63a:	2b00      	cmp	r3, #0
 801d63c:	f000 809f 	beq.w	801d77e <_svfiprintf_r+0x1c6>
 801d640:	2300      	movs	r3, #0
 801d642:	f04f 32ff 	mov.w	r2, #4294967295
 801d646:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801d64a:	f10a 0a01 	add.w	sl, sl, #1
 801d64e:	9304      	str	r3, [sp, #16]
 801d650:	9307      	str	r3, [sp, #28]
 801d652:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801d656:	931a      	str	r3, [sp, #104]	@ 0x68
 801d658:	4654      	mov	r4, sl
 801d65a:	2205      	movs	r2, #5
 801d65c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d660:	484e      	ldr	r0, [pc, #312]	@ (801d79c <_svfiprintf_r+0x1e4>)
 801d662:	f7e2 fd8d 	bl	8000180 <memchr>
 801d666:	9a04      	ldr	r2, [sp, #16]
 801d668:	b9d8      	cbnz	r0, 801d6a2 <_svfiprintf_r+0xea>
 801d66a:	06d0      	lsls	r0, r2, #27
 801d66c:	bf44      	itt	mi
 801d66e:	2320      	movmi	r3, #32
 801d670:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801d674:	0711      	lsls	r1, r2, #28
 801d676:	bf44      	itt	mi
 801d678:	232b      	movmi	r3, #43	@ 0x2b
 801d67a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801d67e:	f89a 3000 	ldrb.w	r3, [sl]
 801d682:	2b2a      	cmp	r3, #42	@ 0x2a
 801d684:	d015      	beq.n	801d6b2 <_svfiprintf_r+0xfa>
 801d686:	9a07      	ldr	r2, [sp, #28]
 801d688:	4654      	mov	r4, sl
 801d68a:	2000      	movs	r0, #0
 801d68c:	f04f 0c0a 	mov.w	ip, #10
 801d690:	4621      	mov	r1, r4
 801d692:	f811 3b01 	ldrb.w	r3, [r1], #1
 801d696:	3b30      	subs	r3, #48	@ 0x30
 801d698:	2b09      	cmp	r3, #9
 801d69a:	d94b      	bls.n	801d734 <_svfiprintf_r+0x17c>
 801d69c:	b1b0      	cbz	r0, 801d6cc <_svfiprintf_r+0x114>
 801d69e:	9207      	str	r2, [sp, #28]
 801d6a0:	e014      	b.n	801d6cc <_svfiprintf_r+0x114>
 801d6a2:	eba0 0308 	sub.w	r3, r0, r8
 801d6a6:	fa09 f303 	lsl.w	r3, r9, r3
 801d6aa:	4313      	orrs	r3, r2
 801d6ac:	9304      	str	r3, [sp, #16]
 801d6ae:	46a2      	mov	sl, r4
 801d6b0:	e7d2      	b.n	801d658 <_svfiprintf_r+0xa0>
 801d6b2:	9b03      	ldr	r3, [sp, #12]
 801d6b4:	1d19      	adds	r1, r3, #4
 801d6b6:	681b      	ldr	r3, [r3, #0]
 801d6b8:	9103      	str	r1, [sp, #12]
 801d6ba:	2b00      	cmp	r3, #0
 801d6bc:	bfbb      	ittet	lt
 801d6be:	425b      	neglt	r3, r3
 801d6c0:	f042 0202 	orrlt.w	r2, r2, #2
 801d6c4:	9307      	strge	r3, [sp, #28]
 801d6c6:	9307      	strlt	r3, [sp, #28]
 801d6c8:	bfb8      	it	lt
 801d6ca:	9204      	strlt	r2, [sp, #16]
 801d6cc:	7823      	ldrb	r3, [r4, #0]
 801d6ce:	2b2e      	cmp	r3, #46	@ 0x2e
 801d6d0:	d10a      	bne.n	801d6e8 <_svfiprintf_r+0x130>
 801d6d2:	7863      	ldrb	r3, [r4, #1]
 801d6d4:	2b2a      	cmp	r3, #42	@ 0x2a
 801d6d6:	d132      	bne.n	801d73e <_svfiprintf_r+0x186>
 801d6d8:	9b03      	ldr	r3, [sp, #12]
 801d6da:	1d1a      	adds	r2, r3, #4
 801d6dc:	681b      	ldr	r3, [r3, #0]
 801d6de:	9203      	str	r2, [sp, #12]
 801d6e0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801d6e4:	3402      	adds	r4, #2
 801d6e6:	9305      	str	r3, [sp, #20]
 801d6e8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801d7ac <_svfiprintf_r+0x1f4>
 801d6ec:	7821      	ldrb	r1, [r4, #0]
 801d6ee:	2203      	movs	r2, #3
 801d6f0:	4650      	mov	r0, sl
 801d6f2:	f7e2 fd45 	bl	8000180 <memchr>
 801d6f6:	b138      	cbz	r0, 801d708 <_svfiprintf_r+0x150>
 801d6f8:	9b04      	ldr	r3, [sp, #16]
 801d6fa:	eba0 000a 	sub.w	r0, r0, sl
 801d6fe:	2240      	movs	r2, #64	@ 0x40
 801d700:	4082      	lsls	r2, r0
 801d702:	4313      	orrs	r3, r2
 801d704:	3401      	adds	r4, #1
 801d706:	9304      	str	r3, [sp, #16]
 801d708:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d70c:	4824      	ldr	r0, [pc, #144]	@ (801d7a0 <_svfiprintf_r+0x1e8>)
 801d70e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801d712:	2206      	movs	r2, #6
 801d714:	f7e2 fd34 	bl	8000180 <memchr>
 801d718:	2800      	cmp	r0, #0
 801d71a:	d036      	beq.n	801d78a <_svfiprintf_r+0x1d2>
 801d71c:	4b21      	ldr	r3, [pc, #132]	@ (801d7a4 <_svfiprintf_r+0x1ec>)
 801d71e:	bb1b      	cbnz	r3, 801d768 <_svfiprintf_r+0x1b0>
 801d720:	9b03      	ldr	r3, [sp, #12]
 801d722:	3307      	adds	r3, #7
 801d724:	f023 0307 	bic.w	r3, r3, #7
 801d728:	3308      	adds	r3, #8
 801d72a:	9303      	str	r3, [sp, #12]
 801d72c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d72e:	4433      	add	r3, r6
 801d730:	9309      	str	r3, [sp, #36]	@ 0x24
 801d732:	e76a      	b.n	801d60a <_svfiprintf_r+0x52>
 801d734:	fb0c 3202 	mla	r2, ip, r2, r3
 801d738:	460c      	mov	r4, r1
 801d73a:	2001      	movs	r0, #1
 801d73c:	e7a8      	b.n	801d690 <_svfiprintf_r+0xd8>
 801d73e:	2300      	movs	r3, #0
 801d740:	3401      	adds	r4, #1
 801d742:	9305      	str	r3, [sp, #20]
 801d744:	4619      	mov	r1, r3
 801d746:	f04f 0c0a 	mov.w	ip, #10
 801d74a:	4620      	mov	r0, r4
 801d74c:	f810 2b01 	ldrb.w	r2, [r0], #1
 801d750:	3a30      	subs	r2, #48	@ 0x30
 801d752:	2a09      	cmp	r2, #9
 801d754:	d903      	bls.n	801d75e <_svfiprintf_r+0x1a6>
 801d756:	2b00      	cmp	r3, #0
 801d758:	d0c6      	beq.n	801d6e8 <_svfiprintf_r+0x130>
 801d75a:	9105      	str	r1, [sp, #20]
 801d75c:	e7c4      	b.n	801d6e8 <_svfiprintf_r+0x130>
 801d75e:	fb0c 2101 	mla	r1, ip, r1, r2
 801d762:	4604      	mov	r4, r0
 801d764:	2301      	movs	r3, #1
 801d766:	e7f0      	b.n	801d74a <_svfiprintf_r+0x192>
 801d768:	ab03      	add	r3, sp, #12
 801d76a:	9300      	str	r3, [sp, #0]
 801d76c:	462a      	mov	r2, r5
 801d76e:	4b0e      	ldr	r3, [pc, #56]	@ (801d7a8 <_svfiprintf_r+0x1f0>)
 801d770:	a904      	add	r1, sp, #16
 801d772:	4638      	mov	r0, r7
 801d774:	f7fc ffa8 	bl	801a6c8 <_printf_float>
 801d778:	1c42      	adds	r2, r0, #1
 801d77a:	4606      	mov	r6, r0
 801d77c:	d1d6      	bne.n	801d72c <_svfiprintf_r+0x174>
 801d77e:	89ab      	ldrh	r3, [r5, #12]
 801d780:	065b      	lsls	r3, r3, #25
 801d782:	f53f af2d 	bmi.w	801d5e0 <_svfiprintf_r+0x28>
 801d786:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801d788:	e72c      	b.n	801d5e4 <_svfiprintf_r+0x2c>
 801d78a:	ab03      	add	r3, sp, #12
 801d78c:	9300      	str	r3, [sp, #0]
 801d78e:	462a      	mov	r2, r5
 801d790:	4b05      	ldr	r3, [pc, #20]	@ (801d7a8 <_svfiprintf_r+0x1f0>)
 801d792:	a904      	add	r1, sp, #16
 801d794:	4638      	mov	r0, r7
 801d796:	f7fd fa2f 	bl	801abf8 <_printf_i>
 801d79a:	e7ed      	b.n	801d778 <_svfiprintf_r+0x1c0>
 801d79c:	08022878 	.word	0x08022878
 801d7a0:	08022882 	.word	0x08022882
 801d7a4:	0801a6c9 	.word	0x0801a6c9
 801d7a8:	0801d503 	.word	0x0801d503
 801d7ac:	0802287e 	.word	0x0802287e

0801d7b0 <__sfputc_r>:
 801d7b0:	6893      	ldr	r3, [r2, #8]
 801d7b2:	3b01      	subs	r3, #1
 801d7b4:	2b00      	cmp	r3, #0
 801d7b6:	b410      	push	{r4}
 801d7b8:	6093      	str	r3, [r2, #8]
 801d7ba:	da08      	bge.n	801d7ce <__sfputc_r+0x1e>
 801d7bc:	6994      	ldr	r4, [r2, #24]
 801d7be:	42a3      	cmp	r3, r4
 801d7c0:	db01      	blt.n	801d7c6 <__sfputc_r+0x16>
 801d7c2:	290a      	cmp	r1, #10
 801d7c4:	d103      	bne.n	801d7ce <__sfputc_r+0x1e>
 801d7c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d7ca:	f000 b9f1 	b.w	801dbb0 <__swbuf_r>
 801d7ce:	6813      	ldr	r3, [r2, #0]
 801d7d0:	1c58      	adds	r0, r3, #1
 801d7d2:	6010      	str	r0, [r2, #0]
 801d7d4:	7019      	strb	r1, [r3, #0]
 801d7d6:	4608      	mov	r0, r1
 801d7d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d7dc:	4770      	bx	lr

0801d7de <__sfputs_r>:
 801d7de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d7e0:	4606      	mov	r6, r0
 801d7e2:	460f      	mov	r7, r1
 801d7e4:	4614      	mov	r4, r2
 801d7e6:	18d5      	adds	r5, r2, r3
 801d7e8:	42ac      	cmp	r4, r5
 801d7ea:	d101      	bne.n	801d7f0 <__sfputs_r+0x12>
 801d7ec:	2000      	movs	r0, #0
 801d7ee:	e007      	b.n	801d800 <__sfputs_r+0x22>
 801d7f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d7f4:	463a      	mov	r2, r7
 801d7f6:	4630      	mov	r0, r6
 801d7f8:	f7ff ffda 	bl	801d7b0 <__sfputc_r>
 801d7fc:	1c43      	adds	r3, r0, #1
 801d7fe:	d1f3      	bne.n	801d7e8 <__sfputs_r+0xa>
 801d800:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801d804 <_vfiprintf_r>:
 801d804:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d808:	460d      	mov	r5, r1
 801d80a:	b09d      	sub	sp, #116	@ 0x74
 801d80c:	4614      	mov	r4, r2
 801d80e:	4698      	mov	r8, r3
 801d810:	4606      	mov	r6, r0
 801d812:	b118      	cbz	r0, 801d81c <_vfiprintf_r+0x18>
 801d814:	6a03      	ldr	r3, [r0, #32]
 801d816:	b90b      	cbnz	r3, 801d81c <_vfiprintf_r+0x18>
 801d818:	f7fd fdae 	bl	801b378 <__sinit>
 801d81c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801d81e:	07d9      	lsls	r1, r3, #31
 801d820:	d405      	bmi.n	801d82e <_vfiprintf_r+0x2a>
 801d822:	89ab      	ldrh	r3, [r5, #12]
 801d824:	059a      	lsls	r2, r3, #22
 801d826:	d402      	bmi.n	801d82e <_vfiprintf_r+0x2a>
 801d828:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801d82a:	f7fd ff84 	bl	801b736 <__retarget_lock_acquire_recursive>
 801d82e:	89ab      	ldrh	r3, [r5, #12]
 801d830:	071b      	lsls	r3, r3, #28
 801d832:	d501      	bpl.n	801d838 <_vfiprintf_r+0x34>
 801d834:	692b      	ldr	r3, [r5, #16]
 801d836:	b99b      	cbnz	r3, 801d860 <_vfiprintf_r+0x5c>
 801d838:	4629      	mov	r1, r5
 801d83a:	4630      	mov	r0, r6
 801d83c:	f000 f9f6 	bl	801dc2c <__swsetup_r>
 801d840:	b170      	cbz	r0, 801d860 <_vfiprintf_r+0x5c>
 801d842:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801d844:	07dc      	lsls	r4, r3, #31
 801d846:	d504      	bpl.n	801d852 <_vfiprintf_r+0x4e>
 801d848:	f04f 30ff 	mov.w	r0, #4294967295
 801d84c:	b01d      	add	sp, #116	@ 0x74
 801d84e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d852:	89ab      	ldrh	r3, [r5, #12]
 801d854:	0598      	lsls	r0, r3, #22
 801d856:	d4f7      	bmi.n	801d848 <_vfiprintf_r+0x44>
 801d858:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801d85a:	f7fd ff6d 	bl	801b738 <__retarget_lock_release_recursive>
 801d85e:	e7f3      	b.n	801d848 <_vfiprintf_r+0x44>
 801d860:	2300      	movs	r3, #0
 801d862:	9309      	str	r3, [sp, #36]	@ 0x24
 801d864:	2320      	movs	r3, #32
 801d866:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801d86a:	f8cd 800c 	str.w	r8, [sp, #12]
 801d86e:	2330      	movs	r3, #48	@ 0x30
 801d870:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801da20 <_vfiprintf_r+0x21c>
 801d874:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801d878:	f04f 0901 	mov.w	r9, #1
 801d87c:	4623      	mov	r3, r4
 801d87e:	469a      	mov	sl, r3
 801d880:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d884:	b10a      	cbz	r2, 801d88a <_vfiprintf_r+0x86>
 801d886:	2a25      	cmp	r2, #37	@ 0x25
 801d888:	d1f9      	bne.n	801d87e <_vfiprintf_r+0x7a>
 801d88a:	ebba 0b04 	subs.w	fp, sl, r4
 801d88e:	d00b      	beq.n	801d8a8 <_vfiprintf_r+0xa4>
 801d890:	465b      	mov	r3, fp
 801d892:	4622      	mov	r2, r4
 801d894:	4629      	mov	r1, r5
 801d896:	4630      	mov	r0, r6
 801d898:	f7ff ffa1 	bl	801d7de <__sfputs_r>
 801d89c:	3001      	adds	r0, #1
 801d89e:	f000 80a7 	beq.w	801d9f0 <_vfiprintf_r+0x1ec>
 801d8a2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801d8a4:	445a      	add	r2, fp
 801d8a6:	9209      	str	r2, [sp, #36]	@ 0x24
 801d8a8:	f89a 3000 	ldrb.w	r3, [sl]
 801d8ac:	2b00      	cmp	r3, #0
 801d8ae:	f000 809f 	beq.w	801d9f0 <_vfiprintf_r+0x1ec>
 801d8b2:	2300      	movs	r3, #0
 801d8b4:	f04f 32ff 	mov.w	r2, #4294967295
 801d8b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801d8bc:	f10a 0a01 	add.w	sl, sl, #1
 801d8c0:	9304      	str	r3, [sp, #16]
 801d8c2:	9307      	str	r3, [sp, #28]
 801d8c4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801d8c8:	931a      	str	r3, [sp, #104]	@ 0x68
 801d8ca:	4654      	mov	r4, sl
 801d8cc:	2205      	movs	r2, #5
 801d8ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d8d2:	4853      	ldr	r0, [pc, #332]	@ (801da20 <_vfiprintf_r+0x21c>)
 801d8d4:	f7e2 fc54 	bl	8000180 <memchr>
 801d8d8:	9a04      	ldr	r2, [sp, #16]
 801d8da:	b9d8      	cbnz	r0, 801d914 <_vfiprintf_r+0x110>
 801d8dc:	06d1      	lsls	r1, r2, #27
 801d8de:	bf44      	itt	mi
 801d8e0:	2320      	movmi	r3, #32
 801d8e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801d8e6:	0713      	lsls	r3, r2, #28
 801d8e8:	bf44      	itt	mi
 801d8ea:	232b      	movmi	r3, #43	@ 0x2b
 801d8ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801d8f0:	f89a 3000 	ldrb.w	r3, [sl]
 801d8f4:	2b2a      	cmp	r3, #42	@ 0x2a
 801d8f6:	d015      	beq.n	801d924 <_vfiprintf_r+0x120>
 801d8f8:	9a07      	ldr	r2, [sp, #28]
 801d8fa:	4654      	mov	r4, sl
 801d8fc:	2000      	movs	r0, #0
 801d8fe:	f04f 0c0a 	mov.w	ip, #10
 801d902:	4621      	mov	r1, r4
 801d904:	f811 3b01 	ldrb.w	r3, [r1], #1
 801d908:	3b30      	subs	r3, #48	@ 0x30
 801d90a:	2b09      	cmp	r3, #9
 801d90c:	d94b      	bls.n	801d9a6 <_vfiprintf_r+0x1a2>
 801d90e:	b1b0      	cbz	r0, 801d93e <_vfiprintf_r+0x13a>
 801d910:	9207      	str	r2, [sp, #28]
 801d912:	e014      	b.n	801d93e <_vfiprintf_r+0x13a>
 801d914:	eba0 0308 	sub.w	r3, r0, r8
 801d918:	fa09 f303 	lsl.w	r3, r9, r3
 801d91c:	4313      	orrs	r3, r2
 801d91e:	9304      	str	r3, [sp, #16]
 801d920:	46a2      	mov	sl, r4
 801d922:	e7d2      	b.n	801d8ca <_vfiprintf_r+0xc6>
 801d924:	9b03      	ldr	r3, [sp, #12]
 801d926:	1d19      	adds	r1, r3, #4
 801d928:	681b      	ldr	r3, [r3, #0]
 801d92a:	9103      	str	r1, [sp, #12]
 801d92c:	2b00      	cmp	r3, #0
 801d92e:	bfbb      	ittet	lt
 801d930:	425b      	neglt	r3, r3
 801d932:	f042 0202 	orrlt.w	r2, r2, #2
 801d936:	9307      	strge	r3, [sp, #28]
 801d938:	9307      	strlt	r3, [sp, #28]
 801d93a:	bfb8      	it	lt
 801d93c:	9204      	strlt	r2, [sp, #16]
 801d93e:	7823      	ldrb	r3, [r4, #0]
 801d940:	2b2e      	cmp	r3, #46	@ 0x2e
 801d942:	d10a      	bne.n	801d95a <_vfiprintf_r+0x156>
 801d944:	7863      	ldrb	r3, [r4, #1]
 801d946:	2b2a      	cmp	r3, #42	@ 0x2a
 801d948:	d132      	bne.n	801d9b0 <_vfiprintf_r+0x1ac>
 801d94a:	9b03      	ldr	r3, [sp, #12]
 801d94c:	1d1a      	adds	r2, r3, #4
 801d94e:	681b      	ldr	r3, [r3, #0]
 801d950:	9203      	str	r2, [sp, #12]
 801d952:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801d956:	3402      	adds	r4, #2
 801d958:	9305      	str	r3, [sp, #20]
 801d95a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801da30 <_vfiprintf_r+0x22c>
 801d95e:	7821      	ldrb	r1, [r4, #0]
 801d960:	2203      	movs	r2, #3
 801d962:	4650      	mov	r0, sl
 801d964:	f7e2 fc0c 	bl	8000180 <memchr>
 801d968:	b138      	cbz	r0, 801d97a <_vfiprintf_r+0x176>
 801d96a:	9b04      	ldr	r3, [sp, #16]
 801d96c:	eba0 000a 	sub.w	r0, r0, sl
 801d970:	2240      	movs	r2, #64	@ 0x40
 801d972:	4082      	lsls	r2, r0
 801d974:	4313      	orrs	r3, r2
 801d976:	3401      	adds	r4, #1
 801d978:	9304      	str	r3, [sp, #16]
 801d97a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d97e:	4829      	ldr	r0, [pc, #164]	@ (801da24 <_vfiprintf_r+0x220>)
 801d980:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801d984:	2206      	movs	r2, #6
 801d986:	f7e2 fbfb 	bl	8000180 <memchr>
 801d98a:	2800      	cmp	r0, #0
 801d98c:	d03f      	beq.n	801da0e <_vfiprintf_r+0x20a>
 801d98e:	4b26      	ldr	r3, [pc, #152]	@ (801da28 <_vfiprintf_r+0x224>)
 801d990:	bb1b      	cbnz	r3, 801d9da <_vfiprintf_r+0x1d6>
 801d992:	9b03      	ldr	r3, [sp, #12]
 801d994:	3307      	adds	r3, #7
 801d996:	f023 0307 	bic.w	r3, r3, #7
 801d99a:	3308      	adds	r3, #8
 801d99c:	9303      	str	r3, [sp, #12]
 801d99e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d9a0:	443b      	add	r3, r7
 801d9a2:	9309      	str	r3, [sp, #36]	@ 0x24
 801d9a4:	e76a      	b.n	801d87c <_vfiprintf_r+0x78>
 801d9a6:	fb0c 3202 	mla	r2, ip, r2, r3
 801d9aa:	460c      	mov	r4, r1
 801d9ac:	2001      	movs	r0, #1
 801d9ae:	e7a8      	b.n	801d902 <_vfiprintf_r+0xfe>
 801d9b0:	2300      	movs	r3, #0
 801d9b2:	3401      	adds	r4, #1
 801d9b4:	9305      	str	r3, [sp, #20]
 801d9b6:	4619      	mov	r1, r3
 801d9b8:	f04f 0c0a 	mov.w	ip, #10
 801d9bc:	4620      	mov	r0, r4
 801d9be:	f810 2b01 	ldrb.w	r2, [r0], #1
 801d9c2:	3a30      	subs	r2, #48	@ 0x30
 801d9c4:	2a09      	cmp	r2, #9
 801d9c6:	d903      	bls.n	801d9d0 <_vfiprintf_r+0x1cc>
 801d9c8:	2b00      	cmp	r3, #0
 801d9ca:	d0c6      	beq.n	801d95a <_vfiprintf_r+0x156>
 801d9cc:	9105      	str	r1, [sp, #20]
 801d9ce:	e7c4      	b.n	801d95a <_vfiprintf_r+0x156>
 801d9d0:	fb0c 2101 	mla	r1, ip, r1, r2
 801d9d4:	4604      	mov	r4, r0
 801d9d6:	2301      	movs	r3, #1
 801d9d8:	e7f0      	b.n	801d9bc <_vfiprintf_r+0x1b8>
 801d9da:	ab03      	add	r3, sp, #12
 801d9dc:	9300      	str	r3, [sp, #0]
 801d9de:	462a      	mov	r2, r5
 801d9e0:	4b12      	ldr	r3, [pc, #72]	@ (801da2c <_vfiprintf_r+0x228>)
 801d9e2:	a904      	add	r1, sp, #16
 801d9e4:	4630      	mov	r0, r6
 801d9e6:	f7fc fe6f 	bl	801a6c8 <_printf_float>
 801d9ea:	4607      	mov	r7, r0
 801d9ec:	1c78      	adds	r0, r7, #1
 801d9ee:	d1d6      	bne.n	801d99e <_vfiprintf_r+0x19a>
 801d9f0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801d9f2:	07d9      	lsls	r1, r3, #31
 801d9f4:	d405      	bmi.n	801da02 <_vfiprintf_r+0x1fe>
 801d9f6:	89ab      	ldrh	r3, [r5, #12]
 801d9f8:	059a      	lsls	r2, r3, #22
 801d9fa:	d402      	bmi.n	801da02 <_vfiprintf_r+0x1fe>
 801d9fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801d9fe:	f7fd fe9b 	bl	801b738 <__retarget_lock_release_recursive>
 801da02:	89ab      	ldrh	r3, [r5, #12]
 801da04:	065b      	lsls	r3, r3, #25
 801da06:	f53f af1f 	bmi.w	801d848 <_vfiprintf_r+0x44>
 801da0a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801da0c:	e71e      	b.n	801d84c <_vfiprintf_r+0x48>
 801da0e:	ab03      	add	r3, sp, #12
 801da10:	9300      	str	r3, [sp, #0]
 801da12:	462a      	mov	r2, r5
 801da14:	4b05      	ldr	r3, [pc, #20]	@ (801da2c <_vfiprintf_r+0x228>)
 801da16:	a904      	add	r1, sp, #16
 801da18:	4630      	mov	r0, r6
 801da1a:	f7fd f8ed 	bl	801abf8 <_printf_i>
 801da1e:	e7e4      	b.n	801d9ea <_vfiprintf_r+0x1e6>
 801da20:	08022878 	.word	0x08022878
 801da24:	08022882 	.word	0x08022882
 801da28:	0801a6c9 	.word	0x0801a6c9
 801da2c:	0801d7df 	.word	0x0801d7df
 801da30:	0802287e 	.word	0x0802287e

0801da34 <__sflush_r>:
 801da34:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801da38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801da3c:	0716      	lsls	r6, r2, #28
 801da3e:	4605      	mov	r5, r0
 801da40:	460c      	mov	r4, r1
 801da42:	d454      	bmi.n	801daee <__sflush_r+0xba>
 801da44:	684b      	ldr	r3, [r1, #4]
 801da46:	2b00      	cmp	r3, #0
 801da48:	dc02      	bgt.n	801da50 <__sflush_r+0x1c>
 801da4a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801da4c:	2b00      	cmp	r3, #0
 801da4e:	dd48      	ble.n	801dae2 <__sflush_r+0xae>
 801da50:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801da52:	2e00      	cmp	r6, #0
 801da54:	d045      	beq.n	801dae2 <__sflush_r+0xae>
 801da56:	2300      	movs	r3, #0
 801da58:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801da5c:	682f      	ldr	r7, [r5, #0]
 801da5e:	6a21      	ldr	r1, [r4, #32]
 801da60:	602b      	str	r3, [r5, #0]
 801da62:	d030      	beq.n	801dac6 <__sflush_r+0x92>
 801da64:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801da66:	89a3      	ldrh	r3, [r4, #12]
 801da68:	0759      	lsls	r1, r3, #29
 801da6a:	d505      	bpl.n	801da78 <__sflush_r+0x44>
 801da6c:	6863      	ldr	r3, [r4, #4]
 801da6e:	1ad2      	subs	r2, r2, r3
 801da70:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801da72:	b10b      	cbz	r3, 801da78 <__sflush_r+0x44>
 801da74:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801da76:	1ad2      	subs	r2, r2, r3
 801da78:	2300      	movs	r3, #0
 801da7a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801da7c:	6a21      	ldr	r1, [r4, #32]
 801da7e:	4628      	mov	r0, r5
 801da80:	47b0      	blx	r6
 801da82:	1c43      	adds	r3, r0, #1
 801da84:	89a3      	ldrh	r3, [r4, #12]
 801da86:	d106      	bne.n	801da96 <__sflush_r+0x62>
 801da88:	6829      	ldr	r1, [r5, #0]
 801da8a:	291d      	cmp	r1, #29
 801da8c:	d82b      	bhi.n	801dae6 <__sflush_r+0xb2>
 801da8e:	4a2a      	ldr	r2, [pc, #168]	@ (801db38 <__sflush_r+0x104>)
 801da90:	410a      	asrs	r2, r1
 801da92:	07d6      	lsls	r6, r2, #31
 801da94:	d427      	bmi.n	801dae6 <__sflush_r+0xb2>
 801da96:	2200      	movs	r2, #0
 801da98:	6062      	str	r2, [r4, #4]
 801da9a:	04d9      	lsls	r1, r3, #19
 801da9c:	6922      	ldr	r2, [r4, #16]
 801da9e:	6022      	str	r2, [r4, #0]
 801daa0:	d504      	bpl.n	801daac <__sflush_r+0x78>
 801daa2:	1c42      	adds	r2, r0, #1
 801daa4:	d101      	bne.n	801daaa <__sflush_r+0x76>
 801daa6:	682b      	ldr	r3, [r5, #0]
 801daa8:	b903      	cbnz	r3, 801daac <__sflush_r+0x78>
 801daaa:	6560      	str	r0, [r4, #84]	@ 0x54
 801daac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801daae:	602f      	str	r7, [r5, #0]
 801dab0:	b1b9      	cbz	r1, 801dae2 <__sflush_r+0xae>
 801dab2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801dab6:	4299      	cmp	r1, r3
 801dab8:	d002      	beq.n	801dac0 <__sflush_r+0x8c>
 801daba:	4628      	mov	r0, r5
 801dabc:	f7fe fccc 	bl	801c458 <_free_r>
 801dac0:	2300      	movs	r3, #0
 801dac2:	6363      	str	r3, [r4, #52]	@ 0x34
 801dac4:	e00d      	b.n	801dae2 <__sflush_r+0xae>
 801dac6:	2301      	movs	r3, #1
 801dac8:	4628      	mov	r0, r5
 801daca:	47b0      	blx	r6
 801dacc:	4602      	mov	r2, r0
 801dace:	1c50      	adds	r0, r2, #1
 801dad0:	d1c9      	bne.n	801da66 <__sflush_r+0x32>
 801dad2:	682b      	ldr	r3, [r5, #0]
 801dad4:	2b00      	cmp	r3, #0
 801dad6:	d0c6      	beq.n	801da66 <__sflush_r+0x32>
 801dad8:	2b1d      	cmp	r3, #29
 801dada:	d001      	beq.n	801dae0 <__sflush_r+0xac>
 801dadc:	2b16      	cmp	r3, #22
 801dade:	d11e      	bne.n	801db1e <__sflush_r+0xea>
 801dae0:	602f      	str	r7, [r5, #0]
 801dae2:	2000      	movs	r0, #0
 801dae4:	e022      	b.n	801db2c <__sflush_r+0xf8>
 801dae6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801daea:	b21b      	sxth	r3, r3
 801daec:	e01b      	b.n	801db26 <__sflush_r+0xf2>
 801daee:	690f      	ldr	r7, [r1, #16]
 801daf0:	2f00      	cmp	r7, #0
 801daf2:	d0f6      	beq.n	801dae2 <__sflush_r+0xae>
 801daf4:	0793      	lsls	r3, r2, #30
 801daf6:	680e      	ldr	r6, [r1, #0]
 801daf8:	bf08      	it	eq
 801dafa:	694b      	ldreq	r3, [r1, #20]
 801dafc:	600f      	str	r7, [r1, #0]
 801dafe:	bf18      	it	ne
 801db00:	2300      	movne	r3, #0
 801db02:	eba6 0807 	sub.w	r8, r6, r7
 801db06:	608b      	str	r3, [r1, #8]
 801db08:	f1b8 0f00 	cmp.w	r8, #0
 801db0c:	dde9      	ble.n	801dae2 <__sflush_r+0xae>
 801db0e:	6a21      	ldr	r1, [r4, #32]
 801db10:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801db12:	4643      	mov	r3, r8
 801db14:	463a      	mov	r2, r7
 801db16:	4628      	mov	r0, r5
 801db18:	47b0      	blx	r6
 801db1a:	2800      	cmp	r0, #0
 801db1c:	dc08      	bgt.n	801db30 <__sflush_r+0xfc>
 801db1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801db22:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801db26:	81a3      	strh	r3, [r4, #12]
 801db28:	f04f 30ff 	mov.w	r0, #4294967295
 801db2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801db30:	4407      	add	r7, r0
 801db32:	eba8 0800 	sub.w	r8, r8, r0
 801db36:	e7e7      	b.n	801db08 <__sflush_r+0xd4>
 801db38:	dfbffffe 	.word	0xdfbffffe

0801db3c <_fflush_r>:
 801db3c:	b538      	push	{r3, r4, r5, lr}
 801db3e:	690b      	ldr	r3, [r1, #16]
 801db40:	4605      	mov	r5, r0
 801db42:	460c      	mov	r4, r1
 801db44:	b913      	cbnz	r3, 801db4c <_fflush_r+0x10>
 801db46:	2500      	movs	r5, #0
 801db48:	4628      	mov	r0, r5
 801db4a:	bd38      	pop	{r3, r4, r5, pc}
 801db4c:	b118      	cbz	r0, 801db56 <_fflush_r+0x1a>
 801db4e:	6a03      	ldr	r3, [r0, #32]
 801db50:	b90b      	cbnz	r3, 801db56 <_fflush_r+0x1a>
 801db52:	f7fd fc11 	bl	801b378 <__sinit>
 801db56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801db5a:	2b00      	cmp	r3, #0
 801db5c:	d0f3      	beq.n	801db46 <_fflush_r+0xa>
 801db5e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801db60:	07d0      	lsls	r0, r2, #31
 801db62:	d404      	bmi.n	801db6e <_fflush_r+0x32>
 801db64:	0599      	lsls	r1, r3, #22
 801db66:	d402      	bmi.n	801db6e <_fflush_r+0x32>
 801db68:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801db6a:	f7fd fde4 	bl	801b736 <__retarget_lock_acquire_recursive>
 801db6e:	4628      	mov	r0, r5
 801db70:	4621      	mov	r1, r4
 801db72:	f7ff ff5f 	bl	801da34 <__sflush_r>
 801db76:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801db78:	07da      	lsls	r2, r3, #31
 801db7a:	4605      	mov	r5, r0
 801db7c:	d4e4      	bmi.n	801db48 <_fflush_r+0xc>
 801db7e:	89a3      	ldrh	r3, [r4, #12]
 801db80:	059b      	lsls	r3, r3, #22
 801db82:	d4e1      	bmi.n	801db48 <_fflush_r+0xc>
 801db84:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801db86:	f7fd fdd7 	bl	801b738 <__retarget_lock_release_recursive>
 801db8a:	e7dd      	b.n	801db48 <_fflush_r+0xc>

0801db8c <fiprintf>:
 801db8c:	b40e      	push	{r1, r2, r3}
 801db8e:	b503      	push	{r0, r1, lr}
 801db90:	4601      	mov	r1, r0
 801db92:	ab03      	add	r3, sp, #12
 801db94:	4805      	ldr	r0, [pc, #20]	@ (801dbac <fiprintf+0x20>)
 801db96:	f853 2b04 	ldr.w	r2, [r3], #4
 801db9a:	6800      	ldr	r0, [r0, #0]
 801db9c:	9301      	str	r3, [sp, #4]
 801db9e:	f7ff fe31 	bl	801d804 <_vfiprintf_r>
 801dba2:	b002      	add	sp, #8
 801dba4:	f85d eb04 	ldr.w	lr, [sp], #4
 801dba8:	b003      	add	sp, #12
 801dbaa:	4770      	bx	lr
 801dbac:	200002bc 	.word	0x200002bc

0801dbb0 <__swbuf_r>:
 801dbb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dbb2:	460e      	mov	r6, r1
 801dbb4:	4614      	mov	r4, r2
 801dbb6:	4605      	mov	r5, r0
 801dbb8:	b118      	cbz	r0, 801dbc2 <__swbuf_r+0x12>
 801dbba:	6a03      	ldr	r3, [r0, #32]
 801dbbc:	b90b      	cbnz	r3, 801dbc2 <__swbuf_r+0x12>
 801dbbe:	f7fd fbdb 	bl	801b378 <__sinit>
 801dbc2:	69a3      	ldr	r3, [r4, #24]
 801dbc4:	60a3      	str	r3, [r4, #8]
 801dbc6:	89a3      	ldrh	r3, [r4, #12]
 801dbc8:	071a      	lsls	r2, r3, #28
 801dbca:	d501      	bpl.n	801dbd0 <__swbuf_r+0x20>
 801dbcc:	6923      	ldr	r3, [r4, #16]
 801dbce:	b943      	cbnz	r3, 801dbe2 <__swbuf_r+0x32>
 801dbd0:	4621      	mov	r1, r4
 801dbd2:	4628      	mov	r0, r5
 801dbd4:	f000 f82a 	bl	801dc2c <__swsetup_r>
 801dbd8:	b118      	cbz	r0, 801dbe2 <__swbuf_r+0x32>
 801dbda:	f04f 37ff 	mov.w	r7, #4294967295
 801dbde:	4638      	mov	r0, r7
 801dbe0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801dbe2:	6823      	ldr	r3, [r4, #0]
 801dbe4:	6922      	ldr	r2, [r4, #16]
 801dbe6:	1a98      	subs	r0, r3, r2
 801dbe8:	6963      	ldr	r3, [r4, #20]
 801dbea:	b2f6      	uxtb	r6, r6
 801dbec:	4283      	cmp	r3, r0
 801dbee:	4637      	mov	r7, r6
 801dbf0:	dc05      	bgt.n	801dbfe <__swbuf_r+0x4e>
 801dbf2:	4621      	mov	r1, r4
 801dbf4:	4628      	mov	r0, r5
 801dbf6:	f7ff ffa1 	bl	801db3c <_fflush_r>
 801dbfa:	2800      	cmp	r0, #0
 801dbfc:	d1ed      	bne.n	801dbda <__swbuf_r+0x2a>
 801dbfe:	68a3      	ldr	r3, [r4, #8]
 801dc00:	3b01      	subs	r3, #1
 801dc02:	60a3      	str	r3, [r4, #8]
 801dc04:	6823      	ldr	r3, [r4, #0]
 801dc06:	1c5a      	adds	r2, r3, #1
 801dc08:	6022      	str	r2, [r4, #0]
 801dc0a:	701e      	strb	r6, [r3, #0]
 801dc0c:	6962      	ldr	r2, [r4, #20]
 801dc0e:	1c43      	adds	r3, r0, #1
 801dc10:	429a      	cmp	r2, r3
 801dc12:	d004      	beq.n	801dc1e <__swbuf_r+0x6e>
 801dc14:	89a3      	ldrh	r3, [r4, #12]
 801dc16:	07db      	lsls	r3, r3, #31
 801dc18:	d5e1      	bpl.n	801dbde <__swbuf_r+0x2e>
 801dc1a:	2e0a      	cmp	r6, #10
 801dc1c:	d1df      	bne.n	801dbde <__swbuf_r+0x2e>
 801dc1e:	4621      	mov	r1, r4
 801dc20:	4628      	mov	r0, r5
 801dc22:	f7ff ff8b 	bl	801db3c <_fflush_r>
 801dc26:	2800      	cmp	r0, #0
 801dc28:	d0d9      	beq.n	801dbde <__swbuf_r+0x2e>
 801dc2a:	e7d6      	b.n	801dbda <__swbuf_r+0x2a>

0801dc2c <__swsetup_r>:
 801dc2c:	b538      	push	{r3, r4, r5, lr}
 801dc2e:	4b29      	ldr	r3, [pc, #164]	@ (801dcd4 <__swsetup_r+0xa8>)
 801dc30:	4605      	mov	r5, r0
 801dc32:	6818      	ldr	r0, [r3, #0]
 801dc34:	460c      	mov	r4, r1
 801dc36:	b118      	cbz	r0, 801dc40 <__swsetup_r+0x14>
 801dc38:	6a03      	ldr	r3, [r0, #32]
 801dc3a:	b90b      	cbnz	r3, 801dc40 <__swsetup_r+0x14>
 801dc3c:	f7fd fb9c 	bl	801b378 <__sinit>
 801dc40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801dc44:	0719      	lsls	r1, r3, #28
 801dc46:	d422      	bmi.n	801dc8e <__swsetup_r+0x62>
 801dc48:	06da      	lsls	r2, r3, #27
 801dc4a:	d407      	bmi.n	801dc5c <__swsetup_r+0x30>
 801dc4c:	2209      	movs	r2, #9
 801dc4e:	602a      	str	r2, [r5, #0]
 801dc50:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801dc54:	81a3      	strh	r3, [r4, #12]
 801dc56:	f04f 30ff 	mov.w	r0, #4294967295
 801dc5a:	e033      	b.n	801dcc4 <__swsetup_r+0x98>
 801dc5c:	0758      	lsls	r0, r3, #29
 801dc5e:	d512      	bpl.n	801dc86 <__swsetup_r+0x5a>
 801dc60:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801dc62:	b141      	cbz	r1, 801dc76 <__swsetup_r+0x4a>
 801dc64:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801dc68:	4299      	cmp	r1, r3
 801dc6a:	d002      	beq.n	801dc72 <__swsetup_r+0x46>
 801dc6c:	4628      	mov	r0, r5
 801dc6e:	f7fe fbf3 	bl	801c458 <_free_r>
 801dc72:	2300      	movs	r3, #0
 801dc74:	6363      	str	r3, [r4, #52]	@ 0x34
 801dc76:	89a3      	ldrh	r3, [r4, #12]
 801dc78:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801dc7c:	81a3      	strh	r3, [r4, #12]
 801dc7e:	2300      	movs	r3, #0
 801dc80:	6063      	str	r3, [r4, #4]
 801dc82:	6923      	ldr	r3, [r4, #16]
 801dc84:	6023      	str	r3, [r4, #0]
 801dc86:	89a3      	ldrh	r3, [r4, #12]
 801dc88:	f043 0308 	orr.w	r3, r3, #8
 801dc8c:	81a3      	strh	r3, [r4, #12]
 801dc8e:	6923      	ldr	r3, [r4, #16]
 801dc90:	b94b      	cbnz	r3, 801dca6 <__swsetup_r+0x7a>
 801dc92:	89a3      	ldrh	r3, [r4, #12]
 801dc94:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801dc98:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801dc9c:	d003      	beq.n	801dca6 <__swsetup_r+0x7a>
 801dc9e:	4621      	mov	r1, r4
 801dca0:	4628      	mov	r0, r5
 801dca2:	f000 f8a2 	bl	801ddea <__smakebuf_r>
 801dca6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801dcaa:	f013 0201 	ands.w	r2, r3, #1
 801dcae:	d00a      	beq.n	801dcc6 <__swsetup_r+0x9a>
 801dcb0:	2200      	movs	r2, #0
 801dcb2:	60a2      	str	r2, [r4, #8]
 801dcb4:	6962      	ldr	r2, [r4, #20]
 801dcb6:	4252      	negs	r2, r2
 801dcb8:	61a2      	str	r2, [r4, #24]
 801dcba:	6922      	ldr	r2, [r4, #16]
 801dcbc:	b942      	cbnz	r2, 801dcd0 <__swsetup_r+0xa4>
 801dcbe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801dcc2:	d1c5      	bne.n	801dc50 <__swsetup_r+0x24>
 801dcc4:	bd38      	pop	{r3, r4, r5, pc}
 801dcc6:	0799      	lsls	r1, r3, #30
 801dcc8:	bf58      	it	pl
 801dcca:	6962      	ldrpl	r2, [r4, #20]
 801dccc:	60a2      	str	r2, [r4, #8]
 801dcce:	e7f4      	b.n	801dcba <__swsetup_r+0x8e>
 801dcd0:	2000      	movs	r0, #0
 801dcd2:	e7f7      	b.n	801dcc4 <__swsetup_r+0x98>
 801dcd4:	200002bc 	.word	0x200002bc

0801dcd8 <memmove>:
 801dcd8:	4288      	cmp	r0, r1
 801dcda:	b510      	push	{r4, lr}
 801dcdc:	eb01 0402 	add.w	r4, r1, r2
 801dce0:	d902      	bls.n	801dce8 <memmove+0x10>
 801dce2:	4284      	cmp	r4, r0
 801dce4:	4623      	mov	r3, r4
 801dce6:	d807      	bhi.n	801dcf8 <memmove+0x20>
 801dce8:	1e43      	subs	r3, r0, #1
 801dcea:	42a1      	cmp	r1, r4
 801dcec:	d008      	beq.n	801dd00 <memmove+0x28>
 801dcee:	f811 2b01 	ldrb.w	r2, [r1], #1
 801dcf2:	f803 2f01 	strb.w	r2, [r3, #1]!
 801dcf6:	e7f8      	b.n	801dcea <memmove+0x12>
 801dcf8:	4402      	add	r2, r0
 801dcfa:	4601      	mov	r1, r0
 801dcfc:	428a      	cmp	r2, r1
 801dcfe:	d100      	bne.n	801dd02 <memmove+0x2a>
 801dd00:	bd10      	pop	{r4, pc}
 801dd02:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801dd06:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801dd0a:	e7f7      	b.n	801dcfc <memmove+0x24>

0801dd0c <abort>:
 801dd0c:	b508      	push	{r3, lr}
 801dd0e:	2006      	movs	r0, #6
 801dd10:	f000 f8d0 	bl	801deb4 <raise>
 801dd14:	2001      	movs	r0, #1
 801dd16:	f7e8 fd7d 	bl	8006814 <_exit>

0801dd1a <_calloc_r>:
 801dd1a:	b570      	push	{r4, r5, r6, lr}
 801dd1c:	fba1 5402 	umull	r5, r4, r1, r2
 801dd20:	b93c      	cbnz	r4, 801dd32 <_calloc_r+0x18>
 801dd22:	4629      	mov	r1, r5
 801dd24:	f7fb fcb2 	bl	801968c <_malloc_r>
 801dd28:	4606      	mov	r6, r0
 801dd2a:	b928      	cbnz	r0, 801dd38 <_calloc_r+0x1e>
 801dd2c:	2600      	movs	r6, #0
 801dd2e:	4630      	mov	r0, r6
 801dd30:	bd70      	pop	{r4, r5, r6, pc}
 801dd32:	220c      	movs	r2, #12
 801dd34:	6002      	str	r2, [r0, #0]
 801dd36:	e7f9      	b.n	801dd2c <_calloc_r+0x12>
 801dd38:	462a      	mov	r2, r5
 801dd3a:	4621      	mov	r1, r4
 801dd3c:	f7fd fbe9 	bl	801b512 <memset>
 801dd40:	e7f5      	b.n	801dd2e <_calloc_r+0x14>

0801dd42 <_realloc_r>:
 801dd42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801dd46:	4680      	mov	r8, r0
 801dd48:	4615      	mov	r5, r2
 801dd4a:	460c      	mov	r4, r1
 801dd4c:	b921      	cbnz	r1, 801dd58 <_realloc_r+0x16>
 801dd4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801dd52:	4611      	mov	r1, r2
 801dd54:	f7fb bc9a 	b.w	801968c <_malloc_r>
 801dd58:	b92a      	cbnz	r2, 801dd66 <_realloc_r+0x24>
 801dd5a:	f7fe fb7d 	bl	801c458 <_free_r>
 801dd5e:	2400      	movs	r4, #0
 801dd60:	4620      	mov	r0, r4
 801dd62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801dd66:	f000 f8e3 	bl	801df30 <_malloc_usable_size_r>
 801dd6a:	4285      	cmp	r5, r0
 801dd6c:	4606      	mov	r6, r0
 801dd6e:	d802      	bhi.n	801dd76 <_realloc_r+0x34>
 801dd70:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801dd74:	d8f4      	bhi.n	801dd60 <_realloc_r+0x1e>
 801dd76:	4629      	mov	r1, r5
 801dd78:	4640      	mov	r0, r8
 801dd7a:	f7fb fc87 	bl	801968c <_malloc_r>
 801dd7e:	4607      	mov	r7, r0
 801dd80:	2800      	cmp	r0, #0
 801dd82:	d0ec      	beq.n	801dd5e <_realloc_r+0x1c>
 801dd84:	42b5      	cmp	r5, r6
 801dd86:	462a      	mov	r2, r5
 801dd88:	4621      	mov	r1, r4
 801dd8a:	bf28      	it	cs
 801dd8c:	4632      	movcs	r2, r6
 801dd8e:	f7fd fcdc 	bl	801b74a <memcpy>
 801dd92:	4621      	mov	r1, r4
 801dd94:	4640      	mov	r0, r8
 801dd96:	f7fe fb5f 	bl	801c458 <_free_r>
 801dd9a:	463c      	mov	r4, r7
 801dd9c:	e7e0      	b.n	801dd60 <_realloc_r+0x1e>

0801dd9e <__swhatbuf_r>:
 801dd9e:	b570      	push	{r4, r5, r6, lr}
 801dda0:	460c      	mov	r4, r1
 801dda2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801dda6:	2900      	cmp	r1, #0
 801dda8:	b096      	sub	sp, #88	@ 0x58
 801ddaa:	4615      	mov	r5, r2
 801ddac:	461e      	mov	r6, r3
 801ddae:	da0d      	bge.n	801ddcc <__swhatbuf_r+0x2e>
 801ddb0:	89a3      	ldrh	r3, [r4, #12]
 801ddb2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801ddb6:	f04f 0100 	mov.w	r1, #0
 801ddba:	bf14      	ite	ne
 801ddbc:	2340      	movne	r3, #64	@ 0x40
 801ddbe:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801ddc2:	2000      	movs	r0, #0
 801ddc4:	6031      	str	r1, [r6, #0]
 801ddc6:	602b      	str	r3, [r5, #0]
 801ddc8:	b016      	add	sp, #88	@ 0x58
 801ddca:	bd70      	pop	{r4, r5, r6, pc}
 801ddcc:	466a      	mov	r2, sp
 801ddce:	f000 f879 	bl	801dec4 <_fstat_r>
 801ddd2:	2800      	cmp	r0, #0
 801ddd4:	dbec      	blt.n	801ddb0 <__swhatbuf_r+0x12>
 801ddd6:	9901      	ldr	r1, [sp, #4]
 801ddd8:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801dddc:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801dde0:	4259      	negs	r1, r3
 801dde2:	4159      	adcs	r1, r3
 801dde4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801dde8:	e7eb      	b.n	801ddc2 <__swhatbuf_r+0x24>

0801ddea <__smakebuf_r>:
 801ddea:	898b      	ldrh	r3, [r1, #12]
 801ddec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801ddee:	079d      	lsls	r5, r3, #30
 801ddf0:	4606      	mov	r6, r0
 801ddf2:	460c      	mov	r4, r1
 801ddf4:	d507      	bpl.n	801de06 <__smakebuf_r+0x1c>
 801ddf6:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801ddfa:	6023      	str	r3, [r4, #0]
 801ddfc:	6123      	str	r3, [r4, #16]
 801ddfe:	2301      	movs	r3, #1
 801de00:	6163      	str	r3, [r4, #20]
 801de02:	b003      	add	sp, #12
 801de04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801de06:	ab01      	add	r3, sp, #4
 801de08:	466a      	mov	r2, sp
 801de0a:	f7ff ffc8 	bl	801dd9e <__swhatbuf_r>
 801de0e:	9f00      	ldr	r7, [sp, #0]
 801de10:	4605      	mov	r5, r0
 801de12:	4639      	mov	r1, r7
 801de14:	4630      	mov	r0, r6
 801de16:	f7fb fc39 	bl	801968c <_malloc_r>
 801de1a:	b948      	cbnz	r0, 801de30 <__smakebuf_r+0x46>
 801de1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801de20:	059a      	lsls	r2, r3, #22
 801de22:	d4ee      	bmi.n	801de02 <__smakebuf_r+0x18>
 801de24:	f023 0303 	bic.w	r3, r3, #3
 801de28:	f043 0302 	orr.w	r3, r3, #2
 801de2c:	81a3      	strh	r3, [r4, #12]
 801de2e:	e7e2      	b.n	801ddf6 <__smakebuf_r+0xc>
 801de30:	89a3      	ldrh	r3, [r4, #12]
 801de32:	6020      	str	r0, [r4, #0]
 801de34:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801de38:	81a3      	strh	r3, [r4, #12]
 801de3a:	9b01      	ldr	r3, [sp, #4]
 801de3c:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801de40:	b15b      	cbz	r3, 801de5a <__smakebuf_r+0x70>
 801de42:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801de46:	4630      	mov	r0, r6
 801de48:	f000 f84e 	bl	801dee8 <_isatty_r>
 801de4c:	b128      	cbz	r0, 801de5a <__smakebuf_r+0x70>
 801de4e:	89a3      	ldrh	r3, [r4, #12]
 801de50:	f023 0303 	bic.w	r3, r3, #3
 801de54:	f043 0301 	orr.w	r3, r3, #1
 801de58:	81a3      	strh	r3, [r4, #12]
 801de5a:	89a3      	ldrh	r3, [r4, #12]
 801de5c:	431d      	orrs	r5, r3
 801de5e:	81a5      	strh	r5, [r4, #12]
 801de60:	e7cf      	b.n	801de02 <__smakebuf_r+0x18>

0801de62 <_raise_r>:
 801de62:	291f      	cmp	r1, #31
 801de64:	b538      	push	{r3, r4, r5, lr}
 801de66:	4605      	mov	r5, r0
 801de68:	460c      	mov	r4, r1
 801de6a:	d904      	bls.n	801de76 <_raise_r+0x14>
 801de6c:	2316      	movs	r3, #22
 801de6e:	6003      	str	r3, [r0, #0]
 801de70:	f04f 30ff 	mov.w	r0, #4294967295
 801de74:	bd38      	pop	{r3, r4, r5, pc}
 801de76:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801de78:	b112      	cbz	r2, 801de80 <_raise_r+0x1e>
 801de7a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801de7e:	b94b      	cbnz	r3, 801de94 <_raise_r+0x32>
 801de80:	4628      	mov	r0, r5
 801de82:	f000 f853 	bl	801df2c <_getpid_r>
 801de86:	4622      	mov	r2, r4
 801de88:	4601      	mov	r1, r0
 801de8a:	4628      	mov	r0, r5
 801de8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801de90:	f000 b83a 	b.w	801df08 <_kill_r>
 801de94:	2b01      	cmp	r3, #1
 801de96:	d00a      	beq.n	801deae <_raise_r+0x4c>
 801de98:	1c59      	adds	r1, r3, #1
 801de9a:	d103      	bne.n	801dea4 <_raise_r+0x42>
 801de9c:	2316      	movs	r3, #22
 801de9e:	6003      	str	r3, [r0, #0]
 801dea0:	2001      	movs	r0, #1
 801dea2:	e7e7      	b.n	801de74 <_raise_r+0x12>
 801dea4:	2100      	movs	r1, #0
 801dea6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801deaa:	4620      	mov	r0, r4
 801deac:	4798      	blx	r3
 801deae:	2000      	movs	r0, #0
 801deb0:	e7e0      	b.n	801de74 <_raise_r+0x12>
	...

0801deb4 <raise>:
 801deb4:	4b02      	ldr	r3, [pc, #8]	@ (801dec0 <raise+0xc>)
 801deb6:	4601      	mov	r1, r0
 801deb8:	6818      	ldr	r0, [r3, #0]
 801deba:	f7ff bfd2 	b.w	801de62 <_raise_r>
 801debe:	bf00      	nop
 801dec0:	200002bc 	.word	0x200002bc

0801dec4 <_fstat_r>:
 801dec4:	b538      	push	{r3, r4, r5, lr}
 801dec6:	4d07      	ldr	r5, [pc, #28]	@ (801dee4 <_fstat_r+0x20>)
 801dec8:	2300      	movs	r3, #0
 801deca:	4604      	mov	r4, r0
 801decc:	4608      	mov	r0, r1
 801dece:	4611      	mov	r1, r2
 801ded0:	602b      	str	r3, [r5, #0]
 801ded2:	f7e8 fcef 	bl	80068b4 <_fstat>
 801ded6:	1c43      	adds	r3, r0, #1
 801ded8:	d102      	bne.n	801dee0 <_fstat_r+0x1c>
 801deda:	682b      	ldr	r3, [r5, #0]
 801dedc:	b103      	cbz	r3, 801dee0 <_fstat_r+0x1c>
 801dede:	6023      	str	r3, [r4, #0]
 801dee0:	bd38      	pop	{r3, r4, r5, pc}
 801dee2:	bf00      	nop
 801dee4:	200031a8 	.word	0x200031a8

0801dee8 <_isatty_r>:
 801dee8:	b538      	push	{r3, r4, r5, lr}
 801deea:	4d06      	ldr	r5, [pc, #24]	@ (801df04 <_isatty_r+0x1c>)
 801deec:	2300      	movs	r3, #0
 801deee:	4604      	mov	r4, r0
 801def0:	4608      	mov	r0, r1
 801def2:	602b      	str	r3, [r5, #0]
 801def4:	f7e8 fcee 	bl	80068d4 <_isatty>
 801def8:	1c43      	adds	r3, r0, #1
 801defa:	d102      	bne.n	801df02 <_isatty_r+0x1a>
 801defc:	682b      	ldr	r3, [r5, #0]
 801defe:	b103      	cbz	r3, 801df02 <_isatty_r+0x1a>
 801df00:	6023      	str	r3, [r4, #0]
 801df02:	bd38      	pop	{r3, r4, r5, pc}
 801df04:	200031a8 	.word	0x200031a8

0801df08 <_kill_r>:
 801df08:	b538      	push	{r3, r4, r5, lr}
 801df0a:	4d07      	ldr	r5, [pc, #28]	@ (801df28 <_kill_r+0x20>)
 801df0c:	2300      	movs	r3, #0
 801df0e:	4604      	mov	r4, r0
 801df10:	4608      	mov	r0, r1
 801df12:	4611      	mov	r1, r2
 801df14:	602b      	str	r3, [r5, #0]
 801df16:	f7e8 fc6d 	bl	80067f4 <_kill>
 801df1a:	1c43      	adds	r3, r0, #1
 801df1c:	d102      	bne.n	801df24 <_kill_r+0x1c>
 801df1e:	682b      	ldr	r3, [r5, #0]
 801df20:	b103      	cbz	r3, 801df24 <_kill_r+0x1c>
 801df22:	6023      	str	r3, [r4, #0]
 801df24:	bd38      	pop	{r3, r4, r5, pc}
 801df26:	bf00      	nop
 801df28:	200031a8 	.word	0x200031a8

0801df2c <_getpid_r>:
 801df2c:	f7e8 bc5a 	b.w	80067e4 <_getpid>

0801df30 <_malloc_usable_size_r>:
 801df30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801df34:	1f18      	subs	r0, r3, #4
 801df36:	2b00      	cmp	r3, #0
 801df38:	bfbc      	itt	lt
 801df3a:	580b      	ldrlt	r3, [r1, r0]
 801df3c:	18c0      	addlt	r0, r0, r3
 801df3e:	4770      	bx	lr

0801df40 <log>:
 801df40:	b538      	push	{r3, r4, r5, lr}
 801df42:	ed2d 8b02 	vpush	{d8}
 801df46:	ec55 4b10 	vmov	r4, r5, d0
 801df4a:	f000 fb7d 	bl	801e648 <__ieee754_log>
 801df4e:	4622      	mov	r2, r4
 801df50:	462b      	mov	r3, r5
 801df52:	4620      	mov	r0, r4
 801df54:	4629      	mov	r1, r5
 801df56:	eeb0 8a40 	vmov.f32	s16, s0
 801df5a:	eef0 8a60 	vmov.f32	s17, s1
 801df5e:	f7e2 fdbd 	bl	8000adc <__aeabi_dcmpun>
 801df62:	b998      	cbnz	r0, 801df8c <log+0x4c>
 801df64:	2200      	movs	r2, #0
 801df66:	2300      	movs	r3, #0
 801df68:	4620      	mov	r0, r4
 801df6a:	4629      	mov	r1, r5
 801df6c:	f7e2 fdac 	bl	8000ac8 <__aeabi_dcmpgt>
 801df70:	b960      	cbnz	r0, 801df8c <log+0x4c>
 801df72:	2200      	movs	r2, #0
 801df74:	2300      	movs	r3, #0
 801df76:	4620      	mov	r0, r4
 801df78:	4629      	mov	r1, r5
 801df7a:	f7e2 fd7d 	bl	8000a78 <__aeabi_dcmpeq>
 801df7e:	b160      	cbz	r0, 801df9a <log+0x5a>
 801df80:	f7fd fbae 	bl	801b6e0 <__errno>
 801df84:	ed9f 8b0a 	vldr	d8, [pc, #40]	@ 801dfb0 <log+0x70>
 801df88:	2322      	movs	r3, #34	@ 0x22
 801df8a:	6003      	str	r3, [r0, #0]
 801df8c:	eeb0 0a48 	vmov.f32	s0, s16
 801df90:	eef0 0a68 	vmov.f32	s1, s17
 801df94:	ecbd 8b02 	vpop	{d8}
 801df98:	bd38      	pop	{r3, r4, r5, pc}
 801df9a:	f7fd fba1 	bl	801b6e0 <__errno>
 801df9e:	ecbd 8b02 	vpop	{d8}
 801dfa2:	2321      	movs	r3, #33	@ 0x21
 801dfa4:	6003      	str	r3, [r0, #0]
 801dfa6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801dfaa:	4803      	ldr	r0, [pc, #12]	@ (801dfb8 <log+0x78>)
 801dfac:	f7fd bbdc 	b.w	801b768 <nan>
 801dfb0:	00000000 	.word	0x00000000
 801dfb4:	fff00000 	.word	0xfff00000
 801dfb8:	08022646 	.word	0x08022646
 801dfbc:	00000000 	.word	0x00000000

0801dfc0 <cos>:
 801dfc0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801dfc2:	ec53 2b10 	vmov	r2, r3, d0
 801dfc6:	4826      	ldr	r0, [pc, #152]	@ (801e060 <cos+0xa0>)
 801dfc8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 801dfcc:	4281      	cmp	r1, r0
 801dfce:	d806      	bhi.n	801dfde <cos+0x1e>
 801dfd0:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 801e058 <cos+0x98>
 801dfd4:	b005      	add	sp, #20
 801dfd6:	f85d eb04 	ldr.w	lr, [sp], #4
 801dfda:	f000 b9b1 	b.w	801e340 <__kernel_cos>
 801dfde:	4821      	ldr	r0, [pc, #132]	@ (801e064 <cos+0xa4>)
 801dfe0:	4281      	cmp	r1, r0
 801dfe2:	d908      	bls.n	801dff6 <cos+0x36>
 801dfe4:	4610      	mov	r0, r2
 801dfe6:	4619      	mov	r1, r3
 801dfe8:	f7e2 f926 	bl	8000238 <__aeabi_dsub>
 801dfec:	ec41 0b10 	vmov	d0, r0, r1
 801dff0:	b005      	add	sp, #20
 801dff2:	f85d fb04 	ldr.w	pc, [sp], #4
 801dff6:	4668      	mov	r0, sp
 801dff8:	f000 fcde 	bl	801e9b8 <__ieee754_rem_pio2>
 801dffc:	f000 0003 	and.w	r0, r0, #3
 801e000:	2801      	cmp	r0, #1
 801e002:	d00b      	beq.n	801e01c <cos+0x5c>
 801e004:	2802      	cmp	r0, #2
 801e006:	d015      	beq.n	801e034 <cos+0x74>
 801e008:	b9d8      	cbnz	r0, 801e042 <cos+0x82>
 801e00a:	ed9d 1b02 	vldr	d1, [sp, #8]
 801e00e:	ed9d 0b00 	vldr	d0, [sp]
 801e012:	f000 f995 	bl	801e340 <__kernel_cos>
 801e016:	ec51 0b10 	vmov	r0, r1, d0
 801e01a:	e7e7      	b.n	801dfec <cos+0x2c>
 801e01c:	ed9d 1b02 	vldr	d1, [sp, #8]
 801e020:	ed9d 0b00 	vldr	d0, [sp]
 801e024:	f000 fa54 	bl	801e4d0 <__kernel_sin>
 801e028:	ec53 2b10 	vmov	r2, r3, d0
 801e02c:	4610      	mov	r0, r2
 801e02e:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 801e032:	e7db      	b.n	801dfec <cos+0x2c>
 801e034:	ed9d 1b02 	vldr	d1, [sp, #8]
 801e038:	ed9d 0b00 	vldr	d0, [sp]
 801e03c:	f000 f980 	bl	801e340 <__kernel_cos>
 801e040:	e7f2      	b.n	801e028 <cos+0x68>
 801e042:	ed9d 1b02 	vldr	d1, [sp, #8]
 801e046:	ed9d 0b00 	vldr	d0, [sp]
 801e04a:	2001      	movs	r0, #1
 801e04c:	f000 fa40 	bl	801e4d0 <__kernel_sin>
 801e050:	e7e1      	b.n	801e016 <cos+0x56>
 801e052:	bf00      	nop
 801e054:	f3af 8000 	nop.w
	...
 801e060:	3fe921fb 	.word	0x3fe921fb
 801e064:	7fefffff 	.word	0x7fefffff

0801e068 <sin>:
 801e068:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801e06a:	ec53 2b10 	vmov	r2, r3, d0
 801e06e:	4826      	ldr	r0, [pc, #152]	@ (801e108 <sin+0xa0>)
 801e070:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 801e074:	4281      	cmp	r1, r0
 801e076:	d807      	bhi.n	801e088 <sin+0x20>
 801e078:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 801e100 <sin+0x98>
 801e07c:	2000      	movs	r0, #0
 801e07e:	b005      	add	sp, #20
 801e080:	f85d eb04 	ldr.w	lr, [sp], #4
 801e084:	f000 ba24 	b.w	801e4d0 <__kernel_sin>
 801e088:	4820      	ldr	r0, [pc, #128]	@ (801e10c <sin+0xa4>)
 801e08a:	4281      	cmp	r1, r0
 801e08c:	d908      	bls.n	801e0a0 <sin+0x38>
 801e08e:	4610      	mov	r0, r2
 801e090:	4619      	mov	r1, r3
 801e092:	f7e2 f8d1 	bl	8000238 <__aeabi_dsub>
 801e096:	ec41 0b10 	vmov	d0, r0, r1
 801e09a:	b005      	add	sp, #20
 801e09c:	f85d fb04 	ldr.w	pc, [sp], #4
 801e0a0:	4668      	mov	r0, sp
 801e0a2:	f000 fc89 	bl	801e9b8 <__ieee754_rem_pio2>
 801e0a6:	f000 0003 	and.w	r0, r0, #3
 801e0aa:	2801      	cmp	r0, #1
 801e0ac:	d00c      	beq.n	801e0c8 <sin+0x60>
 801e0ae:	2802      	cmp	r0, #2
 801e0b0:	d011      	beq.n	801e0d6 <sin+0x6e>
 801e0b2:	b9e8      	cbnz	r0, 801e0f0 <sin+0x88>
 801e0b4:	ed9d 1b02 	vldr	d1, [sp, #8]
 801e0b8:	ed9d 0b00 	vldr	d0, [sp]
 801e0bc:	2001      	movs	r0, #1
 801e0be:	f000 fa07 	bl	801e4d0 <__kernel_sin>
 801e0c2:	ec51 0b10 	vmov	r0, r1, d0
 801e0c6:	e7e6      	b.n	801e096 <sin+0x2e>
 801e0c8:	ed9d 1b02 	vldr	d1, [sp, #8]
 801e0cc:	ed9d 0b00 	vldr	d0, [sp]
 801e0d0:	f000 f936 	bl	801e340 <__kernel_cos>
 801e0d4:	e7f5      	b.n	801e0c2 <sin+0x5a>
 801e0d6:	ed9d 1b02 	vldr	d1, [sp, #8]
 801e0da:	ed9d 0b00 	vldr	d0, [sp]
 801e0de:	2001      	movs	r0, #1
 801e0e0:	f000 f9f6 	bl	801e4d0 <__kernel_sin>
 801e0e4:	ec53 2b10 	vmov	r2, r3, d0
 801e0e8:	4610      	mov	r0, r2
 801e0ea:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 801e0ee:	e7d2      	b.n	801e096 <sin+0x2e>
 801e0f0:	ed9d 1b02 	vldr	d1, [sp, #8]
 801e0f4:	ed9d 0b00 	vldr	d0, [sp]
 801e0f8:	f000 f922 	bl	801e340 <__kernel_cos>
 801e0fc:	e7f2      	b.n	801e0e4 <sin+0x7c>
 801e0fe:	bf00      	nop
	...
 801e108:	3fe921fb 	.word	0x3fe921fb
 801e10c:	7fefffff 	.word	0x7fefffff

0801e110 <expf>:
 801e110:	b508      	push	{r3, lr}
 801e112:	ed2d 8b02 	vpush	{d8}
 801e116:	eef0 8a40 	vmov.f32	s17, s0
 801e11a:	f000 fe85 	bl	801ee28 <__ieee754_expf>
 801e11e:	eeb0 8a40 	vmov.f32	s16, s0
 801e122:	eeb0 0a68 	vmov.f32	s0, s17
 801e126:	f000 f87d 	bl	801e224 <finitef>
 801e12a:	b160      	cbz	r0, 801e146 <expf+0x36>
 801e12c:	eddf 7a0f 	vldr	s15, [pc, #60]	@ 801e16c <expf+0x5c>
 801e130:	eef4 8ae7 	vcmpe.f32	s17, s15
 801e134:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e138:	dd0a      	ble.n	801e150 <expf+0x40>
 801e13a:	f7fd fad1 	bl	801b6e0 <__errno>
 801e13e:	ed9f 8a0c 	vldr	s16, [pc, #48]	@ 801e170 <expf+0x60>
 801e142:	2322      	movs	r3, #34	@ 0x22
 801e144:	6003      	str	r3, [r0, #0]
 801e146:	eeb0 0a48 	vmov.f32	s0, s16
 801e14a:	ecbd 8b02 	vpop	{d8}
 801e14e:	bd08      	pop	{r3, pc}
 801e150:	eddf 7a08 	vldr	s15, [pc, #32]	@ 801e174 <expf+0x64>
 801e154:	eef4 8ae7 	vcmpe.f32	s17, s15
 801e158:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e15c:	d5f3      	bpl.n	801e146 <expf+0x36>
 801e15e:	f7fd fabf 	bl	801b6e0 <__errno>
 801e162:	2322      	movs	r3, #34	@ 0x22
 801e164:	ed9f 8a04 	vldr	s16, [pc, #16]	@ 801e178 <expf+0x68>
 801e168:	6003      	str	r3, [r0, #0]
 801e16a:	e7ec      	b.n	801e146 <expf+0x36>
 801e16c:	42b17217 	.word	0x42b17217
 801e170:	7f800000 	.word	0x7f800000
 801e174:	c2cff1b5 	.word	0xc2cff1b5
 801e178:	00000000 	.word	0x00000000

0801e17c <fmin>:
 801e17c:	b508      	push	{r3, lr}
 801e17e:	ed2d 8b04 	vpush	{d8-d9}
 801e182:	eeb0 8a40 	vmov.f32	s16, s0
 801e186:	eef0 8a60 	vmov.f32	s17, s1
 801e18a:	eeb0 9a41 	vmov.f32	s18, s2
 801e18e:	eef0 9a61 	vmov.f32	s19, s3
 801e192:	f000 f81d 	bl	801e1d0 <__fpclassifyd>
 801e196:	b950      	cbnz	r0, 801e1ae <fmin+0x32>
 801e198:	eeb0 8a49 	vmov.f32	s16, s18
 801e19c:	eef0 8a69 	vmov.f32	s17, s19
 801e1a0:	eeb0 0a48 	vmov.f32	s0, s16
 801e1a4:	eef0 0a68 	vmov.f32	s1, s17
 801e1a8:	ecbd 8b04 	vpop	{d8-d9}
 801e1ac:	bd08      	pop	{r3, pc}
 801e1ae:	eeb0 0a49 	vmov.f32	s0, s18
 801e1b2:	eef0 0a69 	vmov.f32	s1, s19
 801e1b6:	f000 f80b 	bl	801e1d0 <__fpclassifyd>
 801e1ba:	2800      	cmp	r0, #0
 801e1bc:	d0f0      	beq.n	801e1a0 <fmin+0x24>
 801e1be:	ec53 2b19 	vmov	r2, r3, d9
 801e1c2:	ec51 0b18 	vmov	r0, r1, d8
 801e1c6:	f7e2 fc61 	bl	8000a8c <__aeabi_dcmplt>
 801e1ca:	2800      	cmp	r0, #0
 801e1cc:	d0e4      	beq.n	801e198 <fmin+0x1c>
 801e1ce:	e7e7      	b.n	801e1a0 <fmin+0x24>

0801e1d0 <__fpclassifyd>:
 801e1d0:	ec51 0b10 	vmov	r0, r1, d0
 801e1d4:	b510      	push	{r4, lr}
 801e1d6:	f031 4400 	bics.w	r4, r1, #2147483648	@ 0x80000000
 801e1da:	460b      	mov	r3, r1
 801e1dc:	d019      	beq.n	801e212 <__fpclassifyd+0x42>
 801e1de:	f5a1 1280 	sub.w	r2, r1, #1048576	@ 0x100000
 801e1e2:	490e      	ldr	r1, [pc, #56]	@ (801e21c <__fpclassifyd+0x4c>)
 801e1e4:	428a      	cmp	r2, r1
 801e1e6:	d90e      	bls.n	801e206 <__fpclassifyd+0x36>
 801e1e8:	f103 42ff 	add.w	r2, r3, #2139095040	@ 0x7f800000
 801e1ec:	f502 02e0 	add.w	r2, r2, #7340032	@ 0x700000
 801e1f0:	428a      	cmp	r2, r1
 801e1f2:	d908      	bls.n	801e206 <__fpclassifyd+0x36>
 801e1f4:	4a0a      	ldr	r2, [pc, #40]	@ (801e220 <__fpclassifyd+0x50>)
 801e1f6:	4213      	tst	r3, r2
 801e1f8:	d007      	beq.n	801e20a <__fpclassifyd+0x3a>
 801e1fa:	4294      	cmp	r4, r2
 801e1fc:	d107      	bne.n	801e20e <__fpclassifyd+0x3e>
 801e1fe:	fab0 f080 	clz	r0, r0
 801e202:	0940      	lsrs	r0, r0, #5
 801e204:	bd10      	pop	{r4, pc}
 801e206:	2004      	movs	r0, #4
 801e208:	e7fc      	b.n	801e204 <__fpclassifyd+0x34>
 801e20a:	2003      	movs	r0, #3
 801e20c:	e7fa      	b.n	801e204 <__fpclassifyd+0x34>
 801e20e:	2000      	movs	r0, #0
 801e210:	e7f8      	b.n	801e204 <__fpclassifyd+0x34>
 801e212:	2800      	cmp	r0, #0
 801e214:	d1ee      	bne.n	801e1f4 <__fpclassifyd+0x24>
 801e216:	2002      	movs	r0, #2
 801e218:	e7f4      	b.n	801e204 <__fpclassifyd+0x34>
 801e21a:	bf00      	nop
 801e21c:	7fdfffff 	.word	0x7fdfffff
 801e220:	7ff00000 	.word	0x7ff00000

0801e224 <finitef>:
 801e224:	ee10 3a10 	vmov	r3, s0
 801e228:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 801e22c:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 801e230:	bfac      	ite	ge
 801e232:	2000      	movge	r0, #0
 801e234:	2001      	movlt	r0, #1
 801e236:	4770      	bx	lr

0801e238 <cosl>:
 801e238:	f7ff bec2 	b.w	801dfc0 <cos>

0801e23c <sinl>:
 801e23c:	f7ff bf14 	b.w	801e068 <sin>

0801e240 <acosl>:
 801e240:	f000 bdb6 	b.w	801edb0 <acos>
 801e244:	0000      	movs	r0, r0
	...

0801e248 <floor>:
 801e248:	ec51 0b10 	vmov	r0, r1, d0
 801e24c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801e250:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e254:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 801e258:	2e13      	cmp	r6, #19
 801e25a:	460c      	mov	r4, r1
 801e25c:	4605      	mov	r5, r0
 801e25e:	4680      	mov	r8, r0
 801e260:	dc34      	bgt.n	801e2cc <floor+0x84>
 801e262:	2e00      	cmp	r6, #0
 801e264:	da17      	bge.n	801e296 <floor+0x4e>
 801e266:	a332      	add	r3, pc, #200	@ (adr r3, 801e330 <floor+0xe8>)
 801e268:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e26c:	f7e1 ffe6 	bl	800023c <__adddf3>
 801e270:	2200      	movs	r2, #0
 801e272:	2300      	movs	r3, #0
 801e274:	f7e2 fc28 	bl	8000ac8 <__aeabi_dcmpgt>
 801e278:	b150      	cbz	r0, 801e290 <floor+0x48>
 801e27a:	2c00      	cmp	r4, #0
 801e27c:	da55      	bge.n	801e32a <floor+0xe2>
 801e27e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 801e282:	432c      	orrs	r4, r5
 801e284:	2500      	movs	r5, #0
 801e286:	42ac      	cmp	r4, r5
 801e288:	4c2b      	ldr	r4, [pc, #172]	@ (801e338 <floor+0xf0>)
 801e28a:	bf08      	it	eq
 801e28c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 801e290:	4621      	mov	r1, r4
 801e292:	4628      	mov	r0, r5
 801e294:	e023      	b.n	801e2de <floor+0x96>
 801e296:	4f29      	ldr	r7, [pc, #164]	@ (801e33c <floor+0xf4>)
 801e298:	4137      	asrs	r7, r6
 801e29a:	ea01 0307 	and.w	r3, r1, r7
 801e29e:	4303      	orrs	r3, r0
 801e2a0:	d01d      	beq.n	801e2de <floor+0x96>
 801e2a2:	a323      	add	r3, pc, #140	@ (adr r3, 801e330 <floor+0xe8>)
 801e2a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e2a8:	f7e1 ffc8 	bl	800023c <__adddf3>
 801e2ac:	2200      	movs	r2, #0
 801e2ae:	2300      	movs	r3, #0
 801e2b0:	f7e2 fc0a 	bl	8000ac8 <__aeabi_dcmpgt>
 801e2b4:	2800      	cmp	r0, #0
 801e2b6:	d0eb      	beq.n	801e290 <floor+0x48>
 801e2b8:	2c00      	cmp	r4, #0
 801e2ba:	bfbe      	ittt	lt
 801e2bc:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 801e2c0:	4133      	asrlt	r3, r6
 801e2c2:	18e4      	addlt	r4, r4, r3
 801e2c4:	ea24 0407 	bic.w	r4, r4, r7
 801e2c8:	2500      	movs	r5, #0
 801e2ca:	e7e1      	b.n	801e290 <floor+0x48>
 801e2cc:	2e33      	cmp	r6, #51	@ 0x33
 801e2ce:	dd0a      	ble.n	801e2e6 <floor+0x9e>
 801e2d0:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 801e2d4:	d103      	bne.n	801e2de <floor+0x96>
 801e2d6:	4602      	mov	r2, r0
 801e2d8:	460b      	mov	r3, r1
 801e2da:	f7e1 ffaf 	bl	800023c <__adddf3>
 801e2de:	ec41 0b10 	vmov	d0, r0, r1
 801e2e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e2e6:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 801e2ea:	f04f 37ff 	mov.w	r7, #4294967295
 801e2ee:	40df      	lsrs	r7, r3
 801e2f0:	4207      	tst	r7, r0
 801e2f2:	d0f4      	beq.n	801e2de <floor+0x96>
 801e2f4:	a30e      	add	r3, pc, #56	@ (adr r3, 801e330 <floor+0xe8>)
 801e2f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e2fa:	f7e1 ff9f 	bl	800023c <__adddf3>
 801e2fe:	2200      	movs	r2, #0
 801e300:	2300      	movs	r3, #0
 801e302:	f7e2 fbe1 	bl	8000ac8 <__aeabi_dcmpgt>
 801e306:	2800      	cmp	r0, #0
 801e308:	d0c2      	beq.n	801e290 <floor+0x48>
 801e30a:	2c00      	cmp	r4, #0
 801e30c:	da0a      	bge.n	801e324 <floor+0xdc>
 801e30e:	2e14      	cmp	r6, #20
 801e310:	d101      	bne.n	801e316 <floor+0xce>
 801e312:	3401      	adds	r4, #1
 801e314:	e006      	b.n	801e324 <floor+0xdc>
 801e316:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 801e31a:	2301      	movs	r3, #1
 801e31c:	40b3      	lsls	r3, r6
 801e31e:	441d      	add	r5, r3
 801e320:	4545      	cmp	r5, r8
 801e322:	d3f6      	bcc.n	801e312 <floor+0xca>
 801e324:	ea25 0507 	bic.w	r5, r5, r7
 801e328:	e7b2      	b.n	801e290 <floor+0x48>
 801e32a:	2500      	movs	r5, #0
 801e32c:	462c      	mov	r4, r5
 801e32e:	e7af      	b.n	801e290 <floor+0x48>
 801e330:	8800759c 	.word	0x8800759c
 801e334:	7e37e43c 	.word	0x7e37e43c
 801e338:	bff00000 	.word	0xbff00000
 801e33c:	000fffff 	.word	0x000fffff

0801e340 <__kernel_cos>:
 801e340:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e344:	ec57 6b10 	vmov	r6, r7, d0
 801e348:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 801e34c:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 801e350:	ed8d 1b00 	vstr	d1, [sp]
 801e354:	d206      	bcs.n	801e364 <__kernel_cos+0x24>
 801e356:	4630      	mov	r0, r6
 801e358:	4639      	mov	r1, r7
 801e35a:	f7e2 fbd5 	bl	8000b08 <__aeabi_d2iz>
 801e35e:	2800      	cmp	r0, #0
 801e360:	f000 8088 	beq.w	801e474 <__kernel_cos+0x134>
 801e364:	4632      	mov	r2, r6
 801e366:	463b      	mov	r3, r7
 801e368:	4630      	mov	r0, r6
 801e36a:	4639      	mov	r1, r7
 801e36c:	f7e2 f91c 	bl	80005a8 <__aeabi_dmul>
 801e370:	4b51      	ldr	r3, [pc, #324]	@ (801e4b8 <__kernel_cos+0x178>)
 801e372:	2200      	movs	r2, #0
 801e374:	4604      	mov	r4, r0
 801e376:	460d      	mov	r5, r1
 801e378:	f7e2 f916 	bl	80005a8 <__aeabi_dmul>
 801e37c:	a340      	add	r3, pc, #256	@ (adr r3, 801e480 <__kernel_cos+0x140>)
 801e37e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e382:	4682      	mov	sl, r0
 801e384:	468b      	mov	fp, r1
 801e386:	4620      	mov	r0, r4
 801e388:	4629      	mov	r1, r5
 801e38a:	f7e2 f90d 	bl	80005a8 <__aeabi_dmul>
 801e38e:	a33e      	add	r3, pc, #248	@ (adr r3, 801e488 <__kernel_cos+0x148>)
 801e390:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e394:	f7e1 ff52 	bl	800023c <__adddf3>
 801e398:	4622      	mov	r2, r4
 801e39a:	462b      	mov	r3, r5
 801e39c:	f7e2 f904 	bl	80005a8 <__aeabi_dmul>
 801e3a0:	a33b      	add	r3, pc, #236	@ (adr r3, 801e490 <__kernel_cos+0x150>)
 801e3a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e3a6:	f7e1 ff47 	bl	8000238 <__aeabi_dsub>
 801e3aa:	4622      	mov	r2, r4
 801e3ac:	462b      	mov	r3, r5
 801e3ae:	f7e2 f8fb 	bl	80005a8 <__aeabi_dmul>
 801e3b2:	a339      	add	r3, pc, #228	@ (adr r3, 801e498 <__kernel_cos+0x158>)
 801e3b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e3b8:	f7e1 ff40 	bl	800023c <__adddf3>
 801e3bc:	4622      	mov	r2, r4
 801e3be:	462b      	mov	r3, r5
 801e3c0:	f7e2 f8f2 	bl	80005a8 <__aeabi_dmul>
 801e3c4:	a336      	add	r3, pc, #216	@ (adr r3, 801e4a0 <__kernel_cos+0x160>)
 801e3c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e3ca:	f7e1 ff35 	bl	8000238 <__aeabi_dsub>
 801e3ce:	4622      	mov	r2, r4
 801e3d0:	462b      	mov	r3, r5
 801e3d2:	f7e2 f8e9 	bl	80005a8 <__aeabi_dmul>
 801e3d6:	a334      	add	r3, pc, #208	@ (adr r3, 801e4a8 <__kernel_cos+0x168>)
 801e3d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e3dc:	f7e1 ff2e 	bl	800023c <__adddf3>
 801e3e0:	4622      	mov	r2, r4
 801e3e2:	462b      	mov	r3, r5
 801e3e4:	f7e2 f8e0 	bl	80005a8 <__aeabi_dmul>
 801e3e8:	4622      	mov	r2, r4
 801e3ea:	462b      	mov	r3, r5
 801e3ec:	f7e2 f8dc 	bl	80005a8 <__aeabi_dmul>
 801e3f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 801e3f4:	4604      	mov	r4, r0
 801e3f6:	460d      	mov	r5, r1
 801e3f8:	4630      	mov	r0, r6
 801e3fa:	4639      	mov	r1, r7
 801e3fc:	f7e2 f8d4 	bl	80005a8 <__aeabi_dmul>
 801e400:	460b      	mov	r3, r1
 801e402:	4602      	mov	r2, r0
 801e404:	4629      	mov	r1, r5
 801e406:	4620      	mov	r0, r4
 801e408:	f7e1 ff16 	bl	8000238 <__aeabi_dsub>
 801e40c:	4b2b      	ldr	r3, [pc, #172]	@ (801e4bc <__kernel_cos+0x17c>)
 801e40e:	4598      	cmp	r8, r3
 801e410:	4606      	mov	r6, r0
 801e412:	460f      	mov	r7, r1
 801e414:	d810      	bhi.n	801e438 <__kernel_cos+0xf8>
 801e416:	4602      	mov	r2, r0
 801e418:	460b      	mov	r3, r1
 801e41a:	4650      	mov	r0, sl
 801e41c:	4659      	mov	r1, fp
 801e41e:	f7e1 ff0b 	bl	8000238 <__aeabi_dsub>
 801e422:	460b      	mov	r3, r1
 801e424:	4926      	ldr	r1, [pc, #152]	@ (801e4c0 <__kernel_cos+0x180>)
 801e426:	4602      	mov	r2, r0
 801e428:	2000      	movs	r0, #0
 801e42a:	f7e1 ff05 	bl	8000238 <__aeabi_dsub>
 801e42e:	ec41 0b10 	vmov	d0, r0, r1
 801e432:	b003      	add	sp, #12
 801e434:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e438:	4b22      	ldr	r3, [pc, #136]	@ (801e4c4 <__kernel_cos+0x184>)
 801e43a:	4921      	ldr	r1, [pc, #132]	@ (801e4c0 <__kernel_cos+0x180>)
 801e43c:	4598      	cmp	r8, r3
 801e43e:	bf8c      	ite	hi
 801e440:	4d21      	ldrhi	r5, [pc, #132]	@ (801e4c8 <__kernel_cos+0x188>)
 801e442:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 801e446:	2400      	movs	r4, #0
 801e448:	4622      	mov	r2, r4
 801e44a:	462b      	mov	r3, r5
 801e44c:	2000      	movs	r0, #0
 801e44e:	f7e1 fef3 	bl	8000238 <__aeabi_dsub>
 801e452:	4622      	mov	r2, r4
 801e454:	4680      	mov	r8, r0
 801e456:	4689      	mov	r9, r1
 801e458:	462b      	mov	r3, r5
 801e45a:	4650      	mov	r0, sl
 801e45c:	4659      	mov	r1, fp
 801e45e:	f7e1 feeb 	bl	8000238 <__aeabi_dsub>
 801e462:	4632      	mov	r2, r6
 801e464:	463b      	mov	r3, r7
 801e466:	f7e1 fee7 	bl	8000238 <__aeabi_dsub>
 801e46a:	4602      	mov	r2, r0
 801e46c:	460b      	mov	r3, r1
 801e46e:	4640      	mov	r0, r8
 801e470:	4649      	mov	r1, r9
 801e472:	e7da      	b.n	801e42a <__kernel_cos+0xea>
 801e474:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 801e4b0 <__kernel_cos+0x170>
 801e478:	e7db      	b.n	801e432 <__kernel_cos+0xf2>
 801e47a:	bf00      	nop
 801e47c:	f3af 8000 	nop.w
 801e480:	be8838d4 	.word	0xbe8838d4
 801e484:	bda8fae9 	.word	0xbda8fae9
 801e488:	bdb4b1c4 	.word	0xbdb4b1c4
 801e48c:	3e21ee9e 	.word	0x3e21ee9e
 801e490:	809c52ad 	.word	0x809c52ad
 801e494:	3e927e4f 	.word	0x3e927e4f
 801e498:	19cb1590 	.word	0x19cb1590
 801e49c:	3efa01a0 	.word	0x3efa01a0
 801e4a0:	16c15177 	.word	0x16c15177
 801e4a4:	3f56c16c 	.word	0x3f56c16c
 801e4a8:	5555554c 	.word	0x5555554c
 801e4ac:	3fa55555 	.word	0x3fa55555
 801e4b0:	00000000 	.word	0x00000000
 801e4b4:	3ff00000 	.word	0x3ff00000
 801e4b8:	3fe00000 	.word	0x3fe00000
 801e4bc:	3fd33332 	.word	0x3fd33332
 801e4c0:	3ff00000 	.word	0x3ff00000
 801e4c4:	3fe90000 	.word	0x3fe90000
 801e4c8:	3fd20000 	.word	0x3fd20000
 801e4cc:	00000000 	.word	0x00000000

0801e4d0 <__kernel_sin>:
 801e4d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e4d4:	ec55 4b10 	vmov	r4, r5, d0
 801e4d8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 801e4dc:	b085      	sub	sp, #20
 801e4de:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 801e4e2:	ed8d 1b02 	vstr	d1, [sp, #8]
 801e4e6:	4680      	mov	r8, r0
 801e4e8:	d205      	bcs.n	801e4f6 <__kernel_sin+0x26>
 801e4ea:	4620      	mov	r0, r4
 801e4ec:	4629      	mov	r1, r5
 801e4ee:	f7e2 fb0b 	bl	8000b08 <__aeabi_d2iz>
 801e4f2:	2800      	cmp	r0, #0
 801e4f4:	d052      	beq.n	801e59c <__kernel_sin+0xcc>
 801e4f6:	4622      	mov	r2, r4
 801e4f8:	462b      	mov	r3, r5
 801e4fa:	4620      	mov	r0, r4
 801e4fc:	4629      	mov	r1, r5
 801e4fe:	f7e2 f853 	bl	80005a8 <__aeabi_dmul>
 801e502:	4682      	mov	sl, r0
 801e504:	468b      	mov	fp, r1
 801e506:	4602      	mov	r2, r0
 801e508:	460b      	mov	r3, r1
 801e50a:	4620      	mov	r0, r4
 801e50c:	4629      	mov	r1, r5
 801e50e:	f7e2 f84b 	bl	80005a8 <__aeabi_dmul>
 801e512:	a342      	add	r3, pc, #264	@ (adr r3, 801e61c <__kernel_sin+0x14c>)
 801e514:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e518:	e9cd 0100 	strd	r0, r1, [sp]
 801e51c:	4650      	mov	r0, sl
 801e51e:	4659      	mov	r1, fp
 801e520:	f7e2 f842 	bl	80005a8 <__aeabi_dmul>
 801e524:	a33f      	add	r3, pc, #252	@ (adr r3, 801e624 <__kernel_sin+0x154>)
 801e526:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e52a:	f7e1 fe85 	bl	8000238 <__aeabi_dsub>
 801e52e:	4652      	mov	r2, sl
 801e530:	465b      	mov	r3, fp
 801e532:	f7e2 f839 	bl	80005a8 <__aeabi_dmul>
 801e536:	a33d      	add	r3, pc, #244	@ (adr r3, 801e62c <__kernel_sin+0x15c>)
 801e538:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e53c:	f7e1 fe7e 	bl	800023c <__adddf3>
 801e540:	4652      	mov	r2, sl
 801e542:	465b      	mov	r3, fp
 801e544:	f7e2 f830 	bl	80005a8 <__aeabi_dmul>
 801e548:	a33a      	add	r3, pc, #232	@ (adr r3, 801e634 <__kernel_sin+0x164>)
 801e54a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e54e:	f7e1 fe73 	bl	8000238 <__aeabi_dsub>
 801e552:	4652      	mov	r2, sl
 801e554:	465b      	mov	r3, fp
 801e556:	f7e2 f827 	bl	80005a8 <__aeabi_dmul>
 801e55a:	a338      	add	r3, pc, #224	@ (adr r3, 801e63c <__kernel_sin+0x16c>)
 801e55c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e560:	f7e1 fe6c 	bl	800023c <__adddf3>
 801e564:	4606      	mov	r6, r0
 801e566:	460f      	mov	r7, r1
 801e568:	f1b8 0f00 	cmp.w	r8, #0
 801e56c:	d11b      	bne.n	801e5a6 <__kernel_sin+0xd6>
 801e56e:	4602      	mov	r2, r0
 801e570:	460b      	mov	r3, r1
 801e572:	4650      	mov	r0, sl
 801e574:	4659      	mov	r1, fp
 801e576:	f7e2 f817 	bl	80005a8 <__aeabi_dmul>
 801e57a:	a325      	add	r3, pc, #148	@ (adr r3, 801e610 <__kernel_sin+0x140>)
 801e57c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e580:	f7e1 fe5a 	bl	8000238 <__aeabi_dsub>
 801e584:	e9dd 2300 	ldrd	r2, r3, [sp]
 801e588:	f7e2 f80e 	bl	80005a8 <__aeabi_dmul>
 801e58c:	4602      	mov	r2, r0
 801e58e:	460b      	mov	r3, r1
 801e590:	4620      	mov	r0, r4
 801e592:	4629      	mov	r1, r5
 801e594:	f7e1 fe52 	bl	800023c <__adddf3>
 801e598:	4604      	mov	r4, r0
 801e59a:	460d      	mov	r5, r1
 801e59c:	ec45 4b10 	vmov	d0, r4, r5
 801e5a0:	b005      	add	sp, #20
 801e5a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e5a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801e5aa:	4b1b      	ldr	r3, [pc, #108]	@ (801e618 <__kernel_sin+0x148>)
 801e5ac:	2200      	movs	r2, #0
 801e5ae:	f7e1 fffb 	bl	80005a8 <__aeabi_dmul>
 801e5b2:	4632      	mov	r2, r6
 801e5b4:	4680      	mov	r8, r0
 801e5b6:	4689      	mov	r9, r1
 801e5b8:	463b      	mov	r3, r7
 801e5ba:	e9dd 0100 	ldrd	r0, r1, [sp]
 801e5be:	f7e1 fff3 	bl	80005a8 <__aeabi_dmul>
 801e5c2:	4602      	mov	r2, r0
 801e5c4:	460b      	mov	r3, r1
 801e5c6:	4640      	mov	r0, r8
 801e5c8:	4649      	mov	r1, r9
 801e5ca:	f7e1 fe35 	bl	8000238 <__aeabi_dsub>
 801e5ce:	4652      	mov	r2, sl
 801e5d0:	465b      	mov	r3, fp
 801e5d2:	f7e1 ffe9 	bl	80005a8 <__aeabi_dmul>
 801e5d6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801e5da:	f7e1 fe2d 	bl	8000238 <__aeabi_dsub>
 801e5de:	a30c      	add	r3, pc, #48	@ (adr r3, 801e610 <__kernel_sin+0x140>)
 801e5e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e5e4:	4606      	mov	r6, r0
 801e5e6:	460f      	mov	r7, r1
 801e5e8:	e9dd 0100 	ldrd	r0, r1, [sp]
 801e5ec:	f7e1 ffdc 	bl	80005a8 <__aeabi_dmul>
 801e5f0:	4602      	mov	r2, r0
 801e5f2:	460b      	mov	r3, r1
 801e5f4:	4630      	mov	r0, r6
 801e5f6:	4639      	mov	r1, r7
 801e5f8:	f7e1 fe20 	bl	800023c <__adddf3>
 801e5fc:	4602      	mov	r2, r0
 801e5fe:	460b      	mov	r3, r1
 801e600:	4620      	mov	r0, r4
 801e602:	4629      	mov	r1, r5
 801e604:	f7e1 fe18 	bl	8000238 <__aeabi_dsub>
 801e608:	e7c6      	b.n	801e598 <__kernel_sin+0xc8>
 801e60a:	bf00      	nop
 801e60c:	f3af 8000 	nop.w
 801e610:	55555549 	.word	0x55555549
 801e614:	3fc55555 	.word	0x3fc55555
 801e618:	3fe00000 	.word	0x3fe00000
 801e61c:	5acfd57c 	.word	0x5acfd57c
 801e620:	3de5d93a 	.word	0x3de5d93a
 801e624:	8a2b9ceb 	.word	0x8a2b9ceb
 801e628:	3e5ae5e6 	.word	0x3e5ae5e6
 801e62c:	57b1fe7d 	.word	0x57b1fe7d
 801e630:	3ec71de3 	.word	0x3ec71de3
 801e634:	19c161d5 	.word	0x19c161d5
 801e638:	3f2a01a0 	.word	0x3f2a01a0
 801e63c:	1110f8a6 	.word	0x1110f8a6
 801e640:	3f811111 	.word	0x3f811111
 801e644:	00000000 	.word	0x00000000

0801e648 <__ieee754_log>:
 801e648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e64c:	ec51 0b10 	vmov	r0, r1, d0
 801e650:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 801e654:	b087      	sub	sp, #28
 801e656:	460d      	mov	r5, r1
 801e658:	da26      	bge.n	801e6a8 <__ieee754_log+0x60>
 801e65a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801e65e:	4303      	orrs	r3, r0
 801e660:	4602      	mov	r2, r0
 801e662:	d10a      	bne.n	801e67a <__ieee754_log+0x32>
 801e664:	49ce      	ldr	r1, [pc, #824]	@ (801e9a0 <__ieee754_log+0x358>)
 801e666:	2200      	movs	r2, #0
 801e668:	2300      	movs	r3, #0
 801e66a:	2000      	movs	r0, #0
 801e66c:	f7e2 f8c6 	bl	80007fc <__aeabi_ddiv>
 801e670:	ec41 0b10 	vmov	d0, r0, r1
 801e674:	b007      	add	sp, #28
 801e676:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e67a:	2900      	cmp	r1, #0
 801e67c:	da05      	bge.n	801e68a <__ieee754_log+0x42>
 801e67e:	460b      	mov	r3, r1
 801e680:	f7e1 fdda 	bl	8000238 <__aeabi_dsub>
 801e684:	2200      	movs	r2, #0
 801e686:	2300      	movs	r3, #0
 801e688:	e7f0      	b.n	801e66c <__ieee754_log+0x24>
 801e68a:	4bc6      	ldr	r3, [pc, #792]	@ (801e9a4 <__ieee754_log+0x35c>)
 801e68c:	2200      	movs	r2, #0
 801e68e:	f7e1 ff8b 	bl	80005a8 <__aeabi_dmul>
 801e692:	f06f 0335 	mvn.w	r3, #53	@ 0x35
 801e696:	460d      	mov	r5, r1
 801e698:	4ac3      	ldr	r2, [pc, #780]	@ (801e9a8 <__ieee754_log+0x360>)
 801e69a:	4295      	cmp	r5, r2
 801e69c:	dd06      	ble.n	801e6ac <__ieee754_log+0x64>
 801e69e:	4602      	mov	r2, r0
 801e6a0:	460b      	mov	r3, r1
 801e6a2:	f7e1 fdcb 	bl	800023c <__adddf3>
 801e6a6:	e7e3      	b.n	801e670 <__ieee754_log+0x28>
 801e6a8:	2300      	movs	r3, #0
 801e6aa:	e7f5      	b.n	801e698 <__ieee754_log+0x50>
 801e6ac:	152c      	asrs	r4, r5, #20
 801e6ae:	f2a4 34ff 	subw	r4, r4, #1023	@ 0x3ff
 801e6b2:	f3c5 0513 	ubfx	r5, r5, #0, #20
 801e6b6:	441c      	add	r4, r3
 801e6b8:	f505 2315 	add.w	r3, r5, #610304	@ 0x95000
 801e6bc:	f603 7364 	addw	r3, r3, #3940	@ 0xf64
 801e6c0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 801e6c4:	f083 527f 	eor.w	r2, r3, #1069547520	@ 0x3fc00000
 801e6c8:	f482 1240 	eor.w	r2, r2, #3145728	@ 0x300000
 801e6cc:	ea42 0105 	orr.w	r1, r2, r5
 801e6d0:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 801e6d4:	2200      	movs	r2, #0
 801e6d6:	4bb5      	ldr	r3, [pc, #724]	@ (801e9ac <__ieee754_log+0x364>)
 801e6d8:	f7e1 fdae 	bl	8000238 <__aeabi_dsub>
 801e6dc:	1cab      	adds	r3, r5, #2
 801e6de:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801e6e2:	2b02      	cmp	r3, #2
 801e6e4:	4682      	mov	sl, r0
 801e6e6:	468b      	mov	fp, r1
 801e6e8:	f04f 0200 	mov.w	r2, #0
 801e6ec:	dc53      	bgt.n	801e796 <__ieee754_log+0x14e>
 801e6ee:	2300      	movs	r3, #0
 801e6f0:	f7e2 f9c2 	bl	8000a78 <__aeabi_dcmpeq>
 801e6f4:	b1d0      	cbz	r0, 801e72c <__ieee754_log+0xe4>
 801e6f6:	2c00      	cmp	r4, #0
 801e6f8:	f000 8120 	beq.w	801e93c <__ieee754_log+0x2f4>
 801e6fc:	4620      	mov	r0, r4
 801e6fe:	f7e1 fee9 	bl	80004d4 <__aeabi_i2d>
 801e702:	a391      	add	r3, pc, #580	@ (adr r3, 801e948 <__ieee754_log+0x300>)
 801e704:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e708:	4606      	mov	r6, r0
 801e70a:	460f      	mov	r7, r1
 801e70c:	f7e1 ff4c 	bl	80005a8 <__aeabi_dmul>
 801e710:	a38f      	add	r3, pc, #572	@ (adr r3, 801e950 <__ieee754_log+0x308>)
 801e712:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e716:	4604      	mov	r4, r0
 801e718:	460d      	mov	r5, r1
 801e71a:	4630      	mov	r0, r6
 801e71c:	4639      	mov	r1, r7
 801e71e:	f7e1 ff43 	bl	80005a8 <__aeabi_dmul>
 801e722:	4602      	mov	r2, r0
 801e724:	460b      	mov	r3, r1
 801e726:	4620      	mov	r0, r4
 801e728:	4629      	mov	r1, r5
 801e72a:	e7ba      	b.n	801e6a2 <__ieee754_log+0x5a>
 801e72c:	a38a      	add	r3, pc, #552	@ (adr r3, 801e958 <__ieee754_log+0x310>)
 801e72e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e732:	4650      	mov	r0, sl
 801e734:	4659      	mov	r1, fp
 801e736:	f7e1 ff37 	bl	80005a8 <__aeabi_dmul>
 801e73a:	4602      	mov	r2, r0
 801e73c:	460b      	mov	r3, r1
 801e73e:	2000      	movs	r0, #0
 801e740:	499b      	ldr	r1, [pc, #620]	@ (801e9b0 <__ieee754_log+0x368>)
 801e742:	f7e1 fd79 	bl	8000238 <__aeabi_dsub>
 801e746:	4652      	mov	r2, sl
 801e748:	4606      	mov	r6, r0
 801e74a:	460f      	mov	r7, r1
 801e74c:	465b      	mov	r3, fp
 801e74e:	4650      	mov	r0, sl
 801e750:	4659      	mov	r1, fp
 801e752:	f7e1 ff29 	bl	80005a8 <__aeabi_dmul>
 801e756:	4602      	mov	r2, r0
 801e758:	460b      	mov	r3, r1
 801e75a:	4630      	mov	r0, r6
 801e75c:	4639      	mov	r1, r7
 801e75e:	f7e1 ff23 	bl	80005a8 <__aeabi_dmul>
 801e762:	4606      	mov	r6, r0
 801e764:	460f      	mov	r7, r1
 801e766:	b914      	cbnz	r4, 801e76e <__ieee754_log+0x126>
 801e768:	4632      	mov	r2, r6
 801e76a:	463b      	mov	r3, r7
 801e76c:	e0a0      	b.n	801e8b0 <__ieee754_log+0x268>
 801e76e:	4620      	mov	r0, r4
 801e770:	f7e1 feb0 	bl	80004d4 <__aeabi_i2d>
 801e774:	a374      	add	r3, pc, #464	@ (adr r3, 801e948 <__ieee754_log+0x300>)
 801e776:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e77a:	4680      	mov	r8, r0
 801e77c:	4689      	mov	r9, r1
 801e77e:	f7e1 ff13 	bl	80005a8 <__aeabi_dmul>
 801e782:	a373      	add	r3, pc, #460	@ (adr r3, 801e950 <__ieee754_log+0x308>)
 801e784:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e788:	4604      	mov	r4, r0
 801e78a:	460d      	mov	r5, r1
 801e78c:	4640      	mov	r0, r8
 801e78e:	4649      	mov	r1, r9
 801e790:	f7e1 ff0a 	bl	80005a8 <__aeabi_dmul>
 801e794:	e0a5      	b.n	801e8e2 <__ieee754_log+0x29a>
 801e796:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 801e79a:	f7e1 fd4f 	bl	800023c <__adddf3>
 801e79e:	4602      	mov	r2, r0
 801e7a0:	460b      	mov	r3, r1
 801e7a2:	4650      	mov	r0, sl
 801e7a4:	4659      	mov	r1, fp
 801e7a6:	f7e2 f829 	bl	80007fc <__aeabi_ddiv>
 801e7aa:	e9cd 0100 	strd	r0, r1, [sp]
 801e7ae:	4620      	mov	r0, r4
 801e7b0:	f7e1 fe90 	bl	80004d4 <__aeabi_i2d>
 801e7b4:	e9dd 2300 	ldrd	r2, r3, [sp]
 801e7b8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801e7bc:	4610      	mov	r0, r2
 801e7be:	4619      	mov	r1, r3
 801e7c0:	f7e1 fef2 	bl	80005a8 <__aeabi_dmul>
 801e7c4:	4602      	mov	r2, r0
 801e7c6:	460b      	mov	r3, r1
 801e7c8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801e7cc:	f7e1 feec 	bl	80005a8 <__aeabi_dmul>
 801e7d0:	a363      	add	r3, pc, #396	@ (adr r3, 801e960 <__ieee754_log+0x318>)
 801e7d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e7d6:	4680      	mov	r8, r0
 801e7d8:	4689      	mov	r9, r1
 801e7da:	f7e1 fee5 	bl	80005a8 <__aeabi_dmul>
 801e7de:	a362      	add	r3, pc, #392	@ (adr r3, 801e968 <__ieee754_log+0x320>)
 801e7e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e7e4:	f7e1 fd2a 	bl	800023c <__adddf3>
 801e7e8:	4642      	mov	r2, r8
 801e7ea:	464b      	mov	r3, r9
 801e7ec:	f7e1 fedc 	bl	80005a8 <__aeabi_dmul>
 801e7f0:	a35f      	add	r3, pc, #380	@ (adr r3, 801e970 <__ieee754_log+0x328>)
 801e7f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e7f6:	f7e1 fd21 	bl	800023c <__adddf3>
 801e7fa:	4642      	mov	r2, r8
 801e7fc:	464b      	mov	r3, r9
 801e7fe:	f7e1 fed3 	bl	80005a8 <__aeabi_dmul>
 801e802:	a35d      	add	r3, pc, #372	@ (adr r3, 801e978 <__ieee754_log+0x330>)
 801e804:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e808:	f7e1 fd18 	bl	800023c <__adddf3>
 801e80c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801e810:	f7e1 feca 	bl	80005a8 <__aeabi_dmul>
 801e814:	a35a      	add	r3, pc, #360	@ (adr r3, 801e980 <__ieee754_log+0x338>)
 801e816:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e81a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801e81e:	4640      	mov	r0, r8
 801e820:	4649      	mov	r1, r9
 801e822:	f7e1 fec1 	bl	80005a8 <__aeabi_dmul>
 801e826:	a358      	add	r3, pc, #352	@ (adr r3, 801e988 <__ieee754_log+0x340>)
 801e828:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e82c:	f7e1 fd06 	bl	800023c <__adddf3>
 801e830:	4642      	mov	r2, r8
 801e832:	464b      	mov	r3, r9
 801e834:	f7e1 feb8 	bl	80005a8 <__aeabi_dmul>
 801e838:	a355      	add	r3, pc, #340	@ (adr r3, 801e990 <__ieee754_log+0x348>)
 801e83a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e83e:	f7e1 fcfd 	bl	800023c <__adddf3>
 801e842:	4642      	mov	r2, r8
 801e844:	464b      	mov	r3, r9
 801e846:	f7e1 feaf 	bl	80005a8 <__aeabi_dmul>
 801e84a:	f5a5 26c2 	sub.w	r6, r5, #397312	@ 0x61000
 801e84e:	4602      	mov	r2, r0
 801e850:	460b      	mov	r3, r1
 801e852:	f5c5 25d7 	rsb	r5, r5, #440320	@ 0x6b800
 801e856:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801e85a:	f7e1 fcef 	bl	800023c <__adddf3>
 801e85e:	f2a6 467a 	subw	r6, r6, #1146	@ 0x47a
 801e862:	3551      	adds	r5, #81	@ 0x51
 801e864:	4335      	orrs	r5, r6
 801e866:	2d00      	cmp	r5, #0
 801e868:	4680      	mov	r8, r0
 801e86a:	4689      	mov	r9, r1
 801e86c:	dd48      	ble.n	801e900 <__ieee754_log+0x2b8>
 801e86e:	4b50      	ldr	r3, [pc, #320]	@ (801e9b0 <__ieee754_log+0x368>)
 801e870:	2200      	movs	r2, #0
 801e872:	4650      	mov	r0, sl
 801e874:	4659      	mov	r1, fp
 801e876:	f7e1 fe97 	bl	80005a8 <__aeabi_dmul>
 801e87a:	4652      	mov	r2, sl
 801e87c:	465b      	mov	r3, fp
 801e87e:	f7e1 fe93 	bl	80005a8 <__aeabi_dmul>
 801e882:	4602      	mov	r2, r0
 801e884:	460b      	mov	r3, r1
 801e886:	4606      	mov	r6, r0
 801e888:	460f      	mov	r7, r1
 801e88a:	4640      	mov	r0, r8
 801e88c:	4649      	mov	r1, r9
 801e88e:	f7e1 fcd5 	bl	800023c <__adddf3>
 801e892:	e9dd 2300 	ldrd	r2, r3, [sp]
 801e896:	f7e1 fe87 	bl	80005a8 <__aeabi_dmul>
 801e89a:	4680      	mov	r8, r0
 801e89c:	4689      	mov	r9, r1
 801e89e:	b964      	cbnz	r4, 801e8ba <__ieee754_log+0x272>
 801e8a0:	4602      	mov	r2, r0
 801e8a2:	460b      	mov	r3, r1
 801e8a4:	4630      	mov	r0, r6
 801e8a6:	4639      	mov	r1, r7
 801e8a8:	f7e1 fcc6 	bl	8000238 <__aeabi_dsub>
 801e8ac:	4602      	mov	r2, r0
 801e8ae:	460b      	mov	r3, r1
 801e8b0:	4650      	mov	r0, sl
 801e8b2:	4659      	mov	r1, fp
 801e8b4:	f7e1 fcc0 	bl	8000238 <__aeabi_dsub>
 801e8b8:	e6da      	b.n	801e670 <__ieee754_log+0x28>
 801e8ba:	a323      	add	r3, pc, #140	@ (adr r3, 801e948 <__ieee754_log+0x300>)
 801e8bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e8c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801e8c4:	f7e1 fe70 	bl	80005a8 <__aeabi_dmul>
 801e8c8:	a321      	add	r3, pc, #132	@ (adr r3, 801e950 <__ieee754_log+0x308>)
 801e8ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e8ce:	4604      	mov	r4, r0
 801e8d0:	460d      	mov	r5, r1
 801e8d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801e8d6:	f7e1 fe67 	bl	80005a8 <__aeabi_dmul>
 801e8da:	4642      	mov	r2, r8
 801e8dc:	464b      	mov	r3, r9
 801e8de:	f7e1 fcad 	bl	800023c <__adddf3>
 801e8e2:	4602      	mov	r2, r0
 801e8e4:	460b      	mov	r3, r1
 801e8e6:	4630      	mov	r0, r6
 801e8e8:	4639      	mov	r1, r7
 801e8ea:	f7e1 fca5 	bl	8000238 <__aeabi_dsub>
 801e8ee:	4652      	mov	r2, sl
 801e8f0:	465b      	mov	r3, fp
 801e8f2:	f7e1 fca1 	bl	8000238 <__aeabi_dsub>
 801e8f6:	4602      	mov	r2, r0
 801e8f8:	460b      	mov	r3, r1
 801e8fa:	4620      	mov	r0, r4
 801e8fc:	4629      	mov	r1, r5
 801e8fe:	e7d9      	b.n	801e8b4 <__ieee754_log+0x26c>
 801e900:	4602      	mov	r2, r0
 801e902:	460b      	mov	r3, r1
 801e904:	4650      	mov	r0, sl
 801e906:	4659      	mov	r1, fp
 801e908:	f7e1 fc96 	bl	8000238 <__aeabi_dsub>
 801e90c:	e9dd 2300 	ldrd	r2, r3, [sp]
 801e910:	f7e1 fe4a 	bl	80005a8 <__aeabi_dmul>
 801e914:	4606      	mov	r6, r0
 801e916:	460f      	mov	r7, r1
 801e918:	2c00      	cmp	r4, #0
 801e91a:	f43f af25 	beq.w	801e768 <__ieee754_log+0x120>
 801e91e:	a30a      	add	r3, pc, #40	@ (adr r3, 801e948 <__ieee754_log+0x300>)
 801e920:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e924:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801e928:	f7e1 fe3e 	bl	80005a8 <__aeabi_dmul>
 801e92c:	a308      	add	r3, pc, #32	@ (adr r3, 801e950 <__ieee754_log+0x308>)
 801e92e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e932:	4604      	mov	r4, r0
 801e934:	460d      	mov	r5, r1
 801e936:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801e93a:	e729      	b.n	801e790 <__ieee754_log+0x148>
 801e93c:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 801e998 <__ieee754_log+0x350>
 801e940:	e698      	b.n	801e674 <__ieee754_log+0x2c>
 801e942:	bf00      	nop
 801e944:	f3af 8000 	nop.w
 801e948:	fee00000 	.word	0xfee00000
 801e94c:	3fe62e42 	.word	0x3fe62e42
 801e950:	35793c76 	.word	0x35793c76
 801e954:	3dea39ef 	.word	0x3dea39ef
 801e958:	55555555 	.word	0x55555555
 801e95c:	3fd55555 	.word	0x3fd55555
 801e960:	df3e5244 	.word	0xdf3e5244
 801e964:	3fc2f112 	.word	0x3fc2f112
 801e968:	96cb03de 	.word	0x96cb03de
 801e96c:	3fc74664 	.word	0x3fc74664
 801e970:	94229359 	.word	0x94229359
 801e974:	3fd24924 	.word	0x3fd24924
 801e978:	55555593 	.word	0x55555593
 801e97c:	3fe55555 	.word	0x3fe55555
 801e980:	d078c69f 	.word	0xd078c69f
 801e984:	3fc39a09 	.word	0x3fc39a09
 801e988:	1d8e78af 	.word	0x1d8e78af
 801e98c:	3fcc71c5 	.word	0x3fcc71c5
 801e990:	9997fa04 	.word	0x9997fa04
 801e994:	3fd99999 	.word	0x3fd99999
	...
 801e9a0:	c3500000 	.word	0xc3500000
 801e9a4:	43500000 	.word	0x43500000
 801e9a8:	7fefffff 	.word	0x7fefffff
 801e9ac:	3ff00000 	.word	0x3ff00000
 801e9b0:	3fe00000 	.word	0x3fe00000
 801e9b4:	00000000 	.word	0x00000000

0801e9b8 <__ieee754_rem_pio2>:
 801e9b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e9bc:	ec57 6b10 	vmov	r6, r7, d0
 801e9c0:	4bc5      	ldr	r3, [pc, #788]	@ (801ecd8 <__ieee754_rem_pio2+0x320>)
 801e9c2:	b08d      	sub	sp, #52	@ 0x34
 801e9c4:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 801e9c8:	4598      	cmp	r8, r3
 801e9ca:	4604      	mov	r4, r0
 801e9cc:	9704      	str	r7, [sp, #16]
 801e9ce:	d807      	bhi.n	801e9e0 <__ieee754_rem_pio2+0x28>
 801e9d0:	2200      	movs	r2, #0
 801e9d2:	2300      	movs	r3, #0
 801e9d4:	ed80 0b00 	vstr	d0, [r0]
 801e9d8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801e9dc:	2500      	movs	r5, #0
 801e9de:	e028      	b.n	801ea32 <__ieee754_rem_pio2+0x7a>
 801e9e0:	4bbe      	ldr	r3, [pc, #760]	@ (801ecdc <__ieee754_rem_pio2+0x324>)
 801e9e2:	4598      	cmp	r8, r3
 801e9e4:	d878      	bhi.n	801ead8 <__ieee754_rem_pio2+0x120>
 801e9e6:	9b04      	ldr	r3, [sp, #16]
 801e9e8:	4dbd      	ldr	r5, [pc, #756]	@ (801ece0 <__ieee754_rem_pio2+0x328>)
 801e9ea:	2b00      	cmp	r3, #0
 801e9ec:	4630      	mov	r0, r6
 801e9ee:	a3ac      	add	r3, pc, #688	@ (adr r3, 801eca0 <__ieee754_rem_pio2+0x2e8>)
 801e9f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e9f4:	4639      	mov	r1, r7
 801e9f6:	dd38      	ble.n	801ea6a <__ieee754_rem_pio2+0xb2>
 801e9f8:	f7e1 fc1e 	bl	8000238 <__aeabi_dsub>
 801e9fc:	45a8      	cmp	r8, r5
 801e9fe:	4606      	mov	r6, r0
 801ea00:	460f      	mov	r7, r1
 801ea02:	d01a      	beq.n	801ea3a <__ieee754_rem_pio2+0x82>
 801ea04:	a3a8      	add	r3, pc, #672	@ (adr r3, 801eca8 <__ieee754_rem_pio2+0x2f0>)
 801ea06:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ea0a:	f7e1 fc15 	bl	8000238 <__aeabi_dsub>
 801ea0e:	4602      	mov	r2, r0
 801ea10:	460b      	mov	r3, r1
 801ea12:	4680      	mov	r8, r0
 801ea14:	4689      	mov	r9, r1
 801ea16:	4630      	mov	r0, r6
 801ea18:	4639      	mov	r1, r7
 801ea1a:	f7e1 fc0d 	bl	8000238 <__aeabi_dsub>
 801ea1e:	a3a2      	add	r3, pc, #648	@ (adr r3, 801eca8 <__ieee754_rem_pio2+0x2f0>)
 801ea20:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ea24:	f7e1 fc08 	bl	8000238 <__aeabi_dsub>
 801ea28:	e9c4 8900 	strd	r8, r9, [r4]
 801ea2c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801ea30:	2501      	movs	r5, #1
 801ea32:	4628      	mov	r0, r5
 801ea34:	b00d      	add	sp, #52	@ 0x34
 801ea36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ea3a:	a39d      	add	r3, pc, #628	@ (adr r3, 801ecb0 <__ieee754_rem_pio2+0x2f8>)
 801ea3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ea40:	f7e1 fbfa 	bl	8000238 <__aeabi_dsub>
 801ea44:	a39c      	add	r3, pc, #624	@ (adr r3, 801ecb8 <__ieee754_rem_pio2+0x300>)
 801ea46:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ea4a:	4606      	mov	r6, r0
 801ea4c:	460f      	mov	r7, r1
 801ea4e:	f7e1 fbf3 	bl	8000238 <__aeabi_dsub>
 801ea52:	4602      	mov	r2, r0
 801ea54:	460b      	mov	r3, r1
 801ea56:	4680      	mov	r8, r0
 801ea58:	4689      	mov	r9, r1
 801ea5a:	4630      	mov	r0, r6
 801ea5c:	4639      	mov	r1, r7
 801ea5e:	f7e1 fbeb 	bl	8000238 <__aeabi_dsub>
 801ea62:	a395      	add	r3, pc, #596	@ (adr r3, 801ecb8 <__ieee754_rem_pio2+0x300>)
 801ea64:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ea68:	e7dc      	b.n	801ea24 <__ieee754_rem_pio2+0x6c>
 801ea6a:	f7e1 fbe7 	bl	800023c <__adddf3>
 801ea6e:	45a8      	cmp	r8, r5
 801ea70:	4606      	mov	r6, r0
 801ea72:	460f      	mov	r7, r1
 801ea74:	d018      	beq.n	801eaa8 <__ieee754_rem_pio2+0xf0>
 801ea76:	a38c      	add	r3, pc, #560	@ (adr r3, 801eca8 <__ieee754_rem_pio2+0x2f0>)
 801ea78:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ea7c:	f7e1 fbde 	bl	800023c <__adddf3>
 801ea80:	4602      	mov	r2, r0
 801ea82:	460b      	mov	r3, r1
 801ea84:	4680      	mov	r8, r0
 801ea86:	4689      	mov	r9, r1
 801ea88:	4630      	mov	r0, r6
 801ea8a:	4639      	mov	r1, r7
 801ea8c:	f7e1 fbd4 	bl	8000238 <__aeabi_dsub>
 801ea90:	a385      	add	r3, pc, #532	@ (adr r3, 801eca8 <__ieee754_rem_pio2+0x2f0>)
 801ea92:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ea96:	f7e1 fbd1 	bl	800023c <__adddf3>
 801ea9a:	f04f 35ff 	mov.w	r5, #4294967295
 801ea9e:	e9c4 8900 	strd	r8, r9, [r4]
 801eaa2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801eaa6:	e7c4      	b.n	801ea32 <__ieee754_rem_pio2+0x7a>
 801eaa8:	a381      	add	r3, pc, #516	@ (adr r3, 801ecb0 <__ieee754_rem_pio2+0x2f8>)
 801eaaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eaae:	f7e1 fbc5 	bl	800023c <__adddf3>
 801eab2:	a381      	add	r3, pc, #516	@ (adr r3, 801ecb8 <__ieee754_rem_pio2+0x300>)
 801eab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eab8:	4606      	mov	r6, r0
 801eaba:	460f      	mov	r7, r1
 801eabc:	f7e1 fbbe 	bl	800023c <__adddf3>
 801eac0:	4602      	mov	r2, r0
 801eac2:	460b      	mov	r3, r1
 801eac4:	4680      	mov	r8, r0
 801eac6:	4689      	mov	r9, r1
 801eac8:	4630      	mov	r0, r6
 801eaca:	4639      	mov	r1, r7
 801eacc:	f7e1 fbb4 	bl	8000238 <__aeabi_dsub>
 801ead0:	a379      	add	r3, pc, #484	@ (adr r3, 801ecb8 <__ieee754_rem_pio2+0x300>)
 801ead2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ead6:	e7de      	b.n	801ea96 <__ieee754_rem_pio2+0xde>
 801ead8:	4b82      	ldr	r3, [pc, #520]	@ (801ece4 <__ieee754_rem_pio2+0x32c>)
 801eada:	4598      	cmp	r8, r3
 801eadc:	f200 80d1 	bhi.w	801ec82 <__ieee754_rem_pio2+0x2ca>
 801eae0:	f000 f99a 	bl	801ee18 <fabs>
 801eae4:	ec57 6b10 	vmov	r6, r7, d0
 801eae8:	a375      	add	r3, pc, #468	@ (adr r3, 801ecc0 <__ieee754_rem_pio2+0x308>)
 801eaea:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eaee:	4630      	mov	r0, r6
 801eaf0:	4639      	mov	r1, r7
 801eaf2:	f7e1 fd59 	bl	80005a8 <__aeabi_dmul>
 801eaf6:	4b7c      	ldr	r3, [pc, #496]	@ (801ece8 <__ieee754_rem_pio2+0x330>)
 801eaf8:	2200      	movs	r2, #0
 801eafa:	f7e1 fb9f 	bl	800023c <__adddf3>
 801eafe:	f7e2 f803 	bl	8000b08 <__aeabi_d2iz>
 801eb02:	4605      	mov	r5, r0
 801eb04:	f7e1 fce6 	bl	80004d4 <__aeabi_i2d>
 801eb08:	4602      	mov	r2, r0
 801eb0a:	460b      	mov	r3, r1
 801eb0c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801eb10:	a363      	add	r3, pc, #396	@ (adr r3, 801eca0 <__ieee754_rem_pio2+0x2e8>)
 801eb12:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eb16:	f7e1 fd47 	bl	80005a8 <__aeabi_dmul>
 801eb1a:	4602      	mov	r2, r0
 801eb1c:	460b      	mov	r3, r1
 801eb1e:	4630      	mov	r0, r6
 801eb20:	4639      	mov	r1, r7
 801eb22:	f7e1 fb89 	bl	8000238 <__aeabi_dsub>
 801eb26:	a360      	add	r3, pc, #384	@ (adr r3, 801eca8 <__ieee754_rem_pio2+0x2f0>)
 801eb28:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eb2c:	4682      	mov	sl, r0
 801eb2e:	468b      	mov	fp, r1
 801eb30:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801eb34:	f7e1 fd38 	bl	80005a8 <__aeabi_dmul>
 801eb38:	2d1f      	cmp	r5, #31
 801eb3a:	4606      	mov	r6, r0
 801eb3c:	460f      	mov	r7, r1
 801eb3e:	dc0c      	bgt.n	801eb5a <__ieee754_rem_pio2+0x1a2>
 801eb40:	4b6a      	ldr	r3, [pc, #424]	@ (801ecec <__ieee754_rem_pio2+0x334>)
 801eb42:	1e6a      	subs	r2, r5, #1
 801eb44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801eb48:	4543      	cmp	r3, r8
 801eb4a:	d006      	beq.n	801eb5a <__ieee754_rem_pio2+0x1a2>
 801eb4c:	4632      	mov	r2, r6
 801eb4e:	463b      	mov	r3, r7
 801eb50:	4650      	mov	r0, sl
 801eb52:	4659      	mov	r1, fp
 801eb54:	f7e1 fb70 	bl	8000238 <__aeabi_dsub>
 801eb58:	e00e      	b.n	801eb78 <__ieee754_rem_pio2+0x1c0>
 801eb5a:	463b      	mov	r3, r7
 801eb5c:	4632      	mov	r2, r6
 801eb5e:	4650      	mov	r0, sl
 801eb60:	4659      	mov	r1, fp
 801eb62:	f7e1 fb69 	bl	8000238 <__aeabi_dsub>
 801eb66:	ea4f 5328 	mov.w	r3, r8, asr #20
 801eb6a:	9305      	str	r3, [sp, #20]
 801eb6c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801eb70:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 801eb74:	2b10      	cmp	r3, #16
 801eb76:	dc02      	bgt.n	801eb7e <__ieee754_rem_pio2+0x1c6>
 801eb78:	e9c4 0100 	strd	r0, r1, [r4]
 801eb7c:	e039      	b.n	801ebf2 <__ieee754_rem_pio2+0x23a>
 801eb7e:	a34c      	add	r3, pc, #304	@ (adr r3, 801ecb0 <__ieee754_rem_pio2+0x2f8>)
 801eb80:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eb84:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801eb88:	f7e1 fd0e 	bl	80005a8 <__aeabi_dmul>
 801eb8c:	4606      	mov	r6, r0
 801eb8e:	460f      	mov	r7, r1
 801eb90:	4602      	mov	r2, r0
 801eb92:	460b      	mov	r3, r1
 801eb94:	4650      	mov	r0, sl
 801eb96:	4659      	mov	r1, fp
 801eb98:	f7e1 fb4e 	bl	8000238 <__aeabi_dsub>
 801eb9c:	4602      	mov	r2, r0
 801eb9e:	460b      	mov	r3, r1
 801eba0:	4680      	mov	r8, r0
 801eba2:	4689      	mov	r9, r1
 801eba4:	4650      	mov	r0, sl
 801eba6:	4659      	mov	r1, fp
 801eba8:	f7e1 fb46 	bl	8000238 <__aeabi_dsub>
 801ebac:	4632      	mov	r2, r6
 801ebae:	463b      	mov	r3, r7
 801ebb0:	f7e1 fb42 	bl	8000238 <__aeabi_dsub>
 801ebb4:	a340      	add	r3, pc, #256	@ (adr r3, 801ecb8 <__ieee754_rem_pio2+0x300>)
 801ebb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ebba:	4606      	mov	r6, r0
 801ebbc:	460f      	mov	r7, r1
 801ebbe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801ebc2:	f7e1 fcf1 	bl	80005a8 <__aeabi_dmul>
 801ebc6:	4632      	mov	r2, r6
 801ebc8:	463b      	mov	r3, r7
 801ebca:	f7e1 fb35 	bl	8000238 <__aeabi_dsub>
 801ebce:	4602      	mov	r2, r0
 801ebd0:	460b      	mov	r3, r1
 801ebd2:	4606      	mov	r6, r0
 801ebd4:	460f      	mov	r7, r1
 801ebd6:	4640      	mov	r0, r8
 801ebd8:	4649      	mov	r1, r9
 801ebda:	f7e1 fb2d 	bl	8000238 <__aeabi_dsub>
 801ebde:	9a05      	ldr	r2, [sp, #20]
 801ebe0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801ebe4:	1ad3      	subs	r3, r2, r3
 801ebe6:	2b31      	cmp	r3, #49	@ 0x31
 801ebe8:	dc20      	bgt.n	801ec2c <__ieee754_rem_pio2+0x274>
 801ebea:	e9c4 0100 	strd	r0, r1, [r4]
 801ebee:	46c2      	mov	sl, r8
 801ebf0:	46cb      	mov	fp, r9
 801ebf2:	e9d4 8900 	ldrd	r8, r9, [r4]
 801ebf6:	4650      	mov	r0, sl
 801ebf8:	4642      	mov	r2, r8
 801ebfa:	464b      	mov	r3, r9
 801ebfc:	4659      	mov	r1, fp
 801ebfe:	f7e1 fb1b 	bl	8000238 <__aeabi_dsub>
 801ec02:	463b      	mov	r3, r7
 801ec04:	4632      	mov	r2, r6
 801ec06:	f7e1 fb17 	bl	8000238 <__aeabi_dsub>
 801ec0a:	9b04      	ldr	r3, [sp, #16]
 801ec0c:	2b00      	cmp	r3, #0
 801ec0e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801ec12:	f6bf af0e 	bge.w	801ea32 <__ieee754_rem_pio2+0x7a>
 801ec16:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 801ec1a:	6063      	str	r3, [r4, #4]
 801ec1c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801ec20:	f8c4 8000 	str.w	r8, [r4]
 801ec24:	60a0      	str	r0, [r4, #8]
 801ec26:	60e3      	str	r3, [r4, #12]
 801ec28:	426d      	negs	r5, r5
 801ec2a:	e702      	b.n	801ea32 <__ieee754_rem_pio2+0x7a>
 801ec2c:	a326      	add	r3, pc, #152	@ (adr r3, 801ecc8 <__ieee754_rem_pio2+0x310>)
 801ec2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ec32:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801ec36:	f7e1 fcb7 	bl	80005a8 <__aeabi_dmul>
 801ec3a:	4606      	mov	r6, r0
 801ec3c:	460f      	mov	r7, r1
 801ec3e:	4602      	mov	r2, r0
 801ec40:	460b      	mov	r3, r1
 801ec42:	4640      	mov	r0, r8
 801ec44:	4649      	mov	r1, r9
 801ec46:	f7e1 faf7 	bl	8000238 <__aeabi_dsub>
 801ec4a:	4602      	mov	r2, r0
 801ec4c:	460b      	mov	r3, r1
 801ec4e:	4682      	mov	sl, r0
 801ec50:	468b      	mov	fp, r1
 801ec52:	4640      	mov	r0, r8
 801ec54:	4649      	mov	r1, r9
 801ec56:	f7e1 faef 	bl	8000238 <__aeabi_dsub>
 801ec5a:	4632      	mov	r2, r6
 801ec5c:	463b      	mov	r3, r7
 801ec5e:	f7e1 faeb 	bl	8000238 <__aeabi_dsub>
 801ec62:	a31b      	add	r3, pc, #108	@ (adr r3, 801ecd0 <__ieee754_rem_pio2+0x318>)
 801ec64:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ec68:	4606      	mov	r6, r0
 801ec6a:	460f      	mov	r7, r1
 801ec6c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801ec70:	f7e1 fc9a 	bl	80005a8 <__aeabi_dmul>
 801ec74:	4632      	mov	r2, r6
 801ec76:	463b      	mov	r3, r7
 801ec78:	f7e1 fade 	bl	8000238 <__aeabi_dsub>
 801ec7c:	4606      	mov	r6, r0
 801ec7e:	460f      	mov	r7, r1
 801ec80:	e764      	b.n	801eb4c <__ieee754_rem_pio2+0x194>
 801ec82:	4b1b      	ldr	r3, [pc, #108]	@ (801ecf0 <__ieee754_rem_pio2+0x338>)
 801ec84:	4598      	cmp	r8, r3
 801ec86:	d935      	bls.n	801ecf4 <__ieee754_rem_pio2+0x33c>
 801ec88:	4632      	mov	r2, r6
 801ec8a:	463b      	mov	r3, r7
 801ec8c:	4630      	mov	r0, r6
 801ec8e:	4639      	mov	r1, r7
 801ec90:	f7e1 fad2 	bl	8000238 <__aeabi_dsub>
 801ec94:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801ec98:	e9c4 0100 	strd	r0, r1, [r4]
 801ec9c:	e69e      	b.n	801e9dc <__ieee754_rem_pio2+0x24>
 801ec9e:	bf00      	nop
 801eca0:	54400000 	.word	0x54400000
 801eca4:	3ff921fb 	.word	0x3ff921fb
 801eca8:	1a626331 	.word	0x1a626331
 801ecac:	3dd0b461 	.word	0x3dd0b461
 801ecb0:	1a600000 	.word	0x1a600000
 801ecb4:	3dd0b461 	.word	0x3dd0b461
 801ecb8:	2e037073 	.word	0x2e037073
 801ecbc:	3ba3198a 	.word	0x3ba3198a
 801ecc0:	6dc9c883 	.word	0x6dc9c883
 801ecc4:	3fe45f30 	.word	0x3fe45f30
 801ecc8:	2e000000 	.word	0x2e000000
 801eccc:	3ba3198a 	.word	0x3ba3198a
 801ecd0:	252049c1 	.word	0x252049c1
 801ecd4:	397b839a 	.word	0x397b839a
 801ecd8:	3fe921fb 	.word	0x3fe921fb
 801ecdc:	4002d97b 	.word	0x4002d97b
 801ece0:	3ff921fb 	.word	0x3ff921fb
 801ece4:	413921fb 	.word	0x413921fb
 801ece8:	3fe00000 	.word	0x3fe00000
 801ecec:	0802288c 	.word	0x0802288c
 801ecf0:	7fefffff 	.word	0x7fefffff
 801ecf4:	ea4f 5528 	mov.w	r5, r8, asr #20
 801ecf8:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 801ecfc:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 801ed00:	4630      	mov	r0, r6
 801ed02:	460f      	mov	r7, r1
 801ed04:	f7e1 ff00 	bl	8000b08 <__aeabi_d2iz>
 801ed08:	f7e1 fbe4 	bl	80004d4 <__aeabi_i2d>
 801ed0c:	4602      	mov	r2, r0
 801ed0e:	460b      	mov	r3, r1
 801ed10:	4630      	mov	r0, r6
 801ed12:	4639      	mov	r1, r7
 801ed14:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801ed18:	f7e1 fa8e 	bl	8000238 <__aeabi_dsub>
 801ed1c:	4b22      	ldr	r3, [pc, #136]	@ (801eda8 <__ieee754_rem_pio2+0x3f0>)
 801ed1e:	2200      	movs	r2, #0
 801ed20:	f7e1 fc42 	bl	80005a8 <__aeabi_dmul>
 801ed24:	460f      	mov	r7, r1
 801ed26:	4606      	mov	r6, r0
 801ed28:	f7e1 feee 	bl	8000b08 <__aeabi_d2iz>
 801ed2c:	f7e1 fbd2 	bl	80004d4 <__aeabi_i2d>
 801ed30:	4602      	mov	r2, r0
 801ed32:	460b      	mov	r3, r1
 801ed34:	4630      	mov	r0, r6
 801ed36:	4639      	mov	r1, r7
 801ed38:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801ed3c:	f7e1 fa7c 	bl	8000238 <__aeabi_dsub>
 801ed40:	4b19      	ldr	r3, [pc, #100]	@ (801eda8 <__ieee754_rem_pio2+0x3f0>)
 801ed42:	2200      	movs	r2, #0
 801ed44:	f7e1 fc30 	bl	80005a8 <__aeabi_dmul>
 801ed48:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 801ed4c:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 801ed50:	f04f 0803 	mov.w	r8, #3
 801ed54:	2600      	movs	r6, #0
 801ed56:	2700      	movs	r7, #0
 801ed58:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 801ed5c:	4632      	mov	r2, r6
 801ed5e:	463b      	mov	r3, r7
 801ed60:	46c2      	mov	sl, r8
 801ed62:	f108 38ff 	add.w	r8, r8, #4294967295
 801ed66:	f7e1 fe87 	bl	8000a78 <__aeabi_dcmpeq>
 801ed6a:	2800      	cmp	r0, #0
 801ed6c:	d1f4      	bne.n	801ed58 <__ieee754_rem_pio2+0x3a0>
 801ed6e:	4b0f      	ldr	r3, [pc, #60]	@ (801edac <__ieee754_rem_pio2+0x3f4>)
 801ed70:	9301      	str	r3, [sp, #4]
 801ed72:	2302      	movs	r3, #2
 801ed74:	9300      	str	r3, [sp, #0]
 801ed76:	462a      	mov	r2, r5
 801ed78:	4653      	mov	r3, sl
 801ed7a:	4621      	mov	r1, r4
 801ed7c:	a806      	add	r0, sp, #24
 801ed7e:	f000 f947 	bl	801f010 <__kernel_rem_pio2>
 801ed82:	9b04      	ldr	r3, [sp, #16]
 801ed84:	2b00      	cmp	r3, #0
 801ed86:	4605      	mov	r5, r0
 801ed88:	f6bf ae53 	bge.w	801ea32 <__ieee754_rem_pio2+0x7a>
 801ed8c:	e9d4 2100 	ldrd	r2, r1, [r4]
 801ed90:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801ed94:	e9c4 2300 	strd	r2, r3, [r4]
 801ed98:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 801ed9c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801eda0:	e9c4 2302 	strd	r2, r3, [r4, #8]
 801eda4:	e740      	b.n	801ec28 <__ieee754_rem_pio2+0x270>
 801eda6:	bf00      	nop
 801eda8:	41700000 	.word	0x41700000
 801edac:	0802290c 	.word	0x0802290c

0801edb0 <acos>:
 801edb0:	b538      	push	{r3, r4, r5, lr}
 801edb2:	ed2d 8b02 	vpush	{d8}
 801edb6:	ec55 4b10 	vmov	r4, r5, d0
 801edba:	f000 fc81 	bl	801f6c0 <__ieee754_acos>
 801edbe:	4622      	mov	r2, r4
 801edc0:	462b      	mov	r3, r5
 801edc2:	4620      	mov	r0, r4
 801edc4:	4629      	mov	r1, r5
 801edc6:	eeb0 8a40 	vmov.f32	s16, s0
 801edca:	eef0 8a60 	vmov.f32	s17, s1
 801edce:	f7e1 fe85 	bl	8000adc <__aeabi_dcmpun>
 801edd2:	b9a8      	cbnz	r0, 801ee00 <acos+0x50>
 801edd4:	ec45 4b10 	vmov	d0, r4, r5
 801edd8:	f000 f81e 	bl	801ee18 <fabs>
 801eddc:	4b0c      	ldr	r3, [pc, #48]	@ (801ee10 <acos+0x60>)
 801edde:	ec51 0b10 	vmov	r0, r1, d0
 801ede2:	2200      	movs	r2, #0
 801ede4:	f7e1 fe70 	bl	8000ac8 <__aeabi_dcmpgt>
 801ede8:	b150      	cbz	r0, 801ee00 <acos+0x50>
 801edea:	f7fc fc79 	bl	801b6e0 <__errno>
 801edee:	ecbd 8b02 	vpop	{d8}
 801edf2:	2321      	movs	r3, #33	@ 0x21
 801edf4:	6003      	str	r3, [r0, #0]
 801edf6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801edfa:	4806      	ldr	r0, [pc, #24]	@ (801ee14 <acos+0x64>)
 801edfc:	f7fc bcb4 	b.w	801b768 <nan>
 801ee00:	eeb0 0a48 	vmov.f32	s0, s16
 801ee04:	eef0 0a68 	vmov.f32	s1, s17
 801ee08:	ecbd 8b02 	vpop	{d8}
 801ee0c:	bd38      	pop	{r3, r4, r5, pc}
 801ee0e:	bf00      	nop
 801ee10:	3ff00000 	.word	0x3ff00000
 801ee14:	08022646 	.word	0x08022646

0801ee18 <fabs>:
 801ee18:	ec51 0b10 	vmov	r0, r1, d0
 801ee1c:	4602      	mov	r2, r0
 801ee1e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801ee22:	ec43 2b10 	vmov	d0, r2, r3
 801ee26:	4770      	bx	lr

0801ee28 <__ieee754_expf>:
 801ee28:	ee10 2a10 	vmov	r2, s0
 801ee2c:	f022 4300 	bic.w	r3, r2, #2147483648	@ 0x80000000
 801ee30:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 801ee34:	d902      	bls.n	801ee3c <__ieee754_expf+0x14>
 801ee36:	ee30 0a00 	vadd.f32	s0, s0, s0
 801ee3a:	4770      	bx	lr
 801ee3c:	ea4f 71d2 	mov.w	r1, r2, lsr #31
 801ee40:	d106      	bne.n	801ee50 <__ieee754_expf+0x28>
 801ee42:	eddf 7a4e 	vldr	s15, [pc, #312]	@ 801ef7c <__ieee754_expf+0x154>
 801ee46:	2900      	cmp	r1, #0
 801ee48:	bf18      	it	ne
 801ee4a:	eeb0 0a67 	vmovne.f32	s0, s15
 801ee4e:	4770      	bx	lr
 801ee50:	484b      	ldr	r0, [pc, #300]	@ (801ef80 <__ieee754_expf+0x158>)
 801ee52:	4282      	cmp	r2, r0
 801ee54:	dd02      	ble.n	801ee5c <__ieee754_expf+0x34>
 801ee56:	2000      	movs	r0, #0
 801ee58:	f000 b8d4 	b.w	801f004 <__math_oflowf>
 801ee5c:	2a00      	cmp	r2, #0
 801ee5e:	da05      	bge.n	801ee6c <__ieee754_expf+0x44>
 801ee60:	4a48      	ldr	r2, [pc, #288]	@ (801ef84 <__ieee754_expf+0x15c>)
 801ee62:	4293      	cmp	r3, r2
 801ee64:	d902      	bls.n	801ee6c <__ieee754_expf+0x44>
 801ee66:	2000      	movs	r0, #0
 801ee68:	f000 b8c6 	b.w	801eff8 <__math_uflowf>
 801ee6c:	4a46      	ldr	r2, [pc, #280]	@ (801ef88 <__ieee754_expf+0x160>)
 801ee6e:	4293      	cmp	r3, r2
 801ee70:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 801ee74:	d952      	bls.n	801ef1c <__ieee754_expf+0xf4>
 801ee76:	4a45      	ldr	r2, [pc, #276]	@ (801ef8c <__ieee754_expf+0x164>)
 801ee78:	4293      	cmp	r3, r2
 801ee7a:	ea4f 0281 	mov.w	r2, r1, lsl #2
 801ee7e:	d834      	bhi.n	801eeea <__ieee754_expf+0xc2>
 801ee80:	4b43      	ldr	r3, [pc, #268]	@ (801ef90 <__ieee754_expf+0x168>)
 801ee82:	4413      	add	r3, r2
 801ee84:	ed93 7a00 	vldr	s14, [r3]
 801ee88:	4b42      	ldr	r3, [pc, #264]	@ (801ef94 <__ieee754_expf+0x16c>)
 801ee8a:	4413      	add	r3, r2
 801ee8c:	ee30 7a47 	vsub.f32	s14, s0, s14
 801ee90:	f1c1 0201 	rsb	r2, r1, #1
 801ee94:	edd3 7a00 	vldr	s15, [r3]
 801ee98:	1a52      	subs	r2, r2, r1
 801ee9a:	ee37 0a67 	vsub.f32	s0, s14, s15
 801ee9e:	ee20 6a00 	vmul.f32	s12, s0, s0
 801eea2:	ed9f 5a3d 	vldr	s10, [pc, #244]	@ 801ef98 <__ieee754_expf+0x170>
 801eea6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 801ef9c <__ieee754_expf+0x174>
 801eeaa:	eee6 6a05 	vfma.f32	s13, s12, s10
 801eeae:	ed9f 5a3c 	vldr	s10, [pc, #240]	@ 801efa0 <__ieee754_expf+0x178>
 801eeb2:	eea6 5a86 	vfma.f32	s10, s13, s12
 801eeb6:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 801efa4 <__ieee754_expf+0x17c>
 801eeba:	eee5 6a06 	vfma.f32	s13, s10, s12
 801eebe:	ed9f 5a3a 	vldr	s10, [pc, #232]	@ 801efa8 <__ieee754_expf+0x180>
 801eec2:	eea6 5a86 	vfma.f32	s10, s13, s12
 801eec6:	eef0 6a40 	vmov.f32	s13, s0
 801eeca:	eee5 6a46 	vfms.f32	s13, s10, s12
 801eece:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 801eed2:	ee20 5a26 	vmul.f32	s10, s0, s13
 801eed6:	bb92      	cbnz	r2, 801ef3e <__ieee754_expf+0x116>
 801eed8:	ee76 6ac6 	vsub.f32	s13, s13, s12
 801eedc:	eec5 7a26 	vdiv.f32	s15, s10, s13
 801eee0:	ee37 0ac0 	vsub.f32	s0, s15, s0
 801eee4:	ee35 0ac0 	vsub.f32	s0, s11, s0
 801eee8:	4770      	bx	lr
 801eeea:	4b30      	ldr	r3, [pc, #192]	@ (801efac <__ieee754_expf+0x184>)
 801eeec:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 801efb0 <__ieee754_expf+0x188>
 801eef0:	eddf 6a30 	vldr	s13, [pc, #192]	@ 801efb4 <__ieee754_expf+0x18c>
 801eef4:	4413      	add	r3, r2
 801eef6:	edd3 7a00 	vldr	s15, [r3]
 801eefa:	eee0 7a07 	vfma.f32	s15, s0, s14
 801eefe:	eeb0 7a40 	vmov.f32	s14, s0
 801ef02:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801ef06:	ee17 2a90 	vmov	r2, s15
 801ef0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801ef0e:	eea7 7ae6 	vfms.f32	s14, s15, s13
 801ef12:	eddf 6a29 	vldr	s13, [pc, #164]	@ 801efb8 <__ieee754_expf+0x190>
 801ef16:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801ef1a:	e7be      	b.n	801ee9a <__ieee754_expf+0x72>
 801ef1c:	f1b3 5f50 	cmp.w	r3, #872415232	@ 0x34000000
 801ef20:	d20b      	bcs.n	801ef3a <__ieee754_expf+0x112>
 801ef22:	eddf 6a26 	vldr	s13, [pc, #152]	@ 801efbc <__ieee754_expf+0x194>
 801ef26:	ee70 6a26 	vadd.f32	s13, s0, s13
 801ef2a:	eef4 6ae5 	vcmpe.f32	s13, s11
 801ef2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ef32:	dd02      	ble.n	801ef3a <__ieee754_expf+0x112>
 801ef34:	ee30 0a25 	vadd.f32	s0, s0, s11
 801ef38:	4770      	bx	lr
 801ef3a:	2200      	movs	r2, #0
 801ef3c:	e7af      	b.n	801ee9e <__ieee754_expf+0x76>
 801ef3e:	ee36 6a66 	vsub.f32	s12, s12, s13
 801ef42:	f112 0f7d 	cmn.w	r2, #125	@ 0x7d
 801ef46:	eec5 6a06 	vdiv.f32	s13, s10, s12
 801ef4a:	bfb8      	it	lt
 801ef4c:	3264      	addlt	r2, #100	@ 0x64
 801ef4e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801ef52:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801ef56:	ee75 7ae7 	vsub.f32	s15, s11, s15
 801ef5a:	ee17 3a90 	vmov	r3, s15
 801ef5e:	bfab      	itete	ge
 801ef60:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 801ef64:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 801ef68:	ee00 3a10 	vmovge	s0, r3
 801ef6c:	eddf 7a14 	vldrlt	s15, [pc, #80]	@ 801efc0 <__ieee754_expf+0x198>
 801ef70:	bfbc      	itt	lt
 801ef72:	ee00 3a10 	vmovlt	s0, r3
 801ef76:	ee20 0a27 	vmullt.f32	s0, s0, s15
 801ef7a:	4770      	bx	lr
 801ef7c:	00000000 	.word	0x00000000
 801ef80:	42b17217 	.word	0x42b17217
 801ef84:	42cff1b5 	.word	0x42cff1b5
 801ef88:	3eb17218 	.word	0x3eb17218
 801ef8c:	3f851591 	.word	0x3f851591
 801ef90:	08022a1c 	.word	0x08022a1c
 801ef94:	08022a14 	.word	0x08022a14
 801ef98:	3331bb4c 	.word	0x3331bb4c
 801ef9c:	b5ddea0e 	.word	0xb5ddea0e
 801efa0:	388ab355 	.word	0x388ab355
 801efa4:	bb360b61 	.word	0xbb360b61
 801efa8:	3e2aaaab 	.word	0x3e2aaaab
 801efac:	08022a24 	.word	0x08022a24
 801efb0:	3fb8aa3b 	.word	0x3fb8aa3b
 801efb4:	3f317180 	.word	0x3f317180
 801efb8:	3717f7d1 	.word	0x3717f7d1
 801efbc:	7149f2ca 	.word	0x7149f2ca
 801efc0:	0d800000 	.word	0x0d800000

0801efc4 <with_errnof>:
 801efc4:	b510      	push	{r4, lr}
 801efc6:	ed2d 8b02 	vpush	{d8}
 801efca:	eeb0 8a40 	vmov.f32	s16, s0
 801efce:	4604      	mov	r4, r0
 801efd0:	f7fc fb86 	bl	801b6e0 <__errno>
 801efd4:	eeb0 0a48 	vmov.f32	s0, s16
 801efd8:	ecbd 8b02 	vpop	{d8}
 801efdc:	6004      	str	r4, [r0, #0]
 801efde:	bd10      	pop	{r4, pc}

0801efe0 <xflowf>:
 801efe0:	b130      	cbz	r0, 801eff0 <xflowf+0x10>
 801efe2:	eef1 7a40 	vneg.f32	s15, s0
 801efe6:	ee27 0a80 	vmul.f32	s0, s15, s0
 801efea:	2022      	movs	r0, #34	@ 0x22
 801efec:	f7ff bfea 	b.w	801efc4 <with_errnof>
 801eff0:	eef0 7a40 	vmov.f32	s15, s0
 801eff4:	e7f7      	b.n	801efe6 <xflowf+0x6>
	...

0801eff8 <__math_uflowf>:
 801eff8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 801f000 <__math_uflowf+0x8>
 801effc:	f7ff bff0 	b.w	801efe0 <xflowf>
 801f000:	10000000 	.word	0x10000000

0801f004 <__math_oflowf>:
 801f004:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 801f00c <__math_oflowf+0x8>
 801f008:	f7ff bfea 	b.w	801efe0 <xflowf>
 801f00c:	70000000 	.word	0x70000000

0801f010 <__kernel_rem_pio2>:
 801f010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f014:	ed2d 8b02 	vpush	{d8}
 801f018:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 801f01c:	f112 0f14 	cmn.w	r2, #20
 801f020:	9306      	str	r3, [sp, #24]
 801f022:	9104      	str	r1, [sp, #16]
 801f024:	4bbe      	ldr	r3, [pc, #760]	@ (801f320 <__kernel_rem_pio2+0x310>)
 801f026:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 801f028:	9008      	str	r0, [sp, #32]
 801f02a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801f02e:	9300      	str	r3, [sp, #0]
 801f030:	9b06      	ldr	r3, [sp, #24]
 801f032:	f103 33ff 	add.w	r3, r3, #4294967295
 801f036:	bfa8      	it	ge
 801f038:	1ed4      	subge	r4, r2, #3
 801f03a:	9305      	str	r3, [sp, #20]
 801f03c:	bfb2      	itee	lt
 801f03e:	2400      	movlt	r4, #0
 801f040:	2318      	movge	r3, #24
 801f042:	fb94 f4f3 	sdivge	r4, r4, r3
 801f046:	f06f 0317 	mvn.w	r3, #23
 801f04a:	fb04 3303 	mla	r3, r4, r3, r3
 801f04e:	eb03 0b02 	add.w	fp, r3, r2
 801f052:	9b00      	ldr	r3, [sp, #0]
 801f054:	9a05      	ldr	r2, [sp, #20]
 801f056:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 801f310 <__kernel_rem_pio2+0x300>
 801f05a:	eb03 0802 	add.w	r8, r3, r2
 801f05e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 801f060:	1aa7      	subs	r7, r4, r2
 801f062:	ae20      	add	r6, sp, #128	@ 0x80
 801f064:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 801f068:	2500      	movs	r5, #0
 801f06a:	4545      	cmp	r5, r8
 801f06c:	dd13      	ble.n	801f096 <__kernel_rem_pio2+0x86>
 801f06e:	9b06      	ldr	r3, [sp, #24]
 801f070:	aa20      	add	r2, sp, #128	@ 0x80
 801f072:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 801f076:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 801f07a:	f04f 0800 	mov.w	r8, #0
 801f07e:	9b00      	ldr	r3, [sp, #0]
 801f080:	4598      	cmp	r8, r3
 801f082:	dc31      	bgt.n	801f0e8 <__kernel_rem_pio2+0xd8>
 801f084:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 801f310 <__kernel_rem_pio2+0x300>
 801f088:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801f08c:	ed8d 7b02 	vstr	d7, [sp, #8]
 801f090:	462f      	mov	r7, r5
 801f092:	2600      	movs	r6, #0
 801f094:	e01b      	b.n	801f0ce <__kernel_rem_pio2+0xbe>
 801f096:	42ef      	cmn	r7, r5
 801f098:	d407      	bmi.n	801f0aa <__kernel_rem_pio2+0x9a>
 801f09a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 801f09e:	f7e1 fa19 	bl	80004d4 <__aeabi_i2d>
 801f0a2:	e8e6 0102 	strd	r0, r1, [r6], #8
 801f0a6:	3501      	adds	r5, #1
 801f0a8:	e7df      	b.n	801f06a <__kernel_rem_pio2+0x5a>
 801f0aa:	ec51 0b18 	vmov	r0, r1, d8
 801f0ae:	e7f8      	b.n	801f0a2 <__kernel_rem_pio2+0x92>
 801f0b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 801f0b4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 801f0b8:	f7e1 fa76 	bl	80005a8 <__aeabi_dmul>
 801f0bc:	4602      	mov	r2, r0
 801f0be:	460b      	mov	r3, r1
 801f0c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f0c4:	f7e1 f8ba 	bl	800023c <__adddf3>
 801f0c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801f0cc:	3601      	adds	r6, #1
 801f0ce:	9b05      	ldr	r3, [sp, #20]
 801f0d0:	429e      	cmp	r6, r3
 801f0d2:	f1a7 0708 	sub.w	r7, r7, #8
 801f0d6:	ddeb      	ble.n	801f0b0 <__kernel_rem_pio2+0xa0>
 801f0d8:	ed9d 7b02 	vldr	d7, [sp, #8]
 801f0dc:	f108 0801 	add.w	r8, r8, #1
 801f0e0:	ecaa 7b02 	vstmia	sl!, {d7}
 801f0e4:	3508      	adds	r5, #8
 801f0e6:	e7ca      	b.n	801f07e <__kernel_rem_pio2+0x6e>
 801f0e8:	9b00      	ldr	r3, [sp, #0]
 801f0ea:	f8dd 8000 	ldr.w	r8, [sp]
 801f0ee:	aa0c      	add	r2, sp, #48	@ 0x30
 801f0f0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801f0f4:	930a      	str	r3, [sp, #40]	@ 0x28
 801f0f6:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 801f0f8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801f0fc:	9309      	str	r3, [sp, #36]	@ 0x24
 801f0fe:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 801f102:	930b      	str	r3, [sp, #44]	@ 0x2c
 801f104:	ab98      	add	r3, sp, #608	@ 0x260
 801f106:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801f10a:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 801f10e:	ed8d 7b02 	vstr	d7, [sp, #8]
 801f112:	ac0c      	add	r4, sp, #48	@ 0x30
 801f114:	ab70      	add	r3, sp, #448	@ 0x1c0
 801f116:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 801f11a:	46a1      	mov	r9, r4
 801f11c:	46c2      	mov	sl, r8
 801f11e:	f1ba 0f00 	cmp.w	sl, #0
 801f122:	f1a5 0508 	sub.w	r5, r5, #8
 801f126:	dc77      	bgt.n	801f218 <__kernel_rem_pio2+0x208>
 801f128:	4658      	mov	r0, fp
 801f12a:	ed9d 0b02 	vldr	d0, [sp, #8]
 801f12e:	f000 fd23 	bl	801fb78 <scalbn>
 801f132:	ec57 6b10 	vmov	r6, r7, d0
 801f136:	2200      	movs	r2, #0
 801f138:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 801f13c:	4630      	mov	r0, r6
 801f13e:	4639      	mov	r1, r7
 801f140:	f7e1 fa32 	bl	80005a8 <__aeabi_dmul>
 801f144:	ec41 0b10 	vmov	d0, r0, r1
 801f148:	f7ff f87e 	bl	801e248 <floor>
 801f14c:	4b75      	ldr	r3, [pc, #468]	@ (801f324 <__kernel_rem_pio2+0x314>)
 801f14e:	ec51 0b10 	vmov	r0, r1, d0
 801f152:	2200      	movs	r2, #0
 801f154:	f7e1 fa28 	bl	80005a8 <__aeabi_dmul>
 801f158:	4602      	mov	r2, r0
 801f15a:	460b      	mov	r3, r1
 801f15c:	4630      	mov	r0, r6
 801f15e:	4639      	mov	r1, r7
 801f160:	f7e1 f86a 	bl	8000238 <__aeabi_dsub>
 801f164:	460f      	mov	r7, r1
 801f166:	4606      	mov	r6, r0
 801f168:	f7e1 fcce 	bl	8000b08 <__aeabi_d2iz>
 801f16c:	9002      	str	r0, [sp, #8]
 801f16e:	f7e1 f9b1 	bl	80004d4 <__aeabi_i2d>
 801f172:	4602      	mov	r2, r0
 801f174:	460b      	mov	r3, r1
 801f176:	4630      	mov	r0, r6
 801f178:	4639      	mov	r1, r7
 801f17a:	f7e1 f85d 	bl	8000238 <__aeabi_dsub>
 801f17e:	f1bb 0f00 	cmp.w	fp, #0
 801f182:	4606      	mov	r6, r0
 801f184:	460f      	mov	r7, r1
 801f186:	dd6c      	ble.n	801f262 <__kernel_rem_pio2+0x252>
 801f188:	f108 31ff 	add.w	r1, r8, #4294967295
 801f18c:	ab0c      	add	r3, sp, #48	@ 0x30
 801f18e:	9d02      	ldr	r5, [sp, #8]
 801f190:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801f194:	f1cb 0018 	rsb	r0, fp, #24
 801f198:	fa43 f200 	asr.w	r2, r3, r0
 801f19c:	4415      	add	r5, r2
 801f19e:	4082      	lsls	r2, r0
 801f1a0:	1a9b      	subs	r3, r3, r2
 801f1a2:	aa0c      	add	r2, sp, #48	@ 0x30
 801f1a4:	9502      	str	r5, [sp, #8]
 801f1a6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801f1aa:	f1cb 0217 	rsb	r2, fp, #23
 801f1ae:	fa43 f902 	asr.w	r9, r3, r2
 801f1b2:	f1b9 0f00 	cmp.w	r9, #0
 801f1b6:	dd64      	ble.n	801f282 <__kernel_rem_pio2+0x272>
 801f1b8:	9b02      	ldr	r3, [sp, #8]
 801f1ba:	2200      	movs	r2, #0
 801f1bc:	3301      	adds	r3, #1
 801f1be:	9302      	str	r3, [sp, #8]
 801f1c0:	4615      	mov	r5, r2
 801f1c2:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 801f1c6:	4590      	cmp	r8, r2
 801f1c8:	f300 80b8 	bgt.w	801f33c <__kernel_rem_pio2+0x32c>
 801f1cc:	f1bb 0f00 	cmp.w	fp, #0
 801f1d0:	dd07      	ble.n	801f1e2 <__kernel_rem_pio2+0x1d2>
 801f1d2:	f1bb 0f01 	cmp.w	fp, #1
 801f1d6:	f000 80bf 	beq.w	801f358 <__kernel_rem_pio2+0x348>
 801f1da:	f1bb 0f02 	cmp.w	fp, #2
 801f1de:	f000 80c6 	beq.w	801f36e <__kernel_rem_pio2+0x35e>
 801f1e2:	f1b9 0f02 	cmp.w	r9, #2
 801f1e6:	d14c      	bne.n	801f282 <__kernel_rem_pio2+0x272>
 801f1e8:	4632      	mov	r2, r6
 801f1ea:	463b      	mov	r3, r7
 801f1ec:	494e      	ldr	r1, [pc, #312]	@ (801f328 <__kernel_rem_pio2+0x318>)
 801f1ee:	2000      	movs	r0, #0
 801f1f0:	f7e1 f822 	bl	8000238 <__aeabi_dsub>
 801f1f4:	4606      	mov	r6, r0
 801f1f6:	460f      	mov	r7, r1
 801f1f8:	2d00      	cmp	r5, #0
 801f1fa:	d042      	beq.n	801f282 <__kernel_rem_pio2+0x272>
 801f1fc:	4658      	mov	r0, fp
 801f1fe:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 801f318 <__kernel_rem_pio2+0x308>
 801f202:	f000 fcb9 	bl	801fb78 <scalbn>
 801f206:	4630      	mov	r0, r6
 801f208:	4639      	mov	r1, r7
 801f20a:	ec53 2b10 	vmov	r2, r3, d0
 801f20e:	f7e1 f813 	bl	8000238 <__aeabi_dsub>
 801f212:	4606      	mov	r6, r0
 801f214:	460f      	mov	r7, r1
 801f216:	e034      	b.n	801f282 <__kernel_rem_pio2+0x272>
 801f218:	4b44      	ldr	r3, [pc, #272]	@ (801f32c <__kernel_rem_pio2+0x31c>)
 801f21a:	2200      	movs	r2, #0
 801f21c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f220:	f7e1 f9c2 	bl	80005a8 <__aeabi_dmul>
 801f224:	f7e1 fc70 	bl	8000b08 <__aeabi_d2iz>
 801f228:	f7e1 f954 	bl	80004d4 <__aeabi_i2d>
 801f22c:	4b40      	ldr	r3, [pc, #256]	@ (801f330 <__kernel_rem_pio2+0x320>)
 801f22e:	2200      	movs	r2, #0
 801f230:	4606      	mov	r6, r0
 801f232:	460f      	mov	r7, r1
 801f234:	f7e1 f9b8 	bl	80005a8 <__aeabi_dmul>
 801f238:	4602      	mov	r2, r0
 801f23a:	460b      	mov	r3, r1
 801f23c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f240:	f7e0 fffa 	bl	8000238 <__aeabi_dsub>
 801f244:	f7e1 fc60 	bl	8000b08 <__aeabi_d2iz>
 801f248:	e9d5 2300 	ldrd	r2, r3, [r5]
 801f24c:	f849 0b04 	str.w	r0, [r9], #4
 801f250:	4639      	mov	r1, r7
 801f252:	4630      	mov	r0, r6
 801f254:	f7e0 fff2 	bl	800023c <__adddf3>
 801f258:	f10a 3aff 	add.w	sl, sl, #4294967295
 801f25c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801f260:	e75d      	b.n	801f11e <__kernel_rem_pio2+0x10e>
 801f262:	d107      	bne.n	801f274 <__kernel_rem_pio2+0x264>
 801f264:	f108 33ff 	add.w	r3, r8, #4294967295
 801f268:	aa0c      	add	r2, sp, #48	@ 0x30
 801f26a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801f26e:	ea4f 59e3 	mov.w	r9, r3, asr #23
 801f272:	e79e      	b.n	801f1b2 <__kernel_rem_pio2+0x1a2>
 801f274:	4b2f      	ldr	r3, [pc, #188]	@ (801f334 <__kernel_rem_pio2+0x324>)
 801f276:	2200      	movs	r2, #0
 801f278:	f7e1 fc1c 	bl	8000ab4 <__aeabi_dcmpge>
 801f27c:	2800      	cmp	r0, #0
 801f27e:	d143      	bne.n	801f308 <__kernel_rem_pio2+0x2f8>
 801f280:	4681      	mov	r9, r0
 801f282:	2200      	movs	r2, #0
 801f284:	2300      	movs	r3, #0
 801f286:	4630      	mov	r0, r6
 801f288:	4639      	mov	r1, r7
 801f28a:	f7e1 fbf5 	bl	8000a78 <__aeabi_dcmpeq>
 801f28e:	2800      	cmp	r0, #0
 801f290:	f000 80bf 	beq.w	801f412 <__kernel_rem_pio2+0x402>
 801f294:	f108 33ff 	add.w	r3, r8, #4294967295
 801f298:	2200      	movs	r2, #0
 801f29a:	9900      	ldr	r1, [sp, #0]
 801f29c:	428b      	cmp	r3, r1
 801f29e:	da6e      	bge.n	801f37e <__kernel_rem_pio2+0x36e>
 801f2a0:	2a00      	cmp	r2, #0
 801f2a2:	f000 8089 	beq.w	801f3b8 <__kernel_rem_pio2+0x3a8>
 801f2a6:	f108 38ff 	add.w	r8, r8, #4294967295
 801f2aa:	ab0c      	add	r3, sp, #48	@ 0x30
 801f2ac:	f1ab 0b18 	sub.w	fp, fp, #24
 801f2b0:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 801f2b4:	2b00      	cmp	r3, #0
 801f2b6:	d0f6      	beq.n	801f2a6 <__kernel_rem_pio2+0x296>
 801f2b8:	4658      	mov	r0, fp
 801f2ba:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 801f318 <__kernel_rem_pio2+0x308>
 801f2be:	f000 fc5b 	bl	801fb78 <scalbn>
 801f2c2:	f108 0301 	add.w	r3, r8, #1
 801f2c6:	00da      	lsls	r2, r3, #3
 801f2c8:	9205      	str	r2, [sp, #20]
 801f2ca:	ec55 4b10 	vmov	r4, r5, d0
 801f2ce:	aa70      	add	r2, sp, #448	@ 0x1c0
 801f2d0:	f8df b058 	ldr.w	fp, [pc, #88]	@ 801f32c <__kernel_rem_pio2+0x31c>
 801f2d4:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 801f2d8:	4646      	mov	r6, r8
 801f2da:	f04f 0a00 	mov.w	sl, #0
 801f2de:	2e00      	cmp	r6, #0
 801f2e0:	f280 80cf 	bge.w	801f482 <__kernel_rem_pio2+0x472>
 801f2e4:	4644      	mov	r4, r8
 801f2e6:	2c00      	cmp	r4, #0
 801f2e8:	f2c0 80fd 	blt.w	801f4e6 <__kernel_rem_pio2+0x4d6>
 801f2ec:	4b12      	ldr	r3, [pc, #72]	@ (801f338 <__kernel_rem_pio2+0x328>)
 801f2ee:	461f      	mov	r7, r3
 801f2f0:	ab70      	add	r3, sp, #448	@ 0x1c0
 801f2f2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801f2f6:	9306      	str	r3, [sp, #24]
 801f2f8:	f04f 0a00 	mov.w	sl, #0
 801f2fc:	f04f 0b00 	mov.w	fp, #0
 801f300:	2600      	movs	r6, #0
 801f302:	eba8 0504 	sub.w	r5, r8, r4
 801f306:	e0e2      	b.n	801f4ce <__kernel_rem_pio2+0x4be>
 801f308:	f04f 0902 	mov.w	r9, #2
 801f30c:	e754      	b.n	801f1b8 <__kernel_rem_pio2+0x1a8>
 801f30e:	bf00      	nop
	...
 801f31c:	3ff00000 	.word	0x3ff00000
 801f320:	08022a70 	.word	0x08022a70
 801f324:	40200000 	.word	0x40200000
 801f328:	3ff00000 	.word	0x3ff00000
 801f32c:	3e700000 	.word	0x3e700000
 801f330:	41700000 	.word	0x41700000
 801f334:	3fe00000 	.word	0x3fe00000
 801f338:	08022a30 	.word	0x08022a30
 801f33c:	f854 3b04 	ldr.w	r3, [r4], #4
 801f340:	b945      	cbnz	r5, 801f354 <__kernel_rem_pio2+0x344>
 801f342:	b123      	cbz	r3, 801f34e <__kernel_rem_pio2+0x33e>
 801f344:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 801f348:	f844 3c04 	str.w	r3, [r4, #-4]
 801f34c:	2301      	movs	r3, #1
 801f34e:	3201      	adds	r2, #1
 801f350:	461d      	mov	r5, r3
 801f352:	e738      	b.n	801f1c6 <__kernel_rem_pio2+0x1b6>
 801f354:	1acb      	subs	r3, r1, r3
 801f356:	e7f7      	b.n	801f348 <__kernel_rem_pio2+0x338>
 801f358:	f108 32ff 	add.w	r2, r8, #4294967295
 801f35c:	ab0c      	add	r3, sp, #48	@ 0x30
 801f35e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801f362:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801f366:	a90c      	add	r1, sp, #48	@ 0x30
 801f368:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 801f36c:	e739      	b.n	801f1e2 <__kernel_rem_pio2+0x1d2>
 801f36e:	f108 32ff 	add.w	r2, r8, #4294967295
 801f372:	ab0c      	add	r3, sp, #48	@ 0x30
 801f374:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801f378:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801f37c:	e7f3      	b.n	801f366 <__kernel_rem_pio2+0x356>
 801f37e:	a90c      	add	r1, sp, #48	@ 0x30
 801f380:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 801f384:	3b01      	subs	r3, #1
 801f386:	430a      	orrs	r2, r1
 801f388:	e787      	b.n	801f29a <__kernel_rem_pio2+0x28a>
 801f38a:	3401      	adds	r4, #1
 801f38c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 801f390:	2a00      	cmp	r2, #0
 801f392:	d0fa      	beq.n	801f38a <__kernel_rem_pio2+0x37a>
 801f394:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801f396:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 801f39a:	eb0d 0503 	add.w	r5, sp, r3
 801f39e:	9b06      	ldr	r3, [sp, #24]
 801f3a0:	aa20      	add	r2, sp, #128	@ 0x80
 801f3a2:	4443      	add	r3, r8
 801f3a4:	f108 0701 	add.w	r7, r8, #1
 801f3a8:	3d98      	subs	r5, #152	@ 0x98
 801f3aa:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 801f3ae:	4444      	add	r4, r8
 801f3b0:	42bc      	cmp	r4, r7
 801f3b2:	da04      	bge.n	801f3be <__kernel_rem_pio2+0x3ae>
 801f3b4:	46a0      	mov	r8, r4
 801f3b6:	e6a2      	b.n	801f0fe <__kernel_rem_pio2+0xee>
 801f3b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801f3ba:	2401      	movs	r4, #1
 801f3bc:	e7e6      	b.n	801f38c <__kernel_rem_pio2+0x37c>
 801f3be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f3c0:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 801f3c4:	f7e1 f886 	bl	80004d4 <__aeabi_i2d>
 801f3c8:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 801f690 <__kernel_rem_pio2+0x680>
 801f3cc:	e8e6 0102 	strd	r0, r1, [r6], #8
 801f3d0:	ed8d 7b02 	vstr	d7, [sp, #8]
 801f3d4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801f3d8:	46b2      	mov	sl, r6
 801f3da:	f04f 0800 	mov.w	r8, #0
 801f3de:	9b05      	ldr	r3, [sp, #20]
 801f3e0:	4598      	cmp	r8, r3
 801f3e2:	dd05      	ble.n	801f3f0 <__kernel_rem_pio2+0x3e0>
 801f3e4:	ed9d 7b02 	vldr	d7, [sp, #8]
 801f3e8:	3701      	adds	r7, #1
 801f3ea:	eca5 7b02 	vstmia	r5!, {d7}
 801f3ee:	e7df      	b.n	801f3b0 <__kernel_rem_pio2+0x3a0>
 801f3f0:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 801f3f4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 801f3f8:	f7e1 f8d6 	bl	80005a8 <__aeabi_dmul>
 801f3fc:	4602      	mov	r2, r0
 801f3fe:	460b      	mov	r3, r1
 801f400:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f404:	f7e0 ff1a 	bl	800023c <__adddf3>
 801f408:	f108 0801 	add.w	r8, r8, #1
 801f40c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801f410:	e7e5      	b.n	801f3de <__kernel_rem_pio2+0x3ce>
 801f412:	f1cb 0000 	rsb	r0, fp, #0
 801f416:	ec47 6b10 	vmov	d0, r6, r7
 801f41a:	f000 fbad 	bl	801fb78 <scalbn>
 801f41e:	ec55 4b10 	vmov	r4, r5, d0
 801f422:	4b9d      	ldr	r3, [pc, #628]	@ (801f698 <__kernel_rem_pio2+0x688>)
 801f424:	2200      	movs	r2, #0
 801f426:	4620      	mov	r0, r4
 801f428:	4629      	mov	r1, r5
 801f42a:	f7e1 fb43 	bl	8000ab4 <__aeabi_dcmpge>
 801f42e:	b300      	cbz	r0, 801f472 <__kernel_rem_pio2+0x462>
 801f430:	4b9a      	ldr	r3, [pc, #616]	@ (801f69c <__kernel_rem_pio2+0x68c>)
 801f432:	2200      	movs	r2, #0
 801f434:	4620      	mov	r0, r4
 801f436:	4629      	mov	r1, r5
 801f438:	f7e1 f8b6 	bl	80005a8 <__aeabi_dmul>
 801f43c:	f7e1 fb64 	bl	8000b08 <__aeabi_d2iz>
 801f440:	4606      	mov	r6, r0
 801f442:	f7e1 f847 	bl	80004d4 <__aeabi_i2d>
 801f446:	4b94      	ldr	r3, [pc, #592]	@ (801f698 <__kernel_rem_pio2+0x688>)
 801f448:	2200      	movs	r2, #0
 801f44a:	f7e1 f8ad 	bl	80005a8 <__aeabi_dmul>
 801f44e:	460b      	mov	r3, r1
 801f450:	4602      	mov	r2, r0
 801f452:	4629      	mov	r1, r5
 801f454:	4620      	mov	r0, r4
 801f456:	f7e0 feef 	bl	8000238 <__aeabi_dsub>
 801f45a:	f7e1 fb55 	bl	8000b08 <__aeabi_d2iz>
 801f45e:	ab0c      	add	r3, sp, #48	@ 0x30
 801f460:	f10b 0b18 	add.w	fp, fp, #24
 801f464:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 801f468:	f108 0801 	add.w	r8, r8, #1
 801f46c:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 801f470:	e722      	b.n	801f2b8 <__kernel_rem_pio2+0x2a8>
 801f472:	4620      	mov	r0, r4
 801f474:	4629      	mov	r1, r5
 801f476:	f7e1 fb47 	bl	8000b08 <__aeabi_d2iz>
 801f47a:	ab0c      	add	r3, sp, #48	@ 0x30
 801f47c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 801f480:	e71a      	b.n	801f2b8 <__kernel_rem_pio2+0x2a8>
 801f482:	ab0c      	add	r3, sp, #48	@ 0x30
 801f484:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 801f488:	f7e1 f824 	bl	80004d4 <__aeabi_i2d>
 801f48c:	4622      	mov	r2, r4
 801f48e:	462b      	mov	r3, r5
 801f490:	f7e1 f88a 	bl	80005a8 <__aeabi_dmul>
 801f494:	4652      	mov	r2, sl
 801f496:	e967 0102 	strd	r0, r1, [r7, #-8]!
 801f49a:	465b      	mov	r3, fp
 801f49c:	4620      	mov	r0, r4
 801f49e:	4629      	mov	r1, r5
 801f4a0:	f7e1 f882 	bl	80005a8 <__aeabi_dmul>
 801f4a4:	3e01      	subs	r6, #1
 801f4a6:	4604      	mov	r4, r0
 801f4a8:	460d      	mov	r5, r1
 801f4aa:	e718      	b.n	801f2de <__kernel_rem_pio2+0x2ce>
 801f4ac:	9906      	ldr	r1, [sp, #24]
 801f4ae:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 801f4b2:	9106      	str	r1, [sp, #24]
 801f4b4:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 801f4b8:	f7e1 f876 	bl	80005a8 <__aeabi_dmul>
 801f4bc:	4602      	mov	r2, r0
 801f4be:	460b      	mov	r3, r1
 801f4c0:	4650      	mov	r0, sl
 801f4c2:	4659      	mov	r1, fp
 801f4c4:	f7e0 feba 	bl	800023c <__adddf3>
 801f4c8:	3601      	adds	r6, #1
 801f4ca:	4682      	mov	sl, r0
 801f4cc:	468b      	mov	fp, r1
 801f4ce:	9b00      	ldr	r3, [sp, #0]
 801f4d0:	429e      	cmp	r6, r3
 801f4d2:	dc01      	bgt.n	801f4d8 <__kernel_rem_pio2+0x4c8>
 801f4d4:	42b5      	cmp	r5, r6
 801f4d6:	dae9      	bge.n	801f4ac <__kernel_rem_pio2+0x49c>
 801f4d8:	ab48      	add	r3, sp, #288	@ 0x120
 801f4da:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 801f4de:	e9c5 ab00 	strd	sl, fp, [r5]
 801f4e2:	3c01      	subs	r4, #1
 801f4e4:	e6ff      	b.n	801f2e6 <__kernel_rem_pio2+0x2d6>
 801f4e6:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 801f4e8:	2b02      	cmp	r3, #2
 801f4ea:	dc0b      	bgt.n	801f504 <__kernel_rem_pio2+0x4f4>
 801f4ec:	2b00      	cmp	r3, #0
 801f4ee:	dc39      	bgt.n	801f564 <__kernel_rem_pio2+0x554>
 801f4f0:	d05d      	beq.n	801f5ae <__kernel_rem_pio2+0x59e>
 801f4f2:	9b02      	ldr	r3, [sp, #8]
 801f4f4:	f003 0007 	and.w	r0, r3, #7
 801f4f8:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 801f4fc:	ecbd 8b02 	vpop	{d8}
 801f500:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f504:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 801f506:	2b03      	cmp	r3, #3
 801f508:	d1f3      	bne.n	801f4f2 <__kernel_rem_pio2+0x4e2>
 801f50a:	9b05      	ldr	r3, [sp, #20]
 801f50c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 801f510:	eb0d 0403 	add.w	r4, sp, r3
 801f514:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 801f518:	4625      	mov	r5, r4
 801f51a:	46c2      	mov	sl, r8
 801f51c:	f1ba 0f00 	cmp.w	sl, #0
 801f520:	f1a5 0508 	sub.w	r5, r5, #8
 801f524:	dc6b      	bgt.n	801f5fe <__kernel_rem_pio2+0x5ee>
 801f526:	4645      	mov	r5, r8
 801f528:	2d01      	cmp	r5, #1
 801f52a:	f1a4 0408 	sub.w	r4, r4, #8
 801f52e:	f300 8087 	bgt.w	801f640 <__kernel_rem_pio2+0x630>
 801f532:	9c05      	ldr	r4, [sp, #20]
 801f534:	ab48      	add	r3, sp, #288	@ 0x120
 801f536:	441c      	add	r4, r3
 801f538:	2000      	movs	r0, #0
 801f53a:	2100      	movs	r1, #0
 801f53c:	f1b8 0f01 	cmp.w	r8, #1
 801f540:	f300 809c 	bgt.w	801f67c <__kernel_rem_pio2+0x66c>
 801f544:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 801f548:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 801f54c:	f1b9 0f00 	cmp.w	r9, #0
 801f550:	f040 80a6 	bne.w	801f6a0 <__kernel_rem_pio2+0x690>
 801f554:	9b04      	ldr	r3, [sp, #16]
 801f556:	e9c3 7800 	strd	r7, r8, [r3]
 801f55a:	e9c3 5602 	strd	r5, r6, [r3, #8]
 801f55e:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801f562:	e7c6      	b.n	801f4f2 <__kernel_rem_pio2+0x4e2>
 801f564:	9d05      	ldr	r5, [sp, #20]
 801f566:	ab48      	add	r3, sp, #288	@ 0x120
 801f568:	441d      	add	r5, r3
 801f56a:	4644      	mov	r4, r8
 801f56c:	2000      	movs	r0, #0
 801f56e:	2100      	movs	r1, #0
 801f570:	2c00      	cmp	r4, #0
 801f572:	da35      	bge.n	801f5e0 <__kernel_rem_pio2+0x5d0>
 801f574:	f1b9 0f00 	cmp.w	r9, #0
 801f578:	d038      	beq.n	801f5ec <__kernel_rem_pio2+0x5dc>
 801f57a:	4602      	mov	r2, r0
 801f57c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801f580:	9c04      	ldr	r4, [sp, #16]
 801f582:	e9c4 2300 	strd	r2, r3, [r4]
 801f586:	4602      	mov	r2, r0
 801f588:	460b      	mov	r3, r1
 801f58a:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 801f58e:	f7e0 fe53 	bl	8000238 <__aeabi_dsub>
 801f592:	ad4a      	add	r5, sp, #296	@ 0x128
 801f594:	2401      	movs	r4, #1
 801f596:	45a0      	cmp	r8, r4
 801f598:	da2b      	bge.n	801f5f2 <__kernel_rem_pio2+0x5e2>
 801f59a:	f1b9 0f00 	cmp.w	r9, #0
 801f59e:	d002      	beq.n	801f5a6 <__kernel_rem_pio2+0x596>
 801f5a0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801f5a4:	4619      	mov	r1, r3
 801f5a6:	9b04      	ldr	r3, [sp, #16]
 801f5a8:	e9c3 0102 	strd	r0, r1, [r3, #8]
 801f5ac:	e7a1      	b.n	801f4f2 <__kernel_rem_pio2+0x4e2>
 801f5ae:	9c05      	ldr	r4, [sp, #20]
 801f5b0:	ab48      	add	r3, sp, #288	@ 0x120
 801f5b2:	441c      	add	r4, r3
 801f5b4:	2000      	movs	r0, #0
 801f5b6:	2100      	movs	r1, #0
 801f5b8:	f1b8 0f00 	cmp.w	r8, #0
 801f5bc:	da09      	bge.n	801f5d2 <__kernel_rem_pio2+0x5c2>
 801f5be:	f1b9 0f00 	cmp.w	r9, #0
 801f5c2:	d002      	beq.n	801f5ca <__kernel_rem_pio2+0x5ba>
 801f5c4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801f5c8:	4619      	mov	r1, r3
 801f5ca:	9b04      	ldr	r3, [sp, #16]
 801f5cc:	e9c3 0100 	strd	r0, r1, [r3]
 801f5d0:	e78f      	b.n	801f4f2 <__kernel_rem_pio2+0x4e2>
 801f5d2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801f5d6:	f7e0 fe31 	bl	800023c <__adddf3>
 801f5da:	f108 38ff 	add.w	r8, r8, #4294967295
 801f5de:	e7eb      	b.n	801f5b8 <__kernel_rem_pio2+0x5a8>
 801f5e0:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 801f5e4:	f7e0 fe2a 	bl	800023c <__adddf3>
 801f5e8:	3c01      	subs	r4, #1
 801f5ea:	e7c1      	b.n	801f570 <__kernel_rem_pio2+0x560>
 801f5ec:	4602      	mov	r2, r0
 801f5ee:	460b      	mov	r3, r1
 801f5f0:	e7c6      	b.n	801f580 <__kernel_rem_pio2+0x570>
 801f5f2:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 801f5f6:	f7e0 fe21 	bl	800023c <__adddf3>
 801f5fa:	3401      	adds	r4, #1
 801f5fc:	e7cb      	b.n	801f596 <__kernel_rem_pio2+0x586>
 801f5fe:	ed95 7b00 	vldr	d7, [r5]
 801f602:	ed8d 7b00 	vstr	d7, [sp]
 801f606:	ed95 7b02 	vldr	d7, [r5, #8]
 801f60a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801f60e:	ec53 2b17 	vmov	r2, r3, d7
 801f612:	ed8d 7b06 	vstr	d7, [sp, #24]
 801f616:	f7e0 fe11 	bl	800023c <__adddf3>
 801f61a:	4602      	mov	r2, r0
 801f61c:	460b      	mov	r3, r1
 801f61e:	4606      	mov	r6, r0
 801f620:	460f      	mov	r7, r1
 801f622:	e9dd 0100 	ldrd	r0, r1, [sp]
 801f626:	f7e0 fe07 	bl	8000238 <__aeabi_dsub>
 801f62a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801f62e:	f7e0 fe05 	bl	800023c <__adddf3>
 801f632:	f10a 3aff 	add.w	sl, sl, #4294967295
 801f636:	e9c5 0102 	strd	r0, r1, [r5, #8]
 801f63a:	e9c5 6700 	strd	r6, r7, [r5]
 801f63e:	e76d      	b.n	801f51c <__kernel_rem_pio2+0x50c>
 801f640:	ed94 7b00 	vldr	d7, [r4]
 801f644:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 801f648:	ec51 0b17 	vmov	r0, r1, d7
 801f64c:	4652      	mov	r2, sl
 801f64e:	465b      	mov	r3, fp
 801f650:	ed8d 7b00 	vstr	d7, [sp]
 801f654:	f7e0 fdf2 	bl	800023c <__adddf3>
 801f658:	4602      	mov	r2, r0
 801f65a:	460b      	mov	r3, r1
 801f65c:	4606      	mov	r6, r0
 801f65e:	460f      	mov	r7, r1
 801f660:	e9dd 0100 	ldrd	r0, r1, [sp]
 801f664:	f7e0 fde8 	bl	8000238 <__aeabi_dsub>
 801f668:	4652      	mov	r2, sl
 801f66a:	465b      	mov	r3, fp
 801f66c:	f7e0 fde6 	bl	800023c <__adddf3>
 801f670:	3d01      	subs	r5, #1
 801f672:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801f676:	e9c4 6700 	strd	r6, r7, [r4]
 801f67a:	e755      	b.n	801f528 <__kernel_rem_pio2+0x518>
 801f67c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801f680:	f7e0 fddc 	bl	800023c <__adddf3>
 801f684:	f108 38ff 	add.w	r8, r8, #4294967295
 801f688:	e758      	b.n	801f53c <__kernel_rem_pio2+0x52c>
 801f68a:	bf00      	nop
 801f68c:	f3af 8000 	nop.w
	...
 801f698:	41700000 	.word	0x41700000
 801f69c:	3e700000 	.word	0x3e700000
 801f6a0:	9b04      	ldr	r3, [sp, #16]
 801f6a2:	9a04      	ldr	r2, [sp, #16]
 801f6a4:	601f      	str	r7, [r3, #0]
 801f6a6:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 801f6aa:	605c      	str	r4, [r3, #4]
 801f6ac:	609d      	str	r5, [r3, #8]
 801f6ae:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 801f6b2:	60d3      	str	r3, [r2, #12]
 801f6b4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801f6b8:	6110      	str	r0, [r2, #16]
 801f6ba:	6153      	str	r3, [r2, #20]
 801f6bc:	e719      	b.n	801f4f2 <__kernel_rem_pio2+0x4e2>
 801f6be:	bf00      	nop

0801f6c0 <__ieee754_acos>:
 801f6c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f6c4:	ec55 4b10 	vmov	r4, r5, d0
 801f6c8:	49b7      	ldr	r1, [pc, #732]	@ (801f9a8 <__ieee754_acos+0x2e8>)
 801f6ca:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 801f6ce:	428b      	cmp	r3, r1
 801f6d0:	d919      	bls.n	801f706 <__ieee754_acos+0x46>
 801f6d2:	f103 4340 	add.w	r3, r3, #3221225472	@ 0xc0000000
 801f6d6:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 801f6da:	4323      	orrs	r3, r4
 801f6dc:	d106      	bne.n	801f6ec <__ieee754_acos+0x2c>
 801f6de:	2d00      	cmp	r5, #0
 801f6e0:	f340 8210 	ble.w	801fb04 <__ieee754_acos+0x444>
 801f6e4:	ed9f 0b94 	vldr	d0, [pc, #592]	@ 801f938 <__ieee754_acos+0x278>
 801f6e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f6ec:	4622      	mov	r2, r4
 801f6ee:	462b      	mov	r3, r5
 801f6f0:	4620      	mov	r0, r4
 801f6f2:	4629      	mov	r1, r5
 801f6f4:	f7e0 fda0 	bl	8000238 <__aeabi_dsub>
 801f6f8:	4602      	mov	r2, r0
 801f6fa:	460b      	mov	r3, r1
 801f6fc:	f7e1 f87e 	bl	80007fc <__aeabi_ddiv>
 801f700:	ec41 0b10 	vmov	d0, r0, r1
 801f704:	e7f0      	b.n	801f6e8 <__ieee754_acos+0x28>
 801f706:	49a9      	ldr	r1, [pc, #676]	@ (801f9ac <__ieee754_acos+0x2ec>)
 801f708:	428b      	cmp	r3, r1
 801f70a:	f200 8085 	bhi.w	801f818 <__ieee754_acos+0x158>
 801f70e:	4aa8      	ldr	r2, [pc, #672]	@ (801f9b0 <__ieee754_acos+0x2f0>)
 801f710:	4293      	cmp	r3, r2
 801f712:	f240 81fa 	bls.w	801fb0a <__ieee754_acos+0x44a>
 801f716:	4622      	mov	r2, r4
 801f718:	462b      	mov	r3, r5
 801f71a:	4620      	mov	r0, r4
 801f71c:	4629      	mov	r1, r5
 801f71e:	f7e0 ff43 	bl	80005a8 <__aeabi_dmul>
 801f722:	a387      	add	r3, pc, #540	@ (adr r3, 801f940 <__ieee754_acos+0x280>)
 801f724:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f728:	4606      	mov	r6, r0
 801f72a:	460f      	mov	r7, r1
 801f72c:	f7e0 ff3c 	bl	80005a8 <__aeabi_dmul>
 801f730:	a385      	add	r3, pc, #532	@ (adr r3, 801f948 <__ieee754_acos+0x288>)
 801f732:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f736:	f7e0 fd81 	bl	800023c <__adddf3>
 801f73a:	4632      	mov	r2, r6
 801f73c:	463b      	mov	r3, r7
 801f73e:	f7e0 ff33 	bl	80005a8 <__aeabi_dmul>
 801f742:	a383      	add	r3, pc, #524	@ (adr r3, 801f950 <__ieee754_acos+0x290>)
 801f744:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f748:	f7e0 fd76 	bl	8000238 <__aeabi_dsub>
 801f74c:	4632      	mov	r2, r6
 801f74e:	463b      	mov	r3, r7
 801f750:	f7e0 ff2a 	bl	80005a8 <__aeabi_dmul>
 801f754:	a380      	add	r3, pc, #512	@ (adr r3, 801f958 <__ieee754_acos+0x298>)
 801f756:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f75a:	f7e0 fd6f 	bl	800023c <__adddf3>
 801f75e:	4632      	mov	r2, r6
 801f760:	463b      	mov	r3, r7
 801f762:	f7e0 ff21 	bl	80005a8 <__aeabi_dmul>
 801f766:	a37e      	add	r3, pc, #504	@ (adr r3, 801f960 <__ieee754_acos+0x2a0>)
 801f768:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f76c:	f7e0 fd64 	bl	8000238 <__aeabi_dsub>
 801f770:	4632      	mov	r2, r6
 801f772:	463b      	mov	r3, r7
 801f774:	f7e0 ff18 	bl	80005a8 <__aeabi_dmul>
 801f778:	a37b      	add	r3, pc, #492	@ (adr r3, 801f968 <__ieee754_acos+0x2a8>)
 801f77a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f77e:	f7e0 fd5d 	bl	800023c <__adddf3>
 801f782:	4632      	mov	r2, r6
 801f784:	463b      	mov	r3, r7
 801f786:	f7e0 ff0f 	bl	80005a8 <__aeabi_dmul>
 801f78a:	a379      	add	r3, pc, #484	@ (adr r3, 801f970 <__ieee754_acos+0x2b0>)
 801f78c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f790:	4680      	mov	r8, r0
 801f792:	4689      	mov	r9, r1
 801f794:	4630      	mov	r0, r6
 801f796:	4639      	mov	r1, r7
 801f798:	f7e0 ff06 	bl	80005a8 <__aeabi_dmul>
 801f79c:	a376      	add	r3, pc, #472	@ (adr r3, 801f978 <__ieee754_acos+0x2b8>)
 801f79e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f7a2:	f7e0 fd49 	bl	8000238 <__aeabi_dsub>
 801f7a6:	4632      	mov	r2, r6
 801f7a8:	463b      	mov	r3, r7
 801f7aa:	f7e0 fefd 	bl	80005a8 <__aeabi_dmul>
 801f7ae:	a374      	add	r3, pc, #464	@ (adr r3, 801f980 <__ieee754_acos+0x2c0>)
 801f7b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f7b4:	f7e0 fd42 	bl	800023c <__adddf3>
 801f7b8:	4632      	mov	r2, r6
 801f7ba:	463b      	mov	r3, r7
 801f7bc:	f7e0 fef4 	bl	80005a8 <__aeabi_dmul>
 801f7c0:	a371      	add	r3, pc, #452	@ (adr r3, 801f988 <__ieee754_acos+0x2c8>)
 801f7c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f7c6:	f7e0 fd37 	bl	8000238 <__aeabi_dsub>
 801f7ca:	4632      	mov	r2, r6
 801f7cc:	463b      	mov	r3, r7
 801f7ce:	f7e0 feeb 	bl	80005a8 <__aeabi_dmul>
 801f7d2:	4b78      	ldr	r3, [pc, #480]	@ (801f9b4 <__ieee754_acos+0x2f4>)
 801f7d4:	2200      	movs	r2, #0
 801f7d6:	f7e0 fd31 	bl	800023c <__adddf3>
 801f7da:	4602      	mov	r2, r0
 801f7dc:	460b      	mov	r3, r1
 801f7de:	4640      	mov	r0, r8
 801f7e0:	4649      	mov	r1, r9
 801f7e2:	f7e1 f80b 	bl	80007fc <__aeabi_ddiv>
 801f7e6:	4622      	mov	r2, r4
 801f7e8:	462b      	mov	r3, r5
 801f7ea:	f7e0 fedd 	bl	80005a8 <__aeabi_dmul>
 801f7ee:	4602      	mov	r2, r0
 801f7f0:	460b      	mov	r3, r1
 801f7f2:	a167      	add	r1, pc, #412	@ (adr r1, 801f990 <__ieee754_acos+0x2d0>)
 801f7f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 801f7f8:	f7e0 fd1e 	bl	8000238 <__aeabi_dsub>
 801f7fc:	4602      	mov	r2, r0
 801f7fe:	460b      	mov	r3, r1
 801f800:	4620      	mov	r0, r4
 801f802:	4629      	mov	r1, r5
 801f804:	f7e0 fd18 	bl	8000238 <__aeabi_dsub>
 801f808:	4602      	mov	r2, r0
 801f80a:	460b      	mov	r3, r1
 801f80c:	a162      	add	r1, pc, #392	@ (adr r1, 801f998 <__ieee754_acos+0x2d8>)
 801f80e:	e9d1 0100 	ldrd	r0, r1, [r1]
 801f812:	f7e0 fd11 	bl	8000238 <__aeabi_dsub>
 801f816:	e773      	b.n	801f700 <__ieee754_acos+0x40>
 801f818:	2d00      	cmp	r5, #0
 801f81a:	f280 80cf 	bge.w	801f9bc <__ieee754_acos+0x2fc>
 801f81e:	4b65      	ldr	r3, [pc, #404]	@ (801f9b4 <__ieee754_acos+0x2f4>)
 801f820:	2200      	movs	r2, #0
 801f822:	4620      	mov	r0, r4
 801f824:	4629      	mov	r1, r5
 801f826:	f7e0 fd09 	bl	800023c <__adddf3>
 801f82a:	4b63      	ldr	r3, [pc, #396]	@ (801f9b8 <__ieee754_acos+0x2f8>)
 801f82c:	2200      	movs	r2, #0
 801f82e:	f7e0 febb 	bl	80005a8 <__aeabi_dmul>
 801f832:	a343      	add	r3, pc, #268	@ (adr r3, 801f940 <__ieee754_acos+0x280>)
 801f834:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f838:	4604      	mov	r4, r0
 801f83a:	460d      	mov	r5, r1
 801f83c:	f7e0 feb4 	bl	80005a8 <__aeabi_dmul>
 801f840:	a341      	add	r3, pc, #260	@ (adr r3, 801f948 <__ieee754_acos+0x288>)
 801f842:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f846:	f7e0 fcf9 	bl	800023c <__adddf3>
 801f84a:	4622      	mov	r2, r4
 801f84c:	462b      	mov	r3, r5
 801f84e:	f7e0 feab 	bl	80005a8 <__aeabi_dmul>
 801f852:	a33f      	add	r3, pc, #252	@ (adr r3, 801f950 <__ieee754_acos+0x290>)
 801f854:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f858:	f7e0 fcee 	bl	8000238 <__aeabi_dsub>
 801f85c:	4622      	mov	r2, r4
 801f85e:	462b      	mov	r3, r5
 801f860:	f7e0 fea2 	bl	80005a8 <__aeabi_dmul>
 801f864:	a33c      	add	r3, pc, #240	@ (adr r3, 801f958 <__ieee754_acos+0x298>)
 801f866:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f86a:	f7e0 fce7 	bl	800023c <__adddf3>
 801f86e:	4622      	mov	r2, r4
 801f870:	462b      	mov	r3, r5
 801f872:	f7e0 fe99 	bl	80005a8 <__aeabi_dmul>
 801f876:	a33a      	add	r3, pc, #232	@ (adr r3, 801f960 <__ieee754_acos+0x2a0>)
 801f878:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f87c:	f7e0 fcdc 	bl	8000238 <__aeabi_dsub>
 801f880:	4622      	mov	r2, r4
 801f882:	462b      	mov	r3, r5
 801f884:	f7e0 fe90 	bl	80005a8 <__aeabi_dmul>
 801f888:	a337      	add	r3, pc, #220	@ (adr r3, 801f968 <__ieee754_acos+0x2a8>)
 801f88a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f88e:	f7e0 fcd5 	bl	800023c <__adddf3>
 801f892:	4622      	mov	r2, r4
 801f894:	462b      	mov	r3, r5
 801f896:	f7e0 fe87 	bl	80005a8 <__aeabi_dmul>
 801f89a:	a335      	add	r3, pc, #212	@ (adr r3, 801f970 <__ieee754_acos+0x2b0>)
 801f89c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f8a0:	4606      	mov	r6, r0
 801f8a2:	460f      	mov	r7, r1
 801f8a4:	4620      	mov	r0, r4
 801f8a6:	4629      	mov	r1, r5
 801f8a8:	f7e0 fe7e 	bl	80005a8 <__aeabi_dmul>
 801f8ac:	a332      	add	r3, pc, #200	@ (adr r3, 801f978 <__ieee754_acos+0x2b8>)
 801f8ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f8b2:	f7e0 fcc1 	bl	8000238 <__aeabi_dsub>
 801f8b6:	4622      	mov	r2, r4
 801f8b8:	462b      	mov	r3, r5
 801f8ba:	f7e0 fe75 	bl	80005a8 <__aeabi_dmul>
 801f8be:	a330      	add	r3, pc, #192	@ (adr r3, 801f980 <__ieee754_acos+0x2c0>)
 801f8c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f8c4:	f7e0 fcba 	bl	800023c <__adddf3>
 801f8c8:	4622      	mov	r2, r4
 801f8ca:	462b      	mov	r3, r5
 801f8cc:	f7e0 fe6c 	bl	80005a8 <__aeabi_dmul>
 801f8d0:	a32d      	add	r3, pc, #180	@ (adr r3, 801f988 <__ieee754_acos+0x2c8>)
 801f8d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f8d6:	f7e0 fcaf 	bl	8000238 <__aeabi_dsub>
 801f8da:	4622      	mov	r2, r4
 801f8dc:	462b      	mov	r3, r5
 801f8de:	f7e0 fe63 	bl	80005a8 <__aeabi_dmul>
 801f8e2:	4b34      	ldr	r3, [pc, #208]	@ (801f9b4 <__ieee754_acos+0x2f4>)
 801f8e4:	2200      	movs	r2, #0
 801f8e6:	f7e0 fca9 	bl	800023c <__adddf3>
 801f8ea:	ec45 4b10 	vmov	d0, r4, r5
 801f8ee:	4680      	mov	r8, r0
 801f8f0:	4689      	mov	r9, r1
 801f8f2:	f000 f9bf 	bl	801fc74 <__ieee754_sqrt>
 801f8f6:	ec55 4b10 	vmov	r4, r5, d0
 801f8fa:	4642      	mov	r2, r8
 801f8fc:	464b      	mov	r3, r9
 801f8fe:	4630      	mov	r0, r6
 801f900:	4639      	mov	r1, r7
 801f902:	f7e0 ff7b 	bl	80007fc <__aeabi_ddiv>
 801f906:	4622      	mov	r2, r4
 801f908:	462b      	mov	r3, r5
 801f90a:	f7e0 fe4d 	bl	80005a8 <__aeabi_dmul>
 801f90e:	a320      	add	r3, pc, #128	@ (adr r3, 801f990 <__ieee754_acos+0x2d0>)
 801f910:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f914:	f7e0 fc90 	bl	8000238 <__aeabi_dsub>
 801f918:	4622      	mov	r2, r4
 801f91a:	462b      	mov	r3, r5
 801f91c:	f7e0 fc8e 	bl	800023c <__adddf3>
 801f920:	4602      	mov	r2, r0
 801f922:	460b      	mov	r3, r1
 801f924:	f7e0 fc8a 	bl	800023c <__adddf3>
 801f928:	4602      	mov	r2, r0
 801f92a:	460b      	mov	r3, r1
 801f92c:	a11c      	add	r1, pc, #112	@ (adr r1, 801f9a0 <__ieee754_acos+0x2e0>)
 801f92e:	e9d1 0100 	ldrd	r0, r1, [r1]
 801f932:	e76e      	b.n	801f812 <__ieee754_acos+0x152>
 801f934:	f3af 8000 	nop.w
	...
 801f940:	0dfdf709 	.word	0x0dfdf709
 801f944:	3f023de1 	.word	0x3f023de1
 801f948:	7501b288 	.word	0x7501b288
 801f94c:	3f49efe0 	.word	0x3f49efe0
 801f950:	b5688f3b 	.word	0xb5688f3b
 801f954:	3fa48228 	.word	0x3fa48228
 801f958:	0e884455 	.word	0x0e884455
 801f95c:	3fc9c155 	.word	0x3fc9c155
 801f960:	03eb6f7d 	.word	0x03eb6f7d
 801f964:	3fd4d612 	.word	0x3fd4d612
 801f968:	55555555 	.word	0x55555555
 801f96c:	3fc55555 	.word	0x3fc55555
 801f970:	b12e9282 	.word	0xb12e9282
 801f974:	3fb3b8c5 	.word	0x3fb3b8c5
 801f978:	1b8d0159 	.word	0x1b8d0159
 801f97c:	3fe6066c 	.word	0x3fe6066c
 801f980:	9c598ac8 	.word	0x9c598ac8
 801f984:	40002ae5 	.word	0x40002ae5
 801f988:	1c8a2d4b 	.word	0x1c8a2d4b
 801f98c:	40033a27 	.word	0x40033a27
 801f990:	33145c07 	.word	0x33145c07
 801f994:	3c91a626 	.word	0x3c91a626
 801f998:	54442d18 	.word	0x54442d18
 801f99c:	3ff921fb 	.word	0x3ff921fb
 801f9a0:	54442d18 	.word	0x54442d18
 801f9a4:	400921fb 	.word	0x400921fb
 801f9a8:	3fefffff 	.word	0x3fefffff
 801f9ac:	3fdfffff 	.word	0x3fdfffff
 801f9b0:	3c600000 	.word	0x3c600000
 801f9b4:	3ff00000 	.word	0x3ff00000
 801f9b8:	3fe00000 	.word	0x3fe00000
 801f9bc:	4622      	mov	r2, r4
 801f9be:	462b      	mov	r3, r5
 801f9c0:	496b      	ldr	r1, [pc, #428]	@ (801fb70 <__ieee754_acos+0x4b0>)
 801f9c2:	2000      	movs	r0, #0
 801f9c4:	f7e0 fc38 	bl	8000238 <__aeabi_dsub>
 801f9c8:	4b6a      	ldr	r3, [pc, #424]	@ (801fb74 <__ieee754_acos+0x4b4>)
 801f9ca:	2200      	movs	r2, #0
 801f9cc:	f7e0 fdec 	bl	80005a8 <__aeabi_dmul>
 801f9d0:	4604      	mov	r4, r0
 801f9d2:	460d      	mov	r5, r1
 801f9d4:	ec45 4b10 	vmov	d0, r4, r5
 801f9d8:	f000 f94c 	bl	801fc74 <__ieee754_sqrt>
 801f9dc:	a34c      	add	r3, pc, #304	@ (adr r3, 801fb10 <__ieee754_acos+0x450>)
 801f9de:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f9e2:	4620      	mov	r0, r4
 801f9e4:	4629      	mov	r1, r5
 801f9e6:	ec59 8b10 	vmov	r8, r9, d0
 801f9ea:	f7e0 fddd 	bl	80005a8 <__aeabi_dmul>
 801f9ee:	a34a      	add	r3, pc, #296	@ (adr r3, 801fb18 <__ieee754_acos+0x458>)
 801f9f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f9f4:	f7e0 fc22 	bl	800023c <__adddf3>
 801f9f8:	4622      	mov	r2, r4
 801f9fa:	462b      	mov	r3, r5
 801f9fc:	f7e0 fdd4 	bl	80005a8 <__aeabi_dmul>
 801fa00:	a347      	add	r3, pc, #284	@ (adr r3, 801fb20 <__ieee754_acos+0x460>)
 801fa02:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fa06:	f7e0 fc17 	bl	8000238 <__aeabi_dsub>
 801fa0a:	4622      	mov	r2, r4
 801fa0c:	462b      	mov	r3, r5
 801fa0e:	f7e0 fdcb 	bl	80005a8 <__aeabi_dmul>
 801fa12:	a345      	add	r3, pc, #276	@ (adr r3, 801fb28 <__ieee754_acos+0x468>)
 801fa14:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fa18:	f7e0 fc10 	bl	800023c <__adddf3>
 801fa1c:	4622      	mov	r2, r4
 801fa1e:	462b      	mov	r3, r5
 801fa20:	f7e0 fdc2 	bl	80005a8 <__aeabi_dmul>
 801fa24:	a342      	add	r3, pc, #264	@ (adr r3, 801fb30 <__ieee754_acos+0x470>)
 801fa26:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fa2a:	f7e0 fc05 	bl	8000238 <__aeabi_dsub>
 801fa2e:	4622      	mov	r2, r4
 801fa30:	462b      	mov	r3, r5
 801fa32:	f7e0 fdb9 	bl	80005a8 <__aeabi_dmul>
 801fa36:	a340      	add	r3, pc, #256	@ (adr r3, 801fb38 <__ieee754_acos+0x478>)
 801fa38:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fa3c:	f7e0 fbfe 	bl	800023c <__adddf3>
 801fa40:	4622      	mov	r2, r4
 801fa42:	462b      	mov	r3, r5
 801fa44:	f7e0 fdb0 	bl	80005a8 <__aeabi_dmul>
 801fa48:	a33d      	add	r3, pc, #244	@ (adr r3, 801fb40 <__ieee754_acos+0x480>)
 801fa4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fa4e:	4682      	mov	sl, r0
 801fa50:	468b      	mov	fp, r1
 801fa52:	4620      	mov	r0, r4
 801fa54:	4629      	mov	r1, r5
 801fa56:	f7e0 fda7 	bl	80005a8 <__aeabi_dmul>
 801fa5a:	a33b      	add	r3, pc, #236	@ (adr r3, 801fb48 <__ieee754_acos+0x488>)
 801fa5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fa60:	f7e0 fbea 	bl	8000238 <__aeabi_dsub>
 801fa64:	4622      	mov	r2, r4
 801fa66:	462b      	mov	r3, r5
 801fa68:	f7e0 fd9e 	bl	80005a8 <__aeabi_dmul>
 801fa6c:	a338      	add	r3, pc, #224	@ (adr r3, 801fb50 <__ieee754_acos+0x490>)
 801fa6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fa72:	f7e0 fbe3 	bl	800023c <__adddf3>
 801fa76:	4622      	mov	r2, r4
 801fa78:	462b      	mov	r3, r5
 801fa7a:	f7e0 fd95 	bl	80005a8 <__aeabi_dmul>
 801fa7e:	a336      	add	r3, pc, #216	@ (adr r3, 801fb58 <__ieee754_acos+0x498>)
 801fa80:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fa84:	f7e0 fbd8 	bl	8000238 <__aeabi_dsub>
 801fa88:	4622      	mov	r2, r4
 801fa8a:	462b      	mov	r3, r5
 801fa8c:	f7e0 fd8c 	bl	80005a8 <__aeabi_dmul>
 801fa90:	4b37      	ldr	r3, [pc, #220]	@ (801fb70 <__ieee754_acos+0x4b0>)
 801fa92:	2200      	movs	r2, #0
 801fa94:	f7e0 fbd2 	bl	800023c <__adddf3>
 801fa98:	4602      	mov	r2, r0
 801fa9a:	460b      	mov	r3, r1
 801fa9c:	4650      	mov	r0, sl
 801fa9e:	4659      	mov	r1, fp
 801faa0:	f7e0 feac 	bl	80007fc <__aeabi_ddiv>
 801faa4:	4642      	mov	r2, r8
 801faa6:	464b      	mov	r3, r9
 801faa8:	f7e0 fd7e 	bl	80005a8 <__aeabi_dmul>
 801faac:	2600      	movs	r6, #0
 801faae:	4682      	mov	sl, r0
 801fab0:	468b      	mov	fp, r1
 801fab2:	4632      	mov	r2, r6
 801fab4:	464b      	mov	r3, r9
 801fab6:	4630      	mov	r0, r6
 801fab8:	4649      	mov	r1, r9
 801faba:	f7e0 fd75 	bl	80005a8 <__aeabi_dmul>
 801fabe:	4602      	mov	r2, r0
 801fac0:	460b      	mov	r3, r1
 801fac2:	4620      	mov	r0, r4
 801fac4:	4629      	mov	r1, r5
 801fac6:	f7e0 fbb7 	bl	8000238 <__aeabi_dsub>
 801faca:	4632      	mov	r2, r6
 801facc:	4604      	mov	r4, r0
 801face:	460d      	mov	r5, r1
 801fad0:	464b      	mov	r3, r9
 801fad2:	4640      	mov	r0, r8
 801fad4:	4649      	mov	r1, r9
 801fad6:	f7e0 fbb1 	bl	800023c <__adddf3>
 801fada:	4602      	mov	r2, r0
 801fadc:	460b      	mov	r3, r1
 801fade:	4620      	mov	r0, r4
 801fae0:	4629      	mov	r1, r5
 801fae2:	f7e0 fe8b 	bl	80007fc <__aeabi_ddiv>
 801fae6:	4602      	mov	r2, r0
 801fae8:	460b      	mov	r3, r1
 801faea:	4650      	mov	r0, sl
 801faec:	4659      	mov	r1, fp
 801faee:	f7e0 fba5 	bl	800023c <__adddf3>
 801faf2:	4632      	mov	r2, r6
 801faf4:	464b      	mov	r3, r9
 801faf6:	f7e0 fba1 	bl	800023c <__adddf3>
 801fafa:	4602      	mov	r2, r0
 801fafc:	460b      	mov	r3, r1
 801fafe:	f7e0 fb9d 	bl	800023c <__adddf3>
 801fb02:	e5fd      	b.n	801f700 <__ieee754_acos+0x40>
 801fb04:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 801fb60 <__ieee754_acos+0x4a0>
 801fb08:	e5ee      	b.n	801f6e8 <__ieee754_acos+0x28>
 801fb0a:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 801fb68 <__ieee754_acos+0x4a8>
 801fb0e:	e5eb      	b.n	801f6e8 <__ieee754_acos+0x28>
 801fb10:	0dfdf709 	.word	0x0dfdf709
 801fb14:	3f023de1 	.word	0x3f023de1
 801fb18:	7501b288 	.word	0x7501b288
 801fb1c:	3f49efe0 	.word	0x3f49efe0
 801fb20:	b5688f3b 	.word	0xb5688f3b
 801fb24:	3fa48228 	.word	0x3fa48228
 801fb28:	0e884455 	.word	0x0e884455
 801fb2c:	3fc9c155 	.word	0x3fc9c155
 801fb30:	03eb6f7d 	.word	0x03eb6f7d
 801fb34:	3fd4d612 	.word	0x3fd4d612
 801fb38:	55555555 	.word	0x55555555
 801fb3c:	3fc55555 	.word	0x3fc55555
 801fb40:	b12e9282 	.word	0xb12e9282
 801fb44:	3fb3b8c5 	.word	0x3fb3b8c5
 801fb48:	1b8d0159 	.word	0x1b8d0159
 801fb4c:	3fe6066c 	.word	0x3fe6066c
 801fb50:	9c598ac8 	.word	0x9c598ac8
 801fb54:	40002ae5 	.word	0x40002ae5
 801fb58:	1c8a2d4b 	.word	0x1c8a2d4b
 801fb5c:	40033a27 	.word	0x40033a27
 801fb60:	54442d18 	.word	0x54442d18
 801fb64:	400921fb 	.word	0x400921fb
 801fb68:	54442d18 	.word	0x54442d18
 801fb6c:	3ff921fb 	.word	0x3ff921fb
 801fb70:	3ff00000 	.word	0x3ff00000
 801fb74:	3fe00000 	.word	0x3fe00000

0801fb78 <scalbn>:
 801fb78:	b570      	push	{r4, r5, r6, lr}
 801fb7a:	ec55 4b10 	vmov	r4, r5, d0
 801fb7e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 801fb82:	4606      	mov	r6, r0
 801fb84:	462b      	mov	r3, r5
 801fb86:	b991      	cbnz	r1, 801fbae <scalbn+0x36>
 801fb88:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 801fb8c:	4323      	orrs	r3, r4
 801fb8e:	d03d      	beq.n	801fc0c <scalbn+0x94>
 801fb90:	4b35      	ldr	r3, [pc, #212]	@ (801fc68 <scalbn+0xf0>)
 801fb92:	4620      	mov	r0, r4
 801fb94:	4629      	mov	r1, r5
 801fb96:	2200      	movs	r2, #0
 801fb98:	f7e0 fd06 	bl	80005a8 <__aeabi_dmul>
 801fb9c:	4b33      	ldr	r3, [pc, #204]	@ (801fc6c <scalbn+0xf4>)
 801fb9e:	429e      	cmp	r6, r3
 801fba0:	4604      	mov	r4, r0
 801fba2:	460d      	mov	r5, r1
 801fba4:	da0f      	bge.n	801fbc6 <scalbn+0x4e>
 801fba6:	a328      	add	r3, pc, #160	@ (adr r3, 801fc48 <scalbn+0xd0>)
 801fba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fbac:	e01e      	b.n	801fbec <scalbn+0x74>
 801fbae:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 801fbb2:	4291      	cmp	r1, r2
 801fbb4:	d10b      	bne.n	801fbce <scalbn+0x56>
 801fbb6:	4622      	mov	r2, r4
 801fbb8:	4620      	mov	r0, r4
 801fbba:	4629      	mov	r1, r5
 801fbbc:	f7e0 fb3e 	bl	800023c <__adddf3>
 801fbc0:	4604      	mov	r4, r0
 801fbc2:	460d      	mov	r5, r1
 801fbc4:	e022      	b.n	801fc0c <scalbn+0x94>
 801fbc6:	460b      	mov	r3, r1
 801fbc8:	f3c1 510a 	ubfx	r1, r1, #20, #11
 801fbcc:	3936      	subs	r1, #54	@ 0x36
 801fbce:	f24c 3250 	movw	r2, #50000	@ 0xc350
 801fbd2:	4296      	cmp	r6, r2
 801fbd4:	dd0d      	ble.n	801fbf2 <scalbn+0x7a>
 801fbd6:	2d00      	cmp	r5, #0
 801fbd8:	a11d      	add	r1, pc, #116	@ (adr r1, 801fc50 <scalbn+0xd8>)
 801fbda:	e9d1 0100 	ldrd	r0, r1, [r1]
 801fbde:	da02      	bge.n	801fbe6 <scalbn+0x6e>
 801fbe0:	a11d      	add	r1, pc, #116	@ (adr r1, 801fc58 <scalbn+0xe0>)
 801fbe2:	e9d1 0100 	ldrd	r0, r1, [r1]
 801fbe6:	a31a      	add	r3, pc, #104	@ (adr r3, 801fc50 <scalbn+0xd8>)
 801fbe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fbec:	f7e0 fcdc 	bl	80005a8 <__aeabi_dmul>
 801fbf0:	e7e6      	b.n	801fbc0 <scalbn+0x48>
 801fbf2:	1872      	adds	r2, r6, r1
 801fbf4:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 801fbf8:	428a      	cmp	r2, r1
 801fbfa:	dcec      	bgt.n	801fbd6 <scalbn+0x5e>
 801fbfc:	2a00      	cmp	r2, #0
 801fbfe:	dd08      	ble.n	801fc12 <scalbn+0x9a>
 801fc00:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801fc04:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 801fc08:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801fc0c:	ec45 4b10 	vmov	d0, r4, r5
 801fc10:	bd70      	pop	{r4, r5, r6, pc}
 801fc12:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 801fc16:	da08      	bge.n	801fc2a <scalbn+0xb2>
 801fc18:	2d00      	cmp	r5, #0
 801fc1a:	a10b      	add	r1, pc, #44	@ (adr r1, 801fc48 <scalbn+0xd0>)
 801fc1c:	e9d1 0100 	ldrd	r0, r1, [r1]
 801fc20:	dac1      	bge.n	801fba6 <scalbn+0x2e>
 801fc22:	a10f      	add	r1, pc, #60	@ (adr r1, 801fc60 <scalbn+0xe8>)
 801fc24:	e9d1 0100 	ldrd	r0, r1, [r1]
 801fc28:	e7bd      	b.n	801fba6 <scalbn+0x2e>
 801fc2a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801fc2e:	3236      	adds	r2, #54	@ 0x36
 801fc30:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 801fc34:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801fc38:	4620      	mov	r0, r4
 801fc3a:	4b0d      	ldr	r3, [pc, #52]	@ (801fc70 <scalbn+0xf8>)
 801fc3c:	4629      	mov	r1, r5
 801fc3e:	2200      	movs	r2, #0
 801fc40:	e7d4      	b.n	801fbec <scalbn+0x74>
 801fc42:	bf00      	nop
 801fc44:	f3af 8000 	nop.w
 801fc48:	c2f8f359 	.word	0xc2f8f359
 801fc4c:	01a56e1f 	.word	0x01a56e1f
 801fc50:	8800759c 	.word	0x8800759c
 801fc54:	7e37e43c 	.word	0x7e37e43c
 801fc58:	8800759c 	.word	0x8800759c
 801fc5c:	fe37e43c 	.word	0xfe37e43c
 801fc60:	c2f8f359 	.word	0xc2f8f359
 801fc64:	81a56e1f 	.word	0x81a56e1f
 801fc68:	43500000 	.word	0x43500000
 801fc6c:	ffff3cb0 	.word	0xffff3cb0
 801fc70:	3c900000 	.word	0x3c900000

0801fc74 <__ieee754_sqrt>:
 801fc74:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fc78:	4a68      	ldr	r2, [pc, #416]	@ (801fe1c <__ieee754_sqrt+0x1a8>)
 801fc7a:	ec55 4b10 	vmov	r4, r5, d0
 801fc7e:	43aa      	bics	r2, r5
 801fc80:	462b      	mov	r3, r5
 801fc82:	4621      	mov	r1, r4
 801fc84:	d110      	bne.n	801fca8 <__ieee754_sqrt+0x34>
 801fc86:	4622      	mov	r2, r4
 801fc88:	4620      	mov	r0, r4
 801fc8a:	4629      	mov	r1, r5
 801fc8c:	f7e0 fc8c 	bl	80005a8 <__aeabi_dmul>
 801fc90:	4602      	mov	r2, r0
 801fc92:	460b      	mov	r3, r1
 801fc94:	4620      	mov	r0, r4
 801fc96:	4629      	mov	r1, r5
 801fc98:	f7e0 fad0 	bl	800023c <__adddf3>
 801fc9c:	4604      	mov	r4, r0
 801fc9e:	460d      	mov	r5, r1
 801fca0:	ec45 4b10 	vmov	d0, r4, r5
 801fca4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fca8:	2d00      	cmp	r5, #0
 801fcaa:	dc0e      	bgt.n	801fcca <__ieee754_sqrt+0x56>
 801fcac:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 801fcb0:	4322      	orrs	r2, r4
 801fcb2:	d0f5      	beq.n	801fca0 <__ieee754_sqrt+0x2c>
 801fcb4:	b19d      	cbz	r5, 801fcde <__ieee754_sqrt+0x6a>
 801fcb6:	4622      	mov	r2, r4
 801fcb8:	4620      	mov	r0, r4
 801fcba:	4629      	mov	r1, r5
 801fcbc:	f7e0 fabc 	bl	8000238 <__aeabi_dsub>
 801fcc0:	4602      	mov	r2, r0
 801fcc2:	460b      	mov	r3, r1
 801fcc4:	f7e0 fd9a 	bl	80007fc <__aeabi_ddiv>
 801fcc8:	e7e8      	b.n	801fc9c <__ieee754_sqrt+0x28>
 801fcca:	152a      	asrs	r2, r5, #20
 801fccc:	d115      	bne.n	801fcfa <__ieee754_sqrt+0x86>
 801fcce:	2000      	movs	r0, #0
 801fcd0:	e009      	b.n	801fce6 <__ieee754_sqrt+0x72>
 801fcd2:	0acb      	lsrs	r3, r1, #11
 801fcd4:	3a15      	subs	r2, #21
 801fcd6:	0549      	lsls	r1, r1, #21
 801fcd8:	2b00      	cmp	r3, #0
 801fcda:	d0fa      	beq.n	801fcd2 <__ieee754_sqrt+0x5e>
 801fcdc:	e7f7      	b.n	801fcce <__ieee754_sqrt+0x5a>
 801fcde:	462a      	mov	r2, r5
 801fce0:	e7fa      	b.n	801fcd8 <__ieee754_sqrt+0x64>
 801fce2:	005b      	lsls	r3, r3, #1
 801fce4:	3001      	adds	r0, #1
 801fce6:	02dc      	lsls	r4, r3, #11
 801fce8:	d5fb      	bpl.n	801fce2 <__ieee754_sqrt+0x6e>
 801fcea:	1e44      	subs	r4, r0, #1
 801fcec:	1b12      	subs	r2, r2, r4
 801fcee:	f1c0 0420 	rsb	r4, r0, #32
 801fcf2:	fa21 f404 	lsr.w	r4, r1, r4
 801fcf6:	4323      	orrs	r3, r4
 801fcf8:	4081      	lsls	r1, r0
 801fcfa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801fcfe:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 801fd02:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801fd06:	07d2      	lsls	r2, r2, #31
 801fd08:	bf5c      	itt	pl
 801fd0a:	005b      	lslpl	r3, r3, #1
 801fd0c:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 801fd10:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801fd14:	bf58      	it	pl
 801fd16:	0049      	lslpl	r1, r1, #1
 801fd18:	2600      	movs	r6, #0
 801fd1a:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 801fd1e:	106d      	asrs	r5, r5, #1
 801fd20:	0049      	lsls	r1, r1, #1
 801fd22:	2016      	movs	r0, #22
 801fd24:	4632      	mov	r2, r6
 801fd26:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 801fd2a:	1917      	adds	r7, r2, r4
 801fd2c:	429f      	cmp	r7, r3
 801fd2e:	bfde      	ittt	le
 801fd30:	193a      	addle	r2, r7, r4
 801fd32:	1bdb      	suble	r3, r3, r7
 801fd34:	1936      	addle	r6, r6, r4
 801fd36:	0fcf      	lsrs	r7, r1, #31
 801fd38:	3801      	subs	r0, #1
 801fd3a:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 801fd3e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801fd42:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801fd46:	d1f0      	bne.n	801fd2a <__ieee754_sqrt+0xb6>
 801fd48:	4604      	mov	r4, r0
 801fd4a:	2720      	movs	r7, #32
 801fd4c:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 801fd50:	429a      	cmp	r2, r3
 801fd52:	eb00 0e0c 	add.w	lr, r0, ip
 801fd56:	db02      	blt.n	801fd5e <__ieee754_sqrt+0xea>
 801fd58:	d113      	bne.n	801fd82 <__ieee754_sqrt+0x10e>
 801fd5a:	458e      	cmp	lr, r1
 801fd5c:	d811      	bhi.n	801fd82 <__ieee754_sqrt+0x10e>
 801fd5e:	f1be 0f00 	cmp.w	lr, #0
 801fd62:	eb0e 000c 	add.w	r0, lr, ip
 801fd66:	da42      	bge.n	801fdee <__ieee754_sqrt+0x17a>
 801fd68:	2800      	cmp	r0, #0
 801fd6a:	db40      	blt.n	801fdee <__ieee754_sqrt+0x17a>
 801fd6c:	f102 0801 	add.w	r8, r2, #1
 801fd70:	1a9b      	subs	r3, r3, r2
 801fd72:	458e      	cmp	lr, r1
 801fd74:	bf88      	it	hi
 801fd76:	f103 33ff 	addhi.w	r3, r3, #4294967295
 801fd7a:	eba1 010e 	sub.w	r1, r1, lr
 801fd7e:	4464      	add	r4, ip
 801fd80:	4642      	mov	r2, r8
 801fd82:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 801fd86:	3f01      	subs	r7, #1
 801fd88:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 801fd8c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801fd90:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 801fd94:	d1dc      	bne.n	801fd50 <__ieee754_sqrt+0xdc>
 801fd96:	4319      	orrs	r1, r3
 801fd98:	d01b      	beq.n	801fdd2 <__ieee754_sqrt+0x15e>
 801fd9a:	f8df a084 	ldr.w	sl, [pc, #132]	@ 801fe20 <__ieee754_sqrt+0x1ac>
 801fd9e:	f8df b084 	ldr.w	fp, [pc, #132]	@ 801fe24 <__ieee754_sqrt+0x1b0>
 801fda2:	e9da 0100 	ldrd	r0, r1, [sl]
 801fda6:	e9db 2300 	ldrd	r2, r3, [fp]
 801fdaa:	f7e0 fa45 	bl	8000238 <__aeabi_dsub>
 801fdae:	e9da 8900 	ldrd	r8, r9, [sl]
 801fdb2:	4602      	mov	r2, r0
 801fdb4:	460b      	mov	r3, r1
 801fdb6:	4640      	mov	r0, r8
 801fdb8:	4649      	mov	r1, r9
 801fdba:	f7e0 fe71 	bl	8000aa0 <__aeabi_dcmple>
 801fdbe:	b140      	cbz	r0, 801fdd2 <__ieee754_sqrt+0x15e>
 801fdc0:	f1b4 3fff 	cmp.w	r4, #4294967295
 801fdc4:	e9da 0100 	ldrd	r0, r1, [sl]
 801fdc8:	e9db 2300 	ldrd	r2, r3, [fp]
 801fdcc:	d111      	bne.n	801fdf2 <__ieee754_sqrt+0x17e>
 801fdce:	3601      	adds	r6, #1
 801fdd0:	463c      	mov	r4, r7
 801fdd2:	1072      	asrs	r2, r6, #1
 801fdd4:	0863      	lsrs	r3, r4, #1
 801fdd6:	07f1      	lsls	r1, r6, #31
 801fdd8:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 801fddc:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 801fde0:	bf48      	it	mi
 801fde2:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 801fde6:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 801fdea:	4618      	mov	r0, r3
 801fdec:	e756      	b.n	801fc9c <__ieee754_sqrt+0x28>
 801fdee:	4690      	mov	r8, r2
 801fdf0:	e7be      	b.n	801fd70 <__ieee754_sqrt+0xfc>
 801fdf2:	f7e0 fa23 	bl	800023c <__adddf3>
 801fdf6:	e9da 8900 	ldrd	r8, r9, [sl]
 801fdfa:	4602      	mov	r2, r0
 801fdfc:	460b      	mov	r3, r1
 801fdfe:	4640      	mov	r0, r8
 801fe00:	4649      	mov	r1, r9
 801fe02:	f7e0 fe43 	bl	8000a8c <__aeabi_dcmplt>
 801fe06:	b120      	cbz	r0, 801fe12 <__ieee754_sqrt+0x19e>
 801fe08:	1ca0      	adds	r0, r4, #2
 801fe0a:	bf08      	it	eq
 801fe0c:	3601      	addeq	r6, #1
 801fe0e:	3402      	adds	r4, #2
 801fe10:	e7df      	b.n	801fdd2 <__ieee754_sqrt+0x15e>
 801fe12:	1c63      	adds	r3, r4, #1
 801fe14:	f023 0401 	bic.w	r4, r3, #1
 801fe18:	e7db      	b.n	801fdd2 <__ieee754_sqrt+0x15e>
 801fe1a:	bf00      	nop
 801fe1c:	7ff00000 	.word	0x7ff00000
 801fe20:	20000318 	.word	0x20000318
 801fe24:	20000310 	.word	0x20000310

0801fe28 <_init>:
 801fe28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fe2a:	bf00      	nop
 801fe2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801fe2e:	bc08      	pop	{r3}
 801fe30:	469e      	mov	lr, r3
 801fe32:	4770      	bx	lr

0801fe34 <_fini>:
 801fe34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fe36:	bf00      	nop
 801fe38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801fe3a:	bc08      	pop	{r3}
 801fe3c:	469e      	mov	lr, r3
 801fe3e:	4770      	bx	lr
