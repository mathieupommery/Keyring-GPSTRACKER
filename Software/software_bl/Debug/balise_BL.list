
balise_BL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001fb38  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002cc8  0801fc78  0801fc78  00020c78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08022940  08022940  00023940  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08022948  08022948  00023948  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0802294c  0802294c  0002394c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000318  20000008  08022950  00024008  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_DRIVER_CONTEXT 00000035  20000320  08022c68  00024320  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  20000358  08022c9d  00024358  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002e28  20000370  08022cae  00024370  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20003198  08022cae  00025198  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00025a67  2**0
                  CONTENTS, READONLY
 12 MAPPING_TABLE 00000028  20030000  20030000  00026000  2**2
                  ALLOC
 13 MB_MEM1       000001bb  20030028  20030028  00026000  2**2
                  ALLOC
 14 .MB_MEM2      00000883  200301e4  08022cae  000251e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 15 .debug_info   0004d37c  00000000  00000000  00025a97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 0000a7c7  00000000  00000000  00072e13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00003f90  00000000  00000000  0007d5e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 000030a9  00000000  00000000  00081570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00015e4c  00000000  00000000  00084619  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00055a05  00000000  00000000  0009a465  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    0011ea17  00000000  00000000  000efe6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000043  00000000  00000000  0020e881  2**0
                  CONTENTS, READONLY
 23 .debug_frame  00012534  00000000  00000000  0020e8c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 00000076  00000000  00000000  00220df8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000370 	.word	0x20000370
 800015c:	00000000 	.word	0x00000000
 8000160:	0801fc60 	.word	0x0801fc60

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000374 	.word	0x20000374
 800017c:	0801fc60 	.word	0x0801fc60

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	@ 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_d2uiz>:
 8000b58:	004a      	lsls	r2, r1, #1
 8000b5a:	d211      	bcs.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d211      	bcs.n	8000b86 <__aeabi_d2uiz+0x2e>
 8000b62:	d50d      	bpl.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d40e      	bmi.n	8000b8c <__aeabi_d2uiz+0x34>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_d2uiz+0x3a>
 8000b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0000 	mov.w	r0, #0
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2f>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ba0:	bf24      	itt	cs
 8000ba2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ba6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000baa:	d90d      	bls.n	8000bc8 <__aeabi_d2f+0x30>
 8000bac:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bb0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bb4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bb8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bbc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bcc:	d121      	bne.n	8000c12 <__aeabi_d2f+0x7a>
 8000bce:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bd2:	bfbc      	itt	lt
 8000bd4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	4770      	bxlt	lr
 8000bda:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bde:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000be2:	f1c2 0218 	rsb	r2, r2, #24
 8000be6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bea:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bee:	fa20 f002 	lsr.w	r0, r0, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	f040 0001 	orrne.w	r0, r0, #1
 8000bf8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bfc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c04:	ea40 000c 	orr.w	r0, r0, ip
 8000c08:	fa23 f302 	lsr.w	r3, r3, r2
 8000c0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c10:	e7cc      	b.n	8000bac <__aeabi_d2f+0x14>
 8000c12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c16:	d107      	bne.n	8000c28 <__aeabi_d2f+0x90>
 8000c18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c1c:	bf1e      	ittt	ne
 8000c1e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c22:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c26:	4770      	bxne	lr
 8000c28:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c2c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop

08000c38 <__aeabi_uldivmod>:
 8000c38:	b953      	cbnz	r3, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3a:	b94a      	cbnz	r2, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3c:	2900      	cmp	r1, #0
 8000c3e:	bf08      	it	eq
 8000c40:	2800      	cmpeq	r0, #0
 8000c42:	bf1c      	itt	ne
 8000c44:	f04f 31ff 	movne.w	r1, #4294967295
 8000c48:	f04f 30ff 	movne.w	r0, #4294967295
 8000c4c:	f000 b9a0 	b.w	8000f90 <__aeabi_idiv0>
 8000c50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c58:	f000 f83c 	bl	8000cd4 <__udivmoddi4>
 8000c5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c64:	b004      	add	sp, #16
 8000c66:	4770      	bx	lr

08000c68 <__aeabi_d2lz>:
 8000c68:	b538      	push	{r3, r4, r5, lr}
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	4604      	mov	r4, r0
 8000c70:	460d      	mov	r5, r1
 8000c72:	f7ff ff0b 	bl	8000a8c <__aeabi_dcmplt>
 8000c76:	b928      	cbnz	r0, 8000c84 <__aeabi_d2lz+0x1c>
 8000c78:	4620      	mov	r0, r4
 8000c7a:	4629      	mov	r1, r5
 8000c7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c80:	f000 b80a 	b.w	8000c98 <__aeabi_d2ulz>
 8000c84:	4620      	mov	r0, r4
 8000c86:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000c8a:	f000 f805 	bl	8000c98 <__aeabi_d2ulz>
 8000c8e:	4240      	negs	r0, r0
 8000c90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c94:	bd38      	pop	{r3, r4, r5, pc}
 8000c96:	bf00      	nop

08000c98 <__aeabi_d2ulz>:
 8000c98:	b5d0      	push	{r4, r6, r7, lr}
 8000c9a:	4b0c      	ldr	r3, [pc, #48]	@ (8000ccc <__aeabi_d2ulz+0x34>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	4606      	mov	r6, r0
 8000ca0:	460f      	mov	r7, r1
 8000ca2:	f7ff fc81 	bl	80005a8 <__aeabi_dmul>
 8000ca6:	f7ff ff57 	bl	8000b58 <__aeabi_d2uiz>
 8000caa:	4604      	mov	r4, r0
 8000cac:	f7ff fc02 	bl	80004b4 <__aeabi_ui2d>
 8000cb0:	4b07      	ldr	r3, [pc, #28]	@ (8000cd0 <__aeabi_d2ulz+0x38>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	f7ff fc78 	bl	80005a8 <__aeabi_dmul>
 8000cb8:	4602      	mov	r2, r0
 8000cba:	460b      	mov	r3, r1
 8000cbc:	4630      	mov	r0, r6
 8000cbe:	4639      	mov	r1, r7
 8000cc0:	f7ff faba 	bl	8000238 <__aeabi_dsub>
 8000cc4:	f7ff ff48 	bl	8000b58 <__aeabi_d2uiz>
 8000cc8:	4621      	mov	r1, r4
 8000cca:	bdd0      	pop	{r4, r6, r7, pc}
 8000ccc:	3df00000 	.word	0x3df00000
 8000cd0:	41f00000 	.word	0x41f00000

08000cd4 <__udivmoddi4>:
 8000cd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cd8:	9d08      	ldr	r5, [sp, #32]
 8000cda:	460c      	mov	r4, r1
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d14e      	bne.n	8000d7e <__udivmoddi4+0xaa>
 8000ce0:	4694      	mov	ip, r2
 8000ce2:	458c      	cmp	ip, r1
 8000ce4:	4686      	mov	lr, r0
 8000ce6:	fab2 f282 	clz	r2, r2
 8000cea:	d962      	bls.n	8000db2 <__udivmoddi4+0xde>
 8000cec:	b14a      	cbz	r2, 8000d02 <__udivmoddi4+0x2e>
 8000cee:	f1c2 0320 	rsb	r3, r2, #32
 8000cf2:	4091      	lsls	r1, r2
 8000cf4:	fa20 f303 	lsr.w	r3, r0, r3
 8000cf8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cfc:	4319      	orrs	r1, r3
 8000cfe:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d02:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d06:	fa1f f68c 	uxth.w	r6, ip
 8000d0a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d0e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d12:	fb07 1114 	mls	r1, r7, r4, r1
 8000d16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d1a:	fb04 f106 	mul.w	r1, r4, r6
 8000d1e:	4299      	cmp	r1, r3
 8000d20:	d90a      	bls.n	8000d38 <__udivmoddi4+0x64>
 8000d22:	eb1c 0303 	adds.w	r3, ip, r3
 8000d26:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d2a:	f080 8112 	bcs.w	8000f52 <__udivmoddi4+0x27e>
 8000d2e:	4299      	cmp	r1, r3
 8000d30:	f240 810f 	bls.w	8000f52 <__udivmoddi4+0x27e>
 8000d34:	3c02      	subs	r4, #2
 8000d36:	4463      	add	r3, ip
 8000d38:	1a59      	subs	r1, r3, r1
 8000d3a:	fa1f f38e 	uxth.w	r3, lr
 8000d3e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d42:	fb07 1110 	mls	r1, r7, r0, r1
 8000d46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d4a:	fb00 f606 	mul.w	r6, r0, r6
 8000d4e:	429e      	cmp	r6, r3
 8000d50:	d90a      	bls.n	8000d68 <__udivmoddi4+0x94>
 8000d52:	eb1c 0303 	adds.w	r3, ip, r3
 8000d56:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d5a:	f080 80fc 	bcs.w	8000f56 <__udivmoddi4+0x282>
 8000d5e:	429e      	cmp	r6, r3
 8000d60:	f240 80f9 	bls.w	8000f56 <__udivmoddi4+0x282>
 8000d64:	4463      	add	r3, ip
 8000d66:	3802      	subs	r0, #2
 8000d68:	1b9b      	subs	r3, r3, r6
 8000d6a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d6e:	2100      	movs	r1, #0
 8000d70:	b11d      	cbz	r5, 8000d7a <__udivmoddi4+0xa6>
 8000d72:	40d3      	lsrs	r3, r2
 8000d74:	2200      	movs	r2, #0
 8000d76:	e9c5 3200 	strd	r3, r2, [r5]
 8000d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d905      	bls.n	8000d8e <__udivmoddi4+0xba>
 8000d82:	b10d      	cbz	r5, 8000d88 <__udivmoddi4+0xb4>
 8000d84:	e9c5 0100 	strd	r0, r1, [r5]
 8000d88:	2100      	movs	r1, #0
 8000d8a:	4608      	mov	r0, r1
 8000d8c:	e7f5      	b.n	8000d7a <__udivmoddi4+0xa6>
 8000d8e:	fab3 f183 	clz	r1, r3
 8000d92:	2900      	cmp	r1, #0
 8000d94:	d146      	bne.n	8000e24 <__udivmoddi4+0x150>
 8000d96:	42a3      	cmp	r3, r4
 8000d98:	d302      	bcc.n	8000da0 <__udivmoddi4+0xcc>
 8000d9a:	4290      	cmp	r0, r2
 8000d9c:	f0c0 80f0 	bcc.w	8000f80 <__udivmoddi4+0x2ac>
 8000da0:	1a86      	subs	r6, r0, r2
 8000da2:	eb64 0303 	sbc.w	r3, r4, r3
 8000da6:	2001      	movs	r0, #1
 8000da8:	2d00      	cmp	r5, #0
 8000daa:	d0e6      	beq.n	8000d7a <__udivmoddi4+0xa6>
 8000dac:	e9c5 6300 	strd	r6, r3, [r5]
 8000db0:	e7e3      	b.n	8000d7a <__udivmoddi4+0xa6>
 8000db2:	2a00      	cmp	r2, #0
 8000db4:	f040 8090 	bne.w	8000ed8 <__udivmoddi4+0x204>
 8000db8:	eba1 040c 	sub.w	r4, r1, ip
 8000dbc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000dc0:	fa1f f78c 	uxth.w	r7, ip
 8000dc4:	2101      	movs	r1, #1
 8000dc6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dca:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000dce:	fb08 4416 	mls	r4, r8, r6, r4
 8000dd2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dd6:	fb07 f006 	mul.w	r0, r7, r6
 8000dda:	4298      	cmp	r0, r3
 8000ddc:	d908      	bls.n	8000df0 <__udivmoddi4+0x11c>
 8000dde:	eb1c 0303 	adds.w	r3, ip, r3
 8000de2:	f106 34ff 	add.w	r4, r6, #4294967295
 8000de6:	d202      	bcs.n	8000dee <__udivmoddi4+0x11a>
 8000de8:	4298      	cmp	r0, r3
 8000dea:	f200 80cd 	bhi.w	8000f88 <__udivmoddi4+0x2b4>
 8000dee:	4626      	mov	r6, r4
 8000df0:	1a1c      	subs	r4, r3, r0
 8000df2:	fa1f f38e 	uxth.w	r3, lr
 8000df6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dfa:	fb08 4410 	mls	r4, r8, r0, r4
 8000dfe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e02:	fb00 f707 	mul.w	r7, r0, r7
 8000e06:	429f      	cmp	r7, r3
 8000e08:	d908      	bls.n	8000e1c <__udivmoddi4+0x148>
 8000e0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e0e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e12:	d202      	bcs.n	8000e1a <__udivmoddi4+0x146>
 8000e14:	429f      	cmp	r7, r3
 8000e16:	f200 80b0 	bhi.w	8000f7a <__udivmoddi4+0x2a6>
 8000e1a:	4620      	mov	r0, r4
 8000e1c:	1bdb      	subs	r3, r3, r7
 8000e1e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e22:	e7a5      	b.n	8000d70 <__udivmoddi4+0x9c>
 8000e24:	f1c1 0620 	rsb	r6, r1, #32
 8000e28:	408b      	lsls	r3, r1
 8000e2a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e2e:	431f      	orrs	r7, r3
 8000e30:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e34:	fa04 f301 	lsl.w	r3, r4, r1
 8000e38:	ea43 030c 	orr.w	r3, r3, ip
 8000e3c:	40f4      	lsrs	r4, r6
 8000e3e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e42:	0c38      	lsrs	r0, r7, #16
 8000e44:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e48:	fbb4 fef0 	udiv	lr, r4, r0
 8000e4c:	fa1f fc87 	uxth.w	ip, r7
 8000e50:	fb00 441e 	mls	r4, r0, lr, r4
 8000e54:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e58:	fb0e f90c 	mul.w	r9, lr, ip
 8000e5c:	45a1      	cmp	r9, r4
 8000e5e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e62:	d90a      	bls.n	8000e7a <__udivmoddi4+0x1a6>
 8000e64:	193c      	adds	r4, r7, r4
 8000e66:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e6a:	f080 8084 	bcs.w	8000f76 <__udivmoddi4+0x2a2>
 8000e6e:	45a1      	cmp	r9, r4
 8000e70:	f240 8081 	bls.w	8000f76 <__udivmoddi4+0x2a2>
 8000e74:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e78:	443c      	add	r4, r7
 8000e7a:	eba4 0409 	sub.w	r4, r4, r9
 8000e7e:	fa1f f983 	uxth.w	r9, r3
 8000e82:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e86:	fb00 4413 	mls	r4, r0, r3, r4
 8000e8a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e8e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e92:	45a4      	cmp	ip, r4
 8000e94:	d907      	bls.n	8000ea6 <__udivmoddi4+0x1d2>
 8000e96:	193c      	adds	r4, r7, r4
 8000e98:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e9c:	d267      	bcs.n	8000f6e <__udivmoddi4+0x29a>
 8000e9e:	45a4      	cmp	ip, r4
 8000ea0:	d965      	bls.n	8000f6e <__udivmoddi4+0x29a>
 8000ea2:	3b02      	subs	r3, #2
 8000ea4:	443c      	add	r4, r7
 8000ea6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000eaa:	fba0 9302 	umull	r9, r3, r0, r2
 8000eae:	eba4 040c 	sub.w	r4, r4, ip
 8000eb2:	429c      	cmp	r4, r3
 8000eb4:	46ce      	mov	lr, r9
 8000eb6:	469c      	mov	ip, r3
 8000eb8:	d351      	bcc.n	8000f5e <__udivmoddi4+0x28a>
 8000eba:	d04e      	beq.n	8000f5a <__udivmoddi4+0x286>
 8000ebc:	b155      	cbz	r5, 8000ed4 <__udivmoddi4+0x200>
 8000ebe:	ebb8 030e 	subs.w	r3, r8, lr
 8000ec2:	eb64 040c 	sbc.w	r4, r4, ip
 8000ec6:	fa04 f606 	lsl.w	r6, r4, r6
 8000eca:	40cb      	lsrs	r3, r1
 8000ecc:	431e      	orrs	r6, r3
 8000ece:	40cc      	lsrs	r4, r1
 8000ed0:	e9c5 6400 	strd	r6, r4, [r5]
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	e750      	b.n	8000d7a <__udivmoddi4+0xa6>
 8000ed8:	f1c2 0320 	rsb	r3, r2, #32
 8000edc:	fa20 f103 	lsr.w	r1, r0, r3
 8000ee0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ee4:	fa24 f303 	lsr.w	r3, r4, r3
 8000ee8:	4094      	lsls	r4, r2
 8000eea:	430c      	orrs	r4, r1
 8000eec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ef0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ef4:	fa1f f78c 	uxth.w	r7, ip
 8000ef8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000efc:	fb08 3110 	mls	r1, r8, r0, r3
 8000f00:	0c23      	lsrs	r3, r4, #16
 8000f02:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f06:	fb00 f107 	mul.w	r1, r0, r7
 8000f0a:	4299      	cmp	r1, r3
 8000f0c:	d908      	bls.n	8000f20 <__udivmoddi4+0x24c>
 8000f0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f12:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f16:	d22c      	bcs.n	8000f72 <__udivmoddi4+0x29e>
 8000f18:	4299      	cmp	r1, r3
 8000f1a:	d92a      	bls.n	8000f72 <__udivmoddi4+0x29e>
 8000f1c:	3802      	subs	r0, #2
 8000f1e:	4463      	add	r3, ip
 8000f20:	1a5b      	subs	r3, r3, r1
 8000f22:	b2a4      	uxth	r4, r4
 8000f24:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f28:	fb08 3311 	mls	r3, r8, r1, r3
 8000f2c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f30:	fb01 f307 	mul.w	r3, r1, r7
 8000f34:	42a3      	cmp	r3, r4
 8000f36:	d908      	bls.n	8000f4a <__udivmoddi4+0x276>
 8000f38:	eb1c 0404 	adds.w	r4, ip, r4
 8000f3c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f40:	d213      	bcs.n	8000f6a <__udivmoddi4+0x296>
 8000f42:	42a3      	cmp	r3, r4
 8000f44:	d911      	bls.n	8000f6a <__udivmoddi4+0x296>
 8000f46:	3902      	subs	r1, #2
 8000f48:	4464      	add	r4, ip
 8000f4a:	1ae4      	subs	r4, r4, r3
 8000f4c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f50:	e739      	b.n	8000dc6 <__udivmoddi4+0xf2>
 8000f52:	4604      	mov	r4, r0
 8000f54:	e6f0      	b.n	8000d38 <__udivmoddi4+0x64>
 8000f56:	4608      	mov	r0, r1
 8000f58:	e706      	b.n	8000d68 <__udivmoddi4+0x94>
 8000f5a:	45c8      	cmp	r8, r9
 8000f5c:	d2ae      	bcs.n	8000ebc <__udivmoddi4+0x1e8>
 8000f5e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f62:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f66:	3801      	subs	r0, #1
 8000f68:	e7a8      	b.n	8000ebc <__udivmoddi4+0x1e8>
 8000f6a:	4631      	mov	r1, r6
 8000f6c:	e7ed      	b.n	8000f4a <__udivmoddi4+0x276>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	e799      	b.n	8000ea6 <__udivmoddi4+0x1d2>
 8000f72:	4630      	mov	r0, r6
 8000f74:	e7d4      	b.n	8000f20 <__udivmoddi4+0x24c>
 8000f76:	46d6      	mov	lr, sl
 8000f78:	e77f      	b.n	8000e7a <__udivmoddi4+0x1a6>
 8000f7a:	4463      	add	r3, ip
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	e74d      	b.n	8000e1c <__udivmoddi4+0x148>
 8000f80:	4606      	mov	r6, r0
 8000f82:	4623      	mov	r3, r4
 8000f84:	4608      	mov	r0, r1
 8000f86:	e70f      	b.n	8000da8 <__udivmoddi4+0xd4>
 8000f88:	3e02      	subs	r6, #2
 8000f8a:	4463      	add	r3, ip
 8000f8c:	e730      	b.n	8000df0 <__udivmoddi4+0x11c>
 8000f8e:	bf00      	nop

08000f90 <__aeabi_idiv0>:
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop

08000f94 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b085      	sub	sp, #20
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000f9c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000fa0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000fa2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000fac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000fb0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000fb8:	68fb      	ldr	r3, [r7, #12]
}
 8000fba:	bf00      	nop
 8000fbc:	3714      	adds	r7, #20
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
	...

08000fc8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b086      	sub	sp, #24
 8000fcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000fce:	463b      	mov	r3, r7
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	601a      	str	r2, [r3, #0]
 8000fd4:	605a      	str	r2, [r3, #4]
 8000fd6:	609a      	str	r2, [r3, #8]
 8000fd8:	60da      	str	r2, [r3, #12]
 8000fda:	611a      	str	r2, [r3, #16]
 8000fdc:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000fde:	4b38      	ldr	r3, [pc, #224]	@ (80010c0 <MX_ADC1_Init+0xf8>)
 8000fe0:	4a38      	ldr	r2, [pc, #224]	@ (80010c4 <MX_ADC1_Init+0xfc>)
 8000fe2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000fe4:	4b36      	ldr	r3, [pc, #216]	@ (80010c0 <MX_ADC1_Init+0xf8>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000fea:	4b35      	ldr	r3, [pc, #212]	@ (80010c0 <MX_ADC1_Init+0xf8>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ff0:	4b33      	ldr	r3, [pc, #204]	@ (80010c0 <MX_ADC1_Init+0xf8>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000ff6:	4b32      	ldr	r3, [pc, #200]	@ (80010c0 <MX_ADC1_Init+0xf8>)
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ffc:	4b30      	ldr	r3, [pc, #192]	@ (80010c0 <MX_ADC1_Init+0xf8>)
 8000ffe:	2204      	movs	r2, #4
 8001000:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001002:	4b2f      	ldr	r3, [pc, #188]	@ (80010c0 <MX_ADC1_Init+0xf8>)
 8001004:	2200      	movs	r2, #0
 8001006:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001008:	4b2d      	ldr	r3, [pc, #180]	@ (80010c0 <MX_ADC1_Init+0xf8>)
 800100a:	2201      	movs	r2, #1
 800100c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 3;
 800100e:	4b2c      	ldr	r3, [pc, #176]	@ (80010c0 <MX_ADC1_Init+0xf8>)
 8001010:	2203      	movs	r2, #3
 8001012:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001014:	4b2a      	ldr	r3, [pc, #168]	@ (80010c0 <MX_ADC1_Init+0xf8>)
 8001016:	2200      	movs	r2, #0
 8001018:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T2_TRGO;
 800101c:	4b28      	ldr	r3, [pc, #160]	@ (80010c0 <MX_ADC1_Init+0xf8>)
 800101e:	f44f 62d8 	mov.w	r2, #1728	@ 0x6c0
 8001022:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001024:	4b26      	ldr	r3, [pc, #152]	@ (80010c0 <MX_ADC1_Init+0xf8>)
 8001026:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800102a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800102c:	4b24      	ldr	r3, [pc, #144]	@ (80010c0 <MX_ADC1_Init+0xf8>)
 800102e:	2200      	movs	r2, #0
 8001030:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001034:	4b22      	ldr	r3, [pc, #136]	@ (80010c0 <MX_ADC1_Init+0xf8>)
 8001036:	2200      	movs	r2, #0
 8001038:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800103a:	4b21      	ldr	r3, [pc, #132]	@ (80010c0 <MX_ADC1_Init+0xf8>)
 800103c:	2200      	movs	r2, #0
 800103e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001042:	481f      	ldr	r0, [pc, #124]	@ (80010c0 <MX_ADC1_Init+0xf8>)
 8001044:	f006 fc10 	bl	8007868 <HAL_ADC_Init>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 800104e:	f001 fe5b 	bl	8002d08 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001052:	4b1d      	ldr	r3, [pc, #116]	@ (80010c8 <MX_ADC1_Init+0x100>)
 8001054:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001056:	2306      	movs	r3, #6
 8001058:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 800105a:	2307      	movs	r3, #7
 800105c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800105e:	237f      	movs	r3, #127	@ 0x7f
 8001060:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001062:	2304      	movs	r3, #4
 8001064:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001066:	2300      	movs	r3, #0
 8001068:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800106a:	463b      	mov	r3, r7
 800106c:	4619      	mov	r1, r3
 800106e:	4814      	ldr	r0, [pc, #80]	@ (80010c0 <MX_ADC1_Init+0xf8>)
 8001070:	f006 fdde 	bl	8007c30 <HAL_ADC_ConfigChannel>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 800107a:	f001 fe45 	bl	8002d08 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800107e:	4b13      	ldr	r3, [pc, #76]	@ (80010cc <MX_ADC1_Init+0x104>)
 8001080:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001082:	230c      	movs	r3, #12
 8001084:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001086:	463b      	mov	r3, r7
 8001088:	4619      	mov	r1, r3
 800108a:	480d      	ldr	r0, [pc, #52]	@ (80010c0 <MX_ADC1_Init+0xf8>)
 800108c:	f006 fdd0 	bl	8007c30 <HAL_ADC_ConfigChannel>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8001096:	f001 fe37 	bl	8002d08 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800109a:	4b0d      	ldr	r3, [pc, #52]	@ (80010d0 <MX_ADC1_Init+0x108>)
 800109c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800109e:	2312      	movs	r3, #18
 80010a0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010a2:	463b      	mov	r3, r7
 80010a4:	4619      	mov	r1, r3
 80010a6:	4806      	ldr	r0, [pc, #24]	@ (80010c0 <MX_ADC1_Init+0xf8>)
 80010a8:	f006 fdc2 	bl	8007c30 <HAL_ADC_ConfigChannel>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 80010b2:	f001 fe29 	bl	8002d08 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010b6:	bf00      	nop
 80010b8:	3718      	adds	r7, #24
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	2000038c 	.word	0x2000038c
 80010c4:	50040000 	.word	0x50040000
 80010c8:	80000001 	.word	0x80000001
 80010cc:	c7520000 	.word	0xc7520000
 80010d0:	25b00200 	.word	0x25b00200

080010d4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b088      	sub	sp, #32
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010dc:	f107 030c 	add.w	r3, r7, #12
 80010e0:	2200      	movs	r2, #0
 80010e2:	601a      	str	r2, [r3, #0]
 80010e4:	605a      	str	r2, [r3, #4]
 80010e6:	609a      	str	r2, [r3, #8]
 80010e8:	60da      	str	r2, [r3, #12]
 80010ea:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a22      	ldr	r2, [pc, #136]	@ (800117c <HAL_ADC_MspInit+0xa8>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d13e      	bne.n	8001174 <HAL_ADC_MspInit+0xa0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80010f6:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80010fa:	f7ff ff4b 	bl	8000f94 <LL_AHB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010fe:	2001      	movs	r0, #1
 8001100:	f7ff ff48 	bl	8000f94 <LL_AHB2_GRP1_EnableClock>
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001104:	2310      	movs	r3, #16
 8001106:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001108:	2303      	movs	r3, #3
 800110a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110c:	2300      	movs	r3, #0
 800110e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001110:	f107 030c 	add.w	r3, r7, #12
 8001114:	4619      	mov	r1, r3
 8001116:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800111a:	f007 ffcb 	bl	80090b4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800111e:	4b18      	ldr	r3, [pc, #96]	@ (8001180 <HAL_ADC_MspInit+0xac>)
 8001120:	4a18      	ldr	r2, [pc, #96]	@ (8001184 <HAL_ADC_MspInit+0xb0>)
 8001122:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001124:	4b16      	ldr	r3, [pc, #88]	@ (8001180 <HAL_ADC_MspInit+0xac>)
 8001126:	2205      	movs	r2, #5
 8001128:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800112a:	4b15      	ldr	r3, [pc, #84]	@ (8001180 <HAL_ADC_MspInit+0xac>)
 800112c:	2200      	movs	r2, #0
 800112e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001130:	4b13      	ldr	r3, [pc, #76]	@ (8001180 <HAL_ADC_MspInit+0xac>)
 8001132:	2200      	movs	r2, #0
 8001134:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001136:	4b12      	ldr	r3, [pc, #72]	@ (8001180 <HAL_ADC_MspInit+0xac>)
 8001138:	2280      	movs	r2, #128	@ 0x80
 800113a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800113c:	4b10      	ldr	r3, [pc, #64]	@ (8001180 <HAL_ADC_MspInit+0xac>)
 800113e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001142:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001144:	4b0e      	ldr	r3, [pc, #56]	@ (8001180 <HAL_ADC_MspInit+0xac>)
 8001146:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800114a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800114c:	4b0c      	ldr	r3, [pc, #48]	@ (8001180 <HAL_ADC_MspInit+0xac>)
 800114e:	2220      	movs	r2, #32
 8001150:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001152:	4b0b      	ldr	r3, [pc, #44]	@ (8001180 <HAL_ADC_MspInit+0xac>)
 8001154:	2200      	movs	r2, #0
 8001156:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001158:	4809      	ldr	r0, [pc, #36]	@ (8001180 <HAL_ADC_MspInit+0xac>)
 800115a:	f007 fbd7 	bl	800890c <HAL_DMA_Init>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <HAL_ADC_MspInit+0x94>
    {
      Error_Handler();
 8001164:	f001 fdd0 	bl	8002d08 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	4a05      	ldr	r2, [pc, #20]	@ (8001180 <HAL_ADC_MspInit+0xac>)
 800116c:	64da      	str	r2, [r3, #76]	@ 0x4c
 800116e:	4a04      	ldr	r2, [pc, #16]	@ (8001180 <HAL_ADC_MspInit+0xac>)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001174:	bf00      	nop
 8001176:	3720      	adds	r7, #32
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	50040000 	.word	0x50040000
 8001180:	200003f0 	.word	0x200003f0
 8001184:	40020008 	.word	0x40020008

08001188 <HAL_ADC_ConvCpltCallback>:
  /* USER CODE END ADC1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8001188:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800118c:	b082      	sub	sp, #8
 800118e:	af00      	add	r7, sp, #0
 8001190:	6078      	str	r0, [r7, #4]

	if(hadc->Instance==ADC1){
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4a54      	ldr	r2, [pc, #336]	@ (80012e8 <HAL_ADC_ConvCpltCallback+0x160>)
 8001198:	4293      	cmp	r3, r2
 800119a:	f040 8091 	bne.w	80012c0 <HAL_ADC_ConvCpltCallback+0x138>
		vrefint=(float) ((4095.0*1.212)/rawdata[0]);
 800119e:	4b53      	ldr	r3, [pc, #332]	@ (80012ec <HAL_ADC_ConvCpltCallback+0x164>)
 80011a0:	881b      	ldrh	r3, [r3, #0]
 80011a2:	4618      	mov	r0, r3
 80011a4:	f7ff f996 	bl	80004d4 <__aeabi_i2d>
 80011a8:	4602      	mov	r2, r0
 80011aa:	460b      	mov	r3, r1
 80011ac:	a14a      	add	r1, pc, #296	@ (adr r1, 80012d8 <HAL_ADC_ConvCpltCallback+0x150>)
 80011ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80011b2:	f7ff fb23 	bl	80007fc <__aeabi_ddiv>
 80011b6:	4602      	mov	r2, r0
 80011b8:	460b      	mov	r3, r1
 80011ba:	4610      	mov	r0, r2
 80011bc:	4619      	mov	r1, r3
 80011be:	f7ff fceb 	bl	8000b98 <__aeabi_d2f>
 80011c2:	4603      	mov	r3, r0
 80011c4:	4a4a      	ldr	r2, [pc, #296]	@ (80012f0 <HAL_ADC_ConvCpltCallback+0x168>)
 80011c6:	6013      	str	r3, [r2, #0]
//		vtemp=(float) ((vrefint*rawdata[1])/4095.0);
		temp=(float) (((100.0)/(tscal2-tscal1))*(rawdata[1]*(vrefint/3.0)-tscal1))+30.0;
 80011c8:	4b4a      	ldr	r3, [pc, #296]	@ (80012f4 <HAL_ADC_ConvCpltCallback+0x16c>)
 80011ca:	ed93 7a00 	vldr	s14, [r3]
 80011ce:	4b4a      	ldr	r3, [pc, #296]	@ (80012f8 <HAL_ADC_ConvCpltCallback+0x170>)
 80011d0:	edd3 7a00 	vldr	s15, [r3]
 80011d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011d8:	ee17 0a90 	vmov	r0, s15
 80011dc:	f7ff f98c 	bl	80004f8 <__aeabi_f2d>
 80011e0:	4602      	mov	r2, r0
 80011e2:	460b      	mov	r3, r1
 80011e4:	f04f 0000 	mov.w	r0, #0
 80011e8:	4944      	ldr	r1, [pc, #272]	@ (80012fc <HAL_ADC_ConvCpltCallback+0x174>)
 80011ea:	f7ff fb07 	bl	80007fc <__aeabi_ddiv>
 80011ee:	4602      	mov	r2, r0
 80011f0:	460b      	mov	r3, r1
 80011f2:	4690      	mov	r8, r2
 80011f4:	4699      	mov	r9, r3
 80011f6:	4b3d      	ldr	r3, [pc, #244]	@ (80012ec <HAL_ADC_ConvCpltCallback+0x164>)
 80011f8:	885b      	ldrh	r3, [r3, #2]
 80011fa:	4618      	mov	r0, r3
 80011fc:	f7ff f96a 	bl	80004d4 <__aeabi_i2d>
 8001200:	4604      	mov	r4, r0
 8001202:	460d      	mov	r5, r1
 8001204:	4b3a      	ldr	r3, [pc, #232]	@ (80012f0 <HAL_ADC_ConvCpltCallback+0x168>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4618      	mov	r0, r3
 800120a:	f7ff f975 	bl	80004f8 <__aeabi_f2d>
 800120e:	f04f 0200 	mov.w	r2, #0
 8001212:	4b3b      	ldr	r3, [pc, #236]	@ (8001300 <HAL_ADC_ConvCpltCallback+0x178>)
 8001214:	f7ff faf2 	bl	80007fc <__aeabi_ddiv>
 8001218:	4602      	mov	r2, r0
 800121a:	460b      	mov	r3, r1
 800121c:	4620      	mov	r0, r4
 800121e:	4629      	mov	r1, r5
 8001220:	f7ff f9c2 	bl	80005a8 <__aeabi_dmul>
 8001224:	4602      	mov	r2, r0
 8001226:	460b      	mov	r3, r1
 8001228:	4614      	mov	r4, r2
 800122a:	461d      	mov	r5, r3
 800122c:	4b32      	ldr	r3, [pc, #200]	@ (80012f8 <HAL_ADC_ConvCpltCallback+0x170>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4618      	mov	r0, r3
 8001232:	f7ff f961 	bl	80004f8 <__aeabi_f2d>
 8001236:	4602      	mov	r2, r0
 8001238:	460b      	mov	r3, r1
 800123a:	4620      	mov	r0, r4
 800123c:	4629      	mov	r1, r5
 800123e:	f7fe fffb 	bl	8000238 <__aeabi_dsub>
 8001242:	4602      	mov	r2, r0
 8001244:	460b      	mov	r3, r1
 8001246:	4640      	mov	r0, r8
 8001248:	4649      	mov	r1, r9
 800124a:	f7ff f9ad 	bl	80005a8 <__aeabi_dmul>
 800124e:	4602      	mov	r2, r0
 8001250:	460b      	mov	r3, r1
 8001252:	4610      	mov	r0, r2
 8001254:	4619      	mov	r1, r3
 8001256:	f7ff fc9f 	bl	8000b98 <__aeabi_d2f>
 800125a:	ee07 0a10 	vmov	s14, r0
 800125e:	eef3 7a0e 	vmov.f32	s15, #62	@ 0x41f00000  30.0
 8001262:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001266:	4b27      	ldr	r3, [pc, #156]	@ (8001304 <HAL_ADC_ConvCpltCallback+0x17c>)
 8001268:	edc3 7a00 	vstr	s15, [r3]
		vbat=(float) 2*(rawdata[2]/4095.0)*vrefint;
 800126c:	4b1f      	ldr	r3, [pc, #124]	@ (80012ec <HAL_ADC_ConvCpltCallback+0x164>)
 800126e:	889b      	ldrh	r3, [r3, #4]
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff f92f 	bl	80004d4 <__aeabi_i2d>
 8001276:	a31a      	add	r3, pc, #104	@ (adr r3, 80012e0 <HAL_ADC_ConvCpltCallback+0x158>)
 8001278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800127c:	f7ff fabe 	bl	80007fc <__aeabi_ddiv>
 8001280:	4602      	mov	r2, r0
 8001282:	460b      	mov	r3, r1
 8001284:	4610      	mov	r0, r2
 8001286:	4619      	mov	r1, r3
 8001288:	4602      	mov	r2, r0
 800128a:	460b      	mov	r3, r1
 800128c:	f7fe ffd6 	bl	800023c <__adddf3>
 8001290:	4602      	mov	r2, r0
 8001292:	460b      	mov	r3, r1
 8001294:	4614      	mov	r4, r2
 8001296:	461d      	mov	r5, r3
 8001298:	4b15      	ldr	r3, [pc, #84]	@ (80012f0 <HAL_ADC_ConvCpltCallback+0x168>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4618      	mov	r0, r3
 800129e:	f7ff f92b 	bl	80004f8 <__aeabi_f2d>
 80012a2:	4602      	mov	r2, r0
 80012a4:	460b      	mov	r3, r1
 80012a6:	4620      	mov	r0, r4
 80012a8:	4629      	mov	r1, r5
 80012aa:	f7ff f97d 	bl	80005a8 <__aeabi_dmul>
 80012ae:	4602      	mov	r2, r0
 80012b0:	460b      	mov	r3, r1
 80012b2:	4610      	mov	r0, r2
 80012b4:	4619      	mov	r1, r3
 80012b6:	f7ff fc6f 	bl	8000b98 <__aeabi_d2f>
 80012ba:	4603      	mov	r3, r0
 80012bc:	4a12      	ldr	r2, [pc, #72]	@ (8001308 <HAL_ADC_ConvCpltCallback+0x180>)
 80012be:	6013      	str	r3, [r2, #0]

	}
	HAL_ADC_Start_DMA(&hadc1,(uint32_t*)rawdata, 3);
 80012c0:	2203      	movs	r2, #3
 80012c2:	490a      	ldr	r1, [pc, #40]	@ (80012ec <HAL_ADC_ConvCpltCallback+0x164>)
 80012c4:	4811      	ldr	r0, [pc, #68]	@ (800130c <HAL_ADC_ConvCpltCallback+0x184>)
 80012c6:	f006 fc1b 	bl	8007b00 <HAL_ADC_Start_DMA>



}
 80012ca:	bf00      	nop
 80012cc:	3708      	adds	r7, #8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80012d4:	f3af 8000 	nop.w
 80012d8:	d70a3d70 	.word	0xd70a3d70
 80012dc:	40b36323 	.word	0x40b36323
 80012e0:	00000000 	.word	0x00000000
 80012e4:	40affe00 	.word	0x40affe00
 80012e8:	50040000 	.word	0x50040000
 80012ec:	20000990 	.word	0x20000990
 80012f0:	2000099c 	.word	0x2000099c
 80012f4:	20000008 	.word	0x20000008
 80012f8:	2000000c 	.word	0x2000000c
 80012fc:	40590000 	.word	0x40590000
 8001300:	40080000 	.word	0x40080000
 8001304:	20000998 	.word	0x20000998
 8001308:	200009a0 	.word	0x200009a0
 800130c:	2000038c 	.word	0x2000038c

08001310 <APPD_EnableCPU2>:
/* USER CODE END APPD_Init */
  return;
}

void APPD_EnableCPU2( void )
{
 8001310:	b5b0      	push	{r4, r5, r7, lr}
 8001312:	b088      	sub	sp, #32
 8001314:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 8001316:	4b0b      	ldr	r3, [pc, #44]	@ (8001344 <APPD_EnableCPU2+0x34>)
 8001318:	1d3c      	adds	r4, r7, #4
 800131a:	461d      	mov	r5, r3
 800131c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800131e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001320:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001324:	c403      	stmia	r4!, {r0, r1}
 8001326:	8022      	strh	r2, [r4, #0]
 8001328:	3402      	adds	r4, #2
 800132a:	0c13      	lsrs	r3, r2, #16
 800132c:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 800132e:	f015 fd95 	bl	8016e5c <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 8001332:	1d3b      	adds	r3, r7, #4
 8001334:	4618      	mov	r0, r3
 8001336:	f015 f826 	bl	8016386 <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 800133a:	bf00      	nop
}
 800133c:	3720      	adds	r7, #32
 800133e:	46bd      	mov	sp, r7
 8001340:	bdb0      	pop	{r4, r5, r7, pc}
 8001342:	bf00      	nop
 8001344:	0801fc78 	.word	0x0801fc78

08001348 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8001348:	b480      	push	{r7}
 800134a:	b083      	sub	sp, #12
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8001350:	4b07      	ldr	r3, [pc, #28]	@ (8001370 <LL_C2_PWR_SetPowerMode+0x28>)
 8001352:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001356:	f023 0207 	bic.w	r2, r3, #7
 800135a:	4905      	ldr	r1, [pc, #20]	@ (8001370 <LL_C2_PWR_SetPowerMode+0x28>)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	4313      	orrs	r3, r2
 8001360:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8001364:	bf00      	nop
 8001366:	370c      	adds	r7, #12
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr
 8001370:	58000400 	.word	0x58000400

08001374 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8001374:	b480      	push	{r7}
 8001376:	b083      	sub	sp, #12
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 800137c:	4b06      	ldr	r3, [pc, #24]	@ (8001398 <LL_EXTI_EnableIT_32_63+0x24>)
 800137e:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8001382:	4905      	ldr	r1, [pc, #20]	@ (8001398 <LL_EXTI_EnableIT_32_63+0x24>)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	4313      	orrs	r3, r2
 8001388:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 800138c:	bf00      	nop
 800138e:	370c      	adds	r7, #12
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr
 8001398:	58000800 	.word	0x58000800

0800139c <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 80013a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80013a8:	4a0a      	ldr	r2, [pc, #40]	@ (80013d4 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 80013aa:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 80013ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80013b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80013b6:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	021b      	lsls	r3, r3, #8
 80013be:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80013c2:	4313      	orrs	r3, r2
 80013c4:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
}
 80013c8:	bf00      	nop
 80013ca:	370c      	adds	r7, #12
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr
 80013d4:	cafecafe 	.word	0xcafecafe

080013d8 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 80013e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80013e4:	689b      	ldr	r3, [r3, #8]
 80013e6:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 80013ea:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	4313      	orrs	r3, r2
 80013f2:	608b      	str	r3, [r1, #8]
}
 80013f4:	bf00      	nop
 80013f6:	370c      	adds	r7, #12
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr

08001400 <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 8001404:	4b04      	ldr	r3, [pc, #16]	@ (8001418 <LL_DBGMCU_GetDeviceID+0x18>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 800140c:	4618      	mov	r0, r3
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop
 8001418:	e0042000 	.word	0xe0042000

0800141c <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 8001420:	4b04      	ldr	r3, [pc, #16]	@ (8001434 <LL_DBGMCU_GetRevisionID+0x18>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	0c1b      	lsrs	r3, r3, #16
 8001426:	b29b      	uxth	r3, r3
}
 8001428:	4618      	mov	r0, r3
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr
 8001432:	bf00      	nop
 8001434:	e0042000 	.word	0xe0042000

08001438 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800143c:	4b05      	ldr	r3, [pc, #20]	@ (8001454 <LL_LPM_EnableSleep+0x1c>)
 800143e:	691b      	ldr	r3, [r3, #16]
 8001440:	4a04      	ldr	r2, [pc, #16]	@ (8001454 <LL_LPM_EnableSleep+0x1c>)
 8001442:	f023 0304 	bic.w	r3, r3, #4
 8001446:	6113      	str	r3, [r2, #16]
}
 8001448:	bf00      	nop
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop
 8001454:	e000ed00 	.word	0xe000ed00

08001458 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8001458:	b480      	push	{r7}
 800145a:	b083      	sub	sp, #12
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	22ff      	movs	r2, #255	@ 0xff
 8001464:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8001466:	bf00      	nop
 8001468:	370c      	adds	r7, #12
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr

08001472 <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 8001472:	b480      	push	{r7}
 8001474:	b083      	sub	sp, #12
 8001476:	af00      	add	r7, sp, #0
 8001478:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	22ca      	movs	r2, #202	@ 0xca
 800147e:	625a      	str	r2, [r3, #36]	@ 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2253      	movs	r2, #83	@ 0x53
 8001484:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8001486:	bf00      	nop
 8001488:	370c      	adds	r7, #12
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr

08001492 <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 8001492:	b480      	push	{r7}
 8001494:	b083      	sub	sp, #12
 8001496:	af00      	add	r7, sp, #0
 8001498:	6078      	str	r0, [r7, #4]
 800149a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	689b      	ldr	r3, [r3, #8]
 80014a0:	f023 0207 	bic.w	r2, r3, #7
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	431a      	orrs	r2, r3
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	609a      	str	r2, [r3, #8]
}
 80014ac:	bf00      	nop
 80014ae:	370c      	adds	r7, #12
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr

080014b8 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80014bc:	4b04      	ldr	r3, [pc, #16]	@ (80014d0 <MX_APPE_Config+0x18>)
 80014be:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80014c2:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 80014c4:	f000 f824 	bl	8001510 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 80014c8:	f000 f829 	bl	800151e <Config_HSE>

  return;
 80014cc:	bf00      	nop
}
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	58004000 	.word	0x58004000

080014d4 <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 80014d8:	f000 f835 	bl	8001546 <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 80014dc:	f000 f84e 	bl	800157c <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 80014e0:	4903      	ldr	r1, [pc, #12]	@ (80014f0 <MX_APPE_Init+0x1c>)
 80014e2:	2000      	movs	r0, #0
 80014e4:	f000 fe44 	bl	8002170 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 80014e8:	f000 f856 	bl	8001598 <appe_Tl_Init>
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */

   return;
 80014ec:	bf00      	nop
}
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	20000d28 	.word	0x20000d28

080014f4 <Init_Smps>:

void Init_Smps(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 80014f8:	bf00      	nop
}
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr

08001502 <Init_Exti>:

void Init_Exti(void)
{
 8001502:	b580      	push	{r7, lr}
 8001504:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 8001506:	2050      	movs	r0, #80	@ 0x50
 8001508:	f7ff ff34 	bl	8001374 <LL_EXTI_EnableIT_32_63>

  return;
 800150c:	bf00      	nop
}
 800150e:	bd80      	pop	{r7, pc}

08001510 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0
  Reset_BackupDomain();

  Reset_IPCC();
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 8001514:	bf00      	nop
}
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr

0800151e <Config_HSE>:
  return;
}
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 800151e:	b580      	push	{r7, lr}
 8001520:	b082      	sub	sp, #8
 8001522:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8001524:	2000      	movs	r0, #0
 8001526:	f015 fd25 	bl	8016f74 <OTP_Read>
 800152a:	6078      	str	r0, [r7, #4]
  if (p_otp)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d005      	beq.n	800153e <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	799b      	ldrb	r3, [r3, #6]
 8001536:	4618      	mov	r0, r3
 8001538:	f7ff ff30 	bl	800139c <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 800153c:	bf00      	nop
 800153e:	bf00      	nop
}
 8001540:	3708      	adds	r7, #8
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}

08001546 <System_Init>:

static void System_Init(void)
{
 8001546:	b580      	push	{r7, lr}
 8001548:	af00      	add	r7, sp, #0
  Init_Smps();
 800154a:	f7ff ffd3 	bl	80014f4 <Init_Smps>

  Init_Exti();
 800154e:	f7ff ffd8 	bl	8001502 <Init_Exti>

  Init_Rtc();
 8001552:	f000 f803 	bl	800155c <Init_Rtc>

  return;
 8001556:	bf00      	nop
}
 8001558:	bd80      	pop	{r7, pc}
	...

0800155c <Init_Rtc>:

static void Init_Rtc(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8001560:	4805      	ldr	r0, [pc, #20]	@ (8001578 <Init_Rtc+0x1c>)
 8001562:	f7ff ff86 	bl	8001472 <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 8001566:	2100      	movs	r1, #0
 8001568:	4803      	ldr	r0, [pc, #12]	@ (8001578 <Init_Rtc+0x1c>)
 800156a:	f7ff ff92 	bl	8001492 <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 800156e:	4802      	ldr	r0, [pc, #8]	@ (8001578 <Init_Rtc+0x1c>)
 8001570:	f7ff ff72 	bl	8001458 <LL_RTC_EnableWriteProtection>

  return;
 8001574:	bf00      	nop
}
 8001576:	bd80      	pop	{r7, pc}
 8001578:	40002800 	.word	0x40002800

0800157c <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8001580:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001584:	f7ff ff28 	bl	80013d8 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8001588:	f017 ff02 	bl	8019390 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 800158c:	2004      	movs	r0, #4
 800158e:	f7ff fedb 	bl	8001348 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 8001592:	bf00      	nop
}
 8001594:	bd80      	pop	{r7, pc}
	...

08001598 <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b088      	sub	sp, #32
 800159c:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 800159e:	f015 faa7 	bl	8016af0 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 80015a2:	4a11      	ldr	r2, [pc, #68]	@ (80015e8 <appe_Tl_Init+0x50>)
 80015a4:	2100      	movs	r1, #0
 80015a6:	2008      	movs	r0, #8
 80015a8:	f018 f830 	bl	801960c <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 80015ac:	4b0f      	ldr	r3, [pc, #60]	@ (80015ec <appe_Tl_Init+0x54>)
 80015ae:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 80015b0:	4b0f      	ldr	r3, [pc, #60]	@ (80015f0 <appe_Tl_Init+0x58>)
 80015b2:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 80015b4:	463b      	mov	r3, r7
 80015b6:	4619      	mov	r1, r3
 80015b8:	480e      	ldr	r0, [pc, #56]	@ (80015f4 <appe_Tl_Init+0x5c>)
 80015ba:	f015 f95b 	bl	8016874 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 80015be:	4b0e      	ldr	r3, [pc, #56]	@ (80015f8 <appe_Tl_Init+0x60>)
 80015c0:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 80015c2:	4b0e      	ldr	r3, [pc, #56]	@ (80015fc <appe_Tl_Init+0x64>)
 80015c4:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 80015c6:	4b0e      	ldr	r3, [pc, #56]	@ (8001600 <appe_Tl_Init+0x68>)
 80015c8:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 80015ca:	f240 533c 	movw	r3, #1340	@ 0x53c
 80015ce:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 80015d0:	f107 0308 	add.w	r3, r7, #8
 80015d4:	4618      	mov	r0, r3
 80015d6:	f015 fbcd 	bl	8016d74 <TL_MM_Init>

  TL_Enable();
 80015da:	f015 fa83 	bl	8016ae4 <TL_Enable>

  return;
 80015de:	bf00      	nop
}
 80015e0:	3720      	adds	r7, #32
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	080168ad 	.word	0x080168ad
 80015ec:	20030734 	.word	0x20030734
 80015f0:	08001605 	.word	0x08001605
 80015f4:	0800161d 	.word	0x0800161d
 80015f8:	2003094c 	.word	0x2003094c
 80015fc:	20030840 	.word	0x20030840
 8001600:	200301f8 	.word	0x200301f8

08001604 <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 8001604:	b480      	push	{r7}
 8001606:	b083      	sub	sp, #12
 8001608:	af00      	add	r7, sp, #0
 800160a:	4603      	mov	r3, r0
 800160c:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 800160e:	bf00      	nop
}
 8001610:	370c      	adds	r7, #12
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr
	...

0800161c <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b088      	sub	sp, #32
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	330b      	adds	r3, #11
 800162a:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 800162c:	69fb      	ldr	r3, [r7, #28]
 800162e:	881b      	ldrh	r3, [r3, #0]
 8001630:	b29b      	uxth	r3, r3
 8001632:	f5a3 4312 	sub.w	r3, r3, #37376	@ 0x9200
 8001636:	2b07      	cmp	r3, #7
 8001638:	d81f      	bhi.n	800167a <APPE_SysUserEvtRx+0x5e>
 800163a:	a201      	add	r2, pc, #4	@ (adr r2, 8001640 <APPE_SysUserEvtRx+0x24>)
 800163c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001640:	08001661 	.word	0x08001661
 8001644:	08001673 	.word	0x08001673
 8001648:	0800167b 	.word	0x0800167b
 800164c:	0800167b 	.word	0x0800167b
 8001650:	0800167b 	.word	0x0800167b
 8001654:	0800167b 	.word	0x0800167b
 8001658:	0800167b 	.word	0x0800167b
 800165c:	0800167b 	.word	0x0800167b
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 8001660:	f107 030c 	add.w	r3, r7, #12
 8001664:	4618      	mov	r0, r3
 8001666:	f014 febb 	bl	80163e0 <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
    APPE_SysEvtReadyProcessing(pPayload);
 800166a:	6878      	ldr	r0, [r7, #4]
 800166c:	f000 f81b 	bl	80016a6 <APPE_SysEvtReadyProcessing>
    break;
 8001670:	e004      	b.n	800167c <APPE_SysUserEvtRx+0x60>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
    APPE_SysEvtError(pPayload);
 8001672:	6878      	ldr	r0, [r7, #4]
 8001674:	f000 f806 	bl	8001684 <APPE_SysEvtError>
    break;
 8001678:	e000      	b.n	800167c <APPE_SysUserEvtRx+0x60>
  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
    break;

  default:
    break;
 800167a:	bf00      	nop
  }

  return;
 800167c:	bf00      	nop
}
 800167e:	3720      	adds	r7, #32
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}

08001684 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 8001684:	b480      	push	{r7}
 8001686:	b085      	sub	sp, #20
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	330b      	adds	r3, #11
 8001692:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	3302      	adds	r3, #2
 8001698:	60bb      	str	r3, [r7, #8]
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 800169a:	bf00      	nop
}
 800169c:	3714      	adds	r7, #20
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr

080016a6 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 80016a6:	b580      	push	{r7, lr}
 80016a8:	b08a      	sub	sp, #40	@ 0x28
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 80016ae:	f107 0308 	add.w	r3, r7, #8
 80016b2:	2200      	movs	r2, #0
 80016b4:	601a      	str	r2, [r3, #0]
 80016b6:	605a      	str	r2, [r3, #4]
 80016b8:	609a      	str	r2, [r3, #8]
 80016ba:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 80016bc:	2300      	movs	r3, #0
 80016be:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t DeviceID=0;
 80016c0:	2300      	movs	r3, #0
 80016c2:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	330b      	adds	r3, #11
 80016ca:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 80016cc:	69fb      	ldr	r3, [r7, #28]
 80016ce:	3302      	adds	r3, #2
 80016d0:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 80016d2:	69bb      	ldr	r3, [r7, #24]
 80016d4:	781b      	ldrb	r3, [r3, #0]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d11d      	bne.n	8001716 <APPE_SysEvtReadyProcessing+0x70>
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");

    /* Traces channel initialization */
    APPD_EnableCPU2();
 80016da:	f7ff fe19 	bl	8001310 <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 80016de:	230f      	movs	r3, #15
 80016e0:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 80016e2:	237f      	movs	r3, #127	@ 0x7f
 80016e4:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 80016e6:	f7ff fe99 	bl	800141c <LL_DBGMCU_GetRevisionID>
 80016ea:	6278      	str	r0, [r7, #36]	@ 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);

    config_param.RevisionID = (uint16_t)RevisionID;
 80016ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016ee:	b29b      	uxth	r3, r3
 80016f0:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 80016f2:	f7ff fe85 	bl	8001400 <LL_DBGMCU_GetDeviceID>
 80016f6:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
    config_param.DeviceID = (uint16_t)DeviceID;
 80016f8:	6a3b      	ldr	r3, [r7, #32]
 80016fa:	b29b      	uxth	r3, r3
 80016fc:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 80016fe:	f107 0308 	add.w	r3, r7, #8
 8001702:	4618      	mov	r0, r3
 8001704:	f014 fe56 	bl	80163b4 <SHCI_C2_Config>

    APP_BLE_Init();
 8001708:	f016 fa38 	bl	8017b7c <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 800170c:	2100      	movs	r1, #0
 800170e:	2001      	movs	r0, #1
 8001710:	f017 fe50 	bl	80193b4 <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 8001714:	e007      	b.n	8001726 <APPE_SysEvtReadyProcessing+0x80>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 8001716:	69bb      	ldr	r3, [r7, #24]
 8001718:	781b      	ldrb	r3, [r3, #0]
 800171a:	2b01      	cmp	r3, #1
 800171c:	d103      	bne.n	8001726 <APPE_SysEvtReadyProcessing+0x80>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2200      	movs	r2, #0
 8001722:	701a      	strb	r2, [r3, #0]
  return;
 8001724:	bf00      	nop
 8001726:	bf00      	nop
}
 8001728:	3728      	adds	r7, #40	@ 0x28
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}

0800172e <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 800172e:	b580      	push	{r7, lr}
 8001730:	b084      	sub	sp, #16
 8001732:	af00      	add	r7, sp, #0
 8001734:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001736:	f005 feab 	bl	8007490 <HAL_GetTick>
 800173a:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001746:	d00a      	beq.n	800175e <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 8001748:	f005 feba 	bl	80074c0 <HAL_GetTickFreq>
 800174c:	4603      	mov	r3, r0
 800174e:	461a      	mov	r2, r3
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	4413      	add	r3, r2
 8001754:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001756:	e002      	b.n	800175e <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 8001758:	f7ff fe6e 	bl	8001438 <LL_LPM_EnableSleep>
     */
  #if defined (__CC_ARM) || defined (__ARMCC_VERSION)
    __force_stores();
  #endif /* __ARMCC_VERSION */

    __WFI();
 800175c:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 800175e:	f005 fe97 	bl	8007490 <HAL_GetTick>
 8001762:	4602      	mov	r2, r0
 8001764:	68bb      	ldr	r3, [r7, #8]
 8001766:	1ad3      	subs	r3, r2, r3
 8001768:	68fa      	ldr	r2, [r7, #12]
 800176a:	429a      	cmp	r2, r3
 800176c:	d8f4      	bhi.n	8001758 <HAL_Delay+0x2a>
  }
}
 800176e:	bf00      	nop
 8001770:	bf00      	nop
 8001772:	3710      	adds	r7, #16
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}

08001778 <MX_APPE_Process>:

void MX_APPE_Process(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800177c:	f04f 30ff 	mov.w	r0, #4294967295
 8001780:	f017 fe48 	bl	8019414 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 8001784:	bf00      	nop
 8001786:	bd80      	pop	{r7, pc}

08001788 <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 800178c:	bf00      	nop
}
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr

08001796 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 8001796:	b580      	push	{r7, lr}
 8001798:	b082      	sub	sp, #8
 800179a:	af00      	add	r7, sp, #0
 800179c:	6078      	str	r0, [r7, #4]
 800179e:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 80017a0:	f04f 30ff 	mov.w	r0, #4294967295
 80017a4:	f017 fe36 	bl	8019414 <UTIL_SEQ_Run>
  return;
 80017a8:	bf00      	nop
}
 80017aa:	3708      	adds	r7, #8
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}

080017b0 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b082      	sub	sp, #8
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 80017b8:	2100      	movs	r1, #0
 80017ba:	2008      	movs	r0, #8
 80017bc:	f017 ff48 	bl	8019650 <UTIL_SEQ_SetTask>
  return;
 80017c0:	bf00      	nop
}
 80017c2:	3708      	adds	r7, #8
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}

080017c8 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 80017d0:	2002      	movs	r0, #2
 80017d2:	f017 ffa9 	bl	8019728 <UTIL_SEQ_SetEvt>
  return;
 80017d6:	bf00      	nop
}
 80017d8:	3708      	adds	r7, #8
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}

080017de <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 80017de:	b580      	push	{r7, lr}
 80017e0:	b082      	sub	sp, #8
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 80017e6:	2002      	movs	r0, #2
 80017e8:	f017 ffbe 	bl	8019768 <UTIL_SEQ_WaitEvt>
  return;
 80017ec:	bf00      	nop
}
 80017ee:	3708      	adds	r7, #8
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}

080017f4 <LL_AHB1_GRP1_EnableClock>:
{
 80017f4:	b480      	push	{r7}
 80017f6:	b085      	sub	sp, #20
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80017fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001800:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8001802:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	4313      	orrs	r3, r2
 800180a:	648b      	str	r3, [r1, #72]	@ 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800180c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001810:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	4013      	ands	r3, r2
 8001816:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001818:	68fb      	ldr	r3, [r7, #12]
}
 800181a:	bf00      	nop
 800181c:	3714      	adds	r7, #20
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr

08001826 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001826:	b580      	push	{r7, lr}
 8001828:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800182a:	2004      	movs	r0, #4
 800182c:	f7ff ffe2 	bl	80017f4 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001830:	2001      	movs	r0, #1
 8001832:	f7ff ffdf 	bl	80017f4 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 4, 0);
 8001836:	2200      	movs	r2, #0
 8001838:	2104      	movs	r1, #4
 800183a:	200b      	movs	r0, #11
 800183c:	f007 f807 	bl	800884e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001840:	200b      	movs	r0, #11
 8001842:	f007 f81e 	bl	8008882 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 2, 0);
 8001846:	2200      	movs	r2, #0
 8001848:	2102      	movs	r1, #2
 800184a:	200c      	movs	r0, #12
 800184c:	f006 ffff 	bl	800884e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001850:	200c      	movs	r0, #12
 8001852:	f007 f816 	bl	8008882 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001856:	2200      	movs	r2, #0
 8001858:	2100      	movs	r1, #0
 800185a:	200d      	movs	r0, #13
 800185c:	f006 fff7 	bl	800884e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001860:	200d      	movs	r0, #13
 8001862:	f007 f80e 	bl	8008882 <HAL_NVIC_EnableIRQ>

}
 8001866:	bf00      	nop
 8001868:	bd80      	pop	{r7, pc}

0800186a <LL_AHB2_GRP1_EnableClock>:
{
 800186a:	b480      	push	{r7}
 800186c:	b085      	sub	sp, #20
 800186e:	af00      	add	r7, sp, #0
 8001870:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001872:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001876:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001878:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	4313      	orrs	r3, r2
 8001880:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001882:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001886:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	4013      	ands	r3, r2
 800188c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800188e:	68fb      	ldr	r3, [r7, #12]
}
 8001890:	bf00      	nop
 8001892:	3714      	adds	r7, #20
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr

0800189c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b086      	sub	sp, #24
 80018a0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018a2:	1d3b      	adds	r3, r7, #4
 80018a4:	2200      	movs	r2, #0
 80018a6:	601a      	str	r2, [r3, #0]
 80018a8:	605a      	str	r2, [r3, #4]
 80018aa:	609a      	str	r2, [r3, #8]
 80018ac:	60da      	str	r2, [r3, #12]
 80018ae:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018b0:	2004      	movs	r0, #4
 80018b2:	f7ff ffda 	bl	800186a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018b6:	2002      	movs	r0, #2
 80018b8:	f7ff ffd7 	bl	800186a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018bc:	2001      	movs	r0, #1
 80018be:	f7ff ffd4 	bl	800186a <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 80018c2:	2200      	movs	r2, #0
 80018c4:	2101      	movs	r1, #1
 80018c6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018ca:	f007 fe59 	bl	8009580 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED0_Pin|LED1_Pin|SPI_CS_Pin, GPIO_PIN_RESET);
 80018ce:	2200      	movs	r2, #0
 80018d0:	2183      	movs	r1, #131	@ 0x83
 80018d2:	481b      	ldr	r0, [pc, #108]	@ (8001940 <MX_GPIO_Init+0xa4>)
 80018d4:	f007 fe54 	bl	8009580 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80018d8:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80018dc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80018de:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80018e2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e4:	2300      	movs	r3, #0
 80018e6:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018e8:	1d3b      	adds	r3, r7, #4
 80018ea:	4619      	mov	r1, r3
 80018ec:	4815      	ldr	r0, [pc, #84]	@ (8001944 <MX_GPIO_Init+0xa8>)
 80018ee:	f007 fbe1 	bl	80090b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80018f2:	2301      	movs	r3, #1
 80018f4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018f6:	2301      	movs	r3, #1
 80018f8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fa:	2300      	movs	r3, #0
 80018fc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018fe:	2300      	movs	r3, #0
 8001900:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001902:	1d3b      	adds	r3, r7, #4
 8001904:	4619      	mov	r1, r3
 8001906:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800190a:	f007 fbd3 	bl	80090b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED0_Pin LED1_Pin SPI_CS_Pin */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin|SPI_CS_Pin;
 800190e:	2383      	movs	r3, #131	@ 0x83
 8001910:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001912:	2301      	movs	r3, #1
 8001914:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001916:	2300      	movs	r3, #0
 8001918:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800191a:	2300      	movs	r3, #0
 800191c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800191e:	1d3b      	adds	r3, r7, #4
 8001920:	4619      	mov	r1, r3
 8001922:	4807      	ldr	r0, [pc, #28]	@ (8001940 <MX_GPIO_Init+0xa4>)
 8001924:	f007 fbc6 	bl	80090b4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 8001928:	2200      	movs	r2, #0
 800192a:	2101      	movs	r1, #1
 800192c:	2028      	movs	r0, #40	@ 0x28
 800192e:	f006 ff8e 	bl	800884e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001932:	2028      	movs	r0, #40	@ 0x28
 8001934:	f006 ffa5 	bl	8008882 <HAL_NVIC_EnableIRQ>

}
 8001938:	bf00      	nop
 800193a:	3718      	adds	r7, #24
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}
 8001940:	48000400 	.word	0x48000400
 8001944:	48000800 	.word	0x48000800

08001948 <LL_EXTI_EnableIT_0_31>:
{
 8001948:	b480      	push	{r7}
 800194a:	b083      	sub	sp, #12
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8001950:	4b06      	ldr	r3, [pc, #24]	@ (800196c <LL_EXTI_EnableIT_0_31+0x24>)
 8001952:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8001956:	4905      	ldr	r1, [pc, #20]	@ (800196c <LL_EXTI_EnableIT_0_31+0x24>)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	4313      	orrs	r3, r2
 800195c:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8001960:	bf00      	nop
 8001962:	370c      	adds	r7, #12
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr
 800196c:	58000800 	.word	0x58000800

08001970 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8001970:	b480      	push	{r7}
 8001972:	b083      	sub	sp, #12
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8001978:	4b05      	ldr	r3, [pc, #20]	@ (8001990 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	4904      	ldr	r1, [pc, #16]	@ (8001990 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	4313      	orrs	r3, r2
 8001982:	600b      	str	r3, [r1, #0]

}
 8001984:	bf00      	nop
 8001986:	370c      	adds	r7, #12
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr
 8001990:	58000800 	.word	0x58000800

08001994 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8001994:	b480      	push	{r7}
 8001996:	b083      	sub	sp, #12
 8001998:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800199a:	4b0d      	ldr	r3, [pc, #52]	@ (80019d0 <ReadRtcSsrValue+0x3c>)
 800199c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800199e:	b29b      	uxth	r3, r3
 80019a0:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80019a2:	4b0b      	ldr	r3, [pc, #44]	@ (80019d0 <ReadRtcSsrValue+0x3c>)
 80019a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019a6:	b29b      	uxth	r3, r3
 80019a8:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 80019aa:	e005      	b.n	80019b8 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80019b0:	4b07      	ldr	r3, [pc, #28]	@ (80019d0 <ReadRtcSsrValue+0x3c>)
 80019b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019b4:	b29b      	uxth	r3, r3
 80019b6:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 80019b8:	687a      	ldr	r2, [r7, #4]
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	429a      	cmp	r2, r3
 80019be:	d1f5      	bne.n	80019ac <ReadRtcSsrValue+0x18>
  }

  return second_read;
 80019c0:	683b      	ldr	r3, [r7, #0]
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	370c      	adds	r7, #12
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr
 80019ce:	bf00      	nop
 80019d0:	40002800 	.word	0x40002800

080019d4 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b085      	sub	sp, #20
 80019d8:	af00      	add	r7, sp, #0
 80019da:	4603      	mov	r3, r0
 80019dc:	460a      	mov	r2, r1
 80019de:	71fb      	strb	r3, [r7, #7]
 80019e0:	4613      	mov	r3, r2
 80019e2:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 80019e4:	79ba      	ldrb	r2, [r7, #6]
 80019e6:	491d      	ldr	r1, [pc, #116]	@ (8001a5c <LinkTimerAfter+0x88>)
 80019e8:	4613      	mov	r3, r2
 80019ea:	005b      	lsls	r3, r3, #1
 80019ec:	4413      	add	r3, r2
 80019ee:	00db      	lsls	r3, r3, #3
 80019f0:	440b      	add	r3, r1
 80019f2:	3315      	adds	r3, #21
 80019f4:	781b      	ldrb	r3, [r3, #0]
 80019f6:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80019f8:	7bfb      	ldrb	r3, [r7, #15]
 80019fa:	2b06      	cmp	r3, #6
 80019fc:	d009      	beq.n	8001a12 <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 80019fe:	7bfa      	ldrb	r2, [r7, #15]
 8001a00:	4916      	ldr	r1, [pc, #88]	@ (8001a5c <LinkTimerAfter+0x88>)
 8001a02:	4613      	mov	r3, r2
 8001a04:	005b      	lsls	r3, r3, #1
 8001a06:	4413      	add	r3, r2
 8001a08:	00db      	lsls	r3, r3, #3
 8001a0a:	440b      	add	r3, r1
 8001a0c:	3314      	adds	r3, #20
 8001a0e:	79fa      	ldrb	r2, [r7, #7]
 8001a10:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8001a12:	79fa      	ldrb	r2, [r7, #7]
 8001a14:	4911      	ldr	r1, [pc, #68]	@ (8001a5c <LinkTimerAfter+0x88>)
 8001a16:	4613      	mov	r3, r2
 8001a18:	005b      	lsls	r3, r3, #1
 8001a1a:	4413      	add	r3, r2
 8001a1c:	00db      	lsls	r3, r3, #3
 8001a1e:	440b      	add	r3, r1
 8001a20:	3315      	adds	r3, #21
 8001a22:	7bfa      	ldrb	r2, [r7, #15]
 8001a24:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8001a26:	79fa      	ldrb	r2, [r7, #7]
 8001a28:	490c      	ldr	r1, [pc, #48]	@ (8001a5c <LinkTimerAfter+0x88>)
 8001a2a:	4613      	mov	r3, r2
 8001a2c:	005b      	lsls	r3, r3, #1
 8001a2e:	4413      	add	r3, r2
 8001a30:	00db      	lsls	r3, r3, #3
 8001a32:	440b      	add	r3, r1
 8001a34:	3314      	adds	r3, #20
 8001a36:	79ba      	ldrb	r2, [r7, #6]
 8001a38:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8001a3a:	79ba      	ldrb	r2, [r7, #6]
 8001a3c:	4907      	ldr	r1, [pc, #28]	@ (8001a5c <LinkTimerAfter+0x88>)
 8001a3e:	4613      	mov	r3, r2
 8001a40:	005b      	lsls	r3, r3, #1
 8001a42:	4413      	add	r3, r2
 8001a44:	00db      	lsls	r3, r3, #3
 8001a46:	440b      	add	r3, r1
 8001a48:	3315      	adds	r3, #21
 8001a4a:	79fa      	ldrb	r2, [r7, #7]
 8001a4c:	701a      	strb	r2, [r3, #0]

  return;
 8001a4e:	bf00      	nop
}
 8001a50:	3714      	adds	r7, #20
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop
 8001a5c:	20000450 	.word	0x20000450

08001a60 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b085      	sub	sp, #20
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	4603      	mov	r3, r0
 8001a68:	460a      	mov	r2, r1
 8001a6a:	71fb      	strb	r3, [r7, #7]
 8001a6c:	4613      	mov	r3, r2
 8001a6e:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8001a70:	4b29      	ldr	r3, [pc, #164]	@ (8001b18 <LinkTimerBefore+0xb8>)
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	79ba      	ldrb	r2, [r7, #6]
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	d032      	beq.n	8001ae2 <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8001a7c:	79ba      	ldrb	r2, [r7, #6]
 8001a7e:	4927      	ldr	r1, [pc, #156]	@ (8001b1c <LinkTimerBefore+0xbc>)
 8001a80:	4613      	mov	r3, r2
 8001a82:	005b      	lsls	r3, r3, #1
 8001a84:	4413      	add	r3, r2
 8001a86:	00db      	lsls	r3, r3, #3
 8001a88:	440b      	add	r3, r1
 8001a8a:	3314      	adds	r3, #20
 8001a8c:	781b      	ldrb	r3, [r3, #0]
 8001a8e:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8001a90:	7bfa      	ldrb	r2, [r7, #15]
 8001a92:	4922      	ldr	r1, [pc, #136]	@ (8001b1c <LinkTimerBefore+0xbc>)
 8001a94:	4613      	mov	r3, r2
 8001a96:	005b      	lsls	r3, r3, #1
 8001a98:	4413      	add	r3, r2
 8001a9a:	00db      	lsls	r3, r3, #3
 8001a9c:	440b      	add	r3, r1
 8001a9e:	3315      	adds	r3, #21
 8001aa0:	79fa      	ldrb	r2, [r7, #7]
 8001aa2:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8001aa4:	79fa      	ldrb	r2, [r7, #7]
 8001aa6:	491d      	ldr	r1, [pc, #116]	@ (8001b1c <LinkTimerBefore+0xbc>)
 8001aa8:	4613      	mov	r3, r2
 8001aaa:	005b      	lsls	r3, r3, #1
 8001aac:	4413      	add	r3, r2
 8001aae:	00db      	lsls	r3, r3, #3
 8001ab0:	440b      	add	r3, r1
 8001ab2:	3315      	adds	r3, #21
 8001ab4:	79ba      	ldrb	r2, [r7, #6]
 8001ab6:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8001ab8:	79fa      	ldrb	r2, [r7, #7]
 8001aba:	4918      	ldr	r1, [pc, #96]	@ (8001b1c <LinkTimerBefore+0xbc>)
 8001abc:	4613      	mov	r3, r2
 8001abe:	005b      	lsls	r3, r3, #1
 8001ac0:	4413      	add	r3, r2
 8001ac2:	00db      	lsls	r3, r3, #3
 8001ac4:	440b      	add	r3, r1
 8001ac6:	3314      	adds	r3, #20
 8001ac8:	7bfa      	ldrb	r2, [r7, #15]
 8001aca:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8001acc:	79ba      	ldrb	r2, [r7, #6]
 8001ace:	4913      	ldr	r1, [pc, #76]	@ (8001b1c <LinkTimerBefore+0xbc>)
 8001ad0:	4613      	mov	r3, r2
 8001ad2:	005b      	lsls	r3, r3, #1
 8001ad4:	4413      	add	r3, r2
 8001ad6:	00db      	lsls	r3, r3, #3
 8001ad8:	440b      	add	r3, r1
 8001ada:	3314      	adds	r3, #20
 8001adc:	79fa      	ldrb	r2, [r7, #7]
 8001ade:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8001ae0:	e014      	b.n	8001b0c <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8001ae2:	79fa      	ldrb	r2, [r7, #7]
 8001ae4:	490d      	ldr	r1, [pc, #52]	@ (8001b1c <LinkTimerBefore+0xbc>)
 8001ae6:	4613      	mov	r3, r2
 8001ae8:	005b      	lsls	r3, r3, #1
 8001aea:	4413      	add	r3, r2
 8001aec:	00db      	lsls	r3, r3, #3
 8001aee:	440b      	add	r3, r1
 8001af0:	3315      	adds	r3, #21
 8001af2:	79ba      	ldrb	r2, [r7, #6]
 8001af4:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8001af6:	79ba      	ldrb	r2, [r7, #6]
 8001af8:	4908      	ldr	r1, [pc, #32]	@ (8001b1c <LinkTimerBefore+0xbc>)
 8001afa:	4613      	mov	r3, r2
 8001afc:	005b      	lsls	r3, r3, #1
 8001afe:	4413      	add	r3, r2
 8001b00:	00db      	lsls	r3, r3, #3
 8001b02:	440b      	add	r3, r1
 8001b04:	3314      	adds	r3, #20
 8001b06:	79fa      	ldrb	r2, [r7, #7]
 8001b08:	701a      	strb	r2, [r3, #0]
  return;
 8001b0a:	bf00      	nop
}
 8001b0c:	3714      	adds	r7, #20
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr
 8001b16:	bf00      	nop
 8001b18:	200004e0 	.word	0x200004e0
 8001b1c:	20000450 	.word	0x20000450

08001b20 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b084      	sub	sp, #16
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	4603      	mov	r3, r0
 8001b28:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001b2a:	4b4e      	ldr	r3, [pc, #312]	@ (8001c64 <linkTimer+0x144>)
 8001b2c:	781b      	ldrb	r3, [r3, #0]
 8001b2e:	b2db      	uxtb	r3, r3
 8001b30:	2b06      	cmp	r3, #6
 8001b32:	d118      	bne.n	8001b66 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001b34:	4b4b      	ldr	r3, [pc, #300]	@ (8001c64 <linkTimer+0x144>)
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	b2da      	uxtb	r2, r3
 8001b3a:	4b4b      	ldr	r3, [pc, #300]	@ (8001c68 <linkTimer+0x148>)
 8001b3c:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8001b3e:	4a49      	ldr	r2, [pc, #292]	@ (8001c64 <linkTimer+0x144>)
 8001b40:	79fb      	ldrb	r3, [r7, #7]
 8001b42:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8001b44:	79fa      	ldrb	r2, [r7, #7]
 8001b46:	4949      	ldr	r1, [pc, #292]	@ (8001c6c <linkTimer+0x14c>)
 8001b48:	4613      	mov	r3, r2
 8001b4a:	005b      	lsls	r3, r3, #1
 8001b4c:	4413      	add	r3, r2
 8001b4e:	00db      	lsls	r3, r3, #3
 8001b50:	440b      	add	r3, r1
 8001b52:	3315      	adds	r3, #21
 8001b54:	2206      	movs	r2, #6
 8001b56:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001b58:	4b45      	ldr	r3, [pc, #276]	@ (8001c70 <linkTimer+0x150>)
 8001b5a:	f04f 32ff 	mov.w	r2, #4294967295
 8001b5e:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8001b60:	2300      	movs	r3, #0
 8001b62:	81fb      	strh	r3, [r7, #14]
 8001b64:	e078      	b.n	8001c58 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8001b66:	f000 f909 	bl	8001d7c <ReturnTimeElapsed>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8001b6e:	79fa      	ldrb	r2, [r7, #7]
 8001b70:	493e      	ldr	r1, [pc, #248]	@ (8001c6c <linkTimer+0x14c>)
 8001b72:	4613      	mov	r3, r2
 8001b74:	005b      	lsls	r3, r3, #1
 8001b76:	4413      	add	r3, r2
 8001b78:	00db      	lsls	r3, r3, #3
 8001b7a:	440b      	add	r3, r1
 8001b7c:	3308      	adds	r3, #8
 8001b7e:	6819      	ldr	r1, [r3, #0]
 8001b80:	89fb      	ldrh	r3, [r7, #14]
 8001b82:	79fa      	ldrb	r2, [r7, #7]
 8001b84:	4419      	add	r1, r3
 8001b86:	4839      	ldr	r0, [pc, #228]	@ (8001c6c <linkTimer+0x14c>)
 8001b88:	4613      	mov	r3, r2
 8001b8a:	005b      	lsls	r3, r3, #1
 8001b8c:	4413      	add	r3, r2
 8001b8e:	00db      	lsls	r3, r3, #3
 8001b90:	4403      	add	r3, r0
 8001b92:	3308      	adds	r3, #8
 8001b94:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8001b96:	79fa      	ldrb	r2, [r7, #7]
 8001b98:	4934      	ldr	r1, [pc, #208]	@ (8001c6c <linkTimer+0x14c>)
 8001b9a:	4613      	mov	r3, r2
 8001b9c:	005b      	lsls	r3, r3, #1
 8001b9e:	4413      	add	r3, r2
 8001ba0:	00db      	lsls	r3, r3, #3
 8001ba2:	440b      	add	r3, r1
 8001ba4:	3308      	adds	r3, #8
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8001baa:	4b2e      	ldr	r3, [pc, #184]	@ (8001c64 <linkTimer+0x144>)
 8001bac:	781b      	ldrb	r3, [r3, #0]
 8001bae:	b2db      	uxtb	r3, r3
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	4a2e      	ldr	r2, [pc, #184]	@ (8001c6c <linkTimer+0x14c>)
 8001bb4:	460b      	mov	r3, r1
 8001bb6:	005b      	lsls	r3, r3, #1
 8001bb8:	440b      	add	r3, r1
 8001bba:	00db      	lsls	r3, r3, #3
 8001bbc:	4413      	add	r3, r2
 8001bbe:	3308      	adds	r3, #8
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	68ba      	ldr	r2, [r7, #8]
 8001bc4:	429a      	cmp	r2, r3
 8001bc6:	d337      	bcc.n	8001c38 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8001bc8:	4b26      	ldr	r3, [pc, #152]	@ (8001c64 <linkTimer+0x144>)
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8001bce:	7b7a      	ldrb	r2, [r7, #13]
 8001bd0:	4926      	ldr	r1, [pc, #152]	@ (8001c6c <linkTimer+0x14c>)
 8001bd2:	4613      	mov	r3, r2
 8001bd4:	005b      	lsls	r3, r3, #1
 8001bd6:	4413      	add	r3, r2
 8001bd8:	00db      	lsls	r3, r3, #3
 8001bda:	440b      	add	r3, r1
 8001bdc:	3315      	adds	r3, #21
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001be2:	e013      	b.n	8001c0c <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8001be4:	7b7a      	ldrb	r2, [r7, #13]
 8001be6:	4921      	ldr	r1, [pc, #132]	@ (8001c6c <linkTimer+0x14c>)
 8001be8:	4613      	mov	r3, r2
 8001bea:	005b      	lsls	r3, r3, #1
 8001bec:	4413      	add	r3, r2
 8001bee:	00db      	lsls	r3, r3, #3
 8001bf0:	440b      	add	r3, r1
 8001bf2:	3315      	adds	r3, #21
 8001bf4:	781b      	ldrb	r3, [r3, #0]
 8001bf6:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8001bf8:	7b7a      	ldrb	r2, [r7, #13]
 8001bfa:	491c      	ldr	r1, [pc, #112]	@ (8001c6c <linkTimer+0x14c>)
 8001bfc:	4613      	mov	r3, r2
 8001bfe:	005b      	lsls	r3, r3, #1
 8001c00:	4413      	add	r3, r2
 8001c02:	00db      	lsls	r3, r3, #3
 8001c04:	440b      	add	r3, r1
 8001c06:	3315      	adds	r3, #21
 8001c08:	781b      	ldrb	r3, [r3, #0]
 8001c0a:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001c0c:	7b3b      	ldrb	r3, [r7, #12]
 8001c0e:	2b06      	cmp	r3, #6
 8001c10:	d00b      	beq.n	8001c2a <linkTimer+0x10a>
 8001c12:	7b3a      	ldrb	r2, [r7, #12]
 8001c14:	4915      	ldr	r1, [pc, #84]	@ (8001c6c <linkTimer+0x14c>)
 8001c16:	4613      	mov	r3, r2
 8001c18:	005b      	lsls	r3, r3, #1
 8001c1a:	4413      	add	r3, r2
 8001c1c:	00db      	lsls	r3, r3, #3
 8001c1e:	440b      	add	r3, r1
 8001c20:	3308      	adds	r3, #8
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	68ba      	ldr	r2, [r7, #8]
 8001c26:	429a      	cmp	r2, r3
 8001c28:	d2dc      	bcs.n	8001be4 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8001c2a:	7b7a      	ldrb	r2, [r7, #13]
 8001c2c:	79fb      	ldrb	r3, [r7, #7]
 8001c2e:	4611      	mov	r1, r2
 8001c30:	4618      	mov	r0, r3
 8001c32:	f7ff fecf 	bl	80019d4 <LinkTimerAfter>
 8001c36:	e00f      	b.n	8001c58 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8001c38:	4b0a      	ldr	r3, [pc, #40]	@ (8001c64 <linkTimer+0x144>)
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	b2da      	uxtb	r2, r3
 8001c3e:	79fb      	ldrb	r3, [r7, #7]
 8001c40:	4611      	mov	r1, r2
 8001c42:	4618      	mov	r0, r3
 8001c44:	f7ff ff0c 	bl	8001a60 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8001c48:	4b06      	ldr	r3, [pc, #24]	@ (8001c64 <linkTimer+0x144>)
 8001c4a:	781b      	ldrb	r3, [r3, #0]
 8001c4c:	b2da      	uxtb	r2, r3
 8001c4e:	4b06      	ldr	r3, [pc, #24]	@ (8001c68 <linkTimer+0x148>)
 8001c50:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8001c52:	4a04      	ldr	r2, [pc, #16]	@ (8001c64 <linkTimer+0x144>)
 8001c54:	79fb      	ldrb	r3, [r7, #7]
 8001c56:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8001c58:	89fb      	ldrh	r3, [r7, #14]
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	3710      	adds	r7, #16
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	200004e0 	.word	0x200004e0
 8001c68:	200004e1 	.word	0x200004e1
 8001c6c:	20000450 	.word	0x20000450
 8001c70:	200004e4 	.word	0x200004e4

08001c74 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b085      	sub	sp, #20
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	460a      	mov	r2, r1
 8001c7e:	71fb      	strb	r3, [r7, #7]
 8001c80:	4613      	mov	r3, r2
 8001c82:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8001c84:	4b39      	ldr	r3, [pc, #228]	@ (8001d6c <UnlinkTimer+0xf8>)
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	b2db      	uxtb	r3, r3
 8001c8a:	79fa      	ldrb	r2, [r7, #7]
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	d111      	bne.n	8001cb4 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001c90:	4b36      	ldr	r3, [pc, #216]	@ (8001d6c <UnlinkTimer+0xf8>)
 8001c92:	781b      	ldrb	r3, [r3, #0]
 8001c94:	b2da      	uxtb	r2, r3
 8001c96:	4b36      	ldr	r3, [pc, #216]	@ (8001d70 <UnlinkTimer+0xfc>)
 8001c98:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8001c9a:	79fa      	ldrb	r2, [r7, #7]
 8001c9c:	4935      	ldr	r1, [pc, #212]	@ (8001d74 <UnlinkTimer+0x100>)
 8001c9e:	4613      	mov	r3, r2
 8001ca0:	005b      	lsls	r3, r3, #1
 8001ca2:	4413      	add	r3, r2
 8001ca4:	00db      	lsls	r3, r3, #3
 8001ca6:	440b      	add	r3, r1
 8001ca8:	3315      	adds	r3, #21
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	b2da      	uxtb	r2, r3
 8001cae:	4b2f      	ldr	r3, [pc, #188]	@ (8001d6c <UnlinkTimer+0xf8>)
 8001cb0:	701a      	strb	r2, [r3, #0]
 8001cb2:	e03e      	b.n	8001d32 <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8001cb4:	79fa      	ldrb	r2, [r7, #7]
 8001cb6:	492f      	ldr	r1, [pc, #188]	@ (8001d74 <UnlinkTimer+0x100>)
 8001cb8:	4613      	mov	r3, r2
 8001cba:	005b      	lsls	r3, r3, #1
 8001cbc:	4413      	add	r3, r2
 8001cbe:	00db      	lsls	r3, r3, #3
 8001cc0:	440b      	add	r3, r1
 8001cc2:	3314      	adds	r3, #20
 8001cc4:	781b      	ldrb	r3, [r3, #0]
 8001cc6:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8001cc8:	79fa      	ldrb	r2, [r7, #7]
 8001cca:	492a      	ldr	r1, [pc, #168]	@ (8001d74 <UnlinkTimer+0x100>)
 8001ccc:	4613      	mov	r3, r2
 8001cce:	005b      	lsls	r3, r3, #1
 8001cd0:	4413      	add	r3, r2
 8001cd2:	00db      	lsls	r3, r3, #3
 8001cd4:	440b      	add	r3, r1
 8001cd6:	3315      	adds	r3, #21
 8001cd8:	781b      	ldrb	r3, [r3, #0]
 8001cda:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8001cdc:	79f9      	ldrb	r1, [r7, #7]
 8001cde:	7bfa      	ldrb	r2, [r7, #15]
 8001ce0:	4824      	ldr	r0, [pc, #144]	@ (8001d74 <UnlinkTimer+0x100>)
 8001ce2:	460b      	mov	r3, r1
 8001ce4:	005b      	lsls	r3, r3, #1
 8001ce6:	440b      	add	r3, r1
 8001ce8:	00db      	lsls	r3, r3, #3
 8001cea:	4403      	add	r3, r0
 8001cec:	3315      	adds	r3, #21
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	b2d8      	uxtb	r0, r3
 8001cf2:	4920      	ldr	r1, [pc, #128]	@ (8001d74 <UnlinkTimer+0x100>)
 8001cf4:	4613      	mov	r3, r2
 8001cf6:	005b      	lsls	r3, r3, #1
 8001cf8:	4413      	add	r3, r2
 8001cfa:	00db      	lsls	r3, r3, #3
 8001cfc:	440b      	add	r3, r1
 8001cfe:	3315      	adds	r3, #21
 8001d00:	4602      	mov	r2, r0
 8001d02:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001d04:	7bbb      	ldrb	r3, [r7, #14]
 8001d06:	2b06      	cmp	r3, #6
 8001d08:	d013      	beq.n	8001d32 <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8001d0a:	79f9      	ldrb	r1, [r7, #7]
 8001d0c:	7bba      	ldrb	r2, [r7, #14]
 8001d0e:	4819      	ldr	r0, [pc, #100]	@ (8001d74 <UnlinkTimer+0x100>)
 8001d10:	460b      	mov	r3, r1
 8001d12:	005b      	lsls	r3, r3, #1
 8001d14:	440b      	add	r3, r1
 8001d16:	00db      	lsls	r3, r3, #3
 8001d18:	4403      	add	r3, r0
 8001d1a:	3314      	adds	r3, #20
 8001d1c:	781b      	ldrb	r3, [r3, #0]
 8001d1e:	b2d8      	uxtb	r0, r3
 8001d20:	4914      	ldr	r1, [pc, #80]	@ (8001d74 <UnlinkTimer+0x100>)
 8001d22:	4613      	mov	r3, r2
 8001d24:	005b      	lsls	r3, r3, #1
 8001d26:	4413      	add	r3, r2
 8001d28:	00db      	lsls	r3, r3, #3
 8001d2a:	440b      	add	r3, r1
 8001d2c:	3314      	adds	r3, #20
 8001d2e:	4602      	mov	r2, r0
 8001d30:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8001d32:	79fa      	ldrb	r2, [r7, #7]
 8001d34:	490f      	ldr	r1, [pc, #60]	@ (8001d74 <UnlinkTimer+0x100>)
 8001d36:	4613      	mov	r3, r2
 8001d38:	005b      	lsls	r3, r3, #1
 8001d3a:	4413      	add	r3, r2
 8001d3c:	00db      	lsls	r3, r3, #3
 8001d3e:	440b      	add	r3, r1
 8001d40:	330c      	adds	r3, #12
 8001d42:	2201      	movs	r2, #1
 8001d44:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8001d46:	4b09      	ldr	r3, [pc, #36]	@ (8001d6c <UnlinkTimer+0xf8>)
 8001d48:	781b      	ldrb	r3, [r3, #0]
 8001d4a:	b2db      	uxtb	r3, r3
 8001d4c:	2b06      	cmp	r3, #6
 8001d4e:	d107      	bne.n	8001d60 <UnlinkTimer+0xec>
 8001d50:	79bb      	ldrb	r3, [r7, #6]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d104      	bne.n	8001d60 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001d56:	4b08      	ldr	r3, [pc, #32]	@ (8001d78 <UnlinkTimer+0x104>)
 8001d58:	f04f 32ff 	mov.w	r2, #4294967295
 8001d5c:	601a      	str	r2, [r3, #0]
  }

  return;
 8001d5e:	bf00      	nop
 8001d60:	bf00      	nop
}
 8001d62:	3714      	adds	r7, #20
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr
 8001d6c:	200004e0 	.word	0x200004e0
 8001d70:	200004e1 	.word	0x200004e1
 8001d74:	20000450 	.word	0x20000450
 8001d78:	200004e4 	.word	0x200004e4

08001d7c <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8001d82:	4b1a      	ldr	r3, [pc, #104]	@ (8001dec <ReturnTimeElapsed+0x70>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d8a:	d026      	beq.n	8001dda <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8001d8c:	f7ff fe02 	bl	8001994 <ReadRtcSsrValue>
 8001d90:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8001d92:	4b16      	ldr	r3, [pc, #88]	@ (8001dec <ReturnTimeElapsed+0x70>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	687a      	ldr	r2, [r7, #4]
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	d805      	bhi.n	8001da8 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8001d9c:	4b13      	ldr	r3, [pc, #76]	@ (8001dec <ReturnTimeElapsed+0x70>)
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	1ad3      	subs	r3, r2, r3
 8001da4:	607b      	str	r3, [r7, #4]
 8001da6:	e00a      	b.n	8001dbe <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8001da8:	4b11      	ldr	r3, [pc, #68]	@ (8001df0 <ReturnTimeElapsed+0x74>)
 8001daa:	881b      	ldrh	r3, [r3, #0]
 8001dac:	461a      	mov	r2, r3
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	1ad3      	subs	r3, r2, r3
 8001db2:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8001db4:	4b0d      	ldr	r3, [pc, #52]	@ (8001dec <ReturnTimeElapsed+0x70>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	683a      	ldr	r2, [r7, #0]
 8001dba:	4413      	add	r3, r2
 8001dbc:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8001dbe:	4b0d      	ldr	r3, [pc, #52]	@ (8001df4 <ReturnTimeElapsed+0x78>)
 8001dc0:	781b      	ldrb	r3, [r3, #0]
 8001dc2:	461a      	mov	r2, r3
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	fb02 f303 	mul.w	r3, r2, r3
 8001dca:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8001dcc:	4b0a      	ldr	r3, [pc, #40]	@ (8001df8 <ReturnTimeElapsed+0x7c>)
 8001dce:	781b      	ldrb	r3, [r3, #0]
 8001dd0:	461a      	mov	r2, r3
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	40d3      	lsrs	r3, r2
 8001dd6:	607b      	str	r3, [r7, #4]
 8001dd8:	e001      	b.n	8001dde <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	b29b      	uxth	r3, r3
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	3708      	adds	r7, #8
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	200004e4 	.word	0x200004e4
 8001df0:	200004ec 	.word	0x200004ec
 8001df4:	200004ea 	.word	0x200004ea
 8001df8:	200004e9 	.word	0x200004e9

08001dfc <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b082      	sub	sp, #8
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	4603      	mov	r3, r0
 8001e04:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 8001e06:	88fb      	ldrh	r3, [r7, #6]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d108      	bne.n	8001e1e <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001e0c:	f7ff fdc2 	bl	8001994 <ReadRtcSsrValue>
 8001e10:	4603      	mov	r3, r0
 8001e12:	4a21      	ldr	r2, [pc, #132]	@ (8001e98 <RestartWakeupCounter+0x9c>)
 8001e14:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001e16:	2003      	movs	r0, #3
 8001e18:	f006 fd5b 	bl	80088d2 <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8001e1c:	e039      	b.n	8001e92 <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8001e1e:	88fb      	ldrh	r3, [r7, #6]
 8001e20:	2b01      	cmp	r3, #1
 8001e22:	d803      	bhi.n	8001e2c <RestartWakeupCounter+0x30>
 8001e24:	4b1d      	ldr	r3, [pc, #116]	@ (8001e9c <RestartWakeupCounter+0xa0>)
 8001e26:	781b      	ldrb	r3, [r3, #0]
 8001e28:	2b01      	cmp	r3, #1
 8001e2a:	d002      	beq.n	8001e32 <RestartWakeupCounter+0x36>
      Value -= 1;
 8001e2c:	88fb      	ldrh	r3, [r7, #6]
 8001e2e:	3b01      	subs	r3, #1
 8001e30:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8001e32:	bf00      	nop
 8001e34:	4b1a      	ldr	r3, [pc, #104]	@ (8001ea0 <RestartWakeupCounter+0xa4>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	68db      	ldr	r3, [r3, #12]
 8001e3a:	f003 0304 	and.w	r3, r3, #4
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d0f8      	beq.n	8001e34 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001e42:	4b17      	ldr	r3, [pc, #92]	@ (8001ea0 <RestartWakeupCounter+0xa4>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	68db      	ldr	r3, [r3, #12]
 8001e48:	b2da      	uxtb	r2, r3
 8001e4a:	4b15      	ldr	r3, [pc, #84]	@ (8001ea0 <RestartWakeupCounter+0xa4>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8001e52:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001e54:	4b13      	ldr	r3, [pc, #76]	@ (8001ea4 <RestartWakeupCounter+0xa8>)
 8001e56:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001e5a:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001e5c:	2003      	movs	r0, #3
 8001e5e:	f006 fd46 	bl	80088ee <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8001e62:	4b11      	ldr	r3, [pc, #68]	@ (8001ea8 <RestartWakeupCounter+0xac>)
 8001e64:	695b      	ldr	r3, [r3, #20]
 8001e66:	0c1b      	lsrs	r3, r3, #16
 8001e68:	041b      	lsls	r3, r3, #16
 8001e6a:	88fa      	ldrh	r2, [r7, #6]
 8001e6c:	490e      	ldr	r1, [pc, #56]	@ (8001ea8 <RestartWakeupCounter+0xac>)
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001e72:	f7ff fd8f 	bl	8001994 <ReadRtcSsrValue>
 8001e76:	4603      	mov	r3, r0
 8001e78:	4a07      	ldr	r2, [pc, #28]	@ (8001e98 <RestartWakeupCounter+0x9c>)
 8001e7a:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 8001e7c:	4b08      	ldr	r3, [pc, #32]	@ (8001ea0 <RestartWakeupCounter+0xa4>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	689a      	ldr	r2, [r3, #8]
 8001e82:	4b07      	ldr	r3, [pc, #28]	@ (8001ea0 <RestartWakeupCounter+0xa4>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001e8a:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8001e8c:	f3af 8000 	nop.w
  return ;
 8001e90:	bf00      	nop
}
 8001e92:	3708      	adds	r7, #8
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	200004e4 	.word	0x200004e4
 8001e9c:	200004e9 	.word	0x200004e9
 8001ea0:	20000d28 	.word	0x20000d28
 8001ea4:	58000800 	.word	0x58000800
 8001ea8:	40002800 	.word	0x40002800

08001eac <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b084      	sub	sp, #16
 8001eb0:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001eb2:	4b45      	ldr	r3, [pc, #276]	@ (8001fc8 <RescheduleTimerList+0x11c>)
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001eba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ebe:	d107      	bne.n	8001ed0 <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8001ec0:	bf00      	nop
 8001ec2:	4b42      	ldr	r3, [pc, #264]	@ (8001fcc <RescheduleTimerList+0x120>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	f003 0304 	and.w	r3, r3, #4
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d1f8      	bne.n	8001ec2 <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8001ed0:	4b3e      	ldr	r3, [pc, #248]	@ (8001fcc <RescheduleTimerList+0x120>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	689a      	ldr	r2, [r3, #8]
 8001ed6:	4b3d      	ldr	r3, [pc, #244]	@ (8001fcc <RescheduleTimerList+0x120>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001ede:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8001ee0:	4b3b      	ldr	r3, [pc, #236]	@ (8001fd0 <RescheduleTimerList+0x124>)
 8001ee2:	781b      	ldrb	r3, [r3, #0]
 8001ee4:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8001ee6:	7bfa      	ldrb	r2, [r7, #15]
 8001ee8:	493a      	ldr	r1, [pc, #232]	@ (8001fd4 <RescheduleTimerList+0x128>)
 8001eea:	4613      	mov	r3, r2
 8001eec:	005b      	lsls	r3, r3, #1
 8001eee:	4413      	add	r3, r2
 8001ef0:	00db      	lsls	r3, r3, #3
 8001ef2:	440b      	add	r3, r1
 8001ef4:	3308      	adds	r3, #8
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8001efa:	f7ff ff3f 	bl	8001d7c <ReturnTimeElapsed>
 8001efe:	4603      	mov	r3, r0
 8001f00:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8001f02:	88fb      	ldrh	r3, [r7, #6]
 8001f04:	68ba      	ldr	r2, [r7, #8]
 8001f06:	429a      	cmp	r2, r3
 8001f08:	d205      	bcs.n	8001f16 <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001f0e:	4b32      	ldr	r3, [pc, #200]	@ (8001fd8 <RescheduleTimerList+0x12c>)
 8001f10:	2201      	movs	r2, #1
 8001f12:	701a      	strb	r2, [r3, #0]
 8001f14:	e04d      	b.n	8001fb2 <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8001f16:	88fb      	ldrh	r3, [r7, #6]
 8001f18:	4a30      	ldr	r2, [pc, #192]	@ (8001fdc <RescheduleTimerList+0x130>)
 8001f1a:	8812      	ldrh	r2, [r2, #0]
 8001f1c:	b292      	uxth	r2, r2
 8001f1e:	4413      	add	r3, r2
 8001f20:	461a      	mov	r2, r3
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d906      	bls.n	8001f36 <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8001f28:	4b2c      	ldr	r3, [pc, #176]	@ (8001fdc <RescheduleTimerList+0x130>)
 8001f2a:	881b      	ldrh	r3, [r3, #0]
 8001f2c:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8001f2e:	4b2a      	ldr	r3, [pc, #168]	@ (8001fd8 <RescheduleTimerList+0x12c>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	701a      	strb	r2, [r3, #0]
 8001f34:	e03d      	b.n	8001fb2 <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8001f36:	68bb      	ldr	r3, [r7, #8]
 8001f38:	b29a      	uxth	r2, r3
 8001f3a:	88fb      	ldrh	r3, [r7, #6]
 8001f3c:	1ad3      	subs	r3, r2, r3
 8001f3e:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001f40:	4b25      	ldr	r3, [pc, #148]	@ (8001fd8 <RescheduleTimerList+0x12c>)
 8001f42:	2201      	movs	r2, #1
 8001f44:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001f46:	e034      	b.n	8001fb2 <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8001f48:	7bfa      	ldrb	r2, [r7, #15]
 8001f4a:	4922      	ldr	r1, [pc, #136]	@ (8001fd4 <RescheduleTimerList+0x128>)
 8001f4c:	4613      	mov	r3, r2
 8001f4e:	005b      	lsls	r3, r3, #1
 8001f50:	4413      	add	r3, r2
 8001f52:	00db      	lsls	r3, r3, #3
 8001f54:	440b      	add	r3, r1
 8001f56:	3308      	adds	r3, #8
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	88fb      	ldrh	r3, [r7, #6]
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	d20a      	bcs.n	8001f76 <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8001f60:	7bfa      	ldrb	r2, [r7, #15]
 8001f62:	491c      	ldr	r1, [pc, #112]	@ (8001fd4 <RescheduleTimerList+0x128>)
 8001f64:	4613      	mov	r3, r2
 8001f66:	005b      	lsls	r3, r3, #1
 8001f68:	4413      	add	r3, r2
 8001f6a:	00db      	lsls	r3, r3, #3
 8001f6c:	440b      	add	r3, r1
 8001f6e:	3308      	adds	r3, #8
 8001f70:	2200      	movs	r2, #0
 8001f72:	601a      	str	r2, [r3, #0]
 8001f74:	e013      	b.n	8001f9e <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8001f76:	7bfa      	ldrb	r2, [r7, #15]
 8001f78:	4916      	ldr	r1, [pc, #88]	@ (8001fd4 <RescheduleTimerList+0x128>)
 8001f7a:	4613      	mov	r3, r2
 8001f7c:	005b      	lsls	r3, r3, #1
 8001f7e:	4413      	add	r3, r2
 8001f80:	00db      	lsls	r3, r3, #3
 8001f82:	440b      	add	r3, r1
 8001f84:	3308      	adds	r3, #8
 8001f86:	6819      	ldr	r1, [r3, #0]
 8001f88:	88fb      	ldrh	r3, [r7, #6]
 8001f8a:	7bfa      	ldrb	r2, [r7, #15]
 8001f8c:	1ac9      	subs	r1, r1, r3
 8001f8e:	4811      	ldr	r0, [pc, #68]	@ (8001fd4 <RescheduleTimerList+0x128>)
 8001f90:	4613      	mov	r3, r2
 8001f92:	005b      	lsls	r3, r3, #1
 8001f94:	4413      	add	r3, r2
 8001f96:	00db      	lsls	r3, r3, #3
 8001f98:	4403      	add	r3, r0
 8001f9a:	3308      	adds	r3, #8
 8001f9c:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8001f9e:	7bfa      	ldrb	r2, [r7, #15]
 8001fa0:	490c      	ldr	r1, [pc, #48]	@ (8001fd4 <RescheduleTimerList+0x128>)
 8001fa2:	4613      	mov	r3, r2
 8001fa4:	005b      	lsls	r3, r3, #1
 8001fa6:	4413      	add	r3, r2
 8001fa8:	00db      	lsls	r3, r3, #3
 8001faa:	440b      	add	r3, r1
 8001fac:	3315      	adds	r3, #21
 8001fae:	781b      	ldrb	r3, [r3, #0]
 8001fb0:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001fb2:	7bfb      	ldrb	r3, [r7, #15]
 8001fb4:	2b06      	cmp	r3, #6
 8001fb6:	d1c7      	bne.n	8001f48 <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8001fb8:	89bb      	ldrh	r3, [r7, #12]
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f7ff ff1e 	bl	8001dfc <RestartWakeupCounter>

  return ;
 8001fc0:	bf00      	nop
}
 8001fc2:	3710      	adds	r7, #16
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}
 8001fc8:	40002800 	.word	0x40002800
 8001fcc:	20000d28 	.word	0x20000d28
 8001fd0:	200004e0 	.word	0x200004e0
 8001fd4:	20000450 	.word	0x20000450
 8001fd8:	200004e8 	.word	0x200004e8
 8001fdc:	200004ee 	.word	0x200004ee

08001fe0 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b08a      	sub	sp, #40	@ 0x28
 8001fe4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001fe6:	f3ef 8310 	mrs	r3, PRIMASK
 8001fea:	617b      	str	r3, [r7, #20]
  return(result);
 8001fec:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001fee:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8001ff0:	b672      	cpsid	i
}
 8001ff2:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001ff4:	4b59      	ldr	r3, [pc, #356]	@ (800215c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	22ca      	movs	r2, #202	@ 0xca
 8001ffa:	625a      	str	r2, [r3, #36]	@ 0x24
 8001ffc:	4b57      	ldr	r3, [pc, #348]	@ (800215c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	2253      	movs	r2, #83	@ 0x53
 8002002:	625a      	str	r2, [r3, #36]	@ 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 8002004:	4b55      	ldr	r3, [pc, #340]	@ (800215c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	689a      	ldr	r2, [r3, #8]
 800200a:	4b54      	ldr	r3, [pc, #336]	@ (800215c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002012:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8002014:	4b52      	ldr	r3, [pc, #328]	@ (8002160 <HW_TS_RTC_Wakeup_Handler+0x180>)
 8002016:	781b      	ldrb	r3, [r3, #0]
 8002018:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 800201c:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8002020:	4950      	ldr	r1, [pc, #320]	@ (8002164 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8002022:	4613      	mov	r3, r2
 8002024:	005b      	lsls	r3, r3, #1
 8002026:	4413      	add	r3, r2
 8002028:	00db      	lsls	r3, r3, #3
 800202a:	440b      	add	r3, r1
 800202c:	330c      	adds	r3, #12
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	b2db      	uxtb	r3, r3
 8002032:	2b02      	cmp	r3, #2
 8002034:	d16e      	bne.n	8002114 <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8002036:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800203a:	494a      	ldr	r1, [pc, #296]	@ (8002164 <HW_TS_RTC_Wakeup_Handler+0x184>)
 800203c:	4613      	mov	r3, r2
 800203e:	005b      	lsls	r3, r3, #1
 8002040:	4413      	add	r3, r2
 8002042:	00db      	lsls	r3, r3, #3
 8002044:	440b      	add	r3, r1
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 800204a:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800204e:	4945      	ldr	r1, [pc, #276]	@ (8002164 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8002050:	4613      	mov	r3, r2
 8002052:	005b      	lsls	r3, r3, #1
 8002054:	4413      	add	r3, r2
 8002056:	00db      	lsls	r3, r3, #3
 8002058:	440b      	add	r3, r1
 800205a:	3310      	adds	r3, #16
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8002060:	4b41      	ldr	r3, [pc, #260]	@ (8002168 <HW_TS_RTC_Wakeup_Handler+0x188>)
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	b2db      	uxtb	r3, r3
 8002066:	2b00      	cmp	r3, #0
 8002068:	d04c      	beq.n	8002104 <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 800206a:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800206e:	493d      	ldr	r1, [pc, #244]	@ (8002164 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8002070:	4613      	mov	r3, r2
 8002072:	005b      	lsls	r3, r3, #1
 8002074:	4413      	add	r3, r2
 8002076:	00db      	lsls	r3, r3, #3
 8002078:	440b      	add	r3, r1
 800207a:	330d      	adds	r3, #13
 800207c:	781b      	ldrb	r3, [r3, #0]
 800207e:	b2db      	uxtb	r3, r3
 8002080:	2b01      	cmp	r3, #1
 8002082:	d124      	bne.n	80020ce <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8002084:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002088:	2101      	movs	r1, #1
 800208a:	4618      	mov	r0, r3
 800208c:	f7ff fdf2 	bl	8001c74 <UnlinkTimer>
 8002090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002092:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	f383 8810 	msr	PRIMASK, r3
}
 800209a:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 800209c:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80020a0:	4930      	ldr	r1, [pc, #192]	@ (8002164 <HW_TS_RTC_Wakeup_Handler+0x184>)
 80020a2:	4613      	mov	r3, r2
 80020a4:	005b      	lsls	r3, r3, #1
 80020a6:	4413      	add	r3, r2
 80020a8:	00db      	lsls	r3, r3, #3
 80020aa:	440b      	add	r3, r1
 80020ac:	3304      	adds	r3, #4
 80020ae:	681a      	ldr	r2, [r3, #0]
 80020b0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80020b4:	4611      	mov	r1, r2
 80020b6:	4618      	mov	r0, r3
 80020b8:	f000 f9b8 	bl	800242c <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80020bc:	4b27      	ldr	r3, [pc, #156]	@ (800215c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	22ca      	movs	r2, #202	@ 0xca
 80020c2:	625a      	str	r2, [r3, #36]	@ 0x24
 80020c4:	4b25      	ldr	r3, [pc, #148]	@ (800215c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	2253      	movs	r2, #83	@ 0x53
 80020ca:	625a      	str	r2, [r3, #36]	@ 0x24
 80020cc:	e012      	b.n	80020f4 <HW_TS_RTC_Wakeup_Handler+0x114>
 80020ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020d0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	f383 8810 	msr	PRIMASK, r3
}
 80020d8:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 80020da:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80020de:	4618      	mov	r0, r3
 80020e0:	f000 f920 	bl	8002324 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80020e4:	4b1d      	ldr	r3, [pc, #116]	@ (800215c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	22ca      	movs	r2, #202	@ 0xca
 80020ea:	625a      	str	r2, [r3, #36]	@ 0x24
 80020ec:	4b1b      	ldr	r3, [pc, #108]	@ (800215c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	2253      	movs	r2, #83	@ 0x53
 80020f2:	625a      	str	r2, [r3, #36]	@ 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 80020f4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80020f8:	69fa      	ldr	r2, [r7, #28]
 80020fa:	4619      	mov	r1, r3
 80020fc:	69b8      	ldr	r0, [r7, #24]
 80020fe:	f000 fa1b 	bl	8002538 <HW_TS_RTC_Int_AppNot>
 8002102:	e022      	b.n	800214a <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 8002104:	f7ff fed2 	bl	8001eac <RescheduleTimerList>
 8002108:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800210a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	f383 8810 	msr	PRIMASK, r3
}
 8002112:	e01a      	b.n	800214a <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8002114:	bf00      	nop
 8002116:	4b11      	ldr	r3, [pc, #68]	@ (800215c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	f003 0304 	and.w	r3, r3, #4
 8002120:	2b00      	cmp	r3, #0
 8002122:	d0f8      	beq.n	8002116 <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8002124:	4b0d      	ldr	r3, [pc, #52]	@ (800215c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	68db      	ldr	r3, [r3, #12]
 800212a:	b2da      	uxtb	r2, r3
 800212c:	4b0b      	ldr	r3, [pc, #44]	@ (800215c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8002134:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8002136:	4b0d      	ldr	r3, [pc, #52]	@ (800216c <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8002138:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800213c:	60da      	str	r2, [r3, #12]
 800213e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002140:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	f383 8810 	msr	PRIMASK, r3
}
 8002148:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 800214a:	4b04      	ldr	r3, [pc, #16]	@ (800215c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	22ff      	movs	r2, #255	@ 0xff
 8002150:	625a      	str	r2, [r3, #36]	@ 0x24

  return;
 8002152:	bf00      	nop
}
 8002154:	3728      	adds	r7, #40	@ 0x28
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	20000d28 	.word	0x20000d28
 8002160:	200004e0 	.word	0x200004e0
 8002164:	20000450 	.word	0x20000450
 8002168:	200004e8 	.word	0x200004e8
 800216c:	58000800 	.word	0x58000800

08002170 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b088      	sub	sp, #32
 8002174:	af00      	add	r7, sp, #0
 8002176:	4603      	mov	r3, r0
 8002178:	6039      	str	r1, [r7, #0]
 800217a:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800217c:	4b5e      	ldr	r3, [pc, #376]	@ (80022f8 <HW_TS_Init+0x188>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	22ca      	movs	r2, #202	@ 0xca
 8002182:	625a      	str	r2, [r3, #36]	@ 0x24
 8002184:	4b5c      	ldr	r3, [pc, #368]	@ (80022f8 <HW_TS_Init+0x188>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	2253      	movs	r2, #83	@ 0x53
 800218a:	625a      	str	r2, [r3, #36]	@ 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800218c:	4b5b      	ldr	r3, [pc, #364]	@ (80022fc <HW_TS_Init+0x18c>)
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	4a5a      	ldr	r2, [pc, #360]	@ (80022fc <HW_TS_Init+0x18c>)
 8002192:	f043 0320 	orr.w	r3, r3, #32
 8002196:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8002198:	4b58      	ldr	r3, [pc, #352]	@ (80022fc <HW_TS_Init+0x18c>)
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	b2db      	uxtb	r3, r3
 800219e:	f003 0307 	and.w	r3, r3, #7
 80021a2:	b2db      	uxtb	r3, r3
 80021a4:	f1c3 0304 	rsb	r3, r3, #4
 80021a8:	b2da      	uxtb	r2, r3
 80021aa:	4b55      	ldr	r3, [pc, #340]	@ (8002300 <HW_TS_Init+0x190>)
 80021ac:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 80021ae:	4b53      	ldr	r3, [pc, #332]	@ (80022fc <HW_TS_Init+0x18c>)
 80021b0:	691b      	ldr	r3, [r3, #16]
 80021b2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80021b6:	f44f 02fe 	mov.w	r2, #8323072	@ 0x7f0000
 80021ba:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021bc:	693a      	ldr	r2, [r7, #16]
 80021be:	fa92 f2a2 	rbit	r2, r2
 80021c2:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80021c4:	68fa      	ldr	r2, [r7, #12]
 80021c6:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80021c8:	697a      	ldr	r2, [r7, #20]
 80021ca:	2a00      	cmp	r2, #0
 80021cc:	d101      	bne.n	80021d2 <HW_TS_Init+0x62>
  {
    return 32U;
 80021ce:	2220      	movs	r2, #32
 80021d0:	e003      	b.n	80021da <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 80021d2:	697a      	ldr	r2, [r7, #20]
 80021d4:	fab2 f282 	clz	r2, r2
 80021d8:	b2d2      	uxtb	r2, r2
 80021da:	40d3      	lsrs	r3, r2
 80021dc:	b2db      	uxtb	r3, r3
 80021de:	3301      	adds	r3, #1
 80021e0:	b2da      	uxtb	r2, r3
 80021e2:	4b48      	ldr	r3, [pc, #288]	@ (8002304 <HW_TS_Init+0x194>)
 80021e4:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 80021e6:	4b45      	ldr	r3, [pc, #276]	@ (80022fc <HW_TS_Init+0x18c>)
 80021e8:	691b      	ldr	r3, [r3, #16]
 80021ea:	b29b      	uxth	r3, r3
 80021ec:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80021f0:	b29b      	uxth	r3, r3
 80021f2:	3301      	adds	r3, #1
 80021f4:	b29a      	uxth	r2, r3
 80021f6:	4b44      	ldr	r3, [pc, #272]	@ (8002308 <HW_TS_Init+0x198>)
 80021f8:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 80021fa:	4b43      	ldr	r3, [pc, #268]	@ (8002308 <HW_TS_Init+0x198>)
 80021fc:	881b      	ldrh	r3, [r3, #0]
 80021fe:	3b01      	subs	r3, #1
 8002200:	4a40      	ldr	r2, [pc, #256]	@ (8002304 <HW_TS_Init+0x194>)
 8002202:	7812      	ldrb	r2, [r2, #0]
 8002204:	fb02 f303 	mul.w	r3, r2, r3
 8002208:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800220c:	4a3c      	ldr	r2, [pc, #240]	@ (8002300 <HW_TS_Init+0x190>)
 800220e:	7812      	ldrb	r2, [r2, #0]
 8002210:	40d3      	lsrs	r3, r2
 8002212:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8002214:	69bb      	ldr	r3, [r7, #24]
 8002216:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800221a:	4293      	cmp	r3, r2
 800221c:	d904      	bls.n	8002228 <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 800221e:	4b3b      	ldr	r3, [pc, #236]	@ (800230c <HW_TS_Init+0x19c>)
 8002220:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002224:	801a      	strh	r2, [r3, #0]
 8002226:	e003      	b.n	8002230 <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8002228:	69bb      	ldr	r3, [r7, #24]
 800222a:	b29a      	uxth	r2, r3
 800222c:	4b37      	ldr	r3, [pc, #220]	@ (800230c <HW_TS_Init+0x19c>)
 800222e:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8002230:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8002234:	f7ff fb9c 	bl	8001970 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8002238:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800223c:	f7ff fb84 	bl	8001948 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8002240:	79fb      	ldrb	r3, [r7, #7]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d13d      	bne.n	80022c2 <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8002246:	4b32      	ldr	r3, [pc, #200]	@ (8002310 <HW_TS_Init+0x1a0>)
 8002248:	2201      	movs	r2, #1
 800224a:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 800224c:	4b31      	ldr	r3, [pc, #196]	@ (8002314 <HW_TS_Init+0x1a4>)
 800224e:	f04f 32ff 	mov.w	r2, #4294967295
 8002252:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8002254:	2300      	movs	r3, #0
 8002256:	77fb      	strb	r3, [r7, #31]
 8002258:	e00c      	b.n	8002274 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 800225a:	7ffa      	ldrb	r2, [r7, #31]
 800225c:	492e      	ldr	r1, [pc, #184]	@ (8002318 <HW_TS_Init+0x1a8>)
 800225e:	4613      	mov	r3, r2
 8002260:	005b      	lsls	r3, r3, #1
 8002262:	4413      	add	r3, r2
 8002264:	00db      	lsls	r3, r3, #3
 8002266:	440b      	add	r3, r1
 8002268:	330c      	adds	r3, #12
 800226a:	2200      	movs	r2, #0
 800226c:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 800226e:	7ffb      	ldrb	r3, [r7, #31]
 8002270:	3301      	adds	r3, #1
 8002272:	77fb      	strb	r3, [r7, #31]
 8002274:	7ffb      	ldrb	r3, [r7, #31]
 8002276:	2b05      	cmp	r3, #5
 8002278:	d9ef      	bls.n	800225a <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 800227a:	4b28      	ldr	r3, [pc, #160]	@ (800231c <HW_TS_Init+0x1ac>)
 800227c:	2206      	movs	r2, #6
 800227e:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 8002280:	4b1d      	ldr	r3, [pc, #116]	@ (80022f8 <HW_TS_Init+0x188>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	689a      	ldr	r2, [r3, #8]
 8002286:	4b1c      	ldr	r3, [pc, #112]	@ (80022f8 <HW_TS_Init+0x188>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800228e:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8002290:	4b19      	ldr	r3, [pc, #100]	@ (80022f8 <HW_TS_Init+0x188>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	68db      	ldr	r3, [r3, #12]
 8002296:	b2da      	uxtb	r2, r3
 8002298:	4b17      	ldr	r3, [pc, #92]	@ (80022f8 <HW_TS_Init+0x188>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 80022a0:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 80022a2:	4b1f      	ldr	r3, [pc, #124]	@ (8002320 <HW_TS_Init+0x1b0>)
 80022a4:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80022a8:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 80022aa:	2003      	movs	r0, #3
 80022ac:	f006 fb1f 	bl	80088ee <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 80022b0:	4b11      	ldr	r3, [pc, #68]	@ (80022f8 <HW_TS_Init+0x188>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	689a      	ldr	r2, [r3, #8]
 80022b6:	4b10      	ldr	r3, [pc, #64]	@ (80022f8 <HW_TS_Init+0x188>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80022be:	609a      	str	r2, [r3, #8]
 80022c0:	e009      	b.n	80022d6 <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 80022c2:	4b0d      	ldr	r3, [pc, #52]	@ (80022f8 <HW_TS_Init+0x188>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d002      	beq.n	80022d6 <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 80022d0:	2003      	movs	r0, #3
 80022d2:	f006 fafe 	bl	80088d2 <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80022d6:	4b08      	ldr	r3, [pc, #32]	@ (80022f8 <HW_TS_Init+0x188>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	22ff      	movs	r2, #255	@ 0xff
 80022dc:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 80022de:	2200      	movs	r2, #0
 80022e0:	2103      	movs	r1, #3
 80022e2:	2003      	movs	r0, #3
 80022e4:	f006 fab3 	bl	800884e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80022e8:	2003      	movs	r0, #3
 80022ea:	f006 faca 	bl	8008882 <HAL_NVIC_EnableIRQ>

  return;
 80022ee:	bf00      	nop
}
 80022f0:	3720      	adds	r7, #32
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	20000d28 	.word	0x20000d28
 80022fc:	40002800 	.word	0x40002800
 8002300:	200004e9 	.word	0x200004e9
 8002304:	200004ea 	.word	0x200004ea
 8002308:	200004ec 	.word	0x200004ec
 800230c:	200004ee 	.word	0x200004ee
 8002310:	200004e8 	.word	0x200004e8
 8002314:	200004e4 	.word	0x200004e4
 8002318:	20000450 	.word	0x20000450
 800231c:	200004e0 	.word	0x200004e0
 8002320:	58000800 	.word	0x58000800

08002324 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b086      	sub	sp, #24
 8002328:	af00      	add	r7, sp, #0
 800232a:	4603      	mov	r3, r0
 800232c:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800232e:	f3ef 8310 	mrs	r3, PRIMASK
 8002332:	60fb      	str	r3, [r7, #12]
  return(result);
 8002334:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8002336:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8002338:	b672      	cpsid	i
}
 800233a:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 800233c:	2003      	movs	r0, #3
 800233e:	f006 faae 	bl	800889e <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002342:	4b34      	ldr	r3, [pc, #208]	@ (8002414 <HW_TS_Stop+0xf0>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	22ca      	movs	r2, #202	@ 0xca
 8002348:	625a      	str	r2, [r3, #36]	@ 0x24
 800234a:	4b32      	ldr	r3, [pc, #200]	@ (8002414 <HW_TS_Stop+0xf0>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	2253      	movs	r2, #83	@ 0x53
 8002350:	625a      	str	r2, [r3, #36]	@ 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8002352:	79fa      	ldrb	r2, [r7, #7]
 8002354:	4930      	ldr	r1, [pc, #192]	@ (8002418 <HW_TS_Stop+0xf4>)
 8002356:	4613      	mov	r3, r2
 8002358:	005b      	lsls	r3, r3, #1
 800235a:	4413      	add	r3, r2
 800235c:	00db      	lsls	r3, r3, #3
 800235e:	440b      	add	r3, r1
 8002360:	330c      	adds	r3, #12
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	b2db      	uxtb	r3, r3
 8002366:	2b02      	cmp	r3, #2
 8002368:	d142      	bne.n	80023f0 <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 800236a:	79fb      	ldrb	r3, [r7, #7]
 800236c:	2100      	movs	r1, #0
 800236e:	4618      	mov	r0, r3
 8002370:	f7ff fc80 	bl	8001c74 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8002374:	4b29      	ldr	r3, [pc, #164]	@ (800241c <HW_TS_Stop+0xf8>)
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800237a:	7cfb      	ldrb	r3, [r7, #19]
 800237c:	2b06      	cmp	r3, #6
 800237e:	d12f      	bne.n	80023e0 <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8002380:	4b27      	ldr	r3, [pc, #156]	@ (8002420 <HW_TS_Stop+0xfc>)
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002388:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800238c:	d107      	bne.n	800239e <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 800238e:	bf00      	nop
 8002390:	4b20      	ldr	r3, [pc, #128]	@ (8002414 <HW_TS_Stop+0xf0>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	68db      	ldr	r3, [r3, #12]
 8002396:	f003 0304 	and.w	r3, r3, #4
 800239a:	2b00      	cmp	r3, #0
 800239c:	d1f8      	bne.n	8002390 <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 800239e:	4b1d      	ldr	r3, [pc, #116]	@ (8002414 <HW_TS_Stop+0xf0>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	689a      	ldr	r2, [r3, #8]
 80023a4:	4b1b      	ldr	r3, [pc, #108]	@ (8002414 <HW_TS_Stop+0xf0>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80023ac:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 80023ae:	bf00      	nop
 80023b0:	4b18      	ldr	r3, [pc, #96]	@ (8002414 <HW_TS_Stop+0xf0>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	68db      	ldr	r3, [r3, #12]
 80023b6:	f003 0304 	and.w	r3, r3, #4
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d0f8      	beq.n	80023b0 <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80023be:	4b15      	ldr	r3, [pc, #84]	@ (8002414 <HW_TS_Stop+0xf0>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	68db      	ldr	r3, [r3, #12]
 80023c4:	b2da      	uxtb	r2, r3
 80023c6:	4b13      	ldr	r3, [pc, #76]	@ (8002414 <HW_TS_Stop+0xf0>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 80023ce:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80023d0:	4b14      	ldr	r3, [pc, #80]	@ (8002424 <HW_TS_Stop+0x100>)
 80023d2:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80023d6:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 80023d8:	2003      	movs	r0, #3
 80023da:	f006 fa88 	bl	80088ee <HAL_NVIC_ClearPendingIRQ>
 80023de:	e007      	b.n	80023f0 <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80023e0:	4b11      	ldr	r3, [pc, #68]	@ (8002428 <HW_TS_Stop+0x104>)
 80023e2:	781b      	ldrb	r3, [r3, #0]
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	7cfa      	ldrb	r2, [r7, #19]
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d001      	beq.n	80023f0 <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 80023ec:	f7ff fd5e 	bl	8001eac <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80023f0:	4b08      	ldr	r3, [pc, #32]	@ (8002414 <HW_TS_Stop+0xf0>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	22ff      	movs	r2, #255	@ 0xff
 80023f6:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80023f8:	2003      	movs	r0, #3
 80023fa:	f006 fa42 	bl	8008882 <HAL_NVIC_EnableIRQ>
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	f383 8810 	msr	PRIMASK, r3
}
 8002408:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 800240a:	bf00      	nop
}
 800240c:	3718      	adds	r7, #24
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	20000d28 	.word	0x20000d28
 8002418:	20000450 	.word	0x20000450
 800241c:	200004e0 	.word	0x200004e0
 8002420:	40002800 	.word	0x40002800
 8002424:	58000800 	.word	0x58000800
 8002428:	200004e1 	.word	0x200004e1

0800242c <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b086      	sub	sp, #24
 8002430:	af00      	add	r7, sp, #0
 8002432:	4603      	mov	r3, r0
 8002434:	6039      	str	r1, [r7, #0]
 8002436:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8002438:	79fa      	ldrb	r2, [r7, #7]
 800243a:	493b      	ldr	r1, [pc, #236]	@ (8002528 <HW_TS_Start+0xfc>)
 800243c:	4613      	mov	r3, r2
 800243e:	005b      	lsls	r3, r3, #1
 8002440:	4413      	add	r3, r2
 8002442:	00db      	lsls	r3, r3, #3
 8002444:	440b      	add	r3, r1
 8002446:	330c      	adds	r3, #12
 8002448:	781b      	ldrb	r3, [r3, #0]
 800244a:	b2db      	uxtb	r3, r3
 800244c:	2b02      	cmp	r3, #2
 800244e:	d103      	bne.n	8002458 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8002450:	79fb      	ldrb	r3, [r7, #7]
 8002452:	4618      	mov	r0, r3
 8002454:	f7ff ff66 	bl	8002324 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002458:	f3ef 8310 	mrs	r3, PRIMASK
 800245c:	60fb      	str	r3, [r7, #12]
  return(result);
 800245e:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8002460:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8002462:	b672      	cpsid	i
}
 8002464:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8002466:	2003      	movs	r0, #3
 8002468:	f006 fa19 	bl	800889e <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800246c:	4b2f      	ldr	r3, [pc, #188]	@ (800252c <HW_TS_Start+0x100>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	22ca      	movs	r2, #202	@ 0xca
 8002472:	625a      	str	r2, [r3, #36]	@ 0x24
 8002474:	4b2d      	ldr	r3, [pc, #180]	@ (800252c <HW_TS_Start+0x100>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	2253      	movs	r2, #83	@ 0x53
 800247a:	625a      	str	r2, [r3, #36]	@ 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 800247c:	79fa      	ldrb	r2, [r7, #7]
 800247e:	492a      	ldr	r1, [pc, #168]	@ (8002528 <HW_TS_Start+0xfc>)
 8002480:	4613      	mov	r3, r2
 8002482:	005b      	lsls	r3, r3, #1
 8002484:	4413      	add	r3, r2
 8002486:	00db      	lsls	r3, r3, #3
 8002488:	440b      	add	r3, r1
 800248a:	330c      	adds	r3, #12
 800248c:	2202      	movs	r2, #2
 800248e:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8002490:	79fa      	ldrb	r2, [r7, #7]
 8002492:	4925      	ldr	r1, [pc, #148]	@ (8002528 <HW_TS_Start+0xfc>)
 8002494:	4613      	mov	r3, r2
 8002496:	005b      	lsls	r3, r3, #1
 8002498:	4413      	add	r3, r2
 800249a:	00db      	lsls	r3, r3, #3
 800249c:	440b      	add	r3, r1
 800249e:	3308      	adds	r3, #8
 80024a0:	683a      	ldr	r2, [r7, #0]
 80024a2:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 80024a4:	79fa      	ldrb	r2, [r7, #7]
 80024a6:	4920      	ldr	r1, [pc, #128]	@ (8002528 <HW_TS_Start+0xfc>)
 80024a8:	4613      	mov	r3, r2
 80024aa:	005b      	lsls	r3, r3, #1
 80024ac:	4413      	add	r3, r2
 80024ae:	00db      	lsls	r3, r3, #3
 80024b0:	440b      	add	r3, r1
 80024b2:	3304      	adds	r3, #4
 80024b4:	683a      	ldr	r2, [r7, #0]
 80024b6:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 80024b8:	79fb      	ldrb	r3, [r7, #7]
 80024ba:	4618      	mov	r0, r3
 80024bc:	f7ff fb30 	bl	8001b20 <linkTimer>
 80024c0:	4603      	mov	r3, r0
 80024c2:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 80024c4:	4b1a      	ldr	r3, [pc, #104]	@ (8002530 <HW_TS_Start+0x104>)
 80024c6:	781b      	ldrb	r3, [r3, #0]
 80024c8:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80024ca:	4b1a      	ldr	r3, [pc, #104]	@ (8002534 <HW_TS_Start+0x108>)
 80024cc:	781b      	ldrb	r3, [r3, #0]
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	7c7a      	ldrb	r2, [r7, #17]
 80024d2:	429a      	cmp	r2, r3
 80024d4:	d002      	beq.n	80024dc <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 80024d6:	f7ff fce9 	bl	8001eac <RescheduleTimerList>
 80024da:	e013      	b.n	8002504 <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 80024dc:	79fa      	ldrb	r2, [r7, #7]
 80024de:	4912      	ldr	r1, [pc, #72]	@ (8002528 <HW_TS_Start+0xfc>)
 80024e0:	4613      	mov	r3, r2
 80024e2:	005b      	lsls	r3, r3, #1
 80024e4:	4413      	add	r3, r2
 80024e6:	00db      	lsls	r3, r3, #3
 80024e8:	440b      	add	r3, r1
 80024ea:	3308      	adds	r3, #8
 80024ec:	6819      	ldr	r1, [r3, #0]
 80024ee:	8a7b      	ldrh	r3, [r7, #18]
 80024f0:	79fa      	ldrb	r2, [r7, #7]
 80024f2:	1ac9      	subs	r1, r1, r3
 80024f4:	480c      	ldr	r0, [pc, #48]	@ (8002528 <HW_TS_Start+0xfc>)
 80024f6:	4613      	mov	r3, r2
 80024f8:	005b      	lsls	r3, r3, #1
 80024fa:	4413      	add	r3, r2
 80024fc:	00db      	lsls	r3, r3, #3
 80024fe:	4403      	add	r3, r0
 8002500:	3308      	adds	r3, #8
 8002502:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8002504:	4b09      	ldr	r3, [pc, #36]	@ (800252c <HW_TS_Start+0x100>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	22ff      	movs	r2, #255	@ 0xff
 800250a:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 800250c:	2003      	movs	r0, #3
 800250e:	f006 f9b8 	bl	8008882 <HAL_NVIC_EnableIRQ>
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	f383 8810 	msr	PRIMASK, r3
}
 800251c:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 800251e:	bf00      	nop
}
 8002520:	3718      	adds	r7, #24
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}
 8002526:	bf00      	nop
 8002528:	20000450 	.word	0x20000450
 800252c:	20000d28 	.word	0x20000d28
 8002530:	200004e0 	.word	0x200004e0
 8002534:	200004e1 	.word	0x200004e1

08002538 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b084      	sub	sp, #16
 800253c:	af00      	add	r7, sp, #0
 800253e:	60f8      	str	r0, [r7, #12]
 8002540:	460b      	mov	r3, r1
 8002542:	607a      	str	r2, [r7, #4]
 8002544:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	4798      	blx	r3

  return;
 800254a:	bf00      	nop
}
 800254c:	3710      	adds	r7, #16
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}

08002552 <LL_AHB2_GRP1_EnableClock>:
{
 8002552:	b480      	push	{r7}
 8002554:	b085      	sub	sp, #20
 8002556:	af00      	add	r7, sp, #0
 8002558:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800255a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800255e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002560:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	4313      	orrs	r3, r2
 8002568:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800256a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800256e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	4013      	ands	r3, r2
 8002574:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002576:	68fb      	ldr	r3, [r7, #12]
}
 8002578:	bf00      	nop
 800257a:	3714      	adds	r7, #20
 800257c:	46bd      	mov	sp, r7
 800257e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002582:	4770      	bx	lr

08002584 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8002584:	b480      	push	{r7}
 8002586:	b085      	sub	sp, #20
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 800258c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002590:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002592:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	4313      	orrs	r3, r2
 800259a:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800259c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80025a0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	4013      	ands	r3, r2
 80025a6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80025a8:	68fb      	ldr	r3, [r7, #12]
}
 80025aa:	bf00      	nop
 80025ac:	3714      	adds	r7, #20
 80025ae:	46bd      	mov	sp, r7
 80025b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b4:	4770      	bx	lr

080025b6 <LL_APB1_GRP1_DisableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_DisableClock(uint32_t Periphs)
{
 80025b6:	b480      	push	{r7}
 80025b8:	b083      	sub	sp, #12
 80025ba:	af00      	add	r7, sp, #0
 80025bc:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 80025be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80025c2:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	43db      	mvns	r3, r3
 80025c8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80025cc:	4013      	ands	r3, r2
 80025ce:	658b      	str	r3, [r1, #88]	@ 0x58
}
 80025d0:	bf00      	nop
 80025d2:	370c      	adds	r7, #12
 80025d4:	46bd      	mov	sp, r7
 80025d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025da:	4770      	bx	lr

080025dc <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80025e0:	4b1b      	ldr	r3, [pc, #108]	@ (8002650 <MX_I2C1_Init+0x74>)
 80025e2:	4a1c      	ldr	r2, [pc, #112]	@ (8002654 <MX_I2C1_Init+0x78>)
 80025e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10B17DB5;
 80025e6:	4b1a      	ldr	r3, [pc, #104]	@ (8002650 <MX_I2C1_Init+0x74>)
 80025e8:	4a1b      	ldr	r2, [pc, #108]	@ (8002658 <MX_I2C1_Init+0x7c>)
 80025ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80025ec:	4b18      	ldr	r3, [pc, #96]	@ (8002650 <MX_I2C1_Init+0x74>)
 80025ee:	2200      	movs	r2, #0
 80025f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80025f2:	4b17      	ldr	r3, [pc, #92]	@ (8002650 <MX_I2C1_Init+0x74>)
 80025f4:	2201      	movs	r2, #1
 80025f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80025f8:	4b15      	ldr	r3, [pc, #84]	@ (8002650 <MX_I2C1_Init+0x74>)
 80025fa:	2200      	movs	r2, #0
 80025fc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80025fe:	4b14      	ldr	r3, [pc, #80]	@ (8002650 <MX_I2C1_Init+0x74>)
 8002600:	2200      	movs	r2, #0
 8002602:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002604:	4b12      	ldr	r3, [pc, #72]	@ (8002650 <MX_I2C1_Init+0x74>)
 8002606:	2200      	movs	r2, #0
 8002608:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800260a:	4b11      	ldr	r3, [pc, #68]	@ (8002650 <MX_I2C1_Init+0x74>)
 800260c:	2200      	movs	r2, #0
 800260e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002610:	4b0f      	ldr	r3, [pc, #60]	@ (8002650 <MX_I2C1_Init+0x74>)
 8002612:	2200      	movs	r2, #0
 8002614:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002616:	480e      	ldr	r0, [pc, #56]	@ (8002650 <MX_I2C1_Init+0x74>)
 8002618:	f007 f820 	bl	800965c <HAL_I2C_Init>
 800261c:	4603      	mov	r3, r0
 800261e:	2b00      	cmp	r3, #0
 8002620:	d001      	beq.n	8002626 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002622:	f000 fb71 	bl	8002d08 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002626:	2100      	movs	r1, #0
 8002628:	4809      	ldr	r0, [pc, #36]	@ (8002650 <MX_I2C1_Init+0x74>)
 800262a:	f007 fc63 	bl	8009ef4 <HAL_I2CEx_ConfigAnalogFilter>
 800262e:	4603      	mov	r3, r0
 8002630:	2b00      	cmp	r3, #0
 8002632:	d001      	beq.n	8002638 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002634:	f000 fb68 	bl	8002d08 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002638:	2100      	movs	r1, #0
 800263a:	4805      	ldr	r0, [pc, #20]	@ (8002650 <MX_I2C1_Init+0x74>)
 800263c:	f007 fca5 	bl	8009f8a <HAL_I2CEx_ConfigDigitalFilter>
 8002640:	4603      	mov	r3, r0
 8002642:	2b00      	cmp	r3, #0
 8002644:	d001      	beq.n	800264a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002646:	f000 fb5f 	bl	8002d08 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800264a:	bf00      	nop
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	200004f0 	.word	0x200004f0
 8002654:	40005400 	.word	0x40005400
 8002658:	10b17db5 	.word	0x10b17db5

0800265c <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002660:	4b1d      	ldr	r3, [pc, #116]	@ (80026d8 <MX_I2C3_Init+0x7c>)
 8002662:	4a1e      	ldr	r2, [pc, #120]	@ (80026dc <MX_I2C3_Init+0x80>)
 8002664:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00910B1C;
 8002666:	4b1c      	ldr	r3, [pc, #112]	@ (80026d8 <MX_I2C3_Init+0x7c>)
 8002668:	4a1d      	ldr	r2, [pc, #116]	@ (80026e0 <MX_I2C3_Init+0x84>)
 800266a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 800266c:	4b1a      	ldr	r3, [pc, #104]	@ (80026d8 <MX_I2C3_Init+0x7c>)
 800266e:	2200      	movs	r2, #0
 8002670:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002672:	4b19      	ldr	r3, [pc, #100]	@ (80026d8 <MX_I2C3_Init+0x7c>)
 8002674:	2201      	movs	r2, #1
 8002676:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002678:	4b17      	ldr	r3, [pc, #92]	@ (80026d8 <MX_I2C3_Init+0x7c>)
 800267a:	2200      	movs	r2, #0
 800267c:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800267e:	4b16      	ldr	r3, [pc, #88]	@ (80026d8 <MX_I2C3_Init+0x7c>)
 8002680:	2200      	movs	r2, #0
 8002682:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002684:	4b14      	ldr	r3, [pc, #80]	@ (80026d8 <MX_I2C3_Init+0x7c>)
 8002686:	2200      	movs	r2, #0
 8002688:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800268a:	4b13      	ldr	r3, [pc, #76]	@ (80026d8 <MX_I2C3_Init+0x7c>)
 800268c:	2200      	movs	r2, #0
 800268e:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002690:	4b11      	ldr	r3, [pc, #68]	@ (80026d8 <MX_I2C3_Init+0x7c>)
 8002692:	2200      	movs	r2, #0
 8002694:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002696:	4810      	ldr	r0, [pc, #64]	@ (80026d8 <MX_I2C3_Init+0x7c>)
 8002698:	f006 ffe0 	bl	800965c <HAL_I2C_Init>
 800269c:	4603      	mov	r3, r0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d001      	beq.n	80026a6 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80026a2:	f000 fb31 	bl	8002d08 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80026a6:	2100      	movs	r1, #0
 80026a8:	480b      	ldr	r0, [pc, #44]	@ (80026d8 <MX_I2C3_Init+0x7c>)
 80026aa:	f007 fc23 	bl	8009ef4 <HAL_I2CEx_ConfigAnalogFilter>
 80026ae:	4603      	mov	r3, r0
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d001      	beq.n	80026b8 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80026b4:	f000 fb28 	bl	8002d08 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80026b8:	2100      	movs	r1, #0
 80026ba:	4807      	ldr	r0, [pc, #28]	@ (80026d8 <MX_I2C3_Init+0x7c>)
 80026bc:	f007 fc65 	bl	8009f8a <HAL_I2CEx_ConfigDigitalFilter>
 80026c0:	4603      	mov	r3, r0
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d001      	beq.n	80026ca <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80026c6:	f000 fb1f 	bl	8002d08 <Error_Handler>
  }

  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C3);
 80026ca:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 80026ce:	f007 fca9 	bl	800a024 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80026d2:	bf00      	nop
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	20000544 	.word	0x20000544
 80026dc:	40005c00 	.word	0x40005c00
 80026e0:	00910b1c 	.word	0x00910b1c

080026e4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b09c      	sub	sp, #112	@ 0x70
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026ec:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80026f0:	2200      	movs	r2, #0
 80026f2:	601a      	str	r2, [r3, #0]
 80026f4:	605a      	str	r2, [r3, #4]
 80026f6:	609a      	str	r2, [r3, #8]
 80026f8:	60da      	str	r2, [r3, #12]
 80026fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80026fc:	f107 030c 	add.w	r3, r7, #12
 8002700:	2250      	movs	r2, #80	@ 0x50
 8002702:	2100      	movs	r1, #0
 8002704:	4618      	mov	r0, r3
 8002706:	f019 f818 	bl	801b73a <memset>
  if(i2cHandle->Instance==I2C1)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a37      	ldr	r2, [pc, #220]	@ (80027ec <HAL_I2C_MspInit+0x108>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d127      	bne.n	8002764 <HAL_I2C_MspInit+0x80>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002714:	2304      	movs	r3, #4
 8002716:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002718:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 800271c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800271e:	f107 030c 	add.w	r3, r7, #12
 8002722:	4618      	mov	r0, r3
 8002724:	f00a fd6d 	bl	800d202 <HAL_RCCEx_PeriphCLKConfig>
 8002728:	4603      	mov	r3, r0
 800272a:	2b00      	cmp	r3, #0
 800272c:	d001      	beq.n	8002732 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800272e:	f000 faeb 	bl	8002d08 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002732:	2002      	movs	r0, #2
 8002734:	f7ff ff0d 	bl	8002552 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002738:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800273c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800273e:	2312      	movs	r3, #18
 8002740:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002742:	2300      	movs	r3, #0
 8002744:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002746:	2300      	movs	r3, #0
 8002748:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800274a:	2304      	movs	r3, #4
 800274c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800274e:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002752:	4619      	mov	r1, r3
 8002754:	4826      	ldr	r0, [pc, #152]	@ (80027f0 <HAL_I2C_MspInit+0x10c>)
 8002756:	f006 fcad 	bl	80090b4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800275a:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800275e:	f7ff ff11 	bl	8002584 <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8002762:	e03e      	b.n	80027e2 <HAL_I2C_MspInit+0xfe>
  else if(i2cHandle->Instance==I2C3)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a22      	ldr	r2, [pc, #136]	@ (80027f4 <HAL_I2C_MspInit+0x110>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d139      	bne.n	80027e2 <HAL_I2C_MspInit+0xfe>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 800276e:	2308      	movs	r3, #8
 8002770:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8002772:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 8002776:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002778:	f107 030c 	add.w	r3, r7, #12
 800277c:	4618      	mov	r0, r3
 800277e:	f00a fd40 	bl	800d202 <HAL_RCCEx_PeriphCLKConfig>
 8002782:	4603      	mov	r3, r0
 8002784:	2b00      	cmp	r3, #0
 8002786:	d001      	beq.n	800278c <HAL_I2C_MspInit+0xa8>
      Error_Handler();
 8002788:	f000 fabe 	bl	8002d08 <Error_Handler>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800278c:	2001      	movs	r0, #1
 800278e:	f7ff fee0 	bl	8002552 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002792:	2002      	movs	r0, #2
 8002794:	f7ff fedd 	bl	8002552 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002798:	2380      	movs	r3, #128	@ 0x80
 800279a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800279c:	2312      	movs	r3, #18
 800279e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a0:	2300      	movs	r3, #0
 80027a2:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027a4:	2300      	movs	r3, #0
 80027a6:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80027a8:	2304      	movs	r3, #4
 80027aa:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027ac:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80027b0:	4619      	mov	r1, r3
 80027b2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80027b6:	f006 fc7d 	bl	80090b4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80027ba:	2310      	movs	r3, #16
 80027bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80027be:	2312      	movs	r3, #18
 80027c0:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027c2:	2300      	movs	r3, #0
 80027c4:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027c6:	2300      	movs	r3, #0
 80027c8:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80027ca:	2304      	movs	r3, #4
 80027cc:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027ce:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80027d2:	4619      	mov	r1, r3
 80027d4:	4806      	ldr	r0, [pc, #24]	@ (80027f0 <HAL_I2C_MspInit+0x10c>)
 80027d6:	f006 fc6d 	bl	80090b4 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80027da:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 80027de:	f7ff fed1 	bl	8002584 <LL_APB1_GRP1_EnableClock>
}
 80027e2:	bf00      	nop
 80027e4:	3770      	adds	r7, #112	@ 0x70
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	40005400 	.word	0x40005400
 80027f0:	48000400 	.word	0x48000400
 80027f4:	40005c00 	.word	0x40005c00

080027f8 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b082      	sub	sp, #8
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C1)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a13      	ldr	r2, [pc, #76]	@ (8002854 <HAL_I2C_MspDeInit+0x5c>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d10e      	bne.n	8002828 <HAL_I2C_MspDeInit+0x30>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800280a:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800280e:	f7ff fed2 	bl	80025b6 <LL_APB1_GRP1_DisableClock>

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 8002812:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002816:	4810      	ldr	r0, [pc, #64]	@ (8002858 <HAL_I2C_MspDeInit+0x60>)
 8002818:	f006 fdbc 	bl	8009394 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 800281c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002820:	480d      	ldr	r0, [pc, #52]	@ (8002858 <HAL_I2C_MspDeInit+0x60>)
 8002822:	f006 fdb7 	bl	8009394 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }
}
 8002826:	e011      	b.n	800284c <HAL_I2C_MspDeInit+0x54>
  else if(i2cHandle->Instance==I2C3)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a0b      	ldr	r2, [pc, #44]	@ (800285c <HAL_I2C_MspDeInit+0x64>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d10c      	bne.n	800284c <HAL_I2C_MspDeInit+0x54>
    __HAL_RCC_I2C3_CLK_DISABLE();
 8002832:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8002836:	f7ff febe 	bl	80025b6 <LL_APB1_GRP1_DisableClock>
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_7);
 800283a:	2180      	movs	r1, #128	@ 0x80
 800283c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002840:	f006 fda8 	bl	8009394 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_4);
 8002844:	2110      	movs	r1, #16
 8002846:	4804      	ldr	r0, [pc, #16]	@ (8002858 <HAL_I2C_MspDeInit+0x60>)
 8002848:	f006 fda4 	bl	8009394 <HAL_GPIO_DeInit>
}
 800284c:	bf00      	nop
 800284e:	3708      	adds	r7, #8
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}
 8002854:	40005400 	.word	0x40005400
 8002858:	48000400 	.word	0x48000400
 800285c:	40005c00 	.word	0x40005c00

08002860 <LL_AHB3_GRP1_EnableClock>:
{
 8002860:	b480      	push	{r7}
 8002862:	b085      	sub	sp, #20
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8002868:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800286c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800286e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	4313      	orrs	r3, r2
 8002876:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8002878:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800287c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	4013      	ands	r3, r2
 8002882:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002884:	68fb      	ldr	r3, [r7, #12]
}
 8002886:	bf00      	nop
 8002888:	3714      	adds	r7, #20
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr
	...

08002894 <MX_IPCC_Init>:

IPCC_HandleTypeDef hipcc;

/* IPCC init function */
void MX_IPCC_Init(void)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8002898:	4b06      	ldr	r3, [pc, #24]	@ (80028b4 <MX_IPCC_Init+0x20>)
 800289a:	4a07      	ldr	r2, [pc, #28]	@ (80028b8 <MX_IPCC_Init+0x24>)
 800289c:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 800289e:	4805      	ldr	r0, [pc, #20]	@ (80028b4 <MX_IPCC_Init+0x20>)
 80028a0:	f007 fbd2 	bl	800a048 <HAL_IPCC_Init>
 80028a4:	4603      	mov	r3, r0
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d001      	beq.n	80028ae <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 80028aa:	f000 fa2d 	bl	8002d08 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 80028ae:	bf00      	nop
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	bf00      	nop
 80028b4:	20000598 	.word	0x20000598
 80028b8:	58000c00 	.word	0x58000c00

080028bc <HAL_IPCC_MspInit>:

void HAL_IPCC_MspInit(IPCC_HandleTypeDef* ipccHandle)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b082      	sub	sp, #8
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]

  if(ipccHandle->Instance==IPCC)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a0d      	ldr	r2, [pc, #52]	@ (8002900 <HAL_IPCC_MspInit+0x44>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d113      	bne.n	80028f6 <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* IPCC clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 80028ce:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80028d2:	f7ff ffc5 	bl	8002860 <LL_AHB3_GRP1_EnableClock>

    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 80028d6:	2200      	movs	r2, #0
 80028d8:	2100      	movs	r1, #0
 80028da:	202c      	movs	r0, #44	@ 0x2c
 80028dc:	f005 ffb7 	bl	800884e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 80028e0:	202c      	movs	r0, #44	@ 0x2c
 80028e2:	f005 ffce 	bl	8008882 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 80028e6:	2200      	movs	r2, #0
 80028e8:	2100      	movs	r1, #0
 80028ea:	202d      	movs	r0, #45	@ 0x2d
 80028ec:	f005 ffaf 	bl	800884e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 80028f0:	202d      	movs	r0, #45	@ 0x2d
 80028f2:	f005 ffc6 	bl	8008882 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }
}
 80028f6:	bf00      	nop
 80028f8:	3708      	adds	r7, #8
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	58000c00 	.word	0x58000c00

08002904 <LL_HSEM_1StepLock>:
  * @param  HSEMx HSEM Instance.
  * @param  Semaphore Semaphore number. Value between Min_Data=0 and Max_Data=31
  * @retval 1 lock fail, 0 lock successful or already locked by same core
  */
__STATIC_INLINE uint32_t LL_HSEM_1StepLock(HSEM_TypeDef *HSEMx, uint32_t Semaphore)
{
 8002904:	b480      	push	{r7}
 8002906:	b083      	sub	sp, #12
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
 800290c:	6039      	str	r1, [r7, #0]
  return ((HSEMx->RLR[Semaphore] != (HSEM_R_LOCK | LL_HSEM_COREID)) ? 1UL : 0UL);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	683a      	ldr	r2, [r7, #0]
 8002912:	3220      	adds	r2, #32
 8002914:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002918:	4a05      	ldr	r2, [pc, #20]	@ (8002930 <LL_HSEM_1StepLock+0x2c>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d001      	beq.n	8002922 <LL_HSEM_1StepLock+0x1e>
 800291e:	2301      	movs	r3, #1
 8002920:	e000      	b.n	8002924 <LL_HSEM_1StepLock+0x20>
 8002922:	2300      	movs	r3, #0
}
 8002924:	4618      	mov	r0, r3
 8002926:	370c      	adds	r7, #12
 8002928:	46bd      	mov	sp, r7
 800292a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292e:	4770      	bx	lr
 8002930:	80000400 	.word	0x80000400

08002934 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)//lors d'un appuie sur un bouton, le systeme s'interrompt afin d'arriver dans cette fonction redefinie avec en parametre d'entre , le bouton sur lequel l'on a appuiyé
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b082      	sub	sp, #8
 8002938:	af00      	add	r7, sp, #0
 800293a:	4603      	mov	r3, r0
 800293c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin==GPIO_PIN_14){
 800293e:	88fb      	ldrh	r3, [r7, #6]
 8002940:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002944:	d12f      	bne.n	80029a6 <HAL_GPIO_EXTI_Callback+0x72>

		if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_14)== GPIO_PIN_RESET){
 8002946:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800294a:	4833      	ldr	r0, [pc, #204]	@ (8002a18 <HAL_GPIO_EXTI_Callback+0xe4>)
 800294c:	f006 fe00 	bl	8009550 <HAL_GPIO_ReadPin>
 8002950:	4603      	mov	r3, r0
 8002952:	2b00      	cmp	r3, #0
 8002954:	d109      	bne.n	800296a <HAL_GPIO_EXTI_Callback+0x36>

					boutonAtime=0;
 8002956:	4b31      	ldr	r3, [pc, #196]	@ (8002a1c <HAL_GPIO_EXTI_Callback+0xe8>)
 8002958:	2200      	movs	r2, #0
 800295a:	601a      	str	r2, [r3, #0]
					tbtn1=HAL_GetTick();
 800295c:	f004 fd98 	bl	8007490 <HAL_GetTick>
 8002960:	4603      	mov	r3, r0
 8002962:	461a      	mov	r2, r3
 8002964:	4b2e      	ldr	r3, [pc, #184]	@ (8002a20 <HAL_GPIO_EXTI_Callback+0xec>)
 8002966:	601a      	str	r2, [r3, #0]
 8002968:	e010      	b.n	800298c <HAL_GPIO_EXTI_Callback+0x58>


				}
				else{
					BTN_A++;
 800296a:	4b2e      	ldr	r3, [pc, #184]	@ (8002a24 <HAL_GPIO_EXTI_Callback+0xf0>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	3301      	adds	r3, #1
 8002970:	4a2c      	ldr	r2, [pc, #176]	@ (8002a24 <HAL_GPIO_EXTI_Callback+0xf0>)
 8002972:	6013      	str	r3, [r2, #0]

					boutonAtime=HAL_GetTick()-tbtn1;
 8002974:	f004 fd8c 	bl	8007490 <HAL_GetTick>
 8002978:	4603      	mov	r3, r0
 800297a:	4a29      	ldr	r2, [pc, #164]	@ (8002a20 <HAL_GPIO_EXTI_Callback+0xec>)
 800297c:	6812      	ldr	r2, [r2, #0]
 800297e:	1a9b      	subs	r3, r3, r2
 8002980:	461a      	mov	r2, r3
 8002982:	4b26      	ldr	r3, [pc, #152]	@ (8002a1c <HAL_GPIO_EXTI_Callback+0xe8>)
 8002984:	601a      	str	r2, [r3, #0]
					tbtn1=0;
 8002986:	4b26      	ldr	r3, [pc, #152]	@ (8002a20 <HAL_GPIO_EXTI_Callback+0xec>)
 8002988:	2200      	movs	r2, #0
 800298a:	601a      	str	r2, [r3, #0]


				}

				if(boutonAtime>=400){
 800298c:	4b23      	ldr	r3, [pc, #140]	@ (8002a1c <HAL_GPIO_EXTI_Callback+0xe8>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8002994:	db07      	blt.n	80029a6 <HAL_GPIO_EXTI_Callback+0x72>
					BTN_A_LONG++;
 8002996:	4b24      	ldr	r3, [pc, #144]	@ (8002a28 <HAL_GPIO_EXTI_Callback+0xf4>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	3301      	adds	r3, #1
 800299c:	4a22      	ldr	r2, [pc, #136]	@ (8002a28 <HAL_GPIO_EXTI_Callback+0xf4>)
 800299e:	6013      	str	r3, [r2, #0]
					BTN_A=0;
 80029a0:	4b20      	ldr	r3, [pc, #128]	@ (8002a24 <HAL_GPIO_EXTI_Callback+0xf0>)
 80029a2:	2200      	movs	r2, #0
 80029a4:	601a      	str	r2, [r3, #0]
				}

	}
	if(GPIO_Pin==GPIO_PIN_15){
 80029a6:	88fb      	ldrh	r3, [r7, #6]
 80029a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80029ac:	d12f      	bne.n	8002a0e <HAL_GPIO_EXTI_Callback+0xda>

		if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_15)== GPIO_PIN_RESET){
 80029ae:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80029b2:	4819      	ldr	r0, [pc, #100]	@ (8002a18 <HAL_GPIO_EXTI_Callback+0xe4>)
 80029b4:	f006 fdcc 	bl	8009550 <HAL_GPIO_ReadPin>
 80029b8:	4603      	mov	r3, r0
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d109      	bne.n	80029d2 <HAL_GPIO_EXTI_Callback+0x9e>

			boutonBtime=0;
 80029be:	4b1b      	ldr	r3, [pc, #108]	@ (8002a2c <HAL_GPIO_EXTI_Callback+0xf8>)
 80029c0:	2200      	movs	r2, #0
 80029c2:	601a      	str	r2, [r3, #0]
			tbtn2=HAL_GetTick();
 80029c4:	f004 fd64 	bl	8007490 <HAL_GetTick>
 80029c8:	4603      	mov	r3, r0
 80029ca:	461a      	mov	r2, r3
 80029cc:	4b18      	ldr	r3, [pc, #96]	@ (8002a30 <HAL_GPIO_EXTI_Callback+0xfc>)
 80029ce:	601a      	str	r2, [r3, #0]
 80029d0:	e010      	b.n	80029f4 <HAL_GPIO_EXTI_Callback+0xc0>


		}
		else{
			BTN_B++;
 80029d2:	4b18      	ldr	r3, [pc, #96]	@ (8002a34 <HAL_GPIO_EXTI_Callback+0x100>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	3301      	adds	r3, #1
 80029d8:	4a16      	ldr	r2, [pc, #88]	@ (8002a34 <HAL_GPIO_EXTI_Callback+0x100>)
 80029da:	6013      	str	r3, [r2, #0]

			boutonBtime=HAL_GetTick()-tbtn2;
 80029dc:	f004 fd58 	bl	8007490 <HAL_GetTick>
 80029e0:	4603      	mov	r3, r0
 80029e2:	4a13      	ldr	r2, [pc, #76]	@ (8002a30 <HAL_GPIO_EXTI_Callback+0xfc>)
 80029e4:	6812      	ldr	r2, [r2, #0]
 80029e6:	1a9b      	subs	r3, r3, r2
 80029e8:	461a      	mov	r2, r3
 80029ea:	4b10      	ldr	r3, [pc, #64]	@ (8002a2c <HAL_GPIO_EXTI_Callback+0xf8>)
 80029ec:	601a      	str	r2, [r3, #0]
			tbtn2=0;
 80029ee:	4b10      	ldr	r3, [pc, #64]	@ (8002a30 <HAL_GPIO_EXTI_Callback+0xfc>)
 80029f0:	2200      	movs	r2, #0
 80029f2:	601a      	str	r2, [r3, #0]


		}

		if(boutonBtime>=400){
 80029f4:	4b0d      	ldr	r3, [pc, #52]	@ (8002a2c <HAL_GPIO_EXTI_Callback+0xf8>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 80029fc:	db07      	blt.n	8002a0e <HAL_GPIO_EXTI_Callback+0xda>
			BTN_B_LONG++;
 80029fe:	4b0e      	ldr	r3, [pc, #56]	@ (8002a38 <HAL_GPIO_EXTI_Callback+0x104>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	3301      	adds	r3, #1
 8002a04:	4a0c      	ldr	r2, [pc, #48]	@ (8002a38 <HAL_GPIO_EXTI_Callback+0x104>)
 8002a06:	6013      	str	r3, [r2, #0]
			BTN_B=0;
 8002a08:	4b0a      	ldr	r3, [pc, #40]	@ (8002a34 <HAL_GPIO_EXTI_Callback+0x100>)
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	601a      	str	r2, [r3, #0]
		}



	}
}
 8002a0e:	bf00      	nop
 8002a10:	3708      	adds	r7, #8
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	bf00      	nop
 8002a18:	48000800 	.word	0x48000800
 8002a1c:	20000c8c 	.word	0x20000c8c
 8002a20:	20000c94 	.word	0x20000c94
 8002a24:	20000968 	.word	0x20000968
 8002a28:	20000ca0 	.word	0x20000ca0
 8002a2c:	20000c90 	.word	0x20000c90
 8002a30:	20000c98 	.word	0x20000c98
 8002a34:	2000096c 	.word	0x2000096c
 8002a38:	20000c9c 	.word	0x20000c9c

08002a3c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b082      	sub	sp, #8
 8002a40:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002a42:	f004 fcb7 	bl	80073b4 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 8002a46:	f7fe fd37 	bl	80014b8 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002a4a:	f000 f8bf 	bl	8002bcc <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8002a4e:	f000 f921 	bl	8002c94 <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 8002a52:	f7ff ff1f 	bl	8002894 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_RF_Init();
 8002a56:	f000 fd63 	bl	8003520 <MX_RF_Init>
  MX_GPIO_Init();
 8002a5a:	f7fe ff1f 	bl	800189c <MX_GPIO_Init>
  MX_DMA_Init();
 8002a5e:	f7fe fee2 	bl	8001826 <MX_DMA_Init>
  MX_ADC1_Init();
 8002a62:	f7fe fab1 	bl	8000fc8 <MX_ADC1_Init>
  MX_I2C1_Init();
 8002a66:	f7ff fdb9 	bl	80025dc <MX_I2C1_Init>
  MX_I2C3_Init();
 8002a6a:	f7ff fdf7 	bl	800265c <MX_I2C3_Init>
  MX_LPUART1_UART_Init();
 8002a6e:	f004 f9f9 	bl	8006e64 <MX_LPUART1_UART_Init>
  MX_TIM2_Init();
 8002a72:	f003 ff27 	bl	80068c4 <MX_TIM2_Init>
  MX_TIM16_Init();
 8002a76:	f003 ff73 	bl	8006960 <MX_TIM16_Init>
  MX_TIM17_Init();
 8002a7a:	f003 ff99 	bl	80069b0 <MX_TIM17_Init>
  MX_SPI1_Init();
 8002a7e:	f000 fe55 	bl	800372c <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8002a82:	f004 fa3b 	bl	8006efc <MX_USART1_UART_Init>
  MX_USB_Device_Init();
 8002a86:	f015 ff33 	bl	80188f0 <MX_USB_Device_Init>
  MX_RTC_Init();
 8002a8a:	f000 fd7b 	bl	8003584 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Abort(&huart1);
 8002a8e:	483c      	ldr	r0, [pc, #240]	@ (8002b80 <main+0x144>)
 8002a90:	f00c fffe 	bl	800fa90 <HAL_UART_Abort>
    HAL_UART_DeInit(&huart1);
 8002a94:	483a      	ldr	r0, [pc, #232]	@ (8002b80 <main+0x144>)
 8002a96:	f00c fee1 	bl	800f85c <HAL_UART_DeInit>

    HAL_I2C_DeInit(&hi2c1);
 8002a9a:	483a      	ldr	r0, [pc, #232]	@ (8002b84 <main+0x148>)
 8002a9c:	f006 fe79 	bl	8009792 <HAL_I2C_DeInit>



  	ssd1306_Init();
 8002aa0:	f001 f8ca 	bl	8003c38 <ssd1306_Init>

  	HAL_Delay(10);
 8002aa4:	200a      	movs	r0, #10
 8002aa6:	f7fe fe42 	bl	800172e <HAL_Delay>
  	ssd1306_Fill(Black);
 8002aaa:	2000      	movs	r0, #0
 8002aac:	f001 f92e 	bl	8003d0c <ssd1306_Fill>

  	ssd1306_DrawBitmap(30, 12, startimg, 72, 40, White);
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	9301      	str	r3, [sp, #4]
 8002ab4:	2328      	movs	r3, #40	@ 0x28
 8002ab6:	9300      	str	r3, [sp, #0]
 8002ab8:	2348      	movs	r3, #72	@ 0x48
 8002aba:	4a33      	ldr	r2, [pc, #204]	@ (8002b88 <main+0x14c>)
 8002abc:	210c      	movs	r1, #12
 8002abe:	201e      	movs	r0, #30
 8002ac0:	f001 fb6f 	bl	80041a2 <ssd1306_DrawBitmap>
  	ssd1306_UpdateScreen();
 8002ac4:	f001 f93a 	bl	8003d3c <ssd1306_UpdateScreen>


  	HAL_ADC_Start_DMA(&hadc1,(uint32_t*)rawdata, 3);
 8002ac8:	2203      	movs	r2, #3
 8002aca:	4930      	ldr	r1, [pc, #192]	@ (8002b8c <main+0x150>)
 8002acc:	4830      	ldr	r0, [pc, #192]	@ (8002b90 <main+0x154>)
 8002ace:	f005 f817 	bl	8007b00 <HAL_ADC_Start_DMA>
  	HAL_TIM_Base_Start(&htim2);
 8002ad2:	4830      	ldr	r0, [pc, #192]	@ (8002b94 <main+0x158>)
 8002ad4:	f00c fa02 	bl	800eedc <HAL_TIM_Base_Start>
  	HAL_TIM_Base_Start_IT(&htim16);
 8002ad8:	482f      	ldr	r0, [pc, #188]	@ (8002b98 <main+0x15c>)
 8002ada:	f00c fa45 	bl	800ef68 <HAL_TIM_Base_Start_IT>
  	//HAL_TIM_Base_Start_IT(&htim17);

  	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_0,GPIO_PIN_SET);
 8002ade:	2201      	movs	r2, #1
 8002ae0:	2101      	movs	r1, #1
 8002ae2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002ae6:	f006 fd4b 	bl	8009580 <HAL_GPIO_WritePin>

  	HAL_Delay(100);
 8002aea:	2064      	movs	r0, #100	@ 0x64
 8002aec:	f7fe fe1f 	bl	800172e <HAL_Delay>
  	HAL_UART_Abort(&hlpuart1);
 8002af0:	482a      	ldr	r0, [pc, #168]	@ (8002b9c <main+0x160>)
 8002af2:	f00c ffcd 	bl	800fa90 <HAL_UART_Abort>
  	HAL_UART_Receive_DMA(&hlpuart1, (uint8_t *)RxBuffer, RxBuffer_SIZE);
 8002af6:	2240      	movs	r2, #64	@ 0x40
 8002af8:	4929      	ldr	r1, [pc, #164]	@ (8002ba0 <main+0x164>)
 8002afa:	4828      	ldr	r0, [pc, #160]	@ (8002b9c <main+0x160>)
 8002afc:	f00c ff7c 	bl	800f9f8 <HAL_UART_Receive_DMA>


  	INIT_PERM_TARVOS(0x15, 0x16);
 8002b00:	2116      	movs	r1, #22
 8002b02:	2015      	movs	r0, #21
 8002b04:	f003 fde4 	bl	80066d0 <INIT_PERM_TARVOS>


  	HAL_UART_Abort(&huart1);
 8002b08:	481d      	ldr	r0, [pc, #116]	@ (8002b80 <main+0x144>)
 8002b0a:	f00c ffc1 	bl	800fa90 <HAL_UART_Abort>
  	HAL_UART_Receive_DMA(&huart1, (uint8_t *)tarvos_RX_Tampon, TarvosRxTamponSize);
 8002b0e:	2208      	movs	r2, #8
 8002b10:	4924      	ldr	r1, [pc, #144]	@ (8002ba4 <main+0x168>)
 8002b12:	481b      	ldr	r0, [pc, #108]	@ (8002b80 <main+0x144>)
 8002b14:	f00c ff70 	bl	800f9f8 <HAL_UART_Receive_DMA>


  	memset(flashread,'1',256);
 8002b18:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002b1c:	2131      	movs	r1, #49	@ 0x31
 8002b1e:	4822      	ldr	r0, [pc, #136]	@ (8002ba8 <main+0x16c>)
 8002b20:	f018 fe0b 	bl	801b73a <memset>
  	memset(flashwrite,'\0',256);
 8002b24:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002b28:	2100      	movs	r1, #0
 8002b2a:	4820      	ldr	r0, [pc, #128]	@ (8002bac <main+0x170>)
 8002b2c:	f018 fe05 	bl	801b73a <memset>
  	memset((uint8_t *)bufferscreen ,'\0',50);
 8002b30:	2232      	movs	r2, #50	@ 0x32
 8002b32:	2100      	movs	r1, #0
 8002b34:	481e      	ldr	r0, [pc, #120]	@ (8002bb0 <main+0x174>)
 8002b36:	f018 fe00 	bl	801b73a <memset>

  	SPIF_Init(&hspif1, &hspi1, GPIOB, GPIO_PIN_7);
 8002b3a:	2380      	movs	r3, #128	@ 0x80
 8002b3c:	4a1d      	ldr	r2, [pc, #116]	@ (8002bb4 <main+0x178>)
 8002b3e:	491e      	ldr	r1, [pc, #120]	@ (8002bb8 <main+0x17c>)
 8002b40:	481e      	ldr	r0, [pc, #120]	@ (8002bbc <main+0x180>)
 8002b42:	f014 fede 	bl	8017902 <SPIF_Init>



  	getindex();
 8002b46:	f000 ff43 	bl	80039d0 <getindex>

  	ssd1306_Fill(Black);
 8002b4a:	2000      	movs	r0, #0
 8002b4c:	f001 f8de 	bl	8003d0c <ssd1306_Fill>


  	state=STATE_SPEED;
 8002b50:	4b1b      	ldr	r3, [pc, #108]	@ (8002bc0 <main+0x184>)
 8002b52:	2200      	movs	r2, #0
 8002b54:	701a      	strb	r2, [r3, #0]
  	BTN_A=0;
 8002b56:	4b1b      	ldr	r3, [pc, #108]	@ (8002bc4 <main+0x188>)
 8002b58:	2200      	movs	r2, #0
 8002b5a:	601a      	str	r2, [r3, #0]
  	BTN_A_LONG=0;
 8002b5c:	4b1a      	ldr	r3, [pc, #104]	@ (8002bc8 <main+0x18c>)
 8002b5e:	2200      	movs	r2, #0
 8002b60:	601a      	str	r2, [r3, #0]

  	HAL_Delay(500);
 8002b62:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002b66:	f7fe fde2 	bl	800172e <HAL_Delay>

  	//LL_HSEM_1StepLock( HSEM, 5 );
  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 8002b6a:	f7fe fcb3 	bl	80014d4 <MX_APPE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_APPE_Process();
 8002b6e:	f7fe fe03 	bl	8001778 <MX_APPE_Process>

    /* USER CODE BEGIN 3 */
	  statemachine();
 8002b72:	f001 fd81 	bl	8004678 <statemachine>
	  ssd1306_UpdateScreen();
 8002b76:	f001 f8e1 	bl	8003d3c <ssd1306_UpdateScreen>
    MX_APPE_Process();
 8002b7a:	bf00      	nop
 8002b7c:	e7f7      	b.n	8002b6e <main+0x132>
 8002b7e:	bf00      	nop
 8002b80:	20001368 	.word	0x20001368
 8002b84:	200004f0 	.word	0x200004f0
 8002b88:	0802013c 	.word	0x0802013c
 8002b8c:	20000990 	.word	0x20000990
 8002b90:	2000038c 	.word	0x2000038c
 8002b94:	200011f0 	.word	0x200011f0
 8002b98:	2000123c 	.word	0x2000123c
 8002b9c:	200012d4 	.word	0x200012d4
 8002ba0:	200005e0 	.word	0x200005e0
 8002ba4:	20000920 	.word	0x20000920
 8002ba8:	20000aa4 	.word	0x20000aa4
 8002bac:	200009a4 	.word	0x200009a4
 8002bb0:	20000bc8 	.word	0x20000bc8
 8002bb4:	48000400 	.word	0x48000400
 8002bb8:	20000d80 	.word	0x20000d80
 8002bbc:	20000970 	.word	0x20000970
 8002bc0:	200005d4 	.word	0x200005d4
 8002bc4:	20000968 	.word	0x20000968
 8002bc8:	20000ca0 	.word	0x20000ca0

08002bcc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b09a      	sub	sp, #104	@ 0x68
 8002bd0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002bd2:	f107 0320 	add.w	r3, r7, #32
 8002bd6:	2248      	movs	r2, #72	@ 0x48
 8002bd8:	2100      	movs	r1, #0
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f018 fdad 	bl	801b73a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002be0:	1d3b      	adds	r3, r7, #4
 8002be2:	2200      	movs	r2, #0
 8002be4:	601a      	str	r2, [r3, #0]
 8002be6:	605a      	str	r2, [r3, #4]
 8002be8:	609a      	str	r2, [r3, #8]
 8002bea:	60da      	str	r2, [r3, #12]
 8002bec:	611a      	str	r2, [r3, #16]
 8002bee:	615a      	str	r2, [r3, #20]
 8002bf0:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002bf2:	4b27      	ldr	r3, [pc, #156]	@ (8002c90 <SystemClock_Config+0xc4>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002bfa:	4a25      	ldr	r2, [pc, #148]	@ (8002c90 <SystemClock_Config+0xc4>)
 8002bfc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002c00:	6013      	str	r3, [r2, #0]
 8002c02:	4b23      	ldr	r3, [pc, #140]	@ (8002c90 <SystemClock_Config+0xc4>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002c0a:	603b      	str	r3, [r7, #0]
 8002c0c:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8002c0e:	2303      	movs	r3, #3
 8002c10:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002c12:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002c16:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002c18:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002c1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002c1e:	2340      	movs	r3, #64	@ 0x40
 8002c20:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002c22:	2302      	movs	r3, #2
 8002c24:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002c26:	2303      	movs	r3, #3
 8002c28:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8002c2a:	2310      	movs	r3, #16
 8002c2c:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLN = 8;
 8002c2e:	2308      	movs	r3, #8
 8002c30:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002c32:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002c36:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002c38:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8002c3c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002c3e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002c42:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002c44:	f107 0320 	add.w	r3, r7, #32
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f009 fb29 	bl	800c2a0 <HAL_RCC_OscConfig>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d001      	beq.n	8002c58 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8002c54:	f000 f858 	bl	8002d08 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8002c58:	236f      	movs	r3, #111	@ 0x6f
 8002c5a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002c5c:	2303      	movs	r3, #3
 8002c5e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002c60:	2300      	movs	r3, #0
 8002c62:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002c64:	2300      	movs	r3, #0
 8002c66:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 8002c6c:	2380      	movs	r3, #128	@ 0x80
 8002c6e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8002c70:	2300      	movs	r3, #0
 8002c72:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002c74:	1d3b      	adds	r3, r7, #4
 8002c76:	2103      	movs	r1, #3
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f009 fe85 	bl	800c988 <HAL_RCC_ClockConfig>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d001      	beq.n	8002c88 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8002c84:	f000 f840 	bl	8002d08 <Error_Handler>
  }
}
 8002c88:	bf00      	nop
 8002c8a:	3768      	adds	r7, #104	@ 0x68
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}
 8002c90:	58000400 	.word	0x58000400

08002c94 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b094      	sub	sp, #80	@ 0x50
 8002c98:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002c9a:	463b      	mov	r3, r7
 8002c9c:	2250      	movs	r2, #80	@ 0x50
 8002c9e:	2100      	movs	r1, #0
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f018 fd4a 	bl	801b73a <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP
 8002ca6:	f44f 5354 	mov.w	r3, #13568	@ 0x3500
 8002caa:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
  PeriphClkInitStruct.PLLSAI1.PLLN = 6;
 8002cac:	2306      	movs	r3, #6
 8002cae:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8002cb0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002cb4:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8002cb6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002cba:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8002cbc:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8002cc0:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK|RCC_PLLSAI1_ADCCLK;
 8002cc2:	f04f 5388 	mov.w	r3, #285212672	@ 0x11000000
 8002cc6:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8002cc8:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8002ccc:	637b      	str	r3, [r7, #52]	@ 0x34
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8002cce:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8002cd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_HSE_DIV1024;
 8002cd4:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8002cd8:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8002cde:	2310      	movs	r3, #16
 8002ce0:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002ce2:	463b      	mov	r3, r7
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f00a fa8c 	bl	800d202 <HAL_RCCEx_PeriphCLKConfig>
 8002cea:	4603      	mov	r3, r0
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d001      	beq.n	8002cf4 <PeriphCommonClock_Config+0x60>
  {
    Error_Handler();
 8002cf0:	f000 f80a 	bl	8002d08 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */
  LL_HSEM_1StepLock( HSEM, 5 );
 8002cf4:	2105      	movs	r1, #5
 8002cf6:	4803      	ldr	r0, [pc, #12]	@ (8002d04 <PeriphCommonClock_Config+0x70>)
 8002cf8:	f7ff fe04 	bl	8002904 <LL_HSEM_1StepLock>

  /* USER CODE END Smps */
}
 8002cfc:	bf00      	nop
 8002cfe:	3750      	adds	r7, #80	@ 0x50
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}
 8002d04:	58001400 	.word	0x58001400

08002d08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002d0c:	b672      	cpsid	i
}
 8002d0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002d10:	bf00      	nop
 8002d12:	e7fd      	b.n	8002d10 <Error_Handler+0x8>

08002d14 <gps_checksum>:
//on a une fonction de decodage par typme de trame interressante, puis une fonction nmea_parse servant à mettre à jour la structure de donnée avec lesdonnées presentes dans le databuffer, qui lui se met à jour tout seul.

char *data[15];

int gps_checksum(char *nmea_data)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b086      	sub	sp, #24
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
    //if you point a string with less than 5 characters the function will read outside of scope and crash the mcu.
    if(strlen(nmea_data) < 5) return 0;
 8002d1c:	6878      	ldr	r0, [r7, #4]
 8002d1e:	f7fd fa7f 	bl	8000220 <strlen>
 8002d22:	4603      	mov	r3, r0
 8002d24:	2b04      	cmp	r3, #4
 8002d26:	d801      	bhi.n	8002d2c <gps_checksum+0x18>
 8002d28:	2300      	movs	r3, #0
 8002d2a:	e038      	b.n	8002d9e <gps_checksum+0x8a>
    char recv_crc[2];
    recv_crc[0] = nmea_data[strlen(nmea_data) - 4];
 8002d2c:	6878      	ldr	r0, [r7, #4]
 8002d2e:	f7fd fa77 	bl	8000220 <strlen>
 8002d32:	4603      	mov	r3, r0
 8002d34:	3b04      	subs	r3, #4
 8002d36:	687a      	ldr	r2, [r7, #4]
 8002d38:	4413      	add	r3, r2
 8002d3a:	781b      	ldrb	r3, [r3, #0]
 8002d3c:	723b      	strb	r3, [r7, #8]
    recv_crc[1] = nmea_data[strlen(nmea_data) - 3];
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	f7fd fa6e 	bl	8000220 <strlen>
 8002d44:	4603      	mov	r3, r0
 8002d46:	3b03      	subs	r3, #3
 8002d48:	687a      	ldr	r2, [r7, #4]
 8002d4a:	4413      	add	r3, r2
 8002d4c:	781b      	ldrb	r3, [r3, #0]
 8002d4e:	727b      	strb	r3, [r7, #9]
    int crc = 0;
 8002d50:	2300      	movs	r3, #0
 8002d52:	617b      	str	r3, [r7, #20]
    int i;

    //exclude the CRLF plus CRC with an * from the end
    for (i = 0; i < strlen(nmea_data) - 5; i ++) {
 8002d54:	2300      	movs	r3, #0
 8002d56:	613b      	str	r3, [r7, #16]
 8002d58:	e00a      	b.n	8002d70 <gps_checksum+0x5c>
        crc ^= nmea_data[i];
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	687a      	ldr	r2, [r7, #4]
 8002d5e:	4413      	add	r3, r2
 8002d60:	781b      	ldrb	r3, [r3, #0]
 8002d62:	461a      	mov	r2, r3
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	4053      	eors	r3, r2
 8002d68:	617b      	str	r3, [r7, #20]
    for (i = 0; i < strlen(nmea_data) - 5; i ++) {
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	3301      	adds	r3, #1
 8002d6e:	613b      	str	r3, [r7, #16]
 8002d70:	6878      	ldr	r0, [r7, #4]
 8002d72:	f7fd fa55 	bl	8000220 <strlen>
 8002d76:	4603      	mov	r3, r0
 8002d78:	1f5a      	subs	r2, r3, #5
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	d8ec      	bhi.n	8002d5a <gps_checksum+0x46>
    }
    int receivedHash = strtol(recv_crc, NULL, 16);
 8002d80:	f107 0308 	add.w	r3, r7, #8
 8002d84:	2210      	movs	r2, #16
 8002d86:	2100      	movs	r1, #0
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f017 fd07 	bl	801a79c <strtol>
 8002d8e:	60f8      	str	r0, [r7, #12]
    if (crc == receivedHash) {
 8002d90:	697a      	ldr	r2, [r7, #20]
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	429a      	cmp	r2, r3
 8002d96:	d101      	bne.n	8002d9c <gps_checksum+0x88>
        return 1;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	e000      	b.n	8002d9e <gps_checksum+0x8a>
    }
    else{
        return 0;
 8002d9c:	2300      	movs	r3, #0
    }
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	3718      	adds	r7, #24
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}
	...

08002da8 <nmea_GPGGA>:

int nmea_GPGGA(GPS *gps_data, char*inputString){
 8002da8:	b590      	push	{r4, r7, lr}
 8002daa:	b0b7      	sub	sp, #220	@ 0xdc
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
 8002db0:	6039      	str	r1, [r7, #0]
    char *values[25];
    int counter = 0;
 8002db2:	2300      	movs	r3, #0
 8002db4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    memset(values, 0, sizeof(values));
 8002db8:	f107 0320 	add.w	r3, r7, #32
 8002dbc:	2264      	movs	r2, #100	@ 0x64
 8002dbe:	2100      	movs	r1, #0
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f018 fcba 	bl	801b73a <memset>
    char *marker = strtok(inputString, ",");
 8002dc6:	49c2      	ldr	r1, [pc, #776]	@ (80030d0 <nmea_GPGGA+0x328>)
 8002dc8:	6838      	ldr	r0, [r7, #0]
 8002dca:	f018 fcd1 	bl	801b770 <strtok>
 8002dce:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    while (marker != NULL) {
 8002dd2:	e027      	b.n	8002e24 <nmea_GPGGA+0x7c>
        values[counter++] = malloc(strlen(marker) + 1); //free later!!!!!!
 8002dd4:	f8d7 00d0 	ldr.w	r0, [r7, #208]	@ 0xd0
 8002dd8:	f7fd fa22 	bl	8000220 <strlen>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	1c5a      	adds	r2, r3, #1
 8002de0:	f8d7 40d4 	ldr.w	r4, [r7, #212]	@ 0xd4
 8002de4:	1c63      	adds	r3, r4, #1
 8002de6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8002dea:	4610      	mov	r0, r2
 8002dec:	f016 fd30 	bl	8019850 <malloc>
 8002df0:	4603      	mov	r3, r0
 8002df2:	461a      	mov	r2, r3
 8002df4:	00a3      	lsls	r3, r4, #2
 8002df6:	33d8      	adds	r3, #216	@ 0xd8
 8002df8:	443b      	add	r3, r7
 8002dfa:	f843 2cb8 	str.w	r2, [r3, #-184]
        strcpy(values[counter - 1], marker);
 8002dfe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002e02:	3b01      	subs	r3, #1
 8002e04:	009b      	lsls	r3, r3, #2
 8002e06:	33d8      	adds	r3, #216	@ 0xd8
 8002e08:	443b      	add	r3, r7
 8002e0a:	f853 3cb8 	ldr.w	r3, [r3, #-184]
 8002e0e:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8002e12:	4618      	mov	r0, r3
 8002e14:	f018 fda5 	bl	801b962 <strcpy>
        marker = strtok(NULL, ",");
 8002e18:	49ad      	ldr	r1, [pc, #692]	@ (80030d0 <nmea_GPGGA+0x328>)
 8002e1a:	2000      	movs	r0, #0
 8002e1c:	f018 fca8 	bl	801b770 <strtok>
 8002e20:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    while (marker != NULL) {
 8002e24:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d1d3      	bne.n	8002dd4 <nmea_GPGGA+0x2c>
    }
    char lonSide = values[5][0];
 8002e2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e2e:	781b      	ldrb	r3, [r3, #0]
 8002e30:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
    char latSide = values[3][0];
 8002e34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e36:	781b      	ldrb	r3, [r3, #0]
 8002e38:	f887 30b6 	strb.w	r3, [r7, #182]	@ 0xb6
    strcpy(gps_data->lastMeasure, values[1]);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	332c      	adds	r3, #44	@ 0x2c
 8002e40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e42:	4611      	mov	r1, r2
 8002e44:	4618      	mov	r0, r3
 8002e46:	f018 fd8c 	bl	801b962 <strcpy>
    if(latSide == 'S' || latSide == 'N'){
 8002e4a:	f897 30b6 	ldrb.w	r3, [r7, #182]	@ 0xb6
 8002e4e:	2b53      	cmp	r3, #83	@ 0x53
 8002e50:	d004      	beq.n	8002e5c <nmea_GPGGA+0xb4>
 8002e52:	f897 30b6 	ldrb.w	r3, [r7, #182]	@ 0xb6
 8002e56:	2b4e      	cmp	r3, #78	@ 0x4e
 8002e58:	f040 8159 	bne.w	800310e <nmea_GPGGA+0x366>
        char lat_d[2];
        char lat_m[7];
        for (int z = 0; z < 2; z++) lat_d[z] = values[2][z];
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002e62:	e010      	b.n	8002e86 <nmea_GPGGA+0xde>
 8002e64:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002e66:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002e6a:	4413      	add	r3, r2
 8002e6c:	7819      	ldrb	r1, [r3, #0]
 8002e6e:	f107 021c 	add.w	r2, r7, #28
 8002e72:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002e76:	4413      	add	r3, r2
 8002e78:	460a      	mov	r2, r1
 8002e7a:	701a      	strb	r2, [r3, #0]
 8002e7c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002e80:	3301      	adds	r3, #1
 8002e82:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002e86:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002e8a:	2b01      	cmp	r3, #1
 8002e8c:	ddea      	ble.n	8002e64 <nmea_GPGGA+0xbc>
        for (int z = 0; z < 6; z++) lat_m[z] = values[2][z + 2];
 8002e8e:	2300      	movs	r3, #0
 8002e90:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002e94:	e011      	b.n	8002eba <nmea_GPGGA+0x112>
 8002e96:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002e98:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002e9c:	3302      	adds	r3, #2
 8002e9e:	4413      	add	r3, r2
 8002ea0:	7819      	ldrb	r1, [r3, #0]
 8002ea2:	f107 0214 	add.w	r2, r7, #20
 8002ea6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002eaa:	4413      	add	r3, r2
 8002eac:	460a      	mov	r2, r1
 8002eae:	701a      	strb	r2, [r3, #0]
 8002eb0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002eb4:	3301      	adds	r3, #1
 8002eb6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002eba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002ebe:	2b05      	cmp	r3, #5
 8002ec0:	dde9      	ble.n	8002e96 <nmea_GPGGA+0xee>

        int lat_deg_strtol = strtol(lat_d, NULL, 10);
 8002ec2:	f107 031c 	add.w	r3, r7, #28
 8002ec6:	220a      	movs	r2, #10
 8002ec8:	2100      	movs	r1, #0
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f017 fc66 	bl	801a79c <strtol>
 8002ed0:	f8c7 00b0 	str.w	r0, [r7, #176]	@ 0xb0
        float lat_min_strtof = strtof(lat_m, NULL);
 8002ed4:	f107 0314 	add.w	r3, r7, #20
 8002ed8:	2100      	movs	r1, #0
 8002eda:	4618      	mov	r0, r3
 8002edc:	f017 fb7e 	bl	801a5dc <strtof>
 8002ee0:	ed87 0a2b 	vstr	s0, [r7, #172]	@ 0xac
        double lat_deg = lat_deg_strtol + lat_min_strtof / 60;
 8002ee4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002ee8:	ee07 3a90 	vmov	s15, r3
 8002eec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002ef0:	edd7 6a2b 	vldr	s13, [r7, #172]	@ 0xac
 8002ef4:	ed9f 6a77 	vldr	s12, [pc, #476]	@ 80030d4 <nmea_GPGGA+0x32c>
 8002ef8:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002efc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f00:	ee17 0a90 	vmov	r0, s15
 8002f04:	f7fd faf8 	bl	80004f8 <__aeabi_f2d>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	460b      	mov	r3, r1
 8002f0c:	e9c7 2328 	strd	r2, r3, [r7, #160]	@ 0xa0

        char lon_d[3];
        char lon_m[7];

        for (int z = 0; z < 3; z++) lon_d[z] = values[4][z];
 8002f10:	2300      	movs	r3, #0
 8002f12:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002f16:	e010      	b.n	8002f3a <nmea_GPGGA+0x192>
 8002f18:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002f1a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002f1e:	4413      	add	r3, r2
 8002f20:	7819      	ldrb	r1, [r3, #0]
 8002f22:	f107 0210 	add.w	r2, r7, #16
 8002f26:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002f2a:	4413      	add	r3, r2
 8002f2c:	460a      	mov	r2, r1
 8002f2e:	701a      	strb	r2, [r3, #0]
 8002f30:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002f34:	3301      	adds	r3, #1
 8002f36:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002f3a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002f3e:	2b02      	cmp	r3, #2
 8002f40:	ddea      	ble.n	8002f18 <nmea_GPGGA+0x170>
        for (int z = 0; z < 6; z++) lon_m[z] = values[4][z + 3];
 8002f42:	2300      	movs	r3, #0
 8002f44:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002f48:	e011      	b.n	8002f6e <nmea_GPGGA+0x1c6>
 8002f4a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002f4c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002f50:	3303      	adds	r3, #3
 8002f52:	4413      	add	r3, r2
 8002f54:	7819      	ldrb	r1, [r3, #0]
 8002f56:	f107 0208 	add.w	r2, r7, #8
 8002f5a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002f5e:	4413      	add	r3, r2
 8002f60:	460a      	mov	r2, r1
 8002f62:	701a      	strb	r2, [r3, #0]
 8002f64:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002f68:	3301      	adds	r3, #1
 8002f6a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002f6e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002f72:	2b05      	cmp	r3, #5
 8002f74:	dde9      	ble.n	8002f4a <nmea_GPGGA+0x1a2>

        int lon_deg_strtol = strtol(lon_d, NULL, 10);
 8002f76:	f107 0310 	add.w	r3, r7, #16
 8002f7a:	220a      	movs	r2, #10
 8002f7c:	2100      	movs	r1, #0
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f017 fc0c 	bl	801a79c <strtol>
 8002f84:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
        float lon_min_strtof = strtof(lon_m, NULL);
 8002f88:	f107 0308 	add.w	r3, r7, #8
 8002f8c:	2100      	movs	r1, #0
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f017 fb24 	bl	801a5dc <strtof>
 8002f94:	ed87 0a26 	vstr	s0, [r7, #152]	@ 0x98
        double lon_deg = lon_deg_strtol + lon_min_strtof / 60;
 8002f98:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002f9c:	ee07 3a90 	vmov	s15, r3
 8002fa0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002fa4:	edd7 6a26 	vldr	s13, [r7, #152]	@ 0x98
 8002fa8:	ed9f 6a4a 	vldr	s12, [pc, #296]	@ 80030d4 <nmea_GPGGA+0x32c>
 8002fac:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002fb0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fb4:	ee17 0a90 	vmov	r0, s15
 8002fb8:	f7fd fa9e 	bl	80004f8 <__aeabi_f2d>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	460b      	mov	r3, r1
 8002fc0:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90

        if(lat_deg!=0 && lon_deg!=0 && lat_deg<90 && lon_deg<180){
 8002fc4:	f04f 0200 	mov.w	r2, #0
 8002fc8:	f04f 0300 	mov.w	r3, #0
 8002fcc:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 8002fd0:	f7fd fd52 	bl	8000a78 <__aeabi_dcmpeq>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d176      	bne.n	80030c8 <nmea_GPGGA+0x320>
 8002fda:	f04f 0200 	mov.w	r2, #0
 8002fde:	f04f 0300 	mov.w	r3, #0
 8002fe2:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 8002fe6:	f7fd fd47 	bl	8000a78 <__aeabi_dcmpeq>
 8002fea:	4603      	mov	r3, r0
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d16b      	bne.n	80030c8 <nmea_GPGGA+0x320>
 8002ff0:	f04f 0200 	mov.w	r2, #0
 8002ff4:	4b38      	ldr	r3, [pc, #224]	@ (80030d8 <nmea_GPGGA+0x330>)
 8002ff6:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 8002ffa:	f7fd fd47 	bl	8000a8c <__aeabi_dcmplt>
 8002ffe:	4603      	mov	r3, r0
 8003000:	2b00      	cmp	r3, #0
 8003002:	d061      	beq.n	80030c8 <nmea_GPGGA+0x320>
 8003004:	f04f 0200 	mov.w	r2, #0
 8003008:	4b34      	ldr	r3, [pc, #208]	@ (80030dc <nmea_GPGGA+0x334>)
 800300a:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 800300e:	f7fd fd3d 	bl	8000a8c <__aeabi_dcmplt>
 8003012:	4603      	mov	r3, r0
 8003014:	2b00      	cmp	r3, #0
 8003016:	d057      	beq.n	80030c8 <nmea_GPGGA+0x320>
            gps_data->latitude = lat_deg;
 8003018:	6879      	ldr	r1, [r7, #4]
 800301a:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 800301e:	e9c1 2300 	strd	r2, r3, [r1]
            gps_data->latSide = latSide;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	f897 20b6 	ldrb.w	r2, [r7, #182]	@ 0xb6
 8003028:	721a      	strb	r2, [r3, #8]
            gps_data->longitude = lon_deg;
 800302a:	6879      	ldr	r1, [r7, #4]
 800302c:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 8003030:	e9c1 2304 	strd	r2, r3, [r1, #16]
            gps_data->lonSide = lonSide;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	f897 20b7 	ldrb.w	r2, [r7, #183]	@ 0xb7
 800303a:	761a      	strb	r2, [r3, #24]
            float altitude = strtof(values[9], NULL);
 800303c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800303e:	2100      	movs	r1, #0
 8003040:	4618      	mov	r0, r3
 8003042:	f017 facb 	bl	801a5dc <strtof>
 8003046:	ed87 0a23 	vstr	s0, [r7, #140]	@ 0x8c
            gps_data->altitude = altitude!=0 ? altitude : gps_data->altitude;
 800304a:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 800304e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003052:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003056:	d102      	bne.n	800305e <nmea_GPGGA+0x2b6>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	69db      	ldr	r3, [r3, #28]
 800305c:	e001      	b.n	8003062 <nmea_GPGGA+0x2ba>
 800305e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003062:	687a      	ldr	r2, [r7, #4]
 8003064:	61d3      	str	r3, [r2, #28]
            gps_data->satelliteCount = strtol(values[7], NULL, 10);
 8003066:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003068:	220a      	movs	r2, #10
 800306a:	2100      	movs	r1, #0
 800306c:	4618      	mov	r0, r3
 800306e:	f017 fb95 	bl	801a79c <strtol>
 8003072:	4602      	mov	r2, r0
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	625a      	str	r2, [r3, #36]	@ 0x24

            int fixQuality = strtol(values[6], NULL, 10);
 8003078:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800307a:	220a      	movs	r2, #10
 800307c:	2100      	movs	r1, #0
 800307e:	4618      	mov	r0, r3
 8003080:	f017 fb8c 	bl	801a79c <strtol>
 8003084:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
            gps_data->fix = fixQuality > 0 ? 1 : 0;
 8003088:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800308c:	2b00      	cmp	r3, #0
 800308e:	bfcc      	ite	gt
 8003090:	2301      	movgt	r3, #1
 8003092:	2300      	movle	r3, #0
 8003094:	b2db      	uxtb	r3, r3
 8003096:	461a      	mov	r2, r3
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	629a      	str	r2, [r3, #40]	@ 0x28

            float hdop = strtof(values[8], NULL);
 800309c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800309e:	2100      	movs	r1, #0
 80030a0:	4618      	mov	r0, r3
 80030a2:	f017 fa9b 	bl	801a5dc <strtof>
 80030a6:	ed87 0a21 	vstr	s0, [r7, #132]	@ 0x84
            gps_data->hdop = hdop!=0 ? hdop : gps_data->hdop;
 80030aa:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 80030ae:	eef5 7a40 	vcmp.f32	s15, #0.0
 80030b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030b6:	d102      	bne.n	80030be <nmea_GPGGA+0x316>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6a1b      	ldr	r3, [r3, #32]
 80030bc:	e001      	b.n	80030c2 <nmea_GPGGA+0x31a>
 80030be:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80030c2:	687a      	ldr	r2, [r7, #4]
 80030c4:	6213      	str	r3, [r2, #32]
        if(lat_deg!=0 && lon_deg!=0 && lat_deg<90 && lon_deg<180){
 80030c6:	e022      	b.n	800310e <nmea_GPGGA+0x366>
        }
        else {
            for(int i=0; i<counter; i++) free(values[i]);
 80030c8:	2300      	movs	r3, #0
 80030ca:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80030ce:	e016      	b.n	80030fe <nmea_GPGGA+0x356>
 80030d0:	0801fc94 	.word	0x0801fc94
 80030d4:	42700000 	.word	0x42700000
 80030d8:	40568000 	.word	0x40568000
 80030dc:	40668000 	.word	0x40668000
 80030e0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80030e4:	009b      	lsls	r3, r3, #2
 80030e6:	33d8      	adds	r3, #216	@ 0xd8
 80030e8:	443b      	add	r3, r7
 80030ea:	f853 3cb8 	ldr.w	r3, [r3, #-184]
 80030ee:	4618      	mov	r0, r3
 80030f0:	f016 fbb6 	bl	8019860 <free>
 80030f4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80030f8:	3301      	adds	r3, #1
 80030fa:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80030fe:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8003102:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003106:	429a      	cmp	r2, r3
 8003108:	dbea      	blt.n	80030e0 <nmea_GPGGA+0x338>
            return 0;
 800310a:	2300      	movs	r3, #0
 800310c:	e019      	b.n	8003142 <nmea_GPGGA+0x39a>
        }

    }

    for(int i=0; i<counter; i++) free(values[i]);
 800310e:	2300      	movs	r3, #0
 8003110:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003114:	e00e      	b.n	8003134 <nmea_GPGGA+0x38c>
 8003116:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800311a:	009b      	lsls	r3, r3, #2
 800311c:	33d8      	adds	r3, #216	@ 0xd8
 800311e:	443b      	add	r3, r7
 8003120:	f853 3cb8 	ldr.w	r3, [r3, #-184]
 8003124:	4618      	mov	r0, r3
 8003126:	f016 fb9b 	bl	8019860 <free>
 800312a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800312e:	3301      	adds	r3, #1
 8003130:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003134:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003138:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800313c:	429a      	cmp	r2, r3
 800313e:	dbea      	blt.n	8003116 <nmea_GPGGA+0x36e>
    return 1;
 8003140:	2301      	movs	r3, #1
}
 8003142:	4618      	mov	r0, r3
 8003144:	37dc      	adds	r7, #220	@ 0xdc
 8003146:	46bd      	mov	sp, r7
 8003148:	bd90      	pop	{r4, r7, pc}
 800314a:	bf00      	nop
 800314c:	0000      	movs	r0, r0
	...

08003150 <nmea_GNRMC>:
//    return 1;
//}



int nmea_GNRMC(GPS *gps_data, char*inputString){
 8003150:	b590      	push	{r4, r7, lr}
 8003152:	b0a1      	sub	sp, #132	@ 0x84
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
 8003158:	6039      	str	r1, [r7, #0]
    char *values[25];
    int counter = 0;
 800315a:	2300      	movs	r3, #0
 800315c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    memset(values, 0, sizeof(values));
 800315e:	f107 030c 	add.w	r3, r7, #12
 8003162:	2264      	movs	r2, #100	@ 0x64
 8003164:	2100      	movs	r1, #0
 8003166:	4618      	mov	r0, r3
 8003168:	f018 fae7 	bl	801b73a <memset>
    char *marker = strtok(inputString, ",");
 800316c:	4930      	ldr	r1, [pc, #192]	@ (8003230 <nmea_GNRMC+0xe0>)
 800316e:	6838      	ldr	r0, [r7, #0]
 8003170:	f018 fafe 	bl	801b770 <strtok>
 8003174:	67b8      	str	r0, [r7, #120]	@ 0x78
    while (marker != NULL) {
 8003176:	e021      	b.n	80031bc <nmea_GNRMC+0x6c>
        values[counter++] = malloc(strlen(marker) + 1); //free later!!!!!!
 8003178:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 800317a:	f7fd f851 	bl	8000220 <strlen>
 800317e:	4603      	mov	r3, r0
 8003180:	1c5a      	adds	r2, r3, #1
 8003182:	6ffc      	ldr	r4, [r7, #124]	@ 0x7c
 8003184:	1c63      	adds	r3, r4, #1
 8003186:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003188:	4610      	mov	r0, r2
 800318a:	f016 fb61 	bl	8019850 <malloc>
 800318e:	4603      	mov	r3, r0
 8003190:	461a      	mov	r2, r3
 8003192:	00a3      	lsls	r3, r4, #2
 8003194:	3380      	adds	r3, #128	@ 0x80
 8003196:	443b      	add	r3, r7
 8003198:	f843 2c74 	str.w	r2, [r3, #-116]
        strcpy(values[counter - 1], marker);
 800319c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800319e:	3b01      	subs	r3, #1
 80031a0:	009b      	lsls	r3, r3, #2
 80031a2:	3380      	adds	r3, #128	@ 0x80
 80031a4:	443b      	add	r3, r7
 80031a6:	f853 3c74 	ldr.w	r3, [r3, #-116]
 80031aa:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 80031ac:	4618      	mov	r0, r3
 80031ae:	f018 fbd8 	bl	801b962 <strcpy>
        marker = strtok(NULL, ",");
 80031b2:	491f      	ldr	r1, [pc, #124]	@ (8003230 <nmea_GNRMC+0xe0>)
 80031b4:	2000      	movs	r0, #0
 80031b6:	f018 fadb 	bl	801b770 <strtok>
 80031ba:	67b8      	str	r0, [r7, #120]	@ 0x78
    while (marker != NULL) {
 80031bc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d1da      	bne.n	8003178 <nmea_GNRMC+0x28>
    }
    float speed = strtof(values[7], NULL);
 80031c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031c4:	2100      	movs	r1, #0
 80031c6:	4618      	mov	r0, r3
 80031c8:	f017 fa08 	bl	801a5dc <strtof>
 80031cc:	ed87 0a1c 	vstr	s0, [r7, #112]	@ 0x70
    gps_data->speed=speed/(1.944);
 80031d0:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 80031d2:	f7fd f991 	bl	80004f8 <__aeabi_f2d>
 80031d6:	a314      	add	r3, pc, #80	@ (adr r3, 8003228 <nmea_GNRMC+0xd8>)
 80031d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031dc:	f7fd fb0e 	bl	80007fc <__aeabi_ddiv>
 80031e0:	4602      	mov	r2, r0
 80031e2:	460b      	mov	r3, r1
 80031e4:	4610      	mov	r0, r2
 80031e6:	4619      	mov	r1, r3
 80031e8:	f7fd fcd6 	bl	8000b98 <__aeabi_d2f>
 80031ec:	4602      	mov	r2, r0
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	639a      	str	r2, [r3, #56]	@ 0x38


    for(int i=0; i<counter; i++) free(values[i]);
 80031f2:	2300      	movs	r3, #0
 80031f4:	677b      	str	r3, [r7, #116]	@ 0x74
 80031f6:	e00b      	b.n	8003210 <nmea_GNRMC+0xc0>
 80031f8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80031fa:	009b      	lsls	r3, r3, #2
 80031fc:	3380      	adds	r3, #128	@ 0x80
 80031fe:	443b      	add	r3, r7
 8003200:	f853 3c74 	ldr.w	r3, [r3, #-116]
 8003204:	4618      	mov	r0, r3
 8003206:	f016 fb2b 	bl	8019860 <free>
 800320a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800320c:	3301      	adds	r3, #1
 800320e:	677b      	str	r3, [r7, #116]	@ 0x74
 8003210:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003212:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003214:	429a      	cmp	r2, r3
 8003216:	dbef      	blt.n	80031f8 <nmea_GNRMC+0xa8>
    return 1;
 8003218:	2301      	movs	r3, #1
}
 800321a:	4618      	mov	r0, r3
 800321c:	3784      	adds	r7, #132	@ 0x84
 800321e:	46bd      	mov	sp, r7
 8003220:	bd90      	pop	{r4, r7, pc}
 8003222:	bf00      	nop
 8003224:	f3af 8000 	nop.w
 8003228:	be76c8b4 	.word	0xbe76c8b4
 800322c:	3fff1a9f 	.word	0x3fff1a9f
 8003230:	0801fc94 	.word	0x0801fc94

08003234 <nmea_parse>:



void nmea_parse(GPS *gps_data, uint8_t *buffer){
 8003234:	b590      	push	{r4, r7, lr}
 8003236:	b089      	sub	sp, #36	@ 0x24
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
 800323c:	6039      	str	r1, [r7, #0]
    memset(data, 0, sizeof(data));
 800323e:	223c      	movs	r2, #60	@ 0x3c
 8003240:	2100      	movs	r1, #0
 8003242:	484c      	ldr	r0, [pc, #304]	@ (8003374 <nmea_parse+0x140>)
 8003244:	f018 fa79 	bl	801b73a <memset>
    char * token = strtok(buffer, "$");
 8003248:	494b      	ldr	r1, [pc, #300]	@ (8003378 <nmea_parse+0x144>)
 800324a:	6838      	ldr	r0, [r7, #0]
 800324c:	f018 fa90 	bl	801b770 <strtok>
 8003250:	61f8      	str	r0, [r7, #28]
    int cnt = 0;
 8003252:	2300      	movs	r3, #0
 8003254:	61bb      	str	r3, [r7, #24]
    int cnt12=0;
 8003256:	2300      	movs	r3, #0
 8003258:	617b      	str	r3, [r7, #20]
    while(token !=NULL){
 800325a:	e01d      	b.n	8003298 <nmea_parse+0x64>
        data[cnt++] = malloc(strlen(token)+1); //free later!!!!!
 800325c:	69f8      	ldr	r0, [r7, #28]
 800325e:	f7fc ffdf 	bl	8000220 <strlen>
 8003262:	4603      	mov	r3, r0
 8003264:	1c5a      	adds	r2, r3, #1
 8003266:	69bc      	ldr	r4, [r7, #24]
 8003268:	1c63      	adds	r3, r4, #1
 800326a:	61bb      	str	r3, [r7, #24]
 800326c:	4610      	mov	r0, r2
 800326e:	f016 faef 	bl	8019850 <malloc>
 8003272:	4603      	mov	r3, r0
 8003274:	461a      	mov	r2, r3
 8003276:	4b3f      	ldr	r3, [pc, #252]	@ (8003374 <nmea_parse+0x140>)
 8003278:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
        strcpy(data[cnt-1], token);
 800327c:	69bb      	ldr	r3, [r7, #24]
 800327e:	3b01      	subs	r3, #1
 8003280:	4a3c      	ldr	r2, [pc, #240]	@ (8003374 <nmea_parse+0x140>)
 8003282:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003286:	69f9      	ldr	r1, [r7, #28]
 8003288:	4618      	mov	r0, r3
 800328a:	f018 fb6a 	bl	801b962 <strcpy>
        token = strtok(NULL, "$");
 800328e:	493a      	ldr	r1, [pc, #232]	@ (8003378 <nmea_parse+0x144>)
 8003290:	2000      	movs	r0, #0
 8003292:	f018 fa6d 	bl	801b770 <strtok>
 8003296:	61f8      	str	r0, [r7, #28]
    while(token !=NULL){
 8003298:	69fb      	ldr	r3, [r7, #28]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d1de      	bne.n	800325c <nmea_parse+0x28>
    }
    for(int i = 0; i<cnt; i++){
 800329e:	2300      	movs	r3, #0
 80032a0:	613b      	str	r3, [r7, #16]
 80032a2:	e048      	b.n	8003336 <nmea_parse+0x102>
       if(strstr(data[i], "\r\n")!=NULL && gps_checksum(data[i])){
 80032a4:	4a33      	ldr	r2, [pc, #204]	@ (8003374 <nmea_parse+0x140>)
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032ac:	4933      	ldr	r1, [pc, #204]	@ (800337c <nmea_parse+0x148>)
 80032ae:	4618      	mov	r0, r3
 80032b0:	f018 faba 	bl	801b828 <strstr>
 80032b4:	4603      	mov	r3, r0
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d03a      	beq.n	8003330 <nmea_parse+0xfc>
 80032ba:	4a2e      	ldr	r2, [pc, #184]	@ (8003374 <nmea_parse+0x140>)
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032c2:	4618      	mov	r0, r3
 80032c4:	f7ff fd26 	bl	8002d14 <gps_checksum>
 80032c8:	4603      	mov	r3, r0
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d030      	beq.n	8003330 <nmea_parse+0xfc>
           if(strstr(data[i], "GNRMC")!=NULL){
 80032ce:	4a29      	ldr	r2, [pc, #164]	@ (8003374 <nmea_parse+0x140>)
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032d6:	492a      	ldr	r1, [pc, #168]	@ (8003380 <nmea_parse+0x14c>)
 80032d8:	4618      	mov	r0, r3
 80032da:	f018 faa5 	bl	801b828 <strstr>
 80032de:	4603      	mov	r3, r0
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d00d      	beq.n	8003300 <nmea_parse+0xcc>
        	   nmea_GNRMC(gps_data, data[i]);
 80032e4:	4a23      	ldr	r2, [pc, #140]	@ (8003374 <nmea_parse+0x140>)
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032ec:	4619      	mov	r1, r3
 80032ee:	6878      	ldr	r0, [r7, #4]
 80032f0:	f7ff ff2e 	bl	8003150 <nmea_GNRMC>
        	   if(cnt12>=1){
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	dc22      	bgt.n	8003340 <nmea_parse+0x10c>
        		  break;
        	   }
               cnt12=1;
 80032fa:	2301      	movs	r3, #1
 80032fc:	617b      	str	r3, [r7, #20]
 80032fe:	e017      	b.n	8003330 <nmea_parse+0xfc>

           }
           else if(strstr(data[i], "GNGGA")!=NULL){
 8003300:	4a1c      	ldr	r2, [pc, #112]	@ (8003374 <nmea_parse+0x140>)
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003308:	491e      	ldr	r1, [pc, #120]	@ (8003384 <nmea_parse+0x150>)
 800330a:	4618      	mov	r0, r3
 800330c:	f018 fa8c 	bl	801b828 <strstr>
 8003310:	4603      	mov	r3, r0
 8003312:	2b00      	cmp	r3, #0
 8003314:	d00c      	beq.n	8003330 <nmea_parse+0xfc>
               nmea_GPGGA(gps_data, data[i]);
 8003316:	4a17      	ldr	r2, [pc, #92]	@ (8003374 <nmea_parse+0x140>)
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800331e:	4619      	mov	r1, r3
 8003320:	6878      	ldr	r0, [r7, #4]
 8003322:	f7ff fd41 	bl	8002da8 <nmea_GPGGA>
               if(cnt12>=1){
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	2b00      	cmp	r3, #0
 800332a:	dc0b      	bgt.n	8003344 <nmea_parse+0x110>
              	   break;
               }
               cnt12=1;
 800332c:	2301      	movs	r3, #1
 800332e:	617b      	str	r3, [r7, #20]
    for(int i = 0; i<cnt; i++){
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	3301      	adds	r3, #1
 8003334:	613b      	str	r3, [r7, #16]
 8003336:	693a      	ldr	r2, [r7, #16]
 8003338:	69bb      	ldr	r3, [r7, #24]
 800333a:	429a      	cmp	r2, r3
 800333c:	dbb2      	blt.n	80032a4 <nmea_parse+0x70>
 800333e:	e002      	b.n	8003346 <nmea_parse+0x112>
        		  break;
 8003340:	bf00      	nop
 8003342:	e000      	b.n	8003346 <nmea_parse+0x112>
              	   break;
 8003344:	bf00      	nop
           }
       }

    }
    for(int i = 0; i<cnt; i++) free(data[i]);
 8003346:	2300      	movs	r3, #0
 8003348:	60fb      	str	r3, [r7, #12]
 800334a:	e009      	b.n	8003360 <nmea_parse+0x12c>
 800334c:	4a09      	ldr	r2, [pc, #36]	@ (8003374 <nmea_parse+0x140>)
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003354:	4618      	mov	r0, r3
 8003356:	f016 fa83 	bl	8019860 <free>
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	3301      	adds	r3, #1
 800335e:	60fb      	str	r3, [r7, #12]
 8003360:	68fa      	ldr	r2, [r7, #12]
 8003362:	69bb      	ldr	r3, [r7, #24]
 8003364:	429a      	cmp	r2, r3
 8003366:	dbf1      	blt.n	800334c <nmea_parse+0x118>


}
 8003368:	bf00      	nop
 800336a:	bf00      	nop
 800336c:	3724      	adds	r7, #36	@ 0x24
 800336e:	46bd      	mov	sp, r7
 8003370:	bd90      	pop	{r4, r7, pc}
 8003372:	bf00      	nop
 8003374:	20000cec 	.word	0x20000cec
 8003378:	0801fc98 	.word	0x0801fc98
 800337c:	0801fc9c 	.word	0x0801fc9c
 8003380:	0801fca0 	.word	0x0801fca0
 8003384:	0801fca8 	.word	0x0801fca8

08003388 <distancecalc>:

double distancecalc(double lat1, double lat2, double long1, double long2){
 8003388:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800338c:	b08a      	sub	sp, #40	@ 0x28
 800338e:	af00      	add	r7, sp, #0
 8003390:	ed87 0b06 	vstr	d0, [r7, #24]
 8003394:	ed87 1b04 	vstr	d1, [r7, #16]
 8003398:	ed87 2b02 	vstr	d2, [r7, #8]
 800339c:	ed87 3b00 	vstr	d3, [r7]
	double distance=0;
 80033a0:	f04f 0200 	mov.w	r2, #0
 80033a4:	f04f 0300 	mov.w	r3, #0
 80033a8:	e9c7 2308 	strd	r2, r3, [r7, #32]
	distance=(double) 6371000*acosl(fmin(1,sinl(lat1*(M_PI/180))*sinl(lat2*(M_PI/180))+cosl(lat1*(M_PI/180))*cosl(lat2*(M_PI/180))*cosl((long2-long1)*(M_PI/180))));
 80033ac:	a358      	add	r3, pc, #352	@ (adr r3, 8003510 <distancecalc+0x188>)
 80033ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033b2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80033b6:	f7fd f8f7 	bl	80005a8 <__aeabi_dmul>
 80033ba:	4602      	mov	r2, r0
 80033bc:	460b      	mov	r3, r1
 80033be:	ec43 2b17 	vmov	d7, r2, r3
 80033c2:	eeb0 0a47 	vmov.f32	s0, s14
 80033c6:	eef0 0a67 	vmov.f32	s1, s15
 80033ca:	f01b f80b 	bl	801e3e4 <sinl>
 80033ce:	ec55 4b10 	vmov	r4, r5, d0
 80033d2:	a34f      	add	r3, pc, #316	@ (adr r3, 8003510 <distancecalc+0x188>)
 80033d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033d8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80033dc:	f7fd f8e4 	bl	80005a8 <__aeabi_dmul>
 80033e0:	4602      	mov	r2, r0
 80033e2:	460b      	mov	r3, r1
 80033e4:	ec43 2b17 	vmov	d7, r2, r3
 80033e8:	eeb0 0a47 	vmov.f32	s0, s14
 80033ec:	eef0 0a67 	vmov.f32	s1, s15
 80033f0:	f01a fff8 	bl	801e3e4 <sinl>
 80033f4:	ec53 2b10 	vmov	r2, r3, d0
 80033f8:	4620      	mov	r0, r4
 80033fa:	4629      	mov	r1, r5
 80033fc:	f7fd f8d4 	bl	80005a8 <__aeabi_dmul>
 8003400:	4602      	mov	r2, r0
 8003402:	460b      	mov	r3, r1
 8003404:	4614      	mov	r4, r2
 8003406:	461d      	mov	r5, r3
 8003408:	a341      	add	r3, pc, #260	@ (adr r3, 8003510 <distancecalc+0x188>)
 800340a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800340e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003412:	f7fd f8c9 	bl	80005a8 <__aeabi_dmul>
 8003416:	4602      	mov	r2, r0
 8003418:	460b      	mov	r3, r1
 800341a:	ec43 2b17 	vmov	d7, r2, r3
 800341e:	eeb0 0a47 	vmov.f32	s0, s14
 8003422:	eef0 0a67 	vmov.f32	s1, s15
 8003426:	f01a ffdb 	bl	801e3e0 <cosl>
 800342a:	ec59 8b10 	vmov	r8, r9, d0
 800342e:	a338      	add	r3, pc, #224	@ (adr r3, 8003510 <distancecalc+0x188>)
 8003430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003434:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003438:	f7fd f8b6 	bl	80005a8 <__aeabi_dmul>
 800343c:	4602      	mov	r2, r0
 800343e:	460b      	mov	r3, r1
 8003440:	ec43 2b17 	vmov	d7, r2, r3
 8003444:	eeb0 0a47 	vmov.f32	s0, s14
 8003448:	eef0 0a67 	vmov.f32	s1, s15
 800344c:	f01a ffc8 	bl	801e3e0 <cosl>
 8003450:	ec53 2b10 	vmov	r2, r3, d0
 8003454:	4640      	mov	r0, r8
 8003456:	4649      	mov	r1, r9
 8003458:	f7fd f8a6 	bl	80005a8 <__aeabi_dmul>
 800345c:	4602      	mov	r2, r0
 800345e:	460b      	mov	r3, r1
 8003460:	4690      	mov	r8, r2
 8003462:	4699      	mov	r9, r3
 8003464:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003468:	e9d7 0100 	ldrd	r0, r1, [r7]
 800346c:	f7fc fee4 	bl	8000238 <__aeabi_dsub>
 8003470:	4602      	mov	r2, r0
 8003472:	460b      	mov	r3, r1
 8003474:	4610      	mov	r0, r2
 8003476:	4619      	mov	r1, r3
 8003478:	a325      	add	r3, pc, #148	@ (adr r3, 8003510 <distancecalc+0x188>)
 800347a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800347e:	f7fd f893 	bl	80005a8 <__aeabi_dmul>
 8003482:	4602      	mov	r2, r0
 8003484:	460b      	mov	r3, r1
 8003486:	ec43 2b17 	vmov	d7, r2, r3
 800348a:	eeb0 0a47 	vmov.f32	s0, s14
 800348e:	eef0 0a67 	vmov.f32	s1, s15
 8003492:	f01a ffa5 	bl	801e3e0 <cosl>
 8003496:	ec53 2b10 	vmov	r2, r3, d0
 800349a:	4640      	mov	r0, r8
 800349c:	4649      	mov	r1, r9
 800349e:	f7fd f883 	bl	80005a8 <__aeabi_dmul>
 80034a2:	4602      	mov	r2, r0
 80034a4:	460b      	mov	r3, r1
 80034a6:	4620      	mov	r0, r4
 80034a8:	4629      	mov	r1, r5
 80034aa:	f7fc fec7 	bl	800023c <__adddf3>
 80034ae:	4602      	mov	r2, r0
 80034b0:	460b      	mov	r3, r1
 80034b2:	ec43 2b17 	vmov	d7, r2, r3
 80034b6:	ed9f 1b14 	vldr	d1, [pc, #80]	@ 8003508 <distancecalc+0x180>
 80034ba:	eeb0 0a47 	vmov.f32	s0, s14
 80034be:	eef0 0a67 	vmov.f32	s1, s15
 80034c2:	f01a ff2f 	bl	801e324 <fmin>
 80034c6:	eeb0 7a40 	vmov.f32	s14, s0
 80034ca:	eef0 7a60 	vmov.f32	s15, s1
 80034ce:	eeb0 0a47 	vmov.f32	s0, s14
 80034d2:	eef0 0a67 	vmov.f32	s1, s15
 80034d6:	f01a ff87 	bl	801e3e8 <acosl>
 80034da:	ec51 0b10 	vmov	r0, r1, d0
 80034de:	a30e      	add	r3, pc, #56	@ (adr r3, 8003518 <distancecalc+0x190>)
 80034e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034e4:	f7fd f860 	bl	80005a8 <__aeabi_dmul>
 80034e8:	4602      	mov	r2, r0
 80034ea:	460b      	mov	r3, r1
 80034ec:	e9c7 2308 	strd	r2, r3, [r7, #32]

	return distance;
 80034f0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80034f4:	ec43 2b17 	vmov	d7, r2, r3
}
 80034f8:	eeb0 0a47 	vmov.f32	s0, s14
 80034fc:	eef0 0a67 	vmov.f32	s1, s15
 8003500:	3728      	adds	r7, #40	@ 0x28
 8003502:	46bd      	mov	sp, r7
 8003504:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003508:	00000000 	.word	0x00000000
 800350c:	3ff00000 	.word	0x3ff00000
 8003510:	a2529d39 	.word	0xa2529d39
 8003514:	3f91df46 	.word	0x3f91df46
 8003518:	00000000 	.word	0x00000000
 800351c:	41584dae 	.word	0x41584dae

08003520 <MX_RF_Init>:

/* USER CODE END 0 */

/* RF init function */
void MX_RF_Init(void)
{
 8003520:	b480      	push	{r7}
 8003522:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8003524:	bf00      	nop
 8003526:	46bd      	mov	sp, r7
 8003528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352c:	4770      	bx	lr

0800352e <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 800352e:	b480      	push	{r7}
 8003530:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8003532:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003536:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800353a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800353e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003542:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003546:	bf00      	nop
 8003548:	46bd      	mov	sp, r7
 800354a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354e:	4770      	bx	lr

08003550 <LL_APB1_GRP1_EnableClock>:
{
 8003550:	b480      	push	{r7}
 8003552:	b085      	sub	sp, #20
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8003558:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800355c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800355e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	4313      	orrs	r3, r2
 8003566:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8003568:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800356c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	4013      	ands	r3, r2
 8003572:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003574:	68fb      	ldr	r3, [r7, #12]
}
 8003576:	bf00      	nop
 8003578:	3714      	adds	r7, #20
 800357a:	46bd      	mov	sp, r7
 800357c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003580:	4770      	bx	lr
	...

08003584 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b086      	sub	sp, #24
 8003588:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800358a:	1d3b      	adds	r3, r7, #4
 800358c:	2200      	movs	r2, #0
 800358e:	601a      	str	r2, [r3, #0]
 8003590:	605a      	str	r2, [r3, #4]
 8003592:	609a      	str	r2, [r3, #8]
 8003594:	60da      	str	r2, [r3, #12]
 8003596:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8003598:	2300      	movs	r3, #0
 800359a:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800359c:	4b2c      	ldr	r3, [pc, #176]	@ (8003650 <MX_RTC_Init+0xcc>)
 800359e:	4a2d      	ldr	r2, [pc, #180]	@ (8003654 <MX_RTC_Init+0xd0>)
 80035a0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80035a2:	4b2b      	ldr	r3, [pc, #172]	@ (8003650 <MX_RTC_Init+0xcc>)
 80035a4:	2200      	movs	r2, #0
 80035a6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 80035a8:	4b29      	ldr	r3, [pc, #164]	@ (8003650 <MX_RTC_Init+0xcc>)
 80035aa:	227f      	movs	r2, #127	@ 0x7f
 80035ac:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 80035ae:	4b28      	ldr	r3, [pc, #160]	@ (8003650 <MX_RTC_Init+0xcc>)
 80035b0:	f641 6284 	movw	r2, #7812	@ 0x1e84
 80035b4:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80035b6:	4b26      	ldr	r3, [pc, #152]	@ (8003650 <MX_RTC_Init+0xcc>)
 80035b8:	2200      	movs	r2, #0
 80035ba:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80035bc:	4b24      	ldr	r3, [pc, #144]	@ (8003650 <MX_RTC_Init+0xcc>)
 80035be:	2200      	movs	r2, #0
 80035c0:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80035c2:	4b23      	ldr	r3, [pc, #140]	@ (8003650 <MX_RTC_Init+0xcc>)
 80035c4:	2200      	movs	r2, #0
 80035c6:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80035c8:	4b21      	ldr	r3, [pc, #132]	@ (8003650 <MX_RTC_Init+0xcc>)
 80035ca:	2200      	movs	r2, #0
 80035cc:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80035ce:	4820      	ldr	r0, [pc, #128]	@ (8003650 <MX_RTC_Init+0xcc>)
 80035d0:	f00a f89e 	bl	800d710 <HAL_RTC_Init>
 80035d4:	4603      	mov	r3, r0
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d001      	beq.n	80035de <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 80035da:	f7ff fb95 	bl	8002d08 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80035de:	2300      	movs	r3, #0
 80035e0:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80035e2:	2300      	movs	r3, #0
 80035e4:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80035e6:	2300      	movs	r3, #0
 80035e8:	71bb      	strb	r3, [r7, #6]
  sTime.SubSeconds = 0x0;
 80035ea:	2300      	movs	r3, #0
 80035ec:	60bb      	str	r3, [r7, #8]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80035ee:	2300      	movs	r3, #0
 80035f0:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80035f2:	2300      	movs	r3, #0
 80035f4:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80035f6:	1d3b      	adds	r3, r7, #4
 80035f8:	2201      	movs	r2, #1
 80035fa:	4619      	mov	r1, r3
 80035fc:	4814      	ldr	r0, [pc, #80]	@ (8003650 <MX_RTC_Init+0xcc>)
 80035fe:	f00a f937 	bl	800d870 <HAL_RTC_SetTime>
 8003602:	4603      	mov	r3, r0
 8003604:	2b00      	cmp	r3, #0
 8003606:	d001      	beq.n	800360c <MX_RTC_Init+0x88>
  {
    Error_Handler();
 8003608:	f7ff fb7e 	bl	8002d08 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800360c:	2301      	movs	r3, #1
 800360e:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8003610:	2301      	movs	r3, #1
 8003612:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8003614:	2301      	movs	r3, #1
 8003616:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8003618:	2300      	movs	r3, #0
 800361a:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800361c:	463b      	mov	r3, r7
 800361e:	2201      	movs	r2, #1
 8003620:	4619      	mov	r1, r3
 8003622:	480b      	ldr	r0, [pc, #44]	@ (8003650 <MX_RTC_Init+0xcc>)
 8003624:	f00a f9e8 	bl	800d9f8 <HAL_RTC_SetDate>
 8003628:	4603      	mov	r3, r0
 800362a:	2b00      	cmp	r3, #0
 800362c:	d001      	beq.n	8003632 <MX_RTC_Init+0xae>
  {
    Error_Handler();
 800362e:	f7ff fb6b 	bl	8002d08 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
 8003632:	2204      	movs	r2, #4
 8003634:	2100      	movs	r1, #0
 8003636:	4806      	ldr	r0, [pc, #24]	@ (8003650 <MX_RTC_Init+0xcc>)
 8003638:	f00a fafc 	bl	800dc34 <HAL_RTCEx_SetWakeUpTimer_IT>
 800363c:	4603      	mov	r3, r0
 800363e:	2b00      	cmp	r3, #0
 8003640:	d001      	beq.n	8003646 <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 8003642:	f7ff fb61 	bl	8002d08 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8003646:	bf00      	nop
 8003648:	3718      	adds	r7, #24
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}
 800364e:	bf00      	nop
 8003650:	20000d28 	.word	0x20000d28
 8003654:	40002800 	.word	0x40002800

08003658 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b096      	sub	sp, #88	@ 0x58
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003660:	f107 0308 	add.w	r3, r7, #8
 8003664:	2250      	movs	r2, #80	@ 0x50
 8003666:	2100      	movs	r1, #0
 8003668:	4618      	mov	r0, r3
 800366a:	f018 f866 	bl	801b73a <memset>
  if(rtcHandle->Instance==RTC)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a14      	ldr	r2, [pc, #80]	@ (80036c4 <HAL_RTC_MspInit+0x6c>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d121      	bne.n	80036bc <HAL_RTC_MspInit+0x64>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

	  HAL_PWR_EnableBkUpAccess();
 8003678:	f008 fa6e 	bl	800bb58 <HAL_PWR_EnableBkUpAccess>




	  HAL_PWR_EnableBkUpAccess();
 800367c:	f008 fa6c 	bl	800bb58 <HAL_PWR_EnableBkUpAccess>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003680:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003684:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV32;
 8003686:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800368a:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800368c:	f107 0308 	add.w	r3, r7, #8
 8003690:	4618      	mov	r0, r3
 8003692:	f009 fdb6 	bl	800d202 <HAL_RCCEx_PeriphCLKConfig>
 8003696:	4603      	mov	r3, r0
 8003698:	2b00      	cmp	r3, #0
 800369a:	d001      	beq.n	80036a0 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 800369c:	f7ff fb34 	bl	8002d08 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80036a0:	f7ff ff45 	bl	800352e <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80036a4:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80036a8:	f7ff ff52 	bl	8003550 <LL_APB1_GRP1_EnableClock>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 80036ac:	2200      	movs	r2, #0
 80036ae:	2100      	movs	r1, #0
 80036b0:	2003      	movs	r0, #3
 80036b2:	f005 f8cc 	bl	800884e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 80036b6:	2003      	movs	r0, #3
 80036b8:	f005 f8e3 	bl	8008882 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80036bc:	bf00      	nop
 80036be:	3758      	adds	r7, #88	@ 0x58
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}
 80036c4:	40002800 	.word	0x40002800

080036c8 <LL_AHB2_GRP1_EnableClock>:
{
 80036c8:	b480      	push	{r7}
 80036ca:	b085      	sub	sp, #20
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80036d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80036d4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80036d6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	4313      	orrs	r3, r2
 80036de:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80036e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80036e4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	4013      	ands	r3, r2
 80036ea:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80036ec:	68fb      	ldr	r3, [r7, #12]
}
 80036ee:	bf00      	nop
 80036f0:	3714      	adds	r7, #20
 80036f2:	46bd      	mov	sp, r7
 80036f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f8:	4770      	bx	lr

080036fa <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80036fa:	b480      	push	{r7}
 80036fc:	b085      	sub	sp, #20
 80036fe:	af00      	add	r7, sp, #0
 8003700:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8003702:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003706:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003708:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	4313      	orrs	r3, r2
 8003710:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8003712:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003716:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	4013      	ands	r3, r2
 800371c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800371e:	68fb      	ldr	r3, [r7, #12]
}
 8003720:	bf00      	nop
 8003722:	3714      	adds	r7, #20
 8003724:	46bd      	mov	sp, r7
 8003726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372a:	4770      	bx	lr

0800372c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8003730:	4b1b      	ldr	r3, [pc, #108]	@ (80037a0 <MX_SPI1_Init+0x74>)
 8003732:	4a1c      	ldr	r2, [pc, #112]	@ (80037a4 <MX_SPI1_Init+0x78>)
 8003734:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003736:	4b1a      	ldr	r3, [pc, #104]	@ (80037a0 <MX_SPI1_Init+0x74>)
 8003738:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800373c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800373e:	4b18      	ldr	r3, [pc, #96]	@ (80037a0 <MX_SPI1_Init+0x74>)
 8003740:	2200      	movs	r2, #0
 8003742:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003744:	4b16      	ldr	r3, [pc, #88]	@ (80037a0 <MX_SPI1_Init+0x74>)
 8003746:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800374a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800374c:	4b14      	ldr	r3, [pc, #80]	@ (80037a0 <MX_SPI1_Init+0x74>)
 800374e:	2200      	movs	r2, #0
 8003750:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003752:	4b13      	ldr	r3, [pc, #76]	@ (80037a0 <MX_SPI1_Init+0x74>)
 8003754:	2200      	movs	r2, #0
 8003756:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003758:	4b11      	ldr	r3, [pc, #68]	@ (80037a0 <MX_SPI1_Init+0x74>)
 800375a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800375e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8003760:	4b0f      	ldr	r3, [pc, #60]	@ (80037a0 <MX_SPI1_Init+0x74>)
 8003762:	2210      	movs	r2, #16
 8003764:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003766:	4b0e      	ldr	r3, [pc, #56]	@ (80037a0 <MX_SPI1_Init+0x74>)
 8003768:	2200      	movs	r2, #0
 800376a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800376c:	4b0c      	ldr	r3, [pc, #48]	@ (80037a0 <MX_SPI1_Init+0x74>)
 800376e:	2200      	movs	r2, #0
 8003770:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003772:	4b0b      	ldr	r3, [pc, #44]	@ (80037a0 <MX_SPI1_Init+0x74>)
 8003774:	2200      	movs	r2, #0
 8003776:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8003778:	4b09      	ldr	r3, [pc, #36]	@ (80037a0 <MX_SPI1_Init+0x74>)
 800377a:	2207      	movs	r2, #7
 800377c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800377e:	4b08      	ldr	r3, [pc, #32]	@ (80037a0 <MX_SPI1_Init+0x74>)
 8003780:	2200      	movs	r2, #0
 8003782:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003784:	4b06      	ldr	r3, [pc, #24]	@ (80037a0 <MX_SPI1_Init+0x74>)
 8003786:	2208      	movs	r2, #8
 8003788:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800378a:	4805      	ldr	r0, [pc, #20]	@ (80037a0 <MX_SPI1_Init+0x74>)
 800378c:	f00a fb0e 	bl	800ddac <HAL_SPI_Init>
 8003790:	4603      	mov	r3, r0
 8003792:	2b00      	cmp	r3, #0
 8003794:	d001      	beq.n	800379a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8003796:	f7ff fab7 	bl	8002d08 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800379a:	bf00      	nop
 800379c:	bd80      	pop	{r7, pc}
 800379e:	bf00      	nop
 80037a0:	20000d80 	.word	0x20000d80
 80037a4:	40013000 	.word	0x40013000

080037a8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b088      	sub	sp, #32
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037b0:	f107 030c 	add.w	r3, r7, #12
 80037b4:	2200      	movs	r2, #0
 80037b6:	601a      	str	r2, [r3, #0]
 80037b8:	605a      	str	r2, [r3, #4]
 80037ba:	609a      	str	r2, [r3, #8]
 80037bc:	60da      	str	r2, [r3, #12]
 80037be:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a1c      	ldr	r2, [pc, #112]	@ (8003838 <HAL_SPI_MspInit+0x90>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d132      	bne.n	8003830 <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80037ca:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80037ce:	f7ff ff94 	bl	80036fa <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037d2:	2001      	movs	r0, #1
 80037d4:	f7ff ff78 	bl	80036c8 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80037d8:	2002      	movs	r0, #2
 80037da:	f7ff ff75 	bl	80036c8 <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6;
 80037de:	2342      	movs	r3, #66	@ 0x42
 80037e0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037e2:	2302      	movs	r3, #2
 80037e4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037e6:	2300      	movs	r3, #0
 80037e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037ea:	2300      	movs	r3, #0
 80037ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80037ee:	2305      	movs	r3, #5
 80037f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037f2:	f107 030c 	add.w	r3, r7, #12
 80037f6:	4619      	mov	r1, r3
 80037f8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80037fc:	f005 fc5a 	bl	80090b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003800:	2320      	movs	r3, #32
 8003802:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003804:	2302      	movs	r3, #2
 8003806:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003808:	2300      	movs	r3, #0
 800380a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800380c:	2300      	movs	r3, #0
 800380e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003810:	2305      	movs	r3, #5
 8003812:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003814:	f107 030c 	add.w	r3, r7, #12
 8003818:	4619      	mov	r1, r3
 800381a:	4808      	ldr	r0, [pc, #32]	@ (800383c <HAL_SPI_MspInit+0x94>)
 800381c:	f005 fc4a 	bl	80090b4 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 3, 0);
 8003820:	2200      	movs	r2, #0
 8003822:	2103      	movs	r1, #3
 8003824:	2022      	movs	r0, #34	@ 0x22
 8003826:	f005 f812 	bl	800884e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800382a:	2022      	movs	r0, #34	@ 0x22
 800382c:	f005 f829 	bl	8008882 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8003830:	bf00      	nop
 8003832:	3720      	adds	r7, #32
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}
 8003838:	40013000 	.word	0x40013000
 800383c:	48000400 	.word	0x48000400

08003840 <csvframe>:
  /* USER CODE END SPI1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
int csvframe(uint8_t* buffer,float temp,float vbat,GPS * gpsdata,int otherval1,float otherval2){
 8003840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003844:	ed2d 8b02 	vpush	{d8}
 8003848:	b0a7      	sub	sp, #156	@ 0x9c
 800384a:	af16      	add	r7, sp, #88	@ 0x58
 800384c:	6378      	str	r0, [r7, #52]	@ 0x34
 800384e:	ed87 0a0c 	vstr	s0, [r7, #48]	@ 0x30
 8003852:	edc7 0a0b 	vstr	s1, [r7, #44]	@ 0x2c
 8003856:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003858:	627a      	str	r2, [r7, #36]	@ 0x24
 800385a:	ed87 1a08 	vstr	s2, [r7, #32]
	int framesize=0;
 800385e:	2300      	movs	r3, #0
 8003860:	63fb      	str	r3, [r7, #60]	@ 0x3c
	framesize=snprintf((char *)buffer,256, "%0.2f,%0.3f,%0.2f,%0.7f,%0.7f,%0.2f,%d,%0.2f,%d-%02d-%02dT%02d:%02d:%02d.00+02:00\n\r",temp,vbat,(gpsdata->speed)*3.6,gpsdata->latitude,gpsdata->longitude,gpsdata->altitude,otherval1,otherval2,ANNEE,MOIS,JOURS,HR,MINUTE,SEC);
 8003862:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003864:	f7fc fe48 	bl	80004f8 <__aeabi_f2d>
 8003868:	e9c7 0106 	strd	r0, r1, [r7, #24]
 800386c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800386e:	f7fc fe43 	bl	80004f8 <__aeabi_f2d>
 8003872:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8003876:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003878:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800387a:	4618      	mov	r0, r3
 800387c:	f7fc fe3c 	bl	80004f8 <__aeabi_f2d>
 8003880:	a332      	add	r3, pc, #200	@ (adr r3, 800394c <csvframe+0x10c>)
 8003882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003886:	f7fc fe8f 	bl	80005a8 <__aeabi_dmul>
 800388a:	4602      	mov	r2, r0
 800388c:	460b      	mov	r3, r1
 800388e:	ec43 2b18 	vmov	d8, r2, r3
 8003892:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003894:	e9d3 4500 	ldrd	r4, r5, [r3]
 8003898:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800389a:	e9d3 8904 	ldrd	r8, r9, [r3, #16]
 800389e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038a0:	69db      	ldr	r3, [r3, #28]
 80038a2:	4618      	mov	r0, r3
 80038a4:	f7fc fe28 	bl	80004f8 <__aeabi_f2d>
 80038a8:	4682      	mov	sl, r0
 80038aa:	468b      	mov	fp, r1
 80038ac:	6a38      	ldr	r0, [r7, #32]
 80038ae:	f7fc fe23 	bl	80004f8 <__aeabi_f2d>
 80038b2:	4b1f      	ldr	r3, [pc, #124]	@ (8003930 <csvframe+0xf0>)
 80038b4:	881b      	ldrh	r3, [r3, #0]
 80038b6:	60fb      	str	r3, [r7, #12]
 80038b8:	4b1e      	ldr	r3, [pc, #120]	@ (8003934 <csvframe+0xf4>)
 80038ba:	781b      	ldrb	r3, [r3, #0]
 80038bc:	60bb      	str	r3, [r7, #8]
 80038be:	4b1e      	ldr	r3, [pc, #120]	@ (8003938 <csvframe+0xf8>)
 80038c0:	781b      	ldrb	r3, [r3, #0]
 80038c2:	607b      	str	r3, [r7, #4]
 80038c4:	4b1d      	ldr	r3, [pc, #116]	@ (800393c <csvframe+0xfc>)
 80038c6:	781b      	ldrb	r3, [r3, #0]
 80038c8:	461e      	mov	r6, r3
 80038ca:	4b1d      	ldr	r3, [pc, #116]	@ (8003940 <csvframe+0x100>)
 80038cc:	781b      	ldrb	r3, [r3, #0]
 80038ce:	461a      	mov	r2, r3
 80038d0:	4b1c      	ldr	r3, [pc, #112]	@ (8003944 <csvframe+0x104>)
 80038d2:	781b      	ldrb	r3, [r3, #0]
 80038d4:	9315      	str	r3, [sp, #84]	@ 0x54
 80038d6:	9214      	str	r2, [sp, #80]	@ 0x50
 80038d8:	9613      	str	r6, [sp, #76]	@ 0x4c
 80038da:	687a      	ldr	r2, [r7, #4]
 80038dc:	9212      	str	r2, [sp, #72]	@ 0x48
 80038de:	68ba      	ldr	r2, [r7, #8]
 80038e0:	9211      	str	r2, [sp, #68]	@ 0x44
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	9310      	str	r3, [sp, #64]	@ 0x40
 80038e6:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80038ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038ec:	930c      	str	r3, [sp, #48]	@ 0x30
 80038ee:	e9cd ab0a 	strd	sl, fp, [sp, #40]	@ 0x28
 80038f2:	e9cd 8908 	strd	r8, r9, [sp, #32]
 80038f6:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80038fa:	ed8d 8b04 	vstr	d8, [sp, #16]
 80038fe:	ed97 7b04 	vldr	d7, [r7, #16]
 8003902:	ed8d 7b02 	vstr	d7, [sp, #8]
 8003906:	ed97 7b06 	vldr	d7, [r7, #24]
 800390a:	ed8d 7b00 	vstr	d7, [sp]
 800390e:	4a0e      	ldr	r2, [pc, #56]	@ (8003948 <csvframe+0x108>)
 8003910:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003914:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8003916:	f017 fe79 	bl	801b60c <sniprintf>
 800391a:	63f8      	str	r0, [r7, #60]	@ 0x3c
	return framesize;
 800391c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800391e:	4618      	mov	r0, r3
 8003920:	3744      	adds	r7, #68	@ 0x44
 8003922:	46bd      	mov	sp, r7
 8003924:	ecbd 8b02 	vpop	{d8}
 8003928:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800392c:	f3af 8000 	nop.w
 8003930:	20000012 	.word	0x20000012
 8003934:	20000011 	.word	0x20000011
 8003938:	20000010 	.word	0x20000010
 800393c:	20000c85 	.word	0x20000c85
 8003940:	20000c86 	.word	0x20000c86
 8003944:	20000c84 	.word	0x20000c84
 8003948:	0801fcb0 	.word	0x0801fcb0
 800394c:	cccccccd 	.word	0xcccccccd
 8003950:	400ccccc 	.word	0x400ccccc

08003954 <storeindex>:


void storeindex(void){
 8003954:	b580      	push	{r7, lr}
 8003956:	b09c      	sub	sp, #112	@ 0x70
 8003958:	af02      	add	r7, sp, #8
	int writepage=MAX_WRITE_PAGE+1;
 800395a:	f44f 43c8 	mov.w	r3, #25600	@ 0x6400
 800395e:	667b      	str	r3, [r7, #100]	@ 0x64
	uint8_t writebuffer[100];
	memset((uint8_t*)writebuffer,'\0',100);
 8003960:	463b      	mov	r3, r7
 8003962:	2264      	movs	r2, #100	@ 0x64
 8003964:	2100      	movs	r1, #0
 8003966:	4618      	mov	r0, r3
 8003968:	f017 fee7 	bl	801b73a <memset>
	snprintf((char *)writebuffer,100, "%d$%d$",pageoffset,pagenumber);
 800396c:	4b14      	ldr	r3, [pc, #80]	@ (80039c0 <storeindex+0x6c>)
 800396e:	681a      	ldr	r2, [r3, #0]
 8003970:	4b14      	ldr	r3, [pc, #80]	@ (80039c4 <storeindex+0x70>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4638      	mov	r0, r7
 8003976:	9300      	str	r3, [sp, #0]
 8003978:	4613      	mov	r3, r2
 800397a:	4a13      	ldr	r2, [pc, #76]	@ (80039c8 <storeindex+0x74>)
 800397c:	2164      	movs	r1, #100	@ 0x64
 800397e:	f017 fe45 	bl	801b60c <sniprintf>
	SPIF_EraseSector(&hspif1, (int)floor((writepage)/16));
 8003982:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003984:	2b00      	cmp	r3, #0
 8003986:	da00      	bge.n	800398a <storeindex+0x36>
 8003988:	330f      	adds	r3, #15
 800398a:	111b      	asrs	r3, r3, #4
 800398c:	4618      	mov	r0, r3
 800398e:	f7fc fda1 	bl	80004d4 <__aeabi_i2d>
 8003992:	4602      	mov	r2, r0
 8003994:	460b      	mov	r3, r1
 8003996:	4610      	mov	r0, r2
 8003998:	4619      	mov	r1, r3
 800399a:	f7fd f8b5 	bl	8000b08 <__aeabi_d2iz>
 800399e:	4603      	mov	r3, r0
 80039a0:	4619      	mov	r1, r3
 80039a2:	480a      	ldr	r0, [pc, #40]	@ (80039cc <storeindex+0x78>)
 80039a4:	f013 fff9 	bl	801799a <SPIF_EraseSector>
	SPIF_WritePage(&hspif1,writepage, (uint8_t *)writebuffer, 100,0);
 80039a8:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 80039aa:	463a      	mov	r2, r7
 80039ac:	2300      	movs	r3, #0
 80039ae:	9300      	str	r3, [sp, #0]
 80039b0:	2364      	movs	r3, #100	@ 0x64
 80039b2:	4806      	ldr	r0, [pc, #24]	@ (80039cc <storeindex+0x78>)
 80039b4:	f014 f874 	bl	8017aa0 <SPIF_WritePage>

}
 80039b8:	bf00      	nop
 80039ba:	3768      	adds	r7, #104	@ 0x68
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd80      	pop	{r7, pc}
 80039c0:	20000ba4 	.word	0x20000ba4
 80039c4:	20000ba8 	.word	0x20000ba8
 80039c8:	0801fd04 	.word	0x0801fd04
 80039cc:	20000970 	.word	0x20000970

080039d0 <getindex>:

void getindex(void){
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b086      	sub	sp, #24
 80039d4:	af02      	add	r7, sp, #8
	int readpage=MAX_WRITE_PAGE+1;
 80039d6:	f44f 43c8 	mov.w	r3, #25600	@ 0x6400
 80039da:	607b      	str	r3, [r7, #4]
	SPIF_ReadPage(&hspif1, readpage, (uint8_t *)indexbuffer, 50, 0);
 80039dc:	6879      	ldr	r1, [r7, #4]
 80039de:	2300      	movs	r3, #0
 80039e0:	9300      	str	r3, [sp, #0]
 80039e2:	2332      	movs	r3, #50	@ 0x32
 80039e4:	4a2b      	ldr	r2, [pc, #172]	@ (8003a94 <getindex+0xc4>)
 80039e6:	482c      	ldr	r0, [pc, #176]	@ (8003a98 <getindex+0xc8>)
 80039e8:	f014 f878 	bl	8017adc <SPIF_ReadPage>
	memset(numbuf1,'$',10);
 80039ec:	220a      	movs	r2, #10
 80039ee:	2124      	movs	r1, #36	@ 0x24
 80039f0:	482a      	ldr	r0, [pc, #168]	@ (8003a9c <getindex+0xcc>)
 80039f2:	f017 fea2 	bl	801b73a <memset>
	memset(numbuf2,'$',10);
 80039f6:	220a      	movs	r2, #10
 80039f8:	2124      	movs	r1, #36	@ 0x24
 80039fa:	4829      	ldr	r0, [pc, #164]	@ (8003aa0 <getindex+0xd0>)
 80039fc:	f017 fe9d 	bl	801b73a <memset>
	int cnt=0;
 8003a00:	2300      	movs	r3, #0
 8003a02:	60fb      	str	r3, [r7, #12]
	if((indexbuffer[0]&0x0F)<10 ){
 8003a04:	4b23      	ldr	r3, [pc, #140]	@ (8003a94 <getindex+0xc4>)
 8003a06:	781b      	ldrb	r3, [r3, #0]
 8003a08:	f003 030f 	and.w	r3, r3, #15
 8003a0c:	2b09      	cmp	r3, #9
 8003a0e:	dc3a      	bgt.n	8003a86 <getindex+0xb6>
	while(indexbuffer[cnt]!='$'){
 8003a10:	e00b      	b.n	8003a2a <getindex+0x5a>

			  numbuf1[cnt]=indexbuffer[cnt];
 8003a12:	4a20      	ldr	r2, [pc, #128]	@ (8003a94 <getindex+0xc4>)
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	4413      	add	r3, r2
 8003a18:	7819      	ldrb	r1, [r3, #0]
 8003a1a:	4a20      	ldr	r2, [pc, #128]	@ (8003a9c <getindex+0xcc>)
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	4413      	add	r3, r2
 8003a20:	460a      	mov	r2, r1
 8003a22:	701a      	strb	r2, [r3, #0]
			  cnt++;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	3301      	adds	r3, #1
 8003a28:	60fb      	str	r3, [r7, #12]
	while(indexbuffer[cnt]!='$'){
 8003a2a:	4a1a      	ldr	r2, [pc, #104]	@ (8003a94 <getindex+0xc4>)
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	4413      	add	r3, r2
 8003a30:	781b      	ldrb	r3, [r3, #0]
 8003a32:	2b24      	cmp	r3, #36	@ 0x24
 8003a34:	d1ed      	bne.n	8003a12 <getindex+0x42>
		  }
		  cnt++;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	3301      	adds	r3, #1
 8003a3a:	60fb      	str	r3, [r7, #12]
		  int cnt1=0;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	60bb      	str	r3, [r7, #8]
		  while(indexbuffer[cnt]!='$'){
 8003a40:	e00e      	b.n	8003a60 <getindex+0x90>

		  		  numbuf2[cnt1]=indexbuffer[cnt];
 8003a42:	4a14      	ldr	r2, [pc, #80]	@ (8003a94 <getindex+0xc4>)
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	4413      	add	r3, r2
 8003a48:	7819      	ldrb	r1, [r3, #0]
 8003a4a:	4a15      	ldr	r2, [pc, #84]	@ (8003aa0 <getindex+0xd0>)
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	4413      	add	r3, r2
 8003a50:	460a      	mov	r2, r1
 8003a52:	701a      	strb	r2, [r3, #0]
		  		  cnt1++;
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	3301      	adds	r3, #1
 8003a58:	60bb      	str	r3, [r7, #8]
		  		  cnt++;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	3301      	adds	r3, #1
 8003a5e:	60fb      	str	r3, [r7, #12]
		  while(indexbuffer[cnt]!='$'){
 8003a60:	4a0c      	ldr	r2, [pc, #48]	@ (8003a94 <getindex+0xc4>)
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	4413      	add	r3, r2
 8003a66:	781b      	ldrb	r3, [r3, #0]
 8003a68:	2b24      	cmp	r3, #36	@ 0x24
 8003a6a:	d1ea      	bne.n	8003a42 <getindex+0x72>
		  	  }

		 pageoffset=atoi((char *)numbuf1);
 8003a6c:	480b      	ldr	r0, [pc, #44]	@ (8003a9c <getindex+0xcc>)
 8003a6e:	f015 feeb 	bl	8019848 <atoi>
 8003a72:	4603      	mov	r3, r0
 8003a74:	4a0b      	ldr	r2, [pc, #44]	@ (8003aa4 <getindex+0xd4>)
 8003a76:	6013      	str	r3, [r2, #0]
		 pagenumber=atoi((char *)numbuf2);
 8003a78:	4809      	ldr	r0, [pc, #36]	@ (8003aa0 <getindex+0xd0>)
 8003a7a:	f015 fee5 	bl	8019848 <atoi>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	4a09      	ldr	r2, [pc, #36]	@ (8003aa8 <getindex+0xd8>)
 8003a82:	6013      	str	r3, [r2, #0]
	}
	else{
		storeindex();
	}

}
 8003a84:	e001      	b.n	8003a8a <getindex+0xba>
		storeindex();
 8003a86:	f7ff ff65 	bl	8003954 <storeindex>
}
 8003a8a:	bf00      	nop
 8003a8c:	3710      	adds	r7, #16
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}
 8003a92:	bf00      	nop
 8003a94:	20000d4c 	.word	0x20000d4c
 8003a98:	20000970 	.word	0x20000970
 8003a9c:	20000bb0 	.word	0x20000bb0
 8003aa0:	20000bbc 	.word	0x20000bbc
 8003aa4:	20000ba4 	.word	0x20000ba4
 8003aa8:	20000ba8 	.word	0x20000ba8

08003aac <writebuffertoflash>:

void writebuffertoflash(uint8_t * buffer,int bufferlenght){
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b084      	sub	sp, #16
 8003ab0:	af02      	add	r7, sp, #8
 8003ab2:	6078      	str	r0, [r7, #4]
 8003ab4:	6039      	str	r1, [r7, #0]
	if((pagenumber+1)%16==0){
 8003ab6:	4b3f      	ldr	r3, [pc, #252]	@ (8003bb4 <writebuffertoflash+0x108>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	3301      	adds	r3, #1
 8003abc:	f003 030f 	and.w	r3, r3, #15
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d11b      	bne.n	8003afc <writebuffertoflash+0x50>
		if(sectoreraseen==0){
 8003ac4:	4b3c      	ldr	r3, [pc, #240]	@ (8003bb8 <writebuffertoflash+0x10c>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d117      	bne.n	8003afc <writebuffertoflash+0x50>
		SPIF_EraseSector(&hspif1, (int)floor((pagenumber+1)/16));
 8003acc:	4b39      	ldr	r3, [pc, #228]	@ (8003bb4 <writebuffertoflash+0x108>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	3301      	adds	r3, #1
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	da00      	bge.n	8003ad8 <writebuffertoflash+0x2c>
 8003ad6:	330f      	adds	r3, #15
 8003ad8:	111b      	asrs	r3, r3, #4
 8003ada:	4618      	mov	r0, r3
 8003adc:	f7fc fcfa 	bl	80004d4 <__aeabi_i2d>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	460b      	mov	r3, r1
 8003ae4:	4610      	mov	r0, r2
 8003ae6:	4619      	mov	r1, r3
 8003ae8:	f7fd f80e 	bl	8000b08 <__aeabi_d2iz>
 8003aec:	4603      	mov	r3, r0
 8003aee:	4619      	mov	r1, r3
 8003af0:	4832      	ldr	r0, [pc, #200]	@ (8003bbc <writebuffertoflash+0x110>)
 8003af2:	f013 ff52 	bl	801799a <SPIF_EraseSector>
		sectoreraseen=1;
 8003af6:	4b30      	ldr	r3, [pc, #192]	@ (8003bb8 <writebuffertoflash+0x10c>)
 8003af8:	2201      	movs	r2, #1
 8003afa:	601a      	str	r2, [r3, #0]
		}

		  }
	if(bufferlenght+pageoffset<256){
 8003afc:	4b30      	ldr	r3, [pc, #192]	@ (8003bc0 <writebuffertoflash+0x114>)
 8003afe:	681a      	ldr	r2, [r3, #0]
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	4413      	add	r3, r2
 8003b04:	2bff      	cmp	r3, #255	@ 0xff
 8003b06:	dc11      	bgt.n	8003b2c <writebuffertoflash+0x80>
		SPIF_WritePage(&hspif1,pagenumber, (uint8_t *)buffer, bufferlenght,pageoffset);
 8003b08:	4b2a      	ldr	r3, [pc, #168]	@ (8003bb4 <writebuffertoflash+0x108>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4619      	mov	r1, r3
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	4a2b      	ldr	r2, [pc, #172]	@ (8003bc0 <writebuffertoflash+0x114>)
 8003b12:	6812      	ldr	r2, [r2, #0]
 8003b14:	9200      	str	r2, [sp, #0]
 8003b16:	687a      	ldr	r2, [r7, #4]
 8003b18:	4828      	ldr	r0, [pc, #160]	@ (8003bbc <writebuffertoflash+0x110>)
 8003b1a:	f013 ffc1 	bl	8017aa0 <SPIF_WritePage>
		pageoffset=pageoffset+bufferlenght;
 8003b1e:	4b28      	ldr	r3, [pc, #160]	@ (8003bc0 <writebuffertoflash+0x114>)
 8003b20:	681a      	ldr	r2, [r3, #0]
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	4413      	add	r3, r2
 8003b26:	4a26      	ldr	r2, [pc, #152]	@ (8003bc0 <writebuffertoflash+0x114>)
 8003b28:	6013      	str	r3, [r2, #0]
 8003b2a:	e03c      	b.n	8003ba6 <writebuffertoflash+0xfa>
	}
	else{
		SPIF_WritePage(&hspif1,pagenumber, (uint8_t *)buffer, 256-pageoffset,pageoffset);
 8003b2c:	4b21      	ldr	r3, [pc, #132]	@ (8003bb4 <writebuffertoflash+0x108>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4619      	mov	r1, r3
 8003b32:	4b23      	ldr	r3, [pc, #140]	@ (8003bc0 <writebuffertoflash+0x114>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8003b3a:	461a      	mov	r2, r3
 8003b3c:	4b20      	ldr	r3, [pc, #128]	@ (8003bc0 <writebuffertoflash+0x114>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	9300      	str	r3, [sp, #0]
 8003b42:	4613      	mov	r3, r2
 8003b44:	687a      	ldr	r2, [r7, #4]
 8003b46:	481d      	ldr	r0, [pc, #116]	@ (8003bbc <writebuffertoflash+0x110>)
 8003b48:	f013 ffaa 	bl	8017aa0 <SPIF_WritePage>
		HAL_Delay(100);
 8003b4c:	2064      	movs	r0, #100	@ 0x64
 8003b4e:	f7fd fdee 	bl	800172e <HAL_Delay>
		SPIF_WritePage(&hspif1,pagenumber+1, (uint8_t *)buffer+(256-pageoffset), bufferlenght-(256-pageoffset),0);
 8003b52:	4b18      	ldr	r3, [pc, #96]	@ (8003bb4 <writebuffertoflash+0x108>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	3301      	adds	r3, #1
 8003b58:	4618      	mov	r0, r3
 8003b5a:	4b19      	ldr	r3, [pc, #100]	@ (8003bc0 <writebuffertoflash+0x114>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8003b62:	461a      	mov	r2, r3
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	1899      	adds	r1, r3, r2
 8003b68:	4b15      	ldr	r3, [pc, #84]	@ (8003bc0 <writebuffertoflash+0x114>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8003b70:	683a      	ldr	r2, [r7, #0]
 8003b72:	1ad3      	subs	r3, r2, r3
 8003b74:	461a      	mov	r2, r3
 8003b76:	2300      	movs	r3, #0
 8003b78:	9300      	str	r3, [sp, #0]
 8003b7a:	4613      	mov	r3, r2
 8003b7c:	460a      	mov	r2, r1
 8003b7e:	4601      	mov	r1, r0
 8003b80:	480e      	ldr	r0, [pc, #56]	@ (8003bbc <writebuffertoflash+0x110>)
 8003b82:	f013 ff8d 	bl	8017aa0 <SPIF_WritePage>
		pagenumber=pagenumber+1;
 8003b86:	4b0b      	ldr	r3, [pc, #44]	@ (8003bb4 <writebuffertoflash+0x108>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	3301      	adds	r3, #1
 8003b8c:	4a09      	ldr	r2, [pc, #36]	@ (8003bb4 <writebuffertoflash+0x108>)
 8003b8e:	6013      	str	r3, [r2, #0]
		sectoreraseen=0;
 8003b90:	4b09      	ldr	r3, [pc, #36]	@ (8003bb8 <writebuffertoflash+0x10c>)
 8003b92:	2200      	movs	r2, #0
 8003b94:	601a      	str	r2, [r3, #0]
		pageoffset=(bufferlenght-(256-pageoffset));
 8003b96:	4b0a      	ldr	r3, [pc, #40]	@ (8003bc0 <writebuffertoflash+0x114>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8003b9e:	683a      	ldr	r2, [r7, #0]
 8003ba0:	1ad3      	subs	r3, r2, r3
 8003ba2:	4a07      	ldr	r2, [pc, #28]	@ (8003bc0 <writebuffertoflash+0x114>)
 8003ba4:	6013      	str	r3, [r2, #0]
	}
	storeindex();
 8003ba6:	f7ff fed5 	bl	8003954 <storeindex>

}
 8003baa:	bf00      	nop
 8003bac:	3708      	adds	r7, #8
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}
 8003bb2:	bf00      	nop
 8003bb4:	20000ba8 	.word	0x20000ba8
 8003bb8:	20000bac 	.word	0x20000bac
 8003bbc:	20000970 	.word	0x20000970
 8003bc0:	20000ba4 	.word	0x20000ba4

08003bc4 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

extern uint8_t bufferscreen[50];

void ssd1306_Reset(void) {
 8003bc4:	b480      	push	{r7}
 8003bc6:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8003bc8:	bf00      	nop
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd0:	4770      	bx	lr
	...

08003bd4 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b086      	sub	sp, #24
 8003bd8:	af04      	add	r7, sp, #16
 8003bda:	4603      	mov	r3, r0
 8003bdc:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8003bde:	f04f 33ff 	mov.w	r3, #4294967295
 8003be2:	9302      	str	r3, [sp, #8]
 8003be4:	2301      	movs	r3, #1
 8003be6:	9301      	str	r3, [sp, #4]
 8003be8:	1dfb      	adds	r3, r7, #7
 8003bea:	9300      	str	r3, [sp, #0]
 8003bec:	2301      	movs	r3, #1
 8003bee:	2200      	movs	r2, #0
 8003bf0:	2178      	movs	r1, #120	@ 0x78
 8003bf2:	4803      	ldr	r0, [pc, #12]	@ (8003c00 <ssd1306_WriteCommand+0x2c>)
 8003bf4:	f005 fdfc 	bl	80097f0 <HAL_I2C_Mem_Write>
}
 8003bf8:	bf00      	nop
 8003bfa:	3708      	adds	r7, #8
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bd80      	pop	{r7, pc}
 8003c00:	20000544 	.word	0x20000544

08003c04 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b086      	sub	sp, #24
 8003c08:	af04      	add	r7, sp, #16
 8003c0a:	6078      	str	r0, [r7, #4]
 8003c0c:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	b29b      	uxth	r3, r3
 8003c12:	f04f 32ff 	mov.w	r2, #4294967295
 8003c16:	9202      	str	r2, [sp, #8]
 8003c18:	9301      	str	r3, [sp, #4]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	9300      	str	r3, [sp, #0]
 8003c1e:	2301      	movs	r3, #1
 8003c20:	2240      	movs	r2, #64	@ 0x40
 8003c22:	2178      	movs	r1, #120	@ 0x78
 8003c24:	4803      	ldr	r0, [pc, #12]	@ (8003c34 <ssd1306_WriteData+0x30>)
 8003c26:	f005 fde3 	bl	80097f0 <HAL_I2C_Mem_Write>
}
 8003c2a:	bf00      	nop
 8003c2c:	3708      	adds	r7, #8
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}
 8003c32:	bf00      	nop
 8003c34:	20000544 	.word	0x20000544

08003c38 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8003c3c:	f7ff ffc2 	bl	8003bc4 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8003c40:	2064      	movs	r0, #100	@ 0x64
 8003c42:	f7fd fd74 	bl	800172e <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8003c46:	2000      	movs	r0, #0
 8003c48:	f000 fb1a 	bl	8004280 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8003c4c:	2020      	movs	r0, #32
 8003c4e:	f7ff ffc1 	bl	8003bd4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8003c52:	2000      	movs	r0, #0
 8003c54:	f7ff ffbe 	bl	8003bd4 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8003c58:	20b0      	movs	r0, #176	@ 0xb0
 8003c5a:	f7ff ffbb 	bl	8003bd4 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8003c5e:	20c8      	movs	r0, #200	@ 0xc8
 8003c60:	f7ff ffb8 	bl	8003bd4 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8003c64:	2000      	movs	r0, #0
 8003c66:	f7ff ffb5 	bl	8003bd4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8003c6a:	2010      	movs	r0, #16
 8003c6c:	f7ff ffb2 	bl	8003bd4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8003c70:	2040      	movs	r0, #64	@ 0x40
 8003c72:	f7ff ffaf 	bl	8003bd4 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8003c76:	20ff      	movs	r0, #255	@ 0xff
 8003c78:	f000 faee 	bl	8004258 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8003c7c:	20a1      	movs	r0, #161	@ 0xa1
 8003c7e:	f7ff ffa9 	bl	8003bd4 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8003c82:	20a6      	movs	r0, #166	@ 0xa6
 8003c84:	f7ff ffa6 	bl	8003bd4 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8003c88:	20a8      	movs	r0, #168	@ 0xa8
 8003c8a:	f7ff ffa3 	bl	8003bd4 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8003c8e:	203f      	movs	r0, #63	@ 0x3f
 8003c90:	f7ff ffa0 	bl	8003bd4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8003c94:	20a4      	movs	r0, #164	@ 0xa4
 8003c96:	f7ff ff9d 	bl	8003bd4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8003c9a:	20d3      	movs	r0, #211	@ 0xd3
 8003c9c:	f7ff ff9a 	bl	8003bd4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8003ca0:	2000      	movs	r0, #0
 8003ca2:	f7ff ff97 	bl	8003bd4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8003ca6:	20d5      	movs	r0, #213	@ 0xd5
 8003ca8:	f7ff ff94 	bl	8003bd4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8003cac:	20f0      	movs	r0, #240	@ 0xf0
 8003cae:	f7ff ff91 	bl	8003bd4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8003cb2:	20d9      	movs	r0, #217	@ 0xd9
 8003cb4:	f7ff ff8e 	bl	8003bd4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8003cb8:	2022      	movs	r0, #34	@ 0x22
 8003cba:	f7ff ff8b 	bl	8003bd4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8003cbe:	20da      	movs	r0, #218	@ 0xda
 8003cc0:	f7ff ff88 	bl	8003bd4 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8003cc4:	2012      	movs	r0, #18
 8003cc6:	f7ff ff85 	bl	8003bd4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8003cca:	20db      	movs	r0, #219	@ 0xdb
 8003ccc:	f7ff ff82 	bl	8003bd4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8003cd0:	2020      	movs	r0, #32
 8003cd2:	f7ff ff7f 	bl	8003bd4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8003cd6:	208d      	movs	r0, #141	@ 0x8d
 8003cd8:	f7ff ff7c 	bl	8003bd4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8003cdc:	2014      	movs	r0, #20
 8003cde:	f7ff ff79 	bl	8003bd4 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8003ce2:	2001      	movs	r0, #1
 8003ce4:	f000 facc 	bl	8004280 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8003ce8:	2000      	movs	r0, #0
 8003cea:	f000 f80f 	bl	8003d0c <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8003cee:	f000 f825 	bl	8003d3c <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8003cf2:	4b05      	ldr	r3, [pc, #20]	@ (8003d08 <ssd1306_Init+0xd0>)
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8003cf8:	4b03      	ldr	r3, [pc, #12]	@ (8003d08 <ssd1306_Init+0xd0>)
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8003cfe:	4b02      	ldr	r3, [pc, #8]	@ (8003d08 <ssd1306_Init+0xd0>)
 8003d00:	2201      	movs	r2, #1
 8003d02:	711a      	strb	r2, [r3, #4]
}
 8003d04:	bf00      	nop
 8003d06:	bd80      	pop	{r7, pc}
 8003d08:	200011e4 	.word	0x200011e4

08003d0c <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b082      	sub	sp, #8
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	4603      	mov	r3, r0
 8003d14:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8003d16:	79fb      	ldrb	r3, [r7, #7]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d101      	bne.n	8003d20 <ssd1306_Fill+0x14>
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	e000      	b.n	8003d22 <ssd1306_Fill+0x16>
 8003d20:	23ff      	movs	r3, #255	@ 0xff
 8003d22:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003d26:	4619      	mov	r1, r3
 8003d28:	4803      	ldr	r0, [pc, #12]	@ (8003d38 <ssd1306_Fill+0x2c>)
 8003d2a:	f017 fd06 	bl	801b73a <memset>
}
 8003d2e:	bf00      	nop
 8003d30:	3708      	adds	r7, #8
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}
 8003d36:	bf00      	nop
 8003d38:	20000de4 	.word	0x20000de4

08003d3c <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b082      	sub	sp, #8
 8003d40:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8003d42:	2300      	movs	r3, #0
 8003d44:	71fb      	strb	r3, [r7, #7]
 8003d46:	e016      	b.n	8003d76 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8003d48:	79fb      	ldrb	r3, [r7, #7]
 8003d4a:	3b50      	subs	r3, #80	@ 0x50
 8003d4c:	b2db      	uxtb	r3, r3
 8003d4e:	4618      	mov	r0, r3
 8003d50:	f7ff ff40 	bl	8003bd4 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8003d54:	2000      	movs	r0, #0
 8003d56:	f7ff ff3d 	bl	8003bd4 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8003d5a:	2010      	movs	r0, #16
 8003d5c:	f7ff ff3a 	bl	8003bd4 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8003d60:	79fb      	ldrb	r3, [r7, #7]
 8003d62:	01db      	lsls	r3, r3, #7
 8003d64:	4a08      	ldr	r2, [pc, #32]	@ (8003d88 <ssd1306_UpdateScreen+0x4c>)
 8003d66:	4413      	add	r3, r2
 8003d68:	2180      	movs	r1, #128	@ 0x80
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f7ff ff4a 	bl	8003c04 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8003d70:	79fb      	ldrb	r3, [r7, #7]
 8003d72:	3301      	adds	r3, #1
 8003d74:	71fb      	strb	r3, [r7, #7]
 8003d76:	79fb      	ldrb	r3, [r7, #7]
 8003d78:	2b07      	cmp	r3, #7
 8003d7a:	d9e5      	bls.n	8003d48 <ssd1306_UpdateScreen+0xc>
    }
}
 8003d7c:	bf00      	nop
 8003d7e:	bf00      	nop
 8003d80:	3708      	adds	r7, #8
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}
 8003d86:	bf00      	nop
 8003d88:	20000de4 	.word	0x20000de4

08003d8c <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8003d8c:	b480      	push	{r7}
 8003d8e:	b083      	sub	sp, #12
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	4603      	mov	r3, r0
 8003d94:	71fb      	strb	r3, [r7, #7]
 8003d96:	460b      	mov	r3, r1
 8003d98:	71bb      	strb	r3, [r7, #6]
 8003d9a:	4613      	mov	r3, r2
 8003d9c:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8003d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	db3d      	blt.n	8003e22 <ssd1306_DrawPixel+0x96>
 8003da6:	79bb      	ldrb	r3, [r7, #6]
 8003da8:	2b3f      	cmp	r3, #63	@ 0x3f
 8003daa:	d83a      	bhi.n	8003e22 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8003dac:	797b      	ldrb	r3, [r7, #5]
 8003dae:	2b01      	cmp	r3, #1
 8003db0:	d11a      	bne.n	8003de8 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8003db2:	79fa      	ldrb	r2, [r7, #7]
 8003db4:	79bb      	ldrb	r3, [r7, #6]
 8003db6:	08db      	lsrs	r3, r3, #3
 8003db8:	b2d8      	uxtb	r0, r3
 8003dba:	4603      	mov	r3, r0
 8003dbc:	01db      	lsls	r3, r3, #7
 8003dbe:	4413      	add	r3, r2
 8003dc0:	4a1b      	ldr	r2, [pc, #108]	@ (8003e30 <ssd1306_DrawPixel+0xa4>)
 8003dc2:	5cd3      	ldrb	r3, [r2, r3]
 8003dc4:	b25a      	sxtb	r2, r3
 8003dc6:	79bb      	ldrb	r3, [r7, #6]
 8003dc8:	f003 0307 	and.w	r3, r3, #7
 8003dcc:	2101      	movs	r1, #1
 8003dce:	fa01 f303 	lsl.w	r3, r1, r3
 8003dd2:	b25b      	sxtb	r3, r3
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	b259      	sxtb	r1, r3
 8003dd8:	79fa      	ldrb	r2, [r7, #7]
 8003dda:	4603      	mov	r3, r0
 8003ddc:	01db      	lsls	r3, r3, #7
 8003dde:	4413      	add	r3, r2
 8003de0:	b2c9      	uxtb	r1, r1
 8003de2:	4a13      	ldr	r2, [pc, #76]	@ (8003e30 <ssd1306_DrawPixel+0xa4>)
 8003de4:	54d1      	strb	r1, [r2, r3]
 8003de6:	e01d      	b.n	8003e24 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8003de8:	79fa      	ldrb	r2, [r7, #7]
 8003dea:	79bb      	ldrb	r3, [r7, #6]
 8003dec:	08db      	lsrs	r3, r3, #3
 8003dee:	b2d8      	uxtb	r0, r3
 8003df0:	4603      	mov	r3, r0
 8003df2:	01db      	lsls	r3, r3, #7
 8003df4:	4413      	add	r3, r2
 8003df6:	4a0e      	ldr	r2, [pc, #56]	@ (8003e30 <ssd1306_DrawPixel+0xa4>)
 8003df8:	5cd3      	ldrb	r3, [r2, r3]
 8003dfa:	b25a      	sxtb	r2, r3
 8003dfc:	79bb      	ldrb	r3, [r7, #6]
 8003dfe:	f003 0307 	and.w	r3, r3, #7
 8003e02:	2101      	movs	r1, #1
 8003e04:	fa01 f303 	lsl.w	r3, r1, r3
 8003e08:	b25b      	sxtb	r3, r3
 8003e0a:	43db      	mvns	r3, r3
 8003e0c:	b25b      	sxtb	r3, r3
 8003e0e:	4013      	ands	r3, r2
 8003e10:	b259      	sxtb	r1, r3
 8003e12:	79fa      	ldrb	r2, [r7, #7]
 8003e14:	4603      	mov	r3, r0
 8003e16:	01db      	lsls	r3, r3, #7
 8003e18:	4413      	add	r3, r2
 8003e1a:	b2c9      	uxtb	r1, r1
 8003e1c:	4a04      	ldr	r2, [pc, #16]	@ (8003e30 <ssd1306_DrawPixel+0xa4>)
 8003e1e:	54d1      	strb	r1, [r2, r3]
 8003e20:	e000      	b.n	8003e24 <ssd1306_DrawPixel+0x98>
        return;
 8003e22:	bf00      	nop
    }
}
 8003e24:	370c      	adds	r7, #12
 8003e26:	46bd      	mov	sp, r7
 8003e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2c:	4770      	bx	lr
 8003e2e:	bf00      	nop
 8003e30:	20000de4 	.word	0x20000de4

08003e34 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8003e34:	b590      	push	{r4, r7, lr}
 8003e36:	b089      	sub	sp, #36	@ 0x24
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	4604      	mov	r4, r0
 8003e3c:	1d38      	adds	r0, r7, #4
 8003e3e:	e880 0006 	stmia.w	r0, {r1, r2}
 8003e42:	461a      	mov	r2, r3
 8003e44:	4623      	mov	r3, r4
 8003e46:	73fb      	strb	r3, [r7, #15]
 8003e48:	4613      	mov	r3, r2
 8003e4a:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8003e4c:	7bfb      	ldrb	r3, [r7, #15]
 8003e4e:	2b1f      	cmp	r3, #31
 8003e50:	d902      	bls.n	8003e58 <ssd1306_WriteChar+0x24>
 8003e52:	7bfb      	ldrb	r3, [r7, #15]
 8003e54:	2b7e      	cmp	r3, #126	@ 0x7e
 8003e56:	d901      	bls.n	8003e5c <ssd1306_WriteChar+0x28>
        return 0;
 8003e58:	2300      	movs	r3, #0
 8003e5a:	e06c      	b.n	8003f36 <ssd1306_WriteChar+0x102>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8003e5c:	4b38      	ldr	r3, [pc, #224]	@ (8003f40 <ssd1306_WriteChar+0x10c>)
 8003e5e:	881b      	ldrh	r3, [r3, #0]
 8003e60:	461a      	mov	r2, r3
 8003e62:	793b      	ldrb	r3, [r7, #4]
 8003e64:	4413      	add	r3, r2
 8003e66:	2b80      	cmp	r3, #128	@ 0x80
 8003e68:	dc06      	bgt.n	8003e78 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8003e6a:	4b35      	ldr	r3, [pc, #212]	@ (8003f40 <ssd1306_WriteChar+0x10c>)
 8003e6c:	885b      	ldrh	r3, [r3, #2]
 8003e6e:	461a      	mov	r2, r3
 8003e70:	797b      	ldrb	r3, [r7, #5]
 8003e72:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8003e74:	2b40      	cmp	r3, #64	@ 0x40
 8003e76:	dd01      	ble.n	8003e7c <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8003e78:	2300      	movs	r3, #0
 8003e7a:	e05c      	b.n	8003f36 <ssd1306_WriteChar+0x102>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	61fb      	str	r3, [r7, #28]
 8003e80:	e04c      	b.n	8003f1c <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8003e82:	68ba      	ldr	r2, [r7, #8]
 8003e84:	7bfb      	ldrb	r3, [r7, #15]
 8003e86:	3b20      	subs	r3, #32
 8003e88:	7979      	ldrb	r1, [r7, #5]
 8003e8a:	fb01 f303 	mul.w	r3, r1, r3
 8003e8e:	4619      	mov	r1, r3
 8003e90:	69fb      	ldr	r3, [r7, #28]
 8003e92:	440b      	add	r3, r1
 8003e94:	005b      	lsls	r3, r3, #1
 8003e96:	4413      	add	r3, r2
 8003e98:	881b      	ldrh	r3, [r3, #0]
 8003e9a:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	61bb      	str	r3, [r7, #24]
 8003ea0:	e034      	b.n	8003f0c <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8003ea2:	697a      	ldr	r2, [r7, #20]
 8003ea4:	69bb      	ldr	r3, [r7, #24]
 8003ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eaa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d012      	beq.n	8003ed8 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8003eb2:	4b23      	ldr	r3, [pc, #140]	@ (8003f40 <ssd1306_WriteChar+0x10c>)
 8003eb4:	881b      	ldrh	r3, [r3, #0]
 8003eb6:	b2da      	uxtb	r2, r3
 8003eb8:	69bb      	ldr	r3, [r7, #24]
 8003eba:	b2db      	uxtb	r3, r3
 8003ebc:	4413      	add	r3, r2
 8003ebe:	b2d8      	uxtb	r0, r3
 8003ec0:	4b1f      	ldr	r3, [pc, #124]	@ (8003f40 <ssd1306_WriteChar+0x10c>)
 8003ec2:	885b      	ldrh	r3, [r3, #2]
 8003ec4:	b2da      	uxtb	r2, r3
 8003ec6:	69fb      	ldr	r3, [r7, #28]
 8003ec8:	b2db      	uxtb	r3, r3
 8003eca:	4413      	add	r3, r2
 8003ecc:	b2db      	uxtb	r3, r3
 8003ece:	7bba      	ldrb	r2, [r7, #14]
 8003ed0:	4619      	mov	r1, r3
 8003ed2:	f7ff ff5b 	bl	8003d8c <ssd1306_DrawPixel>
 8003ed6:	e016      	b.n	8003f06 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8003ed8:	4b19      	ldr	r3, [pc, #100]	@ (8003f40 <ssd1306_WriteChar+0x10c>)
 8003eda:	881b      	ldrh	r3, [r3, #0]
 8003edc:	b2da      	uxtb	r2, r3
 8003ede:	69bb      	ldr	r3, [r7, #24]
 8003ee0:	b2db      	uxtb	r3, r3
 8003ee2:	4413      	add	r3, r2
 8003ee4:	b2d8      	uxtb	r0, r3
 8003ee6:	4b16      	ldr	r3, [pc, #88]	@ (8003f40 <ssd1306_WriteChar+0x10c>)
 8003ee8:	885b      	ldrh	r3, [r3, #2]
 8003eea:	b2da      	uxtb	r2, r3
 8003eec:	69fb      	ldr	r3, [r7, #28]
 8003eee:	b2db      	uxtb	r3, r3
 8003ef0:	4413      	add	r3, r2
 8003ef2:	b2d9      	uxtb	r1, r3
 8003ef4:	7bbb      	ldrb	r3, [r7, #14]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	bf0c      	ite	eq
 8003efa:	2301      	moveq	r3, #1
 8003efc:	2300      	movne	r3, #0
 8003efe:	b2db      	uxtb	r3, r3
 8003f00:	461a      	mov	r2, r3
 8003f02:	f7ff ff43 	bl	8003d8c <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8003f06:	69bb      	ldr	r3, [r7, #24]
 8003f08:	3301      	adds	r3, #1
 8003f0a:	61bb      	str	r3, [r7, #24]
 8003f0c:	793b      	ldrb	r3, [r7, #4]
 8003f0e:	461a      	mov	r2, r3
 8003f10:	69bb      	ldr	r3, [r7, #24]
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d3c5      	bcc.n	8003ea2 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8003f16:	69fb      	ldr	r3, [r7, #28]
 8003f18:	3301      	adds	r3, #1
 8003f1a:	61fb      	str	r3, [r7, #28]
 8003f1c:	797b      	ldrb	r3, [r7, #5]
 8003f1e:	461a      	mov	r2, r3
 8003f20:	69fb      	ldr	r3, [r7, #28]
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d3ad      	bcc.n	8003e82 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8003f26:	4b06      	ldr	r3, [pc, #24]	@ (8003f40 <ssd1306_WriteChar+0x10c>)
 8003f28:	881b      	ldrh	r3, [r3, #0]
 8003f2a:	793a      	ldrb	r2, [r7, #4]
 8003f2c:	4413      	add	r3, r2
 8003f2e:	b29a      	uxth	r2, r3
 8003f30:	4b03      	ldr	r3, [pc, #12]	@ (8003f40 <ssd1306_WriteChar+0x10c>)
 8003f32:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8003f34:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f36:	4618      	mov	r0, r3
 8003f38:	3724      	adds	r7, #36	@ 0x24
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd90      	pop	{r4, r7, pc}
 8003f3e:	bf00      	nop
 8003f40:	200011e4 	.word	0x200011e4

08003f44 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b084      	sub	sp, #16
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	60f8      	str	r0, [r7, #12]
 8003f4c:	1d38      	adds	r0, r7, #4
 8003f4e:	e880 0006 	stmia.w	r0, {r1, r2}
 8003f52:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 8003f54:	e012      	b.n	8003f7c <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	7818      	ldrb	r0, [r3, #0]
 8003f5a:	78fb      	ldrb	r3, [r7, #3]
 8003f5c:	1d3a      	adds	r2, r7, #4
 8003f5e:	ca06      	ldmia	r2, {r1, r2}
 8003f60:	f7ff ff68 	bl	8003e34 <ssd1306_WriteChar>
 8003f64:	4603      	mov	r3, r0
 8003f66:	461a      	mov	r2, r3
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	781b      	ldrb	r3, [r3, #0]
 8003f6c:	429a      	cmp	r2, r3
 8003f6e:	d002      	beq.n	8003f76 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	781b      	ldrb	r3, [r3, #0]
 8003f74:	e008      	b.n	8003f88 <ssd1306_WriteString+0x44>
        }
        str++;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	3301      	adds	r3, #1
 8003f7a:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	781b      	ldrb	r3, [r3, #0]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d1e8      	bne.n	8003f56 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	781b      	ldrb	r3, [r3, #0]
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	3710      	adds	r7, #16
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}

08003f90 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8003f90:	b480      	push	{r7}
 8003f92:	b083      	sub	sp, #12
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	4603      	mov	r3, r0
 8003f98:	460a      	mov	r2, r1
 8003f9a:	71fb      	strb	r3, [r7, #7]
 8003f9c:	4613      	mov	r3, r2
 8003f9e:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8003fa0:	79fb      	ldrb	r3, [r7, #7]
 8003fa2:	b29a      	uxth	r2, r3
 8003fa4:	4b05      	ldr	r3, [pc, #20]	@ (8003fbc <ssd1306_SetCursor+0x2c>)
 8003fa6:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8003fa8:	79bb      	ldrb	r3, [r7, #6]
 8003faa:	b29a      	uxth	r2, r3
 8003fac:	4b03      	ldr	r3, [pc, #12]	@ (8003fbc <ssd1306_SetCursor+0x2c>)
 8003fae:	805a      	strh	r2, [r3, #2]
}
 8003fb0:	bf00      	nop
 8003fb2:	370c      	adds	r7, #12
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fba:	4770      	bx	lr
 8003fbc:	200011e4 	.word	0x200011e4

08003fc0 <ssd1306_Line>:

/* Draw line by Bresenhem's algorithm */
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8003fc0:	b590      	push	{r4, r7, lr}
 8003fc2:	b089      	sub	sp, #36	@ 0x24
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	4604      	mov	r4, r0
 8003fc8:	4608      	mov	r0, r1
 8003fca:	4611      	mov	r1, r2
 8003fcc:	461a      	mov	r2, r3
 8003fce:	4623      	mov	r3, r4
 8003fd0:	71fb      	strb	r3, [r7, #7]
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	71bb      	strb	r3, [r7, #6]
 8003fd6:	460b      	mov	r3, r1
 8003fd8:	717b      	strb	r3, [r7, #5]
 8003fda:	4613      	mov	r3, r2
 8003fdc:	713b      	strb	r3, [r7, #4]
    int32_t deltaX = abs(x2 - x1);
 8003fde:	797a      	ldrb	r2, [r7, #5]
 8003fe0:	79fb      	ldrb	r3, [r7, #7]
 8003fe2:	1ad3      	subs	r3, r2, r3
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	bfb8      	it	lt
 8003fe8:	425b      	neglt	r3, r3
 8003fea:	61bb      	str	r3, [r7, #24]
    int32_t deltaY = abs(y2 - y1);
 8003fec:	793a      	ldrb	r2, [r7, #4]
 8003fee:	79bb      	ldrb	r3, [r7, #6]
 8003ff0:	1ad3      	subs	r3, r2, r3
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	bfb8      	it	lt
 8003ff6:	425b      	neglt	r3, r3
 8003ff8:	617b      	str	r3, [r7, #20]
    int32_t signX = ((x1 < x2) ? 1 : -1);
 8003ffa:	79fa      	ldrb	r2, [r7, #7]
 8003ffc:	797b      	ldrb	r3, [r7, #5]
 8003ffe:	429a      	cmp	r2, r3
 8004000:	d201      	bcs.n	8004006 <ssd1306_Line+0x46>
 8004002:	2301      	movs	r3, #1
 8004004:	e001      	b.n	800400a <ssd1306_Line+0x4a>
 8004006:	f04f 33ff 	mov.w	r3, #4294967295
 800400a:	613b      	str	r3, [r7, #16]
    int32_t signY = ((y1 < y2) ? 1 : -1);
 800400c:	79ba      	ldrb	r2, [r7, #6]
 800400e:	793b      	ldrb	r3, [r7, #4]
 8004010:	429a      	cmp	r2, r3
 8004012:	d201      	bcs.n	8004018 <ssd1306_Line+0x58>
 8004014:	2301      	movs	r3, #1
 8004016:	e001      	b.n	800401c <ssd1306_Line+0x5c>
 8004018:	f04f 33ff 	mov.w	r3, #4294967295
 800401c:	60fb      	str	r3, [r7, #12]
    int32_t error = deltaX - deltaY;
 800401e:	69ba      	ldr	r2, [r7, #24]
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	1ad3      	subs	r3, r2, r3
 8004024:	61fb      	str	r3, [r7, #28]
    int32_t error2;
    
    ssd1306_DrawPixel(x2, y2, color);
 8004026:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 800402a:	7939      	ldrb	r1, [r7, #4]
 800402c:	797b      	ldrb	r3, [r7, #5]
 800402e:	4618      	mov	r0, r3
 8004030:	f7ff feac 	bl	8003d8c <ssd1306_DrawPixel>

    while((x1 != x2) || (y1 != y2)) {
 8004034:	e024      	b.n	8004080 <ssd1306_Line+0xc0>
        ssd1306_DrawPixel(x1, y1, color);
 8004036:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 800403a:	79b9      	ldrb	r1, [r7, #6]
 800403c:	79fb      	ldrb	r3, [r7, #7]
 800403e:	4618      	mov	r0, r3
 8004040:	f7ff fea4 	bl	8003d8c <ssd1306_DrawPixel>
        error2 = error * 2;
 8004044:	69fb      	ldr	r3, [r7, #28]
 8004046:	005b      	lsls	r3, r3, #1
 8004048:	60bb      	str	r3, [r7, #8]
        if(error2 > -deltaY) {
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	425b      	negs	r3, r3
 800404e:	68ba      	ldr	r2, [r7, #8]
 8004050:	429a      	cmp	r2, r3
 8004052:	dd08      	ble.n	8004066 <ssd1306_Line+0xa6>
            error -= deltaY;
 8004054:	69fa      	ldr	r2, [r7, #28]
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	1ad3      	subs	r3, r2, r3
 800405a:	61fb      	str	r3, [r7, #28]
            x1 += signX;
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	b2da      	uxtb	r2, r3
 8004060:	79fb      	ldrb	r3, [r7, #7]
 8004062:	4413      	add	r3, r2
 8004064:	71fb      	strb	r3, [r7, #7]
        }
        
        if(error2 < deltaX) {
 8004066:	68ba      	ldr	r2, [r7, #8]
 8004068:	69bb      	ldr	r3, [r7, #24]
 800406a:	429a      	cmp	r2, r3
 800406c:	da08      	bge.n	8004080 <ssd1306_Line+0xc0>
            error += deltaX;
 800406e:	69fa      	ldr	r2, [r7, #28]
 8004070:	69bb      	ldr	r3, [r7, #24]
 8004072:	4413      	add	r3, r2
 8004074:	61fb      	str	r3, [r7, #28]
            y1 += signY;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	b2da      	uxtb	r2, r3
 800407a:	79bb      	ldrb	r3, [r7, #6]
 800407c:	4413      	add	r3, r2
 800407e:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2)) {
 8004080:	79fa      	ldrb	r2, [r7, #7]
 8004082:	797b      	ldrb	r3, [r7, #5]
 8004084:	429a      	cmp	r2, r3
 8004086:	d1d6      	bne.n	8004036 <ssd1306_Line+0x76>
 8004088:	79ba      	ldrb	r2, [r7, #6]
 800408a:	793b      	ldrb	r3, [r7, #4]
 800408c:	429a      	cmp	r2, r3
 800408e:	d1d2      	bne.n	8004036 <ssd1306_Line+0x76>
        }
    }
    return;
 8004090:	bf00      	nop
}
 8004092:	3724      	adds	r7, #36	@ 0x24
 8004094:	46bd      	mov	sp, r7
 8004096:	bd90      	pop	{r4, r7, pc}

08004098 <ssd1306_DrawRectangle>:

    return;
}

/* Draw a rectangle */
void ssd1306_DrawRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8004098:	b590      	push	{r4, r7, lr}
 800409a:	b085      	sub	sp, #20
 800409c:	af02      	add	r7, sp, #8
 800409e:	4604      	mov	r4, r0
 80040a0:	4608      	mov	r0, r1
 80040a2:	4611      	mov	r1, r2
 80040a4:	461a      	mov	r2, r3
 80040a6:	4623      	mov	r3, r4
 80040a8:	71fb      	strb	r3, [r7, #7]
 80040aa:	4603      	mov	r3, r0
 80040ac:	71bb      	strb	r3, [r7, #6]
 80040ae:	460b      	mov	r3, r1
 80040b0:	717b      	strb	r3, [r7, #5]
 80040b2:	4613      	mov	r3, r2
 80040b4:	713b      	strb	r3, [r7, #4]
    ssd1306_Line(x1,y1,x2,y1,color);
 80040b6:	79bc      	ldrb	r4, [r7, #6]
 80040b8:	797a      	ldrb	r2, [r7, #5]
 80040ba:	79b9      	ldrb	r1, [r7, #6]
 80040bc:	79f8      	ldrb	r0, [r7, #7]
 80040be:	7e3b      	ldrb	r3, [r7, #24]
 80040c0:	9300      	str	r3, [sp, #0]
 80040c2:	4623      	mov	r3, r4
 80040c4:	f7ff ff7c 	bl	8003fc0 <ssd1306_Line>
    ssd1306_Line(x2,y1,x2,y2,color);
 80040c8:	793c      	ldrb	r4, [r7, #4]
 80040ca:	797a      	ldrb	r2, [r7, #5]
 80040cc:	79b9      	ldrb	r1, [r7, #6]
 80040ce:	7978      	ldrb	r0, [r7, #5]
 80040d0:	7e3b      	ldrb	r3, [r7, #24]
 80040d2:	9300      	str	r3, [sp, #0]
 80040d4:	4623      	mov	r3, r4
 80040d6:	f7ff ff73 	bl	8003fc0 <ssd1306_Line>
    ssd1306_Line(x2,y2,x1,y2,color);
 80040da:	793c      	ldrb	r4, [r7, #4]
 80040dc:	79fa      	ldrb	r2, [r7, #7]
 80040de:	7939      	ldrb	r1, [r7, #4]
 80040e0:	7978      	ldrb	r0, [r7, #5]
 80040e2:	7e3b      	ldrb	r3, [r7, #24]
 80040e4:	9300      	str	r3, [sp, #0]
 80040e6:	4623      	mov	r3, r4
 80040e8:	f7ff ff6a 	bl	8003fc0 <ssd1306_Line>
    ssd1306_Line(x1,y2,x1,y1,color);
 80040ec:	79bc      	ldrb	r4, [r7, #6]
 80040ee:	79fa      	ldrb	r2, [r7, #7]
 80040f0:	7939      	ldrb	r1, [r7, #4]
 80040f2:	79f8      	ldrb	r0, [r7, #7]
 80040f4:	7e3b      	ldrb	r3, [r7, #24]
 80040f6:	9300      	str	r3, [sp, #0]
 80040f8:	4623      	mov	r3, r4
 80040fa:	f7ff ff61 	bl	8003fc0 <ssd1306_Line>

    return;
 80040fe:	bf00      	nop
}
 8004100:	370c      	adds	r7, #12
 8004102:	46bd      	mov	sp, r7
 8004104:	bd90      	pop	{r4, r7, pc}

08004106 <ssd1306_FillRectangle>:

/* Draw a filled rectangle */
void ssd1306_FillRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8004106:	b590      	push	{r4, r7, lr}
 8004108:	b085      	sub	sp, #20
 800410a:	af00      	add	r7, sp, #0
 800410c:	4604      	mov	r4, r0
 800410e:	4608      	mov	r0, r1
 8004110:	4611      	mov	r1, r2
 8004112:	461a      	mov	r2, r3
 8004114:	4623      	mov	r3, r4
 8004116:	71fb      	strb	r3, [r7, #7]
 8004118:	4603      	mov	r3, r0
 800411a:	71bb      	strb	r3, [r7, #6]
 800411c:	460b      	mov	r3, r1
 800411e:	717b      	strb	r3, [r7, #5]
 8004120:	4613      	mov	r3, r2
 8004122:	713b      	strb	r3, [r7, #4]
    uint8_t x_start = ((x1<=x2) ? x1 : x2);
 8004124:	79fa      	ldrb	r2, [r7, #7]
 8004126:	797b      	ldrb	r3, [r7, #5]
 8004128:	4293      	cmp	r3, r2
 800412a:	bf28      	it	cs
 800412c:	4613      	movcs	r3, r2
 800412e:	737b      	strb	r3, [r7, #13]
    uint8_t x_end   = ((x1<=x2) ? x2 : x1);
 8004130:	797a      	ldrb	r2, [r7, #5]
 8004132:	79fb      	ldrb	r3, [r7, #7]
 8004134:	4293      	cmp	r3, r2
 8004136:	bf38      	it	cc
 8004138:	4613      	movcc	r3, r2
 800413a:	733b      	strb	r3, [r7, #12]
    uint8_t y_start = ((y1<=y2) ? y1 : y2);
 800413c:	79ba      	ldrb	r2, [r7, #6]
 800413e:	793b      	ldrb	r3, [r7, #4]
 8004140:	4293      	cmp	r3, r2
 8004142:	bf28      	it	cs
 8004144:	4613      	movcs	r3, r2
 8004146:	72fb      	strb	r3, [r7, #11]
    uint8_t y_end   = ((y1<=y2) ? y2 : y1);
 8004148:	793a      	ldrb	r2, [r7, #4]
 800414a:	79bb      	ldrb	r3, [r7, #6]
 800414c:	4293      	cmp	r3, r2
 800414e:	bf38      	it	cc
 8004150:	4613      	movcc	r3, r2
 8004152:	72bb      	strb	r3, [r7, #10]

    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 8004154:	7afb      	ldrb	r3, [r7, #11]
 8004156:	73fb      	strb	r3, [r7, #15]
 8004158:	e017      	b.n	800418a <ssd1306_FillRectangle+0x84>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 800415a:	7b7b      	ldrb	r3, [r7, #13]
 800415c:	73bb      	strb	r3, [r7, #14]
 800415e:	e009      	b.n	8004174 <ssd1306_FillRectangle+0x6e>
            ssd1306_DrawPixel(x, y, color);
 8004160:	f897 2020 	ldrb.w	r2, [r7, #32]
 8004164:	7bf9      	ldrb	r1, [r7, #15]
 8004166:	7bbb      	ldrb	r3, [r7, #14]
 8004168:	4618      	mov	r0, r3
 800416a:	f7ff fe0f 	bl	8003d8c <ssd1306_DrawPixel>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 800416e:	7bbb      	ldrb	r3, [r7, #14]
 8004170:	3301      	adds	r3, #1
 8004172:	73bb      	strb	r3, [r7, #14]
 8004174:	7bba      	ldrb	r2, [r7, #14]
 8004176:	7b3b      	ldrb	r3, [r7, #12]
 8004178:	429a      	cmp	r2, r3
 800417a:	d803      	bhi.n	8004184 <ssd1306_FillRectangle+0x7e>
 800417c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004180:	2b00      	cmp	r3, #0
 8004182:	daed      	bge.n	8004160 <ssd1306_FillRectangle+0x5a>
    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 8004184:	7bfb      	ldrb	r3, [r7, #15]
 8004186:	3301      	adds	r3, #1
 8004188:	73fb      	strb	r3, [r7, #15]
 800418a:	7bfa      	ldrb	r2, [r7, #15]
 800418c:	7abb      	ldrb	r3, [r7, #10]
 800418e:	429a      	cmp	r2, r3
 8004190:	d803      	bhi.n	800419a <ssd1306_FillRectangle+0x94>
 8004192:	7bfb      	ldrb	r3, [r7, #15]
 8004194:	2b3f      	cmp	r3, #63	@ 0x3f
 8004196:	d9e0      	bls.n	800415a <ssd1306_FillRectangle+0x54>
        }
    }
    return;
 8004198:	bf00      	nop
 800419a:	bf00      	nop
}
 800419c:	3714      	adds	r7, #20
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd90      	pop	{r4, r7, pc}

080041a2 <ssd1306_DrawBitmap>:

/* Draw a bitmap */
void ssd1306_DrawBitmap(uint8_t x, uint8_t y, const unsigned char* bitmap, uint8_t w, uint8_t h, SSD1306_COLOR color) {
 80041a2:	b580      	push	{r7, lr}
 80041a4:	b084      	sub	sp, #16
 80041a6:	af00      	add	r7, sp, #0
 80041a8:	603a      	str	r2, [r7, #0]
 80041aa:	461a      	mov	r2, r3
 80041ac:	4603      	mov	r3, r0
 80041ae:	71fb      	strb	r3, [r7, #7]
 80041b0:	460b      	mov	r3, r1
 80041b2:	71bb      	strb	r3, [r7, #6]
 80041b4:	4613      	mov	r3, r2
 80041b6:	717b      	strb	r3, [r7, #5]
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 80041b8:	797b      	ldrb	r3, [r7, #5]
 80041ba:	3307      	adds	r3, #7
 80041bc:	2b00      	cmp	r3, #0
 80041be:	da00      	bge.n	80041c2 <ssd1306_DrawBitmap+0x20>
 80041c0:	3307      	adds	r3, #7
 80041c2:	10db      	asrs	r3, r3, #3
 80041c4:	817b      	strh	r3, [r7, #10]
    uint8_t byte = 0;
 80041c6:	2300      	movs	r3, #0
 80041c8:	73fb      	strb	r3, [r7, #15]

    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80041ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	db3e      	blt.n	8004250 <ssd1306_DrawBitmap+0xae>
 80041d2:	79bb      	ldrb	r3, [r7, #6]
 80041d4:	2b3f      	cmp	r3, #63	@ 0x3f
 80041d6:	d83b      	bhi.n	8004250 <ssd1306_DrawBitmap+0xae>
        return;
    }

    for (uint8_t j = 0; j < h; j++, y++) {
 80041d8:	2300      	movs	r3, #0
 80041da:	73bb      	strb	r3, [r7, #14]
 80041dc:	e033      	b.n	8004246 <ssd1306_DrawBitmap+0xa4>
        for (uint8_t i = 0; i < w; i++) {
 80041de:	2300      	movs	r3, #0
 80041e0:	737b      	strb	r3, [r7, #13]
 80041e2:	e026      	b.n	8004232 <ssd1306_DrawBitmap+0x90>
            if (i & 7) {
 80041e4:	7b7b      	ldrb	r3, [r7, #13]
 80041e6:	f003 0307 	and.w	r3, r3, #7
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d003      	beq.n	80041f6 <ssd1306_DrawBitmap+0x54>
                byte <<= 1;
 80041ee:	7bfb      	ldrb	r3, [r7, #15]
 80041f0:	005b      	lsls	r3, r3, #1
 80041f2:	73fb      	strb	r3, [r7, #15]
 80041f4:	e00d      	b.n	8004212 <ssd1306_DrawBitmap+0x70>
            } else {
                byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 80041f6:	7bbb      	ldrb	r3, [r7, #14]
 80041f8:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80041fc:	fb02 f303 	mul.w	r3, r2, r3
 8004200:	7b7a      	ldrb	r2, [r7, #13]
 8004202:	08d2      	lsrs	r2, r2, #3
 8004204:	b2d2      	uxtb	r2, r2
 8004206:	4413      	add	r3, r2
 8004208:	461a      	mov	r2, r3
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	4413      	add	r3, r2
 800420e:	781b      	ldrb	r3, [r3, #0]
 8004210:	73fb      	strb	r3, [r7, #15]
            }

            if (byte & 0x80) {
 8004212:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004216:	2b00      	cmp	r3, #0
 8004218:	da08      	bge.n	800422c <ssd1306_DrawBitmap+0x8a>
                ssd1306_DrawPixel(x + i, y, color);
 800421a:	79fa      	ldrb	r2, [r7, #7]
 800421c:	7b7b      	ldrb	r3, [r7, #13]
 800421e:	4413      	add	r3, r2
 8004220:	b2db      	uxtb	r3, r3
 8004222:	7f3a      	ldrb	r2, [r7, #28]
 8004224:	79b9      	ldrb	r1, [r7, #6]
 8004226:	4618      	mov	r0, r3
 8004228:	f7ff fdb0 	bl	8003d8c <ssd1306_DrawPixel>
        for (uint8_t i = 0; i < w; i++) {
 800422c:	7b7b      	ldrb	r3, [r7, #13]
 800422e:	3301      	adds	r3, #1
 8004230:	737b      	strb	r3, [r7, #13]
 8004232:	7b7a      	ldrb	r2, [r7, #13]
 8004234:	797b      	ldrb	r3, [r7, #5]
 8004236:	429a      	cmp	r2, r3
 8004238:	d3d4      	bcc.n	80041e4 <ssd1306_DrawBitmap+0x42>
    for (uint8_t j = 0; j < h; j++, y++) {
 800423a:	7bbb      	ldrb	r3, [r7, #14]
 800423c:	3301      	adds	r3, #1
 800423e:	73bb      	strb	r3, [r7, #14]
 8004240:	79bb      	ldrb	r3, [r7, #6]
 8004242:	3301      	adds	r3, #1
 8004244:	71bb      	strb	r3, [r7, #6]
 8004246:	7bba      	ldrb	r2, [r7, #14]
 8004248:	7e3b      	ldrb	r3, [r7, #24]
 800424a:	429a      	cmp	r2, r3
 800424c:	d3c7      	bcc.n	80041de <ssd1306_DrawBitmap+0x3c>
            }
        }
    }
    return;
 800424e:	e000      	b.n	8004252 <ssd1306_DrawBitmap+0xb0>
        return;
 8004250:	bf00      	nop
}
 8004252:	3710      	adds	r7, #16
 8004254:	46bd      	mov	sp, r7
 8004256:	bd80      	pop	{r7, pc}

08004258 <ssd1306_SetContrast>:

void ssd1306_SetContrast(const uint8_t value) {
 8004258:	b580      	push	{r7, lr}
 800425a:	b084      	sub	sp, #16
 800425c:	af00      	add	r7, sp, #0
 800425e:	4603      	mov	r3, r0
 8004260:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8004262:	2381      	movs	r3, #129	@ 0x81
 8004264:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8004266:	7bfb      	ldrb	r3, [r7, #15]
 8004268:	4618      	mov	r0, r3
 800426a:	f7ff fcb3 	bl	8003bd4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 800426e:	79fb      	ldrb	r3, [r7, #7]
 8004270:	4618      	mov	r0, r3
 8004272:	f7ff fcaf 	bl	8003bd4 <ssd1306_WriteCommand>
}
 8004276:	bf00      	nop
 8004278:	3710      	adds	r7, #16
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}
	...

08004280 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8004280:	b580      	push	{r7, lr}
 8004282:	b084      	sub	sp, #16
 8004284:	af00      	add	r7, sp, #0
 8004286:	4603      	mov	r3, r0
 8004288:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 800428a:	79fb      	ldrb	r3, [r7, #7]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d005      	beq.n	800429c <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8004290:	23af      	movs	r3, #175	@ 0xaf
 8004292:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8004294:	4b08      	ldr	r3, [pc, #32]	@ (80042b8 <ssd1306_SetDisplayOn+0x38>)
 8004296:	2201      	movs	r2, #1
 8004298:	715a      	strb	r2, [r3, #5]
 800429a:	e004      	b.n	80042a6 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 800429c:	23ae      	movs	r3, #174	@ 0xae
 800429e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 80042a0:	4b05      	ldr	r3, [pc, #20]	@ (80042b8 <ssd1306_SetDisplayOn+0x38>)
 80042a2:	2200      	movs	r2, #0
 80042a4:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 80042a6:	7bfb      	ldrb	r3, [r7, #15]
 80042a8:	4618      	mov	r0, r3
 80042aa:	f7ff fc93 	bl	8003bd4 <ssd1306_WriteCommand>
}
 80042ae:	bf00      	nop
 80042b0:	3710      	adds	r7, #16
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}
 80042b6:	bf00      	nop
 80042b8:	200011e4 	.word	0x200011e4
 80042bc:	00000000 	.word	0x00000000

080042c0 <batterygauge>:



}

void batterygauge(float vbat,int x, int y,int currentsquare){
 80042c0:	b590      	push	{r4, r7, lr}
 80042c2:	b087      	sub	sp, #28
 80042c4:	af02      	add	r7, sp, #8
 80042c6:	ed87 0a03 	vstr	s0, [r7, #12]
 80042ca:	60b8      	str	r0, [r7, #8]
 80042cc:	6079      	str	r1, [r7, #4]
 80042ce:	603a      	str	r2, [r7, #0]
	ssd1306_Line(x+15,y+1,x+15,y+5, White);
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	b2db      	uxtb	r3, r3
 80042d4:	330f      	adds	r3, #15
 80042d6:	b2d8      	uxtb	r0, r3
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	b2db      	uxtb	r3, r3
 80042dc:	3301      	adds	r3, #1
 80042de:	b2d9      	uxtb	r1, r3
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	b2db      	uxtb	r3, r3
 80042e4:	330f      	adds	r3, #15
 80042e6:	b2da      	uxtb	r2, r3
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	b2db      	uxtb	r3, r3
 80042ec:	3305      	adds	r3, #5
 80042ee:	b2db      	uxtb	r3, r3
 80042f0:	2401      	movs	r4, #1
 80042f2:	9400      	str	r4, [sp, #0]
 80042f4:	f7ff fe64 	bl	8003fc0 <ssd1306_Line>
	ssd1306_Line(x+16,y+1,x+16,y+5, White);
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	b2db      	uxtb	r3, r3
 80042fc:	3310      	adds	r3, #16
 80042fe:	b2d8      	uxtb	r0, r3
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	b2db      	uxtb	r3, r3
 8004304:	3301      	adds	r3, #1
 8004306:	b2d9      	uxtb	r1, r3
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	b2db      	uxtb	r3, r3
 800430c:	3310      	adds	r3, #16
 800430e:	b2da      	uxtb	r2, r3
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	b2db      	uxtb	r3, r3
 8004314:	3305      	adds	r3, #5
 8004316:	b2db      	uxtb	r3, r3
 8004318:	2401      	movs	r4, #1
 800431a:	9400      	str	r4, [sp, #0]
 800431c:	f7ff fe50 	bl	8003fc0 <ssd1306_Line>
	ssd1306_DrawRectangle(x, y, x+14, y+6, White);
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	b2d8      	uxtb	r0, r3
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	b2d9      	uxtb	r1, r3
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	b2db      	uxtb	r3, r3
 800432c:	330e      	adds	r3, #14
 800432e:	b2da      	uxtb	r2, r3
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	b2db      	uxtb	r3, r3
 8004334:	3306      	adds	r3, #6
 8004336:	b2db      	uxtb	r3, r3
 8004338:	2401      	movs	r4, #1
 800433a:	9400      	str	r4, [sp, #0]
 800433c:	f7ff feac 	bl	8004098 <ssd1306_DrawRectangle>
	if(vbat<=3.7){
 8004340:	68f8      	ldr	r0, [r7, #12]
 8004342:	f7fc f8d9 	bl	80004f8 <__aeabi_f2d>
 8004346:	a396      	add	r3, pc, #600	@ (adr r3, 80045a0 <batterygauge+0x2e0>)
 8004348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800434c:	f7fc fba8 	bl	8000aa0 <__aeabi_dcmple>
 8004350:	4603      	mov	r3, r0
 8004352:	2b00      	cmp	r3, #0
 8004354:	d02a      	beq.n	80043ac <batterygauge+0xec>
		ssd1306_DrawRectangle(x+2, y+2, x+3, y+4, White);
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	b2db      	uxtb	r3, r3
 800435a:	3302      	adds	r3, #2
 800435c:	b2d8      	uxtb	r0, r3
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	b2db      	uxtb	r3, r3
 8004362:	3302      	adds	r3, #2
 8004364:	b2d9      	uxtb	r1, r3
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	b2db      	uxtb	r3, r3
 800436a:	3303      	adds	r3, #3
 800436c:	b2da      	uxtb	r2, r3
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	b2db      	uxtb	r3, r3
 8004372:	3304      	adds	r3, #4
 8004374:	b2db      	uxtb	r3, r3
 8004376:	2401      	movs	r4, #1
 8004378:	9400      	str	r4, [sp, #0]
 800437a:	f7ff fe8d 	bl	8004098 <ssd1306_DrawRectangle>
		if(currentsquare==1){
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	2b01      	cmp	r3, #1
 8004382:	d113      	bne.n	80043ac <batterygauge+0xec>
			ssd1306_DrawRectangle(x+2, y+2, x+3, y+4, White);
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	b2db      	uxtb	r3, r3
 8004388:	3302      	adds	r3, #2
 800438a:	b2d8      	uxtb	r0, r3
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	b2db      	uxtb	r3, r3
 8004390:	3302      	adds	r3, #2
 8004392:	b2d9      	uxtb	r1, r3
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	b2db      	uxtb	r3, r3
 8004398:	3303      	adds	r3, #3
 800439a:	b2da      	uxtb	r2, r3
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	b2db      	uxtb	r3, r3
 80043a0:	3304      	adds	r3, #4
 80043a2:	b2db      	uxtb	r3, r3
 80043a4:	2401      	movs	r4, #1
 80043a6:	9400      	str	r4, [sp, #0]
 80043a8:	f7ff fe76 	bl	8004098 <ssd1306_DrawRectangle>
		}
		else{

		}
	}
	if(vbat>3.7 && vbat<= 3.9){
 80043ac:	68f8      	ldr	r0, [r7, #12]
 80043ae:	f7fc f8a3 	bl	80004f8 <__aeabi_f2d>
 80043b2:	a37b      	add	r3, pc, #492	@ (adr r3, 80045a0 <batterygauge+0x2e0>)
 80043b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043b8:	f7fc fb86 	bl	8000ac8 <__aeabi_dcmpgt>
 80043bc:	4603      	mov	r3, r0
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d035      	beq.n	800442e <batterygauge+0x16e>
 80043c2:	68f8      	ldr	r0, [r7, #12]
 80043c4:	f7fc f898 	bl	80004f8 <__aeabi_f2d>
 80043c8:	a377      	add	r3, pc, #476	@ (adr r3, 80045a8 <batterygauge+0x2e8>)
 80043ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043ce:	f7fc fb67 	bl	8000aa0 <__aeabi_dcmple>
 80043d2:	4603      	mov	r3, r0
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d02a      	beq.n	800442e <batterygauge+0x16e>
		ssd1306_DrawRectangle(x+2, y+2, x+3, y+4, White);
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	b2db      	uxtb	r3, r3
 80043dc:	3302      	adds	r3, #2
 80043de:	b2d8      	uxtb	r0, r3
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	b2db      	uxtb	r3, r3
 80043e4:	3302      	adds	r3, #2
 80043e6:	b2d9      	uxtb	r1, r3
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	b2db      	uxtb	r3, r3
 80043ec:	3303      	adds	r3, #3
 80043ee:	b2da      	uxtb	r2, r3
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	b2db      	uxtb	r3, r3
 80043f4:	3304      	adds	r3, #4
 80043f6:	b2db      	uxtb	r3, r3
 80043f8:	2401      	movs	r4, #1
 80043fa:	9400      	str	r4, [sp, #0]
 80043fc:	f7ff fe4c 	bl	8004098 <ssd1306_DrawRectangle>
		if(currentsquare==1){
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	2b01      	cmp	r3, #1
 8004404:	d113      	bne.n	800442e <batterygauge+0x16e>
			ssd1306_DrawRectangle(x+5, y+2, x+6, y+4, White);
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	b2db      	uxtb	r3, r3
 800440a:	3305      	adds	r3, #5
 800440c:	b2d8      	uxtb	r0, r3
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	b2db      	uxtb	r3, r3
 8004412:	3302      	adds	r3, #2
 8004414:	b2d9      	uxtb	r1, r3
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	b2db      	uxtb	r3, r3
 800441a:	3306      	adds	r3, #6
 800441c:	b2da      	uxtb	r2, r3
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	b2db      	uxtb	r3, r3
 8004422:	3304      	adds	r3, #4
 8004424:	b2db      	uxtb	r3, r3
 8004426:	2401      	movs	r4, #1
 8004428:	9400      	str	r4, [sp, #0]
 800442a:	f7ff fe35 	bl	8004098 <ssd1306_DrawRectangle>
				else{

				}

	}
	if(vbat>3.9 && vbat<=4.1){
 800442e:	68f8      	ldr	r0, [r7, #12]
 8004430:	f7fc f862 	bl	80004f8 <__aeabi_f2d>
 8004434:	a35c      	add	r3, pc, #368	@ (adr r3, 80045a8 <batterygauge+0x2e8>)
 8004436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800443a:	f7fc fb45 	bl	8000ac8 <__aeabi_dcmpgt>
 800443e:	4603      	mov	r3, r0
 8004440:	2b00      	cmp	r3, #0
 8004442:	d049      	beq.n	80044d8 <batterygauge+0x218>
 8004444:	68f8      	ldr	r0, [r7, #12]
 8004446:	f7fc f857 	bl	80004f8 <__aeabi_f2d>
 800444a:	a359      	add	r3, pc, #356	@ (adr r3, 80045b0 <batterygauge+0x2f0>)
 800444c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004450:	f7fc fb26 	bl	8000aa0 <__aeabi_dcmple>
 8004454:	4603      	mov	r3, r0
 8004456:	2b00      	cmp	r3, #0
 8004458:	d03e      	beq.n	80044d8 <batterygauge+0x218>
		ssd1306_DrawRectangle(x+2, y+2, x+3, y+4, White);
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	b2db      	uxtb	r3, r3
 800445e:	3302      	adds	r3, #2
 8004460:	b2d8      	uxtb	r0, r3
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	b2db      	uxtb	r3, r3
 8004466:	3302      	adds	r3, #2
 8004468:	b2d9      	uxtb	r1, r3
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	b2db      	uxtb	r3, r3
 800446e:	3303      	adds	r3, #3
 8004470:	b2da      	uxtb	r2, r3
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	b2db      	uxtb	r3, r3
 8004476:	3304      	adds	r3, #4
 8004478:	b2db      	uxtb	r3, r3
 800447a:	2401      	movs	r4, #1
 800447c:	9400      	str	r4, [sp, #0]
 800447e:	f7ff fe0b 	bl	8004098 <ssd1306_DrawRectangle>
		ssd1306_DrawRectangle(x+5, y+2, x+6, y+4, White);
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	b2db      	uxtb	r3, r3
 8004486:	3305      	adds	r3, #5
 8004488:	b2d8      	uxtb	r0, r3
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	b2db      	uxtb	r3, r3
 800448e:	3302      	adds	r3, #2
 8004490:	b2d9      	uxtb	r1, r3
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	b2db      	uxtb	r3, r3
 8004496:	3306      	adds	r3, #6
 8004498:	b2da      	uxtb	r2, r3
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	b2db      	uxtb	r3, r3
 800449e:	3304      	adds	r3, #4
 80044a0:	b2db      	uxtb	r3, r3
 80044a2:	2401      	movs	r4, #1
 80044a4:	9400      	str	r4, [sp, #0]
 80044a6:	f7ff fdf7 	bl	8004098 <ssd1306_DrawRectangle>

		if(currentsquare==1){
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	2b01      	cmp	r3, #1
 80044ae:	d113      	bne.n	80044d8 <batterygauge+0x218>
			ssd1306_DrawRectangle(x+8, y+2, x+9, y+4, White);
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	b2db      	uxtb	r3, r3
 80044b4:	3308      	adds	r3, #8
 80044b6:	b2d8      	uxtb	r0, r3
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	b2db      	uxtb	r3, r3
 80044bc:	3302      	adds	r3, #2
 80044be:	b2d9      	uxtb	r1, r3
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	b2db      	uxtb	r3, r3
 80044c4:	3309      	adds	r3, #9
 80044c6:	b2da      	uxtb	r2, r3
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	b2db      	uxtb	r3, r3
 80044cc:	3304      	adds	r3, #4
 80044ce:	b2db      	uxtb	r3, r3
 80044d0:	2401      	movs	r4, #1
 80044d2:	9400      	str	r4, [sp, #0]
 80044d4:	f7ff fde0 	bl	8004098 <ssd1306_DrawRectangle>
				else{

				}
	}

	if(vbat>4.1){
 80044d8:	68f8      	ldr	r0, [r7, #12]
 80044da:	f7fc f80d 	bl	80004f8 <__aeabi_f2d>
 80044de:	a334      	add	r3, pc, #208	@ (adr r3, 80045b0 <batterygauge+0x2f0>)
 80044e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044e4:	f7fc faf0 	bl	8000ac8 <__aeabi_dcmpgt>
 80044e8:	4603      	mov	r3, r0
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d100      	bne.n	80044f0 <batterygauge+0x230>
	}




}
 80044ee:	e052      	b.n	8004596 <batterygauge+0x2d6>
		ssd1306_DrawRectangle(x+2, y+2, x+3, y+4, White);
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	b2db      	uxtb	r3, r3
 80044f4:	3302      	adds	r3, #2
 80044f6:	b2d8      	uxtb	r0, r3
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	b2db      	uxtb	r3, r3
 80044fc:	3302      	adds	r3, #2
 80044fe:	b2d9      	uxtb	r1, r3
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	b2db      	uxtb	r3, r3
 8004504:	3303      	adds	r3, #3
 8004506:	b2da      	uxtb	r2, r3
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	b2db      	uxtb	r3, r3
 800450c:	3304      	adds	r3, #4
 800450e:	b2db      	uxtb	r3, r3
 8004510:	2401      	movs	r4, #1
 8004512:	9400      	str	r4, [sp, #0]
 8004514:	f7ff fdc0 	bl	8004098 <ssd1306_DrawRectangle>
		ssd1306_DrawRectangle(x+5, y+2, x+6, y+4, White);
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	b2db      	uxtb	r3, r3
 800451c:	3305      	adds	r3, #5
 800451e:	b2d8      	uxtb	r0, r3
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	b2db      	uxtb	r3, r3
 8004524:	3302      	adds	r3, #2
 8004526:	b2d9      	uxtb	r1, r3
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	b2db      	uxtb	r3, r3
 800452c:	3306      	adds	r3, #6
 800452e:	b2da      	uxtb	r2, r3
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	b2db      	uxtb	r3, r3
 8004534:	3304      	adds	r3, #4
 8004536:	b2db      	uxtb	r3, r3
 8004538:	2401      	movs	r4, #1
 800453a:	9400      	str	r4, [sp, #0]
 800453c:	f7ff fdac 	bl	8004098 <ssd1306_DrawRectangle>
		ssd1306_DrawRectangle(x+8, y+2, x+9, y+4, White);
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	b2db      	uxtb	r3, r3
 8004544:	3308      	adds	r3, #8
 8004546:	b2d8      	uxtb	r0, r3
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	b2db      	uxtb	r3, r3
 800454c:	3302      	adds	r3, #2
 800454e:	b2d9      	uxtb	r1, r3
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	b2db      	uxtb	r3, r3
 8004554:	3309      	adds	r3, #9
 8004556:	b2da      	uxtb	r2, r3
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	b2db      	uxtb	r3, r3
 800455c:	3304      	adds	r3, #4
 800455e:	b2db      	uxtb	r3, r3
 8004560:	2401      	movs	r4, #1
 8004562:	9400      	str	r4, [sp, #0]
 8004564:	f7ff fd98 	bl	8004098 <ssd1306_DrawRectangle>
		if(currentsquare==1){
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	2b01      	cmp	r3, #1
 800456c:	d113      	bne.n	8004596 <batterygauge+0x2d6>
			ssd1306_DrawRectangle(x+11, y+2, x+12, y+4, White);
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	b2db      	uxtb	r3, r3
 8004572:	330b      	adds	r3, #11
 8004574:	b2d8      	uxtb	r0, r3
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	b2db      	uxtb	r3, r3
 800457a:	3302      	adds	r3, #2
 800457c:	b2d9      	uxtb	r1, r3
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	b2db      	uxtb	r3, r3
 8004582:	330c      	adds	r3, #12
 8004584:	b2da      	uxtb	r2, r3
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	b2db      	uxtb	r3, r3
 800458a:	3304      	adds	r3, #4
 800458c:	b2db      	uxtb	r3, r3
 800458e:	2401      	movs	r4, #1
 8004590:	9400      	str	r4, [sp, #0]
 8004592:	f7ff fd81 	bl	8004098 <ssd1306_DrawRectangle>
}
 8004596:	bf00      	nop
 8004598:	3714      	adds	r7, #20
 800459a:	46bd      	mov	sp, r7
 800459c:	bd90      	pop	{r4, r7, pc}
 800459e:	bf00      	nop
 80045a0:	9999999a 	.word	0x9999999a
 80045a4:	400d9999 	.word	0x400d9999
 80045a8:	33333333 	.word	0x33333333
 80045ac:	400f3333 	.word	0x400f3333
 80045b0:	66666666 	.word	0x66666666
 80045b4:	40106666 	.word	0x40106666

080045b8 <percentage>:

void percentage(float percent){
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b084      	sub	sp, #16
 80045bc:	af02      	add	r7, sp, #8
 80045be:	ed87 0a01 	vstr	s0, [r7, #4]
	ssd1306_FillRectangle(32, 20, floor(0.72*percent+32), 36, White);
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	f7fb ff98 	bl	80004f8 <__aeabi_f2d>
 80045c8:	a329      	add	r3, pc, #164	@ (adr r3, 8004670 <percentage+0xb8>)
 80045ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045ce:	f7fb ffeb 	bl	80005a8 <__aeabi_dmul>
 80045d2:	4602      	mov	r2, r0
 80045d4:	460b      	mov	r3, r1
 80045d6:	4610      	mov	r0, r2
 80045d8:	4619      	mov	r1, r3
 80045da:	f04f 0200 	mov.w	r2, #0
 80045de:	4b20      	ldr	r3, [pc, #128]	@ (8004660 <percentage+0xa8>)
 80045e0:	f7fb fe2c 	bl	800023c <__adddf3>
 80045e4:	4602      	mov	r2, r0
 80045e6:	460b      	mov	r3, r1
 80045e8:	ec43 2b17 	vmov	d7, r2, r3
 80045ec:	eeb0 0a47 	vmov.f32	s0, s14
 80045f0:	eef0 0a67 	vmov.f32	s1, s15
 80045f4:	f019 fefc 	bl	801e3f0 <floor>
 80045f8:	ec53 2b10 	vmov	r2, r3, d0
 80045fc:	4610      	mov	r0, r2
 80045fe:	4619      	mov	r1, r3
 8004600:	f7fc faaa 	bl	8000b58 <__aeabi_d2uiz>
 8004604:	4603      	mov	r3, r0
 8004606:	b2da      	uxtb	r2, r3
 8004608:	2301      	movs	r3, #1
 800460a:	9300      	str	r3, [sp, #0]
 800460c:	2324      	movs	r3, #36	@ 0x24
 800460e:	2114      	movs	r1, #20
 8004610:	2020      	movs	r0, #32
 8004612:	f7ff fd78 	bl	8004106 <ssd1306_FillRectangle>
	ssd1306_DrawRectangle(32, 20, 103, 36, White);
 8004616:	2301      	movs	r3, #1
 8004618:	9300      	str	r3, [sp, #0]
 800461a:	2324      	movs	r3, #36	@ 0x24
 800461c:	2267      	movs	r2, #103	@ 0x67
 800461e:	2114      	movs	r1, #20
 8004620:	2020      	movs	r0, #32
 8004622:	f7ff fd39 	bl	8004098 <ssd1306_DrawRectangle>
	snprintf((char  *)bufferscreen,20,"%0.2f %%",(float) percent);
 8004626:	6878      	ldr	r0, [r7, #4]
 8004628:	f7fb ff66 	bl	80004f8 <__aeabi_f2d>
 800462c:	4602      	mov	r2, r0
 800462e:	460b      	mov	r3, r1
 8004630:	e9cd 2300 	strd	r2, r3, [sp]
 8004634:	4a0b      	ldr	r2, [pc, #44]	@ (8004664 <percentage+0xac>)
 8004636:	2114      	movs	r1, #20
 8004638:	480b      	ldr	r0, [pc, #44]	@ (8004668 <percentage+0xb0>)
 800463a:	f016 ffe7 	bl	801b60c <sniprintf>
	ssd1306_SetCursor(45,24);
 800463e:	2118      	movs	r1, #24
 8004640:	202d      	movs	r0, #45	@ 0x2d
 8004642:	f7ff fca5 	bl	8003f90 <ssd1306_SetCursor>
	ssd1306_WriteString((char  *)bufferscreen,Font_6x8,White);
 8004646:	4a09      	ldr	r2, [pc, #36]	@ (800466c <percentage+0xb4>)
 8004648:	2301      	movs	r3, #1
 800464a:	ca06      	ldmia	r2, {r1, r2}
 800464c:	4806      	ldr	r0, [pc, #24]	@ (8004668 <percentage+0xb0>)
 800464e:	f7ff fc79 	bl	8003f44 <ssd1306_WriteString>


}
 8004652:	bf00      	nop
 8004654:	3708      	adds	r7, #8
 8004656:	46bd      	mov	sp, r7
 8004658:	bd80      	pop	{r7, pc}
 800465a:	bf00      	nop
 800465c:	f3af 8000 	nop.w
 8004660:	40400000 	.word	0x40400000
 8004664:	0801fd0c 	.word	0x0801fd0c
 8004668:	20000bc8 	.word	0x20000bc8
 800466c:	20000014 	.word	0x20000014
 8004670:	70a3d70a 	.word	0x70a3d70a
 8004674:	3fe70a3d 	.word	0x3fe70a3d

08004678 <statemachine>:
int timer1=0;
int tpstot=0;



void statemachine(void){
 8004678:	b5b0      	push	{r4, r5, r7, lr}
 800467a:	ed2d 8b02 	vpush	{d8}
 800467e:	b08a      	sub	sp, #40	@ 0x28
 8004680:	af04      	add	r7, sp, #16
	switch(state){
 8004682:	4bbb      	ldr	r3, [pc, #748]	@ (8004970 <statemachine+0x2f8>)
 8004684:	781b      	ldrb	r3, [r3, #0]
 8004686:	2b05      	cmp	r3, #5
 8004688:	f201 85ae 	bhi.w	80061e8 <statemachine+0x1b70>
 800468c:	a201      	add	r2, pc, #4	@ (adr r2, 8004694 <statemachine+0x1c>)
 800468e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004692:	bf00      	nop
 8004694:	080046ad 	.word	0x080046ad
 8004698:	08004a53 	.word	0x08004a53
 800469c:	080052a1 	.word	0x080052a1
 80046a0:	08005951 	.word	0x08005951
 80046a4:	08005bcb 	.word	0x08005bcb
 80046a8:	080060d7 	.word	0x080060d7
	 case STATE_SPEED:
				 ssd1306_Fill(Black);
 80046ac:	2000      	movs	r0, #0
 80046ae:	f7ff fb2d 	bl	8003d0c <ssd1306_Fill>
				 nmea_parse(&myData, DataBuffer);
 80046b2:	49b0      	ldr	r1, [pc, #704]	@ (8004974 <statemachine+0x2fc>)
 80046b4:	48b0      	ldr	r0, [pc, #704]	@ (8004978 <statemachine+0x300>)
 80046b6:	f7fe fdbd 	bl	8003234 <nmea_parse>

				 if(myData.speed>=vitmax){
 80046ba:	4baf      	ldr	r3, [pc, #700]	@ (8004978 <statemachine+0x300>)
 80046bc:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 80046c0:	4bae      	ldr	r3, [pc, #696]	@ (800497c <statemachine+0x304>)
 80046c2:	edd3 7a00 	vldr	s15, [r3]
 80046c6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80046ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046ce:	db03      	blt.n	80046d8 <statemachine+0x60>
									 vitmax=myData.speed;
 80046d0:	4ba9      	ldr	r3, [pc, #676]	@ (8004978 <statemachine+0x300>)
 80046d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046d4:	4aa9      	ldr	r2, [pc, #676]	@ (800497c <statemachine+0x304>)
 80046d6:	6013      	str	r3, [r2, #0]
								 }
								 float pace=0;
 80046d8:	f04f 0300 	mov.w	r3, #0
 80046dc:	617b      	str	r3, [r7, #20]
								 float sec=0;
 80046de:	f04f 0300 	mov.w	r3, #0
 80046e2:	613b      	str	r3, [r7, #16]
								 if (myData.speed!=0){
 80046e4:	4ba4      	ldr	r3, [pc, #656]	@ (8004978 <statemachine+0x300>)
 80046e6:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80046ea:	eef5 7a40 	vcmp.f32	s15, #0.0
 80046ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046f2:	d032      	beq.n	800475a <statemachine+0xe2>
									 pace=1000/(60*myData.speed);
 80046f4:	4ba0      	ldr	r3, [pc, #640]	@ (8004978 <statemachine+0x300>)
 80046f6:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80046fa:	ed9f 7aa1 	vldr	s14, [pc, #644]	@ 8004980 <statemachine+0x308>
 80046fe:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004702:	eddf 6aa0 	vldr	s13, [pc, #640]	@ 8004984 <statemachine+0x30c>
 8004706:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800470a:	edc7 7a05 	vstr	s15, [r7, #20]
									 sec=(pace-floor(pace))*60;
 800470e:	6978      	ldr	r0, [r7, #20]
 8004710:	f7fb fef2 	bl	80004f8 <__aeabi_f2d>
 8004714:	4604      	mov	r4, r0
 8004716:	460d      	mov	r5, r1
 8004718:	6978      	ldr	r0, [r7, #20]
 800471a:	f7fb feed 	bl	80004f8 <__aeabi_f2d>
 800471e:	4602      	mov	r2, r0
 8004720:	460b      	mov	r3, r1
 8004722:	ec43 2b10 	vmov	d0, r2, r3
 8004726:	f019 fe63 	bl	801e3f0 <floor>
 800472a:	ec53 2b10 	vmov	r2, r3, d0
 800472e:	4620      	mov	r0, r4
 8004730:	4629      	mov	r1, r5
 8004732:	f7fb fd81 	bl	8000238 <__aeabi_dsub>
 8004736:	4602      	mov	r2, r0
 8004738:	460b      	mov	r3, r1
 800473a:	4610      	mov	r0, r2
 800473c:	4619      	mov	r1, r3
 800473e:	f04f 0200 	mov.w	r2, #0
 8004742:	4b91      	ldr	r3, [pc, #580]	@ (8004988 <statemachine+0x310>)
 8004744:	f7fb ff30 	bl	80005a8 <__aeabi_dmul>
 8004748:	4602      	mov	r2, r0
 800474a:	460b      	mov	r3, r1
 800474c:	4610      	mov	r0, r2
 800474e:	4619      	mov	r1, r3
 8004750:	f7fc fa22 	bl	8000b98 <__aeabi_d2f>
 8004754:	4603      	mov	r3, r0
 8004756:	613b      	str	r3, [r7, #16]
 8004758:	e001      	b.n	800475e <statemachine+0xe6>
								 }
								 else {
									 pace=99;
 800475a:	4b8c      	ldr	r3, [pc, #560]	@ (800498c <statemachine+0x314>)
 800475c:	617b      	str	r3, [r7, #20]
								 }


				  switch(spdstate){
 800475e:	4b8c      	ldr	r3, [pc, #560]	@ (8004990 <statemachine+0x318>)
 8004760:	781b      	ldrb	r3, [r3, #0]
 8004762:	2b02      	cmp	r3, #2
 8004764:	f000 8087 	beq.w	8004876 <statemachine+0x1fe>
 8004768:	2b02      	cmp	r3, #2
 800476a:	f300 812c 	bgt.w	80049c6 <statemachine+0x34e>
 800476e:	2b00      	cmp	r3, #0
 8004770:	d002      	beq.n	8004778 <statemachine+0x100>
 8004772:	2b01      	cmp	r3, #1
 8004774:	d040      	beq.n	80047f8 <statemachine+0x180>
 8004776:	e126      	b.n	80049c6 <statemachine+0x34e>


				 case STATE_GROS:


						ssd1306_SetCursor(32, 12);
 8004778:	210c      	movs	r1, #12
 800477a:	2020      	movs	r0, #32
 800477c:	f7ff fc08 	bl	8003f90 <ssd1306_SetCursor>
						snprintf((char *)bufferscreen,15, "%0.1f",(myData.speed)*3.6);
 8004780:	4b7d      	ldr	r3, [pc, #500]	@ (8004978 <statemachine+0x300>)
 8004782:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004784:	4618      	mov	r0, r3
 8004786:	f7fb feb7 	bl	80004f8 <__aeabi_f2d>
 800478a:	a377      	add	r3, pc, #476	@ (adr r3, 8004968 <statemachine+0x2f0>)
 800478c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004790:	f7fb ff0a 	bl	80005a8 <__aeabi_dmul>
 8004794:	4602      	mov	r2, r0
 8004796:	460b      	mov	r3, r1
 8004798:	e9cd 2300 	strd	r2, r3, [sp]
 800479c:	4a7d      	ldr	r2, [pc, #500]	@ (8004994 <statemachine+0x31c>)
 800479e:	210f      	movs	r1, #15
 80047a0:	487d      	ldr	r0, [pc, #500]	@ (8004998 <statemachine+0x320>)
 80047a2:	f016 ff33 	bl	801b60c <sniprintf>
						ssd1306_WriteString((char *)bufferscreen, Font_16x24, White);
 80047a6:	4a7d      	ldr	r2, [pc, #500]	@ (800499c <statemachine+0x324>)
 80047a8:	2301      	movs	r3, #1
 80047aa:	ca06      	ldmia	r2, {r1, r2}
 80047ac:	487a      	ldr	r0, [pc, #488]	@ (8004998 <statemachine+0x320>)
 80047ae:	f7ff fbc9 	bl	8003f44 <ssd1306_WriteString>
						ssd1306_SetCursor(32, 36);
 80047b2:	2124      	movs	r1, #36	@ 0x24
 80047b4:	2020      	movs	r0, #32
 80047b6:	f7ff fbeb 	bl	8003f90 <ssd1306_SetCursor>
						ssd1306_WriteString("Vit(kmh)", Font_6x8, White);
 80047ba:	4a79      	ldr	r2, [pc, #484]	@ (80049a0 <statemachine+0x328>)
 80047bc:	2301      	movs	r3, #1
 80047be:	ca06      	ldmia	r2, {r1, r2}
 80047c0:	4878      	ldr	r0, [pc, #480]	@ (80049a4 <statemachine+0x32c>)
 80047c2:	f7ff fbbf 	bl	8003f44 <ssd1306_WriteString>
						batterygauge(vbat,79, 37,1);
 80047c6:	4b78      	ldr	r3, [pc, #480]	@ (80049a8 <statemachine+0x330>)
 80047c8:	edd3 7a00 	vldr	s15, [r3]
 80047cc:	2201      	movs	r2, #1
 80047ce:	2125      	movs	r1, #37	@ 0x25
 80047d0:	204f      	movs	r0, #79	@ 0x4f
 80047d2:	eeb0 0a67 	vmov.f32	s0, s15
 80047d6:	f7ff fd73 	bl	80042c0 <batterygauge>

					 if(BTN_B>=1){
 80047da:	4b74      	ldr	r3, [pc, #464]	@ (80049ac <statemachine+0x334>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	f340 80bb 	ble.w	800495a <statemachine+0x2e2>
							spdstate++;
 80047e4:	4b6a      	ldr	r3, [pc, #424]	@ (8004990 <statemachine+0x318>)
 80047e6:	781b      	ldrb	r3, [r3, #0]
 80047e8:	3301      	adds	r3, #1
 80047ea:	b2da      	uxtb	r2, r3
 80047ec:	4b68      	ldr	r3, [pc, #416]	@ (8004990 <statemachine+0x318>)
 80047ee:	701a      	strb	r2, [r3, #0]
							BTN_B=0;
 80047f0:	4b6e      	ldr	r3, [pc, #440]	@ (80049ac <statemachine+0x334>)
 80047f2:	2200      	movs	r2, #0
 80047f4:	601a      	str	r2, [r3, #0]
					 					 				  	}




				  break;
 80047f6:	e0b0      	b.n	800495a <statemachine+0x2e2>
				 case STATE_GROS1:

					 ssd1306_SetCursor(32, 12);
 80047f8:	210c      	movs	r1, #12
 80047fa:	2020      	movs	r0, #32
 80047fc:	f7ff fbc8 	bl	8003f90 <ssd1306_SetCursor>
					 snprintf((char *)bufferscreen,15, "%0.1f",vitmax*3.6);
 8004800:	4b5e      	ldr	r3, [pc, #376]	@ (800497c <statemachine+0x304>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4618      	mov	r0, r3
 8004806:	f7fb fe77 	bl	80004f8 <__aeabi_f2d>
 800480a:	a357      	add	r3, pc, #348	@ (adr r3, 8004968 <statemachine+0x2f0>)
 800480c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004810:	f7fb feca 	bl	80005a8 <__aeabi_dmul>
 8004814:	4602      	mov	r2, r0
 8004816:	460b      	mov	r3, r1
 8004818:	e9cd 2300 	strd	r2, r3, [sp]
 800481c:	4a5d      	ldr	r2, [pc, #372]	@ (8004994 <statemachine+0x31c>)
 800481e:	210f      	movs	r1, #15
 8004820:	485d      	ldr	r0, [pc, #372]	@ (8004998 <statemachine+0x320>)
 8004822:	f016 fef3 	bl	801b60c <sniprintf>
					 ssd1306_WriteString((char *)bufferscreen, Font_16x24, White);
 8004826:	4a5d      	ldr	r2, [pc, #372]	@ (800499c <statemachine+0x324>)
 8004828:	2301      	movs	r3, #1
 800482a:	ca06      	ldmia	r2, {r1, r2}
 800482c:	485a      	ldr	r0, [pc, #360]	@ (8004998 <statemachine+0x320>)
 800482e:	f7ff fb89 	bl	8003f44 <ssd1306_WriteString>
					 ssd1306_SetCursor(32, 36);
 8004832:	2124      	movs	r1, #36	@ 0x24
 8004834:	2020      	movs	r0, #32
 8004836:	f7ff fbab 	bl	8003f90 <ssd1306_SetCursor>
					 ssd1306_WriteString("maxV", Font_6x8, White);
 800483a:	4a59      	ldr	r2, [pc, #356]	@ (80049a0 <statemachine+0x328>)
 800483c:	2301      	movs	r3, #1
 800483e:	ca06      	ldmia	r2, {r1, r2}
 8004840:	485b      	ldr	r0, [pc, #364]	@ (80049b0 <statemachine+0x338>)
 8004842:	f7ff fb7f 	bl	8003f44 <ssd1306_WriteString>
					 batterygauge(vbat,79, 37,1);
 8004846:	4b58      	ldr	r3, [pc, #352]	@ (80049a8 <statemachine+0x330>)
 8004848:	edd3 7a00 	vldr	s15, [r3]
 800484c:	2201      	movs	r2, #1
 800484e:	2125      	movs	r1, #37	@ 0x25
 8004850:	204f      	movs	r0, #79	@ 0x4f
 8004852:	eeb0 0a67 	vmov.f32	s0, s15
 8004856:	f7ff fd33 	bl	80042c0 <batterygauge>





					 if(BTN_B>=1){
 800485a:	4b54      	ldr	r3, [pc, #336]	@ (80049ac <statemachine+0x334>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	2b00      	cmp	r3, #0
 8004860:	dd7d      	ble.n	800495e <statemachine+0x2e6>
					 							spdstate++;
 8004862:	4b4b      	ldr	r3, [pc, #300]	@ (8004990 <statemachine+0x318>)
 8004864:	781b      	ldrb	r3, [r3, #0]
 8004866:	3301      	adds	r3, #1
 8004868:	b2da      	uxtb	r2, r3
 800486a:	4b49      	ldr	r3, [pc, #292]	@ (8004990 <statemachine+0x318>)
 800486c:	701a      	strb	r2, [r3, #0]
					 							BTN_B=0;
 800486e:	4b4f      	ldr	r3, [pc, #316]	@ (80049ac <statemachine+0x334>)
 8004870:	2200      	movs	r2, #0
 8004872:	601a      	str	r2, [r3, #0]

					 					 					 				  	}



					 break;
 8004874:	e073      	b.n	800495e <statemachine+0x2e6>
				  case STATE_SUMMARY:
				  						ssd1306_SetCursor(32, 12);
 8004876:	210c      	movs	r1, #12
 8004878:	2020      	movs	r0, #32
 800487a:	f7ff fb89 	bl	8003f90 <ssd1306_SetCursor>
				  						snprintf((char *)bufferscreen,15, "%0.0fmin%0.0fs",floor(pace),floor(sec));
 800487e:	6978      	ldr	r0, [r7, #20]
 8004880:	f7fb fe3a 	bl	80004f8 <__aeabi_f2d>
 8004884:	4602      	mov	r2, r0
 8004886:	460b      	mov	r3, r1
 8004888:	ec43 2b10 	vmov	d0, r2, r3
 800488c:	f019 fdb0 	bl	801e3f0 <floor>
 8004890:	eeb0 8a40 	vmov.f32	s16, s0
 8004894:	eef0 8a60 	vmov.f32	s17, s1
 8004898:	6938      	ldr	r0, [r7, #16]
 800489a:	f7fb fe2d 	bl	80004f8 <__aeabi_f2d>
 800489e:	4602      	mov	r2, r0
 80048a0:	460b      	mov	r3, r1
 80048a2:	ec43 2b10 	vmov	d0, r2, r3
 80048a6:	f019 fda3 	bl	801e3f0 <floor>
 80048aa:	eeb0 7a40 	vmov.f32	s14, s0
 80048ae:	eef0 7a60 	vmov.f32	s15, s1
 80048b2:	ed8d 7b02 	vstr	d7, [sp, #8]
 80048b6:	ed8d 8b00 	vstr	d8, [sp]
 80048ba:	4a3e      	ldr	r2, [pc, #248]	@ (80049b4 <statemachine+0x33c>)
 80048bc:	210f      	movs	r1, #15
 80048be:	4836      	ldr	r0, [pc, #216]	@ (8004998 <statemachine+0x320>)
 80048c0:	f016 fea4 	bl	801b60c <sniprintf>
				  						ssd1306_WriteString((char *)bufferscreen, Font_7x10, White);
 80048c4:	4a3c      	ldr	r2, [pc, #240]	@ (80049b8 <statemachine+0x340>)
 80048c6:	2301      	movs	r3, #1
 80048c8:	ca06      	ldmia	r2, {r1, r2}
 80048ca:	4833      	ldr	r0, [pc, #204]	@ (8004998 <statemachine+0x320>)
 80048cc:	f7ff fb3a 	bl	8003f44 <ssd1306_WriteString>
				  						ssd1306_SetCursor(32, 22);
 80048d0:	2116      	movs	r1, #22
 80048d2:	2020      	movs	r0, #32
 80048d4:	f7ff fb5c 	bl	8003f90 <ssd1306_SetCursor>
				  						ssd1306_WriteString("pace", Font_6x8, White);
 80048d8:	4a31      	ldr	r2, [pc, #196]	@ (80049a0 <statemachine+0x328>)
 80048da:	2301      	movs	r3, #1
 80048dc:	ca06      	ldmia	r2, {r1, r2}
 80048de:	4837      	ldr	r0, [pc, #220]	@ (80049bc <statemachine+0x344>)
 80048e0:	f7ff fb30 	bl	8003f44 <ssd1306_WriteString>
				  						ssd1306_SetCursor(32, 36);
 80048e4:	2124      	movs	r1, #36	@ 0x24
 80048e6:	2020      	movs	r0, #32
 80048e8:	f7ff fb52 	bl	8003f90 <ssd1306_SetCursor>
				  						snprintf((char *)bufferscreen,15, "V=%0.1fkmh",vitmax*3.6);
 80048ec:	4b23      	ldr	r3, [pc, #140]	@ (800497c <statemachine+0x304>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4618      	mov	r0, r3
 80048f2:	f7fb fe01 	bl	80004f8 <__aeabi_f2d>
 80048f6:	a31c      	add	r3, pc, #112	@ (adr r3, 8004968 <statemachine+0x2f0>)
 80048f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048fc:	f7fb fe54 	bl	80005a8 <__aeabi_dmul>
 8004900:	4602      	mov	r2, r0
 8004902:	460b      	mov	r3, r1
 8004904:	e9cd 2300 	strd	r2, r3, [sp]
 8004908:	4a2d      	ldr	r2, [pc, #180]	@ (80049c0 <statemachine+0x348>)
 800490a:	210f      	movs	r1, #15
 800490c:	4822      	ldr	r0, [pc, #136]	@ (8004998 <statemachine+0x320>)
 800490e:	f016 fe7d 	bl	801b60c <sniprintf>
				  						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 8004912:	4a23      	ldr	r2, [pc, #140]	@ (80049a0 <statemachine+0x328>)
 8004914:	2301      	movs	r3, #1
 8004916:	ca06      	ldmia	r2, {r1, r2}
 8004918:	481f      	ldr	r0, [pc, #124]	@ (8004998 <statemachine+0x320>)
 800491a:	f7ff fb13 	bl	8003f44 <ssd1306_WriteString>
				  						batterygauge(vbat,79,23,1);
 800491e:	4b22      	ldr	r3, [pc, #136]	@ (80049a8 <statemachine+0x330>)
 8004920:	edd3 7a00 	vldr	s15, [r3]
 8004924:	2201      	movs	r2, #1
 8004926:	2117      	movs	r1, #23
 8004928:	204f      	movs	r0, #79	@ 0x4f
 800492a:	eeb0 0a67 	vmov.f32	s0, s15
 800492e:	f7ff fcc7 	bl	80042c0 <batterygauge>



				  					 if(BTN_B>=1){
 8004932:	4b1e      	ldr	r3, [pc, #120]	@ (80049ac <statemachine+0x334>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	2b00      	cmp	r3, #0
 8004938:	dd44      	ble.n	80049c4 <statemachine+0x34c>
				  								spdstate--;
 800493a:	4b15      	ldr	r3, [pc, #84]	@ (8004990 <statemachine+0x318>)
 800493c:	781b      	ldrb	r3, [r3, #0]
 800493e:	3b01      	subs	r3, #1
 8004940:	b2da      	uxtb	r2, r3
 8004942:	4b13      	ldr	r3, [pc, #76]	@ (8004990 <statemachine+0x318>)
 8004944:	701a      	strb	r2, [r3, #0]
				  								spdstate--;
 8004946:	4b12      	ldr	r3, [pc, #72]	@ (8004990 <statemachine+0x318>)
 8004948:	781b      	ldrb	r3, [r3, #0]
 800494a:	3b01      	subs	r3, #1
 800494c:	b2da      	uxtb	r2, r3
 800494e:	4b10      	ldr	r3, [pc, #64]	@ (8004990 <statemachine+0x318>)
 8004950:	701a      	strb	r2, [r3, #0]
				  								BTN_B=0;
 8004952:	4b16      	ldr	r3, [pc, #88]	@ (80049ac <statemachine+0x334>)
 8004954:	2200      	movs	r2, #0
 8004956:	601a      	str	r2, [r3, #0]
				  					 					 				  	}




				  					 break;
 8004958:	e034      	b.n	80049c4 <statemachine+0x34c>
				  break;
 800495a:	bf00      	nop
 800495c:	e033      	b.n	80049c6 <statemachine+0x34e>
					 break;
 800495e:	bf00      	nop
 8004960:	e031      	b.n	80049c6 <statemachine+0x34e>
 8004962:	bf00      	nop
 8004964:	f3af 8000 	nop.w
 8004968:	cccccccd 	.word	0xcccccccd
 800496c:	400ccccc 	.word	0x400ccccc
 8004970:	200005d4 	.word	0x200005d4
 8004974:	20000620 	.word	0x20000620
 8004978:	20000928 	.word	0x20000928
 800497c:	20000c3c 	.word	0x20000c3c
 8004980:	42700000 	.word	0x42700000
 8004984:	447a0000 	.word	0x447a0000
 8004988:	404e0000 	.word	0x404e0000
 800498c:	42c60000 	.word	0x42c60000
 8004990:	200005d5 	.word	0x200005d5
 8004994:	0801fd18 	.word	0x0801fd18
 8004998:	20000bc8 	.word	0x20000bc8
 800499c:	20000024 	.word	0x20000024
 80049a0:	20000014 	.word	0x20000014
 80049a4:	0801fd20 	.word	0x0801fd20
 80049a8:	200009a0 	.word	0x200009a0
 80049ac:	2000096c 	.word	0x2000096c
 80049b0:	0801fd2c 	.word	0x0801fd2c
 80049b4:	0801fd34 	.word	0x0801fd34
 80049b8:	2000001c 	.word	0x2000001c
 80049bc:	0801fd44 	.word	0x0801fd44
 80049c0:	0801fd4c 	.word	0x0801fd4c
				  					 break;
 80049c4:	bf00      	nop
				  }
				  					if(BTN_A>=1){
 80049c6:	4b84      	ldr	r3, [pc, #528]	@ (8004bd8 <statemachine+0x560>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	dd0b      	ble.n	80049e6 <statemachine+0x36e>
				  									 					state++;
 80049ce:	4b83      	ldr	r3, [pc, #524]	@ (8004bdc <statemachine+0x564>)
 80049d0:	781b      	ldrb	r3, [r3, #0]
 80049d2:	3301      	adds	r3, #1
 80049d4:	b2da      	uxtb	r2, r3
 80049d6:	4b81      	ldr	r3, [pc, #516]	@ (8004bdc <statemachine+0x564>)
 80049d8:	701a      	strb	r2, [r3, #0]
				  									 					BTN_A=0;
 80049da:	4b7f      	ldr	r3, [pc, #508]	@ (8004bd8 <statemachine+0x560>)
 80049dc:	2200      	movs	r2, #0
 80049de:	601a      	str	r2, [r3, #0]
				  									 					BTN_B=0;
 80049e0:	4b7f      	ldr	r3, [pc, #508]	@ (8004be0 <statemachine+0x568>)
 80049e2:	2200      	movs	r2, #0
 80049e4:	601a      	str	r2, [r3, #0]
				  									  	}
				  									 	 if(BTN_A_LONG>=1){
 80049e6:	4b7f      	ldr	r3, [pc, #508]	@ (8004be4 <statemachine+0x56c>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	dd23      	ble.n	8004a36 <statemachine+0x3be>
				  									 						 				 									state++;
 80049ee:	4b7b      	ldr	r3, [pc, #492]	@ (8004bdc <statemachine+0x564>)
 80049f0:	781b      	ldrb	r3, [r3, #0]
 80049f2:	3301      	adds	r3, #1
 80049f4:	b2da      	uxtb	r2, r3
 80049f6:	4b79      	ldr	r3, [pc, #484]	@ (8004bdc <statemachine+0x564>)
 80049f8:	701a      	strb	r2, [r3, #0]
				  									 						 				 									state++;
 80049fa:	4b78      	ldr	r3, [pc, #480]	@ (8004bdc <statemachine+0x564>)
 80049fc:	781b      	ldrb	r3, [r3, #0]
 80049fe:	3301      	adds	r3, #1
 8004a00:	b2da      	uxtb	r2, r3
 8004a02:	4b76      	ldr	r3, [pc, #472]	@ (8004bdc <statemachine+0x564>)
 8004a04:	701a      	strb	r2, [r3, #0]
				  									 						 				 									state++;
 8004a06:	4b75      	ldr	r3, [pc, #468]	@ (8004bdc <statemachine+0x564>)
 8004a08:	781b      	ldrb	r3, [r3, #0]
 8004a0a:	3301      	adds	r3, #1
 8004a0c:	b2da      	uxtb	r2, r3
 8004a0e:	4b73      	ldr	r3, [pc, #460]	@ (8004bdc <statemachine+0x564>)
 8004a10:	701a      	strb	r2, [r3, #0]
				  									 						 				 									state++;
 8004a12:	4b72      	ldr	r3, [pc, #456]	@ (8004bdc <statemachine+0x564>)
 8004a14:	781b      	ldrb	r3, [r3, #0]
 8004a16:	3301      	adds	r3, #1
 8004a18:	b2da      	uxtb	r2, r3
 8004a1a:	4b70      	ldr	r3, [pc, #448]	@ (8004bdc <statemachine+0x564>)
 8004a1c:	701a      	strb	r2, [r3, #0]
				  									 						 				 									state++;
 8004a1e:	4b6f      	ldr	r3, [pc, #444]	@ (8004bdc <statemachine+0x564>)
 8004a20:	781b      	ldrb	r3, [r3, #0]
 8004a22:	3301      	adds	r3, #1
 8004a24:	b2da      	uxtb	r2, r3
 8004a26:	4b6d      	ldr	r3, [pc, #436]	@ (8004bdc <statemachine+0x564>)
 8004a28:	701a      	strb	r2, [r3, #0]

				  									 						 				 									  			 	BTN_A_LONG=0;
 8004a2a:	4b6e      	ldr	r3, [pc, #440]	@ (8004be4 <statemachine+0x56c>)
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	601a      	str	r2, [r3, #0]
				  									 						 				 									  			 	BTN_B=0;
 8004a30:	4b6b      	ldr	r3, [pc, #428]	@ (8004be0 <statemachine+0x568>)
 8004a32:	2200      	movs	r2, #0
 8004a34:	601a      	str	r2, [r3, #0]
				  									 						 				 									  	}
				  									 	 if(BTN_B_LONG>=1){
 8004a36:	4b6c      	ldr	r3, [pc, #432]	@ (8004be8 <statemachine+0x570>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	f341 83c8 	ble.w	80061d0 <statemachine+0x1b58>
				  									 					  							  vitmax=0;
 8004a40:	4b6a      	ldr	r3, [pc, #424]	@ (8004bec <statemachine+0x574>)
 8004a42:	f04f 0200 	mov.w	r2, #0
 8004a46:	601a      	str	r2, [r3, #0]
				  									 					  							BTN_B_LONG=0;
 8004a48:	4b67      	ldr	r3, [pc, #412]	@ (8004be8 <statemachine+0x570>)
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	601a      	str	r2, [r3, #0]
				  									 					  						}
				  									 	 break;
 8004a4e:	f001 bbbf 	b.w	80061d0 <statemachine+0x1b58>


				  case STATE_BALISE:
					  ssd1306_Fill(Black);
 8004a52:	2000      	movs	r0, #0
 8004a54:	f7ff f95a 	bl	8003d0c <ssd1306_Fill>

					  if(settimeen==0){
 8004a58:	4b65      	ldr	r3, [pc, #404]	@ (8004bf0 <statemachine+0x578>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d145      	bne.n	8004aec <statemachine+0x474>

						  if(myData.fix==1){
 8004a60:	4b64      	ldr	r3, [pc, #400]	@ (8004bf4 <statemachine+0x57c>)
 8004a62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a64:	2b01      	cmp	r3, #1
 8004a66:	d141      	bne.n	8004aec <statemachine+0x474>
							settimeen=1;
 8004a68:	4b61      	ldr	r3, [pc, #388]	@ (8004bf0 <statemachine+0x578>)
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	601a      	str	r2, [r3, #0]
							HR=(myData.lastMeasure[0]&0x0f)*10+(myData.lastMeasure[1]&0x0f);
 8004a6e:	4b61      	ldr	r3, [pc, #388]	@ (8004bf4 <statemachine+0x57c>)
 8004a70:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8004a74:	f003 030f 	and.w	r3, r3, #15
 8004a78:	b2db      	uxtb	r3, r3
 8004a7a:	461a      	mov	r2, r3
 8004a7c:	0092      	lsls	r2, r2, #2
 8004a7e:	4413      	add	r3, r2
 8004a80:	005b      	lsls	r3, r3, #1
 8004a82:	b2da      	uxtb	r2, r3
 8004a84:	4b5b      	ldr	r3, [pc, #364]	@ (8004bf4 <statemachine+0x57c>)
 8004a86:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8004a8a:	f003 030f 	and.w	r3, r3, #15
 8004a8e:	b2db      	uxtb	r3, r3
 8004a90:	4413      	add	r3, r2
 8004a92:	b2da      	uxtb	r2, r3
 8004a94:	4b58      	ldr	r3, [pc, #352]	@ (8004bf8 <statemachine+0x580>)
 8004a96:	701a      	strb	r2, [r3, #0]
							MINUTE=(myData.lastMeasure[2]&0x0f)*10+(myData.lastMeasure[3]&0x0f);
 8004a98:	4b56      	ldr	r3, [pc, #344]	@ (8004bf4 <statemachine+0x57c>)
 8004a9a:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8004a9e:	f003 030f 	and.w	r3, r3, #15
 8004aa2:	b2db      	uxtb	r3, r3
 8004aa4:	461a      	mov	r2, r3
 8004aa6:	0092      	lsls	r2, r2, #2
 8004aa8:	4413      	add	r3, r2
 8004aaa:	005b      	lsls	r3, r3, #1
 8004aac:	b2da      	uxtb	r2, r3
 8004aae:	4b51      	ldr	r3, [pc, #324]	@ (8004bf4 <statemachine+0x57c>)
 8004ab0:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8004ab4:	f003 030f 	and.w	r3, r3, #15
 8004ab8:	b2db      	uxtb	r3, r3
 8004aba:	4413      	add	r3, r2
 8004abc:	b2da      	uxtb	r2, r3
 8004abe:	4b4f      	ldr	r3, [pc, #316]	@ (8004bfc <statemachine+0x584>)
 8004ac0:	701a      	strb	r2, [r3, #0]
							SEC=(myData.lastMeasure[4]&0x0f)*10+(myData.lastMeasure[5]&0x0f);
 8004ac2:	4b4c      	ldr	r3, [pc, #304]	@ (8004bf4 <statemachine+0x57c>)
 8004ac4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004ac8:	f003 030f 	and.w	r3, r3, #15
 8004acc:	b2db      	uxtb	r3, r3
 8004ace:	461a      	mov	r2, r3
 8004ad0:	0092      	lsls	r2, r2, #2
 8004ad2:	4413      	add	r3, r2
 8004ad4:	005b      	lsls	r3, r3, #1
 8004ad6:	b2da      	uxtb	r2, r3
 8004ad8:	4b46      	ldr	r3, [pc, #280]	@ (8004bf4 <statemachine+0x57c>)
 8004ada:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8004ade:	f003 030f 	and.w	r3, r3, #15
 8004ae2:	b2db      	uxtb	r3, r3
 8004ae4:	4413      	add	r3, r2
 8004ae6:	b2da      	uxtb	r2, r3
 8004ae8:	4b45      	ldr	r3, [pc, #276]	@ (8004c00 <statemachine+0x588>)
 8004aea:	701a      	strb	r2, [r3, #0]





					  switch(balisestate){
 8004aec:	4b45      	ldr	r3, [pc, #276]	@ (8004c04 <statemachine+0x58c>)
 8004aee:	781b      	ldrb	r3, [r3, #0]
 8004af0:	2b02      	cmp	r3, #2
 8004af2:	f000 837d 	beq.w	80051f0 <statemachine+0xb78>
 8004af6:	2b02      	cmp	r3, #2
 8004af8:	f301 836c 	bgt.w	80061d4 <statemachine+0x1b5c>
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d004      	beq.n	8004b0a <statemachine+0x492>
 8004b00:	2b01      	cmp	r3, #1
 8004b02:	f000 8093 	beq.w	8004c2c <statemachine+0x5b4>
						  				 									 									  	}

					  }


					  break;
 8004b06:	f001 bb65 	b.w	80061d4 <statemachine+0x1b5c>
						  ssd1306_SetCursor(32,12);
 8004b0a:	210c      	movs	r1, #12
 8004b0c:	2020      	movs	r0, #32
 8004b0e:	f7ff fa3f 	bl	8003f90 <ssd1306_SetCursor>
						  ssd1306_WriteString("Tracker",Font_6x8,White);
 8004b12:	4a3d      	ldr	r2, [pc, #244]	@ (8004c08 <statemachine+0x590>)
 8004b14:	2301      	movs	r3, #1
 8004b16:	ca06      	ldmia	r2, {r1, r2}
 8004b18:	483c      	ldr	r0, [pc, #240]	@ (8004c0c <statemachine+0x594>)
 8004b1a:	f7ff fa13 	bl	8003f44 <ssd1306_WriteString>
						  snprintf((char *)bufferscreen,50, "offset=%d",pageoffset);
 8004b1e:	4b3c      	ldr	r3, [pc, #240]	@ (8004c10 <statemachine+0x598>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4a3c      	ldr	r2, [pc, #240]	@ (8004c14 <statemachine+0x59c>)
 8004b24:	2132      	movs	r1, #50	@ 0x32
 8004b26:	483c      	ldr	r0, [pc, #240]	@ (8004c18 <statemachine+0x5a0>)
 8004b28:	f016 fd70 	bl	801b60c <sniprintf>
						  ssd1306_SetCursor(32,22);
 8004b2c:	2116      	movs	r1, #22
 8004b2e:	2020      	movs	r0, #32
 8004b30:	f7ff fa2e 	bl	8003f90 <ssd1306_SetCursor>
						  ssd1306_WriteString((char *)bufferscreen,Font_7x10,White);
 8004b34:	4a39      	ldr	r2, [pc, #228]	@ (8004c1c <statemachine+0x5a4>)
 8004b36:	2301      	movs	r3, #1
 8004b38:	ca06      	ldmia	r2, {r1, r2}
 8004b3a:	4837      	ldr	r0, [pc, #220]	@ (8004c18 <statemachine+0x5a0>)
 8004b3c:	f7ff fa02 	bl	8003f44 <ssd1306_WriteString>
						  snprintf((char *)bufferscreen,50, "page=%d",pagenumber);
 8004b40:	4b37      	ldr	r3, [pc, #220]	@ (8004c20 <statemachine+0x5a8>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a37      	ldr	r2, [pc, #220]	@ (8004c24 <statemachine+0x5ac>)
 8004b46:	2132      	movs	r1, #50	@ 0x32
 8004b48:	4833      	ldr	r0, [pc, #204]	@ (8004c18 <statemachine+0x5a0>)
 8004b4a:	f016 fd5f 	bl	801b60c <sniprintf>
						  ssd1306_SetCursor(32,32);
 8004b4e:	2120      	movs	r1, #32
 8004b50:	2020      	movs	r0, #32
 8004b52:	f7ff fa1d 	bl	8003f90 <ssd1306_SetCursor>
						  ssd1306_WriteString((char *)bufferscreen,Font_7x10,White);
 8004b56:	4a31      	ldr	r2, [pc, #196]	@ (8004c1c <statemachine+0x5a4>)
 8004b58:	2301      	movs	r3, #1
 8004b5a:	ca06      	ldmia	r2, {r1, r2}
 8004b5c:	482e      	ldr	r0, [pc, #184]	@ (8004c18 <statemachine+0x5a0>)
 8004b5e:	f7ff f9f1 	bl	8003f44 <ssd1306_WriteString>
						  if(BTN_B_LONG>=1){
 8004b62:	4b21      	ldr	r3, [pc, #132]	@ (8004be8 <statemachine+0x570>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	dd0e      	ble.n	8004b88 <statemachine+0x510>
							balisestate++;
 8004b6a:	4b26      	ldr	r3, [pc, #152]	@ (8004c04 <statemachine+0x58c>)
 8004b6c:	781b      	ldrb	r3, [r3, #0]
 8004b6e:	3301      	adds	r3, #1
 8004b70:	b2da      	uxtb	r2, r3
 8004b72:	4b24      	ldr	r3, [pc, #144]	@ (8004c04 <statemachine+0x58c>)
 8004b74:	701a      	strb	r2, [r3, #0]
							BTN_B_LONG=0;
 8004b76:	4b1c      	ldr	r3, [pc, #112]	@ (8004be8 <statemachine+0x570>)
 8004b78:	2200      	movs	r2, #0
 8004b7a:	601a      	str	r2, [r3, #0]
							BTN_A=0;
 8004b7c:	4b16      	ldr	r3, [pc, #88]	@ (8004bd8 <statemachine+0x560>)
 8004b7e:	2200      	movs	r2, #0
 8004b80:	601a      	str	r2, [r3, #0]
							HAL_TIM_Base_Start_IT(&htim17);
 8004b82:	4829      	ldr	r0, [pc, #164]	@ (8004c28 <statemachine+0x5b0>)
 8004b84:	f00a f9f0 	bl	800ef68 <HAL_TIM_Base_Start_IT>
						  if(BTN_A>=1){
 8004b88:	4b13      	ldr	r3, [pc, #76]	@ (8004bd8 <statemachine+0x560>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	dd0e      	ble.n	8004bae <statemachine+0x536>
						  				  			 	state++;
 8004b90:	4b12      	ldr	r3, [pc, #72]	@ (8004bdc <statemachine+0x564>)
 8004b92:	781b      	ldrb	r3, [r3, #0]
 8004b94:	3301      	adds	r3, #1
 8004b96:	b2da      	uxtb	r2, r3
 8004b98:	4b10      	ldr	r3, [pc, #64]	@ (8004bdc <statemachine+0x564>)
 8004b9a:	701a      	strb	r2, [r3, #0]
						  				  			 	BTN_A=0;
 8004b9c:	4b0e      	ldr	r3, [pc, #56]	@ (8004bd8 <statemachine+0x560>)
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	601a      	str	r2, [r3, #0]
						  				  			 	BTN_B=0;
 8004ba2:	4b0f      	ldr	r3, [pc, #60]	@ (8004be0 <statemachine+0x568>)
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	601a      	str	r2, [r3, #0]
						  				  			 	settimeen=0;
 8004ba8:	4b11      	ldr	r3, [pc, #68]	@ (8004bf0 <statemachine+0x578>)
 8004baa:	2200      	movs	r2, #0
 8004bac:	601a      	str	r2, [r3, #0]
						  if(BTN_A_LONG>=1){
 8004bae:	4b0d      	ldr	r3, [pc, #52]	@ (8004be4 <statemachine+0x56c>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	f340 836e 	ble.w	8005294 <statemachine+0xc1c>
									  state--;
 8004bb8:	4b08      	ldr	r3, [pc, #32]	@ (8004bdc <statemachine+0x564>)
 8004bba:	781b      	ldrb	r3, [r3, #0]
 8004bbc:	3b01      	subs	r3, #1
 8004bbe:	b2da      	uxtb	r2, r3
 8004bc0:	4b06      	ldr	r3, [pc, #24]	@ (8004bdc <statemachine+0x564>)
 8004bc2:	701a      	strb	r2, [r3, #0]
									BTN_A_LONG=0;
 8004bc4:	4b07      	ldr	r3, [pc, #28]	@ (8004be4 <statemachine+0x56c>)
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	601a      	str	r2, [r3, #0]
									BTN_B=0;
 8004bca:	4b05      	ldr	r3, [pc, #20]	@ (8004be0 <statemachine+0x568>)
 8004bcc:	2200      	movs	r2, #0
 8004bce:	601a      	str	r2, [r3, #0]
									settimeen=0;
 8004bd0:	4b07      	ldr	r3, [pc, #28]	@ (8004bf0 <statemachine+0x578>)
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	601a      	str	r2, [r3, #0]
						  break;
 8004bd6:	e35d      	b.n	8005294 <statemachine+0xc1c>
 8004bd8:	20000968 	.word	0x20000968
 8004bdc:	200005d4 	.word	0x200005d4
 8004be0:	2000096c 	.word	0x2000096c
 8004be4:	20000ca0 	.word	0x20000ca0
 8004be8:	20000c9c 	.word	0x20000c9c
 8004bec:	20000c3c 	.word	0x20000c3c
 8004bf0:	20000c88 	.word	0x20000c88
 8004bf4:	20000928 	.word	0x20000928
 8004bf8:	20000c85 	.word	0x20000c85
 8004bfc:	20000c86 	.word	0x20000c86
 8004c00:	20000c84 	.word	0x20000c84
 8004c04:	200005d9 	.word	0x200005d9
 8004c08:	20000014 	.word	0x20000014
 8004c0c:	0801fd58 	.word	0x0801fd58
 8004c10:	20000ba4 	.word	0x20000ba4
 8004c14:	0801fd60 	.word	0x0801fd60
 8004c18:	20000bc8 	.word	0x20000bc8
 8004c1c:	2000001c 	.word	0x2000001c
 8004c20:	20000ba8 	.word	0x20000ba8
 8004c24:	0801fd6c 	.word	0x0801fd6c
 8004c28:	20001288 	.word	0x20001288
						  if(myData.speed>=vitmax){
 8004c2c:	4ba4      	ldr	r3, [pc, #656]	@ (8004ec0 <statemachine+0x848>)
 8004c2e:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 8004c32:	4ba4      	ldr	r3, [pc, #656]	@ (8004ec4 <statemachine+0x84c>)
 8004c34:	edd3 7a00 	vldr	s15, [r3]
 8004c38:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004c3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c40:	db03      	blt.n	8004c4a <statemachine+0x5d2>
						  									 vitmax=myData.speed;
 8004c42:	4b9f      	ldr	r3, [pc, #636]	@ (8004ec0 <statemachine+0x848>)
 8004c44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c46:	4a9f      	ldr	r2, [pc, #636]	@ (8004ec4 <statemachine+0x84c>)
 8004c48:	6013      	str	r3, [r2, #0]
						  if(pagenumber+1>=MAX_WRITE_PAGE){
 8004c4a:	4b9f      	ldr	r3, [pc, #636]	@ (8004ec8 <statemachine+0x850>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f246 32fd 	movw	r2, #25597	@ 0x63fd
 8004c52:	4293      	cmp	r3, r2
 8004c54:	dd05      	ble.n	8004c62 <statemachine+0x5ea>
							  HAL_TIM_Base_Stop_IT(&htim17);
 8004c56:	489d      	ldr	r0, [pc, #628]	@ (8004ecc <statemachine+0x854>)
 8004c58:	f00a f9d4 	bl	800f004 <HAL_TIM_Base_Stop_IT>
							  balisestate=2;
 8004c5c:	4b9c      	ldr	r3, [pc, #624]	@ (8004ed0 <statemachine+0x858>)
 8004c5e:	2202      	movs	r2, #2
 8004c60:	701a      	strb	r2, [r3, #0]
						  if(enablewrite==1){
 8004c62:	4b9c      	ldr	r3, [pc, #624]	@ (8004ed4 <statemachine+0x85c>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	2b01      	cmp	r3, #1
 8004c68:	f040 80b0 	bne.w	8004dcc <statemachine+0x754>
							  oldlat=myData.latitude;
 8004c6c:	4b94      	ldr	r3, [pc, #592]	@ (8004ec0 <statemachine+0x848>)
 8004c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c72:	4999      	ldr	r1, [pc, #612]	@ (8004ed8 <statemachine+0x860>)
 8004c74:	e9c1 2300 	strd	r2, r3, [r1]
							  oldlong=myData.longitude;
 8004c78:	4b91      	ldr	r3, [pc, #580]	@ (8004ec0 <statemachine+0x848>)
 8004c7a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8004c7e:	4997      	ldr	r1, [pc, #604]	@ (8004edc <statemachine+0x864>)
 8004c80:	e9c1 2300 	strd	r2, r3, [r1]
							  nmea_parse(&myData, DataBuffer);
 8004c84:	4996      	ldr	r1, [pc, #600]	@ (8004ee0 <statemachine+0x868>)
 8004c86:	488e      	ldr	r0, [pc, #568]	@ (8004ec0 <statemachine+0x848>)
 8004c88:	f7fe fad4 	bl	8003234 <nmea_parse>
							  if(distancecalc(oldlat, myData.latitude,oldlong, myData.longitude) > 139.0){//correspond à 500kmh pendant 1sec
 8004c8c:	4b92      	ldr	r3, [pc, #584]	@ (8004ed8 <statemachine+0x860>)
 8004c8e:	ed93 7b00 	vldr	d7, [r3]
 8004c92:	4b8b      	ldr	r3, [pc, #556]	@ (8004ec0 <statemachine+0x848>)
 8004c94:	ed93 6b00 	vldr	d6, [r3]
 8004c98:	4b90      	ldr	r3, [pc, #576]	@ (8004edc <statemachine+0x864>)
 8004c9a:	ed93 5b00 	vldr	d5, [r3]
 8004c9e:	4b88      	ldr	r3, [pc, #544]	@ (8004ec0 <statemachine+0x848>)
 8004ca0:	ed93 4b04 	vldr	d4, [r3, #16]
 8004ca4:	eeb0 3a44 	vmov.f32	s6, s8
 8004ca8:	eef0 3a64 	vmov.f32	s7, s9
 8004cac:	eeb0 2a45 	vmov.f32	s4, s10
 8004cb0:	eef0 2a65 	vmov.f32	s5, s11
 8004cb4:	eeb0 1a46 	vmov.f32	s2, s12
 8004cb8:	eef0 1a66 	vmov.f32	s3, s13
 8004cbc:	eeb0 0a47 	vmov.f32	s0, s14
 8004cc0:	eef0 0a67 	vmov.f32	s1, s15
 8004cc4:	f7fe fb60 	bl	8003388 <distancecalc>
 8004cc8:	ec51 0b10 	vmov	r0, r1, d0
 8004ccc:	a37a      	add	r3, pc, #488	@ (adr r3, 8004eb8 <statemachine+0x840>)
 8004cce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cd2:	f7fb fef9 	bl	8000ac8 <__aeabi_dcmpgt>
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d02b      	beq.n	8004d34 <statemachine+0x6bc>
								  myData.latitude=oldlat;
 8004cdc:	4b7e      	ldr	r3, [pc, #504]	@ (8004ed8 <statemachine+0x860>)
 8004cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ce2:	4977      	ldr	r1, [pc, #476]	@ (8004ec0 <statemachine+0x848>)
 8004ce4:	e9c1 2300 	strd	r2, r3, [r1]
								  myData.longitude=oldlong;
 8004ce8:	4b7c      	ldr	r3, [pc, #496]	@ (8004edc <statemachine+0x864>)
 8004cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cee:	4974      	ldr	r1, [pc, #464]	@ (8004ec0 <statemachine+0x848>)
 8004cf0:	e9c1 2304 	strd	r2, r3, [r1, #16]
								  flashbufferlen=csvframe((uint8_t *)flashwrite,temp,vbat,&myData,myData.satelliteCount,myData.hdop);
 8004cf4:	4b7b      	ldr	r3, [pc, #492]	@ (8004ee4 <statemachine+0x86c>)
 8004cf6:	edd3 7a00 	vldr	s15, [r3]
 8004cfa:	4b7b      	ldr	r3, [pc, #492]	@ (8004ee8 <statemachine+0x870>)
 8004cfc:	ed93 7a00 	vldr	s14, [r3]
 8004d00:	4b6f      	ldr	r3, [pc, #444]	@ (8004ec0 <statemachine+0x848>)
 8004d02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d04:	4a6e      	ldr	r2, [pc, #440]	@ (8004ec0 <statemachine+0x848>)
 8004d06:	edd2 6a08 	vldr	s13, [r2, #32]
 8004d0a:	eeb0 1a66 	vmov.f32	s2, s13
 8004d0e:	461a      	mov	r2, r3
 8004d10:	496b      	ldr	r1, [pc, #428]	@ (8004ec0 <statemachine+0x848>)
 8004d12:	eef0 0a47 	vmov.f32	s1, s14
 8004d16:	eeb0 0a67 	vmov.f32	s0, s15
 8004d1a:	4874      	ldr	r0, [pc, #464]	@ (8004eec <statemachine+0x874>)
 8004d1c:	f7fe fd90 	bl	8003840 <csvframe>
 8004d20:	4603      	mov	r3, r0
 8004d22:	4a73      	ldr	r2, [pc, #460]	@ (8004ef0 <statemachine+0x878>)
 8004d24:	6013      	str	r3, [r2, #0]
								  writebuffertoflash((uint8_t*)flashwrite,flashbufferlen);
 8004d26:	4b72      	ldr	r3, [pc, #456]	@ (8004ef0 <statemachine+0x878>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4619      	mov	r1, r3
 8004d2c:	486f      	ldr	r0, [pc, #444]	@ (8004eec <statemachine+0x874>)
 8004d2e:	f7fe febd 	bl	8003aac <writebuffertoflash>
 8004d32:	e048      	b.n	8004dc6 <statemachine+0x74e>
								  distanceparcouru=distanceparcouru + distancecalc(oldlat, myData.latitude,oldlong, myData.longitude);
 8004d34:	4b68      	ldr	r3, [pc, #416]	@ (8004ed8 <statemachine+0x860>)
 8004d36:	ed93 7b00 	vldr	d7, [r3]
 8004d3a:	4b61      	ldr	r3, [pc, #388]	@ (8004ec0 <statemachine+0x848>)
 8004d3c:	ed93 6b00 	vldr	d6, [r3]
 8004d40:	4b66      	ldr	r3, [pc, #408]	@ (8004edc <statemachine+0x864>)
 8004d42:	ed93 5b00 	vldr	d5, [r3]
 8004d46:	4b5e      	ldr	r3, [pc, #376]	@ (8004ec0 <statemachine+0x848>)
 8004d48:	ed93 4b04 	vldr	d4, [r3, #16]
 8004d4c:	eeb0 3a44 	vmov.f32	s6, s8
 8004d50:	eef0 3a64 	vmov.f32	s7, s9
 8004d54:	eeb0 2a45 	vmov.f32	s4, s10
 8004d58:	eef0 2a65 	vmov.f32	s5, s11
 8004d5c:	eeb0 1a46 	vmov.f32	s2, s12
 8004d60:	eef0 1a66 	vmov.f32	s3, s13
 8004d64:	eeb0 0a47 	vmov.f32	s0, s14
 8004d68:	eef0 0a67 	vmov.f32	s1, s15
 8004d6c:	f7fe fb0c 	bl	8003388 <distancecalc>
 8004d70:	ec51 0b10 	vmov	r0, r1, d0
 8004d74:	4b5f      	ldr	r3, [pc, #380]	@ (8004ef4 <statemachine+0x87c>)
 8004d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d7a:	f7fb fa5f 	bl	800023c <__adddf3>
 8004d7e:	4602      	mov	r2, r0
 8004d80:	460b      	mov	r3, r1
 8004d82:	495c      	ldr	r1, [pc, #368]	@ (8004ef4 <statemachine+0x87c>)
 8004d84:	e9c1 2300 	strd	r2, r3, [r1]
								  flashbufferlen=csvframe((uint8_t *)flashwrite,temp,vbat,&myData,myData.satelliteCount,myData.hdop);
 8004d88:	4b56      	ldr	r3, [pc, #344]	@ (8004ee4 <statemachine+0x86c>)
 8004d8a:	edd3 7a00 	vldr	s15, [r3]
 8004d8e:	4b56      	ldr	r3, [pc, #344]	@ (8004ee8 <statemachine+0x870>)
 8004d90:	ed93 7a00 	vldr	s14, [r3]
 8004d94:	4b4a      	ldr	r3, [pc, #296]	@ (8004ec0 <statemachine+0x848>)
 8004d96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d98:	4a49      	ldr	r2, [pc, #292]	@ (8004ec0 <statemachine+0x848>)
 8004d9a:	edd2 6a08 	vldr	s13, [r2, #32]
 8004d9e:	eeb0 1a66 	vmov.f32	s2, s13
 8004da2:	461a      	mov	r2, r3
 8004da4:	4946      	ldr	r1, [pc, #280]	@ (8004ec0 <statemachine+0x848>)
 8004da6:	eef0 0a47 	vmov.f32	s1, s14
 8004daa:	eeb0 0a67 	vmov.f32	s0, s15
 8004dae:	484f      	ldr	r0, [pc, #316]	@ (8004eec <statemachine+0x874>)
 8004db0:	f7fe fd46 	bl	8003840 <csvframe>
 8004db4:	4603      	mov	r3, r0
 8004db6:	4a4e      	ldr	r2, [pc, #312]	@ (8004ef0 <statemachine+0x878>)
 8004db8:	6013      	str	r3, [r2, #0]
								  writebuffertoflash((uint8_t*)flashwrite,flashbufferlen);
 8004dba:	4b4d      	ldr	r3, [pc, #308]	@ (8004ef0 <statemachine+0x878>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4619      	mov	r1, r3
 8004dc0:	484a      	ldr	r0, [pc, #296]	@ (8004eec <statemachine+0x874>)
 8004dc2:	f7fe fe73 	bl	8003aac <writebuffertoflash>
							  enablewrite=0;
 8004dc6:	4b43      	ldr	r3, [pc, #268]	@ (8004ed4 <statemachine+0x85c>)
 8004dc8:	2200      	movs	r2, #0
 8004dca:	601a      	str	r2, [r3, #0]
						  ssd1306_SetCursor(32,12);
 8004dcc:	210c      	movs	r1, #12
 8004dce:	2020      	movs	r0, #32
 8004dd0:	f7ff f8de 	bl	8003f90 <ssd1306_SetCursor>
						  switch(ecranstate){
 8004dd4:	4b48      	ldr	r3, [pc, #288]	@ (8004ef8 <statemachine+0x880>)
 8004dd6:	781b      	ldrb	r3, [r3, #0]
 8004dd8:	2b05      	cmp	r3, #5
 8004dda:	f200 818e 	bhi.w	80050fa <statemachine+0xa82>
 8004dde:	a201      	add	r2, pc, #4	@ (adr r2, 8004de4 <statemachine+0x76c>)
 8004de0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004de4:	08004dfd 	.word	0x08004dfd
 8004de8:	08004e4f 	.word	0x08004e4f
 8004dec:	08004f25 	.word	0x08004f25
 8004df0:	08004f8f 	.word	0x08004f8f
 8004df4:	08004fef 	.word	0x08004fef
 8004df8:	0800504d 	.word	0x0800504d
							  snprintf((char *)bufferscreen,50,"%d",pagenumber);
 8004dfc:	4b32      	ldr	r3, [pc, #200]	@ (8004ec8 <statemachine+0x850>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a3e      	ldr	r2, [pc, #248]	@ (8004efc <statemachine+0x884>)
 8004e02:	2132      	movs	r1, #50	@ 0x32
 8004e04:	483e      	ldr	r0, [pc, #248]	@ (8004f00 <statemachine+0x888>)
 8004e06:	f016 fc01 	bl	801b60c <sniprintf>
							  ssd1306_WriteString((char *)bufferscreen,Font_7x10,White);
 8004e0a:	4a3e      	ldr	r2, [pc, #248]	@ (8004f04 <statemachine+0x88c>)
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	ca06      	ldmia	r2, {r1, r2}
 8004e10:	483b      	ldr	r0, [pc, #236]	@ (8004f00 <statemachine+0x888>)
 8004e12:	f7ff f897 	bl	8003f44 <ssd1306_WriteString>
							  ssd1306_SetCursor(32,22);
 8004e16:	2116      	movs	r1, #22
 8004e18:	2020      	movs	r0, #32
 8004e1a:	f7ff f8b9 	bl	8003f90 <ssd1306_SetCursor>
							  ssd1306_WriteString("PageNb",Font_6x8,White);
 8004e1e:	4a3a      	ldr	r2, [pc, #232]	@ (8004f08 <statemachine+0x890>)
 8004e20:	2301      	movs	r3, #1
 8004e22:	ca06      	ldmia	r2, {r1, r2}
 8004e24:	4839      	ldr	r0, [pc, #228]	@ (8004f0c <statemachine+0x894>)
 8004e26:	f7ff f88d 	bl	8003f44 <ssd1306_WriteString>
							  if(BTN_B>=1){
 8004e2a:	4b39      	ldr	r3, [pc, #228]	@ (8004f10 <statemachine+0x898>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	f340 8158 	ble.w	80050e4 <statemachine+0xa6c>
														  ecranstate++;
 8004e34:	4b30      	ldr	r3, [pc, #192]	@ (8004ef8 <statemachine+0x880>)
 8004e36:	781b      	ldrb	r3, [r3, #0]
 8004e38:	3301      	adds	r3, #1
 8004e3a:	b2da      	uxtb	r2, r3
 8004e3c:	4b2e      	ldr	r3, [pc, #184]	@ (8004ef8 <statemachine+0x880>)
 8004e3e:	701a      	strb	r2, [r3, #0]
													  	BTN_B=0;
 8004e40:	4b33      	ldr	r3, [pc, #204]	@ (8004f10 <statemachine+0x898>)
 8004e42:	2200      	movs	r2, #0
 8004e44:	601a      	str	r2, [r3, #0]
													  	BTN_A=0;
 8004e46:	4b33      	ldr	r3, [pc, #204]	@ (8004f14 <statemachine+0x89c>)
 8004e48:	2200      	movs	r2, #0
 8004e4a:	601a      	str	r2, [r3, #0]
							  break;
 8004e4c:	e14a      	b.n	80050e4 <statemachine+0xa6c>
							  snprintf((char  *)bufferscreen,50,"%0.3lf",distanceparcouru/1000);
 8004e4e:	4b29      	ldr	r3, [pc, #164]	@ (8004ef4 <statemachine+0x87c>)
 8004e50:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004e54:	f04f 0200 	mov.w	r2, #0
 8004e58:	4b2f      	ldr	r3, [pc, #188]	@ (8004f18 <statemachine+0x8a0>)
 8004e5a:	f7fb fccf 	bl	80007fc <__aeabi_ddiv>
 8004e5e:	4602      	mov	r2, r0
 8004e60:	460b      	mov	r3, r1
 8004e62:	e9cd 2300 	strd	r2, r3, [sp]
 8004e66:	4a2d      	ldr	r2, [pc, #180]	@ (8004f1c <statemachine+0x8a4>)
 8004e68:	2132      	movs	r1, #50	@ 0x32
 8004e6a:	4825      	ldr	r0, [pc, #148]	@ (8004f00 <statemachine+0x888>)
 8004e6c:	f016 fbce 	bl	801b60c <sniprintf>
							  ssd1306_WriteString((char *)bufferscreen,Font_7x10,White);
 8004e70:	4a24      	ldr	r2, [pc, #144]	@ (8004f04 <statemachine+0x88c>)
 8004e72:	2301      	movs	r3, #1
 8004e74:	ca06      	ldmia	r2, {r1, r2}
 8004e76:	4822      	ldr	r0, [pc, #136]	@ (8004f00 <statemachine+0x888>)
 8004e78:	f7ff f864 	bl	8003f44 <ssd1306_WriteString>
							  ssd1306_SetCursor(32,22);
 8004e7c:	2116      	movs	r1, #22
 8004e7e:	2020      	movs	r0, #32
 8004e80:	f7ff f886 	bl	8003f90 <ssd1306_SetCursor>
							  ssd1306_WriteString("Dist(km)",Font_6x8,White);
 8004e84:	4a20      	ldr	r2, [pc, #128]	@ (8004f08 <statemachine+0x890>)
 8004e86:	2301      	movs	r3, #1
 8004e88:	ca06      	ldmia	r2, {r1, r2}
 8004e8a:	4825      	ldr	r0, [pc, #148]	@ (8004f20 <statemachine+0x8a8>)
 8004e8c:	f7ff f85a 	bl	8003f44 <ssd1306_WriteString>
							  if(BTN_B>=1){
 8004e90:	4b1f      	ldr	r3, [pc, #124]	@ (8004f10 <statemachine+0x898>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	f340 8127 	ble.w	80050e8 <statemachine+0xa70>
							  														  ecranstate++;
 8004e9a:	4b17      	ldr	r3, [pc, #92]	@ (8004ef8 <statemachine+0x880>)
 8004e9c:	781b      	ldrb	r3, [r3, #0]
 8004e9e:	3301      	adds	r3, #1
 8004ea0:	b2da      	uxtb	r2, r3
 8004ea2:	4b15      	ldr	r3, [pc, #84]	@ (8004ef8 <statemachine+0x880>)
 8004ea4:	701a      	strb	r2, [r3, #0]
							  													  	BTN_B=0;
 8004ea6:	4b1a      	ldr	r3, [pc, #104]	@ (8004f10 <statemachine+0x898>)
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	601a      	str	r2, [r3, #0]
							  													  	BTN_A=0;
 8004eac:	4b19      	ldr	r3, [pc, #100]	@ (8004f14 <statemachine+0x89c>)
 8004eae:	2200      	movs	r2, #0
 8004eb0:	601a      	str	r2, [r3, #0]
							  break;
 8004eb2:	e119      	b.n	80050e8 <statemachine+0xa70>
 8004eb4:	f3af 8000 	nop.w
 8004eb8:	00000000 	.word	0x00000000
 8004ebc:	40616000 	.word	0x40616000
 8004ec0:	20000928 	.word	0x20000928
 8004ec4:	20000c3c 	.word	0x20000c3c
 8004ec8:	20000ba8 	.word	0x20000ba8
 8004ecc:	20001288 	.word	0x20001288
 8004ed0:	200005d9 	.word	0x200005d9
 8004ed4:	20000c80 	.word	0x20000c80
 8004ed8:	20000c70 	.word	0x20000c70
 8004edc:	20000c78 	.word	0x20000c78
 8004ee0:	20000620 	.word	0x20000620
 8004ee4:	20000998 	.word	0x20000998
 8004ee8:	200009a0 	.word	0x200009a0
 8004eec:	200009a4 	.word	0x200009a4
 8004ef0:	20000c54 	.word	0x20000c54
 8004ef4:	20000c68 	.word	0x20000c68
 8004ef8:	20000ce8 	.word	0x20000ce8
 8004efc:	0801fd74 	.word	0x0801fd74
 8004f00:	20000bc8 	.word	0x20000bc8
 8004f04:	2000001c 	.word	0x2000001c
 8004f08:	20000014 	.word	0x20000014
 8004f0c:	0801fd78 	.word	0x0801fd78
 8004f10:	2000096c 	.word	0x2000096c
 8004f14:	20000968 	.word	0x20000968
 8004f18:	408f4000 	.word	0x408f4000
 8004f1c:	0801fd80 	.word	0x0801fd80
 8004f20:	0801fd88 	.word	0x0801fd88
							  snprintf((char  *)bufferscreen,50,"%0.1f",myData.speed*3.6);
 8004f24:	4b9e      	ldr	r3, [pc, #632]	@ (80051a0 <statemachine+0xb28>)
 8004f26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f28:	4618      	mov	r0, r3
 8004f2a:	f7fb fae5 	bl	80004f8 <__aeabi_f2d>
 8004f2e:	a39a      	add	r3, pc, #616	@ (adr r3, 8005198 <statemachine+0xb20>)
 8004f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f34:	f7fb fb38 	bl	80005a8 <__aeabi_dmul>
 8004f38:	4602      	mov	r2, r0
 8004f3a:	460b      	mov	r3, r1
 8004f3c:	e9cd 2300 	strd	r2, r3, [sp]
 8004f40:	4a98      	ldr	r2, [pc, #608]	@ (80051a4 <statemachine+0xb2c>)
 8004f42:	2132      	movs	r1, #50	@ 0x32
 8004f44:	4898      	ldr	r0, [pc, #608]	@ (80051a8 <statemachine+0xb30>)
 8004f46:	f016 fb61 	bl	801b60c <sniprintf>
							  ssd1306_WriteString((char *)bufferscreen,Font_7x10,White);
 8004f4a:	4a98      	ldr	r2, [pc, #608]	@ (80051ac <statemachine+0xb34>)
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	ca06      	ldmia	r2, {r1, r2}
 8004f50:	4895      	ldr	r0, [pc, #596]	@ (80051a8 <statemachine+0xb30>)
 8004f52:	f7fe fff7 	bl	8003f44 <ssd1306_WriteString>
							  ssd1306_SetCursor(32,22);
 8004f56:	2116      	movs	r1, #22
 8004f58:	2020      	movs	r0, #32
 8004f5a:	f7ff f819 	bl	8003f90 <ssd1306_SetCursor>
							  ssd1306_WriteString("Vit(kmh)",Font_6x8,White);
 8004f5e:	4a94      	ldr	r2, [pc, #592]	@ (80051b0 <statemachine+0xb38>)
 8004f60:	2301      	movs	r3, #1
 8004f62:	ca06      	ldmia	r2, {r1, r2}
 8004f64:	4893      	ldr	r0, [pc, #588]	@ (80051b4 <statemachine+0xb3c>)
 8004f66:	f7fe ffed 	bl	8003f44 <ssd1306_WriteString>
							  if(BTN_B>=1){
 8004f6a:	4b93      	ldr	r3, [pc, #588]	@ (80051b8 <statemachine+0xb40>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	f340 80bc 	ble.w	80050ec <statemachine+0xa74>
							  														  ecranstate++;
 8004f74:	4b91      	ldr	r3, [pc, #580]	@ (80051bc <statemachine+0xb44>)
 8004f76:	781b      	ldrb	r3, [r3, #0]
 8004f78:	3301      	adds	r3, #1
 8004f7a:	b2da      	uxtb	r2, r3
 8004f7c:	4b8f      	ldr	r3, [pc, #572]	@ (80051bc <statemachine+0xb44>)
 8004f7e:	701a      	strb	r2, [r3, #0]
							  													  	BTN_B=0;
 8004f80:	4b8d      	ldr	r3, [pc, #564]	@ (80051b8 <statemachine+0xb40>)
 8004f82:	2200      	movs	r2, #0
 8004f84:	601a      	str	r2, [r3, #0]
							  													  	BTN_A=0;
 8004f86:	4b8e      	ldr	r3, [pc, #568]	@ (80051c0 <statemachine+0xb48>)
 8004f88:	2200      	movs	r2, #0
 8004f8a:	601a      	str	r2, [r3, #0]
							  break;
 8004f8c:	e0ae      	b.n	80050ec <statemachine+0xa74>
							  snprintf((char  *)bufferscreen,50,"%0.1f",myData.altitude);
 8004f8e:	4b84      	ldr	r3, [pc, #528]	@ (80051a0 <statemachine+0xb28>)
 8004f90:	69db      	ldr	r3, [r3, #28]
 8004f92:	4618      	mov	r0, r3
 8004f94:	f7fb fab0 	bl	80004f8 <__aeabi_f2d>
 8004f98:	4602      	mov	r2, r0
 8004f9a:	460b      	mov	r3, r1
 8004f9c:	e9cd 2300 	strd	r2, r3, [sp]
 8004fa0:	4a80      	ldr	r2, [pc, #512]	@ (80051a4 <statemachine+0xb2c>)
 8004fa2:	2132      	movs	r1, #50	@ 0x32
 8004fa4:	4880      	ldr	r0, [pc, #512]	@ (80051a8 <statemachine+0xb30>)
 8004fa6:	f016 fb31 	bl	801b60c <sniprintf>
							  							  ssd1306_WriteString((char *)bufferscreen,Font_7x10,White);
 8004faa:	4a80      	ldr	r2, [pc, #512]	@ (80051ac <statemachine+0xb34>)
 8004fac:	2301      	movs	r3, #1
 8004fae:	ca06      	ldmia	r2, {r1, r2}
 8004fb0:	487d      	ldr	r0, [pc, #500]	@ (80051a8 <statemachine+0xb30>)
 8004fb2:	f7fe ffc7 	bl	8003f44 <ssd1306_WriteString>
							  							ssd1306_SetCursor(32,42);
 8004fb6:	212a      	movs	r1, #42	@ 0x2a
 8004fb8:	2020      	movs	r0, #32
 8004fba:	f7fe ffe9 	bl	8003f90 <ssd1306_SetCursor>
							  							ssd1306_WriteString("alt(m)",Font_6x8,White);
 8004fbe:	4a7c      	ldr	r2, [pc, #496]	@ (80051b0 <statemachine+0xb38>)
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	ca06      	ldmia	r2, {r1, r2}
 8004fc4:	487f      	ldr	r0, [pc, #508]	@ (80051c4 <statemachine+0xb4c>)
 8004fc6:	f7fe ffbd 	bl	8003f44 <ssd1306_WriteString>
							  if(BTN_B>=1){
 8004fca:	4b7b      	ldr	r3, [pc, #492]	@ (80051b8 <statemachine+0xb40>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	f340 808e 	ble.w	80050f0 <statemachine+0xa78>
							  														  ecranstate++;
 8004fd4:	4b79      	ldr	r3, [pc, #484]	@ (80051bc <statemachine+0xb44>)
 8004fd6:	781b      	ldrb	r3, [r3, #0]
 8004fd8:	3301      	adds	r3, #1
 8004fda:	b2da      	uxtb	r2, r3
 8004fdc:	4b77      	ldr	r3, [pc, #476]	@ (80051bc <statemachine+0xb44>)
 8004fde:	701a      	strb	r2, [r3, #0]
							  													  	BTN_B=0;
 8004fe0:	4b75      	ldr	r3, [pc, #468]	@ (80051b8 <statemachine+0xb40>)
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	601a      	str	r2, [r3, #0]
							  													  	BTN_A=0;
 8004fe6:	4b76      	ldr	r3, [pc, #472]	@ (80051c0 <statemachine+0xb48>)
 8004fe8:	2200      	movs	r2, #0
 8004fea:	601a      	str	r2, [r3, #0]
							  break;
 8004fec:	e080      	b.n	80050f0 <statemachine+0xa78>
							  snprintf((char  *)bufferscreen,50,"%0.1f",vbat);
 8004fee:	4b76      	ldr	r3, [pc, #472]	@ (80051c8 <statemachine+0xb50>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	f7fb fa80 	bl	80004f8 <__aeabi_f2d>
 8004ff8:	4602      	mov	r2, r0
 8004ffa:	460b      	mov	r3, r1
 8004ffc:	e9cd 2300 	strd	r2, r3, [sp]
 8005000:	4a68      	ldr	r2, [pc, #416]	@ (80051a4 <statemachine+0xb2c>)
 8005002:	2132      	movs	r1, #50	@ 0x32
 8005004:	4868      	ldr	r0, [pc, #416]	@ (80051a8 <statemachine+0xb30>)
 8005006:	f016 fb01 	bl	801b60c <sniprintf>
							  ssd1306_WriteString((char *)bufferscreen,Font_7x10,White);
 800500a:	4a68      	ldr	r2, [pc, #416]	@ (80051ac <statemachine+0xb34>)
 800500c:	2301      	movs	r3, #1
 800500e:	ca06      	ldmia	r2, {r1, r2}
 8005010:	4865      	ldr	r0, [pc, #404]	@ (80051a8 <statemachine+0xb30>)
 8005012:	f7fe ff97 	bl	8003f44 <ssd1306_WriteString>
							  ssd1306_SetCursor(32,22);
 8005016:	2116      	movs	r1, #22
 8005018:	2020      	movs	r0, #32
 800501a:	f7fe ffb9 	bl	8003f90 <ssd1306_SetCursor>
							  ssd1306_WriteString("Vbat(V)",Font_6x8,White);
 800501e:	4a64      	ldr	r2, [pc, #400]	@ (80051b0 <statemachine+0xb38>)
 8005020:	2301      	movs	r3, #1
 8005022:	ca06      	ldmia	r2, {r1, r2}
 8005024:	4869      	ldr	r0, [pc, #420]	@ (80051cc <statemachine+0xb54>)
 8005026:	f7fe ff8d 	bl	8003f44 <ssd1306_WriteString>
							  if(BTN_B>=1){
 800502a:	4b63      	ldr	r3, [pc, #396]	@ (80051b8 <statemachine+0xb40>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	2b00      	cmp	r3, #0
 8005030:	dd60      	ble.n	80050f4 <statemachine+0xa7c>
							  														  ecranstate++;
 8005032:	4b62      	ldr	r3, [pc, #392]	@ (80051bc <statemachine+0xb44>)
 8005034:	781b      	ldrb	r3, [r3, #0]
 8005036:	3301      	adds	r3, #1
 8005038:	b2da      	uxtb	r2, r3
 800503a:	4b60      	ldr	r3, [pc, #384]	@ (80051bc <statemachine+0xb44>)
 800503c:	701a      	strb	r2, [r3, #0]
							  													  	BTN_B=0;
 800503e:	4b5e      	ldr	r3, [pc, #376]	@ (80051b8 <statemachine+0xb40>)
 8005040:	2200      	movs	r2, #0
 8005042:	601a      	str	r2, [r3, #0]
							  													  	BTN_A=0;
 8005044:	4b5e      	ldr	r3, [pc, #376]	@ (80051c0 <statemachine+0xb48>)
 8005046:	2200      	movs	r2, #0
 8005048:	601a      	str	r2, [r3, #0]
							  break;
 800504a:	e053      	b.n	80050f4 <statemachine+0xa7c>
							  snprintf((char  *)bufferscreen,50,"%0.1f",vitmax*3.6);
 800504c:	4b60      	ldr	r3, [pc, #384]	@ (80051d0 <statemachine+0xb58>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4618      	mov	r0, r3
 8005052:	f7fb fa51 	bl	80004f8 <__aeabi_f2d>
 8005056:	a350      	add	r3, pc, #320	@ (adr r3, 8005198 <statemachine+0xb20>)
 8005058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800505c:	f7fb faa4 	bl	80005a8 <__aeabi_dmul>
 8005060:	4602      	mov	r2, r0
 8005062:	460b      	mov	r3, r1
 8005064:	e9cd 2300 	strd	r2, r3, [sp]
 8005068:	4a4e      	ldr	r2, [pc, #312]	@ (80051a4 <statemachine+0xb2c>)
 800506a:	2132      	movs	r1, #50	@ 0x32
 800506c:	484e      	ldr	r0, [pc, #312]	@ (80051a8 <statemachine+0xb30>)
 800506e:	f016 facd 	bl	801b60c <sniprintf>
							  							  ssd1306_WriteString((char *)bufferscreen,Font_7x10,White);
 8005072:	4a4e      	ldr	r2, [pc, #312]	@ (80051ac <statemachine+0xb34>)
 8005074:	2301      	movs	r3, #1
 8005076:	ca06      	ldmia	r2, {r1, r2}
 8005078:	484b      	ldr	r0, [pc, #300]	@ (80051a8 <statemachine+0xb30>)
 800507a:	f7fe ff63 	bl	8003f44 <ssd1306_WriteString>
							  							ssd1306_SetCursor(32,22);
 800507e:	2116      	movs	r1, #22
 8005080:	2020      	movs	r0, #32
 8005082:	f7fe ff85 	bl	8003f90 <ssd1306_SetCursor>
							  							ssd1306_WriteString("MaxV",Font_6x8,White);
 8005086:	4a4a      	ldr	r2, [pc, #296]	@ (80051b0 <statemachine+0xb38>)
 8005088:	2301      	movs	r3, #1
 800508a:	ca06      	ldmia	r2, {r1, r2}
 800508c:	4851      	ldr	r0, [pc, #324]	@ (80051d4 <statemachine+0xb5c>)
 800508e:	f7fe ff59 	bl	8003f44 <ssd1306_WriteString>
							  if(BTN_B>=1){
 8005092:	4b49      	ldr	r3, [pc, #292]	@ (80051b8 <statemachine+0xb40>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	2b00      	cmp	r3, #0
 8005098:	dd2e      	ble.n	80050f8 <statemachine+0xa80>
							  														ecranstate--;
 800509a:	4b48      	ldr	r3, [pc, #288]	@ (80051bc <statemachine+0xb44>)
 800509c:	781b      	ldrb	r3, [r3, #0]
 800509e:	3b01      	subs	r3, #1
 80050a0:	b2da      	uxtb	r2, r3
 80050a2:	4b46      	ldr	r3, [pc, #280]	@ (80051bc <statemachine+0xb44>)
 80050a4:	701a      	strb	r2, [r3, #0]
							  														ecranstate--;
 80050a6:	4b45      	ldr	r3, [pc, #276]	@ (80051bc <statemachine+0xb44>)
 80050a8:	781b      	ldrb	r3, [r3, #0]
 80050aa:	3b01      	subs	r3, #1
 80050ac:	b2da      	uxtb	r2, r3
 80050ae:	4b43      	ldr	r3, [pc, #268]	@ (80051bc <statemachine+0xb44>)
 80050b0:	701a      	strb	r2, [r3, #0]
							  														ecranstate--;
 80050b2:	4b42      	ldr	r3, [pc, #264]	@ (80051bc <statemachine+0xb44>)
 80050b4:	781b      	ldrb	r3, [r3, #0]
 80050b6:	3b01      	subs	r3, #1
 80050b8:	b2da      	uxtb	r2, r3
 80050ba:	4b40      	ldr	r3, [pc, #256]	@ (80051bc <statemachine+0xb44>)
 80050bc:	701a      	strb	r2, [r3, #0]
							  														ecranstate--;
 80050be:	4b3f      	ldr	r3, [pc, #252]	@ (80051bc <statemachine+0xb44>)
 80050c0:	781b      	ldrb	r3, [r3, #0]
 80050c2:	3b01      	subs	r3, #1
 80050c4:	b2da      	uxtb	r2, r3
 80050c6:	4b3d      	ldr	r3, [pc, #244]	@ (80051bc <statemachine+0xb44>)
 80050c8:	701a      	strb	r2, [r3, #0]
							  														ecranstate--;
 80050ca:	4b3c      	ldr	r3, [pc, #240]	@ (80051bc <statemachine+0xb44>)
 80050cc:	781b      	ldrb	r3, [r3, #0]
 80050ce:	3b01      	subs	r3, #1
 80050d0:	b2da      	uxtb	r2, r3
 80050d2:	4b3a      	ldr	r3, [pc, #232]	@ (80051bc <statemachine+0xb44>)
 80050d4:	701a      	strb	r2, [r3, #0]
							  													  	BTN_B=0;
 80050d6:	4b38      	ldr	r3, [pc, #224]	@ (80051b8 <statemachine+0xb40>)
 80050d8:	2200      	movs	r2, #0
 80050da:	601a      	str	r2, [r3, #0]
							  													  	BTN_A=0;
 80050dc:	4b38      	ldr	r3, [pc, #224]	@ (80051c0 <statemachine+0xb48>)
 80050de:	2200      	movs	r2, #0
 80050e0:	601a      	str	r2, [r3, #0]
							  break;
 80050e2:	e009      	b.n	80050f8 <statemachine+0xa80>
							  break;
 80050e4:	bf00      	nop
 80050e6:	e008      	b.n	80050fa <statemachine+0xa82>
							  break;
 80050e8:	bf00      	nop
 80050ea:	e006      	b.n	80050fa <statemachine+0xa82>
							  break;
 80050ec:	bf00      	nop
 80050ee:	e004      	b.n	80050fa <statemachine+0xa82>
							  break;
 80050f0:	bf00      	nop
 80050f2:	e002      	b.n	80050fa <statemachine+0xa82>
							  break;
 80050f4:	bf00      	nop
 80050f6:	e000      	b.n	80050fa <statemachine+0xa82>
							  break;
 80050f8:	bf00      	nop
						 	batterygauge(vbat,79, 22,1);
 80050fa:	4b33      	ldr	r3, [pc, #204]	@ (80051c8 <statemachine+0xb50>)
 80050fc:	edd3 7a00 	vldr	s15, [r3]
 8005100:	2201      	movs	r2, #1
 8005102:	2116      	movs	r1, #22
 8005104:	204f      	movs	r0, #79	@ 0x4f
 8005106:	eeb0 0a67 	vmov.f32	s0, s15
 800510a:	f7ff f8d9 	bl	80042c0 <batterygauge>
						 	ssd1306_SetCursor(32,32);
 800510e:	2120      	movs	r1, #32
 8005110:	2020      	movs	r0, #32
 8005112:	f7fe ff3d 	bl	8003f90 <ssd1306_SetCursor>
						 	snprintf((char  *)bufferscreen,50, "%0.2fV",vbat);
 8005116:	4b2c      	ldr	r3, [pc, #176]	@ (80051c8 <statemachine+0xb50>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4618      	mov	r0, r3
 800511c:	f7fb f9ec 	bl	80004f8 <__aeabi_f2d>
 8005120:	4602      	mov	r2, r0
 8005122:	460b      	mov	r3, r1
 8005124:	e9cd 2300 	strd	r2, r3, [sp]
 8005128:	4a2b      	ldr	r2, [pc, #172]	@ (80051d8 <statemachine+0xb60>)
 800512a:	2132      	movs	r1, #50	@ 0x32
 800512c:	481e      	ldr	r0, [pc, #120]	@ (80051a8 <statemachine+0xb30>)
 800512e:	f016 fa6d 	bl	801b60c <sniprintf>
						 	ssd1306_WriteString((char *)bufferscreen,Font_6x8,White);
 8005132:	4a1f      	ldr	r2, [pc, #124]	@ (80051b0 <statemachine+0xb38>)
 8005134:	2301      	movs	r3, #1
 8005136:	ca06      	ldmia	r2, {r1, r2}
 8005138:	481b      	ldr	r0, [pc, #108]	@ (80051a8 <statemachine+0xb30>)
 800513a:	f7fe ff03 	bl	8003f44 <ssd1306_WriteString>
						 	ssd1306_SetCursor(65,32);
 800513e:	2120      	movs	r1, #32
 8005140:	2041      	movs	r0, #65	@ 0x41
 8005142:	f7fe ff25 	bl	8003f90 <ssd1306_SetCursor>
						 	snprintf((char  *)bufferscreen,50, "sat=%d",myData.satelliteCount);
 8005146:	4b16      	ldr	r3, [pc, #88]	@ (80051a0 <statemachine+0xb28>)
 8005148:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800514a:	4a24      	ldr	r2, [pc, #144]	@ (80051dc <statemachine+0xb64>)
 800514c:	2132      	movs	r1, #50	@ 0x32
 800514e:	4816      	ldr	r0, [pc, #88]	@ (80051a8 <statemachine+0xb30>)
 8005150:	f016 fa5c 	bl	801b60c <sniprintf>
						 	ssd1306_WriteString((char *)bufferscreen,Font_6x8,White);
 8005154:	4a16      	ldr	r2, [pc, #88]	@ (80051b0 <statemachine+0xb38>)
 8005156:	2301      	movs	r3, #1
 8005158:	ca06      	ldmia	r2, {r1, r2}
 800515a:	4813      	ldr	r0, [pc, #76]	@ (80051a8 <statemachine+0xb30>)
 800515c:	f7fe fef2 	bl	8003f44 <ssd1306_WriteString>
						  if(BTN_B_LONG>=1){
 8005160:	4b1f      	ldr	r3, [pc, #124]	@ (80051e0 <statemachine+0xb68>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	2b00      	cmp	r3, #0
 8005166:	f340 8098 	ble.w	800529a <statemachine+0xc22>
						  						  balisestate--;
 800516a:	4b1e      	ldr	r3, [pc, #120]	@ (80051e4 <statemachine+0xb6c>)
 800516c:	781b      	ldrb	r3, [r3, #0]
 800516e:	3b01      	subs	r3, #1
 8005170:	b2da      	uxtb	r2, r3
 8005172:	4b1c      	ldr	r3, [pc, #112]	@ (80051e4 <statemachine+0xb6c>)
 8005174:	701a      	strb	r2, [r3, #0]
						  						  BTN_B_LONG=0;
 8005176:	4b1a      	ldr	r3, [pc, #104]	@ (80051e0 <statemachine+0xb68>)
 8005178:	2200      	movs	r2, #0
 800517a:	601a      	str	r2, [r3, #0]
						  						  BTN_A=0;
 800517c:	4b10      	ldr	r3, [pc, #64]	@ (80051c0 <statemachine+0xb48>)
 800517e:	2200      	movs	r2, #0
 8005180:	601a      	str	r2, [r3, #0]
						  						  HAL_TIM_Base_Stop_IT(&htim17);
 8005182:	4819      	ldr	r0, [pc, #100]	@ (80051e8 <statemachine+0xb70>)
 8005184:	f009 ff3e 	bl	800f004 <HAL_TIM_Base_Stop_IT>
						  						HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1,GPIO_PIN_RESET);
 8005188:	2200      	movs	r2, #0
 800518a:	2102      	movs	r1, #2
 800518c:	4817      	ldr	r0, [pc, #92]	@ (80051ec <statemachine+0xb74>)
 800518e:	f004 f9f7 	bl	8009580 <HAL_GPIO_WritePin>
						  break;
 8005192:	e082      	b.n	800529a <statemachine+0xc22>
 8005194:	f3af 8000 	nop.w
 8005198:	cccccccd 	.word	0xcccccccd
 800519c:	400ccccc 	.word	0x400ccccc
 80051a0:	20000928 	.word	0x20000928
 80051a4:	0801fd18 	.word	0x0801fd18
 80051a8:	20000bc8 	.word	0x20000bc8
 80051ac:	2000001c 	.word	0x2000001c
 80051b0:	20000014 	.word	0x20000014
 80051b4:	0801fd20 	.word	0x0801fd20
 80051b8:	2000096c 	.word	0x2000096c
 80051bc:	20000ce8 	.word	0x20000ce8
 80051c0:	20000968 	.word	0x20000968
 80051c4:	0801fd94 	.word	0x0801fd94
 80051c8:	200009a0 	.word	0x200009a0
 80051cc:	0801fd9c 	.word	0x0801fd9c
 80051d0:	20000c3c 	.word	0x20000c3c
 80051d4:	0801fda4 	.word	0x0801fda4
 80051d8:	0801fdac 	.word	0x0801fdac
 80051dc:	0801fdb4 	.word	0x0801fdb4
 80051e0:	20000c9c 	.word	0x20000c9c
 80051e4:	200005d9 	.word	0x200005d9
 80051e8:	20001288 	.word	0x20001288
 80051ec:	48000400 	.word	0x48000400
						  ssd1306_SetCursor(32,12);
 80051f0:	210c      	movs	r1, #12
 80051f2:	2020      	movs	r0, #32
 80051f4:	f7fe fecc 	bl	8003f90 <ssd1306_SetCursor>
						  ssd1306_WriteString("fin de",Font_6x8,White);
 80051f8:	4a97      	ldr	r2, [pc, #604]	@ (8005458 <statemachine+0xde0>)
 80051fa:	2301      	movs	r3, #1
 80051fc:	ca06      	ldmia	r2, {r1, r2}
 80051fe:	4897      	ldr	r0, [pc, #604]	@ (800545c <statemachine+0xde4>)
 8005200:	f7fe fea0 	bl	8003f44 <ssd1306_WriteString>
						  ssd1306_SetCursor(32,22);
 8005204:	2116      	movs	r1, #22
 8005206:	2020      	movs	r0, #32
 8005208:	f7fe fec2 	bl	8003f90 <ssd1306_SetCursor>
						  ssd1306_WriteString("memoire",Font_6x8,White);
 800520c:	4a92      	ldr	r2, [pc, #584]	@ (8005458 <statemachine+0xde0>)
 800520e:	2301      	movs	r3, #1
 8005210:	ca06      	ldmia	r2, {r1, r2}
 8005212:	4893      	ldr	r0, [pc, #588]	@ (8005460 <statemachine+0xde8>)
 8005214:	f7fe fe96 	bl	8003f44 <ssd1306_WriteString>
						  ssd1306_SetCursor(32,32);
 8005218:	2120      	movs	r1, #32
 800521a:	2020      	movs	r0, #32
 800521c:	f7fe feb8 	bl	8003f90 <ssd1306_SetCursor>
						  snprintf((char *)bufferscreen,50,"%d,%d",pageoffset,pagenumber);
 8005220:	4b90      	ldr	r3, [pc, #576]	@ (8005464 <statemachine+0xdec>)
 8005222:	681a      	ldr	r2, [r3, #0]
 8005224:	4b90      	ldr	r3, [pc, #576]	@ (8005468 <statemachine+0xdf0>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	9300      	str	r3, [sp, #0]
 800522a:	4613      	mov	r3, r2
 800522c:	4a8f      	ldr	r2, [pc, #572]	@ (800546c <statemachine+0xdf4>)
 800522e:	2132      	movs	r1, #50	@ 0x32
 8005230:	488f      	ldr	r0, [pc, #572]	@ (8005470 <statemachine+0xdf8>)
 8005232:	f016 f9eb 	bl	801b60c <sniprintf>
						  ssd1306_WriteString((char *)bufferscreen,Font_6x8,White);
 8005236:	4a88      	ldr	r2, [pc, #544]	@ (8005458 <statemachine+0xde0>)
 8005238:	2301      	movs	r3, #1
 800523a:	ca06      	ldmia	r2, {r1, r2}
 800523c:	488c      	ldr	r0, [pc, #560]	@ (8005470 <statemachine+0xdf8>)
 800523e:	f7fe fe81 	bl	8003f44 <ssd1306_WriteString>
						  if(BTN_A>=1){
 8005242:	4b8c      	ldr	r3, [pc, #560]	@ (8005474 <statemachine+0xdfc>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	2b00      	cmp	r3, #0
 8005248:	dd0e      	ble.n	8005268 <statemachine+0xbf0>
						  				  			 	state++;
 800524a:	4b8b      	ldr	r3, [pc, #556]	@ (8005478 <statemachine+0xe00>)
 800524c:	781b      	ldrb	r3, [r3, #0]
 800524e:	3301      	adds	r3, #1
 8005250:	b2da      	uxtb	r2, r3
 8005252:	4b89      	ldr	r3, [pc, #548]	@ (8005478 <statemachine+0xe00>)
 8005254:	701a      	strb	r2, [r3, #0]
						  				  			 	BTN_A=0;
 8005256:	4b87      	ldr	r3, [pc, #540]	@ (8005474 <statemachine+0xdfc>)
 8005258:	2200      	movs	r2, #0
 800525a:	601a      	str	r2, [r3, #0]
						  				  			 	BTN_B=0;
 800525c:	4b87      	ldr	r3, [pc, #540]	@ (800547c <statemachine+0xe04>)
 800525e:	2200      	movs	r2, #0
 8005260:	601a      	str	r2, [r3, #0]
						  				  			settimeen=0;
 8005262:	4b87      	ldr	r3, [pc, #540]	@ (8005480 <statemachine+0xe08>)
 8005264:	2200      	movs	r2, #0
 8005266:	601a      	str	r2, [r3, #0]
						  if(BTN_A_LONG>=1){
 8005268:	4b86      	ldr	r3, [pc, #536]	@ (8005484 <statemachine+0xe0c>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	2b00      	cmp	r3, #0
 800526e:	f340 87b1 	ble.w	80061d4 <statemachine+0x1b5c>
						  				 									 									  			 	state--;
 8005272:	4b81      	ldr	r3, [pc, #516]	@ (8005478 <statemachine+0xe00>)
 8005274:	781b      	ldrb	r3, [r3, #0]
 8005276:	3b01      	subs	r3, #1
 8005278:	b2da      	uxtb	r2, r3
 800527a:	4b7f      	ldr	r3, [pc, #508]	@ (8005478 <statemachine+0xe00>)
 800527c:	701a      	strb	r2, [r3, #0]
						  				 									 									  			 	BTN_A=0;
 800527e:	4b7d      	ldr	r3, [pc, #500]	@ (8005474 <statemachine+0xdfc>)
 8005280:	2200      	movs	r2, #0
 8005282:	601a      	str	r2, [r3, #0]
						  				 									 									  			 	BTN_B=0;
 8005284:	4b7d      	ldr	r3, [pc, #500]	@ (800547c <statemachine+0xe04>)
 8005286:	2200      	movs	r2, #0
 8005288:	601a      	str	r2, [r3, #0]
						  				 									 									  			 	BTN_A_LONG=0;
 800528a:	4b7e      	ldr	r3, [pc, #504]	@ (8005484 <statemachine+0xe0c>)
 800528c:	2200      	movs	r2, #0
 800528e:	601a      	str	r2, [r3, #0]
					  break;
 8005290:	f000 bfa0 	b.w	80061d4 <statemachine+0x1b5c>
						  break;
 8005294:	bf00      	nop
 8005296:	f000 bf9d 	b.w	80061d4 <statemachine+0x1b5c>
						  break;
 800529a:	bf00      	nop
					  break;
 800529c:	f000 bf9a 	b.w	80061d4 <statemachine+0x1b5c>

	case STATE_POS:
			  ssd1306_Fill(Black);
 80052a0:	2000      	movs	r0, #0
 80052a2:	f7fe fd33 	bl	8003d0c <ssd1306_Fill>
			  nmea_parse(&myData, DataBuffer);
 80052a6:	4978      	ldr	r1, [pc, #480]	@ (8005488 <statemachine+0xe10>)
 80052a8:	4878      	ldr	r0, [pc, #480]	@ (800548c <statemachine+0xe14>)
 80052aa:	f7fd ffc3 	bl	8003234 <nmea_parse>
			  switch(posstate){
 80052ae:	4b78      	ldr	r3, [pc, #480]	@ (8005490 <statemachine+0xe18>)
 80052b0:	781b      	ldrb	r3, [r3, #0]
 80052b2:	2b05      	cmp	r3, #5
 80052b4:	f200 8326 	bhi.w	8005904 <statemachine+0x128c>
 80052b8:	a201      	add	r2, pc, #4	@ (adr r2, 80052c0 <statemachine+0xc48>)
 80052ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052be:	bf00      	nop
 80052c0:	080052d9 	.word	0x080052d9
 80052c4:	08005383 	.word	0x08005383
 80052c8:	080054bd 	.word	0x080054bd
 80052cc:	0800557b 	.word	0x0800557b
 80052d0:	08005639 	.word	0x08005639
 80052d4:	0800578d 	.word	0x0800578d

			  case STATE_SUMMARY1:

						ssd1306_SetCursor(32, 12);
 80052d8:	210c      	movs	r1, #12
 80052da:	2020      	movs	r0, #32
 80052dc:	f7fe fe58 	bl	8003f90 <ssd1306_SetCursor>
						snprintf((char *)bufferscreen,15, "Latitude:");
 80052e0:	4a6c      	ldr	r2, [pc, #432]	@ (8005494 <statemachine+0xe1c>)
 80052e2:	210f      	movs	r1, #15
 80052e4:	4862      	ldr	r0, [pc, #392]	@ (8005470 <statemachine+0xdf8>)
 80052e6:	f016 f991 	bl	801b60c <sniprintf>
						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 80052ea:	4a5b      	ldr	r2, [pc, #364]	@ (8005458 <statemachine+0xde0>)
 80052ec:	2301      	movs	r3, #1
 80052ee:	ca06      	ldmia	r2, {r1, r2}
 80052f0:	485f      	ldr	r0, [pc, #380]	@ (8005470 <statemachine+0xdf8>)
 80052f2:	f7fe fe27 	bl	8003f44 <ssd1306_WriteString>
						snprintf((char *)bufferscreen,15, "%0.7f",myData.latitude);//pas forcement utile d'afficher 7 decimales apres la virgule, 6 donne une precision au metre ce qui est le max du gps
 80052f6:	4b65      	ldr	r3, [pc, #404]	@ (800548c <statemachine+0xe14>)
 80052f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052fc:	e9cd 2300 	strd	r2, r3, [sp]
 8005300:	4a65      	ldr	r2, [pc, #404]	@ (8005498 <statemachine+0xe20>)
 8005302:	210f      	movs	r1, #15
 8005304:	485a      	ldr	r0, [pc, #360]	@ (8005470 <statemachine+0xdf8>)
 8005306:	f016 f981 	bl	801b60c <sniprintf>
						ssd1306_SetCursor(32, 20);
 800530a:	2114      	movs	r1, #20
 800530c:	2020      	movs	r0, #32
 800530e:	f7fe fe3f 	bl	8003f90 <ssd1306_SetCursor>
						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 8005312:	4a51      	ldr	r2, [pc, #324]	@ (8005458 <statemachine+0xde0>)
 8005314:	2301      	movs	r3, #1
 8005316:	ca06      	ldmia	r2, {r1, r2}
 8005318:	4855      	ldr	r0, [pc, #340]	@ (8005470 <statemachine+0xdf8>)
 800531a:	f7fe fe13 	bl	8003f44 <ssd1306_WriteString>
						snprintf((char *)bufferscreen,15, "Longitude:");
 800531e:	4a5f      	ldr	r2, [pc, #380]	@ (800549c <statemachine+0xe24>)
 8005320:	210f      	movs	r1, #15
 8005322:	4853      	ldr	r0, [pc, #332]	@ (8005470 <statemachine+0xdf8>)
 8005324:	f016 f972 	bl	801b60c <sniprintf>
						ssd1306_SetCursor(32, 28);
 8005328:	211c      	movs	r1, #28
 800532a:	2020      	movs	r0, #32
 800532c:	f7fe fe30 	bl	8003f90 <ssd1306_SetCursor>
						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 8005330:	4a49      	ldr	r2, [pc, #292]	@ (8005458 <statemachine+0xde0>)
 8005332:	2301      	movs	r3, #1
 8005334:	ca06      	ldmia	r2, {r1, r2}
 8005336:	484e      	ldr	r0, [pc, #312]	@ (8005470 <statemachine+0xdf8>)
 8005338:	f7fe fe04 	bl	8003f44 <ssd1306_WriteString>
						snprintf((char *)bufferscreen,15, "%0.7f",myData.longitude);
 800533c:	4b53      	ldr	r3, [pc, #332]	@ (800548c <statemachine+0xe14>)
 800533e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8005342:	e9cd 2300 	strd	r2, r3, [sp]
 8005346:	4a54      	ldr	r2, [pc, #336]	@ (8005498 <statemachine+0xe20>)
 8005348:	210f      	movs	r1, #15
 800534a:	4849      	ldr	r0, [pc, #292]	@ (8005470 <statemachine+0xdf8>)
 800534c:	f016 f95e 	bl	801b60c <sniprintf>
						ssd1306_SetCursor(32, 36);
 8005350:	2124      	movs	r1, #36	@ 0x24
 8005352:	2020      	movs	r0, #32
 8005354:	f7fe fe1c 	bl	8003f90 <ssd1306_SetCursor>
						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 8005358:	4a3f      	ldr	r2, [pc, #252]	@ (8005458 <statemachine+0xde0>)
 800535a:	2301      	movs	r3, #1
 800535c:	ca06      	ldmia	r2, {r1, r2}
 800535e:	4844      	ldr	r0, [pc, #272]	@ (8005470 <statemachine+0xdf8>)
 8005360:	f7fe fdf0 	bl	8003f44 <ssd1306_WriteString>
				  if(BTN_B>=1){
 8005364:	4b45      	ldr	r3, [pc, #276]	@ (800547c <statemachine+0xe04>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	2b00      	cmp	r3, #0
 800536a:	f340 82c0 	ble.w	80058ee <statemachine+0x1276>
					  posstate++;
 800536e:	4b48      	ldr	r3, [pc, #288]	@ (8005490 <statemachine+0xe18>)
 8005370:	781b      	ldrb	r3, [r3, #0]
 8005372:	3301      	adds	r3, #1
 8005374:	b2da      	uxtb	r2, r3
 8005376:	4b46      	ldr	r3, [pc, #280]	@ (8005490 <statemachine+0xe18>)
 8005378:	701a      	strb	r2, [r3, #0]
					  BTN_B=0;
 800537a:	4b40      	ldr	r3, [pc, #256]	@ (800547c <statemachine+0xe04>)
 800537c:	2200      	movs	r2, #0
 800537e:	601a      	str	r2, [r3, #0]
				  }



				  break;
 8005380:	e2b5      	b.n	80058ee <statemachine+0x1276>
			  case STATE_INFO:
				ssd1306_Fill(Black);
 8005382:	2000      	movs	r0, #0
 8005384:	f7fe fcc2 	bl	8003d0c <ssd1306_Fill>
				nmea_parse(&myData, DataBuffer);
 8005388:	493f      	ldr	r1, [pc, #252]	@ (8005488 <statemachine+0xe10>)
 800538a:	4840      	ldr	r0, [pc, #256]	@ (800548c <statemachine+0xe14>)
 800538c:	f7fd ff52 	bl	8003234 <nmea_parse>
				snprintf((char *)bufferscreen,15, "hdop=%.1f",myData.hdop);//sert a	connaitre la qualitée du fix si proche de 1 voir inférieur alors le fix est tres bon
 8005390:	4b3e      	ldr	r3, [pc, #248]	@ (800548c <statemachine+0xe14>)
 8005392:	6a1b      	ldr	r3, [r3, #32]
 8005394:	4618      	mov	r0, r3
 8005396:	f7fb f8af 	bl	80004f8 <__aeabi_f2d>
 800539a:	4602      	mov	r2, r0
 800539c:	460b      	mov	r3, r1
 800539e:	e9cd 2300 	strd	r2, r3, [sp]
 80053a2:	4a3f      	ldr	r2, [pc, #252]	@ (80054a0 <statemachine+0xe28>)
 80053a4:	210f      	movs	r1, #15
 80053a6:	4832      	ldr	r0, [pc, #200]	@ (8005470 <statemachine+0xdf8>)
 80053a8:	f016 f930 	bl	801b60c <sniprintf>
				ssd1306_SetCursor(32, 12);
 80053ac:	210c      	movs	r1, #12
 80053ae:	2020      	movs	r0, #32
 80053b0:	f7fe fdee 	bl	8003f90 <ssd1306_SetCursor>
				ssd1306_WriteString((char *)bufferscreen, Font_7x10, White);
 80053b4:	4a3b      	ldr	r2, [pc, #236]	@ (80054a4 <statemachine+0xe2c>)
 80053b6:	2301      	movs	r3, #1
 80053b8:	ca06      	ldmia	r2, {r1, r2}
 80053ba:	482d      	ldr	r0, [pc, #180]	@ (8005470 <statemachine+0xdf8>)
 80053bc:	f7fe fdc2 	bl	8003f44 <ssd1306_WriteString>
				snprintf((char *)bufferscreen,20, "v=%0.2fV",vbat);
 80053c0:	4b39      	ldr	r3, [pc, #228]	@ (80054a8 <statemachine+0xe30>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4618      	mov	r0, r3
 80053c6:	f7fb f897 	bl	80004f8 <__aeabi_f2d>
 80053ca:	4602      	mov	r2, r0
 80053cc:	460b      	mov	r3, r1
 80053ce:	e9cd 2300 	strd	r2, r3, [sp]
 80053d2:	4a36      	ldr	r2, [pc, #216]	@ (80054ac <statemachine+0xe34>)
 80053d4:	2114      	movs	r1, #20
 80053d6:	4826      	ldr	r0, [pc, #152]	@ (8005470 <statemachine+0xdf8>)
 80053d8:	f016 f918 	bl	801b60c <sniprintf>
				ssd1306_SetCursor(32, 22);
 80053dc:	2116      	movs	r1, #22
 80053de:	2020      	movs	r0, #32
 80053e0:	f7fe fdd6 	bl	8003f90 <ssd1306_SetCursor>
				ssd1306_WriteString((char *)bufferscreen, Font_7x10, White);
 80053e4:	4a2f      	ldr	r2, [pc, #188]	@ (80054a4 <statemachine+0xe2c>)
 80053e6:	2301      	movs	r3, #1
 80053e8:	ca06      	ldmia	r2, {r1, r2}
 80053ea:	4821      	ldr	r0, [pc, #132]	@ (8005470 <statemachine+0xdf8>)
 80053ec:	f7fe fdaa 	bl	8003f44 <ssd1306_WriteString>
				ssd1306_SetCursor(32, 32);
 80053f0:	2120      	movs	r1, #32
 80053f2:	2020      	movs	r0, #32
 80053f4:	f7fe fdcc 	bl	8003f90 <ssd1306_SetCursor>
				snprintf((char *)bufferscreen,15,  "T=%0.2fC",temp);
 80053f8:	4b2d      	ldr	r3, [pc, #180]	@ (80054b0 <statemachine+0xe38>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4618      	mov	r0, r3
 80053fe:	f7fb f87b 	bl	80004f8 <__aeabi_f2d>
 8005402:	4602      	mov	r2, r0
 8005404:	460b      	mov	r3, r1
 8005406:	e9cd 2300 	strd	r2, r3, [sp]
 800540a:	4a2a      	ldr	r2, [pc, #168]	@ (80054b4 <statemachine+0xe3c>)
 800540c:	210f      	movs	r1, #15
 800540e:	4818      	ldr	r0, [pc, #96]	@ (8005470 <statemachine+0xdf8>)
 8005410:	f016 f8fc 	bl	801b60c <sniprintf>
				ssd1306_WriteString((char *)bufferscreen, Font_7x10, White);
 8005414:	4a23      	ldr	r2, [pc, #140]	@ (80054a4 <statemachine+0xe2c>)
 8005416:	2301      	movs	r3, #1
 8005418:	ca06      	ldmia	r2, {r1, r2}
 800541a:	4815      	ldr	r0, [pc, #84]	@ (8005470 <statemachine+0xdf8>)
 800541c:	f7fe fd92 	bl	8003f44 <ssd1306_WriteString>
				 if(BTN_B>=1){
 8005420:	4b16      	ldr	r3, [pc, #88]	@ (800547c <statemachine+0xe04>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	2b00      	cmp	r3, #0
 8005426:	dd08      	ble.n	800543a <statemachine+0xdc2>
								  					  posstate++;
 8005428:	4b19      	ldr	r3, [pc, #100]	@ (8005490 <statemachine+0xe18>)
 800542a:	781b      	ldrb	r3, [r3, #0]
 800542c:	3301      	adds	r3, #1
 800542e:	b2da      	uxtb	r2, r3
 8005430:	4b17      	ldr	r3, [pc, #92]	@ (8005490 <statemachine+0xe18>)
 8005432:	701a      	strb	r2, [r3, #0]
								  					  BTN_B=0;
 8005434:	4b11      	ldr	r3, [pc, #68]	@ (800547c <statemachine+0xe04>)
 8005436:	2200      	movs	r2, #0
 8005438:	601a      	str	r2, [r3, #0]
								  				  }
								  if(BTN_B_LONG>=1){
 800543a:	4b1f      	ldr	r3, [pc, #124]	@ (80054b8 <statemachine+0xe40>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	2b00      	cmp	r3, #0
 8005440:	f340 8257 	ble.w	80058f2 <statemachine+0x127a>
													  posstate--;
 8005444:	4b12      	ldr	r3, [pc, #72]	@ (8005490 <statemachine+0xe18>)
 8005446:	781b      	ldrb	r3, [r3, #0]
 8005448:	3b01      	subs	r3, #1
 800544a:	b2da      	uxtb	r2, r3
 800544c:	4b10      	ldr	r3, [pc, #64]	@ (8005490 <statemachine+0xe18>)
 800544e:	701a      	strb	r2, [r3, #0]
													BTN_B_LONG=0;
 8005450:	4b19      	ldr	r3, [pc, #100]	@ (80054b8 <statemachine+0xe40>)
 8005452:	2200      	movs	r2, #0
 8005454:	601a      	str	r2, [r3, #0]
												}

				  break;
 8005456:	e24c      	b.n	80058f2 <statemachine+0x127a>
 8005458:	20000014 	.word	0x20000014
 800545c:	0801fdbc 	.word	0x0801fdbc
 8005460:	0801fdc4 	.word	0x0801fdc4
 8005464:	20000ba4 	.word	0x20000ba4
 8005468:	20000ba8 	.word	0x20000ba8
 800546c:	0801fdcc 	.word	0x0801fdcc
 8005470:	20000bc8 	.word	0x20000bc8
 8005474:	20000968 	.word	0x20000968
 8005478:	200005d4 	.word	0x200005d4
 800547c:	2000096c 	.word	0x2000096c
 8005480:	20000c88 	.word	0x20000c88
 8005484:	20000ca0 	.word	0x20000ca0
 8005488:	20000620 	.word	0x20000620
 800548c:	20000928 	.word	0x20000928
 8005490:	200005d6 	.word	0x200005d6
 8005494:	0801fdd4 	.word	0x0801fdd4
 8005498:	0801fde0 	.word	0x0801fde0
 800549c:	0801fde8 	.word	0x0801fde8
 80054a0:	0801fdf4 	.word	0x0801fdf4
 80054a4:	2000001c 	.word	0x2000001c
 80054a8:	200009a0 	.word	0x200009a0
 80054ac:	0801fe00 	.word	0x0801fe00
 80054b0:	20000998 	.word	0x20000998
 80054b4:	0801fe0c 	.word	0x0801fe0c
 80054b8:	20000c9c 	.word	0x20000c9c
			  case STATE_LAT:
						ssd1306_SetCursor(32, 12);
 80054bc:	210c      	movs	r1, #12
 80054be:	2020      	movs	r0, #32
 80054c0:	f7fe fd66 	bl	8003f90 <ssd1306_SetCursor>
						snprintf((char *)bufferscreen,15, "LatSide:");
 80054c4:	4aa0      	ldr	r2, [pc, #640]	@ (8005748 <statemachine+0x10d0>)
 80054c6:	210f      	movs	r1, #15
 80054c8:	48a0      	ldr	r0, [pc, #640]	@ (800574c <statemachine+0x10d4>)
 80054ca:	f016 f89f 	bl	801b60c <sniprintf>
						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 80054ce:	4aa0      	ldr	r2, [pc, #640]	@ (8005750 <statemachine+0x10d8>)
 80054d0:	2301      	movs	r3, #1
 80054d2:	ca06      	ldmia	r2, {r1, r2}
 80054d4:	489d      	ldr	r0, [pc, #628]	@ (800574c <statemachine+0x10d4>)
 80054d6:	f7fe fd35 	bl	8003f44 <ssd1306_WriteString>
						snprintf((char *)bufferscreen,15, "%c",myData.latSide);//pas forcement utile d'afficher 7 decimales apres la virgule, 6 donne une precision au metre ce qui est le max du gps
 80054da:	4b9e      	ldr	r3, [pc, #632]	@ (8005754 <statemachine+0x10dc>)
 80054dc:	7a1b      	ldrb	r3, [r3, #8]
 80054de:	4a9e      	ldr	r2, [pc, #632]	@ (8005758 <statemachine+0x10e0>)
 80054e0:	210f      	movs	r1, #15
 80054e2:	489a      	ldr	r0, [pc, #616]	@ (800574c <statemachine+0x10d4>)
 80054e4:	f016 f892 	bl	801b60c <sniprintf>
						ssd1306_SetCursor(32, 20);
 80054e8:	2114      	movs	r1, #20
 80054ea:	2020      	movs	r0, #32
 80054ec:	f7fe fd50 	bl	8003f90 <ssd1306_SetCursor>
						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 80054f0:	4a97      	ldr	r2, [pc, #604]	@ (8005750 <statemachine+0x10d8>)
 80054f2:	2301      	movs	r3, #1
 80054f4:	ca06      	ldmia	r2, {r1, r2}
 80054f6:	4895      	ldr	r0, [pc, #596]	@ (800574c <statemachine+0x10d4>)
 80054f8:	f7fe fd24 	bl	8003f44 <ssd1306_WriteString>
						snprintf((char *)bufferscreen,15, "Latitude:");
 80054fc:	4a97      	ldr	r2, [pc, #604]	@ (800575c <statemachine+0x10e4>)
 80054fe:	210f      	movs	r1, #15
 8005500:	4892      	ldr	r0, [pc, #584]	@ (800574c <statemachine+0x10d4>)
 8005502:	f016 f883 	bl	801b60c <sniprintf>
						ssd1306_SetCursor(32, 28);
 8005506:	211c      	movs	r1, #28
 8005508:	2020      	movs	r0, #32
 800550a:	f7fe fd41 	bl	8003f90 <ssd1306_SetCursor>
						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 800550e:	4a90      	ldr	r2, [pc, #576]	@ (8005750 <statemachine+0x10d8>)
 8005510:	2301      	movs	r3, #1
 8005512:	ca06      	ldmia	r2, {r1, r2}
 8005514:	488d      	ldr	r0, [pc, #564]	@ (800574c <statemachine+0x10d4>)
 8005516:	f7fe fd15 	bl	8003f44 <ssd1306_WriteString>
						snprintf((char *)bufferscreen,15, "%0.7f",myData.latitude);
 800551a:	4b8e      	ldr	r3, [pc, #568]	@ (8005754 <statemachine+0x10dc>)
 800551c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005520:	e9cd 2300 	strd	r2, r3, [sp]
 8005524:	4a8e      	ldr	r2, [pc, #568]	@ (8005760 <statemachine+0x10e8>)
 8005526:	210f      	movs	r1, #15
 8005528:	4888      	ldr	r0, [pc, #544]	@ (800574c <statemachine+0x10d4>)
 800552a:	f016 f86f 	bl	801b60c <sniprintf>
						ssd1306_SetCursor(32, 36);
 800552e:	2124      	movs	r1, #36	@ 0x24
 8005530:	2020      	movs	r0, #32
 8005532:	f7fe fd2d 	bl	8003f90 <ssd1306_SetCursor>
						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 8005536:	4a86      	ldr	r2, [pc, #536]	@ (8005750 <statemachine+0x10d8>)
 8005538:	2301      	movs	r3, #1
 800553a:	ca06      	ldmia	r2, {r1, r2}
 800553c:	4883      	ldr	r0, [pc, #524]	@ (800574c <statemachine+0x10d4>)
 800553e:	f7fe fd01 	bl	8003f44 <ssd1306_WriteString>


				  if(BTN_B>=1){
 8005542:	4b88      	ldr	r3, [pc, #544]	@ (8005764 <statemachine+0x10ec>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	2b00      	cmp	r3, #0
 8005548:	dd08      	ble.n	800555c <statemachine+0xee4>
				  					  posstate++;
 800554a:	4b87      	ldr	r3, [pc, #540]	@ (8005768 <statemachine+0x10f0>)
 800554c:	781b      	ldrb	r3, [r3, #0]
 800554e:	3301      	adds	r3, #1
 8005550:	b2da      	uxtb	r2, r3
 8005552:	4b85      	ldr	r3, [pc, #532]	@ (8005768 <statemachine+0x10f0>)
 8005554:	701a      	strb	r2, [r3, #0]
				  					  BTN_B=0;
 8005556:	4b83      	ldr	r3, [pc, #524]	@ (8005764 <statemachine+0x10ec>)
 8005558:	2200      	movs	r2, #0
 800555a:	601a      	str	r2, [r3, #0]
				  				  }
				  if(BTN_B_LONG>=1){
 800555c:	4b83      	ldr	r3, [pc, #524]	@ (800576c <statemachine+0x10f4>)
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	2b00      	cmp	r3, #0
 8005562:	f340 81c8 	ble.w	80058f6 <statemachine+0x127e>
									  posstate--;
 8005566:	4b80      	ldr	r3, [pc, #512]	@ (8005768 <statemachine+0x10f0>)
 8005568:	781b      	ldrb	r3, [r3, #0]
 800556a:	3b01      	subs	r3, #1
 800556c:	b2da      	uxtb	r2, r3
 800556e:	4b7e      	ldr	r3, [pc, #504]	@ (8005768 <statemachine+0x10f0>)
 8005570:	701a      	strb	r2, [r3, #0]
									BTN_B_LONG=0;
 8005572:	4b7e      	ldr	r3, [pc, #504]	@ (800576c <statemachine+0x10f4>)
 8005574:	2200      	movs	r2, #0
 8005576:	601a      	str	r2, [r3, #0]
								}



				  break;
 8005578:	e1bd      	b.n	80058f6 <statemachine+0x127e>
			  case STATE_LONG:

					ssd1306_SetCursor(32, 12);
 800557a:	210c      	movs	r1, #12
 800557c:	2020      	movs	r0, #32
 800557e:	f7fe fd07 	bl	8003f90 <ssd1306_SetCursor>
					snprintf((char *)bufferscreen,15, "LonSide:");
 8005582:	4a7b      	ldr	r2, [pc, #492]	@ (8005770 <statemachine+0x10f8>)
 8005584:	210f      	movs	r1, #15
 8005586:	4871      	ldr	r0, [pc, #452]	@ (800574c <statemachine+0x10d4>)
 8005588:	f016 f840 	bl	801b60c <sniprintf>
					ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 800558c:	4a70      	ldr	r2, [pc, #448]	@ (8005750 <statemachine+0x10d8>)
 800558e:	2301      	movs	r3, #1
 8005590:	ca06      	ldmia	r2, {r1, r2}
 8005592:	486e      	ldr	r0, [pc, #440]	@ (800574c <statemachine+0x10d4>)
 8005594:	f7fe fcd6 	bl	8003f44 <ssd1306_WriteString>
					snprintf((char *)bufferscreen,15, "%c",myData.lonSide);//pas forcement utile d'afficher 7 decimales apres la virgule, 6 donne une precision au metre ce qui est le max du gps
 8005598:	4b6e      	ldr	r3, [pc, #440]	@ (8005754 <statemachine+0x10dc>)
 800559a:	7e1b      	ldrb	r3, [r3, #24]
 800559c:	4a6e      	ldr	r2, [pc, #440]	@ (8005758 <statemachine+0x10e0>)
 800559e:	210f      	movs	r1, #15
 80055a0:	486a      	ldr	r0, [pc, #424]	@ (800574c <statemachine+0x10d4>)
 80055a2:	f016 f833 	bl	801b60c <sniprintf>
					ssd1306_SetCursor(32, 20);
 80055a6:	2114      	movs	r1, #20
 80055a8:	2020      	movs	r0, #32
 80055aa:	f7fe fcf1 	bl	8003f90 <ssd1306_SetCursor>
					ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 80055ae:	4a68      	ldr	r2, [pc, #416]	@ (8005750 <statemachine+0x10d8>)
 80055b0:	2301      	movs	r3, #1
 80055b2:	ca06      	ldmia	r2, {r1, r2}
 80055b4:	4865      	ldr	r0, [pc, #404]	@ (800574c <statemachine+0x10d4>)
 80055b6:	f7fe fcc5 	bl	8003f44 <ssd1306_WriteString>
					snprintf((char *)bufferscreen,15, "Longitude:");
 80055ba:	4a6e      	ldr	r2, [pc, #440]	@ (8005774 <statemachine+0x10fc>)
 80055bc:	210f      	movs	r1, #15
 80055be:	4863      	ldr	r0, [pc, #396]	@ (800574c <statemachine+0x10d4>)
 80055c0:	f016 f824 	bl	801b60c <sniprintf>
					ssd1306_SetCursor(32, 28);
 80055c4:	211c      	movs	r1, #28
 80055c6:	2020      	movs	r0, #32
 80055c8:	f7fe fce2 	bl	8003f90 <ssd1306_SetCursor>
					ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 80055cc:	4a60      	ldr	r2, [pc, #384]	@ (8005750 <statemachine+0x10d8>)
 80055ce:	2301      	movs	r3, #1
 80055d0:	ca06      	ldmia	r2, {r1, r2}
 80055d2:	485e      	ldr	r0, [pc, #376]	@ (800574c <statemachine+0x10d4>)
 80055d4:	f7fe fcb6 	bl	8003f44 <ssd1306_WriteString>
					snprintf((char *)bufferscreen,15, "%0.7f",myData.longitude);
 80055d8:	4b5e      	ldr	r3, [pc, #376]	@ (8005754 <statemachine+0x10dc>)
 80055da:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80055de:	e9cd 2300 	strd	r2, r3, [sp]
 80055e2:	4a5f      	ldr	r2, [pc, #380]	@ (8005760 <statemachine+0x10e8>)
 80055e4:	210f      	movs	r1, #15
 80055e6:	4859      	ldr	r0, [pc, #356]	@ (800574c <statemachine+0x10d4>)
 80055e8:	f016 f810 	bl	801b60c <sniprintf>
					ssd1306_SetCursor(32, 36);
 80055ec:	2124      	movs	r1, #36	@ 0x24
 80055ee:	2020      	movs	r0, #32
 80055f0:	f7fe fcce 	bl	8003f90 <ssd1306_SetCursor>
					ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 80055f4:	4a56      	ldr	r2, [pc, #344]	@ (8005750 <statemachine+0x10d8>)
 80055f6:	2301      	movs	r3, #1
 80055f8:	ca06      	ldmia	r2, {r1, r2}
 80055fa:	4854      	ldr	r0, [pc, #336]	@ (800574c <statemachine+0x10d4>)
 80055fc:	f7fe fca2 	bl	8003f44 <ssd1306_WriteString>

				  if(BTN_B>=1){
 8005600:	4b58      	ldr	r3, [pc, #352]	@ (8005764 <statemachine+0x10ec>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	2b00      	cmp	r3, #0
 8005606:	dd08      	ble.n	800561a <statemachine+0xfa2>
				  					  posstate++;
 8005608:	4b57      	ldr	r3, [pc, #348]	@ (8005768 <statemachine+0x10f0>)
 800560a:	781b      	ldrb	r3, [r3, #0]
 800560c:	3301      	adds	r3, #1
 800560e:	b2da      	uxtb	r2, r3
 8005610:	4b55      	ldr	r3, [pc, #340]	@ (8005768 <statemachine+0x10f0>)
 8005612:	701a      	strb	r2, [r3, #0]
				  					  BTN_B=0;
 8005614:	4b53      	ldr	r3, [pc, #332]	@ (8005764 <statemachine+0x10ec>)
 8005616:	2200      	movs	r2, #0
 8005618:	601a      	str	r2, [r3, #0]
				  				  }
				  if(BTN_B_LONG>=1){
 800561a:	4b54      	ldr	r3, [pc, #336]	@ (800576c <statemachine+0x10f4>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	2b00      	cmp	r3, #0
 8005620:	f340 816b 	ble.w	80058fa <statemachine+0x1282>
									  posstate--;
 8005624:	4b50      	ldr	r3, [pc, #320]	@ (8005768 <statemachine+0x10f0>)
 8005626:	781b      	ldrb	r3, [r3, #0]
 8005628:	3b01      	subs	r3, #1
 800562a:	b2da      	uxtb	r2, r3
 800562c:	4b4e      	ldr	r3, [pc, #312]	@ (8005768 <statemachine+0x10f0>)
 800562e:	701a      	strb	r2, [r3, #0]
									BTN_B_LONG=0;
 8005630:	4b4e      	ldr	r3, [pc, #312]	@ (800576c <statemachine+0x10f4>)
 8005632:	2200      	movs	r2, #0
 8005634:	601a      	str	r2, [r3, #0]
								}

				  break;
 8005636:	e160      	b.n	80058fa <statemachine+0x1282>
			  case STATE_ALT:


				  						ssd1306_SetCursor(32, 12);
 8005638:	210c      	movs	r1, #12
 800563a:	2020      	movs	r0, #32
 800563c:	f7fe fca8 	bl	8003f90 <ssd1306_SetCursor>
				  						snprintf((char *)bufferscreen,15, "altitude:");
 8005640:	4a4d      	ldr	r2, [pc, #308]	@ (8005778 <statemachine+0x1100>)
 8005642:	210f      	movs	r1, #15
 8005644:	4841      	ldr	r0, [pc, #260]	@ (800574c <statemachine+0x10d4>)
 8005646:	f015 ffe1 	bl	801b60c <sniprintf>
				  						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 800564a:	4a41      	ldr	r2, [pc, #260]	@ (8005750 <statemachine+0x10d8>)
 800564c:	2301      	movs	r3, #1
 800564e:	ca06      	ldmia	r2, {r1, r2}
 8005650:	483e      	ldr	r0, [pc, #248]	@ (800574c <statemachine+0x10d4>)
 8005652:	f7fe fc77 	bl	8003f44 <ssd1306_WriteString>
				  						snprintf((char *)bufferscreen,15, "%0.1f m",myData.altitude);//pas forcement utile d'afficher 7 decimales apres la virgule, 6 donne une precision au metre ce qui est le max du gps
 8005656:	4b3f      	ldr	r3, [pc, #252]	@ (8005754 <statemachine+0x10dc>)
 8005658:	69db      	ldr	r3, [r3, #28]
 800565a:	4618      	mov	r0, r3
 800565c:	f7fa ff4c 	bl	80004f8 <__aeabi_f2d>
 8005660:	4602      	mov	r2, r0
 8005662:	460b      	mov	r3, r1
 8005664:	e9cd 2300 	strd	r2, r3, [sp]
 8005668:	4a44      	ldr	r2, [pc, #272]	@ (800577c <statemachine+0x1104>)
 800566a:	210f      	movs	r1, #15
 800566c:	4837      	ldr	r0, [pc, #220]	@ (800574c <statemachine+0x10d4>)
 800566e:	f015 ffcd 	bl	801b60c <sniprintf>
				  						ssd1306_SetCursor(32, 20);
 8005672:	2114      	movs	r1, #20
 8005674:	2020      	movs	r0, #32
 8005676:	f7fe fc8b 	bl	8003f90 <ssd1306_SetCursor>
				  						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 800567a:	4a35      	ldr	r2, [pc, #212]	@ (8005750 <statemachine+0x10d8>)
 800567c:	2301      	movs	r3, #1
 800567e:	ca06      	ldmia	r2, {r1, r2}
 8005680:	4832      	ldr	r0, [pc, #200]	@ (800574c <statemachine+0x10d4>)
 8005682:	f7fe fc5f 	bl	8003f44 <ssd1306_WriteString>
				  						snprintf((char *)bufferscreen,15, "Pressure:");
 8005686:	4a3e      	ldr	r2, [pc, #248]	@ (8005780 <statemachine+0x1108>)
 8005688:	210f      	movs	r1, #15
 800568a:	4830      	ldr	r0, [pc, #192]	@ (800574c <statemachine+0x10d4>)
 800568c:	f015 ffbe 	bl	801b60c <sniprintf>
				  						ssd1306_SetCursor(32, 28);
 8005690:	211c      	movs	r1, #28
 8005692:	2020      	movs	r0, #32
 8005694:	f7fe fc7c 	bl	8003f90 <ssd1306_SetCursor>
				  						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 8005698:	4a2d      	ldr	r2, [pc, #180]	@ (8005750 <statemachine+0x10d8>)
 800569a:	2301      	movs	r3, #1
 800569c:	ca06      	ldmia	r2, {r1, r2}
 800569e:	482b      	ldr	r0, [pc, #172]	@ (800574c <statemachine+0x10d4>)
 80056a0:	f7fe fc50 	bl	8003f44 <ssd1306_WriteString>
				  						snprintf((char *)bufferscreen,15, "%0.1fhpa",1000*expf((-0.0001148)*(myData.altitude)));
 80056a4:	4b2b      	ldr	r3, [pc, #172]	@ (8005754 <statemachine+0x10dc>)
 80056a6:	69db      	ldr	r3, [r3, #28]
 80056a8:	4618      	mov	r0, r3
 80056aa:	f7fa ff25 	bl	80004f8 <__aeabi_f2d>
 80056ae:	a324      	add	r3, pc, #144	@ (adr r3, 8005740 <statemachine+0x10c8>)
 80056b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056b4:	f7fa ff78 	bl	80005a8 <__aeabi_dmul>
 80056b8:	4602      	mov	r2, r0
 80056ba:	460b      	mov	r3, r1
 80056bc:	4610      	mov	r0, r2
 80056be:	4619      	mov	r1, r3
 80056c0:	f7fb fa6a 	bl	8000b98 <__aeabi_d2f>
 80056c4:	4603      	mov	r3, r0
 80056c6:	ee00 3a10 	vmov	s0, r3
 80056ca:	f018 fdf5 	bl	801e2b8 <expf>
 80056ce:	eef0 7a40 	vmov.f32	s15, s0
 80056d2:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8005784 <statemachine+0x110c>
 80056d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80056da:	ee17 0a90 	vmov	r0, s15
 80056de:	f7fa ff0b 	bl	80004f8 <__aeabi_f2d>
 80056e2:	4602      	mov	r2, r0
 80056e4:	460b      	mov	r3, r1
 80056e6:	e9cd 2300 	strd	r2, r3, [sp]
 80056ea:	4a27      	ldr	r2, [pc, #156]	@ (8005788 <statemachine+0x1110>)
 80056ec:	210f      	movs	r1, #15
 80056ee:	4817      	ldr	r0, [pc, #92]	@ (800574c <statemachine+0x10d4>)
 80056f0:	f015 ff8c 	bl	801b60c <sniprintf>
				  						ssd1306_SetCursor(32, 36);
 80056f4:	2124      	movs	r1, #36	@ 0x24
 80056f6:	2020      	movs	r0, #32
 80056f8:	f7fe fc4a 	bl	8003f90 <ssd1306_SetCursor>
				  						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 80056fc:	4a14      	ldr	r2, [pc, #80]	@ (8005750 <statemachine+0x10d8>)
 80056fe:	2301      	movs	r3, #1
 8005700:	ca06      	ldmia	r2, {r1, r2}
 8005702:	4812      	ldr	r0, [pc, #72]	@ (800574c <statemachine+0x10d4>)
 8005704:	f7fe fc1e 	bl	8003f44 <ssd1306_WriteString>

				  if(BTN_B>=1){
 8005708:	4b16      	ldr	r3, [pc, #88]	@ (8005764 <statemachine+0x10ec>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	2b00      	cmp	r3, #0
 800570e:	dd08      	ble.n	8005722 <statemachine+0x10aa>
				  					posstate++;
 8005710:	4b15      	ldr	r3, [pc, #84]	@ (8005768 <statemachine+0x10f0>)
 8005712:	781b      	ldrb	r3, [r3, #0]
 8005714:	3301      	adds	r3, #1
 8005716:	b2da      	uxtb	r2, r3
 8005718:	4b13      	ldr	r3, [pc, #76]	@ (8005768 <statemachine+0x10f0>)
 800571a:	701a      	strb	r2, [r3, #0]
				  					BTN_B=0;
 800571c:	4b11      	ldr	r3, [pc, #68]	@ (8005764 <statemachine+0x10ec>)
 800571e:	2200      	movs	r2, #0
 8005720:	601a      	str	r2, [r3, #0]
				  				  }
				  if(BTN_B_LONG>=1){
 8005722:	4b12      	ldr	r3, [pc, #72]	@ (800576c <statemachine+0x10f4>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	2b00      	cmp	r3, #0
 8005728:	f340 80e9 	ble.w	80058fe <statemachine+0x1286>
					  posstate--;
 800572c:	4b0e      	ldr	r3, [pc, #56]	@ (8005768 <statemachine+0x10f0>)
 800572e:	781b      	ldrb	r3, [r3, #0]
 8005730:	3b01      	subs	r3, #1
 8005732:	b2da      	uxtb	r2, r3
 8005734:	4b0c      	ldr	r3, [pc, #48]	@ (8005768 <statemachine+0x10f0>)
 8005736:	701a      	strb	r2, [r3, #0]
					BTN_B_LONG=0;
 8005738:	4b0c      	ldr	r3, [pc, #48]	@ (800576c <statemachine+0x10f4>)
 800573a:	2200      	movs	r2, #0
 800573c:	601a      	str	r2, [r3, #0]
				}
				  break;
 800573e:	e0de      	b.n	80058fe <statemachine+0x1286>
 8005740:	fb798882 	.word	0xfb798882
 8005744:	bf1e1818 	.word	0xbf1e1818
 8005748:	0801fe18 	.word	0x0801fe18
 800574c:	20000bc8 	.word	0x20000bc8
 8005750:	20000014 	.word	0x20000014
 8005754:	20000928 	.word	0x20000928
 8005758:	0801fe24 	.word	0x0801fe24
 800575c:	0801fdd4 	.word	0x0801fdd4
 8005760:	0801fde0 	.word	0x0801fde0
 8005764:	2000096c 	.word	0x2000096c
 8005768:	200005d6 	.word	0x200005d6
 800576c:	20000c9c 	.word	0x20000c9c
 8005770:	0801fe28 	.word	0x0801fe28
 8005774:	0801fde8 	.word	0x0801fde8
 8005778:	0801fe34 	.word	0x0801fe34
 800577c:	0801fe40 	.word	0x0801fe40
 8005780:	0801fe48 	.word	0x0801fe48
 8005784:	447a0000 	.word	0x447a0000
 8005788:	0801fe54 	.word	0x0801fe54
			  case STATE_HEURE:
			  			  ssd1306_Fill(Black);
 800578c:	2000      	movs	r0, #0
 800578e:	f7fe fabd 	bl	8003d0c <ssd1306_Fill>
			  			  nmea_parse(&myData, DataBuffer);
 8005792:	4999      	ldr	r1, [pc, #612]	@ (80059f8 <statemachine+0x1380>)
 8005794:	4899      	ldr	r0, [pc, #612]	@ (80059fc <statemachine+0x1384>)
 8005796:	f7fd fd4d 	bl	8003234 <nmea_parse>
			  			  if(settimeen==0){
 800579a:	4b99      	ldr	r3, [pc, #612]	@ (8005a00 <statemachine+0x1388>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d141      	bne.n	8005826 <statemachine+0x11ae>

			  							settimeen=1;
 80057a2:	4b97      	ldr	r3, [pc, #604]	@ (8005a00 <statemachine+0x1388>)
 80057a4:	2201      	movs	r2, #1
 80057a6:	601a      	str	r2, [r3, #0]
			  							HR=(myData.lastMeasure[0]&0x0f)*10+(myData.lastMeasure[1]&0x0f);
 80057a8:	4b94      	ldr	r3, [pc, #592]	@ (80059fc <statemachine+0x1384>)
 80057aa:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80057ae:	f003 030f 	and.w	r3, r3, #15
 80057b2:	b2db      	uxtb	r3, r3
 80057b4:	461a      	mov	r2, r3
 80057b6:	0092      	lsls	r2, r2, #2
 80057b8:	4413      	add	r3, r2
 80057ba:	005b      	lsls	r3, r3, #1
 80057bc:	b2da      	uxtb	r2, r3
 80057be:	4b8f      	ldr	r3, [pc, #572]	@ (80059fc <statemachine+0x1384>)
 80057c0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80057c4:	f003 030f 	and.w	r3, r3, #15
 80057c8:	b2db      	uxtb	r3, r3
 80057ca:	4413      	add	r3, r2
 80057cc:	b2da      	uxtb	r2, r3
 80057ce:	4b8d      	ldr	r3, [pc, #564]	@ (8005a04 <statemachine+0x138c>)
 80057d0:	701a      	strb	r2, [r3, #0]
			  							MINUTE=(myData.lastMeasure[2]&0x0f)*10+(myData.lastMeasure[3]&0x0f);
 80057d2:	4b8a      	ldr	r3, [pc, #552]	@ (80059fc <statemachine+0x1384>)
 80057d4:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 80057d8:	f003 030f 	and.w	r3, r3, #15
 80057dc:	b2db      	uxtb	r3, r3
 80057de:	461a      	mov	r2, r3
 80057e0:	0092      	lsls	r2, r2, #2
 80057e2:	4413      	add	r3, r2
 80057e4:	005b      	lsls	r3, r3, #1
 80057e6:	b2da      	uxtb	r2, r3
 80057e8:	4b84      	ldr	r3, [pc, #528]	@ (80059fc <statemachine+0x1384>)
 80057ea:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80057ee:	f003 030f 	and.w	r3, r3, #15
 80057f2:	b2db      	uxtb	r3, r3
 80057f4:	4413      	add	r3, r2
 80057f6:	b2da      	uxtb	r2, r3
 80057f8:	4b83      	ldr	r3, [pc, #524]	@ (8005a08 <statemachine+0x1390>)
 80057fa:	701a      	strb	r2, [r3, #0]
			  							SEC=(myData.lastMeasure[4]&0x0f)*10+(myData.lastMeasure[5]&0x0f);
 80057fc:	4b7f      	ldr	r3, [pc, #508]	@ (80059fc <statemachine+0x1384>)
 80057fe:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005802:	f003 030f 	and.w	r3, r3, #15
 8005806:	b2db      	uxtb	r3, r3
 8005808:	461a      	mov	r2, r3
 800580a:	0092      	lsls	r2, r2, #2
 800580c:	4413      	add	r3, r2
 800580e:	005b      	lsls	r3, r3, #1
 8005810:	b2da      	uxtb	r2, r3
 8005812:	4b7a      	ldr	r3, [pc, #488]	@ (80059fc <statemachine+0x1384>)
 8005814:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8005818:	f003 030f 	and.w	r3, r3, #15
 800581c:	b2db      	uxtb	r3, r3
 800581e:	4413      	add	r3, r2
 8005820:	b2da      	uxtb	r2, r3
 8005822:	4b7a      	ldr	r3, [pc, #488]	@ (8005a0c <statemachine+0x1394>)
 8005824:	701a      	strb	r2, [r3, #0]


			  					  }


			  				  ssd1306_SetCursor(32, 12);
 8005826:	210c      	movs	r1, #12
 8005828:	2020      	movs	r0, #32
 800582a:	f7fe fbb1 	bl	8003f90 <ssd1306_SetCursor>
			  				  ssd1306_WriteString("hr GMT:", Font_6x8, White);
 800582e:	4a78      	ldr	r2, [pc, #480]	@ (8005a10 <statemachine+0x1398>)
 8005830:	2301      	movs	r3, #1
 8005832:	ca06      	ldmia	r2, {r1, r2}
 8005834:	4877      	ldr	r0, [pc, #476]	@ (8005a14 <statemachine+0x139c>)
 8005836:	f7fe fb85 	bl	8003f44 <ssd1306_WriteString>
			  				ssd1306_SetCursor(32, 22);
 800583a:	2116      	movs	r1, #22
 800583c:	2020      	movs	r0, #32
 800583e:	f7fe fba7 	bl	8003f90 <ssd1306_SetCursor>
			  				snprintf((char *)bufferscreen,15, "%02d:%02d",HR,MINUTE);
 8005842:	4b70      	ldr	r3, [pc, #448]	@ (8005a04 <statemachine+0x138c>)
 8005844:	781b      	ldrb	r3, [r3, #0]
 8005846:	461a      	mov	r2, r3
 8005848:	4b6f      	ldr	r3, [pc, #444]	@ (8005a08 <statemachine+0x1390>)
 800584a:	781b      	ldrb	r3, [r3, #0]
 800584c:	9300      	str	r3, [sp, #0]
 800584e:	4613      	mov	r3, r2
 8005850:	4a71      	ldr	r2, [pc, #452]	@ (8005a18 <statemachine+0x13a0>)
 8005852:	210f      	movs	r1, #15
 8005854:	4871      	ldr	r0, [pc, #452]	@ (8005a1c <statemachine+0x13a4>)
 8005856:	f015 fed9 	bl	801b60c <sniprintf>
			  				ssd1306_WriteString((char *)bufferscreen, Font_7x10, White);
 800585a:	4a71      	ldr	r2, [pc, #452]	@ (8005a20 <statemachine+0x13a8>)
 800585c:	2301      	movs	r3, #1
 800585e:	ca06      	ldmia	r2, {r1, r2}
 8005860:	486e      	ldr	r0, [pc, #440]	@ (8005a1c <statemachine+0x13a4>)
 8005862:	f7fe fb6f 	bl	8003f44 <ssd1306_WriteString>
			  				ssd1306_SetCursor(32, 32);
 8005866:	2120      	movs	r1, #32
 8005868:	2020      	movs	r0, #32
 800586a:	f7fe fb91 	bl	8003f90 <ssd1306_SetCursor>
			  				snprintf((char *)bufferscreen,15, "%02d sec",SEC);
 800586e:	4b67      	ldr	r3, [pc, #412]	@ (8005a0c <statemachine+0x1394>)
 8005870:	781b      	ldrb	r3, [r3, #0]
 8005872:	4a6c      	ldr	r2, [pc, #432]	@ (8005a24 <statemachine+0x13ac>)
 8005874:	210f      	movs	r1, #15
 8005876:	4869      	ldr	r0, [pc, #420]	@ (8005a1c <statemachine+0x13a4>)
 8005878:	f015 fec8 	bl	801b60c <sniprintf>
			  				ssd1306_WriteString((char *)bufferscreen, Font_7x10, White);
 800587c:	4a68      	ldr	r2, [pc, #416]	@ (8005a20 <statemachine+0x13a8>)
 800587e:	2301      	movs	r3, #1
 8005880:	ca06      	ldmia	r2, {r1, r2}
 8005882:	4866      	ldr	r0, [pc, #408]	@ (8005a1c <statemachine+0x13a4>)
 8005884:	f7fe fb5e 	bl	8003f44 <ssd1306_WriteString>
			  				if(BTN_B>=1){
 8005888:	4b67      	ldr	r3, [pc, #412]	@ (8005a28 <statemachine+0x13b0>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	2b00      	cmp	r3, #0
 800588e:	dd20      	ble.n	80058d2 <statemachine+0x125a>
			  					posstate--;
 8005890:	4b66      	ldr	r3, [pc, #408]	@ (8005a2c <statemachine+0x13b4>)
 8005892:	781b      	ldrb	r3, [r3, #0]
 8005894:	3b01      	subs	r3, #1
 8005896:	b2da      	uxtb	r2, r3
 8005898:	4b64      	ldr	r3, [pc, #400]	@ (8005a2c <statemachine+0x13b4>)
 800589a:	701a      	strb	r2, [r3, #0]
			  					posstate--;
 800589c:	4b63      	ldr	r3, [pc, #396]	@ (8005a2c <statemachine+0x13b4>)
 800589e:	781b      	ldrb	r3, [r3, #0]
 80058a0:	3b01      	subs	r3, #1
 80058a2:	b2da      	uxtb	r2, r3
 80058a4:	4b61      	ldr	r3, [pc, #388]	@ (8005a2c <statemachine+0x13b4>)
 80058a6:	701a      	strb	r2, [r3, #0]
			  					posstate--;
 80058a8:	4b60      	ldr	r3, [pc, #384]	@ (8005a2c <statemachine+0x13b4>)
 80058aa:	781b      	ldrb	r3, [r3, #0]
 80058ac:	3b01      	subs	r3, #1
 80058ae:	b2da      	uxtb	r2, r3
 80058b0:	4b5e      	ldr	r3, [pc, #376]	@ (8005a2c <statemachine+0x13b4>)
 80058b2:	701a      	strb	r2, [r3, #0]
			  					posstate--;
 80058b4:	4b5d      	ldr	r3, [pc, #372]	@ (8005a2c <statemachine+0x13b4>)
 80058b6:	781b      	ldrb	r3, [r3, #0]
 80058b8:	3b01      	subs	r3, #1
 80058ba:	b2da      	uxtb	r2, r3
 80058bc:	4b5b      	ldr	r3, [pc, #364]	@ (8005a2c <statemachine+0x13b4>)
 80058be:	701a      	strb	r2, [r3, #0]
			  					posstate--;
 80058c0:	4b5a      	ldr	r3, [pc, #360]	@ (8005a2c <statemachine+0x13b4>)
 80058c2:	781b      	ldrb	r3, [r3, #0]
 80058c4:	3b01      	subs	r3, #1
 80058c6:	b2da      	uxtb	r2, r3
 80058c8:	4b58      	ldr	r3, [pc, #352]	@ (8005a2c <statemachine+0x13b4>)
 80058ca:	701a      	strb	r2, [r3, #0]
			  					BTN_B=0;
 80058cc:	4b56      	ldr	r3, [pc, #344]	@ (8005a28 <statemachine+0x13b0>)
 80058ce:	2200      	movs	r2, #0
 80058d0:	601a      	str	r2, [r3, #0]
			  				}
			  				if(BTN_B_LONG>=1){
 80058d2:	4b57      	ldr	r3, [pc, #348]	@ (8005a30 <statemachine+0x13b8>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	dd13      	ble.n	8005902 <statemachine+0x128a>
			  							  					posstate--;
 80058da:	4b54      	ldr	r3, [pc, #336]	@ (8005a2c <statemachine+0x13b4>)
 80058dc:	781b      	ldrb	r3, [r3, #0]
 80058de:	3b01      	subs	r3, #1
 80058e0:	b2da      	uxtb	r2, r3
 80058e2:	4b52      	ldr	r3, [pc, #328]	@ (8005a2c <statemachine+0x13b4>)
 80058e4:	701a      	strb	r2, [r3, #0]
			  							  					BTN_B_LONG=0;
 80058e6:	4b52      	ldr	r3, [pc, #328]	@ (8005a30 <statemachine+0x13b8>)
 80058e8:	2200      	movs	r2, #0
 80058ea:	601a      	str	r2, [r3, #0]
			  							  				}
			  			break;
 80058ec:	e009      	b.n	8005902 <statemachine+0x128a>
				  break;
 80058ee:	bf00      	nop
 80058f0:	e008      	b.n	8005904 <statemachine+0x128c>
				  break;
 80058f2:	bf00      	nop
 80058f4:	e006      	b.n	8005904 <statemachine+0x128c>
				  break;
 80058f6:	bf00      	nop
 80058f8:	e004      	b.n	8005904 <statemachine+0x128c>
				  break;
 80058fa:	bf00      	nop
 80058fc:	e002      	b.n	8005904 <statemachine+0x128c>
				  break;
 80058fe:	bf00      	nop
 8005900:	e000      	b.n	8005904 <statemachine+0x128c>
			  			break;
 8005902:	bf00      	nop
			  }

					if(BTN_A>=1){
 8005904:	4b4b      	ldr	r3, [pc, #300]	@ (8005a34 <statemachine+0x13bc>)
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	2b00      	cmp	r3, #0
 800590a:	dd0b      	ble.n	8005924 <statemachine+0x12ac>
							state++;
 800590c:	4b4a      	ldr	r3, [pc, #296]	@ (8005a38 <statemachine+0x13c0>)
 800590e:	781b      	ldrb	r3, [r3, #0]
 8005910:	3301      	adds	r3, #1
 8005912:	b2da      	uxtb	r2, r3
 8005914:	4b48      	ldr	r3, [pc, #288]	@ (8005a38 <statemachine+0x13c0>)
 8005916:	701a      	strb	r2, [r3, #0]
							BTN_A=0;
 8005918:	4b46      	ldr	r3, [pc, #280]	@ (8005a34 <statemachine+0x13bc>)
 800591a:	2200      	movs	r2, #0
 800591c:	601a      	str	r2, [r3, #0]
							BTN_B=0;
 800591e:	4b42      	ldr	r3, [pc, #264]	@ (8005a28 <statemachine+0x13b0>)
 8005920:	2200      	movs	r2, #0
 8005922:	601a      	str	r2, [r3, #0]


						}
					if(BTN_A_LONG>=1){
 8005924:	4b45      	ldr	r3, [pc, #276]	@ (8005a3c <statemachine+0x13c4>)
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	2b00      	cmp	r3, #0
 800592a:	f340 8455 	ble.w	80061d8 <statemachine+0x1b60>
									 									 									  			 	state--;
 800592e:	4b42      	ldr	r3, [pc, #264]	@ (8005a38 <statemachine+0x13c0>)
 8005930:	781b      	ldrb	r3, [r3, #0]
 8005932:	3b01      	subs	r3, #1
 8005934:	b2da      	uxtb	r2, r3
 8005936:	4b40      	ldr	r3, [pc, #256]	@ (8005a38 <statemachine+0x13c0>)
 8005938:	701a      	strb	r2, [r3, #0]
									 									 									  			 	BTN_A=0;
 800593a:	4b3e      	ldr	r3, [pc, #248]	@ (8005a34 <statemachine+0x13bc>)
 800593c:	2200      	movs	r2, #0
 800593e:	601a      	str	r2, [r3, #0]
									 									 									  			 	BTN_B=0;
 8005940:	4b39      	ldr	r3, [pc, #228]	@ (8005a28 <statemachine+0x13b0>)
 8005942:	2200      	movs	r2, #0
 8005944:	601a      	str	r2, [r3, #0]
									 									 									  			 	BTN_A_LONG=0;
 8005946:	4b3d      	ldr	r3, [pc, #244]	@ (8005a3c <statemachine+0x13c4>)
 8005948:	2200      	movs	r2, #0
 800594a:	601a      	str	r2, [r3, #0]
									 									 									  	}
			  break;
 800594c:	f000 bc44 	b.w	80061d8 <statemachine+0x1b60>
		  case STATE_CHRONOMETER:

			  ssd1306_Fill(Black);
 8005950:	2000      	movs	r0, #0
 8005952:	f7fe f9db 	bl	8003d0c <ssd1306_Fill>
			  ssd1306_SetCursor(32, 12);
 8005956:	210c      	movs	r1, #12
 8005958:	2020      	movs	r0, #32
 800595a:	f7fe fb19 	bl	8003f90 <ssd1306_SetCursor>
			  ssd1306_WriteString("chrono", Font_6x8, White);
 800595e:	4a2c      	ldr	r2, [pc, #176]	@ (8005a10 <statemachine+0x1398>)
 8005960:	2301      	movs	r3, #1
 8005962:	ca06      	ldmia	r2, {r1, r2}
 8005964:	4836      	ldr	r0, [pc, #216]	@ (8005a40 <statemachine+0x13c8>)
 8005966:	f7fe faed 	bl	8003f44 <ssd1306_WriteString>
			  ssd1306_SetCursor(32,20);
 800596a:	2114      	movs	r1, #20
 800596c:	2020      	movs	r0, #32
 800596e:	f7fe fb0f 	bl	8003f90 <ssd1306_SetCursor>

			  switch(chronostate){
 8005972:	4b34      	ldr	r3, [pc, #208]	@ (8005a44 <statemachine+0x13cc>)
 8005974:	781b      	ldrb	r3, [r3, #0]
 8005976:	2b02      	cmp	r3, #2
 8005978:	d072      	beq.n	8005a60 <statemachine+0x13e8>
 800597a:	2b02      	cmp	r3, #2
 800597c:	f300 80a1 	bgt.w	8005ac2 <statemachine+0x144a>
 8005980:	2b00      	cmp	r3, #0
 8005982:	d002      	beq.n	800598a <statemachine+0x1312>
 8005984:	2b01      	cmp	r3, #1
 8005986:	d01e      	beq.n	80059c6 <statemachine+0x134e>
 8005988:	e09b      	b.n	8005ac2 <statemachine+0x144a>
			  case STATE_RESET:
				  min=0;
 800598a:	4b2f      	ldr	r3, [pc, #188]	@ (8005a48 <statemachine+0x13d0>)
 800598c:	f04f 0200 	mov.w	r2, #0
 8005990:	601a      	str	r2, [r3, #0]
				  seconde=0;
 8005992:	4b2e      	ldr	r3, [pc, #184]	@ (8005a4c <statemachine+0x13d4>)
 8005994:	f04f 0200 	mov.w	r2, #0
 8005998:	601a      	str	r2, [r3, #0]
				  calctime=0;
 800599a:	4b2d      	ldr	r3, [pc, #180]	@ (8005a50 <statemachine+0x13d8>)
 800599c:	2200      	movs	r2, #0
 800599e:	601a      	str	r2, [r3, #0]

				  	 if(BTN_B>=1){
 80059a0:	4b21      	ldr	r3, [pc, #132]	@ (8005a28 <statemachine+0x13b0>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	f340 8087 	ble.w	8005ab8 <statemachine+0x1440>
				  		chronostate++;
 80059aa:	4b26      	ldr	r3, [pc, #152]	@ (8005a44 <statemachine+0x13cc>)
 80059ac:	781b      	ldrb	r3, [r3, #0]
 80059ae:	3301      	adds	r3, #1
 80059b0:	b2da      	uxtb	r2, r3
 80059b2:	4b24      	ldr	r3, [pc, #144]	@ (8005a44 <statemachine+0x13cc>)
 80059b4:	701a      	strb	r2, [r3, #0]
				  		BTN_B=0;
 80059b6:	4b1c      	ldr	r3, [pc, #112]	@ (8005a28 <statemachine+0x13b0>)
 80059b8:	2200      	movs	r2, #0
 80059ba:	601a      	str	r2, [r3, #0]
				  		starttime=uwTick;
 80059bc:	4b25      	ldr	r3, [pc, #148]	@ (8005a54 <statemachine+0x13dc>)
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	4a25      	ldr	r2, [pc, #148]	@ (8005a58 <statemachine+0x13e0>)
 80059c2:	6013      	str	r3, [r2, #0]

				  }


				  break;
 80059c4:	e078      	b.n	8005ab8 <statemachine+0x1440>
			  case STATE_RUN:
				  calctime=uwTick-starttime+timehandler;
 80059c6:	4b23      	ldr	r3, [pc, #140]	@ (8005a54 <statemachine+0x13dc>)
 80059c8:	681a      	ldr	r2, [r3, #0]
 80059ca:	4b23      	ldr	r3, [pc, #140]	@ (8005a58 <statemachine+0x13e0>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	1ad2      	subs	r2, r2, r3
 80059d0:	4b22      	ldr	r3, [pc, #136]	@ (8005a5c <statemachine+0x13e4>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	4413      	add	r3, r2
 80059d6:	4a1e      	ldr	r2, [pc, #120]	@ (8005a50 <statemachine+0x13d8>)
 80059d8:	6013      	str	r3, [r2, #0]

				  if(BTN_B>=1){
 80059da:	4b13      	ldr	r3, [pc, #76]	@ (8005a28 <statemachine+0x13b0>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	dd6c      	ble.n	8005abc <statemachine+0x1444>
				  		chronostate++;
 80059e2:	4b18      	ldr	r3, [pc, #96]	@ (8005a44 <statemachine+0x13cc>)
 80059e4:	781b      	ldrb	r3, [r3, #0]
 80059e6:	3301      	adds	r3, #1
 80059e8:	b2da      	uxtb	r2, r3
 80059ea:	4b16      	ldr	r3, [pc, #88]	@ (8005a44 <statemachine+0x13cc>)
 80059ec:	701a      	strb	r2, [r3, #0]
				  		BTN_B=0;
 80059ee:	4b0e      	ldr	r3, [pc, #56]	@ (8005a28 <statemachine+0x13b0>)
 80059f0:	2200      	movs	r2, #0
 80059f2:	601a      	str	r2, [r3, #0]
			  }


				  break;
 80059f4:	e062      	b.n	8005abc <statemachine+0x1444>
 80059f6:	bf00      	nop
 80059f8:	20000620 	.word	0x20000620
 80059fc:	20000928 	.word	0x20000928
 8005a00:	20000c88 	.word	0x20000c88
 8005a04:	20000c85 	.word	0x20000c85
 8005a08:	20000c86 	.word	0x20000c86
 8005a0c:	20000c84 	.word	0x20000c84
 8005a10:	20000014 	.word	0x20000014
 8005a14:	0801fe60 	.word	0x0801fe60
 8005a18:	0801fe68 	.word	0x0801fe68
 8005a1c:	20000bc8 	.word	0x20000bc8
 8005a20:	2000001c 	.word	0x2000001c
 8005a24:	0801fe74 	.word	0x0801fe74
 8005a28:	2000096c 	.word	0x2000096c
 8005a2c:	200005d6 	.word	0x200005d6
 8005a30:	20000c9c 	.word	0x20000c9c
 8005a34:	20000968 	.word	0x20000968
 8005a38:	200005d4 	.word	0x200005d4
 8005a3c:	20000ca0 	.word	0x20000ca0
 8005a40:	0801fe80 	.word	0x0801fe80
 8005a44:	200005d7 	.word	0x200005d7
 8005a48:	20000c44 	.word	0x20000c44
 8005a4c:	20000c40 	.word	0x20000c40
 8005a50:	20000c4c 	.word	0x20000c4c
 8005a54:	200014bc 	.word	0x200014bc
 8005a58:	20000c48 	.word	0x20000c48
 8005a5c:	20000c50 	.word	0x20000c50
			  case STATE_PAUSE:
				  timehandler=calctime;
 8005a60:	4b88      	ldr	r3, [pc, #544]	@ (8005c84 <statemachine+0x160c>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4a88      	ldr	r2, [pc, #544]	@ (8005c88 <statemachine+0x1610>)
 8005a66:	6013      	str	r3, [r2, #0]

				  if(BTN_B>=1){
 8005a68:	4b88      	ldr	r3, [pc, #544]	@ (8005c8c <statemachine+0x1614>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	dd0c      	ble.n	8005a8a <statemachine+0x1412>
				  			chronostate--;
 8005a70:	4b87      	ldr	r3, [pc, #540]	@ (8005c90 <statemachine+0x1618>)
 8005a72:	781b      	ldrb	r3, [r3, #0]
 8005a74:	3b01      	subs	r3, #1
 8005a76:	b2da      	uxtb	r2, r3
 8005a78:	4b85      	ldr	r3, [pc, #532]	@ (8005c90 <statemachine+0x1618>)
 8005a7a:	701a      	strb	r2, [r3, #0]
				  			BTN_B=0;
 8005a7c:	4b83      	ldr	r3, [pc, #524]	@ (8005c8c <statemachine+0x1614>)
 8005a7e:	2200      	movs	r2, #0
 8005a80:	601a      	str	r2, [r3, #0]
				  			starttime=uwTick;
 8005a82:	4b84      	ldr	r3, [pc, #528]	@ (8005c94 <statemachine+0x161c>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a84      	ldr	r2, [pc, #528]	@ (8005c98 <statemachine+0x1620>)
 8005a88:	6013      	str	r3, [r2, #0]

			 }
				  if(BTN_B_LONG>=1){
 8005a8a:	4b84      	ldr	r3, [pc, #528]	@ (8005c9c <statemachine+0x1624>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	dd16      	ble.n	8005ac0 <statemachine+0x1448>
				  				  	chronostate--;
 8005a92:	4b7f      	ldr	r3, [pc, #508]	@ (8005c90 <statemachine+0x1618>)
 8005a94:	781b      	ldrb	r3, [r3, #0]
 8005a96:	3b01      	subs	r3, #1
 8005a98:	b2da      	uxtb	r2, r3
 8005a9a:	4b7d      	ldr	r3, [pc, #500]	@ (8005c90 <statemachine+0x1618>)
 8005a9c:	701a      	strb	r2, [r3, #0]
				  				  	chronostate--;
 8005a9e:	4b7c      	ldr	r3, [pc, #496]	@ (8005c90 <statemachine+0x1618>)
 8005aa0:	781b      	ldrb	r3, [r3, #0]
 8005aa2:	3b01      	subs	r3, #1
 8005aa4:	b2da      	uxtb	r2, r3
 8005aa6:	4b7a      	ldr	r3, [pc, #488]	@ (8005c90 <statemachine+0x1618>)
 8005aa8:	701a      	strb	r2, [r3, #0]
				  				  	BTN_B_LONG=0;
 8005aaa:	4b7c      	ldr	r3, [pc, #496]	@ (8005c9c <statemachine+0x1624>)
 8005aac:	2200      	movs	r2, #0
 8005aae:	601a      	str	r2, [r3, #0]
				  				  	timehandler=0;
 8005ab0:	4b75      	ldr	r3, [pc, #468]	@ (8005c88 <statemachine+0x1610>)
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	601a      	str	r2, [r3, #0]
				  			 }


				  break;
 8005ab6:	e003      	b.n	8005ac0 <statemachine+0x1448>
				  break;
 8005ab8:	bf00      	nop
 8005aba:	e002      	b.n	8005ac2 <statemachine+0x144a>
				  break;
 8005abc:	bf00      	nop
 8005abe:	e000      	b.n	8005ac2 <statemachine+0x144a>
				  break;
 8005ac0:	bf00      	nop
			  }

			  min=floor((float) calctime/60000);
 8005ac2:	4b70      	ldr	r3, [pc, #448]	@ (8005c84 <statemachine+0x160c>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	ee07 3a90 	vmov	s15, r3
 8005aca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ace:	ed9f 7a74 	vldr	s14, [pc, #464]	@ 8005ca0 <statemachine+0x1628>
 8005ad2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005ad6:	ee16 0a90 	vmov	r0, s13
 8005ada:	f7fa fd0d 	bl	80004f8 <__aeabi_f2d>
 8005ade:	4602      	mov	r2, r0
 8005ae0:	460b      	mov	r3, r1
 8005ae2:	ec43 2b10 	vmov	d0, r2, r3
 8005ae6:	f018 fc83 	bl	801e3f0 <floor>
 8005aea:	ec53 2b10 	vmov	r2, r3, d0
 8005aee:	4610      	mov	r0, r2
 8005af0:	4619      	mov	r1, r3
 8005af2:	f7fb f851 	bl	8000b98 <__aeabi_d2f>
 8005af6:	4603      	mov	r3, r0
 8005af8:	4a6a      	ldr	r2, [pc, #424]	@ (8005ca4 <statemachine+0x162c>)
 8005afa:	6013      	str	r3, [r2, #0]
			  seconde=(float) ((calctime-(min*60000))/1000);
 8005afc:	4b61      	ldr	r3, [pc, #388]	@ (8005c84 <statemachine+0x160c>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	ee07 3a90 	vmov	s15, r3
 8005b04:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005b08:	4b66      	ldr	r3, [pc, #408]	@ (8005ca4 <statemachine+0x162c>)
 8005b0a:	edd3 7a00 	vldr	s15, [r3]
 8005b0e:	eddf 6a64 	vldr	s13, [pc, #400]	@ 8005ca0 <statemachine+0x1628>
 8005b12:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005b16:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005b1a:	eddf 6a63 	vldr	s13, [pc, #396]	@ 8005ca8 <statemachine+0x1630>
 8005b1e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005b22:	4b62      	ldr	r3, [pc, #392]	@ (8005cac <statemachine+0x1634>)
 8005b24:	edc3 7a00 	vstr	s15, [r3]
			  snprintf((char *)bufferscreen,15, "%0.0fmin",min);
 8005b28:	4b5e      	ldr	r3, [pc, #376]	@ (8005ca4 <statemachine+0x162c>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	f7fa fce3 	bl	80004f8 <__aeabi_f2d>
 8005b32:	4602      	mov	r2, r0
 8005b34:	460b      	mov	r3, r1
 8005b36:	e9cd 2300 	strd	r2, r3, [sp]
 8005b3a:	4a5d      	ldr	r2, [pc, #372]	@ (8005cb0 <statemachine+0x1638>)
 8005b3c:	210f      	movs	r1, #15
 8005b3e:	485d      	ldr	r0, [pc, #372]	@ (8005cb4 <statemachine+0x163c>)
 8005b40:	f015 fd64 	bl	801b60c <sniprintf>
			  ssd1306_WriteString((char *)bufferscreen, Font_7x10, White);
 8005b44:	4a5c      	ldr	r2, [pc, #368]	@ (8005cb8 <statemachine+0x1640>)
 8005b46:	2301      	movs	r3, #1
 8005b48:	ca06      	ldmia	r2, {r1, r2}
 8005b4a:	485a      	ldr	r0, [pc, #360]	@ (8005cb4 <statemachine+0x163c>)
 8005b4c:	f7fe f9fa 	bl	8003f44 <ssd1306_WriteString>
			  ssd1306_SetCursor(32, 30);
 8005b50:	211e      	movs	r1, #30
 8005b52:	2020      	movs	r0, #32
 8005b54:	f7fe fa1c 	bl	8003f90 <ssd1306_SetCursor>
			  snprintf((char *)bufferscreen,15, "%0.3fs",seconde);
 8005b58:	4b54      	ldr	r3, [pc, #336]	@ (8005cac <statemachine+0x1634>)
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	f7fa fccb 	bl	80004f8 <__aeabi_f2d>
 8005b62:	4602      	mov	r2, r0
 8005b64:	460b      	mov	r3, r1
 8005b66:	e9cd 2300 	strd	r2, r3, [sp]
 8005b6a:	4a54      	ldr	r2, [pc, #336]	@ (8005cbc <statemachine+0x1644>)
 8005b6c:	210f      	movs	r1, #15
 8005b6e:	4851      	ldr	r0, [pc, #324]	@ (8005cb4 <statemachine+0x163c>)
 8005b70:	f015 fd4c 	bl	801b60c <sniprintf>
			  ssd1306_WriteString((char *)bufferscreen, Font_7x10, White);
 8005b74:	4a50      	ldr	r2, [pc, #320]	@ (8005cb8 <statemachine+0x1640>)
 8005b76:	2301      	movs	r3, #1
 8005b78:	ca06      	ldmia	r2, {r1, r2}
 8005b7a:	484e      	ldr	r0, [pc, #312]	@ (8005cb4 <statemachine+0x163c>)
 8005b7c:	f7fe f9e2 	bl	8003f44 <ssd1306_WriteString>


			  if(BTN_A>=1){
 8005b80:	4b4f      	ldr	r3, [pc, #316]	@ (8005cc0 <statemachine+0x1648>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	dd0b      	ble.n	8005ba0 <statemachine+0x1528>
			 	state++;
 8005b88:	4b4e      	ldr	r3, [pc, #312]	@ (8005cc4 <statemachine+0x164c>)
 8005b8a:	781b      	ldrb	r3, [r3, #0]
 8005b8c:	3301      	adds	r3, #1
 8005b8e:	b2da      	uxtb	r2, r3
 8005b90:	4b4c      	ldr	r3, [pc, #304]	@ (8005cc4 <statemachine+0x164c>)
 8005b92:	701a      	strb	r2, [r3, #0]
			 	BTN_A=0;
 8005b94:	4b4a      	ldr	r3, [pc, #296]	@ (8005cc0 <statemachine+0x1648>)
 8005b96:	2200      	movs	r2, #0
 8005b98:	601a      	str	r2, [r3, #0]
			 	BTN_B=0;
 8005b9a:	4b3c      	ldr	r3, [pc, #240]	@ (8005c8c <statemachine+0x1614>)
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	601a      	str	r2, [r3, #0]


	}
			  if(BTN_A_LONG>=1){
 8005ba0:	4b49      	ldr	r3, [pc, #292]	@ (8005cc8 <statemachine+0x1650>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	f340 8319 	ble.w	80061dc <statemachine+0x1b64>
			  				 									 									  			 	state--;
 8005baa:	4b46      	ldr	r3, [pc, #280]	@ (8005cc4 <statemachine+0x164c>)
 8005bac:	781b      	ldrb	r3, [r3, #0]
 8005bae:	3b01      	subs	r3, #1
 8005bb0:	b2da      	uxtb	r2, r3
 8005bb2:	4b44      	ldr	r3, [pc, #272]	@ (8005cc4 <statemachine+0x164c>)
 8005bb4:	701a      	strb	r2, [r3, #0]
			  				 									 									  			 	BTN_A=0;
 8005bb6:	4b42      	ldr	r3, [pc, #264]	@ (8005cc0 <statemachine+0x1648>)
 8005bb8:	2200      	movs	r2, #0
 8005bba:	601a      	str	r2, [r3, #0]
			  				 									 									  			 	BTN_B=0;
 8005bbc:	4b33      	ldr	r3, [pc, #204]	@ (8005c8c <statemachine+0x1614>)
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	601a      	str	r2, [r3, #0]
			  				 									 									  			 	BTN_A_LONG=0;
 8005bc2:	4b41      	ldr	r3, [pc, #260]	@ (8005cc8 <statemachine+0x1650>)
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	601a      	str	r2, [r3, #0]
			  				 									 									  	}
			  break;
 8005bc8:	e308      	b.n	80061dc <statemachine+0x1b64>




			  case STATE_USB:
				  ssd1306_Fill(Black);
 8005bca:	2000      	movs	r0, #0
 8005bcc:	f7fe f89e 	bl	8003d0c <ssd1306_Fill>
				  ssd1306_SetCursor(32,12);
 8005bd0:	210c      	movs	r1, #12
 8005bd2:	2020      	movs	r0, #32
 8005bd4:	f7fe f9dc 	bl	8003f90 <ssd1306_SetCursor>
				  ssd1306_WriteString("usb",Font_6x8,White);
 8005bd8:	4a3c      	ldr	r2, [pc, #240]	@ (8005ccc <statemachine+0x1654>)
 8005bda:	2301      	movs	r3, #1
 8005bdc:	ca06      	ldmia	r2, {r1, r2}
 8005bde:	483c      	ldr	r0, [pc, #240]	@ (8005cd0 <statemachine+0x1658>)
 8005be0:	f7fe f9b0 	bl	8003f44 <ssd1306_WriteString>
				  switch(usbstate){
 8005be4:	4b3b      	ldr	r3, [pc, #236]	@ (8005cd4 <statemachine+0x165c>)
 8005be6:	781b      	ldrb	r3, [r3, #0]
 8005be8:	2b02      	cmp	r3, #2
 8005bea:	f000 815a 	beq.w	8005ea2 <statemachine+0x182a>
 8005bee:	2b02      	cmp	r3, #2
 8005bf0:	f300 82f6 	bgt.w	80061e0 <statemachine+0x1b68>
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d002      	beq.n	8005bfe <statemachine+0x1586>
 8005bf8:	2b01      	cmp	r3, #1
 8005bfa:	d071      	beq.n	8005ce0 <statemachine+0x1668>
				 									 									  			 	BTN_B=0;
				 									 									  			 	BTN_A_LONG=0;
				 									 									  	}
				 					 break;
				 				  }
				  break;
 8005bfc:	e2f0      	b.n	80061e0 <statemachine+0x1b68>
				 					  ssd1306_SetCursor(32,20);
 8005bfe:	2114      	movs	r1, #20
 8005c00:	2020      	movs	r0, #32
 8005c02:	f7fe f9c5 	bl	8003f90 <ssd1306_SetCursor>
				 					  ssd1306_WriteString("do nothing",Font_6x8,White);
 8005c06:	4a31      	ldr	r2, [pc, #196]	@ (8005ccc <statemachine+0x1654>)
 8005c08:	2301      	movs	r3, #1
 8005c0a:	ca06      	ldmia	r2, {r1, r2}
 8005c0c:	4832      	ldr	r0, [pc, #200]	@ (8005cd8 <statemachine+0x1660>)
 8005c0e:	f7fe f999 	bl	8003f44 <ssd1306_WriteString>
				 					  usbtransmiten=0;
 8005c12:	4b32      	ldr	r3, [pc, #200]	@ (8005cdc <statemachine+0x1664>)
 8005c14:	2200      	movs	r2, #0
 8005c16:	601a      	str	r2, [r3, #0]
				 					  if(BTN_B>=1){
 8005c18:	4b1c      	ldr	r3, [pc, #112]	@ (8005c8c <statemachine+0x1614>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	dd0b      	ble.n	8005c38 <statemachine+0x15c0>
				 						  usbstate++;
 8005c20:	4b2c      	ldr	r3, [pc, #176]	@ (8005cd4 <statemachine+0x165c>)
 8005c22:	781b      	ldrb	r3, [r3, #0]
 8005c24:	3301      	adds	r3, #1
 8005c26:	b2da      	uxtb	r2, r3
 8005c28:	4b2a      	ldr	r3, [pc, #168]	@ (8005cd4 <statemachine+0x165c>)
 8005c2a:	701a      	strb	r2, [r3, #0]
				 						  BTN_B=0;
 8005c2c:	4b17      	ldr	r3, [pc, #92]	@ (8005c8c <statemachine+0x1614>)
 8005c2e:	2200      	movs	r2, #0
 8005c30:	601a      	str	r2, [r3, #0]
				 						  BTN_A=0;
 8005c32:	4b23      	ldr	r3, [pc, #140]	@ (8005cc0 <statemachine+0x1648>)
 8005c34:	2200      	movs	r2, #0
 8005c36:	601a      	str	r2, [r3, #0]
				 					 if(BTN_A>=1){
 8005c38:	4b21      	ldr	r3, [pc, #132]	@ (8005cc0 <statemachine+0x1648>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	dd0b      	ble.n	8005c58 <statemachine+0x15e0>
				 						 state++;
 8005c40:	4b20      	ldr	r3, [pc, #128]	@ (8005cc4 <statemachine+0x164c>)
 8005c42:	781b      	ldrb	r3, [r3, #0]
 8005c44:	3301      	adds	r3, #1
 8005c46:	b2da      	uxtb	r2, r3
 8005c48:	4b1e      	ldr	r3, [pc, #120]	@ (8005cc4 <statemachine+0x164c>)
 8005c4a:	701a      	strb	r2, [r3, #0]
				 									  			 	BTN_A=0;
 8005c4c:	4b1c      	ldr	r3, [pc, #112]	@ (8005cc0 <statemachine+0x1648>)
 8005c4e:	2200      	movs	r2, #0
 8005c50:	601a      	str	r2, [r3, #0]
				 									  			 	BTN_B=0;
 8005c52:	4b0e      	ldr	r3, [pc, #56]	@ (8005c8c <statemachine+0x1614>)
 8005c54:	2200      	movs	r2, #0
 8005c56:	601a      	str	r2, [r3, #0]
				 					if(BTN_A_LONG>=1){
 8005c58:	4b1b      	ldr	r3, [pc, #108]	@ (8005cc8 <statemachine+0x1650>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	f340 8234 	ble.w	80060ca <statemachine+0x1a52>
				 									 									 									  			 	state--;
 8005c62:	4b18      	ldr	r3, [pc, #96]	@ (8005cc4 <statemachine+0x164c>)
 8005c64:	781b      	ldrb	r3, [r3, #0]
 8005c66:	3b01      	subs	r3, #1
 8005c68:	b2da      	uxtb	r2, r3
 8005c6a:	4b16      	ldr	r3, [pc, #88]	@ (8005cc4 <statemachine+0x164c>)
 8005c6c:	701a      	strb	r2, [r3, #0]
				 									 									 									  			 	BTN_A=0;
 8005c6e:	4b14      	ldr	r3, [pc, #80]	@ (8005cc0 <statemachine+0x1648>)
 8005c70:	2200      	movs	r2, #0
 8005c72:	601a      	str	r2, [r3, #0]
				 									 									 									  			 	BTN_B=0;
 8005c74:	4b05      	ldr	r3, [pc, #20]	@ (8005c8c <statemachine+0x1614>)
 8005c76:	2200      	movs	r2, #0
 8005c78:	601a      	str	r2, [r3, #0]
				 									 									 									  			 	BTN_A_LONG=0;
 8005c7a:	4b13      	ldr	r3, [pc, #76]	@ (8005cc8 <statemachine+0x1650>)
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	601a      	str	r2, [r3, #0]
				 					  break;
 8005c80:	e223      	b.n	80060ca <statemachine+0x1a52>
 8005c82:	bf00      	nop
 8005c84:	20000c4c 	.word	0x20000c4c
 8005c88:	20000c50 	.word	0x20000c50
 8005c8c:	2000096c 	.word	0x2000096c
 8005c90:	200005d7 	.word	0x200005d7
 8005c94:	200014bc 	.word	0x200014bc
 8005c98:	20000c48 	.word	0x20000c48
 8005c9c:	20000c9c 	.word	0x20000c9c
 8005ca0:	476a6000 	.word	0x476a6000
 8005ca4:	20000c44 	.word	0x20000c44
 8005ca8:	447a0000 	.word	0x447a0000
 8005cac:	20000c40 	.word	0x20000c40
 8005cb0:	0801fe88 	.word	0x0801fe88
 8005cb4:	20000bc8 	.word	0x20000bc8
 8005cb8:	2000001c 	.word	0x2000001c
 8005cbc:	0801fe94 	.word	0x0801fe94
 8005cc0:	20000968 	.word	0x20000968
 8005cc4:	200005d4 	.word	0x200005d4
 8005cc8:	20000ca0 	.word	0x20000ca0
 8005ccc:	20000014 	.word	0x20000014
 8005cd0:	0801fe9c 	.word	0x0801fe9c
 8005cd4:	200005d8 	.word	0x200005d8
 8005cd8:	0801fea0 	.word	0x0801fea0
 8005cdc:	20000c60 	.word	0x20000c60
				 					 ssd1306_SetCursor(32,20);
 8005ce0:	2114      	movs	r1, #20
 8005ce2:	2020      	movs	r0, #32
 8005ce4:	f7fe f954 	bl	8003f90 <ssd1306_SetCursor>
				 					ssd1306_WriteString("Push A",Font_6x8,White);
 8005ce8:	4ab6      	ldr	r2, [pc, #728]	@ (8005fc4 <statemachine+0x194c>)
 8005cea:	2301      	movs	r3, #1
 8005cec:	ca06      	ldmia	r2, {r1, r2}
 8005cee:	48b6      	ldr	r0, [pc, #728]	@ (8005fc8 <statemachine+0x1950>)
 8005cf0:	f7fe f928 	bl	8003f44 <ssd1306_WriteString>
				 					ssd1306_SetCursor(32,28);
 8005cf4:	211c      	movs	r1, #28
 8005cf6:	2020      	movs	r0, #32
 8005cf8:	f7fe f94a 	bl	8003f90 <ssd1306_SetCursor>
				 					ssd1306_WriteString("to erase",Font_6x8,White);
 8005cfc:	4ab1      	ldr	r2, [pc, #708]	@ (8005fc4 <statemachine+0x194c>)
 8005cfe:	2301      	movs	r3, #1
 8005d00:	ca06      	ldmia	r2, {r1, r2}
 8005d02:	48b2      	ldr	r0, [pc, #712]	@ (8005fcc <statemachine+0x1954>)
 8005d04:	f7fe f91e 	bl	8003f44 <ssd1306_WriteString>
				 					if(erasedisplay==1){
 8005d08:	4bb1      	ldr	r3, [pc, #708]	@ (8005fd0 <statemachine+0x1958>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	2b01      	cmp	r3, #1
 8005d0e:	d137      	bne.n	8005d80 <statemachine+0x1708>
					 					 ssd1306_Fill(Black);
 8005d10:	2000      	movs	r0, #0
 8005d12:	f7fd fffb 	bl	8003d0c <ssd1306_Fill>
					 					 ssd1306_SetCursor(32,12);
 8005d16:	210c      	movs	r1, #12
 8005d18:	2020      	movs	r0, #32
 8005d1a:	f7fe f939 	bl	8003f90 <ssd1306_SetCursor>
					 					ssd1306_WriteString("usb",Font_6x8,White);
 8005d1e:	4aa9      	ldr	r2, [pc, #676]	@ (8005fc4 <statemachine+0x194c>)
 8005d20:	2301      	movs	r3, #1
 8005d22:	ca06      	ldmia	r2, {r1, r2}
 8005d24:	48ab      	ldr	r0, [pc, #684]	@ (8005fd4 <statemachine+0x195c>)
 8005d26:	f7fe f90d 	bl	8003f44 <ssd1306_WriteString>
					 					ssd1306_SetCursor(32,22);
 8005d2a:	2116      	movs	r1, #22
 8005d2c:	2020      	movs	r0, #32
 8005d2e:	f7fe f92f 	bl	8003f90 <ssd1306_SetCursor>
					 					ssd1306_WriteString("FIN",Font_7x10,White);
 8005d32:	4aa9      	ldr	r2, [pc, #676]	@ (8005fd8 <statemachine+0x1960>)
 8005d34:	2301      	movs	r3, #1
 8005d36:	ca06      	ldmia	r2, {r1, r2}
 8005d38:	48a8      	ldr	r0, [pc, #672]	@ (8005fdc <statemachine+0x1964>)
 8005d3a:	f7fe f903 	bl	8003f44 <ssd1306_WriteString>
					 					ssd1306_SetCursor(32,36);
 8005d3e:	2124      	movs	r1, #36	@ 0x24
 8005d40:	2020      	movs	r0, #32
 8005d42:	f7fe f925 	bl	8003f90 <ssd1306_SetCursor>
				 						snprintf((char  *)bufferscreen,50,"t=%0.2f",(float)erasetime/1000);
 8005d46:	4ba6      	ldr	r3, [pc, #664]	@ (8005fe0 <statemachine+0x1968>)
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	ee07 3a90 	vmov	s15, r3
 8005d4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005d52:	ed9f 7aa4 	vldr	s14, [pc, #656]	@ 8005fe4 <statemachine+0x196c>
 8005d56:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005d5a:	ee16 0a90 	vmov	r0, s13
 8005d5e:	f7fa fbcb 	bl	80004f8 <__aeabi_f2d>
 8005d62:	4602      	mov	r2, r0
 8005d64:	460b      	mov	r3, r1
 8005d66:	e9cd 2300 	strd	r2, r3, [sp]
 8005d6a:	4a9f      	ldr	r2, [pc, #636]	@ (8005fe8 <statemachine+0x1970>)
 8005d6c:	2132      	movs	r1, #50	@ 0x32
 8005d6e:	489f      	ldr	r0, [pc, #636]	@ (8005fec <statemachine+0x1974>)
 8005d70:	f015 fc4c 	bl	801b60c <sniprintf>
				 						ssd1306_WriteString((char *)bufferscreen,Font_6x8,White);
 8005d74:	4a93      	ldr	r2, [pc, #588]	@ (8005fc4 <statemachine+0x194c>)
 8005d76:	2301      	movs	r3, #1
 8005d78:	ca06      	ldmia	r2, {r1, r2}
 8005d7a:	489c      	ldr	r0, [pc, #624]	@ (8005fec <statemachine+0x1974>)
 8005d7c:	f7fe f8e2 	bl	8003f44 <ssd1306_WriteString>
				 					if(BTN_A>=1){
 8005d80:	4b9b      	ldr	r3, [pc, #620]	@ (8005ff0 <statemachine+0x1978>)
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	dd7a      	ble.n	8005e7e <statemachine+0x1806>
				 						erasetime=HAL_GetTick();
 8005d88:	f001 fb82 	bl	8007490 <HAL_GetTick>
 8005d8c:	4603      	mov	r3, r0
 8005d8e:	461a      	mov	r2, r3
 8005d90:	4b93      	ldr	r3, [pc, #588]	@ (8005fe0 <statemachine+0x1968>)
 8005d92:	601a      	str	r2, [r3, #0]
				 						for(int i=0;i<=(int)floor((pagenumber)/16);i++){
 8005d94:	2300      	movs	r3, #0
 8005d96:	60fb      	str	r3, [r7, #12]
 8005d98:	e03f      	b.n	8005e1a <statemachine+0x17a2>
				 							ssd1306_Fill(Black);
 8005d9a:	2000      	movs	r0, #0
 8005d9c:	f7fd ffb6 	bl	8003d0c <ssd1306_Fill>
				 							ssd1306_SetCursor(32,12);
 8005da0:	210c      	movs	r1, #12
 8005da2:	2020      	movs	r0, #32
 8005da4:	f7fe f8f4 	bl	8003f90 <ssd1306_SetCursor>
				 							ssd1306_WriteString("usb",Font_6x8,White);
 8005da8:	4a86      	ldr	r2, [pc, #536]	@ (8005fc4 <statemachine+0x194c>)
 8005daa:	2301      	movs	r3, #1
 8005dac:	ca06      	ldmia	r2, {r1, r2}
 8005dae:	4889      	ldr	r0, [pc, #548]	@ (8005fd4 <statemachine+0x195c>)
 8005db0:	f7fe f8c8 	bl	8003f44 <ssd1306_WriteString>
				 							SPIF_EraseSector(&hspif1,i);
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	4619      	mov	r1, r3
 8005db8:	488e      	ldr	r0, [pc, #568]	@ (8005ff4 <statemachine+0x197c>)
 8005dba:	f011 fdee 	bl	801799a <SPIF_EraseSector>
				 							if(i>=1){
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	dd21      	ble.n	8005e08 <statemachine+0x1790>
				 							percentage((float) (i*100)/((int)floor((pagenumber)/16)));
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	2264      	movs	r2, #100	@ 0x64
 8005dc8:	fb02 f303 	mul.w	r3, r2, r3
 8005dcc:	ee07 3a90 	vmov	s15, r3
 8005dd0:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8005dd4:	4b88      	ldr	r3, [pc, #544]	@ (8005ff8 <statemachine+0x1980>)
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	da00      	bge.n	8005dde <statemachine+0x1766>
 8005ddc:	330f      	adds	r3, #15
 8005dde:	111b      	asrs	r3, r3, #4
 8005de0:	4618      	mov	r0, r3
 8005de2:	f7fa fb77 	bl	80004d4 <__aeabi_i2d>
 8005de6:	4602      	mov	r2, r0
 8005de8:	460b      	mov	r3, r1
 8005dea:	4610      	mov	r0, r2
 8005dec:	4619      	mov	r1, r3
 8005dee:	f7fa fe8b 	bl	8000b08 <__aeabi_d2iz>
 8005df2:	ee07 0a90 	vmov	s15, r0
 8005df6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005dfa:	ee88 7a27 	vdiv.f32	s14, s16, s15
 8005dfe:	eeb0 0a47 	vmov.f32	s0, s14
 8005e02:	f7fe fbd9 	bl	80045b8 <percentage>
 8005e06:	e003      	b.n	8005e10 <statemachine+0x1798>
				 								percentage((float) 0);
 8005e08:	ed9f 0a7c 	vldr	s0, [pc, #496]	@ 8005ffc <statemachine+0x1984>
 8005e0c:	f7fe fbd4 	bl	80045b8 <percentage>
				 							ssd1306_UpdateScreen();
 8005e10:	f7fd ff94 	bl	8003d3c <ssd1306_UpdateScreen>
				 						for(int i=0;i<=(int)floor((pagenumber)/16);i++){
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	3301      	adds	r3, #1
 8005e18:	60fb      	str	r3, [r7, #12]
 8005e1a:	4b77      	ldr	r3, [pc, #476]	@ (8005ff8 <statemachine+0x1980>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	da00      	bge.n	8005e24 <statemachine+0x17ac>
 8005e22:	330f      	adds	r3, #15
 8005e24:	111b      	asrs	r3, r3, #4
 8005e26:	4618      	mov	r0, r3
 8005e28:	f7fa fb54 	bl	80004d4 <__aeabi_i2d>
 8005e2c:	4602      	mov	r2, r0
 8005e2e:	460b      	mov	r3, r1
 8005e30:	4610      	mov	r0, r2
 8005e32:	4619      	mov	r1, r3
 8005e34:	f7fa fe68 	bl	8000b08 <__aeabi_d2iz>
 8005e38:	4602      	mov	r2, r0
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	ddac      	ble.n	8005d9a <statemachine+0x1722>
				 						SPIF_EraseSector(&hspif1, (int)floor((MAX_WRITE_PAGE+1)/16));
 8005e40:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 8005e44:	486b      	ldr	r0, [pc, #428]	@ (8005ff4 <statemachine+0x197c>)
 8005e46:	f011 fda8 	bl	801799a <SPIF_EraseSector>
				 						erasetime=HAL_GetTick()-erasetime;
 8005e4a:	f001 fb21 	bl	8007490 <HAL_GetTick>
 8005e4e:	4603      	mov	r3, r0
 8005e50:	4a63      	ldr	r2, [pc, #396]	@ (8005fe0 <statemachine+0x1968>)
 8005e52:	6812      	ldr	r2, [r2, #0]
 8005e54:	1a9b      	subs	r3, r3, r2
 8005e56:	461a      	mov	r2, r3
 8005e58:	4b61      	ldr	r3, [pc, #388]	@ (8005fe0 <statemachine+0x1968>)
 8005e5a:	601a      	str	r2, [r3, #0]
				 						erasedisplay=1;
 8005e5c:	4b5c      	ldr	r3, [pc, #368]	@ (8005fd0 <statemachine+0x1958>)
 8005e5e:	2201      	movs	r2, #1
 8005e60:	601a      	str	r2, [r3, #0]
				 						pageoffset=0;
 8005e62:	4b67      	ldr	r3, [pc, #412]	@ (8006000 <statemachine+0x1988>)
 8005e64:	2200      	movs	r2, #0
 8005e66:	601a      	str	r2, [r3, #0]
				 						pagenumber=0;
 8005e68:	4b63      	ldr	r3, [pc, #396]	@ (8005ff8 <statemachine+0x1980>)
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	601a      	str	r2, [r3, #0]
				 						storeindex();
 8005e6e:	f7fd fd71 	bl	8003954 <storeindex>
				 						BTN_A=0;
 8005e72:	4b5f      	ldr	r3, [pc, #380]	@ (8005ff0 <statemachine+0x1978>)
 8005e74:	2200      	movs	r2, #0
 8005e76:	601a      	str	r2, [r3, #0]
				 						BTN_B=0;
 8005e78:	4b62      	ldr	r3, [pc, #392]	@ (8006004 <statemachine+0x198c>)
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	601a      	str	r2, [r3, #0]
				 					if(BTN_B>=1){
 8005e7e:	4b61      	ldr	r3, [pc, #388]	@ (8006004 <statemachine+0x198c>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	f340 8123 	ble.w	80060ce <statemachine+0x1a56>
					 						usbstate++;
 8005e88:	4b5f      	ldr	r3, [pc, #380]	@ (8006008 <statemachine+0x1990>)
 8005e8a:	781b      	ldrb	r3, [r3, #0]
 8005e8c:	3301      	adds	r3, #1
 8005e8e:	b2da      	uxtb	r2, r3
 8005e90:	4b5d      	ldr	r3, [pc, #372]	@ (8006008 <statemachine+0x1990>)
 8005e92:	701a      	strb	r2, [r3, #0]
					 						  BTN_B=0;
 8005e94:	4b5b      	ldr	r3, [pc, #364]	@ (8006004 <statemachine+0x198c>)
 8005e96:	2200      	movs	r2, #0
 8005e98:	601a      	str	r2, [r3, #0]
					 						  BTN_A=0;
 8005e9a:	4b55      	ldr	r3, [pc, #340]	@ (8005ff0 <statemachine+0x1978>)
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	601a      	str	r2, [r3, #0]
				 			  break;
 8005ea0:	e115      	b.n	80060ce <statemachine+0x1a56>
				 					ssd1306_Fill(Black);
 8005ea2:	2000      	movs	r0, #0
 8005ea4:	f7fd ff32 	bl	8003d0c <ssd1306_Fill>
				 					ssd1306_SetCursor(32,20);
 8005ea8:	2114      	movs	r1, #20
 8005eaa:	2020      	movs	r0, #32
 8005eac:	f7fe f870 	bl	8003f90 <ssd1306_SetCursor>
				 					ssd1306_WriteString("write",Font_6x8,White);
 8005eb0:	4a44      	ldr	r2, [pc, #272]	@ (8005fc4 <statemachine+0x194c>)
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	ca06      	ldmia	r2, {r1, r2}
 8005eb6:	4855      	ldr	r0, [pc, #340]	@ (800600c <statemachine+0x1994>)
 8005eb8:	f7fe f844 	bl	8003f44 <ssd1306_WriteString>
				 					if(pagenumber>0){
 8005ebc:	4b4e      	ldr	r3, [pc, #312]	@ (8005ff8 <statemachine+0x1980>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	f340 80b1 	ble.w	8006028 <statemachine+0x19b0>
				 					int i=0;
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	60bb      	str	r3, [r7, #8]
				 					if(usbtransmiten==0){
 8005eca:	4b51      	ldr	r3, [pc, #324]	@ (8006010 <statemachine+0x1998>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d165      	bne.n	8005f9e <statemachine+0x1926>
				 						while(i<pagenumber){
 8005ed2:	e036      	b.n	8005f42 <statemachine+0x18ca>
				 							ssd1306_Fill(Black);
 8005ed4:	2000      	movs	r0, #0
 8005ed6:	f7fd ff19 	bl	8003d0c <ssd1306_Fill>
				 							ssd1306_SetCursor(32,12);
 8005eda:	210c      	movs	r1, #12
 8005edc:	2020      	movs	r0, #32
 8005ede:	f7fe f857 	bl	8003f90 <ssd1306_SetCursor>
				 							ssd1306_WriteString("write",Font_6x8,White);
 8005ee2:	4a38      	ldr	r2, [pc, #224]	@ (8005fc4 <statemachine+0x194c>)
 8005ee4:	2301      	movs	r3, #1
 8005ee6:	ca06      	ldmia	r2, {r1, r2}
 8005ee8:	4848      	ldr	r0, [pc, #288]	@ (800600c <statemachine+0x1994>)
 8005eea:	f7fe f82b 	bl	8003f44 <ssd1306_WriteString>
				 							SPIF_ReadPage(&hspif1,i, (uint8_t  *)flashread, 256, 0);
 8005eee:	68b9      	ldr	r1, [r7, #8]
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	9300      	str	r3, [sp, #0]
 8005ef4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005ef8:	4a46      	ldr	r2, [pc, #280]	@ (8006014 <statemachine+0x199c>)
 8005efa:	483e      	ldr	r0, [pc, #248]	@ (8005ff4 <statemachine+0x197c>)
 8005efc:	f011 fdee 	bl	8017adc <SPIF_ReadPage>
				 							CDC_Transmit_FS((char  * )flashread,256);
 8005f00:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005f04:	4843      	ldr	r0, [pc, #268]	@ (8006014 <statemachine+0x199c>)
 8005f06:	f012 fdc7 	bl	8018a98 <CDC_Transmit_FS>
				 							percentage((float) (i*100)/pagenumber);
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	2264      	movs	r2, #100	@ 0x64
 8005f0e:	fb02 f303 	mul.w	r3, r2, r3
 8005f12:	ee07 3a90 	vmov	s15, r3
 8005f16:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005f1a:	4b37      	ldr	r3, [pc, #220]	@ (8005ff8 <statemachine+0x1980>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	ee07 3a90 	vmov	s15, r3
 8005f22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005f26:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005f2a:	eeb0 0a66 	vmov.f32	s0, s13
 8005f2e:	f7fe fb43 	bl	80045b8 <percentage>
				 							ssd1306_UpdateScreen();
 8005f32:	f7fd ff03 	bl	8003d3c <ssd1306_UpdateScreen>
				 							HAL_Delay(125);
 8005f36:	207d      	movs	r0, #125	@ 0x7d
 8005f38:	f7fb fbf9 	bl	800172e <HAL_Delay>
				 							i++;
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	3301      	adds	r3, #1
 8005f40:	60bb      	str	r3, [r7, #8]
				 						while(i<pagenumber){
 8005f42:	4b2d      	ldr	r3, [pc, #180]	@ (8005ff8 <statemachine+0x1980>)
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	68ba      	ldr	r2, [r7, #8]
 8005f48:	429a      	cmp	r2, r3
 8005f4a:	dbc3      	blt.n	8005ed4 <statemachine+0x185c>
				 						SPIF_ReadPage(&hspif1,pagenumber, (uint8_t   *)flashread, pageoffset, 0);
 8005f4c:	4b2a      	ldr	r3, [pc, #168]	@ (8005ff8 <statemachine+0x1980>)
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	4619      	mov	r1, r3
 8005f52:	4b2b      	ldr	r3, [pc, #172]	@ (8006000 <statemachine+0x1988>)
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	461a      	mov	r2, r3
 8005f58:	2300      	movs	r3, #0
 8005f5a:	9300      	str	r3, [sp, #0]
 8005f5c:	4613      	mov	r3, r2
 8005f5e:	4a2d      	ldr	r2, [pc, #180]	@ (8006014 <statemachine+0x199c>)
 8005f60:	4824      	ldr	r0, [pc, #144]	@ (8005ff4 <statemachine+0x197c>)
 8005f62:	f011 fdbb 	bl	8017adc <SPIF_ReadPage>
				 						CDC_Transmit_FS((uint8_t   * )flashread,pageoffset);
 8005f66:	4b26      	ldr	r3, [pc, #152]	@ (8006000 <statemachine+0x1988>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	b29b      	uxth	r3, r3
 8005f6c:	4619      	mov	r1, r3
 8005f6e:	4829      	ldr	r0, [pc, #164]	@ (8006014 <statemachine+0x199c>)
 8005f70:	f012 fd92 	bl	8018a98 <CDC_Transmit_FS>
				 						HAL_Delay(125);
 8005f74:	207d      	movs	r0, #125	@ 0x7d
 8005f76:	f7fb fbda 	bl	800172e <HAL_Delay>
				 						int taillefin=0;
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	603b      	str	r3, [r7, #0]
										taillefin = snprintf((char  *)usbbuffer,64,"findetrame\n\r");
 8005f7e:	4a26      	ldr	r2, [pc, #152]	@ (8006018 <statemachine+0x19a0>)
 8005f80:	2140      	movs	r1, #64	@ 0x40
 8005f82:	4826      	ldr	r0, [pc, #152]	@ (800601c <statemachine+0x19a4>)
 8005f84:	f015 fb42 	bl	801b60c <sniprintf>
 8005f88:	6038      	str	r0, [r7, #0]
				 						CDC_Transmit_FS((char  *)usbbuffer,taillefin);
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	b29b      	uxth	r3, r3
 8005f8e:	4619      	mov	r1, r3
 8005f90:	4822      	ldr	r0, [pc, #136]	@ (800601c <statemachine+0x19a4>)
 8005f92:	f012 fd81 	bl	8018a98 <CDC_Transmit_FS>
				 						usbtransmiten=1;
 8005f96:	4b1e      	ldr	r3, [pc, #120]	@ (8006010 <statemachine+0x1998>)
 8005f98:	2201      	movs	r2, #1
 8005f9a:	601a      	str	r2, [r3, #0]
 8005f9c:	e003      	b.n	8005fa6 <statemachine+0x192e>
				 						usbpercent=1;
 8005f9e:	4b20      	ldr	r3, [pc, #128]	@ (8006020 <statemachine+0x19a8>)
 8005fa0:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8005fa4:	601a      	str	r2, [r3, #0]
				 					ssd1306_Fill(Black);
 8005fa6:	2000      	movs	r0, #0
 8005fa8:	f7fd feb0 	bl	8003d0c <ssd1306_Fill>
				 					ssd1306_SetCursor(32,28);
 8005fac:	211c      	movs	r1, #28
 8005fae:	2020      	movs	r0, #32
 8005fb0:	f7fd ffee 	bl	8003f90 <ssd1306_SetCursor>
				 					ssd1306_WriteString("finish",Font_7x10,White);
 8005fb4:	4a08      	ldr	r2, [pc, #32]	@ (8005fd8 <statemachine+0x1960>)
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	ca06      	ldmia	r2, {r1, r2}
 8005fba:	481a      	ldr	r0, [pc, #104]	@ (8006024 <statemachine+0x19ac>)
 8005fbc:	f7fd ffc2 	bl	8003f44 <ssd1306_WriteString>
 8005fc0:	e049      	b.n	8006056 <statemachine+0x19de>
 8005fc2:	bf00      	nop
 8005fc4:	20000014 	.word	0x20000014
 8005fc8:	0801feac 	.word	0x0801feac
 8005fcc:	0801feb4 	.word	0x0801feb4
 8005fd0:	20000c5c 	.word	0x20000c5c
 8005fd4:	0801fe9c 	.word	0x0801fe9c
 8005fd8:	2000001c 	.word	0x2000001c
 8005fdc:	0801fec0 	.word	0x0801fec0
 8005fe0:	20000c58 	.word	0x20000c58
 8005fe4:	447a0000 	.word	0x447a0000
 8005fe8:	0801fec4 	.word	0x0801fec4
 8005fec:	20000bc8 	.word	0x20000bc8
 8005ff0:	20000968 	.word	0x20000968
 8005ff4:	20000970 	.word	0x20000970
 8005ff8:	20000ba8 	.word	0x20000ba8
 8005ffc:	00000000 	.word	0x00000000
 8006000:	20000ba4 	.word	0x20000ba4
 8006004:	2000096c 	.word	0x2000096c
 8006008:	200005d8 	.word	0x200005d8
 800600c:	0801fecc 	.word	0x0801fecc
 8006010:	20000c60 	.word	0x20000c60
 8006014:	20000aa4 	.word	0x20000aa4
 8006018:	0801fed4 	.word	0x0801fed4
 800601c:	20000bfc 	.word	0x20000bfc
 8006020:	20000c64 	.word	0x20000c64
 8006024:	0801fee4 	.word	0x0801fee4
				 							ssd1306_Fill(Black);
 8006028:	2000      	movs	r0, #0
 800602a:	f7fd fe6f 	bl	8003d0c <ssd1306_Fill>
				 							ssd1306_SetCursor(32,20);
 800602e:	2114      	movs	r1, #20
 8006030:	2020      	movs	r0, #32
 8006032:	f7fd ffad 	bl	8003f90 <ssd1306_SetCursor>
				 							ssd1306_WriteString("write",Font_7x10,White);
 8006036:	4a6f      	ldr	r2, [pc, #444]	@ (80061f4 <statemachine+0x1b7c>)
 8006038:	2301      	movs	r3, #1
 800603a:	ca06      	ldmia	r2, {r1, r2}
 800603c:	486e      	ldr	r0, [pc, #440]	@ (80061f8 <statemachine+0x1b80>)
 800603e:	f7fd ff81 	bl	8003f44 <ssd1306_WriteString>
				 							ssd1306_SetCursor(32,30);
 8006042:	211e      	movs	r1, #30
 8006044:	2020      	movs	r0, #32
 8006046:	f7fd ffa3 	bl	8003f90 <ssd1306_SetCursor>
				 							ssd1306_WriteString("nothing",Font_7x10,White);
 800604a:	4a6a      	ldr	r2, [pc, #424]	@ (80061f4 <statemachine+0x1b7c>)
 800604c:	2301      	movs	r3, #1
 800604e:	ca06      	ldmia	r2, {r1, r2}
 8006050:	486a      	ldr	r0, [pc, #424]	@ (80061fc <statemachine+0x1b84>)
 8006052:	f7fd ff77 	bl	8003f44 <ssd1306_WriteString>
				 					if(BTN_B>=1){
 8006056:	4b6a      	ldr	r3, [pc, #424]	@ (8006200 <statemachine+0x1b88>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	2b00      	cmp	r3, #0
 800605c:	dd11      	ble.n	8006082 <statemachine+0x1a0a>
				 									 						usbstate--;
 800605e:	4b69      	ldr	r3, [pc, #420]	@ (8006204 <statemachine+0x1b8c>)
 8006060:	781b      	ldrb	r3, [r3, #0]
 8006062:	3b01      	subs	r3, #1
 8006064:	b2da      	uxtb	r2, r3
 8006066:	4b67      	ldr	r3, [pc, #412]	@ (8006204 <statemachine+0x1b8c>)
 8006068:	701a      	strb	r2, [r3, #0]
				 									 						usbstate--;
 800606a:	4b66      	ldr	r3, [pc, #408]	@ (8006204 <statemachine+0x1b8c>)
 800606c:	781b      	ldrb	r3, [r3, #0]
 800606e:	3b01      	subs	r3, #1
 8006070:	b2da      	uxtb	r2, r3
 8006072:	4b64      	ldr	r3, [pc, #400]	@ (8006204 <statemachine+0x1b8c>)
 8006074:	701a      	strb	r2, [r3, #0]
				 									 						  BTN_B=0;
 8006076:	4b62      	ldr	r3, [pc, #392]	@ (8006200 <statemachine+0x1b88>)
 8006078:	2200      	movs	r2, #0
 800607a:	601a      	str	r2, [r3, #0]
				 									 						  BTN_A=0;
 800607c:	4b62      	ldr	r3, [pc, #392]	@ (8006208 <statemachine+0x1b90>)
 800607e:	2200      	movs	r2, #0
 8006080:	601a      	str	r2, [r3, #0]
				 					 if(BTN_A>=1){
 8006082:	4b61      	ldr	r3, [pc, #388]	@ (8006208 <statemachine+0x1b90>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	2b00      	cmp	r3, #0
 8006088:	dd0b      	ble.n	80060a2 <statemachine+0x1a2a>
				 									  			 	state++;
 800608a:	4b60      	ldr	r3, [pc, #384]	@ (800620c <statemachine+0x1b94>)
 800608c:	781b      	ldrb	r3, [r3, #0]
 800608e:	3301      	adds	r3, #1
 8006090:	b2da      	uxtb	r2, r3
 8006092:	4b5e      	ldr	r3, [pc, #376]	@ (800620c <statemachine+0x1b94>)
 8006094:	701a      	strb	r2, [r3, #0]
				 									  			 	BTN_A=0;
 8006096:	4b5c      	ldr	r3, [pc, #368]	@ (8006208 <statemachine+0x1b90>)
 8006098:	2200      	movs	r2, #0
 800609a:	601a      	str	r2, [r3, #0]
				 									  			 	BTN_B=0;
 800609c:	4b58      	ldr	r3, [pc, #352]	@ (8006200 <statemachine+0x1b88>)
 800609e:	2200      	movs	r2, #0
 80060a0:	601a      	str	r2, [r3, #0]
				 					if(BTN_A_LONG>=1){
 80060a2:	4b5b      	ldr	r3, [pc, #364]	@ (8006210 <statemachine+0x1b98>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	dd13      	ble.n	80060d2 <statemachine+0x1a5a>
				 									 									  			 	state--;
 80060aa:	4b58      	ldr	r3, [pc, #352]	@ (800620c <statemachine+0x1b94>)
 80060ac:	781b      	ldrb	r3, [r3, #0]
 80060ae:	3b01      	subs	r3, #1
 80060b0:	b2da      	uxtb	r2, r3
 80060b2:	4b56      	ldr	r3, [pc, #344]	@ (800620c <statemachine+0x1b94>)
 80060b4:	701a      	strb	r2, [r3, #0]
				 									 									  			 	BTN_A=0;
 80060b6:	4b54      	ldr	r3, [pc, #336]	@ (8006208 <statemachine+0x1b90>)
 80060b8:	2200      	movs	r2, #0
 80060ba:	601a      	str	r2, [r3, #0]
				 									 									  			 	BTN_B=0;
 80060bc:	4b50      	ldr	r3, [pc, #320]	@ (8006200 <statemachine+0x1b88>)
 80060be:	2200      	movs	r2, #0
 80060c0:	601a      	str	r2, [r3, #0]
				 									 									  			 	BTN_A_LONG=0;
 80060c2:	4b53      	ldr	r3, [pc, #332]	@ (8006210 <statemachine+0x1b98>)
 80060c4:	2200      	movs	r2, #0
 80060c6:	601a      	str	r2, [r3, #0]
				 					 break;
 80060c8:	e003      	b.n	80060d2 <statemachine+0x1a5a>
				 					  break;
 80060ca:	bf00      	nop
 80060cc:	e088      	b.n	80061e0 <statemachine+0x1b68>
				 			  break;
 80060ce:	bf00      	nop
 80060d0:	e086      	b.n	80061e0 <statemachine+0x1b68>
				 					 break;
 80060d2:	bf00      	nop
				  break;
 80060d4:	e084      	b.n	80061e0 <statemachine+0x1b68>

				  case STATE_BLUETOOTH:
					  ssd1306_Fill(Black);
 80060d6:	2000      	movs	r0, #0
 80060d8:	f7fd fe18 	bl	8003d0c <ssd1306_Fill>
					  ssd1306_SetCursor(32,12);
 80060dc:	210c      	movs	r1, #12
 80060de:	2020      	movs	r0, #32
 80060e0:	f7fd ff56 	bl	8003f90 <ssd1306_SetCursor>
					  ssd1306_WriteString((char *)tarvos_RX_Buffer,Font_6x8,White);
 80060e4:	4a4b      	ldr	r2, [pc, #300]	@ (8006214 <statemachine+0x1b9c>)
 80060e6:	2301      	movs	r3, #1
 80060e8:	ca06      	ldmia	r2, {r1, r2}
 80060ea:	484b      	ldr	r0, [pc, #300]	@ (8006218 <statemachine+0x1ba0>)
 80060ec:	f7fd ff2a 	bl	8003f44 <ssd1306_WriteString>
					  ssd1306_SetCursor(32,22);
 80060f0:	2116      	movs	r1, #22
 80060f2:	2020      	movs	r0, #32
 80060f4:	f7fd ff4c 	bl	8003f90 <ssd1306_SetCursor>

					  for(int i=0;i<2;i++){
 80060f8:	2300      	movs	r3, #0
 80060fa:	607b      	str	r3, [r7, #4]
 80060fc:	e01c      	b.n	8006138 <statemachine+0x1ac0>
						  ssd1306_SetCursor(32,32+(10*i));
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	b2db      	uxtb	r3, r3
 8006102:	461a      	mov	r2, r3
 8006104:	0092      	lsls	r2, r2, #2
 8006106:	4413      	add	r3, r2
 8006108:	005b      	lsls	r3, r3, #1
 800610a:	b2db      	uxtb	r3, r3
 800610c:	3320      	adds	r3, #32
 800610e:	b2db      	uxtb	r3, r3
 8006110:	4619      	mov	r1, r3
 8006112:	2020      	movs	r0, #32
 8006114:	f7fd ff3c 	bl	8003f90 <ssd1306_SetCursor>
						  ssd1306_WriteString((char *)tarvos_RX_Buffer+(12*i), Font_6x8, White);
 8006118:	687a      	ldr	r2, [r7, #4]
 800611a:	4613      	mov	r3, r2
 800611c:	005b      	lsls	r3, r3, #1
 800611e:	4413      	add	r3, r2
 8006120:	009b      	lsls	r3, r3, #2
 8006122:	461a      	mov	r2, r3
 8006124:	4b3c      	ldr	r3, [pc, #240]	@ (8006218 <statemachine+0x1ba0>)
 8006126:	18d0      	adds	r0, r2, r3
 8006128:	4a3a      	ldr	r2, [pc, #232]	@ (8006214 <statemachine+0x1b9c>)
 800612a:	2301      	movs	r3, #1
 800612c:	ca06      	ldmia	r2, {r1, r2}
 800612e:	f7fd ff09 	bl	8003f44 <ssd1306_WriteString>
					  for(int i=0;i<2;i++){
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	3301      	adds	r3, #1
 8006136:	607b      	str	r3, [r7, #4]
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2b01      	cmp	r3, #1
 800613c:	dddf      	ble.n	80060fe <statemachine+0x1a86>



					  }

					  if(BTN_B>=1){
 800613e:	4b30      	ldr	r3, [pc, #192]	@ (8006200 <statemachine+0x1b88>)
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	2b00      	cmp	r3, #0
 8006144:	dd08      	ble.n	8006158 <statemachine+0x1ae0>


						  bluetoothsend=1;
 8006146:	4b35      	ldr	r3, [pc, #212]	@ (800621c <statemachine+0x1ba4>)
 8006148:	2201      	movs	r2, #1
 800614a:	601a      	str	r2, [r3, #0]
						  BTN_B=0;
 800614c:	4b2c      	ldr	r3, [pc, #176]	@ (8006200 <statemachine+0x1b88>)
 800614e:	2200      	movs	r2, #0
 8006150:	601a      	str	r2, [r3, #0]
						  BTN_B_LONG=0;
 8006152:	4b33      	ldr	r3, [pc, #204]	@ (8006220 <statemachine+0x1ba8>)
 8006154:	2200      	movs	r2, #0
 8006156:	601a      	str	r2, [r3, #0]
					  }


				  if(BTN_A>=1){
 8006158:	4b2b      	ldr	r3, [pc, #172]	@ (8006208 <statemachine+0x1b90>)
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	2b00      	cmp	r3, #0
 800615e:	dd23      	ble.n	80061a8 <statemachine+0x1b30>
						state--;
 8006160:	4b2a      	ldr	r3, [pc, #168]	@ (800620c <statemachine+0x1b94>)
 8006162:	781b      	ldrb	r3, [r3, #0]
 8006164:	3b01      	subs	r3, #1
 8006166:	b2da      	uxtb	r2, r3
 8006168:	4b28      	ldr	r3, [pc, #160]	@ (800620c <statemachine+0x1b94>)
 800616a:	701a      	strb	r2, [r3, #0]
						state--;
 800616c:	4b27      	ldr	r3, [pc, #156]	@ (800620c <statemachine+0x1b94>)
 800616e:	781b      	ldrb	r3, [r3, #0]
 8006170:	3b01      	subs	r3, #1
 8006172:	b2da      	uxtb	r2, r3
 8006174:	4b25      	ldr	r3, [pc, #148]	@ (800620c <statemachine+0x1b94>)
 8006176:	701a      	strb	r2, [r3, #0]
						state--;
 8006178:	4b24      	ldr	r3, [pc, #144]	@ (800620c <statemachine+0x1b94>)
 800617a:	781b      	ldrb	r3, [r3, #0]
 800617c:	3b01      	subs	r3, #1
 800617e:	b2da      	uxtb	r2, r3
 8006180:	4b22      	ldr	r3, [pc, #136]	@ (800620c <statemachine+0x1b94>)
 8006182:	701a      	strb	r2, [r3, #0]
						state--;
 8006184:	4b21      	ldr	r3, [pc, #132]	@ (800620c <statemachine+0x1b94>)
 8006186:	781b      	ldrb	r3, [r3, #0]
 8006188:	3b01      	subs	r3, #1
 800618a:	b2da      	uxtb	r2, r3
 800618c:	4b1f      	ldr	r3, [pc, #124]	@ (800620c <statemachine+0x1b94>)
 800618e:	701a      	strb	r2, [r3, #0]
						state--;
 8006190:	4b1e      	ldr	r3, [pc, #120]	@ (800620c <statemachine+0x1b94>)
 8006192:	781b      	ldrb	r3, [r3, #0]
 8006194:	3b01      	subs	r3, #1
 8006196:	b2da      	uxtb	r2, r3
 8006198:	4b1c      	ldr	r3, [pc, #112]	@ (800620c <statemachine+0x1b94>)
 800619a:	701a      	strb	r2, [r3, #0]
						BTN_A=0;
 800619c:	4b1a      	ldr	r3, [pc, #104]	@ (8006208 <statemachine+0x1b90>)
 800619e:	2200      	movs	r2, #0
 80061a0:	601a      	str	r2, [r3, #0]
						BTN_B=0;
 80061a2:	4b17      	ldr	r3, [pc, #92]	@ (8006200 <statemachine+0x1b88>)
 80061a4:	2200      	movs	r2, #0
 80061a6:	601a      	str	r2, [r3, #0]
							}
					if(BTN_A_LONG>=1){
 80061a8:	4b19      	ldr	r3, [pc, #100]	@ (8006210 <statemachine+0x1b98>)
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	dd19      	ble.n	80061e4 <statemachine+0x1b6c>
							state--;
 80061b0:	4b16      	ldr	r3, [pc, #88]	@ (800620c <statemachine+0x1b94>)
 80061b2:	781b      	ldrb	r3, [r3, #0]
 80061b4:	3b01      	subs	r3, #1
 80061b6:	b2da      	uxtb	r2, r3
 80061b8:	4b14      	ldr	r3, [pc, #80]	@ (800620c <statemachine+0x1b94>)
 80061ba:	701a      	strb	r2, [r3, #0]
							BTN_A=0;
 80061bc:	4b12      	ldr	r3, [pc, #72]	@ (8006208 <statemachine+0x1b90>)
 80061be:	2200      	movs	r2, #0
 80061c0:	601a      	str	r2, [r3, #0]
							BTN_B=0;
 80061c2:	4b0f      	ldr	r3, [pc, #60]	@ (8006200 <statemachine+0x1b88>)
 80061c4:	2200      	movs	r2, #0
 80061c6:	601a      	str	r2, [r3, #0]
							BTN_A_LONG=0;
 80061c8:	4b11      	ldr	r3, [pc, #68]	@ (8006210 <statemachine+0x1b98>)
 80061ca:	2200      	movs	r2, #0
 80061cc:	601a      	str	r2, [r3, #0]
							}



					  break;
 80061ce:	e009      	b.n	80061e4 <statemachine+0x1b6c>
				  									 	 break;
 80061d0:	bf00      	nop
 80061d2:	e008      	b.n	80061e6 <statemachine+0x1b6e>
					  break;
 80061d4:	bf00      	nop
 80061d6:	e006      	b.n	80061e6 <statemachine+0x1b6e>
			  break;
 80061d8:	bf00      	nop
 80061da:	e004      	b.n	80061e6 <statemachine+0x1b6e>
			  break;
 80061dc:	bf00      	nop
 80061de:	e002      	b.n	80061e6 <statemachine+0x1b6e>
				  break;
 80061e0:	bf00      	nop
 80061e2:	e000      	b.n	80061e6 <statemachine+0x1b6e>
					  break;
 80061e4:	bf00      	nop




	}
return ;
 80061e6:	bf00      	nop
 80061e8:	bf00      	nop
}
 80061ea:	3718      	adds	r7, #24
 80061ec:	46bd      	mov	sp, r7
 80061ee:	ecbd 8b02 	vpop	{d8}
 80061f2:	bdb0      	pop	{r4, r5, r7, pc}
 80061f4:	2000001c 	.word	0x2000001c
 80061f8:	0801fecc 	.word	0x0801fecc
 80061fc:	0801feec 	.word	0x0801feec
 8006200:	2000096c 	.word	0x2000096c
 8006204:	200005d8 	.word	0x200005d8
 8006208:	20000968 	.word	0x20000968
 800620c:	200005d4 	.word	0x200005d4
 8006210:	20000ca0 	.word	0x20000ca0
 8006214:	20000014 	.word	0x20000014
 8006218:	20000820 	.word	0x20000820
 800621c:	20000ca4 	.word	0x20000ca4
 8006220:	20000c9c 	.word	0x20000c9c

08006224 <LL_AHB3_GRP1_EnableClock>:
{
 8006224:	b480      	push	{r7}
 8006226:	b085      	sub	sp, #20
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800622c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006230:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006232:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	4313      	orrs	r3, r2
 800623a:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800623c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006240:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	4013      	ands	r3, r2
 8006246:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006248:	68fb      	ldr	r3, [r7, #12]
}
 800624a:	bf00      	nop
 800624c:	3714      	adds	r7, #20
 800624e:	46bd      	mov	sp, r7
 8006250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006254:	4770      	bx	lr

08006256 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006256:	b580      	push	{r7, lr}
 8006258:	af00      	add	r7, sp, #0



  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 800625a:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800625e:	f7ff ffe1 	bl	8006224 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8006262:	2200      	movs	r2, #0
 8006264:	2100      	movs	r1, #0
 8006266:	202e      	movs	r0, #46	@ 0x2e
 8006268:	f002 faf1 	bl	800884e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 800626c:	202e      	movs	r0, #46	@ 0x2e
 800626e:	f002 fb08 	bl	8008882 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006272:	bf00      	nop
 8006274:	bd80      	pop	{r7, pc}
	...

08006278 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
  {
	   ssd1306_SetCursor(32, 20);
 800627c:	2114      	movs	r1, #20
 800627e:	2020      	movs	r0, #32
 8006280:	f7fd fe86 	bl	8003f90 <ssd1306_SetCursor>
	   	  ssd1306_WriteString("NMI", Font_7x10, White);
 8006284:	4a04      	ldr	r2, [pc, #16]	@ (8006298 <NMI_Handler+0x20>)
 8006286:	2301      	movs	r3, #1
 8006288:	ca06      	ldmia	r2, {r1, r2}
 800628a:	4804      	ldr	r0, [pc, #16]	@ (800629c <NMI_Handler+0x24>)
 800628c:	f7fd fe5a 	bl	8003f44 <ssd1306_WriteString>
	   	  ssd1306_UpdateScreen();
 8006290:	f7fd fd54 	bl	8003d3c <ssd1306_UpdateScreen>
	   ssd1306_SetCursor(32, 20);
 8006294:	bf00      	nop
 8006296:	e7f1      	b.n	800627c <NMI_Handler+0x4>
 8006298:	2000001c 	.word	0x2000001c
 800629c:	0801fef4 	.word	0x0801fef4

080062a0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  ssd1306_SetCursor(32, 20);
 80062a4:	2114      	movs	r1, #20
 80062a6:	2020      	movs	r0, #32
 80062a8:	f7fd fe72 	bl	8003f90 <ssd1306_SetCursor>
	  ssd1306_WriteString("hardfault", Font_7x10, White);
 80062ac:	4a04      	ldr	r2, [pc, #16]	@ (80062c0 <HardFault_Handler+0x20>)
 80062ae:	2301      	movs	r3, #1
 80062b0:	ca06      	ldmia	r2, {r1, r2}
 80062b2:	4804      	ldr	r0, [pc, #16]	@ (80062c4 <HardFault_Handler+0x24>)
 80062b4:	f7fd fe46 	bl	8003f44 <ssd1306_WriteString>
	  ssd1306_UpdateScreen();
 80062b8:	f7fd fd40 	bl	8003d3c <ssd1306_UpdateScreen>
	  ssd1306_SetCursor(32, 20);
 80062bc:	bf00      	nop
 80062be:	e7f1      	b.n	80062a4 <HardFault_Handler+0x4>
 80062c0:	2000001c 	.word	0x2000001c
 80062c4:	0801fef8 	.word	0x0801fef8

080062c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	af00      	add	r7, sp, #0

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
	  ssd1306_SetCursor(32, 20);
 80062cc:	2114      	movs	r1, #20
 80062ce:	2020      	movs	r0, #32
 80062d0:	f7fd fe5e 	bl	8003f90 <ssd1306_SetCursor>
	  	  ssd1306_WriteString("mem", Font_7x10, White);
 80062d4:	4a04      	ldr	r2, [pc, #16]	@ (80062e8 <MemManage_Handler+0x20>)
 80062d6:	2301      	movs	r3, #1
 80062d8:	ca06      	ldmia	r2, {r1, r2}
 80062da:	4804      	ldr	r0, [pc, #16]	@ (80062ec <MemManage_Handler+0x24>)
 80062dc:	f7fd fe32 	bl	8003f44 <ssd1306_WriteString>
	  	  ssd1306_UpdateScreen();
 80062e0:	f7fd fd2c 	bl	8003d3c <ssd1306_UpdateScreen>
	  ssd1306_SetCursor(32, 20);
 80062e4:	bf00      	nop
 80062e6:	e7f1      	b.n	80062cc <MemManage_Handler+0x4>
 80062e8:	2000001c 	.word	0x2000001c
 80062ec:	0801ff04 	.word	0x0801ff04

080062f0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	af00      	add	r7, sp, #0

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_BusFault_IRQn 0 */
	  ssd1306_SetCursor(32, 20);
 80062f4:	2114      	movs	r1, #20
 80062f6:	2020      	movs	r0, #32
 80062f8:	f7fd fe4a 	bl	8003f90 <ssd1306_SetCursor>
	  	  ssd1306_WriteString("bus", Font_7x10, White);
 80062fc:	4a04      	ldr	r2, [pc, #16]	@ (8006310 <BusFault_Handler+0x20>)
 80062fe:	2301      	movs	r3, #1
 8006300:	ca06      	ldmia	r2, {r1, r2}
 8006302:	4804      	ldr	r0, [pc, #16]	@ (8006314 <BusFault_Handler+0x24>)
 8006304:	f7fd fe1e 	bl	8003f44 <ssd1306_WriteString>
	  	  ssd1306_UpdateScreen();
 8006308:	f7fd fd18 	bl	8003d3c <ssd1306_UpdateScreen>
	  ssd1306_SetCursor(32, 20);
 800630c:	bf00      	nop
 800630e:	e7f1      	b.n	80062f4 <BusFault_Handler+0x4>
 8006310:	2000001c 	.word	0x2000001c
 8006314:	0801ff08 	.word	0x0801ff08

08006318 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	af00      	add	r7, sp, #0

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_UsageFault_IRQn 0 */
	  ssd1306_SetCursor(32, 20);
 800631c:	2114      	movs	r1, #20
 800631e:	2020      	movs	r0, #32
 8006320:	f7fd fe36 	bl	8003f90 <ssd1306_SetCursor>
	  	  ssd1306_WriteString("usage", Font_7x10, White);
 8006324:	4a04      	ldr	r2, [pc, #16]	@ (8006338 <UsageFault_Handler+0x20>)
 8006326:	2301      	movs	r3, #1
 8006328:	ca06      	ldmia	r2, {r1, r2}
 800632a:	4804      	ldr	r0, [pc, #16]	@ (800633c <UsageFault_Handler+0x24>)
 800632c:	f7fd fe0a 	bl	8003f44 <ssd1306_WriteString>
	  	  ssd1306_UpdateScreen();
 8006330:	f7fd fd04 	bl	8003d3c <ssd1306_UpdateScreen>
	  ssd1306_SetCursor(32, 20);
 8006334:	bf00      	nop
 8006336:	e7f1      	b.n	800631c <UsageFault_Handler+0x4>
 8006338:	2000001c 	.word	0x2000001c
 800633c:	0801ff0c 	.word	0x0801ff0c

08006340 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006340:	b480      	push	{r7}
 8006342:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006344:	bf00      	nop
 8006346:	46bd      	mov	sp, r7
 8006348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634c:	4770      	bx	lr

0800634e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800634e:	b480      	push	{r7}
 8006350:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006352:	bf00      	nop
 8006354:	46bd      	mov	sp, r7
 8006356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635a:	4770      	bx	lr

0800635c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800635c:	b480      	push	{r7}
 800635e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006360:	bf00      	nop
 8006362:	46bd      	mov	sp, r7
 8006364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006368:	4770      	bx	lr

0800636a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800636a:	b580      	push	{r7, lr}
 800636c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800636e:	f001 f87b 	bl	8007468 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006372:	bf00      	nop
 8006374:	bd80      	pop	{r7, pc}

08006376 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 8006376:	b580      	push	{r7, lr}
 8006378:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 800637a:	f7fb fe31 	bl	8001fe0 <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 800637e:	bf00      	nop
 8006380:	bd80      	pop	{r7, pc}
	...

08006384 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8006388:	4802      	ldr	r0, [pc, #8]	@ (8006394 <DMA1_Channel1_IRQHandler+0x10>)
 800638a:	f002 fd36 	bl	8008dfa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800638e:	bf00      	nop
 8006390:	bd80      	pop	{r7, pc}
 8006392:	bf00      	nop
 8006394:	200003f0 	.word	0x200003f0

08006398 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8006398:	b580      	push	{r7, lr}
 800639a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 800639c:	4802      	ldr	r0, [pc, #8]	@ (80063a8 <DMA1_Channel2_IRQHandler+0x10>)
 800639e:	f002 fd2c 	bl	8008dfa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80063a2:	bf00      	nop
 80063a4:	bd80      	pop	{r7, pc}
 80063a6:	bf00      	nop
 80063a8:	200013fc 	.word	0x200013fc

080063ac <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80063b0:	4802      	ldr	r0, [pc, #8]	@ (80063bc <DMA1_Channel3_IRQHandler+0x10>)
 80063b2:	f002 fd22 	bl	8008dfa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80063b6:	bf00      	nop
 80063b8:	bd80      	pop	{r7, pc}
 80063ba:	bf00      	nop
 80063bc:	2000145c 	.word	0x2000145c

080063c0 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt, USB wake-up interrupt through EXTI line 28.
  */
void USB_LP_IRQHandler(void)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80063c4:	4802      	ldr	r0, [pc, #8]	@ (80063d0 <USB_LP_IRQHandler+0x10>)
 80063c6:	f003 ffb5 	bl	800a334 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 80063ca:	bf00      	nop
 80063cc:	bd80      	pop	{r7, pc}
 80063ce:	bf00      	nop
 80063d0:	20002ab0 	.word	0x20002ab0

080063d4 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80063d8:	4806      	ldr	r0, [pc, #24]	@ (80063f4 <TIM1_UP_TIM16_IRQHandler+0x20>)
 80063da:	f008 fe42 	bl	800f062 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */
  updatedate();
 80063de:	f000 fb47 	bl	8006a70 <updatedate>
  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_0);
 80063e2:	2101      	movs	r1, #1
 80063e4:	4804      	ldr	r0, [pc, #16]	@ (80063f8 <TIM1_UP_TIM16_IRQHandler+0x24>)
 80063e6:	f003 f8e3 	bl	80095b0 <HAL_GPIO_TogglePin>
  bluetoothsend=1;
 80063ea:	4b04      	ldr	r3, [pc, #16]	@ (80063fc <TIM1_UP_TIM16_IRQHandler+0x28>)
 80063ec:	2201      	movs	r2, #1
 80063ee:	601a      	str	r2, [r3, #0]

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80063f0:	bf00      	nop
 80063f2:	bd80      	pop	{r7, pc}
 80063f4:	2000123c 	.word	0x2000123c
 80063f8:	48000400 	.word	0x48000400
 80063fc:	20000ca4 	.word	0x20000ca4

08006400 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8006400:	b580      	push	{r7, lr}
 8006402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8006404:	4805      	ldr	r0, [pc, #20]	@ (800641c <TIM1_TRG_COM_TIM17_IRQHandler+0x1c>)
 8006406:	f008 fe2c 	bl	800f062 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */
  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_1);
 800640a:	2102      	movs	r1, #2
 800640c:	4804      	ldr	r0, [pc, #16]	@ (8006420 <TIM1_TRG_COM_TIM17_IRQHandler+0x20>)
 800640e:	f003 f8cf 	bl	80095b0 <HAL_GPIO_TogglePin>
  enablewrite=1;
 8006412:	4b04      	ldr	r3, [pc, #16]	@ (8006424 <TIM1_TRG_COM_TIM17_IRQHandler+0x24>)
 8006414:	2201      	movs	r2, #1
 8006416:	601a      	str	r2, [r3, #0]

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8006418:	bf00      	nop
 800641a:	bd80      	pop	{r7, pc}
 800641c:	20001288 	.word	0x20001288
 8006420:	48000400 	.word	0x48000400
 8006424:	20000c80 	.word	0x20000c80

08006428 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 800642c:	4802      	ldr	r0, [pc, #8]	@ (8006438 <SPI1_IRQHandler+0x10>)
 800642e:	f008 fa2d 	bl	800e88c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8006432:	bf00      	nop
 8006434:	bd80      	pop	{r7, pc}
 8006436:	bf00      	nop
 8006438:	20000d80 	.word	0x20000d80

0800643c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800643c:	b580      	push	{r7, lr}
 800643e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8006440:	4802      	ldr	r0, [pc, #8]	@ (800644c <USART1_IRQHandler+0x10>)
 8006442:	f009 fc33 	bl	800fcac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8006446:	bf00      	nop
 8006448:	bd80      	pop	{r7, pc}
 800644a:	bf00      	nop
 800644c:	20001368 	.word	0x20001368

08006450 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8006454:	4802      	ldr	r0, [pc, #8]	@ (8006460 <LPUART1_IRQHandler+0x10>)
 8006456:	f009 fc29 	bl	800fcac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 800645a:	bf00      	nop
 800645c:	bd80      	pop	{r7, pc}
 800645e:	bf00      	nop
 8006460:	200012d4 	.word	0x200012d4

08006464 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8006464:	b580      	push	{r7, lr}
 8006466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8006468:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800646c:	f003 f8ba 	bl	80095e4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8006470:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8006474:	f003 f8b6 	bl	80095e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8006478:	bf00      	nop
 800647a:	bd80      	pop	{r7, pc}

0800647c <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 800647c:	b580      	push	{r7, lr}
 800647e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8006480:	f012 f8f8 	bl	8018674 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8006484:	bf00      	nop
 8006486:	bd80      	pop	{r7, pc}

08006488 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8006488:	b580      	push	{r7, lr}
 800648a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 800648c:	f012 f928 	bl	80186e0 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8006490:	bf00      	nop
 8006492:	bd80      	pop	{r7, pc}

08006494 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8006498:	f003 f8bc 	bl	8009614 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 800649c:	bf00      	nop
 800649e:	bd80      	pop	{r7, pc}

080064a0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80064a0:	b480      	push	{r7}
 80064a2:	af00      	add	r7, sp, #0
  return 1;
 80064a4:	2301      	movs	r3, #1
}
 80064a6:	4618      	mov	r0, r3
 80064a8:	46bd      	mov	sp, r7
 80064aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ae:	4770      	bx	lr

080064b0 <_kill>:

int _kill(int pid, int sig)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b082      	sub	sp, #8
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
 80064b8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80064ba:	f015 fa25 	bl	801b908 <__errno>
 80064be:	4603      	mov	r3, r0
 80064c0:	2216      	movs	r2, #22
 80064c2:	601a      	str	r2, [r3, #0]
  return -1;
 80064c4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80064c8:	4618      	mov	r0, r3
 80064ca:	3708      	adds	r7, #8
 80064cc:	46bd      	mov	sp, r7
 80064ce:	bd80      	pop	{r7, pc}

080064d0 <_exit>:

void _exit (int status)
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b082      	sub	sp, #8
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80064d8:	f04f 31ff 	mov.w	r1, #4294967295
 80064dc:	6878      	ldr	r0, [r7, #4]
 80064de:	f7ff ffe7 	bl	80064b0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80064e2:	bf00      	nop
 80064e4:	e7fd      	b.n	80064e2 <_exit+0x12>

080064e6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80064e6:	b580      	push	{r7, lr}
 80064e8:	b086      	sub	sp, #24
 80064ea:	af00      	add	r7, sp, #0
 80064ec:	60f8      	str	r0, [r7, #12]
 80064ee:	60b9      	str	r1, [r7, #8]
 80064f0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80064f2:	2300      	movs	r3, #0
 80064f4:	617b      	str	r3, [r7, #20]
 80064f6:	e00a      	b.n	800650e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80064f8:	f3af 8000 	nop.w
 80064fc:	4601      	mov	r1, r0
 80064fe:	68bb      	ldr	r3, [r7, #8]
 8006500:	1c5a      	adds	r2, r3, #1
 8006502:	60ba      	str	r2, [r7, #8]
 8006504:	b2ca      	uxtb	r2, r1
 8006506:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006508:	697b      	ldr	r3, [r7, #20]
 800650a:	3301      	adds	r3, #1
 800650c:	617b      	str	r3, [r7, #20]
 800650e:	697a      	ldr	r2, [r7, #20]
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	429a      	cmp	r2, r3
 8006514:	dbf0      	blt.n	80064f8 <_read+0x12>
  }

  return len;
 8006516:	687b      	ldr	r3, [r7, #4]
}
 8006518:	4618      	mov	r0, r3
 800651a:	3718      	adds	r7, #24
 800651c:	46bd      	mov	sp, r7
 800651e:	bd80      	pop	{r7, pc}

08006520 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8006520:	b580      	push	{r7, lr}
 8006522:	b086      	sub	sp, #24
 8006524:	af00      	add	r7, sp, #0
 8006526:	60f8      	str	r0, [r7, #12]
 8006528:	60b9      	str	r1, [r7, #8]
 800652a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800652c:	2300      	movs	r3, #0
 800652e:	617b      	str	r3, [r7, #20]
 8006530:	e009      	b.n	8006546 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8006532:	68bb      	ldr	r3, [r7, #8]
 8006534:	1c5a      	adds	r2, r3, #1
 8006536:	60ba      	str	r2, [r7, #8]
 8006538:	781b      	ldrb	r3, [r3, #0]
 800653a:	4618      	mov	r0, r3
 800653c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006540:	697b      	ldr	r3, [r7, #20]
 8006542:	3301      	adds	r3, #1
 8006544:	617b      	str	r3, [r7, #20]
 8006546:	697a      	ldr	r2, [r7, #20]
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	429a      	cmp	r2, r3
 800654c:	dbf1      	blt.n	8006532 <_write+0x12>
  }
  return len;
 800654e:	687b      	ldr	r3, [r7, #4]
}
 8006550:	4618      	mov	r0, r3
 8006552:	3718      	adds	r7, #24
 8006554:	46bd      	mov	sp, r7
 8006556:	bd80      	pop	{r7, pc}

08006558 <_close>:

int _close(int file)
{
 8006558:	b480      	push	{r7}
 800655a:	b083      	sub	sp, #12
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8006560:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006564:	4618      	mov	r0, r3
 8006566:	370c      	adds	r7, #12
 8006568:	46bd      	mov	sp, r7
 800656a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656e:	4770      	bx	lr

08006570 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8006570:	b480      	push	{r7}
 8006572:	b083      	sub	sp, #12
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
 8006578:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8006580:	605a      	str	r2, [r3, #4]
  return 0;
 8006582:	2300      	movs	r3, #0
}
 8006584:	4618      	mov	r0, r3
 8006586:	370c      	adds	r7, #12
 8006588:	46bd      	mov	sp, r7
 800658a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658e:	4770      	bx	lr

08006590 <_isatty>:

int _isatty(int file)
{
 8006590:	b480      	push	{r7}
 8006592:	b083      	sub	sp, #12
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8006598:	2301      	movs	r3, #1
}
 800659a:	4618      	mov	r0, r3
 800659c:	370c      	adds	r7, #12
 800659e:	46bd      	mov	sp, r7
 80065a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a4:	4770      	bx	lr

080065a6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80065a6:	b480      	push	{r7}
 80065a8:	b085      	sub	sp, #20
 80065aa:	af00      	add	r7, sp, #0
 80065ac:	60f8      	str	r0, [r7, #12]
 80065ae:	60b9      	str	r1, [r7, #8]
 80065b0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80065b2:	2300      	movs	r3, #0
}
 80065b4:	4618      	mov	r0, r3
 80065b6:	3714      	adds	r7, #20
 80065b8:	46bd      	mov	sp, r7
 80065ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065be:	4770      	bx	lr

080065c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b086      	sub	sp, #24
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80065c8:	4a14      	ldr	r2, [pc, #80]	@ (800661c <_sbrk+0x5c>)
 80065ca:	4b15      	ldr	r3, [pc, #84]	@ (8006620 <_sbrk+0x60>)
 80065cc:	1ad3      	subs	r3, r2, r3
 80065ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80065d0:	697b      	ldr	r3, [r7, #20]
 80065d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80065d4:	4b13      	ldr	r3, [pc, #76]	@ (8006624 <_sbrk+0x64>)
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d102      	bne.n	80065e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80065dc:	4b11      	ldr	r3, [pc, #68]	@ (8006624 <_sbrk+0x64>)
 80065de:	4a12      	ldr	r2, [pc, #72]	@ (8006628 <_sbrk+0x68>)
 80065e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80065e2:	4b10      	ldr	r3, [pc, #64]	@ (8006624 <_sbrk+0x64>)
 80065e4:	681a      	ldr	r2, [r3, #0]
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	4413      	add	r3, r2
 80065ea:	693a      	ldr	r2, [r7, #16]
 80065ec:	429a      	cmp	r2, r3
 80065ee:	d207      	bcs.n	8006600 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80065f0:	f015 f98a 	bl	801b908 <__errno>
 80065f4:	4603      	mov	r3, r0
 80065f6:	220c      	movs	r2, #12
 80065f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80065fa:	f04f 33ff 	mov.w	r3, #4294967295
 80065fe:	e009      	b.n	8006614 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006600:	4b08      	ldr	r3, [pc, #32]	@ (8006624 <_sbrk+0x64>)
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006606:	4b07      	ldr	r3, [pc, #28]	@ (8006624 <_sbrk+0x64>)
 8006608:	681a      	ldr	r2, [r3, #0]
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	4413      	add	r3, r2
 800660e:	4a05      	ldr	r2, [pc, #20]	@ (8006624 <_sbrk+0x64>)
 8006610:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006612:	68fb      	ldr	r3, [r7, #12]
}
 8006614:	4618      	mov	r0, r3
 8006616:	3718      	adds	r7, #24
 8006618:	46bd      	mov	sp, r7
 800661a:	bd80      	pop	{r7, pc}
 800661c:	20030000 	.word	0x20030000
 8006620:	00000400 	.word	0x00000400
 8006624:	200011ec 	.word	0x200011ec
 8006628:	20003198 	.word	0x20003198

0800662c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800662c:	b480      	push	{r7}
 800662e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8006630:	4b24      	ldr	r3, [pc, #144]	@ (80066c4 <SystemInit+0x98>)
 8006632:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006636:	4a23      	ldr	r2, [pc, #140]	@ (80066c4 <SystemInit+0x98>)
 8006638:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800663c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8006640:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800664a:	f043 0301 	orr.w	r3, r3, #1
 800664e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8006650:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006654:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8006658:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 800665a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800665e:	681a      	ldr	r2, [r3, #0]
 8006660:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006664:	4b18      	ldr	r3, [pc, #96]	@ (80066c8 <SystemInit+0x9c>)
 8006666:	4013      	ands	r3, r2
 8006668:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 800666a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800666e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006672:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006676:	f023 0305 	bic.w	r3, r3, #5
 800667a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800667e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006682:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006686:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800668a:	f023 0301 	bic.w	r3, r3, #1
 800668e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8006692:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006696:	4a0d      	ldr	r2, [pc, #52]	@ (80066cc <SystemInit+0xa0>)
 8006698:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 800669a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800669e:	4a0b      	ldr	r2, [pc, #44]	@ (80066cc <SystemInit+0xa0>)
 80066a0:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80066a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80066ac:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80066b0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80066b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80066b6:	2200      	movs	r2, #0
 80066b8:	619a      	str	r2, [r3, #24]
}
 80066ba:	bf00      	nop
 80066bc:	46bd      	mov	sp, r7
 80066be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c2:	4770      	bx	lr
 80066c4:	e000ed00 	.word	0xe000ed00
 80066c8:	faf6fefb 	.word	0xfaf6fefb
 80066cc:	22041000 	.word	0x22041000

080066d0 <INIT_PERM_TARVOS>:

	HAL_UART_Transmit(&hlpuart1,"yo",sizeof("yo"),100);
	HAL_Delay(1000);
}

void INIT_PERM_TARVOS(uint8_t Hadr, uint8_t Sadr) {
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b08e      	sub	sp, #56	@ 0x38
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	4603      	mov	r3, r0
 80066d8:	460a      	mov	r2, r1
 80066da:	71fb      	strb	r3, [r7, #7]
 80066dc:	4613      	mov	r3, r2
 80066de:	71bb      	strb	r3, [r7, #6]
    // On passe le module en mode 1 byte (sécurité)
    uint8_t mode1[6] = {0x02, 0x09, 0x02, 0x04, 0x01,0x00};
 80066e0:	4a4a      	ldr	r2, [pc, #296]	@ (800680c <INIT_PERM_TARVOS+0x13c>)
 80066e2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80066e6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80066ea:	6018      	str	r0, [r3, #0]
 80066ec:	3304      	adds	r3, #4
 80066ee:	8019      	strh	r1, [r3, #0]
    mode1[5] = Get_CRC8(mode1, 5); // Ajout du CRC
 80066f0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80066f4:	2105      	movs	r1, #5
 80066f6:	4618      	mov	r0, r3
 80066f8:	f000 f892 	bl	8006820 <Get_CRC8>
 80066fc:	4603      	mov	r3, r0
 80066fe:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    HAL_UART_Transmit(&hlpuart1,(uint8_t *)mode1, sizeof(mode1), 500);
 8006702:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8006706:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800670a:	2206      	movs	r2, #6
 800670c:	4840      	ldr	r0, [pc, #256]	@ (8006810 <INIT_PERM_TARVOS+0x140>)
 800670e:	f009 f8e4 	bl	800f8da <HAL_UART_Transmit>

    // On change le canal (la fréquence du module)
    uint8_t frequence[6] = {0x02, 0x09, 0x02, 0x03, 0x82, 0x00}; // 869.5 MHz -> 130 = 0x82
 8006712:	4a40      	ldr	r2, [pc, #256]	@ (8006814 <INIT_PERM_TARVOS+0x144>)
 8006714:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8006718:	e892 0003 	ldmia.w	r2, {r0, r1}
 800671c:	6018      	str	r0, [r3, #0]
 800671e:	3304      	adds	r3, #4
 8006720:	8019      	strh	r1, [r3, #0]
    frequence[5] = Get_CRC8(frequence, 5); // Ajout du CRC
 8006722:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8006726:	2105      	movs	r1, #5
 8006728:	4618      	mov	r0, r3
 800672a:	f000 f879 	bl	8006820 <Get_CRC8>
 800672e:	4603      	mov	r3, r0
 8006730:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    HAL_UART_Transmit(&hlpuart1, frequence, sizeof(frequence), 500);
 8006734:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8006738:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800673c:	2206      	movs	r2, #6
 800673e:	4834      	ldr	r0, [pc, #208]	@ (8006810 <INIT_PERM_TARVOS+0x140>)
 8006740:	f009 f8cb 	bl	800f8da <HAL_UART_Transmit>

    // On modifie la puissance (ici à 500mW max)
    uint8_t puissance[6] = {0x02, 0x09, 0x02, 0x02, 0x1B, 0x00};
 8006744:	4a34      	ldr	r2, [pc, #208]	@ (8006818 <INIT_PERM_TARVOS+0x148>)
 8006746:	f107 0320 	add.w	r3, r7, #32
 800674a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800674e:	6018      	str	r0, [r3, #0]
 8006750:	3304      	adds	r3, #4
 8006752:	8019      	strh	r1, [r3, #0]
    puissance[5] = Get_CRC8(puissance, 5); // Ajout du CRC
 8006754:	f107 0320 	add.w	r3, r7, #32
 8006758:	2105      	movs	r1, #5
 800675a:	4618      	mov	r0, r3
 800675c:	f000 f860 	bl	8006820 <Get_CRC8>
 8006760:	4603      	mov	r3, r0
 8006762:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
    HAL_UART_Transmit(&hlpuart1, puissance, sizeof(puissance), 500);
 8006766:	f107 0120 	add.w	r1, r7, #32
 800676a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800676e:	2206      	movs	r2, #6
 8006770:	4827      	ldr	r0, [pc, #156]	@ (8006810 <INIT_PERM_TARVOS+0x140>)
 8006772:	f009 f8b2 	bl	800f8da <HAL_UART_Transmit>

    // On modifie l'adresse de la source
    uint8_t Sadrr[6] = {0x02, 0x09, 0x02, 0x0B, Hadr, 0x00};
 8006776:	2302      	movs	r3, #2
 8006778:	763b      	strb	r3, [r7, #24]
 800677a:	2309      	movs	r3, #9
 800677c:	767b      	strb	r3, [r7, #25]
 800677e:	2302      	movs	r3, #2
 8006780:	76bb      	strb	r3, [r7, #26]
 8006782:	230b      	movs	r3, #11
 8006784:	76fb      	strb	r3, [r7, #27]
 8006786:	79fb      	ldrb	r3, [r7, #7]
 8006788:	773b      	strb	r3, [r7, #28]
 800678a:	2300      	movs	r3, #0
 800678c:	777b      	strb	r3, [r7, #29]
    Sadrr[5] = Get_CRC8(Sadrr, 5); // Ajout du CRC
 800678e:	f107 0318 	add.w	r3, r7, #24
 8006792:	2105      	movs	r1, #5
 8006794:	4618      	mov	r0, r3
 8006796:	f000 f843 	bl	8006820 <Get_CRC8>
 800679a:	4603      	mov	r3, r0
 800679c:	777b      	strb	r3, [r7, #29]
    HAL_UART_Transmit(&hlpuart1, Sadrr, sizeof(Sadrr), 500);
 800679e:	f107 0118 	add.w	r1, r7, #24
 80067a2:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80067a6:	2206      	movs	r2, #6
 80067a8:	4819      	ldr	r0, [pc, #100]	@ (8006810 <INIT_PERM_TARVOS+0x140>)
 80067aa:	f009 f896 	bl	800f8da <HAL_UART_Transmit>

    // On modifie l'adresse avec qui on veut communiquer
	uint8_t send[6] = {0x02, 0x09, 0x02, 0x08, Sadr, 0x00};
 80067ae:	2302      	movs	r3, #2
 80067b0:	743b      	strb	r3, [r7, #16]
 80067b2:	2309      	movs	r3, #9
 80067b4:	747b      	strb	r3, [r7, #17]
 80067b6:	2302      	movs	r3, #2
 80067b8:	74bb      	strb	r3, [r7, #18]
 80067ba:	2308      	movs	r3, #8
 80067bc:	74fb      	strb	r3, [r7, #19]
 80067be:	79bb      	ldrb	r3, [r7, #6]
 80067c0:	753b      	strb	r3, [r7, #20]
 80067c2:	2300      	movs	r3, #0
 80067c4:	757b      	strb	r3, [r7, #21]
	send[5] = Get_CRC8(send, 5); // Ajout du CRC
 80067c6:	f107 0310 	add.w	r3, r7, #16
 80067ca:	2105      	movs	r1, #5
 80067cc:	4618      	mov	r0, r3
 80067ce:	f000 f827 	bl	8006820 <Get_CRC8>
 80067d2:	4603      	mov	r3, r0
 80067d4:	757b      	strb	r3, [r7, #21]
	HAL_UART_Transmit(&hlpuart1, send, sizeof(send), 500);
 80067d6:	f107 0110 	add.w	r1, r7, #16
 80067da:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80067de:	2206      	movs	r2, #6
 80067e0:	480b      	ldr	r0, [pc, #44]	@ (8006810 <INIT_PERM_TARVOS+0x140>)
 80067e2:	f009 f87a 	bl	800f8da <HAL_UART_Transmit>

    // On redémarre le module pour mettre à jour les paramètres
    uint8_t restart[4] = {0x02, 0x05, 0x00, 0x07};
 80067e6:	4b0d      	ldr	r3, [pc, #52]	@ (800681c <INIT_PERM_TARVOS+0x14c>)
 80067e8:	60fb      	str	r3, [r7, #12]
    HAL_UART_Transmit(&hlpuart1, restart, sizeof(restart), 500);
 80067ea:	f107 010c 	add.w	r1, r7, #12
 80067ee:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80067f2:	2204      	movs	r2, #4
 80067f4:	4806      	ldr	r0, [pc, #24]	@ (8006810 <INIT_PERM_TARVOS+0x140>)
 80067f6:	f009 f870 	bl	800f8da <HAL_UART_Transmit>

    HAL_Delay(1000);
 80067fa:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80067fe:	f7fa ff96 	bl	800172e <HAL_Delay>
}
 8006802:	bf00      	nop
 8006804:	3738      	adds	r7, #56	@ 0x38
 8006806:	46bd      	mov	sp, r7
 8006808:	bd80      	pop	{r7, pc}
 800680a:	bf00      	nop
 800680c:	0801ff20 	.word	0x0801ff20
 8006810:	200012d4 	.word	0x200012d4
 8006814:	0801ff28 	.word	0x0801ff28
 8006818:	0801ff30 	.word	0x0801ff30
 800681c:	07000502 	.word	0x07000502

08006820 <Get_CRC8>:
		HAL_UART_Transmit(&hlpuart1,command,sizeof(command),500);
	}
}
//Calcule du CRC
uint8_t Get_CRC8(uint8_t * bufP, uint16_t len)
{
 8006820:	b480      	push	{r7}
 8006822:	b085      	sub	sp, #20
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
 8006828:	460b      	mov	r3, r1
 800682a:	807b      	strh	r3, [r7, #2]
uint8_t crc = 0x00;
 800682c:	2300      	movs	r3, #0
 800682e:	73fb      	strb	r3, [r7, #15]
for (uint16_t i = 0; i < len; i++)
 8006830:	2300      	movs	r3, #0
 8006832:	81bb      	strh	r3, [r7, #12]
 8006834:	e009      	b.n	800684a <Get_CRC8+0x2a>
{
crc ^= bufP[i];
 8006836:	89bb      	ldrh	r3, [r7, #12]
 8006838:	687a      	ldr	r2, [r7, #4]
 800683a:	4413      	add	r3, r2
 800683c:	781a      	ldrb	r2, [r3, #0]
 800683e:	7bfb      	ldrb	r3, [r7, #15]
 8006840:	4053      	eors	r3, r2
 8006842:	73fb      	strb	r3, [r7, #15]
for (uint16_t i = 0; i < len; i++)
 8006844:	89bb      	ldrh	r3, [r7, #12]
 8006846:	3301      	adds	r3, #1
 8006848:	81bb      	strh	r3, [r7, #12]
 800684a:	89ba      	ldrh	r2, [r7, #12]
 800684c:	887b      	ldrh	r3, [r7, #2]
 800684e:	429a      	cmp	r2, r3
 8006850:	d3f1      	bcc.n	8006836 <Get_CRC8+0x16>
}
return crc;
 8006852:	7bfb      	ldrb	r3, [r7, #15]
}
 8006854:	4618      	mov	r0, r3
 8006856:	3714      	adds	r7, #20
 8006858:	46bd      	mov	sp, r7
 800685a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685e:	4770      	bx	lr

08006860 <LL_APB1_GRP1_EnableClock>:
{
 8006860:	b480      	push	{r7}
 8006862:	b085      	sub	sp, #20
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8006868:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800686c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800686e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	4313      	orrs	r3, r2
 8006876:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8006878:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800687c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	4013      	ands	r3, r2
 8006882:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006884:	68fb      	ldr	r3, [r7, #12]
}
 8006886:	bf00      	nop
 8006888:	3714      	adds	r7, #20
 800688a:	46bd      	mov	sp, r7
 800688c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006890:	4770      	bx	lr

08006892 <LL_APB2_GRP1_EnableClock>:
{
 8006892:	b480      	push	{r7}
 8006894:	b085      	sub	sp, #20
 8006896:	af00      	add	r7, sp, #0
 8006898:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 800689a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800689e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80068a0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	4313      	orrs	r3, r2
 80068a8:	660b      	str	r3, [r1, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80068aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80068ae:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	4013      	ands	r3, r2
 80068b4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80068b6:	68fb      	ldr	r3, [r7, #12]
}
 80068b8:	bf00      	nop
 80068ba:	3714      	adds	r7, #20
 80068bc:	46bd      	mov	sp, r7
 80068be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c2:	4770      	bx	lr

080068c4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b088      	sub	sp, #32
 80068c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80068ca:	f107 0310 	add.w	r3, r7, #16
 80068ce:	2200      	movs	r2, #0
 80068d0:	601a      	str	r2, [r3, #0]
 80068d2:	605a      	str	r2, [r3, #4]
 80068d4:	609a      	str	r2, [r3, #8]
 80068d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80068d8:	1d3b      	adds	r3, r7, #4
 80068da:	2200      	movs	r2, #0
 80068dc:	601a      	str	r2, [r3, #0]
 80068de:	605a      	str	r2, [r3, #4]
 80068e0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80068e2:	4b1e      	ldr	r3, [pc, #120]	@ (800695c <MX_TIM2_Init+0x98>)
 80068e4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80068e8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 6400-1;
 80068ea:	4b1c      	ldr	r3, [pc, #112]	@ (800695c <MX_TIM2_Init+0x98>)
 80068ec:	f641 02ff 	movw	r2, #6399	@ 0x18ff
 80068f0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80068f2:	4b1a      	ldr	r3, [pc, #104]	@ (800695c <MX_TIM2_Init+0x98>)
 80068f4:	2200      	movs	r2, #0
 80068f6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 80068f8:	4b18      	ldr	r3, [pc, #96]	@ (800695c <MX_TIM2_Init+0x98>)
 80068fa:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80068fe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006900:	4b16      	ldr	r3, [pc, #88]	@ (800695c <MX_TIM2_Init+0x98>)
 8006902:	2200      	movs	r2, #0
 8006904:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006906:	4b15      	ldr	r3, [pc, #84]	@ (800695c <MX_TIM2_Init+0x98>)
 8006908:	2200      	movs	r2, #0
 800690a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800690c:	4813      	ldr	r0, [pc, #76]	@ (800695c <MX_TIM2_Init+0x98>)
 800690e:	f008 fa8d 	bl	800ee2c <HAL_TIM_Base_Init>
 8006912:	4603      	mov	r3, r0
 8006914:	2b00      	cmp	r3, #0
 8006916:	d001      	beq.n	800691c <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8006918:	f7fc f9f6 	bl	8002d08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800691c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006920:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8006922:	f107 0310 	add.w	r3, r7, #16
 8006926:	4619      	mov	r1, r3
 8006928:	480c      	ldr	r0, [pc, #48]	@ (800695c <MX_TIM2_Init+0x98>)
 800692a:	f008 fca1 	bl	800f270 <HAL_TIM_ConfigClockSource>
 800692e:	4603      	mov	r3, r0
 8006930:	2b00      	cmp	r3, #0
 8006932:	d001      	beq.n	8006938 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8006934:	f7fc f9e8 	bl	8002d08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8006938:	2320      	movs	r3, #32
 800693a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800693c:	2300      	movs	r3, #0
 800693e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8006940:	1d3b      	adds	r3, r7, #4
 8006942:	4619      	mov	r1, r3
 8006944:	4805      	ldr	r0, [pc, #20]	@ (800695c <MX_TIM2_Init+0x98>)
 8006946:	f008 fe9b 	bl	800f680 <HAL_TIMEx_MasterConfigSynchronization>
 800694a:	4603      	mov	r3, r0
 800694c:	2b00      	cmp	r3, #0
 800694e:	d001      	beq.n	8006954 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8006950:	f7fc f9da 	bl	8002d08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8006954:	bf00      	nop
 8006956:	3720      	adds	r7, #32
 8006958:	46bd      	mov	sp, r7
 800695a:	bd80      	pop	{r7, pc}
 800695c:	200011f0 	.word	0x200011f0

08006960 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8006960:	b580      	push	{r7, lr}
 8006962:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8006964:	4b10      	ldr	r3, [pc, #64]	@ (80069a8 <MX_TIM16_Init+0x48>)
 8006966:	4a11      	ldr	r2, [pc, #68]	@ (80069ac <MX_TIM16_Init+0x4c>)
 8006968:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 64000-1;
 800696a:	4b0f      	ldr	r3, [pc, #60]	@ (80069a8 <MX_TIM16_Init+0x48>)
 800696c:	f64f 12ff 	movw	r2, #63999	@ 0xf9ff
 8006970:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006972:	4b0d      	ldr	r3, [pc, #52]	@ (80069a8 <MX_TIM16_Init+0x48>)
 8006974:	2200      	movs	r2, #0
 8006976:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1000-1;
 8006978:	4b0b      	ldr	r3, [pc, #44]	@ (80069a8 <MX_TIM16_Init+0x48>)
 800697a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800697e:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006980:	4b09      	ldr	r3, [pc, #36]	@ (80069a8 <MX_TIM16_Init+0x48>)
 8006982:	2200      	movs	r2, #0
 8006984:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8006986:	4b08      	ldr	r3, [pc, #32]	@ (80069a8 <MX_TIM16_Init+0x48>)
 8006988:	2200      	movs	r2, #0
 800698a:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800698c:	4b06      	ldr	r3, [pc, #24]	@ (80069a8 <MX_TIM16_Init+0x48>)
 800698e:	2200      	movs	r2, #0
 8006990:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8006992:	4805      	ldr	r0, [pc, #20]	@ (80069a8 <MX_TIM16_Init+0x48>)
 8006994:	f008 fa4a 	bl	800ee2c <HAL_TIM_Base_Init>
 8006998:	4603      	mov	r3, r0
 800699a:	2b00      	cmp	r3, #0
 800699c:	d001      	beq.n	80069a2 <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 800699e:	f7fc f9b3 	bl	8002d08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80069a2:	bf00      	nop
 80069a4:	bd80      	pop	{r7, pc}
 80069a6:	bf00      	nop
 80069a8:	2000123c 	.word	0x2000123c
 80069ac:	40014400 	.word	0x40014400

080069b0 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80069b4:	4b10      	ldr	r3, [pc, #64]	@ (80069f8 <MX_TIM17_Init+0x48>)
 80069b6:	4a11      	ldr	r2, [pc, #68]	@ (80069fc <MX_TIM17_Init+0x4c>)
 80069b8:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 64000-1;
 80069ba:	4b0f      	ldr	r3, [pc, #60]	@ (80069f8 <MX_TIM17_Init+0x48>)
 80069bc:	f64f 12ff 	movw	r2, #63999	@ 0xf9ff
 80069c0:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80069c2:	4b0d      	ldr	r3, [pc, #52]	@ (80069f8 <MX_TIM17_Init+0x48>)
 80069c4:	2200      	movs	r2, #0
 80069c6:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 1000-1;
 80069c8:	4b0b      	ldr	r3, [pc, #44]	@ (80069f8 <MX_TIM17_Init+0x48>)
 80069ca:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80069ce:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80069d0:	4b09      	ldr	r3, [pc, #36]	@ (80069f8 <MX_TIM17_Init+0x48>)
 80069d2:	2200      	movs	r2, #0
 80069d4:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80069d6:	4b08      	ldr	r3, [pc, #32]	@ (80069f8 <MX_TIM17_Init+0x48>)
 80069d8:	2200      	movs	r2, #0
 80069da:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80069dc:	4b06      	ldr	r3, [pc, #24]	@ (80069f8 <MX_TIM17_Init+0x48>)
 80069de:	2200      	movs	r2, #0
 80069e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80069e2:	4805      	ldr	r0, [pc, #20]	@ (80069f8 <MX_TIM17_Init+0x48>)
 80069e4:	f008 fa22 	bl	800ee2c <HAL_TIM_Base_Init>
 80069e8:	4603      	mov	r3, r0
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d001      	beq.n	80069f2 <MX_TIM17_Init+0x42>
  {
    Error_Handler();
 80069ee:	f7fc f98b 	bl	8002d08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 80069f2:	bf00      	nop
 80069f4:	bd80      	pop	{r7, pc}
 80069f6:	bf00      	nop
 80069f8:	20001288 	.word	0x20001288
 80069fc:	40014800 	.word	0x40014800

08006a00 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b082      	sub	sp, #8
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a10:	d103      	bne.n	8006a1a <HAL_TIM_Base_MspInit+0x1a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8006a12:	2001      	movs	r0, #1
 8006a14:	f7ff ff24 	bl	8006860 <LL_APB1_GRP1_EnableClock>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8006a18:	e022      	b.n	8006a60 <HAL_TIM_Base_MspInit+0x60>
  else if(tim_baseHandle->Instance==TIM16)
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	4a12      	ldr	r2, [pc, #72]	@ (8006a68 <HAL_TIM_Base_MspInit+0x68>)
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d10c      	bne.n	8006a3e <HAL_TIM_Base_MspInit+0x3e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8006a24:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8006a28:	f7ff ff33 	bl	8006892 <LL_APB2_GRP1_EnableClock>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 4, 0);
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	2104      	movs	r1, #4
 8006a30:	2019      	movs	r0, #25
 8006a32:	f001 ff0c 	bl	800884e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8006a36:	2019      	movs	r0, #25
 8006a38:	f001 ff23 	bl	8008882 <HAL_NVIC_EnableIRQ>
}
 8006a3c:	e010      	b.n	8006a60 <HAL_TIM_Base_MspInit+0x60>
  else if(tim_baseHandle->Instance==TIM17)
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	4a0a      	ldr	r2, [pc, #40]	@ (8006a6c <HAL_TIM_Base_MspInit+0x6c>)
 8006a44:	4293      	cmp	r3, r2
 8006a46:	d10b      	bne.n	8006a60 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8006a48:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 8006a4c:	f7ff ff21 	bl	8006892 <LL_APB2_GRP1_EnableClock>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 2, 0);
 8006a50:	2200      	movs	r2, #0
 8006a52:	2102      	movs	r1, #2
 8006a54:	201a      	movs	r0, #26
 8006a56:	f001 fefa 	bl	800884e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8006a5a:	201a      	movs	r0, #26
 8006a5c:	f001 ff11 	bl	8008882 <HAL_NVIC_EnableIRQ>
}
 8006a60:	bf00      	nop
 8006a62:	3708      	adds	r7, #8
 8006a64:	46bd      	mov	sp, r7
 8006a66:	bd80      	pop	{r7, pc}
 8006a68:	40014400 	.word	0x40014400
 8006a6c:	40014800 	.word	0x40014800

08006a70 <updatedate>:
  /* USER CODE END TIM17_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void updatedate(void){
 8006a70:	b480      	push	{r7}
 8006a72:	af00      	add	r7, sp, #0

	SEC+=1;
 8006a74:	4b98      	ldr	r3, [pc, #608]	@ (8006cd8 <updatedate+0x268>)
 8006a76:	781b      	ldrb	r3, [r3, #0]
 8006a78:	3301      	adds	r3, #1
 8006a7a:	b2da      	uxtb	r2, r3
 8006a7c:	4b96      	ldr	r3, [pc, #600]	@ (8006cd8 <updatedate+0x268>)
 8006a7e:	701a      	strb	r2, [r3, #0]
	if(SEC>59){
 8006a80:	4b95      	ldr	r3, [pc, #596]	@ (8006cd8 <updatedate+0x268>)
 8006a82:	781b      	ldrb	r3, [r3, #0]
 8006a84:	2b3b      	cmp	r3, #59	@ 0x3b
 8006a86:	d908      	bls.n	8006a9a <updatedate+0x2a>
		SEC=0;
 8006a88:	4b93      	ldr	r3, [pc, #588]	@ (8006cd8 <updatedate+0x268>)
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	701a      	strb	r2, [r3, #0]
		MINUTE+=1;
 8006a8e:	4b93      	ldr	r3, [pc, #588]	@ (8006cdc <updatedate+0x26c>)
 8006a90:	781b      	ldrb	r3, [r3, #0]
 8006a92:	3301      	adds	r3, #1
 8006a94:	b2da      	uxtb	r2, r3
 8006a96:	4b91      	ldr	r3, [pc, #580]	@ (8006cdc <updatedate+0x26c>)
 8006a98:	701a      	strb	r2, [r3, #0]
	}

	if(MINUTE>59){
 8006a9a:	4b90      	ldr	r3, [pc, #576]	@ (8006cdc <updatedate+0x26c>)
 8006a9c:	781b      	ldrb	r3, [r3, #0]
 8006a9e:	2b3b      	cmp	r3, #59	@ 0x3b
 8006aa0:	d908      	bls.n	8006ab4 <updatedate+0x44>

		MINUTE=0;
 8006aa2:	4b8e      	ldr	r3, [pc, #568]	@ (8006cdc <updatedate+0x26c>)
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	701a      	strb	r2, [r3, #0]
		HR+=1;
 8006aa8:	4b8d      	ldr	r3, [pc, #564]	@ (8006ce0 <updatedate+0x270>)
 8006aaa:	781b      	ldrb	r3, [r3, #0]
 8006aac:	3301      	adds	r3, #1
 8006aae:	b2da      	uxtb	r2, r3
 8006ab0:	4b8b      	ldr	r3, [pc, #556]	@ (8006ce0 <updatedate+0x270>)
 8006ab2:	701a      	strb	r2, [r3, #0]
	}
	if(HR>=24){
 8006ab4:	4b8a      	ldr	r3, [pc, #552]	@ (8006ce0 <updatedate+0x270>)
 8006ab6:	781b      	ldrb	r3, [r3, #0]
 8006ab8:	2b17      	cmp	r3, #23
 8006aba:	d908      	bls.n	8006ace <updatedate+0x5e>
		HR=0;
 8006abc:	4b88      	ldr	r3, [pc, #544]	@ (8006ce0 <updatedate+0x270>)
 8006abe:	2200      	movs	r2, #0
 8006ac0:	701a      	strb	r2, [r3, #0]
		JOURS+=1;
 8006ac2:	4b88      	ldr	r3, [pc, #544]	@ (8006ce4 <updatedate+0x274>)
 8006ac4:	781b      	ldrb	r3, [r3, #0]
 8006ac6:	3301      	adds	r3, #1
 8006ac8:	b2da      	uxtb	r2, r3
 8006aca:	4b86      	ldr	r3, [pc, #536]	@ (8006ce4 <updatedate+0x274>)
 8006acc:	701a      	strb	r2, [r3, #0]
	}
	switch (mois){
 8006ace:	4b86      	ldr	r3, [pc, #536]	@ (8006ce8 <updatedate+0x278>)
 8006ad0:	781b      	ldrb	r3, [r3, #0]
 8006ad2:	2b0b      	cmp	r3, #11
 8006ad4:	f200 8137 	bhi.w	8006d46 <updatedate+0x2d6>
 8006ad8:	a201      	add	r2, pc, #4	@ (adr r2, 8006ae0 <updatedate+0x70>)
 8006ada:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ade:	bf00      	nop
 8006ae0:	08006b11 	.word	0x08006b11
 8006ae4:	08006b3b 	.word	0x08006b3b
 8006ae8:	08006b65 	.word	0x08006b65
 8006aec:	08006b8f 	.word	0x08006b8f
 8006af0:	08006bb9 	.word	0x08006bb9
 8006af4:	08006be3 	.word	0x08006be3
 8006af8:	08006c0d 	.word	0x08006c0d
 8006afc:	08006c37 	.word	0x08006c37
 8006b00:	08006c5f 	.word	0x08006c5f
 8006b04:	08006c87 	.word	0x08006c87
 8006b08:	08006caf 	.word	0x08006caf
 8006b0c:	08006cf1 	.word	0x08006cf1

	case JANVIER:
		if(JOURS>31){
 8006b10:	4b74      	ldr	r3, [pc, #464]	@ (8006ce4 <updatedate+0x274>)
 8006b12:	781b      	ldrb	r3, [r3, #0]
 8006b14:	2b1f      	cmp	r3, #31
 8006b16:	f240 80ff 	bls.w	8006d18 <updatedate+0x2a8>
			JOURS=1;
 8006b1a:	4b72      	ldr	r3, [pc, #456]	@ (8006ce4 <updatedate+0x274>)
 8006b1c:	2201      	movs	r2, #1
 8006b1e:	701a      	strb	r2, [r3, #0]
			mois++;
 8006b20:	4b71      	ldr	r3, [pc, #452]	@ (8006ce8 <updatedate+0x278>)
 8006b22:	781b      	ldrb	r3, [r3, #0]
 8006b24:	3301      	adds	r3, #1
 8006b26:	b2da      	uxtb	r2, r3
 8006b28:	4b6f      	ldr	r3, [pc, #444]	@ (8006ce8 <updatedate+0x278>)
 8006b2a:	701a      	strb	r2, [r3, #0]
			MOIS++;
 8006b2c:	4b6f      	ldr	r3, [pc, #444]	@ (8006cec <updatedate+0x27c>)
 8006b2e:	781b      	ldrb	r3, [r3, #0]
 8006b30:	3301      	adds	r3, #1
 8006b32:	b2da      	uxtb	r2, r3
 8006b34:	4b6d      	ldr	r3, [pc, #436]	@ (8006cec <updatedate+0x27c>)
 8006b36:	701a      	strb	r2, [r3, #0]
		}

		break;
 8006b38:	e0ee      	b.n	8006d18 <updatedate+0x2a8>
	case FEVRIER:
		if(JOURS>29){
 8006b3a:	4b6a      	ldr	r3, [pc, #424]	@ (8006ce4 <updatedate+0x274>)
 8006b3c:	781b      	ldrb	r3, [r3, #0]
 8006b3e:	2b1d      	cmp	r3, #29
 8006b40:	f240 80ec 	bls.w	8006d1c <updatedate+0x2ac>
					JOURS=1;
 8006b44:	4b67      	ldr	r3, [pc, #412]	@ (8006ce4 <updatedate+0x274>)
 8006b46:	2201      	movs	r2, #1
 8006b48:	701a      	strb	r2, [r3, #0]
					mois++;
 8006b4a:	4b67      	ldr	r3, [pc, #412]	@ (8006ce8 <updatedate+0x278>)
 8006b4c:	781b      	ldrb	r3, [r3, #0]
 8006b4e:	3301      	adds	r3, #1
 8006b50:	b2da      	uxtb	r2, r3
 8006b52:	4b65      	ldr	r3, [pc, #404]	@ (8006ce8 <updatedate+0x278>)
 8006b54:	701a      	strb	r2, [r3, #0]
					MOIS++;
 8006b56:	4b65      	ldr	r3, [pc, #404]	@ (8006cec <updatedate+0x27c>)
 8006b58:	781b      	ldrb	r3, [r3, #0]
 8006b5a:	3301      	adds	r3, #1
 8006b5c:	b2da      	uxtb	r2, r3
 8006b5e:	4b63      	ldr	r3, [pc, #396]	@ (8006cec <updatedate+0x27c>)
 8006b60:	701a      	strb	r2, [r3, #0]
				}
		break;
 8006b62:	e0db      	b.n	8006d1c <updatedate+0x2ac>
	case MARS:
		if(JOURS>31){
 8006b64:	4b5f      	ldr	r3, [pc, #380]	@ (8006ce4 <updatedate+0x274>)
 8006b66:	781b      	ldrb	r3, [r3, #0]
 8006b68:	2b1f      	cmp	r3, #31
 8006b6a:	f240 80d9 	bls.w	8006d20 <updatedate+0x2b0>
					JOURS=1;
 8006b6e:	4b5d      	ldr	r3, [pc, #372]	@ (8006ce4 <updatedate+0x274>)
 8006b70:	2201      	movs	r2, #1
 8006b72:	701a      	strb	r2, [r3, #0]
					mois++;
 8006b74:	4b5c      	ldr	r3, [pc, #368]	@ (8006ce8 <updatedate+0x278>)
 8006b76:	781b      	ldrb	r3, [r3, #0]
 8006b78:	3301      	adds	r3, #1
 8006b7a:	b2da      	uxtb	r2, r3
 8006b7c:	4b5a      	ldr	r3, [pc, #360]	@ (8006ce8 <updatedate+0x278>)
 8006b7e:	701a      	strb	r2, [r3, #0]
					MOIS++;
 8006b80:	4b5a      	ldr	r3, [pc, #360]	@ (8006cec <updatedate+0x27c>)
 8006b82:	781b      	ldrb	r3, [r3, #0]
 8006b84:	3301      	adds	r3, #1
 8006b86:	b2da      	uxtb	r2, r3
 8006b88:	4b58      	ldr	r3, [pc, #352]	@ (8006cec <updatedate+0x27c>)
 8006b8a:	701a      	strb	r2, [r3, #0]
				}
		break;
 8006b8c:	e0c8      	b.n	8006d20 <updatedate+0x2b0>
	case AVRIL:
		if(JOURS>30){
 8006b8e:	4b55      	ldr	r3, [pc, #340]	@ (8006ce4 <updatedate+0x274>)
 8006b90:	781b      	ldrb	r3, [r3, #0]
 8006b92:	2b1e      	cmp	r3, #30
 8006b94:	f240 80c6 	bls.w	8006d24 <updatedate+0x2b4>
					JOURS=1;
 8006b98:	4b52      	ldr	r3, [pc, #328]	@ (8006ce4 <updatedate+0x274>)
 8006b9a:	2201      	movs	r2, #1
 8006b9c:	701a      	strb	r2, [r3, #0]
					mois++;
 8006b9e:	4b52      	ldr	r3, [pc, #328]	@ (8006ce8 <updatedate+0x278>)
 8006ba0:	781b      	ldrb	r3, [r3, #0]
 8006ba2:	3301      	adds	r3, #1
 8006ba4:	b2da      	uxtb	r2, r3
 8006ba6:	4b50      	ldr	r3, [pc, #320]	@ (8006ce8 <updatedate+0x278>)
 8006ba8:	701a      	strb	r2, [r3, #0]
					MOIS++;
 8006baa:	4b50      	ldr	r3, [pc, #320]	@ (8006cec <updatedate+0x27c>)
 8006bac:	781b      	ldrb	r3, [r3, #0]
 8006bae:	3301      	adds	r3, #1
 8006bb0:	b2da      	uxtb	r2, r3
 8006bb2:	4b4e      	ldr	r3, [pc, #312]	@ (8006cec <updatedate+0x27c>)
 8006bb4:	701a      	strb	r2, [r3, #0]
				}
		break;
 8006bb6:	e0b5      	b.n	8006d24 <updatedate+0x2b4>
	case MAI:
		if(JOURS>31){
 8006bb8:	4b4a      	ldr	r3, [pc, #296]	@ (8006ce4 <updatedate+0x274>)
 8006bba:	781b      	ldrb	r3, [r3, #0]
 8006bbc:	2b1f      	cmp	r3, #31
 8006bbe:	f240 80b3 	bls.w	8006d28 <updatedate+0x2b8>
					JOURS=1;
 8006bc2:	4b48      	ldr	r3, [pc, #288]	@ (8006ce4 <updatedate+0x274>)
 8006bc4:	2201      	movs	r2, #1
 8006bc6:	701a      	strb	r2, [r3, #0]
					mois++;
 8006bc8:	4b47      	ldr	r3, [pc, #284]	@ (8006ce8 <updatedate+0x278>)
 8006bca:	781b      	ldrb	r3, [r3, #0]
 8006bcc:	3301      	adds	r3, #1
 8006bce:	b2da      	uxtb	r2, r3
 8006bd0:	4b45      	ldr	r3, [pc, #276]	@ (8006ce8 <updatedate+0x278>)
 8006bd2:	701a      	strb	r2, [r3, #0]
					MOIS++;
 8006bd4:	4b45      	ldr	r3, [pc, #276]	@ (8006cec <updatedate+0x27c>)
 8006bd6:	781b      	ldrb	r3, [r3, #0]
 8006bd8:	3301      	adds	r3, #1
 8006bda:	b2da      	uxtb	r2, r3
 8006bdc:	4b43      	ldr	r3, [pc, #268]	@ (8006cec <updatedate+0x27c>)
 8006bde:	701a      	strb	r2, [r3, #0]
				}
		break;
 8006be0:	e0a2      	b.n	8006d28 <updatedate+0x2b8>
	case JUIN:
		if(JOURS>30){
 8006be2:	4b40      	ldr	r3, [pc, #256]	@ (8006ce4 <updatedate+0x274>)
 8006be4:	781b      	ldrb	r3, [r3, #0]
 8006be6:	2b1e      	cmp	r3, #30
 8006be8:	f240 80a0 	bls.w	8006d2c <updatedate+0x2bc>
					JOURS=1;
 8006bec:	4b3d      	ldr	r3, [pc, #244]	@ (8006ce4 <updatedate+0x274>)
 8006bee:	2201      	movs	r2, #1
 8006bf0:	701a      	strb	r2, [r3, #0]
					mois++;
 8006bf2:	4b3d      	ldr	r3, [pc, #244]	@ (8006ce8 <updatedate+0x278>)
 8006bf4:	781b      	ldrb	r3, [r3, #0]
 8006bf6:	3301      	adds	r3, #1
 8006bf8:	b2da      	uxtb	r2, r3
 8006bfa:	4b3b      	ldr	r3, [pc, #236]	@ (8006ce8 <updatedate+0x278>)
 8006bfc:	701a      	strb	r2, [r3, #0]
					MOIS++;
 8006bfe:	4b3b      	ldr	r3, [pc, #236]	@ (8006cec <updatedate+0x27c>)
 8006c00:	781b      	ldrb	r3, [r3, #0]
 8006c02:	3301      	adds	r3, #1
 8006c04:	b2da      	uxtb	r2, r3
 8006c06:	4b39      	ldr	r3, [pc, #228]	@ (8006cec <updatedate+0x27c>)
 8006c08:	701a      	strb	r2, [r3, #0]
				}
		break;
 8006c0a:	e08f      	b.n	8006d2c <updatedate+0x2bc>
	case JUILLET:
		if(JOURS>31){
 8006c0c:	4b35      	ldr	r3, [pc, #212]	@ (8006ce4 <updatedate+0x274>)
 8006c0e:	781b      	ldrb	r3, [r3, #0]
 8006c10:	2b1f      	cmp	r3, #31
 8006c12:	f240 808d 	bls.w	8006d30 <updatedate+0x2c0>
					JOURS=1;
 8006c16:	4b33      	ldr	r3, [pc, #204]	@ (8006ce4 <updatedate+0x274>)
 8006c18:	2201      	movs	r2, #1
 8006c1a:	701a      	strb	r2, [r3, #0]
					mois++;
 8006c1c:	4b32      	ldr	r3, [pc, #200]	@ (8006ce8 <updatedate+0x278>)
 8006c1e:	781b      	ldrb	r3, [r3, #0]
 8006c20:	3301      	adds	r3, #1
 8006c22:	b2da      	uxtb	r2, r3
 8006c24:	4b30      	ldr	r3, [pc, #192]	@ (8006ce8 <updatedate+0x278>)
 8006c26:	701a      	strb	r2, [r3, #0]
					MOIS++;
 8006c28:	4b30      	ldr	r3, [pc, #192]	@ (8006cec <updatedate+0x27c>)
 8006c2a:	781b      	ldrb	r3, [r3, #0]
 8006c2c:	3301      	adds	r3, #1
 8006c2e:	b2da      	uxtb	r2, r3
 8006c30:	4b2e      	ldr	r3, [pc, #184]	@ (8006cec <updatedate+0x27c>)
 8006c32:	701a      	strb	r2, [r3, #0]
				}
		break;
 8006c34:	e07c      	b.n	8006d30 <updatedate+0x2c0>
	case AOUT:
		if(JOURS>31){
 8006c36:	4b2b      	ldr	r3, [pc, #172]	@ (8006ce4 <updatedate+0x274>)
 8006c38:	781b      	ldrb	r3, [r3, #0]
 8006c3a:	2b1f      	cmp	r3, #31
 8006c3c:	d97a      	bls.n	8006d34 <updatedate+0x2c4>
					JOURS=1;
 8006c3e:	4b29      	ldr	r3, [pc, #164]	@ (8006ce4 <updatedate+0x274>)
 8006c40:	2201      	movs	r2, #1
 8006c42:	701a      	strb	r2, [r3, #0]
					mois++;
 8006c44:	4b28      	ldr	r3, [pc, #160]	@ (8006ce8 <updatedate+0x278>)
 8006c46:	781b      	ldrb	r3, [r3, #0]
 8006c48:	3301      	adds	r3, #1
 8006c4a:	b2da      	uxtb	r2, r3
 8006c4c:	4b26      	ldr	r3, [pc, #152]	@ (8006ce8 <updatedate+0x278>)
 8006c4e:	701a      	strb	r2, [r3, #0]
					MOIS++;
 8006c50:	4b26      	ldr	r3, [pc, #152]	@ (8006cec <updatedate+0x27c>)
 8006c52:	781b      	ldrb	r3, [r3, #0]
 8006c54:	3301      	adds	r3, #1
 8006c56:	b2da      	uxtb	r2, r3
 8006c58:	4b24      	ldr	r3, [pc, #144]	@ (8006cec <updatedate+0x27c>)
 8006c5a:	701a      	strb	r2, [r3, #0]
				}
		break;
 8006c5c:	e06a      	b.n	8006d34 <updatedate+0x2c4>
	case SEPTEMBRE:
		if(JOURS>30){
 8006c5e:	4b21      	ldr	r3, [pc, #132]	@ (8006ce4 <updatedate+0x274>)
 8006c60:	781b      	ldrb	r3, [r3, #0]
 8006c62:	2b1e      	cmp	r3, #30
 8006c64:	d968      	bls.n	8006d38 <updatedate+0x2c8>
					JOURS=1;
 8006c66:	4b1f      	ldr	r3, [pc, #124]	@ (8006ce4 <updatedate+0x274>)
 8006c68:	2201      	movs	r2, #1
 8006c6a:	701a      	strb	r2, [r3, #0]
					mois++;
 8006c6c:	4b1e      	ldr	r3, [pc, #120]	@ (8006ce8 <updatedate+0x278>)
 8006c6e:	781b      	ldrb	r3, [r3, #0]
 8006c70:	3301      	adds	r3, #1
 8006c72:	b2da      	uxtb	r2, r3
 8006c74:	4b1c      	ldr	r3, [pc, #112]	@ (8006ce8 <updatedate+0x278>)
 8006c76:	701a      	strb	r2, [r3, #0]
					MOIS++;
 8006c78:	4b1c      	ldr	r3, [pc, #112]	@ (8006cec <updatedate+0x27c>)
 8006c7a:	781b      	ldrb	r3, [r3, #0]
 8006c7c:	3301      	adds	r3, #1
 8006c7e:	b2da      	uxtb	r2, r3
 8006c80:	4b1a      	ldr	r3, [pc, #104]	@ (8006cec <updatedate+0x27c>)
 8006c82:	701a      	strb	r2, [r3, #0]
				}
		break;
 8006c84:	e058      	b.n	8006d38 <updatedate+0x2c8>
	case OCTOBRE:
		if(JOURS>31){
 8006c86:	4b17      	ldr	r3, [pc, #92]	@ (8006ce4 <updatedate+0x274>)
 8006c88:	781b      	ldrb	r3, [r3, #0]
 8006c8a:	2b1f      	cmp	r3, #31
 8006c8c:	d956      	bls.n	8006d3c <updatedate+0x2cc>
					JOURS=1;
 8006c8e:	4b15      	ldr	r3, [pc, #84]	@ (8006ce4 <updatedate+0x274>)
 8006c90:	2201      	movs	r2, #1
 8006c92:	701a      	strb	r2, [r3, #0]
					mois++;
 8006c94:	4b14      	ldr	r3, [pc, #80]	@ (8006ce8 <updatedate+0x278>)
 8006c96:	781b      	ldrb	r3, [r3, #0]
 8006c98:	3301      	adds	r3, #1
 8006c9a:	b2da      	uxtb	r2, r3
 8006c9c:	4b12      	ldr	r3, [pc, #72]	@ (8006ce8 <updatedate+0x278>)
 8006c9e:	701a      	strb	r2, [r3, #0]
					MOIS++;
 8006ca0:	4b12      	ldr	r3, [pc, #72]	@ (8006cec <updatedate+0x27c>)
 8006ca2:	781b      	ldrb	r3, [r3, #0]
 8006ca4:	3301      	adds	r3, #1
 8006ca6:	b2da      	uxtb	r2, r3
 8006ca8:	4b10      	ldr	r3, [pc, #64]	@ (8006cec <updatedate+0x27c>)
 8006caa:	701a      	strb	r2, [r3, #0]
				}
		break;
 8006cac:	e046      	b.n	8006d3c <updatedate+0x2cc>
	case NOVEMBRE:
		if(JOURS>30){
 8006cae:	4b0d      	ldr	r3, [pc, #52]	@ (8006ce4 <updatedate+0x274>)
 8006cb0:	781b      	ldrb	r3, [r3, #0]
 8006cb2:	2b1e      	cmp	r3, #30
 8006cb4:	d944      	bls.n	8006d40 <updatedate+0x2d0>
					JOURS=1;
 8006cb6:	4b0b      	ldr	r3, [pc, #44]	@ (8006ce4 <updatedate+0x274>)
 8006cb8:	2201      	movs	r2, #1
 8006cba:	701a      	strb	r2, [r3, #0]
					mois++;
 8006cbc:	4b0a      	ldr	r3, [pc, #40]	@ (8006ce8 <updatedate+0x278>)
 8006cbe:	781b      	ldrb	r3, [r3, #0]
 8006cc0:	3301      	adds	r3, #1
 8006cc2:	b2da      	uxtb	r2, r3
 8006cc4:	4b08      	ldr	r3, [pc, #32]	@ (8006ce8 <updatedate+0x278>)
 8006cc6:	701a      	strb	r2, [r3, #0]
					MOIS++;
 8006cc8:	4b08      	ldr	r3, [pc, #32]	@ (8006cec <updatedate+0x27c>)
 8006cca:	781b      	ldrb	r3, [r3, #0]
 8006ccc:	3301      	adds	r3, #1
 8006cce:	b2da      	uxtb	r2, r3
 8006cd0:	4b06      	ldr	r3, [pc, #24]	@ (8006cec <updatedate+0x27c>)
 8006cd2:	701a      	strb	r2, [r3, #0]
				}
		break;
 8006cd4:	e034      	b.n	8006d40 <updatedate+0x2d0>
 8006cd6:	bf00      	nop
 8006cd8:	20000c84 	.word	0x20000c84
 8006cdc:	20000c86 	.word	0x20000c86
 8006ce0:	20000c85 	.word	0x20000c85
 8006ce4:	20000010 	.word	0x20000010
 8006ce8:	20000c87 	.word	0x20000c87
 8006cec:	20000011 	.word	0x20000011
	case DECEMBRE:
		if(JOURS>31){
 8006cf0:	4b1f      	ldr	r3, [pc, #124]	@ (8006d70 <updatedate+0x300>)
 8006cf2:	781b      	ldrb	r3, [r3, #0]
 8006cf4:	2b1f      	cmp	r3, #31
 8006cf6:	d925      	bls.n	8006d44 <updatedate+0x2d4>
					JOURS=1;
 8006cf8:	4b1d      	ldr	r3, [pc, #116]	@ (8006d70 <updatedate+0x300>)
 8006cfa:	2201      	movs	r2, #1
 8006cfc:	701a      	strb	r2, [r3, #0]
					mois++;
 8006cfe:	4b1d      	ldr	r3, [pc, #116]	@ (8006d74 <updatedate+0x304>)
 8006d00:	781b      	ldrb	r3, [r3, #0]
 8006d02:	3301      	adds	r3, #1
 8006d04:	b2da      	uxtb	r2, r3
 8006d06:	4b1b      	ldr	r3, [pc, #108]	@ (8006d74 <updatedate+0x304>)
 8006d08:	701a      	strb	r2, [r3, #0]
					MOIS++;
 8006d0a:	4b1b      	ldr	r3, [pc, #108]	@ (8006d78 <updatedate+0x308>)
 8006d0c:	781b      	ldrb	r3, [r3, #0]
 8006d0e:	3301      	adds	r3, #1
 8006d10:	b2da      	uxtb	r2, r3
 8006d12:	4b19      	ldr	r3, [pc, #100]	@ (8006d78 <updatedate+0x308>)
 8006d14:	701a      	strb	r2, [r3, #0]
				}
		break;
 8006d16:	e015      	b.n	8006d44 <updatedate+0x2d4>
		break;
 8006d18:	bf00      	nop
 8006d1a:	e014      	b.n	8006d46 <updatedate+0x2d6>
		break;
 8006d1c:	bf00      	nop
 8006d1e:	e012      	b.n	8006d46 <updatedate+0x2d6>
		break;
 8006d20:	bf00      	nop
 8006d22:	e010      	b.n	8006d46 <updatedate+0x2d6>
		break;
 8006d24:	bf00      	nop
 8006d26:	e00e      	b.n	8006d46 <updatedate+0x2d6>
		break;
 8006d28:	bf00      	nop
 8006d2a:	e00c      	b.n	8006d46 <updatedate+0x2d6>
		break;
 8006d2c:	bf00      	nop
 8006d2e:	e00a      	b.n	8006d46 <updatedate+0x2d6>
		break;
 8006d30:	bf00      	nop
 8006d32:	e008      	b.n	8006d46 <updatedate+0x2d6>
		break;
 8006d34:	bf00      	nop
 8006d36:	e006      	b.n	8006d46 <updatedate+0x2d6>
		break;
 8006d38:	bf00      	nop
 8006d3a:	e004      	b.n	8006d46 <updatedate+0x2d6>
		break;
 8006d3c:	bf00      	nop
 8006d3e:	e002      	b.n	8006d46 <updatedate+0x2d6>
		break;
 8006d40:	bf00      	nop
 8006d42:	e000      	b.n	8006d46 <updatedate+0x2d6>
		break;
 8006d44:	bf00      	nop

	}

	if(MOIS>12){
 8006d46:	4b0c      	ldr	r3, [pc, #48]	@ (8006d78 <updatedate+0x308>)
 8006d48:	781b      	ldrb	r3, [r3, #0]
 8006d4a:	2b0c      	cmp	r3, #12
 8006d4c:	d90b      	bls.n	8006d66 <updatedate+0x2f6>
		mois=JANVIER;
 8006d4e:	4b09      	ldr	r3, [pc, #36]	@ (8006d74 <updatedate+0x304>)
 8006d50:	2200      	movs	r2, #0
 8006d52:	701a      	strb	r2, [r3, #0]
		MOIS=1;
 8006d54:	4b08      	ldr	r3, [pc, #32]	@ (8006d78 <updatedate+0x308>)
 8006d56:	2201      	movs	r2, #1
 8006d58:	701a      	strb	r2, [r3, #0]
		ANNEE++;
 8006d5a:	4b08      	ldr	r3, [pc, #32]	@ (8006d7c <updatedate+0x30c>)
 8006d5c:	881b      	ldrh	r3, [r3, #0]
 8006d5e:	3301      	adds	r3, #1
 8006d60:	b29a      	uxth	r2, r3
 8006d62:	4b06      	ldr	r3, [pc, #24]	@ (8006d7c <updatedate+0x30c>)
 8006d64:	801a      	strh	r2, [r3, #0]
	}
}
 8006d66:	bf00      	nop
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6e:	4770      	bx	lr
 8006d70:	20000010 	.word	0x20000010
 8006d74:	20000c87 	.word	0x20000c87
 8006d78:	20000011 	.word	0x20000011
 8006d7c:	20000012 	.word	0x20000012

08006d80 <LL_AHB2_GRP1_EnableClock>:
{
 8006d80:	b480      	push	{r7}
 8006d82:	b085      	sub	sp, #20
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8006d88:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006d8c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006d8e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	4313      	orrs	r3, r2
 8006d96:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8006d98:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006d9c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	4013      	ands	r3, r2
 8006da2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006da4:	68fb      	ldr	r3, [r7, #12]
}
 8006da6:	bf00      	nop
 8006da8:	3714      	adds	r7, #20
 8006daa:	46bd      	mov	sp, r7
 8006dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db0:	4770      	bx	lr

08006db2 <LL_APB1_GRP2_EnableClock>:
{
 8006db2:	b480      	push	{r7}
 8006db4:	b085      	sub	sp, #20
 8006db6:	af00      	add	r7, sp, #0
 8006db8:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR2, Periphs);
 8006dba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006dbe:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006dc0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	4313      	orrs	r3, r2
 8006dc8:	65cb      	str	r3, [r1, #92]	@ 0x5c
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8006dca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006dce:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	4013      	ands	r3, r2
 8006dd4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
}
 8006dd8:	bf00      	nop
 8006dda:	3714      	adds	r7, #20
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de2:	4770      	bx	lr

08006de4 <LL_APB1_GRP2_DisableClock>:
{
 8006de4:	b480      	push	{r7}
 8006de6:	b083      	sub	sp, #12
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR2, Periphs);
 8006dec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006df0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	43db      	mvns	r3, r3
 8006df6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006dfa:	4013      	ands	r3, r2
 8006dfc:	65cb      	str	r3, [r1, #92]	@ 0x5c
}
 8006dfe:	bf00      	nop
 8006e00:	370c      	adds	r7, #12
 8006e02:	46bd      	mov	sp, r7
 8006e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e08:	4770      	bx	lr

08006e0a <LL_APB2_GRP1_EnableClock>:
{
 8006e0a:	b480      	push	{r7}
 8006e0c:	b085      	sub	sp, #20
 8006e0e:	af00      	add	r7, sp, #0
 8006e10:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8006e12:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006e16:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006e18:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	4313      	orrs	r3, r2
 8006e20:	660b      	str	r3, [r1, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8006e22:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006e26:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	4013      	ands	r3, r2
 8006e2c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
}
 8006e30:	bf00      	nop
 8006e32:	3714      	adds	r7, #20
 8006e34:	46bd      	mov	sp, r7
 8006e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3a:	4770      	bx	lr

08006e3c <LL_APB2_GRP1_DisableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
 8006e3c:	b480      	push	{r7}
 8006e3e:	b083      	sub	sp, #12
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8006e44:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006e48:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	43db      	mvns	r3, r3
 8006e4e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006e52:	4013      	ands	r3, r2
 8006e54:	660b      	str	r3, [r1, #96]	@ 0x60
}
 8006e56:	bf00      	nop
 8006e58:	370c      	adds	r7, #12
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e60:	4770      	bx	lr
	...

08006e64 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8006e68:	4b22      	ldr	r3, [pc, #136]	@ (8006ef4 <MX_LPUART1_UART_Init+0x90>)
 8006e6a:	4a23      	ldr	r2, [pc, #140]	@ (8006ef8 <MX_LPUART1_UART_Init+0x94>)
 8006e6c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8006e6e:	4b21      	ldr	r3, [pc, #132]	@ (8006ef4 <MX_LPUART1_UART_Init+0x90>)
 8006e70:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8006e74:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8006e76:	4b1f      	ldr	r3, [pc, #124]	@ (8006ef4 <MX_LPUART1_UART_Init+0x90>)
 8006e78:	2200      	movs	r2, #0
 8006e7a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8006e7c:	4b1d      	ldr	r3, [pc, #116]	@ (8006ef4 <MX_LPUART1_UART_Init+0x90>)
 8006e7e:	2200      	movs	r2, #0
 8006e80:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8006e82:	4b1c      	ldr	r3, [pc, #112]	@ (8006ef4 <MX_LPUART1_UART_Init+0x90>)
 8006e84:	2200      	movs	r2, #0
 8006e86:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8006e88:	4b1a      	ldr	r3, [pc, #104]	@ (8006ef4 <MX_LPUART1_UART_Init+0x90>)
 8006e8a:	220c      	movs	r2, #12
 8006e8c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006e8e:	4b19      	ldr	r3, [pc, #100]	@ (8006ef4 <MX_LPUART1_UART_Init+0x90>)
 8006e90:	2200      	movs	r2, #0
 8006e92:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006e94:	4b17      	ldr	r3, [pc, #92]	@ (8006ef4 <MX_LPUART1_UART_Init+0x90>)
 8006e96:	2200      	movs	r2, #0
 8006e98:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8006e9a:	4b16      	ldr	r3, [pc, #88]	@ (8006ef4 <MX_LPUART1_UART_Init+0x90>)
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006ea0:	4b14      	ldr	r3, [pc, #80]	@ (8006ef4 <MX_LPUART1_UART_Init+0x90>)
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	629a      	str	r2, [r3, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8006ea6:	4b13      	ldr	r3, [pc, #76]	@ (8006ef4 <MX_LPUART1_UART_Init+0x90>)
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8006eac:	4811      	ldr	r0, [pc, #68]	@ (8006ef4 <MX_LPUART1_UART_Init+0x90>)
 8006eae:	f008 fc85 	bl	800f7bc <HAL_UART_Init>
 8006eb2:	4603      	mov	r3, r0
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d001      	beq.n	8006ebc <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8006eb8:	f7fb ff26 	bl	8002d08 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006ebc:	2100      	movs	r1, #0
 8006ebe:	480d      	ldr	r0, [pc, #52]	@ (8006ef4 <MX_LPUART1_UART_Init+0x90>)
 8006ec0:	f00a f918 	bl	80110f4 <HAL_UARTEx_SetTxFifoThreshold>
 8006ec4:	4603      	mov	r3, r0
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d001      	beq.n	8006ece <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8006eca:	f7fb ff1d 	bl	8002d08 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006ece:	2100      	movs	r1, #0
 8006ed0:	4808      	ldr	r0, [pc, #32]	@ (8006ef4 <MX_LPUART1_UART_Init+0x90>)
 8006ed2:	f00a f94d 	bl	8011170 <HAL_UARTEx_SetRxFifoThreshold>
 8006ed6:	4603      	mov	r3, r0
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d001      	beq.n	8006ee0 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8006edc:	f7fb ff14 	bl	8002d08 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8006ee0:	4804      	ldr	r0, [pc, #16]	@ (8006ef4 <MX_LPUART1_UART_Init+0x90>)
 8006ee2:	f00a f8ce 	bl	8011082 <HAL_UARTEx_DisableFifoMode>
 8006ee6:	4603      	mov	r3, r0
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d001      	beq.n	8006ef0 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8006eec:	f7fb ff0c 	bl	8002d08 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8006ef0:	bf00      	nop
 8006ef2:	bd80      	pop	{r7, pc}
 8006ef4:	200012d4 	.word	0x200012d4
 8006ef8:	40008000 	.word	0x40008000

08006efc <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8006f00:	4b22      	ldr	r3, [pc, #136]	@ (8006f8c <MX_USART1_UART_Init+0x90>)
 8006f02:	4a23      	ldr	r2, [pc, #140]	@ (8006f90 <MX_USART1_UART_Init+0x94>)
 8006f04:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8006f06:	4b21      	ldr	r3, [pc, #132]	@ (8006f8c <MX_USART1_UART_Init+0x90>)
 8006f08:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8006f0c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8006f0e:	4b1f      	ldr	r3, [pc, #124]	@ (8006f8c <MX_USART1_UART_Init+0x90>)
 8006f10:	2200      	movs	r2, #0
 8006f12:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8006f14:	4b1d      	ldr	r3, [pc, #116]	@ (8006f8c <MX_USART1_UART_Init+0x90>)
 8006f16:	2200      	movs	r2, #0
 8006f18:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8006f1a:	4b1c      	ldr	r3, [pc, #112]	@ (8006f8c <MX_USART1_UART_Init+0x90>)
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8006f20:	4b1a      	ldr	r3, [pc, #104]	@ (8006f8c <MX_USART1_UART_Init+0x90>)
 8006f22:	220c      	movs	r2, #12
 8006f24:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006f26:	4b19      	ldr	r3, [pc, #100]	@ (8006f8c <MX_USART1_UART_Init+0x90>)
 8006f28:	2200      	movs	r2, #0
 8006f2a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8006f2c:	4b17      	ldr	r3, [pc, #92]	@ (8006f8c <MX_USART1_UART_Init+0x90>)
 8006f2e:	2200      	movs	r2, #0
 8006f30:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006f32:	4b16      	ldr	r3, [pc, #88]	@ (8006f8c <MX_USART1_UART_Init+0x90>)
 8006f34:	2200      	movs	r2, #0
 8006f36:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8006f38:	4b14      	ldr	r3, [pc, #80]	@ (8006f8c <MX_USART1_UART_Init+0x90>)
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006f3e:	4b13      	ldr	r3, [pc, #76]	@ (8006f8c <MX_USART1_UART_Init+0x90>)
 8006f40:	2200      	movs	r2, #0
 8006f42:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8006f44:	4811      	ldr	r0, [pc, #68]	@ (8006f8c <MX_USART1_UART_Init+0x90>)
 8006f46:	f008 fc39 	bl	800f7bc <HAL_UART_Init>
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d001      	beq.n	8006f54 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8006f50:	f7fb feda 	bl	8002d08 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006f54:	2100      	movs	r1, #0
 8006f56:	480d      	ldr	r0, [pc, #52]	@ (8006f8c <MX_USART1_UART_Init+0x90>)
 8006f58:	f00a f8cc 	bl	80110f4 <HAL_UARTEx_SetTxFifoThreshold>
 8006f5c:	4603      	mov	r3, r0
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d001      	beq.n	8006f66 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8006f62:	f7fb fed1 	bl	8002d08 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006f66:	2100      	movs	r1, #0
 8006f68:	4808      	ldr	r0, [pc, #32]	@ (8006f8c <MX_USART1_UART_Init+0x90>)
 8006f6a:	f00a f901 	bl	8011170 <HAL_UARTEx_SetRxFifoThreshold>
 8006f6e:	4603      	mov	r3, r0
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d001      	beq.n	8006f78 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8006f74:	f7fb fec8 	bl	8002d08 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8006f78:	4804      	ldr	r0, [pc, #16]	@ (8006f8c <MX_USART1_UART_Init+0x90>)
 8006f7a:	f00a f882 	bl	8011082 <HAL_UARTEx_DisableFifoMode>
 8006f7e:	4603      	mov	r3, r0
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d001      	beq.n	8006f88 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8006f84:	f7fb fec0 	bl	8002d08 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8006f88:	bf00      	nop
 8006f8a:	bd80      	pop	{r7, pc}
 8006f8c:	20001368 	.word	0x20001368
 8006f90:	40013800 	.word	0x40013800

08006f94 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b09c      	sub	sp, #112	@ 0x70
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006f9c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	601a      	str	r2, [r3, #0]
 8006fa4:	605a      	str	r2, [r3, #4]
 8006fa6:	609a      	str	r2, [r3, #8]
 8006fa8:	60da      	str	r2, [r3, #12]
 8006faa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006fac:	f107 030c 	add.w	r3, r7, #12
 8006fb0:	2250      	movs	r2, #80	@ 0x50
 8006fb2:	2100      	movs	r1, #0
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	f014 fbc0 	bl	801b73a <memset>
  if(uartHandle->Instance==LPUART1)
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	4a5f      	ldr	r2, [pc, #380]	@ (800713c <HAL_UART_MspInit+0x1a8>)
 8006fc0:	4293      	cmp	r3, r2
 8006fc2:	d158      	bne.n	8007076 <HAL_UART_MspInit+0xe2>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8006fc4:	2302      	movs	r3, #2
 8006fc6:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_HSI;
 8006fc8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8006fcc:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006fce:	f107 030c 	add.w	r3, r7, #12
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	f006 f915 	bl	800d202 <HAL_RCCEx_PeriphCLKConfig>
 8006fd8:	4603      	mov	r3, r0
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d001      	beq.n	8006fe2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8006fde:	f7fb fe93 	bl	8002d08 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8006fe2:	2001      	movs	r0, #1
 8006fe4:	f7ff fee5 	bl	8006db2 <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006fe8:	2001      	movs	r0, #1
 8006fea:	f7ff fec9 	bl	8006d80 <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8006fee:	230c      	movs	r3, #12
 8006ff0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006ff2:	2302      	movs	r3, #2
 8006ff4:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8006ffe:	2308      	movs	r3, #8
 8007000:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007002:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8007006:	4619      	mov	r1, r3
 8007008:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800700c:	f002 f852 	bl	80090b4 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel2;
 8007010:	4b4b      	ldr	r3, [pc, #300]	@ (8007140 <HAL_UART_MspInit+0x1ac>)
 8007012:	4a4c      	ldr	r2, [pc, #304]	@ (8007144 <HAL_UART_MspInit+0x1b0>)
 8007014:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8007016:	4b4a      	ldr	r3, [pc, #296]	@ (8007140 <HAL_UART_MspInit+0x1ac>)
 8007018:	2210      	movs	r2, #16
 800701a:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800701c:	4b48      	ldr	r3, [pc, #288]	@ (8007140 <HAL_UART_MspInit+0x1ac>)
 800701e:	2200      	movs	r2, #0
 8007020:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007022:	4b47      	ldr	r3, [pc, #284]	@ (8007140 <HAL_UART_MspInit+0x1ac>)
 8007024:	2200      	movs	r2, #0
 8007026:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007028:	4b45      	ldr	r3, [pc, #276]	@ (8007140 <HAL_UART_MspInit+0x1ac>)
 800702a:	2280      	movs	r2, #128	@ 0x80
 800702c:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800702e:	4b44      	ldr	r3, [pc, #272]	@ (8007140 <HAL_UART_MspInit+0x1ac>)
 8007030:	2200      	movs	r2, #0
 8007032:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007034:	4b42      	ldr	r3, [pc, #264]	@ (8007140 <HAL_UART_MspInit+0x1ac>)
 8007036:	2200      	movs	r2, #0
 8007038:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
 800703a:	4b41      	ldr	r3, [pc, #260]	@ (8007140 <HAL_UART_MspInit+0x1ac>)
 800703c:	2220      	movs	r2, #32
 800703e:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8007040:	4b3f      	ldr	r3, [pc, #252]	@ (8007140 <HAL_UART_MspInit+0x1ac>)
 8007042:	2200      	movs	r2, #0
 8007044:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8007046:	483e      	ldr	r0, [pc, #248]	@ (8007140 <HAL_UART_MspInit+0x1ac>)
 8007048:	f001 fc60 	bl	800890c <HAL_DMA_Init>
 800704c:	4603      	mov	r3, r0
 800704e:	2b00      	cmp	r3, #0
 8007050:	d001      	beq.n	8007056 <HAL_UART_MspInit+0xc2>
    {
      Error_Handler();
 8007052:	f7fb fe59 	bl	8002d08 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	4a39      	ldr	r2, [pc, #228]	@ (8007140 <HAL_UART_MspInit+0x1ac>)
 800705a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800705e:	4a38      	ldr	r2, [pc, #224]	@ (8007140 <HAL_UART_MspInit+0x1ac>)
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 2, 0);
 8007064:	2200      	movs	r2, #0
 8007066:	2102      	movs	r1, #2
 8007068:	2025      	movs	r0, #37	@ 0x25
 800706a:	f001 fbf0 	bl	800884e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 800706e:	2025      	movs	r0, #37	@ 0x25
 8007070:	f001 fc07 	bl	8008882 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8007074:	e05d      	b.n	8007132 <HAL_UART_MspInit+0x19e>
  else if(uartHandle->Instance==USART1)
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	4a33      	ldr	r2, [pc, #204]	@ (8007148 <HAL_UART_MspInit+0x1b4>)
 800707c:	4293      	cmp	r3, r2
 800707e:	d158      	bne.n	8007132 <HAL_UART_MspInit+0x19e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8007080:	2301      	movs	r3, #1
 8007082:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8007084:	2300      	movs	r3, #0
 8007086:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007088:	f107 030c 	add.w	r3, r7, #12
 800708c:	4618      	mov	r0, r3
 800708e:	f006 f8b8 	bl	800d202 <HAL_RCCEx_PeriphCLKConfig>
 8007092:	4603      	mov	r3, r0
 8007094:	2b00      	cmp	r3, #0
 8007096:	d001      	beq.n	800709c <HAL_UART_MspInit+0x108>
      Error_Handler();
 8007098:	f7fb fe36 	bl	8002d08 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 800709c:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80070a0:	f7ff feb3 	bl	8006e0a <LL_APB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80070a4:	2001      	movs	r0, #1
 80070a6:	f7ff fe6b 	bl	8006d80 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80070aa:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80070ae:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80070b0:	2302      	movs	r3, #2
 80070b2:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80070b4:	2300      	movs	r3, #0
 80070b6:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80070b8:	2300      	movs	r3, #0
 80070ba:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80070bc:	2307      	movs	r3, #7
 80070be:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80070c0:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80070c4:	4619      	mov	r1, r3
 80070c6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80070ca:	f001 fff3 	bl	80090b4 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel3;
 80070ce:	4b1f      	ldr	r3, [pc, #124]	@ (800714c <HAL_UART_MspInit+0x1b8>)
 80070d0:	4a1f      	ldr	r2, [pc, #124]	@ (8007150 <HAL_UART_MspInit+0x1bc>)
 80070d2:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 80070d4:	4b1d      	ldr	r3, [pc, #116]	@ (800714c <HAL_UART_MspInit+0x1b8>)
 80070d6:	220e      	movs	r2, #14
 80070d8:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80070da:	4b1c      	ldr	r3, [pc, #112]	@ (800714c <HAL_UART_MspInit+0x1b8>)
 80070dc:	2200      	movs	r2, #0
 80070de:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80070e0:	4b1a      	ldr	r3, [pc, #104]	@ (800714c <HAL_UART_MspInit+0x1b8>)
 80070e2:	2200      	movs	r2, #0
 80070e4:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80070e6:	4b19      	ldr	r3, [pc, #100]	@ (800714c <HAL_UART_MspInit+0x1b8>)
 80070e8:	2280      	movs	r2, #128	@ 0x80
 80070ea:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80070ec:	4b17      	ldr	r3, [pc, #92]	@ (800714c <HAL_UART_MspInit+0x1b8>)
 80070ee:	2200      	movs	r2, #0
 80070f0:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80070f2:	4b16      	ldr	r3, [pc, #88]	@ (800714c <HAL_UART_MspInit+0x1b8>)
 80070f4:	2200      	movs	r2, #0
 80070f6:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80070f8:	4b14      	ldr	r3, [pc, #80]	@ (800714c <HAL_UART_MspInit+0x1b8>)
 80070fa:	2220      	movs	r2, #32
 80070fc:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80070fe:	4b13      	ldr	r3, [pc, #76]	@ (800714c <HAL_UART_MspInit+0x1b8>)
 8007100:	2200      	movs	r2, #0
 8007102:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8007104:	4811      	ldr	r0, [pc, #68]	@ (800714c <HAL_UART_MspInit+0x1b8>)
 8007106:	f001 fc01 	bl	800890c <HAL_DMA_Init>
 800710a:	4603      	mov	r3, r0
 800710c:	2b00      	cmp	r3, #0
 800710e:	d001      	beq.n	8007114 <HAL_UART_MspInit+0x180>
      Error_Handler();
 8007110:	f7fb fdfa 	bl	8002d08 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	4a0d      	ldr	r2, [pc, #52]	@ (800714c <HAL_UART_MspInit+0x1b8>)
 8007118:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800711c:	4a0b      	ldr	r2, [pc, #44]	@ (800714c <HAL_UART_MspInit+0x1b8>)
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8007122:	2200      	movs	r2, #0
 8007124:	2100      	movs	r1, #0
 8007126:	2024      	movs	r0, #36	@ 0x24
 8007128:	f001 fb91 	bl	800884e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800712c:	2024      	movs	r0, #36	@ 0x24
 800712e:	f001 fba8 	bl	8008882 <HAL_NVIC_EnableIRQ>
}
 8007132:	bf00      	nop
 8007134:	3770      	adds	r7, #112	@ 0x70
 8007136:	46bd      	mov	sp, r7
 8007138:	bd80      	pop	{r7, pc}
 800713a:	bf00      	nop
 800713c:	40008000 	.word	0x40008000
 8007140:	200013fc 	.word	0x200013fc
 8007144:	4002001c 	.word	0x4002001c
 8007148:	40013800 	.word	0x40013800
 800714c:	2000145c 	.word	0x2000145c
 8007150:	40020030 	.word	0x40020030

08007154 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b082      	sub	sp, #8
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==LPUART1)
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	4a18      	ldr	r2, [pc, #96]	@ (80071c4 <HAL_UART_MspDeInit+0x70>)
 8007162:	4293      	cmp	r3, r2
 8007164:	d111      	bne.n	800718a <HAL_UART_MspDeInit+0x36>
  {
  /* USER CODE BEGIN LPUART1_MspDeInit 0 */

  /* USER CODE END LPUART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_LPUART1_CLK_DISABLE();
 8007166:	2001      	movs	r0, #1
 8007168:	f7ff fe3c 	bl	8006de4 <LL_APB1_GRP2_DisableClock>

    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 800716c:	210c      	movs	r1, #12
 800716e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8007172:	f002 f90f 	bl	8009394 <HAL_GPIO_DeInit>

    /* LPUART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmarx);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800717c:	4618      	mov	r0, r3
 800717e:	f001 fc6d 	bl	8008a5c <HAL_DMA_DeInit>

    /* LPUART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(LPUART1_IRQn);
 8007182:	2025      	movs	r0, #37	@ 0x25
 8007184:	f001 fb8b 	bl	800889e <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
}
 8007188:	e017      	b.n	80071ba <HAL_UART_MspDeInit+0x66>
  else if(uartHandle->Instance==USART1)
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	4a0e      	ldr	r2, [pc, #56]	@ (80071c8 <HAL_UART_MspDeInit+0x74>)
 8007190:	4293      	cmp	r3, r2
 8007192:	d112      	bne.n	80071ba <HAL_UART_MspDeInit+0x66>
    __HAL_RCC_USART1_CLK_DISABLE();
 8007194:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8007198:	f7ff fe50 	bl	8006e3c <LL_APB2_GRP1_DisableClock>
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 800719c:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80071a0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80071a4:	f002 f8f6 	bl	8009394 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmarx);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80071ae:	4618      	mov	r0, r3
 80071b0:	f001 fc54 	bl	8008a5c <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 80071b4:	2024      	movs	r0, #36	@ 0x24
 80071b6:	f001 fb72 	bl	800889e <HAL_NVIC_DisableIRQ>
}
 80071ba:	bf00      	nop
 80071bc:	3708      	adds	r7, #8
 80071be:	46bd      	mov	sp, r7
 80071c0:	bd80      	pop	{r7, pc}
 80071c2:	bf00      	nop
 80071c4:	40008000 	.word	0x40008000
 80071c8:	40013800 	.word	0x40013800

080071cc <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80071cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80071ce:	b085      	sub	sp, #20
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
	if(huart->Instance==LPUART1){
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	4a4e      	ldr	r2, [pc, #312]	@ (8007314 <HAL_UART_RxCpltCallback+0x148>)
 80071da:	4293      	cmp	r3, r2
 80071dc:	d171      	bne.n	80072c2 <HAL_UART_RxCpltCallback+0xf6>
	oldPos = newPos; //keep track of the last position in the buffer
 80071de:	4b4e      	ldr	r3, [pc, #312]	@ (8007318 <HAL_UART_RxCpltCallback+0x14c>)
 80071e0:	881a      	ldrh	r2, [r3, #0]
 80071e2:	4b4e      	ldr	r3, [pc, #312]	@ (800731c <HAL_UART_RxCpltCallback+0x150>)
 80071e4:	801a      	strh	r2, [r3, #0]
			if(oldPos + 64 > DataBuffer_SIZE){ //if the buffer is full, parse it, then reset the buffer
 80071e6:	4b4d      	ldr	r3, [pc, #308]	@ (800731c <HAL_UART_RxCpltCallback+0x150>)
 80071e8:	881b      	ldrh	r3, [r3, #0]
 80071ea:	f5b3 7fe0 	cmp.w	r3, #448	@ 0x1c0
 80071ee:	d922      	bls.n	8007236 <HAL_UART_RxCpltCallback+0x6a>

				uint16_t datatocopy = DataBuffer_SIZE-oldPos;  // find out how much space is left in the main buffer
 80071f0:	4b4a      	ldr	r3, [pc, #296]	@ (800731c <HAL_UART_RxCpltCallback+0x150>)
 80071f2:	881b      	ldrh	r3, [r3, #0]
 80071f4:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 80071f8:	817b      	strh	r3, [r7, #10]
				memcpy ((uint8_t *)DataBuffer+oldPos, RxBuffer, datatocopy);  // copy data in that remaining space
 80071fa:	4b48      	ldr	r3, [pc, #288]	@ (800731c <HAL_UART_RxCpltCallback+0x150>)
 80071fc:	881b      	ldrh	r3, [r3, #0]
 80071fe:	461a      	mov	r2, r3
 8007200:	4b47      	ldr	r3, [pc, #284]	@ (8007320 <HAL_UART_RxCpltCallback+0x154>)
 8007202:	4413      	add	r3, r2
 8007204:	897a      	ldrh	r2, [r7, #10]
 8007206:	4947      	ldr	r1, [pc, #284]	@ (8007324 <HAL_UART_RxCpltCallback+0x158>)
 8007208:	4618      	mov	r0, r3
 800720a:	f014 fbb2 	bl	801b972 <memcpy>

				oldPos = 0;  // point to the start of the buffer
 800720e:	4b43      	ldr	r3, [pc, #268]	@ (800731c <HAL_UART_RxCpltCallback+0x150>)
 8007210:	2200      	movs	r2, #0
 8007212:	801a      	strh	r2, [r3, #0]
				memcpy ((uint8_t *)DataBuffer, (uint8_t *)RxBuffer+datatocopy, (64-datatocopy));  // copy the remaining data
 8007214:	897b      	ldrh	r3, [r7, #10]
 8007216:	4a43      	ldr	r2, [pc, #268]	@ (8007324 <HAL_UART_RxCpltCallback+0x158>)
 8007218:	1899      	adds	r1, r3, r2
 800721a:	897b      	ldrh	r3, [r7, #10]
 800721c:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 8007220:	461a      	mov	r2, r3
 8007222:	483f      	ldr	r0, [pc, #252]	@ (8007320 <HAL_UART_RxCpltCallback+0x154>)
 8007224:	f014 fba5 	bl	801b972 <memcpy>
				newPos = (64-datatocopy);  // update the position
 8007228:	897b      	ldrh	r3, [r7, #10]
 800722a:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 800722e:	b29a      	uxth	r2, r3
 8007230:	4b39      	ldr	r3, [pc, #228]	@ (8007318 <HAL_UART_RxCpltCallback+0x14c>)
 8007232:	801a      	strh	r2, [r3, #0]
 8007234:	e01e      	b.n	8007274 <HAL_UART_RxCpltCallback+0xa8>
			}
			else{
				memcpy((uint8_t *)DataBuffer+oldPos, RxBuffer, 64); //copy received data to the buffer
 8007236:	4b39      	ldr	r3, [pc, #228]	@ (800731c <HAL_UART_RxCpltCallback+0x150>)
 8007238:	881b      	ldrh	r3, [r3, #0]
 800723a:	461a      	mov	r2, r3
 800723c:	4b38      	ldr	r3, [pc, #224]	@ (8007320 <HAL_UART_RxCpltCallback+0x154>)
 800723e:	441a      	add	r2, r3
 8007240:	4b38      	ldr	r3, [pc, #224]	@ (8007324 <HAL_UART_RxCpltCallback+0x158>)
 8007242:	4610      	mov	r0, r2
 8007244:	f103 0440 	add.w	r4, r3, #64	@ 0x40
 8007248:	4602      	mov	r2, r0
 800724a:	4619      	mov	r1, r3
 800724c:	f8d1 c000 	ldr.w	ip, [r1]
 8007250:	684e      	ldr	r6, [r1, #4]
 8007252:	688d      	ldr	r5, [r1, #8]
 8007254:	68c9      	ldr	r1, [r1, #12]
 8007256:	f8c2 c000 	str.w	ip, [r2]
 800725a:	6056      	str	r6, [r2, #4]
 800725c:	6095      	str	r5, [r2, #8]
 800725e:	60d1      	str	r1, [r2, #12]
 8007260:	3310      	adds	r3, #16
 8007262:	3010      	adds	r0, #16
 8007264:	42a3      	cmp	r3, r4
 8007266:	d1ef      	bne.n	8007248 <HAL_UART_RxCpltCallback+0x7c>
				newPos = 64+oldPos; //update buffer position
 8007268:	4b2c      	ldr	r3, [pc, #176]	@ (800731c <HAL_UART_RxCpltCallback+0x150>)
 800726a:	881b      	ldrh	r3, [r3, #0]
 800726c:	3340      	adds	r3, #64	@ 0x40
 800726e:	b29a      	uxth	r2, r3
 8007270:	4b29      	ldr	r3, [pc, #164]	@ (8007318 <HAL_UART_RxCpltCallback+0x14c>)
 8007272:	801a      	strh	r2, [r3, #0]

			}


			HAL_UART_Receive_DMA(&hlpuart1, (uint8_t *)RxBuffer, RxBuffer_SIZE);//on recoit par dma à nouveau 64 caractères
 8007274:	2240      	movs	r2, #64	@ 0x40
 8007276:	492b      	ldr	r1, [pc, #172]	@ (8007324 <HAL_UART_RxCpltCallback+0x158>)
 8007278:	482b      	ldr	r0, [pc, #172]	@ (8007328 <HAL_UART_RxCpltCallback+0x15c>)
 800727a:	f008 fbbd 	bl	800f9f8 <HAL_UART_Receive_DMA>
			__HAL_DMA_DISABLE_IT(&hdma_lpuart1_rx, DMA_IT_HT);//on desactive l'interruption afin de ne pas être interrompu tout le temps
 800727e:	4b2b      	ldr	r3, [pc, #172]	@ (800732c <HAL_UART_RxCpltCallback+0x160>)
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	681a      	ldr	r2, [r3, #0]
 8007284:	4b29      	ldr	r3, [pc, #164]	@ (800732c <HAL_UART_RxCpltCallback+0x160>)
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f022 0204 	bic.w	r2, r2, #4
 800728c:	601a      	str	r2, [r3, #0]
			memcpy((uint8_t *) receivedtrame,(uint8_t *)RxBuffer,64);
 800728e:	4a28      	ldr	r2, [pc, #160]	@ (8007330 <HAL_UART_RxCpltCallback+0x164>)
 8007290:	4b24      	ldr	r3, [pc, #144]	@ (8007324 <HAL_UART_RxCpltCallback+0x158>)
 8007292:	4610      	mov	r0, r2
 8007294:	f103 0440 	add.w	r4, r3, #64	@ 0x40
 8007298:	4602      	mov	r2, r0
 800729a:	4619      	mov	r1, r3
 800729c:	f8d1 c000 	ldr.w	ip, [r1]
 80072a0:	684e      	ldr	r6, [r1, #4]
 80072a2:	688d      	ldr	r5, [r1, #8]
 80072a4:	68c9      	ldr	r1, [r1, #12]
 80072a6:	f8c2 c000 	str.w	ip, [r2]
 80072aa:	6056      	str	r6, [r2, #4]
 80072ac:	6095      	str	r5, [r2, #8]
 80072ae:	60d1      	str	r1, [r2, #12]
 80072b0:	3310      	adds	r3, #16
 80072b2:	3010      	adds	r0, #16
 80072b4:	42a3      	cmp	r3, r4
 80072b6:	d1ef      	bne.n	8007298 <HAL_UART_RxCpltCallback+0xcc>


	HAL_UART_Receive_DMA(&hlpuart1, (uint8_t *)RxBuffer, RxBuffer_SIZE);
 80072b8:	2240      	movs	r2, #64	@ 0x40
 80072ba:	491a      	ldr	r1, [pc, #104]	@ (8007324 <HAL_UART_RxCpltCallback+0x158>)
 80072bc:	481a      	ldr	r0, [pc, #104]	@ (8007328 <HAL_UART_RxCpltCallback+0x15c>)
 80072be:	f008 fb9b 	bl	800f9f8 <HAL_UART_Receive_DMA>

	}
	if(huart->Instance==USART1){
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	4a1b      	ldr	r2, [pc, #108]	@ (8007334 <HAL_UART_RxCpltCallback+0x168>)
 80072c8:	4293      	cmp	r3, r2
 80072ca:	d11f      	bne.n	800730c <HAL_UART_RxCpltCallback+0x140>
				for(int i=0;i<TarvosRxTamponSize;i++){
 80072cc:	2300      	movs	r3, #0
 80072ce:	60fb      	str	r3, [r7, #12]
 80072d0:	e014      	b.n	80072fc <HAL_UART_RxCpltCallback+0x130>
					if (tarvos_RX_Tampon[i] == 0x02){
 80072d2:	4a19      	ldr	r2, [pc, #100]	@ (8007338 <HAL_UART_RxCpltCallback+0x16c>)
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	4413      	add	r3, r2
 80072d8:	781b      	ldrb	r3, [r3, #0]
 80072da:	2b02      	cmp	r3, #2
 80072dc:	d10b      	bne.n	80072f6 <HAL_UART_RxCpltCallback+0x12a>
						memcpy((uint8_t *)tarvos_RX_Buffer,(uint8_t *) tarvos_RX_Tampon + i, (int)tarvos_RX_Tampon[i+2]+4); //copy received data to the buffer
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	4a15      	ldr	r2, [pc, #84]	@ (8007338 <HAL_UART_RxCpltCallback+0x16c>)
 80072e2:	1899      	adds	r1, r3, r2
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	3302      	adds	r3, #2
 80072e8:	4a13      	ldr	r2, [pc, #76]	@ (8007338 <HAL_UART_RxCpltCallback+0x16c>)
 80072ea:	5cd3      	ldrb	r3, [r2, r3]
 80072ec:	3304      	adds	r3, #4
 80072ee:	461a      	mov	r2, r3
 80072f0:	4812      	ldr	r0, [pc, #72]	@ (800733c <HAL_UART_RxCpltCallback+0x170>)
 80072f2:	f014 fb3e 	bl	801b972 <memcpy>
				for(int i=0;i<TarvosRxTamponSize;i++){
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	3301      	adds	r3, #1
 80072fa:	60fb      	str	r3, [r7, #12]
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	2b07      	cmp	r3, #7
 8007300:	dde7      	ble.n	80072d2 <HAL_UART_RxCpltCallback+0x106>
					}
				}
				HAL_UART_Receive_DMA(&hlpuart1, (uint8_t *)tarvos_RX_Tampon, TarvosRxTamponSize);//on recoit par dma à nouveau 64 caractères
 8007302:	2208      	movs	r2, #8
 8007304:	490c      	ldr	r1, [pc, #48]	@ (8007338 <HAL_UART_RxCpltCallback+0x16c>)
 8007306:	4808      	ldr	r0, [pc, #32]	@ (8007328 <HAL_UART_RxCpltCallback+0x15c>)
 8007308:	f008 fb76 	bl	800f9f8 <HAL_UART_Receive_DMA>
		}//l'appel de cette fonction réactive l'intérruption.
}
 800730c:	bf00      	nop
 800730e:	3714      	adds	r7, #20
 8007310:	46bd      	mov	sp, r7
 8007312:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007314:	40008000 	.word	0x40008000
 8007318:	200005dc 	.word	0x200005dc
 800731c:	200005da 	.word	0x200005da
 8007320:	20000620 	.word	0x20000620
 8007324:	200005e0 	.word	0x200005e0
 8007328:	200012d4 	.word	0x200012d4
 800732c:	200013fc 	.word	0x200013fc
 8007330:	20000ca8 	.word	0x20000ca8
 8007334:	40013800 	.word	0x40013800
 8007338:	20000920 	.word	0x20000920
 800733c:	20000820 	.word	0x20000820

08007340 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8007340:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007342:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007344:	3304      	adds	r3, #4

08007346 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007346:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007348:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 800734a:	d3f9      	bcc.n	8007340 <CopyDataInit>
  bx lr
 800734c:	4770      	bx	lr

0800734e <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 800734e:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8007350:	3004      	adds	r0, #4

08007352 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8007352:	4288      	cmp	r0, r1
  bcc FillZerobss
 8007354:	d3fb      	bcc.n	800734e <FillZerobss>
  bx lr
 8007356:	4770      	bx	lr

08007358 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8007358:	480c      	ldr	r0, [pc, #48]	@ (800738c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800735a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800735c:	f7ff f966 	bl	800662c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8007360:	480b      	ldr	r0, [pc, #44]	@ (8007390 <LoopForever+0x6>)
 8007362:	490c      	ldr	r1, [pc, #48]	@ (8007394 <LoopForever+0xa>)
 8007364:	4a0c      	ldr	r2, [pc, #48]	@ (8007398 <LoopForever+0xe>)
 8007366:	2300      	movs	r3, #0
 8007368:	f7ff ffed 	bl	8007346 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 800736c:	480b      	ldr	r0, [pc, #44]	@ (800739c <LoopForever+0x12>)
 800736e:	490c      	ldr	r1, [pc, #48]	@ (80073a0 <LoopForever+0x16>)
 8007370:	4a0c      	ldr	r2, [pc, #48]	@ (80073a4 <LoopForever+0x1a>)
 8007372:	2300      	movs	r3, #0
 8007374:	f7ff ffe7 	bl	8007346 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8007378:	480b      	ldr	r0, [pc, #44]	@ (80073a8 <LoopForever+0x1e>)
 800737a:	490c      	ldr	r1, [pc, #48]	@ (80073ac <LoopForever+0x22>)
 800737c:	2300      	movs	r3, #0
 800737e:	f7ff ffe8 	bl	8007352 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8007382:	f014 fac7 	bl	801b914 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8007386:	f7fb fb59 	bl	8002a3c <main>

0800738a <LoopForever>:

LoopForever:
  b LoopForever
 800738a:	e7fe      	b.n	800738a <LoopForever>
  ldr   r0, =_estack
 800738c:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8007390:	20000008 	.word	0x20000008
 8007394:	20000320 	.word	0x20000320
 8007398:	08022950 	.word	0x08022950
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 800739c:	200301e4 	.word	0x200301e4
 80073a0:	20030a67 	.word	0x20030a67
 80073a4:	08022cae 	.word	0x08022cae
  INIT_BSS _sbss, _ebss
 80073a8:	20000370 	.word	0x20000370
 80073ac:	20003198 	.word	0x20003198

080073b0 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80073b0:	e7fe      	b.n	80073b0 <ADC1_IRQHandler>
	...

080073b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b082      	sub	sp, #8
 80073b8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80073ba:	2300      	movs	r3, #0
 80073bc:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80073be:	4b0c      	ldr	r3, [pc, #48]	@ (80073f0 <HAL_Init+0x3c>)
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	4a0b      	ldr	r2, [pc, #44]	@ (80073f0 <HAL_Init+0x3c>)
 80073c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80073c8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80073ca:	2003      	movs	r0, #3
 80073cc:	f001 fa34 	bl	8008838 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80073d0:	200f      	movs	r0, #15
 80073d2:	f000 f80f 	bl	80073f4 <HAL_InitTick>
 80073d6:	4603      	mov	r3, r0
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d002      	beq.n	80073e2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80073dc:	2301      	movs	r3, #1
 80073de:	71fb      	strb	r3, [r7, #7]
 80073e0:	e001      	b.n	80073e6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80073e2:	f7fe ff38 	bl	8006256 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80073e6:	79fb      	ldrb	r3, [r7, #7]
}
 80073e8:	4618      	mov	r0, r3
 80073ea:	3708      	adds	r7, #8
 80073ec:	46bd      	mov	sp, r7
 80073ee:	bd80      	pop	{r7, pc}
 80073f0:	58004000 	.word	0x58004000

080073f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b084      	sub	sp, #16
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80073fc:	2300      	movs	r3, #0
 80073fe:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8007400:	4b17      	ldr	r3, [pc, #92]	@ (8007460 <HAL_InitTick+0x6c>)
 8007402:	781b      	ldrb	r3, [r3, #0]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d024      	beq.n	8007452 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8007408:	f005 fc6a 	bl	800cce0 <HAL_RCC_GetHCLKFreq>
 800740c:	4602      	mov	r2, r0
 800740e:	4b14      	ldr	r3, [pc, #80]	@ (8007460 <HAL_InitTick+0x6c>)
 8007410:	781b      	ldrb	r3, [r3, #0]
 8007412:	4619      	mov	r1, r3
 8007414:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8007418:	fbb3 f3f1 	udiv	r3, r3, r1
 800741c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007420:	4618      	mov	r0, r3
 8007422:	f001 fa4a 	bl	80088ba <HAL_SYSTICK_Config>
 8007426:	4603      	mov	r3, r0
 8007428:	2b00      	cmp	r3, #0
 800742a:	d10f      	bne.n	800744c <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2b0f      	cmp	r3, #15
 8007430:	d809      	bhi.n	8007446 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007432:	2200      	movs	r2, #0
 8007434:	6879      	ldr	r1, [r7, #4]
 8007436:	f04f 30ff 	mov.w	r0, #4294967295
 800743a:	f001 fa08 	bl	800884e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800743e:	4a09      	ldr	r2, [pc, #36]	@ (8007464 <HAL_InitTick+0x70>)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	6013      	str	r3, [r2, #0]
 8007444:	e007      	b.n	8007456 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8007446:	2301      	movs	r3, #1
 8007448:	73fb      	strb	r3, [r7, #15]
 800744a:	e004      	b.n	8007456 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 800744c:	2301      	movs	r3, #1
 800744e:	73fb      	strb	r3, [r7, #15]
 8007450:	e001      	b.n	8007456 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8007452:	2301      	movs	r3, #1
 8007454:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8007456:	7bfb      	ldrb	r3, [r7, #15]
}
 8007458:	4618      	mov	r0, r3
 800745a:	3710      	adds	r7, #16
 800745c:	46bd      	mov	sp, r7
 800745e:	bd80      	pop	{r7, pc}
 8007460:	20000034 	.word	0x20000034
 8007464:	20000030 	.word	0x20000030

08007468 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007468:	b480      	push	{r7}
 800746a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800746c:	4b06      	ldr	r3, [pc, #24]	@ (8007488 <HAL_IncTick+0x20>)
 800746e:	781b      	ldrb	r3, [r3, #0]
 8007470:	461a      	mov	r2, r3
 8007472:	4b06      	ldr	r3, [pc, #24]	@ (800748c <HAL_IncTick+0x24>)
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	4413      	add	r3, r2
 8007478:	4a04      	ldr	r2, [pc, #16]	@ (800748c <HAL_IncTick+0x24>)
 800747a:	6013      	str	r3, [r2, #0]
}
 800747c:	bf00      	nop
 800747e:	46bd      	mov	sp, r7
 8007480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007484:	4770      	bx	lr
 8007486:	bf00      	nop
 8007488:	20000034 	.word	0x20000034
 800748c:	200014bc 	.word	0x200014bc

08007490 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007490:	b480      	push	{r7}
 8007492:	af00      	add	r7, sp, #0
  return uwTick;
 8007494:	4b03      	ldr	r3, [pc, #12]	@ (80074a4 <HAL_GetTick+0x14>)
 8007496:	681b      	ldr	r3, [r3, #0]
}
 8007498:	4618      	mov	r0, r3
 800749a:	46bd      	mov	sp, r7
 800749c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a0:	4770      	bx	lr
 80074a2:	bf00      	nop
 80074a4:	200014bc 	.word	0x200014bc

080074a8 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 80074a8:	b480      	push	{r7}
 80074aa:	af00      	add	r7, sp, #0
  return uwTickPrio;
 80074ac:	4b03      	ldr	r3, [pc, #12]	@ (80074bc <HAL_GetTickPrio+0x14>)
 80074ae:	681b      	ldr	r3, [r3, #0]
}
 80074b0:	4618      	mov	r0, r3
 80074b2:	46bd      	mov	sp, r7
 80074b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b8:	4770      	bx	lr
 80074ba:	bf00      	nop
 80074bc:	20000030 	.word	0x20000030

080074c0 <HAL_GetTickFreq>:
  * @brief Return tick frequency.
  * @retval Tick frequency.
  *         Value of @ref HAL_TickFreqTypeDef.
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 80074c0:	b480      	push	{r7}
 80074c2:	af00      	add	r7, sp, #0
  return uwTickFreq;
 80074c4:	4b03      	ldr	r3, [pc, #12]	@ (80074d4 <HAL_GetTickFreq+0x14>)
 80074c6:	781b      	ldrb	r3, [r3, #0]
}
 80074c8:	4618      	mov	r0, r3
 80074ca:	46bd      	mov	sp, r7
 80074cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d0:	4770      	bx	lr
 80074d2:	bf00      	nop
 80074d4:	20000034 	.word	0x20000034

080074d8 <LL_ADC_SetCommonClock>:
  *
  *         (*) Value available on all STM32 devices except: STM32W10xxx, STM32W15xxx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80074d8:	b480      	push	{r7}
 80074da:	b083      	sub	sp, #12
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
 80074e0:	6039      	str	r1, [r7, #0]
#if defined(ADC_SUPPORT_2_5_MSPS)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
#else
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	689b      	ldr	r3, [r3, #8]
 80074e6:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	431a      	orrs	r2, r3
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	609a      	str	r2, [r3, #8]
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 80074f2:	bf00      	nop
 80074f4:	370c      	adds	r7, #12
 80074f6:	46bd      	mov	sp, r7
 80074f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fc:	4770      	bx	lr

080074fe <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80074fe:	b480      	push	{r7}
 8007500:	b083      	sub	sp, #12
 8007502:	af00      	add	r7, sp, #0
 8007504:	6078      	str	r0, [r7, #4]
 8007506:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	689b      	ldr	r3, [r3, #8]
 800750c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	431a      	orrs	r2, r3
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	609a      	str	r2, [r3, #8]
}
 8007518:	bf00      	nop
 800751a:	370c      	adds	r7, #12
 800751c:	46bd      	mov	sp, r7
 800751e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007522:	4770      	bx	lr

08007524 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8007524:	b480      	push	{r7}
 8007526:	b083      	sub	sp, #12
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	689b      	ldr	r3, [r3, #8]
 8007530:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8007534:	4618      	mov	r0, r3
 8007536:	370c      	adds	r7, #12
 8007538:	46bd      	mov	sp, r7
 800753a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753e:	4770      	bx	lr

08007540 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8007540:	b480      	push	{r7}
 8007542:	b087      	sub	sp, #28
 8007544:	af00      	add	r7, sp, #0
 8007546:	60f8      	str	r0, [r7, #12]
 8007548:	60b9      	str	r1, [r7, #8]
 800754a:	607a      	str	r2, [r7, #4]
 800754c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	3360      	adds	r3, #96	@ 0x60
 8007552:	461a      	mov	r2, r3
 8007554:	68bb      	ldr	r3, [r7, #8]
 8007556:	009b      	lsls	r3, r3, #2
 8007558:	4413      	add	r3, r2
 800755a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800755c:	697b      	ldr	r3, [r7, #20]
 800755e:	681a      	ldr	r2, [r3, #0]
 8007560:	4b08      	ldr	r3, [pc, #32]	@ (8007584 <LL_ADC_SetOffset+0x44>)
 8007562:	4013      	ands	r3, r2
 8007564:	687a      	ldr	r2, [r7, #4]
 8007566:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800756a:	683a      	ldr	r2, [r7, #0]
 800756c:	430a      	orrs	r2, r1
 800756e:	4313      	orrs	r3, r2
 8007570:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8007574:	697b      	ldr	r3, [r7, #20]
 8007576:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8007578:	bf00      	nop
 800757a:	371c      	adds	r7, #28
 800757c:	46bd      	mov	sp, r7
 800757e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007582:	4770      	bx	lr
 8007584:	03fff000 	.word	0x03fff000

08007588 <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8007588:	b480      	push	{r7}
 800758a:	b085      	sub	sp, #20
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
 8007590:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	3360      	adds	r3, #96	@ 0x60
 8007596:	461a      	mov	r2, r3
 8007598:	683b      	ldr	r3, [r7, #0]
 800759a:	009b      	lsls	r3, r3, #2
 800759c:	4413      	add	r3, r2
 800759e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80075a8:	4618      	mov	r0, r3
 80075aa:	3714      	adds	r7, #20
 80075ac:	46bd      	mov	sp, r7
 80075ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b2:	4770      	bx	lr

080075b4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80075b4:	b480      	push	{r7}
 80075b6:	b087      	sub	sp, #28
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	60f8      	str	r0, [r7, #12]
 80075bc:	60b9      	str	r1, [r7, #8]
 80075be:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	3360      	adds	r3, #96	@ 0x60
 80075c4:	461a      	mov	r2, r3
 80075c6:	68bb      	ldr	r3, [r7, #8]
 80075c8:	009b      	lsls	r3, r3, #2
 80075ca:	4413      	add	r3, r2
 80075cc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80075ce:	697b      	ldr	r3, [r7, #20]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	431a      	orrs	r2, r3
 80075da:	697b      	ldr	r3, [r7, #20]
 80075dc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80075de:	bf00      	nop
 80075e0:	371c      	adds	r7, #28
 80075e2:	46bd      	mov	sp, r7
 80075e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e8:	4770      	bx	lr

080075ea <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80075ea:	b480      	push	{r7}
 80075ec:	b083      	sub	sp, #12
 80075ee:	af00      	add	r7, sp, #0
 80075f0:	6078      	str	r0, [r7, #4]
#if defined(ADC_SUPPORT_2_5_MSPS)
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
#else
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	68db      	ldr	r3, [r3, #12]
 80075f6:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d101      	bne.n	8007602 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80075fe:	2301      	movs	r3, #1
 8007600:	e000      	b.n	8007604 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8007602:	2300      	movs	r3, #0
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8007604:	4618      	mov	r0, r3
 8007606:	370c      	adds	r7, #12
 8007608:	46bd      	mov	sp, r7
 800760a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760e:	4770      	bx	lr

08007610 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32WB devices (except devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx) fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8007610:	b480      	push	{r7}
 8007612:	b087      	sub	sp, #28
 8007614:	af00      	add	r7, sp, #0
 8007616:	60f8      	str	r0, [r7, #12]
 8007618:	60b9      	str	r1, [r7, #8]
 800761a:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	3330      	adds	r3, #48	@ 0x30
 8007620:	461a      	mov	r2, r3
 8007622:	68bb      	ldr	r3, [r7, #8]
 8007624:	0a1b      	lsrs	r3, r3, #8
 8007626:	009b      	lsls	r3, r3, #2
 8007628:	f003 030c 	and.w	r3, r3, #12
 800762c:	4413      	add	r3, r2
 800762e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8007630:	697b      	ldr	r3, [r7, #20]
 8007632:	681a      	ldr	r2, [r3, #0]
 8007634:	68bb      	ldr	r3, [r7, #8]
 8007636:	f003 031f 	and.w	r3, r3, #31
 800763a:	211f      	movs	r1, #31
 800763c:	fa01 f303 	lsl.w	r3, r1, r3
 8007640:	43db      	mvns	r3, r3
 8007642:	401a      	ands	r2, r3
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	0e9b      	lsrs	r3, r3, #26
 8007648:	f003 011f 	and.w	r1, r3, #31
 800764c:	68bb      	ldr	r3, [r7, #8]
 800764e:	f003 031f 	and.w	r3, r3, #31
 8007652:	fa01 f303 	lsl.w	r3, r1, r3
 8007656:	431a      	orrs	r2, r3
 8007658:	697b      	ldr	r3, [r7, #20]
 800765a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 800765c:	bf00      	nop
 800765e:	371c      	adds	r7, #28
 8007660:	46bd      	mov	sp, r7
 8007662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007666:	4770      	bx	lr

08007668 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8007668:	b480      	push	{r7}
 800766a:	b087      	sub	sp, #28
 800766c:	af00      	add	r7, sp, #0
 800766e:	60f8      	str	r0, [r7, #12]
 8007670:	60b9      	str	r1, [r7, #8]
 8007672:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	3314      	adds	r3, #20
 8007678:	461a      	mov	r2, r3
 800767a:	68bb      	ldr	r3, [r7, #8]
 800767c:	0e5b      	lsrs	r3, r3, #25
 800767e:	009b      	lsls	r3, r3, #2
 8007680:	f003 0304 	and.w	r3, r3, #4
 8007684:	4413      	add	r3, r2
 8007686:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8007688:	697b      	ldr	r3, [r7, #20]
 800768a:	681a      	ldr	r2, [r3, #0]
 800768c:	68bb      	ldr	r3, [r7, #8]
 800768e:	0d1b      	lsrs	r3, r3, #20
 8007690:	f003 031f 	and.w	r3, r3, #31
 8007694:	2107      	movs	r1, #7
 8007696:	fa01 f303 	lsl.w	r3, r1, r3
 800769a:	43db      	mvns	r3, r3
 800769c:	401a      	ands	r2, r3
 800769e:	68bb      	ldr	r3, [r7, #8]
 80076a0:	0d1b      	lsrs	r3, r3, #20
 80076a2:	f003 031f 	and.w	r3, r3, #31
 80076a6:	6879      	ldr	r1, [r7, #4]
 80076a8:	fa01 f303 	lsl.w	r3, r1, r3
 80076ac:	431a      	orrs	r2, r3
 80076ae:	697b      	ldr	r3, [r7, #20]
 80076b0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 80076b2:	bf00      	nop
 80076b4:	371c      	adds	r7, #28
 80076b6:	46bd      	mov	sp, r7
 80076b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076bc:	4770      	bx	lr
	...

080076c0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80076c0:	b480      	push	{r7}
 80076c2:	b085      	sub	sp, #20
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	60f8      	str	r0, [r7, #12]
 80076c8:	60b9      	str	r1, [r7, #8]
 80076ca:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80076d2:	68bb      	ldr	r3, [r7, #8]
 80076d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80076d8:	43db      	mvns	r3, r3
 80076da:	401a      	ands	r2, r3
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	f003 0318 	and.w	r3, r3, #24
 80076e2:	4908      	ldr	r1, [pc, #32]	@ (8007704 <LL_ADC_SetChannelSingleDiff+0x44>)
 80076e4:	40d9      	lsrs	r1, r3
 80076e6:	68bb      	ldr	r3, [r7, #8]
 80076e8:	400b      	ands	r3, r1
 80076ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80076ee:	431a      	orrs	r2, r3
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80076f6:	bf00      	nop
 80076f8:	3714      	adds	r7, #20
 80076fa:	46bd      	mov	sp, r7
 80076fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007700:	4770      	bx	lr
 8007702:	bf00      	nop
 8007704:	0007ffff 	.word	0x0007ffff

08007708 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8007708:	b480      	push	{r7}
 800770a:	b083      	sub	sp, #12
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	689b      	ldr	r3, [r3, #8]
 8007714:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8007718:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800771c:	687a      	ldr	r2, [r7, #4]
 800771e:	6093      	str	r3, [r2, #8]
}
 8007720:	bf00      	nop
 8007722:	370c      	adds	r7, #12
 8007724:	46bd      	mov	sp, r7
 8007726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772a:	4770      	bx	lr

0800772c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800772c:	b480      	push	{r7}
 800772e:	b083      	sub	sp, #12
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	689b      	ldr	r3, [r3, #8]
 8007738:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800773c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007740:	d101      	bne.n	8007746 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8007742:	2301      	movs	r3, #1
 8007744:	e000      	b.n	8007748 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8007746:	2300      	movs	r3, #0
}
 8007748:	4618      	mov	r0, r3
 800774a:	370c      	adds	r7, #12
 800774c:	46bd      	mov	sp, r7
 800774e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007752:	4770      	bx	lr

08007754 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8007754:	b480      	push	{r7}
 8007756:	b083      	sub	sp, #12
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	689b      	ldr	r3, [r3, #8]
 8007760:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8007764:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8007768:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8007770:	bf00      	nop
 8007772:	370c      	adds	r7, #12
 8007774:	46bd      	mov	sp, r7
 8007776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777a:	4770      	bx	lr

0800777c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800777c:	b480      	push	{r7}
 800777e:	b083      	sub	sp, #12
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	689b      	ldr	r3, [r3, #8]
 8007788:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800778c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007790:	d101      	bne.n	8007796 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8007792:	2301      	movs	r3, #1
 8007794:	e000      	b.n	8007798 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8007796:	2300      	movs	r3, #0
}
 8007798:	4618      	mov	r0, r3
 800779a:	370c      	adds	r7, #12
 800779c:	46bd      	mov	sp, r7
 800779e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a2:	4770      	bx	lr

080077a4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80077a4:	b480      	push	{r7}
 80077a6:	b083      	sub	sp, #12
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	689b      	ldr	r3, [r3, #8]
 80077b0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80077b4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80077b8:	f043 0201 	orr.w	r2, r3, #1
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80077c0:	bf00      	nop
 80077c2:	370c      	adds	r7, #12
 80077c4:	46bd      	mov	sp, r7
 80077c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ca:	4770      	bx	lr

080077cc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80077cc:	b480      	push	{r7}
 80077ce:	b083      	sub	sp, #12
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	689b      	ldr	r3, [r3, #8]
 80077d8:	f003 0301 	and.w	r3, r3, #1
 80077dc:	2b01      	cmp	r3, #1
 80077de:	d101      	bne.n	80077e4 <LL_ADC_IsEnabled+0x18>
 80077e0:	2301      	movs	r3, #1
 80077e2:	e000      	b.n	80077e6 <LL_ADC_IsEnabled+0x1a>
 80077e4:	2300      	movs	r3, #0
}
 80077e6:	4618      	mov	r0, r3
 80077e8:	370c      	adds	r7, #12
 80077ea:	46bd      	mov	sp, r7
 80077ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f0:	4770      	bx	lr

080077f2 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80077f2:	b480      	push	{r7}
 80077f4:	b083      	sub	sp, #12
 80077f6:	af00      	add	r7, sp, #0
 80077f8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	689b      	ldr	r3, [r3, #8]
 80077fe:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007802:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8007806:	f043 0204 	orr.w	r2, r3, #4
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800780e:	bf00      	nop
 8007810:	370c      	adds	r7, #12
 8007812:	46bd      	mov	sp, r7
 8007814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007818:	4770      	bx	lr

0800781a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800781a:	b480      	push	{r7}
 800781c:	b083      	sub	sp, #12
 800781e:	af00      	add	r7, sp, #0
 8007820:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	689b      	ldr	r3, [r3, #8]
 8007826:	f003 0304 	and.w	r3, r3, #4
 800782a:	2b04      	cmp	r3, #4
 800782c:	d101      	bne.n	8007832 <LL_ADC_REG_IsConversionOngoing+0x18>
 800782e:	2301      	movs	r3, #1
 8007830:	e000      	b.n	8007834 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8007832:	2300      	movs	r3, #0
}
 8007834:	4618      	mov	r0, r3
 8007836:	370c      	adds	r7, #12
 8007838:	46bd      	mov	sp, r7
 800783a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783e:	4770      	bx	lr

08007840 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8007840:	b480      	push	{r7}
 8007842:	b083      	sub	sp, #12
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	689b      	ldr	r3, [r3, #8]
 800784c:	f003 0308 	and.w	r3, r3, #8
 8007850:	2b08      	cmp	r3, #8
 8007852:	d101      	bne.n	8007858 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8007854:	2301      	movs	r3, #1
 8007856:	e000      	b.n	800785a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8007858:	2300      	movs	r3, #0
}
 800785a:	4618      	mov	r0, r3
 800785c:	370c      	adds	r7, #12
 800785e:	46bd      	mov	sp, r7
 8007860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007864:	4770      	bx	lr
	...

08007868 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8007868:	b580      	push	{r7, lr}
 800786a:	b088      	sub	sp, #32
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007870:	2300      	movs	r3, #0
 8007872:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR = 0UL;
 8007874:	2300      	movs	r3, #0
 8007876:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8007878:	2300      	movs	r3, #0
 800787a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Check ADC handle */
  if (hadc == NULL)
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d101      	bne.n	8007886 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8007882:	2301      	movs	r3, #1
 8007884:	e12e      	b.n	8007ae4 <HAL_ADC_Init+0x27c>
    }
  }
#else
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	691b      	ldr	r3, [r3, #16]
 800788a:	2b00      	cmp	r3, #0
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007890:	2b00      	cmp	r3, #0
 8007892:	d109      	bne.n	80078a8 <HAL_ADC_Init+0x40>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8007894:	6878      	ldr	r0, [r7, #4]
 8007896:	f7f9 fc1d 	bl	80010d4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2200      	movs	r2, #0
 800789e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2200      	movs	r2, #0
 80078a4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* - Exit from deep power-down mode and ADC voltage regulator enable        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  /* Feature "deep power-down" not available on ADC peripheral of this STM32WB device */
#else
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	4618      	mov	r0, r3
 80078ae:	f7ff ff3d 	bl	800772c <LL_ADC_IsDeepPowerDownEnabled>
 80078b2:	4603      	mov	r3, r0
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d004      	beq.n	80078c2 <HAL_ADC_Init+0x5a>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	4618      	mov	r0, r3
 80078be:	f7ff ff23 	bl	8007708 <LL_ADC_DisableDeepPowerDown>
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	4618      	mov	r0, r3
 80078c8:	f7ff ff58 	bl	800777c <LL_ADC_IsInternalRegulatorEnabled>
 80078cc:	4603      	mov	r3, r0
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d115      	bne.n	80078fe <HAL_ADC_Init+0x96>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	4618      	mov	r0, r3
 80078d8:	f7ff ff3c 	bl	8007754 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80078dc:	4b83      	ldr	r3, [pc, #524]	@ (8007aec <HAL_ADC_Init+0x284>)
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	099b      	lsrs	r3, r3, #6
 80078e2:	4a83      	ldr	r2, [pc, #524]	@ (8007af0 <HAL_ADC_Init+0x288>)
 80078e4:	fba2 2303 	umull	r2, r3, r2, r3
 80078e8:	099b      	lsrs	r3, r3, #6
 80078ea:	3301      	adds	r3, #1
 80078ec:	005b      	lsls	r3, r3, #1
 80078ee:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80078f0:	e002      	b.n	80078f8 <HAL_ADC_Init+0x90>
    {
      wait_loop_index--;
 80078f2:	68bb      	ldr	r3, [r7, #8]
 80078f4:	3b01      	subs	r3, #1
 80078f6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80078f8:	68bb      	ldr	r3, [r7, #8]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d1f9      	bne.n	80078f2 <HAL_ADC_Init+0x8a>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	4618      	mov	r0, r3
 8007904:	f7ff ff3a 	bl	800777c <LL_ADC_IsInternalRegulatorEnabled>
 8007908:	4603      	mov	r3, r0
 800790a:	2b00      	cmp	r3, #0
 800790c:	d10d      	bne.n	800792a <HAL_ADC_Init+0xc2>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007912:	f043 0210 	orr.w	r2, r3, #16
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800791e:	f043 0201 	orr.w	r2, r3, #1
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8007926:	2301      	movs	r3, #1
 8007928:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	4618      	mov	r0, r3
 8007930:	f7ff ff73 	bl	800781a <LL_ADC_REG_IsConversionOngoing>
 8007934:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800793a:	f003 0310 	and.w	r3, r3, #16
 800793e:	2b00      	cmp	r3, #0
 8007940:	f040 80c7 	bne.w	8007ad2 <HAL_ADC_Init+0x26a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8007944:	697b      	ldr	r3, [r7, #20]
 8007946:	2b00      	cmp	r3, #0
 8007948:	f040 80c3 	bne.w	8007ad2 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007950:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8007954:	f043 0202 	orr.w	r2, r3, #2
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	4618      	mov	r0, r3
 8007962:	f7ff ff33 	bl	80077cc <LL_ADC_IsEnabled>
 8007966:	4603      	mov	r3, r0
 8007968:	2b00      	cmp	r3, #0
 800796a:	d10b      	bne.n	8007984 <HAL_ADC_Init+0x11c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800796c:	4861      	ldr	r0, [pc, #388]	@ (8007af4 <HAL_ADC_Init+0x28c>)
 800796e:	f7ff ff2d 	bl	80077cc <LL_ADC_IsEnabled>
 8007972:	4603      	mov	r3, r0
 8007974:	2b00      	cmp	r3, #0
 8007976:	d105      	bne.n	8007984 <HAL_ADC_Init+0x11c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	685b      	ldr	r3, [r3, #4]
 800797c:	4619      	mov	r1, r3
 800797e:	485e      	ldr	r0, [pc, #376]	@ (8007af8 <HAL_ADC_Init+0x290>)
 8007980:	f7ff fdaa 	bl	80074d8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	7e5b      	ldrb	r3, [r3, #25]
 8007988:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800798e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8007994:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800799a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	f893 3020 	ldrb.w	r3, [r3, #32]
 80079a2:	041b      	lsls	r3, r3, #16
                hadc->Init.Resolution                                                  |
 80079a4:	4313      	orrs	r3, r2
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80079a6:	69ba      	ldr	r2, [r7, #24]
 80079a8:	4313      	orrs	r3, r2
 80079aa:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	f893 3020 	ldrb.w	r3, [r3, #32]
 80079b2:	2b01      	cmp	r3, #1
 80079b4:	d106      	bne.n	80079c4 <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079ba:	3b01      	subs	r3, #1
 80079bc:	045b      	lsls	r3, r3, #17
 80079be:	69ba      	ldr	r2, [r7, #24]
 80079c0:	4313      	orrs	r3, r2
 80079c2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d009      	beq.n	80079e0 <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079d0:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079d8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80079da:	69ba      	ldr	r2, [r7, #24]
 80079dc:	4313      	orrs	r3, r2
 80079de:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	68da      	ldr	r2, [r3, #12]
 80079e6:	4b45      	ldr	r3, [pc, #276]	@ (8007afc <HAL_ADC_Init+0x294>)
 80079e8:	4013      	ands	r3, r2
 80079ea:	687a      	ldr	r2, [r7, #4]
 80079ec:	6812      	ldr	r2, [r2, #0]
 80079ee:	69b9      	ldr	r1, [r7, #24]
 80079f0:	430b      	orrs	r3, r1
 80079f2:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	4618      	mov	r0, r3
 80079fa:	f7ff ff0e 	bl	800781a <LL_ADC_REG_IsConversionOngoing>
 80079fe:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	4618      	mov	r0, r3
 8007a06:	f7ff ff1b 	bl	8007840 <LL_ADC_INJ_IsConversionOngoing>
 8007a0a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8007a0c:	693b      	ldr	r3, [r7, #16]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d13d      	bne.n	8007a8e <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d13a      	bne.n	8007a8e <HAL_ADC_Init+0x226>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8007a1c:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007a24:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8007a26:	4313      	orrs	r3, r2
 8007a28:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	68db      	ldr	r3, [r3, #12]
 8007a30:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007a34:	f023 0302 	bic.w	r3, r3, #2
 8007a38:	687a      	ldr	r2, [r7, #4]
 8007a3a:	6812      	ldr	r2, [r2, #0]
 8007a3c:	69b9      	ldr	r1, [r7, #24]
 8007a3e:	430b      	orrs	r3, r1
 8007a40:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007a48:	2b01      	cmp	r3, #1
 8007a4a:	d118      	bne.n	8007a7e <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	691b      	ldr	r3, [r3, #16]
 8007a52:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8007a56:	f023 0304 	bic.w	r3, r3, #4
 8007a5a:	687a      	ldr	r2, [r7, #4]
 8007a5c:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8007a5e:	687a      	ldr	r2, [r7, #4]
 8007a60:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8007a62:	4311      	orrs	r1, r2
 8007a64:	687a      	ldr	r2, [r7, #4]
 8007a66:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8007a68:	4311      	orrs	r1, r2
 8007a6a:	687a      	ldr	r2, [r7, #4]
 8007a6c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8007a6e:	430a      	orrs	r2, r1
 8007a70:	431a      	orrs	r2, r3
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	f042 0201 	orr.w	r2, r2, #1
 8007a7a:	611a      	str	r2, [r3, #16]
 8007a7c:	e007      	b.n	8007a8e <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	691a      	ldr	r2, [r3, #16]
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	f022 0201 	bic.w	r2, r2, #1
 8007a8c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	691b      	ldr	r3, [r3, #16]
 8007a92:	2b01      	cmp	r3, #1
 8007a94:	d10c      	bne.n	8007ab0 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a9c:	f023 010f 	bic.w	r1, r3, #15
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	69db      	ldr	r3, [r3, #28]
 8007aa4:	1e5a      	subs	r2, r3, #1
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	430a      	orrs	r2, r1
 8007aac:	631a      	str	r2, [r3, #48]	@ 0x30
 8007aae:	e007      	b.n	8007ac0 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	f022 020f 	bic.w	r2, r2, #15
 8007abe:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ac4:	f023 0303 	bic.w	r3, r3, #3
 8007ac8:	f043 0201 	orr.w	r2, r3, #1
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	655a      	str	r2, [r3, #84]	@ 0x54
 8007ad0:	e007      	b.n	8007ae2 <HAL_ADC_Init+0x27a>
#endif /* ADC_SUPPORT_2_5_MSPS */
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ad6:	f043 0210 	orr.w	r2, r3, #16
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8007ade:	2301      	movs	r3, #1
 8007ae0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8007ae2:	7ffb      	ldrb	r3, [r7, #31]
}
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	3720      	adds	r7, #32
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	bd80      	pop	{r7, pc}
 8007aec:	2000002c 	.word	0x2000002c
 8007af0:	053e2d63 	.word	0x053e2d63
 8007af4:	50040000 	.word	0x50040000
 8007af8:	50040300 	.word	0x50040300
 8007afc:	fff0c007 	.word	0xfff0c007

08007b00 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b086      	sub	sp, #24
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	60f8      	str	r0, [r7, #12]
 8007b08:	60b9      	str	r1, [r7, #8]
 8007b0a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	4618      	mov	r0, r3
 8007b12:	f7ff fe82 	bl	800781a <LL_ADC_REG_IsConversionOngoing>
 8007b16:	4603      	mov	r3, r0
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d167      	bne.n	8007bec <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007b22:	2b01      	cmp	r3, #1
 8007b24:	d101      	bne.n	8007b2a <HAL_ADC_Start_DMA+0x2a>
 8007b26:	2302      	movs	r3, #2
 8007b28:	e063      	b.n	8007bf2 <HAL_ADC_Start_DMA+0xf2>
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	2201      	movs	r2, #1
 8007b2e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8007b32:	68f8      	ldr	r0, [r7, #12]
 8007b34:	f000 fc42 	bl	80083bc <ADC_Enable>
 8007b38:	4603      	mov	r3, r0
 8007b3a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8007b3c:	7dfb      	ldrb	r3, [r7, #23]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d14f      	bne.n	8007be2 <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b46:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8007b4a:	f023 0301 	bic.w	r3, r3, #1
 8007b4e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	655a      	str	r2, [r3, #84]	@ 0x54
#if defined(ADC_SUPPORT_2_5_MSPS)
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
#else
        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b5a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d006      	beq.n	8007b70 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b66:	f023 0206 	bic.w	r2, r3, #6
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	659a      	str	r2, [r3, #88]	@ 0x58
 8007b6e:	e002      	b.n	8007b76 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	2200      	movs	r2, #0
 8007b74:	659a      	str	r2, [r3, #88]	@ 0x58
        }
#endif /* ADC_SUPPORT_2_5_MSPS */

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007b7a:	4a20      	ldr	r2, [pc, #128]	@ (8007bfc <HAL_ADC_Start_DMA+0xfc>)
 8007b7c:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007b82:	4a1f      	ldr	r2, [pc, #124]	@ (8007c00 <HAL_ADC_Start_DMA+0x100>)
 8007b84:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007b8a:	4a1e      	ldr	r2, [pc, #120]	@ (8007c04 <HAL_ADC_Start_DMA+0x104>)
 8007b8c:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	221c      	movs	r2, #28
 8007b94:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	2200      	movs	r2, #0
 8007b9a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	685a      	ldr	r2, [r3, #4]
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	f042 0210 	orr.w	r2, r2, #16
 8007bac:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
#if  defined(ADC_SUPPORT_2_5_MSPS)
        SET_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
#else
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	68da      	ldr	r2, [r3, #12]
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	f042 0201 	orr.w	r2, r2, #1
 8007bbc:	60da      	str	r2, [r3, #12]
#endif /* ADC_SUPPORT_2_5_MSPS */

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	3340      	adds	r3, #64	@ 0x40
 8007bc8:	4619      	mov	r1, r3
 8007bca:	68ba      	ldr	r2, [r7, #8]
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	f000 ffdb 	bl	8008b88 <HAL_DMA_Start_IT>
 8007bd2:	4603      	mov	r3, r0
 8007bd4:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	4618      	mov	r0, r3
 8007bdc:	f7ff fe09 	bl	80077f2 <LL_ADC_REG_StartConversion>
 8007be0:	e006      	b.n	8007bf0 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	2200      	movs	r2, #0
 8007be6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8007bea:	e001      	b.n	8007bf0 <HAL_ADC_Start_DMA+0xf0>
      }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8007bec:	2302      	movs	r3, #2
 8007bee:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8007bf0:	7dfb      	ldrb	r3, [r7, #23]
}
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	3718      	adds	r7, #24
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	bd80      	pop	{r7, pc}
 8007bfa:	bf00      	nop
 8007bfc:	080084b1 	.word	0x080084b1
 8007c00:	08008589 	.word	0x08008589
 8007c04:	080085a5 	.word	0x080085a5

08007c08 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8007c08:	b480      	push	{r7}
 8007c0a:	b083      	sub	sp, #12
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8007c10:	bf00      	nop
 8007c12:	370c      	adds	r7, #12
 8007c14:	46bd      	mov	sp, r7
 8007c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1a:	4770      	bx	lr

08007c1c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8007c1c:	b480      	push	{r7}
 8007c1e:	b083      	sub	sp, #12
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8007c24:	bf00      	nop
 8007c26:	370c      	adds	r7, #12
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2e:	4770      	bx	lr

08007c30 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *sConfig)
{
 8007c30:	b580      	push	{r7, lr}
 8007c32:	b0b6      	sub	sp, #216	@ 0xd8
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
 8007c38:	6039      	str	r1, [r7, #0]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
#else
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8007c40:	2300      	movs	r3, #0
 8007c42:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007c4a:	2b01      	cmp	r3, #1
 8007c4c:	d101      	bne.n	8007c52 <HAL_ADC_ConfigChannel+0x22>
 8007c4e:	2302      	movs	r3, #2
 8007c50:	e39f      	b.n	8008392 <HAL_ADC_ConfigChannel+0x762>
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	2201      	movs	r2, #1
 8007c56:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	4618      	mov	r0, r3
 8007c60:	f7ff fddb 	bl	800781a <LL_ADC_REG_IsConversionOngoing>
 8007c64:	4603      	mov	r3, r0
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	f040 8384 	bne.w	8008374 <HAL_ADC_ConfigChannel+0x744>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	6818      	ldr	r0, [r3, #0]
 8007c70:	683b      	ldr	r3, [r7, #0]
 8007c72:	6859      	ldr	r1, [r3, #4]
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	461a      	mov	r2, r3
 8007c7a:	f7ff fcc9 	bl	8007610 <LL_ADC_REG_SetSequencerRanks>
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
#else
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	4618      	mov	r0, r3
 8007c84:	f7ff fdc9 	bl	800781a <LL_ADC_REG_IsConversionOngoing>
 8007c88:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	4618      	mov	r0, r3
 8007c92:	f7ff fdd5 	bl	8007840 <LL_ADC_INJ_IsConversionOngoing>
 8007c96:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8007c9a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	f040 81a6 	bne.w	8007ff0 <HAL_ADC_ConfigChannel+0x3c0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8007ca4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	f040 81a1 	bne.w	8007ff0 <HAL_ADC_ConfigChannel+0x3c0>
       )
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	6818      	ldr	r0, [r3, #0]
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	6819      	ldr	r1, [r3, #0]
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	689b      	ldr	r3, [r3, #8]
 8007cba:	461a      	mov	r2, r3
 8007cbc:	f7ff fcd4 	bl	8007668 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8007cc0:	683b      	ldr	r3, [r7, #0]
 8007cc2:	695a      	ldr	r2, [r3, #20]
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	68db      	ldr	r3, [r3, #12]
 8007cca:	08db      	lsrs	r3, r3, #3
 8007ccc:	f003 0303 	and.w	r3, r3, #3
 8007cd0:	005b      	lsls	r3, r3, #1
 8007cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8007cd6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8007cda:	683b      	ldr	r3, [r7, #0]
 8007cdc:	691b      	ldr	r3, [r3, #16]
 8007cde:	2b04      	cmp	r3, #4
 8007ce0:	d00a      	beq.n	8007cf8 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	6818      	ldr	r0, [r3, #0]
 8007ce6:	683b      	ldr	r3, [r7, #0]
 8007ce8:	6919      	ldr	r1, [r3, #16]
 8007cea:	683b      	ldr	r3, [r7, #0]
 8007cec:	681a      	ldr	r2, [r3, #0]
 8007cee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007cf2:	f7ff fc25 	bl	8007540 <LL_ADC_SetOffset>
 8007cf6:	e17b      	b.n	8007ff0 <HAL_ADC_ConfigChannel+0x3c0>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	2100      	movs	r1, #0
 8007cfe:	4618      	mov	r0, r3
 8007d00:	f7ff fc42 	bl	8007588 <LL_ADC_GetOffsetChannel>
 8007d04:	4603      	mov	r3, r0
 8007d06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d10a      	bne.n	8007d24 <HAL_ADC_ConfigChannel+0xf4>
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	2100      	movs	r1, #0
 8007d14:	4618      	mov	r0, r3
 8007d16:	f7ff fc37 	bl	8007588 <LL_ADC_GetOffsetChannel>
 8007d1a:	4603      	mov	r3, r0
 8007d1c:	0e9b      	lsrs	r3, r3, #26
 8007d1e:	f003 021f 	and.w	r2, r3, #31
 8007d22:	e01e      	b.n	8007d62 <HAL_ADC_ConfigChannel+0x132>
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	2100      	movs	r1, #0
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	f7ff fc2c 	bl	8007588 <LL_ADC_GetOffsetChannel>
 8007d30:	4603      	mov	r3, r0
 8007d32:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007d36:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8007d3a:	fa93 f3a3 	rbit	r3, r3
 8007d3e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  return result;
 8007d42:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007d46:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  if (value == 0U)
 8007d4a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d101      	bne.n	8007d56 <HAL_ADC_ConfigChannel+0x126>
    return 32U;
 8007d52:	2320      	movs	r3, #32
 8007d54:	e004      	b.n	8007d60 <HAL_ADC_ConfigChannel+0x130>
  return __builtin_clz(value);
 8007d56:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007d5a:	fab3 f383 	clz	r3, r3
 8007d5e:	b2db      	uxtb	r3, r3
 8007d60:	461a      	mov	r2, r3
 8007d62:	683b      	ldr	r3, [r7, #0]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d105      	bne.n	8007d7a <HAL_ADC_ConfigChannel+0x14a>
 8007d6e:	683b      	ldr	r3, [r7, #0]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	0e9b      	lsrs	r3, r3, #26
 8007d74:	f003 031f 	and.w	r3, r3, #31
 8007d78:	e018      	b.n	8007dac <HAL_ADC_ConfigChannel+0x17c>
 8007d7a:	683b      	ldr	r3, [r7, #0]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007d82:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8007d86:	fa93 f3a3 	rbit	r3, r3
 8007d8a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8007d8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007d92:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8007d96:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d101      	bne.n	8007da2 <HAL_ADC_ConfigChannel+0x172>
    return 32U;
 8007d9e:	2320      	movs	r3, #32
 8007da0:	e004      	b.n	8007dac <HAL_ADC_ConfigChannel+0x17c>
  return __builtin_clz(value);
 8007da2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007da6:	fab3 f383 	clz	r3, r3
 8007daa:	b2db      	uxtb	r3, r3
 8007dac:	429a      	cmp	r2, r3
 8007dae:	d106      	bne.n	8007dbe <HAL_ADC_ConfigChannel+0x18e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	2200      	movs	r2, #0
 8007db6:	2100      	movs	r1, #0
 8007db8:	4618      	mov	r0, r3
 8007dba:	f7ff fbfb 	bl	80075b4 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	2101      	movs	r1, #1
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	f7ff fbdf 	bl	8007588 <LL_ADC_GetOffsetChannel>
 8007dca:	4603      	mov	r3, r0
 8007dcc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d10a      	bne.n	8007dea <HAL_ADC_ConfigChannel+0x1ba>
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	2101      	movs	r1, #1
 8007dda:	4618      	mov	r0, r3
 8007ddc:	f7ff fbd4 	bl	8007588 <LL_ADC_GetOffsetChannel>
 8007de0:	4603      	mov	r3, r0
 8007de2:	0e9b      	lsrs	r3, r3, #26
 8007de4:	f003 021f 	and.w	r2, r3, #31
 8007de8:	e01e      	b.n	8007e28 <HAL_ADC_ConfigChannel+0x1f8>
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	2101      	movs	r1, #1
 8007df0:	4618      	mov	r0, r3
 8007df2:	f7ff fbc9 	bl	8007588 <LL_ADC_GetOffsetChannel>
 8007df6:	4603      	mov	r3, r0
 8007df8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007dfc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007e00:	fa93 f3a3 	rbit	r3, r3
 8007e04:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8007e08:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007e0c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8007e10:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d101      	bne.n	8007e1c <HAL_ADC_ConfigChannel+0x1ec>
    return 32U;
 8007e18:	2320      	movs	r3, #32
 8007e1a:	e004      	b.n	8007e26 <HAL_ADC_ConfigChannel+0x1f6>
  return __builtin_clz(value);
 8007e1c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007e20:	fab3 f383 	clz	r3, r3
 8007e24:	b2db      	uxtb	r3, r3
 8007e26:	461a      	mov	r2, r3
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d105      	bne.n	8007e40 <HAL_ADC_ConfigChannel+0x210>
 8007e34:	683b      	ldr	r3, [r7, #0]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	0e9b      	lsrs	r3, r3, #26
 8007e3a:	f003 031f 	and.w	r3, r3, #31
 8007e3e:	e018      	b.n	8007e72 <HAL_ADC_ConfigChannel+0x242>
 8007e40:	683b      	ldr	r3, [r7, #0]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007e48:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007e4c:	fa93 f3a3 	rbit	r3, r3
 8007e50:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8007e54:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007e58:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8007e5c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d101      	bne.n	8007e68 <HAL_ADC_ConfigChannel+0x238>
    return 32U;
 8007e64:	2320      	movs	r3, #32
 8007e66:	e004      	b.n	8007e72 <HAL_ADC_ConfigChannel+0x242>
  return __builtin_clz(value);
 8007e68:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007e6c:	fab3 f383 	clz	r3, r3
 8007e70:	b2db      	uxtb	r3, r3
 8007e72:	429a      	cmp	r2, r3
 8007e74:	d106      	bne.n	8007e84 <HAL_ADC_ConfigChannel+0x254>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	2101      	movs	r1, #1
 8007e7e:	4618      	mov	r0, r3
 8007e80:	f7ff fb98 	bl	80075b4 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	2102      	movs	r1, #2
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	f7ff fb7c 	bl	8007588 <LL_ADC_GetOffsetChannel>
 8007e90:	4603      	mov	r3, r0
 8007e92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d10a      	bne.n	8007eb0 <HAL_ADC_ConfigChannel+0x280>
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	2102      	movs	r1, #2
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	f7ff fb71 	bl	8007588 <LL_ADC_GetOffsetChannel>
 8007ea6:	4603      	mov	r3, r0
 8007ea8:	0e9b      	lsrs	r3, r3, #26
 8007eaa:	f003 021f 	and.w	r2, r3, #31
 8007eae:	e01e      	b.n	8007eee <HAL_ADC_ConfigChannel+0x2be>
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	2102      	movs	r1, #2
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	f7ff fb66 	bl	8007588 <LL_ADC_GetOffsetChannel>
 8007ebc:	4603      	mov	r3, r0
 8007ebe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007ec2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007ec6:	fa93 f3a3 	rbit	r3, r3
 8007eca:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8007ece:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007ed2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8007ed6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d101      	bne.n	8007ee2 <HAL_ADC_ConfigChannel+0x2b2>
    return 32U;
 8007ede:	2320      	movs	r3, #32
 8007ee0:	e004      	b.n	8007eec <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8007ee2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007ee6:	fab3 f383 	clz	r3, r3
 8007eea:	b2db      	uxtb	r3, r3
 8007eec:	461a      	mov	r2, r3
 8007eee:	683b      	ldr	r3, [r7, #0]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d105      	bne.n	8007f06 <HAL_ADC_ConfigChannel+0x2d6>
 8007efa:	683b      	ldr	r3, [r7, #0]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	0e9b      	lsrs	r3, r3, #26
 8007f00:	f003 031f 	and.w	r3, r3, #31
 8007f04:	e016      	b.n	8007f34 <HAL_ADC_ConfigChannel+0x304>
 8007f06:	683b      	ldr	r3, [r7, #0]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007f0e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007f12:	fa93 f3a3 	rbit	r3, r3
 8007f16:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8007f18:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007f1a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8007f1e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d101      	bne.n	8007f2a <HAL_ADC_ConfigChannel+0x2fa>
    return 32U;
 8007f26:	2320      	movs	r3, #32
 8007f28:	e004      	b.n	8007f34 <HAL_ADC_ConfigChannel+0x304>
  return __builtin_clz(value);
 8007f2a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007f2e:	fab3 f383 	clz	r3, r3
 8007f32:	b2db      	uxtb	r3, r3
 8007f34:	429a      	cmp	r2, r3
 8007f36:	d106      	bne.n	8007f46 <HAL_ADC_ConfigChannel+0x316>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	2102      	movs	r1, #2
 8007f40:	4618      	mov	r0, r3
 8007f42:	f7ff fb37 	bl	80075b4 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	2103      	movs	r1, #3
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	f7ff fb1b 	bl	8007588 <LL_ADC_GetOffsetChannel>
 8007f52:	4603      	mov	r3, r0
 8007f54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d10a      	bne.n	8007f72 <HAL_ADC_ConfigChannel+0x342>
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	2103      	movs	r1, #3
 8007f62:	4618      	mov	r0, r3
 8007f64:	f7ff fb10 	bl	8007588 <LL_ADC_GetOffsetChannel>
 8007f68:	4603      	mov	r3, r0
 8007f6a:	0e9b      	lsrs	r3, r3, #26
 8007f6c:	f003 021f 	and.w	r2, r3, #31
 8007f70:	e017      	b.n	8007fa2 <HAL_ADC_ConfigChannel+0x372>
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	2103      	movs	r1, #3
 8007f78:	4618      	mov	r0, r3
 8007f7a:	f7ff fb05 	bl	8007588 <LL_ADC_GetOffsetChannel>
 8007f7e:	4603      	mov	r3, r0
 8007f80:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007f82:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007f84:	fa93 f3a3 	rbit	r3, r3
 8007f88:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8007f8a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007f8c:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8007f8e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d101      	bne.n	8007f98 <HAL_ADC_ConfigChannel+0x368>
    return 32U;
 8007f94:	2320      	movs	r3, #32
 8007f96:	e003      	b.n	8007fa0 <HAL_ADC_ConfigChannel+0x370>
  return __builtin_clz(value);
 8007f98:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007f9a:	fab3 f383 	clz	r3, r3
 8007f9e:	b2db      	uxtb	r3, r3
 8007fa0:	461a      	mov	r2, r3
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d105      	bne.n	8007fba <HAL_ADC_ConfigChannel+0x38a>
 8007fae:	683b      	ldr	r3, [r7, #0]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	0e9b      	lsrs	r3, r3, #26
 8007fb4:	f003 031f 	and.w	r3, r3, #31
 8007fb8:	e011      	b.n	8007fde <HAL_ADC_ConfigChannel+0x3ae>
 8007fba:	683b      	ldr	r3, [r7, #0]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007fc0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007fc2:	fa93 f3a3 	rbit	r3, r3
 8007fc6:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8007fc8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007fca:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8007fcc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d101      	bne.n	8007fd6 <HAL_ADC_ConfigChannel+0x3a6>
    return 32U;
 8007fd2:	2320      	movs	r3, #32
 8007fd4:	e003      	b.n	8007fde <HAL_ADC_ConfigChannel+0x3ae>
  return __builtin_clz(value);
 8007fd6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007fd8:	fab3 f383 	clz	r3, r3
 8007fdc:	b2db      	uxtb	r3, r3
 8007fde:	429a      	cmp	r2, r3
 8007fe0:	d106      	bne.n	8007ff0 <HAL_ADC_ConfigChannel+0x3c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	2103      	movs	r1, #3
 8007fea:	4618      	mov	r0, r3
 8007fec:	f7ff fae2 	bl	80075b4 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	f7ff fbe9 	bl	80077cc <LL_ADC_IsEnabled>
 8007ffa:	4603      	mov	r3, r0
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	f040 81c2 	bne.w	8008386 <HAL_ADC_ConfigChannel+0x756>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	6818      	ldr	r0, [r3, #0]
 8008006:	683b      	ldr	r3, [r7, #0]
 8008008:	6819      	ldr	r1, [r3, #0]
 800800a:	683b      	ldr	r3, [r7, #0]
 800800c:	68db      	ldr	r3, [r3, #12]
 800800e:	461a      	mov	r2, r3
 8008010:	f7ff fb56 	bl	80076c0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8008014:	683b      	ldr	r3, [r7, #0]
 8008016:	68db      	ldr	r3, [r3, #12]
 8008018:	4a8e      	ldr	r2, [pc, #568]	@ (8008254 <HAL_ADC_ConfigChannel+0x624>)
 800801a:	4293      	cmp	r3, r2
 800801c:	f040 8130 	bne.w	8008280 <HAL_ADC_ConfigChannel+0x650>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8008024:	683b      	ldr	r3, [r7, #0]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800802c:	2b00      	cmp	r3, #0
 800802e:	d10b      	bne.n	8008048 <HAL_ADC_ConfigChannel+0x418>
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	0e9b      	lsrs	r3, r3, #26
 8008036:	3301      	adds	r3, #1
 8008038:	f003 031f 	and.w	r3, r3, #31
 800803c:	2b09      	cmp	r3, #9
 800803e:	bf94      	ite	ls
 8008040:	2301      	movls	r3, #1
 8008042:	2300      	movhi	r3, #0
 8008044:	b2db      	uxtb	r3, r3
 8008046:	e019      	b.n	800807c <HAL_ADC_ConfigChannel+0x44c>
 8008048:	683b      	ldr	r3, [r7, #0]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800804e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008050:	fa93 f3a3 	rbit	r3, r3
 8008054:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8008056:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008058:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800805a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800805c:	2b00      	cmp	r3, #0
 800805e:	d101      	bne.n	8008064 <HAL_ADC_ConfigChannel+0x434>
    return 32U;
 8008060:	2320      	movs	r3, #32
 8008062:	e003      	b.n	800806c <HAL_ADC_ConfigChannel+0x43c>
  return __builtin_clz(value);
 8008064:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008066:	fab3 f383 	clz	r3, r3
 800806a:	b2db      	uxtb	r3, r3
 800806c:	3301      	adds	r3, #1
 800806e:	f003 031f 	and.w	r3, r3, #31
 8008072:	2b09      	cmp	r3, #9
 8008074:	bf94      	ite	ls
 8008076:	2301      	movls	r3, #1
 8008078:	2300      	movhi	r3, #0
 800807a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800807c:	2b00      	cmp	r3, #0
 800807e:	d079      	beq.n	8008174 <HAL_ADC_ConfigChannel+0x544>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8008080:	683b      	ldr	r3, [r7, #0]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008088:	2b00      	cmp	r3, #0
 800808a:	d107      	bne.n	800809c <HAL_ADC_ConfigChannel+0x46c>
 800808c:	683b      	ldr	r3, [r7, #0]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	0e9b      	lsrs	r3, r3, #26
 8008092:	3301      	adds	r3, #1
 8008094:	069b      	lsls	r3, r3, #26
 8008096:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800809a:	e015      	b.n	80080c8 <HAL_ADC_ConfigChannel+0x498>
 800809c:	683b      	ldr	r3, [r7, #0]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80080a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80080a4:	fa93 f3a3 	rbit	r3, r3
 80080a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80080aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80080ac:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80080ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d101      	bne.n	80080b8 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 80080b4:	2320      	movs	r3, #32
 80080b6:	e003      	b.n	80080c0 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 80080b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80080ba:	fab3 f383 	clz	r3, r3
 80080be:	b2db      	uxtb	r3, r3
 80080c0:	3301      	adds	r3, #1
 80080c2:	069b      	lsls	r3, r3, #26
 80080c4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80080c8:	683b      	ldr	r3, [r7, #0]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d109      	bne.n	80080e8 <HAL_ADC_ConfigChannel+0x4b8>
 80080d4:	683b      	ldr	r3, [r7, #0]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	0e9b      	lsrs	r3, r3, #26
 80080da:	3301      	adds	r3, #1
 80080dc:	f003 031f 	and.w	r3, r3, #31
 80080e0:	2101      	movs	r1, #1
 80080e2:	fa01 f303 	lsl.w	r3, r1, r3
 80080e6:	e017      	b.n	8008118 <HAL_ADC_ConfigChannel+0x4e8>
 80080e8:	683b      	ldr	r3, [r7, #0]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80080ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80080f0:	fa93 f3a3 	rbit	r3, r3
 80080f4:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80080f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80080f8:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80080fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d101      	bne.n	8008104 <HAL_ADC_ConfigChannel+0x4d4>
    return 32U;
 8008100:	2320      	movs	r3, #32
 8008102:	e003      	b.n	800810c <HAL_ADC_ConfigChannel+0x4dc>
  return __builtin_clz(value);
 8008104:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008106:	fab3 f383 	clz	r3, r3
 800810a:	b2db      	uxtb	r3, r3
 800810c:	3301      	adds	r3, #1
 800810e:	f003 031f 	and.w	r3, r3, #31
 8008112:	2101      	movs	r1, #1
 8008114:	fa01 f303 	lsl.w	r3, r1, r3
 8008118:	ea42 0103 	orr.w	r1, r2, r3
 800811c:	683b      	ldr	r3, [r7, #0]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008124:	2b00      	cmp	r3, #0
 8008126:	d10a      	bne.n	800813e <HAL_ADC_ConfigChannel+0x50e>
 8008128:	683b      	ldr	r3, [r7, #0]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	0e9b      	lsrs	r3, r3, #26
 800812e:	3301      	adds	r3, #1
 8008130:	f003 021f 	and.w	r2, r3, #31
 8008134:	4613      	mov	r3, r2
 8008136:	005b      	lsls	r3, r3, #1
 8008138:	4413      	add	r3, r2
 800813a:	051b      	lsls	r3, r3, #20
 800813c:	e018      	b.n	8008170 <HAL_ADC_ConfigChannel+0x540>
 800813e:	683b      	ldr	r3, [r7, #0]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008144:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008146:	fa93 f3a3 	rbit	r3, r3
 800814a:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800814c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800814e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8008150:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008152:	2b00      	cmp	r3, #0
 8008154:	d101      	bne.n	800815a <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8008156:	2320      	movs	r3, #32
 8008158:	e003      	b.n	8008162 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 800815a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800815c:	fab3 f383 	clz	r3, r3
 8008160:	b2db      	uxtb	r3, r3
 8008162:	3301      	adds	r3, #1
 8008164:	f003 021f 	and.w	r2, r3, #31
 8008168:	4613      	mov	r3, r2
 800816a:	005b      	lsls	r3, r3, #1
 800816c:	4413      	add	r3, r2
 800816e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008170:	430b      	orrs	r3, r1
 8008172:	e080      	b.n	8008276 <HAL_ADC_ConfigChannel+0x646>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8008174:	683b      	ldr	r3, [r7, #0]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800817c:	2b00      	cmp	r3, #0
 800817e:	d107      	bne.n	8008190 <HAL_ADC_ConfigChannel+0x560>
 8008180:	683b      	ldr	r3, [r7, #0]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	0e9b      	lsrs	r3, r3, #26
 8008186:	3301      	adds	r3, #1
 8008188:	069b      	lsls	r3, r3, #26
 800818a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800818e:	e015      	b.n	80081bc <HAL_ADC_ConfigChannel+0x58c>
 8008190:	683b      	ldr	r3, [r7, #0]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008196:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008198:	fa93 f3a3 	rbit	r3, r3
 800819c:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 800819e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081a0:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80081a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d101      	bne.n	80081ac <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 80081a8:	2320      	movs	r3, #32
 80081aa:	e003      	b.n	80081b4 <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 80081ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081ae:	fab3 f383 	clz	r3, r3
 80081b2:	b2db      	uxtb	r3, r3
 80081b4:	3301      	adds	r3, #1
 80081b6:	069b      	lsls	r3, r3, #26
 80081b8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d109      	bne.n	80081dc <HAL_ADC_ConfigChannel+0x5ac>
 80081c8:	683b      	ldr	r3, [r7, #0]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	0e9b      	lsrs	r3, r3, #26
 80081ce:	3301      	adds	r3, #1
 80081d0:	f003 031f 	and.w	r3, r3, #31
 80081d4:	2101      	movs	r1, #1
 80081d6:	fa01 f303 	lsl.w	r3, r1, r3
 80081da:	e017      	b.n	800820c <HAL_ADC_ConfigChannel+0x5dc>
 80081dc:	683b      	ldr	r3, [r7, #0]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80081e2:	6a3b      	ldr	r3, [r7, #32]
 80081e4:	fa93 f3a3 	rbit	r3, r3
 80081e8:	61fb      	str	r3, [r7, #28]
  return result;
 80081ea:	69fb      	ldr	r3, [r7, #28]
 80081ec:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80081ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d101      	bne.n	80081f8 <HAL_ADC_ConfigChannel+0x5c8>
    return 32U;
 80081f4:	2320      	movs	r3, #32
 80081f6:	e003      	b.n	8008200 <HAL_ADC_ConfigChannel+0x5d0>
  return __builtin_clz(value);
 80081f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081fa:	fab3 f383 	clz	r3, r3
 80081fe:	b2db      	uxtb	r3, r3
 8008200:	3301      	adds	r3, #1
 8008202:	f003 031f 	and.w	r3, r3, #31
 8008206:	2101      	movs	r1, #1
 8008208:	fa01 f303 	lsl.w	r3, r1, r3
 800820c:	ea42 0103 	orr.w	r1, r2, r3
 8008210:	683b      	ldr	r3, [r7, #0]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008218:	2b00      	cmp	r3, #0
 800821a:	d10d      	bne.n	8008238 <HAL_ADC_ConfigChannel+0x608>
 800821c:	683b      	ldr	r3, [r7, #0]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	0e9b      	lsrs	r3, r3, #26
 8008222:	3301      	adds	r3, #1
 8008224:	f003 021f 	and.w	r2, r3, #31
 8008228:	4613      	mov	r3, r2
 800822a:	005b      	lsls	r3, r3, #1
 800822c:	4413      	add	r3, r2
 800822e:	3b1e      	subs	r3, #30
 8008230:	051b      	lsls	r3, r3, #20
 8008232:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8008236:	e01d      	b.n	8008274 <HAL_ADC_ConfigChannel+0x644>
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800823e:	697b      	ldr	r3, [r7, #20]
 8008240:	fa93 f3a3 	rbit	r3, r3
 8008244:	613b      	str	r3, [r7, #16]
  return result;
 8008246:	693b      	ldr	r3, [r7, #16]
 8008248:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800824a:	69bb      	ldr	r3, [r7, #24]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d103      	bne.n	8008258 <HAL_ADC_ConfigChannel+0x628>
    return 32U;
 8008250:	2320      	movs	r3, #32
 8008252:	e005      	b.n	8008260 <HAL_ADC_ConfigChannel+0x630>
 8008254:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8008258:	69bb      	ldr	r3, [r7, #24]
 800825a:	fab3 f383 	clz	r3, r3
 800825e:	b2db      	uxtb	r3, r3
 8008260:	3301      	adds	r3, #1
 8008262:	f003 021f 	and.w	r2, r3, #31
 8008266:	4613      	mov	r3, r2
 8008268:	005b      	lsls	r3, r3, #1
 800826a:	4413      	add	r3, r2
 800826c:	3b1e      	subs	r3, #30
 800826e:	051b      	lsls	r3, r3, #20
 8008270:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008274:	430b      	orrs	r3, r1
                                      sConfig->SamplingTime);
 8008276:	683a      	ldr	r2, [r7, #0]
 8008278:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800827a:	4619      	mov	r1, r3
 800827c:	f7ff f9f4 	bl	8007668 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8008280:	683b      	ldr	r3, [r7, #0]
 8008282:	681a      	ldr	r2, [r3, #0]
 8008284:	4b45      	ldr	r3, [pc, #276]	@ (800839c <HAL_ADC_ConfigChannel+0x76c>)
 8008286:	4013      	ands	r3, r2
 8008288:	2b00      	cmp	r3, #0
 800828a:	d07c      	beq.n	8008386 <HAL_ADC_ConfigChannel+0x756>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800828c:	4844      	ldr	r0, [pc, #272]	@ (80083a0 <HAL_ADC_ConfigChannel+0x770>)
 800828e:	f7ff f949 	bl	8007524 <LL_ADC_GetCommonPathInternalCh>
 8008292:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8008296:	4843      	ldr	r0, [pc, #268]	@ (80083a4 <HAL_ADC_ConfigChannel+0x774>)
 8008298:	f7ff fa98 	bl	80077cc <LL_ADC_IsEnabled>
 800829c:	4603      	mov	r3, r0
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d15e      	bne.n	8008360 <HAL_ADC_ConfigChannel+0x730>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	4a40      	ldr	r2, [pc, #256]	@ (80083a8 <HAL_ADC_ConfigChannel+0x778>)
 80082a8:	4293      	cmp	r3, r2
 80082aa:	d127      	bne.n	80082fc <HAL_ADC_ConfigChannel+0x6cc>
 80082ac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80082b0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d121      	bne.n	80082fc <HAL_ADC_ConfigChannel+0x6cc>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	4a39      	ldr	r2, [pc, #228]	@ (80083a4 <HAL_ADC_ConfigChannel+0x774>)
 80082be:	4293      	cmp	r3, r2
 80082c0:	d161      	bne.n	8008386 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80082c2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80082c6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80082ca:	4619      	mov	r1, r3
 80082cc:	4834      	ldr	r0, [pc, #208]	@ (80083a0 <HAL_ADC_ConfigChannel+0x770>)
 80082ce:	f7ff f916 	bl	80074fe <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80082d2:	4b36      	ldr	r3, [pc, #216]	@ (80083ac <HAL_ADC_ConfigChannel+0x77c>)
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	099b      	lsrs	r3, r3, #6
 80082d8:	4a35      	ldr	r2, [pc, #212]	@ (80083b0 <HAL_ADC_ConfigChannel+0x780>)
 80082da:	fba2 2303 	umull	r2, r3, r2, r3
 80082de:	099b      	lsrs	r3, r3, #6
 80082e0:	1c5a      	adds	r2, r3, #1
 80082e2:	4613      	mov	r3, r2
 80082e4:	005b      	lsls	r3, r3, #1
 80082e6:	4413      	add	r3, r2
 80082e8:	009b      	lsls	r3, r3, #2
 80082ea:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 80082ec:	e002      	b.n	80082f4 <HAL_ADC_ConfigChannel+0x6c4>
              {
                wait_loop_index--;
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	3b01      	subs	r3, #1
 80082f2:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d1f9      	bne.n	80082ee <HAL_ADC_ConfigChannel+0x6be>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80082fa:	e044      	b.n	8008386 <HAL_ADC_ConfigChannel+0x756>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80082fc:	683b      	ldr	r3, [r7, #0]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	4a2c      	ldr	r2, [pc, #176]	@ (80083b4 <HAL_ADC_ConfigChannel+0x784>)
 8008302:	4293      	cmp	r3, r2
 8008304:	d113      	bne.n	800832e <HAL_ADC_ConfigChannel+0x6fe>
 8008306:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800830a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800830e:	2b00      	cmp	r3, #0
 8008310:	d10d      	bne.n	800832e <HAL_ADC_ConfigChannel+0x6fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	4a23      	ldr	r2, [pc, #140]	@ (80083a4 <HAL_ADC_ConfigChannel+0x774>)
 8008318:	4293      	cmp	r3, r2
 800831a:	d134      	bne.n	8008386 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800831c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8008320:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008324:	4619      	mov	r1, r3
 8008326:	481e      	ldr	r0, [pc, #120]	@ (80083a0 <HAL_ADC_ConfigChannel+0x770>)
 8008328:	f7ff f8e9 	bl	80074fe <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800832c:	e02b      	b.n	8008386 <HAL_ADC_ConfigChannel+0x756>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800832e:	683b      	ldr	r3, [r7, #0]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	4a21      	ldr	r2, [pc, #132]	@ (80083b8 <HAL_ADC_ConfigChannel+0x788>)
 8008334:	4293      	cmp	r3, r2
 8008336:	d126      	bne.n	8008386 <HAL_ADC_ConfigChannel+0x756>
 8008338:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800833c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008340:	2b00      	cmp	r3, #0
 8008342:	d120      	bne.n	8008386 <HAL_ADC_ConfigChannel+0x756>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	4a16      	ldr	r2, [pc, #88]	@ (80083a4 <HAL_ADC_ConfigChannel+0x774>)
 800834a:	4293      	cmp	r3, r2
 800834c:	d11b      	bne.n	8008386 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800834e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8008352:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8008356:	4619      	mov	r1, r3
 8008358:	4811      	ldr	r0, [pc, #68]	@ (80083a0 <HAL_ADC_ConfigChannel+0x770>)
 800835a:	f7ff f8d0 	bl	80074fe <LL_ADC_SetCommonPathInternalCh>
 800835e:	e012      	b.n	8008386 <HAL_ADC_ConfigChannel+0x756>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008364:	f043 0220 	orr.w	r2, r3, #32
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 800836c:	2301      	movs	r3, #1
 800836e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8008372:	e008      	b.n	8008386 <HAL_ADC_ConfigChannel+0x756>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008378:	f043 0220 	orr.w	r2, r3, #32
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8008380:	2301      	movs	r3, #1
 8008382:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	2200      	movs	r2, #0
 800838a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return function status */
  return tmp_hal_status;
 800838e:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8008392:	4618      	mov	r0, r3
 8008394:	37d8      	adds	r7, #216	@ 0xd8
 8008396:	46bd      	mov	sp, r7
 8008398:	bd80      	pop	{r7, pc}
 800839a:	bf00      	nop
 800839c:	80080000 	.word	0x80080000
 80083a0:	50040300 	.word	0x50040300
 80083a4:	50040000 	.word	0x50040000
 80083a8:	c7520000 	.word	0xc7520000
 80083ac:	2000002c 	.word	0x2000002c
 80083b0:	053e2d63 	.word	0x053e2d63
 80083b4:	cb840000 	.word	0xcb840000
 80083b8:	80000001 	.word	0x80000001

080083bc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80083bc:	b580      	push	{r7, lr}
 80083be:	b084      	sub	sp, #16
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80083c4:	2300      	movs	r3, #0
 80083c6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	4618      	mov	r0, r3
 80083ce:	f7ff f9fd 	bl	80077cc <LL_ADC_IsEnabled>
 80083d2:	4603      	mov	r3, r0
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d15e      	bne.n	8008496 <ADC_Enable+0xda>
  {
    /* Check if conditions to enable the ADC are fulfilled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
#else
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	689a      	ldr	r2, [r3, #8]
 80083de:	4b30      	ldr	r3, [pc, #192]	@ (80084a0 <ADC_Enable+0xe4>)
 80083e0:	4013      	ands	r3, r2
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d00d      	beq.n	8008402 <ADC_Enable+0x46>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80083ea:	f043 0210 	orr.w	r2, r3, #16
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80083f6:	f043 0201 	orr.w	r2, r3, #1
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 80083fe:	2301      	movs	r3, #1
 8008400:	e04a      	b.n	8008498 <ADC_Enable+0xdc>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	4618      	mov	r0, r3
 8008408:	f7ff f9cc 	bl	80077a4 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800840c:	4825      	ldr	r0, [pc, #148]	@ (80084a4 <ADC_Enable+0xe8>)
 800840e:	f7ff f889 	bl	8007524 <LL_ADC_GetCommonPathInternalCh>
 8008412:	4603      	mov	r3, r0
 8008414:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008418:	2b00      	cmp	r3, #0
 800841a:	d00f      	beq.n	800843c <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800841c:	4b22      	ldr	r3, [pc, #136]	@ (80084a8 <ADC_Enable+0xec>)
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	099b      	lsrs	r3, r3, #6
 8008422:	4a22      	ldr	r2, [pc, #136]	@ (80084ac <ADC_Enable+0xf0>)
 8008424:	fba2 2303 	umull	r2, r3, r2, r3
 8008428:	099b      	lsrs	r3, r3, #6
 800842a:	3301      	adds	r3, #1
 800842c:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800842e:	e002      	b.n	8008436 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8008430:	68bb      	ldr	r3, [r7, #8]
 8008432:	3b01      	subs	r3, #1
 8008434:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8008436:	68bb      	ldr	r3, [r7, #8]
 8008438:	2b00      	cmp	r3, #0
 800843a:	d1f9      	bne.n	8008430 <ADC_Enable+0x74>
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
#endif /*ADC_SUPPORT_2_5_MSPS */
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 800843c:	f7ff f828 	bl	8007490 <HAL_GetTick>
 8008440:	60f8      	str	r0, [r7, #12]
      
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8008442:	e021      	b.n	8008488 <ADC_Enable+0xcc>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if(LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	4618      	mov	r0, r3
 800844a:	f7ff f9bf 	bl	80077cc <LL_ADC_IsEnabled>
 800844e:	4603      	mov	r3, r0
 8008450:	2b00      	cmp	r3, #0
 8008452:	d104      	bne.n	800845e <ADC_Enable+0xa2>
        {
          LL_ADC_Enable(hadc->Instance);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	4618      	mov	r0, r3
 800845a:	f7ff f9a3 	bl	80077a4 <LL_ADC_Enable>
        }
        
        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800845e:	f7ff f817 	bl	8007490 <HAL_GetTick>
 8008462:	4602      	mov	r2, r0
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	1ad3      	subs	r3, r2, r3
 8008468:	2b02      	cmp	r3, #2
 800846a:	d90d      	bls.n	8008488 <ADC_Enable+0xcc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008470:	f043 0210 	orr.w	r2, r3, #16
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	655a      	str	r2, [r3, #84]	@ 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800847c:	f043 0201 	orr.w	r2, r3, #1
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	659a      	str	r2, [r3, #88]	@ 0x58
          
          return HAL_ERROR;
 8008484:	2301      	movs	r3, #1
 8008486:	e007      	b.n	8008498 <ADC_Enable+0xdc>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	f003 0301 	and.w	r3, r3, #1
 8008492:	2b01      	cmp	r3, #1
 8008494:	d1d6      	bne.n	8008444 <ADC_Enable+0x88>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8008496:	2300      	movs	r3, #0
}
 8008498:	4618      	mov	r0, r3
 800849a:	3710      	adds	r7, #16
 800849c:	46bd      	mov	sp, r7
 800849e:	bd80      	pop	{r7, pc}
 80084a0:	8000003f 	.word	0x8000003f
 80084a4:	50040300 	.word	0x50040300
 80084a8:	2000002c 	.word	0x2000002c
 80084ac:	053e2d63 	.word	0x053e2d63

080084b0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b084      	sub	sp, #16
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084bc:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80084c2:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d14b      	bne.n	8008562 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80084ce:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	655a      	str	r2, [r3, #84]	@ 0x54
        }
      }
    }
    
#else
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	f003 0308 	and.w	r3, r3, #8
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d021      	beq.n	8008528 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	4618      	mov	r0, r3
 80084ea:	f7ff f87e 	bl	80075ea <LL_ADC_REG_IsTriggerSourceSWStart>
 80084ee:	4603      	mov	r3, r0
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d032      	beq.n	800855a <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	68db      	ldr	r3, [r3, #12]
 80084fa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d12b      	bne.n	800855a <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008506:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008512:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008516:	2b00      	cmp	r3, #0
 8008518:	d11f      	bne.n	800855a <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800851e:	f043 0201 	orr.w	r2, r3, #1
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	655a      	str	r2, [r3, #84]	@ 0x54
 8008526:	e018      	b.n	800855a <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	68db      	ldr	r3, [r3, #12]
 800852e:	f003 0302 	and.w	r3, r3, #2
 8008532:	2b00      	cmp	r3, #0
 8008534:	d111      	bne.n	800855a <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800853a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008546:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800854a:	2b00      	cmp	r3, #0
 800854c:	d105      	bne.n	800855a <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008552:	f043 0201 	orr.w	r2, r3, #1
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800855a:	68f8      	ldr	r0, [r7, #12]
 800855c:	f7f8 fe14 	bl	8001188 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8008560:	e00e      	b.n	8008580 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008566:	f003 0310 	and.w	r3, r3, #16
 800856a:	2b00      	cmp	r3, #0
 800856c:	d003      	beq.n	8008576 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800856e:	68f8      	ldr	r0, [r7, #12]
 8008570:	f7ff fb54 	bl	8007c1c <HAL_ADC_ErrorCallback>
}
 8008574:	e004      	b.n	8008580 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800857a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800857c:	6878      	ldr	r0, [r7, #4]
 800857e:	4798      	blx	r3
}
 8008580:	bf00      	nop
 8008582:	3710      	adds	r7, #16
 8008584:	46bd      	mov	sp, r7
 8008586:	bd80      	pop	{r7, pc}

08008588 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8008588:	b580      	push	{r7, lr}
 800858a:	b084      	sub	sp, #16
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008594:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8008596:	68f8      	ldr	r0, [r7, #12]
 8008598:	f7ff fb36 	bl	8007c08 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800859c:	bf00      	nop
 800859e:	3710      	adds	r7, #16
 80085a0:	46bd      	mov	sp, r7
 80085a2:	bd80      	pop	{r7, pc}

080085a4 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80085a4:	b580      	push	{r7, lr}
 80085a6:	b084      	sub	sp, #16
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085b0:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80085b6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80085c2:	f043 0204 	orr.w	r2, r3, #4
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80085ca:	68f8      	ldr	r0, [r7, #12]
 80085cc:	f7ff fb26 	bl	8007c1c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80085d0:	bf00      	nop
 80085d2:	3710      	adds	r7, #16
 80085d4:	46bd      	mov	sp, r7
 80085d6:	bd80      	pop	{r7, pc}

080085d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80085d8:	b480      	push	{r7}
 80085da:	b085      	sub	sp, #20
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	f003 0307 	and.w	r3, r3, #7
 80085e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80085e8:	4b0c      	ldr	r3, [pc, #48]	@ (800861c <__NVIC_SetPriorityGrouping+0x44>)
 80085ea:	68db      	ldr	r3, [r3, #12]
 80085ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80085ee:	68ba      	ldr	r2, [r7, #8]
 80085f0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80085f4:	4013      	ands	r3, r2
 80085f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80085fc:	68bb      	ldr	r3, [r7, #8]
 80085fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008600:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8008604:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008608:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800860a:	4a04      	ldr	r2, [pc, #16]	@ (800861c <__NVIC_SetPriorityGrouping+0x44>)
 800860c:	68bb      	ldr	r3, [r7, #8]
 800860e:	60d3      	str	r3, [r2, #12]
}
 8008610:	bf00      	nop
 8008612:	3714      	adds	r7, #20
 8008614:	46bd      	mov	sp, r7
 8008616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861a:	4770      	bx	lr
 800861c:	e000ed00 	.word	0xe000ed00

08008620 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008620:	b480      	push	{r7}
 8008622:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008624:	4b04      	ldr	r3, [pc, #16]	@ (8008638 <__NVIC_GetPriorityGrouping+0x18>)
 8008626:	68db      	ldr	r3, [r3, #12]
 8008628:	0a1b      	lsrs	r3, r3, #8
 800862a:	f003 0307 	and.w	r3, r3, #7
}
 800862e:	4618      	mov	r0, r3
 8008630:	46bd      	mov	sp, r7
 8008632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008636:	4770      	bx	lr
 8008638:	e000ed00 	.word	0xe000ed00

0800863c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800863c:	b480      	push	{r7}
 800863e:	b083      	sub	sp, #12
 8008640:	af00      	add	r7, sp, #0
 8008642:	4603      	mov	r3, r0
 8008644:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008646:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800864a:	2b00      	cmp	r3, #0
 800864c:	db0b      	blt.n	8008666 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800864e:	79fb      	ldrb	r3, [r7, #7]
 8008650:	f003 021f 	and.w	r2, r3, #31
 8008654:	4907      	ldr	r1, [pc, #28]	@ (8008674 <__NVIC_EnableIRQ+0x38>)
 8008656:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800865a:	095b      	lsrs	r3, r3, #5
 800865c:	2001      	movs	r0, #1
 800865e:	fa00 f202 	lsl.w	r2, r0, r2
 8008662:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8008666:	bf00      	nop
 8008668:	370c      	adds	r7, #12
 800866a:	46bd      	mov	sp, r7
 800866c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008670:	4770      	bx	lr
 8008672:	bf00      	nop
 8008674:	e000e100 	.word	0xe000e100

08008678 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8008678:	b480      	push	{r7}
 800867a:	b083      	sub	sp, #12
 800867c:	af00      	add	r7, sp, #0
 800867e:	4603      	mov	r3, r0
 8008680:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008682:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008686:	2b00      	cmp	r3, #0
 8008688:	db12      	blt.n	80086b0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800868a:	79fb      	ldrb	r3, [r7, #7]
 800868c:	f003 021f 	and.w	r2, r3, #31
 8008690:	490a      	ldr	r1, [pc, #40]	@ (80086bc <__NVIC_DisableIRQ+0x44>)
 8008692:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008696:	095b      	lsrs	r3, r3, #5
 8008698:	2001      	movs	r0, #1
 800869a:	fa00 f202 	lsl.w	r2, r0, r2
 800869e:	3320      	adds	r3, #32
 80086a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80086a4:	f3bf 8f4f 	dsb	sy
}
 80086a8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80086aa:	f3bf 8f6f 	isb	sy
}
 80086ae:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80086b0:	bf00      	nop
 80086b2:	370c      	adds	r7, #12
 80086b4:	46bd      	mov	sp, r7
 80086b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ba:	4770      	bx	lr
 80086bc:	e000e100 	.word	0xe000e100

080086c0 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80086c0:	b480      	push	{r7}
 80086c2:	b083      	sub	sp, #12
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	4603      	mov	r3, r0
 80086c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80086ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	db0c      	blt.n	80086ec <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80086d2:	79fb      	ldrb	r3, [r7, #7]
 80086d4:	f003 021f 	and.w	r2, r3, #31
 80086d8:	4907      	ldr	r1, [pc, #28]	@ (80086f8 <__NVIC_SetPendingIRQ+0x38>)
 80086da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80086de:	095b      	lsrs	r3, r3, #5
 80086e0:	2001      	movs	r0, #1
 80086e2:	fa00 f202 	lsl.w	r2, r0, r2
 80086e6:	3340      	adds	r3, #64	@ 0x40
 80086e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80086ec:	bf00      	nop
 80086ee:	370c      	adds	r7, #12
 80086f0:	46bd      	mov	sp, r7
 80086f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f6:	4770      	bx	lr
 80086f8:	e000e100 	.word	0xe000e100

080086fc <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80086fc:	b480      	push	{r7}
 80086fe:	b083      	sub	sp, #12
 8008700:	af00      	add	r7, sp, #0
 8008702:	4603      	mov	r3, r0
 8008704:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800870a:	2b00      	cmp	r3, #0
 800870c:	db0c      	blt.n	8008728 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800870e:	79fb      	ldrb	r3, [r7, #7]
 8008710:	f003 021f 	and.w	r2, r3, #31
 8008714:	4907      	ldr	r1, [pc, #28]	@ (8008734 <__NVIC_ClearPendingIRQ+0x38>)
 8008716:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800871a:	095b      	lsrs	r3, r3, #5
 800871c:	2001      	movs	r0, #1
 800871e:	fa00 f202 	lsl.w	r2, r0, r2
 8008722:	3360      	adds	r3, #96	@ 0x60
 8008724:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8008728:	bf00      	nop
 800872a:	370c      	adds	r7, #12
 800872c:	46bd      	mov	sp, r7
 800872e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008732:	4770      	bx	lr
 8008734:	e000e100 	.word	0xe000e100

08008738 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008738:	b480      	push	{r7}
 800873a:	b083      	sub	sp, #12
 800873c:	af00      	add	r7, sp, #0
 800873e:	4603      	mov	r3, r0
 8008740:	6039      	str	r1, [r7, #0]
 8008742:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008744:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008748:	2b00      	cmp	r3, #0
 800874a:	db0a      	blt.n	8008762 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800874c:	683b      	ldr	r3, [r7, #0]
 800874e:	b2da      	uxtb	r2, r3
 8008750:	490c      	ldr	r1, [pc, #48]	@ (8008784 <__NVIC_SetPriority+0x4c>)
 8008752:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008756:	0112      	lsls	r2, r2, #4
 8008758:	b2d2      	uxtb	r2, r2
 800875a:	440b      	add	r3, r1
 800875c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008760:	e00a      	b.n	8008778 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008762:	683b      	ldr	r3, [r7, #0]
 8008764:	b2da      	uxtb	r2, r3
 8008766:	4908      	ldr	r1, [pc, #32]	@ (8008788 <__NVIC_SetPriority+0x50>)
 8008768:	79fb      	ldrb	r3, [r7, #7]
 800876a:	f003 030f 	and.w	r3, r3, #15
 800876e:	3b04      	subs	r3, #4
 8008770:	0112      	lsls	r2, r2, #4
 8008772:	b2d2      	uxtb	r2, r2
 8008774:	440b      	add	r3, r1
 8008776:	761a      	strb	r2, [r3, #24]
}
 8008778:	bf00      	nop
 800877a:	370c      	adds	r7, #12
 800877c:	46bd      	mov	sp, r7
 800877e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008782:	4770      	bx	lr
 8008784:	e000e100 	.word	0xe000e100
 8008788:	e000ed00 	.word	0xe000ed00

0800878c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800878c:	b480      	push	{r7}
 800878e:	b089      	sub	sp, #36	@ 0x24
 8008790:	af00      	add	r7, sp, #0
 8008792:	60f8      	str	r0, [r7, #12]
 8008794:	60b9      	str	r1, [r7, #8]
 8008796:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	f003 0307 	and.w	r3, r3, #7
 800879e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80087a0:	69fb      	ldr	r3, [r7, #28]
 80087a2:	f1c3 0307 	rsb	r3, r3, #7
 80087a6:	2b04      	cmp	r3, #4
 80087a8:	bf28      	it	cs
 80087aa:	2304      	movcs	r3, #4
 80087ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80087ae:	69fb      	ldr	r3, [r7, #28]
 80087b0:	3304      	adds	r3, #4
 80087b2:	2b06      	cmp	r3, #6
 80087b4:	d902      	bls.n	80087bc <NVIC_EncodePriority+0x30>
 80087b6:	69fb      	ldr	r3, [r7, #28]
 80087b8:	3b03      	subs	r3, #3
 80087ba:	e000      	b.n	80087be <NVIC_EncodePriority+0x32>
 80087bc:	2300      	movs	r3, #0
 80087be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80087c0:	f04f 32ff 	mov.w	r2, #4294967295
 80087c4:	69bb      	ldr	r3, [r7, #24]
 80087c6:	fa02 f303 	lsl.w	r3, r2, r3
 80087ca:	43da      	mvns	r2, r3
 80087cc:	68bb      	ldr	r3, [r7, #8]
 80087ce:	401a      	ands	r2, r3
 80087d0:	697b      	ldr	r3, [r7, #20]
 80087d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80087d4:	f04f 31ff 	mov.w	r1, #4294967295
 80087d8:	697b      	ldr	r3, [r7, #20]
 80087da:	fa01 f303 	lsl.w	r3, r1, r3
 80087de:	43d9      	mvns	r1, r3
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80087e4:	4313      	orrs	r3, r2
         );
}
 80087e6:	4618      	mov	r0, r3
 80087e8:	3724      	adds	r7, #36	@ 0x24
 80087ea:	46bd      	mov	sp, r7
 80087ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f0:	4770      	bx	lr
	...

080087f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b082      	sub	sp, #8
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	3b01      	subs	r3, #1
 8008800:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008804:	d301      	bcc.n	800880a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008806:	2301      	movs	r3, #1
 8008808:	e00f      	b.n	800882a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800880a:	4a0a      	ldr	r2, [pc, #40]	@ (8008834 <SysTick_Config+0x40>)
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	3b01      	subs	r3, #1
 8008810:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008812:	210f      	movs	r1, #15
 8008814:	f04f 30ff 	mov.w	r0, #4294967295
 8008818:	f7ff ff8e 	bl	8008738 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800881c:	4b05      	ldr	r3, [pc, #20]	@ (8008834 <SysTick_Config+0x40>)
 800881e:	2200      	movs	r2, #0
 8008820:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008822:	4b04      	ldr	r3, [pc, #16]	@ (8008834 <SysTick_Config+0x40>)
 8008824:	2207      	movs	r2, #7
 8008826:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008828:	2300      	movs	r3, #0
}
 800882a:	4618      	mov	r0, r3
 800882c:	3708      	adds	r7, #8
 800882e:	46bd      	mov	sp, r7
 8008830:	bd80      	pop	{r7, pc}
 8008832:	bf00      	nop
 8008834:	e000e010 	.word	0xe000e010

08008838 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008838:	b580      	push	{r7, lr}
 800883a:	b082      	sub	sp, #8
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008840:	6878      	ldr	r0, [r7, #4]
 8008842:	f7ff fec9 	bl	80085d8 <__NVIC_SetPriorityGrouping>
}
 8008846:	bf00      	nop
 8008848:	3708      	adds	r7, #8
 800884a:	46bd      	mov	sp, r7
 800884c:	bd80      	pop	{r7, pc}

0800884e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800884e:	b580      	push	{r7, lr}
 8008850:	b086      	sub	sp, #24
 8008852:	af00      	add	r7, sp, #0
 8008854:	4603      	mov	r3, r0
 8008856:	60b9      	str	r1, [r7, #8]
 8008858:	607a      	str	r2, [r7, #4]
 800885a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800885c:	f7ff fee0 	bl	8008620 <__NVIC_GetPriorityGrouping>
 8008860:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008862:	687a      	ldr	r2, [r7, #4]
 8008864:	68b9      	ldr	r1, [r7, #8]
 8008866:	6978      	ldr	r0, [r7, #20]
 8008868:	f7ff ff90 	bl	800878c <NVIC_EncodePriority>
 800886c:	4602      	mov	r2, r0
 800886e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008872:	4611      	mov	r1, r2
 8008874:	4618      	mov	r0, r3
 8008876:	f7ff ff5f 	bl	8008738 <__NVIC_SetPriority>
}
 800887a:	bf00      	nop
 800887c:	3718      	adds	r7, #24
 800887e:	46bd      	mov	sp, r7
 8008880:	bd80      	pop	{r7, pc}

08008882 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008882:	b580      	push	{r7, lr}
 8008884:	b082      	sub	sp, #8
 8008886:	af00      	add	r7, sp, #0
 8008888:	4603      	mov	r3, r0
 800888a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800888c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008890:	4618      	mov	r0, r3
 8008892:	f7ff fed3 	bl	800863c <__NVIC_EnableIRQ>
}
 8008896:	bf00      	nop
 8008898:	3708      	adds	r7, #8
 800889a:	46bd      	mov	sp, r7
 800889c:	bd80      	pop	{r7, pc}

0800889e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800889e:	b580      	push	{r7, lr}
 80088a0:	b082      	sub	sp, #8
 80088a2:	af00      	add	r7, sp, #0
 80088a4:	4603      	mov	r3, r0
 80088a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80088a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80088ac:	4618      	mov	r0, r3
 80088ae:	f7ff fee3 	bl	8008678 <__NVIC_DisableIRQ>
}
 80088b2:	bf00      	nop
 80088b4:	3708      	adds	r7, #8
 80088b6:	46bd      	mov	sp, r7
 80088b8:	bd80      	pop	{r7, pc}

080088ba <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80088ba:	b580      	push	{r7, lr}
 80088bc:	b082      	sub	sp, #8
 80088be:	af00      	add	r7, sp, #0
 80088c0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80088c2:	6878      	ldr	r0, [r7, #4]
 80088c4:	f7ff ff96 	bl	80087f4 <SysTick_Config>
 80088c8:	4603      	mov	r3, r0
}
 80088ca:	4618      	mov	r0, r3
 80088cc:	3708      	adds	r7, #8
 80088ce:	46bd      	mov	sp, r7
 80088d0:	bd80      	pop	{r7, pc}

080088d2 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80088d2:	b580      	push	{r7, lr}
 80088d4:	b082      	sub	sp, #8
 80088d6:	af00      	add	r7, sp, #0
 80088d8:	4603      	mov	r3, r0
 80088da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 80088dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80088e0:	4618      	mov	r0, r3
 80088e2:	f7ff feed 	bl	80086c0 <__NVIC_SetPendingIRQ>
}
 80088e6:	bf00      	nop
 80088e8:	3708      	adds	r7, #8
 80088ea:	46bd      	mov	sp, r7
 80088ec:	bd80      	pop	{r7, pc}

080088ee <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80088ee:	b580      	push	{r7, lr}
 80088f0:	b082      	sub	sp, #8
 80088f2:	af00      	add	r7, sp, #0
 80088f4:	4603      	mov	r3, r0
 80088f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 80088f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80088fc:	4618      	mov	r0, r3
 80088fe:	f7ff fefd 	bl	80086fc <__NVIC_ClearPendingIRQ>
}
 8008902:	bf00      	nop
 8008904:	3708      	adds	r7, #8
 8008906:	46bd      	mov	sp, r7
 8008908:	bd80      	pop	{r7, pc}
	...

0800890c <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800890c:	b580      	push	{r7, lr}
 800890e:	b084      	sub	sp, #16
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d101      	bne.n	800891e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800891a:	2301      	movs	r3, #1
 800891c:	e08e      	b.n	8008a3c <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	461a      	mov	r2, r3
 8008924:	4b47      	ldr	r3, [pc, #284]	@ (8008a44 <HAL_DMA_Init+0x138>)
 8008926:	429a      	cmp	r2, r3
 8008928:	d80f      	bhi.n	800894a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	461a      	mov	r2, r3
 8008930:	4b45      	ldr	r3, [pc, #276]	@ (8008a48 <HAL_DMA_Init+0x13c>)
 8008932:	4413      	add	r3, r2
 8008934:	4a45      	ldr	r2, [pc, #276]	@ (8008a4c <HAL_DMA_Init+0x140>)
 8008936:	fba2 2303 	umull	r2, r3, r2, r3
 800893a:	091b      	lsrs	r3, r3, #4
 800893c:	009a      	lsls	r2, r3, #2
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	4a42      	ldr	r2, [pc, #264]	@ (8008a50 <HAL_DMA_Init+0x144>)
 8008946:	641a      	str	r2, [r3, #64]	@ 0x40
 8008948:	e00e      	b.n	8008968 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	461a      	mov	r2, r3
 8008950:	4b40      	ldr	r3, [pc, #256]	@ (8008a54 <HAL_DMA_Init+0x148>)
 8008952:	4413      	add	r3, r2
 8008954:	4a3d      	ldr	r2, [pc, #244]	@ (8008a4c <HAL_DMA_Init+0x140>)
 8008956:	fba2 2303 	umull	r2, r3, r2, r3
 800895a:	091b      	lsrs	r3, r3, #4
 800895c:	009a      	lsls	r2, r3, #2
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	4a3c      	ldr	r2, [pc, #240]	@ (8008a58 <HAL_DMA_Init+0x14c>)
 8008966:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	2202      	movs	r2, #2
 800896c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800897e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008982:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800898c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	691b      	ldr	r3, [r3, #16]
 8008992:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008998:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	699b      	ldr	r3, [r3, #24]
 800899e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80089a4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	6a1b      	ldr	r3, [r3, #32]
 80089aa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80089ac:	68fa      	ldr	r2, [r7, #12]
 80089ae:	4313      	orrs	r3, r2
 80089b0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	68fa      	ldr	r2, [r7, #12]
 80089b8:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80089ba:	6878      	ldr	r0, [r7, #4]
 80089bc:	f000 fb16 	bl	8008fec <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	689b      	ldr	r3, [r3, #8]
 80089c4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80089c8:	d102      	bne.n	80089d0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	2200      	movs	r2, #0
 80089ce:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	685a      	ldr	r2, [r3, #4]
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80089d8:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80089dc:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80089e2:	687a      	ldr	r2, [r7, #4]
 80089e4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80089e6:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	685b      	ldr	r3, [r3, #4]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d010      	beq.n	8008a12 <HAL_DMA_Init+0x106>
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	685b      	ldr	r3, [r3, #4]
 80089f4:	2b04      	cmp	r3, #4
 80089f6:	d80c      	bhi.n	8008a12 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80089f8:	6878      	ldr	r0, [r7, #4]
 80089fa:	f000 fb35 	bl	8009068 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a02:	2200      	movs	r2, #0
 8008a04:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a0a:	687a      	ldr	r2, [r7, #4]
 8008a0c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8008a0e:	605a      	str	r2, [r3, #4]
 8008a10:	e008      	b.n	8008a24 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	2200      	movs	r2, #0
 8008a16:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	2200      	movs	r2, #0
 8008a22:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	2200      	movs	r2, #0
 8008a28:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	2201      	movs	r2, #1
 8008a2e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	2200      	movs	r2, #0
 8008a36:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8008a3a:	2300      	movs	r3, #0
}
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	3710      	adds	r7, #16
 8008a40:	46bd      	mov	sp, r7
 8008a42:	bd80      	pop	{r7, pc}
 8008a44:	40020407 	.word	0x40020407
 8008a48:	bffdfff8 	.word	0xbffdfff8
 8008a4c:	cccccccd 	.word	0xcccccccd
 8008a50:	40020000 	.word	0x40020000
 8008a54:	bffdfbf8 	.word	0xbffdfbf8
 8008a58:	40020400 	.word	0x40020400

08008a5c <HAL_DMA_DeInit>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b082      	sub	sp, #8
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d101      	bne.n	8008a6e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8008a6a:	2301      	movs	r3, #1
 8008a6c:	e07b      	b.n	8008b66 <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	681a      	ldr	r2, [r3, #0]
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	f022 0201 	bic.w	r2, r2, #1
 8008a7c:	601a      	str	r2, [r3, #0]

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	461a      	mov	r2, r3
 8008a84:	4b3a      	ldr	r3, [pc, #232]	@ (8008b70 <HAL_DMA_DeInit+0x114>)
 8008a86:	429a      	cmp	r2, r3
 8008a88:	d80f      	bhi.n	8008aaa <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	461a      	mov	r2, r3
 8008a90:	4b38      	ldr	r3, [pc, #224]	@ (8008b74 <HAL_DMA_DeInit+0x118>)
 8008a92:	4413      	add	r3, r2
 8008a94:	4a38      	ldr	r2, [pc, #224]	@ (8008b78 <HAL_DMA_DeInit+0x11c>)
 8008a96:	fba2 2303 	umull	r2, r3, r2, r3
 8008a9a:	091b      	lsrs	r3, r3, #4
 8008a9c:	009a      	lsls	r2, r3, #2
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	4a35      	ldr	r2, [pc, #212]	@ (8008b7c <HAL_DMA_DeInit+0x120>)
 8008aa6:	641a      	str	r2, [r3, #64]	@ 0x40
 8008aa8:	e00e      	b.n	8008ac8 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	461a      	mov	r2, r3
 8008ab0:	4b33      	ldr	r3, [pc, #204]	@ (8008b80 <HAL_DMA_DeInit+0x124>)
 8008ab2:	4413      	add	r3, r2
 8008ab4:	4a30      	ldr	r2, [pc, #192]	@ (8008b78 <HAL_DMA_DeInit+0x11c>)
 8008ab6:	fba2 2303 	umull	r2, r3, r2, r3
 8008aba:	091b      	lsrs	r3, r3, #4
 8008abc:	009a      	lsls	r2, r3, #2
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	4a2f      	ldr	r2, [pc, #188]	@ (8008b84 <HAL_DMA_DeInit+0x128>)
 8008ac6:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	2200      	movs	r2, #0
 8008ace:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ad4:	f003 021c 	and.w	r2, r3, #28
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008adc:	2101      	movs	r1, #1
 8008ade:	fa01 f202 	lsl.w	r2, r1, r2
 8008ae2:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8008ae4:	6878      	ldr	r0, [r7, #4]
 8008ae6:	f000 fa81 	bl	8008fec <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008aee:	2200      	movs	r2, #0
 8008af0:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008af6:	687a      	ldr	r2, [r7, #4]
 8008af8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8008afa:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	685b      	ldr	r3, [r3, #4]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d00f      	beq.n	8008b24 <HAL_DMA_DeInit+0xc8>
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	685b      	ldr	r3, [r3, #4]
 8008b08:	2b04      	cmp	r3, #4
 8008b0a:	d80b      	bhi.n	8008b24 <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8008b0c:	6878      	ldr	r0, [r7, #4]
 8008b0e:	f000 faab 	bl	8009068 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b16:	2200      	movs	r2, #0
 8008b18:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008b1e:	687a      	ldr	r2, [r7, #4]
 8008b20:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8008b22:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = 0U;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	2200      	movs	r2, #0
 8008b28:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatus = 0U;
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	2200      	movs	r2, #0
 8008b2e:	659a      	str	r2, [r3, #88]	@ 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	2200      	movs	r2, #0
 8008b34:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	2200      	movs	r2, #0
 8008b3a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	2200      	movs	r2, #0
 8008b40:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	2200      	movs	r2, #0
 8008b46:	635a      	str	r2, [r3, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	2200      	movs	r2, #0
 8008b52:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	2200      	movs	r2, #0
 8008b58:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	2200      	movs	r2, #0
 8008b60:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8008b64:	2300      	movs	r3, #0
}
 8008b66:	4618      	mov	r0, r3
 8008b68:	3708      	adds	r7, #8
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	bd80      	pop	{r7, pc}
 8008b6e:	bf00      	nop
 8008b70:	40020407 	.word	0x40020407
 8008b74:	bffdfff8 	.word	0xbffdfff8
 8008b78:	cccccccd 	.word	0xcccccccd
 8008b7c:	40020000 	.word	0x40020000
 8008b80:	bffdfbf8 	.word	0xbffdfbf8
 8008b84:	40020400 	.word	0x40020400

08008b88 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b086      	sub	sp, #24
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	60f8      	str	r0, [r7, #12]
 8008b90:	60b9      	str	r1, [r7, #8]
 8008b92:	607a      	str	r2, [r7, #4]
 8008b94:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008b96:	2300      	movs	r3, #0
 8008b98:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8008ba0:	2b01      	cmp	r3, #1
 8008ba2:	d101      	bne.n	8008ba8 <HAL_DMA_Start_IT+0x20>
 8008ba4:	2302      	movs	r3, #2
 8008ba6:	e066      	b.n	8008c76 <HAL_DMA_Start_IT+0xee>
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	2201      	movs	r2, #1
 8008bac:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8008bb6:	b2db      	uxtb	r3, r3
 8008bb8:	2b01      	cmp	r3, #1
 8008bba:	d155      	bne.n	8008c68 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	2202      	movs	r2, #2
 8008bc0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	2200      	movs	r2, #0
 8008bc8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	681a      	ldr	r2, [r3, #0]
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	f022 0201 	bic.w	r2, r2, #1
 8008bd8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8008bda:	683b      	ldr	r3, [r7, #0]
 8008bdc:	687a      	ldr	r2, [r7, #4]
 8008bde:	68b9      	ldr	r1, [r7, #8]
 8008be0:	68f8      	ldr	r0, [r7, #12]
 8008be2:	f000 f9c5 	bl	8008f70 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d008      	beq.n	8008c00 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	681a      	ldr	r2, [r3, #0]
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	f042 020e 	orr.w	r2, r2, #14
 8008bfc:	601a      	str	r2, [r3, #0]
 8008bfe:	e00f      	b.n	8008c20 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	681a      	ldr	r2, [r3, #0]
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	f022 0204 	bic.w	r2, r2, #4
 8008c0e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	681a      	ldr	r2, [r3, #0]
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	f042 020a 	orr.w	r2, r2, #10
 8008c1e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d007      	beq.n	8008c3e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008c32:	681a      	ldr	r2, [r3, #0]
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008c38:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008c3c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d007      	beq.n	8008c56 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c4a:	681a      	ldr	r2, [r3, #0]
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c50:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008c54:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	681a      	ldr	r2, [r3, #0]
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	f042 0201 	orr.w	r2, r2, #1
 8008c64:	601a      	str	r2, [r3, #0]
 8008c66:	e005      	b.n	8008c74 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8008c70:	2302      	movs	r3, #2
 8008c72:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8008c74:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c76:	4618      	mov	r0, r3
 8008c78:	3718      	adds	r7, #24
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	bd80      	pop	{r7, pc}

08008c7e <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8008c7e:	b480      	push	{r7}
 8008c80:	b083      	sub	sp, #12
 8008c82:	af00      	add	r7, sp, #0
 8008c84:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d101      	bne.n	8008c90 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8008c8c:	2301      	movs	r3, #1
 8008c8e:	e04f      	b.n	8008d30 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8008c96:	b2db      	uxtb	r3, r3
 8008c98:	2b02      	cmp	r3, #2
 8008c9a:	d008      	beq.n	8008cae <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	2204      	movs	r2, #4
 8008ca0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	2200      	movs	r2, #0
 8008ca6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8008caa:	2301      	movs	r3, #1
 8008cac:	e040      	b.n	8008d30 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	681a      	ldr	r2, [r3, #0]
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	f022 020e 	bic.w	r2, r2, #14
 8008cbc:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008cc2:	681a      	ldr	r2, [r3, #0]
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008cc8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008ccc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	681a      	ldr	r2, [r3, #0]
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	f022 0201 	bic.w	r2, r2, #1
 8008cdc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ce2:	f003 021c 	and.w	r2, r3, #28
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008cea:	2101      	movs	r1, #1
 8008cec:	fa01 f202 	lsl.w	r2, r1, r2
 8008cf0:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008cf6:	687a      	ldr	r2, [r7, #4]
 8008cf8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8008cfa:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d00c      	beq.n	8008d1e <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d08:	681a      	ldr	r2, [r3, #0]
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d0e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008d12:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d18:	687a      	ldr	r2, [r7, #4]
 8008d1a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8008d1c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	2201      	movs	r2, #1
 8008d22:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	2200      	movs	r2, #0
 8008d2a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return HAL_OK;
 8008d2e:	2300      	movs	r3, #0
}
 8008d30:	4618      	mov	r0, r3
 8008d32:	370c      	adds	r7, #12
 8008d34:	46bd      	mov	sp, r7
 8008d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3a:	4770      	bx	lr

08008d3c <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8008d3c:	b580      	push	{r7, lr}
 8008d3e:	b084      	sub	sp, #16
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008d44:	2300      	movs	r3, #0
 8008d46:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8008d4e:	b2db      	uxtb	r3, r3
 8008d50:	2b02      	cmp	r3, #2
 8008d52:	d005      	beq.n	8008d60 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	2204      	movs	r2, #4
 8008d58:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8008d5a:	2301      	movs	r3, #1
 8008d5c:	73fb      	strb	r3, [r7, #15]
 8008d5e:	e047      	b.n	8008df0 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	681a      	ldr	r2, [r3, #0]
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	f022 020e 	bic.w	r2, r2, #14
 8008d6e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	681a      	ldr	r2, [r3, #0]
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	f022 0201 	bic.w	r2, r2, #1
 8008d7e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008d84:	681a      	ldr	r2, [r3, #0]
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008d8a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008d8e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d94:	f003 021c 	and.w	r2, r3, #28
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d9c:	2101      	movs	r1, #1
 8008d9e:	fa01 f202 	lsl.w	r2, r1, r2
 8008da2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008da8:	687a      	ldr	r2, [r7, #4]
 8008daa:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8008dac:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d00c      	beq.n	8008dd0 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008dba:	681a      	ldr	r2, [r3, #0]
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008dc0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008dc4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008dca:	687a      	ldr	r2, [r7, #4]
 8008dcc:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8008dce:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	2201      	movs	r2, #1
 8008dd4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	2200      	movs	r2, #0
 8008ddc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d003      	beq.n	8008df0 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008dec:	6878      	ldr	r0, [r7, #4]
 8008dee:	4798      	blx	r3
    }
  }
  return status;
 8008df0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008df2:	4618      	mov	r0, r3
 8008df4:	3710      	adds	r7, #16
 8008df6:	46bd      	mov	sp, r7
 8008df8:	bd80      	pop	{r7, pc}

08008dfa <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008dfa:	b580      	push	{r7, lr}
 8008dfc:	b084      	sub	sp, #16
 8008dfe:	af00      	add	r7, sp, #0
 8008e00:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e16:	f003 031c 	and.w	r3, r3, #28
 8008e1a:	2204      	movs	r2, #4
 8008e1c:	409a      	lsls	r2, r3
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	4013      	ands	r3, r2
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d026      	beq.n	8008e74 <HAL_DMA_IRQHandler+0x7a>
 8008e26:	68bb      	ldr	r3, [r7, #8]
 8008e28:	f003 0304 	and.w	r3, r3, #4
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d021      	beq.n	8008e74 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	f003 0320 	and.w	r3, r3, #32
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d107      	bne.n	8008e4e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	681a      	ldr	r2, [r3, #0]
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	f022 0204 	bic.w	r2, r2, #4
 8008e4c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e52:	f003 021c 	and.w	r2, r3, #28
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e5a:	2104      	movs	r1, #4
 8008e5c:	fa01 f202 	lsl.w	r2, r1, r2
 8008e60:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d071      	beq.n	8008f4e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e6e:	6878      	ldr	r0, [r7, #4]
 8008e70:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8008e72:	e06c      	b.n	8008f4e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e78:	f003 031c 	and.w	r3, r3, #28
 8008e7c:	2202      	movs	r2, #2
 8008e7e:	409a      	lsls	r2, r3
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	4013      	ands	r3, r2
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d02e      	beq.n	8008ee6 <HAL_DMA_IRQHandler+0xec>
 8008e88:	68bb      	ldr	r3, [r7, #8]
 8008e8a:	f003 0302 	and.w	r3, r3, #2
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d029      	beq.n	8008ee6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	f003 0320 	and.w	r3, r3, #32
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d10b      	bne.n	8008eb8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	681a      	ldr	r2, [r3, #0]
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	f022 020a 	bic.w	r2, r2, #10
 8008eae:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	2201      	movs	r2, #1
 8008eb4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ebc:	f003 021c 	and.w	r2, r3, #28
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ec4:	2102      	movs	r1, #2
 8008ec6:	fa01 f202 	lsl.w	r2, r1, r2
 8008eca:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	2200      	movs	r2, #0
 8008ed0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d038      	beq.n	8008f4e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ee0:	6878      	ldr	r0, [r7, #4]
 8008ee2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8008ee4:	e033      	b.n	8008f4e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008eea:	f003 031c 	and.w	r3, r3, #28
 8008eee:	2208      	movs	r2, #8
 8008ef0:	409a      	lsls	r2, r3
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	4013      	ands	r3, r2
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d02a      	beq.n	8008f50 <HAL_DMA_IRQHandler+0x156>
 8008efa:	68bb      	ldr	r3, [r7, #8]
 8008efc:	f003 0308 	and.w	r3, r3, #8
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d025      	beq.n	8008f50 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	681a      	ldr	r2, [r3, #0]
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	f022 020e 	bic.w	r2, r2, #14
 8008f12:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f18:	f003 021c 	and.w	r2, r3, #28
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f20:	2101      	movs	r1, #1
 8008f22:	fa01 f202 	lsl.w	r2, r1, r2
 8008f26:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	2201      	movs	r2, #1
 8008f2c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	2201      	movs	r2, #1
 8008f32:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	2200      	movs	r2, #0
 8008f3a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d004      	beq.n	8008f50 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008f4a:	6878      	ldr	r0, [r7, #4]
 8008f4c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8008f4e:	bf00      	nop
 8008f50:	bf00      	nop
}
 8008f52:	3710      	adds	r7, #16
 8008f54:	46bd      	mov	sp, r7
 8008f56:	bd80      	pop	{r7, pc}

08008f58 <HAL_DMA_GetError>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8008f58:	b480      	push	{r7}
 8008f5a:	b083      	sub	sp, #12
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 8008f64:	4618      	mov	r0, r3
 8008f66:	370c      	adds	r7, #12
 8008f68:	46bd      	mov	sp, r7
 8008f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6e:	4770      	bx	lr

08008f70 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008f70:	b480      	push	{r7}
 8008f72:	b085      	sub	sp, #20
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	60f8      	str	r0, [r7, #12]
 8008f78:	60b9      	str	r1, [r7, #8]
 8008f7a:	607a      	str	r2, [r7, #4]
 8008f7c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008f82:	68fa      	ldr	r2, [r7, #12]
 8008f84:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8008f86:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d004      	beq.n	8008f9a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f94:	68fa      	ldr	r2, [r7, #12]
 8008f96:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8008f98:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f9e:	f003 021c 	and.w	r2, r3, #28
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008fa6:	2101      	movs	r1, #1
 8008fa8:	fa01 f202 	lsl.w	r2, r1, r2
 8008fac:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	683a      	ldr	r2, [r7, #0]
 8008fb4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	689b      	ldr	r3, [r3, #8]
 8008fba:	2b10      	cmp	r3, #16
 8008fbc:	d108      	bne.n	8008fd0 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	687a      	ldr	r2, [r7, #4]
 8008fc4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	68ba      	ldr	r2, [r7, #8]
 8008fcc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8008fce:	e007      	b.n	8008fe0 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	68ba      	ldr	r2, [r7, #8]
 8008fd6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	687a      	ldr	r2, [r7, #4]
 8008fde:	60da      	str	r2, [r3, #12]
}
 8008fe0:	bf00      	nop
 8008fe2:	3714      	adds	r7, #20
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fea:	4770      	bx	lr

08008fec <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008fec:	b480      	push	{r7}
 8008fee:	b085      	sub	sp, #20
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	461a      	mov	r2, r3
 8008ffa:	4b17      	ldr	r3, [pc, #92]	@ (8009058 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8008ffc:	429a      	cmp	r2, r3
 8008ffe:	d80a      	bhi.n	8009016 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009004:	089b      	lsrs	r3, r3, #2
 8009006:	009b      	lsls	r3, r3, #2
 8009008:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800900c:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8009010:	687a      	ldr	r2, [r7, #4]
 8009012:	6493      	str	r3, [r2, #72]	@ 0x48
 8009014:	e007      	b.n	8009026 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800901a:	089b      	lsrs	r3, r3, #2
 800901c:	009a      	lsls	r2, r3, #2
 800901e:	4b0f      	ldr	r3, [pc, #60]	@ (800905c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8009020:	4413      	add	r3, r2
 8009022:	687a      	ldr	r2, [r7, #4]
 8009024:	6493      	str	r3, [r2, #72]	@ 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	b2db      	uxtb	r3, r3
 800902c:	3b08      	subs	r3, #8
 800902e:	4a0c      	ldr	r2, [pc, #48]	@ (8009060 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8009030:	fba2 2303 	umull	r2, r3, r2, r3
 8009034:	091b      	lsrs	r3, r3, #4
 8009036:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	4a0a      	ldr	r2, [pc, #40]	@ (8009064 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800903c:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	f003 031f 	and.w	r3, r3, #31
 8009044:	2201      	movs	r2, #1
 8009046:	409a      	lsls	r2, r3
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800904c:	bf00      	nop
 800904e:	3714      	adds	r7, #20
 8009050:	46bd      	mov	sp, r7
 8009052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009056:	4770      	bx	lr
 8009058:	40020407 	.word	0x40020407
 800905c:	4002081c 	.word	0x4002081c
 8009060:	cccccccd 	.word	0xcccccccd
 8009064:	40020880 	.word	0x40020880

08009068 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009068:	b480      	push	{r7}
 800906a:	b085      	sub	sp, #20
 800906c:	af00      	add	r7, sp, #0
 800906e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	685b      	ldr	r3, [r3, #4]
 8009074:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009078:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800907a:	68fa      	ldr	r2, [r7, #12]
 800907c:	4b0b      	ldr	r3, [pc, #44]	@ (80090ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800907e:	4413      	add	r3, r2
 8009080:	009b      	lsls	r3, r3, #2
 8009082:	461a      	mov	r2, r3
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	4a09      	ldr	r2, [pc, #36]	@ (80090b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 800908c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	3b01      	subs	r3, #1
 8009092:	f003 0303 	and.w	r3, r3, #3
 8009096:	2201      	movs	r2, #1
 8009098:	409a      	lsls	r2, r3
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800909e:	bf00      	nop
 80090a0:	3714      	adds	r7, #20
 80090a2:	46bd      	mov	sp, r7
 80090a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a8:	4770      	bx	lr
 80090aa:	bf00      	nop
 80090ac:	1000823f 	.word	0x1000823f
 80090b0:	40020940 	.word	0x40020940

080090b4 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80090b4:	b480      	push	{r7}
 80090b6:	b087      	sub	sp, #28
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	6078      	str	r0, [r7, #4]
 80090bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80090be:	2300      	movs	r3, #0
 80090c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80090c2:	e14c      	b.n	800935e <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80090c4:	683b      	ldr	r3, [r7, #0]
 80090c6:	681a      	ldr	r2, [r3, #0]
 80090c8:	2101      	movs	r1, #1
 80090ca:	697b      	ldr	r3, [r7, #20]
 80090cc:	fa01 f303 	lsl.w	r3, r1, r3
 80090d0:	4013      	ands	r3, r2
 80090d2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	f000 813e 	beq.w	8009358 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80090dc:	683b      	ldr	r3, [r7, #0]
 80090de:	685b      	ldr	r3, [r3, #4]
 80090e0:	f003 0303 	and.w	r3, r3, #3
 80090e4:	2b01      	cmp	r3, #1
 80090e6:	d005      	beq.n	80090f4 <HAL_GPIO_Init+0x40>
 80090e8:	683b      	ldr	r3, [r7, #0]
 80090ea:	685b      	ldr	r3, [r3, #4]
 80090ec:	f003 0303 	and.w	r3, r3, #3
 80090f0:	2b02      	cmp	r3, #2
 80090f2:	d130      	bne.n	8009156 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	689b      	ldr	r3, [r3, #8]
 80090f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80090fa:	697b      	ldr	r3, [r7, #20]
 80090fc:	005b      	lsls	r3, r3, #1
 80090fe:	2203      	movs	r2, #3
 8009100:	fa02 f303 	lsl.w	r3, r2, r3
 8009104:	43db      	mvns	r3, r3
 8009106:	693a      	ldr	r2, [r7, #16]
 8009108:	4013      	ands	r3, r2
 800910a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800910c:	683b      	ldr	r3, [r7, #0]
 800910e:	68da      	ldr	r2, [r3, #12]
 8009110:	697b      	ldr	r3, [r7, #20]
 8009112:	005b      	lsls	r3, r3, #1
 8009114:	fa02 f303 	lsl.w	r3, r2, r3
 8009118:	693a      	ldr	r2, [r7, #16]
 800911a:	4313      	orrs	r3, r2
 800911c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	693a      	ldr	r2, [r7, #16]
 8009122:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	685b      	ldr	r3, [r3, #4]
 8009128:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800912a:	2201      	movs	r2, #1
 800912c:	697b      	ldr	r3, [r7, #20]
 800912e:	fa02 f303 	lsl.w	r3, r2, r3
 8009132:	43db      	mvns	r3, r3
 8009134:	693a      	ldr	r2, [r7, #16]
 8009136:	4013      	ands	r3, r2
 8009138:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800913a:	683b      	ldr	r3, [r7, #0]
 800913c:	685b      	ldr	r3, [r3, #4]
 800913e:	091b      	lsrs	r3, r3, #4
 8009140:	f003 0201 	and.w	r2, r3, #1
 8009144:	697b      	ldr	r3, [r7, #20]
 8009146:	fa02 f303 	lsl.w	r3, r2, r3
 800914a:	693a      	ldr	r2, [r7, #16]
 800914c:	4313      	orrs	r3, r2
 800914e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	693a      	ldr	r2, [r7, #16]
 8009154:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009156:	683b      	ldr	r3, [r7, #0]
 8009158:	685b      	ldr	r3, [r3, #4]
 800915a:	f003 0303 	and.w	r3, r3, #3
 800915e:	2b03      	cmp	r3, #3
 8009160:	d017      	beq.n	8009192 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	68db      	ldr	r3, [r3, #12]
 8009166:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8009168:	697b      	ldr	r3, [r7, #20]
 800916a:	005b      	lsls	r3, r3, #1
 800916c:	2203      	movs	r2, #3
 800916e:	fa02 f303 	lsl.w	r3, r2, r3
 8009172:	43db      	mvns	r3, r3
 8009174:	693a      	ldr	r2, [r7, #16]
 8009176:	4013      	ands	r3, r2
 8009178:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800917a:	683b      	ldr	r3, [r7, #0]
 800917c:	689a      	ldr	r2, [r3, #8]
 800917e:	697b      	ldr	r3, [r7, #20]
 8009180:	005b      	lsls	r3, r3, #1
 8009182:	fa02 f303 	lsl.w	r3, r2, r3
 8009186:	693a      	ldr	r2, [r7, #16]
 8009188:	4313      	orrs	r3, r2
 800918a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	693a      	ldr	r2, [r7, #16]
 8009190:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009192:	683b      	ldr	r3, [r7, #0]
 8009194:	685b      	ldr	r3, [r3, #4]
 8009196:	f003 0303 	and.w	r3, r3, #3
 800919a:	2b02      	cmp	r3, #2
 800919c:	d123      	bne.n	80091e6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800919e:	697b      	ldr	r3, [r7, #20]
 80091a0:	08da      	lsrs	r2, r3, #3
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	3208      	adds	r2, #8
 80091a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091aa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80091ac:	697b      	ldr	r3, [r7, #20]
 80091ae:	f003 0307 	and.w	r3, r3, #7
 80091b2:	009b      	lsls	r3, r3, #2
 80091b4:	220f      	movs	r2, #15
 80091b6:	fa02 f303 	lsl.w	r3, r2, r3
 80091ba:	43db      	mvns	r3, r3
 80091bc:	693a      	ldr	r2, [r7, #16]
 80091be:	4013      	ands	r3, r2
 80091c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80091c2:	683b      	ldr	r3, [r7, #0]
 80091c4:	691a      	ldr	r2, [r3, #16]
 80091c6:	697b      	ldr	r3, [r7, #20]
 80091c8:	f003 0307 	and.w	r3, r3, #7
 80091cc:	009b      	lsls	r3, r3, #2
 80091ce:	fa02 f303 	lsl.w	r3, r2, r3
 80091d2:	693a      	ldr	r2, [r7, #16]
 80091d4:	4313      	orrs	r3, r2
 80091d6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80091d8:	697b      	ldr	r3, [r7, #20]
 80091da:	08da      	lsrs	r2, r3, #3
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	3208      	adds	r2, #8
 80091e0:	6939      	ldr	r1, [r7, #16]
 80091e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80091ec:	697b      	ldr	r3, [r7, #20]
 80091ee:	005b      	lsls	r3, r3, #1
 80091f0:	2203      	movs	r2, #3
 80091f2:	fa02 f303 	lsl.w	r3, r2, r3
 80091f6:	43db      	mvns	r3, r3
 80091f8:	693a      	ldr	r2, [r7, #16]
 80091fa:	4013      	ands	r3, r2
 80091fc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80091fe:	683b      	ldr	r3, [r7, #0]
 8009200:	685b      	ldr	r3, [r3, #4]
 8009202:	f003 0203 	and.w	r2, r3, #3
 8009206:	697b      	ldr	r3, [r7, #20]
 8009208:	005b      	lsls	r3, r3, #1
 800920a:	fa02 f303 	lsl.w	r3, r2, r3
 800920e:	693a      	ldr	r2, [r7, #16]
 8009210:	4313      	orrs	r3, r2
 8009212:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	693a      	ldr	r2, [r7, #16]
 8009218:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800921a:	683b      	ldr	r3, [r7, #0]
 800921c:	685b      	ldr	r3, [r3, #4]
 800921e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8009222:	2b00      	cmp	r3, #0
 8009224:	f000 8098 	beq.w	8009358 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8009228:	4a54      	ldr	r2, [pc, #336]	@ (800937c <HAL_GPIO_Init+0x2c8>)
 800922a:	697b      	ldr	r3, [r7, #20]
 800922c:	089b      	lsrs	r3, r3, #2
 800922e:	3302      	adds	r3, #2
 8009230:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009234:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8009236:	697b      	ldr	r3, [r7, #20]
 8009238:	f003 0303 	and.w	r3, r3, #3
 800923c:	009b      	lsls	r3, r3, #2
 800923e:	220f      	movs	r2, #15
 8009240:	fa02 f303 	lsl.w	r3, r2, r3
 8009244:	43db      	mvns	r3, r3
 8009246:	693a      	ldr	r2, [r7, #16]
 8009248:	4013      	ands	r3, r2
 800924a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8009252:	d019      	beq.n	8009288 <HAL_GPIO_Init+0x1d4>
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	4a4a      	ldr	r2, [pc, #296]	@ (8009380 <HAL_GPIO_Init+0x2cc>)
 8009258:	4293      	cmp	r3, r2
 800925a:	d013      	beq.n	8009284 <HAL_GPIO_Init+0x1d0>
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	4a49      	ldr	r2, [pc, #292]	@ (8009384 <HAL_GPIO_Init+0x2d0>)
 8009260:	4293      	cmp	r3, r2
 8009262:	d00d      	beq.n	8009280 <HAL_GPIO_Init+0x1cc>
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	4a48      	ldr	r2, [pc, #288]	@ (8009388 <HAL_GPIO_Init+0x2d4>)
 8009268:	4293      	cmp	r3, r2
 800926a:	d007      	beq.n	800927c <HAL_GPIO_Init+0x1c8>
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	4a47      	ldr	r2, [pc, #284]	@ (800938c <HAL_GPIO_Init+0x2d8>)
 8009270:	4293      	cmp	r3, r2
 8009272:	d101      	bne.n	8009278 <HAL_GPIO_Init+0x1c4>
 8009274:	2304      	movs	r3, #4
 8009276:	e008      	b.n	800928a <HAL_GPIO_Init+0x1d6>
 8009278:	2307      	movs	r3, #7
 800927a:	e006      	b.n	800928a <HAL_GPIO_Init+0x1d6>
 800927c:	2303      	movs	r3, #3
 800927e:	e004      	b.n	800928a <HAL_GPIO_Init+0x1d6>
 8009280:	2302      	movs	r3, #2
 8009282:	e002      	b.n	800928a <HAL_GPIO_Init+0x1d6>
 8009284:	2301      	movs	r3, #1
 8009286:	e000      	b.n	800928a <HAL_GPIO_Init+0x1d6>
 8009288:	2300      	movs	r3, #0
 800928a:	697a      	ldr	r2, [r7, #20]
 800928c:	f002 0203 	and.w	r2, r2, #3
 8009290:	0092      	lsls	r2, r2, #2
 8009292:	4093      	lsls	r3, r2
 8009294:	693a      	ldr	r2, [r7, #16]
 8009296:	4313      	orrs	r3, r2
 8009298:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800929a:	4938      	ldr	r1, [pc, #224]	@ (800937c <HAL_GPIO_Init+0x2c8>)
 800929c:	697b      	ldr	r3, [r7, #20]
 800929e:	089b      	lsrs	r3, r3, #2
 80092a0:	3302      	adds	r3, #2
 80092a2:	693a      	ldr	r2, [r7, #16]
 80092a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80092a8:	4b39      	ldr	r3, [pc, #228]	@ (8009390 <HAL_GPIO_Init+0x2dc>)
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	43db      	mvns	r3, r3
 80092b2:	693a      	ldr	r2, [r7, #16]
 80092b4:	4013      	ands	r3, r2
 80092b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80092b8:	683b      	ldr	r3, [r7, #0]
 80092ba:	685b      	ldr	r3, [r3, #4]
 80092bc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d003      	beq.n	80092cc <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80092c4:	693a      	ldr	r2, [r7, #16]
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	4313      	orrs	r3, r2
 80092ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80092cc:	4a30      	ldr	r2, [pc, #192]	@ (8009390 <HAL_GPIO_Init+0x2dc>)
 80092ce:	693b      	ldr	r3, [r7, #16]
 80092d0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80092d2:	4b2f      	ldr	r3, [pc, #188]	@ (8009390 <HAL_GPIO_Init+0x2dc>)
 80092d4:	685b      	ldr	r3, [r3, #4]
 80092d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	43db      	mvns	r3, r3
 80092dc:	693a      	ldr	r2, [r7, #16]
 80092de:	4013      	ands	r3, r2
 80092e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80092e2:	683b      	ldr	r3, [r7, #0]
 80092e4:	685b      	ldr	r3, [r3, #4]
 80092e6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d003      	beq.n	80092f6 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80092ee:	693a      	ldr	r2, [r7, #16]
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	4313      	orrs	r3, r2
 80092f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80092f6:	4a26      	ldr	r2, [pc, #152]	@ (8009390 <HAL_GPIO_Init+0x2dc>)
 80092f8:	693b      	ldr	r3, [r7, #16]
 80092fa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80092fc:	4b24      	ldr	r3, [pc, #144]	@ (8009390 <HAL_GPIO_Init+0x2dc>)
 80092fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009302:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	43db      	mvns	r3, r3
 8009308:	693a      	ldr	r2, [r7, #16]
 800930a:	4013      	ands	r3, r2
 800930c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800930e:	683b      	ldr	r3, [r7, #0]
 8009310:	685b      	ldr	r3, [r3, #4]
 8009312:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009316:	2b00      	cmp	r3, #0
 8009318:	d003      	beq.n	8009322 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 800931a:	693a      	ldr	r2, [r7, #16]
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	4313      	orrs	r3, r2
 8009320:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8009322:	4a1b      	ldr	r2, [pc, #108]	@ (8009390 <HAL_GPIO_Init+0x2dc>)
 8009324:	693b      	ldr	r3, [r7, #16]
 8009326:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 800932a:	4b19      	ldr	r3, [pc, #100]	@ (8009390 <HAL_GPIO_Init+0x2dc>)
 800932c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009330:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	43db      	mvns	r3, r3
 8009336:	693a      	ldr	r2, [r7, #16]
 8009338:	4013      	ands	r3, r2
 800933a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800933c:	683b      	ldr	r3, [r7, #0]
 800933e:	685b      	ldr	r3, [r3, #4]
 8009340:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009344:	2b00      	cmp	r3, #0
 8009346:	d003      	beq.n	8009350 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8009348:	693a      	ldr	r2, [r7, #16]
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	4313      	orrs	r3, r2
 800934e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8009350:	4a0f      	ldr	r2, [pc, #60]	@ (8009390 <HAL_GPIO_Init+0x2dc>)
 8009352:	693b      	ldr	r3, [r7, #16]
 8009354:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 8009358:	697b      	ldr	r3, [r7, #20]
 800935a:	3301      	adds	r3, #1
 800935c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800935e:	683b      	ldr	r3, [r7, #0]
 8009360:	681a      	ldr	r2, [r3, #0]
 8009362:	697b      	ldr	r3, [r7, #20]
 8009364:	fa22 f303 	lsr.w	r3, r2, r3
 8009368:	2b00      	cmp	r3, #0
 800936a:	f47f aeab 	bne.w	80090c4 <HAL_GPIO_Init+0x10>
  }
}
 800936e:	bf00      	nop
 8009370:	bf00      	nop
 8009372:	371c      	adds	r7, #28
 8009374:	46bd      	mov	sp, r7
 8009376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937a:	4770      	bx	lr
 800937c:	40010000 	.word	0x40010000
 8009380:	48000400 	.word	0x48000400
 8009384:	48000800 	.word	0x48000800
 8009388:	48000c00 	.word	0x48000c00
 800938c:	48001000 	.word	0x48001000
 8009390:	58000800 	.word	0x58000800

08009394 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8009394:	b480      	push	{r7}
 8009396:	b087      	sub	sp, #28
 8009398:	af00      	add	r7, sp, #0
 800939a:	6078      	str	r0, [r7, #4]
 800939c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800939e:	2300      	movs	r3, #0
 80093a0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80093a2:	e0bb      	b.n	800951c <HAL_GPIO_DeInit+0x188>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80093a4:	2201      	movs	r2, #1
 80093a6:	697b      	ldr	r3, [r7, #20]
 80093a8:	fa02 f303 	lsl.w	r3, r2, r3
 80093ac:	683a      	ldr	r2, [r7, #0]
 80093ae:	4013      	ands	r3, r2
 80093b0:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80093b2:	693b      	ldr	r3, [r7, #16]
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	f000 80ae 	beq.w	8009516 <HAL_GPIO_DeInit+0x182>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80093ba:	4a5f      	ldr	r2, [pc, #380]	@ (8009538 <HAL_GPIO_DeInit+0x1a4>)
 80093bc:	697b      	ldr	r3, [r7, #20]
 80093be:	089b      	lsrs	r3, r3, #2
 80093c0:	3302      	adds	r3, #2
 80093c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80093c6:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FUL << (4u * (position & 0x03u)));
 80093c8:	697b      	ldr	r3, [r7, #20]
 80093ca:	f003 0303 	and.w	r3, r3, #3
 80093ce:	009b      	lsls	r3, r3, #2
 80093d0:	220f      	movs	r2, #15
 80093d2:	fa02 f303 	lsl.w	r3, r2, r3
 80093d6:	68fa      	ldr	r2, [r7, #12]
 80093d8:	4013      	ands	r3, r2
 80093da:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80093e2:	d019      	beq.n	8009418 <HAL_GPIO_DeInit+0x84>
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	4a55      	ldr	r2, [pc, #340]	@ (800953c <HAL_GPIO_DeInit+0x1a8>)
 80093e8:	4293      	cmp	r3, r2
 80093ea:	d013      	beq.n	8009414 <HAL_GPIO_DeInit+0x80>
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	4a54      	ldr	r2, [pc, #336]	@ (8009540 <HAL_GPIO_DeInit+0x1ac>)
 80093f0:	4293      	cmp	r3, r2
 80093f2:	d00d      	beq.n	8009410 <HAL_GPIO_DeInit+0x7c>
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	4a53      	ldr	r2, [pc, #332]	@ (8009544 <HAL_GPIO_DeInit+0x1b0>)
 80093f8:	4293      	cmp	r3, r2
 80093fa:	d007      	beq.n	800940c <HAL_GPIO_DeInit+0x78>
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	4a52      	ldr	r2, [pc, #328]	@ (8009548 <HAL_GPIO_DeInit+0x1b4>)
 8009400:	4293      	cmp	r3, r2
 8009402:	d101      	bne.n	8009408 <HAL_GPIO_DeInit+0x74>
 8009404:	2304      	movs	r3, #4
 8009406:	e008      	b.n	800941a <HAL_GPIO_DeInit+0x86>
 8009408:	2307      	movs	r3, #7
 800940a:	e006      	b.n	800941a <HAL_GPIO_DeInit+0x86>
 800940c:	2303      	movs	r3, #3
 800940e:	e004      	b.n	800941a <HAL_GPIO_DeInit+0x86>
 8009410:	2302      	movs	r3, #2
 8009412:	e002      	b.n	800941a <HAL_GPIO_DeInit+0x86>
 8009414:	2301      	movs	r3, #1
 8009416:	e000      	b.n	800941a <HAL_GPIO_DeInit+0x86>
 8009418:	2300      	movs	r3, #0
 800941a:	697a      	ldr	r2, [r7, #20]
 800941c:	f002 0203 	and.w	r2, r2, #3
 8009420:	0092      	lsls	r2, r2, #2
 8009422:	4093      	lsls	r3, r2
 8009424:	68fa      	ldr	r2, [r7, #12]
 8009426:	429a      	cmp	r2, r3
 8009428:	d136      	bne.n	8009498 <HAL_GPIO_DeInit+0x104>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800942a:	4b48      	ldr	r3, [pc, #288]	@ (800954c <HAL_GPIO_DeInit+0x1b8>)
 800942c:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8009430:	693b      	ldr	r3, [r7, #16]
 8009432:	43db      	mvns	r3, r3
 8009434:	4945      	ldr	r1, [pc, #276]	@ (800954c <HAL_GPIO_DeInit+0x1b8>)
 8009436:	4013      	ands	r3, r2
 8009438:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
        EXTI->EMR1 &= ~(iocurrent);
 800943c:	4b43      	ldr	r3, [pc, #268]	@ (800954c <HAL_GPIO_DeInit+0x1b8>)
 800943e:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8009442:	693b      	ldr	r3, [r7, #16]
 8009444:	43db      	mvns	r3, r3
 8009446:	4941      	ldr	r1, [pc, #260]	@ (800954c <HAL_GPIO_DeInit+0x1b8>)
 8009448:	4013      	ands	r3, r2
 800944a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 800944e:	4b3f      	ldr	r3, [pc, #252]	@ (800954c <HAL_GPIO_DeInit+0x1b8>)
 8009450:	681a      	ldr	r2, [r3, #0]
 8009452:	693b      	ldr	r3, [r7, #16]
 8009454:	43db      	mvns	r3, r3
 8009456:	493d      	ldr	r1, [pc, #244]	@ (800954c <HAL_GPIO_DeInit+0x1b8>)
 8009458:	4013      	ands	r3, r2
 800945a:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 800945c:	4b3b      	ldr	r3, [pc, #236]	@ (800954c <HAL_GPIO_DeInit+0x1b8>)
 800945e:	685a      	ldr	r2, [r3, #4]
 8009460:	693b      	ldr	r3, [r7, #16]
 8009462:	43db      	mvns	r3, r3
 8009464:	4939      	ldr	r1, [pc, #228]	@ (800954c <HAL_GPIO_DeInit+0x1b8>)
 8009466:	4013      	ands	r3, r2
 8009468:	604b      	str	r3, [r1, #4]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 800946a:	697b      	ldr	r3, [r7, #20]
 800946c:	f003 0303 	and.w	r3, r3, #3
 8009470:	009b      	lsls	r3, r3, #2
 8009472:	220f      	movs	r2, #15
 8009474:	fa02 f303 	lsl.w	r3, r2, r3
 8009478:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800947a:	4a2f      	ldr	r2, [pc, #188]	@ (8009538 <HAL_GPIO_DeInit+0x1a4>)
 800947c:	697b      	ldr	r3, [r7, #20]
 800947e:	089b      	lsrs	r3, r3, #2
 8009480:	3302      	adds	r3, #2
 8009482:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	43da      	mvns	r2, r3
 800948a:	482b      	ldr	r0, [pc, #172]	@ (8009538 <HAL_GPIO_DeInit+0x1a4>)
 800948c:	697b      	ldr	r3, [r7, #20]
 800948e:	089b      	lsrs	r3, r3, #2
 8009490:	400a      	ands	r2, r1
 8009492:	3302      	adds	r3, #2
 8009494:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681a      	ldr	r2, [r3, #0]
 800949c:	697b      	ldr	r3, [r7, #20]
 800949e:	005b      	lsls	r3, r3, #1
 80094a0:	2103      	movs	r1, #3
 80094a2:	fa01 f303 	lsl.w	r3, r1, r3
 80094a6:	431a      	orrs	r2, r3
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80094ac:	697b      	ldr	r3, [r7, #20]
 80094ae:	08da      	lsrs	r2, r3, #3
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	3208      	adds	r2, #8
 80094b4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80094b8:	697b      	ldr	r3, [r7, #20]
 80094ba:	f003 0307 	and.w	r3, r3, #7
 80094be:	009b      	lsls	r3, r3, #2
 80094c0:	220f      	movs	r2, #15
 80094c2:	fa02 f303 	lsl.w	r3, r2, r3
 80094c6:	43db      	mvns	r3, r3
 80094c8:	697a      	ldr	r2, [r7, #20]
 80094ca:	08d2      	lsrs	r2, r2, #3
 80094cc:	4019      	ands	r1, r3
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	3208      	adds	r2, #8
 80094d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	68da      	ldr	r2, [r3, #12]
 80094da:	697b      	ldr	r3, [r7, #20]
 80094dc:	005b      	lsls	r3, r3, #1
 80094de:	2103      	movs	r1, #3
 80094e0:	fa01 f303 	lsl.w	r3, r1, r3
 80094e4:	43db      	mvns	r3, r3
 80094e6:	401a      	ands	r2, r3
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	685a      	ldr	r2, [r3, #4]
 80094f0:	2101      	movs	r1, #1
 80094f2:	697b      	ldr	r3, [r7, #20]
 80094f4:	fa01 f303 	lsl.w	r3, r1, r3
 80094f8:	43db      	mvns	r3, r3
 80094fa:	401a      	ands	r2, r3
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	689a      	ldr	r2, [r3, #8]
 8009504:	697b      	ldr	r3, [r7, #20]
 8009506:	005b      	lsls	r3, r3, #1
 8009508:	2103      	movs	r1, #3
 800950a:	fa01 f303 	lsl.w	r3, r1, r3
 800950e:	43db      	mvns	r3, r3
 8009510:	401a      	ands	r2, r3
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	609a      	str	r2, [r3, #8]
    }

    position++;
 8009516:	697b      	ldr	r3, [r7, #20]
 8009518:	3301      	adds	r3, #1
 800951a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 800951c:	683a      	ldr	r2, [r7, #0]
 800951e:	697b      	ldr	r3, [r7, #20]
 8009520:	fa22 f303 	lsr.w	r3, r2, r3
 8009524:	2b00      	cmp	r3, #0
 8009526:	f47f af3d 	bne.w	80093a4 <HAL_GPIO_DeInit+0x10>
  }
}
 800952a:	bf00      	nop
 800952c:	bf00      	nop
 800952e:	371c      	adds	r7, #28
 8009530:	46bd      	mov	sp, r7
 8009532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009536:	4770      	bx	lr
 8009538:	40010000 	.word	0x40010000
 800953c:	48000400 	.word	0x48000400
 8009540:	48000800 	.word	0x48000800
 8009544:	48000c00 	.word	0x48000c00
 8009548:	48001000 	.word	0x48001000
 800954c:	58000800 	.word	0x58000800

08009550 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009550:	b480      	push	{r7}
 8009552:	b085      	sub	sp, #20
 8009554:	af00      	add	r7, sp, #0
 8009556:	6078      	str	r0, [r7, #4]
 8009558:	460b      	mov	r3, r1
 800955a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	691a      	ldr	r2, [r3, #16]
 8009560:	887b      	ldrh	r3, [r7, #2]
 8009562:	4013      	ands	r3, r2
 8009564:	2b00      	cmp	r3, #0
 8009566:	d002      	beq.n	800956e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009568:	2301      	movs	r3, #1
 800956a:	73fb      	strb	r3, [r7, #15]
 800956c:	e001      	b.n	8009572 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800956e:	2300      	movs	r3, #0
 8009570:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8009572:	7bfb      	ldrb	r3, [r7, #15]
}
 8009574:	4618      	mov	r0, r3
 8009576:	3714      	adds	r7, #20
 8009578:	46bd      	mov	sp, r7
 800957a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800957e:	4770      	bx	lr

08009580 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009580:	b480      	push	{r7}
 8009582:	b083      	sub	sp, #12
 8009584:	af00      	add	r7, sp, #0
 8009586:	6078      	str	r0, [r7, #4]
 8009588:	460b      	mov	r3, r1
 800958a:	807b      	strh	r3, [r7, #2]
 800958c:	4613      	mov	r3, r2
 800958e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009590:	787b      	ldrb	r3, [r7, #1]
 8009592:	2b00      	cmp	r3, #0
 8009594:	d003      	beq.n	800959e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8009596:	887a      	ldrh	r2, [r7, #2]
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800959c:	e002      	b.n	80095a4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800959e:	887a      	ldrh	r2, [r7, #2]
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80095a4:	bf00      	nop
 80095a6:	370c      	adds	r7, #12
 80095a8:	46bd      	mov	sp, r7
 80095aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ae:	4770      	bx	lr

080095b0 <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80095b0:	b480      	push	{r7}
 80095b2:	b085      	sub	sp, #20
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	6078      	str	r0, [r7, #4]
 80095b8:	460b      	mov	r3, r1
 80095ba:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	695b      	ldr	r3, [r3, #20]
 80095c0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80095c2:	887a      	ldrh	r2, [r7, #2]
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	4013      	ands	r3, r2
 80095c8:	041a      	lsls	r2, r3, #16
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	43d9      	mvns	r1, r3
 80095ce:	887b      	ldrh	r3, [r7, #2]
 80095d0:	400b      	ands	r3, r1
 80095d2:	431a      	orrs	r2, r3
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	619a      	str	r2, [r3, #24]
}
 80095d8:	bf00      	nop
 80095da:	3714      	adds	r7, #20
 80095dc:	46bd      	mov	sp, r7
 80095de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e2:	4770      	bx	lr

080095e4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80095e4:	b580      	push	{r7, lr}
 80095e6:	b082      	sub	sp, #8
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	4603      	mov	r3, r0
 80095ec:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80095ee:	4b08      	ldr	r3, [pc, #32]	@ (8009610 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80095f0:	68da      	ldr	r2, [r3, #12]
 80095f2:	88fb      	ldrh	r3, [r7, #6]
 80095f4:	4013      	ands	r3, r2
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d006      	beq.n	8009608 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80095fa:	4a05      	ldr	r2, [pc, #20]	@ (8009610 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80095fc:	88fb      	ldrh	r3, [r7, #6]
 80095fe:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8009600:	88fb      	ldrh	r3, [r7, #6]
 8009602:	4618      	mov	r0, r3
 8009604:	f7f9 f996 	bl	8002934 <HAL_GPIO_EXTI_Callback>
  }
}
 8009608:	bf00      	nop
 800960a:	3708      	adds	r7, #8
 800960c:	46bd      	mov	sp, r7
 800960e:	bd80      	pop	{r7, pc}
 8009610:	58000800 	.word	0x58000800

08009614 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8009614:	b580      	push	{r7, lr}
 8009616:	b082      	sub	sp, #8
 8009618:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 800961a:	4b0a      	ldr	r3, [pc, #40]	@ (8009644 <HAL_HSEM_IRQHandler+0x30>)
 800961c:	68db      	ldr	r3, [r3, #12]
 800961e:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8009620:	4b08      	ldr	r3, [pc, #32]	@ (8009644 <HAL_HSEM_IRQHandler+0x30>)
 8009622:	681a      	ldr	r2, [r3, #0]
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	43db      	mvns	r3, r3
 8009628:	4906      	ldr	r1, [pc, #24]	@ (8009644 <HAL_HSEM_IRQHandler+0x30>)
 800962a:	4013      	ands	r3, r2
 800962c:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 800962e:	4a05      	ldr	r2, [pc, #20]	@ (8009644 <HAL_HSEM_IRQHandler+0x30>)
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8009634:	6878      	ldr	r0, [r7, #4]
 8009636:	f000 f807 	bl	8009648 <HAL_HSEM_FreeCallback>
}
 800963a:	bf00      	nop
 800963c:	3708      	adds	r7, #8
 800963e:	46bd      	mov	sp, r7
 8009640:	bd80      	pop	{r7, pc}
 8009642:	bf00      	nop
 8009644:	58001500 	.word	0x58001500

08009648 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8009648:	b480      	push	{r7}
 800964a:	b083      	sub	sp, #12
 800964c:	af00      	add	r7, sp, #0
 800964e:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8009650:	bf00      	nop
 8009652:	370c      	adds	r7, #12
 8009654:	46bd      	mov	sp, r7
 8009656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800965a:	4770      	bx	lr

0800965c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800965c:	b580      	push	{r7, lr}
 800965e:	b082      	sub	sp, #8
 8009660:	af00      	add	r7, sp, #0
 8009662:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	2b00      	cmp	r3, #0
 8009668:	d101      	bne.n	800966e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800966a:	2301      	movs	r3, #1
 800966c:	e08d      	b.n	800978a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009674:	b2db      	uxtb	r3, r3
 8009676:	2b00      	cmp	r3, #0
 8009678:	d106      	bne.n	8009688 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	2200      	movs	r2, #0
 800967e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8009682:	6878      	ldr	r0, [r7, #4]
 8009684:	f7f9 f82e 	bl	80026e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	2224      	movs	r2, #36	@ 0x24
 800968c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	681a      	ldr	r2, [r3, #0]
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	f022 0201 	bic.w	r2, r2, #1
 800969e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	685a      	ldr	r2, [r3, #4]
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80096ac:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	689a      	ldr	r2, [r3, #8]
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80096bc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	68db      	ldr	r3, [r3, #12]
 80096c2:	2b01      	cmp	r3, #1
 80096c4:	d107      	bne.n	80096d6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	689a      	ldr	r2, [r3, #8]
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80096d2:	609a      	str	r2, [r3, #8]
 80096d4:	e006      	b.n	80096e4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	689a      	ldr	r2, [r3, #8]
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80096e2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	68db      	ldr	r3, [r3, #12]
 80096e8:	2b02      	cmp	r3, #2
 80096ea:	d108      	bne.n	80096fe <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	685a      	ldr	r2, [r3, #4]
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80096fa:	605a      	str	r2, [r3, #4]
 80096fc:	e007      	b.n	800970e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	685a      	ldr	r2, [r3, #4]
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800970c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	685b      	ldr	r3, [r3, #4]
 8009714:	687a      	ldr	r2, [r7, #4]
 8009716:	6812      	ldr	r2, [r2, #0]
 8009718:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800971c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009720:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	68da      	ldr	r2, [r3, #12]
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009730:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	691a      	ldr	r2, [r3, #16]
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	695b      	ldr	r3, [r3, #20]
 800973a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	699b      	ldr	r3, [r3, #24]
 8009742:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	430a      	orrs	r2, r1
 800974a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	69d9      	ldr	r1, [r3, #28]
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	6a1a      	ldr	r2, [r3, #32]
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	430a      	orrs	r2, r1
 800975a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	681a      	ldr	r2, [r3, #0]
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	f042 0201 	orr.w	r2, r2, #1
 800976a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	2200      	movs	r2, #0
 8009770:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	2220      	movs	r2, #32
 8009776:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	2200      	movs	r2, #0
 800977e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	2200      	movs	r2, #0
 8009784:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8009788:	2300      	movs	r3, #0
}
 800978a:	4618      	mov	r0, r3
 800978c:	3708      	adds	r7, #8
 800978e:	46bd      	mov	sp, r7
 8009790:	bd80      	pop	{r7, pc}

08009792 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8009792:	b580      	push	{r7, lr}
 8009794:	b082      	sub	sp, #8
 8009796:	af00      	add	r7, sp, #0
 8009798:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	2b00      	cmp	r3, #0
 800979e:	d101      	bne.n	80097a4 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80097a0:	2301      	movs	r3, #1
 80097a2:	e021      	b.n	80097e8 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	2224      	movs	r2, #36	@ 0x24
 80097a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	681a      	ldr	r2, [r3, #0]
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	f022 0201 	bic.w	r2, r2, #1
 80097ba:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80097bc:	6878      	ldr	r0, [r7, #4]
 80097be:	f7f9 f81b 	bl	80027f8 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	2200      	movs	r2, #0
 80097c6:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	2200      	movs	r2, #0
 80097cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	2200      	movs	r2, #0
 80097d4:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	2200      	movs	r2, #0
 80097da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	2200      	movs	r2, #0
 80097e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80097e6:	2300      	movs	r3, #0
}
 80097e8:	4618      	mov	r0, r3
 80097ea:	3708      	adds	r7, #8
 80097ec:	46bd      	mov	sp, r7
 80097ee:	bd80      	pop	{r7, pc}

080097f0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80097f0:	b580      	push	{r7, lr}
 80097f2:	b088      	sub	sp, #32
 80097f4:	af02      	add	r7, sp, #8
 80097f6:	60f8      	str	r0, [r7, #12]
 80097f8:	4608      	mov	r0, r1
 80097fa:	4611      	mov	r1, r2
 80097fc:	461a      	mov	r2, r3
 80097fe:	4603      	mov	r3, r0
 8009800:	817b      	strh	r3, [r7, #10]
 8009802:	460b      	mov	r3, r1
 8009804:	813b      	strh	r3, [r7, #8]
 8009806:	4613      	mov	r3, r2
 8009808:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009810:	b2db      	uxtb	r3, r3
 8009812:	2b20      	cmp	r3, #32
 8009814:	f040 80f9 	bne.w	8009a0a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009818:	6a3b      	ldr	r3, [r7, #32]
 800981a:	2b00      	cmp	r3, #0
 800981c:	d002      	beq.n	8009824 <HAL_I2C_Mem_Write+0x34>
 800981e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009820:	2b00      	cmp	r3, #0
 8009822:	d105      	bne.n	8009830 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800982a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800982c:	2301      	movs	r3, #1
 800982e:	e0ed      	b.n	8009a0c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009836:	2b01      	cmp	r3, #1
 8009838:	d101      	bne.n	800983e <HAL_I2C_Mem_Write+0x4e>
 800983a:	2302      	movs	r3, #2
 800983c:	e0e6      	b.n	8009a0c <HAL_I2C_Mem_Write+0x21c>
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	2201      	movs	r2, #1
 8009842:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009846:	f7fd fe23 	bl	8007490 <HAL_GetTick>
 800984a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800984c:	697b      	ldr	r3, [r7, #20]
 800984e:	9300      	str	r3, [sp, #0]
 8009850:	2319      	movs	r3, #25
 8009852:	2201      	movs	r2, #1
 8009854:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8009858:	68f8      	ldr	r0, [r7, #12]
 800985a:	f000 f955 	bl	8009b08 <I2C_WaitOnFlagUntilTimeout>
 800985e:	4603      	mov	r3, r0
 8009860:	2b00      	cmp	r3, #0
 8009862:	d001      	beq.n	8009868 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8009864:	2301      	movs	r3, #1
 8009866:	e0d1      	b.n	8009a0c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	2221      	movs	r2, #33	@ 0x21
 800986c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	2240      	movs	r2, #64	@ 0x40
 8009874:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	2200      	movs	r2, #0
 800987c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	6a3a      	ldr	r2, [r7, #32]
 8009882:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8009888:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	2200      	movs	r2, #0
 800988e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009890:	88f8      	ldrh	r0, [r7, #6]
 8009892:	893a      	ldrh	r2, [r7, #8]
 8009894:	8979      	ldrh	r1, [r7, #10]
 8009896:	697b      	ldr	r3, [r7, #20]
 8009898:	9301      	str	r3, [sp, #4]
 800989a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800989c:	9300      	str	r3, [sp, #0]
 800989e:	4603      	mov	r3, r0
 80098a0:	68f8      	ldr	r0, [r7, #12]
 80098a2:	f000 f8b9 	bl	8009a18 <I2C_RequestMemoryWrite>
 80098a6:	4603      	mov	r3, r0
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d005      	beq.n	80098b8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	2200      	movs	r2, #0
 80098b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80098b4:	2301      	movs	r3, #1
 80098b6:	e0a9      	b.n	8009a0c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80098bc:	b29b      	uxth	r3, r3
 80098be:	2bff      	cmp	r3, #255	@ 0xff
 80098c0:	d90e      	bls.n	80098e0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	22ff      	movs	r2, #255	@ 0xff
 80098c6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80098cc:	b2da      	uxtb	r2, r3
 80098ce:	8979      	ldrh	r1, [r7, #10]
 80098d0:	2300      	movs	r3, #0
 80098d2:	9300      	str	r3, [sp, #0]
 80098d4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80098d8:	68f8      	ldr	r0, [r7, #12]
 80098da:	f000 fad9 	bl	8009e90 <I2C_TransferConfig>
 80098de:	e00f      	b.n	8009900 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80098e4:	b29a      	uxth	r2, r3
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80098ee:	b2da      	uxtb	r2, r3
 80098f0:	8979      	ldrh	r1, [r7, #10]
 80098f2:	2300      	movs	r3, #0
 80098f4:	9300      	str	r3, [sp, #0]
 80098f6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80098fa:	68f8      	ldr	r0, [r7, #12]
 80098fc:	f000 fac8 	bl	8009e90 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009900:	697a      	ldr	r2, [r7, #20]
 8009902:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009904:	68f8      	ldr	r0, [r7, #12]
 8009906:	f000 f958 	bl	8009bba <I2C_WaitOnTXISFlagUntilTimeout>
 800990a:	4603      	mov	r3, r0
 800990c:	2b00      	cmp	r3, #0
 800990e:	d001      	beq.n	8009914 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8009910:	2301      	movs	r3, #1
 8009912:	e07b      	b.n	8009a0c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009918:	781a      	ldrb	r2, [r3, #0]
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009924:	1c5a      	adds	r2, r3, #1
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800992e:	b29b      	uxth	r3, r3
 8009930:	3b01      	subs	r3, #1
 8009932:	b29a      	uxth	r2, r3
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800993c:	3b01      	subs	r3, #1
 800993e:	b29a      	uxth	r2, r3
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009948:	b29b      	uxth	r3, r3
 800994a:	2b00      	cmp	r3, #0
 800994c:	d034      	beq.n	80099b8 <HAL_I2C_Mem_Write+0x1c8>
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009952:	2b00      	cmp	r3, #0
 8009954:	d130      	bne.n	80099b8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009956:	697b      	ldr	r3, [r7, #20]
 8009958:	9300      	str	r3, [sp, #0]
 800995a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800995c:	2200      	movs	r2, #0
 800995e:	2180      	movs	r1, #128	@ 0x80
 8009960:	68f8      	ldr	r0, [r7, #12]
 8009962:	f000 f8d1 	bl	8009b08 <I2C_WaitOnFlagUntilTimeout>
 8009966:	4603      	mov	r3, r0
 8009968:	2b00      	cmp	r3, #0
 800996a:	d001      	beq.n	8009970 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800996c:	2301      	movs	r3, #1
 800996e:	e04d      	b.n	8009a0c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009974:	b29b      	uxth	r3, r3
 8009976:	2bff      	cmp	r3, #255	@ 0xff
 8009978:	d90e      	bls.n	8009998 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	22ff      	movs	r2, #255	@ 0xff
 800997e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009984:	b2da      	uxtb	r2, r3
 8009986:	8979      	ldrh	r1, [r7, #10]
 8009988:	2300      	movs	r3, #0
 800998a:	9300      	str	r3, [sp, #0]
 800998c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009990:	68f8      	ldr	r0, [r7, #12]
 8009992:	f000 fa7d 	bl	8009e90 <I2C_TransferConfig>
 8009996:	e00f      	b.n	80099b8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800999c:	b29a      	uxth	r2, r3
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80099a6:	b2da      	uxtb	r2, r3
 80099a8:	8979      	ldrh	r1, [r7, #10]
 80099aa:	2300      	movs	r3, #0
 80099ac:	9300      	str	r3, [sp, #0]
 80099ae:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80099b2:	68f8      	ldr	r0, [r7, #12]
 80099b4:	f000 fa6c 	bl	8009e90 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80099bc:	b29b      	uxth	r3, r3
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d19e      	bne.n	8009900 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80099c2:	697a      	ldr	r2, [r7, #20]
 80099c4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80099c6:	68f8      	ldr	r0, [r7, #12]
 80099c8:	f000 f93e 	bl	8009c48 <I2C_WaitOnSTOPFlagUntilTimeout>
 80099cc:	4603      	mov	r3, r0
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d001      	beq.n	80099d6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80099d2:	2301      	movs	r3, #1
 80099d4:	e01a      	b.n	8009a0c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	2220      	movs	r2, #32
 80099dc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	6859      	ldr	r1, [r3, #4]
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	681a      	ldr	r2, [r3, #0]
 80099e8:	4b0a      	ldr	r3, [pc, #40]	@ (8009a14 <HAL_I2C_Mem_Write+0x224>)
 80099ea:	400b      	ands	r3, r1
 80099ec:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	2220      	movs	r2, #32
 80099f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	2200      	movs	r2, #0
 80099fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	2200      	movs	r2, #0
 8009a02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009a06:	2300      	movs	r3, #0
 8009a08:	e000      	b.n	8009a0c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8009a0a:	2302      	movs	r3, #2
  }
}
 8009a0c:	4618      	mov	r0, r3
 8009a0e:	3718      	adds	r7, #24
 8009a10:	46bd      	mov	sp, r7
 8009a12:	bd80      	pop	{r7, pc}
 8009a14:	fe00e800 	.word	0xfe00e800

08009a18 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8009a18:	b580      	push	{r7, lr}
 8009a1a:	b086      	sub	sp, #24
 8009a1c:	af02      	add	r7, sp, #8
 8009a1e:	60f8      	str	r0, [r7, #12]
 8009a20:	4608      	mov	r0, r1
 8009a22:	4611      	mov	r1, r2
 8009a24:	461a      	mov	r2, r3
 8009a26:	4603      	mov	r3, r0
 8009a28:	817b      	strh	r3, [r7, #10]
 8009a2a:	460b      	mov	r3, r1
 8009a2c:	813b      	strh	r3, [r7, #8]
 8009a2e:	4613      	mov	r3, r2
 8009a30:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8009a32:	88fb      	ldrh	r3, [r7, #6]
 8009a34:	b2da      	uxtb	r2, r3
 8009a36:	8979      	ldrh	r1, [r7, #10]
 8009a38:	4b20      	ldr	r3, [pc, #128]	@ (8009abc <I2C_RequestMemoryWrite+0xa4>)
 8009a3a:	9300      	str	r3, [sp, #0]
 8009a3c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009a40:	68f8      	ldr	r0, [r7, #12]
 8009a42:	f000 fa25 	bl	8009e90 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009a46:	69fa      	ldr	r2, [r7, #28]
 8009a48:	69b9      	ldr	r1, [r7, #24]
 8009a4a:	68f8      	ldr	r0, [r7, #12]
 8009a4c:	f000 f8b5 	bl	8009bba <I2C_WaitOnTXISFlagUntilTimeout>
 8009a50:	4603      	mov	r3, r0
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d001      	beq.n	8009a5a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8009a56:	2301      	movs	r3, #1
 8009a58:	e02c      	b.n	8009ab4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009a5a:	88fb      	ldrh	r3, [r7, #6]
 8009a5c:	2b01      	cmp	r3, #1
 8009a5e:	d105      	bne.n	8009a6c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009a60:	893b      	ldrh	r3, [r7, #8]
 8009a62:	b2da      	uxtb	r2, r3
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	629a      	str	r2, [r3, #40]	@ 0x28
 8009a6a:	e015      	b.n	8009a98 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8009a6c:	893b      	ldrh	r3, [r7, #8]
 8009a6e:	0a1b      	lsrs	r3, r3, #8
 8009a70:	b29b      	uxth	r3, r3
 8009a72:	b2da      	uxtb	r2, r3
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009a7a:	69fa      	ldr	r2, [r7, #28]
 8009a7c:	69b9      	ldr	r1, [r7, #24]
 8009a7e:	68f8      	ldr	r0, [r7, #12]
 8009a80:	f000 f89b 	bl	8009bba <I2C_WaitOnTXISFlagUntilTimeout>
 8009a84:	4603      	mov	r3, r0
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d001      	beq.n	8009a8e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8009a8a:	2301      	movs	r3, #1
 8009a8c:	e012      	b.n	8009ab4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009a8e:	893b      	ldrh	r3, [r7, #8]
 8009a90:	b2da      	uxtb	r2, r3
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8009a98:	69fb      	ldr	r3, [r7, #28]
 8009a9a:	9300      	str	r3, [sp, #0]
 8009a9c:	69bb      	ldr	r3, [r7, #24]
 8009a9e:	2200      	movs	r2, #0
 8009aa0:	2180      	movs	r1, #128	@ 0x80
 8009aa2:	68f8      	ldr	r0, [r7, #12]
 8009aa4:	f000 f830 	bl	8009b08 <I2C_WaitOnFlagUntilTimeout>
 8009aa8:	4603      	mov	r3, r0
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d001      	beq.n	8009ab2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8009aae:	2301      	movs	r3, #1
 8009ab0:	e000      	b.n	8009ab4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8009ab2:	2300      	movs	r3, #0
}
 8009ab4:	4618      	mov	r0, r3
 8009ab6:	3710      	adds	r7, #16
 8009ab8:	46bd      	mov	sp, r7
 8009aba:	bd80      	pop	{r7, pc}
 8009abc:	80002000 	.word	0x80002000

08009ac0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8009ac0:	b480      	push	{r7}
 8009ac2:	b083      	sub	sp, #12
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	699b      	ldr	r3, [r3, #24]
 8009ace:	f003 0302 	and.w	r3, r3, #2
 8009ad2:	2b02      	cmp	r3, #2
 8009ad4:	d103      	bne.n	8009ade <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	2200      	movs	r2, #0
 8009adc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	699b      	ldr	r3, [r3, #24]
 8009ae4:	f003 0301 	and.w	r3, r3, #1
 8009ae8:	2b01      	cmp	r3, #1
 8009aea:	d007      	beq.n	8009afc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	699a      	ldr	r2, [r3, #24]
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	f042 0201 	orr.w	r2, r2, #1
 8009afa:	619a      	str	r2, [r3, #24]
  }
}
 8009afc:	bf00      	nop
 8009afe:	370c      	adds	r7, #12
 8009b00:	46bd      	mov	sp, r7
 8009b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b06:	4770      	bx	lr

08009b08 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8009b08:	b580      	push	{r7, lr}
 8009b0a:	b084      	sub	sp, #16
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	60f8      	str	r0, [r7, #12]
 8009b10:	60b9      	str	r1, [r7, #8]
 8009b12:	603b      	str	r3, [r7, #0]
 8009b14:	4613      	mov	r3, r2
 8009b16:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009b18:	e03b      	b.n	8009b92 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009b1a:	69ba      	ldr	r2, [r7, #24]
 8009b1c:	6839      	ldr	r1, [r7, #0]
 8009b1e:	68f8      	ldr	r0, [r7, #12]
 8009b20:	f000 f8d6 	bl	8009cd0 <I2C_IsErrorOccurred>
 8009b24:	4603      	mov	r3, r0
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d001      	beq.n	8009b2e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8009b2a:	2301      	movs	r3, #1
 8009b2c:	e041      	b.n	8009bb2 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009b2e:	683b      	ldr	r3, [r7, #0]
 8009b30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b34:	d02d      	beq.n	8009b92 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009b36:	f7fd fcab 	bl	8007490 <HAL_GetTick>
 8009b3a:	4602      	mov	r2, r0
 8009b3c:	69bb      	ldr	r3, [r7, #24]
 8009b3e:	1ad3      	subs	r3, r2, r3
 8009b40:	683a      	ldr	r2, [r7, #0]
 8009b42:	429a      	cmp	r2, r3
 8009b44:	d302      	bcc.n	8009b4c <I2C_WaitOnFlagUntilTimeout+0x44>
 8009b46:	683b      	ldr	r3, [r7, #0]
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d122      	bne.n	8009b92 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	699a      	ldr	r2, [r3, #24]
 8009b52:	68bb      	ldr	r3, [r7, #8]
 8009b54:	4013      	ands	r3, r2
 8009b56:	68ba      	ldr	r2, [r7, #8]
 8009b58:	429a      	cmp	r2, r3
 8009b5a:	bf0c      	ite	eq
 8009b5c:	2301      	moveq	r3, #1
 8009b5e:	2300      	movne	r3, #0
 8009b60:	b2db      	uxtb	r3, r3
 8009b62:	461a      	mov	r2, r3
 8009b64:	79fb      	ldrb	r3, [r7, #7]
 8009b66:	429a      	cmp	r2, r3
 8009b68:	d113      	bne.n	8009b92 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009b6e:	f043 0220 	orr.w	r2, r3, #32
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	2220      	movs	r2, #32
 8009b7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	2200      	movs	r2, #0
 8009b82:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	2200      	movs	r2, #0
 8009b8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8009b8e:	2301      	movs	r3, #1
 8009b90:	e00f      	b.n	8009bb2 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	699a      	ldr	r2, [r3, #24]
 8009b98:	68bb      	ldr	r3, [r7, #8]
 8009b9a:	4013      	ands	r3, r2
 8009b9c:	68ba      	ldr	r2, [r7, #8]
 8009b9e:	429a      	cmp	r2, r3
 8009ba0:	bf0c      	ite	eq
 8009ba2:	2301      	moveq	r3, #1
 8009ba4:	2300      	movne	r3, #0
 8009ba6:	b2db      	uxtb	r3, r3
 8009ba8:	461a      	mov	r2, r3
 8009baa:	79fb      	ldrb	r3, [r7, #7]
 8009bac:	429a      	cmp	r2, r3
 8009bae:	d0b4      	beq.n	8009b1a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009bb0:	2300      	movs	r3, #0
}
 8009bb2:	4618      	mov	r0, r3
 8009bb4:	3710      	adds	r7, #16
 8009bb6:	46bd      	mov	sp, r7
 8009bb8:	bd80      	pop	{r7, pc}

08009bba <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009bba:	b580      	push	{r7, lr}
 8009bbc:	b084      	sub	sp, #16
 8009bbe:	af00      	add	r7, sp, #0
 8009bc0:	60f8      	str	r0, [r7, #12]
 8009bc2:	60b9      	str	r1, [r7, #8]
 8009bc4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009bc6:	e033      	b.n	8009c30 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009bc8:	687a      	ldr	r2, [r7, #4]
 8009bca:	68b9      	ldr	r1, [r7, #8]
 8009bcc:	68f8      	ldr	r0, [r7, #12]
 8009bce:	f000 f87f 	bl	8009cd0 <I2C_IsErrorOccurred>
 8009bd2:	4603      	mov	r3, r0
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d001      	beq.n	8009bdc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009bd8:	2301      	movs	r3, #1
 8009bda:	e031      	b.n	8009c40 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009bdc:	68bb      	ldr	r3, [r7, #8]
 8009bde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009be2:	d025      	beq.n	8009c30 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009be4:	f7fd fc54 	bl	8007490 <HAL_GetTick>
 8009be8:	4602      	mov	r2, r0
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	1ad3      	subs	r3, r2, r3
 8009bee:	68ba      	ldr	r2, [r7, #8]
 8009bf0:	429a      	cmp	r2, r3
 8009bf2:	d302      	bcc.n	8009bfa <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8009bf4:	68bb      	ldr	r3, [r7, #8]
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d11a      	bne.n	8009c30 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	699b      	ldr	r3, [r3, #24]
 8009c00:	f003 0302 	and.w	r3, r3, #2
 8009c04:	2b02      	cmp	r3, #2
 8009c06:	d013      	beq.n	8009c30 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009c0c:	f043 0220 	orr.w	r2, r3, #32
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	2220      	movs	r2, #32
 8009c18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	2200      	movs	r2, #0
 8009c20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	2200      	movs	r2, #0
 8009c28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8009c2c:	2301      	movs	r3, #1
 8009c2e:	e007      	b.n	8009c40 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	699b      	ldr	r3, [r3, #24]
 8009c36:	f003 0302 	and.w	r3, r3, #2
 8009c3a:	2b02      	cmp	r3, #2
 8009c3c:	d1c4      	bne.n	8009bc8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8009c3e:	2300      	movs	r3, #0
}
 8009c40:	4618      	mov	r0, r3
 8009c42:	3710      	adds	r7, #16
 8009c44:	46bd      	mov	sp, r7
 8009c46:	bd80      	pop	{r7, pc}

08009c48 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009c48:	b580      	push	{r7, lr}
 8009c4a:	b084      	sub	sp, #16
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	60f8      	str	r0, [r7, #12]
 8009c50:	60b9      	str	r1, [r7, #8]
 8009c52:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009c54:	e02f      	b.n	8009cb6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009c56:	687a      	ldr	r2, [r7, #4]
 8009c58:	68b9      	ldr	r1, [r7, #8]
 8009c5a:	68f8      	ldr	r0, [r7, #12]
 8009c5c:	f000 f838 	bl	8009cd0 <I2C_IsErrorOccurred>
 8009c60:	4603      	mov	r3, r0
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d001      	beq.n	8009c6a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009c66:	2301      	movs	r3, #1
 8009c68:	e02d      	b.n	8009cc6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009c6a:	f7fd fc11 	bl	8007490 <HAL_GetTick>
 8009c6e:	4602      	mov	r2, r0
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	1ad3      	subs	r3, r2, r3
 8009c74:	68ba      	ldr	r2, [r7, #8]
 8009c76:	429a      	cmp	r2, r3
 8009c78:	d302      	bcc.n	8009c80 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8009c7a:	68bb      	ldr	r3, [r7, #8]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d11a      	bne.n	8009cb6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	699b      	ldr	r3, [r3, #24]
 8009c86:	f003 0320 	and.w	r3, r3, #32
 8009c8a:	2b20      	cmp	r3, #32
 8009c8c:	d013      	beq.n	8009cb6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009c92:	f043 0220 	orr.w	r2, r3, #32
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	2220      	movs	r2, #32
 8009c9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	2200      	movs	r2, #0
 8009ca6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	2200      	movs	r2, #0
 8009cae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8009cb2:	2301      	movs	r3, #1
 8009cb4:	e007      	b.n	8009cc6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	699b      	ldr	r3, [r3, #24]
 8009cbc:	f003 0320 	and.w	r3, r3, #32
 8009cc0:	2b20      	cmp	r3, #32
 8009cc2:	d1c8      	bne.n	8009c56 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009cc4:	2300      	movs	r3, #0
}
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	3710      	adds	r7, #16
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	bd80      	pop	{r7, pc}
	...

08009cd0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009cd0:	b580      	push	{r7, lr}
 8009cd2:	b08a      	sub	sp, #40	@ 0x28
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	60f8      	str	r0, [r7, #12]
 8009cd8:	60b9      	str	r1, [r7, #8]
 8009cda:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009cdc:	2300      	movs	r3, #0
 8009cde:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	699b      	ldr	r3, [r3, #24]
 8009ce8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8009cea:	2300      	movs	r3, #0
 8009cec:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8009cf2:	69bb      	ldr	r3, [r7, #24]
 8009cf4:	f003 0310 	and.w	r3, r3, #16
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d068      	beq.n	8009dce <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	2210      	movs	r2, #16
 8009d02:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009d04:	e049      	b.n	8009d9a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8009d06:	68bb      	ldr	r3, [r7, #8]
 8009d08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d0c:	d045      	beq.n	8009d9a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8009d0e:	f7fd fbbf 	bl	8007490 <HAL_GetTick>
 8009d12:	4602      	mov	r2, r0
 8009d14:	69fb      	ldr	r3, [r7, #28]
 8009d16:	1ad3      	subs	r3, r2, r3
 8009d18:	68ba      	ldr	r2, [r7, #8]
 8009d1a:	429a      	cmp	r2, r3
 8009d1c:	d302      	bcc.n	8009d24 <I2C_IsErrorOccurred+0x54>
 8009d1e:	68bb      	ldr	r3, [r7, #8]
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d13a      	bne.n	8009d9a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	685b      	ldr	r3, [r3, #4]
 8009d2a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009d2e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009d36:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	699b      	ldr	r3, [r3, #24]
 8009d3e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009d42:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009d46:	d121      	bne.n	8009d8c <I2C_IsErrorOccurred+0xbc>
 8009d48:	697b      	ldr	r3, [r7, #20]
 8009d4a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009d4e:	d01d      	beq.n	8009d8c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8009d50:	7cfb      	ldrb	r3, [r7, #19]
 8009d52:	2b20      	cmp	r3, #32
 8009d54:	d01a      	beq.n	8009d8c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	685a      	ldr	r2, [r3, #4]
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009d64:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8009d66:	f7fd fb93 	bl	8007490 <HAL_GetTick>
 8009d6a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009d6c:	e00e      	b.n	8009d8c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8009d6e:	f7fd fb8f 	bl	8007490 <HAL_GetTick>
 8009d72:	4602      	mov	r2, r0
 8009d74:	69fb      	ldr	r3, [r7, #28]
 8009d76:	1ad3      	subs	r3, r2, r3
 8009d78:	2b19      	cmp	r3, #25
 8009d7a:	d907      	bls.n	8009d8c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8009d7c:	6a3b      	ldr	r3, [r7, #32]
 8009d7e:	f043 0320 	orr.w	r3, r3, #32
 8009d82:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8009d84:	2301      	movs	r3, #1
 8009d86:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8009d8a:	e006      	b.n	8009d9a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	699b      	ldr	r3, [r3, #24]
 8009d92:	f003 0320 	and.w	r3, r3, #32
 8009d96:	2b20      	cmp	r3, #32
 8009d98:	d1e9      	bne.n	8009d6e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	699b      	ldr	r3, [r3, #24]
 8009da0:	f003 0320 	and.w	r3, r3, #32
 8009da4:	2b20      	cmp	r3, #32
 8009da6:	d003      	beq.n	8009db0 <I2C_IsErrorOccurred+0xe0>
 8009da8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d0aa      	beq.n	8009d06 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8009db0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d103      	bne.n	8009dc0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	2220      	movs	r2, #32
 8009dbe:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8009dc0:	6a3b      	ldr	r3, [r7, #32]
 8009dc2:	f043 0304 	orr.w	r3, r3, #4
 8009dc6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8009dc8:	2301      	movs	r3, #1
 8009dca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	699b      	ldr	r3, [r3, #24]
 8009dd4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8009dd6:	69bb      	ldr	r3, [r7, #24]
 8009dd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d00b      	beq.n	8009df8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8009de0:	6a3b      	ldr	r3, [r7, #32]
 8009de2:	f043 0301 	orr.w	r3, r3, #1
 8009de6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009df0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009df2:	2301      	movs	r3, #1
 8009df4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8009df8:	69bb      	ldr	r3, [r7, #24]
 8009dfa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d00b      	beq.n	8009e1a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8009e02:	6a3b      	ldr	r3, [r7, #32]
 8009e04:	f043 0308 	orr.w	r3, r3, #8
 8009e08:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8009e12:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009e14:	2301      	movs	r3, #1
 8009e16:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8009e1a:	69bb      	ldr	r3, [r7, #24]
 8009e1c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d00b      	beq.n	8009e3c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8009e24:	6a3b      	ldr	r3, [r7, #32]
 8009e26:	f043 0302 	orr.w	r3, r3, #2
 8009e2a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009e34:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009e36:	2301      	movs	r3, #1
 8009e38:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8009e3c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d01c      	beq.n	8009e7e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009e44:	68f8      	ldr	r0, [r7, #12]
 8009e46:	f7ff fe3b 	bl	8009ac0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	6859      	ldr	r1, [r3, #4]
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	681a      	ldr	r2, [r3, #0]
 8009e54:	4b0d      	ldr	r3, [pc, #52]	@ (8009e8c <I2C_IsErrorOccurred+0x1bc>)
 8009e56:	400b      	ands	r3, r1
 8009e58:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009e5e:	6a3b      	ldr	r3, [r7, #32]
 8009e60:	431a      	orrs	r2, r3
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	2220      	movs	r2, #32
 8009e6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	2200      	movs	r2, #0
 8009e72:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	2200      	movs	r2, #0
 8009e7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8009e7e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8009e82:	4618      	mov	r0, r3
 8009e84:	3728      	adds	r7, #40	@ 0x28
 8009e86:	46bd      	mov	sp, r7
 8009e88:	bd80      	pop	{r7, pc}
 8009e8a:	bf00      	nop
 8009e8c:	fe00e800 	.word	0xfe00e800

08009e90 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8009e90:	b480      	push	{r7}
 8009e92:	b087      	sub	sp, #28
 8009e94:	af00      	add	r7, sp, #0
 8009e96:	60f8      	str	r0, [r7, #12]
 8009e98:	607b      	str	r3, [r7, #4]
 8009e9a:	460b      	mov	r3, r1
 8009e9c:	817b      	strh	r3, [r7, #10]
 8009e9e:	4613      	mov	r3, r2
 8009ea0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009ea2:	897b      	ldrh	r3, [r7, #10]
 8009ea4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009ea8:	7a7b      	ldrb	r3, [r7, #9]
 8009eaa:	041b      	lsls	r3, r3, #16
 8009eac:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009eb0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009eb6:	6a3b      	ldr	r3, [r7, #32]
 8009eb8:	4313      	orrs	r3, r2
 8009eba:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009ebe:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	685a      	ldr	r2, [r3, #4]
 8009ec6:	6a3b      	ldr	r3, [r7, #32]
 8009ec8:	0d5b      	lsrs	r3, r3, #21
 8009eca:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8009ece:	4b08      	ldr	r3, [pc, #32]	@ (8009ef0 <I2C_TransferConfig+0x60>)
 8009ed0:	430b      	orrs	r3, r1
 8009ed2:	43db      	mvns	r3, r3
 8009ed4:	ea02 0103 	and.w	r1, r2, r3
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	697a      	ldr	r2, [r7, #20]
 8009ede:	430a      	orrs	r2, r1
 8009ee0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8009ee2:	bf00      	nop
 8009ee4:	371c      	adds	r7, #28
 8009ee6:	46bd      	mov	sp, r7
 8009ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eec:	4770      	bx	lr
 8009eee:	bf00      	nop
 8009ef0:	03ff63ff 	.word	0x03ff63ff

08009ef4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009ef4:	b480      	push	{r7}
 8009ef6:	b083      	sub	sp, #12
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	6078      	str	r0, [r7, #4]
 8009efc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009f04:	b2db      	uxtb	r3, r3
 8009f06:	2b20      	cmp	r3, #32
 8009f08:	d138      	bne.n	8009f7c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009f10:	2b01      	cmp	r3, #1
 8009f12:	d101      	bne.n	8009f18 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009f14:	2302      	movs	r3, #2
 8009f16:	e032      	b.n	8009f7e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	2201      	movs	r2, #1
 8009f1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	2224      	movs	r2, #36	@ 0x24
 8009f24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	681a      	ldr	r2, [r3, #0]
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	f022 0201 	bic.w	r2, r2, #1
 8009f36:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	681a      	ldr	r2, [r3, #0]
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8009f46:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	6819      	ldr	r1, [r3, #0]
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	683a      	ldr	r2, [r7, #0]
 8009f54:	430a      	orrs	r2, r1
 8009f56:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	681a      	ldr	r2, [r3, #0]
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	f042 0201 	orr.w	r2, r2, #1
 8009f66:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	2220      	movs	r2, #32
 8009f6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	2200      	movs	r2, #0
 8009f74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009f78:	2300      	movs	r3, #0
 8009f7a:	e000      	b.n	8009f7e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009f7c:	2302      	movs	r3, #2
  }
}
 8009f7e:	4618      	mov	r0, r3
 8009f80:	370c      	adds	r7, #12
 8009f82:	46bd      	mov	sp, r7
 8009f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f88:	4770      	bx	lr

08009f8a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009f8a:	b480      	push	{r7}
 8009f8c:	b085      	sub	sp, #20
 8009f8e:	af00      	add	r7, sp, #0
 8009f90:	6078      	str	r0, [r7, #4]
 8009f92:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009f9a:	b2db      	uxtb	r3, r3
 8009f9c:	2b20      	cmp	r3, #32
 8009f9e:	d139      	bne.n	800a014 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009fa6:	2b01      	cmp	r3, #1
 8009fa8:	d101      	bne.n	8009fae <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8009faa:	2302      	movs	r3, #2
 8009fac:	e033      	b.n	800a016 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	2201      	movs	r2, #1
 8009fb2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	2224      	movs	r2, #36	@ 0x24
 8009fba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	681a      	ldr	r2, [r3, #0]
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	f022 0201 	bic.w	r2, r2, #1
 8009fcc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8009fdc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009fde:	683b      	ldr	r3, [r7, #0]
 8009fe0:	021b      	lsls	r3, r3, #8
 8009fe2:	68fa      	ldr	r2, [r7, #12]
 8009fe4:	4313      	orrs	r3, r2
 8009fe6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	68fa      	ldr	r2, [r7, #12]
 8009fee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	681a      	ldr	r2, [r3, #0]
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	f042 0201 	orr.w	r2, r2, #1
 8009ffe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	2220      	movs	r2, #32
 800a004:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	2200      	movs	r2, #0
 800a00c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800a010:	2300      	movs	r3, #0
 800a012:	e000      	b.n	800a016 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800a014:	2302      	movs	r3, #2
  }
}
 800a016:	4618      	mov	r0, r3
 800a018:	3714      	adds	r7, #20
 800a01a:	46bd      	mov	sp, r7
 800a01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a020:	4770      	bx	lr
	...

0800a024 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C3 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C3 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 800a024:	b480      	push	{r7}
 800a026:	b083      	sub	sp, #12
 800a028:	af00      	add	r7, sp, #0
 800a02a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 800a02c:	4b05      	ldr	r3, [pc, #20]	@ (800a044 <HAL_I2CEx_EnableFastModePlus+0x20>)
 800a02e:	685a      	ldr	r2, [r3, #4]
 800a030:	4904      	ldr	r1, [pc, #16]	@ (800a044 <HAL_I2CEx_EnableFastModePlus+0x20>)
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	4313      	orrs	r3, r2
 800a036:	604b      	str	r3, [r1, #4]
}
 800a038:	bf00      	nop
 800a03a:	370c      	adds	r7, #12
 800a03c:	46bd      	mov	sp, r7
 800a03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a042:	4770      	bx	lr
 800a044:	40010000 	.word	0x40010000

0800a048 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 800a048:	b580      	push	{r7, lr}
 800a04a:	b084      	sub	sp, #16
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 800a050:	2300      	movs	r3, #0
 800a052:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	2b00      	cmp	r3, #0
 800a058:	d01e      	beq.n	800a098 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 800a05a:	4b13      	ldr	r3, [pc, #76]	@ (800a0a8 <HAL_IPCC_Init+0x60>)
 800a05c:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800a064:	b2db      	uxtb	r3, r3
 800a066:	2b00      	cmp	r3, #0
 800a068:	d102      	bne.n	800a070 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 800a06a:	6878      	ldr	r0, [r7, #4]
 800a06c:	f7f8 fc26 	bl	80028bc <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 800a070:	68b8      	ldr	r0, [r7, #8]
 800a072:	f000 f85b 	bl	800a12c <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 800a076:	68bb      	ldr	r3, [r7, #8]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	f043 1201 	orr.w	r2, r3, #65537	@ 0x10001
 800a07e:	68bb      	ldr	r3, [r7, #8]
 800a080:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 800a082:	6878      	ldr	r0, [r7, #4]
 800a084:	f000 f82c 	bl	800a0e0 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	2200      	movs	r2, #0
 800a08c:	635a      	str	r2, [r3, #52]	@ 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	2201      	movs	r2, #1
 800a092:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 800a096:	e001      	b.n	800a09c <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 800a098:	2301      	movs	r3, #1
 800a09a:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 800a09c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a09e:	4618      	mov	r0, r3
 800a0a0:	3710      	adds	r7, #16
 800a0a2:	46bd      	mov	sp, r7
 800a0a4:	bd80      	pop	{r7, pc}
 800a0a6:	bf00      	nop
 800a0a8:	58000c00 	.word	0x58000c00

0800a0ac <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 800a0ac:	b480      	push	{r7}
 800a0ae:	b085      	sub	sp, #20
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	60f8      	str	r0, [r7, #12]
 800a0b4:	60b9      	str	r1, [r7, #8]
 800a0b6:	4613      	mov	r3, r2
 800a0b8:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 800a0ba:	bf00      	nop
 800a0bc:	3714      	adds	r7, #20
 800a0be:	46bd      	mov	sp, r7
 800a0c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c4:	4770      	bx	lr

0800a0c6 <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 800a0c6:	b480      	push	{r7}
 800a0c8:	b085      	sub	sp, #20
 800a0ca:	af00      	add	r7, sp, #0
 800a0cc:	60f8      	str	r0, [r7, #12]
 800a0ce:	60b9      	str	r1, [r7, #8]
 800a0d0:	4613      	mov	r3, r2
 800a0d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 800a0d4:	bf00      	nop
 800a0d6:	3714      	adds	r7, #20
 800a0d8:	46bd      	mov	sp, r7
 800a0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0de:	4770      	bx	lr

0800a0e0 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 800a0e0:	b480      	push	{r7}
 800a0e2:	b085      	sub	sp, #20
 800a0e4:	af00      	add	r7, sp, #0
 800a0e6:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 800a0e8:	2300      	movs	r3, #0
 800a0ea:	60fb      	str	r3, [r7, #12]
 800a0ec:	e00f      	b.n	800a10e <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 800a0ee:	687a      	ldr	r2, [r7, #4]
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	009b      	lsls	r3, r3, #2
 800a0f4:	4413      	add	r3, r2
 800a0f6:	4a0b      	ldr	r2, [pc, #44]	@ (800a124 <IPCC_SetDefaultCallbacks+0x44>)
 800a0f8:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 800a0fa:	687a      	ldr	r2, [r7, #4]
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	3306      	adds	r3, #6
 800a100:	009b      	lsls	r3, r3, #2
 800a102:	4413      	add	r3, r2
 800a104:	4a08      	ldr	r2, [pc, #32]	@ (800a128 <IPCC_SetDefaultCallbacks+0x48>)
 800a106:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	3301      	adds	r3, #1
 800a10c:	60fb      	str	r3, [r7, #12]
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	2b05      	cmp	r3, #5
 800a112:	d9ec      	bls.n	800a0ee <IPCC_SetDefaultCallbacks+0xe>
  }
}
 800a114:	bf00      	nop
 800a116:	bf00      	nop
 800a118:	3714      	adds	r7, #20
 800a11a:	46bd      	mov	sp, r7
 800a11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a120:	4770      	bx	lr
 800a122:	bf00      	nop
 800a124:	0800a0ad 	.word	0x0800a0ad
 800a128:	0800a0c7 	.word	0x0800a0c7

0800a12c <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 800a12c:	b480      	push	{r7}
 800a12e:	b083      	sub	sp, #12
 800a130:	af00      	add	r7, sp, #0
 800a132:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	2200      	movs	r2, #0
 800a138:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	f04f 123f 	mov.w	r2, #4128831	@ 0x3f003f
 800a140:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	223f      	movs	r2, #63	@ 0x3f
 800a146:	609a      	str	r2, [r3, #8]
}
 800a148:	bf00      	nop
 800a14a:	370c      	adds	r7, #12
 800a14c:	46bd      	mov	sp, r7
 800a14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a152:	4770      	bx	lr

0800a154 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800a154:	b580      	push	{r7, lr}
 800a156:	b084      	sub	sp, #16
 800a158:	af00      	add	r7, sp, #0
 800a15a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d101      	bne.n	800a166 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800a162:	2301      	movs	r3, #1
 800a164:	e0c0      	b.n	800a2e8 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 800a16c:	b2db      	uxtb	r3, r3
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d106      	bne.n	800a180 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	2200      	movs	r2, #0
 800a176:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800a17a:	6878      	ldr	r0, [r7, #4]
 800a17c:	f00e fe06 	bl	8018d8c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	2203      	movs	r2, #3
 800a184:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	4618      	mov	r0, r3
 800a18e:	f007 f892 	bl	80112b6 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a192:	2300      	movs	r3, #0
 800a194:	73fb      	strb	r3, [r7, #15]
 800a196:	e03e      	b.n	800a216 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800a198:	7bfa      	ldrb	r2, [r7, #15]
 800a19a:	6879      	ldr	r1, [r7, #4]
 800a19c:	4613      	mov	r3, r2
 800a19e:	009b      	lsls	r3, r3, #2
 800a1a0:	4413      	add	r3, r2
 800a1a2:	00db      	lsls	r3, r3, #3
 800a1a4:	440b      	add	r3, r1
 800a1a6:	3311      	adds	r3, #17
 800a1a8:	2201      	movs	r2, #1
 800a1aa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800a1ac:	7bfa      	ldrb	r2, [r7, #15]
 800a1ae:	6879      	ldr	r1, [r7, #4]
 800a1b0:	4613      	mov	r3, r2
 800a1b2:	009b      	lsls	r3, r3, #2
 800a1b4:	4413      	add	r3, r2
 800a1b6:	00db      	lsls	r3, r3, #3
 800a1b8:	440b      	add	r3, r1
 800a1ba:	3310      	adds	r3, #16
 800a1bc:	7bfa      	ldrb	r2, [r7, #15]
 800a1be:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800a1c0:	7bfa      	ldrb	r2, [r7, #15]
 800a1c2:	6879      	ldr	r1, [r7, #4]
 800a1c4:	4613      	mov	r3, r2
 800a1c6:	009b      	lsls	r3, r3, #2
 800a1c8:	4413      	add	r3, r2
 800a1ca:	00db      	lsls	r3, r3, #3
 800a1cc:	440b      	add	r3, r1
 800a1ce:	3313      	adds	r3, #19
 800a1d0:	2200      	movs	r2, #0
 800a1d2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800a1d4:	7bfa      	ldrb	r2, [r7, #15]
 800a1d6:	6879      	ldr	r1, [r7, #4]
 800a1d8:	4613      	mov	r3, r2
 800a1da:	009b      	lsls	r3, r3, #2
 800a1dc:	4413      	add	r3, r2
 800a1de:	00db      	lsls	r3, r3, #3
 800a1e0:	440b      	add	r3, r1
 800a1e2:	3320      	adds	r3, #32
 800a1e4:	2200      	movs	r2, #0
 800a1e6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800a1e8:	7bfa      	ldrb	r2, [r7, #15]
 800a1ea:	6879      	ldr	r1, [r7, #4]
 800a1ec:	4613      	mov	r3, r2
 800a1ee:	009b      	lsls	r3, r3, #2
 800a1f0:	4413      	add	r3, r2
 800a1f2:	00db      	lsls	r3, r3, #3
 800a1f4:	440b      	add	r3, r1
 800a1f6:	3324      	adds	r3, #36	@ 0x24
 800a1f8:	2200      	movs	r2, #0
 800a1fa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800a1fc:	7bfb      	ldrb	r3, [r7, #15]
 800a1fe:	6879      	ldr	r1, [r7, #4]
 800a200:	1c5a      	adds	r2, r3, #1
 800a202:	4613      	mov	r3, r2
 800a204:	009b      	lsls	r3, r3, #2
 800a206:	4413      	add	r3, r2
 800a208:	00db      	lsls	r3, r3, #3
 800a20a:	440b      	add	r3, r1
 800a20c:	2200      	movs	r2, #0
 800a20e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a210:	7bfb      	ldrb	r3, [r7, #15]
 800a212:	3301      	adds	r3, #1
 800a214:	73fb      	strb	r3, [r7, #15]
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	791b      	ldrb	r3, [r3, #4]
 800a21a:	7bfa      	ldrb	r2, [r7, #15]
 800a21c:	429a      	cmp	r2, r3
 800a21e:	d3bb      	bcc.n	800a198 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a220:	2300      	movs	r3, #0
 800a222:	73fb      	strb	r3, [r7, #15]
 800a224:	e044      	b.n	800a2b0 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800a226:	7bfa      	ldrb	r2, [r7, #15]
 800a228:	6879      	ldr	r1, [r7, #4]
 800a22a:	4613      	mov	r3, r2
 800a22c:	009b      	lsls	r3, r3, #2
 800a22e:	4413      	add	r3, r2
 800a230:	00db      	lsls	r3, r3, #3
 800a232:	440b      	add	r3, r1
 800a234:	f203 1351 	addw	r3, r3, #337	@ 0x151
 800a238:	2200      	movs	r2, #0
 800a23a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800a23c:	7bfa      	ldrb	r2, [r7, #15]
 800a23e:	6879      	ldr	r1, [r7, #4]
 800a240:	4613      	mov	r3, r2
 800a242:	009b      	lsls	r3, r3, #2
 800a244:	4413      	add	r3, r2
 800a246:	00db      	lsls	r3, r3, #3
 800a248:	440b      	add	r3, r1
 800a24a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a24e:	7bfa      	ldrb	r2, [r7, #15]
 800a250:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800a252:	7bfa      	ldrb	r2, [r7, #15]
 800a254:	6879      	ldr	r1, [r7, #4]
 800a256:	4613      	mov	r3, r2
 800a258:	009b      	lsls	r3, r3, #2
 800a25a:	4413      	add	r3, r2
 800a25c:	00db      	lsls	r3, r3, #3
 800a25e:	440b      	add	r3, r1
 800a260:	f203 1353 	addw	r3, r3, #339	@ 0x153
 800a264:	2200      	movs	r2, #0
 800a266:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800a268:	7bfa      	ldrb	r2, [r7, #15]
 800a26a:	6879      	ldr	r1, [r7, #4]
 800a26c:	4613      	mov	r3, r2
 800a26e:	009b      	lsls	r3, r3, #2
 800a270:	4413      	add	r3, r2
 800a272:	00db      	lsls	r3, r3, #3
 800a274:	440b      	add	r3, r1
 800a276:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 800a27a:	2200      	movs	r2, #0
 800a27c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800a27e:	7bfa      	ldrb	r2, [r7, #15]
 800a280:	6879      	ldr	r1, [r7, #4]
 800a282:	4613      	mov	r3, r2
 800a284:	009b      	lsls	r3, r3, #2
 800a286:	4413      	add	r3, r2
 800a288:	00db      	lsls	r3, r3, #3
 800a28a:	440b      	add	r3, r1
 800a28c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a290:	2200      	movs	r2, #0
 800a292:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800a294:	7bfa      	ldrb	r2, [r7, #15]
 800a296:	6879      	ldr	r1, [r7, #4]
 800a298:	4613      	mov	r3, r2
 800a29a:	009b      	lsls	r3, r3, #2
 800a29c:	4413      	add	r3, r2
 800a29e:	00db      	lsls	r3, r3, #3
 800a2a0:	440b      	add	r3, r1
 800a2a2:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800a2a6:	2200      	movs	r2, #0
 800a2a8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a2aa:	7bfb      	ldrb	r3, [r7, #15]
 800a2ac:	3301      	adds	r3, #1
 800a2ae:	73fb      	strb	r3, [r7, #15]
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	791b      	ldrb	r3, [r3, #4]
 800a2b4:	7bfa      	ldrb	r2, [r7, #15]
 800a2b6:	429a      	cmp	r2, r3
 800a2b8:	d3b5      	bcc.n	800a226 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	6818      	ldr	r0, [r3, #0]
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	3304      	adds	r3, #4
 800a2c2:	e893 0006 	ldmia.w	r3, {r1, r2}
 800a2c6:	f007 f811 	bl	80112ec <USB_DevInit>

  hpcd->USB_Address = 0U;
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	2200      	movs	r2, #0
 800a2ce:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	2201      	movs	r2, #1
 800a2d4:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	7a9b      	ldrb	r3, [r3, #10]
 800a2dc:	2b01      	cmp	r3, #1
 800a2de:	d102      	bne.n	800a2e6 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800a2e0:	6878      	ldr	r0, [r7, #4]
 800a2e2:	f001 fc0e 	bl	800bb02 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800a2e6:	2300      	movs	r3, #0
}
 800a2e8:	4618      	mov	r0, r3
 800a2ea:	3710      	adds	r7, #16
 800a2ec:	46bd      	mov	sp, r7
 800a2ee:	bd80      	pop	{r7, pc}

0800a2f0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800a2f0:	b580      	push	{r7, lr}
 800a2f2:	b082      	sub	sp, #8
 800a2f4:	af00      	add	r7, sp, #0
 800a2f6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800a2fe:	2b01      	cmp	r3, #1
 800a300:	d101      	bne.n	800a306 <HAL_PCD_Start+0x16>
 800a302:	2302      	movs	r3, #2
 800a304:	e012      	b.n	800a32c <HAL_PCD_Start+0x3c>
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	2201      	movs	r2, #1
 800a30a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	4618      	mov	r0, r3
 800a314:	f006 ffb8 	bl	8011288 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	4618      	mov	r0, r3
 800a31e:	f008 fd95 	bl	8012e4c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	2200      	movs	r2, #0
 800a326:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800a32a:	2300      	movs	r3, #0
}
 800a32c:	4618      	mov	r0, r3
 800a32e:	3708      	adds	r7, #8
 800a330:	46bd      	mov	sp, r7
 800a332:	bd80      	pop	{r7, pc}

0800a334 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800a334:	b580      	push	{r7, lr}
 800a336:	b084      	sub	sp, #16
 800a338:	af00      	add	r7, sp, #0
 800a33a:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	4618      	mov	r0, r3
 800a342:	f008 fd9a 	bl	8012e7a <USB_ReadInterrupts>
 800a346:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d003      	beq.n	800a35a <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800a352:	6878      	ldr	r0, [r7, #4]
 800a354:	f000 fb06 	bl	800a964 <PCD_EP_ISR_Handler>

    return;
 800a358:	e110      	b.n	800a57c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a360:	2b00      	cmp	r3, #0
 800a362:	d013      	beq.n	800a38c <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800a36c:	b29a      	uxth	r2, r3
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a376:	b292      	uxth	r2, r2
 800a378:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800a37c:	6878      	ldr	r0, [r7, #4]
 800a37e:	f00e fd92 	bl	8018ea6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800a382:	2100      	movs	r1, #0
 800a384:	6878      	ldr	r0, [r7, #4]
 800a386:	f000 f8fc 	bl	800a582 <HAL_PCD_SetAddress>

    return;
 800a38a:	e0f7      	b.n	800a57c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a392:	2b00      	cmp	r3, #0
 800a394:	d00c      	beq.n	800a3b0 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800a39e:	b29a      	uxth	r2, r3
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800a3a8:	b292      	uxth	r2, r2
 800a3aa:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800a3ae:	e0e5      	b.n	800a57c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d00c      	beq.n	800a3d4 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800a3c2:	b29a      	uxth	r2, r3
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800a3cc:	b292      	uxth	r2, r2
 800a3ce:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800a3d2:	e0d3      	b.n	800a57c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d034      	beq.n	800a448 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800a3e6:	b29a      	uxth	r2, r3
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	f022 0204 	bic.w	r2, r2, #4
 800a3f0:	b292      	uxth	r2, r2
 800a3f2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800a3fe:	b29a      	uxth	r2, r3
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	f022 0208 	bic.w	r2, r2, #8
 800a408:	b292      	uxth	r2, r2
 800a40a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 800a414:	2b01      	cmp	r3, #1
 800a416:	d107      	bne.n	800a428 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	2200      	movs	r2, #0
 800a41c:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800a420:	2100      	movs	r1, #0
 800a422:	6878      	ldr	r0, [r7, #4]
 800a424:	f00e ff34 	bl	8019290 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800a428:	6878      	ldr	r0, [r7, #4]
 800a42a:	f00e fd75 	bl	8018f18 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800a436:	b29a      	uxth	r2, r3
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800a440:	b292      	uxth	r2, r2
 800a442:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800a446:	e099      	b.n	800a57c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d027      	beq.n	800a4a2 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800a45a:	b29a      	uxth	r2, r3
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	f042 0208 	orr.w	r2, r2, #8
 800a464:	b292      	uxth	r2, r2
 800a466:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800a472:	b29a      	uxth	r2, r3
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a47c:	b292      	uxth	r2, r2
 800a47e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800a48a:	b29a      	uxth	r2, r3
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	f042 0204 	orr.w	r2, r2, #4
 800a494:	b292      	uxth	r2, r2
 800a496:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800a49a:	6878      	ldr	r0, [r7, #4]
 800a49c:	f00e fd22 	bl	8018ee4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800a4a0:	e06c      	b.n	800a57c <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d040      	beq.n	800a52e <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800a4b4:	b29a      	uxth	r2, r3
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a4be:	b292      	uxth	r2, r2
 800a4c0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d12b      	bne.n	800a526 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800a4d6:	b29a      	uxth	r2, r3
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	f042 0204 	orr.w	r2, r2, #4
 800a4e0:	b292      	uxth	r2, r2
 800a4e2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800a4ee:	b29a      	uxth	r2, r3
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	f042 0208 	orr.w	r2, r2, #8
 800a4f8:	b292      	uxth	r2, r2
 800a4fa:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	2201      	movs	r2, #1
 800a502:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800a50e:	b29b      	uxth	r3, r3
 800a510:	089b      	lsrs	r3, r3, #2
 800a512:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800a51c:	2101      	movs	r1, #1
 800a51e:	6878      	ldr	r0, [r7, #4]
 800a520:	f00e feb6 	bl	8019290 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 800a524:	e02a      	b.n	800a57c <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 800a526:	6878      	ldr	r0, [r7, #4]
 800a528:	f00e fcdc 	bl	8018ee4 <HAL_PCD_SuspendCallback>
    return;
 800a52c:	e026      	b.n	800a57c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a534:	2b00      	cmp	r3, #0
 800a536:	d00f      	beq.n	800a558 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800a540:	b29a      	uxth	r2, r3
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800a54a:	b292      	uxth	r2, r2
 800a54c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800a550:	6878      	ldr	r0, [r7, #4]
 800a552:	f00e fc9a 	bl	8018e8a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800a556:	e011      	b.n	800a57c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d00c      	beq.n	800a57c <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800a56a:	b29a      	uxth	r2, r3
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a574:	b292      	uxth	r2, r2
 800a576:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800a57a:	bf00      	nop
  }
}
 800a57c:	3710      	adds	r7, #16
 800a57e:	46bd      	mov	sp, r7
 800a580:	bd80      	pop	{r7, pc}

0800a582 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800a582:	b580      	push	{r7, lr}
 800a584:	b082      	sub	sp, #8
 800a586:	af00      	add	r7, sp, #0
 800a588:	6078      	str	r0, [r7, #4]
 800a58a:	460b      	mov	r3, r1
 800a58c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800a594:	2b01      	cmp	r3, #1
 800a596:	d101      	bne.n	800a59c <HAL_PCD_SetAddress+0x1a>
 800a598:	2302      	movs	r3, #2
 800a59a:	e012      	b.n	800a5c2 <HAL_PCD_SetAddress+0x40>
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	2201      	movs	r2, #1
 800a5a0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	78fa      	ldrb	r2, [r7, #3]
 800a5a8:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	78fa      	ldrb	r2, [r7, #3]
 800a5b0:	4611      	mov	r1, r2
 800a5b2:	4618      	mov	r0, r3
 800a5b4:	f008 fc36 	bl	8012e24 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	2200      	movs	r2, #0
 800a5bc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800a5c0:	2300      	movs	r3, #0
}
 800a5c2:	4618      	mov	r0, r3
 800a5c4:	3708      	adds	r7, #8
 800a5c6:	46bd      	mov	sp, r7
 800a5c8:	bd80      	pop	{r7, pc}

0800a5ca <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800a5ca:	b580      	push	{r7, lr}
 800a5cc:	b084      	sub	sp, #16
 800a5ce:	af00      	add	r7, sp, #0
 800a5d0:	6078      	str	r0, [r7, #4]
 800a5d2:	4608      	mov	r0, r1
 800a5d4:	4611      	mov	r1, r2
 800a5d6:	461a      	mov	r2, r3
 800a5d8:	4603      	mov	r3, r0
 800a5da:	70fb      	strb	r3, [r7, #3]
 800a5dc:	460b      	mov	r3, r1
 800a5de:	803b      	strh	r3, [r7, #0]
 800a5e0:	4613      	mov	r3, r2
 800a5e2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800a5e4:	2300      	movs	r3, #0
 800a5e6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800a5e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	da0e      	bge.n	800a60e <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a5f0:	78fb      	ldrb	r3, [r7, #3]
 800a5f2:	f003 0207 	and.w	r2, r3, #7
 800a5f6:	4613      	mov	r3, r2
 800a5f8:	009b      	lsls	r3, r3, #2
 800a5fa:	4413      	add	r3, r2
 800a5fc:	00db      	lsls	r3, r3, #3
 800a5fe:	3310      	adds	r3, #16
 800a600:	687a      	ldr	r2, [r7, #4]
 800a602:	4413      	add	r3, r2
 800a604:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	2201      	movs	r2, #1
 800a60a:	705a      	strb	r2, [r3, #1]
 800a60c:	e00e      	b.n	800a62c <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a60e:	78fb      	ldrb	r3, [r7, #3]
 800a610:	f003 0207 	and.w	r2, r3, #7
 800a614:	4613      	mov	r3, r2
 800a616:	009b      	lsls	r3, r3, #2
 800a618:	4413      	add	r3, r2
 800a61a:	00db      	lsls	r3, r3, #3
 800a61c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a620:	687a      	ldr	r2, [r7, #4]
 800a622:	4413      	add	r3, r2
 800a624:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	2200      	movs	r2, #0
 800a62a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800a62c:	78fb      	ldrb	r3, [r7, #3]
 800a62e:	f003 0307 	and.w	r3, r3, #7
 800a632:	b2da      	uxtb	r2, r3
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 800a638:	883b      	ldrh	r3, [r7, #0]
 800a63a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	78ba      	ldrb	r2, [r7, #2]
 800a646:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800a648:	78bb      	ldrb	r3, [r7, #2]
 800a64a:	2b02      	cmp	r3, #2
 800a64c:	d102      	bne.n	800a654 <HAL_PCD_EP_Open+0x8a>
  {
    ep->data_pid_start = 0U;
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	2200      	movs	r2, #0
 800a652:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800a65a:	2b01      	cmp	r3, #1
 800a65c:	d101      	bne.n	800a662 <HAL_PCD_EP_Open+0x98>
 800a65e:	2302      	movs	r3, #2
 800a660:	e00e      	b.n	800a680 <HAL_PCD_EP_Open+0xb6>
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	2201      	movs	r2, #1
 800a666:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	68f9      	ldr	r1, [r7, #12]
 800a670:	4618      	mov	r0, r3
 800a672:	f006 fe59 	bl	8011328 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	2200      	movs	r2, #0
 800a67a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 800a67e:	7afb      	ldrb	r3, [r7, #11]
}
 800a680:	4618      	mov	r0, r3
 800a682:	3710      	adds	r7, #16
 800a684:	46bd      	mov	sp, r7
 800a686:	bd80      	pop	{r7, pc}

0800a688 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a688:	b580      	push	{r7, lr}
 800a68a:	b084      	sub	sp, #16
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	6078      	str	r0, [r7, #4]
 800a690:	460b      	mov	r3, r1
 800a692:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800a694:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a698:	2b00      	cmp	r3, #0
 800a69a:	da0e      	bge.n	800a6ba <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a69c:	78fb      	ldrb	r3, [r7, #3]
 800a69e:	f003 0207 	and.w	r2, r3, #7
 800a6a2:	4613      	mov	r3, r2
 800a6a4:	009b      	lsls	r3, r3, #2
 800a6a6:	4413      	add	r3, r2
 800a6a8:	00db      	lsls	r3, r3, #3
 800a6aa:	3310      	adds	r3, #16
 800a6ac:	687a      	ldr	r2, [r7, #4]
 800a6ae:	4413      	add	r3, r2
 800a6b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	2201      	movs	r2, #1
 800a6b6:	705a      	strb	r2, [r3, #1]
 800a6b8:	e00e      	b.n	800a6d8 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a6ba:	78fb      	ldrb	r3, [r7, #3]
 800a6bc:	f003 0207 	and.w	r2, r3, #7
 800a6c0:	4613      	mov	r3, r2
 800a6c2:	009b      	lsls	r3, r3, #2
 800a6c4:	4413      	add	r3, r2
 800a6c6:	00db      	lsls	r3, r3, #3
 800a6c8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a6cc:	687a      	ldr	r2, [r7, #4]
 800a6ce:	4413      	add	r3, r2
 800a6d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	2200      	movs	r2, #0
 800a6d6:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800a6d8:	78fb      	ldrb	r3, [r7, #3]
 800a6da:	f003 0307 	and.w	r3, r3, #7
 800a6de:	b2da      	uxtb	r2, r3
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800a6ea:	2b01      	cmp	r3, #1
 800a6ec:	d101      	bne.n	800a6f2 <HAL_PCD_EP_Close+0x6a>
 800a6ee:	2302      	movs	r3, #2
 800a6f0:	e00e      	b.n	800a710 <HAL_PCD_EP_Close+0x88>
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	2201      	movs	r2, #1
 800a6f6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	68f9      	ldr	r1, [r7, #12]
 800a700:	4618      	mov	r0, r3
 800a702:	f007 faf9 	bl	8011cf8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	2200      	movs	r2, #0
 800a70a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 800a70e:	2300      	movs	r3, #0
}
 800a710:	4618      	mov	r0, r3
 800a712:	3710      	adds	r7, #16
 800a714:	46bd      	mov	sp, r7
 800a716:	bd80      	pop	{r7, pc}

0800a718 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800a718:	b580      	push	{r7, lr}
 800a71a:	b086      	sub	sp, #24
 800a71c:	af00      	add	r7, sp, #0
 800a71e:	60f8      	str	r0, [r7, #12]
 800a720:	607a      	str	r2, [r7, #4]
 800a722:	603b      	str	r3, [r7, #0]
 800a724:	460b      	mov	r3, r1
 800a726:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a728:	7afb      	ldrb	r3, [r7, #11]
 800a72a:	f003 0207 	and.w	r2, r3, #7
 800a72e:	4613      	mov	r3, r2
 800a730:	009b      	lsls	r3, r3, #2
 800a732:	4413      	add	r3, r2
 800a734:	00db      	lsls	r3, r3, #3
 800a736:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a73a:	68fa      	ldr	r2, [r7, #12]
 800a73c:	4413      	add	r3, r2
 800a73e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800a740:	697b      	ldr	r3, [r7, #20]
 800a742:	687a      	ldr	r2, [r7, #4]
 800a744:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800a746:	697b      	ldr	r3, [r7, #20]
 800a748:	683a      	ldr	r2, [r7, #0]
 800a74a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800a74c:	697b      	ldr	r3, [r7, #20]
 800a74e:	2200      	movs	r2, #0
 800a750:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800a752:	697b      	ldr	r3, [r7, #20]
 800a754:	2200      	movs	r2, #0
 800a756:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a758:	7afb      	ldrb	r3, [r7, #11]
 800a75a:	f003 0307 	and.w	r3, r3, #7
 800a75e:	b2da      	uxtb	r2, r3
 800a760:	697b      	ldr	r3, [r7, #20]
 800a762:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	6979      	ldr	r1, [r7, #20]
 800a76a:	4618      	mov	r0, r3
 800a76c:	f007 fcb1 	bl	80120d2 <USB_EPStartXfer>

  return HAL_OK;
 800a770:	2300      	movs	r3, #0
}
 800a772:	4618      	mov	r0, r3
 800a774:	3718      	adds	r7, #24
 800a776:	46bd      	mov	sp, r7
 800a778:	bd80      	pop	{r7, pc}

0800a77a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800a77a:	b480      	push	{r7}
 800a77c:	b083      	sub	sp, #12
 800a77e:	af00      	add	r7, sp, #0
 800a780:	6078      	str	r0, [r7, #4]
 800a782:	460b      	mov	r3, r1
 800a784:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800a786:	78fb      	ldrb	r3, [r7, #3]
 800a788:	f003 0207 	and.w	r2, r3, #7
 800a78c:	6879      	ldr	r1, [r7, #4]
 800a78e:	4613      	mov	r3, r2
 800a790:	009b      	lsls	r3, r3, #2
 800a792:	4413      	add	r3, r2
 800a794:	00db      	lsls	r3, r3, #3
 800a796:	440b      	add	r3, r1
 800a798:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 800a79c:	681b      	ldr	r3, [r3, #0]
}
 800a79e:	4618      	mov	r0, r3
 800a7a0:	370c      	adds	r7, #12
 800a7a2:	46bd      	mov	sp, r7
 800a7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a8:	4770      	bx	lr

0800a7aa <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800a7aa:	b580      	push	{r7, lr}
 800a7ac:	b086      	sub	sp, #24
 800a7ae:	af00      	add	r7, sp, #0
 800a7b0:	60f8      	str	r0, [r7, #12]
 800a7b2:	607a      	str	r2, [r7, #4]
 800a7b4:	603b      	str	r3, [r7, #0]
 800a7b6:	460b      	mov	r3, r1
 800a7b8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a7ba:	7afb      	ldrb	r3, [r7, #11]
 800a7bc:	f003 0207 	and.w	r2, r3, #7
 800a7c0:	4613      	mov	r3, r2
 800a7c2:	009b      	lsls	r3, r3, #2
 800a7c4:	4413      	add	r3, r2
 800a7c6:	00db      	lsls	r3, r3, #3
 800a7c8:	3310      	adds	r3, #16
 800a7ca:	68fa      	ldr	r2, [r7, #12]
 800a7cc:	4413      	add	r3, r2
 800a7ce:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800a7d0:	697b      	ldr	r3, [r7, #20]
 800a7d2:	687a      	ldr	r2, [r7, #4]
 800a7d4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800a7d6:	697b      	ldr	r3, [r7, #20]
 800a7d8:	683a      	ldr	r2, [r7, #0]
 800a7da:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800a7dc:	697b      	ldr	r3, [r7, #20]
 800a7de:	2201      	movs	r2, #1
 800a7e0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 800a7e4:	697b      	ldr	r3, [r7, #20]
 800a7e6:	683a      	ldr	r2, [r7, #0]
 800a7e8:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800a7ea:	697b      	ldr	r3, [r7, #20]
 800a7ec:	2200      	movs	r2, #0
 800a7ee:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800a7f0:	697b      	ldr	r3, [r7, #20]
 800a7f2:	2201      	movs	r2, #1
 800a7f4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a7f6:	7afb      	ldrb	r3, [r7, #11]
 800a7f8:	f003 0307 	and.w	r3, r3, #7
 800a7fc:	b2da      	uxtb	r2, r3
 800a7fe:	697b      	ldr	r3, [r7, #20]
 800a800:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	6979      	ldr	r1, [r7, #20]
 800a808:	4618      	mov	r0, r3
 800a80a:	f007 fc62 	bl	80120d2 <USB_EPStartXfer>

  return HAL_OK;
 800a80e:	2300      	movs	r3, #0
}
 800a810:	4618      	mov	r0, r3
 800a812:	3718      	adds	r7, #24
 800a814:	46bd      	mov	sp, r7
 800a816:	bd80      	pop	{r7, pc}

0800a818 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a818:	b580      	push	{r7, lr}
 800a81a:	b084      	sub	sp, #16
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	6078      	str	r0, [r7, #4]
 800a820:	460b      	mov	r3, r1
 800a822:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800a824:	78fb      	ldrb	r3, [r7, #3]
 800a826:	f003 0307 	and.w	r3, r3, #7
 800a82a:	687a      	ldr	r2, [r7, #4]
 800a82c:	7912      	ldrb	r2, [r2, #4]
 800a82e:	4293      	cmp	r3, r2
 800a830:	d901      	bls.n	800a836 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800a832:	2301      	movs	r3, #1
 800a834:	e03e      	b.n	800a8b4 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800a836:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	da0e      	bge.n	800a85c <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a83e:	78fb      	ldrb	r3, [r7, #3]
 800a840:	f003 0207 	and.w	r2, r3, #7
 800a844:	4613      	mov	r3, r2
 800a846:	009b      	lsls	r3, r3, #2
 800a848:	4413      	add	r3, r2
 800a84a:	00db      	lsls	r3, r3, #3
 800a84c:	3310      	adds	r3, #16
 800a84e:	687a      	ldr	r2, [r7, #4]
 800a850:	4413      	add	r3, r2
 800a852:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	2201      	movs	r2, #1
 800a858:	705a      	strb	r2, [r3, #1]
 800a85a:	e00c      	b.n	800a876 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800a85c:	78fa      	ldrb	r2, [r7, #3]
 800a85e:	4613      	mov	r3, r2
 800a860:	009b      	lsls	r3, r3, #2
 800a862:	4413      	add	r3, r2
 800a864:	00db      	lsls	r3, r3, #3
 800a866:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a86a:	687a      	ldr	r2, [r7, #4]
 800a86c:	4413      	add	r3, r2
 800a86e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	2200      	movs	r2, #0
 800a874:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	2201      	movs	r2, #1
 800a87a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a87c:	78fb      	ldrb	r3, [r7, #3]
 800a87e:	f003 0307 	and.w	r3, r3, #7
 800a882:	b2da      	uxtb	r2, r3
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800a88e:	2b01      	cmp	r3, #1
 800a890:	d101      	bne.n	800a896 <HAL_PCD_EP_SetStall+0x7e>
 800a892:	2302      	movs	r3, #2
 800a894:	e00e      	b.n	800a8b4 <HAL_PCD_EP_SetStall+0x9c>
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	2201      	movs	r2, #1
 800a89a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	68f9      	ldr	r1, [r7, #12]
 800a8a4:	4618      	mov	r0, r3
 800a8a6:	f008 f9c3 	bl	8012c30 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	2200      	movs	r2, #0
 800a8ae:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800a8b2:	2300      	movs	r3, #0
}
 800a8b4:	4618      	mov	r0, r3
 800a8b6:	3710      	adds	r7, #16
 800a8b8:	46bd      	mov	sp, r7
 800a8ba:	bd80      	pop	{r7, pc}

0800a8bc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a8bc:	b580      	push	{r7, lr}
 800a8be:	b084      	sub	sp, #16
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	6078      	str	r0, [r7, #4]
 800a8c4:	460b      	mov	r3, r1
 800a8c6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800a8c8:	78fb      	ldrb	r3, [r7, #3]
 800a8ca:	f003 030f 	and.w	r3, r3, #15
 800a8ce:	687a      	ldr	r2, [r7, #4]
 800a8d0:	7912      	ldrb	r2, [r2, #4]
 800a8d2:	4293      	cmp	r3, r2
 800a8d4:	d901      	bls.n	800a8da <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800a8d6:	2301      	movs	r3, #1
 800a8d8:	e040      	b.n	800a95c <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800a8da:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	da0e      	bge.n	800a900 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a8e2:	78fb      	ldrb	r3, [r7, #3]
 800a8e4:	f003 0207 	and.w	r2, r3, #7
 800a8e8:	4613      	mov	r3, r2
 800a8ea:	009b      	lsls	r3, r3, #2
 800a8ec:	4413      	add	r3, r2
 800a8ee:	00db      	lsls	r3, r3, #3
 800a8f0:	3310      	adds	r3, #16
 800a8f2:	687a      	ldr	r2, [r7, #4]
 800a8f4:	4413      	add	r3, r2
 800a8f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	2201      	movs	r2, #1
 800a8fc:	705a      	strb	r2, [r3, #1]
 800a8fe:	e00e      	b.n	800a91e <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a900:	78fb      	ldrb	r3, [r7, #3]
 800a902:	f003 0207 	and.w	r2, r3, #7
 800a906:	4613      	mov	r3, r2
 800a908:	009b      	lsls	r3, r3, #2
 800a90a:	4413      	add	r3, r2
 800a90c:	00db      	lsls	r3, r3, #3
 800a90e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a912:	687a      	ldr	r2, [r7, #4]
 800a914:	4413      	add	r3, r2
 800a916:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	2200      	movs	r2, #0
 800a91c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	2200      	movs	r2, #0
 800a922:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a924:	78fb      	ldrb	r3, [r7, #3]
 800a926:	f003 0307 	and.w	r3, r3, #7
 800a92a:	b2da      	uxtb	r2, r3
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800a936:	2b01      	cmp	r3, #1
 800a938:	d101      	bne.n	800a93e <HAL_PCD_EP_ClrStall+0x82>
 800a93a:	2302      	movs	r3, #2
 800a93c:	e00e      	b.n	800a95c <HAL_PCD_EP_ClrStall+0xa0>
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	2201      	movs	r2, #1
 800a942:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	68f9      	ldr	r1, [r7, #12]
 800a94c:	4618      	mov	r0, r3
 800a94e:	f008 f9c0 	bl	8012cd2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	2200      	movs	r2, #0
 800a956:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800a95a:	2300      	movs	r3, #0
}
 800a95c:	4618      	mov	r0, r3
 800a95e:	3710      	adds	r7, #16
 800a960:	46bd      	mov	sp, r7
 800a962:	bd80      	pop	{r7, pc}

0800a964 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800a964:	b580      	push	{r7, lr}
 800a966:	b092      	sub	sp, #72	@ 0x48
 800a968:	af00      	add	r7, sp, #0
 800a96a:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800a96c:	e333      	b.n	800afd6 <PCD_EP_ISR_Handler+0x672>
  {
    wIstr = hpcd->Instance->ISTR;
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800a976:	877b      	strh	r3, [r7, #58]	@ 0x3a

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800a978:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800a97a:	b2db      	uxtb	r3, r3
 800a97c:	f003 030f 	and.w	r3, r3, #15
 800a980:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39

    if (epindex == 0U)
 800a984:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800a988:	2b00      	cmp	r3, #0
 800a98a:	f040 8108 	bne.w	800ab9e <PCD_EP_ISR_Handler+0x23a>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800a98e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800a990:	f003 0310 	and.w	r3, r3, #16
 800a994:	2b00      	cmp	r3, #0
 800a996:	d14c      	bne.n	800aa32 <PCD_EP_ISR_Handler+0xce>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	881b      	ldrh	r3, [r3, #0]
 800a99e:	b29b      	uxth	r3, r3
 800a9a0:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800a9a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a9a8:	813b      	strh	r3, [r7, #8]
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	681a      	ldr	r2, [r3, #0]
 800a9ae:	893b      	ldrh	r3, [r7, #8]
 800a9b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a9b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a9b8:	b29b      	uxth	r3, r3
 800a9ba:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	3310      	adds	r3, #16
 800a9c0:	643b      	str	r3, [r7, #64]	@ 0x40

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a9ca:	b29b      	uxth	r3, r3
 800a9cc:	461a      	mov	r2, r3
 800a9ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a9d0:	781b      	ldrb	r3, [r3, #0]
 800a9d2:	00db      	lsls	r3, r3, #3
 800a9d4:	4413      	add	r3, r2
 800a9d6:	687a      	ldr	r2, [r7, #4]
 800a9d8:	6812      	ldr	r2, [r2, #0]
 800a9da:	4413      	add	r3, r2
 800a9dc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a9e0:	881b      	ldrh	r3, [r3, #0]
 800a9e2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800a9e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a9e8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800a9ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a9ec:	695a      	ldr	r2, [r3, #20]
 800a9ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a9f0:	69db      	ldr	r3, [r3, #28]
 800a9f2:	441a      	add	r2, r3
 800a9f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a9f6:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800a9f8:	2100      	movs	r1, #0
 800a9fa:	6878      	ldr	r0, [r7, #4]
 800a9fc:	f00e fa2b 	bl	8018e56 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	7b1b      	ldrb	r3, [r3, #12]
 800aa04:	b2db      	uxtb	r3, r3
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	f000 82e5 	beq.w	800afd6 <PCD_EP_ISR_Handler+0x672>
 800aa0c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aa0e:	699b      	ldr	r3, [r3, #24]
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	f040 82e0 	bne.w	800afd6 <PCD_EP_ISR_Handler+0x672>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	7b1b      	ldrb	r3, [r3, #12]
 800aa1a:	b2db      	uxtb	r3, r3
 800aa1c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800aa20:	b2da      	uxtb	r2, r3
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	2200      	movs	r2, #0
 800aa2e:	731a      	strb	r2, [r3, #12]
 800aa30:	e2d1      	b.n	800afd6 <PCD_EP_ISR_Handler+0x672>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800aa38:	643b      	str	r3, [r7, #64]	@ 0x40
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	881b      	ldrh	r3, [r3, #0]
 800aa40:	86fb      	strh	r3, [r7, #54]	@ 0x36

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800aa42:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800aa44:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d032      	beq.n	800aab2 <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800aa54:	b29b      	uxth	r3, r3
 800aa56:	461a      	mov	r2, r3
 800aa58:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aa5a:	781b      	ldrb	r3, [r3, #0]
 800aa5c:	00db      	lsls	r3, r3, #3
 800aa5e:	4413      	add	r3, r2
 800aa60:	687a      	ldr	r2, [r7, #4]
 800aa62:	6812      	ldr	r2, [r2, #0]
 800aa64:	4413      	add	r3, r2
 800aa66:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800aa6a:	881b      	ldrh	r3, [r3, #0]
 800aa6c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800aa70:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aa72:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	6818      	ldr	r0, [r3, #0]
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 800aa7e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aa80:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800aa82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aa84:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800aa86:	b29b      	uxth	r3, r3
 800aa88:	f008 fa49 	bl	8012f1e <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	881b      	ldrh	r3, [r3, #0]
 800aa92:	b29a      	uxth	r2, r3
 800aa94:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800aa98:	4013      	ands	r3, r2
 800aa9a:	817b      	strh	r3, [r7, #10]
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	897a      	ldrh	r2, [r7, #10]
 800aaa2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800aaa6:	b292      	uxth	r2, r2
 800aaa8:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800aaaa:	6878      	ldr	r0, [r7, #4]
 800aaac:	f00e f9a6 	bl	8018dfc <HAL_PCD_SetupStageCallback>
 800aab0:	e291      	b.n	800afd6 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800aab2:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	f280 828d 	bge.w	800afd6 <PCD_EP_ISR_Handler+0x672>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	881b      	ldrh	r3, [r3, #0]
 800aac2:	b29a      	uxth	r2, r3
 800aac4:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800aac8:	4013      	ands	r3, r2
 800aaca:	81fb      	strh	r3, [r7, #14]
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	89fa      	ldrh	r2, [r7, #14]
 800aad2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800aad6:	b292      	uxth	r2, r2
 800aad8:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800aae2:	b29b      	uxth	r3, r3
 800aae4:	461a      	mov	r2, r3
 800aae6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aae8:	781b      	ldrb	r3, [r3, #0]
 800aaea:	00db      	lsls	r3, r3, #3
 800aaec:	4413      	add	r3, r2
 800aaee:	687a      	ldr	r2, [r7, #4]
 800aaf0:	6812      	ldr	r2, [r2, #0]
 800aaf2:	4413      	add	r3, r2
 800aaf4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800aaf8:	881b      	ldrh	r3, [r3, #0]
 800aafa:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800aafe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ab00:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800ab02:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ab04:	69db      	ldr	r3, [r3, #28]
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d019      	beq.n	800ab3e <PCD_EP_ISR_Handler+0x1da>
 800ab0a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ab0c:	695b      	ldr	r3, [r3, #20]
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d015      	beq.n	800ab3e <PCD_EP_ISR_Handler+0x1da>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	6818      	ldr	r0, [r3, #0]
 800ab16:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ab18:	6959      	ldr	r1, [r3, #20]
 800ab1a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ab1c:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800ab1e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ab20:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800ab22:	b29b      	uxth	r3, r3
 800ab24:	f008 f9fb 	bl	8012f1e <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800ab28:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ab2a:	695a      	ldr	r2, [r3, #20]
 800ab2c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ab2e:	69db      	ldr	r3, [r3, #28]
 800ab30:	441a      	add	r2, r3
 800ab32:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ab34:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800ab36:	2100      	movs	r1, #0
 800ab38:	6878      	ldr	r0, [r7, #4]
 800ab3a:	f00e f971 	bl	8018e20 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	881b      	ldrh	r3, [r3, #0]
 800ab44:	86fb      	strh	r3, [r7, #54]	@ 0x36

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800ab46:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800ab48:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	f040 8242 	bne.w	800afd6 <PCD_EP_ISR_Handler+0x672>
 800ab52:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800ab54:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800ab58:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800ab5c:	f000 823b 	beq.w	800afd6 <PCD_EP_ISR_Handler+0x672>
          {
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	881b      	ldrh	r3, [r3, #0]
 800ab66:	b29b      	uxth	r3, r3
 800ab68:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ab6c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ab70:	81bb      	strh	r3, [r7, #12]
 800ab72:	89bb      	ldrh	r3, [r7, #12]
 800ab74:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800ab78:	81bb      	strh	r3, [r7, #12]
 800ab7a:	89bb      	ldrh	r3, [r7, #12]
 800ab7c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800ab80:	81bb      	strh	r3, [r7, #12]
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	681a      	ldr	r2, [r3, #0]
 800ab86:	89bb      	ldrh	r3, [r7, #12]
 800ab88:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ab8c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ab90:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ab94:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ab98:	b29b      	uxth	r3, r3
 800ab9a:	8013      	strh	r3, [r2, #0]
 800ab9c:	e21b      	b.n	800afd6 <PCD_EP_ISR_Handler+0x672>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	461a      	mov	r2, r3
 800aba4:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800aba8:	009b      	lsls	r3, r3, #2
 800abaa:	4413      	add	r3, r2
 800abac:	881b      	ldrh	r3, [r3, #0]
 800abae:	86fb      	strh	r3, [r7, #54]	@ 0x36

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800abb0:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	f280 80f1 	bge.w	800ad9c <PCD_EP_ISR_Handler+0x438>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	461a      	mov	r2, r3
 800abc0:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800abc4:	009b      	lsls	r3, r3, #2
 800abc6:	4413      	add	r3, r2
 800abc8:	881b      	ldrh	r3, [r3, #0]
 800abca:	b29a      	uxth	r2, r3
 800abcc:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800abd0:	4013      	ands	r3, r2
 800abd2:	86bb      	strh	r3, [r7, #52]	@ 0x34
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	461a      	mov	r2, r3
 800abda:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800abde:	009b      	lsls	r3, r3, #2
 800abe0:	4413      	add	r3, r2
 800abe2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800abe4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800abe8:	b292      	uxth	r2, r2
 800abea:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800abec:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 800abf0:	4613      	mov	r3, r2
 800abf2:	009b      	lsls	r3, r3, #2
 800abf4:	4413      	add	r3, r2
 800abf6:	00db      	lsls	r3, r3, #3
 800abf8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800abfc:	687a      	ldr	r2, [r7, #4]
 800abfe:	4413      	add	r3, r2
 800ac00:	643b      	str	r3, [r7, #64]	@ 0x40

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800ac02:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ac04:	7b1b      	ldrb	r3, [r3, #12]
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d123      	bne.n	800ac52 <PCD_EP_ISR_Handler+0x2ee>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ac12:	b29b      	uxth	r3, r3
 800ac14:	461a      	mov	r2, r3
 800ac16:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ac18:	781b      	ldrb	r3, [r3, #0]
 800ac1a:	00db      	lsls	r3, r3, #3
 800ac1c:	4413      	add	r3, r2
 800ac1e:	687a      	ldr	r2, [r7, #4]
 800ac20:	6812      	ldr	r2, [r2, #0]
 800ac22:	4413      	add	r3, r2
 800ac24:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800ac28:	881b      	ldrh	r3, [r3, #0]
 800ac2a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ac2e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

          if (count != 0U)
 800ac32:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	f000 808b 	beq.w	800ad52 <PCD_EP_ISR_Handler+0x3ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	6818      	ldr	r0, [r3, #0]
 800ac40:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ac42:	6959      	ldr	r1, [r3, #20]
 800ac44:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ac46:	88da      	ldrh	r2, [r3, #6]
 800ac48:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800ac4c:	f008 f967 	bl	8012f1e <USB_ReadPMA>
 800ac50:	e07f      	b.n	800ad52 <PCD_EP_ISR_Handler+0x3ee>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800ac52:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ac54:	78db      	ldrb	r3, [r3, #3]
 800ac56:	2b02      	cmp	r3, #2
 800ac58:	d109      	bne.n	800ac6e <PCD_EP_ISR_Handler+0x30a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800ac5a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800ac5c:	461a      	mov	r2, r3
 800ac5e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ac60:	6878      	ldr	r0, [r7, #4]
 800ac62:	f000 f9c6 	bl	800aff2 <HAL_PCD_EP_DB_Receive>
 800ac66:	4603      	mov	r3, r0
 800ac68:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800ac6c:	e071      	b.n	800ad52 <PCD_EP_ISR_Handler+0x3ee>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	461a      	mov	r2, r3
 800ac74:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ac76:	781b      	ldrb	r3, [r3, #0]
 800ac78:	009b      	lsls	r3, r3, #2
 800ac7a:	4413      	add	r3, r2
 800ac7c:	881b      	ldrh	r3, [r3, #0]
 800ac7e:	b29b      	uxth	r3, r3
 800ac80:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ac84:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ac88:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	461a      	mov	r2, r3
 800ac90:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ac92:	781b      	ldrb	r3, [r3, #0]
 800ac94:	009b      	lsls	r3, r3, #2
 800ac96:	441a      	add	r2, r3
 800ac98:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800ac9a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ac9e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800aca2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800aca6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800acaa:	b29b      	uxth	r3, r3
 800acac:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	461a      	mov	r2, r3
 800acb4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800acb6:	781b      	ldrb	r3, [r3, #0]
 800acb8:	009b      	lsls	r3, r3, #2
 800acba:	4413      	add	r3, r2
 800acbc:	881b      	ldrh	r3, [r3, #0]
 800acbe:	b29b      	uxth	r3, r3
 800acc0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d022      	beq.n	800ad0e <PCD_EP_ISR_Handler+0x3aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800acd0:	b29b      	uxth	r3, r3
 800acd2:	461a      	mov	r2, r3
 800acd4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800acd6:	781b      	ldrb	r3, [r3, #0]
 800acd8:	00db      	lsls	r3, r3, #3
 800acda:	4413      	add	r3, r2
 800acdc:	687a      	ldr	r2, [r7, #4]
 800acde:	6812      	ldr	r2, [r2, #0]
 800ace0:	4413      	add	r3, r2
 800ace2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800ace6:	881b      	ldrh	r3, [r3, #0]
 800ace8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800acec:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 800acf0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d02c      	beq.n	800ad52 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	6818      	ldr	r0, [r3, #0]
 800acfc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800acfe:	6959      	ldr	r1, [r3, #20]
 800ad00:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ad02:	891a      	ldrh	r2, [r3, #8]
 800ad04:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800ad08:	f008 f909 	bl	8012f1e <USB_ReadPMA>
 800ad0c:	e021      	b.n	800ad52 <PCD_EP_ISR_Handler+0x3ee>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ad16:	b29b      	uxth	r3, r3
 800ad18:	461a      	mov	r2, r3
 800ad1a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ad1c:	781b      	ldrb	r3, [r3, #0]
 800ad1e:	00db      	lsls	r3, r3, #3
 800ad20:	4413      	add	r3, r2
 800ad22:	687a      	ldr	r2, [r7, #4]
 800ad24:	6812      	ldr	r2, [r2, #0]
 800ad26:	4413      	add	r3, r2
 800ad28:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800ad2c:	881b      	ldrh	r3, [r3, #0]
 800ad2e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ad32:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 800ad36:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d009      	beq.n	800ad52 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	6818      	ldr	r0, [r3, #0]
 800ad42:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ad44:	6959      	ldr	r1, [r3, #20]
 800ad46:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ad48:	895a      	ldrh	r2, [r3, #10]
 800ad4a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800ad4e:	f008 f8e6 	bl	8012f1e <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800ad52:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ad54:	69da      	ldr	r2, [r3, #28]
 800ad56:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800ad5a:	441a      	add	r2, r3
 800ad5c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ad5e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800ad60:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ad62:	695a      	ldr	r2, [r3, #20]
 800ad64:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800ad68:	441a      	add	r2, r3
 800ad6a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ad6c:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800ad6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ad70:	699b      	ldr	r3, [r3, #24]
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d005      	beq.n	800ad82 <PCD_EP_ISR_Handler+0x41e>
 800ad76:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800ad7a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ad7c:	691b      	ldr	r3, [r3, #16]
 800ad7e:	429a      	cmp	r2, r3
 800ad80:	d206      	bcs.n	800ad90 <PCD_EP_ISR_Handler+0x42c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800ad82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ad84:	781b      	ldrb	r3, [r3, #0]
 800ad86:	4619      	mov	r1, r3
 800ad88:	6878      	ldr	r0, [r7, #4]
 800ad8a:	f00e f849 	bl	8018e20 <HAL_PCD_DataOutStageCallback>
 800ad8e:	e005      	b.n	800ad9c <PCD_EP_ISR_Handler+0x438>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ad96:	4618      	mov	r0, r3
 800ad98:	f007 f99b 	bl	80120d2 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800ad9c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800ad9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	f000 8117 	beq.w	800afd6 <PCD_EP_ISR_Handler+0x672>
      {
        ep = &hpcd->IN_ep[epindex];
 800ada8:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 800adac:	4613      	mov	r3, r2
 800adae:	009b      	lsls	r3, r3, #2
 800adb0:	4413      	add	r3, r2
 800adb2:	00db      	lsls	r3, r3, #3
 800adb4:	3310      	adds	r3, #16
 800adb6:	687a      	ldr	r2, [r7, #4]
 800adb8:	4413      	add	r3, r2
 800adba:	643b      	str	r3, [r7, #64]	@ 0x40

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	461a      	mov	r2, r3
 800adc2:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800adc6:	009b      	lsls	r3, r3, #2
 800adc8:	4413      	add	r3, r2
 800adca:	881b      	ldrh	r3, [r3, #0]
 800adcc:	b29b      	uxth	r3, r3
 800adce:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800add2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800add6:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	461a      	mov	r2, r3
 800adde:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800ade2:	009b      	lsls	r3, r3, #2
 800ade4:	441a      	add	r2, r3
 800ade6:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800ade8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800adec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800adf0:	b29b      	uxth	r3, r3
 800adf2:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 800adf4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800adf6:	78db      	ldrb	r3, [r3, #3]
 800adf8:	2b01      	cmp	r3, #1
 800adfa:	f040 80a1 	bne.w	800af40 <PCD_EP_ISR_Handler+0x5dc>
        {
          ep->xfer_len = 0U;
 800adfe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ae00:	2200      	movs	r2, #0
 800ae02:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800ae04:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ae06:	7b1b      	ldrb	r3, [r3, #12]
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	f000 8092 	beq.w	800af32 <PCD_EP_ISR_Handler+0x5ce>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800ae0e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800ae10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d046      	beq.n	800aea6 <PCD_EP_ISR_Handler+0x542>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800ae18:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ae1a:	785b      	ldrb	r3, [r3, #1]
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d126      	bne.n	800ae6e <PCD_EP_ISR_Handler+0x50a>
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	617b      	str	r3, [r7, #20]
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ae2e:	b29b      	uxth	r3, r3
 800ae30:	461a      	mov	r2, r3
 800ae32:	697b      	ldr	r3, [r7, #20]
 800ae34:	4413      	add	r3, r2
 800ae36:	617b      	str	r3, [r7, #20]
 800ae38:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ae3a:	781b      	ldrb	r3, [r3, #0]
 800ae3c:	00da      	lsls	r2, r3, #3
 800ae3e:	697b      	ldr	r3, [r7, #20]
 800ae40:	4413      	add	r3, r2
 800ae42:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800ae46:	613b      	str	r3, [r7, #16]
 800ae48:	693b      	ldr	r3, [r7, #16]
 800ae4a:	881b      	ldrh	r3, [r3, #0]
 800ae4c:	b29b      	uxth	r3, r3
 800ae4e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ae52:	b29a      	uxth	r2, r3
 800ae54:	693b      	ldr	r3, [r7, #16]
 800ae56:	801a      	strh	r2, [r3, #0]
 800ae58:	693b      	ldr	r3, [r7, #16]
 800ae5a:	881b      	ldrh	r3, [r3, #0]
 800ae5c:	b29b      	uxth	r3, r3
 800ae5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ae62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ae66:	b29a      	uxth	r2, r3
 800ae68:	693b      	ldr	r3, [r7, #16]
 800ae6a:	801a      	strh	r2, [r3, #0]
 800ae6c:	e061      	b.n	800af32 <PCD_EP_ISR_Handler+0x5ce>
 800ae6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ae70:	785b      	ldrb	r3, [r3, #1]
 800ae72:	2b01      	cmp	r3, #1
 800ae74:	d15d      	bne.n	800af32 <PCD_EP_ISR_Handler+0x5ce>
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	61fb      	str	r3, [r7, #28]
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ae84:	b29b      	uxth	r3, r3
 800ae86:	461a      	mov	r2, r3
 800ae88:	69fb      	ldr	r3, [r7, #28]
 800ae8a:	4413      	add	r3, r2
 800ae8c:	61fb      	str	r3, [r7, #28]
 800ae8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ae90:	781b      	ldrb	r3, [r3, #0]
 800ae92:	00da      	lsls	r2, r3, #3
 800ae94:	69fb      	ldr	r3, [r7, #28]
 800ae96:	4413      	add	r3, r2
 800ae98:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800ae9c:	61bb      	str	r3, [r7, #24]
 800ae9e:	69bb      	ldr	r3, [r7, #24]
 800aea0:	2200      	movs	r2, #0
 800aea2:	801a      	strh	r2, [r3, #0]
 800aea4:	e045      	b.n	800af32 <PCD_EP_ISR_Handler+0x5ce>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800aeac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aeae:	785b      	ldrb	r3, [r3, #1]
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d126      	bne.n	800af02 <PCD_EP_ISR_Handler+0x59e>
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	627b      	str	r3, [r7, #36]	@ 0x24
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800aec2:	b29b      	uxth	r3, r3
 800aec4:	461a      	mov	r2, r3
 800aec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aec8:	4413      	add	r3, r2
 800aeca:	627b      	str	r3, [r7, #36]	@ 0x24
 800aecc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aece:	781b      	ldrb	r3, [r3, #0]
 800aed0:	00da      	lsls	r2, r3, #3
 800aed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aed4:	4413      	add	r3, r2
 800aed6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800aeda:	623b      	str	r3, [r7, #32]
 800aedc:	6a3b      	ldr	r3, [r7, #32]
 800aede:	881b      	ldrh	r3, [r3, #0]
 800aee0:	b29b      	uxth	r3, r3
 800aee2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800aee6:	b29a      	uxth	r2, r3
 800aee8:	6a3b      	ldr	r3, [r7, #32]
 800aeea:	801a      	strh	r2, [r3, #0]
 800aeec:	6a3b      	ldr	r3, [r7, #32]
 800aeee:	881b      	ldrh	r3, [r3, #0]
 800aef0:	b29b      	uxth	r3, r3
 800aef2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aef6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aefa:	b29a      	uxth	r2, r3
 800aefc:	6a3b      	ldr	r3, [r7, #32]
 800aefe:	801a      	strh	r2, [r3, #0]
 800af00:	e017      	b.n	800af32 <PCD_EP_ISR_Handler+0x5ce>
 800af02:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800af04:	785b      	ldrb	r3, [r3, #1]
 800af06:	2b01      	cmp	r3, #1
 800af08:	d113      	bne.n	800af32 <PCD_EP_ISR_Handler+0x5ce>
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800af12:	b29b      	uxth	r3, r3
 800af14:	461a      	mov	r2, r3
 800af16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af18:	4413      	add	r3, r2
 800af1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800af1c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800af1e:	781b      	ldrb	r3, [r3, #0]
 800af20:	00da      	lsls	r2, r3, #3
 800af22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af24:	4413      	add	r3, r2
 800af26:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800af2a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800af2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af2e:	2200      	movs	r2, #0
 800af30:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800af32:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800af34:	781b      	ldrb	r3, [r3, #0]
 800af36:	4619      	mov	r1, r3
 800af38:	6878      	ldr	r0, [r7, #4]
 800af3a:	f00d ff8c 	bl	8018e56 <HAL_PCD_DataInStageCallback>
 800af3e:	e04a      	b.n	800afd6 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800af40:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800af42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800af46:	2b00      	cmp	r3, #0
 800af48:	d13f      	bne.n	800afca <PCD_EP_ISR_Handler+0x666>
          {
            /* Multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800af52:	b29b      	uxth	r3, r3
 800af54:	461a      	mov	r2, r3
 800af56:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800af58:	781b      	ldrb	r3, [r3, #0]
 800af5a:	00db      	lsls	r3, r3, #3
 800af5c:	4413      	add	r3, r2
 800af5e:	687a      	ldr	r2, [r7, #4]
 800af60:	6812      	ldr	r2, [r2, #0]
 800af62:	4413      	add	r3, r2
 800af64:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800af68:	881b      	ldrh	r3, [r3, #0]
 800af6a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800af6e:	867b      	strh	r3, [r7, #50]	@ 0x32

            if (ep->xfer_len > TxPctSize)
 800af70:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800af72:	699a      	ldr	r2, [r3, #24]
 800af74:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800af76:	429a      	cmp	r2, r3
 800af78:	d906      	bls.n	800af88 <PCD_EP_ISR_Handler+0x624>
            {
              ep->xfer_len -= TxPctSize;
 800af7a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800af7c:	699a      	ldr	r2, [r3, #24]
 800af7e:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800af80:	1ad2      	subs	r2, r2, r3
 800af82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800af84:	619a      	str	r2, [r3, #24]
 800af86:	e002      	b.n	800af8e <PCD_EP_ISR_Handler+0x62a>
            }
            else
            {
              ep->xfer_len = 0U;
 800af88:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800af8a:	2200      	movs	r2, #0
 800af8c:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800af8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800af90:	699b      	ldr	r3, [r3, #24]
 800af92:	2b00      	cmp	r3, #0
 800af94:	d106      	bne.n	800afa4 <PCD_EP_ISR_Handler+0x640>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800af96:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800af98:	781b      	ldrb	r3, [r3, #0]
 800af9a:	4619      	mov	r1, r3
 800af9c:	6878      	ldr	r0, [r7, #4]
 800af9e:	f00d ff5a 	bl	8018e56 <HAL_PCD_DataInStageCallback>
 800afa2:	e018      	b.n	800afd6 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800afa4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800afa6:	695a      	ldr	r2, [r3, #20]
 800afa8:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800afaa:	441a      	add	r2, r3
 800afac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800afae:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800afb0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800afb2:	69da      	ldr	r2, [r3, #28]
 800afb4:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800afb6:	441a      	add	r2, r3
 800afb8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800afba:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800afc2:	4618      	mov	r0, r3
 800afc4:	f007 f885 	bl	80120d2 <USB_EPStartXfer>
 800afc8:	e005      	b.n	800afd6 <PCD_EP_ISR_Handler+0x672>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800afca:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800afcc:	461a      	mov	r2, r3
 800afce:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800afd0:	6878      	ldr	r0, [r7, #4]
 800afd2:	f000 f917 	bl	800b204 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800afde:	b29b      	uxth	r3, r3
 800afe0:	b21b      	sxth	r3, r3
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	f6ff acc3 	blt.w	800a96e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800afe8:	2300      	movs	r3, #0
}
 800afea:	4618      	mov	r0, r3
 800afec:	3748      	adds	r7, #72	@ 0x48
 800afee:	46bd      	mov	sp, r7
 800aff0:	bd80      	pop	{r7, pc}

0800aff2 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800aff2:	b580      	push	{r7, lr}
 800aff4:	b088      	sub	sp, #32
 800aff6:	af00      	add	r7, sp, #0
 800aff8:	60f8      	str	r0, [r7, #12]
 800affa:	60b9      	str	r1, [r7, #8]
 800affc:	4613      	mov	r3, r2
 800affe:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800b000:	88fb      	ldrh	r3, [r7, #6]
 800b002:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b006:	2b00      	cmp	r3, #0
 800b008:	d07c      	beq.n	800b104 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b012:	b29b      	uxth	r3, r3
 800b014:	461a      	mov	r2, r3
 800b016:	68bb      	ldr	r3, [r7, #8]
 800b018:	781b      	ldrb	r3, [r3, #0]
 800b01a:	00db      	lsls	r3, r3, #3
 800b01c:	4413      	add	r3, r2
 800b01e:	68fa      	ldr	r2, [r7, #12]
 800b020:	6812      	ldr	r2, [r2, #0]
 800b022:	4413      	add	r3, r2
 800b024:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b028:	881b      	ldrh	r3, [r3, #0]
 800b02a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b02e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800b030:	68bb      	ldr	r3, [r7, #8]
 800b032:	699a      	ldr	r2, [r3, #24]
 800b034:	8b7b      	ldrh	r3, [r7, #26]
 800b036:	429a      	cmp	r2, r3
 800b038:	d306      	bcc.n	800b048 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 800b03a:	68bb      	ldr	r3, [r7, #8]
 800b03c:	699a      	ldr	r2, [r3, #24]
 800b03e:	8b7b      	ldrh	r3, [r7, #26]
 800b040:	1ad2      	subs	r2, r2, r3
 800b042:	68bb      	ldr	r3, [r7, #8]
 800b044:	619a      	str	r2, [r3, #24]
 800b046:	e002      	b.n	800b04e <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 800b048:	68bb      	ldr	r3, [r7, #8]
 800b04a:	2200      	movs	r2, #0
 800b04c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800b04e:	68bb      	ldr	r3, [r7, #8]
 800b050:	699b      	ldr	r3, [r3, #24]
 800b052:	2b00      	cmp	r3, #0
 800b054:	d123      	bne.n	800b09e <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* Set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	461a      	mov	r2, r3
 800b05c:	68bb      	ldr	r3, [r7, #8]
 800b05e:	781b      	ldrb	r3, [r3, #0]
 800b060:	009b      	lsls	r3, r3, #2
 800b062:	4413      	add	r3, r2
 800b064:	881b      	ldrh	r3, [r3, #0]
 800b066:	b29b      	uxth	r3, r3
 800b068:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b06c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b070:	833b      	strh	r3, [r7, #24]
 800b072:	8b3b      	ldrh	r3, [r7, #24]
 800b074:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800b078:	833b      	strh	r3, [r7, #24]
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	461a      	mov	r2, r3
 800b080:	68bb      	ldr	r3, [r7, #8]
 800b082:	781b      	ldrb	r3, [r3, #0]
 800b084:	009b      	lsls	r3, r3, #2
 800b086:	441a      	add	r2, r3
 800b088:	8b3b      	ldrh	r3, [r7, #24]
 800b08a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b08e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b092:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b096:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b09a:	b29b      	uxth	r3, r3
 800b09c:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800b09e:	88fb      	ldrh	r3, [r7, #6]
 800b0a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d01f      	beq.n	800b0e8 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	461a      	mov	r2, r3
 800b0ae:	68bb      	ldr	r3, [r7, #8]
 800b0b0:	781b      	ldrb	r3, [r3, #0]
 800b0b2:	009b      	lsls	r3, r3, #2
 800b0b4:	4413      	add	r3, r2
 800b0b6:	881b      	ldrh	r3, [r3, #0]
 800b0b8:	b29b      	uxth	r3, r3
 800b0ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b0be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b0c2:	82fb      	strh	r3, [r7, #22]
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	461a      	mov	r2, r3
 800b0ca:	68bb      	ldr	r3, [r7, #8]
 800b0cc:	781b      	ldrb	r3, [r3, #0]
 800b0ce:	009b      	lsls	r3, r3, #2
 800b0d0:	441a      	add	r2, r3
 800b0d2:	8afb      	ldrh	r3, [r7, #22]
 800b0d4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b0d8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b0dc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b0e0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800b0e4:	b29b      	uxth	r3, r3
 800b0e6:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800b0e8:	8b7b      	ldrh	r3, [r7, #26]
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	f000 8085 	beq.w	800b1fa <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	6818      	ldr	r0, [r3, #0]
 800b0f4:	68bb      	ldr	r3, [r7, #8]
 800b0f6:	6959      	ldr	r1, [r3, #20]
 800b0f8:	68bb      	ldr	r3, [r7, #8]
 800b0fa:	891a      	ldrh	r2, [r3, #8]
 800b0fc:	8b7b      	ldrh	r3, [r7, #26]
 800b0fe:	f007 ff0e 	bl	8012f1e <USB_ReadPMA>
 800b102:	e07a      	b.n	800b1fa <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b10c:	b29b      	uxth	r3, r3
 800b10e:	461a      	mov	r2, r3
 800b110:	68bb      	ldr	r3, [r7, #8]
 800b112:	781b      	ldrb	r3, [r3, #0]
 800b114:	00db      	lsls	r3, r3, #3
 800b116:	4413      	add	r3, r2
 800b118:	68fa      	ldr	r2, [r7, #12]
 800b11a:	6812      	ldr	r2, [r2, #0]
 800b11c:	4413      	add	r3, r2
 800b11e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b122:	881b      	ldrh	r3, [r3, #0]
 800b124:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b128:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800b12a:	68bb      	ldr	r3, [r7, #8]
 800b12c:	699a      	ldr	r2, [r3, #24]
 800b12e:	8b7b      	ldrh	r3, [r7, #26]
 800b130:	429a      	cmp	r2, r3
 800b132:	d306      	bcc.n	800b142 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 800b134:	68bb      	ldr	r3, [r7, #8]
 800b136:	699a      	ldr	r2, [r3, #24]
 800b138:	8b7b      	ldrh	r3, [r7, #26]
 800b13a:	1ad2      	subs	r2, r2, r3
 800b13c:	68bb      	ldr	r3, [r7, #8]
 800b13e:	619a      	str	r2, [r3, #24]
 800b140:	e002      	b.n	800b148 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 800b142:	68bb      	ldr	r3, [r7, #8]
 800b144:	2200      	movs	r2, #0
 800b146:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800b148:	68bb      	ldr	r3, [r7, #8]
 800b14a:	699b      	ldr	r3, [r3, #24]
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d123      	bne.n	800b198 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* Set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	461a      	mov	r2, r3
 800b156:	68bb      	ldr	r3, [r7, #8]
 800b158:	781b      	ldrb	r3, [r3, #0]
 800b15a:	009b      	lsls	r3, r3, #2
 800b15c:	4413      	add	r3, r2
 800b15e:	881b      	ldrh	r3, [r3, #0]
 800b160:	b29b      	uxth	r3, r3
 800b162:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b166:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b16a:	83fb      	strh	r3, [r7, #30]
 800b16c:	8bfb      	ldrh	r3, [r7, #30]
 800b16e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800b172:	83fb      	strh	r3, [r7, #30]
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	461a      	mov	r2, r3
 800b17a:	68bb      	ldr	r3, [r7, #8]
 800b17c:	781b      	ldrb	r3, [r3, #0]
 800b17e:	009b      	lsls	r3, r3, #2
 800b180:	441a      	add	r2, r3
 800b182:	8bfb      	ldrh	r3, [r7, #30]
 800b184:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b188:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b18c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b190:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b194:	b29b      	uxth	r3, r3
 800b196:	8013      	strh	r3, [r2, #0]
    }

    /* Need to FreeUser Buffer */
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800b198:	88fb      	ldrh	r3, [r7, #6]
 800b19a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d11f      	bne.n	800b1e2 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	461a      	mov	r2, r3
 800b1a8:	68bb      	ldr	r3, [r7, #8]
 800b1aa:	781b      	ldrb	r3, [r3, #0]
 800b1ac:	009b      	lsls	r3, r3, #2
 800b1ae:	4413      	add	r3, r2
 800b1b0:	881b      	ldrh	r3, [r3, #0]
 800b1b2:	b29b      	uxth	r3, r3
 800b1b4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b1b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b1bc:	83bb      	strh	r3, [r7, #28]
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	461a      	mov	r2, r3
 800b1c4:	68bb      	ldr	r3, [r7, #8]
 800b1c6:	781b      	ldrb	r3, [r3, #0]
 800b1c8:	009b      	lsls	r3, r3, #2
 800b1ca:	441a      	add	r2, r3
 800b1cc:	8bbb      	ldrh	r3, [r7, #28]
 800b1ce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b1d2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b1d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b1da:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800b1de:	b29b      	uxth	r3, r3
 800b1e0:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800b1e2:	8b7b      	ldrh	r3, [r7, #26]
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d008      	beq.n	800b1fa <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	6818      	ldr	r0, [r3, #0]
 800b1ec:	68bb      	ldr	r3, [r7, #8]
 800b1ee:	6959      	ldr	r1, [r3, #20]
 800b1f0:	68bb      	ldr	r3, [r7, #8]
 800b1f2:	895a      	ldrh	r2, [r3, #10]
 800b1f4:	8b7b      	ldrh	r3, [r7, #26]
 800b1f6:	f007 fe92 	bl	8012f1e <USB_ReadPMA>
    }
  }

  return count;
 800b1fa:	8b7b      	ldrh	r3, [r7, #26]
}
 800b1fc:	4618      	mov	r0, r3
 800b1fe:	3720      	adds	r7, #32
 800b200:	46bd      	mov	sp, r7
 800b202:	bd80      	pop	{r7, pc}

0800b204 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800b204:	b580      	push	{r7, lr}
 800b206:	b0a6      	sub	sp, #152	@ 0x98
 800b208:	af00      	add	r7, sp, #0
 800b20a:	60f8      	str	r0, [r7, #12]
 800b20c:	60b9      	str	r1, [r7, #8]
 800b20e:	4613      	mov	r3, r2
 800b210:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800b212:	88fb      	ldrh	r3, [r7, #6]
 800b214:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b218:	2b00      	cmp	r3, #0
 800b21a:	f000 81f7 	beq.w	800b60c <HAL_PCD_EP_DB_Transmit+0x408>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b226:	b29b      	uxth	r3, r3
 800b228:	461a      	mov	r2, r3
 800b22a:	68bb      	ldr	r3, [r7, #8]
 800b22c:	781b      	ldrb	r3, [r3, #0]
 800b22e:	00db      	lsls	r3, r3, #3
 800b230:	4413      	add	r3, r2
 800b232:	68fa      	ldr	r2, [r7, #12]
 800b234:	6812      	ldr	r2, [r2, #0]
 800b236:	4413      	add	r3, r2
 800b238:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b23c:	881b      	ldrh	r3, [r3, #0]
 800b23e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b242:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len > TxPctSize)
 800b246:	68bb      	ldr	r3, [r7, #8]
 800b248:	699a      	ldr	r2, [r3, #24]
 800b24a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800b24e:	429a      	cmp	r2, r3
 800b250:	d907      	bls.n	800b262 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 800b252:	68bb      	ldr	r3, [r7, #8]
 800b254:	699a      	ldr	r2, [r3, #24]
 800b256:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800b25a:	1ad2      	subs	r2, r2, r3
 800b25c:	68bb      	ldr	r3, [r7, #8]
 800b25e:	619a      	str	r2, [r3, #24]
 800b260:	e002      	b.n	800b268 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 800b262:	68bb      	ldr	r3, [r7, #8]
 800b264:	2200      	movs	r2, #0
 800b266:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800b268:	68bb      	ldr	r3, [r7, #8]
 800b26a:	699b      	ldr	r3, [r3, #24]
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	f040 80e1 	bne.w	800b434 <HAL_PCD_EP_DB_Transmit+0x230>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800b272:	68bb      	ldr	r3, [r7, #8]
 800b274:	785b      	ldrb	r3, [r3, #1]
 800b276:	2b00      	cmp	r3, #0
 800b278:	d126      	bne.n	800b2c8 <HAL_PCD_EP_DB_Transmit+0xc4>
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	633b      	str	r3, [r7, #48]	@ 0x30
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b288:	b29b      	uxth	r3, r3
 800b28a:	461a      	mov	r2, r3
 800b28c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b28e:	4413      	add	r3, r2
 800b290:	633b      	str	r3, [r7, #48]	@ 0x30
 800b292:	68bb      	ldr	r3, [r7, #8]
 800b294:	781b      	ldrb	r3, [r3, #0]
 800b296:	00da      	lsls	r2, r3, #3
 800b298:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b29a:	4413      	add	r3, r2
 800b29c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b2a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b2a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2a4:	881b      	ldrh	r3, [r3, #0]
 800b2a6:	b29b      	uxth	r3, r3
 800b2a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b2ac:	b29a      	uxth	r2, r3
 800b2ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2b0:	801a      	strh	r2, [r3, #0]
 800b2b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2b4:	881b      	ldrh	r3, [r3, #0]
 800b2b6:	b29b      	uxth	r3, r3
 800b2b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b2bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b2c0:	b29a      	uxth	r2, r3
 800b2c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2c4:	801a      	strh	r2, [r3, #0]
 800b2c6:	e01a      	b.n	800b2fe <HAL_PCD_EP_DB_Transmit+0xfa>
 800b2c8:	68bb      	ldr	r3, [r7, #8]
 800b2ca:	785b      	ldrb	r3, [r3, #1]
 800b2cc:	2b01      	cmp	r3, #1
 800b2ce:	d116      	bne.n	800b2fe <HAL_PCD_EP_DB_Transmit+0xfa>
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b2de:	b29b      	uxth	r3, r3
 800b2e0:	461a      	mov	r2, r3
 800b2e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2e4:	4413      	add	r3, r2
 800b2e6:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b2e8:	68bb      	ldr	r3, [r7, #8]
 800b2ea:	781b      	ldrb	r3, [r3, #0]
 800b2ec:	00da      	lsls	r2, r3, #3
 800b2ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2f0:	4413      	add	r3, r2
 800b2f2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b2f6:	637b      	str	r3, [r7, #52]	@ 0x34
 800b2f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b2fa:	2200      	movs	r2, #0
 800b2fc:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b304:	68bb      	ldr	r3, [r7, #8]
 800b306:	785b      	ldrb	r3, [r3, #1]
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d126      	bne.n	800b35a <HAL_PCD_EP_DB_Transmit+0x156>
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	623b      	str	r3, [r7, #32]
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b31a:	b29b      	uxth	r3, r3
 800b31c:	461a      	mov	r2, r3
 800b31e:	6a3b      	ldr	r3, [r7, #32]
 800b320:	4413      	add	r3, r2
 800b322:	623b      	str	r3, [r7, #32]
 800b324:	68bb      	ldr	r3, [r7, #8]
 800b326:	781b      	ldrb	r3, [r3, #0]
 800b328:	00da      	lsls	r2, r3, #3
 800b32a:	6a3b      	ldr	r3, [r7, #32]
 800b32c:	4413      	add	r3, r2
 800b32e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b332:	61fb      	str	r3, [r7, #28]
 800b334:	69fb      	ldr	r3, [r7, #28]
 800b336:	881b      	ldrh	r3, [r3, #0]
 800b338:	b29b      	uxth	r3, r3
 800b33a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b33e:	b29a      	uxth	r2, r3
 800b340:	69fb      	ldr	r3, [r7, #28]
 800b342:	801a      	strh	r2, [r3, #0]
 800b344:	69fb      	ldr	r3, [r7, #28]
 800b346:	881b      	ldrh	r3, [r3, #0]
 800b348:	b29b      	uxth	r3, r3
 800b34a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b34e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b352:	b29a      	uxth	r2, r3
 800b354:	69fb      	ldr	r3, [r7, #28]
 800b356:	801a      	strh	r2, [r3, #0]
 800b358:	e017      	b.n	800b38a <HAL_PCD_EP_DB_Transmit+0x186>
 800b35a:	68bb      	ldr	r3, [r7, #8]
 800b35c:	785b      	ldrb	r3, [r3, #1]
 800b35e:	2b01      	cmp	r3, #1
 800b360:	d113      	bne.n	800b38a <HAL_PCD_EP_DB_Transmit+0x186>
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b36a:	b29b      	uxth	r3, r3
 800b36c:	461a      	mov	r2, r3
 800b36e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b370:	4413      	add	r3, r2
 800b372:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b374:	68bb      	ldr	r3, [r7, #8]
 800b376:	781b      	ldrb	r3, [r3, #0]
 800b378:	00da      	lsls	r2, r3, #3
 800b37a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b37c:	4413      	add	r3, r2
 800b37e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b382:	627b      	str	r3, [r7, #36]	@ 0x24
 800b384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b386:	2200      	movs	r2, #0
 800b388:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 800b38a:	68bb      	ldr	r3, [r7, #8]
 800b38c:	78db      	ldrb	r3, [r3, #3]
 800b38e:	2b02      	cmp	r3, #2
 800b390:	d123      	bne.n	800b3da <HAL_PCD_EP_DB_Transmit+0x1d6>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	461a      	mov	r2, r3
 800b398:	68bb      	ldr	r3, [r7, #8]
 800b39a:	781b      	ldrb	r3, [r3, #0]
 800b39c:	009b      	lsls	r3, r3, #2
 800b39e:	4413      	add	r3, r2
 800b3a0:	881b      	ldrh	r3, [r3, #0]
 800b3a2:	b29b      	uxth	r3, r3
 800b3a4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b3a8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b3ac:	837b      	strh	r3, [r7, #26]
 800b3ae:	8b7b      	ldrh	r3, [r7, #26]
 800b3b0:	f083 0320 	eor.w	r3, r3, #32
 800b3b4:	837b      	strh	r3, [r7, #26]
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	461a      	mov	r2, r3
 800b3bc:	68bb      	ldr	r3, [r7, #8]
 800b3be:	781b      	ldrb	r3, [r3, #0]
 800b3c0:	009b      	lsls	r3, r3, #2
 800b3c2:	441a      	add	r2, r3
 800b3c4:	8b7b      	ldrh	r3, [r7, #26]
 800b3c6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b3ca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b3ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b3d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b3d6:	b29b      	uxth	r3, r3
 800b3d8:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800b3da:	68bb      	ldr	r3, [r7, #8]
 800b3dc:	781b      	ldrb	r3, [r3, #0]
 800b3de:	4619      	mov	r1, r3
 800b3e0:	68f8      	ldr	r0, [r7, #12]
 800b3e2:	f00d fd38 	bl	8018e56 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800b3e6:	88fb      	ldrh	r3, [r7, #6]
 800b3e8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d01f      	beq.n	800b430 <HAL_PCD_EP_DB_Transmit+0x22c>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	461a      	mov	r2, r3
 800b3f6:	68bb      	ldr	r3, [r7, #8]
 800b3f8:	781b      	ldrb	r3, [r3, #0]
 800b3fa:	009b      	lsls	r3, r3, #2
 800b3fc:	4413      	add	r3, r2
 800b3fe:	881b      	ldrh	r3, [r3, #0]
 800b400:	b29b      	uxth	r3, r3
 800b402:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b406:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b40a:	833b      	strh	r3, [r7, #24]
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	461a      	mov	r2, r3
 800b412:	68bb      	ldr	r3, [r7, #8]
 800b414:	781b      	ldrb	r3, [r3, #0]
 800b416:	009b      	lsls	r3, r3, #2
 800b418:	441a      	add	r2, r3
 800b41a:	8b3b      	ldrh	r3, [r7, #24]
 800b41c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b420:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b424:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b428:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b42c:	b29b      	uxth	r3, r3
 800b42e:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 800b430:	2300      	movs	r3, #0
 800b432:	e31f      	b.n	800ba74 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800b434:	88fb      	ldrh	r3, [r7, #6]
 800b436:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d021      	beq.n	800b482 <HAL_PCD_EP_DB_Transmit+0x27e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	461a      	mov	r2, r3
 800b444:	68bb      	ldr	r3, [r7, #8]
 800b446:	781b      	ldrb	r3, [r3, #0]
 800b448:	009b      	lsls	r3, r3, #2
 800b44a:	4413      	add	r3, r2
 800b44c:	881b      	ldrh	r3, [r3, #0]
 800b44e:	b29b      	uxth	r3, r3
 800b450:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b454:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b458:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	461a      	mov	r2, r3
 800b462:	68bb      	ldr	r3, [r7, #8]
 800b464:	781b      	ldrb	r3, [r3, #0]
 800b466:	009b      	lsls	r3, r3, #2
 800b468:	441a      	add	r2, r3
 800b46a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800b46e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b472:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b476:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b47a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b47e:	b29b      	uxth	r3, r3
 800b480:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800b482:	68bb      	ldr	r3, [r7, #8]
 800b484:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800b488:	2b01      	cmp	r3, #1
 800b48a:	f040 82ca 	bne.w	800ba22 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 800b48e:	68bb      	ldr	r3, [r7, #8]
 800b490:	695a      	ldr	r2, [r3, #20]
 800b492:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800b496:	441a      	add	r2, r3
 800b498:	68bb      	ldr	r3, [r7, #8]
 800b49a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800b49c:	68bb      	ldr	r3, [r7, #8]
 800b49e:	69da      	ldr	r2, [r3, #28]
 800b4a0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800b4a4:	441a      	add	r2, r3
 800b4a6:	68bb      	ldr	r3, [r7, #8]
 800b4a8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800b4aa:	68bb      	ldr	r3, [r7, #8]
 800b4ac:	6a1a      	ldr	r2, [r3, #32]
 800b4ae:	68bb      	ldr	r3, [r7, #8]
 800b4b0:	691b      	ldr	r3, [r3, #16]
 800b4b2:	429a      	cmp	r2, r3
 800b4b4:	d309      	bcc.n	800b4ca <HAL_PCD_EP_DB_Transmit+0x2c6>
        {
          len = ep->maxpacket;
 800b4b6:	68bb      	ldr	r3, [r7, #8]
 800b4b8:	691b      	ldr	r3, [r3, #16]
 800b4ba:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 800b4bc:	68bb      	ldr	r3, [r7, #8]
 800b4be:	6a1a      	ldr	r2, [r3, #32]
 800b4c0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b4c2:	1ad2      	subs	r2, r2, r3
 800b4c4:	68bb      	ldr	r3, [r7, #8]
 800b4c6:	621a      	str	r2, [r3, #32]
 800b4c8:	e015      	b.n	800b4f6 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else if (ep->xfer_len_db == 0U)
 800b4ca:	68bb      	ldr	r3, [r7, #8]
 800b4cc:	6a1b      	ldr	r3, [r3, #32]
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d107      	bne.n	800b4e2 <HAL_PCD_EP_DB_Transmit+0x2de>
        {
          len = TxPctSize;
 800b4d2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800b4d6:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 800b4d8:	68bb      	ldr	r3, [r7, #8]
 800b4da:	2200      	movs	r2, #0
 800b4dc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800b4e0:	e009      	b.n	800b4f6 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800b4e2:	68bb      	ldr	r3, [r7, #8]
 800b4e4:	2200      	movs	r2, #0
 800b4e6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 800b4ea:	68bb      	ldr	r3, [r7, #8]
 800b4ec:	6a1b      	ldr	r3, [r3, #32]
 800b4ee:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 800b4f0:	68bb      	ldr	r3, [r7, #8]
 800b4f2:	2200      	movs	r2, #0
 800b4f4:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer0 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800b4f6:	68bb      	ldr	r3, [r7, #8]
 800b4f8:	785b      	ldrb	r3, [r3, #1]
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d15f      	bne.n	800b5be <HAL_PCD_EP_DB_Transmit+0x3ba>
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	643b      	str	r3, [r7, #64]	@ 0x40
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b50c:	b29b      	uxth	r3, r3
 800b50e:	461a      	mov	r2, r3
 800b510:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b512:	4413      	add	r3, r2
 800b514:	643b      	str	r3, [r7, #64]	@ 0x40
 800b516:	68bb      	ldr	r3, [r7, #8]
 800b518:	781b      	ldrb	r3, [r3, #0]
 800b51a:	00da      	lsls	r2, r3, #3
 800b51c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b51e:	4413      	add	r3, r2
 800b520:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b524:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b526:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b528:	881b      	ldrh	r3, [r3, #0]
 800b52a:	b29b      	uxth	r3, r3
 800b52c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b530:	b29a      	uxth	r2, r3
 800b532:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b534:	801a      	strh	r2, [r3, #0]
 800b536:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d10a      	bne.n	800b552 <HAL_PCD_EP_DB_Transmit+0x34e>
 800b53c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b53e:	881b      	ldrh	r3, [r3, #0]
 800b540:	b29b      	uxth	r3, r3
 800b542:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b546:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b54a:	b29a      	uxth	r2, r3
 800b54c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b54e:	801a      	strh	r2, [r3, #0]
 800b550:	e051      	b.n	800b5f6 <HAL_PCD_EP_DB_Transmit+0x3f2>
 800b552:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b554:	2b3e      	cmp	r3, #62	@ 0x3e
 800b556:	d816      	bhi.n	800b586 <HAL_PCD_EP_DB_Transmit+0x382>
 800b558:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b55a:	085b      	lsrs	r3, r3, #1
 800b55c:	653b      	str	r3, [r7, #80]	@ 0x50
 800b55e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b560:	f003 0301 	and.w	r3, r3, #1
 800b564:	2b00      	cmp	r3, #0
 800b566:	d002      	beq.n	800b56e <HAL_PCD_EP_DB_Transmit+0x36a>
 800b568:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b56a:	3301      	adds	r3, #1
 800b56c:	653b      	str	r3, [r7, #80]	@ 0x50
 800b56e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b570:	881b      	ldrh	r3, [r3, #0]
 800b572:	b29a      	uxth	r2, r3
 800b574:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b576:	b29b      	uxth	r3, r3
 800b578:	029b      	lsls	r3, r3, #10
 800b57a:	b29b      	uxth	r3, r3
 800b57c:	4313      	orrs	r3, r2
 800b57e:	b29a      	uxth	r2, r3
 800b580:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b582:	801a      	strh	r2, [r3, #0]
 800b584:	e037      	b.n	800b5f6 <HAL_PCD_EP_DB_Transmit+0x3f2>
 800b586:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b588:	095b      	lsrs	r3, r3, #5
 800b58a:	653b      	str	r3, [r7, #80]	@ 0x50
 800b58c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b58e:	f003 031f 	and.w	r3, r3, #31
 800b592:	2b00      	cmp	r3, #0
 800b594:	d102      	bne.n	800b59c <HAL_PCD_EP_DB_Transmit+0x398>
 800b596:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b598:	3b01      	subs	r3, #1
 800b59a:	653b      	str	r3, [r7, #80]	@ 0x50
 800b59c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b59e:	881b      	ldrh	r3, [r3, #0]
 800b5a0:	b29a      	uxth	r2, r3
 800b5a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b5a4:	b29b      	uxth	r3, r3
 800b5a6:	029b      	lsls	r3, r3, #10
 800b5a8:	b29b      	uxth	r3, r3
 800b5aa:	4313      	orrs	r3, r2
 800b5ac:	b29b      	uxth	r3, r3
 800b5ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b5b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b5b6:	b29a      	uxth	r2, r3
 800b5b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b5ba:	801a      	strh	r2, [r3, #0]
 800b5bc:	e01b      	b.n	800b5f6 <HAL_PCD_EP_DB_Transmit+0x3f2>
 800b5be:	68bb      	ldr	r3, [r7, #8]
 800b5c0:	785b      	ldrb	r3, [r3, #1]
 800b5c2:	2b01      	cmp	r3, #1
 800b5c4:	d117      	bne.n	800b5f6 <HAL_PCD_EP_DB_Transmit+0x3f2>
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b5d4:	b29b      	uxth	r3, r3
 800b5d6:	461a      	mov	r2, r3
 800b5d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b5da:	4413      	add	r3, r2
 800b5dc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b5de:	68bb      	ldr	r3, [r7, #8]
 800b5e0:	781b      	ldrb	r3, [r3, #0]
 800b5e2:	00da      	lsls	r2, r3, #3
 800b5e4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b5e6:	4413      	add	r3, r2
 800b5e8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b5ec:	647b      	str	r3, [r7, #68]	@ 0x44
 800b5ee:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b5f0:	b29a      	uxth	r2, r3
 800b5f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b5f4:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	6818      	ldr	r0, [r3, #0]
 800b5fa:	68bb      	ldr	r3, [r7, #8]
 800b5fc:	6959      	ldr	r1, [r3, #20]
 800b5fe:	68bb      	ldr	r3, [r7, #8]
 800b600:	891a      	ldrh	r2, [r3, #8]
 800b602:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b604:	b29b      	uxth	r3, r3
 800b606:	f007 fc48 	bl	8012e9a <USB_WritePMA>
 800b60a:	e20a      	b.n	800ba22 <HAL_PCD_EP_DB_Transmit+0x81e>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b614:	b29b      	uxth	r3, r3
 800b616:	461a      	mov	r2, r3
 800b618:	68bb      	ldr	r3, [r7, #8]
 800b61a:	781b      	ldrb	r3, [r3, #0]
 800b61c:	00db      	lsls	r3, r3, #3
 800b61e:	4413      	add	r3, r2
 800b620:	68fa      	ldr	r2, [r7, #12]
 800b622:	6812      	ldr	r2, [r2, #0]
 800b624:	4413      	add	r3, r2
 800b626:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b62a:	881b      	ldrh	r3, [r3, #0]
 800b62c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b630:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len >= TxPctSize)
 800b634:	68bb      	ldr	r3, [r7, #8]
 800b636:	699a      	ldr	r2, [r3, #24]
 800b638:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800b63c:	429a      	cmp	r2, r3
 800b63e:	d307      	bcc.n	800b650 <HAL_PCD_EP_DB_Transmit+0x44c>
    {
      ep->xfer_len -= TxPctSize;
 800b640:	68bb      	ldr	r3, [r7, #8]
 800b642:	699a      	ldr	r2, [r3, #24]
 800b644:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800b648:	1ad2      	subs	r2, r2, r3
 800b64a:	68bb      	ldr	r3, [r7, #8]
 800b64c:	619a      	str	r2, [r3, #24]
 800b64e:	e002      	b.n	800b656 <HAL_PCD_EP_DB_Transmit+0x452>
    }
    else
    {
      ep->xfer_len = 0U;
 800b650:	68bb      	ldr	r3, [r7, #8]
 800b652:	2200      	movs	r2, #0
 800b654:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800b656:	68bb      	ldr	r3, [r7, #8]
 800b658:	699b      	ldr	r3, [r3, #24]
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	f040 80f6 	bne.w	800b84c <HAL_PCD_EP_DB_Transmit+0x648>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800b660:	68bb      	ldr	r3, [r7, #8]
 800b662:	785b      	ldrb	r3, [r3, #1]
 800b664:	2b00      	cmp	r3, #0
 800b666:	d126      	bne.n	800b6b6 <HAL_PCD_EP_DB_Transmit+0x4b2>
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	677b      	str	r3, [r7, #116]	@ 0x74
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b676:	b29b      	uxth	r3, r3
 800b678:	461a      	mov	r2, r3
 800b67a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b67c:	4413      	add	r3, r2
 800b67e:	677b      	str	r3, [r7, #116]	@ 0x74
 800b680:	68bb      	ldr	r3, [r7, #8]
 800b682:	781b      	ldrb	r3, [r3, #0]
 800b684:	00da      	lsls	r2, r3, #3
 800b686:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b688:	4413      	add	r3, r2
 800b68a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b68e:	673b      	str	r3, [r7, #112]	@ 0x70
 800b690:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b692:	881b      	ldrh	r3, [r3, #0]
 800b694:	b29b      	uxth	r3, r3
 800b696:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b69a:	b29a      	uxth	r2, r3
 800b69c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b69e:	801a      	strh	r2, [r3, #0]
 800b6a0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b6a2:	881b      	ldrh	r3, [r3, #0]
 800b6a4:	b29b      	uxth	r3, r3
 800b6a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b6aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b6ae:	b29a      	uxth	r2, r3
 800b6b0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b6b2:	801a      	strh	r2, [r3, #0]
 800b6b4:	e01a      	b.n	800b6ec <HAL_PCD_EP_DB_Transmit+0x4e8>
 800b6b6:	68bb      	ldr	r3, [r7, #8]
 800b6b8:	785b      	ldrb	r3, [r3, #1]
 800b6ba:	2b01      	cmp	r3, #1
 800b6bc:	d116      	bne.n	800b6ec <HAL_PCD_EP_DB_Transmit+0x4e8>
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b6cc:	b29b      	uxth	r3, r3
 800b6ce:	461a      	mov	r2, r3
 800b6d0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800b6d2:	4413      	add	r3, r2
 800b6d4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800b6d6:	68bb      	ldr	r3, [r7, #8]
 800b6d8:	781b      	ldrb	r3, [r3, #0]
 800b6da:	00da      	lsls	r2, r3, #3
 800b6dc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800b6de:	4413      	add	r3, r2
 800b6e0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b6e4:	67bb      	str	r3, [r7, #120]	@ 0x78
 800b6e6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b6e8:	2200      	movs	r2, #0
 800b6ea:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b6f4:	68bb      	ldr	r3, [r7, #8]
 800b6f6:	785b      	ldrb	r3, [r3, #1]
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d12f      	bne.n	800b75c <HAL_PCD_EP_DB_Transmit+0x558>
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b70c:	b29b      	uxth	r3, r3
 800b70e:	461a      	mov	r2, r3
 800b710:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b714:	4413      	add	r3, r2
 800b716:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800b71a:	68bb      	ldr	r3, [r7, #8]
 800b71c:	781b      	ldrb	r3, [r3, #0]
 800b71e:	00da      	lsls	r2, r3, #3
 800b720:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b724:	4413      	add	r3, r2
 800b726:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b72a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800b72e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b732:	881b      	ldrh	r3, [r3, #0]
 800b734:	b29b      	uxth	r3, r3
 800b736:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b73a:	b29a      	uxth	r2, r3
 800b73c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b740:	801a      	strh	r2, [r3, #0]
 800b742:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b746:	881b      	ldrh	r3, [r3, #0]
 800b748:	b29b      	uxth	r3, r3
 800b74a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b74e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b752:	b29a      	uxth	r2, r3
 800b754:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b758:	801a      	strh	r2, [r3, #0]
 800b75a:	e01c      	b.n	800b796 <HAL_PCD_EP_DB_Transmit+0x592>
 800b75c:	68bb      	ldr	r3, [r7, #8]
 800b75e:	785b      	ldrb	r3, [r3, #1]
 800b760:	2b01      	cmp	r3, #1
 800b762:	d118      	bne.n	800b796 <HAL_PCD_EP_DB_Transmit+0x592>
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b76c:	b29b      	uxth	r3, r3
 800b76e:	461a      	mov	r2, r3
 800b770:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b774:	4413      	add	r3, r2
 800b776:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b77a:	68bb      	ldr	r3, [r7, #8]
 800b77c:	781b      	ldrb	r3, [r3, #0]
 800b77e:	00da      	lsls	r2, r3, #3
 800b780:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b784:	4413      	add	r3, r2
 800b786:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b78a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b78e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800b792:	2200      	movs	r2, #0
 800b794:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 800b796:	68bb      	ldr	r3, [r7, #8]
 800b798:	78db      	ldrb	r3, [r3, #3]
 800b79a:	2b02      	cmp	r3, #2
 800b79c:	d127      	bne.n	800b7ee <HAL_PCD_EP_DB_Transmit+0x5ea>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	461a      	mov	r2, r3
 800b7a4:	68bb      	ldr	r3, [r7, #8]
 800b7a6:	781b      	ldrb	r3, [r3, #0]
 800b7a8:	009b      	lsls	r3, r3, #2
 800b7aa:	4413      	add	r3, r2
 800b7ac:	881b      	ldrh	r3, [r3, #0]
 800b7ae:	b29b      	uxth	r3, r3
 800b7b0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b7b4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b7b8:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800b7bc:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800b7c0:	f083 0320 	eor.w	r3, r3, #32
 800b7c4:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	461a      	mov	r2, r3
 800b7ce:	68bb      	ldr	r3, [r7, #8]
 800b7d0:	781b      	ldrb	r3, [r3, #0]
 800b7d2:	009b      	lsls	r3, r3, #2
 800b7d4:	441a      	add	r2, r3
 800b7d6:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800b7da:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b7de:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b7e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b7e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b7ea:	b29b      	uxth	r3, r3
 800b7ec:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800b7ee:	68bb      	ldr	r3, [r7, #8]
 800b7f0:	781b      	ldrb	r3, [r3, #0]
 800b7f2:	4619      	mov	r1, r3
 800b7f4:	68f8      	ldr	r0, [r7, #12]
 800b7f6:	f00d fb2e 	bl	8018e56 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800b7fa:	88fb      	ldrh	r3, [r7, #6]
 800b7fc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b800:	2b00      	cmp	r3, #0
 800b802:	d121      	bne.n	800b848 <HAL_PCD_EP_DB_Transmit+0x644>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	461a      	mov	r2, r3
 800b80a:	68bb      	ldr	r3, [r7, #8]
 800b80c:	781b      	ldrb	r3, [r3, #0]
 800b80e:	009b      	lsls	r3, r3, #2
 800b810:	4413      	add	r3, r2
 800b812:	881b      	ldrh	r3, [r3, #0]
 800b814:	b29b      	uxth	r3, r3
 800b816:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b81a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b81e:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	461a      	mov	r2, r3
 800b828:	68bb      	ldr	r3, [r7, #8]
 800b82a:	781b      	ldrb	r3, [r3, #0]
 800b82c:	009b      	lsls	r3, r3, #2
 800b82e:	441a      	add	r2, r3
 800b830:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800b834:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b838:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b83c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b840:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b844:	b29b      	uxth	r3, r3
 800b846:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 800b848:	2300      	movs	r3, #0
 800b84a:	e113      	b.n	800ba74 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800b84c:	88fb      	ldrh	r3, [r7, #6]
 800b84e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b852:	2b00      	cmp	r3, #0
 800b854:	d121      	bne.n	800b89a <HAL_PCD_EP_DB_Transmit+0x696>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	461a      	mov	r2, r3
 800b85c:	68bb      	ldr	r3, [r7, #8]
 800b85e:	781b      	ldrb	r3, [r3, #0]
 800b860:	009b      	lsls	r3, r3, #2
 800b862:	4413      	add	r3, r2
 800b864:	881b      	ldrh	r3, [r3, #0]
 800b866:	b29b      	uxth	r3, r3
 800b868:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b86c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b870:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	461a      	mov	r2, r3
 800b87a:	68bb      	ldr	r3, [r7, #8]
 800b87c:	781b      	ldrb	r3, [r3, #0]
 800b87e:	009b      	lsls	r3, r3, #2
 800b880:	441a      	add	r2, r3
 800b882:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800b886:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b88a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b88e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b892:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b896:	b29b      	uxth	r3, r3
 800b898:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800b89a:	68bb      	ldr	r3, [r7, #8]
 800b89c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800b8a0:	2b01      	cmp	r3, #1
 800b8a2:	f040 80be 	bne.w	800ba22 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 800b8a6:	68bb      	ldr	r3, [r7, #8]
 800b8a8:	695a      	ldr	r2, [r3, #20]
 800b8aa:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800b8ae:	441a      	add	r2, r3
 800b8b0:	68bb      	ldr	r3, [r7, #8]
 800b8b2:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800b8b4:	68bb      	ldr	r3, [r7, #8]
 800b8b6:	69da      	ldr	r2, [r3, #28]
 800b8b8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800b8bc:	441a      	add	r2, r3
 800b8be:	68bb      	ldr	r3, [r7, #8]
 800b8c0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800b8c2:	68bb      	ldr	r3, [r7, #8]
 800b8c4:	6a1a      	ldr	r2, [r3, #32]
 800b8c6:	68bb      	ldr	r3, [r7, #8]
 800b8c8:	691b      	ldr	r3, [r3, #16]
 800b8ca:	429a      	cmp	r2, r3
 800b8cc:	d309      	bcc.n	800b8e2 <HAL_PCD_EP_DB_Transmit+0x6de>
        {
          len = ep->maxpacket;
 800b8ce:	68bb      	ldr	r3, [r7, #8]
 800b8d0:	691b      	ldr	r3, [r3, #16]
 800b8d2:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 800b8d4:	68bb      	ldr	r3, [r7, #8]
 800b8d6:	6a1a      	ldr	r2, [r3, #32]
 800b8d8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b8da:	1ad2      	subs	r2, r2, r3
 800b8dc:	68bb      	ldr	r3, [r7, #8]
 800b8de:	621a      	str	r2, [r3, #32]
 800b8e0:	e015      	b.n	800b90e <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else if (ep->xfer_len_db == 0U)
 800b8e2:	68bb      	ldr	r3, [r7, #8]
 800b8e4:	6a1b      	ldr	r3, [r3, #32]
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d107      	bne.n	800b8fa <HAL_PCD_EP_DB_Transmit+0x6f6>
        {
          len = TxPctSize;
 800b8ea:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800b8ee:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 800b8f0:	68bb      	ldr	r3, [r7, #8]
 800b8f2:	2200      	movs	r2, #0
 800b8f4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800b8f8:	e009      	b.n	800b90e <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else
        {
          len = ep->xfer_len_db;
 800b8fa:	68bb      	ldr	r3, [r7, #8]
 800b8fc:	6a1b      	ldr	r3, [r3, #32]
 800b8fe:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 800b900:	68bb      	ldr	r3, [r7, #8]
 800b902:	2200      	movs	r2, #0
 800b904:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800b906:	68bb      	ldr	r3, [r7, #8]
 800b908:	2200      	movs	r2, #0
 800b90a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b914:	68bb      	ldr	r3, [r7, #8]
 800b916:	785b      	ldrb	r3, [r3, #1]
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d15f      	bne.n	800b9dc <HAL_PCD_EP_DB_Transmit+0x7d8>
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b92a:	b29b      	uxth	r3, r3
 800b92c:	461a      	mov	r2, r3
 800b92e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b930:	4413      	add	r3, r2
 800b932:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b934:	68bb      	ldr	r3, [r7, #8]
 800b936:	781b      	ldrb	r3, [r3, #0]
 800b938:	00da      	lsls	r2, r3, #3
 800b93a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b93c:	4413      	add	r3, r2
 800b93e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b942:	667b      	str	r3, [r7, #100]	@ 0x64
 800b944:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b946:	881b      	ldrh	r3, [r3, #0]
 800b948:	b29b      	uxth	r3, r3
 800b94a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b94e:	b29a      	uxth	r2, r3
 800b950:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b952:	801a      	strh	r2, [r3, #0]
 800b954:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b956:	2b00      	cmp	r3, #0
 800b958:	d10a      	bne.n	800b970 <HAL_PCD_EP_DB_Transmit+0x76c>
 800b95a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b95c:	881b      	ldrh	r3, [r3, #0]
 800b95e:	b29b      	uxth	r3, r3
 800b960:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b964:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b968:	b29a      	uxth	r2, r3
 800b96a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b96c:	801a      	strh	r2, [r3, #0]
 800b96e:	e04e      	b.n	800ba0e <HAL_PCD_EP_DB_Transmit+0x80a>
 800b970:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b972:	2b3e      	cmp	r3, #62	@ 0x3e
 800b974:	d816      	bhi.n	800b9a4 <HAL_PCD_EP_DB_Transmit+0x7a0>
 800b976:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b978:	085b      	lsrs	r3, r3, #1
 800b97a:	663b      	str	r3, [r7, #96]	@ 0x60
 800b97c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b97e:	f003 0301 	and.w	r3, r3, #1
 800b982:	2b00      	cmp	r3, #0
 800b984:	d002      	beq.n	800b98c <HAL_PCD_EP_DB_Transmit+0x788>
 800b986:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b988:	3301      	adds	r3, #1
 800b98a:	663b      	str	r3, [r7, #96]	@ 0x60
 800b98c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b98e:	881b      	ldrh	r3, [r3, #0]
 800b990:	b29a      	uxth	r2, r3
 800b992:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b994:	b29b      	uxth	r3, r3
 800b996:	029b      	lsls	r3, r3, #10
 800b998:	b29b      	uxth	r3, r3
 800b99a:	4313      	orrs	r3, r2
 800b99c:	b29a      	uxth	r2, r3
 800b99e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b9a0:	801a      	strh	r2, [r3, #0]
 800b9a2:	e034      	b.n	800ba0e <HAL_PCD_EP_DB_Transmit+0x80a>
 800b9a4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b9a6:	095b      	lsrs	r3, r3, #5
 800b9a8:	663b      	str	r3, [r7, #96]	@ 0x60
 800b9aa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b9ac:	f003 031f 	and.w	r3, r3, #31
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d102      	bne.n	800b9ba <HAL_PCD_EP_DB_Transmit+0x7b6>
 800b9b4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b9b6:	3b01      	subs	r3, #1
 800b9b8:	663b      	str	r3, [r7, #96]	@ 0x60
 800b9ba:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b9bc:	881b      	ldrh	r3, [r3, #0]
 800b9be:	b29a      	uxth	r2, r3
 800b9c0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b9c2:	b29b      	uxth	r3, r3
 800b9c4:	029b      	lsls	r3, r3, #10
 800b9c6:	b29b      	uxth	r3, r3
 800b9c8:	4313      	orrs	r3, r2
 800b9ca:	b29b      	uxth	r3, r3
 800b9cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b9d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b9d4:	b29a      	uxth	r2, r3
 800b9d6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b9d8:	801a      	strh	r2, [r3, #0]
 800b9da:	e018      	b.n	800ba0e <HAL_PCD_EP_DB_Transmit+0x80a>
 800b9dc:	68bb      	ldr	r3, [r7, #8]
 800b9de:	785b      	ldrb	r3, [r3, #1]
 800b9e0:	2b01      	cmp	r3, #1
 800b9e2:	d114      	bne.n	800ba0e <HAL_PCD_EP_DB_Transmit+0x80a>
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b9ec:	b29b      	uxth	r3, r3
 800b9ee:	461a      	mov	r2, r3
 800b9f0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b9f2:	4413      	add	r3, r2
 800b9f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b9f6:	68bb      	ldr	r3, [r7, #8]
 800b9f8:	781b      	ldrb	r3, [r3, #0]
 800b9fa:	00da      	lsls	r2, r3, #3
 800b9fc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b9fe:	4413      	add	r3, r2
 800ba00:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800ba04:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800ba06:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ba08:	b29a      	uxth	r2, r3
 800ba0a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ba0c:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	6818      	ldr	r0, [r3, #0]
 800ba12:	68bb      	ldr	r3, [r7, #8]
 800ba14:	6959      	ldr	r1, [r3, #20]
 800ba16:	68bb      	ldr	r3, [r7, #8]
 800ba18:	895a      	ldrh	r2, [r3, #10]
 800ba1a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ba1c:	b29b      	uxth	r3, r3
 800ba1e:	f007 fa3c 	bl	8012e9a <USB_WritePMA>
      }
    }
  }

  /* Enable endpoint IN */
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	461a      	mov	r2, r3
 800ba28:	68bb      	ldr	r3, [r7, #8]
 800ba2a:	781b      	ldrb	r3, [r3, #0]
 800ba2c:	009b      	lsls	r3, r3, #2
 800ba2e:	4413      	add	r3, r2
 800ba30:	881b      	ldrh	r3, [r3, #0]
 800ba32:	b29b      	uxth	r3, r3
 800ba34:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ba38:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ba3c:	82fb      	strh	r3, [r7, #22]
 800ba3e:	8afb      	ldrh	r3, [r7, #22]
 800ba40:	f083 0310 	eor.w	r3, r3, #16
 800ba44:	82fb      	strh	r3, [r7, #22]
 800ba46:	8afb      	ldrh	r3, [r7, #22]
 800ba48:	f083 0320 	eor.w	r3, r3, #32
 800ba4c:	82fb      	strh	r3, [r7, #22]
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	461a      	mov	r2, r3
 800ba54:	68bb      	ldr	r3, [r7, #8]
 800ba56:	781b      	ldrb	r3, [r3, #0]
 800ba58:	009b      	lsls	r3, r3, #2
 800ba5a:	441a      	add	r2, r3
 800ba5c:	8afb      	ldrh	r3, [r7, #22]
 800ba5e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ba62:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ba66:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ba6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ba6e:	b29b      	uxth	r3, r3
 800ba70:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800ba72:	2300      	movs	r3, #0
}
 800ba74:	4618      	mov	r0, r3
 800ba76:	3798      	adds	r7, #152	@ 0x98
 800ba78:	46bd      	mov	sp, r7
 800ba7a:	bd80      	pop	{r7, pc}

0800ba7c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800ba7c:	b480      	push	{r7}
 800ba7e:	b087      	sub	sp, #28
 800ba80:	af00      	add	r7, sp, #0
 800ba82:	60f8      	str	r0, [r7, #12]
 800ba84:	607b      	str	r3, [r7, #4]
 800ba86:	460b      	mov	r3, r1
 800ba88:	817b      	strh	r3, [r7, #10]
 800ba8a:	4613      	mov	r3, r2
 800ba8c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800ba8e:	897b      	ldrh	r3, [r7, #10]
 800ba90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ba94:	b29b      	uxth	r3, r3
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d00b      	beq.n	800bab2 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ba9a:	897b      	ldrh	r3, [r7, #10]
 800ba9c:	f003 0207 	and.w	r2, r3, #7
 800baa0:	4613      	mov	r3, r2
 800baa2:	009b      	lsls	r3, r3, #2
 800baa4:	4413      	add	r3, r2
 800baa6:	00db      	lsls	r3, r3, #3
 800baa8:	3310      	adds	r3, #16
 800baaa:	68fa      	ldr	r2, [r7, #12]
 800baac:	4413      	add	r3, r2
 800baae:	617b      	str	r3, [r7, #20]
 800bab0:	e009      	b.n	800bac6 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800bab2:	897a      	ldrh	r2, [r7, #10]
 800bab4:	4613      	mov	r3, r2
 800bab6:	009b      	lsls	r3, r3, #2
 800bab8:	4413      	add	r3, r2
 800baba:	00db      	lsls	r3, r3, #3
 800babc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800bac0:	68fa      	ldr	r2, [r7, #12]
 800bac2:	4413      	add	r3, r2
 800bac4:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800bac6:	893b      	ldrh	r3, [r7, #8]
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d107      	bne.n	800badc <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800bacc:	697b      	ldr	r3, [r7, #20]
 800bace:	2200      	movs	r2, #0
 800bad0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	b29a      	uxth	r2, r3
 800bad6:	697b      	ldr	r3, [r7, #20]
 800bad8:	80da      	strh	r2, [r3, #6]
 800bada:	e00b      	b.n	800baf4 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800badc:	697b      	ldr	r3, [r7, #20]
 800bade:	2201      	movs	r2, #1
 800bae0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	b29a      	uxth	r2, r3
 800bae6:	697b      	ldr	r3, [r7, #20]
 800bae8:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	0c1b      	lsrs	r3, r3, #16
 800baee:	b29a      	uxth	r2, r3
 800baf0:	697b      	ldr	r3, [r7, #20]
 800baf2:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800baf4:	2300      	movs	r3, #0
}
 800baf6:	4618      	mov	r0, r3
 800baf8:	371c      	adds	r7, #28
 800bafa:	46bd      	mov	sp, r7
 800bafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb00:	4770      	bx	lr

0800bb02 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800bb02:	b480      	push	{r7}
 800bb04:	b085      	sub	sp, #20
 800bb06:	af00      	add	r7, sp, #0
 800bb08:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	2201      	movs	r2, #1
 800bb14:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	2200      	movs	r2, #0
 800bb1c:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800bb26:	b29b      	uxth	r3, r3
 800bb28:	f043 0301 	orr.w	r3, r3, #1
 800bb2c:	b29a      	uxth	r2, r3
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800bb3a:	b29b      	uxth	r3, r3
 800bb3c:	f043 0302 	orr.w	r3, r3, #2
 800bb40:	b29a      	uxth	r2, r3
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 800bb48:	2300      	movs	r3, #0
}
 800bb4a:	4618      	mov	r0, r3
 800bb4c:	3714      	adds	r7, #20
 800bb4e:	46bd      	mov	sp, r7
 800bb50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb54:	4770      	bx	lr
	...

0800bb58 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800bb58:	b480      	push	{r7}
 800bb5a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800bb5c:	4b05      	ldr	r3, [pc, #20]	@ (800bb74 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	4a04      	ldr	r2, [pc, #16]	@ (800bb74 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800bb62:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800bb66:	6013      	str	r3, [r2, #0]
}
 800bb68:	bf00      	nop
 800bb6a:	46bd      	mov	sp, r7
 800bb6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb70:	4770      	bx	lr
 800bb72:	bf00      	nop
 800bb74:	58000400 	.word	0x58000400

0800bb78 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800bb78:	b480      	push	{r7}
 800bb7a:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 800bb7c:	4b04      	ldr	r3, [pc, #16]	@ (800bb90 <HAL_PWREx_GetVoltageRange+0x18>)
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 800bb84:	4618      	mov	r0, r3
 800bb86:	46bd      	mov	sp, r7
 800bb88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb8c:	4770      	bx	lr
 800bb8e:	bf00      	nop
 800bb90:	58000400 	.word	0x58000400

0800bb94 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800bb94:	b480      	push	{r7}
 800bb96:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800bb98:	4b05      	ldr	r3, [pc, #20]	@ (800bbb0 <HAL_PWREx_EnableVddUSB+0x1c>)
 800bb9a:	685b      	ldr	r3, [r3, #4]
 800bb9c:	4a04      	ldr	r2, [pc, #16]	@ (800bbb0 <HAL_PWREx_EnableVddUSB+0x1c>)
 800bb9e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800bba2:	6053      	str	r3, [r2, #4]
}
 800bba4:	bf00      	nop
 800bba6:	46bd      	mov	sp, r7
 800bba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbac:	4770      	bx	lr
 800bbae:	bf00      	nop
 800bbb0:	58000400 	.word	0x58000400

0800bbb4 <LL_RCC_HSE_IsEnabledDiv2>:
{
 800bbb4:	b480      	push	{r7}
 800bbb6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800bbb8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800bbc2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bbc6:	d101      	bne.n	800bbcc <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800bbc8:	2301      	movs	r3, #1
 800bbca:	e000      	b.n	800bbce <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800bbcc:	2300      	movs	r3, #0
}
 800bbce:	4618      	mov	r0, r3
 800bbd0:	46bd      	mov	sp, r7
 800bbd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbd6:	4770      	bx	lr

0800bbd8 <LL_RCC_HSE_Enable>:
{
 800bbd8:	b480      	push	{r7}
 800bbda:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800bbdc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800bbe6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800bbea:	6013      	str	r3, [r2, #0]
}
 800bbec:	bf00      	nop
 800bbee:	46bd      	mov	sp, r7
 800bbf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbf4:	4770      	bx	lr

0800bbf6 <LL_RCC_HSE_Disable>:
{
 800bbf6:	b480      	push	{r7}
 800bbf8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800bbfa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800bc04:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800bc08:	6013      	str	r3, [r2, #0]
}
 800bc0a:	bf00      	nop
 800bc0c:	46bd      	mov	sp, r7
 800bc0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc12:	4770      	bx	lr

0800bc14 <LL_RCC_HSE_IsReady>:
{
 800bc14:	b480      	push	{r7}
 800bc16:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800bc18:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bc22:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bc26:	d101      	bne.n	800bc2c <LL_RCC_HSE_IsReady+0x18>
 800bc28:	2301      	movs	r3, #1
 800bc2a:	e000      	b.n	800bc2e <LL_RCC_HSE_IsReady+0x1a>
 800bc2c:	2300      	movs	r3, #0
}
 800bc2e:	4618      	mov	r0, r3
 800bc30:	46bd      	mov	sp, r7
 800bc32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc36:	4770      	bx	lr

0800bc38 <LL_RCC_HSI_Enable>:
{
 800bc38:	b480      	push	{r7}
 800bc3a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800bc3c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800bc46:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800bc4a:	6013      	str	r3, [r2, #0]
}
 800bc4c:	bf00      	nop
 800bc4e:	46bd      	mov	sp, r7
 800bc50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc54:	4770      	bx	lr

0800bc56 <LL_RCC_HSI_Disable>:
{
 800bc56:	b480      	push	{r7}
 800bc58:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800bc5a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800bc64:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bc68:	6013      	str	r3, [r2, #0]
}
 800bc6a:	bf00      	nop
 800bc6c:	46bd      	mov	sp, r7
 800bc6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc72:	4770      	bx	lr

0800bc74 <LL_RCC_HSI_IsReady>:
{
 800bc74:	b480      	push	{r7}
 800bc76:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800bc78:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800bc82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bc86:	d101      	bne.n	800bc8c <LL_RCC_HSI_IsReady+0x18>
 800bc88:	2301      	movs	r3, #1
 800bc8a:	e000      	b.n	800bc8e <LL_RCC_HSI_IsReady+0x1a>
 800bc8c:	2300      	movs	r3, #0
}
 800bc8e:	4618      	mov	r0, r3
 800bc90:	46bd      	mov	sp, r7
 800bc92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc96:	4770      	bx	lr

0800bc98 <LL_RCC_HSI_SetCalibTrimming>:
{
 800bc98:	b480      	push	{r7}
 800bc9a:	b083      	sub	sp, #12
 800bc9c:	af00      	add	r7, sp, #0
 800bc9e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800bca0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bca4:	685b      	ldr	r3, [r3, #4]
 800bca6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	061b      	lsls	r3, r3, #24
 800bcae:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bcb2:	4313      	orrs	r3, r2
 800bcb4:	604b      	str	r3, [r1, #4]
}
 800bcb6:	bf00      	nop
 800bcb8:	370c      	adds	r7, #12
 800bcba:	46bd      	mov	sp, r7
 800bcbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc0:	4770      	bx	lr

0800bcc2 <LL_RCC_HSI48_Enable>:
{
 800bcc2:	b480      	push	{r7}
 800bcc4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800bcc6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bcca:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800bcce:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800bcd2:	f043 0301 	orr.w	r3, r3, #1
 800bcd6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 800bcda:	bf00      	nop
 800bcdc:	46bd      	mov	sp, r7
 800bcde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce2:	4770      	bx	lr

0800bce4 <LL_RCC_HSI48_Disable>:
{
 800bce4:	b480      	push	{r7}
 800bce6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800bce8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bcec:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800bcf0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800bcf4:	f023 0301 	bic.w	r3, r3, #1
 800bcf8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 800bcfc:	bf00      	nop
 800bcfe:	46bd      	mov	sp, r7
 800bd00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd04:	4770      	bx	lr

0800bd06 <LL_RCC_HSI48_IsReady>:
{
 800bd06:	b480      	push	{r7}
 800bd08:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800bd0a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bd0e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800bd12:	f003 0302 	and.w	r3, r3, #2
 800bd16:	2b02      	cmp	r3, #2
 800bd18:	d101      	bne.n	800bd1e <LL_RCC_HSI48_IsReady+0x18>
 800bd1a:	2301      	movs	r3, #1
 800bd1c:	e000      	b.n	800bd20 <LL_RCC_HSI48_IsReady+0x1a>
 800bd1e:	2300      	movs	r3, #0
}
 800bd20:	4618      	mov	r0, r3
 800bd22:	46bd      	mov	sp, r7
 800bd24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd28:	4770      	bx	lr

0800bd2a <LL_RCC_LSE_Enable>:
{
 800bd2a:	b480      	push	{r7}
 800bd2c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800bd2e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bd32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bd36:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800bd3a:	f043 0301 	orr.w	r3, r3, #1
 800bd3e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800bd42:	bf00      	nop
 800bd44:	46bd      	mov	sp, r7
 800bd46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd4a:	4770      	bx	lr

0800bd4c <LL_RCC_LSE_Disable>:
{
 800bd4c:	b480      	push	{r7}
 800bd4e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800bd50:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bd54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bd58:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800bd5c:	f023 0301 	bic.w	r3, r3, #1
 800bd60:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800bd64:	bf00      	nop
 800bd66:	46bd      	mov	sp, r7
 800bd68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd6c:	4770      	bx	lr

0800bd6e <LL_RCC_LSE_EnableBypass>:
{
 800bd6e:	b480      	push	{r7}
 800bd70:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800bd72:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bd76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bd7a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800bd7e:	f043 0304 	orr.w	r3, r3, #4
 800bd82:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800bd86:	bf00      	nop
 800bd88:	46bd      	mov	sp, r7
 800bd8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd8e:	4770      	bx	lr

0800bd90 <LL_RCC_LSE_DisableBypass>:
{
 800bd90:	b480      	push	{r7}
 800bd92:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800bd94:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bd98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bd9c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800bda0:	f023 0304 	bic.w	r3, r3, #4
 800bda4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800bda8:	bf00      	nop
 800bdaa:	46bd      	mov	sp, r7
 800bdac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdb0:	4770      	bx	lr

0800bdb2 <LL_RCC_LSE_IsReady>:
{
 800bdb2:	b480      	push	{r7}
 800bdb4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800bdb6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bdba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bdbe:	f003 0302 	and.w	r3, r3, #2
 800bdc2:	2b02      	cmp	r3, #2
 800bdc4:	d101      	bne.n	800bdca <LL_RCC_LSE_IsReady+0x18>
 800bdc6:	2301      	movs	r3, #1
 800bdc8:	e000      	b.n	800bdcc <LL_RCC_LSE_IsReady+0x1a>
 800bdca:	2300      	movs	r3, #0
}
 800bdcc:	4618      	mov	r0, r3
 800bdce:	46bd      	mov	sp, r7
 800bdd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdd4:	4770      	bx	lr

0800bdd6 <LL_RCC_LSI1_Enable>:
{
 800bdd6:	b480      	push	{r7}
 800bdd8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800bdda:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bdde:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800bde2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800bde6:	f043 0301 	orr.w	r3, r3, #1
 800bdea:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800bdee:	bf00      	nop
 800bdf0:	46bd      	mov	sp, r7
 800bdf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdf6:	4770      	bx	lr

0800bdf8 <LL_RCC_LSI1_Disable>:
{
 800bdf8:	b480      	push	{r7}
 800bdfa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800bdfc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800be00:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800be04:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800be08:	f023 0301 	bic.w	r3, r3, #1
 800be0c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800be10:	bf00      	nop
 800be12:	46bd      	mov	sp, r7
 800be14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be18:	4770      	bx	lr

0800be1a <LL_RCC_LSI1_IsReady>:
{
 800be1a:	b480      	push	{r7}
 800be1c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800be1e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800be22:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800be26:	f003 0302 	and.w	r3, r3, #2
 800be2a:	2b02      	cmp	r3, #2
 800be2c:	d101      	bne.n	800be32 <LL_RCC_LSI1_IsReady+0x18>
 800be2e:	2301      	movs	r3, #1
 800be30:	e000      	b.n	800be34 <LL_RCC_LSI1_IsReady+0x1a>
 800be32:	2300      	movs	r3, #0
}
 800be34:	4618      	mov	r0, r3
 800be36:	46bd      	mov	sp, r7
 800be38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be3c:	4770      	bx	lr

0800be3e <LL_RCC_LSI2_Enable>:
{
 800be3e:	b480      	push	{r7}
 800be40:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800be42:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800be46:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800be4a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800be4e:	f043 0304 	orr.w	r3, r3, #4
 800be52:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800be56:	bf00      	nop
 800be58:	46bd      	mov	sp, r7
 800be5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be5e:	4770      	bx	lr

0800be60 <LL_RCC_LSI2_Disable>:
{
 800be60:	b480      	push	{r7}
 800be62:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800be64:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800be68:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800be6c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800be70:	f023 0304 	bic.w	r3, r3, #4
 800be74:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800be78:	bf00      	nop
 800be7a:	46bd      	mov	sp, r7
 800be7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be80:	4770      	bx	lr

0800be82 <LL_RCC_LSI2_IsReady>:
{
 800be82:	b480      	push	{r7}
 800be84:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800be86:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800be8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800be8e:	f003 0308 	and.w	r3, r3, #8
 800be92:	2b08      	cmp	r3, #8
 800be94:	d101      	bne.n	800be9a <LL_RCC_LSI2_IsReady+0x18>
 800be96:	2301      	movs	r3, #1
 800be98:	e000      	b.n	800be9c <LL_RCC_LSI2_IsReady+0x1a>
 800be9a:	2300      	movs	r3, #0
}
 800be9c:	4618      	mov	r0, r3
 800be9e:	46bd      	mov	sp, r7
 800bea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bea4:	4770      	bx	lr

0800bea6 <LL_RCC_LSI2_SetTrimming>:
{
 800bea6:	b480      	push	{r7}
 800bea8:	b083      	sub	sp, #12
 800beaa:	af00      	add	r7, sp, #0
 800beac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800beae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800beb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800beb6:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	021b      	lsls	r3, r3, #8
 800bebe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bec2:	4313      	orrs	r3, r2
 800bec4:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 800bec8:	bf00      	nop
 800beca:	370c      	adds	r7, #12
 800becc:	46bd      	mov	sp, r7
 800bece:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bed2:	4770      	bx	lr

0800bed4 <LL_RCC_MSI_Enable>:
{
 800bed4:	b480      	push	{r7}
 800bed6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800bed8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800bee2:	f043 0301 	orr.w	r3, r3, #1
 800bee6:	6013      	str	r3, [r2, #0]
}
 800bee8:	bf00      	nop
 800beea:	46bd      	mov	sp, r7
 800beec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bef0:	4770      	bx	lr

0800bef2 <LL_RCC_MSI_Disable>:
{
 800bef2:	b480      	push	{r7}
 800bef4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800bef6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800bf00:	f023 0301 	bic.w	r3, r3, #1
 800bf04:	6013      	str	r3, [r2, #0]
}
 800bf06:	bf00      	nop
 800bf08:	46bd      	mov	sp, r7
 800bf0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf0e:	4770      	bx	lr

0800bf10 <LL_RCC_MSI_IsReady>:
{
 800bf10:	b480      	push	{r7}
 800bf12:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800bf14:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	f003 0302 	and.w	r3, r3, #2
 800bf1e:	2b02      	cmp	r3, #2
 800bf20:	d101      	bne.n	800bf26 <LL_RCC_MSI_IsReady+0x16>
 800bf22:	2301      	movs	r3, #1
 800bf24:	e000      	b.n	800bf28 <LL_RCC_MSI_IsReady+0x18>
 800bf26:	2300      	movs	r3, #0
}
 800bf28:	4618      	mov	r0, r3
 800bf2a:	46bd      	mov	sp, r7
 800bf2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf30:	4770      	bx	lr

0800bf32 <LL_RCC_MSI_SetRange>:
{
 800bf32:	b480      	push	{r7}
 800bf34:	b083      	sub	sp, #12
 800bf36:	af00      	add	r7, sp, #0
 800bf38:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800bf3a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800bf44:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	4313      	orrs	r3, r2
 800bf4c:	600b      	str	r3, [r1, #0]
}
 800bf4e:	bf00      	nop
 800bf50:	370c      	adds	r7, #12
 800bf52:	46bd      	mov	sp, r7
 800bf54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf58:	4770      	bx	lr

0800bf5a <LL_RCC_MSI_GetRange>:
{
 800bf5a:	b480      	push	{r7}
 800bf5c:	b083      	sub	sp, #12
 800bf5e:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 800bf60:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800bf6a:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	2bb0      	cmp	r3, #176	@ 0xb0
 800bf70:	d901      	bls.n	800bf76 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 800bf72:	23b0      	movs	r3, #176	@ 0xb0
 800bf74:	607b      	str	r3, [r7, #4]
  return msiRange;
 800bf76:	687b      	ldr	r3, [r7, #4]
}
 800bf78:	4618      	mov	r0, r3
 800bf7a:	370c      	adds	r7, #12
 800bf7c:	46bd      	mov	sp, r7
 800bf7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf82:	4770      	bx	lr

0800bf84 <LL_RCC_MSI_SetCalibTrimming>:
{
 800bf84:	b480      	push	{r7}
 800bf86:	b083      	sub	sp, #12
 800bf88:	af00      	add	r7, sp, #0
 800bf8a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800bf8c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bf90:	685b      	ldr	r3, [r3, #4]
 800bf92:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	021b      	lsls	r3, r3, #8
 800bf9a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bf9e:	4313      	orrs	r3, r2
 800bfa0:	604b      	str	r3, [r1, #4]
}
 800bfa2:	bf00      	nop
 800bfa4:	370c      	adds	r7, #12
 800bfa6:	46bd      	mov	sp, r7
 800bfa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfac:	4770      	bx	lr

0800bfae <LL_RCC_SetSysClkSource>:
{
 800bfae:	b480      	push	{r7}
 800bfb0:	b083      	sub	sp, #12
 800bfb2:	af00      	add	r7, sp, #0
 800bfb4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800bfb6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bfba:	689b      	ldr	r3, [r3, #8]
 800bfbc:	f023 0203 	bic.w	r2, r3, #3
 800bfc0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	4313      	orrs	r3, r2
 800bfc8:	608b      	str	r3, [r1, #8]
}
 800bfca:	bf00      	nop
 800bfcc:	370c      	adds	r7, #12
 800bfce:	46bd      	mov	sp, r7
 800bfd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfd4:	4770      	bx	lr

0800bfd6 <LL_RCC_GetSysClkSource>:
{
 800bfd6:	b480      	push	{r7}
 800bfd8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800bfda:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bfde:	689b      	ldr	r3, [r3, #8]
 800bfe0:	f003 030c 	and.w	r3, r3, #12
}
 800bfe4:	4618      	mov	r0, r3
 800bfe6:	46bd      	mov	sp, r7
 800bfe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfec:	4770      	bx	lr

0800bfee <LL_RCC_SetAHBPrescaler>:
{
 800bfee:	b480      	push	{r7}
 800bff0:	b083      	sub	sp, #12
 800bff2:	af00      	add	r7, sp, #0
 800bff4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800bff6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bffa:	689b      	ldr	r3, [r3, #8]
 800bffc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800c000:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	4313      	orrs	r3, r2
 800c008:	608b      	str	r3, [r1, #8]
}
 800c00a:	bf00      	nop
 800c00c:	370c      	adds	r7, #12
 800c00e:	46bd      	mov	sp, r7
 800c010:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c014:	4770      	bx	lr

0800c016 <LL_C2_RCC_SetAHBPrescaler>:
{
 800c016:	b480      	push	{r7}
 800c018:	b083      	sub	sp, #12
 800c01a:	af00      	add	r7, sp, #0
 800c01c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800c01e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c022:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800c026:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800c02a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	4313      	orrs	r3, r2
 800c032:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800c036:	bf00      	nop
 800c038:	370c      	adds	r7, #12
 800c03a:	46bd      	mov	sp, r7
 800c03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c040:	4770      	bx	lr

0800c042 <LL_RCC_SetAHB4Prescaler>:
{
 800c042:	b480      	push	{r7}
 800c044:	b083      	sub	sp, #12
 800c046:	af00      	add	r7, sp, #0
 800c048:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800c04a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c04e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800c052:	f023 020f 	bic.w	r2, r3, #15
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	091b      	lsrs	r3, r3, #4
 800c05a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c05e:	4313      	orrs	r3, r2
 800c060:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800c064:	bf00      	nop
 800c066:	370c      	adds	r7, #12
 800c068:	46bd      	mov	sp, r7
 800c06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c06e:	4770      	bx	lr

0800c070 <LL_RCC_SetAPB1Prescaler>:
{
 800c070:	b480      	push	{r7}
 800c072:	b083      	sub	sp, #12
 800c074:	af00      	add	r7, sp, #0
 800c076:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800c078:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c07c:	689b      	ldr	r3, [r3, #8]
 800c07e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800c082:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	4313      	orrs	r3, r2
 800c08a:	608b      	str	r3, [r1, #8]
}
 800c08c:	bf00      	nop
 800c08e:	370c      	adds	r7, #12
 800c090:	46bd      	mov	sp, r7
 800c092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c096:	4770      	bx	lr

0800c098 <LL_RCC_SetAPB2Prescaler>:
{
 800c098:	b480      	push	{r7}
 800c09a:	b083      	sub	sp, #12
 800c09c:	af00      	add	r7, sp, #0
 800c09e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800c0a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c0a4:	689b      	ldr	r3, [r3, #8]
 800c0a6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800c0aa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	4313      	orrs	r3, r2
 800c0b2:	608b      	str	r3, [r1, #8]
}
 800c0b4:	bf00      	nop
 800c0b6:	370c      	adds	r7, #12
 800c0b8:	46bd      	mov	sp, r7
 800c0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0be:	4770      	bx	lr

0800c0c0 <LL_RCC_GetAHBPrescaler>:
{
 800c0c0:	b480      	push	{r7}
 800c0c2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800c0c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c0c8:	689b      	ldr	r3, [r3, #8]
 800c0ca:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800c0ce:	4618      	mov	r0, r3
 800c0d0:	46bd      	mov	sp, r7
 800c0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0d6:	4770      	bx	lr

0800c0d8 <LL_RCC_GetAHB4Prescaler>:
{
 800c0d8:	b480      	push	{r7}
 800c0da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800c0dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c0e0:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800c0e4:	011b      	lsls	r3, r3, #4
 800c0e6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800c0ea:	4618      	mov	r0, r3
 800c0ec:	46bd      	mov	sp, r7
 800c0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0f2:	4770      	bx	lr

0800c0f4 <LL_RCC_GetAPB1Prescaler>:
{
 800c0f4:	b480      	push	{r7}
 800c0f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800c0f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c0fc:	689b      	ldr	r3, [r3, #8]
 800c0fe:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 800c102:	4618      	mov	r0, r3
 800c104:	46bd      	mov	sp, r7
 800c106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c10a:	4770      	bx	lr

0800c10c <LL_RCC_GetAPB2Prescaler>:
{
 800c10c:	b480      	push	{r7}
 800c10e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800c110:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c114:	689b      	ldr	r3, [r3, #8]
 800c116:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 800c11a:	4618      	mov	r0, r3
 800c11c:	46bd      	mov	sp, r7
 800c11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c122:	4770      	bx	lr

0800c124 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800c124:	b480      	push	{r7}
 800c126:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800c128:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800c132:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800c136:	6013      	str	r3, [r2, #0]
}
 800c138:	bf00      	nop
 800c13a:	46bd      	mov	sp, r7
 800c13c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c140:	4770      	bx	lr

0800c142 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800c142:	b480      	push	{r7}
 800c144:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800c146:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800c150:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800c154:	6013      	str	r3, [r2, #0]
}
 800c156:	bf00      	nop
 800c158:	46bd      	mov	sp, r7
 800c15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c15e:	4770      	bx	lr

0800c160 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800c160:	b480      	push	{r7}
 800c162:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800c164:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c16e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c172:	d101      	bne.n	800c178 <LL_RCC_PLL_IsReady+0x18>
 800c174:	2301      	movs	r3, #1
 800c176:	e000      	b.n	800c17a <LL_RCC_PLL_IsReady+0x1a>
 800c178:	2300      	movs	r3, #0
}
 800c17a:	4618      	mov	r0, r3
 800c17c:	46bd      	mov	sp, r7
 800c17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c182:	4770      	bx	lr

0800c184 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800c184:	b480      	push	{r7}
 800c186:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800c188:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c18c:	68db      	ldr	r3, [r3, #12]
 800c18e:	0a1b      	lsrs	r3, r3, #8
 800c190:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 800c194:	4618      	mov	r0, r3
 800c196:	46bd      	mov	sp, r7
 800c198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c19c:	4770      	bx	lr

0800c19e <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800c19e:	b480      	push	{r7}
 800c1a0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800c1a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c1a6:	68db      	ldr	r3, [r3, #12]
 800c1a8:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 800c1ac:	4618      	mov	r0, r3
 800c1ae:	46bd      	mov	sp, r7
 800c1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1b4:	4770      	bx	lr

0800c1b6 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800c1b6:	b480      	push	{r7}
 800c1b8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800c1ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c1be:	68db      	ldr	r3, [r3, #12]
 800c1c0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 800c1c4:	4618      	mov	r0, r3
 800c1c6:	46bd      	mov	sp, r7
 800c1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1cc:	4770      	bx	lr

0800c1ce <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800c1ce:	b480      	push	{r7}
 800c1d0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800c1d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c1d6:	68db      	ldr	r3, [r3, #12]
 800c1d8:	f003 0303 	and.w	r3, r3, #3
}
 800c1dc:	4618      	mov	r0, r3
 800c1de:	46bd      	mov	sp, r7
 800c1e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1e4:	4770      	bx	lr

0800c1e6 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800c1e6:	b480      	push	{r7}
 800c1e8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800c1ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c1ee:	689b      	ldr	r3, [r3, #8]
 800c1f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c1f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c1f8:	d101      	bne.n	800c1fe <LL_RCC_IsActiveFlag_HPRE+0x18>
 800c1fa:	2301      	movs	r3, #1
 800c1fc:	e000      	b.n	800c200 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800c1fe:	2300      	movs	r3, #0
}
 800c200:	4618      	mov	r0, r3
 800c202:	46bd      	mov	sp, r7
 800c204:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c208:	4770      	bx	lr

0800c20a <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800c20a:	b480      	push	{r7}
 800c20c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800c20e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c212:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800c216:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c21a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c21e:	d101      	bne.n	800c224 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800c220:	2301      	movs	r3, #1
 800c222:	e000      	b.n	800c226 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 800c224:	2300      	movs	r3, #0
}
 800c226:	4618      	mov	r0, r3
 800c228:	46bd      	mov	sp, r7
 800c22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c22e:	4770      	bx	lr

0800c230 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 800c230:	b480      	push	{r7}
 800c232:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800c234:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c238:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800c23c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c240:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c244:	d101      	bne.n	800c24a <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800c246:	2301      	movs	r3, #1
 800c248:	e000      	b.n	800c24c <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800c24a:	2300      	movs	r3, #0
}
 800c24c:	4618      	mov	r0, r3
 800c24e:	46bd      	mov	sp, r7
 800c250:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c254:	4770      	bx	lr

0800c256 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800c256:	b480      	push	{r7}
 800c258:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800c25a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c25e:	689b      	ldr	r3, [r3, #8]
 800c260:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c264:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c268:	d101      	bne.n	800c26e <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800c26a:	2301      	movs	r3, #1
 800c26c:	e000      	b.n	800c270 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800c26e:	2300      	movs	r3, #0
}
 800c270:	4618      	mov	r0, r3
 800c272:	46bd      	mov	sp, r7
 800c274:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c278:	4770      	bx	lr

0800c27a <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800c27a:	b480      	push	{r7}
 800c27c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800c27e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c282:	689b      	ldr	r3, [r3, #8]
 800c284:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800c288:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800c28c:	d101      	bne.n	800c292 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800c28e:	2301      	movs	r3, #1
 800c290:	e000      	b.n	800c294 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800c292:	2300      	movs	r3, #0
}
 800c294:	4618      	mov	r0, r3
 800c296:	46bd      	mov	sp, r7
 800c298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c29c:	4770      	bx	lr
	...

0800c2a0 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c2a0:	b590      	push	{r4, r7, lr}
 800c2a2:	b08d      	sub	sp, #52	@ 0x34
 800c2a4:	af00      	add	r7, sp, #0
 800c2a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d101      	bne.n	800c2b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800c2ae:	2301      	movs	r3, #1
 800c2b0:	e363      	b.n	800c97a <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	f003 0320 	and.w	r3, r3, #32
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	f000 808d 	beq.w	800c3da <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c2c0:	f7ff fe89 	bl	800bfd6 <LL_RCC_GetSysClkSource>
 800c2c4:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800c2c6:	f7ff ff82 	bl	800c1ce <LL_RCC_PLL_GetMainSource>
 800c2ca:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800c2cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d005      	beq.n	800c2de <HAL_RCC_OscConfig+0x3e>
 800c2d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c2d4:	2b0c      	cmp	r3, #12
 800c2d6:	d147      	bne.n	800c368 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 800c2d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2da:	2b01      	cmp	r3, #1
 800c2dc:	d144      	bne.n	800c368 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	69db      	ldr	r3, [r3, #28]
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d101      	bne.n	800c2ea <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800c2e6:	2301      	movs	r3, #1
 800c2e8:	e347      	b.n	800c97a <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800c2ee:	f7ff fe34 	bl	800bf5a <LL_RCC_MSI_GetRange>
 800c2f2:	4603      	mov	r3, r0
 800c2f4:	429c      	cmp	r4, r3
 800c2f6:	d914      	bls.n	800c322 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c2fc:	4618      	mov	r0, r3
 800c2fe:	f000 fd2f 	bl	800cd60 <RCC_SetFlashLatencyFromMSIRange>
 800c302:	4603      	mov	r3, r0
 800c304:	2b00      	cmp	r3, #0
 800c306:	d001      	beq.n	800c30c <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 800c308:	2301      	movs	r3, #1
 800c30a:	e336      	b.n	800c97a <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c310:	4618      	mov	r0, r3
 800c312:	f7ff fe0e 	bl	800bf32 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	6a1b      	ldr	r3, [r3, #32]
 800c31a:	4618      	mov	r0, r3
 800c31c:	f7ff fe32 	bl	800bf84 <LL_RCC_MSI_SetCalibTrimming>
 800c320:	e013      	b.n	800c34a <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c326:	4618      	mov	r0, r3
 800c328:	f7ff fe03 	bl	800bf32 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	6a1b      	ldr	r3, [r3, #32]
 800c330:	4618      	mov	r0, r3
 800c332:	f7ff fe27 	bl	800bf84 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c33a:	4618      	mov	r0, r3
 800c33c:	f000 fd10 	bl	800cd60 <RCC_SetFlashLatencyFromMSIRange>
 800c340:	4603      	mov	r3, r0
 800c342:	2b00      	cmp	r3, #0
 800c344:	d001      	beq.n	800c34a <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 800c346:	2301      	movs	r3, #1
 800c348:	e317      	b.n	800c97a <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800c34a:	f000 fcc9 	bl	800cce0 <HAL_RCC_GetHCLKFreq>
 800c34e:	4603      	mov	r3, r0
 800c350:	4aa4      	ldr	r2, [pc, #656]	@ (800c5e4 <HAL_RCC_OscConfig+0x344>)
 800c352:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800c354:	4ba4      	ldr	r3, [pc, #656]	@ (800c5e8 <HAL_RCC_OscConfig+0x348>)
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	4618      	mov	r0, r3
 800c35a:	f7fb f84b 	bl	80073f4 <HAL_InitTick>
 800c35e:	4603      	mov	r3, r0
 800c360:	2b00      	cmp	r3, #0
 800c362:	d039      	beq.n	800c3d8 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 800c364:	2301      	movs	r3, #1
 800c366:	e308      	b.n	800c97a <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	69db      	ldr	r3, [r3, #28]
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d01e      	beq.n	800c3ae <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800c370:	f7ff fdb0 	bl	800bed4 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800c374:	f7fb f88c 	bl	8007490 <HAL_GetTick>
 800c378:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800c37a:	e008      	b.n	800c38e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800c37c:	f7fb f888 	bl	8007490 <HAL_GetTick>
 800c380:	4602      	mov	r2, r0
 800c382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c384:	1ad3      	subs	r3, r2, r3
 800c386:	2b02      	cmp	r3, #2
 800c388:	d901      	bls.n	800c38e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800c38a:	2303      	movs	r3, #3
 800c38c:	e2f5      	b.n	800c97a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 800c38e:	f7ff fdbf 	bl	800bf10 <LL_RCC_MSI_IsReady>
 800c392:	4603      	mov	r3, r0
 800c394:	2b00      	cmp	r3, #0
 800c396:	d0f1      	beq.n	800c37c <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c39c:	4618      	mov	r0, r3
 800c39e:	f7ff fdc8 	bl	800bf32 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	6a1b      	ldr	r3, [r3, #32]
 800c3a6:	4618      	mov	r0, r3
 800c3a8:	f7ff fdec 	bl	800bf84 <LL_RCC_MSI_SetCalibTrimming>
 800c3ac:	e015      	b.n	800c3da <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800c3ae:	f7ff fda0 	bl	800bef2 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800c3b2:	f7fb f86d 	bl	8007490 <HAL_GetTick>
 800c3b6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800c3b8:	e008      	b.n	800c3cc <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800c3ba:	f7fb f869 	bl	8007490 <HAL_GetTick>
 800c3be:	4602      	mov	r2, r0
 800c3c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3c2:	1ad3      	subs	r3, r2, r3
 800c3c4:	2b02      	cmp	r3, #2
 800c3c6:	d901      	bls.n	800c3cc <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800c3c8:	2303      	movs	r3, #3
 800c3ca:	e2d6      	b.n	800c97a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 800c3cc:	f7ff fda0 	bl	800bf10 <LL_RCC_MSI_IsReady>
 800c3d0:	4603      	mov	r3, r0
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d1f1      	bne.n	800c3ba <HAL_RCC_OscConfig+0x11a>
 800c3d6:	e000      	b.n	800c3da <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800c3d8:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	f003 0301 	and.w	r3, r3, #1
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d047      	beq.n	800c476 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c3e6:	f7ff fdf6 	bl	800bfd6 <LL_RCC_GetSysClkSource>
 800c3ea:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800c3ec:	f7ff feef 	bl	800c1ce <LL_RCC_PLL_GetMainSource>
 800c3f0:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800c3f2:	6a3b      	ldr	r3, [r7, #32]
 800c3f4:	2b08      	cmp	r3, #8
 800c3f6:	d005      	beq.n	800c404 <HAL_RCC_OscConfig+0x164>
 800c3f8:	6a3b      	ldr	r3, [r7, #32]
 800c3fa:	2b0c      	cmp	r3, #12
 800c3fc:	d108      	bne.n	800c410 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800c3fe:	69fb      	ldr	r3, [r7, #28]
 800c400:	2b03      	cmp	r3, #3
 800c402:	d105      	bne.n	800c410 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	685b      	ldr	r3, [r3, #4]
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d134      	bne.n	800c476 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 800c40c:	2301      	movs	r3, #1
 800c40e:	e2b4      	b.n	800c97a <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	685b      	ldr	r3, [r3, #4]
 800c414:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c418:	d102      	bne.n	800c420 <HAL_RCC_OscConfig+0x180>
 800c41a:	f7ff fbdd 	bl	800bbd8 <LL_RCC_HSE_Enable>
 800c41e:	e001      	b.n	800c424 <HAL_RCC_OscConfig+0x184>
 800c420:	f7ff fbe9 	bl	800bbf6 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	685b      	ldr	r3, [r3, #4]
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d012      	beq.n	800c452 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c42c:	f7fb f830 	bl	8007490 <HAL_GetTick>
 800c430:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800c432:	e008      	b.n	800c446 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c434:	f7fb f82c 	bl	8007490 <HAL_GetTick>
 800c438:	4602      	mov	r2, r0
 800c43a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c43c:	1ad3      	subs	r3, r2, r3
 800c43e:	2b64      	cmp	r3, #100	@ 0x64
 800c440:	d901      	bls.n	800c446 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800c442:	2303      	movs	r3, #3
 800c444:	e299      	b.n	800c97a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 800c446:	f7ff fbe5 	bl	800bc14 <LL_RCC_HSE_IsReady>
 800c44a:	4603      	mov	r3, r0
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d0f1      	beq.n	800c434 <HAL_RCC_OscConfig+0x194>
 800c450:	e011      	b.n	800c476 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c452:	f7fb f81d 	bl	8007490 <HAL_GetTick>
 800c456:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800c458:	e008      	b.n	800c46c <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c45a:	f7fb f819 	bl	8007490 <HAL_GetTick>
 800c45e:	4602      	mov	r2, r0
 800c460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c462:	1ad3      	subs	r3, r2, r3
 800c464:	2b64      	cmp	r3, #100	@ 0x64
 800c466:	d901      	bls.n	800c46c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800c468:	2303      	movs	r3, #3
 800c46a:	e286      	b.n	800c97a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 800c46c:	f7ff fbd2 	bl	800bc14 <LL_RCC_HSE_IsReady>
 800c470:	4603      	mov	r3, r0
 800c472:	2b00      	cmp	r3, #0
 800c474:	d1f1      	bne.n	800c45a <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	f003 0302 	and.w	r3, r3, #2
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d04c      	beq.n	800c51c <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c482:	f7ff fda8 	bl	800bfd6 <LL_RCC_GetSysClkSource>
 800c486:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800c488:	f7ff fea1 	bl	800c1ce <LL_RCC_PLL_GetMainSource>
 800c48c:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800c48e:	69bb      	ldr	r3, [r7, #24]
 800c490:	2b04      	cmp	r3, #4
 800c492:	d005      	beq.n	800c4a0 <HAL_RCC_OscConfig+0x200>
 800c494:	69bb      	ldr	r3, [r7, #24]
 800c496:	2b0c      	cmp	r3, #12
 800c498:	d10e      	bne.n	800c4b8 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800c49a:	697b      	ldr	r3, [r7, #20]
 800c49c:	2b02      	cmp	r3, #2
 800c49e:	d10b      	bne.n	800c4b8 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	68db      	ldr	r3, [r3, #12]
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d101      	bne.n	800c4ac <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 800c4a8:	2301      	movs	r3, #1
 800c4aa:	e266      	b.n	800c97a <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	691b      	ldr	r3, [r3, #16]
 800c4b0:	4618      	mov	r0, r3
 800c4b2:	f7ff fbf1 	bl	800bc98 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800c4b6:	e031      	b.n	800c51c <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	68db      	ldr	r3, [r3, #12]
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d019      	beq.n	800c4f4 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800c4c0:	f7ff fbba 	bl	800bc38 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c4c4:	f7fa ffe4 	bl	8007490 <HAL_GetTick>
 800c4c8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800c4ca:	e008      	b.n	800c4de <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c4cc:	f7fa ffe0 	bl	8007490 <HAL_GetTick>
 800c4d0:	4602      	mov	r2, r0
 800c4d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4d4:	1ad3      	subs	r3, r2, r3
 800c4d6:	2b02      	cmp	r3, #2
 800c4d8:	d901      	bls.n	800c4de <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800c4da:	2303      	movs	r3, #3
 800c4dc:	e24d      	b.n	800c97a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 800c4de:	f7ff fbc9 	bl	800bc74 <LL_RCC_HSI_IsReady>
 800c4e2:	4603      	mov	r3, r0
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d0f1      	beq.n	800c4cc <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	691b      	ldr	r3, [r3, #16]
 800c4ec:	4618      	mov	r0, r3
 800c4ee:	f7ff fbd3 	bl	800bc98 <LL_RCC_HSI_SetCalibTrimming>
 800c4f2:	e013      	b.n	800c51c <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c4f4:	f7ff fbaf 	bl	800bc56 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c4f8:	f7fa ffca 	bl	8007490 <HAL_GetTick>
 800c4fc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800c4fe:	e008      	b.n	800c512 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c500:	f7fa ffc6 	bl	8007490 <HAL_GetTick>
 800c504:	4602      	mov	r2, r0
 800c506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c508:	1ad3      	subs	r3, r2, r3
 800c50a:	2b02      	cmp	r3, #2
 800c50c:	d901      	bls.n	800c512 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800c50e:	2303      	movs	r3, #3
 800c510:	e233      	b.n	800c97a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 800c512:	f7ff fbaf 	bl	800bc74 <LL_RCC_HSI_IsReady>
 800c516:	4603      	mov	r3, r0
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d1f1      	bne.n	800c500 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	f003 0308 	and.w	r3, r3, #8
 800c524:	2b00      	cmp	r3, #0
 800c526:	d106      	bne.n	800c536 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800c530:	2b00      	cmp	r3, #0
 800c532:	f000 80a3 	beq.w	800c67c <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	695b      	ldr	r3, [r3, #20]
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d076      	beq.n	800c62c <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	f003 0310 	and.w	r3, r3, #16
 800c546:	2b00      	cmp	r3, #0
 800c548:	d046      	beq.n	800c5d8 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800c54a:	f7ff fc66 	bl	800be1a <LL_RCC_LSI1_IsReady>
 800c54e:	4603      	mov	r3, r0
 800c550:	2b00      	cmp	r3, #0
 800c552:	d113      	bne.n	800c57c <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 800c554:	f7ff fc3f 	bl	800bdd6 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800c558:	f7fa ff9a 	bl	8007490 <HAL_GetTick>
 800c55c:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800c55e:	e008      	b.n	800c572 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800c560:	f7fa ff96 	bl	8007490 <HAL_GetTick>
 800c564:	4602      	mov	r2, r0
 800c566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c568:	1ad3      	subs	r3, r2, r3
 800c56a:	2b02      	cmp	r3, #2
 800c56c:	d901      	bls.n	800c572 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 800c56e:	2303      	movs	r3, #3
 800c570:	e203      	b.n	800c97a <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800c572:	f7ff fc52 	bl	800be1a <LL_RCC_LSI1_IsReady>
 800c576:	4603      	mov	r3, r0
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d0f1      	beq.n	800c560 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 800c57c:	f7ff fc5f 	bl	800be3e <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c580:	f7fa ff86 	bl	8007490 <HAL_GetTick>
 800c584:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800c586:	e008      	b.n	800c59a <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800c588:	f7fa ff82 	bl	8007490 <HAL_GetTick>
 800c58c:	4602      	mov	r2, r0
 800c58e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c590:	1ad3      	subs	r3, r2, r3
 800c592:	2b03      	cmp	r3, #3
 800c594:	d901      	bls.n	800c59a <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 800c596:	2303      	movs	r3, #3
 800c598:	e1ef      	b.n	800c97a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800c59a:	f7ff fc72 	bl	800be82 <LL_RCC_LSI2_IsReady>
 800c59e:	4603      	mov	r3, r0
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d0f1      	beq.n	800c588 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	699b      	ldr	r3, [r3, #24]
 800c5a8:	4618      	mov	r0, r3
 800c5aa:	f7ff fc7c 	bl	800bea6 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800c5ae:	f7ff fc23 	bl	800bdf8 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c5b2:	f7fa ff6d 	bl	8007490 <HAL_GetTick>
 800c5b6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 800c5b8:	e008      	b.n	800c5cc <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800c5ba:	f7fa ff69 	bl	8007490 <HAL_GetTick>
 800c5be:	4602      	mov	r2, r0
 800c5c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5c2:	1ad3      	subs	r3, r2, r3
 800c5c4:	2b02      	cmp	r3, #2
 800c5c6:	d901      	bls.n	800c5cc <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 800c5c8:	2303      	movs	r3, #3
 800c5ca:	e1d6      	b.n	800c97a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 800c5cc:	f7ff fc25 	bl	800be1a <LL_RCC_LSI1_IsReady>
 800c5d0:	4603      	mov	r3, r0
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d1f1      	bne.n	800c5ba <HAL_RCC_OscConfig+0x31a>
 800c5d6:	e051      	b.n	800c67c <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 800c5d8:	f7ff fbfd 	bl	800bdd6 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c5dc:	f7fa ff58 	bl	8007490 <HAL_GetTick>
 800c5e0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800c5e2:	e00c      	b.n	800c5fe <HAL_RCC_OscConfig+0x35e>
 800c5e4:	2000002c 	.word	0x2000002c
 800c5e8:	20000030 	.word	0x20000030
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800c5ec:	f7fa ff50 	bl	8007490 <HAL_GetTick>
 800c5f0:	4602      	mov	r2, r0
 800c5f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5f4:	1ad3      	subs	r3, r2, r3
 800c5f6:	2b02      	cmp	r3, #2
 800c5f8:	d901      	bls.n	800c5fe <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800c5fa:	2303      	movs	r3, #3
 800c5fc:	e1bd      	b.n	800c97a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800c5fe:	f7ff fc0c 	bl	800be1a <LL_RCC_LSI1_IsReady>
 800c602:	4603      	mov	r3, r0
 800c604:	2b00      	cmp	r3, #0
 800c606:	d0f1      	beq.n	800c5ec <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 800c608:	f7ff fc2a 	bl	800be60 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 800c60c:	e008      	b.n	800c620 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800c60e:	f7fa ff3f 	bl	8007490 <HAL_GetTick>
 800c612:	4602      	mov	r2, r0
 800c614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c616:	1ad3      	subs	r3, r2, r3
 800c618:	2b03      	cmp	r3, #3
 800c61a:	d901      	bls.n	800c620 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 800c61c:	2303      	movs	r3, #3
 800c61e:	e1ac      	b.n	800c97a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 800c620:	f7ff fc2f 	bl	800be82 <LL_RCC_LSI2_IsReady>
 800c624:	4603      	mov	r3, r0
 800c626:	2b00      	cmp	r3, #0
 800c628:	d1f1      	bne.n	800c60e <HAL_RCC_OscConfig+0x36e>
 800c62a:	e027      	b.n	800c67c <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 800c62c:	f7ff fc18 	bl	800be60 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c630:	f7fa ff2e 	bl	8007490 <HAL_GetTick>
 800c634:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800c636:	e008      	b.n	800c64a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800c638:	f7fa ff2a 	bl	8007490 <HAL_GetTick>
 800c63c:	4602      	mov	r2, r0
 800c63e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c640:	1ad3      	subs	r3, r2, r3
 800c642:	2b03      	cmp	r3, #3
 800c644:	d901      	bls.n	800c64a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800c646:	2303      	movs	r3, #3
 800c648:	e197      	b.n	800c97a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800c64a:	f7ff fc1a 	bl	800be82 <LL_RCC_LSI2_IsReady>
 800c64e:	4603      	mov	r3, r0
 800c650:	2b00      	cmp	r3, #0
 800c652:	d1f1      	bne.n	800c638 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 800c654:	f7ff fbd0 	bl	800bdf8 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c658:	f7fa ff1a 	bl	8007490 <HAL_GetTick>
 800c65c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800c65e:	e008      	b.n	800c672 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800c660:	f7fa ff16 	bl	8007490 <HAL_GetTick>
 800c664:	4602      	mov	r2, r0
 800c666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c668:	1ad3      	subs	r3, r2, r3
 800c66a:	2b02      	cmp	r3, #2
 800c66c:	d901      	bls.n	800c672 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 800c66e:	2303      	movs	r3, #3
 800c670:	e183      	b.n	800c97a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800c672:	f7ff fbd2 	bl	800be1a <LL_RCC_LSI1_IsReady>
 800c676:	4603      	mov	r3, r0
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d1f1      	bne.n	800c660 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	f003 0304 	and.w	r3, r3, #4
 800c684:	2b00      	cmp	r3, #0
 800c686:	d05b      	beq.n	800c740 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c688:	4ba7      	ldr	r3, [pc, #668]	@ (800c928 <HAL_RCC_OscConfig+0x688>)
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c690:	2b00      	cmp	r3, #0
 800c692:	d114      	bne.n	800c6be <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800c694:	f7ff fa60 	bl	800bb58 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c698:	f7fa fefa 	bl	8007490 <HAL_GetTick>
 800c69c:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c69e:	e008      	b.n	800c6b2 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c6a0:	f7fa fef6 	bl	8007490 <HAL_GetTick>
 800c6a4:	4602      	mov	r2, r0
 800c6a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6a8:	1ad3      	subs	r3, r2, r3
 800c6aa:	2b02      	cmp	r3, #2
 800c6ac:	d901      	bls.n	800c6b2 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800c6ae:	2303      	movs	r3, #3
 800c6b0:	e163      	b.n	800c97a <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c6b2:	4b9d      	ldr	r3, [pc, #628]	@ (800c928 <HAL_RCC_OscConfig+0x688>)
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d0f0      	beq.n	800c6a0 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	689b      	ldr	r3, [r3, #8]
 800c6c2:	2b01      	cmp	r3, #1
 800c6c4:	d102      	bne.n	800c6cc <HAL_RCC_OscConfig+0x42c>
 800c6c6:	f7ff fb30 	bl	800bd2a <LL_RCC_LSE_Enable>
 800c6ca:	e00c      	b.n	800c6e6 <HAL_RCC_OscConfig+0x446>
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	689b      	ldr	r3, [r3, #8]
 800c6d0:	2b05      	cmp	r3, #5
 800c6d2:	d104      	bne.n	800c6de <HAL_RCC_OscConfig+0x43e>
 800c6d4:	f7ff fb4b 	bl	800bd6e <LL_RCC_LSE_EnableBypass>
 800c6d8:	f7ff fb27 	bl	800bd2a <LL_RCC_LSE_Enable>
 800c6dc:	e003      	b.n	800c6e6 <HAL_RCC_OscConfig+0x446>
 800c6de:	f7ff fb35 	bl	800bd4c <LL_RCC_LSE_Disable>
 800c6e2:	f7ff fb55 	bl	800bd90 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	689b      	ldr	r3, [r3, #8]
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d014      	beq.n	800c718 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c6ee:	f7fa fecf 	bl	8007490 <HAL_GetTick>
 800c6f2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800c6f4:	e00a      	b.n	800c70c <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c6f6:	f7fa fecb 	bl	8007490 <HAL_GetTick>
 800c6fa:	4602      	mov	r2, r0
 800c6fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6fe:	1ad3      	subs	r3, r2, r3
 800c700:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c704:	4293      	cmp	r3, r2
 800c706:	d901      	bls.n	800c70c <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 800c708:	2303      	movs	r3, #3
 800c70a:	e136      	b.n	800c97a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 800c70c:	f7ff fb51 	bl	800bdb2 <LL_RCC_LSE_IsReady>
 800c710:	4603      	mov	r3, r0
 800c712:	2b00      	cmp	r3, #0
 800c714:	d0ef      	beq.n	800c6f6 <HAL_RCC_OscConfig+0x456>
 800c716:	e013      	b.n	800c740 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c718:	f7fa feba 	bl	8007490 <HAL_GetTick>
 800c71c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800c71e:	e00a      	b.n	800c736 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c720:	f7fa feb6 	bl	8007490 <HAL_GetTick>
 800c724:	4602      	mov	r2, r0
 800c726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c728:	1ad3      	subs	r3, r2, r3
 800c72a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c72e:	4293      	cmp	r3, r2
 800c730:	d901      	bls.n	800c736 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 800c732:	2303      	movs	r3, #3
 800c734:	e121      	b.n	800c97a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 800c736:	f7ff fb3c 	bl	800bdb2 <LL_RCC_LSE_IsReady>
 800c73a:	4603      	mov	r3, r0
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d1ef      	bne.n	800c720 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d02c      	beq.n	800c7a6 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c750:	2b00      	cmp	r3, #0
 800c752:	d014      	beq.n	800c77e <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800c754:	f7ff fab5 	bl	800bcc2 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c758:	f7fa fe9a 	bl	8007490 <HAL_GetTick>
 800c75c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800c75e:	e008      	b.n	800c772 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c760:	f7fa fe96 	bl	8007490 <HAL_GetTick>
 800c764:	4602      	mov	r2, r0
 800c766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c768:	1ad3      	subs	r3, r2, r3
 800c76a:	2b02      	cmp	r3, #2
 800c76c:	d901      	bls.n	800c772 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 800c76e:	2303      	movs	r3, #3
 800c770:	e103      	b.n	800c97a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800c772:	f7ff fac8 	bl	800bd06 <LL_RCC_HSI48_IsReady>
 800c776:	4603      	mov	r3, r0
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d0f1      	beq.n	800c760 <HAL_RCC_OscConfig+0x4c0>
 800c77c:	e013      	b.n	800c7a6 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800c77e:	f7ff fab1 	bl	800bce4 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c782:	f7fa fe85 	bl	8007490 <HAL_GetTick>
 800c786:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 800c788:	e008      	b.n	800c79c <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c78a:	f7fa fe81 	bl	8007490 <HAL_GetTick>
 800c78e:	4602      	mov	r2, r0
 800c790:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c792:	1ad3      	subs	r3, r2, r3
 800c794:	2b02      	cmp	r3, #2
 800c796:	d901      	bls.n	800c79c <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 800c798:	2303      	movs	r3, #3
 800c79a:	e0ee      	b.n	800c97a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 800c79c:	f7ff fab3 	bl	800bd06 <LL_RCC_HSI48_IsReady>
 800c7a0:	4603      	mov	r3, r0
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d1f1      	bne.n	800c78a <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	f000 80e4 	beq.w	800c978 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c7b0:	f7ff fc11 	bl	800bfd6 <LL_RCC_GetSysClkSource>
 800c7b4:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800c7b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c7ba:	68db      	ldr	r3, [r3, #12]
 800c7bc:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c7c2:	2b02      	cmp	r3, #2
 800c7c4:	f040 80b4 	bne.w	800c930 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	f003 0203 	and.w	r2, r3, #3
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c7d2:	429a      	cmp	r2, r3
 800c7d4:	d123      	bne.n	800c81e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800c7d6:	68fb      	ldr	r3, [r7, #12]
 800c7d8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c7e0:	429a      	cmp	r2, r3
 800c7e2:	d11c      	bne.n	800c81e <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800c7e4:	68fb      	ldr	r3, [r7, #12]
 800c7e6:	0a1b      	lsrs	r3, r3, #8
 800c7e8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800c7f0:	429a      	cmp	r2, r3
 800c7f2:	d114      	bne.n	800c81e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800c7f4:	68fb      	ldr	r3, [r7, #12]
 800c7f6:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800c7fe:	429a      	cmp	r2, r3
 800c800:	d10d      	bne.n	800c81e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800c802:	68fb      	ldr	r3, [r7, #12]
 800c804:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800c80c:	429a      	cmp	r2, r3
 800c80e:	d106      	bne.n	800c81e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800c81a:	429a      	cmp	r2, r3
 800c81c:	d05d      	beq.n	800c8da <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800c81e:	693b      	ldr	r3, [r7, #16]
 800c820:	2b0c      	cmp	r3, #12
 800c822:	d058      	beq.n	800c8d6 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800c824:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800c82e:	2b00      	cmp	r3, #0
 800c830:	d001      	beq.n	800c836 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 800c832:	2301      	movs	r3, #1
 800c834:	e0a1      	b.n	800c97a <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800c836:	f7ff fc84 	bl	800c142 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800c83a:	f7fa fe29 	bl	8007490 <HAL_GetTick>
 800c83e:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c840:	e008      	b.n	800c854 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c842:	f7fa fe25 	bl	8007490 <HAL_GetTick>
 800c846:	4602      	mov	r2, r0
 800c848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c84a:	1ad3      	subs	r3, r2, r3
 800c84c:	2b02      	cmp	r3, #2
 800c84e:	d901      	bls.n	800c854 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 800c850:	2303      	movs	r3, #3
 800c852:	e092      	b.n	800c97a <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c854:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d1ef      	bne.n	800c842 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800c862:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c866:	68da      	ldr	r2, [r3, #12]
 800c868:	4b30      	ldr	r3, [pc, #192]	@ (800c92c <HAL_RCC_OscConfig+0x68c>)
 800c86a:	4013      	ands	r3, r2
 800c86c:	687a      	ldr	r2, [r7, #4]
 800c86e:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 800c870:	687a      	ldr	r2, [r7, #4]
 800c872:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800c874:	4311      	orrs	r1, r2
 800c876:	687a      	ldr	r2, [r7, #4]
 800c878:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800c87a:	0212      	lsls	r2, r2, #8
 800c87c:	4311      	orrs	r1, r2
 800c87e:	687a      	ldr	r2, [r7, #4]
 800c880:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800c882:	4311      	orrs	r1, r2
 800c884:	687a      	ldr	r2, [r7, #4]
 800c886:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800c888:	4311      	orrs	r1, r2
 800c88a:	687a      	ldr	r2, [r7, #4]
 800c88c:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800c88e:	430a      	orrs	r2, r1
 800c890:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c894:	4313      	orrs	r3, r2
 800c896:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800c898:	f7ff fc44 	bl	800c124 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800c89c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c8a0:	68db      	ldr	r3, [r3, #12]
 800c8a2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800c8a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c8aa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800c8ac:	f7fa fdf0 	bl	8007490 <HAL_GetTick>
 800c8b0:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c8b2:	e008      	b.n	800c8c6 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c8b4:	f7fa fdec 	bl	8007490 <HAL_GetTick>
 800c8b8:	4602      	mov	r2, r0
 800c8ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8bc:	1ad3      	subs	r3, r2, r3
 800c8be:	2b02      	cmp	r3, #2
 800c8c0:	d901      	bls.n	800c8c6 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 800c8c2:	2303      	movs	r3, #3
 800c8c4:	e059      	b.n	800c97a <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c8c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d0ef      	beq.n	800c8b4 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800c8d4:	e050      	b.n	800c978 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800c8d6:	2301      	movs	r3, #1
 800c8d8:	e04f      	b.n	800c97a <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c8da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d147      	bne.n	800c978 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800c8e8:	f7ff fc1c 	bl	800c124 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800c8ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c8f0:	68db      	ldr	r3, [r3, #12]
 800c8f2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800c8f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c8fa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800c8fc:	f7fa fdc8 	bl	8007490 <HAL_GetTick>
 800c900:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c902:	e008      	b.n	800c916 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c904:	f7fa fdc4 	bl	8007490 <HAL_GetTick>
 800c908:	4602      	mov	r2, r0
 800c90a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c90c:	1ad3      	subs	r3, r2, r3
 800c90e:	2b02      	cmp	r3, #2
 800c910:	d901      	bls.n	800c916 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 800c912:	2303      	movs	r3, #3
 800c914:	e031      	b.n	800c97a <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c916:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c920:	2b00      	cmp	r3, #0
 800c922:	d0ef      	beq.n	800c904 <HAL_RCC_OscConfig+0x664>
 800c924:	e028      	b.n	800c978 <HAL_RCC_OscConfig+0x6d8>
 800c926:	bf00      	nop
 800c928:	58000400 	.word	0x58000400
 800c92c:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800c930:	693b      	ldr	r3, [r7, #16]
 800c932:	2b0c      	cmp	r3, #12
 800c934:	d01e      	beq.n	800c974 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c936:	f7ff fc04 	bl	800c142 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c93a:	f7fa fda9 	bl	8007490 <HAL_GetTick>
 800c93e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c940:	e008      	b.n	800c954 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c942:	f7fa fda5 	bl	8007490 <HAL_GetTick>
 800c946:	4602      	mov	r2, r0
 800c948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c94a:	1ad3      	subs	r3, r2, r3
 800c94c:	2b02      	cmp	r3, #2
 800c94e:	d901      	bls.n	800c954 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 800c950:	2303      	movs	r3, #3
 800c952:	e012      	b.n	800c97a <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c954:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d1ef      	bne.n	800c942 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 800c962:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c966:	68da      	ldr	r2, [r3, #12]
 800c968:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c96c:	4b05      	ldr	r3, [pc, #20]	@ (800c984 <HAL_RCC_OscConfig+0x6e4>)
 800c96e:	4013      	ands	r3, r2
 800c970:	60cb      	str	r3, [r1, #12]
 800c972:	e001      	b.n	800c978 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800c974:	2301      	movs	r3, #1
 800c976:	e000      	b.n	800c97a <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 800c978:	2300      	movs	r3, #0
}
 800c97a:	4618      	mov	r0, r3
 800c97c:	3734      	adds	r7, #52	@ 0x34
 800c97e:	46bd      	mov	sp, r7
 800c980:	bd90      	pop	{r4, r7, pc}
 800c982:	bf00      	nop
 800c984:	eefefffc 	.word	0xeefefffc

0800c988 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c988:	b580      	push	{r7, lr}
 800c98a:	b084      	sub	sp, #16
 800c98c:	af00      	add	r7, sp, #0
 800c98e:	6078      	str	r0, [r7, #4]
 800c990:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	2b00      	cmp	r3, #0
 800c996:	d101      	bne.n	800c99c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800c998:	2301      	movs	r3, #1
 800c99a:	e12d      	b.n	800cbf8 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800c99c:	4b98      	ldr	r3, [pc, #608]	@ (800cc00 <HAL_RCC_ClockConfig+0x278>)
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	f003 0307 	and.w	r3, r3, #7
 800c9a4:	683a      	ldr	r2, [r7, #0]
 800c9a6:	429a      	cmp	r2, r3
 800c9a8:	d91b      	bls.n	800c9e2 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c9aa:	4b95      	ldr	r3, [pc, #596]	@ (800cc00 <HAL_RCC_ClockConfig+0x278>)
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	f023 0207 	bic.w	r2, r3, #7
 800c9b2:	4993      	ldr	r1, [pc, #588]	@ (800cc00 <HAL_RCC_ClockConfig+0x278>)
 800c9b4:	683b      	ldr	r3, [r7, #0]
 800c9b6:	4313      	orrs	r3, r2
 800c9b8:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c9ba:	f7fa fd69 	bl	8007490 <HAL_GetTick>
 800c9be:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c9c0:	e008      	b.n	800c9d4 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800c9c2:	f7fa fd65 	bl	8007490 <HAL_GetTick>
 800c9c6:	4602      	mov	r2, r0
 800c9c8:	68fb      	ldr	r3, [r7, #12]
 800c9ca:	1ad3      	subs	r3, r2, r3
 800c9cc:	2b02      	cmp	r3, #2
 800c9ce:	d901      	bls.n	800c9d4 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800c9d0:	2303      	movs	r3, #3
 800c9d2:	e111      	b.n	800cbf8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c9d4:	4b8a      	ldr	r3, [pc, #552]	@ (800cc00 <HAL_RCC_ClockConfig+0x278>)
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	f003 0307 	and.w	r3, r3, #7
 800c9dc:	683a      	ldr	r2, [r7, #0]
 800c9de:	429a      	cmp	r2, r3
 800c9e0:	d1ef      	bne.n	800c9c2 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	f003 0302 	and.w	r3, r3, #2
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d016      	beq.n	800ca1c <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	689b      	ldr	r3, [r3, #8]
 800c9f2:	4618      	mov	r0, r3
 800c9f4:	f7ff fafb 	bl	800bfee <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800c9f8:	f7fa fd4a 	bl	8007490 <HAL_GetTick>
 800c9fc:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800c9fe:	e008      	b.n	800ca12 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800ca00:	f7fa fd46 	bl	8007490 <HAL_GetTick>
 800ca04:	4602      	mov	r2, r0
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	1ad3      	subs	r3, r2, r3
 800ca0a:	2b02      	cmp	r3, #2
 800ca0c:	d901      	bls.n	800ca12 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800ca0e:	2303      	movs	r3, #3
 800ca10:	e0f2      	b.n	800cbf8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800ca12:	f7ff fbe8 	bl	800c1e6 <LL_RCC_IsActiveFlag_HPRE>
 800ca16:	4603      	mov	r3, r0
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d0f1      	beq.n	800ca00 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	f003 0320 	and.w	r3, r3, #32
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d016      	beq.n	800ca56 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	695b      	ldr	r3, [r3, #20]
 800ca2c:	4618      	mov	r0, r3
 800ca2e:	f7ff faf2 	bl	800c016 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800ca32:	f7fa fd2d 	bl	8007490 <HAL_GetTick>
 800ca36:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800ca38:	e008      	b.n	800ca4c <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800ca3a:	f7fa fd29 	bl	8007490 <HAL_GetTick>
 800ca3e:	4602      	mov	r2, r0
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	1ad3      	subs	r3, r2, r3
 800ca44:	2b02      	cmp	r3, #2
 800ca46:	d901      	bls.n	800ca4c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800ca48:	2303      	movs	r3, #3
 800ca4a:	e0d5      	b.n	800cbf8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800ca4c:	f7ff fbdd 	bl	800c20a <LL_RCC_IsActiveFlag_C2HPRE>
 800ca50:	4603      	mov	r3, r0
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d0f1      	beq.n	800ca3a <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d016      	beq.n	800ca90 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	699b      	ldr	r3, [r3, #24]
 800ca66:	4618      	mov	r0, r3
 800ca68:	f7ff faeb 	bl	800c042 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800ca6c:	f7fa fd10 	bl	8007490 <HAL_GetTick>
 800ca70:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800ca72:	e008      	b.n	800ca86 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800ca74:	f7fa fd0c 	bl	8007490 <HAL_GetTick>
 800ca78:	4602      	mov	r2, r0
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	1ad3      	subs	r3, r2, r3
 800ca7e:	2b02      	cmp	r3, #2
 800ca80:	d901      	bls.n	800ca86 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800ca82:	2303      	movs	r3, #3
 800ca84:	e0b8      	b.n	800cbf8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800ca86:	f7ff fbd3 	bl	800c230 <LL_RCC_IsActiveFlag_SHDHPRE>
 800ca8a:	4603      	mov	r3, r0
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d0f1      	beq.n	800ca74 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	f003 0304 	and.w	r3, r3, #4
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d016      	beq.n	800caca <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	68db      	ldr	r3, [r3, #12]
 800caa0:	4618      	mov	r0, r3
 800caa2:	f7ff fae5 	bl	800c070 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800caa6:	f7fa fcf3 	bl	8007490 <HAL_GetTick>
 800caaa:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800caac:	e008      	b.n	800cac0 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800caae:	f7fa fcef 	bl	8007490 <HAL_GetTick>
 800cab2:	4602      	mov	r2, r0
 800cab4:	68fb      	ldr	r3, [r7, #12]
 800cab6:	1ad3      	subs	r3, r2, r3
 800cab8:	2b02      	cmp	r3, #2
 800caba:	d901      	bls.n	800cac0 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 800cabc:	2303      	movs	r3, #3
 800cabe:	e09b      	b.n	800cbf8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800cac0:	f7ff fbc9 	bl	800c256 <LL_RCC_IsActiveFlag_PPRE1>
 800cac4:	4603      	mov	r3, r0
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d0f1      	beq.n	800caae <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	f003 0308 	and.w	r3, r3, #8
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	d017      	beq.n	800cb06 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	691b      	ldr	r3, [r3, #16]
 800cada:	00db      	lsls	r3, r3, #3
 800cadc:	4618      	mov	r0, r3
 800cade:	f7ff fadb 	bl	800c098 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800cae2:	f7fa fcd5 	bl	8007490 <HAL_GetTick>
 800cae6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800cae8:	e008      	b.n	800cafc <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800caea:	f7fa fcd1 	bl	8007490 <HAL_GetTick>
 800caee:	4602      	mov	r2, r0
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	1ad3      	subs	r3, r2, r3
 800caf4:	2b02      	cmp	r3, #2
 800caf6:	d901      	bls.n	800cafc <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 800caf8:	2303      	movs	r3, #3
 800cafa:	e07d      	b.n	800cbf8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800cafc:	f7ff fbbd 	bl	800c27a <LL_RCC_IsActiveFlag_PPRE2>
 800cb00:	4603      	mov	r3, r0
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	d0f1      	beq.n	800caea <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	f003 0301 	and.w	r3, r3, #1
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d043      	beq.n	800cb9a <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	685b      	ldr	r3, [r3, #4]
 800cb16:	2b02      	cmp	r3, #2
 800cb18:	d106      	bne.n	800cb28 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800cb1a:	f7ff f87b 	bl	800bc14 <LL_RCC_HSE_IsReady>
 800cb1e:	4603      	mov	r3, r0
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d11e      	bne.n	800cb62 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800cb24:	2301      	movs	r3, #1
 800cb26:	e067      	b.n	800cbf8 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	685b      	ldr	r3, [r3, #4]
 800cb2c:	2b03      	cmp	r3, #3
 800cb2e:	d106      	bne.n	800cb3e <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800cb30:	f7ff fb16 	bl	800c160 <LL_RCC_PLL_IsReady>
 800cb34:	4603      	mov	r3, r0
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d113      	bne.n	800cb62 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800cb3a:	2301      	movs	r3, #1
 800cb3c:	e05c      	b.n	800cbf8 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	685b      	ldr	r3, [r3, #4]
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d106      	bne.n	800cb54 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800cb46:	f7ff f9e3 	bl	800bf10 <LL_RCC_MSI_IsReady>
 800cb4a:	4603      	mov	r3, r0
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d108      	bne.n	800cb62 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800cb50:	2301      	movs	r3, #1
 800cb52:	e051      	b.n	800cbf8 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800cb54:	f7ff f88e 	bl	800bc74 <LL_RCC_HSI_IsReady>
 800cb58:	4603      	mov	r3, r0
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d101      	bne.n	800cb62 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800cb5e:	2301      	movs	r3, #1
 800cb60:	e04a      	b.n	800cbf8 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	685b      	ldr	r3, [r3, #4]
 800cb66:	4618      	mov	r0, r3
 800cb68:	f7ff fa21 	bl	800bfae <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cb6c:	f7fa fc90 	bl	8007490 <HAL_GetTick>
 800cb70:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800cb72:	e00a      	b.n	800cb8a <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800cb74:	f7fa fc8c 	bl	8007490 <HAL_GetTick>
 800cb78:	4602      	mov	r2, r0
 800cb7a:	68fb      	ldr	r3, [r7, #12]
 800cb7c:	1ad3      	subs	r3, r2, r3
 800cb7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cb82:	4293      	cmp	r3, r2
 800cb84:	d901      	bls.n	800cb8a <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800cb86:	2303      	movs	r3, #3
 800cb88:	e036      	b.n	800cbf8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800cb8a:	f7ff fa24 	bl	800bfd6 <LL_RCC_GetSysClkSource>
 800cb8e:	4602      	mov	r2, r0
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	685b      	ldr	r3, [r3, #4]
 800cb94:	009b      	lsls	r3, r3, #2
 800cb96:	429a      	cmp	r2, r3
 800cb98:	d1ec      	bne.n	800cb74 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800cb9a:	4b19      	ldr	r3, [pc, #100]	@ (800cc00 <HAL_RCC_ClockConfig+0x278>)
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	f003 0307 	and.w	r3, r3, #7
 800cba2:	683a      	ldr	r2, [r7, #0]
 800cba4:	429a      	cmp	r2, r3
 800cba6:	d21b      	bcs.n	800cbe0 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800cba8:	4b15      	ldr	r3, [pc, #84]	@ (800cc00 <HAL_RCC_ClockConfig+0x278>)
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	f023 0207 	bic.w	r2, r3, #7
 800cbb0:	4913      	ldr	r1, [pc, #76]	@ (800cc00 <HAL_RCC_ClockConfig+0x278>)
 800cbb2:	683b      	ldr	r3, [r7, #0]
 800cbb4:	4313      	orrs	r3, r2
 800cbb6:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cbb8:	f7fa fc6a 	bl	8007490 <HAL_GetTick>
 800cbbc:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800cbbe:	e008      	b.n	800cbd2 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800cbc0:	f7fa fc66 	bl	8007490 <HAL_GetTick>
 800cbc4:	4602      	mov	r2, r0
 800cbc6:	68fb      	ldr	r3, [r7, #12]
 800cbc8:	1ad3      	subs	r3, r2, r3
 800cbca:	2b02      	cmp	r3, #2
 800cbcc:	d901      	bls.n	800cbd2 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800cbce:	2303      	movs	r3, #3
 800cbd0:	e012      	b.n	800cbf8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800cbd2:	4b0b      	ldr	r3, [pc, #44]	@ (800cc00 <HAL_RCC_ClockConfig+0x278>)
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	f003 0307 	and.w	r3, r3, #7
 800cbda:	683a      	ldr	r2, [r7, #0]
 800cbdc:	429a      	cmp	r2, r3
 800cbde:	d1ef      	bne.n	800cbc0 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800cbe0:	f000 f87e 	bl	800cce0 <HAL_RCC_GetHCLKFreq>
 800cbe4:	4603      	mov	r3, r0
 800cbe6:	4a07      	ldr	r2, [pc, #28]	@ (800cc04 <HAL_RCC_ClockConfig+0x27c>)
 800cbe8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800cbea:	f7fa fc5d 	bl	80074a8 <HAL_GetTickPrio>
 800cbee:	4603      	mov	r3, r0
 800cbf0:	4618      	mov	r0, r3
 800cbf2:	f7fa fbff 	bl	80073f4 <HAL_InitTick>
 800cbf6:	4603      	mov	r3, r0
}
 800cbf8:	4618      	mov	r0, r3
 800cbfa:	3710      	adds	r7, #16
 800cbfc:	46bd      	mov	sp, r7
 800cbfe:	bd80      	pop	{r7, pc}
 800cc00:	58004000 	.word	0x58004000
 800cc04:	2000002c 	.word	0x2000002c

0800cc08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800cc08:	b590      	push	{r4, r7, lr}
 800cc0a:	b085      	sub	sp, #20
 800cc0c:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800cc0e:	f7ff f9e2 	bl	800bfd6 <LL_RCC_GetSysClkSource>
 800cc12:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d10a      	bne.n	800cc30 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800cc1a:	f7ff f99e 	bl	800bf5a <LL_RCC_MSI_GetRange>
 800cc1e:	4603      	mov	r3, r0
 800cc20:	091b      	lsrs	r3, r3, #4
 800cc22:	f003 030f 	and.w	r3, r3, #15
 800cc26:	4a2b      	ldr	r2, [pc, #172]	@ (800ccd4 <HAL_RCC_GetSysClockFreq+0xcc>)
 800cc28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cc2c:	60fb      	str	r3, [r7, #12]
 800cc2e:	e04b      	b.n	800ccc8 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	2b04      	cmp	r3, #4
 800cc34:	d102      	bne.n	800cc3c <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800cc36:	4b28      	ldr	r3, [pc, #160]	@ (800ccd8 <HAL_RCC_GetSysClockFreq+0xd0>)
 800cc38:	60fb      	str	r3, [r7, #12]
 800cc3a:	e045      	b.n	800ccc8 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	2b08      	cmp	r3, #8
 800cc40:	d10a      	bne.n	800cc58 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800cc42:	f7fe ffb7 	bl	800bbb4 <LL_RCC_HSE_IsEnabledDiv2>
 800cc46:	4603      	mov	r3, r0
 800cc48:	2b01      	cmp	r3, #1
 800cc4a:	d102      	bne.n	800cc52 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800cc4c:	4b22      	ldr	r3, [pc, #136]	@ (800ccd8 <HAL_RCC_GetSysClockFreq+0xd0>)
 800cc4e:	60fb      	str	r3, [r7, #12]
 800cc50:	e03a      	b.n	800ccc8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800cc52:	4b22      	ldr	r3, [pc, #136]	@ (800ccdc <HAL_RCC_GetSysClockFreq+0xd4>)
 800cc54:	60fb      	str	r3, [r7, #12]
 800cc56:	e037      	b.n	800ccc8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800cc58:	f7ff fab9 	bl	800c1ce <LL_RCC_PLL_GetMainSource>
 800cc5c:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800cc5e:	683b      	ldr	r3, [r7, #0]
 800cc60:	2b02      	cmp	r3, #2
 800cc62:	d003      	beq.n	800cc6c <HAL_RCC_GetSysClockFreq+0x64>
 800cc64:	683b      	ldr	r3, [r7, #0]
 800cc66:	2b03      	cmp	r3, #3
 800cc68:	d003      	beq.n	800cc72 <HAL_RCC_GetSysClockFreq+0x6a>
 800cc6a:	e00d      	b.n	800cc88 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800cc6c:	4b1a      	ldr	r3, [pc, #104]	@ (800ccd8 <HAL_RCC_GetSysClockFreq+0xd0>)
 800cc6e:	60bb      	str	r3, [r7, #8]
        break;
 800cc70:	e015      	b.n	800cc9e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800cc72:	f7fe ff9f 	bl	800bbb4 <LL_RCC_HSE_IsEnabledDiv2>
 800cc76:	4603      	mov	r3, r0
 800cc78:	2b01      	cmp	r3, #1
 800cc7a:	d102      	bne.n	800cc82 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800cc7c:	4b16      	ldr	r3, [pc, #88]	@ (800ccd8 <HAL_RCC_GetSysClockFreq+0xd0>)
 800cc7e:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800cc80:	e00d      	b.n	800cc9e <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 800cc82:	4b16      	ldr	r3, [pc, #88]	@ (800ccdc <HAL_RCC_GetSysClockFreq+0xd4>)
 800cc84:	60bb      	str	r3, [r7, #8]
        break;
 800cc86:	e00a      	b.n	800cc9e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800cc88:	f7ff f967 	bl	800bf5a <LL_RCC_MSI_GetRange>
 800cc8c:	4603      	mov	r3, r0
 800cc8e:	091b      	lsrs	r3, r3, #4
 800cc90:	f003 030f 	and.w	r3, r3, #15
 800cc94:	4a0f      	ldr	r2, [pc, #60]	@ (800ccd4 <HAL_RCC_GetSysClockFreq+0xcc>)
 800cc96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cc9a:	60bb      	str	r3, [r7, #8]
        break;
 800cc9c:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 800cc9e:	f7ff fa71 	bl	800c184 <LL_RCC_PLL_GetN>
 800cca2:	4602      	mov	r2, r0
 800cca4:	68bb      	ldr	r3, [r7, #8]
 800cca6:	fb03 f402 	mul.w	r4, r3, r2
 800ccaa:	f7ff fa84 	bl	800c1b6 <LL_RCC_PLL_GetDivider>
 800ccae:	4603      	mov	r3, r0
 800ccb0:	091b      	lsrs	r3, r3, #4
 800ccb2:	3301      	adds	r3, #1
 800ccb4:	fbb4 f4f3 	udiv	r4, r4, r3
 800ccb8:	f7ff fa71 	bl	800c19e <LL_RCC_PLL_GetR>
 800ccbc:	4603      	mov	r3, r0
 800ccbe:	0f5b      	lsrs	r3, r3, #29
 800ccc0:	3301      	adds	r3, #1
 800ccc2:	fbb4 f3f3 	udiv	r3, r4, r3
 800ccc6:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800ccc8:	68fb      	ldr	r3, [r7, #12]
}
 800ccca:	4618      	mov	r0, r3
 800cccc:	3714      	adds	r7, #20
 800ccce:	46bd      	mov	sp, r7
 800ccd0:	bd90      	pop	{r4, r7, pc}
 800ccd2:	bf00      	nop
 800ccd4:	08022230 	.word	0x08022230
 800ccd8:	00f42400 	.word	0x00f42400
 800ccdc:	01e84800 	.word	0x01e84800

0800cce0 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800cce0:	b598      	push	{r3, r4, r7, lr}
 800cce2:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800cce4:	f7ff ff90 	bl	800cc08 <HAL_RCC_GetSysClockFreq>
 800cce8:	4604      	mov	r4, r0
 800ccea:	f7ff f9e9 	bl	800c0c0 <LL_RCC_GetAHBPrescaler>
 800ccee:	4603      	mov	r3, r0
 800ccf0:	091b      	lsrs	r3, r3, #4
 800ccf2:	f003 030f 	and.w	r3, r3, #15
 800ccf6:	4a03      	ldr	r2, [pc, #12]	@ (800cd04 <HAL_RCC_GetHCLKFreq+0x24>)
 800ccf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ccfc:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800cd00:	4618      	mov	r0, r3
 800cd02:	bd98      	pop	{r3, r4, r7, pc}
 800cd04:	080221d0 	.word	0x080221d0

0800cd08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800cd08:	b598      	push	{r3, r4, r7, lr}
 800cd0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800cd0c:	f7ff ffe8 	bl	800cce0 <HAL_RCC_GetHCLKFreq>
 800cd10:	4604      	mov	r4, r0
 800cd12:	f7ff f9ef 	bl	800c0f4 <LL_RCC_GetAPB1Prescaler>
 800cd16:	4603      	mov	r3, r0
 800cd18:	0a1b      	lsrs	r3, r3, #8
 800cd1a:	f003 0307 	and.w	r3, r3, #7
 800cd1e:	4a04      	ldr	r2, [pc, #16]	@ (800cd30 <HAL_RCC_GetPCLK1Freq+0x28>)
 800cd20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cd24:	f003 031f 	and.w	r3, r3, #31
 800cd28:	fa24 f303 	lsr.w	r3, r4, r3
}
 800cd2c:	4618      	mov	r0, r3
 800cd2e:	bd98      	pop	{r3, r4, r7, pc}
 800cd30:	08022210 	.word	0x08022210

0800cd34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800cd34:	b598      	push	{r3, r4, r7, lr}
 800cd36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800cd38:	f7ff ffd2 	bl	800cce0 <HAL_RCC_GetHCLKFreq>
 800cd3c:	4604      	mov	r4, r0
 800cd3e:	f7ff f9e5 	bl	800c10c <LL_RCC_GetAPB2Prescaler>
 800cd42:	4603      	mov	r3, r0
 800cd44:	0adb      	lsrs	r3, r3, #11
 800cd46:	f003 0307 	and.w	r3, r3, #7
 800cd4a:	4a04      	ldr	r2, [pc, #16]	@ (800cd5c <HAL_RCC_GetPCLK2Freq+0x28>)
 800cd4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cd50:	f003 031f 	and.w	r3, r3, #31
 800cd54:	fa24 f303 	lsr.w	r3, r4, r3
}
 800cd58:	4618      	mov	r0, r3
 800cd5a:	bd98      	pop	{r3, r4, r7, pc}
 800cd5c:	08022210 	.word	0x08022210

0800cd60 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800cd60:	b590      	push	{r4, r7, lr}
 800cd62:	b085      	sub	sp, #20
 800cd64:	af00      	add	r7, sp, #0
 800cd66:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	2bb0      	cmp	r3, #176	@ 0xb0
 800cd6c:	d903      	bls.n	800cd76 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800cd6e:	4b15      	ldr	r3, [pc, #84]	@ (800cdc4 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800cd70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cd72:	60fb      	str	r3, [r7, #12]
 800cd74:	e007      	b.n	800cd86 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	091b      	lsrs	r3, r3, #4
 800cd7a:	f003 030f 	and.w	r3, r3, #15
 800cd7e:	4a11      	ldr	r2, [pc, #68]	@ (800cdc4 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800cd80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cd84:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800cd86:	f7ff f9a7 	bl	800c0d8 <LL_RCC_GetAHB4Prescaler>
 800cd8a:	4603      	mov	r3, r0
 800cd8c:	091b      	lsrs	r3, r3, #4
 800cd8e:	f003 030f 	and.w	r3, r3, #15
 800cd92:	4a0d      	ldr	r2, [pc, #52]	@ (800cdc8 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 800cd94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cd98:	68fa      	ldr	r2, [r7, #12]
 800cd9a:	fbb2 f3f3 	udiv	r3, r2, r3
 800cd9e:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800cda0:	68bb      	ldr	r3, [r7, #8]
 800cda2:	4a0a      	ldr	r2, [pc, #40]	@ (800cdcc <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 800cda4:	fba2 2303 	umull	r2, r3, r2, r3
 800cda8:	0c9c      	lsrs	r4, r3, #18
 800cdaa:	f7fe fee5 	bl	800bb78 <HAL_PWREx_GetVoltageRange>
 800cdae:	4603      	mov	r3, r0
 800cdb0:	4619      	mov	r1, r3
 800cdb2:	4620      	mov	r0, r4
 800cdb4:	f000 f80c 	bl	800cdd0 <RCC_SetFlashLatency>
 800cdb8:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 800cdba:	4618      	mov	r0, r3
 800cdbc:	3714      	adds	r7, #20
 800cdbe:	46bd      	mov	sp, r7
 800cdc0:	bd90      	pop	{r4, r7, pc}
 800cdc2:	bf00      	nop
 800cdc4:	08022230 	.word	0x08022230
 800cdc8:	080221d0 	.word	0x080221d0
 800cdcc:	431bde83 	.word	0x431bde83

0800cdd0 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800cdd0:	b590      	push	{r4, r7, lr}
 800cdd2:	b093      	sub	sp, #76	@ 0x4c
 800cdd4:	af00      	add	r7, sp, #0
 800cdd6:	6078      	str	r0, [r7, #4]
 800cdd8:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800cdda:	4b37      	ldr	r3, [pc, #220]	@ (800ceb8 <RCC_SetFlashLatency+0xe8>)
 800cddc:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 800cde0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800cde2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800cde6:	4a35      	ldr	r2, [pc, #212]	@ (800cebc <RCC_SetFlashLatency+0xec>)
 800cde8:	f107 031c 	add.w	r3, r7, #28
 800cdec:	ca07      	ldmia	r2, {r0, r1, r2}
 800cdee:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800cdf2:	4b33      	ldr	r3, [pc, #204]	@ (800cec0 <RCC_SetFlashLatency+0xf0>)
 800cdf4:	f107 040c 	add.w	r4, r7, #12
 800cdf8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800cdfa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800cdfe:	2300      	movs	r3, #0
 800ce00:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800ce02:	683b      	ldr	r3, [r7, #0]
 800ce04:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ce08:	d11a      	bne.n	800ce40 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800ce0a:	2300      	movs	r3, #0
 800ce0c:	643b      	str	r3, [r7, #64]	@ 0x40
 800ce0e:	e013      	b.n	800ce38 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800ce10:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ce12:	009b      	lsls	r3, r3, #2
 800ce14:	3348      	adds	r3, #72	@ 0x48
 800ce16:	443b      	add	r3, r7
 800ce18:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800ce1c:	687a      	ldr	r2, [r7, #4]
 800ce1e:	429a      	cmp	r2, r3
 800ce20:	d807      	bhi.n	800ce32 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800ce22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ce24:	009b      	lsls	r3, r3, #2
 800ce26:	3348      	adds	r3, #72	@ 0x48
 800ce28:	443b      	add	r3, r7
 800ce2a:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800ce2e:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 800ce30:	e020      	b.n	800ce74 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800ce32:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ce34:	3301      	adds	r3, #1
 800ce36:	643b      	str	r3, [r7, #64]	@ 0x40
 800ce38:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ce3a:	2b03      	cmp	r3, #3
 800ce3c:	d9e8      	bls.n	800ce10 <RCC_SetFlashLatency+0x40>
 800ce3e:	e019      	b.n	800ce74 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800ce40:	2300      	movs	r3, #0
 800ce42:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ce44:	e013      	b.n	800ce6e <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800ce46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ce48:	009b      	lsls	r3, r3, #2
 800ce4a:	3348      	adds	r3, #72	@ 0x48
 800ce4c:	443b      	add	r3, r7
 800ce4e:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800ce52:	687a      	ldr	r2, [r7, #4]
 800ce54:	429a      	cmp	r2, r3
 800ce56:	d807      	bhi.n	800ce68 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800ce58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ce5a:	009b      	lsls	r3, r3, #2
 800ce5c:	3348      	adds	r3, #72	@ 0x48
 800ce5e:	443b      	add	r3, r7
 800ce60:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800ce64:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 800ce66:	e005      	b.n	800ce74 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800ce68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ce6a:	3301      	adds	r3, #1
 800ce6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ce6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ce70:	2b02      	cmp	r3, #2
 800ce72:	d9e8      	bls.n	800ce46 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 800ce74:	4b13      	ldr	r3, [pc, #76]	@ (800cec4 <RCC_SetFlashLatency+0xf4>)
 800ce76:	681b      	ldr	r3, [r3, #0]
 800ce78:	f023 0207 	bic.w	r2, r3, #7
 800ce7c:	4911      	ldr	r1, [pc, #68]	@ (800cec4 <RCC_SetFlashLatency+0xf4>)
 800ce7e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ce80:	4313      	orrs	r3, r2
 800ce82:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800ce84:	f7fa fb04 	bl	8007490 <HAL_GetTick>
 800ce88:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800ce8a:	e008      	b.n	800ce9e <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800ce8c:	f7fa fb00 	bl	8007490 <HAL_GetTick>
 800ce90:	4602      	mov	r2, r0
 800ce92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce94:	1ad3      	subs	r3, r2, r3
 800ce96:	2b02      	cmp	r3, #2
 800ce98:	d901      	bls.n	800ce9e <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 800ce9a:	2303      	movs	r3, #3
 800ce9c:	e007      	b.n	800ceae <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800ce9e:	4b09      	ldr	r3, [pc, #36]	@ (800cec4 <RCC_SetFlashLatency+0xf4>)
 800cea0:	681b      	ldr	r3, [r3, #0]
 800cea2:	f003 0307 	and.w	r3, r3, #7
 800cea6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cea8:	429a      	cmp	r2, r3
 800ceaa:	d1ef      	bne.n	800ce8c <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 800ceac:	2300      	movs	r3, #0
}
 800ceae:	4618      	mov	r0, r3
 800ceb0:	374c      	adds	r7, #76	@ 0x4c
 800ceb2:	46bd      	mov	sp, r7
 800ceb4:	bd90      	pop	{r4, r7, pc}
 800ceb6:	bf00      	nop
 800ceb8:	0801ff54 	.word	0x0801ff54
 800cebc:	0801ff64 	.word	0x0801ff64
 800cec0:	0801ff70 	.word	0x0801ff70
 800cec4:	58004000 	.word	0x58004000

0800cec8 <LL_RCC_LSE_IsEnabled>:
{
 800cec8:	b480      	push	{r7}
 800ceca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 800cecc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ced0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ced4:	f003 0301 	and.w	r3, r3, #1
 800ced8:	2b01      	cmp	r3, #1
 800ceda:	d101      	bne.n	800cee0 <LL_RCC_LSE_IsEnabled+0x18>
 800cedc:	2301      	movs	r3, #1
 800cede:	e000      	b.n	800cee2 <LL_RCC_LSE_IsEnabled+0x1a>
 800cee0:	2300      	movs	r3, #0
}
 800cee2:	4618      	mov	r0, r3
 800cee4:	46bd      	mov	sp, r7
 800cee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceea:	4770      	bx	lr

0800ceec <LL_RCC_LSE_IsReady>:
{
 800ceec:	b480      	push	{r7}
 800ceee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800cef0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cef4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cef8:	f003 0302 	and.w	r3, r3, #2
 800cefc:	2b02      	cmp	r3, #2
 800cefe:	d101      	bne.n	800cf04 <LL_RCC_LSE_IsReady+0x18>
 800cf00:	2301      	movs	r3, #1
 800cf02:	e000      	b.n	800cf06 <LL_RCC_LSE_IsReady+0x1a>
 800cf04:	2300      	movs	r3, #0
}
 800cf06:	4618      	mov	r0, r3
 800cf08:	46bd      	mov	sp, r7
 800cf0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf0e:	4770      	bx	lr

0800cf10 <LL_RCC_SetRFWKPClockSource>:
{
 800cf10:	b480      	push	{r7}
 800cf12:	b083      	sub	sp, #12
 800cf14:	af00      	add	r7, sp, #0
 800cf16:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 800cf18:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cf1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800cf20:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800cf24:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	4313      	orrs	r3, r2
 800cf2c:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 800cf30:	bf00      	nop
 800cf32:	370c      	adds	r7, #12
 800cf34:	46bd      	mov	sp, r7
 800cf36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf3a:	4770      	bx	lr

0800cf3c <LL_RCC_SetSMPSClockSource>:
{
 800cf3c:	b480      	push	{r7}
 800cf3e:	b083      	sub	sp, #12
 800cf40:	af00      	add	r7, sp, #0
 800cf42:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 800cf44:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cf48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cf4a:	f023 0203 	bic.w	r2, r3, #3
 800cf4e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	4313      	orrs	r3, r2
 800cf56:	624b      	str	r3, [r1, #36]	@ 0x24
}
 800cf58:	bf00      	nop
 800cf5a:	370c      	adds	r7, #12
 800cf5c:	46bd      	mov	sp, r7
 800cf5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf62:	4770      	bx	lr

0800cf64 <LL_RCC_SetSMPSPrescaler>:
{
 800cf64:	b480      	push	{r7}
 800cf66:	b083      	sub	sp, #12
 800cf68:	af00      	add	r7, sp, #0
 800cf6a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 800cf6c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cf70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cf72:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800cf76:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	4313      	orrs	r3, r2
 800cf7e:	624b      	str	r3, [r1, #36]	@ 0x24
}
 800cf80:	bf00      	nop
 800cf82:	370c      	adds	r7, #12
 800cf84:	46bd      	mov	sp, r7
 800cf86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf8a:	4770      	bx	lr

0800cf8c <LL_RCC_SetUSARTClockSource>:
{
 800cf8c:	b480      	push	{r7}
 800cf8e:	b083      	sub	sp, #12
 800cf90:	af00      	add	r7, sp, #0
 800cf92:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 800cf94:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cf98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cf9c:	f023 0203 	bic.w	r2, r3, #3
 800cfa0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	4313      	orrs	r3, r2
 800cfa8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800cfac:	bf00      	nop
 800cfae:	370c      	adds	r7, #12
 800cfb0:	46bd      	mov	sp, r7
 800cfb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfb6:	4770      	bx	lr

0800cfb8 <LL_RCC_SetLPUARTClockSource>:
{
 800cfb8:	b480      	push	{r7}
 800cfba:	b083      	sub	sp, #12
 800cfbc:	af00      	add	r7, sp, #0
 800cfbe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800cfc0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cfc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cfc8:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800cfcc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	4313      	orrs	r3, r2
 800cfd4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800cfd8:	bf00      	nop
 800cfda:	370c      	adds	r7, #12
 800cfdc:	46bd      	mov	sp, r7
 800cfde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfe2:	4770      	bx	lr

0800cfe4 <LL_RCC_SetI2CClockSource>:
{
 800cfe4:	b480      	push	{r7}
 800cfe6:	b083      	sub	sp, #12
 800cfe8:	af00      	add	r7, sp, #0
 800cfea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800cfec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cff0:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	091b      	lsrs	r3, r3, #4
 800cff8:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800cffc:	43db      	mvns	r3, r3
 800cffe:	401a      	ands	r2, r3
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	011b      	lsls	r3, r3, #4
 800d004:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800d008:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d00c:	4313      	orrs	r3, r2
 800d00e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800d012:	bf00      	nop
 800d014:	370c      	adds	r7, #12
 800d016:	46bd      	mov	sp, r7
 800d018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d01c:	4770      	bx	lr

0800d01e <LL_RCC_SetLPTIMClockSource>:
{
 800d01e:	b480      	push	{r7}
 800d020:	b083      	sub	sp, #12
 800d022:	af00      	add	r7, sp, #0
 800d024:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800d026:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d02a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	0c1b      	lsrs	r3, r3, #16
 800d032:	041b      	lsls	r3, r3, #16
 800d034:	43db      	mvns	r3, r3
 800d036:	401a      	ands	r2, r3
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	041b      	lsls	r3, r3, #16
 800d03c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d040:	4313      	orrs	r3, r2
 800d042:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800d046:	bf00      	nop
 800d048:	370c      	adds	r7, #12
 800d04a:	46bd      	mov	sp, r7
 800d04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d050:	4770      	bx	lr

0800d052 <LL_RCC_SetSAIClockSource>:
{
 800d052:	b480      	push	{r7}
 800d054:	b083      	sub	sp, #12
 800d056:	af00      	add	r7, sp, #0
 800d058:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800d05a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d05e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d062:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800d066:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	4313      	orrs	r3, r2
 800d06e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800d072:	bf00      	nop
 800d074:	370c      	adds	r7, #12
 800d076:	46bd      	mov	sp, r7
 800d078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d07c:	4770      	bx	lr

0800d07e <LL_RCC_SetRNGClockSource>:
{
 800d07e:	b480      	push	{r7}
 800d080:	b083      	sub	sp, #12
 800d082:	af00      	add	r7, sp, #0
 800d084:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800d086:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d08a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d08e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800d092:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	4313      	orrs	r3, r2
 800d09a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800d09e:	bf00      	nop
 800d0a0:	370c      	adds	r7, #12
 800d0a2:	46bd      	mov	sp, r7
 800d0a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0a8:	4770      	bx	lr

0800d0aa <LL_RCC_SetCLK48ClockSource>:
{
 800d0aa:	b480      	push	{r7}
 800d0ac:	b083      	sub	sp, #12
 800d0ae:	af00      	add	r7, sp, #0
 800d0b0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800d0b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d0b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d0ba:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800d0be:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	4313      	orrs	r3, r2
 800d0c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800d0ca:	bf00      	nop
 800d0cc:	370c      	adds	r7, #12
 800d0ce:	46bd      	mov	sp, r7
 800d0d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0d4:	4770      	bx	lr

0800d0d6 <LL_RCC_SetUSBClockSource>:
{
 800d0d6:	b580      	push	{r7, lr}
 800d0d8:	b082      	sub	sp, #8
 800d0da:	af00      	add	r7, sp, #0
 800d0dc:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 800d0de:	6878      	ldr	r0, [r7, #4]
 800d0e0:	f7ff ffe3 	bl	800d0aa <LL_RCC_SetCLK48ClockSource>
}
 800d0e4:	bf00      	nop
 800d0e6:	3708      	adds	r7, #8
 800d0e8:	46bd      	mov	sp, r7
 800d0ea:	bd80      	pop	{r7, pc}

0800d0ec <LL_RCC_SetADCClockSource>:
{
 800d0ec:	b480      	push	{r7}
 800d0ee:	b083      	sub	sp, #12
 800d0f0:	af00      	add	r7, sp, #0
 800d0f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800d0f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d0f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d0fc:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800d100:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	4313      	orrs	r3, r2
 800d108:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800d10c:	bf00      	nop
 800d10e:	370c      	adds	r7, #12
 800d110:	46bd      	mov	sp, r7
 800d112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d116:	4770      	bx	lr

0800d118 <LL_RCC_SetRTCClockSource>:
{
 800d118:	b480      	push	{r7}
 800d11a:	b083      	sub	sp, #12
 800d11c:	af00      	add	r7, sp, #0
 800d11e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800d120:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d124:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d128:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800d12c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	4313      	orrs	r3, r2
 800d134:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 800d138:	bf00      	nop
 800d13a:	370c      	adds	r7, #12
 800d13c:	46bd      	mov	sp, r7
 800d13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d142:	4770      	bx	lr

0800d144 <LL_RCC_GetRTCClockSource>:
{
 800d144:	b480      	push	{r7}
 800d146:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800d148:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d14c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d150:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 800d154:	4618      	mov	r0, r3
 800d156:	46bd      	mov	sp, r7
 800d158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d15c:	4770      	bx	lr

0800d15e <LL_RCC_ForceBackupDomainReset>:
{
 800d15e:	b480      	push	{r7}
 800d160:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800d162:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d166:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d16a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800d16e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d172:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800d176:	bf00      	nop
 800d178:	46bd      	mov	sp, r7
 800d17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d17e:	4770      	bx	lr

0800d180 <LL_RCC_ReleaseBackupDomainReset>:
{
 800d180:	b480      	push	{r7}
 800d182:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800d184:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d188:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d18c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800d190:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800d194:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800d198:	bf00      	nop
 800d19a:	46bd      	mov	sp, r7
 800d19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1a0:	4770      	bx	lr

0800d1a2 <LL_RCC_PLLSAI1_Enable>:
{
 800d1a2:	b480      	push	{r7}
 800d1a4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800d1a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800d1b0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800d1b4:	6013      	str	r3, [r2, #0]
}
 800d1b6:	bf00      	nop
 800d1b8:	46bd      	mov	sp, r7
 800d1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1be:	4770      	bx	lr

0800d1c0 <LL_RCC_PLLSAI1_Disable>:
{
 800d1c0:	b480      	push	{r7}
 800d1c2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800d1c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800d1ce:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800d1d2:	6013      	str	r3, [r2, #0]
}
 800d1d4:	bf00      	nop
 800d1d6:	46bd      	mov	sp, r7
 800d1d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1dc:	4770      	bx	lr

0800d1de <LL_RCC_PLLSAI1_IsReady>:
{
 800d1de:	b480      	push	{r7}
 800d1e0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800d1e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d1ec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d1f0:	d101      	bne.n	800d1f6 <LL_RCC_PLLSAI1_IsReady+0x18>
 800d1f2:	2301      	movs	r3, #1
 800d1f4:	e000      	b.n	800d1f8 <LL_RCC_PLLSAI1_IsReady+0x1a>
 800d1f6:	2300      	movs	r3, #0
}
 800d1f8:	4618      	mov	r0, r3
 800d1fa:	46bd      	mov	sp, r7
 800d1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d200:	4770      	bx	lr

0800d202 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800d202:	b580      	push	{r7, lr}
 800d204:	b088      	sub	sp, #32
 800d206:	af00      	add	r7, sp, #0
 800d208:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800d20a:	2300      	movs	r3, #0
 800d20c:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800d20e:	2300      	movs	r3, #0
 800d210:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d034      	beq.n	800d288 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d222:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800d226:	d021      	beq.n	800d26c <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800d228:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800d22c:	d81b      	bhi.n	800d266 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800d22e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800d232:	d01d      	beq.n	800d270 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800d234:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800d238:	d815      	bhi.n	800d266 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800d23a:	2b00      	cmp	r3, #0
 800d23c:	d00b      	beq.n	800d256 <HAL_RCCEx_PeriphCLKConfig+0x54>
 800d23e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800d242:	d110      	bne.n	800d266 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 800d244:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d248:	68db      	ldr	r3, [r3, #12]
 800d24a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800d24e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d252:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 800d254:	e00d      	b.n	800d272 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	3304      	adds	r3, #4
 800d25a:	4618      	mov	r0, r3
 800d25c:	f000 f947 	bl	800d4ee <RCCEx_PLLSAI1_ConfigNP>
 800d260:	4603      	mov	r3, r0
 800d262:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800d264:	e005      	b.n	800d272 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 800d266:	2301      	movs	r3, #1
 800d268:	77fb      	strb	r3, [r7, #31]
        break;
 800d26a:	e002      	b.n	800d272 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800d26c:	bf00      	nop
 800d26e:	e000      	b.n	800d272 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800d270:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d272:	7ffb      	ldrb	r3, [r7, #31]
 800d274:	2b00      	cmp	r3, #0
 800d276:	d105      	bne.n	800d284 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d27c:	4618      	mov	r0, r3
 800d27e:	f7ff fee8 	bl	800d052 <LL_RCC_SetSAIClockSource>
 800d282:	e001      	b.n	800d288 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d284:	7ffb      	ldrb	r3, [r7, #31]
 800d286:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	681b      	ldr	r3, [r3, #0]
 800d28c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d290:	2b00      	cmp	r3, #0
 800d292:	d046      	beq.n	800d322 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 800d294:	f7ff ff56 	bl	800d144 <LL_RCC_GetRTCClockSource>
 800d298:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d29e:	69ba      	ldr	r2, [r7, #24]
 800d2a0:	429a      	cmp	r2, r3
 800d2a2:	d03c      	beq.n	800d31e <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800d2a4:	f7fe fc58 	bl	800bb58 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800d2a8:	69bb      	ldr	r3, [r7, #24]
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	d105      	bne.n	800d2ba <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d2b2:	4618      	mov	r0, r3
 800d2b4:	f7ff ff30 	bl	800d118 <LL_RCC_SetRTCClockSource>
 800d2b8:	e02e      	b.n	800d318 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800d2ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d2be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d2c2:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 800d2c4:	f7ff ff4b 	bl	800d15e <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800d2c8:	f7ff ff5a 	bl	800d180 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800d2cc:	697b      	ldr	r3, [r7, #20]
 800d2ce:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d2d6:	4313      	orrs	r3, r2
 800d2d8:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800d2da:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800d2de:	697b      	ldr	r3, [r7, #20]
 800d2e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800d2e4:	f7ff fdf0 	bl	800cec8 <LL_RCC_LSE_IsEnabled>
 800d2e8:	4603      	mov	r3, r0
 800d2ea:	2b01      	cmp	r3, #1
 800d2ec:	d114      	bne.n	800d318 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800d2ee:	f7fa f8cf 	bl	8007490 <HAL_GetTick>
 800d2f2:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800d2f4:	e00b      	b.n	800d30e <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d2f6:	f7fa f8cb 	bl	8007490 <HAL_GetTick>
 800d2fa:	4602      	mov	r2, r0
 800d2fc:	693b      	ldr	r3, [r7, #16]
 800d2fe:	1ad3      	subs	r3, r2, r3
 800d300:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d304:	4293      	cmp	r3, r2
 800d306:	d902      	bls.n	800d30e <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 800d308:	2303      	movs	r3, #3
 800d30a:	77fb      	strb	r3, [r7, #31]
              break;
 800d30c:	e004      	b.n	800d318 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 800d30e:	f7ff fded 	bl	800ceec <LL_RCC_LSE_IsReady>
 800d312:	4603      	mov	r3, r0
 800d314:	2b01      	cmp	r3, #1
 800d316:	d1ee      	bne.n	800d2f6 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800d318:	7ffb      	ldrb	r3, [r7, #31]
 800d31a:	77bb      	strb	r3, [r7, #30]
 800d31c:	e001      	b.n	800d322 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d31e:	7ffb      	ldrb	r3, [r7, #31]
 800d320:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	f003 0301 	and.w	r3, r3, #1
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	d004      	beq.n	800d338 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	699b      	ldr	r3, [r3, #24]
 800d332:	4618      	mov	r0, r3
 800d334:	f7ff fe2a 	bl	800cf8c <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	f003 0302 	and.w	r3, r3, #2
 800d340:	2b00      	cmp	r3, #0
 800d342:	d004      	beq.n	800d34e <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	69db      	ldr	r3, [r3, #28]
 800d348:	4618      	mov	r0, r3
 800d34a:	f7ff fe35 	bl	800cfb8 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	681b      	ldr	r3, [r3, #0]
 800d352:	f003 0310 	and.w	r3, r3, #16
 800d356:	2b00      	cmp	r3, #0
 800d358:	d004      	beq.n	800d364 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d35e:	4618      	mov	r0, r3
 800d360:	f7ff fe5d 	bl	800d01e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	f003 0320 	and.w	r3, r3, #32
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d004      	beq.n	800d37a <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d374:	4618      	mov	r0, r3
 800d376:	f7ff fe52 	bl	800d01e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	681b      	ldr	r3, [r3, #0]
 800d37e:	f003 0304 	and.w	r3, r3, #4
 800d382:	2b00      	cmp	r3, #0
 800d384:	d004      	beq.n	800d390 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	6a1b      	ldr	r3, [r3, #32]
 800d38a:	4618      	mov	r0, r3
 800d38c:	f7ff fe2a 	bl	800cfe4 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	681b      	ldr	r3, [r3, #0]
 800d394:	f003 0308 	and.w	r3, r3, #8
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d004      	beq.n	800d3a6 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d3a0:	4618      	mov	r0, r3
 800d3a2:	f7ff fe1f 	bl	800cfe4 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	681b      	ldr	r3, [r3, #0]
 800d3aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d022      	beq.n	800d3f8 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d3b6:	4618      	mov	r0, r3
 800d3b8:	f7ff fe8d 	bl	800d0d6 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d3c0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d3c4:	d107      	bne.n	800d3d6 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800d3c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d3ca:	68db      	ldr	r3, [r3, #12]
 800d3cc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800d3d0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800d3d4:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d3da:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800d3de:	d10b      	bne.n	800d3f8 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	3304      	adds	r3, #4
 800d3e4:	4618      	mov	r0, r3
 800d3e6:	f000 f8dd 	bl	800d5a4 <RCCEx_PLLSAI1_ConfigNQ>
 800d3ea:	4603      	mov	r3, r0
 800d3ec:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800d3ee:	7ffb      	ldrb	r3, [r7, #31]
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d001      	beq.n	800d3f8 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 800d3f4:	7ffb      	ldrb	r3, [r7, #31]
 800d3f6:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800d400:	2b00      	cmp	r3, #0
 800d402:	d02b      	beq.n	800d45c <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d408:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d40c:	d008      	beq.n	800d420 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d412:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d416:	d003      	beq.n	800d420 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d105      	bne.n	800d42c <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d424:	4618      	mov	r0, r3
 800d426:	f7ff fe2a 	bl	800d07e <LL_RCC_SetRNGClockSource>
 800d42a:	e00a      	b.n	800d442 <HAL_RCCEx_PeriphCLKConfig+0x240>
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d430:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800d434:	60fb      	str	r3, [r7, #12]
 800d436:	2000      	movs	r0, #0
 800d438:	f7ff fe21 	bl	800d07e <LL_RCC_SetRNGClockSource>
 800d43c:	68f8      	ldr	r0, [r7, #12]
 800d43e:	f7ff fe34 	bl	800d0aa <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d446:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 800d44a:	d107      	bne.n	800d45c <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800d44c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d450:	68db      	ldr	r3, [r3, #12]
 800d452:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800d456:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800d45a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	681b      	ldr	r3, [r3, #0]
 800d460:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d464:	2b00      	cmp	r3, #0
 800d466:	d022      	beq.n	800d4ae <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d46c:	4618      	mov	r0, r3
 800d46e:	f7ff fe3d 	bl	800d0ec <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d476:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d47a:	d107      	bne.n	800d48c <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800d47c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d480:	68db      	ldr	r3, [r3, #12]
 800d482:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800d486:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d48a:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d490:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d494:	d10b      	bne.n	800d4ae <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	3304      	adds	r3, #4
 800d49a:	4618      	mov	r0, r3
 800d49c:	f000 f8dd 	bl	800d65a <RCCEx_PLLSAI1_ConfigNR>
 800d4a0:	4603      	mov	r3, r0
 800d4a2:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800d4a4:	7ffb      	ldrb	r3, [r7, #31]
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	d001      	beq.n	800d4ae <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 800d4aa:	7ffb      	ldrb	r3, [r7, #31]
 800d4ac:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	681b      	ldr	r3, [r3, #0]
 800d4b2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d004      	beq.n	800d4c4 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d4be:	4618      	mov	r0, r3
 800d4c0:	f7ff fd26 	bl	800cf10 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	681b      	ldr	r3, [r3, #0]
 800d4c8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d009      	beq.n	800d4e4 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d4d4:	4618      	mov	r0, r3
 800d4d6:	f7ff fd45 	bl	800cf64 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d4de:	4618      	mov	r0, r3
 800d4e0:	f7ff fd2c 	bl	800cf3c <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 800d4e4:	7fbb      	ldrb	r3, [r7, #30]
}
 800d4e6:	4618      	mov	r0, r3
 800d4e8:	3720      	adds	r7, #32
 800d4ea:	46bd      	mov	sp, r7
 800d4ec:	bd80      	pop	{r7, pc}

0800d4ee <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800d4ee:	b580      	push	{r7, lr}
 800d4f0:	b084      	sub	sp, #16
 800d4f2:	af00      	add	r7, sp, #0
 800d4f4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d4f6:	2300      	movs	r3, #0
 800d4f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800d4fa:	f7ff fe61 	bl	800d1c0 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800d4fe:	f7f9 ffc7 	bl	8007490 <HAL_GetTick>
 800d502:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800d504:	e009      	b.n	800d51a <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800d506:	f7f9 ffc3 	bl	8007490 <HAL_GetTick>
 800d50a:	4602      	mov	r2, r0
 800d50c:	68bb      	ldr	r3, [r7, #8]
 800d50e:	1ad3      	subs	r3, r2, r3
 800d510:	2b02      	cmp	r3, #2
 800d512:	d902      	bls.n	800d51a <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 800d514:	2303      	movs	r3, #3
 800d516:	73fb      	strb	r3, [r7, #15]
      break;
 800d518:	e004      	b.n	800d524 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800d51a:	f7ff fe60 	bl	800d1de <LL_RCC_PLLSAI1_IsReady>
 800d51e:	4603      	mov	r3, r0
 800d520:	2b00      	cmp	r3, #0
 800d522:	d1f0      	bne.n	800d506 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 800d524:	7bfb      	ldrb	r3, [r7, #15]
 800d526:	2b00      	cmp	r3, #0
 800d528:	d137      	bne.n	800d59a <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800d52a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d52e:	691b      	ldr	r3, [r3, #16]
 800d530:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	021b      	lsls	r3, r3, #8
 800d53a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d53e:	4313      	orrs	r3, r2
 800d540:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800d542:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d546:	691b      	ldr	r3, [r3, #16]
 800d548:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	685b      	ldr	r3, [r3, #4]
 800d550:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d554:	4313      	orrs	r3, r2
 800d556:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800d558:	f7ff fe23 	bl	800d1a2 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d55c:	f7f9 ff98 	bl	8007490 <HAL_GetTick>
 800d560:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800d562:	e009      	b.n	800d578 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800d564:	f7f9 ff94 	bl	8007490 <HAL_GetTick>
 800d568:	4602      	mov	r2, r0
 800d56a:	68bb      	ldr	r3, [r7, #8]
 800d56c:	1ad3      	subs	r3, r2, r3
 800d56e:	2b02      	cmp	r3, #2
 800d570:	d902      	bls.n	800d578 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800d572:	2303      	movs	r3, #3
 800d574:	73fb      	strb	r3, [r7, #15]
        break;
 800d576:	e004      	b.n	800d582 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800d578:	f7ff fe31 	bl	800d1de <LL_RCC_PLLSAI1_IsReady>
 800d57c:	4603      	mov	r3, r0
 800d57e:	2b01      	cmp	r3, #1
 800d580:	d1f0      	bne.n	800d564 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800d582:	7bfb      	ldrb	r3, [r7, #15]
 800d584:	2b00      	cmp	r3, #0
 800d586:	d108      	bne.n	800d59a <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800d588:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d58c:	691a      	ldr	r2, [r3, #16]
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	691b      	ldr	r3, [r3, #16]
 800d592:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d596:	4313      	orrs	r3, r2
 800d598:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800d59a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d59c:	4618      	mov	r0, r3
 800d59e:	3710      	adds	r7, #16
 800d5a0:	46bd      	mov	sp, r7
 800d5a2:	bd80      	pop	{r7, pc}

0800d5a4 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800d5a4:	b580      	push	{r7, lr}
 800d5a6:	b084      	sub	sp, #16
 800d5a8:	af00      	add	r7, sp, #0
 800d5aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d5ac:	2300      	movs	r3, #0
 800d5ae:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800d5b0:	f7ff fe06 	bl	800d1c0 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800d5b4:	f7f9 ff6c 	bl	8007490 <HAL_GetTick>
 800d5b8:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800d5ba:	e009      	b.n	800d5d0 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800d5bc:	f7f9 ff68 	bl	8007490 <HAL_GetTick>
 800d5c0:	4602      	mov	r2, r0
 800d5c2:	68bb      	ldr	r3, [r7, #8]
 800d5c4:	1ad3      	subs	r3, r2, r3
 800d5c6:	2b02      	cmp	r3, #2
 800d5c8:	d902      	bls.n	800d5d0 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800d5ca:	2303      	movs	r3, #3
 800d5cc:	73fb      	strb	r3, [r7, #15]
      break;
 800d5ce:	e004      	b.n	800d5da <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800d5d0:	f7ff fe05 	bl	800d1de <LL_RCC_PLLSAI1_IsReady>
 800d5d4:	4603      	mov	r3, r0
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	d1f0      	bne.n	800d5bc <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800d5da:	7bfb      	ldrb	r3, [r7, #15]
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	d137      	bne.n	800d650 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800d5e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d5e4:	691b      	ldr	r3, [r3, #16]
 800d5e6:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	021b      	lsls	r3, r3, #8
 800d5f0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d5f4:	4313      	orrs	r3, r2
 800d5f6:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800d5f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d5fc:	691b      	ldr	r3, [r3, #16]
 800d5fe:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	689b      	ldr	r3, [r3, #8]
 800d606:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d60a:	4313      	orrs	r3, r2
 800d60c:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800d60e:	f7ff fdc8 	bl	800d1a2 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d612:	f7f9 ff3d 	bl	8007490 <HAL_GetTick>
 800d616:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800d618:	e009      	b.n	800d62e <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800d61a:	f7f9 ff39 	bl	8007490 <HAL_GetTick>
 800d61e:	4602      	mov	r2, r0
 800d620:	68bb      	ldr	r3, [r7, #8]
 800d622:	1ad3      	subs	r3, r2, r3
 800d624:	2b02      	cmp	r3, #2
 800d626:	d902      	bls.n	800d62e <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 800d628:	2303      	movs	r3, #3
 800d62a:	73fb      	strb	r3, [r7, #15]
        break;
 800d62c:	e004      	b.n	800d638 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800d62e:	f7ff fdd6 	bl	800d1de <LL_RCC_PLLSAI1_IsReady>
 800d632:	4603      	mov	r3, r0
 800d634:	2b01      	cmp	r3, #1
 800d636:	d1f0      	bne.n	800d61a <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 800d638:	7bfb      	ldrb	r3, [r7, #15]
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d108      	bne.n	800d650 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800d63e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d642:	691a      	ldr	r2, [r3, #16]
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	691b      	ldr	r3, [r3, #16]
 800d648:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d64c:	4313      	orrs	r3, r2
 800d64e:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800d650:	7bfb      	ldrb	r3, [r7, #15]
}
 800d652:	4618      	mov	r0, r3
 800d654:	3710      	adds	r7, #16
 800d656:	46bd      	mov	sp, r7
 800d658:	bd80      	pop	{r7, pc}

0800d65a <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800d65a:	b580      	push	{r7, lr}
 800d65c:	b084      	sub	sp, #16
 800d65e:	af00      	add	r7, sp, #0
 800d660:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d662:	2300      	movs	r3, #0
 800d664:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800d666:	f7ff fdab 	bl	800d1c0 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800d66a:	f7f9 ff11 	bl	8007490 <HAL_GetTick>
 800d66e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800d670:	e009      	b.n	800d686 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800d672:	f7f9 ff0d 	bl	8007490 <HAL_GetTick>
 800d676:	4602      	mov	r2, r0
 800d678:	68bb      	ldr	r3, [r7, #8]
 800d67a:	1ad3      	subs	r3, r2, r3
 800d67c:	2b02      	cmp	r3, #2
 800d67e:	d902      	bls.n	800d686 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800d680:	2303      	movs	r3, #3
 800d682:	73fb      	strb	r3, [r7, #15]
      break;
 800d684:	e004      	b.n	800d690 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800d686:	f7ff fdaa 	bl	800d1de <LL_RCC_PLLSAI1_IsReady>
 800d68a:	4603      	mov	r3, r0
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	d1f0      	bne.n	800d672 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800d690:	7bfb      	ldrb	r3, [r7, #15]
 800d692:	2b00      	cmp	r3, #0
 800d694:	d137      	bne.n	800d706 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800d696:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d69a:	691b      	ldr	r3, [r3, #16]
 800d69c:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	681b      	ldr	r3, [r3, #0]
 800d6a4:	021b      	lsls	r3, r3, #8
 800d6a6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d6aa:	4313      	orrs	r3, r2
 800d6ac:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800d6ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d6b2:	691b      	ldr	r3, [r3, #16]
 800d6b4:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	68db      	ldr	r3, [r3, #12]
 800d6bc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d6c0:	4313      	orrs	r3, r2
 800d6c2:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800d6c4:	f7ff fd6d 	bl	800d1a2 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d6c8:	f7f9 fee2 	bl	8007490 <HAL_GetTick>
 800d6cc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800d6ce:	e009      	b.n	800d6e4 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800d6d0:	f7f9 fede 	bl	8007490 <HAL_GetTick>
 800d6d4:	4602      	mov	r2, r0
 800d6d6:	68bb      	ldr	r3, [r7, #8]
 800d6d8:	1ad3      	subs	r3, r2, r3
 800d6da:	2b02      	cmp	r3, #2
 800d6dc:	d902      	bls.n	800d6e4 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800d6de:	2303      	movs	r3, #3
 800d6e0:	73fb      	strb	r3, [r7, #15]
        break;
 800d6e2:	e004      	b.n	800d6ee <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800d6e4:	f7ff fd7b 	bl	800d1de <LL_RCC_PLLSAI1_IsReady>
 800d6e8:	4603      	mov	r3, r0
 800d6ea:	2b01      	cmp	r3, #1
 800d6ec:	d1f0      	bne.n	800d6d0 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800d6ee:	7bfb      	ldrb	r3, [r7, #15]
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	d108      	bne.n	800d706 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800d6f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d6f8:	691a      	ldr	r2, [r3, #16]
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	691b      	ldr	r3, [r3, #16]
 800d6fe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d702:	4313      	orrs	r3, r2
 800d704:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800d706:	7bfb      	ldrb	r3, [r7, #15]
}
 800d708:	4618      	mov	r0, r3
 800d70a:	3710      	adds	r7, #16
 800d70c:	46bd      	mov	sp, r7
 800d70e:	bd80      	pop	{r7, pc}

0800d710 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800d710:	b580      	push	{r7, lr}
 800d712:	b084      	sub	sp, #16
 800d714:	af00      	add	r7, sp, #0
 800d716:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	d101      	bne.n	800d722 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800d71e:	2301      	movs	r3, #1
 800d720:	e09f      	b.n	800d862 <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800d728:	b2db      	uxtb	r3, r3
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d106      	bne.n	800d73c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	2200      	movs	r2, #0
 800d732:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800d736:	6878      	ldr	r0, [r7, #4]
 800d738:	f7f5 ff8e 	bl	8003658 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	2202      	movs	r2, #2
 800d740:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800d744:	4b49      	ldr	r3, [pc, #292]	@ (800d86c <HAL_RTC_Init+0x15c>)
 800d746:	68db      	ldr	r3, [r3, #12]
 800d748:	f003 0310 	and.w	r3, r3, #16
 800d74c:	2b10      	cmp	r3, #16
 800d74e:	d07e      	beq.n	800d84e <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	681b      	ldr	r3, [r3, #0]
 800d754:	22ca      	movs	r2, #202	@ 0xca
 800d756:	625a      	str	r2, [r3, #36]	@ 0x24
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	681b      	ldr	r3, [r3, #0]
 800d75c:	2253      	movs	r2, #83	@ 0x53
 800d75e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800d760:	6878      	ldr	r0, [r7, #4]
 800d762:	f000 fa1d 	bl	800dba0 <RTC_EnterInitMode>
 800d766:	4603      	mov	r3, r0
 800d768:	2b00      	cmp	r3, #0
 800d76a:	d00a      	beq.n	800d782 <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	22ff      	movs	r2, #255	@ 0xff
 800d772:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	2204      	movs	r2, #4
 800d778:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      status = HAL_ERROR;
 800d77c:	2301      	movs	r3, #1
 800d77e:	73fb      	strb	r3, [r7, #15]
 800d780:	e067      	b.n	800d852 <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	681b      	ldr	r3, [r3, #0]
 800d786:	689b      	ldr	r3, [r3, #8]
 800d788:	687a      	ldr	r2, [r7, #4]
 800d78a:	6812      	ldr	r2, [r2, #0]
 800d78c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800d790:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d794:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	681b      	ldr	r3, [r3, #0]
 800d79a:	6899      	ldr	r1, [r3, #8]
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	685a      	ldr	r2, [r3, #4]
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	691b      	ldr	r3, [r3, #16]
 800d7a4:	431a      	orrs	r2, r3
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	699b      	ldr	r3, [r3, #24]
 800d7aa:	431a      	orrs	r2, r3
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	430a      	orrs	r2, r1
 800d7b2:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	681b      	ldr	r3, [r3, #0]
 800d7b8:	687a      	ldr	r2, [r7, #4]
 800d7ba:	68d2      	ldr	r2, [r2, #12]
 800d7bc:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	681b      	ldr	r3, [r3, #0]
 800d7c2:	6919      	ldr	r1, [r3, #16]
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	689b      	ldr	r3, [r3, #8]
 800d7c8:	041a      	lsls	r2, r3, #16
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	681b      	ldr	r3, [r3, #0]
 800d7ce:	430a      	orrs	r2, r1
 800d7d0:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	68da      	ldr	r2, [r3, #12]
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	681b      	ldr	r3, [r3, #0]
 800d7dc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800d7e0:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	681b      	ldr	r3, [r3, #0]
 800d7e6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	f022 0203 	bic.w	r2, r2, #3
 800d7f0:	64da      	str	r2, [r3, #76]	@ 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	681b      	ldr	r3, [r3, #0]
 800d7f6:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	69da      	ldr	r2, [r3, #28]
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	695b      	ldr	r3, [r3, #20]
 800d800:	431a      	orrs	r2, r3
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	681b      	ldr	r3, [r3, #0]
 800d806:	430a      	orrs	r2, r1
 800d808:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	681b      	ldr	r3, [r3, #0]
 800d80e:	689b      	ldr	r3, [r3, #8]
 800d810:	f003 0320 	and.w	r3, r3, #32
 800d814:	2b00      	cmp	r3, #0
 800d816:	d113      	bne.n	800d840 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800d818:	6878      	ldr	r0, [r7, #4]
 800d81a:	f000 f99b 	bl	800db54 <HAL_RTC_WaitForSynchro>
 800d81e:	4603      	mov	r3, r0
 800d820:	2b00      	cmp	r3, #0
 800d822:	d00d      	beq.n	800d840 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	681b      	ldr	r3, [r3, #0]
 800d828:	22ff      	movs	r2, #255	@ 0xff
 800d82a:	625a      	str	r2, [r3, #36]	@ 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	2204      	movs	r2, #4
 800d830:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	2200      	movs	r2, #0
 800d838:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 800d83c:	2301      	movs	r3, #1
 800d83e:	e010      	b.n	800d862 <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	681b      	ldr	r3, [r3, #0]
 800d844:	22ff      	movs	r2, #255	@ 0xff
 800d846:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      status = HAL_OK;
 800d848:	2300      	movs	r3, #0
 800d84a:	73fb      	strb	r3, [r7, #15]
 800d84c:	e001      	b.n	800d852 <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 800d84e:	2300      	movs	r3, #0
 800d850:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800d852:	7bfb      	ldrb	r3, [r7, #15]
 800d854:	2b00      	cmp	r3, #0
 800d856:	d103      	bne.n	800d860 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	2201      	movs	r2, #1
 800d85c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  return status;
 800d860:	7bfb      	ldrb	r3, [r7, #15]
}
 800d862:	4618      	mov	r0, r3
 800d864:	3710      	adds	r7, #16
 800d866:	46bd      	mov	sp, r7
 800d868:	bd80      	pop	{r7, pc}
 800d86a:	bf00      	nop
 800d86c:	40002800 	.word	0x40002800

0800d870 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800d870:	b590      	push	{r4, r7, lr}
 800d872:	b087      	sub	sp, #28
 800d874:	af00      	add	r7, sp, #0
 800d876:	60f8      	str	r0, [r7, #12]
 800d878:	60b9      	str	r1, [r7, #8]
 800d87a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800d87c:	68fb      	ldr	r3, [r7, #12]
 800d87e:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d882:	2b01      	cmp	r3, #1
 800d884:	d101      	bne.n	800d88a <HAL_RTC_SetTime+0x1a>
 800d886:	2302      	movs	r3, #2
 800d888:	e0b2      	b.n	800d9f0 <HAL_RTC_SetTime+0x180>
 800d88a:	68fb      	ldr	r3, [r7, #12]
 800d88c:	2201      	movs	r2, #1
 800d88e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800d892:	68fb      	ldr	r3, [r7, #12]
 800d894:	2202      	movs	r2, #2
 800d896:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if (Format == RTC_FORMAT_BIN)
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d126      	bne.n	800d8ee <HAL_RTC_SetTime+0x7e>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800d8a0:	68fb      	ldr	r3, [r7, #12]
 800d8a2:	681b      	ldr	r3, [r3, #0]
 800d8a4:	689b      	ldr	r3, [r3, #8]
 800d8a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d102      	bne.n	800d8b4 <HAL_RTC_SetTime+0x44>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800d8ae:	68bb      	ldr	r3, [r7, #8]
 800d8b0:	2200      	movs	r2, #0
 800d8b2:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800d8b4:	68bb      	ldr	r3, [r7, #8]
 800d8b6:	781b      	ldrb	r3, [r3, #0]
 800d8b8:	4618      	mov	r0, r3
 800d8ba:	f000 f99b 	bl	800dbf4 <RTC_ByteToBcd2>
 800d8be:	4603      	mov	r3, r0
 800d8c0:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800d8c2:	68bb      	ldr	r3, [r7, #8]
 800d8c4:	785b      	ldrb	r3, [r3, #1]
 800d8c6:	4618      	mov	r0, r3
 800d8c8:	f000 f994 	bl	800dbf4 <RTC_ByteToBcd2>
 800d8cc:	4603      	mov	r3, r0
 800d8ce:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800d8d0:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800d8d2:	68bb      	ldr	r3, [r7, #8]
 800d8d4:	789b      	ldrb	r3, [r3, #2]
 800d8d6:	4618      	mov	r0, r3
 800d8d8:	f000 f98c 	bl	800dbf4 <RTC_ByteToBcd2>
 800d8dc:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800d8de:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800d8e2:	68bb      	ldr	r3, [r7, #8]
 800d8e4:	78db      	ldrb	r3, [r3, #3]
 800d8e6:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800d8e8:	4313      	orrs	r3, r2
 800d8ea:	617b      	str	r3, [r7, #20]
 800d8ec:	e018      	b.n	800d920 <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800d8ee:	68fb      	ldr	r3, [r7, #12]
 800d8f0:	681b      	ldr	r3, [r3, #0]
 800d8f2:	689b      	ldr	r3, [r3, #8]
 800d8f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	d102      	bne.n	800d902 <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800d8fc:	68bb      	ldr	r3, [r7, #8]
 800d8fe:	2200      	movs	r2, #0
 800d900:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800d902:	68bb      	ldr	r3, [r7, #8]
 800d904:	781b      	ldrb	r3, [r3, #0]
 800d906:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800d908:	68bb      	ldr	r3, [r7, #8]
 800d90a:	785b      	ldrb	r3, [r3, #1]
 800d90c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800d90e:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800d910:	68ba      	ldr	r2, [r7, #8]
 800d912:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800d914:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800d916:	68bb      	ldr	r3, [r7, #8]
 800d918:	78db      	ldrb	r3, [r3, #3]
 800d91a:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800d91c:	4313      	orrs	r3, r2
 800d91e:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d920:	68fb      	ldr	r3, [r7, #12]
 800d922:	681b      	ldr	r3, [r3, #0]
 800d924:	22ca      	movs	r2, #202	@ 0xca
 800d926:	625a      	str	r2, [r3, #36]	@ 0x24
 800d928:	68fb      	ldr	r3, [r7, #12]
 800d92a:	681b      	ldr	r3, [r3, #0]
 800d92c:	2253      	movs	r2, #83	@ 0x53
 800d92e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800d930:	68f8      	ldr	r0, [r7, #12]
 800d932:	f000 f935 	bl	800dba0 <RTC_EnterInitMode>
 800d936:	4603      	mov	r3, r0
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d00d      	beq.n	800d958 <HAL_RTC_SetTime+0xe8>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d93c:	68fb      	ldr	r3, [r7, #12]
 800d93e:	681b      	ldr	r3, [r3, #0]
 800d940:	22ff      	movs	r2, #255	@ 0xff
 800d942:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800d944:	68fb      	ldr	r3, [r7, #12]
 800d946:	2204      	movs	r2, #4
 800d948:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800d94c:	68fb      	ldr	r3, [r7, #12]
 800d94e:	2200      	movs	r2, #0
 800d950:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 800d954:	2301      	movs	r3, #1
 800d956:	e04b      	b.n	800d9f0 <HAL_RTC_SetTime+0x180>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800d958:	68fb      	ldr	r3, [r7, #12]
 800d95a:	681a      	ldr	r2, [r3, #0]
 800d95c:	697b      	ldr	r3, [r7, #20]
 800d95e:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 800d962:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800d966:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800d968:	68fb      	ldr	r3, [r7, #12]
 800d96a:	681b      	ldr	r3, [r3, #0]
 800d96c:	689a      	ldr	r2, [r3, #8]
 800d96e:	68fb      	ldr	r3, [r7, #12]
 800d970:	681b      	ldr	r3, [r3, #0]
 800d972:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800d976:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800d978:	68fb      	ldr	r3, [r7, #12]
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	6899      	ldr	r1, [r3, #8]
 800d97e:	68bb      	ldr	r3, [r7, #8]
 800d980:	68da      	ldr	r2, [r3, #12]
 800d982:	68bb      	ldr	r3, [r7, #8]
 800d984:	691b      	ldr	r3, [r3, #16]
 800d986:	431a      	orrs	r2, r3
 800d988:	68fb      	ldr	r3, [r7, #12]
 800d98a:	681b      	ldr	r3, [r3, #0]
 800d98c:	430a      	orrs	r2, r1
 800d98e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800d990:	68fb      	ldr	r3, [r7, #12]
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	68da      	ldr	r2, [r3, #12]
 800d996:	68fb      	ldr	r3, [r7, #12]
 800d998:	681b      	ldr	r3, [r3, #0]
 800d99a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800d99e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800d9a0:	68fb      	ldr	r3, [r7, #12]
 800d9a2:	681b      	ldr	r3, [r3, #0]
 800d9a4:	689b      	ldr	r3, [r3, #8]
 800d9a6:	f003 0320 	and.w	r3, r3, #32
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	d113      	bne.n	800d9d6 <HAL_RTC_SetTime+0x166>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800d9ae:	68f8      	ldr	r0, [r7, #12]
 800d9b0:	f000 f8d0 	bl	800db54 <HAL_RTC_WaitForSynchro>
 800d9b4:	4603      	mov	r3, r0
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d00d      	beq.n	800d9d6 <HAL_RTC_SetTime+0x166>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d9ba:	68fb      	ldr	r3, [r7, #12]
 800d9bc:	681b      	ldr	r3, [r3, #0]
 800d9be:	22ff      	movs	r2, #255	@ 0xff
 800d9c0:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800d9c2:	68fb      	ldr	r3, [r7, #12]
 800d9c4:	2204      	movs	r2, #4
 800d9c6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800d9ca:	68fb      	ldr	r3, [r7, #12]
 800d9cc:	2200      	movs	r2, #0
 800d9ce:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800d9d2:	2301      	movs	r3, #1
 800d9d4:	e00c      	b.n	800d9f0 <HAL_RTC_SetTime+0x180>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d9d6:	68fb      	ldr	r3, [r7, #12]
 800d9d8:	681b      	ldr	r3, [r3, #0]
 800d9da:	22ff      	movs	r2, #255	@ 0xff
 800d9dc:	625a      	str	r2, [r3, #36]	@ 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 800d9de:	68fb      	ldr	r3, [r7, #12]
 800d9e0:	2201      	movs	r2, #1
 800d9e2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    __HAL_UNLOCK(hrtc);
 800d9e6:	68fb      	ldr	r3, [r7, #12]
 800d9e8:	2200      	movs	r2, #0
 800d9ea:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_OK;
 800d9ee:	2300      	movs	r3, #0
  }
}
 800d9f0:	4618      	mov	r0, r3
 800d9f2:	371c      	adds	r7, #28
 800d9f4:	46bd      	mov	sp, r7
 800d9f6:	bd90      	pop	{r4, r7, pc}

0800d9f8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800d9f8:	b590      	push	{r4, r7, lr}
 800d9fa:	b087      	sub	sp, #28
 800d9fc:	af00      	add	r7, sp, #0
 800d9fe:	60f8      	str	r0, [r7, #12]
 800da00:	60b9      	str	r1, [r7, #8]
 800da02:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800da04:	68fb      	ldr	r3, [r7, #12]
 800da06:	f893 3020 	ldrb.w	r3, [r3, #32]
 800da0a:	2b01      	cmp	r3, #1
 800da0c:	d101      	bne.n	800da12 <HAL_RTC_SetDate+0x1a>
 800da0e:	2302      	movs	r3, #2
 800da10:	e09c      	b.n	800db4c <HAL_RTC_SetDate+0x154>
 800da12:	68fb      	ldr	r3, [r7, #12]
 800da14:	2201      	movs	r2, #1
 800da16:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800da1a:	68fb      	ldr	r3, [r7, #12]
 800da1c:	2202      	movs	r2, #2
 800da1e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	2b00      	cmp	r3, #0
 800da26:	d10e      	bne.n	800da46 <HAL_RTC_SetDate+0x4e>
 800da28:	68bb      	ldr	r3, [r7, #8]
 800da2a:	785b      	ldrb	r3, [r3, #1]
 800da2c:	f003 0310 	and.w	r3, r3, #16
 800da30:	2b00      	cmp	r3, #0
 800da32:	d008      	beq.n	800da46 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800da34:	68bb      	ldr	r3, [r7, #8]
 800da36:	785b      	ldrb	r3, [r3, #1]
 800da38:	f023 0310 	bic.w	r3, r3, #16
 800da3c:	b2db      	uxtb	r3, r3
 800da3e:	330a      	adds	r3, #10
 800da40:	b2da      	uxtb	r2, r3
 800da42:	68bb      	ldr	r3, [r7, #8]
 800da44:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	2b00      	cmp	r3, #0
 800da4a:	d11c      	bne.n	800da86 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800da4c:	68bb      	ldr	r3, [r7, #8]
 800da4e:	78db      	ldrb	r3, [r3, #3]
 800da50:	4618      	mov	r0, r3
 800da52:	f000 f8cf 	bl	800dbf4 <RTC_ByteToBcd2>
 800da56:	4603      	mov	r3, r0
 800da58:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800da5a:	68bb      	ldr	r3, [r7, #8]
 800da5c:	785b      	ldrb	r3, [r3, #1]
 800da5e:	4618      	mov	r0, r3
 800da60:	f000 f8c8 	bl	800dbf4 <RTC_ByteToBcd2>
 800da64:	4603      	mov	r3, r0
 800da66:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800da68:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800da6a:	68bb      	ldr	r3, [r7, #8]
 800da6c:	789b      	ldrb	r3, [r3, #2]
 800da6e:	4618      	mov	r0, r3
 800da70:	f000 f8c0 	bl	800dbf4 <RTC_ByteToBcd2>
 800da74:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800da76:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 800da7a:	68bb      	ldr	r3, [r7, #8]
 800da7c:	781b      	ldrb	r3, [r3, #0]
 800da7e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800da80:	4313      	orrs	r3, r2
 800da82:	617b      	str	r3, [r7, #20]
 800da84:	e00e      	b.n	800daa4 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800da86:	68bb      	ldr	r3, [r7, #8]
 800da88:	78db      	ldrb	r3, [r3, #3]
 800da8a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800da8c:	68bb      	ldr	r3, [r7, #8]
 800da8e:	785b      	ldrb	r3, [r3, #1]
 800da90:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800da92:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800da94:	68ba      	ldr	r2, [r7, #8]
 800da96:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800da98:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 800da9a:	68bb      	ldr	r3, [r7, #8]
 800da9c:	781b      	ldrb	r3, [r3, #0]
 800da9e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800daa0:	4313      	orrs	r3, r2
 800daa2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800daa4:	68fb      	ldr	r3, [r7, #12]
 800daa6:	681b      	ldr	r3, [r3, #0]
 800daa8:	22ca      	movs	r2, #202	@ 0xca
 800daaa:	625a      	str	r2, [r3, #36]	@ 0x24
 800daac:	68fb      	ldr	r3, [r7, #12]
 800daae:	681b      	ldr	r3, [r3, #0]
 800dab0:	2253      	movs	r2, #83	@ 0x53
 800dab2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800dab4:	68f8      	ldr	r0, [r7, #12]
 800dab6:	f000 f873 	bl	800dba0 <RTC_EnterInitMode>
 800daba:	4603      	mov	r3, r0
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d00d      	beq.n	800dadc <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800dac0:	68fb      	ldr	r3, [r7, #12]
 800dac2:	681b      	ldr	r3, [r3, #0]
 800dac4:	22ff      	movs	r2, #255	@ 0xff
 800dac6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800dac8:	68fb      	ldr	r3, [r7, #12]
 800daca:	2204      	movs	r2, #4
 800dacc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800dad0:	68fb      	ldr	r3, [r7, #12]
 800dad2:	2200      	movs	r2, #0
 800dad4:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 800dad8:	2301      	movs	r3, #1
 800dada:	e037      	b.n	800db4c <HAL_RTC_SetDate+0x154>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800dadc:	68fb      	ldr	r3, [r7, #12]
 800dade:	681a      	ldr	r2, [r3, #0]
 800dae0:	697b      	ldr	r3, [r7, #20]
 800dae2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800dae6:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800daea:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800daec:	68fb      	ldr	r3, [r7, #12]
 800daee:	681b      	ldr	r3, [r3, #0]
 800daf0:	68da      	ldr	r2, [r3, #12]
 800daf2:	68fb      	ldr	r3, [r7, #12]
 800daf4:	681b      	ldr	r3, [r3, #0]
 800daf6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800dafa:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800dafc:	68fb      	ldr	r3, [r7, #12]
 800dafe:	681b      	ldr	r3, [r3, #0]
 800db00:	689b      	ldr	r3, [r3, #8]
 800db02:	f003 0320 	and.w	r3, r3, #32
 800db06:	2b00      	cmp	r3, #0
 800db08:	d113      	bne.n	800db32 <HAL_RTC_SetDate+0x13a>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800db0a:	68f8      	ldr	r0, [r7, #12]
 800db0c:	f000 f822 	bl	800db54 <HAL_RTC_WaitForSynchro>
 800db10:	4603      	mov	r3, r0
 800db12:	2b00      	cmp	r3, #0
 800db14:	d00d      	beq.n	800db32 <HAL_RTC_SetDate+0x13a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800db16:	68fb      	ldr	r3, [r7, #12]
 800db18:	681b      	ldr	r3, [r3, #0]
 800db1a:	22ff      	movs	r2, #255	@ 0xff
 800db1c:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800db1e:	68fb      	ldr	r3, [r7, #12]
 800db20:	2204      	movs	r2, #4
 800db22:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800db26:	68fb      	ldr	r3, [r7, #12]
 800db28:	2200      	movs	r2, #0
 800db2a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800db2e:	2301      	movs	r3, #1
 800db30:	e00c      	b.n	800db4c <HAL_RTC_SetDate+0x154>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800db32:	68fb      	ldr	r3, [r7, #12]
 800db34:	681b      	ldr	r3, [r3, #0]
 800db36:	22ff      	movs	r2, #255	@ 0xff
 800db38:	625a      	str	r2, [r3, #36]	@ 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800db3a:	68fb      	ldr	r3, [r7, #12]
 800db3c:	2201      	movs	r2, #1
 800db3e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800db42:	68fb      	ldr	r3, [r7, #12]
 800db44:	2200      	movs	r2, #0
 800db46:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_OK;
 800db4a:	2300      	movs	r3, #0
  }
}
 800db4c:	4618      	mov	r0, r3
 800db4e:	371c      	adds	r7, #28
 800db50:	46bd      	mov	sp, r7
 800db52:	bd90      	pop	{r4, r7, pc}

0800db54 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800db54:	b580      	push	{r7, lr}
 800db56:	b084      	sub	sp, #16
 800db58:	af00      	add	r7, sp, #0
 800db5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	681b      	ldr	r3, [r3, #0]
 800db60:	68da      	ldr	r2, [r3, #12]
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	681b      	ldr	r3, [r3, #0]
 800db66:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800db6a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800db6c:	f7f9 fc90 	bl	8007490 <HAL_GetTick>
 800db70:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800db72:	e009      	b.n	800db88 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800db74:	f7f9 fc8c 	bl	8007490 <HAL_GetTick>
 800db78:	4602      	mov	r2, r0
 800db7a:	68fb      	ldr	r3, [r7, #12]
 800db7c:	1ad3      	subs	r3, r2, r3
 800db7e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800db82:	d901      	bls.n	800db88 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800db84:	2303      	movs	r3, #3
 800db86:	e007      	b.n	800db98 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	68db      	ldr	r3, [r3, #12]
 800db8e:	f003 0320 	and.w	r3, r3, #32
 800db92:	2b00      	cmp	r3, #0
 800db94:	d0ee      	beq.n	800db74 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800db96:	2300      	movs	r3, #0
}
 800db98:	4618      	mov	r0, r3
 800db9a:	3710      	adds	r7, #16
 800db9c:	46bd      	mov	sp, r7
 800db9e:	bd80      	pop	{r7, pc}

0800dba0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800dba0:	b580      	push	{r7, lr}
 800dba2:	b084      	sub	sp, #16
 800dba4:	af00      	add	r7, sp, #0
 800dba6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	681b      	ldr	r3, [r3, #0]
 800dbac:	68db      	ldr	r3, [r3, #12]
 800dbae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	d119      	bne.n	800dbea <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	681b      	ldr	r3, [r3, #0]
 800dbba:	f04f 32ff 	mov.w	r2, #4294967295
 800dbbe:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800dbc0:	f7f9 fc66 	bl	8007490 <HAL_GetTick>
 800dbc4:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800dbc6:	e009      	b.n	800dbdc <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800dbc8:	f7f9 fc62 	bl	8007490 <HAL_GetTick>
 800dbcc:	4602      	mov	r2, r0
 800dbce:	68fb      	ldr	r3, [r7, #12]
 800dbd0:	1ad3      	subs	r3, r2, r3
 800dbd2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800dbd6:	d901      	bls.n	800dbdc <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 800dbd8:	2303      	movs	r3, #3
 800dbda:	e007      	b.n	800dbec <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	681b      	ldr	r3, [r3, #0]
 800dbe0:	68db      	ldr	r3, [r3, #12]
 800dbe2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	d0ee      	beq.n	800dbc8 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 800dbea:	2300      	movs	r3, #0
}
 800dbec:	4618      	mov	r0, r3
 800dbee:	3710      	adds	r7, #16
 800dbf0:	46bd      	mov	sp, r7
 800dbf2:	bd80      	pop	{r7, pc}

0800dbf4 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800dbf4:	b480      	push	{r7}
 800dbf6:	b085      	sub	sp, #20
 800dbf8:	af00      	add	r7, sp, #0
 800dbfa:	4603      	mov	r3, r0
 800dbfc:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800dbfe:	2300      	movs	r3, #0
 800dc00:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 800dc02:	79fb      	ldrb	r3, [r7, #7]
 800dc04:	72fb      	strb	r3, [r7, #11]

  while (Param >= 10U)
 800dc06:	e005      	b.n	800dc14 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800dc08:	68fb      	ldr	r3, [r7, #12]
 800dc0a:	3301      	adds	r3, #1
 800dc0c:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 800dc0e:	7afb      	ldrb	r3, [r7, #11]
 800dc10:	3b0a      	subs	r3, #10
 800dc12:	72fb      	strb	r3, [r7, #11]
  while (Param >= 10U)
 800dc14:	7afb      	ldrb	r3, [r7, #11]
 800dc16:	2b09      	cmp	r3, #9
 800dc18:	d8f6      	bhi.n	800dc08 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 800dc1a:	68fb      	ldr	r3, [r7, #12]
 800dc1c:	b2db      	uxtb	r3, r3
 800dc1e:	011b      	lsls	r3, r3, #4
 800dc20:	b2da      	uxtb	r2, r3
 800dc22:	7afb      	ldrb	r3, [r7, #11]
 800dc24:	4313      	orrs	r3, r2
 800dc26:	b2db      	uxtb	r3, r3
}
 800dc28:	4618      	mov	r0, r3
 800dc2a:	3714      	adds	r7, #20
 800dc2c:	46bd      	mov	sp, r7
 800dc2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc32:	4770      	bx	lr

0800dc34 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 800dc34:	b580      	push	{r7, lr}
 800dc36:	b086      	sub	sp, #24
 800dc38:	af00      	add	r7, sp, #0
 800dc3a:	60f8      	str	r0, [r7, #12]
 800dc3c:	60b9      	str	r1, [r7, #8]
 800dc3e:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800dc40:	68fb      	ldr	r3, [r7, #12]
 800dc42:	f893 3020 	ldrb.w	r3, [r3, #32]
 800dc46:	2b01      	cmp	r3, #1
 800dc48:	d101      	bne.n	800dc4e <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 800dc4a:	2302      	movs	r3, #2
 800dc4c:	e0a8      	b.n	800dda0 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 800dc4e:	68fb      	ldr	r3, [r7, #12]
 800dc50:	2201      	movs	r2, #1
 800dc52:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800dc56:	68fb      	ldr	r3, [r7, #12]
 800dc58:	2202      	movs	r2, #2
 800dc5a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800dc5e:	68fb      	ldr	r3, [r7, #12]
 800dc60:	681b      	ldr	r3, [r3, #0]
 800dc62:	22ca      	movs	r2, #202	@ 0xca
 800dc64:	625a      	str	r2, [r3, #36]	@ 0x24
 800dc66:	68fb      	ldr	r3, [r7, #12]
 800dc68:	681b      	ldr	r3, [r3, #0]
 800dc6a:	2253      	movs	r2, #83	@ 0x53
 800dc6c:	625a      	str	r2, [r3, #36]	@ 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 800dc6e:	68fb      	ldr	r3, [r7, #12]
 800dc70:	681b      	ldr	r3, [r3, #0]
 800dc72:	689b      	ldr	r3, [r3, #8]
 800dc74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d020      	beq.n	800dcbe <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 800dc7c:	f7f9 fc08 	bl	8007490 <HAL_GetTick>
 800dc80:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 800dc82:	e015      	b.n	800dcb0 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800dc84:	f7f9 fc04 	bl	8007490 <HAL_GetTick>
 800dc88:	4602      	mov	r2, r0
 800dc8a:	697b      	ldr	r3, [r7, #20]
 800dc8c:	1ad3      	subs	r3, r2, r3
 800dc8e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800dc92:	d90d      	bls.n	800dcb0 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800dc94:	68fb      	ldr	r3, [r7, #12]
 800dc96:	681b      	ldr	r3, [r3, #0]
 800dc98:	22ff      	movs	r2, #255	@ 0xff
 800dc9a:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800dc9c:	68fb      	ldr	r3, [r7, #12]
 800dc9e:	2203      	movs	r2, #3
 800dca0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800dca4:	68fb      	ldr	r3, [r7, #12]
 800dca6:	2200      	movs	r2, #0
 800dca8:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 800dcac:	2303      	movs	r3, #3
 800dcae:	e077      	b.n	800dda0 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 800dcb0:	68fb      	ldr	r3, [r7, #12]
 800dcb2:	681b      	ldr	r3, [r3, #0]
 800dcb4:	68db      	ldr	r3, [r3, #12]
 800dcb6:	f003 0304 	and.w	r3, r3, #4
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	d1e2      	bne.n	800dc84 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800dcbe:	68fb      	ldr	r3, [r7, #12]
 800dcc0:	681b      	ldr	r3, [r3, #0]
 800dcc2:	689a      	ldr	r2, [r3, #8]
 800dcc4:	68fb      	ldr	r3, [r7, #12]
 800dcc6:	681b      	ldr	r3, [r3, #0]
 800dcc8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800dccc:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800dcce:	68fb      	ldr	r3, [r7, #12]
 800dcd0:	681b      	ldr	r3, [r3, #0]
 800dcd2:	68db      	ldr	r3, [r3, #12]
 800dcd4:	b2da      	uxtb	r2, r3
 800dcd6:	68fb      	ldr	r3, [r7, #12]
 800dcd8:	681b      	ldr	r3, [r3, #0]
 800dcda:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 800dcde:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800dce0:	f7f9 fbd6 	bl	8007490 <HAL_GetTick>
 800dce4:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800dce6:	e015      	b.n	800dd14 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800dce8:	f7f9 fbd2 	bl	8007490 <HAL_GetTick>
 800dcec:	4602      	mov	r2, r0
 800dcee:	697b      	ldr	r3, [r7, #20]
 800dcf0:	1ad3      	subs	r3, r2, r3
 800dcf2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800dcf6:	d90d      	bls.n	800dd14 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800dcf8:	68fb      	ldr	r3, [r7, #12]
 800dcfa:	681b      	ldr	r3, [r3, #0]
 800dcfc:	22ff      	movs	r2, #255	@ 0xff
 800dcfe:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800dd00:	68fb      	ldr	r3, [r7, #12]
 800dd02:	2203      	movs	r2, #3
 800dd04:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800dd08:	68fb      	ldr	r3, [r7, #12]
 800dd0a:	2200      	movs	r2, #0
 800dd0c:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 800dd10:	2303      	movs	r3, #3
 800dd12:	e045      	b.n	800dda0 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800dd14:	68fb      	ldr	r3, [r7, #12]
 800dd16:	681b      	ldr	r3, [r3, #0]
 800dd18:	68db      	ldr	r3, [r3, #12]
 800dd1a:	f003 0304 	and.w	r3, r3, #4
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	d0e2      	beq.n	800dce8 <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800dd22:	68fb      	ldr	r3, [r7, #12]
 800dd24:	681b      	ldr	r3, [r3, #0]
 800dd26:	68ba      	ldr	r2, [r7, #8]
 800dd28:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800dd2a:	68fb      	ldr	r3, [r7, #12]
 800dd2c:	681b      	ldr	r3, [r3, #0]
 800dd2e:	689a      	ldr	r2, [r3, #8]
 800dd30:	68fb      	ldr	r3, [r7, #12]
 800dd32:	681b      	ldr	r3, [r3, #0]
 800dd34:	f022 0207 	bic.w	r2, r2, #7
 800dd38:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800dd3a:	68fb      	ldr	r3, [r7, #12]
 800dd3c:	681b      	ldr	r3, [r3, #0]
 800dd3e:	6899      	ldr	r1, [r3, #8]
 800dd40:	68fb      	ldr	r3, [r7, #12]
 800dd42:	681b      	ldr	r3, [r3, #0]
 800dd44:	687a      	ldr	r2, [r7, #4]
 800dd46:	430a      	orrs	r2, r1
 800dd48:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800dd4a:	4b17      	ldr	r3, [pc, #92]	@ (800dda8 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800dd4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800dd50:	4a15      	ldr	r2, [pc, #84]	@ (800dda8 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800dd52:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800dd56:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 800dd5a:	4b13      	ldr	r3, [pc, #76]	@ (800dda8 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800dd5c:	681b      	ldr	r3, [r3, #0]
 800dd5e:	4a12      	ldr	r2, [pc, #72]	@ (800dda8 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800dd60:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800dd64:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 800dd66:	68fb      	ldr	r3, [r7, #12]
 800dd68:	681b      	ldr	r3, [r3, #0]
 800dd6a:	689a      	ldr	r2, [r3, #8]
 800dd6c:	68fb      	ldr	r3, [r7, #12]
 800dd6e:	681b      	ldr	r3, [r3, #0]
 800dd70:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800dd74:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800dd76:	68fb      	ldr	r3, [r7, #12]
 800dd78:	681b      	ldr	r3, [r3, #0]
 800dd7a:	689a      	ldr	r2, [r3, #8]
 800dd7c:	68fb      	ldr	r3, [r7, #12]
 800dd7e:	681b      	ldr	r3, [r3, #0]
 800dd80:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800dd84:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800dd86:	68fb      	ldr	r3, [r7, #12]
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	22ff      	movs	r2, #255	@ 0xff
 800dd8c:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800dd8e:	68fb      	ldr	r3, [r7, #12]
 800dd90:	2201      	movs	r2, #1
 800dd92:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800dd96:	68fb      	ldr	r3, [r7, #12]
 800dd98:	2200      	movs	r2, #0
 800dd9a:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800dd9e:	2300      	movs	r3, #0
}
 800dda0:	4618      	mov	r0, r3
 800dda2:	3718      	adds	r7, #24
 800dda4:	46bd      	mov	sp, r7
 800dda6:	bd80      	pop	{r7, pc}
 800dda8:	58000800 	.word	0x58000800

0800ddac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800ddac:	b580      	push	{r7, lr}
 800ddae:	b084      	sub	sp, #16
 800ddb0:	af00      	add	r7, sp, #0
 800ddb2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	d101      	bne.n	800ddbe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800ddba:	2301      	movs	r3, #1
 800ddbc:	e095      	b.n	800deea <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	d108      	bne.n	800ddd8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	685b      	ldr	r3, [r3, #4]
 800ddca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800ddce:	d009      	beq.n	800dde4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	2200      	movs	r2, #0
 800ddd4:	61da      	str	r2, [r3, #28]
 800ddd6:	e005      	b.n	800dde4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	2200      	movs	r2, #0
 800dddc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	2200      	movs	r2, #0
 800dde2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	2200      	movs	r2, #0
 800dde8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800ddf0:	b2db      	uxtb	r3, r3
 800ddf2:	2b00      	cmp	r3, #0
 800ddf4:	d106      	bne.n	800de04 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	2200      	movs	r2, #0
 800ddfa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ddfe:	6878      	ldr	r0, [r7, #4]
 800de00:	f7f5 fcd2 	bl	80037a8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	2202      	movs	r2, #2
 800de08:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	681a      	ldr	r2, [r3, #0]
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	681b      	ldr	r3, [r3, #0]
 800de16:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800de1a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	68db      	ldr	r3, [r3, #12]
 800de20:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800de24:	d902      	bls.n	800de2c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800de26:	2300      	movs	r3, #0
 800de28:	60fb      	str	r3, [r7, #12]
 800de2a:	e002      	b.n	800de32 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800de2c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800de30:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	68db      	ldr	r3, [r3, #12]
 800de36:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800de3a:	d007      	beq.n	800de4c <HAL_SPI_Init+0xa0>
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	68db      	ldr	r3, [r3, #12]
 800de40:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800de44:	d002      	beq.n	800de4c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	2200      	movs	r2, #0
 800de4a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	685b      	ldr	r3, [r3, #4]
 800de50:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	689b      	ldr	r3, [r3, #8]
 800de58:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800de5c:	431a      	orrs	r2, r3
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	691b      	ldr	r3, [r3, #16]
 800de62:	f003 0302 	and.w	r3, r3, #2
 800de66:	431a      	orrs	r2, r3
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	695b      	ldr	r3, [r3, #20]
 800de6c:	f003 0301 	and.w	r3, r3, #1
 800de70:	431a      	orrs	r2, r3
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	699b      	ldr	r3, [r3, #24]
 800de76:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800de7a:	431a      	orrs	r2, r3
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	69db      	ldr	r3, [r3, #28]
 800de80:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800de84:	431a      	orrs	r2, r3
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	6a1b      	ldr	r3, [r3, #32]
 800de8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800de8e:	ea42 0103 	orr.w	r1, r2, r3
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800de96:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	681b      	ldr	r3, [r3, #0]
 800de9e:	430a      	orrs	r2, r1
 800dea0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	699b      	ldr	r3, [r3, #24]
 800dea6:	0c1b      	lsrs	r3, r3, #16
 800dea8:	f003 0204 	and.w	r2, r3, #4
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800deb0:	f003 0310 	and.w	r3, r3, #16
 800deb4:	431a      	orrs	r2, r3
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800deba:	f003 0308 	and.w	r3, r3, #8
 800debe:	431a      	orrs	r2, r3
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	68db      	ldr	r3, [r3, #12]
 800dec4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800dec8:	ea42 0103 	orr.w	r1, r2, r3
 800decc:	68fb      	ldr	r3, [r7, #12]
 800dece:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	681b      	ldr	r3, [r3, #0]
 800ded6:	430a      	orrs	r2, r1
 800ded8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	2200      	movs	r2, #0
 800dede:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	2201      	movs	r2, #1
 800dee4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800dee8:	2300      	movs	r3, #0
}
 800deea:	4618      	mov	r0, r3
 800deec:	3710      	adds	r7, #16
 800deee:	46bd      	mov	sp, r7
 800def0:	bd80      	pop	{r7, pc}

0800def2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800def2:	b580      	push	{r7, lr}
 800def4:	b088      	sub	sp, #32
 800def6:	af00      	add	r7, sp, #0
 800def8:	60f8      	str	r0, [r7, #12]
 800defa:	60b9      	str	r1, [r7, #8]
 800defc:	603b      	str	r3, [r7, #0]
 800defe:	4613      	mov	r3, r2
 800df00:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800df02:	f7f9 fac5 	bl	8007490 <HAL_GetTick>
 800df06:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800df08:	88fb      	ldrh	r3, [r7, #6]
 800df0a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800df0c:	68fb      	ldr	r3, [r7, #12]
 800df0e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800df12:	b2db      	uxtb	r3, r3
 800df14:	2b01      	cmp	r3, #1
 800df16:	d001      	beq.n	800df1c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800df18:	2302      	movs	r3, #2
 800df1a:	e15c      	b.n	800e1d6 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 800df1c:	68bb      	ldr	r3, [r7, #8]
 800df1e:	2b00      	cmp	r3, #0
 800df20:	d002      	beq.n	800df28 <HAL_SPI_Transmit+0x36>
 800df22:	88fb      	ldrh	r3, [r7, #6]
 800df24:	2b00      	cmp	r3, #0
 800df26:	d101      	bne.n	800df2c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800df28:	2301      	movs	r3, #1
 800df2a:	e154      	b.n	800e1d6 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800df2c:	68fb      	ldr	r3, [r7, #12]
 800df2e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800df32:	2b01      	cmp	r3, #1
 800df34:	d101      	bne.n	800df3a <HAL_SPI_Transmit+0x48>
 800df36:	2302      	movs	r3, #2
 800df38:	e14d      	b.n	800e1d6 <HAL_SPI_Transmit+0x2e4>
 800df3a:	68fb      	ldr	r3, [r7, #12]
 800df3c:	2201      	movs	r2, #1
 800df3e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800df42:	68fb      	ldr	r3, [r7, #12]
 800df44:	2203      	movs	r2, #3
 800df46:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800df4a:	68fb      	ldr	r3, [r7, #12]
 800df4c:	2200      	movs	r2, #0
 800df4e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800df50:	68fb      	ldr	r3, [r7, #12]
 800df52:	68ba      	ldr	r2, [r7, #8]
 800df54:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800df56:	68fb      	ldr	r3, [r7, #12]
 800df58:	88fa      	ldrh	r2, [r7, #6]
 800df5a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800df5c:	68fb      	ldr	r3, [r7, #12]
 800df5e:	88fa      	ldrh	r2, [r7, #6]
 800df60:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800df62:	68fb      	ldr	r3, [r7, #12]
 800df64:	2200      	movs	r2, #0
 800df66:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800df68:	68fb      	ldr	r3, [r7, #12]
 800df6a:	2200      	movs	r2, #0
 800df6c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800df70:	68fb      	ldr	r3, [r7, #12]
 800df72:	2200      	movs	r2, #0
 800df74:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 800df78:	68fb      	ldr	r3, [r7, #12]
 800df7a:	2200      	movs	r2, #0
 800df7c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800df7e:	68fb      	ldr	r3, [r7, #12]
 800df80:	2200      	movs	r2, #0
 800df82:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800df84:	68fb      	ldr	r3, [r7, #12]
 800df86:	689b      	ldr	r3, [r3, #8]
 800df88:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800df8c:	d10f      	bne.n	800dfae <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800df8e:	68fb      	ldr	r3, [r7, #12]
 800df90:	681b      	ldr	r3, [r3, #0]
 800df92:	681a      	ldr	r2, [r3, #0]
 800df94:	68fb      	ldr	r3, [r7, #12]
 800df96:	681b      	ldr	r3, [r3, #0]
 800df98:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800df9c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800df9e:	68fb      	ldr	r3, [r7, #12]
 800dfa0:	681b      	ldr	r3, [r3, #0]
 800dfa2:	681a      	ldr	r2, [r3, #0]
 800dfa4:	68fb      	ldr	r3, [r7, #12]
 800dfa6:	681b      	ldr	r3, [r3, #0]
 800dfa8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800dfac:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800dfae:	68fb      	ldr	r3, [r7, #12]
 800dfb0:	681b      	ldr	r3, [r3, #0]
 800dfb2:	681b      	ldr	r3, [r3, #0]
 800dfb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dfb8:	2b40      	cmp	r3, #64	@ 0x40
 800dfba:	d007      	beq.n	800dfcc <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800dfbc:	68fb      	ldr	r3, [r7, #12]
 800dfbe:	681b      	ldr	r3, [r3, #0]
 800dfc0:	681a      	ldr	r2, [r3, #0]
 800dfc2:	68fb      	ldr	r3, [r7, #12]
 800dfc4:	681b      	ldr	r3, [r3, #0]
 800dfc6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800dfca:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800dfcc:	68fb      	ldr	r3, [r7, #12]
 800dfce:	68db      	ldr	r3, [r3, #12]
 800dfd0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800dfd4:	d952      	bls.n	800e07c <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800dfd6:	68fb      	ldr	r3, [r7, #12]
 800dfd8:	685b      	ldr	r3, [r3, #4]
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d002      	beq.n	800dfe4 <HAL_SPI_Transmit+0xf2>
 800dfde:	8b7b      	ldrh	r3, [r7, #26]
 800dfe0:	2b01      	cmp	r3, #1
 800dfe2:	d145      	bne.n	800e070 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800dfe4:	68fb      	ldr	r3, [r7, #12]
 800dfe6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dfe8:	881a      	ldrh	r2, [r3, #0]
 800dfea:	68fb      	ldr	r3, [r7, #12]
 800dfec:	681b      	ldr	r3, [r3, #0]
 800dfee:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800dff0:	68fb      	ldr	r3, [r7, #12]
 800dff2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dff4:	1c9a      	adds	r2, r3, #2
 800dff6:	68fb      	ldr	r3, [r7, #12]
 800dff8:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800dffa:	68fb      	ldr	r3, [r7, #12]
 800dffc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800dffe:	b29b      	uxth	r3, r3
 800e000:	3b01      	subs	r3, #1
 800e002:	b29a      	uxth	r2, r3
 800e004:	68fb      	ldr	r3, [r7, #12]
 800e006:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800e008:	e032      	b.n	800e070 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800e00a:	68fb      	ldr	r3, [r7, #12]
 800e00c:	681b      	ldr	r3, [r3, #0]
 800e00e:	689b      	ldr	r3, [r3, #8]
 800e010:	f003 0302 	and.w	r3, r3, #2
 800e014:	2b02      	cmp	r3, #2
 800e016:	d112      	bne.n	800e03e <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800e018:	68fb      	ldr	r3, [r7, #12]
 800e01a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e01c:	881a      	ldrh	r2, [r3, #0]
 800e01e:	68fb      	ldr	r3, [r7, #12]
 800e020:	681b      	ldr	r3, [r3, #0]
 800e022:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800e024:	68fb      	ldr	r3, [r7, #12]
 800e026:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e028:	1c9a      	adds	r2, r3, #2
 800e02a:	68fb      	ldr	r3, [r7, #12]
 800e02c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800e02e:	68fb      	ldr	r3, [r7, #12]
 800e030:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e032:	b29b      	uxth	r3, r3
 800e034:	3b01      	subs	r3, #1
 800e036:	b29a      	uxth	r2, r3
 800e038:	68fb      	ldr	r3, [r7, #12]
 800e03a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800e03c:	e018      	b.n	800e070 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e03e:	f7f9 fa27 	bl	8007490 <HAL_GetTick>
 800e042:	4602      	mov	r2, r0
 800e044:	69fb      	ldr	r3, [r7, #28]
 800e046:	1ad3      	subs	r3, r2, r3
 800e048:	683a      	ldr	r2, [r7, #0]
 800e04a:	429a      	cmp	r2, r3
 800e04c:	d803      	bhi.n	800e056 <HAL_SPI_Transmit+0x164>
 800e04e:	683b      	ldr	r3, [r7, #0]
 800e050:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e054:	d102      	bne.n	800e05c <HAL_SPI_Transmit+0x16a>
 800e056:	683b      	ldr	r3, [r7, #0]
 800e058:	2b00      	cmp	r3, #0
 800e05a:	d109      	bne.n	800e070 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800e05c:	68fb      	ldr	r3, [r7, #12]
 800e05e:	2201      	movs	r2, #1
 800e060:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800e064:	68fb      	ldr	r3, [r7, #12]
 800e066:	2200      	movs	r2, #0
 800e068:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800e06c:	2303      	movs	r3, #3
 800e06e:	e0b2      	b.n	800e1d6 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800e070:	68fb      	ldr	r3, [r7, #12]
 800e072:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e074:	b29b      	uxth	r3, r3
 800e076:	2b00      	cmp	r3, #0
 800e078:	d1c7      	bne.n	800e00a <HAL_SPI_Transmit+0x118>
 800e07a:	e083      	b.n	800e184 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e07c:	68fb      	ldr	r3, [r7, #12]
 800e07e:	685b      	ldr	r3, [r3, #4]
 800e080:	2b00      	cmp	r3, #0
 800e082:	d002      	beq.n	800e08a <HAL_SPI_Transmit+0x198>
 800e084:	8b7b      	ldrh	r3, [r7, #26]
 800e086:	2b01      	cmp	r3, #1
 800e088:	d177      	bne.n	800e17a <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 800e08a:	68fb      	ldr	r3, [r7, #12]
 800e08c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e08e:	b29b      	uxth	r3, r3
 800e090:	2b01      	cmp	r3, #1
 800e092:	d912      	bls.n	800e0ba <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800e094:	68fb      	ldr	r3, [r7, #12]
 800e096:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e098:	881a      	ldrh	r2, [r3, #0]
 800e09a:	68fb      	ldr	r3, [r7, #12]
 800e09c:	681b      	ldr	r3, [r3, #0]
 800e09e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800e0a0:	68fb      	ldr	r3, [r7, #12]
 800e0a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e0a4:	1c9a      	adds	r2, r3, #2
 800e0a6:	68fb      	ldr	r3, [r7, #12]
 800e0a8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800e0aa:	68fb      	ldr	r3, [r7, #12]
 800e0ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e0ae:	b29b      	uxth	r3, r3
 800e0b0:	3b02      	subs	r3, #2
 800e0b2:	b29a      	uxth	r2, r3
 800e0b4:	68fb      	ldr	r3, [r7, #12]
 800e0b6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800e0b8:	e05f      	b.n	800e17a <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800e0ba:	68fb      	ldr	r3, [r7, #12]
 800e0bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e0be:	68fb      	ldr	r3, [r7, #12]
 800e0c0:	681b      	ldr	r3, [r3, #0]
 800e0c2:	330c      	adds	r3, #12
 800e0c4:	7812      	ldrb	r2, [r2, #0]
 800e0c6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800e0c8:	68fb      	ldr	r3, [r7, #12]
 800e0ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e0cc:	1c5a      	adds	r2, r3, #1
 800e0ce:	68fb      	ldr	r3, [r7, #12]
 800e0d0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800e0d2:	68fb      	ldr	r3, [r7, #12]
 800e0d4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e0d6:	b29b      	uxth	r3, r3
 800e0d8:	3b01      	subs	r3, #1
 800e0da:	b29a      	uxth	r2, r3
 800e0dc:	68fb      	ldr	r3, [r7, #12]
 800e0de:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800e0e0:	e04b      	b.n	800e17a <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800e0e2:	68fb      	ldr	r3, [r7, #12]
 800e0e4:	681b      	ldr	r3, [r3, #0]
 800e0e6:	689b      	ldr	r3, [r3, #8]
 800e0e8:	f003 0302 	and.w	r3, r3, #2
 800e0ec:	2b02      	cmp	r3, #2
 800e0ee:	d12b      	bne.n	800e148 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 800e0f0:	68fb      	ldr	r3, [r7, #12]
 800e0f2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e0f4:	b29b      	uxth	r3, r3
 800e0f6:	2b01      	cmp	r3, #1
 800e0f8:	d912      	bls.n	800e120 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800e0fa:	68fb      	ldr	r3, [r7, #12]
 800e0fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e0fe:	881a      	ldrh	r2, [r3, #0]
 800e100:	68fb      	ldr	r3, [r7, #12]
 800e102:	681b      	ldr	r3, [r3, #0]
 800e104:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800e106:	68fb      	ldr	r3, [r7, #12]
 800e108:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e10a:	1c9a      	adds	r2, r3, #2
 800e10c:	68fb      	ldr	r3, [r7, #12]
 800e10e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800e110:	68fb      	ldr	r3, [r7, #12]
 800e112:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e114:	b29b      	uxth	r3, r3
 800e116:	3b02      	subs	r3, #2
 800e118:	b29a      	uxth	r2, r3
 800e11a:	68fb      	ldr	r3, [r7, #12]
 800e11c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800e11e:	e02c      	b.n	800e17a <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800e120:	68fb      	ldr	r3, [r7, #12]
 800e122:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e124:	68fb      	ldr	r3, [r7, #12]
 800e126:	681b      	ldr	r3, [r3, #0]
 800e128:	330c      	adds	r3, #12
 800e12a:	7812      	ldrb	r2, [r2, #0]
 800e12c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800e12e:	68fb      	ldr	r3, [r7, #12]
 800e130:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e132:	1c5a      	adds	r2, r3, #1
 800e134:	68fb      	ldr	r3, [r7, #12]
 800e136:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800e138:	68fb      	ldr	r3, [r7, #12]
 800e13a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e13c:	b29b      	uxth	r3, r3
 800e13e:	3b01      	subs	r3, #1
 800e140:	b29a      	uxth	r2, r3
 800e142:	68fb      	ldr	r3, [r7, #12]
 800e144:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800e146:	e018      	b.n	800e17a <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e148:	f7f9 f9a2 	bl	8007490 <HAL_GetTick>
 800e14c:	4602      	mov	r2, r0
 800e14e:	69fb      	ldr	r3, [r7, #28]
 800e150:	1ad3      	subs	r3, r2, r3
 800e152:	683a      	ldr	r2, [r7, #0]
 800e154:	429a      	cmp	r2, r3
 800e156:	d803      	bhi.n	800e160 <HAL_SPI_Transmit+0x26e>
 800e158:	683b      	ldr	r3, [r7, #0]
 800e15a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e15e:	d102      	bne.n	800e166 <HAL_SPI_Transmit+0x274>
 800e160:	683b      	ldr	r3, [r7, #0]
 800e162:	2b00      	cmp	r3, #0
 800e164:	d109      	bne.n	800e17a <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800e166:	68fb      	ldr	r3, [r7, #12]
 800e168:	2201      	movs	r2, #1
 800e16a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800e16e:	68fb      	ldr	r3, [r7, #12]
 800e170:	2200      	movs	r2, #0
 800e172:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800e176:	2303      	movs	r3, #3
 800e178:	e02d      	b.n	800e1d6 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800e17a:	68fb      	ldr	r3, [r7, #12]
 800e17c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e17e:	b29b      	uxth	r3, r3
 800e180:	2b00      	cmp	r3, #0
 800e182:	d1ae      	bne.n	800e0e2 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800e184:	69fa      	ldr	r2, [r7, #28]
 800e186:	6839      	ldr	r1, [r7, #0]
 800e188:	68f8      	ldr	r0, [r7, #12]
 800e18a:	f000 fe09 	bl	800eda0 <SPI_EndRxTxTransaction>
 800e18e:	4603      	mov	r3, r0
 800e190:	2b00      	cmp	r3, #0
 800e192:	d002      	beq.n	800e19a <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e194:	68fb      	ldr	r3, [r7, #12]
 800e196:	2220      	movs	r2, #32
 800e198:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800e19a:	68fb      	ldr	r3, [r7, #12]
 800e19c:	689b      	ldr	r3, [r3, #8]
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	d10a      	bne.n	800e1b8 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e1a2:	2300      	movs	r3, #0
 800e1a4:	617b      	str	r3, [r7, #20]
 800e1a6:	68fb      	ldr	r3, [r7, #12]
 800e1a8:	681b      	ldr	r3, [r3, #0]
 800e1aa:	68db      	ldr	r3, [r3, #12]
 800e1ac:	617b      	str	r3, [r7, #20]
 800e1ae:	68fb      	ldr	r3, [r7, #12]
 800e1b0:	681b      	ldr	r3, [r3, #0]
 800e1b2:	689b      	ldr	r3, [r3, #8]
 800e1b4:	617b      	str	r3, [r7, #20]
 800e1b6:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800e1b8:	68fb      	ldr	r3, [r7, #12]
 800e1ba:	2201      	movs	r2, #1
 800e1bc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800e1c0:	68fb      	ldr	r3, [r7, #12]
 800e1c2:	2200      	movs	r2, #0
 800e1c4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e1c8:	68fb      	ldr	r3, [r7, #12]
 800e1ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	d001      	beq.n	800e1d4 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 800e1d0:	2301      	movs	r3, #1
 800e1d2:	e000      	b.n	800e1d6 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 800e1d4:	2300      	movs	r3, #0
  }
}
 800e1d6:	4618      	mov	r0, r3
 800e1d8:	3720      	adds	r7, #32
 800e1da:	46bd      	mov	sp, r7
 800e1dc:	bd80      	pop	{r7, pc}

0800e1de <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e1de:	b580      	push	{r7, lr}
 800e1e0:	b088      	sub	sp, #32
 800e1e2:	af02      	add	r7, sp, #8
 800e1e4:	60f8      	str	r0, [r7, #12]
 800e1e6:	60b9      	str	r1, [r7, #8]
 800e1e8:	603b      	str	r3, [r7, #0]
 800e1ea:	4613      	mov	r3, r2
 800e1ec:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 800e1ee:	68fb      	ldr	r3, [r7, #12]
 800e1f0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800e1f4:	b2db      	uxtb	r3, r3
 800e1f6:	2b01      	cmp	r3, #1
 800e1f8:	d001      	beq.n	800e1fe <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 800e1fa:	2302      	movs	r3, #2
 800e1fc:	e123      	b.n	800e446 <HAL_SPI_Receive+0x268>
  }

  if ((pData == NULL) || (Size == 0U))
 800e1fe:	68bb      	ldr	r3, [r7, #8]
 800e200:	2b00      	cmp	r3, #0
 800e202:	d002      	beq.n	800e20a <HAL_SPI_Receive+0x2c>
 800e204:	88fb      	ldrh	r3, [r7, #6]
 800e206:	2b00      	cmp	r3, #0
 800e208:	d101      	bne.n	800e20e <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 800e20a:	2301      	movs	r3, #1
 800e20c:	e11b      	b.n	800e446 <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800e20e:	68fb      	ldr	r3, [r7, #12]
 800e210:	685b      	ldr	r3, [r3, #4]
 800e212:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800e216:	d112      	bne.n	800e23e <HAL_SPI_Receive+0x60>
 800e218:	68fb      	ldr	r3, [r7, #12]
 800e21a:	689b      	ldr	r3, [r3, #8]
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	d10e      	bne.n	800e23e <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800e220:	68fb      	ldr	r3, [r7, #12]
 800e222:	2204      	movs	r2, #4
 800e224:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800e228:	88fa      	ldrh	r2, [r7, #6]
 800e22a:	683b      	ldr	r3, [r7, #0]
 800e22c:	9300      	str	r3, [sp, #0]
 800e22e:	4613      	mov	r3, r2
 800e230:	68ba      	ldr	r2, [r7, #8]
 800e232:	68b9      	ldr	r1, [r7, #8]
 800e234:	68f8      	ldr	r0, [r7, #12]
 800e236:	f000 f90a 	bl	800e44e <HAL_SPI_TransmitReceive>
 800e23a:	4603      	mov	r3, r0
 800e23c:	e103      	b.n	800e446 <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e23e:	f7f9 f927 	bl	8007490 <HAL_GetTick>
 800e242:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e244:	68fb      	ldr	r3, [r7, #12]
 800e246:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800e24a:	2b01      	cmp	r3, #1
 800e24c:	d101      	bne.n	800e252 <HAL_SPI_Receive+0x74>
 800e24e:	2302      	movs	r3, #2
 800e250:	e0f9      	b.n	800e446 <HAL_SPI_Receive+0x268>
 800e252:	68fb      	ldr	r3, [r7, #12]
 800e254:	2201      	movs	r2, #1
 800e256:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800e25a:	68fb      	ldr	r3, [r7, #12]
 800e25c:	2204      	movs	r2, #4
 800e25e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e262:	68fb      	ldr	r3, [r7, #12]
 800e264:	2200      	movs	r2, #0
 800e266:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800e268:	68fb      	ldr	r3, [r7, #12]
 800e26a:	68ba      	ldr	r2, [r7, #8]
 800e26c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 800e26e:	68fb      	ldr	r3, [r7, #12]
 800e270:	88fa      	ldrh	r2, [r7, #6]
 800e272:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 800e276:	68fb      	ldr	r3, [r7, #12]
 800e278:	88fa      	ldrh	r2, [r7, #6]
 800e27a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800e27e:	68fb      	ldr	r3, [r7, #12]
 800e280:	2200      	movs	r2, #0
 800e282:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 800e284:	68fb      	ldr	r3, [r7, #12]
 800e286:	2200      	movs	r2, #0
 800e288:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 800e28a:	68fb      	ldr	r3, [r7, #12]
 800e28c:	2200      	movs	r2, #0
 800e28e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 800e290:	68fb      	ldr	r3, [r7, #12]
 800e292:	2200      	movs	r2, #0
 800e294:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800e296:	68fb      	ldr	r3, [r7, #12]
 800e298:	2200      	movs	r2, #0
 800e29a:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e29c:	68fb      	ldr	r3, [r7, #12]
 800e29e:	68db      	ldr	r3, [r3, #12]
 800e2a0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800e2a4:	d908      	bls.n	800e2b8 <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800e2a6:	68fb      	ldr	r3, [r7, #12]
 800e2a8:	681b      	ldr	r3, [r3, #0]
 800e2aa:	685a      	ldr	r2, [r3, #4]
 800e2ac:	68fb      	ldr	r3, [r7, #12]
 800e2ae:	681b      	ldr	r3, [r3, #0]
 800e2b0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800e2b4:	605a      	str	r2, [r3, #4]
 800e2b6:	e007      	b.n	800e2c8 <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800e2b8:	68fb      	ldr	r3, [r7, #12]
 800e2ba:	681b      	ldr	r3, [r3, #0]
 800e2bc:	685a      	ldr	r2, [r3, #4]
 800e2be:	68fb      	ldr	r3, [r7, #12]
 800e2c0:	681b      	ldr	r3, [r3, #0]
 800e2c2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800e2c6:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e2c8:	68fb      	ldr	r3, [r7, #12]
 800e2ca:	689b      	ldr	r3, [r3, #8]
 800e2cc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e2d0:	d10f      	bne.n	800e2f2 <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800e2d2:	68fb      	ldr	r3, [r7, #12]
 800e2d4:	681b      	ldr	r3, [r3, #0]
 800e2d6:	681a      	ldr	r2, [r3, #0]
 800e2d8:	68fb      	ldr	r3, [r7, #12]
 800e2da:	681b      	ldr	r3, [r3, #0]
 800e2dc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800e2e0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800e2e2:	68fb      	ldr	r3, [r7, #12]
 800e2e4:	681b      	ldr	r3, [r3, #0]
 800e2e6:	681a      	ldr	r2, [r3, #0]
 800e2e8:	68fb      	ldr	r3, [r7, #12]
 800e2ea:	681b      	ldr	r3, [r3, #0]
 800e2ec:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800e2f0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e2f2:	68fb      	ldr	r3, [r7, #12]
 800e2f4:	681b      	ldr	r3, [r3, #0]
 800e2f6:	681b      	ldr	r3, [r3, #0]
 800e2f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e2fc:	2b40      	cmp	r3, #64	@ 0x40
 800e2fe:	d007      	beq.n	800e310 <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e300:	68fb      	ldr	r3, [r7, #12]
 800e302:	681b      	ldr	r3, [r3, #0]
 800e304:	681a      	ldr	r2, [r3, #0]
 800e306:	68fb      	ldr	r3, [r7, #12]
 800e308:	681b      	ldr	r3, [r3, #0]
 800e30a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e30e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800e310:	68fb      	ldr	r3, [r7, #12]
 800e312:	68db      	ldr	r3, [r3, #12]
 800e314:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800e318:	d875      	bhi.n	800e406 <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800e31a:	e037      	b.n	800e38c <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800e31c:	68fb      	ldr	r3, [r7, #12]
 800e31e:	681b      	ldr	r3, [r3, #0]
 800e320:	689b      	ldr	r3, [r3, #8]
 800e322:	f003 0301 	and.w	r3, r3, #1
 800e326:	2b01      	cmp	r3, #1
 800e328:	d117      	bne.n	800e35a <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800e32a:	68fb      	ldr	r3, [r7, #12]
 800e32c:	681b      	ldr	r3, [r3, #0]
 800e32e:	f103 020c 	add.w	r2, r3, #12
 800e332:	68fb      	ldr	r3, [r7, #12]
 800e334:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e336:	7812      	ldrb	r2, [r2, #0]
 800e338:	b2d2      	uxtb	r2, r2
 800e33a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e33c:	68fb      	ldr	r3, [r7, #12]
 800e33e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e340:	1c5a      	adds	r2, r3, #1
 800e342:	68fb      	ldr	r3, [r7, #12]
 800e344:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800e346:	68fb      	ldr	r3, [r7, #12]
 800e348:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800e34c:	b29b      	uxth	r3, r3
 800e34e:	3b01      	subs	r3, #1
 800e350:	b29a      	uxth	r2, r3
 800e352:	68fb      	ldr	r3, [r7, #12]
 800e354:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800e358:	e018      	b.n	800e38c <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e35a:	f7f9 f899 	bl	8007490 <HAL_GetTick>
 800e35e:	4602      	mov	r2, r0
 800e360:	697b      	ldr	r3, [r7, #20]
 800e362:	1ad3      	subs	r3, r2, r3
 800e364:	683a      	ldr	r2, [r7, #0]
 800e366:	429a      	cmp	r2, r3
 800e368:	d803      	bhi.n	800e372 <HAL_SPI_Receive+0x194>
 800e36a:	683b      	ldr	r3, [r7, #0]
 800e36c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e370:	d102      	bne.n	800e378 <HAL_SPI_Receive+0x19a>
 800e372:	683b      	ldr	r3, [r7, #0]
 800e374:	2b00      	cmp	r3, #0
 800e376:	d109      	bne.n	800e38c <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800e378:	68fb      	ldr	r3, [r7, #12]
 800e37a:	2201      	movs	r2, #1
 800e37c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800e380:	68fb      	ldr	r3, [r7, #12]
 800e382:	2200      	movs	r2, #0
 800e384:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800e388:	2303      	movs	r3, #3
 800e38a:	e05c      	b.n	800e446 <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 800e38c:	68fb      	ldr	r3, [r7, #12]
 800e38e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800e392:	b29b      	uxth	r3, r3
 800e394:	2b00      	cmp	r3, #0
 800e396:	d1c1      	bne.n	800e31c <HAL_SPI_Receive+0x13e>
 800e398:	e03b      	b.n	800e412 <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800e39a:	68fb      	ldr	r3, [r7, #12]
 800e39c:	681b      	ldr	r3, [r3, #0]
 800e39e:	689b      	ldr	r3, [r3, #8]
 800e3a0:	f003 0301 	and.w	r3, r3, #1
 800e3a4:	2b01      	cmp	r3, #1
 800e3a6:	d115      	bne.n	800e3d4 <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800e3a8:	68fb      	ldr	r3, [r7, #12]
 800e3aa:	681b      	ldr	r3, [r3, #0]
 800e3ac:	68da      	ldr	r2, [r3, #12]
 800e3ae:	68fb      	ldr	r3, [r7, #12]
 800e3b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e3b2:	b292      	uxth	r2, r2
 800e3b4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e3b6:	68fb      	ldr	r3, [r7, #12]
 800e3b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e3ba:	1c9a      	adds	r2, r3, #2
 800e3bc:	68fb      	ldr	r3, [r7, #12]
 800e3be:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800e3c0:	68fb      	ldr	r3, [r7, #12]
 800e3c2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800e3c6:	b29b      	uxth	r3, r3
 800e3c8:	3b01      	subs	r3, #1
 800e3ca:	b29a      	uxth	r2, r3
 800e3cc:	68fb      	ldr	r3, [r7, #12]
 800e3ce:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800e3d2:	e018      	b.n	800e406 <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e3d4:	f7f9 f85c 	bl	8007490 <HAL_GetTick>
 800e3d8:	4602      	mov	r2, r0
 800e3da:	697b      	ldr	r3, [r7, #20]
 800e3dc:	1ad3      	subs	r3, r2, r3
 800e3de:	683a      	ldr	r2, [r7, #0]
 800e3e0:	429a      	cmp	r2, r3
 800e3e2:	d803      	bhi.n	800e3ec <HAL_SPI_Receive+0x20e>
 800e3e4:	683b      	ldr	r3, [r7, #0]
 800e3e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e3ea:	d102      	bne.n	800e3f2 <HAL_SPI_Receive+0x214>
 800e3ec:	683b      	ldr	r3, [r7, #0]
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	d109      	bne.n	800e406 <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800e3f2:	68fb      	ldr	r3, [r7, #12]
 800e3f4:	2201      	movs	r2, #1
 800e3f6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800e3fa:	68fb      	ldr	r3, [r7, #12]
 800e3fc:	2200      	movs	r2, #0
 800e3fe:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800e402:	2303      	movs	r3, #3
 800e404:	e01f      	b.n	800e446 <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 800e406:	68fb      	ldr	r3, [r7, #12]
 800e408:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800e40c:	b29b      	uxth	r3, r3
 800e40e:	2b00      	cmp	r3, #0
 800e410:	d1c3      	bne.n	800e39a <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800e412:	697a      	ldr	r2, [r7, #20]
 800e414:	6839      	ldr	r1, [r7, #0]
 800e416:	68f8      	ldr	r0, [r7, #12]
 800e418:	f000 fc6a 	bl	800ecf0 <SPI_EndRxTransaction>
 800e41c:	4603      	mov	r3, r0
 800e41e:	2b00      	cmp	r3, #0
 800e420:	d002      	beq.n	800e428 <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e422:	68fb      	ldr	r3, [r7, #12]
 800e424:	2220      	movs	r2, #32
 800e426:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 800e428:	68fb      	ldr	r3, [r7, #12]
 800e42a:	2201      	movs	r2, #1
 800e42c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800e430:	68fb      	ldr	r3, [r7, #12]
 800e432:	2200      	movs	r2, #0
 800e434:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e438:	68fb      	ldr	r3, [r7, #12]
 800e43a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e43c:	2b00      	cmp	r3, #0
 800e43e:	d001      	beq.n	800e444 <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 800e440:	2301      	movs	r3, #1
 800e442:	e000      	b.n	800e446 <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 800e444:	2300      	movs	r3, #0
  }
}
 800e446:	4618      	mov	r0, r3
 800e448:	3718      	adds	r7, #24
 800e44a:	46bd      	mov	sp, r7
 800e44c:	bd80      	pop	{r7, pc}

0800e44e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800e44e:	b580      	push	{r7, lr}
 800e450:	b08a      	sub	sp, #40	@ 0x28
 800e452:	af00      	add	r7, sp, #0
 800e454:	60f8      	str	r0, [r7, #12]
 800e456:	60b9      	str	r1, [r7, #8]
 800e458:	607a      	str	r2, [r7, #4]
 800e45a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800e45c:	2301      	movs	r3, #1
 800e45e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e460:	f7f9 f816 	bl	8007490 <HAL_GetTick>
 800e464:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800e466:	68fb      	ldr	r3, [r7, #12]
 800e468:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800e46c:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800e46e:	68fb      	ldr	r3, [r7, #12]
 800e470:	685b      	ldr	r3, [r3, #4]
 800e472:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800e474:	887b      	ldrh	r3, [r7, #2]
 800e476:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 800e478:	887b      	ldrh	r3, [r7, #2]
 800e47a:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800e47c:	7ffb      	ldrb	r3, [r7, #31]
 800e47e:	2b01      	cmp	r3, #1
 800e480:	d00c      	beq.n	800e49c <HAL_SPI_TransmitReceive+0x4e>
 800e482:	69bb      	ldr	r3, [r7, #24]
 800e484:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800e488:	d106      	bne.n	800e498 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800e48a:	68fb      	ldr	r3, [r7, #12]
 800e48c:	689b      	ldr	r3, [r3, #8]
 800e48e:	2b00      	cmp	r3, #0
 800e490:	d102      	bne.n	800e498 <HAL_SPI_TransmitReceive+0x4a>
 800e492:	7ffb      	ldrb	r3, [r7, #31]
 800e494:	2b04      	cmp	r3, #4
 800e496:	d001      	beq.n	800e49c <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800e498:	2302      	movs	r3, #2
 800e49a:	e1f3      	b.n	800e884 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800e49c:	68bb      	ldr	r3, [r7, #8]
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	d005      	beq.n	800e4ae <HAL_SPI_TransmitReceive+0x60>
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	d002      	beq.n	800e4ae <HAL_SPI_TransmitReceive+0x60>
 800e4a8:	887b      	ldrh	r3, [r7, #2]
 800e4aa:	2b00      	cmp	r3, #0
 800e4ac:	d101      	bne.n	800e4b2 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 800e4ae:	2301      	movs	r3, #1
 800e4b0:	e1e8      	b.n	800e884 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e4b2:	68fb      	ldr	r3, [r7, #12]
 800e4b4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800e4b8:	2b01      	cmp	r3, #1
 800e4ba:	d101      	bne.n	800e4c0 <HAL_SPI_TransmitReceive+0x72>
 800e4bc:	2302      	movs	r3, #2
 800e4be:	e1e1      	b.n	800e884 <HAL_SPI_TransmitReceive+0x436>
 800e4c0:	68fb      	ldr	r3, [r7, #12]
 800e4c2:	2201      	movs	r2, #1
 800e4c4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800e4c8:	68fb      	ldr	r3, [r7, #12]
 800e4ca:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800e4ce:	b2db      	uxtb	r3, r3
 800e4d0:	2b04      	cmp	r3, #4
 800e4d2:	d003      	beq.n	800e4dc <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800e4d4:	68fb      	ldr	r3, [r7, #12]
 800e4d6:	2205      	movs	r2, #5
 800e4d8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e4dc:	68fb      	ldr	r3, [r7, #12]
 800e4de:	2200      	movs	r2, #0
 800e4e0:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800e4e2:	68fb      	ldr	r3, [r7, #12]
 800e4e4:	687a      	ldr	r2, [r7, #4]
 800e4e6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800e4e8:	68fb      	ldr	r3, [r7, #12]
 800e4ea:	887a      	ldrh	r2, [r7, #2]
 800e4ec:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 800e4f0:	68fb      	ldr	r3, [r7, #12]
 800e4f2:	887a      	ldrh	r2, [r7, #2]
 800e4f4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800e4f8:	68fb      	ldr	r3, [r7, #12]
 800e4fa:	68ba      	ldr	r2, [r7, #8]
 800e4fc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800e4fe:	68fb      	ldr	r3, [r7, #12]
 800e500:	887a      	ldrh	r2, [r7, #2]
 800e502:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 800e504:	68fb      	ldr	r3, [r7, #12]
 800e506:	887a      	ldrh	r2, [r7, #2]
 800e508:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800e50a:	68fb      	ldr	r3, [r7, #12]
 800e50c:	2200      	movs	r2, #0
 800e50e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800e510:	68fb      	ldr	r3, [r7, #12]
 800e512:	2200      	movs	r2, #0
 800e514:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800e516:	68fb      	ldr	r3, [r7, #12]
 800e518:	68db      	ldr	r3, [r3, #12]
 800e51a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800e51e:	d802      	bhi.n	800e526 <HAL_SPI_TransmitReceive+0xd8>
 800e520:	8abb      	ldrh	r3, [r7, #20]
 800e522:	2b01      	cmp	r3, #1
 800e524:	d908      	bls.n	800e538 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800e526:	68fb      	ldr	r3, [r7, #12]
 800e528:	681b      	ldr	r3, [r3, #0]
 800e52a:	685a      	ldr	r2, [r3, #4]
 800e52c:	68fb      	ldr	r3, [r7, #12]
 800e52e:	681b      	ldr	r3, [r3, #0]
 800e530:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800e534:	605a      	str	r2, [r3, #4]
 800e536:	e007      	b.n	800e548 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800e538:	68fb      	ldr	r3, [r7, #12]
 800e53a:	681b      	ldr	r3, [r3, #0]
 800e53c:	685a      	ldr	r2, [r3, #4]
 800e53e:	68fb      	ldr	r3, [r7, #12]
 800e540:	681b      	ldr	r3, [r3, #0]
 800e542:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800e546:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e548:	68fb      	ldr	r3, [r7, #12]
 800e54a:	681b      	ldr	r3, [r3, #0]
 800e54c:	681b      	ldr	r3, [r3, #0]
 800e54e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e552:	2b40      	cmp	r3, #64	@ 0x40
 800e554:	d007      	beq.n	800e566 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e556:	68fb      	ldr	r3, [r7, #12]
 800e558:	681b      	ldr	r3, [r3, #0]
 800e55a:	681a      	ldr	r2, [r3, #0]
 800e55c:	68fb      	ldr	r3, [r7, #12]
 800e55e:	681b      	ldr	r3, [r3, #0]
 800e560:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e564:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e566:	68fb      	ldr	r3, [r7, #12]
 800e568:	68db      	ldr	r3, [r3, #12]
 800e56a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800e56e:	f240 8083 	bls.w	800e678 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e572:	68fb      	ldr	r3, [r7, #12]
 800e574:	685b      	ldr	r3, [r3, #4]
 800e576:	2b00      	cmp	r3, #0
 800e578:	d002      	beq.n	800e580 <HAL_SPI_TransmitReceive+0x132>
 800e57a:	8afb      	ldrh	r3, [r7, #22]
 800e57c:	2b01      	cmp	r3, #1
 800e57e:	d16f      	bne.n	800e660 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800e580:	68fb      	ldr	r3, [r7, #12]
 800e582:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e584:	881a      	ldrh	r2, [r3, #0]
 800e586:	68fb      	ldr	r3, [r7, #12]
 800e588:	681b      	ldr	r3, [r3, #0]
 800e58a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800e58c:	68fb      	ldr	r3, [r7, #12]
 800e58e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e590:	1c9a      	adds	r2, r3, #2
 800e592:	68fb      	ldr	r3, [r7, #12]
 800e594:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800e596:	68fb      	ldr	r3, [r7, #12]
 800e598:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e59a:	b29b      	uxth	r3, r3
 800e59c:	3b01      	subs	r3, #1
 800e59e:	b29a      	uxth	r2, r3
 800e5a0:	68fb      	ldr	r3, [r7, #12]
 800e5a2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e5a4:	e05c      	b.n	800e660 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800e5a6:	68fb      	ldr	r3, [r7, #12]
 800e5a8:	681b      	ldr	r3, [r3, #0]
 800e5aa:	689b      	ldr	r3, [r3, #8]
 800e5ac:	f003 0302 	and.w	r3, r3, #2
 800e5b0:	2b02      	cmp	r3, #2
 800e5b2:	d11b      	bne.n	800e5ec <HAL_SPI_TransmitReceive+0x19e>
 800e5b4:	68fb      	ldr	r3, [r7, #12]
 800e5b6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e5b8:	b29b      	uxth	r3, r3
 800e5ba:	2b00      	cmp	r3, #0
 800e5bc:	d016      	beq.n	800e5ec <HAL_SPI_TransmitReceive+0x19e>
 800e5be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e5c0:	2b01      	cmp	r3, #1
 800e5c2:	d113      	bne.n	800e5ec <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800e5c4:	68fb      	ldr	r3, [r7, #12]
 800e5c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e5c8:	881a      	ldrh	r2, [r3, #0]
 800e5ca:	68fb      	ldr	r3, [r7, #12]
 800e5cc:	681b      	ldr	r3, [r3, #0]
 800e5ce:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800e5d0:	68fb      	ldr	r3, [r7, #12]
 800e5d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e5d4:	1c9a      	adds	r2, r3, #2
 800e5d6:	68fb      	ldr	r3, [r7, #12]
 800e5d8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800e5da:	68fb      	ldr	r3, [r7, #12]
 800e5dc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e5de:	b29b      	uxth	r3, r3
 800e5e0:	3b01      	subs	r3, #1
 800e5e2:	b29a      	uxth	r2, r3
 800e5e4:	68fb      	ldr	r3, [r7, #12]
 800e5e6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800e5e8:	2300      	movs	r3, #0
 800e5ea:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800e5ec:	68fb      	ldr	r3, [r7, #12]
 800e5ee:	681b      	ldr	r3, [r3, #0]
 800e5f0:	689b      	ldr	r3, [r3, #8]
 800e5f2:	f003 0301 	and.w	r3, r3, #1
 800e5f6:	2b01      	cmp	r3, #1
 800e5f8:	d11c      	bne.n	800e634 <HAL_SPI_TransmitReceive+0x1e6>
 800e5fa:	68fb      	ldr	r3, [r7, #12]
 800e5fc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800e600:	b29b      	uxth	r3, r3
 800e602:	2b00      	cmp	r3, #0
 800e604:	d016      	beq.n	800e634 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800e606:	68fb      	ldr	r3, [r7, #12]
 800e608:	681b      	ldr	r3, [r3, #0]
 800e60a:	68da      	ldr	r2, [r3, #12]
 800e60c:	68fb      	ldr	r3, [r7, #12]
 800e60e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e610:	b292      	uxth	r2, r2
 800e612:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e614:	68fb      	ldr	r3, [r7, #12]
 800e616:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e618:	1c9a      	adds	r2, r3, #2
 800e61a:	68fb      	ldr	r3, [r7, #12]
 800e61c:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800e61e:	68fb      	ldr	r3, [r7, #12]
 800e620:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800e624:	b29b      	uxth	r3, r3
 800e626:	3b01      	subs	r3, #1
 800e628:	b29a      	uxth	r2, r3
 800e62a:	68fb      	ldr	r3, [r7, #12]
 800e62c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800e630:	2301      	movs	r3, #1
 800e632:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800e634:	f7f8 ff2c 	bl	8007490 <HAL_GetTick>
 800e638:	4602      	mov	r2, r0
 800e63a:	6a3b      	ldr	r3, [r7, #32]
 800e63c:	1ad3      	subs	r3, r2, r3
 800e63e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e640:	429a      	cmp	r2, r3
 800e642:	d80d      	bhi.n	800e660 <HAL_SPI_TransmitReceive+0x212>
 800e644:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e646:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e64a:	d009      	beq.n	800e660 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800e64c:	68fb      	ldr	r3, [r7, #12]
 800e64e:	2201      	movs	r2, #1
 800e650:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800e654:	68fb      	ldr	r3, [r7, #12]
 800e656:	2200      	movs	r2, #0
 800e658:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800e65c:	2303      	movs	r3, #3
 800e65e:	e111      	b.n	800e884 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e660:	68fb      	ldr	r3, [r7, #12]
 800e662:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e664:	b29b      	uxth	r3, r3
 800e666:	2b00      	cmp	r3, #0
 800e668:	d19d      	bne.n	800e5a6 <HAL_SPI_TransmitReceive+0x158>
 800e66a:	68fb      	ldr	r3, [r7, #12]
 800e66c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800e670:	b29b      	uxth	r3, r3
 800e672:	2b00      	cmp	r3, #0
 800e674:	d197      	bne.n	800e5a6 <HAL_SPI_TransmitReceive+0x158>
 800e676:	e0e5      	b.n	800e844 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e678:	68fb      	ldr	r3, [r7, #12]
 800e67a:	685b      	ldr	r3, [r3, #4]
 800e67c:	2b00      	cmp	r3, #0
 800e67e:	d003      	beq.n	800e688 <HAL_SPI_TransmitReceive+0x23a>
 800e680:	8afb      	ldrh	r3, [r7, #22]
 800e682:	2b01      	cmp	r3, #1
 800e684:	f040 80d1 	bne.w	800e82a <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 800e688:	68fb      	ldr	r3, [r7, #12]
 800e68a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e68c:	b29b      	uxth	r3, r3
 800e68e:	2b01      	cmp	r3, #1
 800e690:	d912      	bls.n	800e6b8 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800e692:	68fb      	ldr	r3, [r7, #12]
 800e694:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e696:	881a      	ldrh	r2, [r3, #0]
 800e698:	68fb      	ldr	r3, [r7, #12]
 800e69a:	681b      	ldr	r3, [r3, #0]
 800e69c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800e69e:	68fb      	ldr	r3, [r7, #12]
 800e6a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e6a2:	1c9a      	adds	r2, r3, #2
 800e6a4:	68fb      	ldr	r3, [r7, #12]
 800e6a6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800e6a8:	68fb      	ldr	r3, [r7, #12]
 800e6aa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e6ac:	b29b      	uxth	r3, r3
 800e6ae:	3b02      	subs	r3, #2
 800e6b0:	b29a      	uxth	r2, r3
 800e6b2:	68fb      	ldr	r3, [r7, #12]
 800e6b4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800e6b6:	e0b8      	b.n	800e82a <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800e6b8:	68fb      	ldr	r3, [r7, #12]
 800e6ba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e6bc:	68fb      	ldr	r3, [r7, #12]
 800e6be:	681b      	ldr	r3, [r3, #0]
 800e6c0:	330c      	adds	r3, #12
 800e6c2:	7812      	ldrb	r2, [r2, #0]
 800e6c4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800e6c6:	68fb      	ldr	r3, [r7, #12]
 800e6c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e6ca:	1c5a      	adds	r2, r3, #1
 800e6cc:	68fb      	ldr	r3, [r7, #12]
 800e6ce:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800e6d0:	68fb      	ldr	r3, [r7, #12]
 800e6d2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e6d4:	b29b      	uxth	r3, r3
 800e6d6:	3b01      	subs	r3, #1
 800e6d8:	b29a      	uxth	r2, r3
 800e6da:	68fb      	ldr	r3, [r7, #12]
 800e6dc:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e6de:	e0a4      	b.n	800e82a <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800e6e0:	68fb      	ldr	r3, [r7, #12]
 800e6e2:	681b      	ldr	r3, [r3, #0]
 800e6e4:	689b      	ldr	r3, [r3, #8]
 800e6e6:	f003 0302 	and.w	r3, r3, #2
 800e6ea:	2b02      	cmp	r3, #2
 800e6ec:	d134      	bne.n	800e758 <HAL_SPI_TransmitReceive+0x30a>
 800e6ee:	68fb      	ldr	r3, [r7, #12]
 800e6f0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e6f2:	b29b      	uxth	r3, r3
 800e6f4:	2b00      	cmp	r3, #0
 800e6f6:	d02f      	beq.n	800e758 <HAL_SPI_TransmitReceive+0x30a>
 800e6f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e6fa:	2b01      	cmp	r3, #1
 800e6fc:	d12c      	bne.n	800e758 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800e6fe:	68fb      	ldr	r3, [r7, #12]
 800e700:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e702:	b29b      	uxth	r3, r3
 800e704:	2b01      	cmp	r3, #1
 800e706:	d912      	bls.n	800e72e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800e708:	68fb      	ldr	r3, [r7, #12]
 800e70a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e70c:	881a      	ldrh	r2, [r3, #0]
 800e70e:	68fb      	ldr	r3, [r7, #12]
 800e710:	681b      	ldr	r3, [r3, #0]
 800e712:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800e714:	68fb      	ldr	r3, [r7, #12]
 800e716:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e718:	1c9a      	adds	r2, r3, #2
 800e71a:	68fb      	ldr	r3, [r7, #12]
 800e71c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800e71e:	68fb      	ldr	r3, [r7, #12]
 800e720:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e722:	b29b      	uxth	r3, r3
 800e724:	3b02      	subs	r3, #2
 800e726:	b29a      	uxth	r2, r3
 800e728:	68fb      	ldr	r3, [r7, #12]
 800e72a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800e72c:	e012      	b.n	800e754 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800e72e:	68fb      	ldr	r3, [r7, #12]
 800e730:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e732:	68fb      	ldr	r3, [r7, #12]
 800e734:	681b      	ldr	r3, [r3, #0]
 800e736:	330c      	adds	r3, #12
 800e738:	7812      	ldrb	r2, [r2, #0]
 800e73a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800e73c:	68fb      	ldr	r3, [r7, #12]
 800e73e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e740:	1c5a      	adds	r2, r3, #1
 800e742:	68fb      	ldr	r3, [r7, #12]
 800e744:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800e746:	68fb      	ldr	r3, [r7, #12]
 800e748:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e74a:	b29b      	uxth	r3, r3
 800e74c:	3b01      	subs	r3, #1
 800e74e:	b29a      	uxth	r2, r3
 800e750:	68fb      	ldr	r3, [r7, #12]
 800e752:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800e754:	2300      	movs	r3, #0
 800e756:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800e758:	68fb      	ldr	r3, [r7, #12]
 800e75a:	681b      	ldr	r3, [r3, #0]
 800e75c:	689b      	ldr	r3, [r3, #8]
 800e75e:	f003 0301 	and.w	r3, r3, #1
 800e762:	2b01      	cmp	r3, #1
 800e764:	d148      	bne.n	800e7f8 <HAL_SPI_TransmitReceive+0x3aa>
 800e766:	68fb      	ldr	r3, [r7, #12]
 800e768:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800e76c:	b29b      	uxth	r3, r3
 800e76e:	2b00      	cmp	r3, #0
 800e770:	d042      	beq.n	800e7f8 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800e772:	68fb      	ldr	r3, [r7, #12]
 800e774:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800e778:	b29b      	uxth	r3, r3
 800e77a:	2b01      	cmp	r3, #1
 800e77c:	d923      	bls.n	800e7c6 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800e77e:	68fb      	ldr	r3, [r7, #12]
 800e780:	681b      	ldr	r3, [r3, #0]
 800e782:	68da      	ldr	r2, [r3, #12]
 800e784:	68fb      	ldr	r3, [r7, #12]
 800e786:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e788:	b292      	uxth	r2, r2
 800e78a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800e78c:	68fb      	ldr	r3, [r7, #12]
 800e78e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e790:	1c9a      	adds	r2, r3, #2
 800e792:	68fb      	ldr	r3, [r7, #12]
 800e794:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800e796:	68fb      	ldr	r3, [r7, #12]
 800e798:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800e79c:	b29b      	uxth	r3, r3
 800e79e:	3b02      	subs	r3, #2
 800e7a0:	b29a      	uxth	r2, r3
 800e7a2:	68fb      	ldr	r3, [r7, #12]
 800e7a4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 800e7a8:	68fb      	ldr	r3, [r7, #12]
 800e7aa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800e7ae:	b29b      	uxth	r3, r3
 800e7b0:	2b01      	cmp	r3, #1
 800e7b2:	d81f      	bhi.n	800e7f4 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800e7b4:	68fb      	ldr	r3, [r7, #12]
 800e7b6:	681b      	ldr	r3, [r3, #0]
 800e7b8:	685a      	ldr	r2, [r3, #4]
 800e7ba:	68fb      	ldr	r3, [r7, #12]
 800e7bc:	681b      	ldr	r3, [r3, #0]
 800e7be:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800e7c2:	605a      	str	r2, [r3, #4]
 800e7c4:	e016      	b.n	800e7f4 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800e7c6:	68fb      	ldr	r3, [r7, #12]
 800e7c8:	681b      	ldr	r3, [r3, #0]
 800e7ca:	f103 020c 	add.w	r2, r3, #12
 800e7ce:	68fb      	ldr	r3, [r7, #12]
 800e7d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e7d2:	7812      	ldrb	r2, [r2, #0]
 800e7d4:	b2d2      	uxtb	r2, r2
 800e7d6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800e7d8:	68fb      	ldr	r3, [r7, #12]
 800e7da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e7dc:	1c5a      	adds	r2, r3, #1
 800e7de:	68fb      	ldr	r3, [r7, #12]
 800e7e0:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800e7e2:	68fb      	ldr	r3, [r7, #12]
 800e7e4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800e7e8:	b29b      	uxth	r3, r3
 800e7ea:	3b01      	subs	r3, #1
 800e7ec:	b29a      	uxth	r2, r3
 800e7ee:	68fb      	ldr	r3, [r7, #12]
 800e7f0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800e7f4:	2301      	movs	r3, #1
 800e7f6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800e7f8:	f7f8 fe4a 	bl	8007490 <HAL_GetTick>
 800e7fc:	4602      	mov	r2, r0
 800e7fe:	6a3b      	ldr	r3, [r7, #32]
 800e800:	1ad3      	subs	r3, r2, r3
 800e802:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e804:	429a      	cmp	r2, r3
 800e806:	d803      	bhi.n	800e810 <HAL_SPI_TransmitReceive+0x3c2>
 800e808:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e80a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e80e:	d102      	bne.n	800e816 <HAL_SPI_TransmitReceive+0x3c8>
 800e810:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e812:	2b00      	cmp	r3, #0
 800e814:	d109      	bne.n	800e82a <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800e816:	68fb      	ldr	r3, [r7, #12]
 800e818:	2201      	movs	r2, #1
 800e81a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800e81e:	68fb      	ldr	r3, [r7, #12]
 800e820:	2200      	movs	r2, #0
 800e822:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800e826:	2303      	movs	r3, #3
 800e828:	e02c      	b.n	800e884 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e82a:	68fb      	ldr	r3, [r7, #12]
 800e82c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e82e:	b29b      	uxth	r3, r3
 800e830:	2b00      	cmp	r3, #0
 800e832:	f47f af55 	bne.w	800e6e0 <HAL_SPI_TransmitReceive+0x292>
 800e836:	68fb      	ldr	r3, [r7, #12]
 800e838:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800e83c:	b29b      	uxth	r3, r3
 800e83e:	2b00      	cmp	r3, #0
 800e840:	f47f af4e 	bne.w	800e6e0 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800e844:	6a3a      	ldr	r2, [r7, #32]
 800e846:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800e848:	68f8      	ldr	r0, [r7, #12]
 800e84a:	f000 faa9 	bl	800eda0 <SPI_EndRxTxTransaction>
 800e84e:	4603      	mov	r3, r0
 800e850:	2b00      	cmp	r3, #0
 800e852:	d008      	beq.n	800e866 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e854:	68fb      	ldr	r3, [r7, #12]
 800e856:	2220      	movs	r2, #32
 800e858:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 800e85a:	68fb      	ldr	r3, [r7, #12]
 800e85c:	2200      	movs	r2, #0
 800e85e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800e862:	2301      	movs	r3, #1
 800e864:	e00e      	b.n	800e884 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 800e866:	68fb      	ldr	r3, [r7, #12]
 800e868:	2201      	movs	r2, #1
 800e86a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800e86e:	68fb      	ldr	r3, [r7, #12]
 800e870:	2200      	movs	r2, #0
 800e872:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e876:	68fb      	ldr	r3, [r7, #12]
 800e878:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e87a:	2b00      	cmp	r3, #0
 800e87c:	d001      	beq.n	800e882 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 800e87e:	2301      	movs	r3, #1
 800e880:	e000      	b.n	800e884 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 800e882:	2300      	movs	r3, #0
  }
}
 800e884:	4618      	mov	r0, r3
 800e886:	3728      	adds	r7, #40	@ 0x28
 800e888:	46bd      	mov	sp, r7
 800e88a:	bd80      	pop	{r7, pc}

0800e88c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800e88c:	b580      	push	{r7, lr}
 800e88e:	b088      	sub	sp, #32
 800e890:	af00      	add	r7, sp, #0
 800e892:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	681b      	ldr	r3, [r3, #0]
 800e898:	685b      	ldr	r3, [r3, #4]
 800e89a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	681b      	ldr	r3, [r3, #0]
 800e8a0:	689b      	ldr	r3, [r3, #8]
 800e8a2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800e8a4:	69bb      	ldr	r3, [r7, #24]
 800e8a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e8aa:	2b00      	cmp	r3, #0
 800e8ac:	d10e      	bne.n	800e8cc <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800e8ae:	69bb      	ldr	r3, [r7, #24]
 800e8b0:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800e8b4:	2b00      	cmp	r3, #0
 800e8b6:	d009      	beq.n	800e8cc <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800e8b8:	69fb      	ldr	r3, [r7, #28]
 800e8ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e8be:	2b00      	cmp	r3, #0
 800e8c0:	d004      	beq.n	800e8cc <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e8c6:	6878      	ldr	r0, [r7, #4]
 800e8c8:	4798      	blx	r3
    return;
 800e8ca:	e0ce      	b.n	800ea6a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800e8cc:	69bb      	ldr	r3, [r7, #24]
 800e8ce:	f003 0302 	and.w	r3, r3, #2
 800e8d2:	2b00      	cmp	r3, #0
 800e8d4:	d009      	beq.n	800e8ea <HAL_SPI_IRQHandler+0x5e>
 800e8d6:	69fb      	ldr	r3, [r7, #28]
 800e8d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e8dc:	2b00      	cmp	r3, #0
 800e8de:	d004      	beq.n	800e8ea <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e8e4:	6878      	ldr	r0, [r7, #4]
 800e8e6:	4798      	blx	r3
    return;
 800e8e8:	e0bf      	b.n	800ea6a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800e8ea:	69bb      	ldr	r3, [r7, #24]
 800e8ec:	f003 0320 	and.w	r3, r3, #32
 800e8f0:	2b00      	cmp	r3, #0
 800e8f2:	d10a      	bne.n	800e90a <HAL_SPI_IRQHandler+0x7e>
 800e8f4:	69bb      	ldr	r3, [r7, #24]
 800e8f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e8fa:	2b00      	cmp	r3, #0
 800e8fc:	d105      	bne.n	800e90a <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800e8fe:	69bb      	ldr	r3, [r7, #24]
 800e900:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e904:	2b00      	cmp	r3, #0
 800e906:	f000 80b0 	beq.w	800ea6a <HAL_SPI_IRQHandler+0x1de>
 800e90a:	69fb      	ldr	r3, [r7, #28]
 800e90c:	f003 0320 	and.w	r3, r3, #32
 800e910:	2b00      	cmp	r3, #0
 800e912:	f000 80aa 	beq.w	800ea6a <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800e916:	69bb      	ldr	r3, [r7, #24]
 800e918:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	d023      	beq.n	800e968 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800e926:	b2db      	uxtb	r3, r3
 800e928:	2b03      	cmp	r3, #3
 800e92a:	d011      	beq.n	800e950 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e930:	f043 0204 	orr.w	r2, r3, #4
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e938:	2300      	movs	r3, #0
 800e93a:	617b      	str	r3, [r7, #20]
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	681b      	ldr	r3, [r3, #0]
 800e940:	68db      	ldr	r3, [r3, #12]
 800e942:	617b      	str	r3, [r7, #20]
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	681b      	ldr	r3, [r3, #0]
 800e948:	689b      	ldr	r3, [r3, #8]
 800e94a:	617b      	str	r3, [r7, #20]
 800e94c:	697b      	ldr	r3, [r7, #20]
 800e94e:	e00b      	b.n	800e968 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e950:	2300      	movs	r3, #0
 800e952:	613b      	str	r3, [r7, #16]
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	681b      	ldr	r3, [r3, #0]
 800e958:	68db      	ldr	r3, [r3, #12]
 800e95a:	613b      	str	r3, [r7, #16]
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	681b      	ldr	r3, [r3, #0]
 800e960:	689b      	ldr	r3, [r3, #8]
 800e962:	613b      	str	r3, [r7, #16]
 800e964:	693b      	ldr	r3, [r7, #16]
        return;
 800e966:	e080      	b.n	800ea6a <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800e968:	69bb      	ldr	r3, [r7, #24]
 800e96a:	f003 0320 	and.w	r3, r3, #32
 800e96e:	2b00      	cmp	r3, #0
 800e970:	d014      	beq.n	800e99c <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e976:	f043 0201 	orr.w	r2, r3, #1
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800e97e:	2300      	movs	r3, #0
 800e980:	60fb      	str	r3, [r7, #12]
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	681b      	ldr	r3, [r3, #0]
 800e986:	689b      	ldr	r3, [r3, #8]
 800e988:	60fb      	str	r3, [r7, #12]
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	681b      	ldr	r3, [r3, #0]
 800e98e:	681a      	ldr	r2, [r3, #0]
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	681b      	ldr	r3, [r3, #0]
 800e994:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800e998:	601a      	str	r2, [r3, #0]
 800e99a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800e99c:	69bb      	ldr	r3, [r7, #24]
 800e99e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	d00c      	beq.n	800e9c0 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e9aa:	f043 0208 	orr.w	r2, r3, #8
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800e9b2:	2300      	movs	r3, #0
 800e9b4:	60bb      	str	r3, [r7, #8]
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	681b      	ldr	r3, [r3, #0]
 800e9ba:	689b      	ldr	r3, [r3, #8]
 800e9bc:	60bb      	str	r3, [r7, #8]
 800e9be:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e9c4:	2b00      	cmp	r3, #0
 800e9c6:	d04f      	beq.n	800ea68 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	681b      	ldr	r3, [r3, #0]
 800e9cc:	685a      	ldr	r2, [r3, #4]
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	681b      	ldr	r3, [r3, #0]
 800e9d2:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800e9d6:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	2201      	movs	r2, #1
 800e9dc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800e9e0:	69fb      	ldr	r3, [r7, #28]
 800e9e2:	f003 0302 	and.w	r3, r3, #2
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	d104      	bne.n	800e9f4 <HAL_SPI_IRQHandler+0x168>
 800e9ea:	69fb      	ldr	r3, [r7, #28]
 800e9ec:	f003 0301 	and.w	r3, r3, #1
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	d034      	beq.n	800ea5e <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	681b      	ldr	r3, [r3, #0]
 800e9f8:	685a      	ldr	r2, [r3, #4]
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	681b      	ldr	r3, [r3, #0]
 800e9fe:	f022 0203 	bic.w	r2, r2, #3
 800ea02:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ea08:	2b00      	cmp	r3, #0
 800ea0a:	d011      	beq.n	800ea30 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ea10:	4a17      	ldr	r2, [pc, #92]	@ (800ea70 <HAL_SPI_IRQHandler+0x1e4>)
 800ea12:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ea18:	4618      	mov	r0, r3
 800ea1a:	f7fa f98f 	bl	8008d3c <HAL_DMA_Abort_IT>
 800ea1e:	4603      	mov	r3, r0
 800ea20:	2b00      	cmp	r3, #0
 800ea22:	d005      	beq.n	800ea30 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ea28:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ea34:	2b00      	cmp	r3, #0
 800ea36:	d016      	beq.n	800ea66 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ea3c:	4a0c      	ldr	r2, [pc, #48]	@ (800ea70 <HAL_SPI_IRQHandler+0x1e4>)
 800ea3e:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ea44:	4618      	mov	r0, r3
 800ea46:	f7fa f979 	bl	8008d3c <HAL_DMA_Abort_IT>
 800ea4a:	4603      	mov	r3, r0
 800ea4c:	2b00      	cmp	r3, #0
 800ea4e:	d00a      	beq.n	800ea66 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ea54:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 800ea5c:	e003      	b.n	800ea66 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800ea5e:	6878      	ldr	r0, [r7, #4]
 800ea60:	f000 f808 	bl	800ea74 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800ea64:	e000      	b.n	800ea68 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 800ea66:	bf00      	nop
    return;
 800ea68:	bf00      	nop
  }
}
 800ea6a:	3720      	adds	r7, #32
 800ea6c:	46bd      	mov	sp, r7
 800ea6e:	bd80      	pop	{r7, pc}
 800ea70:	0800ea89 	.word	0x0800ea89

0800ea74 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800ea74:	b480      	push	{r7}
 800ea76:	b083      	sub	sp, #12
 800ea78:	af00      	add	r7, sp, #0
 800ea7a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800ea7c:	bf00      	nop
 800ea7e:	370c      	adds	r7, #12
 800ea80:	46bd      	mov	sp, r7
 800ea82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea86:	4770      	bx	lr

0800ea88 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ea88:	b580      	push	{r7, lr}
 800ea8a:	b084      	sub	sp, #16
 800ea8c:	af00      	add	r7, sp, #0
 800ea8e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ea94:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800ea96:	68fb      	ldr	r3, [r7, #12]
 800ea98:	2200      	movs	r2, #0
 800ea9a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 800ea9e:	68fb      	ldr	r3, [r7, #12]
 800eaa0:	2200      	movs	r2, #0
 800eaa2:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800eaa4:	68f8      	ldr	r0, [r7, #12]
 800eaa6:	f7ff ffe5 	bl	800ea74 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800eaaa:	bf00      	nop
 800eaac:	3710      	adds	r7, #16
 800eaae:	46bd      	mov	sp, r7
 800eab0:	bd80      	pop	{r7, pc}
	...

0800eab4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800eab4:	b580      	push	{r7, lr}
 800eab6:	b088      	sub	sp, #32
 800eab8:	af00      	add	r7, sp, #0
 800eaba:	60f8      	str	r0, [r7, #12]
 800eabc:	60b9      	str	r1, [r7, #8]
 800eabe:	603b      	str	r3, [r7, #0]
 800eac0:	4613      	mov	r3, r2
 800eac2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800eac4:	f7f8 fce4 	bl	8007490 <HAL_GetTick>
 800eac8:	4602      	mov	r2, r0
 800eaca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eacc:	1a9b      	subs	r3, r3, r2
 800eace:	683a      	ldr	r2, [r7, #0]
 800ead0:	4413      	add	r3, r2
 800ead2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800ead4:	f7f8 fcdc 	bl	8007490 <HAL_GetTick>
 800ead8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800eada:	4b39      	ldr	r3, [pc, #228]	@ (800ebc0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800eadc:	681b      	ldr	r3, [r3, #0]
 800eade:	015b      	lsls	r3, r3, #5
 800eae0:	0d1b      	lsrs	r3, r3, #20
 800eae2:	69fa      	ldr	r2, [r7, #28]
 800eae4:	fb02 f303 	mul.w	r3, r2, r3
 800eae8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800eaea:	e054      	b.n	800eb96 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800eaec:	683b      	ldr	r3, [r7, #0]
 800eaee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eaf2:	d050      	beq.n	800eb96 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800eaf4:	f7f8 fccc 	bl	8007490 <HAL_GetTick>
 800eaf8:	4602      	mov	r2, r0
 800eafa:	69bb      	ldr	r3, [r7, #24]
 800eafc:	1ad3      	subs	r3, r2, r3
 800eafe:	69fa      	ldr	r2, [r7, #28]
 800eb00:	429a      	cmp	r2, r3
 800eb02:	d902      	bls.n	800eb0a <SPI_WaitFlagStateUntilTimeout+0x56>
 800eb04:	69fb      	ldr	r3, [r7, #28]
 800eb06:	2b00      	cmp	r3, #0
 800eb08:	d13d      	bne.n	800eb86 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800eb0a:	68fb      	ldr	r3, [r7, #12]
 800eb0c:	681b      	ldr	r3, [r3, #0]
 800eb0e:	685a      	ldr	r2, [r3, #4]
 800eb10:	68fb      	ldr	r3, [r7, #12]
 800eb12:	681b      	ldr	r3, [r3, #0]
 800eb14:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800eb18:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800eb1a:	68fb      	ldr	r3, [r7, #12]
 800eb1c:	685b      	ldr	r3, [r3, #4]
 800eb1e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800eb22:	d111      	bne.n	800eb48 <SPI_WaitFlagStateUntilTimeout+0x94>
 800eb24:	68fb      	ldr	r3, [r7, #12]
 800eb26:	689b      	ldr	r3, [r3, #8]
 800eb28:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800eb2c:	d004      	beq.n	800eb38 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800eb2e:	68fb      	ldr	r3, [r7, #12]
 800eb30:	689b      	ldr	r3, [r3, #8]
 800eb32:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800eb36:	d107      	bne.n	800eb48 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800eb38:	68fb      	ldr	r3, [r7, #12]
 800eb3a:	681b      	ldr	r3, [r3, #0]
 800eb3c:	681a      	ldr	r2, [r3, #0]
 800eb3e:	68fb      	ldr	r3, [r7, #12]
 800eb40:	681b      	ldr	r3, [r3, #0]
 800eb42:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800eb46:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800eb48:	68fb      	ldr	r3, [r7, #12]
 800eb4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800eb4c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800eb50:	d10f      	bne.n	800eb72 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800eb52:	68fb      	ldr	r3, [r7, #12]
 800eb54:	681b      	ldr	r3, [r3, #0]
 800eb56:	681a      	ldr	r2, [r3, #0]
 800eb58:	68fb      	ldr	r3, [r7, #12]
 800eb5a:	681b      	ldr	r3, [r3, #0]
 800eb5c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800eb60:	601a      	str	r2, [r3, #0]
 800eb62:	68fb      	ldr	r3, [r7, #12]
 800eb64:	681b      	ldr	r3, [r3, #0]
 800eb66:	681a      	ldr	r2, [r3, #0]
 800eb68:	68fb      	ldr	r3, [r7, #12]
 800eb6a:	681b      	ldr	r3, [r3, #0]
 800eb6c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800eb70:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800eb72:	68fb      	ldr	r3, [r7, #12]
 800eb74:	2201      	movs	r2, #1
 800eb76:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800eb7a:	68fb      	ldr	r3, [r7, #12]
 800eb7c:	2200      	movs	r2, #0
 800eb7e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800eb82:	2303      	movs	r3, #3
 800eb84:	e017      	b.n	800ebb6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800eb86:	697b      	ldr	r3, [r7, #20]
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	d101      	bne.n	800eb90 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800eb8c:	2300      	movs	r3, #0
 800eb8e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800eb90:	697b      	ldr	r3, [r7, #20]
 800eb92:	3b01      	subs	r3, #1
 800eb94:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800eb96:	68fb      	ldr	r3, [r7, #12]
 800eb98:	681b      	ldr	r3, [r3, #0]
 800eb9a:	689a      	ldr	r2, [r3, #8]
 800eb9c:	68bb      	ldr	r3, [r7, #8]
 800eb9e:	4013      	ands	r3, r2
 800eba0:	68ba      	ldr	r2, [r7, #8]
 800eba2:	429a      	cmp	r2, r3
 800eba4:	bf0c      	ite	eq
 800eba6:	2301      	moveq	r3, #1
 800eba8:	2300      	movne	r3, #0
 800ebaa:	b2db      	uxtb	r3, r3
 800ebac:	461a      	mov	r2, r3
 800ebae:	79fb      	ldrb	r3, [r7, #7]
 800ebb0:	429a      	cmp	r2, r3
 800ebb2:	d19b      	bne.n	800eaec <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800ebb4:	2300      	movs	r3, #0
}
 800ebb6:	4618      	mov	r0, r3
 800ebb8:	3720      	adds	r7, #32
 800ebba:	46bd      	mov	sp, r7
 800ebbc:	bd80      	pop	{r7, pc}
 800ebbe:	bf00      	nop
 800ebc0:	2000002c 	.word	0x2000002c

0800ebc4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800ebc4:	b580      	push	{r7, lr}
 800ebc6:	b08a      	sub	sp, #40	@ 0x28
 800ebc8:	af00      	add	r7, sp, #0
 800ebca:	60f8      	str	r0, [r7, #12]
 800ebcc:	60b9      	str	r1, [r7, #8]
 800ebce:	607a      	str	r2, [r7, #4]
 800ebd0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800ebd2:	2300      	movs	r3, #0
 800ebd4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800ebd6:	f7f8 fc5b 	bl	8007490 <HAL_GetTick>
 800ebda:	4602      	mov	r2, r0
 800ebdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ebde:	1a9b      	subs	r3, r3, r2
 800ebe0:	683a      	ldr	r2, [r7, #0]
 800ebe2:	4413      	add	r3, r2
 800ebe4:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800ebe6:	f7f8 fc53 	bl	8007490 <HAL_GetTick>
 800ebea:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800ebec:	68fb      	ldr	r3, [r7, #12]
 800ebee:	681b      	ldr	r3, [r3, #0]
 800ebf0:	330c      	adds	r3, #12
 800ebf2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800ebf4:	4b3d      	ldr	r3, [pc, #244]	@ (800ecec <SPI_WaitFifoStateUntilTimeout+0x128>)
 800ebf6:	681a      	ldr	r2, [r3, #0]
 800ebf8:	4613      	mov	r3, r2
 800ebfa:	009b      	lsls	r3, r3, #2
 800ebfc:	4413      	add	r3, r2
 800ebfe:	00da      	lsls	r2, r3, #3
 800ec00:	1ad3      	subs	r3, r2, r3
 800ec02:	0d1b      	lsrs	r3, r3, #20
 800ec04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ec06:	fb02 f303 	mul.w	r3, r2, r3
 800ec0a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800ec0c:	e060      	b.n	800ecd0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800ec0e:	68bb      	ldr	r3, [r7, #8]
 800ec10:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800ec14:	d107      	bne.n	800ec26 <SPI_WaitFifoStateUntilTimeout+0x62>
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	2b00      	cmp	r3, #0
 800ec1a:	d104      	bne.n	800ec26 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800ec1c:	69fb      	ldr	r3, [r7, #28]
 800ec1e:	781b      	ldrb	r3, [r3, #0]
 800ec20:	b2db      	uxtb	r3, r3
 800ec22:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800ec24:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800ec26:	683b      	ldr	r3, [r7, #0]
 800ec28:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec2c:	d050      	beq.n	800ecd0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800ec2e:	f7f8 fc2f 	bl	8007490 <HAL_GetTick>
 800ec32:	4602      	mov	r2, r0
 800ec34:	6a3b      	ldr	r3, [r7, #32]
 800ec36:	1ad3      	subs	r3, r2, r3
 800ec38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ec3a:	429a      	cmp	r2, r3
 800ec3c:	d902      	bls.n	800ec44 <SPI_WaitFifoStateUntilTimeout+0x80>
 800ec3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec40:	2b00      	cmp	r3, #0
 800ec42:	d13d      	bne.n	800ecc0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800ec44:	68fb      	ldr	r3, [r7, #12]
 800ec46:	681b      	ldr	r3, [r3, #0]
 800ec48:	685a      	ldr	r2, [r3, #4]
 800ec4a:	68fb      	ldr	r3, [r7, #12]
 800ec4c:	681b      	ldr	r3, [r3, #0]
 800ec4e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800ec52:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ec54:	68fb      	ldr	r3, [r7, #12]
 800ec56:	685b      	ldr	r3, [r3, #4]
 800ec58:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800ec5c:	d111      	bne.n	800ec82 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800ec5e:	68fb      	ldr	r3, [r7, #12]
 800ec60:	689b      	ldr	r3, [r3, #8]
 800ec62:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ec66:	d004      	beq.n	800ec72 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ec68:	68fb      	ldr	r3, [r7, #12]
 800ec6a:	689b      	ldr	r3, [r3, #8]
 800ec6c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ec70:	d107      	bne.n	800ec82 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800ec72:	68fb      	ldr	r3, [r7, #12]
 800ec74:	681b      	ldr	r3, [r3, #0]
 800ec76:	681a      	ldr	r2, [r3, #0]
 800ec78:	68fb      	ldr	r3, [r7, #12]
 800ec7a:	681b      	ldr	r3, [r3, #0]
 800ec7c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800ec80:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800ec82:	68fb      	ldr	r3, [r7, #12]
 800ec84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ec86:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ec8a:	d10f      	bne.n	800ecac <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800ec8c:	68fb      	ldr	r3, [r7, #12]
 800ec8e:	681b      	ldr	r3, [r3, #0]
 800ec90:	681a      	ldr	r2, [r3, #0]
 800ec92:	68fb      	ldr	r3, [r7, #12]
 800ec94:	681b      	ldr	r3, [r3, #0]
 800ec96:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800ec9a:	601a      	str	r2, [r3, #0]
 800ec9c:	68fb      	ldr	r3, [r7, #12]
 800ec9e:	681b      	ldr	r3, [r3, #0]
 800eca0:	681a      	ldr	r2, [r3, #0]
 800eca2:	68fb      	ldr	r3, [r7, #12]
 800eca4:	681b      	ldr	r3, [r3, #0]
 800eca6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800ecaa:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800ecac:	68fb      	ldr	r3, [r7, #12]
 800ecae:	2201      	movs	r2, #1
 800ecb0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800ecb4:	68fb      	ldr	r3, [r7, #12]
 800ecb6:	2200      	movs	r2, #0
 800ecb8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800ecbc:	2303      	movs	r3, #3
 800ecbe:	e010      	b.n	800ece2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800ecc0:	69bb      	ldr	r3, [r7, #24]
 800ecc2:	2b00      	cmp	r3, #0
 800ecc4:	d101      	bne.n	800ecca <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800ecc6:	2300      	movs	r3, #0
 800ecc8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800ecca:	69bb      	ldr	r3, [r7, #24]
 800eccc:	3b01      	subs	r3, #1
 800ecce:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800ecd0:	68fb      	ldr	r3, [r7, #12]
 800ecd2:	681b      	ldr	r3, [r3, #0]
 800ecd4:	689a      	ldr	r2, [r3, #8]
 800ecd6:	68bb      	ldr	r3, [r7, #8]
 800ecd8:	4013      	ands	r3, r2
 800ecda:	687a      	ldr	r2, [r7, #4]
 800ecdc:	429a      	cmp	r2, r3
 800ecde:	d196      	bne.n	800ec0e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800ece0:	2300      	movs	r3, #0
}
 800ece2:	4618      	mov	r0, r3
 800ece4:	3728      	adds	r7, #40	@ 0x28
 800ece6:	46bd      	mov	sp, r7
 800ece8:	bd80      	pop	{r7, pc}
 800ecea:	bf00      	nop
 800ecec:	2000002c 	.word	0x2000002c

0800ecf0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800ecf0:	b580      	push	{r7, lr}
 800ecf2:	b086      	sub	sp, #24
 800ecf4:	af02      	add	r7, sp, #8
 800ecf6:	60f8      	str	r0, [r7, #12]
 800ecf8:	60b9      	str	r1, [r7, #8]
 800ecfa:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ecfc:	68fb      	ldr	r3, [r7, #12]
 800ecfe:	685b      	ldr	r3, [r3, #4]
 800ed00:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800ed04:	d111      	bne.n	800ed2a <SPI_EndRxTransaction+0x3a>
 800ed06:	68fb      	ldr	r3, [r7, #12]
 800ed08:	689b      	ldr	r3, [r3, #8]
 800ed0a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ed0e:	d004      	beq.n	800ed1a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ed10:	68fb      	ldr	r3, [r7, #12]
 800ed12:	689b      	ldr	r3, [r3, #8]
 800ed14:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ed18:	d107      	bne.n	800ed2a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800ed1a:	68fb      	ldr	r3, [r7, #12]
 800ed1c:	681b      	ldr	r3, [r3, #0]
 800ed1e:	681a      	ldr	r2, [r3, #0]
 800ed20:	68fb      	ldr	r3, [r7, #12]
 800ed22:	681b      	ldr	r3, [r3, #0]
 800ed24:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800ed28:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	9300      	str	r3, [sp, #0]
 800ed2e:	68bb      	ldr	r3, [r7, #8]
 800ed30:	2200      	movs	r2, #0
 800ed32:	2180      	movs	r1, #128	@ 0x80
 800ed34:	68f8      	ldr	r0, [r7, #12]
 800ed36:	f7ff febd 	bl	800eab4 <SPI_WaitFlagStateUntilTimeout>
 800ed3a:	4603      	mov	r3, r0
 800ed3c:	2b00      	cmp	r3, #0
 800ed3e:	d007      	beq.n	800ed50 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ed40:	68fb      	ldr	r3, [r7, #12]
 800ed42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ed44:	f043 0220 	orr.w	r2, r3, #32
 800ed48:	68fb      	ldr	r3, [r7, #12]
 800ed4a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800ed4c:	2303      	movs	r3, #3
 800ed4e:	e023      	b.n	800ed98 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ed50:	68fb      	ldr	r3, [r7, #12]
 800ed52:	685b      	ldr	r3, [r3, #4]
 800ed54:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800ed58:	d11d      	bne.n	800ed96 <SPI_EndRxTransaction+0xa6>
 800ed5a:	68fb      	ldr	r3, [r7, #12]
 800ed5c:	689b      	ldr	r3, [r3, #8]
 800ed5e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ed62:	d004      	beq.n	800ed6e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ed64:	68fb      	ldr	r3, [r7, #12]
 800ed66:	689b      	ldr	r3, [r3, #8]
 800ed68:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ed6c:	d113      	bne.n	800ed96 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	9300      	str	r3, [sp, #0]
 800ed72:	68bb      	ldr	r3, [r7, #8]
 800ed74:	2200      	movs	r2, #0
 800ed76:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800ed7a:	68f8      	ldr	r0, [r7, #12]
 800ed7c:	f7ff ff22 	bl	800ebc4 <SPI_WaitFifoStateUntilTimeout>
 800ed80:	4603      	mov	r3, r0
 800ed82:	2b00      	cmp	r3, #0
 800ed84:	d007      	beq.n	800ed96 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ed86:	68fb      	ldr	r3, [r7, #12]
 800ed88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ed8a:	f043 0220 	orr.w	r2, r3, #32
 800ed8e:	68fb      	ldr	r3, [r7, #12]
 800ed90:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800ed92:	2303      	movs	r3, #3
 800ed94:	e000      	b.n	800ed98 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800ed96:	2300      	movs	r3, #0
}
 800ed98:	4618      	mov	r0, r3
 800ed9a:	3710      	adds	r7, #16
 800ed9c:	46bd      	mov	sp, r7
 800ed9e:	bd80      	pop	{r7, pc}

0800eda0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800eda0:	b580      	push	{r7, lr}
 800eda2:	b086      	sub	sp, #24
 800eda4:	af02      	add	r7, sp, #8
 800eda6:	60f8      	str	r0, [r7, #12]
 800eda8:	60b9      	str	r1, [r7, #8]
 800edaa:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	9300      	str	r3, [sp, #0]
 800edb0:	68bb      	ldr	r3, [r7, #8]
 800edb2:	2200      	movs	r2, #0
 800edb4:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800edb8:	68f8      	ldr	r0, [r7, #12]
 800edba:	f7ff ff03 	bl	800ebc4 <SPI_WaitFifoStateUntilTimeout>
 800edbe:	4603      	mov	r3, r0
 800edc0:	2b00      	cmp	r3, #0
 800edc2:	d007      	beq.n	800edd4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800edc4:	68fb      	ldr	r3, [r7, #12]
 800edc6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800edc8:	f043 0220 	orr.w	r2, r3, #32
 800edcc:	68fb      	ldr	r3, [r7, #12]
 800edce:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800edd0:	2303      	movs	r3, #3
 800edd2:	e027      	b.n	800ee24 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	9300      	str	r3, [sp, #0]
 800edd8:	68bb      	ldr	r3, [r7, #8]
 800edda:	2200      	movs	r2, #0
 800eddc:	2180      	movs	r1, #128	@ 0x80
 800edde:	68f8      	ldr	r0, [r7, #12]
 800ede0:	f7ff fe68 	bl	800eab4 <SPI_WaitFlagStateUntilTimeout>
 800ede4:	4603      	mov	r3, r0
 800ede6:	2b00      	cmp	r3, #0
 800ede8:	d007      	beq.n	800edfa <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800edea:	68fb      	ldr	r3, [r7, #12]
 800edec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800edee:	f043 0220 	orr.w	r2, r3, #32
 800edf2:	68fb      	ldr	r3, [r7, #12]
 800edf4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800edf6:	2303      	movs	r3, #3
 800edf8:	e014      	b.n	800ee24 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	9300      	str	r3, [sp, #0]
 800edfe:	68bb      	ldr	r3, [r7, #8]
 800ee00:	2200      	movs	r2, #0
 800ee02:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800ee06:	68f8      	ldr	r0, [r7, #12]
 800ee08:	f7ff fedc 	bl	800ebc4 <SPI_WaitFifoStateUntilTimeout>
 800ee0c:	4603      	mov	r3, r0
 800ee0e:	2b00      	cmp	r3, #0
 800ee10:	d007      	beq.n	800ee22 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ee12:	68fb      	ldr	r3, [r7, #12]
 800ee14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ee16:	f043 0220 	orr.w	r2, r3, #32
 800ee1a:	68fb      	ldr	r3, [r7, #12]
 800ee1c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800ee1e:	2303      	movs	r3, #3
 800ee20:	e000      	b.n	800ee24 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800ee22:	2300      	movs	r3, #0
}
 800ee24:	4618      	mov	r0, r3
 800ee26:	3710      	adds	r7, #16
 800ee28:	46bd      	mov	sp, r7
 800ee2a:	bd80      	pop	{r7, pc}

0800ee2c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ee2c:	b580      	push	{r7, lr}
 800ee2e:	b082      	sub	sp, #8
 800ee30:	af00      	add	r7, sp, #0
 800ee32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	2b00      	cmp	r3, #0
 800ee38:	d101      	bne.n	800ee3e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ee3a:	2301      	movs	r3, #1
 800ee3c:	e049      	b.n	800eed2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ee44:	b2db      	uxtb	r3, r3
 800ee46:	2b00      	cmp	r3, #0
 800ee48:	d106      	bne.n	800ee58 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	2200      	movs	r2, #0
 800ee4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ee52:	6878      	ldr	r0, [r7, #4]
 800ee54:	f7f7 fdd4 	bl	8006a00 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	2202      	movs	r2, #2
 800ee5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	681a      	ldr	r2, [r3, #0]
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	3304      	adds	r3, #4
 800ee68:	4619      	mov	r1, r3
 800ee6a:	4610      	mov	r0, r2
 800ee6c:	f000 fafc 	bl	800f468 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	2201      	movs	r2, #1
 800ee74:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	2201      	movs	r2, #1
 800ee7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	2201      	movs	r2, #1
 800ee84:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	2201      	movs	r2, #1
 800ee8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	2201      	movs	r2, #1
 800ee94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	2201      	movs	r2, #1
 800ee9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	2201      	movs	r2, #1
 800eea4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	2201      	movs	r2, #1
 800eeac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	2201      	movs	r2, #1
 800eeb4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	2201      	movs	r2, #1
 800eebc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	2201      	movs	r2, #1
 800eec4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	2201      	movs	r2, #1
 800eecc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800eed0:	2300      	movs	r3, #0
}
 800eed2:	4618      	mov	r0, r3
 800eed4:	3708      	adds	r7, #8
 800eed6:	46bd      	mov	sp, r7
 800eed8:	bd80      	pop	{r7, pc}
	...

0800eedc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800eedc:	b480      	push	{r7}
 800eede:	b085      	sub	sp, #20
 800eee0:	af00      	add	r7, sp, #0
 800eee2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800eeea:	b2db      	uxtb	r3, r3
 800eeec:	2b01      	cmp	r3, #1
 800eeee:	d001      	beq.n	800eef4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800eef0:	2301      	movs	r3, #1
 800eef2:	e02e      	b.n	800ef52 <HAL_TIM_Base_Start+0x76>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	2202      	movs	r2, #2
 800eef8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	681b      	ldr	r3, [r3, #0]
 800ef00:	4a17      	ldr	r2, [pc, #92]	@ (800ef60 <HAL_TIM_Base_Start+0x84>)
 800ef02:	4293      	cmp	r3, r2
 800ef04:	d004      	beq.n	800ef10 <HAL_TIM_Base_Start+0x34>
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	681b      	ldr	r3, [r3, #0]
 800ef0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ef0e:	d115      	bne.n	800ef3c <HAL_TIM_Base_Start+0x60>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	681b      	ldr	r3, [r3, #0]
 800ef14:	689a      	ldr	r2, [r3, #8]
 800ef16:	4b13      	ldr	r3, [pc, #76]	@ (800ef64 <HAL_TIM_Base_Start+0x88>)
 800ef18:	4013      	ands	r3, r2
 800ef1a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ef1c:	68fb      	ldr	r3, [r7, #12]
 800ef1e:	2b06      	cmp	r3, #6
 800ef20:	d015      	beq.n	800ef4e <HAL_TIM_Base_Start+0x72>
 800ef22:	68fb      	ldr	r3, [r7, #12]
 800ef24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ef28:	d011      	beq.n	800ef4e <HAL_TIM_Base_Start+0x72>
    {
      __HAL_TIM_ENABLE(htim);
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	681b      	ldr	r3, [r3, #0]
 800ef2e:	681a      	ldr	r2, [r3, #0]
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	681b      	ldr	r3, [r3, #0]
 800ef34:	f042 0201 	orr.w	r2, r2, #1
 800ef38:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ef3a:	e008      	b.n	800ef4e <HAL_TIM_Base_Start+0x72>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	681b      	ldr	r3, [r3, #0]
 800ef40:	681a      	ldr	r2, [r3, #0]
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	681b      	ldr	r3, [r3, #0]
 800ef46:	f042 0201 	orr.w	r2, r2, #1
 800ef4a:	601a      	str	r2, [r3, #0]
 800ef4c:	e000      	b.n	800ef50 <HAL_TIM_Base_Start+0x74>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ef4e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ef50:	2300      	movs	r3, #0
}
 800ef52:	4618      	mov	r0, r3
 800ef54:	3714      	adds	r7, #20
 800ef56:	46bd      	mov	sp, r7
 800ef58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef5c:	4770      	bx	lr
 800ef5e:	bf00      	nop
 800ef60:	40012c00 	.word	0x40012c00
 800ef64:	00010007 	.word	0x00010007

0800ef68 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ef68:	b480      	push	{r7}
 800ef6a:	b085      	sub	sp, #20
 800ef6c:	af00      	add	r7, sp, #0
 800ef6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ef76:	b2db      	uxtb	r3, r3
 800ef78:	2b01      	cmp	r3, #1
 800ef7a:	d001      	beq.n	800ef80 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ef7c:	2301      	movs	r3, #1
 800ef7e:	e036      	b.n	800efee <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	2202      	movs	r2, #2
 800ef84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	681b      	ldr	r3, [r3, #0]
 800ef8c:	68da      	ldr	r2, [r3, #12]
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	681b      	ldr	r3, [r3, #0]
 800ef92:	f042 0201 	orr.w	r2, r2, #1
 800ef96:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	681b      	ldr	r3, [r3, #0]
 800ef9c:	4a17      	ldr	r2, [pc, #92]	@ (800effc <HAL_TIM_Base_Start_IT+0x94>)
 800ef9e:	4293      	cmp	r3, r2
 800efa0:	d004      	beq.n	800efac <HAL_TIM_Base_Start_IT+0x44>
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	681b      	ldr	r3, [r3, #0]
 800efa6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800efaa:	d115      	bne.n	800efd8 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	681b      	ldr	r3, [r3, #0]
 800efb0:	689a      	ldr	r2, [r3, #8]
 800efb2:	4b13      	ldr	r3, [pc, #76]	@ (800f000 <HAL_TIM_Base_Start_IT+0x98>)
 800efb4:	4013      	ands	r3, r2
 800efb6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800efb8:	68fb      	ldr	r3, [r7, #12]
 800efba:	2b06      	cmp	r3, #6
 800efbc:	d015      	beq.n	800efea <HAL_TIM_Base_Start_IT+0x82>
 800efbe:	68fb      	ldr	r3, [r7, #12]
 800efc0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800efc4:	d011      	beq.n	800efea <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	681b      	ldr	r3, [r3, #0]
 800efca:	681a      	ldr	r2, [r3, #0]
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	681b      	ldr	r3, [r3, #0]
 800efd0:	f042 0201 	orr.w	r2, r2, #1
 800efd4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800efd6:	e008      	b.n	800efea <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	681b      	ldr	r3, [r3, #0]
 800efdc:	681a      	ldr	r2, [r3, #0]
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	681b      	ldr	r3, [r3, #0]
 800efe2:	f042 0201 	orr.w	r2, r2, #1
 800efe6:	601a      	str	r2, [r3, #0]
 800efe8:	e000      	b.n	800efec <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800efea:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800efec:	2300      	movs	r3, #0
}
 800efee:	4618      	mov	r0, r3
 800eff0:	3714      	adds	r7, #20
 800eff2:	46bd      	mov	sp, r7
 800eff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eff8:	4770      	bx	lr
 800effa:	bf00      	nop
 800effc:	40012c00 	.word	0x40012c00
 800f000:	00010007 	.word	0x00010007

0800f004 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800f004:	b480      	push	{r7}
 800f006:	b083      	sub	sp, #12
 800f008:	af00      	add	r7, sp, #0
 800f00a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	681b      	ldr	r3, [r3, #0]
 800f010:	68da      	ldr	r2, [r3, #12]
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	681b      	ldr	r3, [r3, #0]
 800f016:	f022 0201 	bic.w	r2, r2, #1
 800f01a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	681b      	ldr	r3, [r3, #0]
 800f020:	6a1a      	ldr	r2, [r3, #32]
 800f022:	f241 1311 	movw	r3, #4369	@ 0x1111
 800f026:	4013      	ands	r3, r2
 800f028:	2b00      	cmp	r3, #0
 800f02a:	d10f      	bne.n	800f04c <HAL_TIM_Base_Stop_IT+0x48>
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	681b      	ldr	r3, [r3, #0]
 800f030:	6a1a      	ldr	r2, [r3, #32]
 800f032:	f240 4344 	movw	r3, #1092	@ 0x444
 800f036:	4013      	ands	r3, r2
 800f038:	2b00      	cmp	r3, #0
 800f03a:	d107      	bne.n	800f04c <HAL_TIM_Base_Stop_IT+0x48>
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	681b      	ldr	r3, [r3, #0]
 800f040:	681a      	ldr	r2, [r3, #0]
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	681b      	ldr	r3, [r3, #0]
 800f046:	f022 0201 	bic.w	r2, r2, #1
 800f04a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	2201      	movs	r2, #1
 800f050:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800f054:	2300      	movs	r3, #0
}
 800f056:	4618      	mov	r0, r3
 800f058:	370c      	adds	r7, #12
 800f05a:	46bd      	mov	sp, r7
 800f05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f060:	4770      	bx	lr

0800f062 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800f062:	b580      	push	{r7, lr}
 800f064:	b084      	sub	sp, #16
 800f066:	af00      	add	r7, sp, #0
 800f068:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	681b      	ldr	r3, [r3, #0]
 800f06e:	68db      	ldr	r3, [r3, #12]
 800f070:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	681b      	ldr	r3, [r3, #0]
 800f076:	691b      	ldr	r3, [r3, #16]
 800f078:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800f07a:	68bb      	ldr	r3, [r7, #8]
 800f07c:	f003 0302 	and.w	r3, r3, #2
 800f080:	2b00      	cmp	r3, #0
 800f082:	d020      	beq.n	800f0c6 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800f084:	68fb      	ldr	r3, [r7, #12]
 800f086:	f003 0302 	and.w	r3, r3, #2
 800f08a:	2b00      	cmp	r3, #0
 800f08c:	d01b      	beq.n	800f0c6 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	681b      	ldr	r3, [r3, #0]
 800f092:	f06f 0202 	mvn.w	r2, #2
 800f096:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	2201      	movs	r2, #1
 800f09c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	681b      	ldr	r3, [r3, #0]
 800f0a2:	699b      	ldr	r3, [r3, #24]
 800f0a4:	f003 0303 	and.w	r3, r3, #3
 800f0a8:	2b00      	cmp	r3, #0
 800f0aa:	d003      	beq.n	800f0b4 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800f0ac:	6878      	ldr	r0, [r7, #4]
 800f0ae:	f000 f9bc 	bl	800f42a <HAL_TIM_IC_CaptureCallback>
 800f0b2:	e005      	b.n	800f0c0 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800f0b4:	6878      	ldr	r0, [r7, #4]
 800f0b6:	f000 f9ae 	bl	800f416 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f0ba:	6878      	ldr	r0, [r7, #4]
 800f0bc:	f000 f9bf 	bl	800f43e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	2200      	movs	r2, #0
 800f0c4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800f0c6:	68bb      	ldr	r3, [r7, #8]
 800f0c8:	f003 0304 	and.w	r3, r3, #4
 800f0cc:	2b00      	cmp	r3, #0
 800f0ce:	d020      	beq.n	800f112 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800f0d0:	68fb      	ldr	r3, [r7, #12]
 800f0d2:	f003 0304 	and.w	r3, r3, #4
 800f0d6:	2b00      	cmp	r3, #0
 800f0d8:	d01b      	beq.n	800f112 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	681b      	ldr	r3, [r3, #0]
 800f0de:	f06f 0204 	mvn.w	r2, #4
 800f0e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	2202      	movs	r2, #2
 800f0e8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	681b      	ldr	r3, [r3, #0]
 800f0ee:	699b      	ldr	r3, [r3, #24]
 800f0f0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800f0f4:	2b00      	cmp	r3, #0
 800f0f6:	d003      	beq.n	800f100 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f0f8:	6878      	ldr	r0, [r7, #4]
 800f0fa:	f000 f996 	bl	800f42a <HAL_TIM_IC_CaptureCallback>
 800f0fe:	e005      	b.n	800f10c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f100:	6878      	ldr	r0, [r7, #4]
 800f102:	f000 f988 	bl	800f416 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f106:	6878      	ldr	r0, [r7, #4]
 800f108:	f000 f999 	bl	800f43e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	2200      	movs	r2, #0
 800f110:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800f112:	68bb      	ldr	r3, [r7, #8]
 800f114:	f003 0308 	and.w	r3, r3, #8
 800f118:	2b00      	cmp	r3, #0
 800f11a:	d020      	beq.n	800f15e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800f11c:	68fb      	ldr	r3, [r7, #12]
 800f11e:	f003 0308 	and.w	r3, r3, #8
 800f122:	2b00      	cmp	r3, #0
 800f124:	d01b      	beq.n	800f15e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	681b      	ldr	r3, [r3, #0]
 800f12a:	f06f 0208 	mvn.w	r2, #8
 800f12e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	2204      	movs	r2, #4
 800f134:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	681b      	ldr	r3, [r3, #0]
 800f13a:	69db      	ldr	r3, [r3, #28]
 800f13c:	f003 0303 	and.w	r3, r3, #3
 800f140:	2b00      	cmp	r3, #0
 800f142:	d003      	beq.n	800f14c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f144:	6878      	ldr	r0, [r7, #4]
 800f146:	f000 f970 	bl	800f42a <HAL_TIM_IC_CaptureCallback>
 800f14a:	e005      	b.n	800f158 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f14c:	6878      	ldr	r0, [r7, #4]
 800f14e:	f000 f962 	bl	800f416 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f152:	6878      	ldr	r0, [r7, #4]
 800f154:	f000 f973 	bl	800f43e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	2200      	movs	r2, #0
 800f15c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800f15e:	68bb      	ldr	r3, [r7, #8]
 800f160:	f003 0310 	and.w	r3, r3, #16
 800f164:	2b00      	cmp	r3, #0
 800f166:	d020      	beq.n	800f1aa <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800f168:	68fb      	ldr	r3, [r7, #12]
 800f16a:	f003 0310 	and.w	r3, r3, #16
 800f16e:	2b00      	cmp	r3, #0
 800f170:	d01b      	beq.n	800f1aa <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	681b      	ldr	r3, [r3, #0]
 800f176:	f06f 0210 	mvn.w	r2, #16
 800f17a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	2208      	movs	r2, #8
 800f180:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	681b      	ldr	r3, [r3, #0]
 800f186:	69db      	ldr	r3, [r3, #28]
 800f188:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800f18c:	2b00      	cmp	r3, #0
 800f18e:	d003      	beq.n	800f198 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f190:	6878      	ldr	r0, [r7, #4]
 800f192:	f000 f94a 	bl	800f42a <HAL_TIM_IC_CaptureCallback>
 800f196:	e005      	b.n	800f1a4 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f198:	6878      	ldr	r0, [r7, #4]
 800f19a:	f000 f93c 	bl	800f416 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f19e:	6878      	ldr	r0, [r7, #4]
 800f1a0:	f000 f94d 	bl	800f43e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	2200      	movs	r2, #0
 800f1a8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800f1aa:	68bb      	ldr	r3, [r7, #8]
 800f1ac:	f003 0301 	and.w	r3, r3, #1
 800f1b0:	2b00      	cmp	r3, #0
 800f1b2:	d00c      	beq.n	800f1ce <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800f1b4:	68fb      	ldr	r3, [r7, #12]
 800f1b6:	f003 0301 	and.w	r3, r3, #1
 800f1ba:	2b00      	cmp	r3, #0
 800f1bc:	d007      	beq.n	800f1ce <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	681b      	ldr	r3, [r3, #0]
 800f1c2:	f06f 0201 	mvn.w	r2, #1
 800f1c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800f1c8:	6878      	ldr	r0, [r7, #4]
 800f1ca:	f000 f91a 	bl	800f402 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800f1ce:	68bb      	ldr	r3, [r7, #8]
 800f1d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	d104      	bne.n	800f1e2 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800f1d8:	68bb      	ldr	r3, [r7, #8]
 800f1da:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800f1de:	2b00      	cmp	r3, #0
 800f1e0:	d00c      	beq.n	800f1fc <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800f1e2:	68fb      	ldr	r3, [r7, #12]
 800f1e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f1e8:	2b00      	cmp	r3, #0
 800f1ea:	d007      	beq.n	800f1fc <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	681b      	ldr	r3, [r3, #0]
 800f1f0:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800f1f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800f1f6:	6878      	ldr	r0, [r7, #4]
 800f1f8:	f000 faac 	bl	800f754 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800f1fc:	68bb      	ldr	r3, [r7, #8]
 800f1fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f202:	2b00      	cmp	r3, #0
 800f204:	d00c      	beq.n	800f220 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800f206:	68fb      	ldr	r3, [r7, #12]
 800f208:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f20c:	2b00      	cmp	r3, #0
 800f20e:	d007      	beq.n	800f220 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	681b      	ldr	r3, [r3, #0]
 800f214:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800f218:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800f21a:	6878      	ldr	r0, [r7, #4]
 800f21c:	f000 faa4 	bl	800f768 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800f220:	68bb      	ldr	r3, [r7, #8]
 800f222:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f226:	2b00      	cmp	r3, #0
 800f228:	d00c      	beq.n	800f244 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800f22a:	68fb      	ldr	r3, [r7, #12]
 800f22c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f230:	2b00      	cmp	r3, #0
 800f232:	d007      	beq.n	800f244 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	681b      	ldr	r3, [r3, #0]
 800f238:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800f23c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800f23e:	6878      	ldr	r0, [r7, #4]
 800f240:	f000 f907 	bl	800f452 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800f244:	68bb      	ldr	r3, [r7, #8]
 800f246:	f003 0320 	and.w	r3, r3, #32
 800f24a:	2b00      	cmp	r3, #0
 800f24c:	d00c      	beq.n	800f268 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800f24e:	68fb      	ldr	r3, [r7, #12]
 800f250:	f003 0320 	and.w	r3, r3, #32
 800f254:	2b00      	cmp	r3, #0
 800f256:	d007      	beq.n	800f268 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	681b      	ldr	r3, [r3, #0]
 800f25c:	f06f 0220 	mvn.w	r2, #32
 800f260:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800f262:	6878      	ldr	r0, [r7, #4]
 800f264:	f000 fa6c 	bl	800f740 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800f268:	bf00      	nop
 800f26a:	3710      	adds	r7, #16
 800f26c:	46bd      	mov	sp, r7
 800f26e:	bd80      	pop	{r7, pc}

0800f270 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800f270:	b580      	push	{r7, lr}
 800f272:	b084      	sub	sp, #16
 800f274:	af00      	add	r7, sp, #0
 800f276:	6078      	str	r0, [r7, #4]
 800f278:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f27a:	2300      	movs	r3, #0
 800f27c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f284:	2b01      	cmp	r3, #1
 800f286:	d101      	bne.n	800f28c <HAL_TIM_ConfigClockSource+0x1c>
 800f288:	2302      	movs	r3, #2
 800f28a:	e0b6      	b.n	800f3fa <HAL_TIM_ConfigClockSource+0x18a>
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	2201      	movs	r2, #1
 800f290:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	2202      	movs	r2, #2
 800f298:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	681b      	ldr	r3, [r3, #0]
 800f2a0:	689b      	ldr	r3, [r3, #8]
 800f2a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800f2a4:	68bb      	ldr	r3, [r7, #8]
 800f2a6:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800f2aa:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800f2ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f2b0:	68bb      	ldr	r3, [r7, #8]
 800f2b2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800f2b6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	681b      	ldr	r3, [r3, #0]
 800f2bc:	68ba      	ldr	r2, [r7, #8]
 800f2be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800f2c0:	683b      	ldr	r3, [r7, #0]
 800f2c2:	681b      	ldr	r3, [r3, #0]
 800f2c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f2c8:	d03e      	beq.n	800f348 <HAL_TIM_ConfigClockSource+0xd8>
 800f2ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f2ce:	f200 8087 	bhi.w	800f3e0 <HAL_TIM_ConfigClockSource+0x170>
 800f2d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f2d6:	f000 8086 	beq.w	800f3e6 <HAL_TIM_ConfigClockSource+0x176>
 800f2da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f2de:	d87f      	bhi.n	800f3e0 <HAL_TIM_ConfigClockSource+0x170>
 800f2e0:	2b70      	cmp	r3, #112	@ 0x70
 800f2e2:	d01a      	beq.n	800f31a <HAL_TIM_ConfigClockSource+0xaa>
 800f2e4:	2b70      	cmp	r3, #112	@ 0x70
 800f2e6:	d87b      	bhi.n	800f3e0 <HAL_TIM_ConfigClockSource+0x170>
 800f2e8:	2b60      	cmp	r3, #96	@ 0x60
 800f2ea:	d050      	beq.n	800f38e <HAL_TIM_ConfigClockSource+0x11e>
 800f2ec:	2b60      	cmp	r3, #96	@ 0x60
 800f2ee:	d877      	bhi.n	800f3e0 <HAL_TIM_ConfigClockSource+0x170>
 800f2f0:	2b50      	cmp	r3, #80	@ 0x50
 800f2f2:	d03c      	beq.n	800f36e <HAL_TIM_ConfigClockSource+0xfe>
 800f2f4:	2b50      	cmp	r3, #80	@ 0x50
 800f2f6:	d873      	bhi.n	800f3e0 <HAL_TIM_ConfigClockSource+0x170>
 800f2f8:	2b40      	cmp	r3, #64	@ 0x40
 800f2fa:	d058      	beq.n	800f3ae <HAL_TIM_ConfigClockSource+0x13e>
 800f2fc:	2b40      	cmp	r3, #64	@ 0x40
 800f2fe:	d86f      	bhi.n	800f3e0 <HAL_TIM_ConfigClockSource+0x170>
 800f300:	2b30      	cmp	r3, #48	@ 0x30
 800f302:	d064      	beq.n	800f3ce <HAL_TIM_ConfigClockSource+0x15e>
 800f304:	2b30      	cmp	r3, #48	@ 0x30
 800f306:	d86b      	bhi.n	800f3e0 <HAL_TIM_ConfigClockSource+0x170>
 800f308:	2b20      	cmp	r3, #32
 800f30a:	d060      	beq.n	800f3ce <HAL_TIM_ConfigClockSource+0x15e>
 800f30c:	2b20      	cmp	r3, #32
 800f30e:	d867      	bhi.n	800f3e0 <HAL_TIM_ConfigClockSource+0x170>
 800f310:	2b00      	cmp	r3, #0
 800f312:	d05c      	beq.n	800f3ce <HAL_TIM_ConfigClockSource+0x15e>
 800f314:	2b10      	cmp	r3, #16
 800f316:	d05a      	beq.n	800f3ce <HAL_TIM_ConfigClockSource+0x15e>
 800f318:	e062      	b.n	800f3e0 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800f31e:	683b      	ldr	r3, [r7, #0]
 800f320:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800f322:	683b      	ldr	r3, [r7, #0]
 800f324:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800f326:	683b      	ldr	r3, [r7, #0]
 800f328:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800f32a:	f000 f989 	bl	800f640 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	681b      	ldr	r3, [r3, #0]
 800f332:	689b      	ldr	r3, [r3, #8]
 800f334:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800f336:	68bb      	ldr	r3, [r7, #8]
 800f338:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800f33c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	681b      	ldr	r3, [r3, #0]
 800f342:	68ba      	ldr	r2, [r7, #8]
 800f344:	609a      	str	r2, [r3, #8]
      break;
 800f346:	e04f      	b.n	800f3e8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800f34c:	683b      	ldr	r3, [r7, #0]
 800f34e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800f350:	683b      	ldr	r3, [r7, #0]
 800f352:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800f354:	683b      	ldr	r3, [r7, #0]
 800f356:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800f358:	f000 f972 	bl	800f640 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	681b      	ldr	r3, [r3, #0]
 800f360:	689a      	ldr	r2, [r3, #8]
 800f362:	687b      	ldr	r3, [r7, #4]
 800f364:	681b      	ldr	r3, [r3, #0]
 800f366:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800f36a:	609a      	str	r2, [r3, #8]
      break;
 800f36c:	e03c      	b.n	800f3e8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800f372:	683b      	ldr	r3, [r7, #0]
 800f374:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800f376:	683b      	ldr	r3, [r7, #0]
 800f378:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800f37a:	461a      	mov	r2, r3
 800f37c:	f000 f8e4 	bl	800f548 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	681b      	ldr	r3, [r3, #0]
 800f384:	2150      	movs	r1, #80	@ 0x50
 800f386:	4618      	mov	r0, r3
 800f388:	f000 f93d 	bl	800f606 <TIM_ITRx_SetConfig>
      break;
 800f38c:	e02c      	b.n	800f3e8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800f392:	683b      	ldr	r3, [r7, #0]
 800f394:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800f396:	683b      	ldr	r3, [r7, #0]
 800f398:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800f39a:	461a      	mov	r2, r3
 800f39c:	f000 f903 	bl	800f5a6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	681b      	ldr	r3, [r3, #0]
 800f3a4:	2160      	movs	r1, #96	@ 0x60
 800f3a6:	4618      	mov	r0, r3
 800f3a8:	f000 f92d 	bl	800f606 <TIM_ITRx_SetConfig>
      break;
 800f3ac:	e01c      	b.n	800f3e8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800f3b2:	683b      	ldr	r3, [r7, #0]
 800f3b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800f3b6:	683b      	ldr	r3, [r7, #0]
 800f3b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800f3ba:	461a      	mov	r2, r3
 800f3bc:	f000 f8c4 	bl	800f548 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	681b      	ldr	r3, [r3, #0]
 800f3c4:	2140      	movs	r1, #64	@ 0x40
 800f3c6:	4618      	mov	r0, r3
 800f3c8:	f000 f91d 	bl	800f606 <TIM_ITRx_SetConfig>
      break;
 800f3cc:	e00c      	b.n	800f3e8 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	681a      	ldr	r2, [r3, #0]
 800f3d2:	683b      	ldr	r3, [r7, #0]
 800f3d4:	681b      	ldr	r3, [r3, #0]
 800f3d6:	4619      	mov	r1, r3
 800f3d8:	4610      	mov	r0, r2
 800f3da:	f000 f914 	bl	800f606 <TIM_ITRx_SetConfig>
      break;
 800f3de:	e003      	b.n	800f3e8 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800f3e0:	2301      	movs	r3, #1
 800f3e2:	73fb      	strb	r3, [r7, #15]
      break;
 800f3e4:	e000      	b.n	800f3e8 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800f3e6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	2201      	movs	r2, #1
 800f3ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	2200      	movs	r2, #0
 800f3f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800f3f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800f3fa:	4618      	mov	r0, r3
 800f3fc:	3710      	adds	r7, #16
 800f3fe:	46bd      	mov	sp, r7
 800f400:	bd80      	pop	{r7, pc}

0800f402 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800f402:	b480      	push	{r7}
 800f404:	b083      	sub	sp, #12
 800f406:	af00      	add	r7, sp, #0
 800f408:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800f40a:	bf00      	nop
 800f40c:	370c      	adds	r7, #12
 800f40e:	46bd      	mov	sp, r7
 800f410:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f414:	4770      	bx	lr

0800f416 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800f416:	b480      	push	{r7}
 800f418:	b083      	sub	sp, #12
 800f41a:	af00      	add	r7, sp, #0
 800f41c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800f41e:	bf00      	nop
 800f420:	370c      	adds	r7, #12
 800f422:	46bd      	mov	sp, r7
 800f424:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f428:	4770      	bx	lr

0800f42a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800f42a:	b480      	push	{r7}
 800f42c:	b083      	sub	sp, #12
 800f42e:	af00      	add	r7, sp, #0
 800f430:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800f432:	bf00      	nop
 800f434:	370c      	adds	r7, #12
 800f436:	46bd      	mov	sp, r7
 800f438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f43c:	4770      	bx	lr

0800f43e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800f43e:	b480      	push	{r7}
 800f440:	b083      	sub	sp, #12
 800f442:	af00      	add	r7, sp, #0
 800f444:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800f446:	bf00      	nop
 800f448:	370c      	adds	r7, #12
 800f44a:	46bd      	mov	sp, r7
 800f44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f450:	4770      	bx	lr

0800f452 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800f452:	b480      	push	{r7}
 800f454:	b083      	sub	sp, #12
 800f456:	af00      	add	r7, sp, #0
 800f458:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800f45a:	bf00      	nop
 800f45c:	370c      	adds	r7, #12
 800f45e:	46bd      	mov	sp, r7
 800f460:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f464:	4770      	bx	lr
	...

0800f468 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800f468:	b480      	push	{r7}
 800f46a:	b085      	sub	sp, #20
 800f46c:	af00      	add	r7, sp, #0
 800f46e:	6078      	str	r0, [r7, #4]
 800f470:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	681b      	ldr	r3, [r3, #0]
 800f476:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	4a30      	ldr	r2, [pc, #192]	@ (800f53c <TIM_Base_SetConfig+0xd4>)
 800f47c:	4293      	cmp	r3, r2
 800f47e:	d003      	beq.n	800f488 <TIM_Base_SetConfig+0x20>
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f486:	d108      	bne.n	800f49a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f488:	68fb      	ldr	r3, [r7, #12]
 800f48a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f48e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f490:	683b      	ldr	r3, [r7, #0]
 800f492:	685b      	ldr	r3, [r3, #4]
 800f494:	68fa      	ldr	r2, [r7, #12]
 800f496:	4313      	orrs	r3, r2
 800f498:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	4a27      	ldr	r2, [pc, #156]	@ (800f53c <TIM_Base_SetConfig+0xd4>)
 800f49e:	4293      	cmp	r3, r2
 800f4a0:	d00b      	beq.n	800f4ba <TIM_Base_SetConfig+0x52>
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f4a8:	d007      	beq.n	800f4ba <TIM_Base_SetConfig+0x52>
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	4a24      	ldr	r2, [pc, #144]	@ (800f540 <TIM_Base_SetConfig+0xd8>)
 800f4ae:	4293      	cmp	r3, r2
 800f4b0:	d003      	beq.n	800f4ba <TIM_Base_SetConfig+0x52>
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	4a23      	ldr	r2, [pc, #140]	@ (800f544 <TIM_Base_SetConfig+0xdc>)
 800f4b6:	4293      	cmp	r3, r2
 800f4b8:	d108      	bne.n	800f4cc <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f4ba:	68fb      	ldr	r3, [r7, #12]
 800f4bc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800f4c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f4c2:	683b      	ldr	r3, [r7, #0]
 800f4c4:	68db      	ldr	r3, [r3, #12]
 800f4c6:	68fa      	ldr	r2, [r7, #12]
 800f4c8:	4313      	orrs	r3, r2
 800f4ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f4cc:	68fb      	ldr	r3, [r7, #12]
 800f4ce:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800f4d2:	683b      	ldr	r3, [r7, #0]
 800f4d4:	695b      	ldr	r3, [r3, #20]
 800f4d6:	4313      	orrs	r3, r2
 800f4d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	68fa      	ldr	r2, [r7, #12]
 800f4de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f4e0:	683b      	ldr	r3, [r7, #0]
 800f4e2:	689a      	ldr	r2, [r3, #8]
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f4e8:	683b      	ldr	r3, [r7, #0]
 800f4ea:	681a      	ldr	r2, [r3, #0]
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	4a12      	ldr	r2, [pc, #72]	@ (800f53c <TIM_Base_SetConfig+0xd4>)
 800f4f4:	4293      	cmp	r3, r2
 800f4f6:	d007      	beq.n	800f508 <TIM_Base_SetConfig+0xa0>
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	4a11      	ldr	r2, [pc, #68]	@ (800f540 <TIM_Base_SetConfig+0xd8>)
 800f4fc:	4293      	cmp	r3, r2
 800f4fe:	d003      	beq.n	800f508 <TIM_Base_SetConfig+0xa0>
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	4a10      	ldr	r2, [pc, #64]	@ (800f544 <TIM_Base_SetConfig+0xdc>)
 800f504:	4293      	cmp	r3, r2
 800f506:	d103      	bne.n	800f510 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f508:	683b      	ldr	r3, [r7, #0]
 800f50a:	691a      	ldr	r2, [r3, #16]
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	2201      	movs	r2, #1
 800f514:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	691b      	ldr	r3, [r3, #16]
 800f51a:	f003 0301 	and.w	r3, r3, #1
 800f51e:	2b01      	cmp	r3, #1
 800f520:	d105      	bne.n	800f52e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	691b      	ldr	r3, [r3, #16]
 800f526:	f023 0201 	bic.w	r2, r3, #1
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	611a      	str	r2, [r3, #16]
  }
}
 800f52e:	bf00      	nop
 800f530:	3714      	adds	r7, #20
 800f532:	46bd      	mov	sp, r7
 800f534:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f538:	4770      	bx	lr
 800f53a:	bf00      	nop
 800f53c:	40012c00 	.word	0x40012c00
 800f540:	40014400 	.word	0x40014400
 800f544:	40014800 	.word	0x40014800

0800f548 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f548:	b480      	push	{r7}
 800f54a:	b087      	sub	sp, #28
 800f54c:	af00      	add	r7, sp, #0
 800f54e:	60f8      	str	r0, [r7, #12]
 800f550:	60b9      	str	r1, [r7, #8]
 800f552:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800f554:	68fb      	ldr	r3, [r7, #12]
 800f556:	6a1b      	ldr	r3, [r3, #32]
 800f558:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f55a:	68fb      	ldr	r3, [r7, #12]
 800f55c:	6a1b      	ldr	r3, [r3, #32]
 800f55e:	f023 0201 	bic.w	r2, r3, #1
 800f562:	68fb      	ldr	r3, [r7, #12]
 800f564:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f566:	68fb      	ldr	r3, [r7, #12]
 800f568:	699b      	ldr	r3, [r3, #24]
 800f56a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800f56c:	693b      	ldr	r3, [r7, #16]
 800f56e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800f572:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	011b      	lsls	r3, r3, #4
 800f578:	693a      	ldr	r2, [r7, #16]
 800f57a:	4313      	orrs	r3, r2
 800f57c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800f57e:	697b      	ldr	r3, [r7, #20]
 800f580:	f023 030a 	bic.w	r3, r3, #10
 800f584:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800f586:	697a      	ldr	r2, [r7, #20]
 800f588:	68bb      	ldr	r3, [r7, #8]
 800f58a:	4313      	orrs	r3, r2
 800f58c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800f58e:	68fb      	ldr	r3, [r7, #12]
 800f590:	693a      	ldr	r2, [r7, #16]
 800f592:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f594:	68fb      	ldr	r3, [r7, #12]
 800f596:	697a      	ldr	r2, [r7, #20]
 800f598:	621a      	str	r2, [r3, #32]
}
 800f59a:	bf00      	nop
 800f59c:	371c      	adds	r7, #28
 800f59e:	46bd      	mov	sp, r7
 800f5a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5a4:	4770      	bx	lr

0800f5a6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f5a6:	b480      	push	{r7}
 800f5a8:	b087      	sub	sp, #28
 800f5aa:	af00      	add	r7, sp, #0
 800f5ac:	60f8      	str	r0, [r7, #12]
 800f5ae:	60b9      	str	r1, [r7, #8]
 800f5b0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800f5b2:	68fb      	ldr	r3, [r7, #12]
 800f5b4:	6a1b      	ldr	r3, [r3, #32]
 800f5b6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f5b8:	68fb      	ldr	r3, [r7, #12]
 800f5ba:	6a1b      	ldr	r3, [r3, #32]
 800f5bc:	f023 0210 	bic.w	r2, r3, #16
 800f5c0:	68fb      	ldr	r3, [r7, #12]
 800f5c2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f5c4:	68fb      	ldr	r3, [r7, #12]
 800f5c6:	699b      	ldr	r3, [r3, #24]
 800f5c8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800f5ca:	693b      	ldr	r3, [r7, #16]
 800f5cc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800f5d0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	031b      	lsls	r3, r3, #12
 800f5d6:	693a      	ldr	r2, [r7, #16]
 800f5d8:	4313      	orrs	r3, r2
 800f5da:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800f5dc:	697b      	ldr	r3, [r7, #20]
 800f5de:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800f5e2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800f5e4:	68bb      	ldr	r3, [r7, #8]
 800f5e6:	011b      	lsls	r3, r3, #4
 800f5e8:	697a      	ldr	r2, [r7, #20]
 800f5ea:	4313      	orrs	r3, r2
 800f5ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800f5ee:	68fb      	ldr	r3, [r7, #12]
 800f5f0:	693a      	ldr	r2, [r7, #16]
 800f5f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f5f4:	68fb      	ldr	r3, [r7, #12]
 800f5f6:	697a      	ldr	r2, [r7, #20]
 800f5f8:	621a      	str	r2, [r3, #32]
}
 800f5fa:	bf00      	nop
 800f5fc:	371c      	adds	r7, #28
 800f5fe:	46bd      	mov	sp, r7
 800f600:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f604:	4770      	bx	lr

0800f606 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800f606:	b480      	push	{r7}
 800f608:	b085      	sub	sp, #20
 800f60a:	af00      	add	r7, sp, #0
 800f60c:	6078      	str	r0, [r7, #4]
 800f60e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	689b      	ldr	r3, [r3, #8]
 800f614:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800f616:	68fb      	ldr	r3, [r7, #12]
 800f618:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800f61c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f620:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800f622:	683a      	ldr	r2, [r7, #0]
 800f624:	68fb      	ldr	r3, [r7, #12]
 800f626:	4313      	orrs	r3, r2
 800f628:	f043 0307 	orr.w	r3, r3, #7
 800f62c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	68fa      	ldr	r2, [r7, #12]
 800f632:	609a      	str	r2, [r3, #8]
}
 800f634:	bf00      	nop
 800f636:	3714      	adds	r7, #20
 800f638:	46bd      	mov	sp, r7
 800f63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f63e:	4770      	bx	lr

0800f640 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800f640:	b480      	push	{r7}
 800f642:	b087      	sub	sp, #28
 800f644:	af00      	add	r7, sp, #0
 800f646:	60f8      	str	r0, [r7, #12]
 800f648:	60b9      	str	r1, [r7, #8]
 800f64a:	607a      	str	r2, [r7, #4]
 800f64c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800f64e:	68fb      	ldr	r3, [r7, #12]
 800f650:	689b      	ldr	r3, [r3, #8]
 800f652:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f654:	697b      	ldr	r3, [r7, #20]
 800f656:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800f65a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800f65c:	683b      	ldr	r3, [r7, #0]
 800f65e:	021a      	lsls	r2, r3, #8
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	431a      	orrs	r2, r3
 800f664:	68bb      	ldr	r3, [r7, #8]
 800f666:	4313      	orrs	r3, r2
 800f668:	697a      	ldr	r2, [r7, #20]
 800f66a:	4313      	orrs	r3, r2
 800f66c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f66e:	68fb      	ldr	r3, [r7, #12]
 800f670:	697a      	ldr	r2, [r7, #20]
 800f672:	609a      	str	r2, [r3, #8]
}
 800f674:	bf00      	nop
 800f676:	371c      	adds	r7, #28
 800f678:	46bd      	mov	sp, r7
 800f67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f67e:	4770      	bx	lr

0800f680 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800f680:	b480      	push	{r7}
 800f682:	b085      	sub	sp, #20
 800f684:	af00      	add	r7, sp, #0
 800f686:	6078      	str	r0, [r7, #4]
 800f688:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f690:	2b01      	cmp	r3, #1
 800f692:	d101      	bne.n	800f698 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800f694:	2302      	movs	r3, #2
 800f696:	e04a      	b.n	800f72e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	2201      	movs	r2, #1
 800f69c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	2202      	movs	r2, #2
 800f6a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	681b      	ldr	r3, [r3, #0]
 800f6ac:	685b      	ldr	r3, [r3, #4]
 800f6ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	681b      	ldr	r3, [r3, #0]
 800f6b4:	689b      	ldr	r3, [r3, #8]
 800f6b6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	681b      	ldr	r3, [r3, #0]
 800f6bc:	4a1f      	ldr	r2, [pc, #124]	@ (800f73c <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800f6be:	4293      	cmp	r3, r2
 800f6c0:	d108      	bne.n	800f6d4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800f6c2:	68fb      	ldr	r3, [r7, #12]
 800f6c4:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800f6c8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800f6ca:	683b      	ldr	r3, [r7, #0]
 800f6cc:	685b      	ldr	r3, [r3, #4]
 800f6ce:	68fa      	ldr	r2, [r7, #12]
 800f6d0:	4313      	orrs	r3, r2
 800f6d2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800f6d4:	68fb      	ldr	r3, [r7, #12]
 800f6d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f6da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f6dc:	683b      	ldr	r3, [r7, #0]
 800f6de:	681b      	ldr	r3, [r3, #0]
 800f6e0:	68fa      	ldr	r2, [r7, #12]
 800f6e2:	4313      	orrs	r3, r2
 800f6e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	681b      	ldr	r3, [r3, #0]
 800f6ea:	68fa      	ldr	r2, [r7, #12]
 800f6ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	681b      	ldr	r3, [r3, #0]
 800f6f2:	4a12      	ldr	r2, [pc, #72]	@ (800f73c <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800f6f4:	4293      	cmp	r3, r2
 800f6f6:	d004      	beq.n	800f702 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	681b      	ldr	r3, [r3, #0]
 800f6fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f700:	d10c      	bne.n	800f71c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f702:	68bb      	ldr	r3, [r7, #8]
 800f704:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f708:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f70a:	683b      	ldr	r3, [r7, #0]
 800f70c:	689b      	ldr	r3, [r3, #8]
 800f70e:	68ba      	ldr	r2, [r7, #8]
 800f710:	4313      	orrs	r3, r2
 800f712:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	681b      	ldr	r3, [r3, #0]
 800f718:	68ba      	ldr	r2, [r7, #8]
 800f71a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	2201      	movs	r2, #1
 800f720:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	2200      	movs	r2, #0
 800f728:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800f72c:	2300      	movs	r3, #0
}
 800f72e:	4618      	mov	r0, r3
 800f730:	3714      	adds	r7, #20
 800f732:	46bd      	mov	sp, r7
 800f734:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f738:	4770      	bx	lr
 800f73a:	bf00      	nop
 800f73c:	40012c00 	.word	0x40012c00

0800f740 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800f740:	b480      	push	{r7}
 800f742:	b083      	sub	sp, #12
 800f744:	af00      	add	r7, sp, #0
 800f746:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800f748:	bf00      	nop
 800f74a:	370c      	adds	r7, #12
 800f74c:	46bd      	mov	sp, r7
 800f74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f752:	4770      	bx	lr

0800f754 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800f754:	b480      	push	{r7}
 800f756:	b083      	sub	sp, #12
 800f758:	af00      	add	r7, sp, #0
 800f75a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800f75c:	bf00      	nop
 800f75e:	370c      	adds	r7, #12
 800f760:	46bd      	mov	sp, r7
 800f762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f766:	4770      	bx	lr

0800f768 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800f768:	b480      	push	{r7}
 800f76a:	b083      	sub	sp, #12
 800f76c:	af00      	add	r7, sp, #0
 800f76e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800f770:	bf00      	nop
 800f772:	370c      	adds	r7, #12
 800f774:	46bd      	mov	sp, r7
 800f776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f77a:	4770      	bx	lr

0800f77c <LL_RCC_GetUSARTClockSource>:
{
 800f77c:	b480      	push	{r7}
 800f77e:	b083      	sub	sp, #12
 800f780:	af00      	add	r7, sp, #0
 800f782:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 800f784:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f788:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	4013      	ands	r3, r2
}
 800f790:	4618      	mov	r0, r3
 800f792:	370c      	adds	r7, #12
 800f794:	46bd      	mov	sp, r7
 800f796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f79a:	4770      	bx	lr

0800f79c <LL_RCC_GetLPUARTClockSource>:
{
 800f79c:	b480      	push	{r7}
 800f79e:	b083      	sub	sp, #12
 800f7a0:	af00      	add	r7, sp, #0
 800f7a2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800f7a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f7a8:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	4013      	ands	r3, r2
}
 800f7b0:	4618      	mov	r0, r3
 800f7b2:	370c      	adds	r7, #12
 800f7b4:	46bd      	mov	sp, r7
 800f7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7ba:	4770      	bx	lr

0800f7bc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f7bc:	b580      	push	{r7, lr}
 800f7be:	b082      	sub	sp, #8
 800f7c0:	af00      	add	r7, sp, #0
 800f7c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	2b00      	cmp	r3, #0
 800f7c8:	d101      	bne.n	800f7ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f7ca:	2301      	movs	r3, #1
 800f7cc:	e042      	b.n	800f854 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f7d4:	2b00      	cmp	r3, #0
 800f7d6:	d106      	bne.n	800f7e6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	2200      	movs	r2, #0
 800f7dc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f7e0:	6878      	ldr	r0, [r7, #4]
 800f7e2:	f7f7 fbd7 	bl	8006f94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	2224      	movs	r2, #36	@ 0x24
 800f7ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	681b      	ldr	r3, [r3, #0]
 800f7f2:	681a      	ldr	r2, [r3, #0]
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	681b      	ldr	r3, [r3, #0]
 800f7f8:	f022 0201 	bic.w	r2, r2, #1
 800f7fc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f802:	2b00      	cmp	r3, #0
 800f804:	d002      	beq.n	800f80c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800f806:	6878      	ldr	r0, [r7, #4]
 800f808:	f000 ffe4 	bl	80107d4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800f80c:	6878      	ldr	r0, [r7, #4]
 800f80e:	f000 fdb9 	bl	8010384 <UART_SetConfig>
 800f812:	4603      	mov	r3, r0
 800f814:	2b01      	cmp	r3, #1
 800f816:	d101      	bne.n	800f81c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800f818:	2301      	movs	r3, #1
 800f81a:	e01b      	b.n	800f854 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	681b      	ldr	r3, [r3, #0]
 800f820:	685a      	ldr	r2, [r3, #4]
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	681b      	ldr	r3, [r3, #0]
 800f826:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800f82a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	681b      	ldr	r3, [r3, #0]
 800f830:	689a      	ldr	r2, [r3, #8]
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	681b      	ldr	r3, [r3, #0]
 800f836:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800f83a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	681b      	ldr	r3, [r3, #0]
 800f840:	681a      	ldr	r2, [r3, #0]
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	681b      	ldr	r3, [r3, #0]
 800f846:	f042 0201 	orr.w	r2, r2, #1
 800f84a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800f84c:	6878      	ldr	r0, [r7, #4]
 800f84e:	f001 f863 	bl	8010918 <UART_CheckIdleState>
 800f852:	4603      	mov	r3, r0
}
 800f854:	4618      	mov	r0, r3
 800f856:	3708      	adds	r7, #8
 800f858:	46bd      	mov	sp, r7
 800f85a:	bd80      	pop	{r7, pc}

0800f85c <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800f85c:	b580      	push	{r7, lr}
 800f85e:	b082      	sub	sp, #8
 800f860:	af00      	add	r7, sp, #0
 800f862:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	2b00      	cmp	r3, #0
 800f868:	d101      	bne.n	800f86e <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800f86a:	2301      	movs	r3, #1
 800f86c:	e031      	b.n	800f8d2 <HAL_UART_DeInit+0x76>
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
#else
  assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */

  huart->gState = HAL_UART_STATE_BUSY;
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	2224      	movs	r2, #36	@ 0x24
 800f872:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	681b      	ldr	r3, [r3, #0]
 800f87a:	681a      	ldr	r2, [r3, #0]
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	681b      	ldr	r3, [r3, #0]
 800f880:	f022 0201 	bic.w	r2, r2, #1
 800f884:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	681b      	ldr	r3, [r3, #0]
 800f88a:	2200      	movs	r2, #0
 800f88c:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	681b      	ldr	r3, [r3, #0]
 800f892:	2200      	movs	r2, #0
 800f894:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	681b      	ldr	r3, [r3, #0]
 800f89a:	2200      	movs	r2, #0
 800f89c:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800f89e:	6878      	ldr	r0, [r7, #4]
 800f8a0:	f7f7 fc58 	bl	8007154 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	2200      	movs	r2, #0
 800f8a8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->gState = HAL_UART_STATE_RESET;
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	2200      	movs	r2, #0
 800f8b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_RESET;
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	2200      	movs	r2, #0
 800f8b8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	2200      	movs	r2, #0
 800f8c0:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	2200      	movs	r2, #0
 800f8c6:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	2200      	movs	r2, #0
 800f8cc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f8d0:	2300      	movs	r3, #0
}
 800f8d2:	4618      	mov	r0, r3
 800f8d4:	3708      	adds	r7, #8
 800f8d6:	46bd      	mov	sp, r7
 800f8d8:	bd80      	pop	{r7, pc}

0800f8da <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f8da:	b580      	push	{r7, lr}
 800f8dc:	b08a      	sub	sp, #40	@ 0x28
 800f8de:	af02      	add	r7, sp, #8
 800f8e0:	60f8      	str	r0, [r7, #12]
 800f8e2:	60b9      	str	r1, [r7, #8]
 800f8e4:	603b      	str	r3, [r7, #0]
 800f8e6:	4613      	mov	r3, r2
 800f8e8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800f8ea:	68fb      	ldr	r3, [r7, #12]
 800f8ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f8f0:	2b20      	cmp	r3, #32
 800f8f2:	d17b      	bne.n	800f9ec <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800f8f4:	68bb      	ldr	r3, [r7, #8]
 800f8f6:	2b00      	cmp	r3, #0
 800f8f8:	d002      	beq.n	800f900 <HAL_UART_Transmit+0x26>
 800f8fa:	88fb      	ldrh	r3, [r7, #6]
 800f8fc:	2b00      	cmp	r3, #0
 800f8fe:	d101      	bne.n	800f904 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800f900:	2301      	movs	r3, #1
 800f902:	e074      	b.n	800f9ee <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f904:	68fb      	ldr	r3, [r7, #12]
 800f906:	2200      	movs	r2, #0
 800f908:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800f90c:	68fb      	ldr	r3, [r7, #12]
 800f90e:	2221      	movs	r2, #33	@ 0x21
 800f910:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800f914:	f7f7 fdbc 	bl	8007490 <HAL_GetTick>
 800f918:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800f91a:	68fb      	ldr	r3, [r7, #12]
 800f91c:	88fa      	ldrh	r2, [r7, #6]
 800f91e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800f922:	68fb      	ldr	r3, [r7, #12]
 800f924:	88fa      	ldrh	r2, [r7, #6]
 800f926:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f92a:	68fb      	ldr	r3, [r7, #12]
 800f92c:	689b      	ldr	r3, [r3, #8]
 800f92e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f932:	d108      	bne.n	800f946 <HAL_UART_Transmit+0x6c>
 800f934:	68fb      	ldr	r3, [r7, #12]
 800f936:	691b      	ldr	r3, [r3, #16]
 800f938:	2b00      	cmp	r3, #0
 800f93a:	d104      	bne.n	800f946 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800f93c:	2300      	movs	r3, #0
 800f93e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800f940:	68bb      	ldr	r3, [r7, #8]
 800f942:	61bb      	str	r3, [r7, #24]
 800f944:	e003      	b.n	800f94e <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800f946:	68bb      	ldr	r3, [r7, #8]
 800f948:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800f94a:	2300      	movs	r3, #0
 800f94c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800f94e:	e030      	b.n	800f9b2 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800f950:	683b      	ldr	r3, [r7, #0]
 800f952:	9300      	str	r3, [sp, #0]
 800f954:	697b      	ldr	r3, [r7, #20]
 800f956:	2200      	movs	r2, #0
 800f958:	2180      	movs	r1, #128	@ 0x80
 800f95a:	68f8      	ldr	r0, [r7, #12]
 800f95c:	f001 f886 	bl	8010a6c <UART_WaitOnFlagUntilTimeout>
 800f960:	4603      	mov	r3, r0
 800f962:	2b00      	cmp	r3, #0
 800f964:	d005      	beq.n	800f972 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800f966:	68fb      	ldr	r3, [r7, #12]
 800f968:	2220      	movs	r2, #32
 800f96a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800f96e:	2303      	movs	r3, #3
 800f970:	e03d      	b.n	800f9ee <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800f972:	69fb      	ldr	r3, [r7, #28]
 800f974:	2b00      	cmp	r3, #0
 800f976:	d10b      	bne.n	800f990 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800f978:	69bb      	ldr	r3, [r7, #24]
 800f97a:	881b      	ldrh	r3, [r3, #0]
 800f97c:	461a      	mov	r2, r3
 800f97e:	68fb      	ldr	r3, [r7, #12]
 800f980:	681b      	ldr	r3, [r3, #0]
 800f982:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800f986:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800f988:	69bb      	ldr	r3, [r7, #24]
 800f98a:	3302      	adds	r3, #2
 800f98c:	61bb      	str	r3, [r7, #24]
 800f98e:	e007      	b.n	800f9a0 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800f990:	69fb      	ldr	r3, [r7, #28]
 800f992:	781a      	ldrb	r2, [r3, #0]
 800f994:	68fb      	ldr	r3, [r7, #12]
 800f996:	681b      	ldr	r3, [r3, #0]
 800f998:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800f99a:	69fb      	ldr	r3, [r7, #28]
 800f99c:	3301      	adds	r3, #1
 800f99e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800f9a0:	68fb      	ldr	r3, [r7, #12]
 800f9a2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800f9a6:	b29b      	uxth	r3, r3
 800f9a8:	3b01      	subs	r3, #1
 800f9aa:	b29a      	uxth	r2, r3
 800f9ac:	68fb      	ldr	r3, [r7, #12]
 800f9ae:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800f9b2:	68fb      	ldr	r3, [r7, #12]
 800f9b4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800f9b8:	b29b      	uxth	r3, r3
 800f9ba:	2b00      	cmp	r3, #0
 800f9bc:	d1c8      	bne.n	800f950 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800f9be:	683b      	ldr	r3, [r7, #0]
 800f9c0:	9300      	str	r3, [sp, #0]
 800f9c2:	697b      	ldr	r3, [r7, #20]
 800f9c4:	2200      	movs	r2, #0
 800f9c6:	2140      	movs	r1, #64	@ 0x40
 800f9c8:	68f8      	ldr	r0, [r7, #12]
 800f9ca:	f001 f84f 	bl	8010a6c <UART_WaitOnFlagUntilTimeout>
 800f9ce:	4603      	mov	r3, r0
 800f9d0:	2b00      	cmp	r3, #0
 800f9d2:	d005      	beq.n	800f9e0 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800f9d4:	68fb      	ldr	r3, [r7, #12]
 800f9d6:	2220      	movs	r2, #32
 800f9d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800f9dc:	2303      	movs	r3, #3
 800f9de:	e006      	b.n	800f9ee <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800f9e0:	68fb      	ldr	r3, [r7, #12]
 800f9e2:	2220      	movs	r2, #32
 800f9e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800f9e8:	2300      	movs	r3, #0
 800f9ea:	e000      	b.n	800f9ee <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800f9ec:	2302      	movs	r3, #2
  }
}
 800f9ee:	4618      	mov	r0, r3
 800f9f0:	3720      	adds	r7, #32
 800f9f2:	46bd      	mov	sp, r7
 800f9f4:	bd80      	pop	{r7, pc}
	...

0800f9f8 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f9f8:	b580      	push	{r7, lr}
 800f9fa:	b08a      	sub	sp, #40	@ 0x28
 800f9fc:	af00      	add	r7, sp, #0
 800f9fe:	60f8      	str	r0, [r7, #12]
 800fa00:	60b9      	str	r1, [r7, #8]
 800fa02:	4613      	mov	r3, r2
 800fa04:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800fa06:	68fb      	ldr	r3, [r7, #12]
 800fa08:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800fa0c:	2b20      	cmp	r3, #32
 800fa0e:	d137      	bne.n	800fa80 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800fa10:	68bb      	ldr	r3, [r7, #8]
 800fa12:	2b00      	cmp	r3, #0
 800fa14:	d002      	beq.n	800fa1c <HAL_UART_Receive_DMA+0x24>
 800fa16:	88fb      	ldrh	r3, [r7, #6]
 800fa18:	2b00      	cmp	r3, #0
 800fa1a:	d101      	bne.n	800fa20 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800fa1c:	2301      	movs	r3, #1
 800fa1e:	e030      	b.n	800fa82 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fa20:	68fb      	ldr	r3, [r7, #12]
 800fa22:	2200      	movs	r2, #0
 800fa24:	66da      	str	r2, [r3, #108]	@ 0x6c

#if defined(LPUART1)
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800fa26:	68fb      	ldr	r3, [r7, #12]
 800fa28:	681b      	ldr	r3, [r3, #0]
 800fa2a:	4a18      	ldr	r2, [pc, #96]	@ (800fa8c <HAL_UART_Receive_DMA+0x94>)
 800fa2c:	4293      	cmp	r3, r2
 800fa2e:	d01f      	beq.n	800fa70 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800fa30:	68fb      	ldr	r3, [r7, #12]
 800fa32:	681b      	ldr	r3, [r3, #0]
 800fa34:	685b      	ldr	r3, [r3, #4]
 800fa36:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800fa3a:	2b00      	cmp	r3, #0
 800fa3c:	d018      	beq.n	800fa70 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800fa3e:	68fb      	ldr	r3, [r7, #12]
 800fa40:	681b      	ldr	r3, [r3, #0]
 800fa42:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa44:	697b      	ldr	r3, [r7, #20]
 800fa46:	e853 3f00 	ldrex	r3, [r3]
 800fa4a:	613b      	str	r3, [r7, #16]
   return(result);
 800fa4c:	693b      	ldr	r3, [r7, #16]
 800fa4e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800fa52:	627b      	str	r3, [r7, #36]	@ 0x24
 800fa54:	68fb      	ldr	r3, [r7, #12]
 800fa56:	681b      	ldr	r3, [r3, #0]
 800fa58:	461a      	mov	r2, r3
 800fa5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa5c:	623b      	str	r3, [r7, #32]
 800fa5e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa60:	69f9      	ldr	r1, [r7, #28]
 800fa62:	6a3a      	ldr	r2, [r7, #32]
 800fa64:	e841 2300 	strex	r3, r2, [r1]
 800fa68:	61bb      	str	r3, [r7, #24]
   return(result);
 800fa6a:	69bb      	ldr	r3, [r7, #24]
 800fa6c:	2b00      	cmp	r3, #0
 800fa6e:	d1e6      	bne.n	800fa3e <HAL_UART_Receive_DMA+0x46>
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
    }
#endif /* LPUART1 */

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800fa70:	88fb      	ldrh	r3, [r7, #6]
 800fa72:	461a      	mov	r2, r3
 800fa74:	68b9      	ldr	r1, [r7, #8]
 800fa76:	68f8      	ldr	r0, [r7, #12]
 800fa78:	f001 f866 	bl	8010b48 <UART_Start_Receive_DMA>
 800fa7c:	4603      	mov	r3, r0
 800fa7e:	e000      	b.n	800fa82 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800fa80:	2302      	movs	r3, #2
  }
}
 800fa82:	4618      	mov	r0, r3
 800fa84:	3728      	adds	r7, #40	@ 0x28
 800fa86:	46bd      	mov	sp, r7
 800fa88:	bd80      	pop	{r7, pc}
 800fa8a:	bf00      	nop
 800fa8c:	40008000 	.word	0x40008000

0800fa90 <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 800fa90:	b580      	push	{r7, lr}
 800fa92:	b0a0      	sub	sp, #128	@ 0x80
 800fa94:	af00      	add	r7, sp, #0
 800fa96:	6078      	str	r0, [r7, #4]
  /* Disable TXE, TC, RXNE, PE, RXFT, TXFT and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	681b      	ldr	r3, [r3, #0]
 800fa9c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa9e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800faa0:	e853 3f00 	ldrex	r3, [r3]
 800faa4:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800faa6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800faa8:	f423 73f0 	bic.w	r3, r3, #480	@ 0x1e0
 800faac:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	681b      	ldr	r3, [r3, #0]
 800fab2:	461a      	mov	r2, r3
 800fab4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800fab6:	66bb      	str	r3, [r7, #104]	@ 0x68
 800fab8:	667a      	str	r2, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800faba:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800fabc:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800fabe:	e841 2300 	strex	r3, r2, [r1]
 800fac2:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800fac4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800fac6:	2b00      	cmp	r3, #0
 800fac8:	d1e6      	bne.n	800fa98 <HAL_UART_Abort+0x8>
                                          USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE);
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	681b      	ldr	r3, [r3, #0]
 800face:	3308      	adds	r3, #8
 800fad0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fad2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800fad4:	e853 3f00 	ldrex	r3, [r3]
 800fad8:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800fada:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fadc:	f023 5384 	bic.w	r3, r3, #276824064	@ 0x10800000
 800fae0:	f023 0301 	bic.w	r3, r3, #1
 800fae4:	67bb      	str	r3, [r7, #120]	@ 0x78
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	681b      	ldr	r3, [r3, #0]
 800faea:	3308      	adds	r3, #8
 800faec:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800faee:	657a      	str	r2, [r7, #84]	@ 0x54
 800faf0:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800faf2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800faf4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800faf6:	e841 2300 	strex	r3, r2, [r1]
 800fafa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800fafc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fafe:	2b00      	cmp	r3, #0
 800fb00:	d1e3      	bne.n	800faca <HAL_UART_Abort+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fb06:	2b01      	cmp	r3, #1
 800fb08:	d118      	bne.n	800fb3c <HAL_UART_Abort+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	681b      	ldr	r3, [r3, #0]
 800fb0e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fb12:	e853 3f00 	ldrex	r3, [r3]
 800fb16:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800fb18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fb1a:	f023 0310 	bic.w	r3, r3, #16
 800fb1e:	677b      	str	r3, [r7, #116]	@ 0x74
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	681b      	ldr	r3, [r3, #0]
 800fb24:	461a      	mov	r2, r3
 800fb26:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800fb28:	643b      	str	r3, [r7, #64]	@ 0x40
 800fb2a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb2c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800fb2e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800fb30:	e841 2300 	strex	r3, r2, [r1]
 800fb34:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800fb36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb38:	2b00      	cmp	r3, #0
 800fb3a:	d1e6      	bne.n	800fb0a <HAL_UART_Abort+0x7a>
  }

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	681b      	ldr	r3, [r3, #0]
 800fb40:	689b      	ldr	r3, [r3, #8]
 800fb42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fb46:	2b80      	cmp	r3, #128	@ 0x80
 800fb48:	d137      	bne.n	800fbba <HAL_UART_Abort+0x12a>
  {
    /* Disable the UART DMA Tx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	681b      	ldr	r3, [r3, #0]
 800fb4e:	3308      	adds	r3, #8
 800fb50:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb52:	6a3b      	ldr	r3, [r7, #32]
 800fb54:	e853 3f00 	ldrex	r3, [r3]
 800fb58:	61fb      	str	r3, [r7, #28]
   return(result);
 800fb5a:	69fb      	ldr	r3, [r7, #28]
 800fb5c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800fb60:	673b      	str	r3, [r7, #112]	@ 0x70
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	681b      	ldr	r3, [r3, #0]
 800fb66:	3308      	adds	r3, #8
 800fb68:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800fb6a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800fb6c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb6e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800fb70:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800fb72:	e841 2300 	strex	r3, r2, [r1]
 800fb76:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800fb78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fb7a:	2b00      	cmp	r3, #0
 800fb7c:	d1e5      	bne.n	800fb4a <HAL_UART_Abort+0xba>

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800fb82:	2b00      	cmp	r3, #0
 800fb84:	d019      	beq.n	800fbba <HAL_UART_Abort+0x12a>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800fb8a:	2200      	movs	r2, #0
 800fb8c:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800fb92:	4618      	mov	r0, r3
 800fb94:	f7f9 f873 	bl	8008c7e <HAL_DMA_Abort>
 800fb98:	4603      	mov	r3, r0
 800fb9a:	2b00      	cmp	r3, #0
 800fb9c:	d00d      	beq.n	800fbba <HAL_UART_Abort+0x12a>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800fba2:	4618      	mov	r0, r3
 800fba4:	f7f9 f9d8 	bl	8008f58 <HAL_DMA_GetError>
 800fba8:	4603      	mov	r3, r0
 800fbaa:	2b20      	cmp	r3, #32
 800fbac:	d105      	bne.n	800fbba <HAL_UART_Abort+0x12a>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	2210      	movs	r2, #16
 800fbb2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 800fbb6:	2303      	movs	r3, #3
 800fbb8:	e073      	b.n	800fca2 <HAL_UART_Abort+0x212>
      }
    }
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	681b      	ldr	r3, [r3, #0]
 800fbbe:	689b      	ldr	r3, [r3, #8]
 800fbc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fbc4:	2b40      	cmp	r3, #64	@ 0x40
 800fbc6:	d13b      	bne.n	800fc40 <HAL_UART_Abort+0x1b0>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fbc8:	687b      	ldr	r3, [r7, #4]
 800fbca:	681b      	ldr	r3, [r3, #0]
 800fbcc:	3308      	adds	r3, #8
 800fbce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fbd0:	68fb      	ldr	r3, [r7, #12]
 800fbd2:	e853 3f00 	ldrex	r3, [r3]
 800fbd6:	60bb      	str	r3, [r7, #8]
   return(result);
 800fbd8:	68bb      	ldr	r3, [r7, #8]
 800fbda:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800fbde:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	681b      	ldr	r3, [r3, #0]
 800fbe4:	3308      	adds	r3, #8
 800fbe6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800fbe8:	61ba      	str	r2, [r7, #24]
 800fbea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fbec:	6979      	ldr	r1, [r7, #20]
 800fbee:	69ba      	ldr	r2, [r7, #24]
 800fbf0:	e841 2300 	strex	r3, r2, [r1]
 800fbf4:	613b      	str	r3, [r7, #16]
   return(result);
 800fbf6:	693b      	ldr	r3, [r7, #16]
 800fbf8:	2b00      	cmp	r3, #0
 800fbfa:	d1e5      	bne.n	800fbc8 <HAL_UART_Abort+0x138>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fc02:	2b00      	cmp	r3, #0
 800fc04:	d01c      	beq.n	800fc40 <HAL_UART_Abort+0x1b0>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fc0c:	2200      	movs	r2, #0
 800fc0e:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fc16:	4618      	mov	r0, r3
 800fc18:	f7f9 f831 	bl	8008c7e <HAL_DMA_Abort>
 800fc1c:	4603      	mov	r3, r0
 800fc1e:	2b00      	cmp	r3, #0
 800fc20:	d00e      	beq.n	800fc40 <HAL_UART_Abort+0x1b0>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fc28:	4618      	mov	r0, r3
 800fc2a:	f7f9 f995 	bl	8008f58 <HAL_DMA_GetError>
 800fc2e:	4603      	mov	r3, r0
 800fc30:	2b20      	cmp	r3, #32
 800fc32:	d105      	bne.n	800fc40 <HAL_UART_Abort+0x1b0>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	2210      	movs	r2, #16
 800fc38:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 800fc3c:	2303      	movs	r3, #3
 800fc3e:	e030      	b.n	800fca2 <HAL_UART_Abort+0x212>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0U;
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	2200      	movs	r2, #0
 800fc44:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
  huart->RxXferCount = 0U;
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	2200      	movs	r2, #0
 800fc4c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	681b      	ldr	r3, [r3, #0]
 800fc54:	220f      	movs	r2, #15
 800fc56:	621a      	str	r2, [r3, #32]

  /* Flush the whole TX FIFO (if needed) */
  if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fc5c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800fc60:	d107      	bne.n	800fc72 <HAL_UART_Abort+0x1e2>
  {
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	681b      	ldr	r3, [r3, #0]
 800fc66:	699a      	ldr	r2, [r3, #24]
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	681b      	ldr	r3, [r3, #0]
 800fc6c:	f042 0210 	orr.w	r2, r2, #16
 800fc70:	619a      	str	r2, [r3, #24]
  }

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800fc72:	687b      	ldr	r3, [r7, #4]
 800fc74:	681b      	ldr	r3, [r3, #0]
 800fc76:	699a      	ldr	r2, [r3, #24]
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	681b      	ldr	r3, [r3, #0]
 800fc7c:	f042 0208 	orr.w	r2, r2, #8
 800fc80:	619a      	str	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	2220      	movs	r2, #32
 800fc86:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	2220      	movs	r2, #32
 800fc8e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fc92:	687b      	ldr	r3, [r7, #4]
 800fc94:	2200      	movs	r2, #0
 800fc96:	66da      	str	r2, [r3, #108]	@ 0x6c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	2200      	movs	r2, #0
 800fc9c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  return HAL_OK;
 800fca0:	2300      	movs	r3, #0
}
 800fca2:	4618      	mov	r0, r3
 800fca4:	3780      	adds	r7, #128	@ 0x80
 800fca6:	46bd      	mov	sp, r7
 800fca8:	bd80      	pop	{r7, pc}
	...

0800fcac <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800fcac:	b580      	push	{r7, lr}
 800fcae:	b0ba      	sub	sp, #232	@ 0xe8
 800fcb0:	af00      	add	r7, sp, #0
 800fcb2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	681b      	ldr	r3, [r3, #0]
 800fcb8:	69db      	ldr	r3, [r3, #28]
 800fcba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	681b      	ldr	r3, [r3, #0]
 800fcc2:	681b      	ldr	r3, [r3, #0]
 800fcc4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	681b      	ldr	r3, [r3, #0]
 800fccc:	689b      	ldr	r3, [r3, #8]
 800fcce:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800fcd2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800fcd6:	f640 030f 	movw	r3, #2063	@ 0x80f
 800fcda:	4013      	ands	r3, r2
 800fcdc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800fce0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800fce4:	2b00      	cmp	r3, #0
 800fce6:	d11b      	bne.n	800fd20 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800fce8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fcec:	f003 0320 	and.w	r3, r3, #32
 800fcf0:	2b00      	cmp	r3, #0
 800fcf2:	d015      	beq.n	800fd20 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800fcf4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fcf8:	f003 0320 	and.w	r3, r3, #32
 800fcfc:	2b00      	cmp	r3, #0
 800fcfe:	d105      	bne.n	800fd0c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800fd00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800fd04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800fd08:	2b00      	cmp	r3, #0
 800fd0a:	d009      	beq.n	800fd20 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fd10:	2b00      	cmp	r3, #0
 800fd12:	f000 8300 	beq.w	8010316 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fd1a:	6878      	ldr	r0, [r7, #4]
 800fd1c:	4798      	blx	r3
      }
      return;
 800fd1e:	e2fa      	b.n	8010316 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800fd20:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800fd24:	2b00      	cmp	r3, #0
 800fd26:	f000 8123 	beq.w	800ff70 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800fd2a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800fd2e:	4b8d      	ldr	r3, [pc, #564]	@ (800ff64 <HAL_UART_IRQHandler+0x2b8>)
 800fd30:	4013      	ands	r3, r2
 800fd32:	2b00      	cmp	r3, #0
 800fd34:	d106      	bne.n	800fd44 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800fd36:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800fd3a:	4b8b      	ldr	r3, [pc, #556]	@ (800ff68 <HAL_UART_IRQHandler+0x2bc>)
 800fd3c:	4013      	ands	r3, r2
 800fd3e:	2b00      	cmp	r3, #0
 800fd40:	f000 8116 	beq.w	800ff70 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800fd44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fd48:	f003 0301 	and.w	r3, r3, #1
 800fd4c:	2b00      	cmp	r3, #0
 800fd4e:	d011      	beq.n	800fd74 <HAL_UART_IRQHandler+0xc8>
 800fd50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fd54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800fd58:	2b00      	cmp	r3, #0
 800fd5a:	d00b      	beq.n	800fd74 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	681b      	ldr	r3, [r3, #0]
 800fd60:	2201      	movs	r2, #1
 800fd62:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fd6a:	f043 0201 	orr.w	r2, r3, #1
 800fd6e:	687b      	ldr	r3, [r7, #4]
 800fd70:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800fd74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fd78:	f003 0302 	and.w	r3, r3, #2
 800fd7c:	2b00      	cmp	r3, #0
 800fd7e:	d011      	beq.n	800fda4 <HAL_UART_IRQHandler+0xf8>
 800fd80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800fd84:	f003 0301 	and.w	r3, r3, #1
 800fd88:	2b00      	cmp	r3, #0
 800fd8a:	d00b      	beq.n	800fda4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	681b      	ldr	r3, [r3, #0]
 800fd90:	2202      	movs	r2, #2
 800fd92:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fd9a:	f043 0204 	orr.w	r2, r3, #4
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800fda4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fda8:	f003 0304 	and.w	r3, r3, #4
 800fdac:	2b00      	cmp	r3, #0
 800fdae:	d011      	beq.n	800fdd4 <HAL_UART_IRQHandler+0x128>
 800fdb0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800fdb4:	f003 0301 	and.w	r3, r3, #1
 800fdb8:	2b00      	cmp	r3, #0
 800fdba:	d00b      	beq.n	800fdd4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800fdbc:	687b      	ldr	r3, [r7, #4]
 800fdbe:	681b      	ldr	r3, [r3, #0]
 800fdc0:	2204      	movs	r2, #4
 800fdc2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fdca:	f043 0202 	orr.w	r2, r3, #2
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800fdd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fdd8:	f003 0308 	and.w	r3, r3, #8
 800fddc:	2b00      	cmp	r3, #0
 800fdde:	d017      	beq.n	800fe10 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800fde0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fde4:	f003 0320 	and.w	r3, r3, #32
 800fde8:	2b00      	cmp	r3, #0
 800fdea:	d105      	bne.n	800fdf8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800fdec:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800fdf0:	4b5c      	ldr	r3, [pc, #368]	@ (800ff64 <HAL_UART_IRQHandler+0x2b8>)
 800fdf2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800fdf4:	2b00      	cmp	r3, #0
 800fdf6:	d00b      	beq.n	800fe10 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	681b      	ldr	r3, [r3, #0]
 800fdfc:	2208      	movs	r2, #8
 800fdfe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fe06:	f043 0208 	orr.w	r2, r3, #8
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800fe10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fe14:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800fe18:	2b00      	cmp	r3, #0
 800fe1a:	d012      	beq.n	800fe42 <HAL_UART_IRQHandler+0x196>
 800fe1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fe20:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800fe24:	2b00      	cmp	r3, #0
 800fe26:	d00c      	beq.n	800fe42 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	681b      	ldr	r3, [r3, #0]
 800fe2c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800fe30:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800fe32:	687b      	ldr	r3, [r7, #4]
 800fe34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fe38:	f043 0220 	orr.w	r2, r3, #32
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fe48:	2b00      	cmp	r3, #0
 800fe4a:	f000 8266 	beq.w	801031a <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800fe4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fe52:	f003 0320 	and.w	r3, r3, #32
 800fe56:	2b00      	cmp	r3, #0
 800fe58:	d013      	beq.n	800fe82 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800fe5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fe5e:	f003 0320 	and.w	r3, r3, #32
 800fe62:	2b00      	cmp	r3, #0
 800fe64:	d105      	bne.n	800fe72 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800fe66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800fe6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800fe6e:	2b00      	cmp	r3, #0
 800fe70:	d007      	beq.n	800fe82 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800fe72:	687b      	ldr	r3, [r7, #4]
 800fe74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fe76:	2b00      	cmp	r3, #0
 800fe78:	d003      	beq.n	800fe82 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fe7e:	6878      	ldr	r0, [r7, #4]
 800fe80:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fe88:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	681b      	ldr	r3, [r3, #0]
 800fe90:	689b      	ldr	r3, [r3, #8]
 800fe92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fe96:	2b40      	cmp	r3, #64	@ 0x40
 800fe98:	d005      	beq.n	800fea6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800fe9a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800fe9e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800fea2:	2b00      	cmp	r3, #0
 800fea4:	d054      	beq.n	800ff50 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800fea6:	6878      	ldr	r0, [r7, #4]
 800fea8:	f000 ff35 	bl	8010d16 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	681b      	ldr	r3, [r3, #0]
 800feb0:	689b      	ldr	r3, [r3, #8]
 800feb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800feb6:	2b40      	cmp	r3, #64	@ 0x40
 800feb8:	d146      	bne.n	800ff48 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	681b      	ldr	r3, [r3, #0]
 800febe:	3308      	adds	r3, #8
 800fec0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fec4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800fec8:	e853 3f00 	ldrex	r3, [r3]
 800fecc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800fed0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800fed4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800fed8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	681b      	ldr	r3, [r3, #0]
 800fee0:	3308      	adds	r3, #8
 800fee2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800fee6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800feea:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800feee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800fef2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800fef6:	e841 2300 	strex	r3, r2, [r1]
 800fefa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800fefe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800ff02:	2b00      	cmp	r3, #0
 800ff04:	d1d9      	bne.n	800feba <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800ff06:	687b      	ldr	r3, [r7, #4]
 800ff08:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ff0c:	2b00      	cmp	r3, #0
 800ff0e:	d017      	beq.n	800ff40 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ff16:	4a15      	ldr	r2, [pc, #84]	@ (800ff6c <HAL_UART_IRQHandler+0x2c0>)
 800ff18:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ff20:	4618      	mov	r0, r3
 800ff22:	f7f8 ff0b 	bl	8008d3c <HAL_DMA_Abort_IT>
 800ff26:	4603      	mov	r3, r0
 800ff28:	2b00      	cmp	r3, #0
 800ff2a:	d019      	beq.n	800ff60 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ff32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ff34:	687a      	ldr	r2, [r7, #4]
 800ff36:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800ff3a:	4610      	mov	r0, r2
 800ff3c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ff3e:	e00f      	b.n	800ff60 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ff40:	6878      	ldr	r0, [r7, #4]
 800ff42:	f000 fa09 	bl	8010358 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ff46:	e00b      	b.n	800ff60 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ff48:	6878      	ldr	r0, [r7, #4]
 800ff4a:	f000 fa05 	bl	8010358 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ff4e:	e007      	b.n	800ff60 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ff50:	6878      	ldr	r0, [r7, #4]
 800ff52:	f000 fa01 	bl	8010358 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	2200      	movs	r2, #0
 800ff5a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800ff5e:	e1dc      	b.n	801031a <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ff60:	bf00      	nop
    return;
 800ff62:	e1da      	b.n	801031a <HAL_UART_IRQHandler+0x66e>
 800ff64:	10000001 	.word	0x10000001
 800ff68:	04000120 	.word	0x04000120
 800ff6c:	08010fcd 	.word	0x08010fcd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ff74:	2b01      	cmp	r3, #1
 800ff76:	f040 8170 	bne.w	801025a <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800ff7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ff7e:	f003 0310 	and.w	r3, r3, #16
 800ff82:	2b00      	cmp	r3, #0
 800ff84:	f000 8169 	beq.w	801025a <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800ff88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ff8c:	f003 0310 	and.w	r3, r3, #16
 800ff90:	2b00      	cmp	r3, #0
 800ff92:	f000 8162 	beq.w	801025a <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	681b      	ldr	r3, [r3, #0]
 800ff9a:	2210      	movs	r2, #16
 800ff9c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	681b      	ldr	r3, [r3, #0]
 800ffa2:	689b      	ldr	r3, [r3, #8]
 800ffa4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ffa8:	2b40      	cmp	r3, #64	@ 0x40
 800ffaa:	f040 80d8 	bne.w	801015e <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ffb4:	681b      	ldr	r3, [r3, #0]
 800ffb6:	685b      	ldr	r3, [r3, #4]
 800ffb8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800ffbc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800ffc0:	2b00      	cmp	r3, #0
 800ffc2:	f000 80af 	beq.w	8010124 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800ffc6:	687b      	ldr	r3, [r7, #4]
 800ffc8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ffcc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800ffd0:	429a      	cmp	r2, r3
 800ffd2:	f080 80a7 	bcs.w	8010124 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800ffdc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ffe6:	681b      	ldr	r3, [r3, #0]
 800ffe8:	681b      	ldr	r3, [r3, #0]
 800ffea:	f003 0320 	and.w	r3, r3, #32
 800ffee:	2b00      	cmp	r3, #0
 800fff0:	f040 8087 	bne.w	8010102 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	681b      	ldr	r3, [r3, #0]
 800fff8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fffc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8010000:	e853 3f00 	ldrex	r3, [r3]
 8010004:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8010008:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 801000c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8010010:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	681b      	ldr	r3, [r3, #0]
 8010018:	461a      	mov	r2, r3
 801001a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 801001e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8010022:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010026:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 801002a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 801002e:	e841 2300 	strex	r3, r2, [r1]
 8010032:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8010036:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801003a:	2b00      	cmp	r3, #0
 801003c:	d1da      	bne.n	800fff4 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	681b      	ldr	r3, [r3, #0]
 8010042:	3308      	adds	r3, #8
 8010044:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010046:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8010048:	e853 3f00 	ldrex	r3, [r3]
 801004c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 801004e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8010050:	f023 0301 	bic.w	r3, r3, #1
 8010054:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	681b      	ldr	r3, [r3, #0]
 801005c:	3308      	adds	r3, #8
 801005e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8010062:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8010066:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010068:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 801006a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 801006e:	e841 2300 	strex	r3, r2, [r1]
 8010072:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8010074:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8010076:	2b00      	cmp	r3, #0
 8010078:	d1e1      	bne.n	801003e <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	681b      	ldr	r3, [r3, #0]
 801007e:	3308      	adds	r3, #8
 8010080:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010082:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010084:	e853 3f00 	ldrex	r3, [r3]
 8010088:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 801008a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801008c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010090:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	681b      	ldr	r3, [r3, #0]
 8010098:	3308      	adds	r3, #8
 801009a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 801009e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80100a0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80100a2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80100a4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80100a6:	e841 2300 	strex	r3, r2, [r1]
 80100aa:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80100ac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80100ae:	2b00      	cmp	r3, #0
 80100b0:	d1e3      	bne.n	801007a <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	2220      	movs	r2, #32
 80100b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	2200      	movs	r2, #0
 80100be:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80100c0:	687b      	ldr	r3, [r7, #4]
 80100c2:	681b      	ldr	r3, [r3, #0]
 80100c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80100c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80100c8:	e853 3f00 	ldrex	r3, [r3]
 80100cc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80100ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80100d0:	f023 0310 	bic.w	r3, r3, #16
 80100d4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	681b      	ldr	r3, [r3, #0]
 80100dc:	461a      	mov	r2, r3
 80100de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80100e2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80100e4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80100e6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80100e8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80100ea:	e841 2300 	strex	r3, r2, [r1]
 80100ee:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80100f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80100f2:	2b00      	cmp	r3, #0
 80100f4:	d1e4      	bne.n	80100c0 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80100fc:	4618      	mov	r0, r3
 80100fe:	f7f8 fdbe 	bl	8008c7e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	2202      	movs	r2, #2
 8010106:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8010108:	687b      	ldr	r3, [r7, #4]
 801010a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 801010e:	687b      	ldr	r3, [r7, #4]
 8010110:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8010114:	b29b      	uxth	r3, r3
 8010116:	1ad3      	subs	r3, r2, r3
 8010118:	b29b      	uxth	r3, r3
 801011a:	4619      	mov	r1, r3
 801011c:	6878      	ldr	r0, [r7, #4]
 801011e:	f000 f925 	bl	801036c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8010122:	e0fc      	b.n	801031e <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801012a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 801012e:	429a      	cmp	r2, r3
 8010130:	f040 80f5 	bne.w	801031e <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801013a:	681b      	ldr	r3, [r3, #0]
 801013c:	681b      	ldr	r3, [r3, #0]
 801013e:	f003 0320 	and.w	r3, r3, #32
 8010142:	2b20      	cmp	r3, #32
 8010144:	f040 80eb 	bne.w	801031e <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8010148:	687b      	ldr	r3, [r7, #4]
 801014a:	2202      	movs	r2, #2
 801014c:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8010154:	4619      	mov	r1, r3
 8010156:	6878      	ldr	r0, [r7, #4]
 8010158:	f000 f908 	bl	801036c <HAL_UARTEx_RxEventCallback>
      return;
 801015c:	e0df      	b.n	801031e <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 801015e:	687b      	ldr	r3, [r7, #4]
 8010160:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801016a:	b29b      	uxth	r3, r3
 801016c:	1ad3      	subs	r3, r2, r3
 801016e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8010172:	687b      	ldr	r3, [r7, #4]
 8010174:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8010178:	b29b      	uxth	r3, r3
 801017a:	2b00      	cmp	r3, #0
 801017c:	f000 80d1 	beq.w	8010322 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8010180:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8010184:	2b00      	cmp	r3, #0
 8010186:	f000 80cc 	beq.w	8010322 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801018a:	687b      	ldr	r3, [r7, #4]
 801018c:	681b      	ldr	r3, [r3, #0]
 801018e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010190:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010192:	e853 3f00 	ldrex	r3, [r3]
 8010196:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8010198:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801019a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801019e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80101a2:	687b      	ldr	r3, [r7, #4]
 80101a4:	681b      	ldr	r3, [r3, #0]
 80101a6:	461a      	mov	r2, r3
 80101a8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80101ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80101ae:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80101b0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80101b2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80101b4:	e841 2300 	strex	r3, r2, [r1]
 80101b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80101ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80101bc:	2b00      	cmp	r3, #0
 80101be:	d1e4      	bne.n	801018a <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	681b      	ldr	r3, [r3, #0]
 80101c4:	3308      	adds	r3, #8
 80101c6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80101c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80101ca:	e853 3f00 	ldrex	r3, [r3]
 80101ce:	623b      	str	r3, [r7, #32]
   return(result);
 80101d0:	6a3b      	ldr	r3, [r7, #32]
 80101d2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80101d6:	f023 0301 	bic.w	r3, r3, #1
 80101da:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	681b      	ldr	r3, [r3, #0]
 80101e2:	3308      	adds	r3, #8
 80101e4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80101e8:	633a      	str	r2, [r7, #48]	@ 0x30
 80101ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80101ec:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80101ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80101f0:	e841 2300 	strex	r3, r2, [r1]
 80101f4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80101f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80101f8:	2b00      	cmp	r3, #0
 80101fa:	d1e1      	bne.n	80101c0 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	2220      	movs	r2, #32
 8010200:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010204:	687b      	ldr	r3, [r7, #4]
 8010206:	2200      	movs	r2, #0
 8010208:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801020a:	687b      	ldr	r3, [r7, #4]
 801020c:	2200      	movs	r2, #0
 801020e:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	681b      	ldr	r3, [r3, #0]
 8010214:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010216:	693b      	ldr	r3, [r7, #16]
 8010218:	e853 3f00 	ldrex	r3, [r3]
 801021c:	60fb      	str	r3, [r7, #12]
   return(result);
 801021e:	68fb      	ldr	r3, [r7, #12]
 8010220:	f023 0310 	bic.w	r3, r3, #16
 8010224:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8010228:	687b      	ldr	r3, [r7, #4]
 801022a:	681b      	ldr	r3, [r3, #0]
 801022c:	461a      	mov	r2, r3
 801022e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8010232:	61fb      	str	r3, [r7, #28]
 8010234:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010236:	69b9      	ldr	r1, [r7, #24]
 8010238:	69fa      	ldr	r2, [r7, #28]
 801023a:	e841 2300 	strex	r3, r2, [r1]
 801023e:	617b      	str	r3, [r7, #20]
   return(result);
 8010240:	697b      	ldr	r3, [r7, #20]
 8010242:	2b00      	cmp	r3, #0
 8010244:	d1e4      	bne.n	8010210 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8010246:	687b      	ldr	r3, [r7, #4]
 8010248:	2202      	movs	r2, #2
 801024a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 801024c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8010250:	4619      	mov	r1, r3
 8010252:	6878      	ldr	r0, [r7, #4]
 8010254:	f000 f88a 	bl	801036c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8010258:	e063      	b.n	8010322 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 801025a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801025e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8010262:	2b00      	cmp	r3, #0
 8010264:	d00e      	beq.n	8010284 <HAL_UART_IRQHandler+0x5d8>
 8010266:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801026a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 801026e:	2b00      	cmp	r3, #0
 8010270:	d008      	beq.n	8010284 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	681b      	ldr	r3, [r3, #0]
 8010276:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 801027a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 801027c:	6878      	ldr	r0, [r7, #4]
 801027e:	f000 fee2 	bl	8011046 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8010282:	e051      	b.n	8010328 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8010284:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010288:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801028c:	2b00      	cmp	r3, #0
 801028e:	d014      	beq.n	80102ba <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8010290:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010294:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010298:	2b00      	cmp	r3, #0
 801029a:	d105      	bne.n	80102a8 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 801029c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80102a0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80102a4:	2b00      	cmp	r3, #0
 80102a6:	d008      	beq.n	80102ba <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80102ac:	2b00      	cmp	r3, #0
 80102ae:	d03a      	beq.n	8010326 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 80102b0:	687b      	ldr	r3, [r7, #4]
 80102b2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80102b4:	6878      	ldr	r0, [r7, #4]
 80102b6:	4798      	blx	r3
    }
    return;
 80102b8:	e035      	b.n	8010326 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80102ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80102be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80102c2:	2b00      	cmp	r3, #0
 80102c4:	d009      	beq.n	80102da <HAL_UART_IRQHandler+0x62e>
 80102c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80102ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80102ce:	2b00      	cmp	r3, #0
 80102d0:	d003      	beq.n	80102da <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 80102d2:	6878      	ldr	r0, [r7, #4]
 80102d4:	f000 fe8c 	bl	8010ff0 <UART_EndTransmit_IT>
    return;
 80102d8:	e026      	b.n	8010328 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80102da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80102de:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80102e2:	2b00      	cmp	r3, #0
 80102e4:	d009      	beq.n	80102fa <HAL_UART_IRQHandler+0x64e>
 80102e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80102ea:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80102ee:	2b00      	cmp	r3, #0
 80102f0:	d003      	beq.n	80102fa <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80102f2:	6878      	ldr	r0, [r7, #4]
 80102f4:	f000 febb 	bl	801106e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80102f8:	e016      	b.n	8010328 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80102fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80102fe:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8010302:	2b00      	cmp	r3, #0
 8010304:	d010      	beq.n	8010328 <HAL_UART_IRQHandler+0x67c>
 8010306:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801030a:	2b00      	cmp	r3, #0
 801030c:	da0c      	bge.n	8010328 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 801030e:	6878      	ldr	r0, [r7, #4]
 8010310:	f000 fea3 	bl	801105a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8010314:	e008      	b.n	8010328 <HAL_UART_IRQHandler+0x67c>
      return;
 8010316:	bf00      	nop
 8010318:	e006      	b.n	8010328 <HAL_UART_IRQHandler+0x67c>
    return;
 801031a:	bf00      	nop
 801031c:	e004      	b.n	8010328 <HAL_UART_IRQHandler+0x67c>
      return;
 801031e:	bf00      	nop
 8010320:	e002      	b.n	8010328 <HAL_UART_IRQHandler+0x67c>
      return;
 8010322:	bf00      	nop
 8010324:	e000      	b.n	8010328 <HAL_UART_IRQHandler+0x67c>
    return;
 8010326:	bf00      	nop
  }
}
 8010328:	37e8      	adds	r7, #232	@ 0xe8
 801032a:	46bd      	mov	sp, r7
 801032c:	bd80      	pop	{r7, pc}
 801032e:	bf00      	nop

08010330 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8010330:	b480      	push	{r7}
 8010332:	b083      	sub	sp, #12
 8010334:	af00      	add	r7, sp, #0
 8010336:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8010338:	bf00      	nop
 801033a:	370c      	adds	r7, #12
 801033c:	46bd      	mov	sp, r7
 801033e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010342:	4770      	bx	lr

08010344 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8010344:	b480      	push	{r7}
 8010346:	b083      	sub	sp, #12
 8010348:	af00      	add	r7, sp, #0
 801034a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 801034c:	bf00      	nop
 801034e:	370c      	adds	r7, #12
 8010350:	46bd      	mov	sp, r7
 8010352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010356:	4770      	bx	lr

08010358 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8010358:	b480      	push	{r7}
 801035a:	b083      	sub	sp, #12
 801035c:	af00      	add	r7, sp, #0
 801035e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8010360:	bf00      	nop
 8010362:	370c      	adds	r7, #12
 8010364:	46bd      	mov	sp, r7
 8010366:	f85d 7b04 	ldr.w	r7, [sp], #4
 801036a:	4770      	bx	lr

0801036c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 801036c:	b480      	push	{r7}
 801036e:	b083      	sub	sp, #12
 8010370:	af00      	add	r7, sp, #0
 8010372:	6078      	str	r0, [r7, #4]
 8010374:	460b      	mov	r3, r1
 8010376:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8010378:	bf00      	nop
 801037a:	370c      	adds	r7, #12
 801037c:	46bd      	mov	sp, r7
 801037e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010382:	4770      	bx	lr

08010384 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8010384:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010388:	b08c      	sub	sp, #48	@ 0x30
 801038a:	af00      	add	r7, sp, #0
 801038c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801038e:	2300      	movs	r3, #0
 8010390:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8010394:	697b      	ldr	r3, [r7, #20]
 8010396:	689a      	ldr	r2, [r3, #8]
 8010398:	697b      	ldr	r3, [r7, #20]
 801039a:	691b      	ldr	r3, [r3, #16]
 801039c:	431a      	orrs	r2, r3
 801039e:	697b      	ldr	r3, [r7, #20]
 80103a0:	695b      	ldr	r3, [r3, #20]
 80103a2:	431a      	orrs	r2, r3
 80103a4:	697b      	ldr	r3, [r7, #20]
 80103a6:	69db      	ldr	r3, [r3, #28]
 80103a8:	4313      	orrs	r3, r2
 80103aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80103ac:	697b      	ldr	r3, [r7, #20]
 80103ae:	681b      	ldr	r3, [r3, #0]
 80103b0:	681a      	ldr	r2, [r3, #0]
 80103b2:	4baf      	ldr	r3, [pc, #700]	@ (8010670 <UART_SetConfig+0x2ec>)
 80103b4:	4013      	ands	r3, r2
 80103b6:	697a      	ldr	r2, [r7, #20]
 80103b8:	6812      	ldr	r2, [r2, #0]
 80103ba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80103bc:	430b      	orrs	r3, r1
 80103be:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80103c0:	697b      	ldr	r3, [r7, #20]
 80103c2:	681b      	ldr	r3, [r3, #0]
 80103c4:	685b      	ldr	r3, [r3, #4]
 80103c6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80103ca:	697b      	ldr	r3, [r7, #20]
 80103cc:	68da      	ldr	r2, [r3, #12]
 80103ce:	697b      	ldr	r3, [r7, #20]
 80103d0:	681b      	ldr	r3, [r3, #0]
 80103d2:	430a      	orrs	r2, r1
 80103d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80103d6:	697b      	ldr	r3, [r7, #20]
 80103d8:	699b      	ldr	r3, [r3, #24]
 80103da:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80103dc:	697b      	ldr	r3, [r7, #20]
 80103de:	681b      	ldr	r3, [r3, #0]
 80103e0:	4aa4      	ldr	r2, [pc, #656]	@ (8010674 <UART_SetConfig+0x2f0>)
 80103e2:	4293      	cmp	r3, r2
 80103e4:	d004      	beq.n	80103f0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80103e6:	697b      	ldr	r3, [r7, #20]
 80103e8:	6a1b      	ldr	r3, [r3, #32]
 80103ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80103ec:	4313      	orrs	r3, r2
 80103ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80103f0:	697b      	ldr	r3, [r7, #20]
 80103f2:	681b      	ldr	r3, [r3, #0]
 80103f4:	689b      	ldr	r3, [r3, #8]
 80103f6:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80103fa:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80103fe:	697a      	ldr	r2, [r7, #20]
 8010400:	6812      	ldr	r2, [r2, #0]
 8010402:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010404:	430b      	orrs	r3, r1
 8010406:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8010408:	697b      	ldr	r3, [r7, #20]
 801040a:	681b      	ldr	r3, [r3, #0]
 801040c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801040e:	f023 010f 	bic.w	r1, r3, #15
 8010412:	697b      	ldr	r3, [r7, #20]
 8010414:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010416:	697b      	ldr	r3, [r7, #20]
 8010418:	681b      	ldr	r3, [r3, #0]
 801041a:	430a      	orrs	r2, r1
 801041c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801041e:	697b      	ldr	r3, [r7, #20]
 8010420:	681b      	ldr	r3, [r3, #0]
 8010422:	4a95      	ldr	r2, [pc, #596]	@ (8010678 <UART_SetConfig+0x2f4>)
 8010424:	4293      	cmp	r3, r2
 8010426:	d125      	bne.n	8010474 <UART_SetConfig+0xf0>
 8010428:	2003      	movs	r0, #3
 801042a:	f7ff f9a7 	bl	800f77c <LL_RCC_GetUSARTClockSource>
 801042e:	4603      	mov	r3, r0
 8010430:	2b03      	cmp	r3, #3
 8010432:	d81b      	bhi.n	801046c <UART_SetConfig+0xe8>
 8010434:	a201      	add	r2, pc, #4	@ (adr r2, 801043c <UART_SetConfig+0xb8>)
 8010436:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801043a:	bf00      	nop
 801043c:	0801044d 	.word	0x0801044d
 8010440:	0801045d 	.word	0x0801045d
 8010444:	08010455 	.word	0x08010455
 8010448:	08010465 	.word	0x08010465
 801044c:	2301      	movs	r3, #1
 801044e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010452:	e042      	b.n	80104da <UART_SetConfig+0x156>
 8010454:	2302      	movs	r3, #2
 8010456:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801045a:	e03e      	b.n	80104da <UART_SetConfig+0x156>
 801045c:	2304      	movs	r3, #4
 801045e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010462:	e03a      	b.n	80104da <UART_SetConfig+0x156>
 8010464:	2308      	movs	r3, #8
 8010466:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801046a:	e036      	b.n	80104da <UART_SetConfig+0x156>
 801046c:	2310      	movs	r3, #16
 801046e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010472:	e032      	b.n	80104da <UART_SetConfig+0x156>
 8010474:	697b      	ldr	r3, [r7, #20]
 8010476:	681b      	ldr	r3, [r3, #0]
 8010478:	4a7e      	ldr	r2, [pc, #504]	@ (8010674 <UART_SetConfig+0x2f0>)
 801047a:	4293      	cmp	r3, r2
 801047c:	d12a      	bne.n	80104d4 <UART_SetConfig+0x150>
 801047e:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8010482:	f7ff f98b 	bl	800f79c <LL_RCC_GetLPUARTClockSource>
 8010486:	4603      	mov	r3, r0
 8010488:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 801048c:	d01a      	beq.n	80104c4 <UART_SetConfig+0x140>
 801048e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8010492:	d81b      	bhi.n	80104cc <UART_SetConfig+0x148>
 8010494:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8010498:	d00c      	beq.n	80104b4 <UART_SetConfig+0x130>
 801049a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801049e:	d815      	bhi.n	80104cc <UART_SetConfig+0x148>
 80104a0:	2b00      	cmp	r3, #0
 80104a2:	d003      	beq.n	80104ac <UART_SetConfig+0x128>
 80104a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80104a8:	d008      	beq.n	80104bc <UART_SetConfig+0x138>
 80104aa:	e00f      	b.n	80104cc <UART_SetConfig+0x148>
 80104ac:	2300      	movs	r3, #0
 80104ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80104b2:	e012      	b.n	80104da <UART_SetConfig+0x156>
 80104b4:	2302      	movs	r3, #2
 80104b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80104ba:	e00e      	b.n	80104da <UART_SetConfig+0x156>
 80104bc:	2304      	movs	r3, #4
 80104be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80104c2:	e00a      	b.n	80104da <UART_SetConfig+0x156>
 80104c4:	2308      	movs	r3, #8
 80104c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80104ca:	e006      	b.n	80104da <UART_SetConfig+0x156>
 80104cc:	2310      	movs	r3, #16
 80104ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80104d2:	e002      	b.n	80104da <UART_SetConfig+0x156>
 80104d4:	2310      	movs	r3, #16
 80104d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80104da:	697b      	ldr	r3, [r7, #20]
 80104dc:	681b      	ldr	r3, [r3, #0]
 80104de:	4a65      	ldr	r2, [pc, #404]	@ (8010674 <UART_SetConfig+0x2f0>)
 80104e0:	4293      	cmp	r3, r2
 80104e2:	f040 8097 	bne.w	8010614 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80104e6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80104ea:	2b08      	cmp	r3, #8
 80104ec:	d823      	bhi.n	8010536 <UART_SetConfig+0x1b2>
 80104ee:	a201      	add	r2, pc, #4	@ (adr r2, 80104f4 <UART_SetConfig+0x170>)
 80104f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80104f4:	08010519 	.word	0x08010519
 80104f8:	08010537 	.word	0x08010537
 80104fc:	08010521 	.word	0x08010521
 8010500:	08010537 	.word	0x08010537
 8010504:	08010527 	.word	0x08010527
 8010508:	08010537 	.word	0x08010537
 801050c:	08010537 	.word	0x08010537
 8010510:	08010537 	.word	0x08010537
 8010514:	0801052f 	.word	0x0801052f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010518:	f7fc fbf6 	bl	800cd08 <HAL_RCC_GetPCLK1Freq>
 801051c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 801051e:	e010      	b.n	8010542 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8010520:	4b56      	ldr	r3, [pc, #344]	@ (801067c <UART_SetConfig+0x2f8>)
 8010522:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8010524:	e00d      	b.n	8010542 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8010526:	f7fc fb6f 	bl	800cc08 <HAL_RCC_GetSysClockFreq>
 801052a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 801052c:	e009      	b.n	8010542 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801052e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8010532:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8010534:	e005      	b.n	8010542 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8010536:	2300      	movs	r3, #0
 8010538:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 801053a:	2301      	movs	r3, #1
 801053c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8010540:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8010542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010544:	2b00      	cmp	r3, #0
 8010546:	f000 812b 	beq.w	80107a0 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 801054a:	697b      	ldr	r3, [r7, #20]
 801054c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801054e:	4a4c      	ldr	r2, [pc, #304]	@ (8010680 <UART_SetConfig+0x2fc>)
 8010550:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010554:	461a      	mov	r2, r3
 8010556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010558:	fbb3 f3f2 	udiv	r3, r3, r2
 801055c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801055e:	697b      	ldr	r3, [r7, #20]
 8010560:	685a      	ldr	r2, [r3, #4]
 8010562:	4613      	mov	r3, r2
 8010564:	005b      	lsls	r3, r3, #1
 8010566:	4413      	add	r3, r2
 8010568:	69ba      	ldr	r2, [r7, #24]
 801056a:	429a      	cmp	r2, r3
 801056c:	d305      	bcc.n	801057a <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 801056e:	697b      	ldr	r3, [r7, #20]
 8010570:	685b      	ldr	r3, [r3, #4]
 8010572:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010574:	69ba      	ldr	r2, [r7, #24]
 8010576:	429a      	cmp	r2, r3
 8010578:	d903      	bls.n	8010582 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 801057a:	2301      	movs	r3, #1
 801057c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8010580:	e10e      	b.n	80107a0 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010584:	2200      	movs	r2, #0
 8010586:	60bb      	str	r3, [r7, #8]
 8010588:	60fa      	str	r2, [r7, #12]
 801058a:	697b      	ldr	r3, [r7, #20]
 801058c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801058e:	4a3c      	ldr	r2, [pc, #240]	@ (8010680 <UART_SetConfig+0x2fc>)
 8010590:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010594:	b29b      	uxth	r3, r3
 8010596:	2200      	movs	r2, #0
 8010598:	603b      	str	r3, [r7, #0]
 801059a:	607a      	str	r2, [r7, #4]
 801059c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80105a0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80105a4:	f7f0 fb48 	bl	8000c38 <__aeabi_uldivmod>
 80105a8:	4602      	mov	r2, r0
 80105aa:	460b      	mov	r3, r1
 80105ac:	4610      	mov	r0, r2
 80105ae:	4619      	mov	r1, r3
 80105b0:	f04f 0200 	mov.w	r2, #0
 80105b4:	f04f 0300 	mov.w	r3, #0
 80105b8:	020b      	lsls	r3, r1, #8
 80105ba:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80105be:	0202      	lsls	r2, r0, #8
 80105c0:	6979      	ldr	r1, [r7, #20]
 80105c2:	6849      	ldr	r1, [r1, #4]
 80105c4:	0849      	lsrs	r1, r1, #1
 80105c6:	2000      	movs	r0, #0
 80105c8:	460c      	mov	r4, r1
 80105ca:	4605      	mov	r5, r0
 80105cc:	eb12 0804 	adds.w	r8, r2, r4
 80105d0:	eb43 0905 	adc.w	r9, r3, r5
 80105d4:	697b      	ldr	r3, [r7, #20]
 80105d6:	685b      	ldr	r3, [r3, #4]
 80105d8:	2200      	movs	r2, #0
 80105da:	469a      	mov	sl, r3
 80105dc:	4693      	mov	fp, r2
 80105de:	4652      	mov	r2, sl
 80105e0:	465b      	mov	r3, fp
 80105e2:	4640      	mov	r0, r8
 80105e4:	4649      	mov	r1, r9
 80105e6:	f7f0 fb27 	bl	8000c38 <__aeabi_uldivmod>
 80105ea:	4602      	mov	r2, r0
 80105ec:	460b      	mov	r3, r1
 80105ee:	4613      	mov	r3, r2
 80105f0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80105f2:	6a3b      	ldr	r3, [r7, #32]
 80105f4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80105f8:	d308      	bcc.n	801060c <UART_SetConfig+0x288>
 80105fa:	6a3b      	ldr	r3, [r7, #32]
 80105fc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8010600:	d204      	bcs.n	801060c <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8010602:	697b      	ldr	r3, [r7, #20]
 8010604:	681b      	ldr	r3, [r3, #0]
 8010606:	6a3a      	ldr	r2, [r7, #32]
 8010608:	60da      	str	r2, [r3, #12]
 801060a:	e0c9      	b.n	80107a0 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 801060c:	2301      	movs	r3, #1
 801060e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8010612:	e0c5      	b.n	80107a0 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010614:	697b      	ldr	r3, [r7, #20]
 8010616:	69db      	ldr	r3, [r3, #28]
 8010618:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801061c:	d16d      	bne.n	80106fa <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 801061e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8010622:	3b01      	subs	r3, #1
 8010624:	2b07      	cmp	r3, #7
 8010626:	d82d      	bhi.n	8010684 <UART_SetConfig+0x300>
 8010628:	a201      	add	r2, pc, #4	@ (adr r2, 8010630 <UART_SetConfig+0x2ac>)
 801062a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801062e:	bf00      	nop
 8010630:	08010651 	.word	0x08010651
 8010634:	08010659 	.word	0x08010659
 8010638:	08010685 	.word	0x08010685
 801063c:	0801065f 	.word	0x0801065f
 8010640:	08010685 	.word	0x08010685
 8010644:	08010685 	.word	0x08010685
 8010648:	08010685 	.word	0x08010685
 801064c:	08010667 	.word	0x08010667
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010650:	f7fc fb70 	bl	800cd34 <HAL_RCC_GetPCLK2Freq>
 8010654:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8010656:	e01b      	b.n	8010690 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8010658:	4b08      	ldr	r3, [pc, #32]	@ (801067c <UART_SetConfig+0x2f8>)
 801065a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 801065c:	e018      	b.n	8010690 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801065e:	f7fc fad3 	bl	800cc08 <HAL_RCC_GetSysClockFreq>
 8010662:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8010664:	e014      	b.n	8010690 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010666:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801066a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 801066c:	e010      	b.n	8010690 <UART_SetConfig+0x30c>
 801066e:	bf00      	nop
 8010670:	cfff69f3 	.word	0xcfff69f3
 8010674:	40008000 	.word	0x40008000
 8010678:	40013800 	.word	0x40013800
 801067c:	00f42400 	.word	0x00f42400
 8010680:	08022270 	.word	0x08022270
      default:
        pclk = 0U;
 8010684:	2300      	movs	r3, #0
 8010686:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8010688:	2301      	movs	r3, #1
 801068a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 801068e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8010690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010692:	2b00      	cmp	r3, #0
 8010694:	f000 8084 	beq.w	80107a0 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010698:	697b      	ldr	r3, [r7, #20]
 801069a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801069c:	4a4b      	ldr	r2, [pc, #300]	@ (80107cc <UART_SetConfig+0x448>)
 801069e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80106a2:	461a      	mov	r2, r3
 80106a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80106a6:	fbb3 f3f2 	udiv	r3, r3, r2
 80106aa:	005a      	lsls	r2, r3, #1
 80106ac:	697b      	ldr	r3, [r7, #20]
 80106ae:	685b      	ldr	r3, [r3, #4]
 80106b0:	085b      	lsrs	r3, r3, #1
 80106b2:	441a      	add	r2, r3
 80106b4:	697b      	ldr	r3, [r7, #20]
 80106b6:	685b      	ldr	r3, [r3, #4]
 80106b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80106bc:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80106be:	6a3b      	ldr	r3, [r7, #32]
 80106c0:	2b0f      	cmp	r3, #15
 80106c2:	d916      	bls.n	80106f2 <UART_SetConfig+0x36e>
 80106c4:	6a3b      	ldr	r3, [r7, #32]
 80106c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80106ca:	d212      	bcs.n	80106f2 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80106cc:	6a3b      	ldr	r3, [r7, #32]
 80106ce:	b29b      	uxth	r3, r3
 80106d0:	f023 030f 	bic.w	r3, r3, #15
 80106d4:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80106d6:	6a3b      	ldr	r3, [r7, #32]
 80106d8:	085b      	lsrs	r3, r3, #1
 80106da:	b29b      	uxth	r3, r3
 80106dc:	f003 0307 	and.w	r3, r3, #7
 80106e0:	b29a      	uxth	r2, r3
 80106e2:	8bfb      	ldrh	r3, [r7, #30]
 80106e4:	4313      	orrs	r3, r2
 80106e6:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80106e8:	697b      	ldr	r3, [r7, #20]
 80106ea:	681b      	ldr	r3, [r3, #0]
 80106ec:	8bfa      	ldrh	r2, [r7, #30]
 80106ee:	60da      	str	r2, [r3, #12]
 80106f0:	e056      	b.n	80107a0 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 80106f2:	2301      	movs	r3, #1
 80106f4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80106f8:	e052      	b.n	80107a0 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80106fa:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80106fe:	3b01      	subs	r3, #1
 8010700:	2b07      	cmp	r3, #7
 8010702:	d822      	bhi.n	801074a <UART_SetConfig+0x3c6>
 8010704:	a201      	add	r2, pc, #4	@ (adr r2, 801070c <UART_SetConfig+0x388>)
 8010706:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801070a:	bf00      	nop
 801070c:	0801072d 	.word	0x0801072d
 8010710:	08010735 	.word	0x08010735
 8010714:	0801074b 	.word	0x0801074b
 8010718:	0801073b 	.word	0x0801073b
 801071c:	0801074b 	.word	0x0801074b
 8010720:	0801074b 	.word	0x0801074b
 8010724:	0801074b 	.word	0x0801074b
 8010728:	08010743 	.word	0x08010743
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801072c:	f7fc fb02 	bl	800cd34 <HAL_RCC_GetPCLK2Freq>
 8010730:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8010732:	e010      	b.n	8010756 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8010734:	4b26      	ldr	r3, [pc, #152]	@ (80107d0 <UART_SetConfig+0x44c>)
 8010736:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8010738:	e00d      	b.n	8010756 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801073a:	f7fc fa65 	bl	800cc08 <HAL_RCC_GetSysClockFreq>
 801073e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8010740:	e009      	b.n	8010756 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010742:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8010746:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8010748:	e005      	b.n	8010756 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 801074a:	2300      	movs	r3, #0
 801074c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 801074e:	2301      	movs	r3, #1
 8010750:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8010754:	bf00      	nop
    }

    if (pclk != 0U)
 8010756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010758:	2b00      	cmp	r3, #0
 801075a:	d021      	beq.n	80107a0 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801075c:	697b      	ldr	r3, [r7, #20]
 801075e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010760:	4a1a      	ldr	r2, [pc, #104]	@ (80107cc <UART_SetConfig+0x448>)
 8010762:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010766:	461a      	mov	r2, r3
 8010768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801076a:	fbb3 f2f2 	udiv	r2, r3, r2
 801076e:	697b      	ldr	r3, [r7, #20]
 8010770:	685b      	ldr	r3, [r3, #4]
 8010772:	085b      	lsrs	r3, r3, #1
 8010774:	441a      	add	r2, r3
 8010776:	697b      	ldr	r3, [r7, #20]
 8010778:	685b      	ldr	r3, [r3, #4]
 801077a:	fbb2 f3f3 	udiv	r3, r2, r3
 801077e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010780:	6a3b      	ldr	r3, [r7, #32]
 8010782:	2b0f      	cmp	r3, #15
 8010784:	d909      	bls.n	801079a <UART_SetConfig+0x416>
 8010786:	6a3b      	ldr	r3, [r7, #32]
 8010788:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801078c:	d205      	bcs.n	801079a <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801078e:	6a3b      	ldr	r3, [r7, #32]
 8010790:	b29a      	uxth	r2, r3
 8010792:	697b      	ldr	r3, [r7, #20]
 8010794:	681b      	ldr	r3, [r3, #0]
 8010796:	60da      	str	r2, [r3, #12]
 8010798:	e002      	b.n	80107a0 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 801079a:	2301      	movs	r3, #1
 801079c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80107a0:	697b      	ldr	r3, [r7, #20]
 80107a2:	2201      	movs	r2, #1
 80107a4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80107a8:	697b      	ldr	r3, [r7, #20]
 80107aa:	2201      	movs	r2, #1
 80107ac:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80107b0:	697b      	ldr	r3, [r7, #20]
 80107b2:	2200      	movs	r2, #0
 80107b4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80107b6:	697b      	ldr	r3, [r7, #20]
 80107b8:	2200      	movs	r2, #0
 80107ba:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80107bc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80107c0:	4618      	mov	r0, r3
 80107c2:	3730      	adds	r7, #48	@ 0x30
 80107c4:	46bd      	mov	sp, r7
 80107c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80107ca:	bf00      	nop
 80107cc:	08022270 	.word	0x08022270
 80107d0:	00f42400 	.word	0x00f42400

080107d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80107d4:	b480      	push	{r7}
 80107d6:	b083      	sub	sp, #12
 80107d8:	af00      	add	r7, sp, #0
 80107da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80107dc:	687b      	ldr	r3, [r7, #4]
 80107de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80107e0:	f003 0308 	and.w	r3, r3, #8
 80107e4:	2b00      	cmp	r3, #0
 80107e6:	d00a      	beq.n	80107fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80107e8:	687b      	ldr	r3, [r7, #4]
 80107ea:	681b      	ldr	r3, [r3, #0]
 80107ec:	685b      	ldr	r3, [r3, #4]
 80107ee:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80107f6:	687b      	ldr	r3, [r7, #4]
 80107f8:	681b      	ldr	r3, [r3, #0]
 80107fa:	430a      	orrs	r2, r1
 80107fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80107fe:	687b      	ldr	r3, [r7, #4]
 8010800:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010802:	f003 0301 	and.w	r3, r3, #1
 8010806:	2b00      	cmp	r3, #0
 8010808:	d00a      	beq.n	8010820 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801080a:	687b      	ldr	r3, [r7, #4]
 801080c:	681b      	ldr	r3, [r3, #0]
 801080e:	685b      	ldr	r3, [r3, #4]
 8010810:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8010814:	687b      	ldr	r3, [r7, #4]
 8010816:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010818:	687b      	ldr	r3, [r7, #4]
 801081a:	681b      	ldr	r3, [r3, #0]
 801081c:	430a      	orrs	r2, r1
 801081e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010824:	f003 0302 	and.w	r3, r3, #2
 8010828:	2b00      	cmp	r3, #0
 801082a:	d00a      	beq.n	8010842 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801082c:	687b      	ldr	r3, [r7, #4]
 801082e:	681b      	ldr	r3, [r3, #0]
 8010830:	685b      	ldr	r3, [r3, #4]
 8010832:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8010836:	687b      	ldr	r3, [r7, #4]
 8010838:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801083a:	687b      	ldr	r3, [r7, #4]
 801083c:	681b      	ldr	r3, [r3, #0]
 801083e:	430a      	orrs	r2, r1
 8010840:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8010842:	687b      	ldr	r3, [r7, #4]
 8010844:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010846:	f003 0304 	and.w	r3, r3, #4
 801084a:	2b00      	cmp	r3, #0
 801084c:	d00a      	beq.n	8010864 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801084e:	687b      	ldr	r3, [r7, #4]
 8010850:	681b      	ldr	r3, [r3, #0]
 8010852:	685b      	ldr	r3, [r3, #4]
 8010854:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8010858:	687b      	ldr	r3, [r7, #4]
 801085a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801085c:	687b      	ldr	r3, [r7, #4]
 801085e:	681b      	ldr	r3, [r3, #0]
 8010860:	430a      	orrs	r2, r1
 8010862:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010868:	f003 0310 	and.w	r3, r3, #16
 801086c:	2b00      	cmp	r3, #0
 801086e:	d00a      	beq.n	8010886 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8010870:	687b      	ldr	r3, [r7, #4]
 8010872:	681b      	ldr	r3, [r3, #0]
 8010874:	689b      	ldr	r3, [r3, #8]
 8010876:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 801087a:	687b      	ldr	r3, [r7, #4]
 801087c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801087e:	687b      	ldr	r3, [r7, #4]
 8010880:	681b      	ldr	r3, [r3, #0]
 8010882:	430a      	orrs	r2, r1
 8010884:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8010886:	687b      	ldr	r3, [r7, #4]
 8010888:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801088a:	f003 0320 	and.w	r3, r3, #32
 801088e:	2b00      	cmp	r3, #0
 8010890:	d00a      	beq.n	80108a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	681b      	ldr	r3, [r3, #0]
 8010896:	689b      	ldr	r3, [r3, #8]
 8010898:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80108a0:	687b      	ldr	r3, [r7, #4]
 80108a2:	681b      	ldr	r3, [r3, #0]
 80108a4:	430a      	orrs	r2, r1
 80108a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80108ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80108b0:	2b00      	cmp	r3, #0
 80108b2:	d01a      	beq.n	80108ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80108b4:	687b      	ldr	r3, [r7, #4]
 80108b6:	681b      	ldr	r3, [r3, #0]
 80108b8:	685b      	ldr	r3, [r3, #4]
 80108ba:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80108be:	687b      	ldr	r3, [r7, #4]
 80108c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80108c2:	687b      	ldr	r3, [r7, #4]
 80108c4:	681b      	ldr	r3, [r3, #0]
 80108c6:	430a      	orrs	r2, r1
 80108c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80108ca:	687b      	ldr	r3, [r7, #4]
 80108cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80108ce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80108d2:	d10a      	bne.n	80108ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	681b      	ldr	r3, [r3, #0]
 80108d8:	685b      	ldr	r3, [r3, #4]
 80108da:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80108de:	687b      	ldr	r3, [r7, #4]
 80108e0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80108e2:	687b      	ldr	r3, [r7, #4]
 80108e4:	681b      	ldr	r3, [r3, #0]
 80108e6:	430a      	orrs	r2, r1
 80108e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80108ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80108f2:	2b00      	cmp	r3, #0
 80108f4:	d00a      	beq.n	801090c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80108f6:	687b      	ldr	r3, [r7, #4]
 80108f8:	681b      	ldr	r3, [r3, #0]
 80108fa:	685b      	ldr	r3, [r3, #4]
 80108fc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8010904:	687b      	ldr	r3, [r7, #4]
 8010906:	681b      	ldr	r3, [r3, #0]
 8010908:	430a      	orrs	r2, r1
 801090a:	605a      	str	r2, [r3, #4]
  }
}
 801090c:	bf00      	nop
 801090e:	370c      	adds	r7, #12
 8010910:	46bd      	mov	sp, r7
 8010912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010916:	4770      	bx	lr

08010918 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8010918:	b580      	push	{r7, lr}
 801091a:	b098      	sub	sp, #96	@ 0x60
 801091c:	af02      	add	r7, sp, #8
 801091e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	2200      	movs	r2, #0
 8010924:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8010928:	f7f6 fdb2 	bl	8007490 <HAL_GetTick>
 801092c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801092e:	687b      	ldr	r3, [r7, #4]
 8010930:	681b      	ldr	r3, [r3, #0]
 8010932:	681b      	ldr	r3, [r3, #0]
 8010934:	f003 0308 	and.w	r3, r3, #8
 8010938:	2b08      	cmp	r3, #8
 801093a:	d12f      	bne.n	801099c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801093c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8010940:	9300      	str	r3, [sp, #0]
 8010942:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010944:	2200      	movs	r2, #0
 8010946:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 801094a:	6878      	ldr	r0, [r7, #4]
 801094c:	f000 f88e 	bl	8010a6c <UART_WaitOnFlagUntilTimeout>
 8010950:	4603      	mov	r3, r0
 8010952:	2b00      	cmp	r3, #0
 8010954:	d022      	beq.n	801099c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8010956:	687b      	ldr	r3, [r7, #4]
 8010958:	681b      	ldr	r3, [r3, #0]
 801095a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801095c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801095e:	e853 3f00 	ldrex	r3, [r3]
 8010962:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8010964:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010966:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801096a:	653b      	str	r3, [r7, #80]	@ 0x50
 801096c:	687b      	ldr	r3, [r7, #4]
 801096e:	681b      	ldr	r3, [r3, #0]
 8010970:	461a      	mov	r2, r3
 8010972:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010974:	647b      	str	r3, [r7, #68]	@ 0x44
 8010976:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010978:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801097a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801097c:	e841 2300 	strex	r3, r2, [r1]
 8010980:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8010982:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010984:	2b00      	cmp	r3, #0
 8010986:	d1e6      	bne.n	8010956 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	2220      	movs	r2, #32
 801098c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8010990:	687b      	ldr	r3, [r7, #4]
 8010992:	2200      	movs	r2, #0
 8010994:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010998:	2303      	movs	r3, #3
 801099a:	e063      	b.n	8010a64 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801099c:	687b      	ldr	r3, [r7, #4]
 801099e:	681b      	ldr	r3, [r3, #0]
 80109a0:	681b      	ldr	r3, [r3, #0]
 80109a2:	f003 0304 	and.w	r3, r3, #4
 80109a6:	2b04      	cmp	r3, #4
 80109a8:	d149      	bne.n	8010a3e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80109aa:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80109ae:	9300      	str	r3, [sp, #0]
 80109b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80109b2:	2200      	movs	r2, #0
 80109b4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80109b8:	6878      	ldr	r0, [r7, #4]
 80109ba:	f000 f857 	bl	8010a6c <UART_WaitOnFlagUntilTimeout>
 80109be:	4603      	mov	r3, r0
 80109c0:	2b00      	cmp	r3, #0
 80109c2:	d03c      	beq.n	8010a3e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	681b      	ldr	r3, [r3, #0]
 80109c8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80109ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80109cc:	e853 3f00 	ldrex	r3, [r3]
 80109d0:	623b      	str	r3, [r7, #32]
   return(result);
 80109d2:	6a3b      	ldr	r3, [r7, #32]
 80109d4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80109d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80109da:	687b      	ldr	r3, [r7, #4]
 80109dc:	681b      	ldr	r3, [r3, #0]
 80109de:	461a      	mov	r2, r3
 80109e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80109e2:	633b      	str	r3, [r7, #48]	@ 0x30
 80109e4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80109e6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80109e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80109ea:	e841 2300 	strex	r3, r2, [r1]
 80109ee:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80109f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80109f2:	2b00      	cmp	r3, #0
 80109f4:	d1e6      	bne.n	80109c4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80109f6:	687b      	ldr	r3, [r7, #4]
 80109f8:	681b      	ldr	r3, [r3, #0]
 80109fa:	3308      	adds	r3, #8
 80109fc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80109fe:	693b      	ldr	r3, [r7, #16]
 8010a00:	e853 3f00 	ldrex	r3, [r3]
 8010a04:	60fb      	str	r3, [r7, #12]
   return(result);
 8010a06:	68fb      	ldr	r3, [r7, #12]
 8010a08:	f023 0301 	bic.w	r3, r3, #1
 8010a0c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010a0e:	687b      	ldr	r3, [r7, #4]
 8010a10:	681b      	ldr	r3, [r3, #0]
 8010a12:	3308      	adds	r3, #8
 8010a14:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010a16:	61fa      	str	r2, [r7, #28]
 8010a18:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a1a:	69b9      	ldr	r1, [r7, #24]
 8010a1c:	69fa      	ldr	r2, [r7, #28]
 8010a1e:	e841 2300 	strex	r3, r2, [r1]
 8010a22:	617b      	str	r3, [r7, #20]
   return(result);
 8010a24:	697b      	ldr	r3, [r7, #20]
 8010a26:	2b00      	cmp	r3, #0
 8010a28:	d1e5      	bne.n	80109f6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8010a2a:	687b      	ldr	r3, [r7, #4]
 8010a2c:	2220      	movs	r2, #32
 8010a2e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8010a32:	687b      	ldr	r3, [r7, #4]
 8010a34:	2200      	movs	r2, #0
 8010a36:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010a3a:	2303      	movs	r3, #3
 8010a3c:	e012      	b.n	8010a64 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8010a3e:	687b      	ldr	r3, [r7, #4]
 8010a40:	2220      	movs	r2, #32
 8010a42:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8010a46:	687b      	ldr	r3, [r7, #4]
 8010a48:	2220      	movs	r2, #32
 8010a4a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010a4e:	687b      	ldr	r3, [r7, #4]
 8010a50:	2200      	movs	r2, #0
 8010a52:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010a54:	687b      	ldr	r3, [r7, #4]
 8010a56:	2200      	movs	r2, #0
 8010a58:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8010a5a:	687b      	ldr	r3, [r7, #4]
 8010a5c:	2200      	movs	r2, #0
 8010a5e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010a62:	2300      	movs	r3, #0
}
 8010a64:	4618      	mov	r0, r3
 8010a66:	3758      	adds	r7, #88	@ 0x58
 8010a68:	46bd      	mov	sp, r7
 8010a6a:	bd80      	pop	{r7, pc}

08010a6c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8010a6c:	b580      	push	{r7, lr}
 8010a6e:	b084      	sub	sp, #16
 8010a70:	af00      	add	r7, sp, #0
 8010a72:	60f8      	str	r0, [r7, #12]
 8010a74:	60b9      	str	r1, [r7, #8]
 8010a76:	603b      	str	r3, [r7, #0]
 8010a78:	4613      	mov	r3, r2
 8010a7a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010a7c:	e04f      	b.n	8010b1e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010a7e:	69bb      	ldr	r3, [r7, #24]
 8010a80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010a84:	d04b      	beq.n	8010b1e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010a86:	f7f6 fd03 	bl	8007490 <HAL_GetTick>
 8010a8a:	4602      	mov	r2, r0
 8010a8c:	683b      	ldr	r3, [r7, #0]
 8010a8e:	1ad3      	subs	r3, r2, r3
 8010a90:	69ba      	ldr	r2, [r7, #24]
 8010a92:	429a      	cmp	r2, r3
 8010a94:	d302      	bcc.n	8010a9c <UART_WaitOnFlagUntilTimeout+0x30>
 8010a96:	69bb      	ldr	r3, [r7, #24]
 8010a98:	2b00      	cmp	r3, #0
 8010a9a:	d101      	bne.n	8010aa0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8010a9c:	2303      	movs	r3, #3
 8010a9e:	e04e      	b.n	8010b3e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8010aa0:	68fb      	ldr	r3, [r7, #12]
 8010aa2:	681b      	ldr	r3, [r3, #0]
 8010aa4:	681b      	ldr	r3, [r3, #0]
 8010aa6:	f003 0304 	and.w	r3, r3, #4
 8010aaa:	2b00      	cmp	r3, #0
 8010aac:	d037      	beq.n	8010b1e <UART_WaitOnFlagUntilTimeout+0xb2>
 8010aae:	68bb      	ldr	r3, [r7, #8]
 8010ab0:	2b80      	cmp	r3, #128	@ 0x80
 8010ab2:	d034      	beq.n	8010b1e <UART_WaitOnFlagUntilTimeout+0xb2>
 8010ab4:	68bb      	ldr	r3, [r7, #8]
 8010ab6:	2b40      	cmp	r3, #64	@ 0x40
 8010ab8:	d031      	beq.n	8010b1e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8010aba:	68fb      	ldr	r3, [r7, #12]
 8010abc:	681b      	ldr	r3, [r3, #0]
 8010abe:	69db      	ldr	r3, [r3, #28]
 8010ac0:	f003 0308 	and.w	r3, r3, #8
 8010ac4:	2b08      	cmp	r3, #8
 8010ac6:	d110      	bne.n	8010aea <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8010ac8:	68fb      	ldr	r3, [r7, #12]
 8010aca:	681b      	ldr	r3, [r3, #0]
 8010acc:	2208      	movs	r2, #8
 8010ace:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8010ad0:	68f8      	ldr	r0, [r7, #12]
 8010ad2:	f000 f920 	bl	8010d16 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8010ad6:	68fb      	ldr	r3, [r7, #12]
 8010ad8:	2208      	movs	r2, #8
 8010ada:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8010ade:	68fb      	ldr	r3, [r7, #12]
 8010ae0:	2200      	movs	r2, #0
 8010ae2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8010ae6:	2301      	movs	r3, #1
 8010ae8:	e029      	b.n	8010b3e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8010aea:	68fb      	ldr	r3, [r7, #12]
 8010aec:	681b      	ldr	r3, [r3, #0]
 8010aee:	69db      	ldr	r3, [r3, #28]
 8010af0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8010af4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8010af8:	d111      	bne.n	8010b1e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010afa:	68fb      	ldr	r3, [r7, #12]
 8010afc:	681b      	ldr	r3, [r3, #0]
 8010afe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8010b02:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8010b04:	68f8      	ldr	r0, [r7, #12]
 8010b06:	f000 f906 	bl	8010d16 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8010b0a:	68fb      	ldr	r3, [r7, #12]
 8010b0c:	2220      	movs	r2, #32
 8010b0e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8010b12:	68fb      	ldr	r3, [r7, #12]
 8010b14:	2200      	movs	r2, #0
 8010b16:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8010b1a:	2303      	movs	r3, #3
 8010b1c:	e00f      	b.n	8010b3e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010b1e:	68fb      	ldr	r3, [r7, #12]
 8010b20:	681b      	ldr	r3, [r3, #0]
 8010b22:	69da      	ldr	r2, [r3, #28]
 8010b24:	68bb      	ldr	r3, [r7, #8]
 8010b26:	4013      	ands	r3, r2
 8010b28:	68ba      	ldr	r2, [r7, #8]
 8010b2a:	429a      	cmp	r2, r3
 8010b2c:	bf0c      	ite	eq
 8010b2e:	2301      	moveq	r3, #1
 8010b30:	2300      	movne	r3, #0
 8010b32:	b2db      	uxtb	r3, r3
 8010b34:	461a      	mov	r2, r3
 8010b36:	79fb      	ldrb	r3, [r7, #7]
 8010b38:	429a      	cmp	r2, r3
 8010b3a:	d0a0      	beq.n	8010a7e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8010b3c:	2300      	movs	r3, #0
}
 8010b3e:	4618      	mov	r0, r3
 8010b40:	3710      	adds	r7, #16
 8010b42:	46bd      	mov	sp, r7
 8010b44:	bd80      	pop	{r7, pc}
	...

08010b48 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010b48:	b580      	push	{r7, lr}
 8010b4a:	b096      	sub	sp, #88	@ 0x58
 8010b4c:	af00      	add	r7, sp, #0
 8010b4e:	60f8      	str	r0, [r7, #12]
 8010b50:	60b9      	str	r1, [r7, #8]
 8010b52:	4613      	mov	r3, r2
 8010b54:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8010b56:	68fb      	ldr	r3, [r7, #12]
 8010b58:	68ba      	ldr	r2, [r7, #8]
 8010b5a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8010b5c:	68fb      	ldr	r3, [r7, #12]
 8010b5e:	88fa      	ldrh	r2, [r7, #6]
 8010b60:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010b64:	68fb      	ldr	r3, [r7, #12]
 8010b66:	2200      	movs	r2, #0
 8010b68:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8010b6c:	68fb      	ldr	r3, [r7, #12]
 8010b6e:	2222      	movs	r2, #34	@ 0x22
 8010b70:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8010b74:	68fb      	ldr	r3, [r7, #12]
 8010b76:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010b7a:	2b00      	cmp	r3, #0
 8010b7c:	d02d      	beq.n	8010bda <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8010b7e:	68fb      	ldr	r3, [r7, #12]
 8010b80:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010b84:	4a40      	ldr	r2, [pc, #256]	@ (8010c88 <UART_Start_Receive_DMA+0x140>)
 8010b86:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8010b88:	68fb      	ldr	r3, [r7, #12]
 8010b8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010b8e:	4a3f      	ldr	r2, [pc, #252]	@ (8010c8c <UART_Start_Receive_DMA+0x144>)
 8010b90:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8010b92:	68fb      	ldr	r3, [r7, #12]
 8010b94:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010b98:	4a3d      	ldr	r2, [pc, #244]	@ (8010c90 <UART_Start_Receive_DMA+0x148>)
 8010b9a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8010b9c:	68fb      	ldr	r3, [r7, #12]
 8010b9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010ba2:	2200      	movs	r2, #0
 8010ba4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8010ba6:	68fb      	ldr	r3, [r7, #12]
 8010ba8:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8010bac:	68fb      	ldr	r3, [r7, #12]
 8010bae:	681b      	ldr	r3, [r3, #0]
 8010bb0:	3324      	adds	r3, #36	@ 0x24
 8010bb2:	4619      	mov	r1, r3
 8010bb4:	68fb      	ldr	r3, [r7, #12]
 8010bb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010bb8:	461a      	mov	r2, r3
 8010bba:	88fb      	ldrh	r3, [r7, #6]
 8010bbc:	f7f7 ffe4 	bl	8008b88 <HAL_DMA_Start_IT>
 8010bc0:	4603      	mov	r3, r0
 8010bc2:	2b00      	cmp	r3, #0
 8010bc4:	d009      	beq.n	8010bda <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8010bc6:	68fb      	ldr	r3, [r7, #12]
 8010bc8:	2210      	movs	r2, #16
 8010bca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8010bce:	68fb      	ldr	r3, [r7, #12]
 8010bd0:	2220      	movs	r2, #32
 8010bd2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8010bd6:	2301      	movs	r3, #1
 8010bd8:	e051      	b.n	8010c7e <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8010bda:	68fb      	ldr	r3, [r7, #12]
 8010bdc:	691b      	ldr	r3, [r3, #16]
 8010bde:	2b00      	cmp	r3, #0
 8010be0:	d018      	beq.n	8010c14 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010be2:	68fb      	ldr	r3, [r7, #12]
 8010be4:	681b      	ldr	r3, [r3, #0]
 8010be6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010be8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010bea:	e853 3f00 	ldrex	r3, [r3]
 8010bee:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8010bf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010bf2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8010bf6:	657b      	str	r3, [r7, #84]	@ 0x54
 8010bf8:	68fb      	ldr	r3, [r7, #12]
 8010bfa:	681b      	ldr	r3, [r3, #0]
 8010bfc:	461a      	mov	r2, r3
 8010bfe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010c00:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010c02:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010c04:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8010c06:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010c08:	e841 2300 	strex	r3, r2, [r1]
 8010c0c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8010c0e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010c10:	2b00      	cmp	r3, #0
 8010c12:	d1e6      	bne.n	8010be2 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010c14:	68fb      	ldr	r3, [r7, #12]
 8010c16:	681b      	ldr	r3, [r3, #0]
 8010c18:	3308      	adds	r3, #8
 8010c1a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010c1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010c1e:	e853 3f00 	ldrex	r3, [r3]
 8010c22:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8010c24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c26:	f043 0301 	orr.w	r3, r3, #1
 8010c2a:	653b      	str	r3, [r7, #80]	@ 0x50
 8010c2c:	68fb      	ldr	r3, [r7, #12]
 8010c2e:	681b      	ldr	r3, [r3, #0]
 8010c30:	3308      	adds	r3, #8
 8010c32:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8010c34:	637a      	str	r2, [r7, #52]	@ 0x34
 8010c36:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010c38:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8010c3a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010c3c:	e841 2300 	strex	r3, r2, [r1]
 8010c40:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8010c42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010c44:	2b00      	cmp	r3, #0
 8010c46:	d1e5      	bne.n	8010c14 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010c48:	68fb      	ldr	r3, [r7, #12]
 8010c4a:	681b      	ldr	r3, [r3, #0]
 8010c4c:	3308      	adds	r3, #8
 8010c4e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010c50:	697b      	ldr	r3, [r7, #20]
 8010c52:	e853 3f00 	ldrex	r3, [r3]
 8010c56:	613b      	str	r3, [r7, #16]
   return(result);
 8010c58:	693b      	ldr	r3, [r7, #16]
 8010c5a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010c5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010c60:	68fb      	ldr	r3, [r7, #12]
 8010c62:	681b      	ldr	r3, [r3, #0]
 8010c64:	3308      	adds	r3, #8
 8010c66:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8010c68:	623a      	str	r2, [r7, #32]
 8010c6a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010c6c:	69f9      	ldr	r1, [r7, #28]
 8010c6e:	6a3a      	ldr	r2, [r7, #32]
 8010c70:	e841 2300 	strex	r3, r2, [r1]
 8010c74:	61bb      	str	r3, [r7, #24]
   return(result);
 8010c76:	69bb      	ldr	r3, [r7, #24]
 8010c78:	2b00      	cmp	r3, #0
 8010c7a:	d1e5      	bne.n	8010c48 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8010c7c:	2300      	movs	r3, #0
}
 8010c7e:	4618      	mov	r0, r3
 8010c80:	3758      	adds	r7, #88	@ 0x58
 8010c82:	46bd      	mov	sp, r7
 8010c84:	bd80      	pop	{r7, pc}
 8010c86:	bf00      	nop
 8010c88:	08010de3 	.word	0x08010de3
 8010c8c:	08010f0f 	.word	0x08010f0f
 8010c90:	08010f4d 	.word	0x08010f4d

08010c94 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8010c94:	b480      	push	{r7}
 8010c96:	b08f      	sub	sp, #60	@ 0x3c
 8010c98:	af00      	add	r7, sp, #0
 8010c9a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8010c9c:	687b      	ldr	r3, [r7, #4]
 8010c9e:	681b      	ldr	r3, [r3, #0]
 8010ca0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010ca2:	6a3b      	ldr	r3, [r7, #32]
 8010ca4:	e853 3f00 	ldrex	r3, [r3]
 8010ca8:	61fb      	str	r3, [r7, #28]
   return(result);
 8010caa:	69fb      	ldr	r3, [r7, #28]
 8010cac:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8010cb0:	637b      	str	r3, [r7, #52]	@ 0x34
 8010cb2:	687b      	ldr	r3, [r7, #4]
 8010cb4:	681b      	ldr	r3, [r3, #0]
 8010cb6:	461a      	mov	r2, r3
 8010cb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010cba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010cbc:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010cbe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010cc0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010cc2:	e841 2300 	strex	r3, r2, [r1]
 8010cc6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8010cc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010cca:	2b00      	cmp	r3, #0
 8010ccc:	d1e6      	bne.n	8010c9c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8010cce:	687b      	ldr	r3, [r7, #4]
 8010cd0:	681b      	ldr	r3, [r3, #0]
 8010cd2:	3308      	adds	r3, #8
 8010cd4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010cd6:	68fb      	ldr	r3, [r7, #12]
 8010cd8:	e853 3f00 	ldrex	r3, [r3]
 8010cdc:	60bb      	str	r3, [r7, #8]
   return(result);
 8010cde:	68bb      	ldr	r3, [r7, #8]
 8010ce0:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8010ce4:	633b      	str	r3, [r7, #48]	@ 0x30
 8010ce6:	687b      	ldr	r3, [r7, #4]
 8010ce8:	681b      	ldr	r3, [r3, #0]
 8010cea:	3308      	adds	r3, #8
 8010cec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010cee:	61ba      	str	r2, [r7, #24]
 8010cf0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010cf2:	6979      	ldr	r1, [r7, #20]
 8010cf4:	69ba      	ldr	r2, [r7, #24]
 8010cf6:	e841 2300 	strex	r3, r2, [r1]
 8010cfa:	613b      	str	r3, [r7, #16]
   return(result);
 8010cfc:	693b      	ldr	r3, [r7, #16]
 8010cfe:	2b00      	cmp	r3, #0
 8010d00:	d1e5      	bne.n	8010cce <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010d02:	687b      	ldr	r3, [r7, #4]
 8010d04:	2220      	movs	r2, #32
 8010d06:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8010d0a:	bf00      	nop
 8010d0c:	373c      	adds	r7, #60	@ 0x3c
 8010d0e:	46bd      	mov	sp, r7
 8010d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d14:	4770      	bx	lr

08010d16 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8010d16:	b480      	push	{r7}
 8010d18:	b095      	sub	sp, #84	@ 0x54
 8010d1a:	af00      	add	r7, sp, #0
 8010d1c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010d1e:	687b      	ldr	r3, [r7, #4]
 8010d20:	681b      	ldr	r3, [r3, #0]
 8010d22:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010d24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010d26:	e853 3f00 	ldrex	r3, [r3]
 8010d2a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8010d2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010d2e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8010d32:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010d34:	687b      	ldr	r3, [r7, #4]
 8010d36:	681b      	ldr	r3, [r3, #0]
 8010d38:	461a      	mov	r2, r3
 8010d3a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010d3c:	643b      	str	r3, [r7, #64]	@ 0x40
 8010d3e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010d40:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8010d42:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8010d44:	e841 2300 	strex	r3, r2, [r1]
 8010d48:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8010d4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d4c:	2b00      	cmp	r3, #0
 8010d4e:	d1e6      	bne.n	8010d1e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010d50:	687b      	ldr	r3, [r7, #4]
 8010d52:	681b      	ldr	r3, [r3, #0]
 8010d54:	3308      	adds	r3, #8
 8010d56:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010d58:	6a3b      	ldr	r3, [r7, #32]
 8010d5a:	e853 3f00 	ldrex	r3, [r3]
 8010d5e:	61fb      	str	r3, [r7, #28]
   return(result);
 8010d60:	69fb      	ldr	r3, [r7, #28]
 8010d62:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8010d66:	f023 0301 	bic.w	r3, r3, #1
 8010d6a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010d6c:	687b      	ldr	r3, [r7, #4]
 8010d6e:	681b      	ldr	r3, [r3, #0]
 8010d70:	3308      	adds	r3, #8
 8010d72:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010d74:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8010d76:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010d78:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010d7a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010d7c:	e841 2300 	strex	r3, r2, [r1]
 8010d80:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8010d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d84:	2b00      	cmp	r3, #0
 8010d86:	d1e3      	bne.n	8010d50 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010d88:	687b      	ldr	r3, [r7, #4]
 8010d8a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010d8c:	2b01      	cmp	r3, #1
 8010d8e:	d118      	bne.n	8010dc2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010d90:	687b      	ldr	r3, [r7, #4]
 8010d92:	681b      	ldr	r3, [r3, #0]
 8010d94:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010d96:	68fb      	ldr	r3, [r7, #12]
 8010d98:	e853 3f00 	ldrex	r3, [r3]
 8010d9c:	60bb      	str	r3, [r7, #8]
   return(result);
 8010d9e:	68bb      	ldr	r3, [r7, #8]
 8010da0:	f023 0310 	bic.w	r3, r3, #16
 8010da4:	647b      	str	r3, [r7, #68]	@ 0x44
 8010da6:	687b      	ldr	r3, [r7, #4]
 8010da8:	681b      	ldr	r3, [r3, #0]
 8010daa:	461a      	mov	r2, r3
 8010dac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010dae:	61bb      	str	r3, [r7, #24]
 8010db0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010db2:	6979      	ldr	r1, [r7, #20]
 8010db4:	69ba      	ldr	r2, [r7, #24]
 8010db6:	e841 2300 	strex	r3, r2, [r1]
 8010dba:	613b      	str	r3, [r7, #16]
   return(result);
 8010dbc:	693b      	ldr	r3, [r7, #16]
 8010dbe:	2b00      	cmp	r3, #0
 8010dc0:	d1e6      	bne.n	8010d90 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8010dc2:	687b      	ldr	r3, [r7, #4]
 8010dc4:	2220      	movs	r2, #32
 8010dc6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	2200      	movs	r2, #0
 8010dce:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8010dd0:	687b      	ldr	r3, [r7, #4]
 8010dd2:	2200      	movs	r2, #0
 8010dd4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8010dd6:	bf00      	nop
 8010dd8:	3754      	adds	r7, #84	@ 0x54
 8010dda:	46bd      	mov	sp, r7
 8010ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010de0:	4770      	bx	lr

08010de2 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8010de2:	b580      	push	{r7, lr}
 8010de4:	b09c      	sub	sp, #112	@ 0x70
 8010de6:	af00      	add	r7, sp, #0
 8010de8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010dea:	687b      	ldr	r3, [r7, #4]
 8010dec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010dee:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8010df0:	687b      	ldr	r3, [r7, #4]
 8010df2:	681b      	ldr	r3, [r3, #0]
 8010df4:	681b      	ldr	r3, [r3, #0]
 8010df6:	f003 0320 	and.w	r3, r3, #32
 8010dfa:	2b00      	cmp	r3, #0
 8010dfc:	d171      	bne.n	8010ee2 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8010dfe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010e00:	2200      	movs	r2, #0
 8010e02:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010e06:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010e08:	681b      	ldr	r3, [r3, #0]
 8010e0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010e0c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010e0e:	e853 3f00 	ldrex	r3, [r3]
 8010e12:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8010e14:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010e16:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8010e1a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8010e1c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010e1e:	681b      	ldr	r3, [r3, #0]
 8010e20:	461a      	mov	r2, r3
 8010e22:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8010e24:	65bb      	str	r3, [r7, #88]	@ 0x58
 8010e26:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010e28:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8010e2a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8010e2c:	e841 2300 	strex	r3, r2, [r1]
 8010e30:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8010e32:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010e34:	2b00      	cmp	r3, #0
 8010e36:	d1e6      	bne.n	8010e06 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010e38:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010e3a:	681b      	ldr	r3, [r3, #0]
 8010e3c:	3308      	adds	r3, #8
 8010e3e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010e40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010e42:	e853 3f00 	ldrex	r3, [r3]
 8010e46:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8010e48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010e4a:	f023 0301 	bic.w	r3, r3, #1
 8010e4e:	667b      	str	r3, [r7, #100]	@ 0x64
 8010e50:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010e52:	681b      	ldr	r3, [r3, #0]
 8010e54:	3308      	adds	r3, #8
 8010e56:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8010e58:	647a      	str	r2, [r7, #68]	@ 0x44
 8010e5a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010e5c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8010e5e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010e60:	e841 2300 	strex	r3, r2, [r1]
 8010e64:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8010e66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010e68:	2b00      	cmp	r3, #0
 8010e6a:	d1e5      	bne.n	8010e38 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010e6c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010e6e:	681b      	ldr	r3, [r3, #0]
 8010e70:	3308      	adds	r3, #8
 8010e72:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010e74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e76:	e853 3f00 	ldrex	r3, [r3]
 8010e7a:	623b      	str	r3, [r7, #32]
   return(result);
 8010e7c:	6a3b      	ldr	r3, [r7, #32]
 8010e7e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010e82:	663b      	str	r3, [r7, #96]	@ 0x60
 8010e84:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010e86:	681b      	ldr	r3, [r3, #0]
 8010e88:	3308      	adds	r3, #8
 8010e8a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8010e8c:	633a      	str	r2, [r7, #48]	@ 0x30
 8010e8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010e90:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010e92:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010e94:	e841 2300 	strex	r3, r2, [r1]
 8010e98:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8010e9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e9c:	2b00      	cmp	r3, #0
 8010e9e:	d1e5      	bne.n	8010e6c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8010ea0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010ea2:	2220      	movs	r2, #32
 8010ea4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010ea8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010eaa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010eac:	2b01      	cmp	r3, #1
 8010eae:	d118      	bne.n	8010ee2 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010eb0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010eb2:	681b      	ldr	r3, [r3, #0]
 8010eb4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010eb6:	693b      	ldr	r3, [r7, #16]
 8010eb8:	e853 3f00 	ldrex	r3, [r3]
 8010ebc:	60fb      	str	r3, [r7, #12]
   return(result);
 8010ebe:	68fb      	ldr	r3, [r7, #12]
 8010ec0:	f023 0310 	bic.w	r3, r3, #16
 8010ec4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8010ec6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010ec8:	681b      	ldr	r3, [r3, #0]
 8010eca:	461a      	mov	r2, r3
 8010ecc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010ece:	61fb      	str	r3, [r7, #28]
 8010ed0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010ed2:	69b9      	ldr	r1, [r7, #24]
 8010ed4:	69fa      	ldr	r2, [r7, #28]
 8010ed6:	e841 2300 	strex	r3, r2, [r1]
 8010eda:	617b      	str	r3, [r7, #20]
   return(result);
 8010edc:	697b      	ldr	r3, [r7, #20]
 8010ede:	2b00      	cmp	r3, #0
 8010ee0:	d1e6      	bne.n	8010eb0 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010ee2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010ee4:	2200      	movs	r2, #0
 8010ee6:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010ee8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010eea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010eec:	2b01      	cmp	r3, #1
 8010eee:	d107      	bne.n	8010f00 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010ef0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010ef2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8010ef6:	4619      	mov	r1, r3
 8010ef8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8010efa:	f7ff fa37 	bl	801036c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8010efe:	e002      	b.n	8010f06 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8010f00:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8010f02:	f7f6 f963 	bl	80071cc <HAL_UART_RxCpltCallback>
}
 8010f06:	bf00      	nop
 8010f08:	3770      	adds	r7, #112	@ 0x70
 8010f0a:	46bd      	mov	sp, r7
 8010f0c:	bd80      	pop	{r7, pc}

08010f0e <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8010f0e:	b580      	push	{r7, lr}
 8010f10:	b084      	sub	sp, #16
 8010f12:	af00      	add	r7, sp, #0
 8010f14:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010f16:	687b      	ldr	r3, [r7, #4]
 8010f18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010f1a:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8010f1c:	68fb      	ldr	r3, [r7, #12]
 8010f1e:	2201      	movs	r2, #1
 8010f20:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010f22:	68fb      	ldr	r3, [r7, #12]
 8010f24:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010f26:	2b01      	cmp	r3, #1
 8010f28:	d109      	bne.n	8010f3e <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8010f2a:	68fb      	ldr	r3, [r7, #12]
 8010f2c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8010f30:	085b      	lsrs	r3, r3, #1
 8010f32:	b29b      	uxth	r3, r3
 8010f34:	4619      	mov	r1, r3
 8010f36:	68f8      	ldr	r0, [r7, #12]
 8010f38:	f7ff fa18 	bl	801036c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8010f3c:	e002      	b.n	8010f44 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8010f3e:	68f8      	ldr	r0, [r7, #12]
 8010f40:	f7ff fa00 	bl	8010344 <HAL_UART_RxHalfCpltCallback>
}
 8010f44:	bf00      	nop
 8010f46:	3710      	adds	r7, #16
 8010f48:	46bd      	mov	sp, r7
 8010f4a:	bd80      	pop	{r7, pc}

08010f4c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8010f4c:	b580      	push	{r7, lr}
 8010f4e:	b086      	sub	sp, #24
 8010f50:	af00      	add	r7, sp, #0
 8010f52:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010f54:	687b      	ldr	r3, [r7, #4]
 8010f56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010f58:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8010f5a:	697b      	ldr	r3, [r7, #20]
 8010f5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010f60:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8010f62:	697b      	ldr	r3, [r7, #20]
 8010f64:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010f68:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8010f6a:	697b      	ldr	r3, [r7, #20]
 8010f6c:	681b      	ldr	r3, [r3, #0]
 8010f6e:	689b      	ldr	r3, [r3, #8]
 8010f70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010f74:	2b80      	cmp	r3, #128	@ 0x80
 8010f76:	d109      	bne.n	8010f8c <UART_DMAError+0x40>
 8010f78:	693b      	ldr	r3, [r7, #16]
 8010f7a:	2b21      	cmp	r3, #33	@ 0x21
 8010f7c:	d106      	bne.n	8010f8c <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8010f7e:	697b      	ldr	r3, [r7, #20]
 8010f80:	2200      	movs	r2, #0
 8010f82:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8010f86:	6978      	ldr	r0, [r7, #20]
 8010f88:	f7ff fe84 	bl	8010c94 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8010f8c:	697b      	ldr	r3, [r7, #20]
 8010f8e:	681b      	ldr	r3, [r3, #0]
 8010f90:	689b      	ldr	r3, [r3, #8]
 8010f92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010f96:	2b40      	cmp	r3, #64	@ 0x40
 8010f98:	d109      	bne.n	8010fae <UART_DMAError+0x62>
 8010f9a:	68fb      	ldr	r3, [r7, #12]
 8010f9c:	2b22      	cmp	r3, #34	@ 0x22
 8010f9e:	d106      	bne.n	8010fae <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8010fa0:	697b      	ldr	r3, [r7, #20]
 8010fa2:	2200      	movs	r2, #0
 8010fa4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8010fa8:	6978      	ldr	r0, [r7, #20]
 8010faa:	f7ff feb4 	bl	8010d16 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8010fae:	697b      	ldr	r3, [r7, #20]
 8010fb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010fb4:	f043 0210 	orr.w	r2, r3, #16
 8010fb8:	697b      	ldr	r3, [r7, #20]
 8010fba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010fbe:	6978      	ldr	r0, [r7, #20]
 8010fc0:	f7ff f9ca 	bl	8010358 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010fc4:	bf00      	nop
 8010fc6:	3718      	adds	r7, #24
 8010fc8:	46bd      	mov	sp, r7
 8010fca:	bd80      	pop	{r7, pc}

08010fcc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8010fcc:	b580      	push	{r7, lr}
 8010fce:	b084      	sub	sp, #16
 8010fd0:	af00      	add	r7, sp, #0
 8010fd2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010fd4:	687b      	ldr	r3, [r7, #4]
 8010fd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010fd8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8010fda:	68fb      	ldr	r3, [r7, #12]
 8010fdc:	2200      	movs	r2, #0
 8010fde:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010fe2:	68f8      	ldr	r0, [r7, #12]
 8010fe4:	f7ff f9b8 	bl	8010358 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010fe8:	bf00      	nop
 8010fea:	3710      	adds	r7, #16
 8010fec:	46bd      	mov	sp, r7
 8010fee:	bd80      	pop	{r7, pc}

08010ff0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8010ff0:	b580      	push	{r7, lr}
 8010ff2:	b088      	sub	sp, #32
 8010ff4:	af00      	add	r7, sp, #0
 8010ff6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8010ff8:	687b      	ldr	r3, [r7, #4]
 8010ffa:	681b      	ldr	r3, [r3, #0]
 8010ffc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010ffe:	68fb      	ldr	r3, [r7, #12]
 8011000:	e853 3f00 	ldrex	r3, [r3]
 8011004:	60bb      	str	r3, [r7, #8]
   return(result);
 8011006:	68bb      	ldr	r3, [r7, #8]
 8011008:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801100c:	61fb      	str	r3, [r7, #28]
 801100e:	687b      	ldr	r3, [r7, #4]
 8011010:	681b      	ldr	r3, [r3, #0]
 8011012:	461a      	mov	r2, r3
 8011014:	69fb      	ldr	r3, [r7, #28]
 8011016:	61bb      	str	r3, [r7, #24]
 8011018:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801101a:	6979      	ldr	r1, [r7, #20]
 801101c:	69ba      	ldr	r2, [r7, #24]
 801101e:	e841 2300 	strex	r3, r2, [r1]
 8011022:	613b      	str	r3, [r7, #16]
   return(result);
 8011024:	693b      	ldr	r3, [r7, #16]
 8011026:	2b00      	cmp	r3, #0
 8011028:	d1e6      	bne.n	8010ff8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801102a:	687b      	ldr	r3, [r7, #4]
 801102c:	2220      	movs	r2, #32
 801102e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8011032:	687b      	ldr	r3, [r7, #4]
 8011034:	2200      	movs	r2, #0
 8011036:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8011038:	6878      	ldr	r0, [r7, #4]
 801103a:	f7ff f979 	bl	8010330 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801103e:	bf00      	nop
 8011040:	3720      	adds	r7, #32
 8011042:	46bd      	mov	sp, r7
 8011044:	bd80      	pop	{r7, pc}

08011046 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8011046:	b480      	push	{r7}
 8011048:	b083      	sub	sp, #12
 801104a:	af00      	add	r7, sp, #0
 801104c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 801104e:	bf00      	nop
 8011050:	370c      	adds	r7, #12
 8011052:	46bd      	mov	sp, r7
 8011054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011058:	4770      	bx	lr

0801105a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 801105a:	b480      	push	{r7}
 801105c:	b083      	sub	sp, #12
 801105e:	af00      	add	r7, sp, #0
 8011060:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8011062:	bf00      	nop
 8011064:	370c      	adds	r7, #12
 8011066:	46bd      	mov	sp, r7
 8011068:	f85d 7b04 	ldr.w	r7, [sp], #4
 801106c:	4770      	bx	lr

0801106e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 801106e:	b480      	push	{r7}
 8011070:	b083      	sub	sp, #12
 8011072:	af00      	add	r7, sp, #0
 8011074:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8011076:	bf00      	nop
 8011078:	370c      	adds	r7, #12
 801107a:	46bd      	mov	sp, r7
 801107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011080:	4770      	bx	lr

08011082 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8011082:	b480      	push	{r7}
 8011084:	b085      	sub	sp, #20
 8011086:	af00      	add	r7, sp, #0
 8011088:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 801108a:	687b      	ldr	r3, [r7, #4]
 801108c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8011090:	2b01      	cmp	r3, #1
 8011092:	d101      	bne.n	8011098 <HAL_UARTEx_DisableFifoMode+0x16>
 8011094:	2302      	movs	r3, #2
 8011096:	e027      	b.n	80110e8 <HAL_UARTEx_DisableFifoMode+0x66>
 8011098:	687b      	ldr	r3, [r7, #4]
 801109a:	2201      	movs	r2, #1
 801109c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80110a0:	687b      	ldr	r3, [r7, #4]
 80110a2:	2224      	movs	r2, #36	@ 0x24
 80110a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80110a8:	687b      	ldr	r3, [r7, #4]
 80110aa:	681b      	ldr	r3, [r3, #0]
 80110ac:	681b      	ldr	r3, [r3, #0]
 80110ae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80110b0:	687b      	ldr	r3, [r7, #4]
 80110b2:	681b      	ldr	r3, [r3, #0]
 80110b4:	681a      	ldr	r2, [r3, #0]
 80110b6:	687b      	ldr	r3, [r7, #4]
 80110b8:	681b      	ldr	r3, [r3, #0]
 80110ba:	f022 0201 	bic.w	r2, r2, #1
 80110be:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80110c0:	68fb      	ldr	r3, [r7, #12]
 80110c2:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80110c6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80110c8:	687b      	ldr	r3, [r7, #4]
 80110ca:	2200      	movs	r2, #0
 80110cc:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80110ce:	687b      	ldr	r3, [r7, #4]
 80110d0:	681b      	ldr	r3, [r3, #0]
 80110d2:	68fa      	ldr	r2, [r7, #12]
 80110d4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80110d6:	687b      	ldr	r3, [r7, #4]
 80110d8:	2220      	movs	r2, #32
 80110da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80110de:	687b      	ldr	r3, [r7, #4]
 80110e0:	2200      	movs	r2, #0
 80110e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80110e6:	2300      	movs	r3, #0
}
 80110e8:	4618      	mov	r0, r3
 80110ea:	3714      	adds	r7, #20
 80110ec:	46bd      	mov	sp, r7
 80110ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110f2:	4770      	bx	lr

080110f4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80110f4:	b580      	push	{r7, lr}
 80110f6:	b084      	sub	sp, #16
 80110f8:	af00      	add	r7, sp, #0
 80110fa:	6078      	str	r0, [r7, #4]
 80110fc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80110fe:	687b      	ldr	r3, [r7, #4]
 8011100:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8011104:	2b01      	cmp	r3, #1
 8011106:	d101      	bne.n	801110c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8011108:	2302      	movs	r3, #2
 801110a:	e02d      	b.n	8011168 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 801110c:	687b      	ldr	r3, [r7, #4]
 801110e:	2201      	movs	r2, #1
 8011110:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011114:	687b      	ldr	r3, [r7, #4]
 8011116:	2224      	movs	r2, #36	@ 0x24
 8011118:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801111c:	687b      	ldr	r3, [r7, #4]
 801111e:	681b      	ldr	r3, [r3, #0]
 8011120:	681b      	ldr	r3, [r3, #0]
 8011122:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011124:	687b      	ldr	r3, [r7, #4]
 8011126:	681b      	ldr	r3, [r3, #0]
 8011128:	681a      	ldr	r2, [r3, #0]
 801112a:	687b      	ldr	r3, [r7, #4]
 801112c:	681b      	ldr	r3, [r3, #0]
 801112e:	f022 0201 	bic.w	r2, r2, #1
 8011132:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8011134:	687b      	ldr	r3, [r7, #4]
 8011136:	681b      	ldr	r3, [r3, #0]
 8011138:	689b      	ldr	r3, [r3, #8]
 801113a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 801113e:	687b      	ldr	r3, [r7, #4]
 8011140:	681b      	ldr	r3, [r3, #0]
 8011142:	683a      	ldr	r2, [r7, #0]
 8011144:	430a      	orrs	r2, r1
 8011146:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8011148:	6878      	ldr	r0, [r7, #4]
 801114a:	f000 f84f 	bl	80111ec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801114e:	687b      	ldr	r3, [r7, #4]
 8011150:	681b      	ldr	r3, [r3, #0]
 8011152:	68fa      	ldr	r2, [r7, #12]
 8011154:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011156:	687b      	ldr	r3, [r7, #4]
 8011158:	2220      	movs	r2, #32
 801115a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801115e:	687b      	ldr	r3, [r7, #4]
 8011160:	2200      	movs	r2, #0
 8011162:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8011166:	2300      	movs	r3, #0
}
 8011168:	4618      	mov	r0, r3
 801116a:	3710      	adds	r7, #16
 801116c:	46bd      	mov	sp, r7
 801116e:	bd80      	pop	{r7, pc}

08011170 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8011170:	b580      	push	{r7, lr}
 8011172:	b084      	sub	sp, #16
 8011174:	af00      	add	r7, sp, #0
 8011176:	6078      	str	r0, [r7, #4]
 8011178:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801117a:	687b      	ldr	r3, [r7, #4]
 801117c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8011180:	2b01      	cmp	r3, #1
 8011182:	d101      	bne.n	8011188 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8011184:	2302      	movs	r3, #2
 8011186:	e02d      	b.n	80111e4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8011188:	687b      	ldr	r3, [r7, #4]
 801118a:	2201      	movs	r2, #1
 801118c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	2224      	movs	r2, #36	@ 0x24
 8011194:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011198:	687b      	ldr	r3, [r7, #4]
 801119a:	681b      	ldr	r3, [r3, #0]
 801119c:	681b      	ldr	r3, [r3, #0]
 801119e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80111a0:	687b      	ldr	r3, [r7, #4]
 80111a2:	681b      	ldr	r3, [r3, #0]
 80111a4:	681a      	ldr	r2, [r3, #0]
 80111a6:	687b      	ldr	r3, [r7, #4]
 80111a8:	681b      	ldr	r3, [r3, #0]
 80111aa:	f022 0201 	bic.w	r2, r2, #1
 80111ae:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80111b0:	687b      	ldr	r3, [r7, #4]
 80111b2:	681b      	ldr	r3, [r3, #0]
 80111b4:	689b      	ldr	r3, [r3, #8]
 80111b6:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80111ba:	687b      	ldr	r3, [r7, #4]
 80111bc:	681b      	ldr	r3, [r3, #0]
 80111be:	683a      	ldr	r2, [r7, #0]
 80111c0:	430a      	orrs	r2, r1
 80111c2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80111c4:	6878      	ldr	r0, [r7, #4]
 80111c6:	f000 f811 	bl	80111ec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80111ca:	687b      	ldr	r3, [r7, #4]
 80111cc:	681b      	ldr	r3, [r3, #0]
 80111ce:	68fa      	ldr	r2, [r7, #12]
 80111d0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80111d2:	687b      	ldr	r3, [r7, #4]
 80111d4:	2220      	movs	r2, #32
 80111d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80111da:	687b      	ldr	r3, [r7, #4]
 80111dc:	2200      	movs	r2, #0
 80111de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80111e2:	2300      	movs	r3, #0
}
 80111e4:	4618      	mov	r0, r3
 80111e6:	3710      	adds	r7, #16
 80111e8:	46bd      	mov	sp, r7
 80111ea:	bd80      	pop	{r7, pc}

080111ec <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80111ec:	b480      	push	{r7}
 80111ee:	b085      	sub	sp, #20
 80111f0:	af00      	add	r7, sp, #0
 80111f2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80111f4:	687b      	ldr	r3, [r7, #4]
 80111f6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80111f8:	2b00      	cmp	r3, #0
 80111fa:	d108      	bne.n	801120e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80111fc:	687b      	ldr	r3, [r7, #4]
 80111fe:	2201      	movs	r2, #1
 8011200:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8011204:	687b      	ldr	r3, [r7, #4]
 8011206:	2201      	movs	r2, #1
 8011208:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 801120c:	e031      	b.n	8011272 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801120e:	2308      	movs	r3, #8
 8011210:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8011212:	2308      	movs	r3, #8
 8011214:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8011216:	687b      	ldr	r3, [r7, #4]
 8011218:	681b      	ldr	r3, [r3, #0]
 801121a:	689b      	ldr	r3, [r3, #8]
 801121c:	0e5b      	lsrs	r3, r3, #25
 801121e:	b2db      	uxtb	r3, r3
 8011220:	f003 0307 	and.w	r3, r3, #7
 8011224:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8011226:	687b      	ldr	r3, [r7, #4]
 8011228:	681b      	ldr	r3, [r3, #0]
 801122a:	689b      	ldr	r3, [r3, #8]
 801122c:	0f5b      	lsrs	r3, r3, #29
 801122e:	b2db      	uxtb	r3, r3
 8011230:	f003 0307 	and.w	r3, r3, #7
 8011234:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011236:	7bbb      	ldrb	r3, [r7, #14]
 8011238:	7b3a      	ldrb	r2, [r7, #12]
 801123a:	4911      	ldr	r1, [pc, #68]	@ (8011280 <UARTEx_SetNbDataToProcess+0x94>)
 801123c:	5c8a      	ldrb	r2, [r1, r2]
 801123e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8011242:	7b3a      	ldrb	r2, [r7, #12]
 8011244:	490f      	ldr	r1, [pc, #60]	@ (8011284 <UARTEx_SetNbDataToProcess+0x98>)
 8011246:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011248:	fb93 f3f2 	sdiv	r3, r3, r2
 801124c:	b29a      	uxth	r2, r3
 801124e:	687b      	ldr	r3, [r7, #4]
 8011250:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011254:	7bfb      	ldrb	r3, [r7, #15]
 8011256:	7b7a      	ldrb	r2, [r7, #13]
 8011258:	4909      	ldr	r1, [pc, #36]	@ (8011280 <UARTEx_SetNbDataToProcess+0x94>)
 801125a:	5c8a      	ldrb	r2, [r1, r2]
 801125c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8011260:	7b7a      	ldrb	r2, [r7, #13]
 8011262:	4908      	ldr	r1, [pc, #32]	@ (8011284 <UARTEx_SetNbDataToProcess+0x98>)
 8011264:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011266:	fb93 f3f2 	sdiv	r3, r3, r2
 801126a:	b29a      	uxth	r2, r3
 801126c:	687b      	ldr	r3, [r7, #4]
 801126e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8011272:	bf00      	nop
 8011274:	3714      	adds	r7, #20
 8011276:	46bd      	mov	sp, r7
 8011278:	f85d 7b04 	ldr.w	r7, [sp], #4
 801127c:	4770      	bx	lr
 801127e:	bf00      	nop
 8011280:	08022288 	.word	0x08022288
 8011284:	08022290 	.word	0x08022290

08011288 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8011288:	b480      	push	{r7}
 801128a:	b085      	sub	sp, #20
 801128c:	af00      	add	r7, sp, #0
 801128e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8011290:	687b      	ldr	r3, [r7, #4]
 8011292:	2200      	movs	r2, #0
 8011294:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8011298:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 801129c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 801129e:	68fb      	ldr	r3, [r7, #12]
 80112a0:	b29a      	uxth	r2, r3
 80112a2:	687b      	ldr	r3, [r7, #4]
 80112a4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80112a8:	2300      	movs	r3, #0
}
 80112aa:	4618      	mov	r0, r3
 80112ac:	3714      	adds	r7, #20
 80112ae:	46bd      	mov	sp, r7
 80112b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112b4:	4770      	bx	lr

080112b6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80112b6:	b480      	push	{r7}
 80112b8:	b085      	sub	sp, #20
 80112ba:	af00      	add	r7, sp, #0
 80112bc:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80112be:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 80112c2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80112c4:	687b      	ldr	r3, [r7, #4]
 80112c6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80112ca:	b29a      	uxth	r2, r3
 80112cc:	68fb      	ldr	r3, [r7, #12]
 80112ce:	b29b      	uxth	r3, r3
 80112d0:	43db      	mvns	r3, r3
 80112d2:	b29b      	uxth	r3, r3
 80112d4:	4013      	ands	r3, r2
 80112d6:	b29a      	uxth	r2, r3
 80112d8:	687b      	ldr	r3, [r7, #4]
 80112da:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80112de:	2300      	movs	r3, #0
}
 80112e0:	4618      	mov	r0, r3
 80112e2:	3714      	adds	r7, #20
 80112e4:	46bd      	mov	sp, r7
 80112e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112ea:	4770      	bx	lr

080112ec <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80112ec:	b480      	push	{r7}
 80112ee:	b085      	sub	sp, #20
 80112f0:	af00      	add	r7, sp, #0
 80112f2:	60f8      	str	r0, [r7, #12]
 80112f4:	1d3b      	adds	r3, r7, #4
 80112f6:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80112fa:	68fb      	ldr	r3, [r7, #12]
 80112fc:	2201      	movs	r2, #1
 80112fe:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8011302:	68fb      	ldr	r3, [r7, #12]
 8011304:	2200      	movs	r2, #0
 8011306:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 801130a:	68fb      	ldr	r3, [r7, #12]
 801130c:	2200      	movs	r2, #0
 801130e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8011312:	68fb      	ldr	r3, [r7, #12]
 8011314:	2200      	movs	r2, #0
 8011316:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 801131a:	2300      	movs	r3, #0
}
 801131c:	4618      	mov	r0, r3
 801131e:	3714      	adds	r7, #20
 8011320:	46bd      	mov	sp, r7
 8011322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011326:	4770      	bx	lr

08011328 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8011328:	b480      	push	{r7}
 801132a:	b0a7      	sub	sp, #156	@ 0x9c
 801132c:	af00      	add	r7, sp, #0
 801132e:	6078      	str	r0, [r7, #4]
 8011330:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8011332:	2300      	movs	r3, #0
 8011334:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8011338:	687a      	ldr	r2, [r7, #4]
 801133a:	683b      	ldr	r3, [r7, #0]
 801133c:	781b      	ldrb	r3, [r3, #0]
 801133e:	009b      	lsls	r3, r3, #2
 8011340:	4413      	add	r3, r2
 8011342:	881b      	ldrh	r3, [r3, #0]
 8011344:	b29b      	uxth	r3, r3
 8011346:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 801134a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801134e:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94

  /* initialize Endpoint */
  switch (ep->type)
 8011352:	683b      	ldr	r3, [r7, #0]
 8011354:	78db      	ldrb	r3, [r3, #3]
 8011356:	2b03      	cmp	r3, #3
 8011358:	d81f      	bhi.n	801139a <USB_ActivateEndpoint+0x72>
 801135a:	a201      	add	r2, pc, #4	@ (adr r2, 8011360 <USB_ActivateEndpoint+0x38>)
 801135c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011360:	08011371 	.word	0x08011371
 8011364:	0801138d 	.word	0x0801138d
 8011368:	080113a3 	.word	0x080113a3
 801136c:	0801137f 	.word	0x0801137f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8011370:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8011374:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8011378:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 801137c:	e012      	b.n	80113a4 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 801137e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8011382:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8011386:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 801138a:	e00b      	b.n	80113a4 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 801138c:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8011390:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8011394:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8011398:	e004      	b.n	80113a4 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 801139a:	2301      	movs	r3, #1
 801139c:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
      break;
 80113a0:	e000      	b.n	80113a4 <USB_ActivateEndpoint+0x7c>
      break;
 80113a2:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80113a4:	687a      	ldr	r2, [r7, #4]
 80113a6:	683b      	ldr	r3, [r7, #0]
 80113a8:	781b      	ldrb	r3, [r3, #0]
 80113aa:	009b      	lsls	r3, r3, #2
 80113ac:	441a      	add	r2, r3
 80113ae:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80113b2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80113b6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80113ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80113be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80113c2:	b29b      	uxth	r3, r3
 80113c4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80113c6:	687a      	ldr	r2, [r7, #4]
 80113c8:	683b      	ldr	r3, [r7, #0]
 80113ca:	781b      	ldrb	r3, [r3, #0]
 80113cc:	009b      	lsls	r3, r3, #2
 80113ce:	4413      	add	r3, r2
 80113d0:	881b      	ldrh	r3, [r3, #0]
 80113d2:	b29b      	uxth	r3, r3
 80113d4:	b21b      	sxth	r3, r3
 80113d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80113da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80113de:	b21a      	sxth	r2, r3
 80113e0:	683b      	ldr	r3, [r7, #0]
 80113e2:	781b      	ldrb	r3, [r3, #0]
 80113e4:	b21b      	sxth	r3, r3
 80113e6:	4313      	orrs	r3, r2
 80113e8:	b21b      	sxth	r3, r3
 80113ea:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
 80113ee:	687a      	ldr	r2, [r7, #4]
 80113f0:	683b      	ldr	r3, [r7, #0]
 80113f2:	781b      	ldrb	r3, [r3, #0]
 80113f4:	009b      	lsls	r3, r3, #2
 80113f6:	441a      	add	r2, r3
 80113f8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80113fc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011400:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011404:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011408:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801140c:	b29b      	uxth	r3, r3
 801140e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8011410:	683b      	ldr	r3, [r7, #0]
 8011412:	7b1b      	ldrb	r3, [r3, #12]
 8011414:	2b00      	cmp	r3, #0
 8011416:	f040 8180 	bne.w	801171a <USB_ActivateEndpoint+0x3f2>
  {
    if (ep->is_in != 0U)
 801141a:	683b      	ldr	r3, [r7, #0]
 801141c:	785b      	ldrb	r3, [r3, #1]
 801141e:	2b00      	cmp	r3, #0
 8011420:	f000 8084 	beq.w	801152c <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8011424:	687b      	ldr	r3, [r7, #4]
 8011426:	61bb      	str	r3, [r7, #24]
 8011428:	687b      	ldr	r3, [r7, #4]
 801142a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 801142e:	b29b      	uxth	r3, r3
 8011430:	461a      	mov	r2, r3
 8011432:	69bb      	ldr	r3, [r7, #24]
 8011434:	4413      	add	r3, r2
 8011436:	61bb      	str	r3, [r7, #24]
 8011438:	683b      	ldr	r3, [r7, #0]
 801143a:	781b      	ldrb	r3, [r3, #0]
 801143c:	00da      	lsls	r2, r3, #3
 801143e:	69bb      	ldr	r3, [r7, #24]
 8011440:	4413      	add	r3, r2
 8011442:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8011446:	617b      	str	r3, [r7, #20]
 8011448:	683b      	ldr	r3, [r7, #0]
 801144a:	88db      	ldrh	r3, [r3, #6]
 801144c:	085b      	lsrs	r3, r3, #1
 801144e:	b29b      	uxth	r3, r3
 8011450:	005b      	lsls	r3, r3, #1
 8011452:	b29a      	uxth	r2, r3
 8011454:	697b      	ldr	r3, [r7, #20]
 8011456:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8011458:	687a      	ldr	r2, [r7, #4]
 801145a:	683b      	ldr	r3, [r7, #0]
 801145c:	781b      	ldrb	r3, [r3, #0]
 801145e:	009b      	lsls	r3, r3, #2
 8011460:	4413      	add	r3, r2
 8011462:	881b      	ldrh	r3, [r3, #0]
 8011464:	827b      	strh	r3, [r7, #18]
 8011466:	8a7b      	ldrh	r3, [r7, #18]
 8011468:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801146c:	2b00      	cmp	r3, #0
 801146e:	d01b      	beq.n	80114a8 <USB_ActivateEndpoint+0x180>
 8011470:	687a      	ldr	r2, [r7, #4]
 8011472:	683b      	ldr	r3, [r7, #0]
 8011474:	781b      	ldrb	r3, [r3, #0]
 8011476:	009b      	lsls	r3, r3, #2
 8011478:	4413      	add	r3, r2
 801147a:	881b      	ldrh	r3, [r3, #0]
 801147c:	b29b      	uxth	r3, r3
 801147e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011482:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011486:	823b      	strh	r3, [r7, #16]
 8011488:	687a      	ldr	r2, [r7, #4]
 801148a:	683b      	ldr	r3, [r7, #0]
 801148c:	781b      	ldrb	r3, [r3, #0]
 801148e:	009b      	lsls	r3, r3, #2
 8011490:	441a      	add	r2, r3
 8011492:	8a3b      	ldrh	r3, [r7, #16]
 8011494:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011498:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 801149c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80114a0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80114a4:	b29b      	uxth	r3, r3
 80114a6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80114a8:	683b      	ldr	r3, [r7, #0]
 80114aa:	78db      	ldrb	r3, [r3, #3]
 80114ac:	2b01      	cmp	r3, #1
 80114ae:	d020      	beq.n	80114f2 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80114b0:	687a      	ldr	r2, [r7, #4]
 80114b2:	683b      	ldr	r3, [r7, #0]
 80114b4:	781b      	ldrb	r3, [r3, #0]
 80114b6:	009b      	lsls	r3, r3, #2
 80114b8:	4413      	add	r3, r2
 80114ba:	881b      	ldrh	r3, [r3, #0]
 80114bc:	b29b      	uxth	r3, r3
 80114be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80114c2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80114c6:	81bb      	strh	r3, [r7, #12]
 80114c8:	89bb      	ldrh	r3, [r7, #12]
 80114ca:	f083 0320 	eor.w	r3, r3, #32
 80114ce:	81bb      	strh	r3, [r7, #12]
 80114d0:	687a      	ldr	r2, [r7, #4]
 80114d2:	683b      	ldr	r3, [r7, #0]
 80114d4:	781b      	ldrb	r3, [r3, #0]
 80114d6:	009b      	lsls	r3, r3, #2
 80114d8:	441a      	add	r2, r3
 80114da:	89bb      	ldrh	r3, [r7, #12]
 80114dc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80114e0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80114e4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80114e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80114ec:	b29b      	uxth	r3, r3
 80114ee:	8013      	strh	r3, [r2, #0]
 80114f0:	e3f9      	b.n	8011ce6 <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80114f2:	687a      	ldr	r2, [r7, #4]
 80114f4:	683b      	ldr	r3, [r7, #0]
 80114f6:	781b      	ldrb	r3, [r3, #0]
 80114f8:	009b      	lsls	r3, r3, #2
 80114fa:	4413      	add	r3, r2
 80114fc:	881b      	ldrh	r3, [r3, #0]
 80114fe:	b29b      	uxth	r3, r3
 8011500:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011504:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011508:	81fb      	strh	r3, [r7, #14]
 801150a:	687a      	ldr	r2, [r7, #4]
 801150c:	683b      	ldr	r3, [r7, #0]
 801150e:	781b      	ldrb	r3, [r3, #0]
 8011510:	009b      	lsls	r3, r3, #2
 8011512:	441a      	add	r2, r3
 8011514:	89fb      	ldrh	r3, [r7, #14]
 8011516:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 801151a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 801151e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011522:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011526:	b29b      	uxth	r3, r3
 8011528:	8013      	strh	r3, [r2, #0]
 801152a:	e3dc      	b.n	8011ce6 <USB_ActivateEndpoint+0x9be>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 801152c:	687b      	ldr	r3, [r7, #4]
 801152e:	633b      	str	r3, [r7, #48]	@ 0x30
 8011530:	687b      	ldr	r3, [r7, #4]
 8011532:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8011536:	b29b      	uxth	r3, r3
 8011538:	461a      	mov	r2, r3
 801153a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801153c:	4413      	add	r3, r2
 801153e:	633b      	str	r3, [r7, #48]	@ 0x30
 8011540:	683b      	ldr	r3, [r7, #0]
 8011542:	781b      	ldrb	r3, [r3, #0]
 8011544:	00da      	lsls	r2, r3, #3
 8011546:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011548:	4413      	add	r3, r2
 801154a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 801154e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011550:	683b      	ldr	r3, [r7, #0]
 8011552:	88db      	ldrh	r3, [r3, #6]
 8011554:	085b      	lsrs	r3, r3, #1
 8011556:	b29b      	uxth	r3, r3
 8011558:	005b      	lsls	r3, r3, #1
 801155a:	b29a      	uxth	r2, r3
 801155c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801155e:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8011560:	687b      	ldr	r3, [r7, #4]
 8011562:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011564:	687b      	ldr	r3, [r7, #4]
 8011566:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 801156a:	b29b      	uxth	r3, r3
 801156c:	461a      	mov	r2, r3
 801156e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011570:	4413      	add	r3, r2
 8011572:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011574:	683b      	ldr	r3, [r7, #0]
 8011576:	781b      	ldrb	r3, [r3, #0]
 8011578:	00da      	lsls	r2, r3, #3
 801157a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801157c:	4413      	add	r3, r2
 801157e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8011582:	627b      	str	r3, [r7, #36]	@ 0x24
 8011584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011586:	881b      	ldrh	r3, [r3, #0]
 8011588:	b29b      	uxth	r3, r3
 801158a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801158e:	b29a      	uxth	r2, r3
 8011590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011592:	801a      	strh	r2, [r3, #0]
 8011594:	683b      	ldr	r3, [r7, #0]
 8011596:	691b      	ldr	r3, [r3, #16]
 8011598:	2b00      	cmp	r3, #0
 801159a:	d10a      	bne.n	80115b2 <USB_ActivateEndpoint+0x28a>
 801159c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801159e:	881b      	ldrh	r3, [r3, #0]
 80115a0:	b29b      	uxth	r3, r3
 80115a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80115a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80115aa:	b29a      	uxth	r2, r3
 80115ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80115ae:	801a      	strh	r2, [r3, #0]
 80115b0:	e041      	b.n	8011636 <USB_ActivateEndpoint+0x30e>
 80115b2:	683b      	ldr	r3, [r7, #0]
 80115b4:	691b      	ldr	r3, [r3, #16]
 80115b6:	2b3e      	cmp	r3, #62	@ 0x3e
 80115b8:	d81c      	bhi.n	80115f4 <USB_ActivateEndpoint+0x2cc>
 80115ba:	683b      	ldr	r3, [r7, #0]
 80115bc:	691b      	ldr	r3, [r3, #16]
 80115be:	085b      	lsrs	r3, r3, #1
 80115c0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80115c4:	683b      	ldr	r3, [r7, #0]
 80115c6:	691b      	ldr	r3, [r3, #16]
 80115c8:	f003 0301 	and.w	r3, r3, #1
 80115cc:	2b00      	cmp	r3, #0
 80115ce:	d004      	beq.n	80115da <USB_ActivateEndpoint+0x2b2>
 80115d0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80115d4:	3301      	adds	r3, #1
 80115d6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80115da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80115dc:	881b      	ldrh	r3, [r3, #0]
 80115de:	b29a      	uxth	r2, r3
 80115e0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80115e4:	b29b      	uxth	r3, r3
 80115e6:	029b      	lsls	r3, r3, #10
 80115e8:	b29b      	uxth	r3, r3
 80115ea:	4313      	orrs	r3, r2
 80115ec:	b29a      	uxth	r2, r3
 80115ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80115f0:	801a      	strh	r2, [r3, #0]
 80115f2:	e020      	b.n	8011636 <USB_ActivateEndpoint+0x30e>
 80115f4:	683b      	ldr	r3, [r7, #0]
 80115f6:	691b      	ldr	r3, [r3, #16]
 80115f8:	095b      	lsrs	r3, r3, #5
 80115fa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80115fe:	683b      	ldr	r3, [r7, #0]
 8011600:	691b      	ldr	r3, [r3, #16]
 8011602:	f003 031f 	and.w	r3, r3, #31
 8011606:	2b00      	cmp	r3, #0
 8011608:	d104      	bne.n	8011614 <USB_ActivateEndpoint+0x2ec>
 801160a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801160e:	3b01      	subs	r3, #1
 8011610:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8011614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011616:	881b      	ldrh	r3, [r3, #0]
 8011618:	b29a      	uxth	r2, r3
 801161a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801161e:	b29b      	uxth	r3, r3
 8011620:	029b      	lsls	r3, r3, #10
 8011622:	b29b      	uxth	r3, r3
 8011624:	4313      	orrs	r3, r2
 8011626:	b29b      	uxth	r3, r3
 8011628:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801162c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011630:	b29a      	uxth	r2, r3
 8011632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011634:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8011636:	687a      	ldr	r2, [r7, #4]
 8011638:	683b      	ldr	r3, [r7, #0]
 801163a:	781b      	ldrb	r3, [r3, #0]
 801163c:	009b      	lsls	r3, r3, #2
 801163e:	4413      	add	r3, r2
 8011640:	881b      	ldrh	r3, [r3, #0]
 8011642:	847b      	strh	r3, [r7, #34]	@ 0x22
 8011644:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8011646:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 801164a:	2b00      	cmp	r3, #0
 801164c:	d01b      	beq.n	8011686 <USB_ActivateEndpoint+0x35e>
 801164e:	687a      	ldr	r2, [r7, #4]
 8011650:	683b      	ldr	r3, [r7, #0]
 8011652:	781b      	ldrb	r3, [r3, #0]
 8011654:	009b      	lsls	r3, r3, #2
 8011656:	4413      	add	r3, r2
 8011658:	881b      	ldrh	r3, [r3, #0]
 801165a:	b29b      	uxth	r3, r3
 801165c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011660:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011664:	843b      	strh	r3, [r7, #32]
 8011666:	687a      	ldr	r2, [r7, #4]
 8011668:	683b      	ldr	r3, [r7, #0]
 801166a:	781b      	ldrb	r3, [r3, #0]
 801166c:	009b      	lsls	r3, r3, #2
 801166e:	441a      	add	r2, r3
 8011670:	8c3b      	ldrh	r3, [r7, #32]
 8011672:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011676:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 801167a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 801167e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011682:	b29b      	uxth	r3, r3
 8011684:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8011686:	683b      	ldr	r3, [r7, #0]
 8011688:	781b      	ldrb	r3, [r3, #0]
 801168a:	2b00      	cmp	r3, #0
 801168c:	d124      	bne.n	80116d8 <USB_ActivateEndpoint+0x3b0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801168e:	687a      	ldr	r2, [r7, #4]
 8011690:	683b      	ldr	r3, [r7, #0]
 8011692:	781b      	ldrb	r3, [r3, #0]
 8011694:	009b      	lsls	r3, r3, #2
 8011696:	4413      	add	r3, r2
 8011698:	881b      	ldrh	r3, [r3, #0]
 801169a:	b29b      	uxth	r3, r3
 801169c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80116a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80116a4:	83bb      	strh	r3, [r7, #28]
 80116a6:	8bbb      	ldrh	r3, [r7, #28]
 80116a8:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80116ac:	83bb      	strh	r3, [r7, #28]
 80116ae:	8bbb      	ldrh	r3, [r7, #28]
 80116b0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80116b4:	83bb      	strh	r3, [r7, #28]
 80116b6:	687a      	ldr	r2, [r7, #4]
 80116b8:	683b      	ldr	r3, [r7, #0]
 80116ba:	781b      	ldrb	r3, [r3, #0]
 80116bc:	009b      	lsls	r3, r3, #2
 80116be:	441a      	add	r2, r3
 80116c0:	8bbb      	ldrh	r3, [r7, #28]
 80116c2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80116c6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80116ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80116ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80116d2:	b29b      	uxth	r3, r3
 80116d4:	8013      	strh	r3, [r2, #0]
 80116d6:	e306      	b.n	8011ce6 <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80116d8:	687a      	ldr	r2, [r7, #4]
 80116da:	683b      	ldr	r3, [r7, #0]
 80116dc:	781b      	ldrb	r3, [r3, #0]
 80116de:	009b      	lsls	r3, r3, #2
 80116e0:	4413      	add	r3, r2
 80116e2:	881b      	ldrh	r3, [r3, #0]
 80116e4:	b29b      	uxth	r3, r3
 80116e6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80116ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80116ee:	83fb      	strh	r3, [r7, #30]
 80116f0:	8bfb      	ldrh	r3, [r7, #30]
 80116f2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80116f6:	83fb      	strh	r3, [r7, #30]
 80116f8:	687a      	ldr	r2, [r7, #4]
 80116fa:	683b      	ldr	r3, [r7, #0]
 80116fc:	781b      	ldrb	r3, [r3, #0]
 80116fe:	009b      	lsls	r3, r3, #2
 8011700:	441a      	add	r2, r3
 8011702:	8bfb      	ldrh	r3, [r7, #30]
 8011704:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011708:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 801170c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011710:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011714:	b29b      	uxth	r3, r3
 8011716:	8013      	strh	r3, [r2, #0]
 8011718:	e2e5      	b.n	8011ce6 <USB_ActivateEndpoint+0x9be>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 801171a:	683b      	ldr	r3, [r7, #0]
 801171c:	78db      	ldrb	r3, [r3, #3]
 801171e:	2b02      	cmp	r3, #2
 8011720:	d11e      	bne.n	8011760 <USB_ActivateEndpoint+0x438>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8011722:	687a      	ldr	r2, [r7, #4]
 8011724:	683b      	ldr	r3, [r7, #0]
 8011726:	781b      	ldrb	r3, [r3, #0]
 8011728:	009b      	lsls	r3, r3, #2
 801172a:	4413      	add	r3, r2
 801172c:	881b      	ldrh	r3, [r3, #0]
 801172e:	b29b      	uxth	r3, r3
 8011730:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011734:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011738:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 801173c:	687a      	ldr	r2, [r7, #4]
 801173e:	683b      	ldr	r3, [r7, #0]
 8011740:	781b      	ldrb	r3, [r3, #0]
 8011742:	009b      	lsls	r3, r3, #2
 8011744:	441a      	add	r2, r3
 8011746:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 801174a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 801174e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011752:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8011756:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801175a:	b29b      	uxth	r3, r3
 801175c:	8013      	strh	r3, [r2, #0]
 801175e:	e01d      	b.n	801179c <USB_ActivateEndpoint+0x474>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8011760:	687a      	ldr	r2, [r7, #4]
 8011762:	683b      	ldr	r3, [r7, #0]
 8011764:	781b      	ldrb	r3, [r3, #0]
 8011766:	009b      	lsls	r3, r3, #2
 8011768:	4413      	add	r3, r2
 801176a:	881b      	ldrh	r3, [r3, #0]
 801176c:	b29b      	uxth	r3, r3
 801176e:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8011772:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011776:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
 801177a:	687a      	ldr	r2, [r7, #4]
 801177c:	683b      	ldr	r3, [r7, #0]
 801177e:	781b      	ldrb	r3, [r3, #0]
 8011780:	009b      	lsls	r3, r3, #2
 8011782:	441a      	add	r2, r3
 8011784:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 8011788:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 801178c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011790:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011794:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011798:	b29b      	uxth	r3, r3
 801179a:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 801179c:	687b      	ldr	r3, [r7, #4]
 801179e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80117a0:	687b      	ldr	r3, [r7, #4]
 80117a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80117a6:	b29b      	uxth	r3, r3
 80117a8:	461a      	mov	r2, r3
 80117aa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80117ac:	4413      	add	r3, r2
 80117ae:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80117b0:	683b      	ldr	r3, [r7, #0]
 80117b2:	781b      	ldrb	r3, [r3, #0]
 80117b4:	00da      	lsls	r2, r3, #3
 80117b6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80117b8:	4413      	add	r3, r2
 80117ba:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80117be:	67bb      	str	r3, [r7, #120]	@ 0x78
 80117c0:	683b      	ldr	r3, [r7, #0]
 80117c2:	891b      	ldrh	r3, [r3, #8]
 80117c4:	085b      	lsrs	r3, r3, #1
 80117c6:	b29b      	uxth	r3, r3
 80117c8:	005b      	lsls	r3, r3, #1
 80117ca:	b29a      	uxth	r2, r3
 80117cc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80117ce:	801a      	strh	r2, [r3, #0]
 80117d0:	687b      	ldr	r3, [r7, #4]
 80117d2:	677b      	str	r3, [r7, #116]	@ 0x74
 80117d4:	687b      	ldr	r3, [r7, #4]
 80117d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80117da:	b29b      	uxth	r3, r3
 80117dc:	461a      	mov	r2, r3
 80117de:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80117e0:	4413      	add	r3, r2
 80117e2:	677b      	str	r3, [r7, #116]	@ 0x74
 80117e4:	683b      	ldr	r3, [r7, #0]
 80117e6:	781b      	ldrb	r3, [r3, #0]
 80117e8:	00da      	lsls	r2, r3, #3
 80117ea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80117ec:	4413      	add	r3, r2
 80117ee:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80117f2:	673b      	str	r3, [r7, #112]	@ 0x70
 80117f4:	683b      	ldr	r3, [r7, #0]
 80117f6:	895b      	ldrh	r3, [r3, #10]
 80117f8:	085b      	lsrs	r3, r3, #1
 80117fa:	b29b      	uxth	r3, r3
 80117fc:	005b      	lsls	r3, r3, #1
 80117fe:	b29a      	uxth	r2, r3
 8011800:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8011802:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8011804:	683b      	ldr	r3, [r7, #0]
 8011806:	785b      	ldrb	r3, [r3, #1]
 8011808:	2b00      	cmp	r3, #0
 801180a:	f040 81af 	bne.w	8011b6c <USB_ActivateEndpoint+0x844>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801180e:	687a      	ldr	r2, [r7, #4]
 8011810:	683b      	ldr	r3, [r7, #0]
 8011812:	781b      	ldrb	r3, [r3, #0]
 8011814:	009b      	lsls	r3, r3, #2
 8011816:	4413      	add	r3, r2
 8011818:	881b      	ldrh	r3, [r3, #0]
 801181a:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 801181e:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 8011822:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8011826:	2b00      	cmp	r3, #0
 8011828:	d01d      	beq.n	8011866 <USB_ActivateEndpoint+0x53e>
 801182a:	687a      	ldr	r2, [r7, #4]
 801182c:	683b      	ldr	r3, [r7, #0]
 801182e:	781b      	ldrb	r3, [r3, #0]
 8011830:	009b      	lsls	r3, r3, #2
 8011832:	4413      	add	r3, r2
 8011834:	881b      	ldrh	r3, [r3, #0]
 8011836:	b29b      	uxth	r3, r3
 8011838:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 801183c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011840:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 8011844:	687a      	ldr	r2, [r7, #4]
 8011846:	683b      	ldr	r3, [r7, #0]
 8011848:	781b      	ldrb	r3, [r3, #0]
 801184a:	009b      	lsls	r3, r3, #2
 801184c:	441a      	add	r2, r3
 801184e:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8011852:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011856:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 801185a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 801185e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011862:	b29b      	uxth	r3, r3
 8011864:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8011866:	687a      	ldr	r2, [r7, #4]
 8011868:	683b      	ldr	r3, [r7, #0]
 801186a:	781b      	ldrb	r3, [r3, #0]
 801186c:	009b      	lsls	r3, r3, #2
 801186e:	4413      	add	r3, r2
 8011870:	881b      	ldrh	r3, [r3, #0]
 8011872:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 8011876:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 801187a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801187e:	2b00      	cmp	r3, #0
 8011880:	d01d      	beq.n	80118be <USB_ActivateEndpoint+0x596>
 8011882:	687a      	ldr	r2, [r7, #4]
 8011884:	683b      	ldr	r3, [r7, #0]
 8011886:	781b      	ldrb	r3, [r3, #0]
 8011888:	009b      	lsls	r3, r3, #2
 801188a:	4413      	add	r3, r2
 801188c:	881b      	ldrh	r3, [r3, #0]
 801188e:	b29b      	uxth	r3, r3
 8011890:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011894:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011898:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 801189c:	687a      	ldr	r2, [r7, #4]
 801189e:	683b      	ldr	r3, [r7, #0]
 80118a0:	781b      	ldrb	r3, [r3, #0]
 80118a2:	009b      	lsls	r3, r3, #2
 80118a4:	441a      	add	r2, r3
 80118a6:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 80118aa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80118ae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80118b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80118b6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80118ba:	b29b      	uxth	r3, r3
 80118bc:	8013      	strh	r3, [r2, #0]

      /* Set endpoint RX count */
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80118be:	683b      	ldr	r3, [r7, #0]
 80118c0:	785b      	ldrb	r3, [r3, #1]
 80118c2:	2b00      	cmp	r3, #0
 80118c4:	d16b      	bne.n	801199e <USB_ActivateEndpoint+0x676>
 80118c6:	687b      	ldr	r3, [r7, #4]
 80118c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80118ca:	687b      	ldr	r3, [r7, #4]
 80118cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80118d0:	b29b      	uxth	r3, r3
 80118d2:	461a      	mov	r2, r3
 80118d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80118d6:	4413      	add	r3, r2
 80118d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80118da:	683b      	ldr	r3, [r7, #0]
 80118dc:	781b      	ldrb	r3, [r3, #0]
 80118de:	00da      	lsls	r2, r3, #3
 80118e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80118e2:	4413      	add	r3, r2
 80118e4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80118e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80118ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80118ec:	881b      	ldrh	r3, [r3, #0]
 80118ee:	b29b      	uxth	r3, r3
 80118f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80118f4:	b29a      	uxth	r2, r3
 80118f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80118f8:	801a      	strh	r2, [r3, #0]
 80118fa:	683b      	ldr	r3, [r7, #0]
 80118fc:	691b      	ldr	r3, [r3, #16]
 80118fe:	2b00      	cmp	r3, #0
 8011900:	d10a      	bne.n	8011918 <USB_ActivateEndpoint+0x5f0>
 8011902:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011904:	881b      	ldrh	r3, [r3, #0]
 8011906:	b29b      	uxth	r3, r3
 8011908:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801190c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011910:	b29a      	uxth	r2, r3
 8011912:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011914:	801a      	strh	r2, [r3, #0]
 8011916:	e05d      	b.n	80119d4 <USB_ActivateEndpoint+0x6ac>
 8011918:	683b      	ldr	r3, [r7, #0]
 801191a:	691b      	ldr	r3, [r3, #16]
 801191c:	2b3e      	cmp	r3, #62	@ 0x3e
 801191e:	d81c      	bhi.n	801195a <USB_ActivateEndpoint+0x632>
 8011920:	683b      	ldr	r3, [r7, #0]
 8011922:	691b      	ldr	r3, [r3, #16]
 8011924:	085b      	lsrs	r3, r3, #1
 8011926:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 801192a:	683b      	ldr	r3, [r7, #0]
 801192c:	691b      	ldr	r3, [r3, #16]
 801192e:	f003 0301 	and.w	r3, r3, #1
 8011932:	2b00      	cmp	r3, #0
 8011934:	d004      	beq.n	8011940 <USB_ActivateEndpoint+0x618>
 8011936:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801193a:	3301      	adds	r3, #1
 801193c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8011940:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011942:	881b      	ldrh	r3, [r3, #0]
 8011944:	b29a      	uxth	r2, r3
 8011946:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801194a:	b29b      	uxth	r3, r3
 801194c:	029b      	lsls	r3, r3, #10
 801194e:	b29b      	uxth	r3, r3
 8011950:	4313      	orrs	r3, r2
 8011952:	b29a      	uxth	r2, r3
 8011954:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011956:	801a      	strh	r2, [r3, #0]
 8011958:	e03c      	b.n	80119d4 <USB_ActivateEndpoint+0x6ac>
 801195a:	683b      	ldr	r3, [r7, #0]
 801195c:	691b      	ldr	r3, [r3, #16]
 801195e:	095b      	lsrs	r3, r3, #5
 8011960:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8011964:	683b      	ldr	r3, [r7, #0]
 8011966:	691b      	ldr	r3, [r3, #16]
 8011968:	f003 031f 	and.w	r3, r3, #31
 801196c:	2b00      	cmp	r3, #0
 801196e:	d104      	bne.n	801197a <USB_ActivateEndpoint+0x652>
 8011970:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8011974:	3b01      	subs	r3, #1
 8011976:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 801197a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801197c:	881b      	ldrh	r3, [r3, #0]
 801197e:	b29a      	uxth	r2, r3
 8011980:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8011984:	b29b      	uxth	r3, r3
 8011986:	029b      	lsls	r3, r3, #10
 8011988:	b29b      	uxth	r3, r3
 801198a:	4313      	orrs	r3, r2
 801198c:	b29b      	uxth	r3, r3
 801198e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011992:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011996:	b29a      	uxth	r2, r3
 8011998:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801199a:	801a      	strh	r2, [r3, #0]
 801199c:	e01a      	b.n	80119d4 <USB_ActivateEndpoint+0x6ac>
 801199e:	683b      	ldr	r3, [r7, #0]
 80119a0:	785b      	ldrb	r3, [r3, #1]
 80119a2:	2b01      	cmp	r3, #1
 80119a4:	d116      	bne.n	80119d4 <USB_ActivateEndpoint+0x6ac>
 80119a6:	687b      	ldr	r3, [r7, #4]
 80119a8:	657b      	str	r3, [r7, #84]	@ 0x54
 80119aa:	687b      	ldr	r3, [r7, #4]
 80119ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80119b0:	b29b      	uxth	r3, r3
 80119b2:	461a      	mov	r2, r3
 80119b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80119b6:	4413      	add	r3, r2
 80119b8:	657b      	str	r3, [r7, #84]	@ 0x54
 80119ba:	683b      	ldr	r3, [r7, #0]
 80119bc:	781b      	ldrb	r3, [r3, #0]
 80119be:	00da      	lsls	r2, r3, #3
 80119c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80119c2:	4413      	add	r3, r2
 80119c4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80119c8:	653b      	str	r3, [r7, #80]	@ 0x50
 80119ca:	683b      	ldr	r3, [r7, #0]
 80119cc:	691b      	ldr	r3, [r3, #16]
 80119ce:	b29a      	uxth	r2, r3
 80119d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80119d2:	801a      	strh	r2, [r3, #0]
 80119d4:	687b      	ldr	r3, [r7, #4]
 80119d6:	647b      	str	r3, [r7, #68]	@ 0x44
 80119d8:	683b      	ldr	r3, [r7, #0]
 80119da:	785b      	ldrb	r3, [r3, #1]
 80119dc:	2b00      	cmp	r3, #0
 80119de:	d16b      	bne.n	8011ab8 <USB_ActivateEndpoint+0x790>
 80119e0:	687b      	ldr	r3, [r7, #4]
 80119e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80119e4:	687b      	ldr	r3, [r7, #4]
 80119e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80119ea:	b29b      	uxth	r3, r3
 80119ec:	461a      	mov	r2, r3
 80119ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80119f0:	4413      	add	r3, r2
 80119f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80119f4:	683b      	ldr	r3, [r7, #0]
 80119f6:	781b      	ldrb	r3, [r3, #0]
 80119f8:	00da      	lsls	r2, r3, #3
 80119fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80119fc:	4413      	add	r3, r2
 80119fe:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8011a02:	63bb      	str	r3, [r7, #56]	@ 0x38
 8011a04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011a06:	881b      	ldrh	r3, [r3, #0]
 8011a08:	b29b      	uxth	r3, r3
 8011a0a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8011a0e:	b29a      	uxth	r2, r3
 8011a10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011a12:	801a      	strh	r2, [r3, #0]
 8011a14:	683b      	ldr	r3, [r7, #0]
 8011a16:	691b      	ldr	r3, [r3, #16]
 8011a18:	2b00      	cmp	r3, #0
 8011a1a:	d10a      	bne.n	8011a32 <USB_ActivateEndpoint+0x70a>
 8011a1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011a1e:	881b      	ldrh	r3, [r3, #0]
 8011a20:	b29b      	uxth	r3, r3
 8011a22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011a26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011a2a:	b29a      	uxth	r2, r3
 8011a2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011a2e:	801a      	strh	r2, [r3, #0]
 8011a30:	e05b      	b.n	8011aea <USB_ActivateEndpoint+0x7c2>
 8011a32:	683b      	ldr	r3, [r7, #0]
 8011a34:	691b      	ldr	r3, [r3, #16]
 8011a36:	2b3e      	cmp	r3, #62	@ 0x3e
 8011a38:	d81c      	bhi.n	8011a74 <USB_ActivateEndpoint+0x74c>
 8011a3a:	683b      	ldr	r3, [r7, #0]
 8011a3c:	691b      	ldr	r3, [r3, #16]
 8011a3e:	085b      	lsrs	r3, r3, #1
 8011a40:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8011a44:	683b      	ldr	r3, [r7, #0]
 8011a46:	691b      	ldr	r3, [r3, #16]
 8011a48:	f003 0301 	and.w	r3, r3, #1
 8011a4c:	2b00      	cmp	r3, #0
 8011a4e:	d004      	beq.n	8011a5a <USB_ActivateEndpoint+0x732>
 8011a50:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8011a54:	3301      	adds	r3, #1
 8011a56:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8011a5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011a5c:	881b      	ldrh	r3, [r3, #0]
 8011a5e:	b29a      	uxth	r2, r3
 8011a60:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8011a64:	b29b      	uxth	r3, r3
 8011a66:	029b      	lsls	r3, r3, #10
 8011a68:	b29b      	uxth	r3, r3
 8011a6a:	4313      	orrs	r3, r2
 8011a6c:	b29a      	uxth	r2, r3
 8011a6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011a70:	801a      	strh	r2, [r3, #0]
 8011a72:	e03a      	b.n	8011aea <USB_ActivateEndpoint+0x7c2>
 8011a74:	683b      	ldr	r3, [r7, #0]
 8011a76:	691b      	ldr	r3, [r3, #16]
 8011a78:	095b      	lsrs	r3, r3, #5
 8011a7a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8011a7e:	683b      	ldr	r3, [r7, #0]
 8011a80:	691b      	ldr	r3, [r3, #16]
 8011a82:	f003 031f 	and.w	r3, r3, #31
 8011a86:	2b00      	cmp	r3, #0
 8011a88:	d104      	bne.n	8011a94 <USB_ActivateEndpoint+0x76c>
 8011a8a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8011a8e:	3b01      	subs	r3, #1
 8011a90:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8011a94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011a96:	881b      	ldrh	r3, [r3, #0]
 8011a98:	b29a      	uxth	r2, r3
 8011a9a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8011a9e:	b29b      	uxth	r3, r3
 8011aa0:	029b      	lsls	r3, r3, #10
 8011aa2:	b29b      	uxth	r3, r3
 8011aa4:	4313      	orrs	r3, r2
 8011aa6:	b29b      	uxth	r3, r3
 8011aa8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011aac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011ab0:	b29a      	uxth	r2, r3
 8011ab2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011ab4:	801a      	strh	r2, [r3, #0]
 8011ab6:	e018      	b.n	8011aea <USB_ActivateEndpoint+0x7c2>
 8011ab8:	683b      	ldr	r3, [r7, #0]
 8011aba:	785b      	ldrb	r3, [r3, #1]
 8011abc:	2b01      	cmp	r3, #1
 8011abe:	d114      	bne.n	8011aea <USB_ActivateEndpoint+0x7c2>
 8011ac0:	687b      	ldr	r3, [r7, #4]
 8011ac2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8011ac6:	b29b      	uxth	r3, r3
 8011ac8:	461a      	mov	r2, r3
 8011aca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011acc:	4413      	add	r3, r2
 8011ace:	647b      	str	r3, [r7, #68]	@ 0x44
 8011ad0:	683b      	ldr	r3, [r7, #0]
 8011ad2:	781b      	ldrb	r3, [r3, #0]
 8011ad4:	00da      	lsls	r2, r3, #3
 8011ad6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011ad8:	4413      	add	r3, r2
 8011ada:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8011ade:	643b      	str	r3, [r7, #64]	@ 0x40
 8011ae0:	683b      	ldr	r3, [r7, #0]
 8011ae2:	691b      	ldr	r3, [r3, #16]
 8011ae4:	b29a      	uxth	r2, r3
 8011ae6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011ae8:	801a      	strh	r2, [r3, #0]

      /* Set endpoint RX to valid state */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8011aea:	687a      	ldr	r2, [r7, #4]
 8011aec:	683b      	ldr	r3, [r7, #0]
 8011aee:	781b      	ldrb	r3, [r3, #0]
 8011af0:	009b      	lsls	r3, r3, #2
 8011af2:	4413      	add	r3, r2
 8011af4:	881b      	ldrh	r3, [r3, #0]
 8011af6:	b29b      	uxth	r3, r3
 8011af8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8011afc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011b00:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8011b02:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8011b04:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8011b08:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8011b0a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8011b0c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8011b10:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8011b12:	687a      	ldr	r2, [r7, #4]
 8011b14:	683b      	ldr	r3, [r7, #0]
 8011b16:	781b      	ldrb	r3, [r3, #0]
 8011b18:	009b      	lsls	r3, r3, #2
 8011b1a:	441a      	add	r2, r3
 8011b1c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8011b1e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011b22:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011b26:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011b2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011b2e:	b29b      	uxth	r3, r3
 8011b30:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8011b32:	687a      	ldr	r2, [r7, #4]
 8011b34:	683b      	ldr	r3, [r7, #0]
 8011b36:	781b      	ldrb	r3, [r3, #0]
 8011b38:	009b      	lsls	r3, r3, #2
 8011b3a:	4413      	add	r3, r2
 8011b3c:	881b      	ldrh	r3, [r3, #0]
 8011b3e:	b29b      	uxth	r3, r3
 8011b40:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011b44:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011b48:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8011b4a:	687a      	ldr	r2, [r7, #4]
 8011b4c:	683b      	ldr	r3, [r7, #0]
 8011b4e:	781b      	ldrb	r3, [r3, #0]
 8011b50:	009b      	lsls	r3, r3, #2
 8011b52:	441a      	add	r2, r3
 8011b54:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8011b56:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011b5a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011b5e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011b62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011b66:	b29b      	uxth	r3, r3
 8011b68:	8013      	strh	r3, [r2, #0]
 8011b6a:	e0bc      	b.n	8011ce6 <USB_ActivateEndpoint+0x9be>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8011b6c:	687a      	ldr	r2, [r7, #4]
 8011b6e:	683b      	ldr	r3, [r7, #0]
 8011b70:	781b      	ldrb	r3, [r3, #0]
 8011b72:	009b      	lsls	r3, r3, #2
 8011b74:	4413      	add	r3, r2
 8011b76:	881b      	ldrh	r3, [r3, #0]
 8011b78:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 8011b7c:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8011b80:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8011b84:	2b00      	cmp	r3, #0
 8011b86:	d01d      	beq.n	8011bc4 <USB_ActivateEndpoint+0x89c>
 8011b88:	687a      	ldr	r2, [r7, #4]
 8011b8a:	683b      	ldr	r3, [r7, #0]
 8011b8c:	781b      	ldrb	r3, [r3, #0]
 8011b8e:	009b      	lsls	r3, r3, #2
 8011b90:	4413      	add	r3, r2
 8011b92:	881b      	ldrh	r3, [r3, #0]
 8011b94:	b29b      	uxth	r3, r3
 8011b96:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011b9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011b9e:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 8011ba2:	687a      	ldr	r2, [r7, #4]
 8011ba4:	683b      	ldr	r3, [r7, #0]
 8011ba6:	781b      	ldrb	r3, [r3, #0]
 8011ba8:	009b      	lsls	r3, r3, #2
 8011baa:	441a      	add	r2, r3
 8011bac:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8011bb0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011bb4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011bb8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8011bbc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011bc0:	b29b      	uxth	r3, r3
 8011bc2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8011bc4:	687a      	ldr	r2, [r7, #4]
 8011bc6:	683b      	ldr	r3, [r7, #0]
 8011bc8:	781b      	ldrb	r3, [r3, #0]
 8011bca:	009b      	lsls	r3, r3, #2
 8011bcc:	4413      	add	r3, r2
 8011bce:	881b      	ldrh	r3, [r3, #0]
 8011bd0:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
 8011bd4:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 8011bd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011bdc:	2b00      	cmp	r3, #0
 8011bde:	d01d      	beq.n	8011c1c <USB_ActivateEndpoint+0x8f4>
 8011be0:	687a      	ldr	r2, [r7, #4]
 8011be2:	683b      	ldr	r3, [r7, #0]
 8011be4:	781b      	ldrb	r3, [r3, #0]
 8011be6:	009b      	lsls	r3, r3, #2
 8011be8:	4413      	add	r3, r2
 8011bea:	881b      	ldrh	r3, [r3, #0]
 8011bec:	b29b      	uxth	r3, r3
 8011bee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011bf2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011bf6:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 8011bfa:	687a      	ldr	r2, [r7, #4]
 8011bfc:	683b      	ldr	r3, [r7, #0]
 8011bfe:	781b      	ldrb	r3, [r3, #0]
 8011c00:	009b      	lsls	r3, r3, #2
 8011c02:	441a      	add	r2, r3
 8011c04:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 8011c08:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011c0c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011c10:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011c14:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8011c18:	b29b      	uxth	r3, r3
 8011c1a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8011c1c:	683b      	ldr	r3, [r7, #0]
 8011c1e:	78db      	ldrb	r3, [r3, #3]
 8011c20:	2b01      	cmp	r3, #1
 8011c22:	d024      	beq.n	8011c6e <USB_ActivateEndpoint+0x946>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8011c24:	687a      	ldr	r2, [r7, #4]
 8011c26:	683b      	ldr	r3, [r7, #0]
 8011c28:	781b      	ldrb	r3, [r3, #0]
 8011c2a:	009b      	lsls	r3, r3, #2
 8011c2c:	4413      	add	r3, r2
 8011c2e:	881b      	ldrh	r3, [r3, #0]
 8011c30:	b29b      	uxth	r3, r3
 8011c32:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011c36:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011c3a:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8011c3e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8011c42:	f083 0320 	eor.w	r3, r3, #32
 8011c46:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8011c4a:	687a      	ldr	r2, [r7, #4]
 8011c4c:	683b      	ldr	r3, [r7, #0]
 8011c4e:	781b      	ldrb	r3, [r3, #0]
 8011c50:	009b      	lsls	r3, r3, #2
 8011c52:	441a      	add	r2, r3
 8011c54:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8011c58:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011c5c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011c60:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011c64:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011c68:	b29b      	uxth	r3, r3
 8011c6a:	8013      	strh	r3, [r2, #0]
 8011c6c:	e01d      	b.n	8011caa <USB_ActivateEndpoint+0x982>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8011c6e:	687a      	ldr	r2, [r7, #4]
 8011c70:	683b      	ldr	r3, [r7, #0]
 8011c72:	781b      	ldrb	r3, [r3, #0]
 8011c74:	009b      	lsls	r3, r3, #2
 8011c76:	4413      	add	r3, r2
 8011c78:	881b      	ldrh	r3, [r3, #0]
 8011c7a:	b29b      	uxth	r3, r3
 8011c7c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011c80:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011c84:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8011c88:	687a      	ldr	r2, [r7, #4]
 8011c8a:	683b      	ldr	r3, [r7, #0]
 8011c8c:	781b      	ldrb	r3, [r3, #0]
 8011c8e:	009b      	lsls	r3, r3, #2
 8011c90:	441a      	add	r2, r3
 8011c92:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8011c96:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011c9a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011c9e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011ca2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011ca6:	b29b      	uxth	r3, r3
 8011ca8:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8011caa:	687a      	ldr	r2, [r7, #4]
 8011cac:	683b      	ldr	r3, [r7, #0]
 8011cae:	781b      	ldrb	r3, [r3, #0]
 8011cb0:	009b      	lsls	r3, r3, #2
 8011cb2:	4413      	add	r3, r2
 8011cb4:	881b      	ldrh	r3, [r3, #0]
 8011cb6:	b29b      	uxth	r3, r3
 8011cb8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8011cbc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011cc0:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8011cc4:	687a      	ldr	r2, [r7, #4]
 8011cc6:	683b      	ldr	r3, [r7, #0]
 8011cc8:	781b      	ldrb	r3, [r3, #0]
 8011cca:	009b      	lsls	r3, r3, #2
 8011ccc:	441a      	add	r2, r3
 8011cce:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8011cd2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011cd6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011cda:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011cde:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011ce2:	b29b      	uxth	r3, r3
 8011ce4:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8011ce6:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
}
 8011cea:	4618      	mov	r0, r3
 8011cec:	379c      	adds	r7, #156	@ 0x9c
 8011cee:	46bd      	mov	sp, r7
 8011cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cf4:	4770      	bx	lr
 8011cf6:	bf00      	nop

08011cf8 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8011cf8:	b480      	push	{r7}
 8011cfa:	b08d      	sub	sp, #52	@ 0x34
 8011cfc:	af00      	add	r7, sp, #0
 8011cfe:	6078      	str	r0, [r7, #4]
 8011d00:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8011d02:	683b      	ldr	r3, [r7, #0]
 8011d04:	7b1b      	ldrb	r3, [r3, #12]
 8011d06:	2b00      	cmp	r3, #0
 8011d08:	f040 808e 	bne.w	8011e28 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8011d0c:	683b      	ldr	r3, [r7, #0]
 8011d0e:	785b      	ldrb	r3, [r3, #1]
 8011d10:	2b00      	cmp	r3, #0
 8011d12:	d044      	beq.n	8011d9e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8011d14:	687a      	ldr	r2, [r7, #4]
 8011d16:	683b      	ldr	r3, [r7, #0]
 8011d18:	781b      	ldrb	r3, [r3, #0]
 8011d1a:	009b      	lsls	r3, r3, #2
 8011d1c:	4413      	add	r3, r2
 8011d1e:	881b      	ldrh	r3, [r3, #0]
 8011d20:	81bb      	strh	r3, [r7, #12]
 8011d22:	89bb      	ldrh	r3, [r7, #12]
 8011d24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011d28:	2b00      	cmp	r3, #0
 8011d2a:	d01b      	beq.n	8011d64 <USB_DeactivateEndpoint+0x6c>
 8011d2c:	687a      	ldr	r2, [r7, #4]
 8011d2e:	683b      	ldr	r3, [r7, #0]
 8011d30:	781b      	ldrb	r3, [r3, #0]
 8011d32:	009b      	lsls	r3, r3, #2
 8011d34:	4413      	add	r3, r2
 8011d36:	881b      	ldrh	r3, [r3, #0]
 8011d38:	b29b      	uxth	r3, r3
 8011d3a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011d3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011d42:	817b      	strh	r3, [r7, #10]
 8011d44:	687a      	ldr	r2, [r7, #4]
 8011d46:	683b      	ldr	r3, [r7, #0]
 8011d48:	781b      	ldrb	r3, [r3, #0]
 8011d4a:	009b      	lsls	r3, r3, #2
 8011d4c:	441a      	add	r2, r3
 8011d4e:	897b      	ldrh	r3, [r7, #10]
 8011d50:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011d54:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011d58:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011d5c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8011d60:	b29b      	uxth	r3, r3
 8011d62:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8011d64:	687a      	ldr	r2, [r7, #4]
 8011d66:	683b      	ldr	r3, [r7, #0]
 8011d68:	781b      	ldrb	r3, [r3, #0]
 8011d6a:	009b      	lsls	r3, r3, #2
 8011d6c:	4413      	add	r3, r2
 8011d6e:	881b      	ldrh	r3, [r3, #0]
 8011d70:	b29b      	uxth	r3, r3
 8011d72:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011d76:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011d7a:	813b      	strh	r3, [r7, #8]
 8011d7c:	687a      	ldr	r2, [r7, #4]
 8011d7e:	683b      	ldr	r3, [r7, #0]
 8011d80:	781b      	ldrb	r3, [r3, #0]
 8011d82:	009b      	lsls	r3, r3, #2
 8011d84:	441a      	add	r2, r3
 8011d86:	893b      	ldrh	r3, [r7, #8]
 8011d88:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011d8c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011d90:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011d94:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011d98:	b29b      	uxth	r3, r3
 8011d9a:	8013      	strh	r3, [r2, #0]
 8011d9c:	e192      	b.n	80120c4 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8011d9e:	687a      	ldr	r2, [r7, #4]
 8011da0:	683b      	ldr	r3, [r7, #0]
 8011da2:	781b      	ldrb	r3, [r3, #0]
 8011da4:	009b      	lsls	r3, r3, #2
 8011da6:	4413      	add	r3, r2
 8011da8:	881b      	ldrh	r3, [r3, #0]
 8011daa:	827b      	strh	r3, [r7, #18]
 8011dac:	8a7b      	ldrh	r3, [r7, #18]
 8011dae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8011db2:	2b00      	cmp	r3, #0
 8011db4:	d01b      	beq.n	8011dee <USB_DeactivateEndpoint+0xf6>
 8011db6:	687a      	ldr	r2, [r7, #4]
 8011db8:	683b      	ldr	r3, [r7, #0]
 8011dba:	781b      	ldrb	r3, [r3, #0]
 8011dbc:	009b      	lsls	r3, r3, #2
 8011dbe:	4413      	add	r3, r2
 8011dc0:	881b      	ldrh	r3, [r3, #0]
 8011dc2:	b29b      	uxth	r3, r3
 8011dc4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011dc8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011dcc:	823b      	strh	r3, [r7, #16]
 8011dce:	687a      	ldr	r2, [r7, #4]
 8011dd0:	683b      	ldr	r3, [r7, #0]
 8011dd2:	781b      	ldrb	r3, [r3, #0]
 8011dd4:	009b      	lsls	r3, r3, #2
 8011dd6:	441a      	add	r2, r3
 8011dd8:	8a3b      	ldrh	r3, [r7, #16]
 8011dda:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011dde:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011de2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8011de6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011dea:	b29b      	uxth	r3, r3
 8011dec:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8011dee:	687a      	ldr	r2, [r7, #4]
 8011df0:	683b      	ldr	r3, [r7, #0]
 8011df2:	781b      	ldrb	r3, [r3, #0]
 8011df4:	009b      	lsls	r3, r3, #2
 8011df6:	4413      	add	r3, r2
 8011df8:	881b      	ldrh	r3, [r3, #0]
 8011dfa:	b29b      	uxth	r3, r3
 8011dfc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8011e00:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011e04:	81fb      	strh	r3, [r7, #14]
 8011e06:	687a      	ldr	r2, [r7, #4]
 8011e08:	683b      	ldr	r3, [r7, #0]
 8011e0a:	781b      	ldrb	r3, [r3, #0]
 8011e0c:	009b      	lsls	r3, r3, #2
 8011e0e:	441a      	add	r2, r3
 8011e10:	89fb      	ldrh	r3, [r7, #14]
 8011e12:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011e16:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011e1a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011e1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011e22:	b29b      	uxth	r3, r3
 8011e24:	8013      	strh	r3, [r2, #0]
 8011e26:	e14d      	b.n	80120c4 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8011e28:	683b      	ldr	r3, [r7, #0]
 8011e2a:	785b      	ldrb	r3, [r3, #1]
 8011e2c:	2b00      	cmp	r3, #0
 8011e2e:	f040 80a5 	bne.w	8011f7c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8011e32:	687a      	ldr	r2, [r7, #4]
 8011e34:	683b      	ldr	r3, [r7, #0]
 8011e36:	781b      	ldrb	r3, [r3, #0]
 8011e38:	009b      	lsls	r3, r3, #2
 8011e3a:	4413      	add	r3, r2
 8011e3c:	881b      	ldrh	r3, [r3, #0]
 8011e3e:	843b      	strh	r3, [r7, #32]
 8011e40:	8c3b      	ldrh	r3, [r7, #32]
 8011e42:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8011e46:	2b00      	cmp	r3, #0
 8011e48:	d01b      	beq.n	8011e82 <USB_DeactivateEndpoint+0x18a>
 8011e4a:	687a      	ldr	r2, [r7, #4]
 8011e4c:	683b      	ldr	r3, [r7, #0]
 8011e4e:	781b      	ldrb	r3, [r3, #0]
 8011e50:	009b      	lsls	r3, r3, #2
 8011e52:	4413      	add	r3, r2
 8011e54:	881b      	ldrh	r3, [r3, #0]
 8011e56:	b29b      	uxth	r3, r3
 8011e58:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011e5c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011e60:	83fb      	strh	r3, [r7, #30]
 8011e62:	687a      	ldr	r2, [r7, #4]
 8011e64:	683b      	ldr	r3, [r7, #0]
 8011e66:	781b      	ldrb	r3, [r3, #0]
 8011e68:	009b      	lsls	r3, r3, #2
 8011e6a:	441a      	add	r2, r3
 8011e6c:	8bfb      	ldrh	r3, [r7, #30]
 8011e6e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011e72:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011e76:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8011e7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011e7e:	b29b      	uxth	r3, r3
 8011e80:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8011e82:	687a      	ldr	r2, [r7, #4]
 8011e84:	683b      	ldr	r3, [r7, #0]
 8011e86:	781b      	ldrb	r3, [r3, #0]
 8011e88:	009b      	lsls	r3, r3, #2
 8011e8a:	4413      	add	r3, r2
 8011e8c:	881b      	ldrh	r3, [r3, #0]
 8011e8e:	83bb      	strh	r3, [r7, #28]
 8011e90:	8bbb      	ldrh	r3, [r7, #28]
 8011e92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011e96:	2b00      	cmp	r3, #0
 8011e98:	d01b      	beq.n	8011ed2 <USB_DeactivateEndpoint+0x1da>
 8011e9a:	687a      	ldr	r2, [r7, #4]
 8011e9c:	683b      	ldr	r3, [r7, #0]
 8011e9e:	781b      	ldrb	r3, [r3, #0]
 8011ea0:	009b      	lsls	r3, r3, #2
 8011ea2:	4413      	add	r3, r2
 8011ea4:	881b      	ldrh	r3, [r3, #0]
 8011ea6:	b29b      	uxth	r3, r3
 8011ea8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011eac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011eb0:	837b      	strh	r3, [r7, #26]
 8011eb2:	687a      	ldr	r2, [r7, #4]
 8011eb4:	683b      	ldr	r3, [r7, #0]
 8011eb6:	781b      	ldrb	r3, [r3, #0]
 8011eb8:	009b      	lsls	r3, r3, #2
 8011eba:	441a      	add	r2, r3
 8011ebc:	8b7b      	ldrh	r3, [r7, #26]
 8011ebe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011ec2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011ec6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011eca:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8011ece:	b29b      	uxth	r3, r3
 8011ed0:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8011ed2:	687a      	ldr	r2, [r7, #4]
 8011ed4:	683b      	ldr	r3, [r7, #0]
 8011ed6:	781b      	ldrb	r3, [r3, #0]
 8011ed8:	009b      	lsls	r3, r3, #2
 8011eda:	4413      	add	r3, r2
 8011edc:	881b      	ldrh	r3, [r3, #0]
 8011ede:	b29b      	uxth	r3, r3
 8011ee0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011ee4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011ee8:	833b      	strh	r3, [r7, #24]
 8011eea:	687a      	ldr	r2, [r7, #4]
 8011eec:	683b      	ldr	r3, [r7, #0]
 8011eee:	781b      	ldrb	r3, [r3, #0]
 8011ef0:	009b      	lsls	r3, r3, #2
 8011ef2:	441a      	add	r2, r3
 8011ef4:	8b3b      	ldrh	r3, [r7, #24]
 8011ef6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011efa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011efe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011f02:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8011f06:	b29b      	uxth	r3, r3
 8011f08:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8011f0a:	687a      	ldr	r2, [r7, #4]
 8011f0c:	683b      	ldr	r3, [r7, #0]
 8011f0e:	781b      	ldrb	r3, [r3, #0]
 8011f10:	009b      	lsls	r3, r3, #2
 8011f12:	4413      	add	r3, r2
 8011f14:	881b      	ldrh	r3, [r3, #0]
 8011f16:	b29b      	uxth	r3, r3
 8011f18:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8011f1c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011f20:	82fb      	strh	r3, [r7, #22]
 8011f22:	687a      	ldr	r2, [r7, #4]
 8011f24:	683b      	ldr	r3, [r7, #0]
 8011f26:	781b      	ldrb	r3, [r3, #0]
 8011f28:	009b      	lsls	r3, r3, #2
 8011f2a:	441a      	add	r2, r3
 8011f2c:	8afb      	ldrh	r3, [r7, #22]
 8011f2e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011f32:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011f36:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011f3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011f3e:	b29b      	uxth	r3, r3
 8011f40:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8011f42:	687a      	ldr	r2, [r7, #4]
 8011f44:	683b      	ldr	r3, [r7, #0]
 8011f46:	781b      	ldrb	r3, [r3, #0]
 8011f48:	009b      	lsls	r3, r3, #2
 8011f4a:	4413      	add	r3, r2
 8011f4c:	881b      	ldrh	r3, [r3, #0]
 8011f4e:	b29b      	uxth	r3, r3
 8011f50:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011f54:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011f58:	82bb      	strh	r3, [r7, #20]
 8011f5a:	687a      	ldr	r2, [r7, #4]
 8011f5c:	683b      	ldr	r3, [r7, #0]
 8011f5e:	781b      	ldrb	r3, [r3, #0]
 8011f60:	009b      	lsls	r3, r3, #2
 8011f62:	441a      	add	r2, r3
 8011f64:	8abb      	ldrh	r3, [r7, #20]
 8011f66:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011f6a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011f6e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011f72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011f76:	b29b      	uxth	r3, r3
 8011f78:	8013      	strh	r3, [r2, #0]
 8011f7a:	e0a3      	b.n	80120c4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8011f7c:	687a      	ldr	r2, [r7, #4]
 8011f7e:	683b      	ldr	r3, [r7, #0]
 8011f80:	781b      	ldrb	r3, [r3, #0]
 8011f82:	009b      	lsls	r3, r3, #2
 8011f84:	4413      	add	r3, r2
 8011f86:	881b      	ldrh	r3, [r3, #0]
 8011f88:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8011f8a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8011f8c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8011f90:	2b00      	cmp	r3, #0
 8011f92:	d01b      	beq.n	8011fcc <USB_DeactivateEndpoint+0x2d4>
 8011f94:	687a      	ldr	r2, [r7, #4]
 8011f96:	683b      	ldr	r3, [r7, #0]
 8011f98:	781b      	ldrb	r3, [r3, #0]
 8011f9a:	009b      	lsls	r3, r3, #2
 8011f9c:	4413      	add	r3, r2
 8011f9e:	881b      	ldrh	r3, [r3, #0]
 8011fa0:	b29b      	uxth	r3, r3
 8011fa2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011fa6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011faa:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8011fac:	687a      	ldr	r2, [r7, #4]
 8011fae:	683b      	ldr	r3, [r7, #0]
 8011fb0:	781b      	ldrb	r3, [r3, #0]
 8011fb2:	009b      	lsls	r3, r3, #2
 8011fb4:	441a      	add	r2, r3
 8011fb6:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8011fb8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011fbc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011fc0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8011fc4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011fc8:	b29b      	uxth	r3, r3
 8011fca:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8011fcc:	687a      	ldr	r2, [r7, #4]
 8011fce:	683b      	ldr	r3, [r7, #0]
 8011fd0:	781b      	ldrb	r3, [r3, #0]
 8011fd2:	009b      	lsls	r3, r3, #2
 8011fd4:	4413      	add	r3, r2
 8011fd6:	881b      	ldrh	r3, [r3, #0]
 8011fd8:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8011fda:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8011fdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011fe0:	2b00      	cmp	r3, #0
 8011fe2:	d01b      	beq.n	801201c <USB_DeactivateEndpoint+0x324>
 8011fe4:	687a      	ldr	r2, [r7, #4]
 8011fe6:	683b      	ldr	r3, [r7, #0]
 8011fe8:	781b      	ldrb	r3, [r3, #0]
 8011fea:	009b      	lsls	r3, r3, #2
 8011fec:	4413      	add	r3, r2
 8011fee:	881b      	ldrh	r3, [r3, #0]
 8011ff0:	b29b      	uxth	r3, r3
 8011ff2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011ff6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011ffa:	853b      	strh	r3, [r7, #40]	@ 0x28
 8011ffc:	687a      	ldr	r2, [r7, #4]
 8011ffe:	683b      	ldr	r3, [r7, #0]
 8012000:	781b      	ldrb	r3, [r3, #0]
 8012002:	009b      	lsls	r3, r3, #2
 8012004:	441a      	add	r2, r3
 8012006:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8012008:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 801200c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8012010:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8012014:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8012018:	b29b      	uxth	r3, r3
 801201a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 801201c:	687a      	ldr	r2, [r7, #4]
 801201e:	683b      	ldr	r3, [r7, #0]
 8012020:	781b      	ldrb	r3, [r3, #0]
 8012022:	009b      	lsls	r3, r3, #2
 8012024:	4413      	add	r3, r2
 8012026:	881b      	ldrh	r3, [r3, #0]
 8012028:	b29b      	uxth	r3, r3
 801202a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 801202e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8012032:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8012034:	687a      	ldr	r2, [r7, #4]
 8012036:	683b      	ldr	r3, [r7, #0]
 8012038:	781b      	ldrb	r3, [r3, #0]
 801203a:	009b      	lsls	r3, r3, #2
 801203c:	441a      	add	r2, r3
 801203e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8012040:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8012044:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8012048:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 801204c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012050:	b29b      	uxth	r3, r3
 8012052:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8012054:	687a      	ldr	r2, [r7, #4]
 8012056:	683b      	ldr	r3, [r7, #0]
 8012058:	781b      	ldrb	r3, [r3, #0]
 801205a:	009b      	lsls	r3, r3, #2
 801205c:	4413      	add	r3, r2
 801205e:	881b      	ldrh	r3, [r3, #0]
 8012060:	b29b      	uxth	r3, r3
 8012062:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8012066:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801206a:	84bb      	strh	r3, [r7, #36]	@ 0x24
 801206c:	687a      	ldr	r2, [r7, #4]
 801206e:	683b      	ldr	r3, [r7, #0]
 8012070:	781b      	ldrb	r3, [r3, #0]
 8012072:	009b      	lsls	r3, r3, #2
 8012074:	441a      	add	r2, r3
 8012076:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012078:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 801207c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8012080:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8012084:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012088:	b29b      	uxth	r3, r3
 801208a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801208c:	687a      	ldr	r2, [r7, #4]
 801208e:	683b      	ldr	r3, [r7, #0]
 8012090:	781b      	ldrb	r3, [r3, #0]
 8012092:	009b      	lsls	r3, r3, #2
 8012094:	4413      	add	r3, r2
 8012096:	881b      	ldrh	r3, [r3, #0]
 8012098:	b29b      	uxth	r3, r3
 801209a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 801209e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80120a2:	847b      	strh	r3, [r7, #34]	@ 0x22
 80120a4:	687a      	ldr	r2, [r7, #4]
 80120a6:	683b      	ldr	r3, [r7, #0]
 80120a8:	781b      	ldrb	r3, [r3, #0]
 80120aa:	009b      	lsls	r3, r3, #2
 80120ac:	441a      	add	r2, r3
 80120ae:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80120b0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80120b4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80120b8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80120bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80120c0:	b29b      	uxth	r3, r3
 80120c2:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80120c4:	2300      	movs	r3, #0
}
 80120c6:	4618      	mov	r0, r3
 80120c8:	3734      	adds	r7, #52	@ 0x34
 80120ca:	46bd      	mov	sp, r7
 80120cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120d0:	4770      	bx	lr

080120d2 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80120d2:	b580      	push	{r7, lr}
 80120d4:	b0ac      	sub	sp, #176	@ 0xb0
 80120d6:	af00      	add	r7, sp, #0
 80120d8:	6078      	str	r0, [r7, #4]
 80120da:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80120dc:	683b      	ldr	r3, [r7, #0]
 80120de:	785b      	ldrb	r3, [r3, #1]
 80120e0:	2b01      	cmp	r3, #1
 80120e2:	f040 84ca 	bne.w	8012a7a <USB_EPStartXfer+0x9a8>
  {
    /* Multi packet transfer */
    if (ep->xfer_len > ep->maxpacket)
 80120e6:	683b      	ldr	r3, [r7, #0]
 80120e8:	699a      	ldr	r2, [r3, #24]
 80120ea:	683b      	ldr	r3, [r7, #0]
 80120ec:	691b      	ldr	r3, [r3, #16]
 80120ee:	429a      	cmp	r2, r3
 80120f0:	d904      	bls.n	80120fc <USB_EPStartXfer+0x2a>
    {
      len = ep->maxpacket;
 80120f2:	683b      	ldr	r3, [r7, #0]
 80120f4:	691b      	ldr	r3, [r3, #16]
 80120f6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80120fa:	e003      	b.n	8012104 <USB_EPStartXfer+0x32>
    }
    else
    {
      len = ep->xfer_len;
 80120fc:	683b      	ldr	r3, [r7, #0]
 80120fe:	699b      	ldr	r3, [r3, #24]
 8012100:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8012104:	683b      	ldr	r3, [r7, #0]
 8012106:	7b1b      	ldrb	r3, [r3, #12]
 8012108:	2b00      	cmp	r3, #0
 801210a:	d122      	bne.n	8012152 <USB_EPStartXfer+0x80>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 801210c:	683b      	ldr	r3, [r7, #0]
 801210e:	6959      	ldr	r1, [r3, #20]
 8012110:	683b      	ldr	r3, [r7, #0]
 8012112:	88da      	ldrh	r2, [r3, #6]
 8012114:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012118:	b29b      	uxth	r3, r3
 801211a:	6878      	ldr	r0, [r7, #4]
 801211c:	f000 febd 	bl	8012e9a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8012120:	687b      	ldr	r3, [r7, #4]
 8012122:	613b      	str	r3, [r7, #16]
 8012124:	687b      	ldr	r3, [r7, #4]
 8012126:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 801212a:	b29b      	uxth	r3, r3
 801212c:	461a      	mov	r2, r3
 801212e:	693b      	ldr	r3, [r7, #16]
 8012130:	4413      	add	r3, r2
 8012132:	613b      	str	r3, [r7, #16]
 8012134:	683b      	ldr	r3, [r7, #0]
 8012136:	781b      	ldrb	r3, [r3, #0]
 8012138:	00da      	lsls	r2, r3, #3
 801213a:	693b      	ldr	r3, [r7, #16]
 801213c:	4413      	add	r3, r2
 801213e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8012142:	60fb      	str	r3, [r7, #12]
 8012144:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012148:	b29a      	uxth	r2, r3
 801214a:	68fb      	ldr	r3, [r7, #12]
 801214c:	801a      	strh	r2, [r3, #0]
 801214e:	f000 bc6f 	b.w	8012a30 <USB_EPStartXfer+0x95e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8012152:	683b      	ldr	r3, [r7, #0]
 8012154:	78db      	ldrb	r3, [r3, #3]
 8012156:	2b02      	cmp	r3, #2
 8012158:	f040 831e 	bne.w	8012798 <USB_EPStartXfer+0x6c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 801215c:	683b      	ldr	r3, [r7, #0]
 801215e:	6a1a      	ldr	r2, [r3, #32]
 8012160:	683b      	ldr	r3, [r7, #0]
 8012162:	691b      	ldr	r3, [r3, #16]
 8012164:	429a      	cmp	r2, r3
 8012166:	f240 82cf 	bls.w	8012708 <USB_EPStartXfer+0x636>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 801216a:	687a      	ldr	r2, [r7, #4]
 801216c:	683b      	ldr	r3, [r7, #0]
 801216e:	781b      	ldrb	r3, [r3, #0]
 8012170:	009b      	lsls	r3, r3, #2
 8012172:	4413      	add	r3, r2
 8012174:	881b      	ldrh	r3, [r3, #0]
 8012176:	b29b      	uxth	r3, r3
 8012178:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 801217c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8012180:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8012184:	687a      	ldr	r2, [r7, #4]
 8012186:	683b      	ldr	r3, [r7, #0]
 8012188:	781b      	ldrb	r3, [r3, #0]
 801218a:	009b      	lsls	r3, r3, #2
 801218c:	441a      	add	r2, r3
 801218e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8012192:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8012196:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 801219a:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 801219e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80121a2:	b29b      	uxth	r3, r3
 80121a4:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80121a6:	683b      	ldr	r3, [r7, #0]
 80121a8:	6a1a      	ldr	r2, [r3, #32]
 80121aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80121ae:	1ad2      	subs	r2, r2, r3
 80121b0:	683b      	ldr	r3, [r7, #0]
 80121b2:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80121b4:	687a      	ldr	r2, [r7, #4]
 80121b6:	683b      	ldr	r3, [r7, #0]
 80121b8:	781b      	ldrb	r3, [r3, #0]
 80121ba:	009b      	lsls	r3, r3, #2
 80121bc:	4413      	add	r3, r2
 80121be:	881b      	ldrh	r3, [r3, #0]
 80121c0:	b29b      	uxth	r3, r3
 80121c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80121c6:	2b00      	cmp	r3, #0
 80121c8:	f000 814f 	beq.w	801246a <USB_EPStartXfer+0x398>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80121cc:	687b      	ldr	r3, [r7, #4]
 80121ce:	633b      	str	r3, [r7, #48]	@ 0x30
 80121d0:	683b      	ldr	r3, [r7, #0]
 80121d2:	785b      	ldrb	r3, [r3, #1]
 80121d4:	2b00      	cmp	r3, #0
 80121d6:	d16b      	bne.n	80122b0 <USB_EPStartXfer+0x1de>
 80121d8:	687b      	ldr	r3, [r7, #4]
 80121da:	62bb      	str	r3, [r7, #40]	@ 0x28
 80121dc:	687b      	ldr	r3, [r7, #4]
 80121de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80121e2:	b29b      	uxth	r3, r3
 80121e4:	461a      	mov	r2, r3
 80121e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80121e8:	4413      	add	r3, r2
 80121ea:	62bb      	str	r3, [r7, #40]	@ 0x28
 80121ec:	683b      	ldr	r3, [r7, #0]
 80121ee:	781b      	ldrb	r3, [r3, #0]
 80121f0:	00da      	lsls	r2, r3, #3
 80121f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80121f4:	4413      	add	r3, r2
 80121f6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80121fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80121fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80121fe:	881b      	ldrh	r3, [r3, #0]
 8012200:	b29b      	uxth	r3, r3
 8012202:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8012206:	b29a      	uxth	r2, r3
 8012208:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801220a:	801a      	strh	r2, [r3, #0]
 801220c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012210:	2b00      	cmp	r3, #0
 8012212:	d10a      	bne.n	801222a <USB_EPStartXfer+0x158>
 8012214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012216:	881b      	ldrh	r3, [r3, #0]
 8012218:	b29b      	uxth	r3, r3
 801221a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801221e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012222:	b29a      	uxth	r2, r3
 8012224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012226:	801a      	strh	r2, [r3, #0]
 8012228:	e05b      	b.n	80122e2 <USB_EPStartXfer+0x210>
 801222a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801222e:	2b3e      	cmp	r3, #62	@ 0x3e
 8012230:	d81c      	bhi.n	801226c <USB_EPStartXfer+0x19a>
 8012232:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012236:	085b      	lsrs	r3, r3, #1
 8012238:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 801223c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012240:	f003 0301 	and.w	r3, r3, #1
 8012244:	2b00      	cmp	r3, #0
 8012246:	d004      	beq.n	8012252 <USB_EPStartXfer+0x180>
 8012248:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 801224c:	3301      	adds	r3, #1
 801224e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8012252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012254:	881b      	ldrh	r3, [r3, #0]
 8012256:	b29a      	uxth	r2, r3
 8012258:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 801225c:	b29b      	uxth	r3, r3
 801225e:	029b      	lsls	r3, r3, #10
 8012260:	b29b      	uxth	r3, r3
 8012262:	4313      	orrs	r3, r2
 8012264:	b29a      	uxth	r2, r3
 8012266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012268:	801a      	strh	r2, [r3, #0]
 801226a:	e03a      	b.n	80122e2 <USB_EPStartXfer+0x210>
 801226c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012270:	095b      	lsrs	r3, r3, #5
 8012272:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8012276:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801227a:	f003 031f 	and.w	r3, r3, #31
 801227e:	2b00      	cmp	r3, #0
 8012280:	d104      	bne.n	801228c <USB_EPStartXfer+0x1ba>
 8012282:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8012286:	3b01      	subs	r3, #1
 8012288:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 801228c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801228e:	881b      	ldrh	r3, [r3, #0]
 8012290:	b29a      	uxth	r2, r3
 8012292:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8012296:	b29b      	uxth	r3, r3
 8012298:	029b      	lsls	r3, r3, #10
 801229a:	b29b      	uxth	r3, r3
 801229c:	4313      	orrs	r3, r2
 801229e:	b29b      	uxth	r3, r3
 80122a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80122a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80122a8:	b29a      	uxth	r2, r3
 80122aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80122ac:	801a      	strh	r2, [r3, #0]
 80122ae:	e018      	b.n	80122e2 <USB_EPStartXfer+0x210>
 80122b0:	683b      	ldr	r3, [r7, #0]
 80122b2:	785b      	ldrb	r3, [r3, #1]
 80122b4:	2b01      	cmp	r3, #1
 80122b6:	d114      	bne.n	80122e2 <USB_EPStartXfer+0x210>
 80122b8:	687b      	ldr	r3, [r7, #4]
 80122ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80122be:	b29b      	uxth	r3, r3
 80122c0:	461a      	mov	r2, r3
 80122c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80122c4:	4413      	add	r3, r2
 80122c6:	633b      	str	r3, [r7, #48]	@ 0x30
 80122c8:	683b      	ldr	r3, [r7, #0]
 80122ca:	781b      	ldrb	r3, [r3, #0]
 80122cc:	00da      	lsls	r2, r3, #3
 80122ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80122d0:	4413      	add	r3, r2
 80122d2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80122d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80122d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80122dc:	b29a      	uxth	r2, r3
 80122de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80122e0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80122e2:	683b      	ldr	r3, [r7, #0]
 80122e4:	895b      	ldrh	r3, [r3, #10]
 80122e6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80122ea:	683b      	ldr	r3, [r7, #0]
 80122ec:	6959      	ldr	r1, [r3, #20]
 80122ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80122f2:	b29b      	uxth	r3, r3
 80122f4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80122f8:	6878      	ldr	r0, [r7, #4]
 80122fa:	f000 fdce 	bl	8012e9a <USB_WritePMA>
            ep->xfer_buff += len;
 80122fe:	683b      	ldr	r3, [r7, #0]
 8012300:	695a      	ldr	r2, [r3, #20]
 8012302:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012306:	441a      	add	r2, r3
 8012308:	683b      	ldr	r3, [r7, #0]
 801230a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 801230c:	683b      	ldr	r3, [r7, #0]
 801230e:	6a1a      	ldr	r2, [r3, #32]
 8012310:	683b      	ldr	r3, [r7, #0]
 8012312:	691b      	ldr	r3, [r3, #16]
 8012314:	429a      	cmp	r2, r3
 8012316:	d907      	bls.n	8012328 <USB_EPStartXfer+0x256>
            {
              ep->xfer_len_db -= len;
 8012318:	683b      	ldr	r3, [r7, #0]
 801231a:	6a1a      	ldr	r2, [r3, #32]
 801231c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012320:	1ad2      	subs	r2, r2, r3
 8012322:	683b      	ldr	r3, [r7, #0]
 8012324:	621a      	str	r2, [r3, #32]
 8012326:	e006      	b.n	8012336 <USB_EPStartXfer+0x264>
            }
            else
            {
              len = ep->xfer_len_db;
 8012328:	683b      	ldr	r3, [r7, #0]
 801232a:	6a1b      	ldr	r3, [r3, #32]
 801232c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 8012330:	683b      	ldr	r3, [r7, #0]
 8012332:	2200      	movs	r2, #0
 8012334:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8012336:	683b      	ldr	r3, [r7, #0]
 8012338:	785b      	ldrb	r3, [r3, #1]
 801233a:	2b00      	cmp	r3, #0
 801233c:	d16b      	bne.n	8012416 <USB_EPStartXfer+0x344>
 801233e:	687b      	ldr	r3, [r7, #4]
 8012340:	61bb      	str	r3, [r7, #24]
 8012342:	687b      	ldr	r3, [r7, #4]
 8012344:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8012348:	b29b      	uxth	r3, r3
 801234a:	461a      	mov	r2, r3
 801234c:	69bb      	ldr	r3, [r7, #24]
 801234e:	4413      	add	r3, r2
 8012350:	61bb      	str	r3, [r7, #24]
 8012352:	683b      	ldr	r3, [r7, #0]
 8012354:	781b      	ldrb	r3, [r3, #0]
 8012356:	00da      	lsls	r2, r3, #3
 8012358:	69bb      	ldr	r3, [r7, #24]
 801235a:	4413      	add	r3, r2
 801235c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8012360:	617b      	str	r3, [r7, #20]
 8012362:	697b      	ldr	r3, [r7, #20]
 8012364:	881b      	ldrh	r3, [r3, #0]
 8012366:	b29b      	uxth	r3, r3
 8012368:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801236c:	b29a      	uxth	r2, r3
 801236e:	697b      	ldr	r3, [r7, #20]
 8012370:	801a      	strh	r2, [r3, #0]
 8012372:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012376:	2b00      	cmp	r3, #0
 8012378:	d10a      	bne.n	8012390 <USB_EPStartXfer+0x2be>
 801237a:	697b      	ldr	r3, [r7, #20]
 801237c:	881b      	ldrh	r3, [r3, #0]
 801237e:	b29b      	uxth	r3, r3
 8012380:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012384:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012388:	b29a      	uxth	r2, r3
 801238a:	697b      	ldr	r3, [r7, #20]
 801238c:	801a      	strh	r2, [r3, #0]
 801238e:	e05d      	b.n	801244c <USB_EPStartXfer+0x37a>
 8012390:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012394:	2b3e      	cmp	r3, #62	@ 0x3e
 8012396:	d81c      	bhi.n	80123d2 <USB_EPStartXfer+0x300>
 8012398:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801239c:	085b      	lsrs	r3, r3, #1
 801239e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80123a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80123a6:	f003 0301 	and.w	r3, r3, #1
 80123aa:	2b00      	cmp	r3, #0
 80123ac:	d004      	beq.n	80123b8 <USB_EPStartXfer+0x2e6>
 80123ae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80123b2:	3301      	adds	r3, #1
 80123b4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80123b8:	697b      	ldr	r3, [r7, #20]
 80123ba:	881b      	ldrh	r3, [r3, #0]
 80123bc:	b29a      	uxth	r2, r3
 80123be:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80123c2:	b29b      	uxth	r3, r3
 80123c4:	029b      	lsls	r3, r3, #10
 80123c6:	b29b      	uxth	r3, r3
 80123c8:	4313      	orrs	r3, r2
 80123ca:	b29a      	uxth	r2, r3
 80123cc:	697b      	ldr	r3, [r7, #20]
 80123ce:	801a      	strh	r2, [r3, #0]
 80123d0:	e03c      	b.n	801244c <USB_EPStartXfer+0x37a>
 80123d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80123d6:	095b      	lsrs	r3, r3, #5
 80123d8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80123dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80123e0:	f003 031f 	and.w	r3, r3, #31
 80123e4:	2b00      	cmp	r3, #0
 80123e6:	d104      	bne.n	80123f2 <USB_EPStartXfer+0x320>
 80123e8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80123ec:	3b01      	subs	r3, #1
 80123ee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80123f2:	697b      	ldr	r3, [r7, #20]
 80123f4:	881b      	ldrh	r3, [r3, #0]
 80123f6:	b29a      	uxth	r2, r3
 80123f8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80123fc:	b29b      	uxth	r3, r3
 80123fe:	029b      	lsls	r3, r3, #10
 8012400:	b29b      	uxth	r3, r3
 8012402:	4313      	orrs	r3, r2
 8012404:	b29b      	uxth	r3, r3
 8012406:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801240a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801240e:	b29a      	uxth	r2, r3
 8012410:	697b      	ldr	r3, [r7, #20]
 8012412:	801a      	strh	r2, [r3, #0]
 8012414:	e01a      	b.n	801244c <USB_EPStartXfer+0x37a>
 8012416:	683b      	ldr	r3, [r7, #0]
 8012418:	785b      	ldrb	r3, [r3, #1]
 801241a:	2b01      	cmp	r3, #1
 801241c:	d116      	bne.n	801244c <USB_EPStartXfer+0x37a>
 801241e:	687b      	ldr	r3, [r7, #4]
 8012420:	623b      	str	r3, [r7, #32]
 8012422:	687b      	ldr	r3, [r7, #4]
 8012424:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8012428:	b29b      	uxth	r3, r3
 801242a:	461a      	mov	r2, r3
 801242c:	6a3b      	ldr	r3, [r7, #32]
 801242e:	4413      	add	r3, r2
 8012430:	623b      	str	r3, [r7, #32]
 8012432:	683b      	ldr	r3, [r7, #0]
 8012434:	781b      	ldrb	r3, [r3, #0]
 8012436:	00da      	lsls	r2, r3, #3
 8012438:	6a3b      	ldr	r3, [r7, #32]
 801243a:	4413      	add	r3, r2
 801243c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8012440:	61fb      	str	r3, [r7, #28]
 8012442:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012446:	b29a      	uxth	r2, r3
 8012448:	69fb      	ldr	r3, [r7, #28]
 801244a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 801244c:	683b      	ldr	r3, [r7, #0]
 801244e:	891b      	ldrh	r3, [r3, #8]
 8012450:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8012454:	683b      	ldr	r3, [r7, #0]
 8012456:	6959      	ldr	r1, [r3, #20]
 8012458:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801245c:	b29b      	uxth	r3, r3
 801245e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8012462:	6878      	ldr	r0, [r7, #4]
 8012464:	f000 fd19 	bl	8012e9a <USB_WritePMA>
 8012468:	e2e2      	b.n	8012a30 <USB_EPStartXfer+0x95e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 801246a:	683b      	ldr	r3, [r7, #0]
 801246c:	785b      	ldrb	r3, [r3, #1]
 801246e:	2b00      	cmp	r3, #0
 8012470:	d16b      	bne.n	801254a <USB_EPStartXfer+0x478>
 8012472:	687b      	ldr	r3, [r7, #4]
 8012474:	64bb      	str	r3, [r7, #72]	@ 0x48
 8012476:	687b      	ldr	r3, [r7, #4]
 8012478:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 801247c:	b29b      	uxth	r3, r3
 801247e:	461a      	mov	r2, r3
 8012480:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012482:	4413      	add	r3, r2
 8012484:	64bb      	str	r3, [r7, #72]	@ 0x48
 8012486:	683b      	ldr	r3, [r7, #0]
 8012488:	781b      	ldrb	r3, [r3, #0]
 801248a:	00da      	lsls	r2, r3, #3
 801248c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801248e:	4413      	add	r3, r2
 8012490:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8012494:	647b      	str	r3, [r7, #68]	@ 0x44
 8012496:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012498:	881b      	ldrh	r3, [r3, #0]
 801249a:	b29b      	uxth	r3, r3
 801249c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80124a0:	b29a      	uxth	r2, r3
 80124a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80124a4:	801a      	strh	r2, [r3, #0]
 80124a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80124aa:	2b00      	cmp	r3, #0
 80124ac:	d10a      	bne.n	80124c4 <USB_EPStartXfer+0x3f2>
 80124ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80124b0:	881b      	ldrh	r3, [r3, #0]
 80124b2:	b29b      	uxth	r3, r3
 80124b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80124b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80124bc:	b29a      	uxth	r2, r3
 80124be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80124c0:	801a      	strh	r2, [r3, #0]
 80124c2:	e05d      	b.n	8012580 <USB_EPStartXfer+0x4ae>
 80124c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80124c8:	2b3e      	cmp	r3, #62	@ 0x3e
 80124ca:	d81c      	bhi.n	8012506 <USB_EPStartXfer+0x434>
 80124cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80124d0:	085b      	lsrs	r3, r3, #1
 80124d2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80124d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80124da:	f003 0301 	and.w	r3, r3, #1
 80124de:	2b00      	cmp	r3, #0
 80124e0:	d004      	beq.n	80124ec <USB_EPStartXfer+0x41a>
 80124e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80124e6:	3301      	adds	r3, #1
 80124e8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80124ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80124ee:	881b      	ldrh	r3, [r3, #0]
 80124f0:	b29a      	uxth	r2, r3
 80124f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80124f6:	b29b      	uxth	r3, r3
 80124f8:	029b      	lsls	r3, r3, #10
 80124fa:	b29b      	uxth	r3, r3
 80124fc:	4313      	orrs	r3, r2
 80124fe:	b29a      	uxth	r2, r3
 8012500:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012502:	801a      	strh	r2, [r3, #0]
 8012504:	e03c      	b.n	8012580 <USB_EPStartXfer+0x4ae>
 8012506:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801250a:	095b      	lsrs	r3, r3, #5
 801250c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8012510:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012514:	f003 031f 	and.w	r3, r3, #31
 8012518:	2b00      	cmp	r3, #0
 801251a:	d104      	bne.n	8012526 <USB_EPStartXfer+0x454>
 801251c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8012520:	3b01      	subs	r3, #1
 8012522:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8012526:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012528:	881b      	ldrh	r3, [r3, #0]
 801252a:	b29a      	uxth	r2, r3
 801252c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8012530:	b29b      	uxth	r3, r3
 8012532:	029b      	lsls	r3, r3, #10
 8012534:	b29b      	uxth	r3, r3
 8012536:	4313      	orrs	r3, r2
 8012538:	b29b      	uxth	r3, r3
 801253a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801253e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012542:	b29a      	uxth	r2, r3
 8012544:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012546:	801a      	strh	r2, [r3, #0]
 8012548:	e01a      	b.n	8012580 <USB_EPStartXfer+0x4ae>
 801254a:	683b      	ldr	r3, [r7, #0]
 801254c:	785b      	ldrb	r3, [r3, #1]
 801254e:	2b01      	cmp	r3, #1
 8012550:	d116      	bne.n	8012580 <USB_EPStartXfer+0x4ae>
 8012552:	687b      	ldr	r3, [r7, #4]
 8012554:	653b      	str	r3, [r7, #80]	@ 0x50
 8012556:	687b      	ldr	r3, [r7, #4]
 8012558:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 801255c:	b29b      	uxth	r3, r3
 801255e:	461a      	mov	r2, r3
 8012560:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012562:	4413      	add	r3, r2
 8012564:	653b      	str	r3, [r7, #80]	@ 0x50
 8012566:	683b      	ldr	r3, [r7, #0]
 8012568:	781b      	ldrb	r3, [r3, #0]
 801256a:	00da      	lsls	r2, r3, #3
 801256c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801256e:	4413      	add	r3, r2
 8012570:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8012574:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8012576:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801257a:	b29a      	uxth	r2, r3
 801257c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801257e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8012580:	683b      	ldr	r3, [r7, #0]
 8012582:	891b      	ldrh	r3, [r3, #8]
 8012584:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8012588:	683b      	ldr	r3, [r7, #0]
 801258a:	6959      	ldr	r1, [r3, #20]
 801258c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012590:	b29b      	uxth	r3, r3
 8012592:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8012596:	6878      	ldr	r0, [r7, #4]
 8012598:	f000 fc7f 	bl	8012e9a <USB_WritePMA>
            ep->xfer_buff += len;
 801259c:	683b      	ldr	r3, [r7, #0]
 801259e:	695a      	ldr	r2, [r3, #20]
 80125a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80125a4:	441a      	add	r2, r3
 80125a6:	683b      	ldr	r3, [r7, #0]
 80125a8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80125aa:	683b      	ldr	r3, [r7, #0]
 80125ac:	6a1a      	ldr	r2, [r3, #32]
 80125ae:	683b      	ldr	r3, [r7, #0]
 80125b0:	691b      	ldr	r3, [r3, #16]
 80125b2:	429a      	cmp	r2, r3
 80125b4:	d907      	bls.n	80125c6 <USB_EPStartXfer+0x4f4>
            {
              ep->xfer_len_db -= len;
 80125b6:	683b      	ldr	r3, [r7, #0]
 80125b8:	6a1a      	ldr	r2, [r3, #32]
 80125ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80125be:	1ad2      	subs	r2, r2, r3
 80125c0:	683b      	ldr	r3, [r7, #0]
 80125c2:	621a      	str	r2, [r3, #32]
 80125c4:	e006      	b.n	80125d4 <USB_EPStartXfer+0x502>
            }
            else
            {
              len = ep->xfer_len_db;
 80125c6:	683b      	ldr	r3, [r7, #0]
 80125c8:	6a1b      	ldr	r3, [r3, #32]
 80125ca:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 80125ce:	683b      	ldr	r3, [r7, #0]
 80125d0:	2200      	movs	r2, #0
 80125d2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80125d4:	687b      	ldr	r3, [r7, #4]
 80125d6:	643b      	str	r3, [r7, #64]	@ 0x40
 80125d8:	683b      	ldr	r3, [r7, #0]
 80125da:	785b      	ldrb	r3, [r3, #1]
 80125dc:	2b00      	cmp	r3, #0
 80125de:	d16b      	bne.n	80126b8 <USB_EPStartXfer+0x5e6>
 80125e0:	687b      	ldr	r3, [r7, #4]
 80125e2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80125e4:	687b      	ldr	r3, [r7, #4]
 80125e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80125ea:	b29b      	uxth	r3, r3
 80125ec:	461a      	mov	r2, r3
 80125ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80125f0:	4413      	add	r3, r2
 80125f2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80125f4:	683b      	ldr	r3, [r7, #0]
 80125f6:	781b      	ldrb	r3, [r3, #0]
 80125f8:	00da      	lsls	r2, r3, #3
 80125fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80125fc:	4413      	add	r3, r2
 80125fe:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8012602:	637b      	str	r3, [r7, #52]	@ 0x34
 8012604:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012606:	881b      	ldrh	r3, [r3, #0]
 8012608:	b29b      	uxth	r3, r3
 801260a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801260e:	b29a      	uxth	r2, r3
 8012610:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012612:	801a      	strh	r2, [r3, #0]
 8012614:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012618:	2b00      	cmp	r3, #0
 801261a:	d10a      	bne.n	8012632 <USB_EPStartXfer+0x560>
 801261c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801261e:	881b      	ldrh	r3, [r3, #0]
 8012620:	b29b      	uxth	r3, r3
 8012622:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012626:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801262a:	b29a      	uxth	r2, r3
 801262c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801262e:	801a      	strh	r2, [r3, #0]
 8012630:	e05b      	b.n	80126ea <USB_EPStartXfer+0x618>
 8012632:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012636:	2b3e      	cmp	r3, #62	@ 0x3e
 8012638:	d81c      	bhi.n	8012674 <USB_EPStartXfer+0x5a2>
 801263a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801263e:	085b      	lsrs	r3, r3, #1
 8012640:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8012644:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012648:	f003 0301 	and.w	r3, r3, #1
 801264c:	2b00      	cmp	r3, #0
 801264e:	d004      	beq.n	801265a <USB_EPStartXfer+0x588>
 8012650:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8012654:	3301      	adds	r3, #1
 8012656:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 801265a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801265c:	881b      	ldrh	r3, [r3, #0]
 801265e:	b29a      	uxth	r2, r3
 8012660:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8012664:	b29b      	uxth	r3, r3
 8012666:	029b      	lsls	r3, r3, #10
 8012668:	b29b      	uxth	r3, r3
 801266a:	4313      	orrs	r3, r2
 801266c:	b29a      	uxth	r2, r3
 801266e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012670:	801a      	strh	r2, [r3, #0]
 8012672:	e03a      	b.n	80126ea <USB_EPStartXfer+0x618>
 8012674:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012678:	095b      	lsrs	r3, r3, #5
 801267a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 801267e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012682:	f003 031f 	and.w	r3, r3, #31
 8012686:	2b00      	cmp	r3, #0
 8012688:	d104      	bne.n	8012694 <USB_EPStartXfer+0x5c2>
 801268a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801268e:	3b01      	subs	r3, #1
 8012690:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8012694:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012696:	881b      	ldrh	r3, [r3, #0]
 8012698:	b29a      	uxth	r2, r3
 801269a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801269e:	b29b      	uxth	r3, r3
 80126a0:	029b      	lsls	r3, r3, #10
 80126a2:	b29b      	uxth	r3, r3
 80126a4:	4313      	orrs	r3, r2
 80126a6:	b29b      	uxth	r3, r3
 80126a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80126ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80126b0:	b29a      	uxth	r2, r3
 80126b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80126b4:	801a      	strh	r2, [r3, #0]
 80126b6:	e018      	b.n	80126ea <USB_EPStartXfer+0x618>
 80126b8:	683b      	ldr	r3, [r7, #0]
 80126ba:	785b      	ldrb	r3, [r3, #1]
 80126bc:	2b01      	cmp	r3, #1
 80126be:	d114      	bne.n	80126ea <USB_EPStartXfer+0x618>
 80126c0:	687b      	ldr	r3, [r7, #4]
 80126c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80126c6:	b29b      	uxth	r3, r3
 80126c8:	461a      	mov	r2, r3
 80126ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80126cc:	4413      	add	r3, r2
 80126ce:	643b      	str	r3, [r7, #64]	@ 0x40
 80126d0:	683b      	ldr	r3, [r7, #0]
 80126d2:	781b      	ldrb	r3, [r3, #0]
 80126d4:	00da      	lsls	r2, r3, #3
 80126d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80126d8:	4413      	add	r3, r2
 80126da:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80126de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80126e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80126e4:	b29a      	uxth	r2, r3
 80126e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80126e8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80126ea:	683b      	ldr	r3, [r7, #0]
 80126ec:	895b      	ldrh	r3, [r3, #10]
 80126ee:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80126f2:	683b      	ldr	r3, [r7, #0]
 80126f4:	6959      	ldr	r1, [r3, #20]
 80126f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80126fa:	b29b      	uxth	r3, r3
 80126fc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8012700:	6878      	ldr	r0, [r7, #4]
 8012702:	f000 fbca 	bl	8012e9a <USB_WritePMA>
 8012706:	e193      	b.n	8012a30 <USB_EPStartXfer+0x95e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8012708:	683b      	ldr	r3, [r7, #0]
 801270a:	6a1b      	ldr	r3, [r3, #32]
 801270c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8012710:	687a      	ldr	r2, [r7, #4]
 8012712:	683b      	ldr	r3, [r7, #0]
 8012714:	781b      	ldrb	r3, [r3, #0]
 8012716:	009b      	lsls	r3, r3, #2
 8012718:	4413      	add	r3, r2
 801271a:	881b      	ldrh	r3, [r3, #0]
 801271c:	b29b      	uxth	r3, r3
 801271e:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8012722:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8012726:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 801272a:	687a      	ldr	r2, [r7, #4]
 801272c:	683b      	ldr	r3, [r7, #0]
 801272e:	781b      	ldrb	r3, [r3, #0]
 8012730:	009b      	lsls	r3, r3, #2
 8012732:	441a      	add	r2, r3
 8012734:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8012738:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 801273c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8012740:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8012744:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012748:	b29b      	uxth	r3, r3
 801274a:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 801274c:	687b      	ldr	r3, [r7, #4]
 801274e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8012750:	687b      	ldr	r3, [r7, #4]
 8012752:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8012756:	b29b      	uxth	r3, r3
 8012758:	461a      	mov	r2, r3
 801275a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801275c:	4413      	add	r3, r2
 801275e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8012760:	683b      	ldr	r3, [r7, #0]
 8012762:	781b      	ldrb	r3, [r3, #0]
 8012764:	00da      	lsls	r2, r3, #3
 8012766:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012768:	4413      	add	r3, r2
 801276a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 801276e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8012770:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012774:	b29a      	uxth	r2, r3
 8012776:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012778:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 801277a:	683b      	ldr	r3, [r7, #0]
 801277c:	891b      	ldrh	r3, [r3, #8]
 801277e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8012782:	683b      	ldr	r3, [r7, #0]
 8012784:	6959      	ldr	r1, [r3, #20]
 8012786:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801278a:	b29b      	uxth	r3, r3
 801278c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8012790:	6878      	ldr	r0, [r7, #4]
 8012792:	f000 fb82 	bl	8012e9a <USB_WritePMA>
 8012796:	e14b      	b.n	8012a30 <USB_EPStartXfer+0x95e>
        }
      }
      else /* Manage isochronous double buffer IN mode */
      {
        /* Each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8012798:	683b      	ldr	r3, [r7, #0]
 801279a:	6a1a      	ldr	r2, [r3, #32]
 801279c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80127a0:	1ad2      	subs	r2, r2, r3
 80127a2:	683b      	ldr	r3, [r7, #0]
 80127a4:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80127a6:	687a      	ldr	r2, [r7, #4]
 80127a8:	683b      	ldr	r3, [r7, #0]
 80127aa:	781b      	ldrb	r3, [r3, #0]
 80127ac:	009b      	lsls	r3, r3, #2
 80127ae:	4413      	add	r3, r2
 80127b0:	881b      	ldrh	r3, [r3, #0]
 80127b2:	b29b      	uxth	r3, r3
 80127b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80127b8:	2b00      	cmp	r3, #0
 80127ba:	f000 809a 	beq.w	80128f2 <USB_EPStartXfer+0x820>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80127be:	687b      	ldr	r3, [r7, #4]
 80127c0:	673b      	str	r3, [r7, #112]	@ 0x70
 80127c2:	683b      	ldr	r3, [r7, #0]
 80127c4:	785b      	ldrb	r3, [r3, #1]
 80127c6:	2b00      	cmp	r3, #0
 80127c8:	d16b      	bne.n	80128a2 <USB_EPStartXfer+0x7d0>
 80127ca:	687b      	ldr	r3, [r7, #4]
 80127cc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80127ce:	687b      	ldr	r3, [r7, #4]
 80127d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80127d4:	b29b      	uxth	r3, r3
 80127d6:	461a      	mov	r2, r3
 80127d8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80127da:	4413      	add	r3, r2
 80127dc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80127de:	683b      	ldr	r3, [r7, #0]
 80127e0:	781b      	ldrb	r3, [r3, #0]
 80127e2:	00da      	lsls	r2, r3, #3
 80127e4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80127e6:	4413      	add	r3, r2
 80127e8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80127ec:	667b      	str	r3, [r7, #100]	@ 0x64
 80127ee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80127f0:	881b      	ldrh	r3, [r3, #0]
 80127f2:	b29b      	uxth	r3, r3
 80127f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80127f8:	b29a      	uxth	r2, r3
 80127fa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80127fc:	801a      	strh	r2, [r3, #0]
 80127fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012802:	2b00      	cmp	r3, #0
 8012804:	d10a      	bne.n	801281c <USB_EPStartXfer+0x74a>
 8012806:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012808:	881b      	ldrh	r3, [r3, #0]
 801280a:	b29b      	uxth	r3, r3
 801280c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012810:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012814:	b29a      	uxth	r2, r3
 8012816:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012818:	801a      	strh	r2, [r3, #0]
 801281a:	e05b      	b.n	80128d4 <USB_EPStartXfer+0x802>
 801281c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012820:	2b3e      	cmp	r3, #62	@ 0x3e
 8012822:	d81c      	bhi.n	801285e <USB_EPStartXfer+0x78c>
 8012824:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012828:	085b      	lsrs	r3, r3, #1
 801282a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 801282e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012832:	f003 0301 	and.w	r3, r3, #1
 8012836:	2b00      	cmp	r3, #0
 8012838:	d004      	beq.n	8012844 <USB_EPStartXfer+0x772>
 801283a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 801283e:	3301      	adds	r3, #1
 8012840:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8012844:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012846:	881b      	ldrh	r3, [r3, #0]
 8012848:	b29a      	uxth	r2, r3
 801284a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 801284e:	b29b      	uxth	r3, r3
 8012850:	029b      	lsls	r3, r3, #10
 8012852:	b29b      	uxth	r3, r3
 8012854:	4313      	orrs	r3, r2
 8012856:	b29a      	uxth	r2, r3
 8012858:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801285a:	801a      	strh	r2, [r3, #0]
 801285c:	e03a      	b.n	80128d4 <USB_EPStartXfer+0x802>
 801285e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012862:	095b      	lsrs	r3, r3, #5
 8012864:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8012868:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801286c:	f003 031f 	and.w	r3, r3, #31
 8012870:	2b00      	cmp	r3, #0
 8012872:	d104      	bne.n	801287e <USB_EPStartXfer+0x7ac>
 8012874:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8012878:	3b01      	subs	r3, #1
 801287a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 801287e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012880:	881b      	ldrh	r3, [r3, #0]
 8012882:	b29a      	uxth	r2, r3
 8012884:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8012888:	b29b      	uxth	r3, r3
 801288a:	029b      	lsls	r3, r3, #10
 801288c:	b29b      	uxth	r3, r3
 801288e:	4313      	orrs	r3, r2
 8012890:	b29b      	uxth	r3, r3
 8012892:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012896:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801289a:	b29a      	uxth	r2, r3
 801289c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801289e:	801a      	strh	r2, [r3, #0]
 80128a0:	e018      	b.n	80128d4 <USB_EPStartXfer+0x802>
 80128a2:	683b      	ldr	r3, [r7, #0]
 80128a4:	785b      	ldrb	r3, [r3, #1]
 80128a6:	2b01      	cmp	r3, #1
 80128a8:	d114      	bne.n	80128d4 <USB_EPStartXfer+0x802>
 80128aa:	687b      	ldr	r3, [r7, #4]
 80128ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80128b0:	b29b      	uxth	r3, r3
 80128b2:	461a      	mov	r2, r3
 80128b4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80128b6:	4413      	add	r3, r2
 80128b8:	673b      	str	r3, [r7, #112]	@ 0x70
 80128ba:	683b      	ldr	r3, [r7, #0]
 80128bc:	781b      	ldrb	r3, [r3, #0]
 80128be:	00da      	lsls	r2, r3, #3
 80128c0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80128c2:	4413      	add	r3, r2
 80128c4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80128c8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80128ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80128ce:	b29a      	uxth	r2, r3
 80128d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80128d2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80128d4:	683b      	ldr	r3, [r7, #0]
 80128d6:	895b      	ldrh	r3, [r3, #10]
 80128d8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80128dc:	683b      	ldr	r3, [r7, #0]
 80128de:	6959      	ldr	r1, [r3, #20]
 80128e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80128e4:	b29b      	uxth	r3, r3
 80128e6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80128ea:	6878      	ldr	r0, [r7, #4]
 80128ec:	f000 fad5 	bl	8012e9a <USB_WritePMA>
 80128f0:	e09e      	b.n	8012a30 <USB_EPStartXfer+0x95e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80128f2:	683b      	ldr	r3, [r7, #0]
 80128f4:	785b      	ldrb	r3, [r3, #1]
 80128f6:	2b00      	cmp	r3, #0
 80128f8:	d16b      	bne.n	80129d2 <USB_EPStartXfer+0x900>
 80128fa:	687b      	ldr	r3, [r7, #4]
 80128fc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80128fe:	687b      	ldr	r3, [r7, #4]
 8012900:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8012904:	b29b      	uxth	r3, r3
 8012906:	461a      	mov	r2, r3
 8012908:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801290a:	4413      	add	r3, r2
 801290c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801290e:	683b      	ldr	r3, [r7, #0]
 8012910:	781b      	ldrb	r3, [r3, #0]
 8012912:	00da      	lsls	r2, r3, #3
 8012914:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8012916:	4413      	add	r3, r2
 8012918:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 801291c:	67bb      	str	r3, [r7, #120]	@ 0x78
 801291e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8012920:	881b      	ldrh	r3, [r3, #0]
 8012922:	b29b      	uxth	r3, r3
 8012924:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8012928:	b29a      	uxth	r2, r3
 801292a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801292c:	801a      	strh	r2, [r3, #0]
 801292e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012932:	2b00      	cmp	r3, #0
 8012934:	d10a      	bne.n	801294c <USB_EPStartXfer+0x87a>
 8012936:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8012938:	881b      	ldrh	r3, [r3, #0]
 801293a:	b29b      	uxth	r3, r3
 801293c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012940:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012944:	b29a      	uxth	r2, r3
 8012946:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8012948:	801a      	strh	r2, [r3, #0]
 801294a:	e063      	b.n	8012a14 <USB_EPStartXfer+0x942>
 801294c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012950:	2b3e      	cmp	r3, #62	@ 0x3e
 8012952:	d81c      	bhi.n	801298e <USB_EPStartXfer+0x8bc>
 8012954:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012958:	085b      	lsrs	r3, r3, #1
 801295a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 801295e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012962:	f003 0301 	and.w	r3, r3, #1
 8012966:	2b00      	cmp	r3, #0
 8012968:	d004      	beq.n	8012974 <USB_EPStartXfer+0x8a2>
 801296a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801296e:	3301      	adds	r3, #1
 8012970:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8012974:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8012976:	881b      	ldrh	r3, [r3, #0]
 8012978:	b29a      	uxth	r2, r3
 801297a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801297e:	b29b      	uxth	r3, r3
 8012980:	029b      	lsls	r3, r3, #10
 8012982:	b29b      	uxth	r3, r3
 8012984:	4313      	orrs	r3, r2
 8012986:	b29a      	uxth	r2, r3
 8012988:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801298a:	801a      	strh	r2, [r3, #0]
 801298c:	e042      	b.n	8012a14 <USB_EPStartXfer+0x942>
 801298e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012992:	095b      	lsrs	r3, r3, #5
 8012994:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8012998:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801299c:	f003 031f 	and.w	r3, r3, #31
 80129a0:	2b00      	cmp	r3, #0
 80129a2:	d104      	bne.n	80129ae <USB_EPStartXfer+0x8dc>
 80129a4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80129a8:	3b01      	subs	r3, #1
 80129aa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80129ae:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80129b0:	881b      	ldrh	r3, [r3, #0]
 80129b2:	b29a      	uxth	r2, r3
 80129b4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80129b8:	b29b      	uxth	r3, r3
 80129ba:	029b      	lsls	r3, r3, #10
 80129bc:	b29b      	uxth	r3, r3
 80129be:	4313      	orrs	r3, r2
 80129c0:	b29b      	uxth	r3, r3
 80129c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80129c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80129ca:	b29a      	uxth	r2, r3
 80129cc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80129ce:	801a      	strh	r2, [r3, #0]
 80129d0:	e020      	b.n	8012a14 <USB_EPStartXfer+0x942>
 80129d2:	683b      	ldr	r3, [r7, #0]
 80129d4:	785b      	ldrb	r3, [r3, #1]
 80129d6:	2b01      	cmp	r3, #1
 80129d8:	d11c      	bne.n	8012a14 <USB_EPStartXfer+0x942>
 80129da:	687b      	ldr	r3, [r7, #4]
 80129dc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80129e0:	687b      	ldr	r3, [r7, #4]
 80129e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80129e6:	b29b      	uxth	r3, r3
 80129e8:	461a      	mov	r2, r3
 80129ea:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80129ee:	4413      	add	r3, r2
 80129f0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80129f4:	683b      	ldr	r3, [r7, #0]
 80129f6:	781b      	ldrb	r3, [r3, #0]
 80129f8:	00da      	lsls	r2, r3, #3
 80129fa:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80129fe:	4413      	add	r3, r2
 8012a00:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8012a04:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8012a08:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012a0c:	b29a      	uxth	r2, r3
 8012a0e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8012a12:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8012a14:	683b      	ldr	r3, [r7, #0]
 8012a16:	891b      	ldrh	r3, [r3, #8]
 8012a18:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8012a1c:	683b      	ldr	r3, [r7, #0]
 8012a1e:	6959      	ldr	r1, [r3, #20]
 8012a20:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012a24:	b29b      	uxth	r3, r3
 8012a26:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8012a2a:	6878      	ldr	r0, [r7, #4]
 8012a2c:	f000 fa35 	bl	8012e9a <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8012a30:	687a      	ldr	r2, [r7, #4]
 8012a32:	683b      	ldr	r3, [r7, #0]
 8012a34:	781b      	ldrb	r3, [r3, #0]
 8012a36:	009b      	lsls	r3, r3, #2
 8012a38:	4413      	add	r3, r2
 8012a3a:	881b      	ldrh	r3, [r3, #0]
 8012a3c:	b29b      	uxth	r3, r3
 8012a3e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8012a42:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8012a46:	817b      	strh	r3, [r7, #10]
 8012a48:	897b      	ldrh	r3, [r7, #10]
 8012a4a:	f083 0310 	eor.w	r3, r3, #16
 8012a4e:	817b      	strh	r3, [r7, #10]
 8012a50:	897b      	ldrh	r3, [r7, #10]
 8012a52:	f083 0320 	eor.w	r3, r3, #32
 8012a56:	817b      	strh	r3, [r7, #10]
 8012a58:	687a      	ldr	r2, [r7, #4]
 8012a5a:	683b      	ldr	r3, [r7, #0]
 8012a5c:	781b      	ldrb	r3, [r3, #0]
 8012a5e:	009b      	lsls	r3, r3, #2
 8012a60:	441a      	add	r2, r3
 8012a62:	897b      	ldrh	r3, [r7, #10]
 8012a64:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8012a68:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8012a6c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8012a70:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012a74:	b29b      	uxth	r3, r3
 8012a76:	8013      	strh	r3, [r2, #0]
 8012a78:	e0d5      	b.n	8012c26 <USB_EPStartXfer+0xb54>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8012a7a:	683b      	ldr	r3, [r7, #0]
 8012a7c:	7b1b      	ldrb	r3, [r3, #12]
 8012a7e:	2b00      	cmp	r3, #0
 8012a80:	d156      	bne.n	8012b30 <USB_EPStartXfer+0xa5e>
    {
      if ((ep->xfer_len == 0U) && (ep->type == EP_TYPE_CTRL))
 8012a82:	683b      	ldr	r3, [r7, #0]
 8012a84:	699b      	ldr	r3, [r3, #24]
 8012a86:	2b00      	cmp	r3, #0
 8012a88:	d122      	bne.n	8012ad0 <USB_EPStartXfer+0x9fe>
 8012a8a:	683b      	ldr	r3, [r7, #0]
 8012a8c:	78db      	ldrb	r3, [r3, #3]
 8012a8e:	2b00      	cmp	r3, #0
 8012a90:	d11e      	bne.n	8012ad0 <USB_EPStartXfer+0x9fe>
      {
        /* This is a status out stage set the OUT_STATUS */
        PCD_SET_OUT_STATUS(USBx, ep->num);
 8012a92:	687a      	ldr	r2, [r7, #4]
 8012a94:	683b      	ldr	r3, [r7, #0]
 8012a96:	781b      	ldrb	r3, [r3, #0]
 8012a98:	009b      	lsls	r3, r3, #2
 8012a9a:	4413      	add	r3, r2
 8012a9c:	881b      	ldrh	r3, [r3, #0]
 8012a9e:	b29b      	uxth	r3, r3
 8012aa0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8012aa4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8012aa8:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 8012aac:	687a      	ldr	r2, [r7, #4]
 8012aae:	683b      	ldr	r3, [r7, #0]
 8012ab0:	781b      	ldrb	r3, [r3, #0]
 8012ab2:	009b      	lsls	r3, r3, #2
 8012ab4:	441a      	add	r2, r3
 8012ab6:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8012aba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8012abe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8012ac2:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8012ac6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012aca:	b29b      	uxth	r3, r3
 8012acc:	8013      	strh	r3, [r2, #0]
 8012ace:	e01d      	b.n	8012b0c <USB_EPStartXfer+0xa3a>
      }
      else
      {
        PCD_CLEAR_OUT_STATUS(USBx, ep->num);
 8012ad0:	687a      	ldr	r2, [r7, #4]
 8012ad2:	683b      	ldr	r3, [r7, #0]
 8012ad4:	781b      	ldrb	r3, [r3, #0]
 8012ad6:	009b      	lsls	r3, r3, #2
 8012ad8:	4413      	add	r3, r2
 8012ada:	881b      	ldrh	r3, [r3, #0]
 8012adc:	b29b      	uxth	r3, r3
 8012ade:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8012ae2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8012ae6:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
 8012aea:	687a      	ldr	r2, [r7, #4]
 8012aec:	683b      	ldr	r3, [r7, #0]
 8012aee:	781b      	ldrb	r3, [r3, #0]
 8012af0:	009b      	lsls	r3, r3, #2
 8012af2:	441a      	add	r2, r3
 8012af4:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 8012af8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8012afc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8012b00:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8012b04:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012b08:	b29b      	uxth	r3, r3
 8012b0a:	8013      	strh	r3, [r2, #0]
      }

      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8012b0c:	683b      	ldr	r3, [r7, #0]
 8012b0e:	699a      	ldr	r2, [r3, #24]
 8012b10:	683b      	ldr	r3, [r7, #0]
 8012b12:	691b      	ldr	r3, [r3, #16]
 8012b14:	429a      	cmp	r2, r3
 8012b16:	d907      	bls.n	8012b28 <USB_EPStartXfer+0xa56>
      {
        ep->xfer_len -= ep->maxpacket;
 8012b18:	683b      	ldr	r3, [r7, #0]
 8012b1a:	699a      	ldr	r2, [r3, #24]
 8012b1c:	683b      	ldr	r3, [r7, #0]
 8012b1e:	691b      	ldr	r3, [r3, #16]
 8012b20:	1ad2      	subs	r2, r2, r3
 8012b22:	683b      	ldr	r3, [r7, #0]
 8012b24:	619a      	str	r2, [r3, #24]
 8012b26:	e054      	b.n	8012bd2 <USB_EPStartXfer+0xb00>
      }
      else
      {
        ep->xfer_len = 0U;
 8012b28:	683b      	ldr	r3, [r7, #0]
 8012b2a:	2200      	movs	r2, #0
 8012b2c:	619a      	str	r2, [r3, #24]
 8012b2e:	e050      	b.n	8012bd2 <USB_EPStartXfer+0xb00>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8012b30:	683b      	ldr	r3, [r7, #0]
 8012b32:	78db      	ldrb	r3, [r3, #3]
 8012b34:	2b02      	cmp	r3, #2
 8012b36:	d142      	bne.n	8012bbe <USB_EPStartXfer+0xaec>
      {
        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8012b38:	683b      	ldr	r3, [r7, #0]
 8012b3a:	69db      	ldr	r3, [r3, #28]
 8012b3c:	2b00      	cmp	r3, #0
 8012b3e:	d048      	beq.n	8012bd2 <USB_EPStartXfer+0xb00>
        {
          /* Update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8012b40:	687a      	ldr	r2, [r7, #4]
 8012b42:	683b      	ldr	r3, [r7, #0]
 8012b44:	781b      	ldrb	r3, [r3, #0]
 8012b46:	009b      	lsls	r3, r3, #2
 8012b48:	4413      	add	r3, r2
 8012b4a:	881b      	ldrh	r3, [r3, #0]
 8012b4c:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92

          /* Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8012b50:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8012b54:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8012b58:	2b00      	cmp	r3, #0
 8012b5a:	d005      	beq.n	8012b68 <USB_EPStartXfer+0xa96>
 8012b5c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8012b60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012b64:	2b00      	cmp	r3, #0
 8012b66:	d10b      	bne.n	8012b80 <USB_EPStartXfer+0xaae>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8012b68:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8012b6c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8012b70:	2b00      	cmp	r3, #0
 8012b72:	d12e      	bne.n	8012bd2 <USB_EPStartXfer+0xb00>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8012b74:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8012b78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012b7c:	2b00      	cmp	r3, #0
 8012b7e:	d128      	bne.n	8012bd2 <USB_EPStartXfer+0xb00>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8012b80:	687a      	ldr	r2, [r7, #4]
 8012b82:	683b      	ldr	r3, [r7, #0]
 8012b84:	781b      	ldrb	r3, [r3, #0]
 8012b86:	009b      	lsls	r3, r3, #2
 8012b88:	4413      	add	r3, r2
 8012b8a:	881b      	ldrh	r3, [r3, #0]
 8012b8c:	b29b      	uxth	r3, r3
 8012b8e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8012b92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8012b96:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 8012b9a:	687a      	ldr	r2, [r7, #4]
 8012b9c:	683b      	ldr	r3, [r7, #0]
 8012b9e:	781b      	ldrb	r3, [r3, #0]
 8012ba0:	009b      	lsls	r3, r3, #2
 8012ba2:	441a      	add	r2, r3
 8012ba4:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 8012ba8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8012bac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8012bb0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8012bb4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8012bb8:	b29b      	uxth	r3, r3
 8012bba:	8013      	strh	r3, [r2, #0]
 8012bbc:	e009      	b.n	8012bd2 <USB_EPStartXfer+0xb00>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8012bbe:	683b      	ldr	r3, [r7, #0]
 8012bc0:	78db      	ldrb	r3, [r3, #3]
 8012bc2:	2b01      	cmp	r3, #1
 8012bc4:	d103      	bne.n	8012bce <USB_EPStartXfer+0xafc>
      {
        /* Only single packet transfer supported in FS */
        ep->xfer_len = 0U;
 8012bc6:	683b      	ldr	r3, [r7, #0]
 8012bc8:	2200      	movs	r2, #0
 8012bca:	619a      	str	r2, [r3, #24]
 8012bcc:	e001      	b.n	8012bd2 <USB_EPStartXfer+0xb00>
      }
      else
      {
        return HAL_ERROR;
 8012bce:	2301      	movs	r3, #1
 8012bd0:	e02a      	b.n	8012c28 <USB_EPStartXfer+0xb56>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8012bd2:	687a      	ldr	r2, [r7, #4]
 8012bd4:	683b      	ldr	r3, [r7, #0]
 8012bd6:	781b      	ldrb	r3, [r3, #0]
 8012bd8:	009b      	lsls	r3, r3, #2
 8012bda:	4413      	add	r3, r2
 8012bdc:	881b      	ldrh	r3, [r3, #0]
 8012bde:	b29b      	uxth	r3, r3
 8012be0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8012be4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8012be8:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8012bec:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8012bf0:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8012bf4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8012bf8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8012bfc:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8012c00:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8012c04:	687a      	ldr	r2, [r7, #4]
 8012c06:	683b      	ldr	r3, [r7, #0]
 8012c08:	781b      	ldrb	r3, [r3, #0]
 8012c0a:	009b      	lsls	r3, r3, #2
 8012c0c:	441a      	add	r2, r3
 8012c0e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8012c12:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8012c16:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8012c1a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8012c1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012c22:	b29b      	uxth	r3, r3
 8012c24:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8012c26:	2300      	movs	r3, #0
}
 8012c28:	4618      	mov	r0, r3
 8012c2a:	37b0      	adds	r7, #176	@ 0xb0
 8012c2c:	46bd      	mov	sp, r7
 8012c2e:	bd80      	pop	{r7, pc}

08012c30 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8012c30:	b480      	push	{r7}
 8012c32:	b085      	sub	sp, #20
 8012c34:	af00      	add	r7, sp, #0
 8012c36:	6078      	str	r0, [r7, #4]
 8012c38:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8012c3a:	683b      	ldr	r3, [r7, #0]
 8012c3c:	785b      	ldrb	r3, [r3, #1]
 8012c3e:	2b00      	cmp	r3, #0
 8012c40:	d020      	beq.n	8012c84 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8012c42:	687a      	ldr	r2, [r7, #4]
 8012c44:	683b      	ldr	r3, [r7, #0]
 8012c46:	781b      	ldrb	r3, [r3, #0]
 8012c48:	009b      	lsls	r3, r3, #2
 8012c4a:	4413      	add	r3, r2
 8012c4c:	881b      	ldrh	r3, [r3, #0]
 8012c4e:	b29b      	uxth	r3, r3
 8012c50:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8012c54:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8012c58:	81bb      	strh	r3, [r7, #12]
 8012c5a:	89bb      	ldrh	r3, [r7, #12]
 8012c5c:	f083 0310 	eor.w	r3, r3, #16
 8012c60:	81bb      	strh	r3, [r7, #12]
 8012c62:	687a      	ldr	r2, [r7, #4]
 8012c64:	683b      	ldr	r3, [r7, #0]
 8012c66:	781b      	ldrb	r3, [r3, #0]
 8012c68:	009b      	lsls	r3, r3, #2
 8012c6a:	441a      	add	r2, r3
 8012c6c:	89bb      	ldrh	r3, [r7, #12]
 8012c6e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8012c72:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8012c76:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8012c7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012c7e:	b29b      	uxth	r3, r3
 8012c80:	8013      	strh	r3, [r2, #0]
 8012c82:	e01f      	b.n	8012cc4 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8012c84:	687a      	ldr	r2, [r7, #4]
 8012c86:	683b      	ldr	r3, [r7, #0]
 8012c88:	781b      	ldrb	r3, [r3, #0]
 8012c8a:	009b      	lsls	r3, r3, #2
 8012c8c:	4413      	add	r3, r2
 8012c8e:	881b      	ldrh	r3, [r3, #0]
 8012c90:	b29b      	uxth	r3, r3
 8012c92:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8012c96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8012c9a:	81fb      	strh	r3, [r7, #14]
 8012c9c:	89fb      	ldrh	r3, [r7, #14]
 8012c9e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8012ca2:	81fb      	strh	r3, [r7, #14]
 8012ca4:	687a      	ldr	r2, [r7, #4]
 8012ca6:	683b      	ldr	r3, [r7, #0]
 8012ca8:	781b      	ldrb	r3, [r3, #0]
 8012caa:	009b      	lsls	r3, r3, #2
 8012cac:	441a      	add	r2, r3
 8012cae:	89fb      	ldrh	r3, [r7, #14]
 8012cb0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8012cb4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8012cb8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8012cbc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012cc0:	b29b      	uxth	r3, r3
 8012cc2:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8012cc4:	2300      	movs	r3, #0
}
 8012cc6:	4618      	mov	r0, r3
 8012cc8:	3714      	adds	r7, #20
 8012cca:	46bd      	mov	sp, r7
 8012ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cd0:	4770      	bx	lr

08012cd2 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8012cd2:	b480      	push	{r7}
 8012cd4:	b087      	sub	sp, #28
 8012cd6:	af00      	add	r7, sp, #0
 8012cd8:	6078      	str	r0, [r7, #4]
 8012cda:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8012cdc:	683b      	ldr	r3, [r7, #0]
 8012cde:	785b      	ldrb	r3, [r3, #1]
 8012ce0:	2b00      	cmp	r3, #0
 8012ce2:	d04c      	beq.n	8012d7e <USB_EPClearStall+0xac>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8012ce4:	687a      	ldr	r2, [r7, #4]
 8012ce6:	683b      	ldr	r3, [r7, #0]
 8012ce8:	781b      	ldrb	r3, [r3, #0]
 8012cea:	009b      	lsls	r3, r3, #2
 8012cec:	4413      	add	r3, r2
 8012cee:	881b      	ldrh	r3, [r3, #0]
 8012cf0:	823b      	strh	r3, [r7, #16]
 8012cf2:	8a3b      	ldrh	r3, [r7, #16]
 8012cf4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012cf8:	2b00      	cmp	r3, #0
 8012cfa:	d01b      	beq.n	8012d34 <USB_EPClearStall+0x62>
 8012cfc:	687a      	ldr	r2, [r7, #4]
 8012cfe:	683b      	ldr	r3, [r7, #0]
 8012d00:	781b      	ldrb	r3, [r3, #0]
 8012d02:	009b      	lsls	r3, r3, #2
 8012d04:	4413      	add	r3, r2
 8012d06:	881b      	ldrh	r3, [r3, #0]
 8012d08:	b29b      	uxth	r3, r3
 8012d0a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8012d0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8012d12:	81fb      	strh	r3, [r7, #14]
 8012d14:	687a      	ldr	r2, [r7, #4]
 8012d16:	683b      	ldr	r3, [r7, #0]
 8012d18:	781b      	ldrb	r3, [r3, #0]
 8012d1a:	009b      	lsls	r3, r3, #2
 8012d1c:	441a      	add	r2, r3
 8012d1e:	89fb      	ldrh	r3, [r7, #14]
 8012d20:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8012d24:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8012d28:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8012d2c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8012d30:	b29b      	uxth	r3, r3
 8012d32:	8013      	strh	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8012d34:	683b      	ldr	r3, [r7, #0]
 8012d36:	78db      	ldrb	r3, [r3, #3]
 8012d38:	2b01      	cmp	r3, #1
 8012d3a:	d06c      	beq.n	8012e16 <USB_EPClearStall+0x144>
    {
      /* Configure NAK status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8012d3c:	687a      	ldr	r2, [r7, #4]
 8012d3e:	683b      	ldr	r3, [r7, #0]
 8012d40:	781b      	ldrb	r3, [r3, #0]
 8012d42:	009b      	lsls	r3, r3, #2
 8012d44:	4413      	add	r3, r2
 8012d46:	881b      	ldrh	r3, [r3, #0]
 8012d48:	b29b      	uxth	r3, r3
 8012d4a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8012d4e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8012d52:	81bb      	strh	r3, [r7, #12]
 8012d54:	89bb      	ldrh	r3, [r7, #12]
 8012d56:	f083 0320 	eor.w	r3, r3, #32
 8012d5a:	81bb      	strh	r3, [r7, #12]
 8012d5c:	687a      	ldr	r2, [r7, #4]
 8012d5e:	683b      	ldr	r3, [r7, #0]
 8012d60:	781b      	ldrb	r3, [r3, #0]
 8012d62:	009b      	lsls	r3, r3, #2
 8012d64:	441a      	add	r2, r3
 8012d66:	89bb      	ldrh	r3, [r7, #12]
 8012d68:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8012d6c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8012d70:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8012d74:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012d78:	b29b      	uxth	r3, r3
 8012d7a:	8013      	strh	r3, [r2, #0]
 8012d7c:	e04b      	b.n	8012e16 <USB_EPClearStall+0x144>
    }
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8012d7e:	687a      	ldr	r2, [r7, #4]
 8012d80:	683b      	ldr	r3, [r7, #0]
 8012d82:	781b      	ldrb	r3, [r3, #0]
 8012d84:	009b      	lsls	r3, r3, #2
 8012d86:	4413      	add	r3, r2
 8012d88:	881b      	ldrh	r3, [r3, #0]
 8012d8a:	82fb      	strh	r3, [r7, #22]
 8012d8c:	8afb      	ldrh	r3, [r7, #22]
 8012d8e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8012d92:	2b00      	cmp	r3, #0
 8012d94:	d01b      	beq.n	8012dce <USB_EPClearStall+0xfc>
 8012d96:	687a      	ldr	r2, [r7, #4]
 8012d98:	683b      	ldr	r3, [r7, #0]
 8012d9a:	781b      	ldrb	r3, [r3, #0]
 8012d9c:	009b      	lsls	r3, r3, #2
 8012d9e:	4413      	add	r3, r2
 8012da0:	881b      	ldrh	r3, [r3, #0]
 8012da2:	b29b      	uxth	r3, r3
 8012da4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8012da8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8012dac:	82bb      	strh	r3, [r7, #20]
 8012dae:	687a      	ldr	r2, [r7, #4]
 8012db0:	683b      	ldr	r3, [r7, #0]
 8012db2:	781b      	ldrb	r3, [r3, #0]
 8012db4:	009b      	lsls	r3, r3, #2
 8012db6:	441a      	add	r2, r3
 8012db8:	8abb      	ldrh	r3, [r7, #20]
 8012dba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8012dbe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8012dc2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8012dc6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012dca:	b29b      	uxth	r3, r3
 8012dcc:	8013      	strh	r3, [r2, #0]

    /* Configure VALID status for the Endpoint */
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8012dce:	687a      	ldr	r2, [r7, #4]
 8012dd0:	683b      	ldr	r3, [r7, #0]
 8012dd2:	781b      	ldrb	r3, [r3, #0]
 8012dd4:	009b      	lsls	r3, r3, #2
 8012dd6:	4413      	add	r3, r2
 8012dd8:	881b      	ldrh	r3, [r3, #0]
 8012dda:	b29b      	uxth	r3, r3
 8012ddc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8012de0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8012de4:	827b      	strh	r3, [r7, #18]
 8012de6:	8a7b      	ldrh	r3, [r7, #18]
 8012de8:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8012dec:	827b      	strh	r3, [r7, #18]
 8012dee:	8a7b      	ldrh	r3, [r7, #18]
 8012df0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8012df4:	827b      	strh	r3, [r7, #18]
 8012df6:	687a      	ldr	r2, [r7, #4]
 8012df8:	683b      	ldr	r3, [r7, #0]
 8012dfa:	781b      	ldrb	r3, [r3, #0]
 8012dfc:	009b      	lsls	r3, r3, #2
 8012dfe:	441a      	add	r2, r3
 8012e00:	8a7b      	ldrh	r3, [r7, #18]
 8012e02:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8012e06:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8012e0a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8012e0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012e12:	b29b      	uxth	r3, r3
 8012e14:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8012e16:	2300      	movs	r3, #0
}
 8012e18:	4618      	mov	r0, r3
 8012e1a:	371c      	adds	r7, #28
 8012e1c:	46bd      	mov	sp, r7
 8012e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e22:	4770      	bx	lr

08012e24 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8012e24:	b480      	push	{r7}
 8012e26:	b083      	sub	sp, #12
 8012e28:	af00      	add	r7, sp, #0
 8012e2a:	6078      	str	r0, [r7, #4]
 8012e2c:	460b      	mov	r3, r1
 8012e2e:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8012e30:	78fb      	ldrb	r3, [r7, #3]
 8012e32:	2b00      	cmp	r3, #0
 8012e34:	d103      	bne.n	8012e3e <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8012e36:	687b      	ldr	r3, [r7, #4]
 8012e38:	2280      	movs	r2, #128	@ 0x80
 8012e3a:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8012e3e:	2300      	movs	r3, #0
}
 8012e40:	4618      	mov	r0, r3
 8012e42:	370c      	adds	r7, #12
 8012e44:	46bd      	mov	sp, r7
 8012e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e4a:	4770      	bx	lr

08012e4c <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8012e4c:	b480      	push	{r7}
 8012e4e:	b083      	sub	sp, #12
 8012e50:	af00      	add	r7, sp, #0
 8012e52:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8012e54:	687b      	ldr	r3, [r7, #4]
 8012e56:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8012e5a:	b29b      	uxth	r3, r3
 8012e5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012e60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012e64:	b29a      	uxth	r2, r3
 8012e66:	687b      	ldr	r3, [r7, #4]
 8012e68:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 8012e6c:	2300      	movs	r3, #0
}
 8012e6e:	4618      	mov	r0, r3
 8012e70:	370c      	adds	r7, #12
 8012e72:	46bd      	mov	sp, r7
 8012e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e78:	4770      	bx	lr

08012e7a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8012e7a:	b480      	push	{r7}
 8012e7c:	b085      	sub	sp, #20
 8012e7e:	af00      	add	r7, sp, #0
 8012e80:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8012e82:	687b      	ldr	r3, [r7, #4]
 8012e84:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8012e88:	b29b      	uxth	r3, r3
 8012e8a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8012e8c:	68fb      	ldr	r3, [r7, #12]
}
 8012e8e:	4618      	mov	r0, r3
 8012e90:	3714      	adds	r7, #20
 8012e92:	46bd      	mov	sp, r7
 8012e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e98:	4770      	bx	lr

08012e9a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8012e9a:	b480      	push	{r7}
 8012e9c:	b08b      	sub	sp, #44	@ 0x2c
 8012e9e:	af00      	add	r7, sp, #0
 8012ea0:	60f8      	str	r0, [r7, #12]
 8012ea2:	60b9      	str	r1, [r7, #8]
 8012ea4:	4611      	mov	r1, r2
 8012ea6:	461a      	mov	r2, r3
 8012ea8:	460b      	mov	r3, r1
 8012eaa:	80fb      	strh	r3, [r7, #6]
 8012eac:	4613      	mov	r3, r2
 8012eae:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8012eb0:	88bb      	ldrh	r3, [r7, #4]
 8012eb2:	3301      	adds	r3, #1
 8012eb4:	085b      	lsrs	r3, r3, #1
 8012eb6:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8012eb8:	68fb      	ldr	r3, [r7, #12]
 8012eba:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8012ebc:	68bb      	ldr	r3, [r7, #8]
 8012ebe:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8012ec0:	88fa      	ldrh	r2, [r7, #6]
 8012ec2:	697b      	ldr	r3, [r7, #20]
 8012ec4:	4413      	add	r3, r2
 8012ec6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8012eca:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8012ecc:	69bb      	ldr	r3, [r7, #24]
 8012ece:	627b      	str	r3, [r7, #36]	@ 0x24
 8012ed0:	e01b      	b.n	8012f0a <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 8012ed2:	69fb      	ldr	r3, [r7, #28]
 8012ed4:	781b      	ldrb	r3, [r3, #0]
 8012ed6:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8012ed8:	69fb      	ldr	r3, [r7, #28]
 8012eda:	3301      	adds	r3, #1
 8012edc:	781b      	ldrb	r3, [r3, #0]
 8012ede:	021b      	lsls	r3, r3, #8
 8012ee0:	b21a      	sxth	r2, r3
 8012ee2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8012ee6:	4313      	orrs	r3, r2
 8012ee8:	b21b      	sxth	r3, r3
 8012eea:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8012eec:	6a3b      	ldr	r3, [r7, #32]
 8012eee:	8a7a      	ldrh	r2, [r7, #18]
 8012ef0:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8012ef2:	6a3b      	ldr	r3, [r7, #32]
 8012ef4:	3302      	adds	r3, #2
 8012ef6:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8012ef8:	69fb      	ldr	r3, [r7, #28]
 8012efa:	3301      	adds	r3, #1
 8012efc:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8012efe:	69fb      	ldr	r3, [r7, #28]
 8012f00:	3301      	adds	r3, #1
 8012f02:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8012f04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012f06:	3b01      	subs	r3, #1
 8012f08:	627b      	str	r3, [r7, #36]	@ 0x24
 8012f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012f0c:	2b00      	cmp	r3, #0
 8012f0e:	d1e0      	bne.n	8012ed2 <USB_WritePMA+0x38>
  }
}
 8012f10:	bf00      	nop
 8012f12:	bf00      	nop
 8012f14:	372c      	adds	r7, #44	@ 0x2c
 8012f16:	46bd      	mov	sp, r7
 8012f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f1c:	4770      	bx	lr

08012f1e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8012f1e:	b480      	push	{r7}
 8012f20:	b08b      	sub	sp, #44	@ 0x2c
 8012f22:	af00      	add	r7, sp, #0
 8012f24:	60f8      	str	r0, [r7, #12]
 8012f26:	60b9      	str	r1, [r7, #8]
 8012f28:	4611      	mov	r1, r2
 8012f2a:	461a      	mov	r2, r3
 8012f2c:	460b      	mov	r3, r1
 8012f2e:	80fb      	strh	r3, [r7, #6]
 8012f30:	4613      	mov	r3, r2
 8012f32:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8012f34:	88bb      	ldrh	r3, [r7, #4]
 8012f36:	085b      	lsrs	r3, r3, #1
 8012f38:	b29b      	uxth	r3, r3
 8012f3a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8012f3c:	68fb      	ldr	r3, [r7, #12]
 8012f3e:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8012f40:	68bb      	ldr	r3, [r7, #8]
 8012f42:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8012f44:	88fa      	ldrh	r2, [r7, #6]
 8012f46:	697b      	ldr	r3, [r7, #20]
 8012f48:	4413      	add	r3, r2
 8012f4a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8012f4e:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8012f50:	69bb      	ldr	r3, [r7, #24]
 8012f52:	627b      	str	r3, [r7, #36]	@ 0x24
 8012f54:	e018      	b.n	8012f88 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8012f56:	6a3b      	ldr	r3, [r7, #32]
 8012f58:	881b      	ldrh	r3, [r3, #0]
 8012f5a:	b29b      	uxth	r3, r3
 8012f5c:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8012f5e:	6a3b      	ldr	r3, [r7, #32]
 8012f60:	3302      	adds	r3, #2
 8012f62:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8012f64:	693b      	ldr	r3, [r7, #16]
 8012f66:	b2da      	uxtb	r2, r3
 8012f68:	69fb      	ldr	r3, [r7, #28]
 8012f6a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8012f6c:	69fb      	ldr	r3, [r7, #28]
 8012f6e:	3301      	adds	r3, #1
 8012f70:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8012f72:	693b      	ldr	r3, [r7, #16]
 8012f74:	0a1b      	lsrs	r3, r3, #8
 8012f76:	b2da      	uxtb	r2, r3
 8012f78:	69fb      	ldr	r3, [r7, #28]
 8012f7a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8012f7c:	69fb      	ldr	r3, [r7, #28]
 8012f7e:	3301      	adds	r3, #1
 8012f80:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8012f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012f84:	3b01      	subs	r3, #1
 8012f86:	627b      	str	r3, [r7, #36]	@ 0x24
 8012f88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012f8a:	2b00      	cmp	r3, #0
 8012f8c:	d1e3      	bne.n	8012f56 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8012f8e:	88bb      	ldrh	r3, [r7, #4]
 8012f90:	f003 0301 	and.w	r3, r3, #1
 8012f94:	b29b      	uxth	r3, r3
 8012f96:	2b00      	cmp	r3, #0
 8012f98:	d007      	beq.n	8012faa <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 8012f9a:	6a3b      	ldr	r3, [r7, #32]
 8012f9c:	881b      	ldrh	r3, [r3, #0]
 8012f9e:	b29b      	uxth	r3, r3
 8012fa0:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8012fa2:	693b      	ldr	r3, [r7, #16]
 8012fa4:	b2da      	uxtb	r2, r3
 8012fa6:	69fb      	ldr	r3, [r7, #28]
 8012fa8:	701a      	strb	r2, [r3, #0]
  }
}
 8012faa:	bf00      	nop
 8012fac:	372c      	adds	r7, #44	@ 0x2c
 8012fae:	46bd      	mov	sp, r7
 8012fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fb4:	4770      	bx	lr
	...

08012fb8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8012fb8:	b580      	push	{r7, lr}
 8012fba:	b084      	sub	sp, #16
 8012fbc:	af00      	add	r7, sp, #0
 8012fbe:	6078      	str	r0, [r7, #4]
 8012fc0:	460b      	mov	r3, r1
 8012fc2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8012fc4:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8012fc8:	f006 f998 	bl	80192fc <USBD_static_malloc>
 8012fcc:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8012fce:	68fb      	ldr	r3, [r7, #12]
 8012fd0:	2b00      	cmp	r3, #0
 8012fd2:	d109      	bne.n	8012fe8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8012fd4:	687b      	ldr	r3, [r7, #4]
 8012fd6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012fda:	687b      	ldr	r3, [r7, #4]
 8012fdc:	32b0      	adds	r2, #176	@ 0xb0
 8012fde:	2100      	movs	r1, #0
 8012fe0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8012fe4:	2302      	movs	r3, #2
 8012fe6:	e0d4      	b.n	8013192 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8012fe8:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8012fec:	2100      	movs	r1, #0
 8012fee:	68f8      	ldr	r0, [r7, #12]
 8012ff0:	f008 fba3 	bl	801b73a <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8012ff4:	687b      	ldr	r3, [r7, #4]
 8012ff6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012ffa:	687b      	ldr	r3, [r7, #4]
 8012ffc:	32b0      	adds	r2, #176	@ 0xb0
 8012ffe:	68f9      	ldr	r1, [r7, #12]
 8013000:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8013004:	687b      	ldr	r3, [r7, #4]
 8013006:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801300a:	687b      	ldr	r3, [r7, #4]
 801300c:	32b0      	adds	r2, #176	@ 0xb0
 801300e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8013012:	687b      	ldr	r3, [r7, #4]
 8013014:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013018:	687b      	ldr	r3, [r7, #4]
 801301a:	7c1b      	ldrb	r3, [r3, #16]
 801301c:	2b00      	cmp	r3, #0
 801301e:	d138      	bne.n	8013092 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8013020:	4b5e      	ldr	r3, [pc, #376]	@ (801319c <USBD_CDC_Init+0x1e4>)
 8013022:	7819      	ldrb	r1, [r3, #0]
 8013024:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8013028:	2202      	movs	r2, #2
 801302a:	6878      	ldr	r0, [r7, #4]
 801302c:	f006 f80d 	bl	801904a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8013030:	4b5a      	ldr	r3, [pc, #360]	@ (801319c <USBD_CDC_Init+0x1e4>)
 8013032:	781b      	ldrb	r3, [r3, #0]
 8013034:	f003 020f 	and.w	r2, r3, #15
 8013038:	6879      	ldr	r1, [r7, #4]
 801303a:	4613      	mov	r3, r2
 801303c:	009b      	lsls	r3, r3, #2
 801303e:	4413      	add	r3, r2
 8013040:	009b      	lsls	r3, r3, #2
 8013042:	440b      	add	r3, r1
 8013044:	3324      	adds	r3, #36	@ 0x24
 8013046:	2201      	movs	r2, #1
 8013048:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 801304a:	4b55      	ldr	r3, [pc, #340]	@ (80131a0 <USBD_CDC_Init+0x1e8>)
 801304c:	7819      	ldrb	r1, [r3, #0]
 801304e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8013052:	2202      	movs	r2, #2
 8013054:	6878      	ldr	r0, [r7, #4]
 8013056:	f005 fff8 	bl	801904a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 801305a:	4b51      	ldr	r3, [pc, #324]	@ (80131a0 <USBD_CDC_Init+0x1e8>)
 801305c:	781b      	ldrb	r3, [r3, #0]
 801305e:	f003 020f 	and.w	r2, r3, #15
 8013062:	6879      	ldr	r1, [r7, #4]
 8013064:	4613      	mov	r3, r2
 8013066:	009b      	lsls	r3, r3, #2
 8013068:	4413      	add	r3, r2
 801306a:	009b      	lsls	r3, r3, #2
 801306c:	440b      	add	r3, r1
 801306e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8013072:	2201      	movs	r2, #1
 8013074:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8013076:	4b4b      	ldr	r3, [pc, #300]	@ (80131a4 <USBD_CDC_Init+0x1ec>)
 8013078:	781b      	ldrb	r3, [r3, #0]
 801307a:	f003 020f 	and.w	r2, r3, #15
 801307e:	6879      	ldr	r1, [r7, #4]
 8013080:	4613      	mov	r3, r2
 8013082:	009b      	lsls	r3, r3, #2
 8013084:	4413      	add	r3, r2
 8013086:	009b      	lsls	r3, r3, #2
 8013088:	440b      	add	r3, r1
 801308a:	3326      	adds	r3, #38	@ 0x26
 801308c:	2210      	movs	r2, #16
 801308e:	801a      	strh	r2, [r3, #0]
 8013090:	e035      	b.n	80130fe <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8013092:	4b42      	ldr	r3, [pc, #264]	@ (801319c <USBD_CDC_Init+0x1e4>)
 8013094:	7819      	ldrb	r1, [r3, #0]
 8013096:	2340      	movs	r3, #64	@ 0x40
 8013098:	2202      	movs	r2, #2
 801309a:	6878      	ldr	r0, [r7, #4]
 801309c:	f005 ffd5 	bl	801904a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80130a0:	4b3e      	ldr	r3, [pc, #248]	@ (801319c <USBD_CDC_Init+0x1e4>)
 80130a2:	781b      	ldrb	r3, [r3, #0]
 80130a4:	f003 020f 	and.w	r2, r3, #15
 80130a8:	6879      	ldr	r1, [r7, #4]
 80130aa:	4613      	mov	r3, r2
 80130ac:	009b      	lsls	r3, r3, #2
 80130ae:	4413      	add	r3, r2
 80130b0:	009b      	lsls	r3, r3, #2
 80130b2:	440b      	add	r3, r1
 80130b4:	3324      	adds	r3, #36	@ 0x24
 80130b6:	2201      	movs	r2, #1
 80130b8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80130ba:	4b39      	ldr	r3, [pc, #228]	@ (80131a0 <USBD_CDC_Init+0x1e8>)
 80130bc:	7819      	ldrb	r1, [r3, #0]
 80130be:	2340      	movs	r3, #64	@ 0x40
 80130c0:	2202      	movs	r2, #2
 80130c2:	6878      	ldr	r0, [r7, #4]
 80130c4:	f005 ffc1 	bl	801904a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80130c8:	4b35      	ldr	r3, [pc, #212]	@ (80131a0 <USBD_CDC_Init+0x1e8>)
 80130ca:	781b      	ldrb	r3, [r3, #0]
 80130cc:	f003 020f 	and.w	r2, r3, #15
 80130d0:	6879      	ldr	r1, [r7, #4]
 80130d2:	4613      	mov	r3, r2
 80130d4:	009b      	lsls	r3, r3, #2
 80130d6:	4413      	add	r3, r2
 80130d8:	009b      	lsls	r3, r3, #2
 80130da:	440b      	add	r3, r1
 80130dc:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80130e0:	2201      	movs	r2, #1
 80130e2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80130e4:	4b2f      	ldr	r3, [pc, #188]	@ (80131a4 <USBD_CDC_Init+0x1ec>)
 80130e6:	781b      	ldrb	r3, [r3, #0]
 80130e8:	f003 020f 	and.w	r2, r3, #15
 80130ec:	6879      	ldr	r1, [r7, #4]
 80130ee:	4613      	mov	r3, r2
 80130f0:	009b      	lsls	r3, r3, #2
 80130f2:	4413      	add	r3, r2
 80130f4:	009b      	lsls	r3, r3, #2
 80130f6:	440b      	add	r3, r1
 80130f8:	3326      	adds	r3, #38	@ 0x26
 80130fa:	2210      	movs	r2, #16
 80130fc:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80130fe:	4b29      	ldr	r3, [pc, #164]	@ (80131a4 <USBD_CDC_Init+0x1ec>)
 8013100:	7819      	ldrb	r1, [r3, #0]
 8013102:	2308      	movs	r3, #8
 8013104:	2203      	movs	r2, #3
 8013106:	6878      	ldr	r0, [r7, #4]
 8013108:	f005 ff9f 	bl	801904a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 801310c:	4b25      	ldr	r3, [pc, #148]	@ (80131a4 <USBD_CDC_Init+0x1ec>)
 801310e:	781b      	ldrb	r3, [r3, #0]
 8013110:	f003 020f 	and.w	r2, r3, #15
 8013114:	6879      	ldr	r1, [r7, #4]
 8013116:	4613      	mov	r3, r2
 8013118:	009b      	lsls	r3, r3, #2
 801311a:	4413      	add	r3, r2
 801311c:	009b      	lsls	r3, r3, #2
 801311e:	440b      	add	r3, r1
 8013120:	3324      	adds	r3, #36	@ 0x24
 8013122:	2201      	movs	r2, #1
 8013124:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8013126:	68fb      	ldr	r3, [r7, #12]
 8013128:	2200      	movs	r2, #0
 801312a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 801312e:	687b      	ldr	r3, [r7, #4]
 8013130:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8013134:	687a      	ldr	r2, [r7, #4]
 8013136:	33b0      	adds	r3, #176	@ 0xb0
 8013138:	009b      	lsls	r3, r3, #2
 801313a:	4413      	add	r3, r2
 801313c:	685b      	ldr	r3, [r3, #4]
 801313e:	681b      	ldr	r3, [r3, #0]
 8013140:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8013142:	68fb      	ldr	r3, [r7, #12]
 8013144:	2200      	movs	r2, #0
 8013146:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 801314a:	68fb      	ldr	r3, [r7, #12]
 801314c:	2200      	movs	r2, #0
 801314e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8013152:	68fb      	ldr	r3, [r7, #12]
 8013154:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8013158:	2b00      	cmp	r3, #0
 801315a:	d101      	bne.n	8013160 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 801315c:	2302      	movs	r3, #2
 801315e:	e018      	b.n	8013192 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013160:	687b      	ldr	r3, [r7, #4]
 8013162:	7c1b      	ldrb	r3, [r3, #16]
 8013164:	2b00      	cmp	r3, #0
 8013166:	d10a      	bne.n	801317e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8013168:	4b0d      	ldr	r3, [pc, #52]	@ (80131a0 <USBD_CDC_Init+0x1e8>)
 801316a:	7819      	ldrb	r1, [r3, #0]
 801316c:	68fb      	ldr	r3, [r7, #12]
 801316e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8013172:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8013176:	6878      	ldr	r0, [r7, #4]
 8013178:	f006 f856 	bl	8019228 <USBD_LL_PrepareReceive>
 801317c:	e008      	b.n	8013190 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 801317e:	4b08      	ldr	r3, [pc, #32]	@ (80131a0 <USBD_CDC_Init+0x1e8>)
 8013180:	7819      	ldrb	r1, [r3, #0]
 8013182:	68fb      	ldr	r3, [r7, #12]
 8013184:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8013188:	2340      	movs	r3, #64	@ 0x40
 801318a:	6878      	ldr	r0, [r7, #4]
 801318c:	f006 f84c 	bl	8019228 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8013190:	2300      	movs	r3, #0
}
 8013192:	4618      	mov	r0, r3
 8013194:	3710      	adds	r7, #16
 8013196:	46bd      	mov	sp, r7
 8013198:	bd80      	pop	{r7, pc}
 801319a:	bf00      	nop
 801319c:	200000bf 	.word	0x200000bf
 80131a0:	200000c0 	.word	0x200000c0
 80131a4:	200000c1 	.word	0x200000c1

080131a8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80131a8:	b580      	push	{r7, lr}
 80131aa:	b082      	sub	sp, #8
 80131ac:	af00      	add	r7, sp, #0
 80131ae:	6078      	str	r0, [r7, #4]
 80131b0:	460b      	mov	r3, r1
 80131b2:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80131b4:	4b3a      	ldr	r3, [pc, #232]	@ (80132a0 <USBD_CDC_DeInit+0xf8>)
 80131b6:	781b      	ldrb	r3, [r3, #0]
 80131b8:	4619      	mov	r1, r3
 80131ba:	6878      	ldr	r0, [r7, #4]
 80131bc:	f005 ff6b 	bl	8019096 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80131c0:	4b37      	ldr	r3, [pc, #220]	@ (80132a0 <USBD_CDC_DeInit+0xf8>)
 80131c2:	781b      	ldrb	r3, [r3, #0]
 80131c4:	f003 020f 	and.w	r2, r3, #15
 80131c8:	6879      	ldr	r1, [r7, #4]
 80131ca:	4613      	mov	r3, r2
 80131cc:	009b      	lsls	r3, r3, #2
 80131ce:	4413      	add	r3, r2
 80131d0:	009b      	lsls	r3, r3, #2
 80131d2:	440b      	add	r3, r1
 80131d4:	3324      	adds	r3, #36	@ 0x24
 80131d6:	2200      	movs	r2, #0
 80131d8:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80131da:	4b32      	ldr	r3, [pc, #200]	@ (80132a4 <USBD_CDC_DeInit+0xfc>)
 80131dc:	781b      	ldrb	r3, [r3, #0]
 80131de:	4619      	mov	r1, r3
 80131e0:	6878      	ldr	r0, [r7, #4]
 80131e2:	f005 ff58 	bl	8019096 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80131e6:	4b2f      	ldr	r3, [pc, #188]	@ (80132a4 <USBD_CDC_DeInit+0xfc>)
 80131e8:	781b      	ldrb	r3, [r3, #0]
 80131ea:	f003 020f 	and.w	r2, r3, #15
 80131ee:	6879      	ldr	r1, [r7, #4]
 80131f0:	4613      	mov	r3, r2
 80131f2:	009b      	lsls	r3, r3, #2
 80131f4:	4413      	add	r3, r2
 80131f6:	009b      	lsls	r3, r3, #2
 80131f8:	440b      	add	r3, r1
 80131fa:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80131fe:	2200      	movs	r2, #0
 8013200:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8013202:	4b29      	ldr	r3, [pc, #164]	@ (80132a8 <USBD_CDC_DeInit+0x100>)
 8013204:	781b      	ldrb	r3, [r3, #0]
 8013206:	4619      	mov	r1, r3
 8013208:	6878      	ldr	r0, [r7, #4]
 801320a:	f005 ff44 	bl	8019096 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 801320e:	4b26      	ldr	r3, [pc, #152]	@ (80132a8 <USBD_CDC_DeInit+0x100>)
 8013210:	781b      	ldrb	r3, [r3, #0]
 8013212:	f003 020f 	and.w	r2, r3, #15
 8013216:	6879      	ldr	r1, [r7, #4]
 8013218:	4613      	mov	r3, r2
 801321a:	009b      	lsls	r3, r3, #2
 801321c:	4413      	add	r3, r2
 801321e:	009b      	lsls	r3, r3, #2
 8013220:	440b      	add	r3, r1
 8013222:	3324      	adds	r3, #36	@ 0x24
 8013224:	2200      	movs	r2, #0
 8013226:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8013228:	4b1f      	ldr	r3, [pc, #124]	@ (80132a8 <USBD_CDC_DeInit+0x100>)
 801322a:	781b      	ldrb	r3, [r3, #0]
 801322c:	f003 020f 	and.w	r2, r3, #15
 8013230:	6879      	ldr	r1, [r7, #4]
 8013232:	4613      	mov	r3, r2
 8013234:	009b      	lsls	r3, r3, #2
 8013236:	4413      	add	r3, r2
 8013238:	009b      	lsls	r3, r3, #2
 801323a:	440b      	add	r3, r1
 801323c:	3326      	adds	r3, #38	@ 0x26
 801323e:	2200      	movs	r2, #0
 8013240:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8013242:	687b      	ldr	r3, [r7, #4]
 8013244:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013248:	687b      	ldr	r3, [r7, #4]
 801324a:	32b0      	adds	r2, #176	@ 0xb0
 801324c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013250:	2b00      	cmp	r3, #0
 8013252:	d01f      	beq.n	8013294 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8013254:	687b      	ldr	r3, [r7, #4]
 8013256:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801325a:	687a      	ldr	r2, [r7, #4]
 801325c:	33b0      	adds	r3, #176	@ 0xb0
 801325e:	009b      	lsls	r3, r3, #2
 8013260:	4413      	add	r3, r2
 8013262:	685b      	ldr	r3, [r3, #4]
 8013264:	685b      	ldr	r3, [r3, #4]
 8013266:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8013268:	687b      	ldr	r3, [r7, #4]
 801326a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801326e:	687b      	ldr	r3, [r7, #4]
 8013270:	32b0      	adds	r2, #176	@ 0xb0
 8013272:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013276:	4618      	mov	r0, r3
 8013278:	f006 f84e 	bl	8019318 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 801327c:	687b      	ldr	r3, [r7, #4]
 801327e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013282:	687b      	ldr	r3, [r7, #4]
 8013284:	32b0      	adds	r2, #176	@ 0xb0
 8013286:	2100      	movs	r1, #0
 8013288:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 801328c:	687b      	ldr	r3, [r7, #4]
 801328e:	2200      	movs	r2, #0
 8013290:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8013294:	2300      	movs	r3, #0
}
 8013296:	4618      	mov	r0, r3
 8013298:	3708      	adds	r7, #8
 801329a:	46bd      	mov	sp, r7
 801329c:	bd80      	pop	{r7, pc}
 801329e:	bf00      	nop
 80132a0:	200000bf 	.word	0x200000bf
 80132a4:	200000c0 	.word	0x200000c0
 80132a8:	200000c1 	.word	0x200000c1

080132ac <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80132ac:	b580      	push	{r7, lr}
 80132ae:	b086      	sub	sp, #24
 80132b0:	af00      	add	r7, sp, #0
 80132b2:	6078      	str	r0, [r7, #4]
 80132b4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80132b6:	687b      	ldr	r3, [r7, #4]
 80132b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80132bc:	687b      	ldr	r3, [r7, #4]
 80132be:	32b0      	adds	r2, #176	@ 0xb0
 80132c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80132c4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80132c6:	2300      	movs	r3, #0
 80132c8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80132ca:	2300      	movs	r3, #0
 80132cc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80132ce:	2300      	movs	r3, #0
 80132d0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80132d2:	693b      	ldr	r3, [r7, #16]
 80132d4:	2b00      	cmp	r3, #0
 80132d6:	d101      	bne.n	80132dc <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80132d8:	2303      	movs	r3, #3
 80132da:	e0bf      	b.n	801345c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80132dc:	683b      	ldr	r3, [r7, #0]
 80132de:	781b      	ldrb	r3, [r3, #0]
 80132e0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80132e4:	2b00      	cmp	r3, #0
 80132e6:	d050      	beq.n	801338a <USBD_CDC_Setup+0xde>
 80132e8:	2b20      	cmp	r3, #32
 80132ea:	f040 80af 	bne.w	801344c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80132ee:	683b      	ldr	r3, [r7, #0]
 80132f0:	88db      	ldrh	r3, [r3, #6]
 80132f2:	2b00      	cmp	r3, #0
 80132f4:	d03a      	beq.n	801336c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80132f6:	683b      	ldr	r3, [r7, #0]
 80132f8:	781b      	ldrb	r3, [r3, #0]
 80132fa:	b25b      	sxtb	r3, r3
 80132fc:	2b00      	cmp	r3, #0
 80132fe:	da1b      	bge.n	8013338 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8013300:	687b      	ldr	r3, [r7, #4]
 8013302:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8013306:	687a      	ldr	r2, [r7, #4]
 8013308:	33b0      	adds	r3, #176	@ 0xb0
 801330a:	009b      	lsls	r3, r3, #2
 801330c:	4413      	add	r3, r2
 801330e:	685b      	ldr	r3, [r3, #4]
 8013310:	689b      	ldr	r3, [r3, #8]
 8013312:	683a      	ldr	r2, [r7, #0]
 8013314:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8013316:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8013318:	683a      	ldr	r2, [r7, #0]
 801331a:	88d2      	ldrh	r2, [r2, #6]
 801331c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 801331e:	683b      	ldr	r3, [r7, #0]
 8013320:	88db      	ldrh	r3, [r3, #6]
 8013322:	2b07      	cmp	r3, #7
 8013324:	bf28      	it	cs
 8013326:	2307      	movcs	r3, #7
 8013328:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 801332a:	693b      	ldr	r3, [r7, #16]
 801332c:	89fa      	ldrh	r2, [r7, #14]
 801332e:	4619      	mov	r1, r3
 8013330:	6878      	ldr	r0, [r7, #4]
 8013332:	f001 fd2b 	bl	8014d8c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8013336:	e090      	b.n	801345a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8013338:	683b      	ldr	r3, [r7, #0]
 801333a:	785a      	ldrb	r2, [r3, #1]
 801333c:	693b      	ldr	r3, [r7, #16]
 801333e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8013342:	683b      	ldr	r3, [r7, #0]
 8013344:	88db      	ldrh	r3, [r3, #6]
 8013346:	2b3f      	cmp	r3, #63	@ 0x3f
 8013348:	d803      	bhi.n	8013352 <USBD_CDC_Setup+0xa6>
 801334a:	683b      	ldr	r3, [r7, #0]
 801334c:	88db      	ldrh	r3, [r3, #6]
 801334e:	b2da      	uxtb	r2, r3
 8013350:	e000      	b.n	8013354 <USBD_CDC_Setup+0xa8>
 8013352:	2240      	movs	r2, #64	@ 0x40
 8013354:	693b      	ldr	r3, [r7, #16]
 8013356:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 801335a:	6939      	ldr	r1, [r7, #16]
 801335c:	693b      	ldr	r3, [r7, #16]
 801335e:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8013362:	461a      	mov	r2, r3
 8013364:	6878      	ldr	r0, [r7, #4]
 8013366:	f001 fd3d 	bl	8014de4 <USBD_CtlPrepareRx>
      break;
 801336a:	e076      	b.n	801345a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 801336c:	687b      	ldr	r3, [r7, #4]
 801336e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8013372:	687a      	ldr	r2, [r7, #4]
 8013374:	33b0      	adds	r3, #176	@ 0xb0
 8013376:	009b      	lsls	r3, r3, #2
 8013378:	4413      	add	r3, r2
 801337a:	685b      	ldr	r3, [r3, #4]
 801337c:	689b      	ldr	r3, [r3, #8]
 801337e:	683a      	ldr	r2, [r7, #0]
 8013380:	7850      	ldrb	r0, [r2, #1]
 8013382:	2200      	movs	r2, #0
 8013384:	6839      	ldr	r1, [r7, #0]
 8013386:	4798      	blx	r3
      break;
 8013388:	e067      	b.n	801345a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801338a:	683b      	ldr	r3, [r7, #0]
 801338c:	785b      	ldrb	r3, [r3, #1]
 801338e:	2b0b      	cmp	r3, #11
 8013390:	d851      	bhi.n	8013436 <USBD_CDC_Setup+0x18a>
 8013392:	a201      	add	r2, pc, #4	@ (adr r2, 8013398 <USBD_CDC_Setup+0xec>)
 8013394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013398:	080133c9 	.word	0x080133c9
 801339c:	08013445 	.word	0x08013445
 80133a0:	08013437 	.word	0x08013437
 80133a4:	08013437 	.word	0x08013437
 80133a8:	08013437 	.word	0x08013437
 80133ac:	08013437 	.word	0x08013437
 80133b0:	08013437 	.word	0x08013437
 80133b4:	08013437 	.word	0x08013437
 80133b8:	08013437 	.word	0x08013437
 80133bc:	08013437 	.word	0x08013437
 80133c0:	080133f3 	.word	0x080133f3
 80133c4:	0801341d 	.word	0x0801341d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80133c8:	687b      	ldr	r3, [r7, #4]
 80133ca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80133ce:	b2db      	uxtb	r3, r3
 80133d0:	2b03      	cmp	r3, #3
 80133d2:	d107      	bne.n	80133e4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80133d4:	f107 030a 	add.w	r3, r7, #10
 80133d8:	2202      	movs	r2, #2
 80133da:	4619      	mov	r1, r3
 80133dc:	6878      	ldr	r0, [r7, #4]
 80133de:	f001 fcd5 	bl	8014d8c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80133e2:	e032      	b.n	801344a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80133e4:	6839      	ldr	r1, [r7, #0]
 80133e6:	6878      	ldr	r0, [r7, #4]
 80133e8:	f001 fc53 	bl	8014c92 <USBD_CtlError>
            ret = USBD_FAIL;
 80133ec:	2303      	movs	r3, #3
 80133ee:	75fb      	strb	r3, [r7, #23]
          break;
 80133f0:	e02b      	b.n	801344a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80133f2:	687b      	ldr	r3, [r7, #4]
 80133f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80133f8:	b2db      	uxtb	r3, r3
 80133fa:	2b03      	cmp	r3, #3
 80133fc:	d107      	bne.n	801340e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80133fe:	f107 030d 	add.w	r3, r7, #13
 8013402:	2201      	movs	r2, #1
 8013404:	4619      	mov	r1, r3
 8013406:	6878      	ldr	r0, [r7, #4]
 8013408:	f001 fcc0 	bl	8014d8c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801340c:	e01d      	b.n	801344a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 801340e:	6839      	ldr	r1, [r7, #0]
 8013410:	6878      	ldr	r0, [r7, #4]
 8013412:	f001 fc3e 	bl	8014c92 <USBD_CtlError>
            ret = USBD_FAIL;
 8013416:	2303      	movs	r3, #3
 8013418:	75fb      	strb	r3, [r7, #23]
          break;
 801341a:	e016      	b.n	801344a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 801341c:	687b      	ldr	r3, [r7, #4]
 801341e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013422:	b2db      	uxtb	r3, r3
 8013424:	2b03      	cmp	r3, #3
 8013426:	d00f      	beq.n	8013448 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8013428:	6839      	ldr	r1, [r7, #0]
 801342a:	6878      	ldr	r0, [r7, #4]
 801342c:	f001 fc31 	bl	8014c92 <USBD_CtlError>
            ret = USBD_FAIL;
 8013430:	2303      	movs	r3, #3
 8013432:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8013434:	e008      	b.n	8013448 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8013436:	6839      	ldr	r1, [r7, #0]
 8013438:	6878      	ldr	r0, [r7, #4]
 801343a:	f001 fc2a 	bl	8014c92 <USBD_CtlError>
          ret = USBD_FAIL;
 801343e:	2303      	movs	r3, #3
 8013440:	75fb      	strb	r3, [r7, #23]
          break;
 8013442:	e002      	b.n	801344a <USBD_CDC_Setup+0x19e>
          break;
 8013444:	bf00      	nop
 8013446:	e008      	b.n	801345a <USBD_CDC_Setup+0x1ae>
          break;
 8013448:	bf00      	nop
      }
      break;
 801344a:	e006      	b.n	801345a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 801344c:	6839      	ldr	r1, [r7, #0]
 801344e:	6878      	ldr	r0, [r7, #4]
 8013450:	f001 fc1f 	bl	8014c92 <USBD_CtlError>
      ret = USBD_FAIL;
 8013454:	2303      	movs	r3, #3
 8013456:	75fb      	strb	r3, [r7, #23]
      break;
 8013458:	bf00      	nop
  }

  return (uint8_t)ret;
 801345a:	7dfb      	ldrb	r3, [r7, #23]
}
 801345c:	4618      	mov	r0, r3
 801345e:	3718      	adds	r7, #24
 8013460:	46bd      	mov	sp, r7
 8013462:	bd80      	pop	{r7, pc}

08013464 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8013464:	b580      	push	{r7, lr}
 8013466:	b084      	sub	sp, #16
 8013468:	af00      	add	r7, sp, #0
 801346a:	6078      	str	r0, [r7, #4]
 801346c:	460b      	mov	r3, r1
 801346e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8013470:	687b      	ldr	r3, [r7, #4]
 8013472:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8013476:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8013478:	687b      	ldr	r3, [r7, #4]
 801347a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801347e:	687b      	ldr	r3, [r7, #4]
 8013480:	32b0      	adds	r2, #176	@ 0xb0
 8013482:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013486:	2b00      	cmp	r3, #0
 8013488:	d101      	bne.n	801348e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 801348a:	2303      	movs	r3, #3
 801348c:	e065      	b.n	801355a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801348e:	687b      	ldr	r3, [r7, #4]
 8013490:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013494:	687b      	ldr	r3, [r7, #4]
 8013496:	32b0      	adds	r2, #176	@ 0xb0
 8013498:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801349c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 801349e:	78fb      	ldrb	r3, [r7, #3]
 80134a0:	f003 020f 	and.w	r2, r3, #15
 80134a4:	6879      	ldr	r1, [r7, #4]
 80134a6:	4613      	mov	r3, r2
 80134a8:	009b      	lsls	r3, r3, #2
 80134aa:	4413      	add	r3, r2
 80134ac:	009b      	lsls	r3, r3, #2
 80134ae:	440b      	add	r3, r1
 80134b0:	3318      	adds	r3, #24
 80134b2:	681b      	ldr	r3, [r3, #0]
 80134b4:	2b00      	cmp	r3, #0
 80134b6:	d02f      	beq.n	8013518 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80134b8:	78fb      	ldrb	r3, [r7, #3]
 80134ba:	f003 020f 	and.w	r2, r3, #15
 80134be:	6879      	ldr	r1, [r7, #4]
 80134c0:	4613      	mov	r3, r2
 80134c2:	009b      	lsls	r3, r3, #2
 80134c4:	4413      	add	r3, r2
 80134c6:	009b      	lsls	r3, r3, #2
 80134c8:	440b      	add	r3, r1
 80134ca:	3318      	adds	r3, #24
 80134cc:	681a      	ldr	r2, [r3, #0]
 80134ce:	78fb      	ldrb	r3, [r7, #3]
 80134d0:	f003 010f 	and.w	r1, r3, #15
 80134d4:	68f8      	ldr	r0, [r7, #12]
 80134d6:	460b      	mov	r3, r1
 80134d8:	009b      	lsls	r3, r3, #2
 80134da:	440b      	add	r3, r1
 80134dc:	00db      	lsls	r3, r3, #3
 80134de:	4403      	add	r3, r0
 80134e0:	3320      	adds	r3, #32
 80134e2:	681b      	ldr	r3, [r3, #0]
 80134e4:	fbb2 f1f3 	udiv	r1, r2, r3
 80134e8:	fb01 f303 	mul.w	r3, r1, r3
 80134ec:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80134ee:	2b00      	cmp	r3, #0
 80134f0:	d112      	bne.n	8013518 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80134f2:	78fb      	ldrb	r3, [r7, #3]
 80134f4:	f003 020f 	and.w	r2, r3, #15
 80134f8:	6879      	ldr	r1, [r7, #4]
 80134fa:	4613      	mov	r3, r2
 80134fc:	009b      	lsls	r3, r3, #2
 80134fe:	4413      	add	r3, r2
 8013500:	009b      	lsls	r3, r3, #2
 8013502:	440b      	add	r3, r1
 8013504:	3318      	adds	r3, #24
 8013506:	2200      	movs	r2, #0
 8013508:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 801350a:	78f9      	ldrb	r1, [r7, #3]
 801350c:	2300      	movs	r3, #0
 801350e:	2200      	movs	r2, #0
 8013510:	6878      	ldr	r0, [r7, #4]
 8013512:	f005 fe68 	bl	80191e6 <USBD_LL_Transmit>
 8013516:	e01f      	b.n	8013558 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8013518:	68bb      	ldr	r3, [r7, #8]
 801351a:	2200      	movs	r2, #0
 801351c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8013520:	687b      	ldr	r3, [r7, #4]
 8013522:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8013526:	687a      	ldr	r2, [r7, #4]
 8013528:	33b0      	adds	r3, #176	@ 0xb0
 801352a:	009b      	lsls	r3, r3, #2
 801352c:	4413      	add	r3, r2
 801352e:	685b      	ldr	r3, [r3, #4]
 8013530:	691b      	ldr	r3, [r3, #16]
 8013532:	2b00      	cmp	r3, #0
 8013534:	d010      	beq.n	8013558 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8013536:	687b      	ldr	r3, [r7, #4]
 8013538:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801353c:	687a      	ldr	r2, [r7, #4]
 801353e:	33b0      	adds	r3, #176	@ 0xb0
 8013540:	009b      	lsls	r3, r3, #2
 8013542:	4413      	add	r3, r2
 8013544:	685b      	ldr	r3, [r3, #4]
 8013546:	691b      	ldr	r3, [r3, #16]
 8013548:	68ba      	ldr	r2, [r7, #8]
 801354a:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 801354e:	68ba      	ldr	r2, [r7, #8]
 8013550:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8013554:	78fa      	ldrb	r2, [r7, #3]
 8013556:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8013558:	2300      	movs	r3, #0
}
 801355a:	4618      	mov	r0, r3
 801355c:	3710      	adds	r7, #16
 801355e:	46bd      	mov	sp, r7
 8013560:	bd80      	pop	{r7, pc}

08013562 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8013562:	b580      	push	{r7, lr}
 8013564:	b084      	sub	sp, #16
 8013566:	af00      	add	r7, sp, #0
 8013568:	6078      	str	r0, [r7, #4]
 801356a:	460b      	mov	r3, r1
 801356c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801356e:	687b      	ldr	r3, [r7, #4]
 8013570:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013574:	687b      	ldr	r3, [r7, #4]
 8013576:	32b0      	adds	r2, #176	@ 0xb0
 8013578:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801357c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 801357e:	687b      	ldr	r3, [r7, #4]
 8013580:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013584:	687b      	ldr	r3, [r7, #4]
 8013586:	32b0      	adds	r2, #176	@ 0xb0
 8013588:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801358c:	2b00      	cmp	r3, #0
 801358e:	d101      	bne.n	8013594 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8013590:	2303      	movs	r3, #3
 8013592:	e01a      	b.n	80135ca <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8013594:	78fb      	ldrb	r3, [r7, #3]
 8013596:	4619      	mov	r1, r3
 8013598:	6878      	ldr	r0, [r7, #4]
 801359a:	f005 fe66 	bl	801926a <USBD_LL_GetRxDataSize>
 801359e:	4602      	mov	r2, r0
 80135a0:	68fb      	ldr	r3, [r7, #12]
 80135a2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80135a6:	687b      	ldr	r3, [r7, #4]
 80135a8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80135ac:	687a      	ldr	r2, [r7, #4]
 80135ae:	33b0      	adds	r3, #176	@ 0xb0
 80135b0:	009b      	lsls	r3, r3, #2
 80135b2:	4413      	add	r3, r2
 80135b4:	685b      	ldr	r3, [r3, #4]
 80135b6:	68db      	ldr	r3, [r3, #12]
 80135b8:	68fa      	ldr	r2, [r7, #12]
 80135ba:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80135be:	68fa      	ldr	r2, [r7, #12]
 80135c0:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80135c4:	4611      	mov	r1, r2
 80135c6:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80135c8:	2300      	movs	r3, #0
}
 80135ca:	4618      	mov	r0, r3
 80135cc:	3710      	adds	r7, #16
 80135ce:	46bd      	mov	sp, r7
 80135d0:	bd80      	pop	{r7, pc}

080135d2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80135d2:	b580      	push	{r7, lr}
 80135d4:	b084      	sub	sp, #16
 80135d6:	af00      	add	r7, sp, #0
 80135d8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80135da:	687b      	ldr	r3, [r7, #4]
 80135dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80135e0:	687b      	ldr	r3, [r7, #4]
 80135e2:	32b0      	adds	r2, #176	@ 0xb0
 80135e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80135e8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80135ea:	68fb      	ldr	r3, [r7, #12]
 80135ec:	2b00      	cmp	r3, #0
 80135ee:	d101      	bne.n	80135f4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80135f0:	2303      	movs	r3, #3
 80135f2:	e024      	b.n	801363e <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80135f4:	687b      	ldr	r3, [r7, #4]
 80135f6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80135fa:	687a      	ldr	r2, [r7, #4]
 80135fc:	33b0      	adds	r3, #176	@ 0xb0
 80135fe:	009b      	lsls	r3, r3, #2
 8013600:	4413      	add	r3, r2
 8013602:	685b      	ldr	r3, [r3, #4]
 8013604:	2b00      	cmp	r3, #0
 8013606:	d019      	beq.n	801363c <USBD_CDC_EP0_RxReady+0x6a>
 8013608:	68fb      	ldr	r3, [r7, #12]
 801360a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 801360e:	2bff      	cmp	r3, #255	@ 0xff
 8013610:	d014      	beq.n	801363c <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8013612:	687b      	ldr	r3, [r7, #4]
 8013614:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8013618:	687a      	ldr	r2, [r7, #4]
 801361a:	33b0      	adds	r3, #176	@ 0xb0
 801361c:	009b      	lsls	r3, r3, #2
 801361e:	4413      	add	r3, r2
 8013620:	685b      	ldr	r3, [r3, #4]
 8013622:	689b      	ldr	r3, [r3, #8]
 8013624:	68fa      	ldr	r2, [r7, #12]
 8013626:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 801362a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 801362c:	68fa      	ldr	r2, [r7, #12]
 801362e:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8013632:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8013634:	68fb      	ldr	r3, [r7, #12]
 8013636:	22ff      	movs	r2, #255	@ 0xff
 8013638:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 801363c:	2300      	movs	r3, #0
}
 801363e:	4618      	mov	r0, r3
 8013640:	3710      	adds	r7, #16
 8013642:	46bd      	mov	sp, r7
 8013644:	bd80      	pop	{r7, pc}
	...

08013648 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8013648:	b580      	push	{r7, lr}
 801364a:	b086      	sub	sp, #24
 801364c:	af00      	add	r7, sp, #0
 801364e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8013650:	2182      	movs	r1, #130	@ 0x82
 8013652:	4818      	ldr	r0, [pc, #96]	@ (80136b4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8013654:	f000 fcbd 	bl	8013fd2 <USBD_GetEpDesc>
 8013658:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 801365a:	2101      	movs	r1, #1
 801365c:	4815      	ldr	r0, [pc, #84]	@ (80136b4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 801365e:	f000 fcb8 	bl	8013fd2 <USBD_GetEpDesc>
 8013662:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8013664:	2181      	movs	r1, #129	@ 0x81
 8013666:	4813      	ldr	r0, [pc, #76]	@ (80136b4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8013668:	f000 fcb3 	bl	8013fd2 <USBD_GetEpDesc>
 801366c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801366e:	697b      	ldr	r3, [r7, #20]
 8013670:	2b00      	cmp	r3, #0
 8013672:	d002      	beq.n	801367a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8013674:	697b      	ldr	r3, [r7, #20]
 8013676:	2210      	movs	r2, #16
 8013678:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801367a:	693b      	ldr	r3, [r7, #16]
 801367c:	2b00      	cmp	r3, #0
 801367e:	d006      	beq.n	801368e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8013680:	693b      	ldr	r3, [r7, #16]
 8013682:	2200      	movs	r2, #0
 8013684:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8013688:	711a      	strb	r2, [r3, #4]
 801368a:	2200      	movs	r2, #0
 801368c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801368e:	68fb      	ldr	r3, [r7, #12]
 8013690:	2b00      	cmp	r3, #0
 8013692:	d006      	beq.n	80136a2 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8013694:	68fb      	ldr	r3, [r7, #12]
 8013696:	2200      	movs	r2, #0
 8013698:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801369c:	711a      	strb	r2, [r3, #4]
 801369e:	2200      	movs	r2, #0
 80136a0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80136a2:	687b      	ldr	r3, [r7, #4]
 80136a4:	2243      	movs	r2, #67	@ 0x43
 80136a6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80136a8:	4b02      	ldr	r3, [pc, #8]	@ (80136b4 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80136aa:	4618      	mov	r0, r3
 80136ac:	3718      	adds	r7, #24
 80136ae:	46bd      	mov	sp, r7
 80136b0:	bd80      	pop	{r7, pc}
 80136b2:	bf00      	nop
 80136b4:	2000007c 	.word	0x2000007c

080136b8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80136b8:	b580      	push	{r7, lr}
 80136ba:	b086      	sub	sp, #24
 80136bc:	af00      	add	r7, sp, #0
 80136be:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80136c0:	2182      	movs	r1, #130	@ 0x82
 80136c2:	4818      	ldr	r0, [pc, #96]	@ (8013724 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80136c4:	f000 fc85 	bl	8013fd2 <USBD_GetEpDesc>
 80136c8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80136ca:	2101      	movs	r1, #1
 80136cc:	4815      	ldr	r0, [pc, #84]	@ (8013724 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80136ce:	f000 fc80 	bl	8013fd2 <USBD_GetEpDesc>
 80136d2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80136d4:	2181      	movs	r1, #129	@ 0x81
 80136d6:	4813      	ldr	r0, [pc, #76]	@ (8013724 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80136d8:	f000 fc7b 	bl	8013fd2 <USBD_GetEpDesc>
 80136dc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80136de:	697b      	ldr	r3, [r7, #20]
 80136e0:	2b00      	cmp	r3, #0
 80136e2:	d002      	beq.n	80136ea <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80136e4:	697b      	ldr	r3, [r7, #20]
 80136e6:	2210      	movs	r2, #16
 80136e8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80136ea:	693b      	ldr	r3, [r7, #16]
 80136ec:	2b00      	cmp	r3, #0
 80136ee:	d006      	beq.n	80136fe <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80136f0:	693b      	ldr	r3, [r7, #16]
 80136f2:	2200      	movs	r2, #0
 80136f4:	711a      	strb	r2, [r3, #4]
 80136f6:	2200      	movs	r2, #0
 80136f8:	f042 0202 	orr.w	r2, r2, #2
 80136fc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80136fe:	68fb      	ldr	r3, [r7, #12]
 8013700:	2b00      	cmp	r3, #0
 8013702:	d006      	beq.n	8013712 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8013704:	68fb      	ldr	r3, [r7, #12]
 8013706:	2200      	movs	r2, #0
 8013708:	711a      	strb	r2, [r3, #4]
 801370a:	2200      	movs	r2, #0
 801370c:	f042 0202 	orr.w	r2, r2, #2
 8013710:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8013712:	687b      	ldr	r3, [r7, #4]
 8013714:	2243      	movs	r2, #67	@ 0x43
 8013716:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8013718:	4b02      	ldr	r3, [pc, #8]	@ (8013724 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 801371a:	4618      	mov	r0, r3
 801371c:	3718      	adds	r7, #24
 801371e:	46bd      	mov	sp, r7
 8013720:	bd80      	pop	{r7, pc}
 8013722:	bf00      	nop
 8013724:	2000007c 	.word	0x2000007c

08013728 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8013728:	b580      	push	{r7, lr}
 801372a:	b086      	sub	sp, #24
 801372c:	af00      	add	r7, sp, #0
 801372e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8013730:	2182      	movs	r1, #130	@ 0x82
 8013732:	4818      	ldr	r0, [pc, #96]	@ (8013794 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8013734:	f000 fc4d 	bl	8013fd2 <USBD_GetEpDesc>
 8013738:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 801373a:	2101      	movs	r1, #1
 801373c:	4815      	ldr	r0, [pc, #84]	@ (8013794 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 801373e:	f000 fc48 	bl	8013fd2 <USBD_GetEpDesc>
 8013742:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8013744:	2181      	movs	r1, #129	@ 0x81
 8013746:	4813      	ldr	r0, [pc, #76]	@ (8013794 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8013748:	f000 fc43 	bl	8013fd2 <USBD_GetEpDesc>
 801374c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801374e:	697b      	ldr	r3, [r7, #20]
 8013750:	2b00      	cmp	r3, #0
 8013752:	d002      	beq.n	801375a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8013754:	697b      	ldr	r3, [r7, #20]
 8013756:	2210      	movs	r2, #16
 8013758:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801375a:	693b      	ldr	r3, [r7, #16]
 801375c:	2b00      	cmp	r3, #0
 801375e:	d006      	beq.n	801376e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8013760:	693b      	ldr	r3, [r7, #16]
 8013762:	2200      	movs	r2, #0
 8013764:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8013768:	711a      	strb	r2, [r3, #4]
 801376a:	2200      	movs	r2, #0
 801376c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801376e:	68fb      	ldr	r3, [r7, #12]
 8013770:	2b00      	cmp	r3, #0
 8013772:	d006      	beq.n	8013782 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8013774:	68fb      	ldr	r3, [r7, #12]
 8013776:	2200      	movs	r2, #0
 8013778:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801377c:	711a      	strb	r2, [r3, #4]
 801377e:	2200      	movs	r2, #0
 8013780:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8013782:	687b      	ldr	r3, [r7, #4]
 8013784:	2243      	movs	r2, #67	@ 0x43
 8013786:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8013788:	4b02      	ldr	r3, [pc, #8]	@ (8013794 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 801378a:	4618      	mov	r0, r3
 801378c:	3718      	adds	r7, #24
 801378e:	46bd      	mov	sp, r7
 8013790:	bd80      	pop	{r7, pc}
 8013792:	bf00      	nop
 8013794:	2000007c 	.word	0x2000007c

08013798 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8013798:	b480      	push	{r7}
 801379a:	b083      	sub	sp, #12
 801379c:	af00      	add	r7, sp, #0
 801379e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80137a0:	687b      	ldr	r3, [r7, #4]
 80137a2:	220a      	movs	r2, #10
 80137a4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80137a6:	4b03      	ldr	r3, [pc, #12]	@ (80137b4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80137a8:	4618      	mov	r0, r3
 80137aa:	370c      	adds	r7, #12
 80137ac:	46bd      	mov	sp, r7
 80137ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137b2:	4770      	bx	lr
 80137b4:	20000038 	.word	0x20000038

080137b8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80137b8:	b480      	push	{r7}
 80137ba:	b083      	sub	sp, #12
 80137bc:	af00      	add	r7, sp, #0
 80137be:	6078      	str	r0, [r7, #4]
 80137c0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80137c2:	683b      	ldr	r3, [r7, #0]
 80137c4:	2b00      	cmp	r3, #0
 80137c6:	d101      	bne.n	80137cc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80137c8:	2303      	movs	r3, #3
 80137ca:	e009      	b.n	80137e0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80137cc:	687b      	ldr	r3, [r7, #4]
 80137ce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80137d2:	687a      	ldr	r2, [r7, #4]
 80137d4:	33b0      	adds	r3, #176	@ 0xb0
 80137d6:	009b      	lsls	r3, r3, #2
 80137d8:	4413      	add	r3, r2
 80137da:	683a      	ldr	r2, [r7, #0]
 80137dc:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80137de:	2300      	movs	r3, #0
}
 80137e0:	4618      	mov	r0, r3
 80137e2:	370c      	adds	r7, #12
 80137e4:	46bd      	mov	sp, r7
 80137e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137ea:	4770      	bx	lr

080137ec <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80137ec:	b480      	push	{r7}
 80137ee:	b087      	sub	sp, #28
 80137f0:	af00      	add	r7, sp, #0
 80137f2:	60f8      	str	r0, [r7, #12]
 80137f4:	60b9      	str	r1, [r7, #8]
 80137f6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80137f8:	68fb      	ldr	r3, [r7, #12]
 80137fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80137fe:	68fb      	ldr	r3, [r7, #12]
 8013800:	32b0      	adds	r2, #176	@ 0xb0
 8013802:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013806:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8013808:	697b      	ldr	r3, [r7, #20]
 801380a:	2b00      	cmp	r3, #0
 801380c:	d101      	bne.n	8013812 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 801380e:	2303      	movs	r3, #3
 8013810:	e008      	b.n	8013824 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8013812:	697b      	ldr	r3, [r7, #20]
 8013814:	68ba      	ldr	r2, [r7, #8]
 8013816:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 801381a:	697b      	ldr	r3, [r7, #20]
 801381c:	687a      	ldr	r2, [r7, #4]
 801381e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8013822:	2300      	movs	r3, #0
}
 8013824:	4618      	mov	r0, r3
 8013826:	371c      	adds	r7, #28
 8013828:	46bd      	mov	sp, r7
 801382a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801382e:	4770      	bx	lr

08013830 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8013830:	b480      	push	{r7}
 8013832:	b085      	sub	sp, #20
 8013834:	af00      	add	r7, sp, #0
 8013836:	6078      	str	r0, [r7, #4]
 8013838:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801383a:	687b      	ldr	r3, [r7, #4]
 801383c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013840:	687b      	ldr	r3, [r7, #4]
 8013842:	32b0      	adds	r2, #176	@ 0xb0
 8013844:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013848:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 801384a:	68fb      	ldr	r3, [r7, #12]
 801384c:	2b00      	cmp	r3, #0
 801384e:	d101      	bne.n	8013854 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8013850:	2303      	movs	r3, #3
 8013852:	e004      	b.n	801385e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8013854:	68fb      	ldr	r3, [r7, #12]
 8013856:	683a      	ldr	r2, [r7, #0]
 8013858:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 801385c:	2300      	movs	r3, #0
}
 801385e:	4618      	mov	r0, r3
 8013860:	3714      	adds	r7, #20
 8013862:	46bd      	mov	sp, r7
 8013864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013868:	4770      	bx	lr
	...

0801386c <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 801386c:	b580      	push	{r7, lr}
 801386e:	b084      	sub	sp, #16
 8013870:	af00      	add	r7, sp, #0
 8013872:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013874:	687b      	ldr	r3, [r7, #4]
 8013876:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801387a:	687b      	ldr	r3, [r7, #4]
 801387c:	32b0      	adds	r2, #176	@ 0xb0
 801387e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013882:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8013884:	2301      	movs	r3, #1
 8013886:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8013888:	68bb      	ldr	r3, [r7, #8]
 801388a:	2b00      	cmp	r3, #0
 801388c:	d101      	bne.n	8013892 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 801388e:	2303      	movs	r3, #3
 8013890:	e025      	b.n	80138de <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8013892:	68bb      	ldr	r3, [r7, #8]
 8013894:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8013898:	2b00      	cmp	r3, #0
 801389a:	d11f      	bne.n	80138dc <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 801389c:	68bb      	ldr	r3, [r7, #8]
 801389e:	2201      	movs	r2, #1
 80138a0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80138a4:	4b10      	ldr	r3, [pc, #64]	@ (80138e8 <USBD_CDC_TransmitPacket+0x7c>)
 80138a6:	781b      	ldrb	r3, [r3, #0]
 80138a8:	f003 020f 	and.w	r2, r3, #15
 80138ac:	68bb      	ldr	r3, [r7, #8]
 80138ae:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 80138b2:	6878      	ldr	r0, [r7, #4]
 80138b4:	4613      	mov	r3, r2
 80138b6:	009b      	lsls	r3, r3, #2
 80138b8:	4413      	add	r3, r2
 80138ba:	009b      	lsls	r3, r3, #2
 80138bc:	4403      	add	r3, r0
 80138be:	3318      	adds	r3, #24
 80138c0:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80138c2:	4b09      	ldr	r3, [pc, #36]	@ (80138e8 <USBD_CDC_TransmitPacket+0x7c>)
 80138c4:	7819      	ldrb	r1, [r3, #0]
 80138c6:	68bb      	ldr	r3, [r7, #8]
 80138c8:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 80138cc:	68bb      	ldr	r3, [r7, #8]
 80138ce:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 80138d2:	6878      	ldr	r0, [r7, #4]
 80138d4:	f005 fc87 	bl	80191e6 <USBD_LL_Transmit>

    ret = USBD_OK;
 80138d8:	2300      	movs	r3, #0
 80138da:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80138dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80138de:	4618      	mov	r0, r3
 80138e0:	3710      	adds	r7, #16
 80138e2:	46bd      	mov	sp, r7
 80138e4:	bd80      	pop	{r7, pc}
 80138e6:	bf00      	nop
 80138e8:	200000bf 	.word	0x200000bf

080138ec <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80138ec:	b580      	push	{r7, lr}
 80138ee:	b084      	sub	sp, #16
 80138f0:	af00      	add	r7, sp, #0
 80138f2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80138f4:	687b      	ldr	r3, [r7, #4]
 80138f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80138fa:	687b      	ldr	r3, [r7, #4]
 80138fc:	32b0      	adds	r2, #176	@ 0xb0
 80138fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013902:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8013904:	687b      	ldr	r3, [r7, #4]
 8013906:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801390a:	687b      	ldr	r3, [r7, #4]
 801390c:	32b0      	adds	r2, #176	@ 0xb0
 801390e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013912:	2b00      	cmp	r3, #0
 8013914:	d101      	bne.n	801391a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8013916:	2303      	movs	r3, #3
 8013918:	e018      	b.n	801394c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801391a:	687b      	ldr	r3, [r7, #4]
 801391c:	7c1b      	ldrb	r3, [r3, #16]
 801391e:	2b00      	cmp	r3, #0
 8013920:	d10a      	bne.n	8013938 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8013922:	4b0c      	ldr	r3, [pc, #48]	@ (8013954 <USBD_CDC_ReceivePacket+0x68>)
 8013924:	7819      	ldrb	r1, [r3, #0]
 8013926:	68fb      	ldr	r3, [r7, #12]
 8013928:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 801392c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8013930:	6878      	ldr	r0, [r7, #4]
 8013932:	f005 fc79 	bl	8019228 <USBD_LL_PrepareReceive>
 8013936:	e008      	b.n	801394a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8013938:	4b06      	ldr	r3, [pc, #24]	@ (8013954 <USBD_CDC_ReceivePacket+0x68>)
 801393a:	7819      	ldrb	r1, [r3, #0]
 801393c:	68fb      	ldr	r3, [r7, #12]
 801393e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8013942:	2340      	movs	r3, #64	@ 0x40
 8013944:	6878      	ldr	r0, [r7, #4]
 8013946:	f005 fc6f 	bl	8019228 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 801394a:	2300      	movs	r3, #0
}
 801394c:	4618      	mov	r0, r3
 801394e:	3710      	adds	r7, #16
 8013950:	46bd      	mov	sp, r7
 8013952:	bd80      	pop	{r7, pc}
 8013954:	200000c0 	.word	0x200000c0

08013958 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8013958:	b580      	push	{r7, lr}
 801395a:	b086      	sub	sp, #24
 801395c:	af00      	add	r7, sp, #0
 801395e:	60f8      	str	r0, [r7, #12]
 8013960:	60b9      	str	r1, [r7, #8]
 8013962:	4613      	mov	r3, r2
 8013964:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8013966:	68fb      	ldr	r3, [r7, #12]
 8013968:	2b00      	cmp	r3, #0
 801396a:	d101      	bne.n	8013970 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 801396c:	2303      	movs	r3, #3
 801396e:	e01f      	b.n	80139b0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8013970:	68fb      	ldr	r3, [r7, #12]
 8013972:	2200      	movs	r2, #0
 8013974:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8013978:	68fb      	ldr	r3, [r7, #12]
 801397a:	2200      	movs	r2, #0
 801397c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8013980:	68fb      	ldr	r3, [r7, #12]
 8013982:	2200      	movs	r2, #0
 8013984:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8013988:	68bb      	ldr	r3, [r7, #8]
 801398a:	2b00      	cmp	r3, #0
 801398c:	d003      	beq.n	8013996 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 801398e:	68fb      	ldr	r3, [r7, #12]
 8013990:	68ba      	ldr	r2, [r7, #8]
 8013992:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8013996:	68fb      	ldr	r3, [r7, #12]
 8013998:	2201      	movs	r2, #1
 801399a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 801399e:	68fb      	ldr	r3, [r7, #12]
 80139a0:	79fa      	ldrb	r2, [r7, #7]
 80139a2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80139a4:	68f8      	ldr	r0, [r7, #12]
 80139a6:	f005 fad3 	bl	8018f50 <USBD_LL_Init>
 80139aa:	4603      	mov	r3, r0
 80139ac:	75fb      	strb	r3, [r7, #23]

  return ret;
 80139ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80139b0:	4618      	mov	r0, r3
 80139b2:	3718      	adds	r7, #24
 80139b4:	46bd      	mov	sp, r7
 80139b6:	bd80      	pop	{r7, pc}

080139b8 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80139b8:	b580      	push	{r7, lr}
 80139ba:	b084      	sub	sp, #16
 80139bc:	af00      	add	r7, sp, #0
 80139be:	6078      	str	r0, [r7, #4]
 80139c0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80139c2:	2300      	movs	r3, #0
 80139c4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80139c6:	683b      	ldr	r3, [r7, #0]
 80139c8:	2b00      	cmp	r3, #0
 80139ca:	d101      	bne.n	80139d0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80139cc:	2303      	movs	r3, #3
 80139ce:	e025      	b.n	8013a1c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80139d0:	687b      	ldr	r3, [r7, #4]
 80139d2:	683a      	ldr	r2, [r7, #0]
 80139d4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80139d8:	687b      	ldr	r3, [r7, #4]
 80139da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80139de:	687b      	ldr	r3, [r7, #4]
 80139e0:	32ae      	adds	r2, #174	@ 0xae
 80139e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80139e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80139e8:	2b00      	cmp	r3, #0
 80139ea:	d00f      	beq.n	8013a0c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80139ec:	687b      	ldr	r3, [r7, #4]
 80139ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80139f2:	687b      	ldr	r3, [r7, #4]
 80139f4:	32ae      	adds	r2, #174	@ 0xae
 80139f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80139fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80139fc:	f107 020e 	add.w	r2, r7, #14
 8013a00:	4610      	mov	r0, r2
 8013a02:	4798      	blx	r3
 8013a04:	4602      	mov	r2, r0
 8013a06:	687b      	ldr	r3, [r7, #4]
 8013a08:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8013a0c:	687b      	ldr	r3, [r7, #4]
 8013a0e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8013a12:	1c5a      	adds	r2, r3, #1
 8013a14:	687b      	ldr	r3, [r7, #4]
 8013a16:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8013a1a:	2300      	movs	r3, #0
}
 8013a1c:	4618      	mov	r0, r3
 8013a1e:	3710      	adds	r7, #16
 8013a20:	46bd      	mov	sp, r7
 8013a22:	bd80      	pop	{r7, pc}

08013a24 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8013a24:	b580      	push	{r7, lr}
 8013a26:	b082      	sub	sp, #8
 8013a28:	af00      	add	r7, sp, #0
 8013a2a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8013a2c:	6878      	ldr	r0, [r7, #4]
 8013a2e:	f005 faf1 	bl	8019014 <USBD_LL_Start>
 8013a32:	4603      	mov	r3, r0
}
 8013a34:	4618      	mov	r0, r3
 8013a36:	3708      	adds	r7, #8
 8013a38:	46bd      	mov	sp, r7
 8013a3a:	bd80      	pop	{r7, pc}

08013a3c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8013a3c:	b480      	push	{r7}
 8013a3e:	b083      	sub	sp, #12
 8013a40:	af00      	add	r7, sp, #0
 8013a42:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8013a44:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8013a46:	4618      	mov	r0, r3
 8013a48:	370c      	adds	r7, #12
 8013a4a:	46bd      	mov	sp, r7
 8013a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a50:	4770      	bx	lr

08013a52 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8013a52:	b580      	push	{r7, lr}
 8013a54:	b084      	sub	sp, #16
 8013a56:	af00      	add	r7, sp, #0
 8013a58:	6078      	str	r0, [r7, #4]
 8013a5a:	460b      	mov	r3, r1
 8013a5c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8013a5e:	2300      	movs	r3, #0
 8013a60:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8013a62:	687b      	ldr	r3, [r7, #4]
 8013a64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013a68:	2b00      	cmp	r3, #0
 8013a6a:	d009      	beq.n	8013a80 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8013a6c:	687b      	ldr	r3, [r7, #4]
 8013a6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013a72:	681b      	ldr	r3, [r3, #0]
 8013a74:	78fa      	ldrb	r2, [r7, #3]
 8013a76:	4611      	mov	r1, r2
 8013a78:	6878      	ldr	r0, [r7, #4]
 8013a7a:	4798      	blx	r3
 8013a7c:	4603      	mov	r3, r0
 8013a7e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8013a80:	7bfb      	ldrb	r3, [r7, #15]
}
 8013a82:	4618      	mov	r0, r3
 8013a84:	3710      	adds	r7, #16
 8013a86:	46bd      	mov	sp, r7
 8013a88:	bd80      	pop	{r7, pc}

08013a8a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8013a8a:	b580      	push	{r7, lr}
 8013a8c:	b084      	sub	sp, #16
 8013a8e:	af00      	add	r7, sp, #0
 8013a90:	6078      	str	r0, [r7, #4]
 8013a92:	460b      	mov	r3, r1
 8013a94:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8013a96:	2300      	movs	r3, #0
 8013a98:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8013a9a:	687b      	ldr	r3, [r7, #4]
 8013a9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013aa0:	685b      	ldr	r3, [r3, #4]
 8013aa2:	78fa      	ldrb	r2, [r7, #3]
 8013aa4:	4611      	mov	r1, r2
 8013aa6:	6878      	ldr	r0, [r7, #4]
 8013aa8:	4798      	blx	r3
 8013aaa:	4603      	mov	r3, r0
 8013aac:	2b00      	cmp	r3, #0
 8013aae:	d001      	beq.n	8013ab4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8013ab0:	2303      	movs	r3, #3
 8013ab2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8013ab4:	7bfb      	ldrb	r3, [r7, #15]
}
 8013ab6:	4618      	mov	r0, r3
 8013ab8:	3710      	adds	r7, #16
 8013aba:	46bd      	mov	sp, r7
 8013abc:	bd80      	pop	{r7, pc}

08013abe <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8013abe:	b580      	push	{r7, lr}
 8013ac0:	b084      	sub	sp, #16
 8013ac2:	af00      	add	r7, sp, #0
 8013ac4:	6078      	str	r0, [r7, #4]
 8013ac6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8013ac8:	687b      	ldr	r3, [r7, #4]
 8013aca:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8013ace:	6839      	ldr	r1, [r7, #0]
 8013ad0:	4618      	mov	r0, r3
 8013ad2:	f001 f8a4 	bl	8014c1e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8013ad6:	687b      	ldr	r3, [r7, #4]
 8013ad8:	2201      	movs	r2, #1
 8013ada:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8013ade:	687b      	ldr	r3, [r7, #4]
 8013ae0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8013ae4:	461a      	mov	r2, r3
 8013ae6:	687b      	ldr	r3, [r7, #4]
 8013ae8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8013aec:	687b      	ldr	r3, [r7, #4]
 8013aee:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8013af2:	f003 031f 	and.w	r3, r3, #31
 8013af6:	2b02      	cmp	r3, #2
 8013af8:	d01a      	beq.n	8013b30 <USBD_LL_SetupStage+0x72>
 8013afa:	2b02      	cmp	r3, #2
 8013afc:	d822      	bhi.n	8013b44 <USBD_LL_SetupStage+0x86>
 8013afe:	2b00      	cmp	r3, #0
 8013b00:	d002      	beq.n	8013b08 <USBD_LL_SetupStage+0x4a>
 8013b02:	2b01      	cmp	r3, #1
 8013b04:	d00a      	beq.n	8013b1c <USBD_LL_SetupStage+0x5e>
 8013b06:	e01d      	b.n	8013b44 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8013b08:	687b      	ldr	r3, [r7, #4]
 8013b0a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8013b0e:	4619      	mov	r1, r3
 8013b10:	6878      	ldr	r0, [r7, #4]
 8013b12:	f000 fad1 	bl	80140b8 <USBD_StdDevReq>
 8013b16:	4603      	mov	r3, r0
 8013b18:	73fb      	strb	r3, [r7, #15]
      break;
 8013b1a:	e020      	b.n	8013b5e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8013b1c:	687b      	ldr	r3, [r7, #4]
 8013b1e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8013b22:	4619      	mov	r1, r3
 8013b24:	6878      	ldr	r0, [r7, #4]
 8013b26:	f000 fb39 	bl	801419c <USBD_StdItfReq>
 8013b2a:	4603      	mov	r3, r0
 8013b2c:	73fb      	strb	r3, [r7, #15]
      break;
 8013b2e:	e016      	b.n	8013b5e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8013b30:	687b      	ldr	r3, [r7, #4]
 8013b32:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8013b36:	4619      	mov	r1, r3
 8013b38:	6878      	ldr	r0, [r7, #4]
 8013b3a:	f000 fb9b 	bl	8014274 <USBD_StdEPReq>
 8013b3e:	4603      	mov	r3, r0
 8013b40:	73fb      	strb	r3, [r7, #15]
      break;
 8013b42:	e00c      	b.n	8013b5e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8013b44:	687b      	ldr	r3, [r7, #4]
 8013b46:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8013b4a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8013b4e:	b2db      	uxtb	r3, r3
 8013b50:	4619      	mov	r1, r3
 8013b52:	6878      	ldr	r0, [r7, #4]
 8013b54:	f005 fabe 	bl	80190d4 <USBD_LL_StallEP>
 8013b58:	4603      	mov	r3, r0
 8013b5a:	73fb      	strb	r3, [r7, #15]
      break;
 8013b5c:	bf00      	nop
  }

  return ret;
 8013b5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8013b60:	4618      	mov	r0, r3
 8013b62:	3710      	adds	r7, #16
 8013b64:	46bd      	mov	sp, r7
 8013b66:	bd80      	pop	{r7, pc}

08013b68 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8013b68:	b580      	push	{r7, lr}
 8013b6a:	b086      	sub	sp, #24
 8013b6c:	af00      	add	r7, sp, #0
 8013b6e:	60f8      	str	r0, [r7, #12]
 8013b70:	460b      	mov	r3, r1
 8013b72:	607a      	str	r2, [r7, #4]
 8013b74:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8013b76:	2300      	movs	r3, #0
 8013b78:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8013b7a:	7afb      	ldrb	r3, [r7, #11]
 8013b7c:	2b00      	cmp	r3, #0
 8013b7e:	d16e      	bne.n	8013c5e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8013b80:	68fb      	ldr	r3, [r7, #12]
 8013b82:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8013b86:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8013b88:	68fb      	ldr	r3, [r7, #12]
 8013b8a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8013b8e:	2b03      	cmp	r3, #3
 8013b90:	f040 8098 	bne.w	8013cc4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8013b94:	693b      	ldr	r3, [r7, #16]
 8013b96:	689a      	ldr	r2, [r3, #8]
 8013b98:	693b      	ldr	r3, [r7, #16]
 8013b9a:	68db      	ldr	r3, [r3, #12]
 8013b9c:	429a      	cmp	r2, r3
 8013b9e:	d913      	bls.n	8013bc8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8013ba0:	693b      	ldr	r3, [r7, #16]
 8013ba2:	689a      	ldr	r2, [r3, #8]
 8013ba4:	693b      	ldr	r3, [r7, #16]
 8013ba6:	68db      	ldr	r3, [r3, #12]
 8013ba8:	1ad2      	subs	r2, r2, r3
 8013baa:	693b      	ldr	r3, [r7, #16]
 8013bac:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8013bae:	693b      	ldr	r3, [r7, #16]
 8013bb0:	68da      	ldr	r2, [r3, #12]
 8013bb2:	693b      	ldr	r3, [r7, #16]
 8013bb4:	689b      	ldr	r3, [r3, #8]
 8013bb6:	4293      	cmp	r3, r2
 8013bb8:	bf28      	it	cs
 8013bba:	4613      	movcs	r3, r2
 8013bbc:	461a      	mov	r2, r3
 8013bbe:	6879      	ldr	r1, [r7, #4]
 8013bc0:	68f8      	ldr	r0, [r7, #12]
 8013bc2:	f001 f92c 	bl	8014e1e <USBD_CtlContinueRx>
 8013bc6:	e07d      	b.n	8013cc4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8013bc8:	68fb      	ldr	r3, [r7, #12]
 8013bca:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8013bce:	f003 031f 	and.w	r3, r3, #31
 8013bd2:	2b02      	cmp	r3, #2
 8013bd4:	d014      	beq.n	8013c00 <USBD_LL_DataOutStage+0x98>
 8013bd6:	2b02      	cmp	r3, #2
 8013bd8:	d81d      	bhi.n	8013c16 <USBD_LL_DataOutStage+0xae>
 8013bda:	2b00      	cmp	r3, #0
 8013bdc:	d002      	beq.n	8013be4 <USBD_LL_DataOutStage+0x7c>
 8013bde:	2b01      	cmp	r3, #1
 8013be0:	d003      	beq.n	8013bea <USBD_LL_DataOutStage+0x82>
 8013be2:	e018      	b.n	8013c16 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8013be4:	2300      	movs	r3, #0
 8013be6:	75bb      	strb	r3, [r7, #22]
            break;
 8013be8:	e018      	b.n	8013c1c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8013bea:	68fb      	ldr	r3, [r7, #12]
 8013bec:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8013bf0:	b2db      	uxtb	r3, r3
 8013bf2:	4619      	mov	r1, r3
 8013bf4:	68f8      	ldr	r0, [r7, #12]
 8013bf6:	f000 f9d2 	bl	8013f9e <USBD_CoreFindIF>
 8013bfa:	4603      	mov	r3, r0
 8013bfc:	75bb      	strb	r3, [r7, #22]
            break;
 8013bfe:	e00d      	b.n	8013c1c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8013c00:	68fb      	ldr	r3, [r7, #12]
 8013c02:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8013c06:	b2db      	uxtb	r3, r3
 8013c08:	4619      	mov	r1, r3
 8013c0a:	68f8      	ldr	r0, [r7, #12]
 8013c0c:	f000 f9d4 	bl	8013fb8 <USBD_CoreFindEP>
 8013c10:	4603      	mov	r3, r0
 8013c12:	75bb      	strb	r3, [r7, #22]
            break;
 8013c14:	e002      	b.n	8013c1c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8013c16:	2300      	movs	r3, #0
 8013c18:	75bb      	strb	r3, [r7, #22]
            break;
 8013c1a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8013c1c:	7dbb      	ldrb	r3, [r7, #22]
 8013c1e:	2b00      	cmp	r3, #0
 8013c20:	d119      	bne.n	8013c56 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013c22:	68fb      	ldr	r3, [r7, #12]
 8013c24:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013c28:	b2db      	uxtb	r3, r3
 8013c2a:	2b03      	cmp	r3, #3
 8013c2c:	d113      	bne.n	8013c56 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8013c2e:	7dba      	ldrb	r2, [r7, #22]
 8013c30:	68fb      	ldr	r3, [r7, #12]
 8013c32:	32ae      	adds	r2, #174	@ 0xae
 8013c34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013c38:	691b      	ldr	r3, [r3, #16]
 8013c3a:	2b00      	cmp	r3, #0
 8013c3c:	d00b      	beq.n	8013c56 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8013c3e:	7dba      	ldrb	r2, [r7, #22]
 8013c40:	68fb      	ldr	r3, [r7, #12]
 8013c42:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8013c46:	7dba      	ldrb	r2, [r7, #22]
 8013c48:	68fb      	ldr	r3, [r7, #12]
 8013c4a:	32ae      	adds	r2, #174	@ 0xae
 8013c4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013c50:	691b      	ldr	r3, [r3, #16]
 8013c52:	68f8      	ldr	r0, [r7, #12]
 8013c54:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8013c56:	68f8      	ldr	r0, [r7, #12]
 8013c58:	f001 f8f2 	bl	8014e40 <USBD_CtlSendStatus>
 8013c5c:	e032      	b.n	8013cc4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8013c5e:	7afb      	ldrb	r3, [r7, #11]
 8013c60:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013c64:	b2db      	uxtb	r3, r3
 8013c66:	4619      	mov	r1, r3
 8013c68:	68f8      	ldr	r0, [r7, #12]
 8013c6a:	f000 f9a5 	bl	8013fb8 <USBD_CoreFindEP>
 8013c6e:	4603      	mov	r3, r0
 8013c70:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8013c72:	7dbb      	ldrb	r3, [r7, #22]
 8013c74:	2bff      	cmp	r3, #255	@ 0xff
 8013c76:	d025      	beq.n	8013cc4 <USBD_LL_DataOutStage+0x15c>
 8013c78:	7dbb      	ldrb	r3, [r7, #22]
 8013c7a:	2b00      	cmp	r3, #0
 8013c7c:	d122      	bne.n	8013cc4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013c7e:	68fb      	ldr	r3, [r7, #12]
 8013c80:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013c84:	b2db      	uxtb	r3, r3
 8013c86:	2b03      	cmp	r3, #3
 8013c88:	d117      	bne.n	8013cba <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8013c8a:	7dba      	ldrb	r2, [r7, #22]
 8013c8c:	68fb      	ldr	r3, [r7, #12]
 8013c8e:	32ae      	adds	r2, #174	@ 0xae
 8013c90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013c94:	699b      	ldr	r3, [r3, #24]
 8013c96:	2b00      	cmp	r3, #0
 8013c98:	d00f      	beq.n	8013cba <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8013c9a:	7dba      	ldrb	r2, [r7, #22]
 8013c9c:	68fb      	ldr	r3, [r7, #12]
 8013c9e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8013ca2:	7dba      	ldrb	r2, [r7, #22]
 8013ca4:	68fb      	ldr	r3, [r7, #12]
 8013ca6:	32ae      	adds	r2, #174	@ 0xae
 8013ca8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013cac:	699b      	ldr	r3, [r3, #24]
 8013cae:	7afa      	ldrb	r2, [r7, #11]
 8013cb0:	4611      	mov	r1, r2
 8013cb2:	68f8      	ldr	r0, [r7, #12]
 8013cb4:	4798      	blx	r3
 8013cb6:	4603      	mov	r3, r0
 8013cb8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8013cba:	7dfb      	ldrb	r3, [r7, #23]
 8013cbc:	2b00      	cmp	r3, #0
 8013cbe:	d001      	beq.n	8013cc4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8013cc0:	7dfb      	ldrb	r3, [r7, #23]
 8013cc2:	e000      	b.n	8013cc6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8013cc4:	2300      	movs	r3, #0
}
 8013cc6:	4618      	mov	r0, r3
 8013cc8:	3718      	adds	r7, #24
 8013cca:	46bd      	mov	sp, r7
 8013ccc:	bd80      	pop	{r7, pc}

08013cce <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8013cce:	b580      	push	{r7, lr}
 8013cd0:	b086      	sub	sp, #24
 8013cd2:	af00      	add	r7, sp, #0
 8013cd4:	60f8      	str	r0, [r7, #12]
 8013cd6:	460b      	mov	r3, r1
 8013cd8:	607a      	str	r2, [r7, #4]
 8013cda:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8013cdc:	7afb      	ldrb	r3, [r7, #11]
 8013cde:	2b00      	cmp	r3, #0
 8013ce0:	d16f      	bne.n	8013dc2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8013ce2:	68fb      	ldr	r3, [r7, #12]
 8013ce4:	3314      	adds	r3, #20
 8013ce6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8013ce8:	68fb      	ldr	r3, [r7, #12]
 8013cea:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8013cee:	2b02      	cmp	r3, #2
 8013cf0:	d15a      	bne.n	8013da8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8013cf2:	693b      	ldr	r3, [r7, #16]
 8013cf4:	689a      	ldr	r2, [r3, #8]
 8013cf6:	693b      	ldr	r3, [r7, #16]
 8013cf8:	68db      	ldr	r3, [r3, #12]
 8013cfa:	429a      	cmp	r2, r3
 8013cfc:	d914      	bls.n	8013d28 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8013cfe:	693b      	ldr	r3, [r7, #16]
 8013d00:	689a      	ldr	r2, [r3, #8]
 8013d02:	693b      	ldr	r3, [r7, #16]
 8013d04:	68db      	ldr	r3, [r3, #12]
 8013d06:	1ad2      	subs	r2, r2, r3
 8013d08:	693b      	ldr	r3, [r7, #16]
 8013d0a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8013d0c:	693b      	ldr	r3, [r7, #16]
 8013d0e:	689b      	ldr	r3, [r3, #8]
 8013d10:	461a      	mov	r2, r3
 8013d12:	6879      	ldr	r1, [r7, #4]
 8013d14:	68f8      	ldr	r0, [r7, #12]
 8013d16:	f001 f854 	bl	8014dc2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8013d1a:	2300      	movs	r3, #0
 8013d1c:	2200      	movs	r2, #0
 8013d1e:	2100      	movs	r1, #0
 8013d20:	68f8      	ldr	r0, [r7, #12]
 8013d22:	f005 fa81 	bl	8019228 <USBD_LL_PrepareReceive>
 8013d26:	e03f      	b.n	8013da8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8013d28:	693b      	ldr	r3, [r7, #16]
 8013d2a:	68da      	ldr	r2, [r3, #12]
 8013d2c:	693b      	ldr	r3, [r7, #16]
 8013d2e:	689b      	ldr	r3, [r3, #8]
 8013d30:	429a      	cmp	r2, r3
 8013d32:	d11c      	bne.n	8013d6e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8013d34:	693b      	ldr	r3, [r7, #16]
 8013d36:	685a      	ldr	r2, [r3, #4]
 8013d38:	693b      	ldr	r3, [r7, #16]
 8013d3a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8013d3c:	429a      	cmp	r2, r3
 8013d3e:	d316      	bcc.n	8013d6e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8013d40:	693b      	ldr	r3, [r7, #16]
 8013d42:	685a      	ldr	r2, [r3, #4]
 8013d44:	68fb      	ldr	r3, [r7, #12]
 8013d46:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8013d4a:	429a      	cmp	r2, r3
 8013d4c:	d20f      	bcs.n	8013d6e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8013d4e:	2200      	movs	r2, #0
 8013d50:	2100      	movs	r1, #0
 8013d52:	68f8      	ldr	r0, [r7, #12]
 8013d54:	f001 f835 	bl	8014dc2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8013d58:	68fb      	ldr	r3, [r7, #12]
 8013d5a:	2200      	movs	r2, #0
 8013d5c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8013d60:	2300      	movs	r3, #0
 8013d62:	2200      	movs	r2, #0
 8013d64:	2100      	movs	r1, #0
 8013d66:	68f8      	ldr	r0, [r7, #12]
 8013d68:	f005 fa5e 	bl	8019228 <USBD_LL_PrepareReceive>
 8013d6c:	e01c      	b.n	8013da8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013d6e:	68fb      	ldr	r3, [r7, #12]
 8013d70:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013d74:	b2db      	uxtb	r3, r3
 8013d76:	2b03      	cmp	r3, #3
 8013d78:	d10f      	bne.n	8013d9a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8013d7a:	68fb      	ldr	r3, [r7, #12]
 8013d7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013d80:	68db      	ldr	r3, [r3, #12]
 8013d82:	2b00      	cmp	r3, #0
 8013d84:	d009      	beq.n	8013d9a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8013d86:	68fb      	ldr	r3, [r7, #12]
 8013d88:	2200      	movs	r2, #0
 8013d8a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8013d8e:	68fb      	ldr	r3, [r7, #12]
 8013d90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013d94:	68db      	ldr	r3, [r3, #12]
 8013d96:	68f8      	ldr	r0, [r7, #12]
 8013d98:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8013d9a:	2180      	movs	r1, #128	@ 0x80
 8013d9c:	68f8      	ldr	r0, [r7, #12]
 8013d9e:	f005 f999 	bl	80190d4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8013da2:	68f8      	ldr	r0, [r7, #12]
 8013da4:	f001 f85f 	bl	8014e66 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8013da8:	68fb      	ldr	r3, [r7, #12]
 8013daa:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8013dae:	2b00      	cmp	r3, #0
 8013db0:	d03a      	beq.n	8013e28 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8013db2:	68f8      	ldr	r0, [r7, #12]
 8013db4:	f7ff fe42 	bl	8013a3c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8013db8:	68fb      	ldr	r3, [r7, #12]
 8013dba:	2200      	movs	r2, #0
 8013dbc:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8013dc0:	e032      	b.n	8013e28 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8013dc2:	7afb      	ldrb	r3, [r7, #11]
 8013dc4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8013dc8:	b2db      	uxtb	r3, r3
 8013dca:	4619      	mov	r1, r3
 8013dcc:	68f8      	ldr	r0, [r7, #12]
 8013dce:	f000 f8f3 	bl	8013fb8 <USBD_CoreFindEP>
 8013dd2:	4603      	mov	r3, r0
 8013dd4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8013dd6:	7dfb      	ldrb	r3, [r7, #23]
 8013dd8:	2bff      	cmp	r3, #255	@ 0xff
 8013dda:	d025      	beq.n	8013e28 <USBD_LL_DataInStage+0x15a>
 8013ddc:	7dfb      	ldrb	r3, [r7, #23]
 8013dde:	2b00      	cmp	r3, #0
 8013de0:	d122      	bne.n	8013e28 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013de2:	68fb      	ldr	r3, [r7, #12]
 8013de4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013de8:	b2db      	uxtb	r3, r3
 8013dea:	2b03      	cmp	r3, #3
 8013dec:	d11c      	bne.n	8013e28 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8013dee:	7dfa      	ldrb	r2, [r7, #23]
 8013df0:	68fb      	ldr	r3, [r7, #12]
 8013df2:	32ae      	adds	r2, #174	@ 0xae
 8013df4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013df8:	695b      	ldr	r3, [r3, #20]
 8013dfa:	2b00      	cmp	r3, #0
 8013dfc:	d014      	beq.n	8013e28 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8013dfe:	7dfa      	ldrb	r2, [r7, #23]
 8013e00:	68fb      	ldr	r3, [r7, #12]
 8013e02:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8013e06:	7dfa      	ldrb	r2, [r7, #23]
 8013e08:	68fb      	ldr	r3, [r7, #12]
 8013e0a:	32ae      	adds	r2, #174	@ 0xae
 8013e0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013e10:	695b      	ldr	r3, [r3, #20]
 8013e12:	7afa      	ldrb	r2, [r7, #11]
 8013e14:	4611      	mov	r1, r2
 8013e16:	68f8      	ldr	r0, [r7, #12]
 8013e18:	4798      	blx	r3
 8013e1a:	4603      	mov	r3, r0
 8013e1c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8013e1e:	7dbb      	ldrb	r3, [r7, #22]
 8013e20:	2b00      	cmp	r3, #0
 8013e22:	d001      	beq.n	8013e28 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8013e24:	7dbb      	ldrb	r3, [r7, #22]
 8013e26:	e000      	b.n	8013e2a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8013e28:	2300      	movs	r3, #0
}
 8013e2a:	4618      	mov	r0, r3
 8013e2c:	3718      	adds	r7, #24
 8013e2e:	46bd      	mov	sp, r7
 8013e30:	bd80      	pop	{r7, pc}

08013e32 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8013e32:	b580      	push	{r7, lr}
 8013e34:	b084      	sub	sp, #16
 8013e36:	af00      	add	r7, sp, #0
 8013e38:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8013e3a:	2300      	movs	r3, #0
 8013e3c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8013e3e:	687b      	ldr	r3, [r7, #4]
 8013e40:	2201      	movs	r2, #1
 8013e42:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8013e46:	687b      	ldr	r3, [r7, #4]
 8013e48:	2200      	movs	r2, #0
 8013e4a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8013e4e:	687b      	ldr	r3, [r7, #4]
 8013e50:	2200      	movs	r2, #0
 8013e52:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8013e54:	687b      	ldr	r3, [r7, #4]
 8013e56:	2200      	movs	r2, #0
 8013e58:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8013e5c:	687b      	ldr	r3, [r7, #4]
 8013e5e:	2200      	movs	r2, #0
 8013e60:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8013e64:	687b      	ldr	r3, [r7, #4]
 8013e66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013e6a:	2b00      	cmp	r3, #0
 8013e6c:	d014      	beq.n	8013e98 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8013e6e:	687b      	ldr	r3, [r7, #4]
 8013e70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013e74:	685b      	ldr	r3, [r3, #4]
 8013e76:	2b00      	cmp	r3, #0
 8013e78:	d00e      	beq.n	8013e98 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8013e7a:	687b      	ldr	r3, [r7, #4]
 8013e7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013e80:	685b      	ldr	r3, [r3, #4]
 8013e82:	687a      	ldr	r2, [r7, #4]
 8013e84:	6852      	ldr	r2, [r2, #4]
 8013e86:	b2d2      	uxtb	r2, r2
 8013e88:	4611      	mov	r1, r2
 8013e8a:	6878      	ldr	r0, [r7, #4]
 8013e8c:	4798      	blx	r3
 8013e8e:	4603      	mov	r3, r0
 8013e90:	2b00      	cmp	r3, #0
 8013e92:	d001      	beq.n	8013e98 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8013e94:	2303      	movs	r3, #3
 8013e96:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8013e98:	2340      	movs	r3, #64	@ 0x40
 8013e9a:	2200      	movs	r2, #0
 8013e9c:	2100      	movs	r1, #0
 8013e9e:	6878      	ldr	r0, [r7, #4]
 8013ea0:	f005 f8d3 	bl	801904a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8013ea4:	687b      	ldr	r3, [r7, #4]
 8013ea6:	2201      	movs	r2, #1
 8013ea8:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8013eac:	687b      	ldr	r3, [r7, #4]
 8013eae:	2240      	movs	r2, #64	@ 0x40
 8013eb0:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8013eb4:	2340      	movs	r3, #64	@ 0x40
 8013eb6:	2200      	movs	r2, #0
 8013eb8:	2180      	movs	r1, #128	@ 0x80
 8013eba:	6878      	ldr	r0, [r7, #4]
 8013ebc:	f005 f8c5 	bl	801904a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8013ec0:	687b      	ldr	r3, [r7, #4]
 8013ec2:	2201      	movs	r2, #1
 8013ec4:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8013ec6:	687b      	ldr	r3, [r7, #4]
 8013ec8:	2240      	movs	r2, #64	@ 0x40
 8013eca:	621a      	str	r2, [r3, #32]

  return ret;
 8013ecc:	7bfb      	ldrb	r3, [r7, #15]
}
 8013ece:	4618      	mov	r0, r3
 8013ed0:	3710      	adds	r7, #16
 8013ed2:	46bd      	mov	sp, r7
 8013ed4:	bd80      	pop	{r7, pc}

08013ed6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8013ed6:	b480      	push	{r7}
 8013ed8:	b083      	sub	sp, #12
 8013eda:	af00      	add	r7, sp, #0
 8013edc:	6078      	str	r0, [r7, #4]
 8013ede:	460b      	mov	r3, r1
 8013ee0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8013ee2:	687b      	ldr	r3, [r7, #4]
 8013ee4:	78fa      	ldrb	r2, [r7, #3]
 8013ee6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8013ee8:	2300      	movs	r3, #0
}
 8013eea:	4618      	mov	r0, r3
 8013eec:	370c      	adds	r7, #12
 8013eee:	46bd      	mov	sp, r7
 8013ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ef4:	4770      	bx	lr

08013ef6 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8013ef6:	b480      	push	{r7}
 8013ef8:	b083      	sub	sp, #12
 8013efa:	af00      	add	r7, sp, #0
 8013efc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8013efe:	687b      	ldr	r3, [r7, #4]
 8013f00:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013f04:	b2db      	uxtb	r3, r3
 8013f06:	2b04      	cmp	r3, #4
 8013f08:	d006      	beq.n	8013f18 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8013f0a:	687b      	ldr	r3, [r7, #4]
 8013f0c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013f10:	b2da      	uxtb	r2, r3
 8013f12:	687b      	ldr	r3, [r7, #4]
 8013f14:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8013f18:	687b      	ldr	r3, [r7, #4]
 8013f1a:	2204      	movs	r2, #4
 8013f1c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8013f20:	2300      	movs	r3, #0
}
 8013f22:	4618      	mov	r0, r3
 8013f24:	370c      	adds	r7, #12
 8013f26:	46bd      	mov	sp, r7
 8013f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f2c:	4770      	bx	lr

08013f2e <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8013f2e:	b480      	push	{r7}
 8013f30:	b083      	sub	sp, #12
 8013f32:	af00      	add	r7, sp, #0
 8013f34:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8013f36:	687b      	ldr	r3, [r7, #4]
 8013f38:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013f3c:	b2db      	uxtb	r3, r3
 8013f3e:	2b04      	cmp	r3, #4
 8013f40:	d106      	bne.n	8013f50 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8013f42:	687b      	ldr	r3, [r7, #4]
 8013f44:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8013f48:	b2da      	uxtb	r2, r3
 8013f4a:	687b      	ldr	r3, [r7, #4]
 8013f4c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8013f50:	2300      	movs	r3, #0
}
 8013f52:	4618      	mov	r0, r3
 8013f54:	370c      	adds	r7, #12
 8013f56:	46bd      	mov	sp, r7
 8013f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f5c:	4770      	bx	lr

08013f5e <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8013f5e:	b580      	push	{r7, lr}
 8013f60:	b082      	sub	sp, #8
 8013f62:	af00      	add	r7, sp, #0
 8013f64:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013f66:	687b      	ldr	r3, [r7, #4]
 8013f68:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013f6c:	b2db      	uxtb	r3, r3
 8013f6e:	2b03      	cmp	r3, #3
 8013f70:	d110      	bne.n	8013f94 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8013f72:	687b      	ldr	r3, [r7, #4]
 8013f74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013f78:	2b00      	cmp	r3, #0
 8013f7a:	d00b      	beq.n	8013f94 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8013f7c:	687b      	ldr	r3, [r7, #4]
 8013f7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013f82:	69db      	ldr	r3, [r3, #28]
 8013f84:	2b00      	cmp	r3, #0
 8013f86:	d005      	beq.n	8013f94 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8013f88:	687b      	ldr	r3, [r7, #4]
 8013f8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013f8e:	69db      	ldr	r3, [r3, #28]
 8013f90:	6878      	ldr	r0, [r7, #4]
 8013f92:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8013f94:	2300      	movs	r3, #0
}
 8013f96:	4618      	mov	r0, r3
 8013f98:	3708      	adds	r7, #8
 8013f9a:	46bd      	mov	sp, r7
 8013f9c:	bd80      	pop	{r7, pc}

08013f9e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8013f9e:	b480      	push	{r7}
 8013fa0:	b083      	sub	sp, #12
 8013fa2:	af00      	add	r7, sp, #0
 8013fa4:	6078      	str	r0, [r7, #4]
 8013fa6:	460b      	mov	r3, r1
 8013fa8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8013faa:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8013fac:	4618      	mov	r0, r3
 8013fae:	370c      	adds	r7, #12
 8013fb0:	46bd      	mov	sp, r7
 8013fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fb6:	4770      	bx	lr

08013fb8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8013fb8:	b480      	push	{r7}
 8013fba:	b083      	sub	sp, #12
 8013fbc:	af00      	add	r7, sp, #0
 8013fbe:	6078      	str	r0, [r7, #4]
 8013fc0:	460b      	mov	r3, r1
 8013fc2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8013fc4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8013fc6:	4618      	mov	r0, r3
 8013fc8:	370c      	adds	r7, #12
 8013fca:	46bd      	mov	sp, r7
 8013fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fd0:	4770      	bx	lr

08013fd2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8013fd2:	b580      	push	{r7, lr}
 8013fd4:	b086      	sub	sp, #24
 8013fd6:	af00      	add	r7, sp, #0
 8013fd8:	6078      	str	r0, [r7, #4]
 8013fda:	460b      	mov	r3, r1
 8013fdc:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8013fde:	687b      	ldr	r3, [r7, #4]
 8013fe0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8013fe2:	687b      	ldr	r3, [r7, #4]
 8013fe4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8013fe6:	2300      	movs	r3, #0
 8013fe8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8013fea:	68fb      	ldr	r3, [r7, #12]
 8013fec:	885b      	ldrh	r3, [r3, #2]
 8013fee:	b29b      	uxth	r3, r3
 8013ff0:	68fa      	ldr	r2, [r7, #12]
 8013ff2:	7812      	ldrb	r2, [r2, #0]
 8013ff4:	4293      	cmp	r3, r2
 8013ff6:	d91f      	bls.n	8014038 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8013ff8:	68fb      	ldr	r3, [r7, #12]
 8013ffa:	781b      	ldrb	r3, [r3, #0]
 8013ffc:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8013ffe:	e013      	b.n	8014028 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8014000:	f107 030a 	add.w	r3, r7, #10
 8014004:	4619      	mov	r1, r3
 8014006:	6978      	ldr	r0, [r7, #20]
 8014008:	f000 f81b 	bl	8014042 <USBD_GetNextDesc>
 801400c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 801400e:	697b      	ldr	r3, [r7, #20]
 8014010:	785b      	ldrb	r3, [r3, #1]
 8014012:	2b05      	cmp	r3, #5
 8014014:	d108      	bne.n	8014028 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8014016:	697b      	ldr	r3, [r7, #20]
 8014018:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 801401a:	693b      	ldr	r3, [r7, #16]
 801401c:	789b      	ldrb	r3, [r3, #2]
 801401e:	78fa      	ldrb	r2, [r7, #3]
 8014020:	429a      	cmp	r2, r3
 8014022:	d008      	beq.n	8014036 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8014024:	2300      	movs	r3, #0
 8014026:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8014028:	68fb      	ldr	r3, [r7, #12]
 801402a:	885b      	ldrh	r3, [r3, #2]
 801402c:	b29a      	uxth	r2, r3
 801402e:	897b      	ldrh	r3, [r7, #10]
 8014030:	429a      	cmp	r2, r3
 8014032:	d8e5      	bhi.n	8014000 <USBD_GetEpDesc+0x2e>
 8014034:	e000      	b.n	8014038 <USBD_GetEpDesc+0x66>
          break;
 8014036:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8014038:	693b      	ldr	r3, [r7, #16]
}
 801403a:	4618      	mov	r0, r3
 801403c:	3718      	adds	r7, #24
 801403e:	46bd      	mov	sp, r7
 8014040:	bd80      	pop	{r7, pc}

08014042 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8014042:	b480      	push	{r7}
 8014044:	b085      	sub	sp, #20
 8014046:	af00      	add	r7, sp, #0
 8014048:	6078      	str	r0, [r7, #4]
 801404a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 801404c:	687b      	ldr	r3, [r7, #4]
 801404e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8014050:	683b      	ldr	r3, [r7, #0]
 8014052:	881b      	ldrh	r3, [r3, #0]
 8014054:	68fa      	ldr	r2, [r7, #12]
 8014056:	7812      	ldrb	r2, [r2, #0]
 8014058:	4413      	add	r3, r2
 801405a:	b29a      	uxth	r2, r3
 801405c:	683b      	ldr	r3, [r7, #0]
 801405e:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8014060:	68fb      	ldr	r3, [r7, #12]
 8014062:	781b      	ldrb	r3, [r3, #0]
 8014064:	461a      	mov	r2, r3
 8014066:	687b      	ldr	r3, [r7, #4]
 8014068:	4413      	add	r3, r2
 801406a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 801406c:	68fb      	ldr	r3, [r7, #12]
}
 801406e:	4618      	mov	r0, r3
 8014070:	3714      	adds	r7, #20
 8014072:	46bd      	mov	sp, r7
 8014074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014078:	4770      	bx	lr

0801407a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 801407a:	b480      	push	{r7}
 801407c:	b087      	sub	sp, #28
 801407e:	af00      	add	r7, sp, #0
 8014080:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8014082:	687b      	ldr	r3, [r7, #4]
 8014084:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8014086:	697b      	ldr	r3, [r7, #20]
 8014088:	781b      	ldrb	r3, [r3, #0]
 801408a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 801408c:	697b      	ldr	r3, [r7, #20]
 801408e:	3301      	adds	r3, #1
 8014090:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8014092:	697b      	ldr	r3, [r7, #20]
 8014094:	781b      	ldrb	r3, [r3, #0]
 8014096:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8014098:	8a3b      	ldrh	r3, [r7, #16]
 801409a:	021b      	lsls	r3, r3, #8
 801409c:	b21a      	sxth	r2, r3
 801409e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80140a2:	4313      	orrs	r3, r2
 80140a4:	b21b      	sxth	r3, r3
 80140a6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80140a8:	89fb      	ldrh	r3, [r7, #14]
}
 80140aa:	4618      	mov	r0, r3
 80140ac:	371c      	adds	r7, #28
 80140ae:	46bd      	mov	sp, r7
 80140b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140b4:	4770      	bx	lr
	...

080140b8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80140b8:	b580      	push	{r7, lr}
 80140ba:	b084      	sub	sp, #16
 80140bc:	af00      	add	r7, sp, #0
 80140be:	6078      	str	r0, [r7, #4]
 80140c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80140c2:	2300      	movs	r3, #0
 80140c4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80140c6:	683b      	ldr	r3, [r7, #0]
 80140c8:	781b      	ldrb	r3, [r3, #0]
 80140ca:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80140ce:	2b40      	cmp	r3, #64	@ 0x40
 80140d0:	d005      	beq.n	80140de <USBD_StdDevReq+0x26>
 80140d2:	2b40      	cmp	r3, #64	@ 0x40
 80140d4:	d857      	bhi.n	8014186 <USBD_StdDevReq+0xce>
 80140d6:	2b00      	cmp	r3, #0
 80140d8:	d00f      	beq.n	80140fa <USBD_StdDevReq+0x42>
 80140da:	2b20      	cmp	r3, #32
 80140dc:	d153      	bne.n	8014186 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80140de:	687b      	ldr	r3, [r7, #4]
 80140e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80140e4:	687b      	ldr	r3, [r7, #4]
 80140e6:	32ae      	adds	r2, #174	@ 0xae
 80140e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80140ec:	689b      	ldr	r3, [r3, #8]
 80140ee:	6839      	ldr	r1, [r7, #0]
 80140f0:	6878      	ldr	r0, [r7, #4]
 80140f2:	4798      	blx	r3
 80140f4:	4603      	mov	r3, r0
 80140f6:	73fb      	strb	r3, [r7, #15]
      break;
 80140f8:	e04a      	b.n	8014190 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80140fa:	683b      	ldr	r3, [r7, #0]
 80140fc:	785b      	ldrb	r3, [r3, #1]
 80140fe:	2b09      	cmp	r3, #9
 8014100:	d83b      	bhi.n	801417a <USBD_StdDevReq+0xc2>
 8014102:	a201      	add	r2, pc, #4	@ (adr r2, 8014108 <USBD_StdDevReq+0x50>)
 8014104:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014108:	0801415d 	.word	0x0801415d
 801410c:	08014171 	.word	0x08014171
 8014110:	0801417b 	.word	0x0801417b
 8014114:	08014167 	.word	0x08014167
 8014118:	0801417b 	.word	0x0801417b
 801411c:	0801413b 	.word	0x0801413b
 8014120:	08014131 	.word	0x08014131
 8014124:	0801417b 	.word	0x0801417b
 8014128:	08014153 	.word	0x08014153
 801412c:	08014145 	.word	0x08014145
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8014130:	6839      	ldr	r1, [r7, #0]
 8014132:	6878      	ldr	r0, [r7, #4]
 8014134:	f000 fa3c 	bl	80145b0 <USBD_GetDescriptor>
          break;
 8014138:	e024      	b.n	8014184 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 801413a:	6839      	ldr	r1, [r7, #0]
 801413c:	6878      	ldr	r0, [r7, #4]
 801413e:	f000 fbcb 	bl	80148d8 <USBD_SetAddress>
          break;
 8014142:	e01f      	b.n	8014184 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8014144:	6839      	ldr	r1, [r7, #0]
 8014146:	6878      	ldr	r0, [r7, #4]
 8014148:	f000 fc0a 	bl	8014960 <USBD_SetConfig>
 801414c:	4603      	mov	r3, r0
 801414e:	73fb      	strb	r3, [r7, #15]
          break;
 8014150:	e018      	b.n	8014184 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8014152:	6839      	ldr	r1, [r7, #0]
 8014154:	6878      	ldr	r0, [r7, #4]
 8014156:	f000 fcad 	bl	8014ab4 <USBD_GetConfig>
          break;
 801415a:	e013      	b.n	8014184 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 801415c:	6839      	ldr	r1, [r7, #0]
 801415e:	6878      	ldr	r0, [r7, #4]
 8014160:	f000 fcde 	bl	8014b20 <USBD_GetStatus>
          break;
 8014164:	e00e      	b.n	8014184 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8014166:	6839      	ldr	r1, [r7, #0]
 8014168:	6878      	ldr	r0, [r7, #4]
 801416a:	f000 fd0d 	bl	8014b88 <USBD_SetFeature>
          break;
 801416e:	e009      	b.n	8014184 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8014170:	6839      	ldr	r1, [r7, #0]
 8014172:	6878      	ldr	r0, [r7, #4]
 8014174:	f000 fd31 	bl	8014bda <USBD_ClrFeature>
          break;
 8014178:	e004      	b.n	8014184 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 801417a:	6839      	ldr	r1, [r7, #0]
 801417c:	6878      	ldr	r0, [r7, #4]
 801417e:	f000 fd88 	bl	8014c92 <USBD_CtlError>
          break;
 8014182:	bf00      	nop
      }
      break;
 8014184:	e004      	b.n	8014190 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8014186:	6839      	ldr	r1, [r7, #0]
 8014188:	6878      	ldr	r0, [r7, #4]
 801418a:	f000 fd82 	bl	8014c92 <USBD_CtlError>
      break;
 801418e:	bf00      	nop
  }

  return ret;
 8014190:	7bfb      	ldrb	r3, [r7, #15]
}
 8014192:	4618      	mov	r0, r3
 8014194:	3710      	adds	r7, #16
 8014196:	46bd      	mov	sp, r7
 8014198:	bd80      	pop	{r7, pc}
 801419a:	bf00      	nop

0801419c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801419c:	b580      	push	{r7, lr}
 801419e:	b084      	sub	sp, #16
 80141a0:	af00      	add	r7, sp, #0
 80141a2:	6078      	str	r0, [r7, #4]
 80141a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80141a6:	2300      	movs	r3, #0
 80141a8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80141aa:	683b      	ldr	r3, [r7, #0]
 80141ac:	781b      	ldrb	r3, [r3, #0]
 80141ae:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80141b2:	2b40      	cmp	r3, #64	@ 0x40
 80141b4:	d005      	beq.n	80141c2 <USBD_StdItfReq+0x26>
 80141b6:	2b40      	cmp	r3, #64	@ 0x40
 80141b8:	d852      	bhi.n	8014260 <USBD_StdItfReq+0xc4>
 80141ba:	2b00      	cmp	r3, #0
 80141bc:	d001      	beq.n	80141c2 <USBD_StdItfReq+0x26>
 80141be:	2b20      	cmp	r3, #32
 80141c0:	d14e      	bne.n	8014260 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80141c2:	687b      	ldr	r3, [r7, #4]
 80141c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80141c8:	b2db      	uxtb	r3, r3
 80141ca:	3b01      	subs	r3, #1
 80141cc:	2b02      	cmp	r3, #2
 80141ce:	d840      	bhi.n	8014252 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80141d0:	683b      	ldr	r3, [r7, #0]
 80141d2:	889b      	ldrh	r3, [r3, #4]
 80141d4:	b2db      	uxtb	r3, r3
 80141d6:	2b01      	cmp	r3, #1
 80141d8:	d836      	bhi.n	8014248 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80141da:	683b      	ldr	r3, [r7, #0]
 80141dc:	889b      	ldrh	r3, [r3, #4]
 80141de:	b2db      	uxtb	r3, r3
 80141e0:	4619      	mov	r1, r3
 80141e2:	6878      	ldr	r0, [r7, #4]
 80141e4:	f7ff fedb 	bl	8013f9e <USBD_CoreFindIF>
 80141e8:	4603      	mov	r3, r0
 80141ea:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80141ec:	7bbb      	ldrb	r3, [r7, #14]
 80141ee:	2bff      	cmp	r3, #255	@ 0xff
 80141f0:	d01d      	beq.n	801422e <USBD_StdItfReq+0x92>
 80141f2:	7bbb      	ldrb	r3, [r7, #14]
 80141f4:	2b00      	cmp	r3, #0
 80141f6:	d11a      	bne.n	801422e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80141f8:	7bba      	ldrb	r2, [r7, #14]
 80141fa:	687b      	ldr	r3, [r7, #4]
 80141fc:	32ae      	adds	r2, #174	@ 0xae
 80141fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014202:	689b      	ldr	r3, [r3, #8]
 8014204:	2b00      	cmp	r3, #0
 8014206:	d00f      	beq.n	8014228 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8014208:	7bba      	ldrb	r2, [r7, #14]
 801420a:	687b      	ldr	r3, [r7, #4]
 801420c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8014210:	7bba      	ldrb	r2, [r7, #14]
 8014212:	687b      	ldr	r3, [r7, #4]
 8014214:	32ae      	adds	r2, #174	@ 0xae
 8014216:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801421a:	689b      	ldr	r3, [r3, #8]
 801421c:	6839      	ldr	r1, [r7, #0]
 801421e:	6878      	ldr	r0, [r7, #4]
 8014220:	4798      	blx	r3
 8014222:	4603      	mov	r3, r0
 8014224:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8014226:	e004      	b.n	8014232 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8014228:	2303      	movs	r3, #3
 801422a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 801422c:	e001      	b.n	8014232 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 801422e:	2303      	movs	r3, #3
 8014230:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8014232:	683b      	ldr	r3, [r7, #0]
 8014234:	88db      	ldrh	r3, [r3, #6]
 8014236:	2b00      	cmp	r3, #0
 8014238:	d110      	bne.n	801425c <USBD_StdItfReq+0xc0>
 801423a:	7bfb      	ldrb	r3, [r7, #15]
 801423c:	2b00      	cmp	r3, #0
 801423e:	d10d      	bne.n	801425c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8014240:	6878      	ldr	r0, [r7, #4]
 8014242:	f000 fdfd 	bl	8014e40 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8014246:	e009      	b.n	801425c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8014248:	6839      	ldr	r1, [r7, #0]
 801424a:	6878      	ldr	r0, [r7, #4]
 801424c:	f000 fd21 	bl	8014c92 <USBD_CtlError>
          break;
 8014250:	e004      	b.n	801425c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8014252:	6839      	ldr	r1, [r7, #0]
 8014254:	6878      	ldr	r0, [r7, #4]
 8014256:	f000 fd1c 	bl	8014c92 <USBD_CtlError>
          break;
 801425a:	e000      	b.n	801425e <USBD_StdItfReq+0xc2>
          break;
 801425c:	bf00      	nop
      }
      break;
 801425e:	e004      	b.n	801426a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8014260:	6839      	ldr	r1, [r7, #0]
 8014262:	6878      	ldr	r0, [r7, #4]
 8014264:	f000 fd15 	bl	8014c92 <USBD_CtlError>
      break;
 8014268:	bf00      	nop
  }

  return ret;
 801426a:	7bfb      	ldrb	r3, [r7, #15]
}
 801426c:	4618      	mov	r0, r3
 801426e:	3710      	adds	r7, #16
 8014270:	46bd      	mov	sp, r7
 8014272:	bd80      	pop	{r7, pc}

08014274 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014274:	b580      	push	{r7, lr}
 8014276:	b084      	sub	sp, #16
 8014278:	af00      	add	r7, sp, #0
 801427a:	6078      	str	r0, [r7, #4]
 801427c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 801427e:	2300      	movs	r3, #0
 8014280:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8014282:	683b      	ldr	r3, [r7, #0]
 8014284:	889b      	ldrh	r3, [r3, #4]
 8014286:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014288:	683b      	ldr	r3, [r7, #0]
 801428a:	781b      	ldrb	r3, [r3, #0]
 801428c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8014290:	2b40      	cmp	r3, #64	@ 0x40
 8014292:	d007      	beq.n	80142a4 <USBD_StdEPReq+0x30>
 8014294:	2b40      	cmp	r3, #64	@ 0x40
 8014296:	f200 817f 	bhi.w	8014598 <USBD_StdEPReq+0x324>
 801429a:	2b00      	cmp	r3, #0
 801429c:	d02a      	beq.n	80142f4 <USBD_StdEPReq+0x80>
 801429e:	2b20      	cmp	r3, #32
 80142a0:	f040 817a 	bne.w	8014598 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80142a4:	7bbb      	ldrb	r3, [r7, #14]
 80142a6:	4619      	mov	r1, r3
 80142a8:	6878      	ldr	r0, [r7, #4]
 80142aa:	f7ff fe85 	bl	8013fb8 <USBD_CoreFindEP>
 80142ae:	4603      	mov	r3, r0
 80142b0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80142b2:	7b7b      	ldrb	r3, [r7, #13]
 80142b4:	2bff      	cmp	r3, #255	@ 0xff
 80142b6:	f000 8174 	beq.w	80145a2 <USBD_StdEPReq+0x32e>
 80142ba:	7b7b      	ldrb	r3, [r7, #13]
 80142bc:	2b00      	cmp	r3, #0
 80142be:	f040 8170 	bne.w	80145a2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80142c2:	7b7a      	ldrb	r2, [r7, #13]
 80142c4:	687b      	ldr	r3, [r7, #4]
 80142c6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80142ca:	7b7a      	ldrb	r2, [r7, #13]
 80142cc:	687b      	ldr	r3, [r7, #4]
 80142ce:	32ae      	adds	r2, #174	@ 0xae
 80142d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80142d4:	689b      	ldr	r3, [r3, #8]
 80142d6:	2b00      	cmp	r3, #0
 80142d8:	f000 8163 	beq.w	80145a2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80142dc:	7b7a      	ldrb	r2, [r7, #13]
 80142de:	687b      	ldr	r3, [r7, #4]
 80142e0:	32ae      	adds	r2, #174	@ 0xae
 80142e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80142e6:	689b      	ldr	r3, [r3, #8]
 80142e8:	6839      	ldr	r1, [r7, #0]
 80142ea:	6878      	ldr	r0, [r7, #4]
 80142ec:	4798      	blx	r3
 80142ee:	4603      	mov	r3, r0
 80142f0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80142f2:	e156      	b.n	80145a2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80142f4:	683b      	ldr	r3, [r7, #0]
 80142f6:	785b      	ldrb	r3, [r3, #1]
 80142f8:	2b03      	cmp	r3, #3
 80142fa:	d008      	beq.n	801430e <USBD_StdEPReq+0x9a>
 80142fc:	2b03      	cmp	r3, #3
 80142fe:	f300 8145 	bgt.w	801458c <USBD_StdEPReq+0x318>
 8014302:	2b00      	cmp	r3, #0
 8014304:	f000 809b 	beq.w	801443e <USBD_StdEPReq+0x1ca>
 8014308:	2b01      	cmp	r3, #1
 801430a:	d03c      	beq.n	8014386 <USBD_StdEPReq+0x112>
 801430c:	e13e      	b.n	801458c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 801430e:	687b      	ldr	r3, [r7, #4]
 8014310:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014314:	b2db      	uxtb	r3, r3
 8014316:	2b02      	cmp	r3, #2
 8014318:	d002      	beq.n	8014320 <USBD_StdEPReq+0xac>
 801431a:	2b03      	cmp	r3, #3
 801431c:	d016      	beq.n	801434c <USBD_StdEPReq+0xd8>
 801431e:	e02c      	b.n	801437a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8014320:	7bbb      	ldrb	r3, [r7, #14]
 8014322:	2b00      	cmp	r3, #0
 8014324:	d00d      	beq.n	8014342 <USBD_StdEPReq+0xce>
 8014326:	7bbb      	ldrb	r3, [r7, #14]
 8014328:	2b80      	cmp	r3, #128	@ 0x80
 801432a:	d00a      	beq.n	8014342 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 801432c:	7bbb      	ldrb	r3, [r7, #14]
 801432e:	4619      	mov	r1, r3
 8014330:	6878      	ldr	r0, [r7, #4]
 8014332:	f004 fecf 	bl	80190d4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8014336:	2180      	movs	r1, #128	@ 0x80
 8014338:	6878      	ldr	r0, [r7, #4]
 801433a:	f004 fecb 	bl	80190d4 <USBD_LL_StallEP>
 801433e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8014340:	e020      	b.n	8014384 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8014342:	6839      	ldr	r1, [r7, #0]
 8014344:	6878      	ldr	r0, [r7, #4]
 8014346:	f000 fca4 	bl	8014c92 <USBD_CtlError>
              break;
 801434a:	e01b      	b.n	8014384 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801434c:	683b      	ldr	r3, [r7, #0]
 801434e:	885b      	ldrh	r3, [r3, #2]
 8014350:	2b00      	cmp	r3, #0
 8014352:	d10e      	bne.n	8014372 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8014354:	7bbb      	ldrb	r3, [r7, #14]
 8014356:	2b00      	cmp	r3, #0
 8014358:	d00b      	beq.n	8014372 <USBD_StdEPReq+0xfe>
 801435a:	7bbb      	ldrb	r3, [r7, #14]
 801435c:	2b80      	cmp	r3, #128	@ 0x80
 801435e:	d008      	beq.n	8014372 <USBD_StdEPReq+0xfe>
 8014360:	683b      	ldr	r3, [r7, #0]
 8014362:	88db      	ldrh	r3, [r3, #6]
 8014364:	2b00      	cmp	r3, #0
 8014366:	d104      	bne.n	8014372 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8014368:	7bbb      	ldrb	r3, [r7, #14]
 801436a:	4619      	mov	r1, r3
 801436c:	6878      	ldr	r0, [r7, #4]
 801436e:	f004 feb1 	bl	80190d4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8014372:	6878      	ldr	r0, [r7, #4]
 8014374:	f000 fd64 	bl	8014e40 <USBD_CtlSendStatus>

              break;
 8014378:	e004      	b.n	8014384 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 801437a:	6839      	ldr	r1, [r7, #0]
 801437c:	6878      	ldr	r0, [r7, #4]
 801437e:	f000 fc88 	bl	8014c92 <USBD_CtlError>
              break;
 8014382:	bf00      	nop
          }
          break;
 8014384:	e107      	b.n	8014596 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8014386:	687b      	ldr	r3, [r7, #4]
 8014388:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801438c:	b2db      	uxtb	r3, r3
 801438e:	2b02      	cmp	r3, #2
 8014390:	d002      	beq.n	8014398 <USBD_StdEPReq+0x124>
 8014392:	2b03      	cmp	r3, #3
 8014394:	d016      	beq.n	80143c4 <USBD_StdEPReq+0x150>
 8014396:	e04b      	b.n	8014430 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8014398:	7bbb      	ldrb	r3, [r7, #14]
 801439a:	2b00      	cmp	r3, #0
 801439c:	d00d      	beq.n	80143ba <USBD_StdEPReq+0x146>
 801439e:	7bbb      	ldrb	r3, [r7, #14]
 80143a0:	2b80      	cmp	r3, #128	@ 0x80
 80143a2:	d00a      	beq.n	80143ba <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80143a4:	7bbb      	ldrb	r3, [r7, #14]
 80143a6:	4619      	mov	r1, r3
 80143a8:	6878      	ldr	r0, [r7, #4]
 80143aa:	f004 fe93 	bl	80190d4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80143ae:	2180      	movs	r1, #128	@ 0x80
 80143b0:	6878      	ldr	r0, [r7, #4]
 80143b2:	f004 fe8f 	bl	80190d4 <USBD_LL_StallEP>
 80143b6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80143b8:	e040      	b.n	801443c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80143ba:	6839      	ldr	r1, [r7, #0]
 80143bc:	6878      	ldr	r0, [r7, #4]
 80143be:	f000 fc68 	bl	8014c92 <USBD_CtlError>
              break;
 80143c2:	e03b      	b.n	801443c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80143c4:	683b      	ldr	r3, [r7, #0]
 80143c6:	885b      	ldrh	r3, [r3, #2]
 80143c8:	2b00      	cmp	r3, #0
 80143ca:	d136      	bne.n	801443a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80143cc:	7bbb      	ldrb	r3, [r7, #14]
 80143ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80143d2:	2b00      	cmp	r3, #0
 80143d4:	d004      	beq.n	80143e0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80143d6:	7bbb      	ldrb	r3, [r7, #14]
 80143d8:	4619      	mov	r1, r3
 80143da:	6878      	ldr	r0, [r7, #4]
 80143dc:	f004 fe99 	bl	8019112 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80143e0:	6878      	ldr	r0, [r7, #4]
 80143e2:	f000 fd2d 	bl	8014e40 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80143e6:	7bbb      	ldrb	r3, [r7, #14]
 80143e8:	4619      	mov	r1, r3
 80143ea:	6878      	ldr	r0, [r7, #4]
 80143ec:	f7ff fde4 	bl	8013fb8 <USBD_CoreFindEP>
 80143f0:	4603      	mov	r3, r0
 80143f2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80143f4:	7b7b      	ldrb	r3, [r7, #13]
 80143f6:	2bff      	cmp	r3, #255	@ 0xff
 80143f8:	d01f      	beq.n	801443a <USBD_StdEPReq+0x1c6>
 80143fa:	7b7b      	ldrb	r3, [r7, #13]
 80143fc:	2b00      	cmp	r3, #0
 80143fe:	d11c      	bne.n	801443a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8014400:	7b7a      	ldrb	r2, [r7, #13]
 8014402:	687b      	ldr	r3, [r7, #4]
 8014404:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8014408:	7b7a      	ldrb	r2, [r7, #13]
 801440a:	687b      	ldr	r3, [r7, #4]
 801440c:	32ae      	adds	r2, #174	@ 0xae
 801440e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014412:	689b      	ldr	r3, [r3, #8]
 8014414:	2b00      	cmp	r3, #0
 8014416:	d010      	beq.n	801443a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8014418:	7b7a      	ldrb	r2, [r7, #13]
 801441a:	687b      	ldr	r3, [r7, #4]
 801441c:	32ae      	adds	r2, #174	@ 0xae
 801441e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014422:	689b      	ldr	r3, [r3, #8]
 8014424:	6839      	ldr	r1, [r7, #0]
 8014426:	6878      	ldr	r0, [r7, #4]
 8014428:	4798      	blx	r3
 801442a:	4603      	mov	r3, r0
 801442c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 801442e:	e004      	b.n	801443a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8014430:	6839      	ldr	r1, [r7, #0]
 8014432:	6878      	ldr	r0, [r7, #4]
 8014434:	f000 fc2d 	bl	8014c92 <USBD_CtlError>
              break;
 8014438:	e000      	b.n	801443c <USBD_StdEPReq+0x1c8>
              break;
 801443a:	bf00      	nop
          }
          break;
 801443c:	e0ab      	b.n	8014596 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 801443e:	687b      	ldr	r3, [r7, #4]
 8014440:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014444:	b2db      	uxtb	r3, r3
 8014446:	2b02      	cmp	r3, #2
 8014448:	d002      	beq.n	8014450 <USBD_StdEPReq+0x1dc>
 801444a:	2b03      	cmp	r3, #3
 801444c:	d032      	beq.n	80144b4 <USBD_StdEPReq+0x240>
 801444e:	e097      	b.n	8014580 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8014450:	7bbb      	ldrb	r3, [r7, #14]
 8014452:	2b00      	cmp	r3, #0
 8014454:	d007      	beq.n	8014466 <USBD_StdEPReq+0x1f2>
 8014456:	7bbb      	ldrb	r3, [r7, #14]
 8014458:	2b80      	cmp	r3, #128	@ 0x80
 801445a:	d004      	beq.n	8014466 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 801445c:	6839      	ldr	r1, [r7, #0]
 801445e:	6878      	ldr	r0, [r7, #4]
 8014460:	f000 fc17 	bl	8014c92 <USBD_CtlError>
                break;
 8014464:	e091      	b.n	801458a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014466:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801446a:	2b00      	cmp	r3, #0
 801446c:	da0b      	bge.n	8014486 <USBD_StdEPReq+0x212>
 801446e:	7bbb      	ldrb	r3, [r7, #14]
 8014470:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8014474:	4613      	mov	r3, r2
 8014476:	009b      	lsls	r3, r3, #2
 8014478:	4413      	add	r3, r2
 801447a:	009b      	lsls	r3, r3, #2
 801447c:	3310      	adds	r3, #16
 801447e:	687a      	ldr	r2, [r7, #4]
 8014480:	4413      	add	r3, r2
 8014482:	3304      	adds	r3, #4
 8014484:	e00b      	b.n	801449e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8014486:	7bbb      	ldrb	r3, [r7, #14]
 8014488:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801448c:	4613      	mov	r3, r2
 801448e:	009b      	lsls	r3, r3, #2
 8014490:	4413      	add	r3, r2
 8014492:	009b      	lsls	r3, r3, #2
 8014494:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8014498:	687a      	ldr	r2, [r7, #4]
 801449a:	4413      	add	r3, r2
 801449c:	3304      	adds	r3, #4
 801449e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80144a0:	68bb      	ldr	r3, [r7, #8]
 80144a2:	2200      	movs	r2, #0
 80144a4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80144a6:	68bb      	ldr	r3, [r7, #8]
 80144a8:	2202      	movs	r2, #2
 80144aa:	4619      	mov	r1, r3
 80144ac:	6878      	ldr	r0, [r7, #4]
 80144ae:	f000 fc6d 	bl	8014d8c <USBD_CtlSendData>
              break;
 80144b2:	e06a      	b.n	801458a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80144b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80144b8:	2b00      	cmp	r3, #0
 80144ba:	da11      	bge.n	80144e0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80144bc:	7bbb      	ldrb	r3, [r7, #14]
 80144be:	f003 020f 	and.w	r2, r3, #15
 80144c2:	6879      	ldr	r1, [r7, #4]
 80144c4:	4613      	mov	r3, r2
 80144c6:	009b      	lsls	r3, r3, #2
 80144c8:	4413      	add	r3, r2
 80144ca:	009b      	lsls	r3, r3, #2
 80144cc:	440b      	add	r3, r1
 80144ce:	3324      	adds	r3, #36	@ 0x24
 80144d0:	881b      	ldrh	r3, [r3, #0]
 80144d2:	2b00      	cmp	r3, #0
 80144d4:	d117      	bne.n	8014506 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80144d6:	6839      	ldr	r1, [r7, #0]
 80144d8:	6878      	ldr	r0, [r7, #4]
 80144da:	f000 fbda 	bl	8014c92 <USBD_CtlError>
                  break;
 80144de:	e054      	b.n	801458a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80144e0:	7bbb      	ldrb	r3, [r7, #14]
 80144e2:	f003 020f 	and.w	r2, r3, #15
 80144e6:	6879      	ldr	r1, [r7, #4]
 80144e8:	4613      	mov	r3, r2
 80144ea:	009b      	lsls	r3, r3, #2
 80144ec:	4413      	add	r3, r2
 80144ee:	009b      	lsls	r3, r3, #2
 80144f0:	440b      	add	r3, r1
 80144f2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80144f6:	881b      	ldrh	r3, [r3, #0]
 80144f8:	2b00      	cmp	r3, #0
 80144fa:	d104      	bne.n	8014506 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80144fc:	6839      	ldr	r1, [r7, #0]
 80144fe:	6878      	ldr	r0, [r7, #4]
 8014500:	f000 fbc7 	bl	8014c92 <USBD_CtlError>
                  break;
 8014504:	e041      	b.n	801458a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014506:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801450a:	2b00      	cmp	r3, #0
 801450c:	da0b      	bge.n	8014526 <USBD_StdEPReq+0x2b2>
 801450e:	7bbb      	ldrb	r3, [r7, #14]
 8014510:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8014514:	4613      	mov	r3, r2
 8014516:	009b      	lsls	r3, r3, #2
 8014518:	4413      	add	r3, r2
 801451a:	009b      	lsls	r3, r3, #2
 801451c:	3310      	adds	r3, #16
 801451e:	687a      	ldr	r2, [r7, #4]
 8014520:	4413      	add	r3, r2
 8014522:	3304      	adds	r3, #4
 8014524:	e00b      	b.n	801453e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8014526:	7bbb      	ldrb	r3, [r7, #14]
 8014528:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801452c:	4613      	mov	r3, r2
 801452e:	009b      	lsls	r3, r3, #2
 8014530:	4413      	add	r3, r2
 8014532:	009b      	lsls	r3, r3, #2
 8014534:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8014538:	687a      	ldr	r2, [r7, #4]
 801453a:	4413      	add	r3, r2
 801453c:	3304      	adds	r3, #4
 801453e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8014540:	7bbb      	ldrb	r3, [r7, #14]
 8014542:	2b00      	cmp	r3, #0
 8014544:	d002      	beq.n	801454c <USBD_StdEPReq+0x2d8>
 8014546:	7bbb      	ldrb	r3, [r7, #14]
 8014548:	2b80      	cmp	r3, #128	@ 0x80
 801454a:	d103      	bne.n	8014554 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 801454c:	68bb      	ldr	r3, [r7, #8]
 801454e:	2200      	movs	r2, #0
 8014550:	601a      	str	r2, [r3, #0]
 8014552:	e00e      	b.n	8014572 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8014554:	7bbb      	ldrb	r3, [r7, #14]
 8014556:	4619      	mov	r1, r3
 8014558:	6878      	ldr	r0, [r7, #4]
 801455a:	f004 fdf9 	bl	8019150 <USBD_LL_IsStallEP>
 801455e:	4603      	mov	r3, r0
 8014560:	2b00      	cmp	r3, #0
 8014562:	d003      	beq.n	801456c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8014564:	68bb      	ldr	r3, [r7, #8]
 8014566:	2201      	movs	r2, #1
 8014568:	601a      	str	r2, [r3, #0]
 801456a:	e002      	b.n	8014572 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 801456c:	68bb      	ldr	r3, [r7, #8]
 801456e:	2200      	movs	r2, #0
 8014570:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8014572:	68bb      	ldr	r3, [r7, #8]
 8014574:	2202      	movs	r2, #2
 8014576:	4619      	mov	r1, r3
 8014578:	6878      	ldr	r0, [r7, #4]
 801457a:	f000 fc07 	bl	8014d8c <USBD_CtlSendData>
              break;
 801457e:	e004      	b.n	801458a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8014580:	6839      	ldr	r1, [r7, #0]
 8014582:	6878      	ldr	r0, [r7, #4]
 8014584:	f000 fb85 	bl	8014c92 <USBD_CtlError>
              break;
 8014588:	bf00      	nop
          }
          break;
 801458a:	e004      	b.n	8014596 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 801458c:	6839      	ldr	r1, [r7, #0]
 801458e:	6878      	ldr	r0, [r7, #4]
 8014590:	f000 fb7f 	bl	8014c92 <USBD_CtlError>
          break;
 8014594:	bf00      	nop
      }
      break;
 8014596:	e005      	b.n	80145a4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8014598:	6839      	ldr	r1, [r7, #0]
 801459a:	6878      	ldr	r0, [r7, #4]
 801459c:	f000 fb79 	bl	8014c92 <USBD_CtlError>
      break;
 80145a0:	e000      	b.n	80145a4 <USBD_StdEPReq+0x330>
      break;
 80145a2:	bf00      	nop
  }

  return ret;
 80145a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80145a6:	4618      	mov	r0, r3
 80145a8:	3710      	adds	r7, #16
 80145aa:	46bd      	mov	sp, r7
 80145ac:	bd80      	pop	{r7, pc}
	...

080145b0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80145b0:	b580      	push	{r7, lr}
 80145b2:	b084      	sub	sp, #16
 80145b4:	af00      	add	r7, sp, #0
 80145b6:	6078      	str	r0, [r7, #4]
 80145b8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80145ba:	2300      	movs	r3, #0
 80145bc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80145be:	2300      	movs	r3, #0
 80145c0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80145c2:	2300      	movs	r3, #0
 80145c4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80145c6:	683b      	ldr	r3, [r7, #0]
 80145c8:	885b      	ldrh	r3, [r3, #2]
 80145ca:	0a1b      	lsrs	r3, r3, #8
 80145cc:	b29b      	uxth	r3, r3
 80145ce:	3b01      	subs	r3, #1
 80145d0:	2b0e      	cmp	r3, #14
 80145d2:	f200 8152 	bhi.w	801487a <USBD_GetDescriptor+0x2ca>
 80145d6:	a201      	add	r2, pc, #4	@ (adr r2, 80145dc <USBD_GetDescriptor+0x2c>)
 80145d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80145dc:	0801464d 	.word	0x0801464d
 80145e0:	08014665 	.word	0x08014665
 80145e4:	080146a5 	.word	0x080146a5
 80145e8:	0801487b 	.word	0x0801487b
 80145ec:	0801487b 	.word	0x0801487b
 80145f0:	0801481b 	.word	0x0801481b
 80145f4:	08014847 	.word	0x08014847
 80145f8:	0801487b 	.word	0x0801487b
 80145fc:	0801487b 	.word	0x0801487b
 8014600:	0801487b 	.word	0x0801487b
 8014604:	0801487b 	.word	0x0801487b
 8014608:	0801487b 	.word	0x0801487b
 801460c:	0801487b 	.word	0x0801487b
 8014610:	0801487b 	.word	0x0801487b
 8014614:	08014619 	.word	0x08014619
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8014618:	687b      	ldr	r3, [r7, #4]
 801461a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801461e:	69db      	ldr	r3, [r3, #28]
 8014620:	2b00      	cmp	r3, #0
 8014622:	d00b      	beq.n	801463c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8014624:	687b      	ldr	r3, [r7, #4]
 8014626:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801462a:	69db      	ldr	r3, [r3, #28]
 801462c:	687a      	ldr	r2, [r7, #4]
 801462e:	7c12      	ldrb	r2, [r2, #16]
 8014630:	f107 0108 	add.w	r1, r7, #8
 8014634:	4610      	mov	r0, r2
 8014636:	4798      	blx	r3
 8014638:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801463a:	e126      	b.n	801488a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 801463c:	6839      	ldr	r1, [r7, #0]
 801463e:	6878      	ldr	r0, [r7, #4]
 8014640:	f000 fb27 	bl	8014c92 <USBD_CtlError>
        err++;
 8014644:	7afb      	ldrb	r3, [r7, #11]
 8014646:	3301      	adds	r3, #1
 8014648:	72fb      	strb	r3, [r7, #11]
      break;
 801464a:	e11e      	b.n	801488a <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 801464c:	687b      	ldr	r3, [r7, #4]
 801464e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8014652:	681b      	ldr	r3, [r3, #0]
 8014654:	687a      	ldr	r2, [r7, #4]
 8014656:	7c12      	ldrb	r2, [r2, #16]
 8014658:	f107 0108 	add.w	r1, r7, #8
 801465c:	4610      	mov	r0, r2
 801465e:	4798      	blx	r3
 8014660:	60f8      	str	r0, [r7, #12]
      break;
 8014662:	e112      	b.n	801488a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014664:	687b      	ldr	r3, [r7, #4]
 8014666:	7c1b      	ldrb	r3, [r3, #16]
 8014668:	2b00      	cmp	r3, #0
 801466a:	d10d      	bne.n	8014688 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 801466c:	687b      	ldr	r3, [r7, #4]
 801466e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8014672:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014674:	f107 0208 	add.w	r2, r7, #8
 8014678:	4610      	mov	r0, r2
 801467a:	4798      	blx	r3
 801467c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801467e:	68fb      	ldr	r3, [r7, #12]
 8014680:	3301      	adds	r3, #1
 8014682:	2202      	movs	r2, #2
 8014684:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8014686:	e100      	b.n	801488a <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8014688:	687b      	ldr	r3, [r7, #4]
 801468a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801468e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014690:	f107 0208 	add.w	r2, r7, #8
 8014694:	4610      	mov	r0, r2
 8014696:	4798      	blx	r3
 8014698:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801469a:	68fb      	ldr	r3, [r7, #12]
 801469c:	3301      	adds	r3, #1
 801469e:	2202      	movs	r2, #2
 80146a0:	701a      	strb	r2, [r3, #0]
      break;
 80146a2:	e0f2      	b.n	801488a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80146a4:	683b      	ldr	r3, [r7, #0]
 80146a6:	885b      	ldrh	r3, [r3, #2]
 80146a8:	b2db      	uxtb	r3, r3
 80146aa:	2b05      	cmp	r3, #5
 80146ac:	f200 80ac 	bhi.w	8014808 <USBD_GetDescriptor+0x258>
 80146b0:	a201      	add	r2, pc, #4	@ (adr r2, 80146b8 <USBD_GetDescriptor+0x108>)
 80146b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80146b6:	bf00      	nop
 80146b8:	080146d1 	.word	0x080146d1
 80146bc:	08014705 	.word	0x08014705
 80146c0:	08014739 	.word	0x08014739
 80146c4:	0801476d 	.word	0x0801476d
 80146c8:	080147a1 	.word	0x080147a1
 80146cc:	080147d5 	.word	0x080147d5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80146d0:	687b      	ldr	r3, [r7, #4]
 80146d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80146d6:	685b      	ldr	r3, [r3, #4]
 80146d8:	2b00      	cmp	r3, #0
 80146da:	d00b      	beq.n	80146f4 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80146dc:	687b      	ldr	r3, [r7, #4]
 80146de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80146e2:	685b      	ldr	r3, [r3, #4]
 80146e4:	687a      	ldr	r2, [r7, #4]
 80146e6:	7c12      	ldrb	r2, [r2, #16]
 80146e8:	f107 0108 	add.w	r1, r7, #8
 80146ec:	4610      	mov	r0, r2
 80146ee:	4798      	blx	r3
 80146f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80146f2:	e091      	b.n	8014818 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80146f4:	6839      	ldr	r1, [r7, #0]
 80146f6:	6878      	ldr	r0, [r7, #4]
 80146f8:	f000 facb 	bl	8014c92 <USBD_CtlError>
            err++;
 80146fc:	7afb      	ldrb	r3, [r7, #11]
 80146fe:	3301      	adds	r3, #1
 8014700:	72fb      	strb	r3, [r7, #11]
          break;
 8014702:	e089      	b.n	8014818 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8014704:	687b      	ldr	r3, [r7, #4]
 8014706:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801470a:	689b      	ldr	r3, [r3, #8]
 801470c:	2b00      	cmp	r3, #0
 801470e:	d00b      	beq.n	8014728 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8014710:	687b      	ldr	r3, [r7, #4]
 8014712:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8014716:	689b      	ldr	r3, [r3, #8]
 8014718:	687a      	ldr	r2, [r7, #4]
 801471a:	7c12      	ldrb	r2, [r2, #16]
 801471c:	f107 0108 	add.w	r1, r7, #8
 8014720:	4610      	mov	r0, r2
 8014722:	4798      	blx	r3
 8014724:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014726:	e077      	b.n	8014818 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8014728:	6839      	ldr	r1, [r7, #0]
 801472a:	6878      	ldr	r0, [r7, #4]
 801472c:	f000 fab1 	bl	8014c92 <USBD_CtlError>
            err++;
 8014730:	7afb      	ldrb	r3, [r7, #11]
 8014732:	3301      	adds	r3, #1
 8014734:	72fb      	strb	r3, [r7, #11]
          break;
 8014736:	e06f      	b.n	8014818 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8014738:	687b      	ldr	r3, [r7, #4]
 801473a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801473e:	68db      	ldr	r3, [r3, #12]
 8014740:	2b00      	cmp	r3, #0
 8014742:	d00b      	beq.n	801475c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8014744:	687b      	ldr	r3, [r7, #4]
 8014746:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801474a:	68db      	ldr	r3, [r3, #12]
 801474c:	687a      	ldr	r2, [r7, #4]
 801474e:	7c12      	ldrb	r2, [r2, #16]
 8014750:	f107 0108 	add.w	r1, r7, #8
 8014754:	4610      	mov	r0, r2
 8014756:	4798      	blx	r3
 8014758:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801475a:	e05d      	b.n	8014818 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801475c:	6839      	ldr	r1, [r7, #0]
 801475e:	6878      	ldr	r0, [r7, #4]
 8014760:	f000 fa97 	bl	8014c92 <USBD_CtlError>
            err++;
 8014764:	7afb      	ldrb	r3, [r7, #11]
 8014766:	3301      	adds	r3, #1
 8014768:	72fb      	strb	r3, [r7, #11]
          break;
 801476a:	e055      	b.n	8014818 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 801476c:	687b      	ldr	r3, [r7, #4]
 801476e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8014772:	691b      	ldr	r3, [r3, #16]
 8014774:	2b00      	cmp	r3, #0
 8014776:	d00b      	beq.n	8014790 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8014778:	687b      	ldr	r3, [r7, #4]
 801477a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801477e:	691b      	ldr	r3, [r3, #16]
 8014780:	687a      	ldr	r2, [r7, #4]
 8014782:	7c12      	ldrb	r2, [r2, #16]
 8014784:	f107 0108 	add.w	r1, r7, #8
 8014788:	4610      	mov	r0, r2
 801478a:	4798      	blx	r3
 801478c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801478e:	e043      	b.n	8014818 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8014790:	6839      	ldr	r1, [r7, #0]
 8014792:	6878      	ldr	r0, [r7, #4]
 8014794:	f000 fa7d 	bl	8014c92 <USBD_CtlError>
            err++;
 8014798:	7afb      	ldrb	r3, [r7, #11]
 801479a:	3301      	adds	r3, #1
 801479c:	72fb      	strb	r3, [r7, #11]
          break;
 801479e:	e03b      	b.n	8014818 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80147a0:	687b      	ldr	r3, [r7, #4]
 80147a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80147a6:	695b      	ldr	r3, [r3, #20]
 80147a8:	2b00      	cmp	r3, #0
 80147aa:	d00b      	beq.n	80147c4 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80147ac:	687b      	ldr	r3, [r7, #4]
 80147ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80147b2:	695b      	ldr	r3, [r3, #20]
 80147b4:	687a      	ldr	r2, [r7, #4]
 80147b6:	7c12      	ldrb	r2, [r2, #16]
 80147b8:	f107 0108 	add.w	r1, r7, #8
 80147bc:	4610      	mov	r0, r2
 80147be:	4798      	blx	r3
 80147c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80147c2:	e029      	b.n	8014818 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80147c4:	6839      	ldr	r1, [r7, #0]
 80147c6:	6878      	ldr	r0, [r7, #4]
 80147c8:	f000 fa63 	bl	8014c92 <USBD_CtlError>
            err++;
 80147cc:	7afb      	ldrb	r3, [r7, #11]
 80147ce:	3301      	adds	r3, #1
 80147d0:	72fb      	strb	r3, [r7, #11]
          break;
 80147d2:	e021      	b.n	8014818 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80147d4:	687b      	ldr	r3, [r7, #4]
 80147d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80147da:	699b      	ldr	r3, [r3, #24]
 80147dc:	2b00      	cmp	r3, #0
 80147de:	d00b      	beq.n	80147f8 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80147e0:	687b      	ldr	r3, [r7, #4]
 80147e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80147e6:	699b      	ldr	r3, [r3, #24]
 80147e8:	687a      	ldr	r2, [r7, #4]
 80147ea:	7c12      	ldrb	r2, [r2, #16]
 80147ec:	f107 0108 	add.w	r1, r7, #8
 80147f0:	4610      	mov	r0, r2
 80147f2:	4798      	blx	r3
 80147f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80147f6:	e00f      	b.n	8014818 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80147f8:	6839      	ldr	r1, [r7, #0]
 80147fa:	6878      	ldr	r0, [r7, #4]
 80147fc:	f000 fa49 	bl	8014c92 <USBD_CtlError>
            err++;
 8014800:	7afb      	ldrb	r3, [r7, #11]
 8014802:	3301      	adds	r3, #1
 8014804:	72fb      	strb	r3, [r7, #11]
          break;
 8014806:	e007      	b.n	8014818 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8014808:	6839      	ldr	r1, [r7, #0]
 801480a:	6878      	ldr	r0, [r7, #4]
 801480c:	f000 fa41 	bl	8014c92 <USBD_CtlError>
          err++;
 8014810:	7afb      	ldrb	r3, [r7, #11]
 8014812:	3301      	adds	r3, #1
 8014814:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8014816:	bf00      	nop
      }
      break;
 8014818:	e037      	b.n	801488a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801481a:	687b      	ldr	r3, [r7, #4]
 801481c:	7c1b      	ldrb	r3, [r3, #16]
 801481e:	2b00      	cmp	r3, #0
 8014820:	d109      	bne.n	8014836 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8014822:	687b      	ldr	r3, [r7, #4]
 8014824:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8014828:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801482a:	f107 0208 	add.w	r2, r7, #8
 801482e:	4610      	mov	r0, r2
 8014830:	4798      	blx	r3
 8014832:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8014834:	e029      	b.n	801488a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8014836:	6839      	ldr	r1, [r7, #0]
 8014838:	6878      	ldr	r0, [r7, #4]
 801483a:	f000 fa2a 	bl	8014c92 <USBD_CtlError>
        err++;
 801483e:	7afb      	ldrb	r3, [r7, #11]
 8014840:	3301      	adds	r3, #1
 8014842:	72fb      	strb	r3, [r7, #11]
      break;
 8014844:	e021      	b.n	801488a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014846:	687b      	ldr	r3, [r7, #4]
 8014848:	7c1b      	ldrb	r3, [r3, #16]
 801484a:	2b00      	cmp	r3, #0
 801484c:	d10d      	bne.n	801486a <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 801484e:	687b      	ldr	r3, [r7, #4]
 8014850:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8014854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014856:	f107 0208 	add.w	r2, r7, #8
 801485a:	4610      	mov	r0, r2
 801485c:	4798      	blx	r3
 801485e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8014860:	68fb      	ldr	r3, [r7, #12]
 8014862:	3301      	adds	r3, #1
 8014864:	2207      	movs	r2, #7
 8014866:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8014868:	e00f      	b.n	801488a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 801486a:	6839      	ldr	r1, [r7, #0]
 801486c:	6878      	ldr	r0, [r7, #4]
 801486e:	f000 fa10 	bl	8014c92 <USBD_CtlError>
        err++;
 8014872:	7afb      	ldrb	r3, [r7, #11]
 8014874:	3301      	adds	r3, #1
 8014876:	72fb      	strb	r3, [r7, #11]
      break;
 8014878:	e007      	b.n	801488a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 801487a:	6839      	ldr	r1, [r7, #0]
 801487c:	6878      	ldr	r0, [r7, #4]
 801487e:	f000 fa08 	bl	8014c92 <USBD_CtlError>
      err++;
 8014882:	7afb      	ldrb	r3, [r7, #11]
 8014884:	3301      	adds	r3, #1
 8014886:	72fb      	strb	r3, [r7, #11]
      break;
 8014888:	bf00      	nop
  }

  if (err != 0U)
 801488a:	7afb      	ldrb	r3, [r7, #11]
 801488c:	2b00      	cmp	r3, #0
 801488e:	d11e      	bne.n	80148ce <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8014890:	683b      	ldr	r3, [r7, #0]
 8014892:	88db      	ldrh	r3, [r3, #6]
 8014894:	2b00      	cmp	r3, #0
 8014896:	d016      	beq.n	80148c6 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8014898:	893b      	ldrh	r3, [r7, #8]
 801489a:	2b00      	cmp	r3, #0
 801489c:	d00e      	beq.n	80148bc <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 801489e:	683b      	ldr	r3, [r7, #0]
 80148a0:	88da      	ldrh	r2, [r3, #6]
 80148a2:	893b      	ldrh	r3, [r7, #8]
 80148a4:	4293      	cmp	r3, r2
 80148a6:	bf28      	it	cs
 80148a8:	4613      	movcs	r3, r2
 80148aa:	b29b      	uxth	r3, r3
 80148ac:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80148ae:	893b      	ldrh	r3, [r7, #8]
 80148b0:	461a      	mov	r2, r3
 80148b2:	68f9      	ldr	r1, [r7, #12]
 80148b4:	6878      	ldr	r0, [r7, #4]
 80148b6:	f000 fa69 	bl	8014d8c <USBD_CtlSendData>
 80148ba:	e009      	b.n	80148d0 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80148bc:	6839      	ldr	r1, [r7, #0]
 80148be:	6878      	ldr	r0, [r7, #4]
 80148c0:	f000 f9e7 	bl	8014c92 <USBD_CtlError>
 80148c4:	e004      	b.n	80148d0 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80148c6:	6878      	ldr	r0, [r7, #4]
 80148c8:	f000 faba 	bl	8014e40 <USBD_CtlSendStatus>
 80148cc:	e000      	b.n	80148d0 <USBD_GetDescriptor+0x320>
    return;
 80148ce:	bf00      	nop
  }
}
 80148d0:	3710      	adds	r7, #16
 80148d2:	46bd      	mov	sp, r7
 80148d4:	bd80      	pop	{r7, pc}
 80148d6:	bf00      	nop

080148d8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80148d8:	b580      	push	{r7, lr}
 80148da:	b084      	sub	sp, #16
 80148dc:	af00      	add	r7, sp, #0
 80148de:	6078      	str	r0, [r7, #4]
 80148e0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80148e2:	683b      	ldr	r3, [r7, #0]
 80148e4:	889b      	ldrh	r3, [r3, #4]
 80148e6:	2b00      	cmp	r3, #0
 80148e8:	d131      	bne.n	801494e <USBD_SetAddress+0x76>
 80148ea:	683b      	ldr	r3, [r7, #0]
 80148ec:	88db      	ldrh	r3, [r3, #6]
 80148ee:	2b00      	cmp	r3, #0
 80148f0:	d12d      	bne.n	801494e <USBD_SetAddress+0x76>
 80148f2:	683b      	ldr	r3, [r7, #0]
 80148f4:	885b      	ldrh	r3, [r3, #2]
 80148f6:	2b7f      	cmp	r3, #127	@ 0x7f
 80148f8:	d829      	bhi.n	801494e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80148fa:	683b      	ldr	r3, [r7, #0]
 80148fc:	885b      	ldrh	r3, [r3, #2]
 80148fe:	b2db      	uxtb	r3, r3
 8014900:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8014904:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014906:	687b      	ldr	r3, [r7, #4]
 8014908:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801490c:	b2db      	uxtb	r3, r3
 801490e:	2b03      	cmp	r3, #3
 8014910:	d104      	bne.n	801491c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8014912:	6839      	ldr	r1, [r7, #0]
 8014914:	6878      	ldr	r0, [r7, #4]
 8014916:	f000 f9bc 	bl	8014c92 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801491a:	e01d      	b.n	8014958 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 801491c:	687b      	ldr	r3, [r7, #4]
 801491e:	7bfa      	ldrb	r2, [r7, #15]
 8014920:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8014924:	7bfb      	ldrb	r3, [r7, #15]
 8014926:	4619      	mov	r1, r3
 8014928:	6878      	ldr	r0, [r7, #4]
 801492a:	f004 fc3d 	bl	80191a8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 801492e:	6878      	ldr	r0, [r7, #4]
 8014930:	f000 fa86 	bl	8014e40 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8014934:	7bfb      	ldrb	r3, [r7, #15]
 8014936:	2b00      	cmp	r3, #0
 8014938:	d004      	beq.n	8014944 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801493a:	687b      	ldr	r3, [r7, #4]
 801493c:	2202      	movs	r2, #2
 801493e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014942:	e009      	b.n	8014958 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8014944:	687b      	ldr	r3, [r7, #4]
 8014946:	2201      	movs	r2, #1
 8014948:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801494c:	e004      	b.n	8014958 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801494e:	6839      	ldr	r1, [r7, #0]
 8014950:	6878      	ldr	r0, [r7, #4]
 8014952:	f000 f99e 	bl	8014c92 <USBD_CtlError>
  }
}
 8014956:	bf00      	nop
 8014958:	bf00      	nop
 801495a:	3710      	adds	r7, #16
 801495c:	46bd      	mov	sp, r7
 801495e:	bd80      	pop	{r7, pc}

08014960 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014960:	b580      	push	{r7, lr}
 8014962:	b084      	sub	sp, #16
 8014964:	af00      	add	r7, sp, #0
 8014966:	6078      	str	r0, [r7, #4]
 8014968:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801496a:	2300      	movs	r3, #0
 801496c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801496e:	683b      	ldr	r3, [r7, #0]
 8014970:	885b      	ldrh	r3, [r3, #2]
 8014972:	b2da      	uxtb	r2, r3
 8014974:	4b4e      	ldr	r3, [pc, #312]	@ (8014ab0 <USBD_SetConfig+0x150>)
 8014976:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8014978:	4b4d      	ldr	r3, [pc, #308]	@ (8014ab0 <USBD_SetConfig+0x150>)
 801497a:	781b      	ldrb	r3, [r3, #0]
 801497c:	2b01      	cmp	r3, #1
 801497e:	d905      	bls.n	801498c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8014980:	6839      	ldr	r1, [r7, #0]
 8014982:	6878      	ldr	r0, [r7, #4]
 8014984:	f000 f985 	bl	8014c92 <USBD_CtlError>
    return USBD_FAIL;
 8014988:	2303      	movs	r3, #3
 801498a:	e08c      	b.n	8014aa6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 801498c:	687b      	ldr	r3, [r7, #4]
 801498e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014992:	b2db      	uxtb	r3, r3
 8014994:	2b02      	cmp	r3, #2
 8014996:	d002      	beq.n	801499e <USBD_SetConfig+0x3e>
 8014998:	2b03      	cmp	r3, #3
 801499a:	d029      	beq.n	80149f0 <USBD_SetConfig+0x90>
 801499c:	e075      	b.n	8014a8a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 801499e:	4b44      	ldr	r3, [pc, #272]	@ (8014ab0 <USBD_SetConfig+0x150>)
 80149a0:	781b      	ldrb	r3, [r3, #0]
 80149a2:	2b00      	cmp	r3, #0
 80149a4:	d020      	beq.n	80149e8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80149a6:	4b42      	ldr	r3, [pc, #264]	@ (8014ab0 <USBD_SetConfig+0x150>)
 80149a8:	781b      	ldrb	r3, [r3, #0]
 80149aa:	461a      	mov	r2, r3
 80149ac:	687b      	ldr	r3, [r7, #4]
 80149ae:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80149b0:	4b3f      	ldr	r3, [pc, #252]	@ (8014ab0 <USBD_SetConfig+0x150>)
 80149b2:	781b      	ldrb	r3, [r3, #0]
 80149b4:	4619      	mov	r1, r3
 80149b6:	6878      	ldr	r0, [r7, #4]
 80149b8:	f7ff f84b 	bl	8013a52 <USBD_SetClassConfig>
 80149bc:	4603      	mov	r3, r0
 80149be:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80149c0:	7bfb      	ldrb	r3, [r7, #15]
 80149c2:	2b00      	cmp	r3, #0
 80149c4:	d008      	beq.n	80149d8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80149c6:	6839      	ldr	r1, [r7, #0]
 80149c8:	6878      	ldr	r0, [r7, #4]
 80149ca:	f000 f962 	bl	8014c92 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80149ce:	687b      	ldr	r3, [r7, #4]
 80149d0:	2202      	movs	r2, #2
 80149d2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80149d6:	e065      	b.n	8014aa4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80149d8:	6878      	ldr	r0, [r7, #4]
 80149da:	f000 fa31 	bl	8014e40 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80149de:	687b      	ldr	r3, [r7, #4]
 80149e0:	2203      	movs	r2, #3
 80149e2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80149e6:	e05d      	b.n	8014aa4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80149e8:	6878      	ldr	r0, [r7, #4]
 80149ea:	f000 fa29 	bl	8014e40 <USBD_CtlSendStatus>
      break;
 80149ee:	e059      	b.n	8014aa4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80149f0:	4b2f      	ldr	r3, [pc, #188]	@ (8014ab0 <USBD_SetConfig+0x150>)
 80149f2:	781b      	ldrb	r3, [r3, #0]
 80149f4:	2b00      	cmp	r3, #0
 80149f6:	d112      	bne.n	8014a1e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80149f8:	687b      	ldr	r3, [r7, #4]
 80149fa:	2202      	movs	r2, #2
 80149fc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8014a00:	4b2b      	ldr	r3, [pc, #172]	@ (8014ab0 <USBD_SetConfig+0x150>)
 8014a02:	781b      	ldrb	r3, [r3, #0]
 8014a04:	461a      	mov	r2, r3
 8014a06:	687b      	ldr	r3, [r7, #4]
 8014a08:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8014a0a:	4b29      	ldr	r3, [pc, #164]	@ (8014ab0 <USBD_SetConfig+0x150>)
 8014a0c:	781b      	ldrb	r3, [r3, #0]
 8014a0e:	4619      	mov	r1, r3
 8014a10:	6878      	ldr	r0, [r7, #4]
 8014a12:	f7ff f83a 	bl	8013a8a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8014a16:	6878      	ldr	r0, [r7, #4]
 8014a18:	f000 fa12 	bl	8014e40 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8014a1c:	e042      	b.n	8014aa4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8014a1e:	4b24      	ldr	r3, [pc, #144]	@ (8014ab0 <USBD_SetConfig+0x150>)
 8014a20:	781b      	ldrb	r3, [r3, #0]
 8014a22:	461a      	mov	r2, r3
 8014a24:	687b      	ldr	r3, [r7, #4]
 8014a26:	685b      	ldr	r3, [r3, #4]
 8014a28:	429a      	cmp	r2, r3
 8014a2a:	d02a      	beq.n	8014a82 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8014a2c:	687b      	ldr	r3, [r7, #4]
 8014a2e:	685b      	ldr	r3, [r3, #4]
 8014a30:	b2db      	uxtb	r3, r3
 8014a32:	4619      	mov	r1, r3
 8014a34:	6878      	ldr	r0, [r7, #4]
 8014a36:	f7ff f828 	bl	8013a8a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8014a3a:	4b1d      	ldr	r3, [pc, #116]	@ (8014ab0 <USBD_SetConfig+0x150>)
 8014a3c:	781b      	ldrb	r3, [r3, #0]
 8014a3e:	461a      	mov	r2, r3
 8014a40:	687b      	ldr	r3, [r7, #4]
 8014a42:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8014a44:	4b1a      	ldr	r3, [pc, #104]	@ (8014ab0 <USBD_SetConfig+0x150>)
 8014a46:	781b      	ldrb	r3, [r3, #0]
 8014a48:	4619      	mov	r1, r3
 8014a4a:	6878      	ldr	r0, [r7, #4]
 8014a4c:	f7ff f801 	bl	8013a52 <USBD_SetClassConfig>
 8014a50:	4603      	mov	r3, r0
 8014a52:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8014a54:	7bfb      	ldrb	r3, [r7, #15]
 8014a56:	2b00      	cmp	r3, #0
 8014a58:	d00f      	beq.n	8014a7a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8014a5a:	6839      	ldr	r1, [r7, #0]
 8014a5c:	6878      	ldr	r0, [r7, #4]
 8014a5e:	f000 f918 	bl	8014c92 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8014a62:	687b      	ldr	r3, [r7, #4]
 8014a64:	685b      	ldr	r3, [r3, #4]
 8014a66:	b2db      	uxtb	r3, r3
 8014a68:	4619      	mov	r1, r3
 8014a6a:	6878      	ldr	r0, [r7, #4]
 8014a6c:	f7ff f80d 	bl	8013a8a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8014a70:	687b      	ldr	r3, [r7, #4]
 8014a72:	2202      	movs	r2, #2
 8014a74:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8014a78:	e014      	b.n	8014aa4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8014a7a:	6878      	ldr	r0, [r7, #4]
 8014a7c:	f000 f9e0 	bl	8014e40 <USBD_CtlSendStatus>
      break;
 8014a80:	e010      	b.n	8014aa4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8014a82:	6878      	ldr	r0, [r7, #4]
 8014a84:	f000 f9dc 	bl	8014e40 <USBD_CtlSendStatus>
      break;
 8014a88:	e00c      	b.n	8014aa4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8014a8a:	6839      	ldr	r1, [r7, #0]
 8014a8c:	6878      	ldr	r0, [r7, #4]
 8014a8e:	f000 f900 	bl	8014c92 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8014a92:	4b07      	ldr	r3, [pc, #28]	@ (8014ab0 <USBD_SetConfig+0x150>)
 8014a94:	781b      	ldrb	r3, [r3, #0]
 8014a96:	4619      	mov	r1, r3
 8014a98:	6878      	ldr	r0, [r7, #4]
 8014a9a:	f7fe fff6 	bl	8013a8a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8014a9e:	2303      	movs	r3, #3
 8014aa0:	73fb      	strb	r3, [r7, #15]
      break;
 8014aa2:	bf00      	nop
  }

  return ret;
 8014aa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8014aa6:	4618      	mov	r0, r3
 8014aa8:	3710      	adds	r7, #16
 8014aaa:	46bd      	mov	sp, r7
 8014aac:	bd80      	pop	{r7, pc}
 8014aae:	bf00      	nop
 8014ab0:	200014c0 	.word	0x200014c0

08014ab4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014ab4:	b580      	push	{r7, lr}
 8014ab6:	b082      	sub	sp, #8
 8014ab8:	af00      	add	r7, sp, #0
 8014aba:	6078      	str	r0, [r7, #4]
 8014abc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8014abe:	683b      	ldr	r3, [r7, #0]
 8014ac0:	88db      	ldrh	r3, [r3, #6]
 8014ac2:	2b01      	cmp	r3, #1
 8014ac4:	d004      	beq.n	8014ad0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8014ac6:	6839      	ldr	r1, [r7, #0]
 8014ac8:	6878      	ldr	r0, [r7, #4]
 8014aca:	f000 f8e2 	bl	8014c92 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8014ace:	e023      	b.n	8014b18 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8014ad0:	687b      	ldr	r3, [r7, #4]
 8014ad2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014ad6:	b2db      	uxtb	r3, r3
 8014ad8:	2b02      	cmp	r3, #2
 8014ada:	dc02      	bgt.n	8014ae2 <USBD_GetConfig+0x2e>
 8014adc:	2b00      	cmp	r3, #0
 8014ade:	dc03      	bgt.n	8014ae8 <USBD_GetConfig+0x34>
 8014ae0:	e015      	b.n	8014b0e <USBD_GetConfig+0x5a>
 8014ae2:	2b03      	cmp	r3, #3
 8014ae4:	d00b      	beq.n	8014afe <USBD_GetConfig+0x4a>
 8014ae6:	e012      	b.n	8014b0e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8014ae8:	687b      	ldr	r3, [r7, #4]
 8014aea:	2200      	movs	r2, #0
 8014aec:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8014aee:	687b      	ldr	r3, [r7, #4]
 8014af0:	3308      	adds	r3, #8
 8014af2:	2201      	movs	r2, #1
 8014af4:	4619      	mov	r1, r3
 8014af6:	6878      	ldr	r0, [r7, #4]
 8014af8:	f000 f948 	bl	8014d8c <USBD_CtlSendData>
        break;
 8014afc:	e00c      	b.n	8014b18 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8014afe:	687b      	ldr	r3, [r7, #4]
 8014b00:	3304      	adds	r3, #4
 8014b02:	2201      	movs	r2, #1
 8014b04:	4619      	mov	r1, r3
 8014b06:	6878      	ldr	r0, [r7, #4]
 8014b08:	f000 f940 	bl	8014d8c <USBD_CtlSendData>
        break;
 8014b0c:	e004      	b.n	8014b18 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8014b0e:	6839      	ldr	r1, [r7, #0]
 8014b10:	6878      	ldr	r0, [r7, #4]
 8014b12:	f000 f8be 	bl	8014c92 <USBD_CtlError>
        break;
 8014b16:	bf00      	nop
}
 8014b18:	bf00      	nop
 8014b1a:	3708      	adds	r7, #8
 8014b1c:	46bd      	mov	sp, r7
 8014b1e:	bd80      	pop	{r7, pc}

08014b20 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014b20:	b580      	push	{r7, lr}
 8014b22:	b082      	sub	sp, #8
 8014b24:	af00      	add	r7, sp, #0
 8014b26:	6078      	str	r0, [r7, #4]
 8014b28:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8014b2a:	687b      	ldr	r3, [r7, #4]
 8014b2c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014b30:	b2db      	uxtb	r3, r3
 8014b32:	3b01      	subs	r3, #1
 8014b34:	2b02      	cmp	r3, #2
 8014b36:	d81e      	bhi.n	8014b76 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8014b38:	683b      	ldr	r3, [r7, #0]
 8014b3a:	88db      	ldrh	r3, [r3, #6]
 8014b3c:	2b02      	cmp	r3, #2
 8014b3e:	d004      	beq.n	8014b4a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8014b40:	6839      	ldr	r1, [r7, #0]
 8014b42:	6878      	ldr	r0, [r7, #4]
 8014b44:	f000 f8a5 	bl	8014c92 <USBD_CtlError>
        break;
 8014b48:	e01a      	b.n	8014b80 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8014b4a:	687b      	ldr	r3, [r7, #4]
 8014b4c:	2201      	movs	r2, #1
 8014b4e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8014b50:	687b      	ldr	r3, [r7, #4]
 8014b52:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8014b56:	2b00      	cmp	r3, #0
 8014b58:	d005      	beq.n	8014b66 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8014b5a:	687b      	ldr	r3, [r7, #4]
 8014b5c:	68db      	ldr	r3, [r3, #12]
 8014b5e:	f043 0202 	orr.w	r2, r3, #2
 8014b62:	687b      	ldr	r3, [r7, #4]
 8014b64:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8014b66:	687b      	ldr	r3, [r7, #4]
 8014b68:	330c      	adds	r3, #12
 8014b6a:	2202      	movs	r2, #2
 8014b6c:	4619      	mov	r1, r3
 8014b6e:	6878      	ldr	r0, [r7, #4]
 8014b70:	f000 f90c 	bl	8014d8c <USBD_CtlSendData>
      break;
 8014b74:	e004      	b.n	8014b80 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8014b76:	6839      	ldr	r1, [r7, #0]
 8014b78:	6878      	ldr	r0, [r7, #4]
 8014b7a:	f000 f88a 	bl	8014c92 <USBD_CtlError>
      break;
 8014b7e:	bf00      	nop
  }
}
 8014b80:	bf00      	nop
 8014b82:	3708      	adds	r7, #8
 8014b84:	46bd      	mov	sp, r7
 8014b86:	bd80      	pop	{r7, pc}

08014b88 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014b88:	b580      	push	{r7, lr}
 8014b8a:	b082      	sub	sp, #8
 8014b8c:	af00      	add	r7, sp, #0
 8014b8e:	6078      	str	r0, [r7, #4]
 8014b90:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8014b92:	683b      	ldr	r3, [r7, #0]
 8014b94:	885b      	ldrh	r3, [r3, #2]
 8014b96:	2b01      	cmp	r3, #1
 8014b98:	d107      	bne.n	8014baa <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8014b9a:	687b      	ldr	r3, [r7, #4]
 8014b9c:	2201      	movs	r2, #1
 8014b9e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8014ba2:	6878      	ldr	r0, [r7, #4]
 8014ba4:	f000 f94c 	bl	8014e40 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8014ba8:	e013      	b.n	8014bd2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8014baa:	683b      	ldr	r3, [r7, #0]
 8014bac:	885b      	ldrh	r3, [r3, #2]
 8014bae:	2b02      	cmp	r3, #2
 8014bb0:	d10b      	bne.n	8014bca <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8014bb2:	683b      	ldr	r3, [r7, #0]
 8014bb4:	889b      	ldrh	r3, [r3, #4]
 8014bb6:	0a1b      	lsrs	r3, r3, #8
 8014bb8:	b29b      	uxth	r3, r3
 8014bba:	b2da      	uxtb	r2, r3
 8014bbc:	687b      	ldr	r3, [r7, #4]
 8014bbe:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8014bc2:	6878      	ldr	r0, [r7, #4]
 8014bc4:	f000 f93c 	bl	8014e40 <USBD_CtlSendStatus>
}
 8014bc8:	e003      	b.n	8014bd2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8014bca:	6839      	ldr	r1, [r7, #0]
 8014bcc:	6878      	ldr	r0, [r7, #4]
 8014bce:	f000 f860 	bl	8014c92 <USBD_CtlError>
}
 8014bd2:	bf00      	nop
 8014bd4:	3708      	adds	r7, #8
 8014bd6:	46bd      	mov	sp, r7
 8014bd8:	bd80      	pop	{r7, pc}

08014bda <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014bda:	b580      	push	{r7, lr}
 8014bdc:	b082      	sub	sp, #8
 8014bde:	af00      	add	r7, sp, #0
 8014be0:	6078      	str	r0, [r7, #4]
 8014be2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8014be4:	687b      	ldr	r3, [r7, #4]
 8014be6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014bea:	b2db      	uxtb	r3, r3
 8014bec:	3b01      	subs	r3, #1
 8014bee:	2b02      	cmp	r3, #2
 8014bf0:	d80b      	bhi.n	8014c0a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8014bf2:	683b      	ldr	r3, [r7, #0]
 8014bf4:	885b      	ldrh	r3, [r3, #2]
 8014bf6:	2b01      	cmp	r3, #1
 8014bf8:	d10c      	bne.n	8014c14 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8014bfa:	687b      	ldr	r3, [r7, #4]
 8014bfc:	2200      	movs	r2, #0
 8014bfe:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8014c02:	6878      	ldr	r0, [r7, #4]
 8014c04:	f000 f91c 	bl	8014e40 <USBD_CtlSendStatus>
      }
      break;
 8014c08:	e004      	b.n	8014c14 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8014c0a:	6839      	ldr	r1, [r7, #0]
 8014c0c:	6878      	ldr	r0, [r7, #4]
 8014c0e:	f000 f840 	bl	8014c92 <USBD_CtlError>
      break;
 8014c12:	e000      	b.n	8014c16 <USBD_ClrFeature+0x3c>
      break;
 8014c14:	bf00      	nop
  }
}
 8014c16:	bf00      	nop
 8014c18:	3708      	adds	r7, #8
 8014c1a:	46bd      	mov	sp, r7
 8014c1c:	bd80      	pop	{r7, pc}

08014c1e <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8014c1e:	b580      	push	{r7, lr}
 8014c20:	b084      	sub	sp, #16
 8014c22:	af00      	add	r7, sp, #0
 8014c24:	6078      	str	r0, [r7, #4]
 8014c26:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8014c28:	683b      	ldr	r3, [r7, #0]
 8014c2a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8014c2c:	68fb      	ldr	r3, [r7, #12]
 8014c2e:	781a      	ldrb	r2, [r3, #0]
 8014c30:	687b      	ldr	r3, [r7, #4]
 8014c32:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8014c34:	68fb      	ldr	r3, [r7, #12]
 8014c36:	3301      	adds	r3, #1
 8014c38:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8014c3a:	68fb      	ldr	r3, [r7, #12]
 8014c3c:	781a      	ldrb	r2, [r3, #0]
 8014c3e:	687b      	ldr	r3, [r7, #4]
 8014c40:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8014c42:	68fb      	ldr	r3, [r7, #12]
 8014c44:	3301      	adds	r3, #1
 8014c46:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8014c48:	68f8      	ldr	r0, [r7, #12]
 8014c4a:	f7ff fa16 	bl	801407a <SWAPBYTE>
 8014c4e:	4603      	mov	r3, r0
 8014c50:	461a      	mov	r2, r3
 8014c52:	687b      	ldr	r3, [r7, #4]
 8014c54:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8014c56:	68fb      	ldr	r3, [r7, #12]
 8014c58:	3301      	adds	r3, #1
 8014c5a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8014c5c:	68fb      	ldr	r3, [r7, #12]
 8014c5e:	3301      	adds	r3, #1
 8014c60:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8014c62:	68f8      	ldr	r0, [r7, #12]
 8014c64:	f7ff fa09 	bl	801407a <SWAPBYTE>
 8014c68:	4603      	mov	r3, r0
 8014c6a:	461a      	mov	r2, r3
 8014c6c:	687b      	ldr	r3, [r7, #4]
 8014c6e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8014c70:	68fb      	ldr	r3, [r7, #12]
 8014c72:	3301      	adds	r3, #1
 8014c74:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8014c76:	68fb      	ldr	r3, [r7, #12]
 8014c78:	3301      	adds	r3, #1
 8014c7a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8014c7c:	68f8      	ldr	r0, [r7, #12]
 8014c7e:	f7ff f9fc 	bl	801407a <SWAPBYTE>
 8014c82:	4603      	mov	r3, r0
 8014c84:	461a      	mov	r2, r3
 8014c86:	687b      	ldr	r3, [r7, #4]
 8014c88:	80da      	strh	r2, [r3, #6]
}
 8014c8a:	bf00      	nop
 8014c8c:	3710      	adds	r7, #16
 8014c8e:	46bd      	mov	sp, r7
 8014c90:	bd80      	pop	{r7, pc}

08014c92 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014c92:	b580      	push	{r7, lr}
 8014c94:	b082      	sub	sp, #8
 8014c96:	af00      	add	r7, sp, #0
 8014c98:	6078      	str	r0, [r7, #4]
 8014c9a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8014c9c:	2180      	movs	r1, #128	@ 0x80
 8014c9e:	6878      	ldr	r0, [r7, #4]
 8014ca0:	f004 fa18 	bl	80190d4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8014ca4:	2100      	movs	r1, #0
 8014ca6:	6878      	ldr	r0, [r7, #4]
 8014ca8:	f004 fa14 	bl	80190d4 <USBD_LL_StallEP>
}
 8014cac:	bf00      	nop
 8014cae:	3708      	adds	r7, #8
 8014cb0:	46bd      	mov	sp, r7
 8014cb2:	bd80      	pop	{r7, pc}

08014cb4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8014cb4:	b580      	push	{r7, lr}
 8014cb6:	b086      	sub	sp, #24
 8014cb8:	af00      	add	r7, sp, #0
 8014cba:	60f8      	str	r0, [r7, #12]
 8014cbc:	60b9      	str	r1, [r7, #8]
 8014cbe:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8014cc0:	2300      	movs	r3, #0
 8014cc2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8014cc4:	68fb      	ldr	r3, [r7, #12]
 8014cc6:	2b00      	cmp	r3, #0
 8014cc8:	d042      	beq.n	8014d50 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8014cca:	68fb      	ldr	r3, [r7, #12]
 8014ccc:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8014cce:	6938      	ldr	r0, [r7, #16]
 8014cd0:	f000 f842 	bl	8014d58 <USBD_GetLen>
 8014cd4:	4603      	mov	r3, r0
 8014cd6:	3301      	adds	r3, #1
 8014cd8:	005b      	lsls	r3, r3, #1
 8014cda:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8014cde:	d808      	bhi.n	8014cf2 <USBD_GetString+0x3e>
 8014ce0:	6938      	ldr	r0, [r7, #16]
 8014ce2:	f000 f839 	bl	8014d58 <USBD_GetLen>
 8014ce6:	4603      	mov	r3, r0
 8014ce8:	3301      	adds	r3, #1
 8014cea:	b29b      	uxth	r3, r3
 8014cec:	005b      	lsls	r3, r3, #1
 8014cee:	b29a      	uxth	r2, r3
 8014cf0:	e001      	b.n	8014cf6 <USBD_GetString+0x42>
 8014cf2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8014cf6:	687b      	ldr	r3, [r7, #4]
 8014cf8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8014cfa:	7dfb      	ldrb	r3, [r7, #23]
 8014cfc:	68ba      	ldr	r2, [r7, #8]
 8014cfe:	4413      	add	r3, r2
 8014d00:	687a      	ldr	r2, [r7, #4]
 8014d02:	7812      	ldrb	r2, [r2, #0]
 8014d04:	701a      	strb	r2, [r3, #0]
  idx++;
 8014d06:	7dfb      	ldrb	r3, [r7, #23]
 8014d08:	3301      	adds	r3, #1
 8014d0a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8014d0c:	7dfb      	ldrb	r3, [r7, #23]
 8014d0e:	68ba      	ldr	r2, [r7, #8]
 8014d10:	4413      	add	r3, r2
 8014d12:	2203      	movs	r2, #3
 8014d14:	701a      	strb	r2, [r3, #0]
  idx++;
 8014d16:	7dfb      	ldrb	r3, [r7, #23]
 8014d18:	3301      	adds	r3, #1
 8014d1a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8014d1c:	e013      	b.n	8014d46 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8014d1e:	7dfb      	ldrb	r3, [r7, #23]
 8014d20:	68ba      	ldr	r2, [r7, #8]
 8014d22:	4413      	add	r3, r2
 8014d24:	693a      	ldr	r2, [r7, #16]
 8014d26:	7812      	ldrb	r2, [r2, #0]
 8014d28:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8014d2a:	693b      	ldr	r3, [r7, #16]
 8014d2c:	3301      	adds	r3, #1
 8014d2e:	613b      	str	r3, [r7, #16]
    idx++;
 8014d30:	7dfb      	ldrb	r3, [r7, #23]
 8014d32:	3301      	adds	r3, #1
 8014d34:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8014d36:	7dfb      	ldrb	r3, [r7, #23]
 8014d38:	68ba      	ldr	r2, [r7, #8]
 8014d3a:	4413      	add	r3, r2
 8014d3c:	2200      	movs	r2, #0
 8014d3e:	701a      	strb	r2, [r3, #0]
    idx++;
 8014d40:	7dfb      	ldrb	r3, [r7, #23]
 8014d42:	3301      	adds	r3, #1
 8014d44:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8014d46:	693b      	ldr	r3, [r7, #16]
 8014d48:	781b      	ldrb	r3, [r3, #0]
 8014d4a:	2b00      	cmp	r3, #0
 8014d4c:	d1e7      	bne.n	8014d1e <USBD_GetString+0x6a>
 8014d4e:	e000      	b.n	8014d52 <USBD_GetString+0x9e>
    return;
 8014d50:	bf00      	nop
  }
}
 8014d52:	3718      	adds	r7, #24
 8014d54:	46bd      	mov	sp, r7
 8014d56:	bd80      	pop	{r7, pc}

08014d58 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8014d58:	b480      	push	{r7}
 8014d5a:	b085      	sub	sp, #20
 8014d5c:	af00      	add	r7, sp, #0
 8014d5e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8014d60:	2300      	movs	r3, #0
 8014d62:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8014d64:	687b      	ldr	r3, [r7, #4]
 8014d66:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8014d68:	e005      	b.n	8014d76 <USBD_GetLen+0x1e>
  {
    len++;
 8014d6a:	7bfb      	ldrb	r3, [r7, #15]
 8014d6c:	3301      	adds	r3, #1
 8014d6e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8014d70:	68bb      	ldr	r3, [r7, #8]
 8014d72:	3301      	adds	r3, #1
 8014d74:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8014d76:	68bb      	ldr	r3, [r7, #8]
 8014d78:	781b      	ldrb	r3, [r3, #0]
 8014d7a:	2b00      	cmp	r3, #0
 8014d7c:	d1f5      	bne.n	8014d6a <USBD_GetLen+0x12>
  }

  return len;
 8014d7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8014d80:	4618      	mov	r0, r3
 8014d82:	3714      	adds	r7, #20
 8014d84:	46bd      	mov	sp, r7
 8014d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d8a:	4770      	bx	lr

08014d8c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8014d8c:	b580      	push	{r7, lr}
 8014d8e:	b084      	sub	sp, #16
 8014d90:	af00      	add	r7, sp, #0
 8014d92:	60f8      	str	r0, [r7, #12]
 8014d94:	60b9      	str	r1, [r7, #8]
 8014d96:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8014d98:	68fb      	ldr	r3, [r7, #12]
 8014d9a:	2202      	movs	r2, #2
 8014d9c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8014da0:	68fb      	ldr	r3, [r7, #12]
 8014da2:	687a      	ldr	r2, [r7, #4]
 8014da4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8014da6:	68fb      	ldr	r3, [r7, #12]
 8014da8:	687a      	ldr	r2, [r7, #4]
 8014daa:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8014dac:	687b      	ldr	r3, [r7, #4]
 8014dae:	68ba      	ldr	r2, [r7, #8]
 8014db0:	2100      	movs	r1, #0
 8014db2:	68f8      	ldr	r0, [r7, #12]
 8014db4:	f004 fa17 	bl	80191e6 <USBD_LL_Transmit>

  return USBD_OK;
 8014db8:	2300      	movs	r3, #0
}
 8014dba:	4618      	mov	r0, r3
 8014dbc:	3710      	adds	r7, #16
 8014dbe:	46bd      	mov	sp, r7
 8014dc0:	bd80      	pop	{r7, pc}

08014dc2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8014dc2:	b580      	push	{r7, lr}
 8014dc4:	b084      	sub	sp, #16
 8014dc6:	af00      	add	r7, sp, #0
 8014dc8:	60f8      	str	r0, [r7, #12]
 8014dca:	60b9      	str	r1, [r7, #8]
 8014dcc:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8014dce:	687b      	ldr	r3, [r7, #4]
 8014dd0:	68ba      	ldr	r2, [r7, #8]
 8014dd2:	2100      	movs	r1, #0
 8014dd4:	68f8      	ldr	r0, [r7, #12]
 8014dd6:	f004 fa06 	bl	80191e6 <USBD_LL_Transmit>

  return USBD_OK;
 8014dda:	2300      	movs	r3, #0
}
 8014ddc:	4618      	mov	r0, r3
 8014dde:	3710      	adds	r7, #16
 8014de0:	46bd      	mov	sp, r7
 8014de2:	bd80      	pop	{r7, pc}

08014de4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8014de4:	b580      	push	{r7, lr}
 8014de6:	b084      	sub	sp, #16
 8014de8:	af00      	add	r7, sp, #0
 8014dea:	60f8      	str	r0, [r7, #12]
 8014dec:	60b9      	str	r1, [r7, #8]
 8014dee:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8014df0:	68fb      	ldr	r3, [r7, #12]
 8014df2:	2203      	movs	r2, #3
 8014df4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8014df8:	68fb      	ldr	r3, [r7, #12]
 8014dfa:	687a      	ldr	r2, [r7, #4]
 8014dfc:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8014e00:	68fb      	ldr	r3, [r7, #12]
 8014e02:	687a      	ldr	r2, [r7, #4]
 8014e04:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8014e08:	687b      	ldr	r3, [r7, #4]
 8014e0a:	68ba      	ldr	r2, [r7, #8]
 8014e0c:	2100      	movs	r1, #0
 8014e0e:	68f8      	ldr	r0, [r7, #12]
 8014e10:	f004 fa0a 	bl	8019228 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8014e14:	2300      	movs	r3, #0
}
 8014e16:	4618      	mov	r0, r3
 8014e18:	3710      	adds	r7, #16
 8014e1a:	46bd      	mov	sp, r7
 8014e1c:	bd80      	pop	{r7, pc}

08014e1e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8014e1e:	b580      	push	{r7, lr}
 8014e20:	b084      	sub	sp, #16
 8014e22:	af00      	add	r7, sp, #0
 8014e24:	60f8      	str	r0, [r7, #12]
 8014e26:	60b9      	str	r1, [r7, #8]
 8014e28:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8014e2a:	687b      	ldr	r3, [r7, #4]
 8014e2c:	68ba      	ldr	r2, [r7, #8]
 8014e2e:	2100      	movs	r1, #0
 8014e30:	68f8      	ldr	r0, [r7, #12]
 8014e32:	f004 f9f9 	bl	8019228 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8014e36:	2300      	movs	r3, #0
}
 8014e38:	4618      	mov	r0, r3
 8014e3a:	3710      	adds	r7, #16
 8014e3c:	46bd      	mov	sp, r7
 8014e3e:	bd80      	pop	{r7, pc}

08014e40 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8014e40:	b580      	push	{r7, lr}
 8014e42:	b082      	sub	sp, #8
 8014e44:	af00      	add	r7, sp, #0
 8014e46:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8014e48:	687b      	ldr	r3, [r7, #4]
 8014e4a:	2204      	movs	r2, #4
 8014e4c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8014e50:	2300      	movs	r3, #0
 8014e52:	2200      	movs	r2, #0
 8014e54:	2100      	movs	r1, #0
 8014e56:	6878      	ldr	r0, [r7, #4]
 8014e58:	f004 f9c5 	bl	80191e6 <USBD_LL_Transmit>

  return USBD_OK;
 8014e5c:	2300      	movs	r3, #0
}
 8014e5e:	4618      	mov	r0, r3
 8014e60:	3708      	adds	r7, #8
 8014e62:	46bd      	mov	sp, r7
 8014e64:	bd80      	pop	{r7, pc}

08014e66 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8014e66:	b580      	push	{r7, lr}
 8014e68:	b082      	sub	sp, #8
 8014e6a:	af00      	add	r7, sp, #0
 8014e6c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8014e6e:	687b      	ldr	r3, [r7, #4]
 8014e70:	2205      	movs	r2, #5
 8014e72:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8014e76:	2300      	movs	r3, #0
 8014e78:	2200      	movs	r2, #0
 8014e7a:	2100      	movs	r1, #0
 8014e7c:	6878      	ldr	r0, [r7, #4]
 8014e7e:	f004 f9d3 	bl	8019228 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8014e82:	2300      	movs	r3, #0
}
 8014e84:	4618      	mov	r0, r3
 8014e86:	3708      	adds	r7, #8
 8014e88:	46bd      	mov	sp, r7
 8014e8a:	bd80      	pop	{r7, pc}

08014e8c <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 8014e8c:	b580      	push	{r7, lr}
 8014e8e:	b088      	sub	sp, #32
 8014e90:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8014e92:	2300      	movs	r3, #0
 8014e94:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8014e96:	f107 0308 	add.w	r3, r7, #8
 8014e9a:	2218      	movs	r2, #24
 8014e9c:	2100      	movs	r1, #0
 8014e9e:	4618      	mov	r0, r3
 8014ea0:	f001 f92d 	bl	80160fe <Osal_MemSet>
  rq.ogf = 0x3f;
 8014ea4:	233f      	movs	r3, #63	@ 0x3f
 8014ea6:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 8014ea8:	2381      	movs	r3, #129	@ 0x81
 8014eaa:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8014eac:	1dfb      	adds	r3, r7, #7
 8014eae:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8014eb0:	2301      	movs	r3, #1
 8014eb2:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8014eb4:	f107 0308 	add.w	r3, r7, #8
 8014eb8:	2100      	movs	r1, #0
 8014eba:	4618      	mov	r0, r3
 8014ebc:	f001 fba8 	bl	8016610 <hci_send_req>
 8014ec0:	4603      	mov	r3, r0
 8014ec2:	2b00      	cmp	r3, #0
 8014ec4:	da01      	bge.n	8014eca <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 8014ec6:	23ff      	movs	r3, #255	@ 0xff
 8014ec8:	e000      	b.n	8014ecc <aci_gap_set_non_discoverable+0x40>
  return status;
 8014eca:	79fb      	ldrb	r3, [r7, #7]
}
 8014ecc:	4618      	mov	r0, r3
 8014ece:	3720      	adds	r7, #32
 8014ed0:	46bd      	mov	sp, r7
 8014ed2:	bd80      	pop	{r7, pc}

08014ed4 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Conn_Interval_Min,
                                     uint16_t Conn_Interval_Max )
{
 8014ed4:	b5b0      	push	{r4, r5, r7, lr}
 8014ed6:	b0ce      	sub	sp, #312	@ 0x138
 8014ed8:	af00      	add	r7, sp, #0
 8014eda:	4605      	mov	r5, r0
 8014edc:	460c      	mov	r4, r1
 8014ede:	4610      	mov	r0, r2
 8014ee0:	4619      	mov	r1, r3
 8014ee2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014ee6:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8014eea:	462a      	mov	r2, r5
 8014eec:	701a      	strb	r2, [r3, #0]
 8014eee:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014ef2:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8014ef6:	4622      	mov	r2, r4
 8014ef8:	801a      	strh	r2, [r3, #0]
 8014efa:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014efe:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 8014f02:	4602      	mov	r2, r0
 8014f04:	801a      	strh	r2, [r3, #0]
 8014f06:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014f0a:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 8014f0e:	460a      	mov	r2, r1
 8014f10:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 8014f12:	f107 0310 	add.w	r3, r7, #16
 8014f16:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 8014f1a:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 8014f1e:	3308      	adds	r3, #8
 8014f20:	f107 0210 	add.w	r2, r7, #16
 8014f24:	4413      	add	r3, r2
 8014f26:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 8014f2a:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 8014f2e:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 8014f32:	4413      	add	r3, r2
 8014f34:	3309      	adds	r3, #9
 8014f36:	f107 0210 	add.w	r2, r7, #16
 8014f3a:	4413      	add	r3, r2
 8014f3c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8014f40:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014f44:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8014f48:	2200      	movs	r2, #0
 8014f4a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8014f4c:	2300      	movs	r3, #0
 8014f4e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Type = Advertising_Type;
 8014f52:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014f56:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8014f5a:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 8014f5e:	7812      	ldrb	r2, [r2, #0]
 8014f60:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8014f62:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014f66:	3301      	adds	r3, #1
 8014f68:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 8014f6c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014f70:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8014f74:	f5a2 729a 	sub.w	r2, r2, #308	@ 0x134
 8014f78:	8812      	ldrh	r2, [r2, #0]
 8014f7a:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 8014f7e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014f82:	3302      	adds	r3, #2
 8014f84:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 8014f88:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014f8c:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8014f90:	f5a2 729b 	sub.w	r2, r2, #310	@ 0x136
 8014f94:	8812      	ldrh	r2, [r2, #0]
 8014f96:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 8014f9a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014f9e:	3302      	adds	r3, #2
 8014fa0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 8014fa4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014fa8:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8014fac:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 8014fb0:	7812      	ldrb	r2, [r2, #0]
 8014fb2:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8014fb4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014fb8:	3301      	adds	r3, #1
 8014fba:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 8014fbe:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014fc2:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 8014fc6:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8014fc8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014fcc:	3301      	adds	r3, #1
 8014fce:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 8014fd2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014fd6:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 8014fda:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 8014fdc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014fe0:	3301      	adds	r3, #1
 8014fe2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 8014fe6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014fea:	3308      	adds	r3, #8
 8014fec:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 8014ff0:	f8d7 1150 	ldr.w	r1, [r7, #336]	@ 0x150
 8014ff4:	4618      	mov	r0, r3
 8014ff6:	f001 f872 	bl	80160de <Osal_MemCpy>
    index_input += Local_Name_Length;
 8014ffa:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 8014ffe:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8015002:	4413      	add	r3, r2
 8015004:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 8015008:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 801500c:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 8015010:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8015012:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015016:	3301      	adds	r3, #1
 8015018:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 801501c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8015020:	3301      	adds	r3, #1
 8015022:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 8015026:	f8d7 1158 	ldr.w	r1, [r7, #344]	@ 0x158
 801502a:	4618      	mov	r0, r3
 801502c:	f001 f857 	bl	80160de <Osal_MemCpy>
    index_input += Service_Uuid_length;
 8015030:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 8015034:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8015038:	4413      	add	r3, r2
 801503a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Min = Conn_Interval_Min;
 801503e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015042:	f8b7 215c 	ldrh.w	r2, [r7, #348]	@ 0x15c
 8015046:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8015048:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801504c:	3302      	adds	r3, #2
 801504e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Max = Conn_Interval_Max;
 8015052:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015056:	f8b7 2160 	ldrh.w	r2, [r7, #352]	@ 0x160
 801505a:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 801505c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015060:	3302      	adds	r3, #2
 8015062:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8015066:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801506a:	2218      	movs	r2, #24
 801506c:	2100      	movs	r1, #0
 801506e:	4618      	mov	r0, r3
 8015070:	f001 f845 	bl	80160fe <Osal_MemSet>
  rq.ogf = 0x3f;
 8015074:	233f      	movs	r3, #63	@ 0x3f
 8015076:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x083;
 801507a:	2383      	movs	r3, #131	@ 0x83
 801507c:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8015080:	f107 0310 	add.w	r3, r7, #16
 8015084:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8015088:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801508c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8015090:	f107 030f 	add.w	r3, r7, #15
 8015094:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8015098:	2301      	movs	r3, #1
 801509a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 801509e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80150a2:	2100      	movs	r1, #0
 80150a4:	4618      	mov	r0, r3
 80150a6:	f001 fab3 	bl	8016610 <hci_send_req>
 80150aa:	4603      	mov	r3, r0
 80150ac:	2b00      	cmp	r3, #0
 80150ae:	da01      	bge.n	80150b4 <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 80150b0:	23ff      	movs	r3, #255	@ 0xff
 80150b2:	e004      	b.n	80150be <aci_gap_set_discoverable+0x1ea>
  return status;
 80150b4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80150b8:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80150bc:	781b      	ldrb	r3, [r3, #0]
}
 80150be:	4618      	mov	r0, r3
 80150c0:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 80150c4:	46bd      	mov	sp, r7
 80150c6:	bdb0      	pop	{r4, r5, r7, pc}

080150c8 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 80150c8:	b580      	push	{r7, lr}
 80150ca:	b0cc      	sub	sp, #304	@ 0x130
 80150cc:	af00      	add	r7, sp, #0
 80150ce:	4602      	mov	r2, r0
 80150d0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80150d4:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80150d8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 80150da:	f107 0310 	add.w	r3, r7, #16
 80150de:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80150e2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80150e6:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80150ea:	2200      	movs	r2, #0
 80150ec:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80150ee:	2300      	movs	r3, #0
 80150f0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->IO_Capability = IO_Capability;
 80150f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80150f8:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80150fc:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8015100:	7812      	ldrb	r2, [r2, #0]
 8015102:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8015104:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015108:	3301      	adds	r3, #1
 801510a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 801510e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8015112:	2218      	movs	r2, #24
 8015114:	2100      	movs	r1, #0
 8015116:	4618      	mov	r0, r3
 8015118:	f000 fff1 	bl	80160fe <Osal_MemSet>
  rq.ogf = 0x3f;
 801511c:	233f      	movs	r3, #63	@ 0x3f
 801511e:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x085;
 8015122:	2385      	movs	r3, #133	@ 0x85
 8015124:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8015128:	f107 0310 	add.w	r3, r7, #16
 801512c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8015130:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015134:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8015138:	f107 030f 	add.w	r3, r7, #15
 801513c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8015140:	2301      	movs	r3, #1
 8015142:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8015146:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801514a:	2100      	movs	r1, #0
 801514c:	4618      	mov	r0, r3
 801514e:	f001 fa5f 	bl	8016610 <hci_send_req>
 8015152:	4603      	mov	r3, r0
 8015154:	2b00      	cmp	r3, #0
 8015156:	da01      	bge.n	801515c <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 8015158:	23ff      	movs	r3, #255	@ 0xff
 801515a:	e004      	b.n	8015166 <aci_gap_set_io_capability+0x9e>
  return status;
 801515c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015160:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8015164:	781b      	ldrb	r3, [r3, #0]
}
 8015166:	4618      	mov	r0, r3
 8015168:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 801516c:	46bd      	mov	sp, r7
 801516e:	bd80      	pop	{r7, pc}

08015170 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 8015170:	b5b0      	push	{r4, r5, r7, lr}
 8015172:	b0cc      	sub	sp, #304	@ 0x130
 8015174:	af00      	add	r7, sp, #0
 8015176:	4605      	mov	r5, r0
 8015178:	460c      	mov	r4, r1
 801517a:	4610      	mov	r0, r2
 801517c:	4619      	mov	r1, r3
 801517e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015182:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8015186:	462a      	mov	r2, r5
 8015188:	701a      	strb	r2, [r3, #0]
 801518a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801518e:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8015192:	4622      	mov	r2, r4
 8015194:	701a      	strb	r2, [r3, #0]
 8015196:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801519a:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 801519e:	4602      	mov	r2, r0
 80151a0:	701a      	strb	r2, [r3, #0]
 80151a2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80151a6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80151aa:	460a      	mov	r2, r1
 80151ac:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 80151ae:	f107 0310 	add.w	r3, r7, #16
 80151b2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80151b6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80151ba:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80151be:	2200      	movs	r2, #0
 80151c0:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80151c2:	2300      	movs	r3, #0
 80151c4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 80151c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80151cc:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80151d0:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 80151d4:	7812      	ldrb	r2, [r2, #0]
 80151d6:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80151d8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80151dc:	3301      	adds	r3, #1
 80151de:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->MITM_Mode = MITM_Mode;
 80151e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80151e6:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80151ea:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 80151ee:	7812      	ldrb	r2, [r2, #0]
 80151f0:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80151f2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80151f6:	3301      	adds	r3, #1
 80151f8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->SC_Support = SC_Support;
 80151fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015200:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8015204:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8015208:	7812      	ldrb	r2, [r2, #0]
 801520a:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 801520c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015210:	3301      	adds	r3, #1
 8015212:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 8015216:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801521a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 801521e:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 8015222:	7812      	ldrb	r2, [r2, #0]
 8015224:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 8015226:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801522a:	3301      	adds	r3, #1
 801522c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 8015230:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015234:	f897 2140 	ldrb.w	r2, [r7, #320]	@ 0x140
 8015238:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 801523a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801523e:	3301      	adds	r3, #1
 8015240:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 8015244:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015248:	f897 2144 	ldrb.w	r2, [r7, #324]	@ 0x144
 801524c:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 801524e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015252:	3301      	adds	r3, #1
 8015254:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 8015258:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801525c:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 8015260:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8015262:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015266:	3301      	adds	r3, #1
 8015268:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 801526c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015270:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8015274:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 8015278:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801527c:	3304      	adds	r3, #4
 801527e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 8015282:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015286:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 801528a:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 801528c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015290:	3301      	adds	r3, #1
 8015292:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8015296:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801529a:	2218      	movs	r2, #24
 801529c:	2100      	movs	r1, #0
 801529e:	4618      	mov	r0, r3
 80152a0:	f000 ff2d 	bl	80160fe <Osal_MemSet>
  rq.ogf = 0x3f;
 80152a4:	233f      	movs	r3, #63	@ 0x3f
 80152a6:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x086;
 80152aa:	2386      	movs	r3, #134	@ 0x86
 80152ac:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80152b0:	f107 0310 	add.w	r3, r7, #16
 80152b4:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80152b8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80152bc:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80152c0:	f107 030f 	add.w	r3, r7, #15
 80152c4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80152c8:	2301      	movs	r3, #1
 80152ca:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80152ce:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80152d2:	2100      	movs	r1, #0
 80152d4:	4618      	mov	r0, r3
 80152d6:	f001 f99b 	bl	8016610 <hci_send_req>
 80152da:	4603      	mov	r3, r0
 80152dc:	2b00      	cmp	r3, #0
 80152de:	da01      	bge.n	80152e4 <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 80152e0:	23ff      	movs	r3, #255	@ 0xff
 80152e2:	e004      	b.n	80152ee <aci_gap_set_authentication_requirement+0x17e>
  return status;
 80152e4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80152e8:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80152ec:	781b      	ldrb	r3, [r3, #0]
}
 80152ee:	4618      	mov	r0, r3
 80152f0:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80152f4:	46bd      	mov	sp, r7
 80152f6:	bdb0      	pop	{r4, r5, r7, pc}

080152f8 <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 80152f8:	b580      	push	{r7, lr}
 80152fa:	b0cc      	sub	sp, #304	@ 0x130
 80152fc:	af00      	add	r7, sp, #0
 80152fe:	4602      	mov	r2, r0
 8015300:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015304:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8015308:	6019      	str	r1, [r3, #0]
 801530a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801530e:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8015312:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 8015314:	f107 0310 	add.w	r3, r7, #16
 8015318:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 801531c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015320:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8015324:	2200      	movs	r2, #0
 8015326:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8015328:	2300      	movs	r3, #0
 801532a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 801532e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015332:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8015336:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 801533a:	8812      	ldrh	r2, [r2, #0]
 801533c:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 801533e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015342:	3302      	adds	r3, #2
 8015344:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Pass_Key = Pass_Key;
 8015348:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801534c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8015350:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 8015354:	6812      	ldr	r2, [r2, #0]
 8015356:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 801535a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801535e:	3304      	adds	r3, #4
 8015360:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8015364:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8015368:	2218      	movs	r2, #24
 801536a:	2100      	movs	r1, #0
 801536c:	4618      	mov	r0, r3
 801536e:	f000 fec6 	bl	80160fe <Osal_MemSet>
  rq.ogf = 0x3f;
 8015372:	233f      	movs	r3, #63	@ 0x3f
 8015374:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x088;
 8015378:	2388      	movs	r3, #136	@ 0x88
 801537a:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 801537e:	f107 0310 	add.w	r3, r7, #16
 8015382:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8015386:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801538a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 801538e:	f107 030f 	add.w	r3, r7, #15
 8015392:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8015396:	2301      	movs	r3, #1
 8015398:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 801539c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80153a0:	2100      	movs	r1, #0
 80153a2:	4618      	mov	r0, r3
 80153a4:	f001 f934 	bl	8016610 <hci_send_req>
 80153a8:	4603      	mov	r3, r0
 80153aa:	2b00      	cmp	r3, #0
 80153ac:	da01      	bge.n	80153b2 <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 80153ae:	23ff      	movs	r3, #255	@ 0xff
 80153b0:	e004      	b.n	80153bc <aci_gap_pass_key_resp+0xc4>
  return status;
 80153b2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80153b6:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80153ba:	781b      	ldrb	r3, [r3, #0]
}
 80153bc:	4618      	mov	r0, r3
 80153be:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80153c2:	46bd      	mov	sp, r7
 80153c4:	bd80      	pop	{r7, pc}

080153c6 <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 80153c6:	b590      	push	{r4, r7, lr}
 80153c8:	b0cd      	sub	sp, #308	@ 0x134
 80153ca:	af00      	add	r7, sp, #0
 80153cc:	4604      	mov	r4, r0
 80153ce:	4608      	mov	r0, r1
 80153d0:	4611      	mov	r1, r2
 80153d2:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80153d6:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 80153da:	6013      	str	r3, [r2, #0]
 80153dc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80153e0:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80153e4:	4622      	mov	r2, r4
 80153e6:	701a      	strb	r2, [r3, #0]
 80153e8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80153ec:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80153f0:	4602      	mov	r2, r0
 80153f2:	701a      	strb	r2, [r3, #0]
 80153f4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80153f8:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 80153fc:	460a      	mov	r2, r1
 80153fe:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 8015400:	f107 0310 	add.w	r3, r7, #16
 8015404:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8015408:	f107 0308 	add.w	r3, r7, #8
 801540c:	2207      	movs	r2, #7
 801540e:	2100      	movs	r1, #0
 8015410:	4618      	mov	r0, r3
 8015412:	f000 fe74 	bl	80160fe <Osal_MemSet>
  int index_input = 0;
 8015416:	2300      	movs	r3, #0
 8015418:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Role = Role;
 801541c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015420:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8015424:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8015428:	7812      	ldrb	r2, [r2, #0]
 801542a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 801542c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015430:	3301      	adds	r3, #1
 8015432:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->privacy_enabled = privacy_enabled;
 8015436:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801543a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 801543e:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8015442:	7812      	ldrb	r2, [r2, #0]
 8015444:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8015446:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801544a:	3301      	adds	r3, #1
 801544c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->device_name_char_len = device_name_char_len;
 8015450:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015454:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8015458:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 801545c:	7812      	ldrb	r2, [r2, #0]
 801545e:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8015460:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015464:	3301      	adds	r3, #1
 8015466:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 801546a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801546e:	2218      	movs	r2, #24
 8015470:	2100      	movs	r1, #0
 8015472:	4618      	mov	r0, r3
 8015474:	f000 fe43 	bl	80160fe <Osal_MemSet>
  rq.ogf = 0x3f;
 8015478:	233f      	movs	r3, #63	@ 0x3f
 801547a:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08a;
 801547e:	238a      	movs	r3, #138	@ 0x8a
 8015480:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8015484:	f107 0310 	add.w	r3, r7, #16
 8015488:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 801548c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015490:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 8015494:	f107 0308 	add.w	r3, r7, #8
 8015498:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 801549c:	2307      	movs	r3, #7
 801549e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80154a2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80154a6:	2100      	movs	r1, #0
 80154a8:	4618      	mov	r0, r3
 80154aa:	f001 f8b1 	bl	8016610 <hci_send_req>
 80154ae:	4603      	mov	r3, r0
 80154b0:	2b00      	cmp	r3, #0
 80154b2:	da01      	bge.n	80154b8 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 80154b4:	23ff      	movs	r3, #255	@ 0xff
 80154b6:	e02e      	b.n	8015516 <aci_gap_init+0x150>
  if ( resp.Status )
 80154b8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80154bc:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80154c0:	781b      	ldrb	r3, [r3, #0]
 80154c2:	2b00      	cmp	r3, #0
 80154c4:	d005      	beq.n	80154d2 <aci_gap_init+0x10c>
    return resp.Status;
 80154c6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80154ca:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80154ce:	781b      	ldrb	r3, [r3, #0]
 80154d0:	e021      	b.n	8015516 <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 80154d2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80154d6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80154da:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80154de:	b29a      	uxth	r2, r3
 80154e0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80154e4:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80154e8:	681b      	ldr	r3, [r3, #0]
 80154ea:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 80154ec:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80154f0:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80154f4:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 80154f8:	b29a      	uxth	r2, r3
 80154fa:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80154fe:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 8015500:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015504:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8015508:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 801550c:	b29a      	uxth	r2, r3
 801550e:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8015512:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8015514:	2300      	movs	r3, #0
}
 8015516:	4618      	mov	r0, r3
 8015518:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 801551c:	46bd      	mov	sp, r7
 801551e:	bd90      	pop	{r4, r7, pc}

08015520 <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 8015520:	b580      	push	{r7, lr}
 8015522:	b0cc      	sub	sp, #304	@ 0x130
 8015524:	af00      	add	r7, sp, #0
 8015526:	4602      	mov	r2, r0
 8015528:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801552c:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8015530:	6019      	str	r1, [r3, #0]
 8015532:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015536:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 801553a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 801553c:	f107 0310 	add.w	r3, r7, #16
 8015540:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8015544:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015548:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 801554c:	2200      	movs	r2, #0
 801554e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8015550:	2300      	movs	r3, #0
 8015552:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->AdvDataLen = AdvDataLen;
 8015556:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801555a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 801555e:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8015562:	7812      	ldrb	r2, [r2, #0]
 8015564:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8015566:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801556a:	3301      	adds	r3, #1
 801556c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 8015570:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015574:	1c58      	adds	r0, r3, #1
 8015576:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801557a:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 801557e:	781a      	ldrb	r2, [r3, #0]
 8015580:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015584:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8015588:	6819      	ldr	r1, [r3, #0]
 801558a:	f000 fda8 	bl	80160de <Osal_MemCpy>
  index_input += AdvDataLen;
 801558e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015592:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8015596:	781b      	ldrb	r3, [r3, #0]
 8015598:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 801559c:	4413      	add	r3, r2
 801559e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80155a2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80155a6:	2218      	movs	r2, #24
 80155a8:	2100      	movs	r1, #0
 80155aa:	4618      	mov	r0, r3
 80155ac:	f000 fda7 	bl	80160fe <Osal_MemSet>
  rq.ogf = 0x3f;
 80155b0:	233f      	movs	r3, #63	@ 0x3f
 80155b2:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08e;
 80155b6:	238e      	movs	r3, #142	@ 0x8e
 80155b8:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80155bc:	f107 0310 	add.w	r3, r7, #16
 80155c0:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80155c4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80155c8:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80155cc:	f107 030f 	add.w	r3, r7, #15
 80155d0:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80155d4:	2301      	movs	r3, #1
 80155d6:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80155da:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80155de:	2100      	movs	r1, #0
 80155e0:	4618      	mov	r0, r3
 80155e2:	f001 f815 	bl	8016610 <hci_send_req>
 80155e6:	4603      	mov	r3, r0
 80155e8:	2b00      	cmp	r3, #0
 80155ea:	da01      	bge.n	80155f0 <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 80155ec:	23ff      	movs	r3, #255	@ 0xff
 80155ee:	e004      	b.n	80155fa <aci_gap_update_adv_data+0xda>
  return status;
 80155f0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80155f4:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80155f8:	781b      	ldrb	r3, [r3, #0]
}
 80155fa:	4618      	mov	r0, r3
 80155fc:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8015600:	46bd      	mov	sp, r7
 8015602:	bd80      	pop	{r7, pc}

08015604 <aci_gap_configure_filter_accept_list>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_filter_accept_list( void )
{
 8015604:	b580      	push	{r7, lr}
 8015606:	b088      	sub	sp, #32
 8015608:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 801560a:	2300      	movs	r3, #0
 801560c:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 801560e:	f107 0308 	add.w	r3, r7, #8
 8015612:	2218      	movs	r2, #24
 8015614:	2100      	movs	r1, #0
 8015616:	4618      	mov	r0, r3
 8015618:	f000 fd71 	bl	80160fe <Osal_MemSet>
  rq.ogf = 0x3f;
 801561c:	233f      	movs	r3, #63	@ 0x3f
 801561e:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 8015620:	2392      	movs	r3, #146	@ 0x92
 8015622:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8015624:	1dfb      	adds	r3, r7, #7
 8015626:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8015628:	2301      	movs	r3, #1
 801562a:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 801562c:	f107 0308 	add.w	r3, r7, #8
 8015630:	2100      	movs	r1, #0
 8015632:	4618      	mov	r0, r3
 8015634:	f000 ffec 	bl	8016610 <hci_send_req>
 8015638:	4603      	mov	r3, r0
 801563a:	2b00      	cmp	r3, #0
 801563c:	da01      	bge.n	8015642 <aci_gap_configure_filter_accept_list+0x3e>
    return BLE_STATUS_TIMEOUT;
 801563e:	23ff      	movs	r3, #255	@ 0xff
 8015640:	e000      	b.n	8015644 <aci_gap_configure_filter_accept_list+0x40>
  return status;
 8015642:	79fb      	ldrb	r3, [r7, #7]
}
 8015644:	4618      	mov	r0, r3
 8015646:	3720      	adds	r7, #32
 8015648:	46bd      	mov	sp, r7
 801564a:	bd80      	pop	{r7, pc}

0801564c <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 801564c:	b580      	push	{r7, lr}
 801564e:	b0cc      	sub	sp, #304	@ 0x130
 8015650:	af00      	add	r7, sp, #0
 8015652:	4602      	mov	r2, r0
 8015654:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015658:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 801565c:	801a      	strh	r2, [r3, #0]
 801565e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015662:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8015666:	460a      	mov	r2, r1
 8015668:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 801566a:	f107 0310 	add.w	r3, r7, #16
 801566e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8015672:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015676:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 801567a:	2200      	movs	r2, #0
 801567c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 801567e:	2300      	movs	r3, #0
 8015680:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 8015684:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015688:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 801568c:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8015690:	8812      	ldrh	r2, [r2, #0]
 8015692:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8015694:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015698:	3302      	adds	r3, #2
 801569a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 801569e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80156a2:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80156a6:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 80156aa:	7812      	ldrb	r2, [r2, #0]
 80156ac:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80156ae:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80156b2:	3301      	adds	r3, #1
 80156b4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80156b8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80156bc:	2218      	movs	r2, #24
 80156be:	2100      	movs	r1, #0
 80156c0:	4618      	mov	r0, r3
 80156c2:	f000 fd1c 	bl	80160fe <Osal_MemSet>
  rq.ogf = 0x3f;
 80156c6:	233f      	movs	r3, #63	@ 0x3f
 80156c8:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x0a5;
 80156cc:	23a5      	movs	r3, #165	@ 0xa5
 80156ce:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80156d2:	f107 0310 	add.w	r3, r7, #16
 80156d6:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80156da:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80156de:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80156e2:	f107 030f 	add.w	r3, r7, #15
 80156e6:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80156ea:	2301      	movs	r3, #1
 80156ec:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80156f0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80156f4:	2100      	movs	r1, #0
 80156f6:	4618      	mov	r0, r3
 80156f8:	f000 ff8a 	bl	8016610 <hci_send_req>
 80156fc:	4603      	mov	r3, r0
 80156fe:	2b00      	cmp	r3, #0
 8015700:	da01      	bge.n	8015706 <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
    return BLE_STATUS_TIMEOUT;
 8015702:	23ff      	movs	r3, #255	@ 0xff
 8015704:	e004      	b.n	8015710 <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
  return status;
 8015706:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801570a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 801570e:	781b      	ldrb	r3, [r3, #0]
}
 8015710:	4618      	mov	r0, r3
 8015712:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8015716:	46bd      	mov	sp, r7
 8015718:	bd80      	pop	{r7, pc}

0801571a <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 801571a:	b580      	push	{r7, lr}
 801571c:	b088      	sub	sp, #32
 801571e:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8015720:	2300      	movs	r3, #0
 8015722:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8015724:	f107 0308 	add.w	r3, r7, #8
 8015728:	2218      	movs	r2, #24
 801572a:	2100      	movs	r1, #0
 801572c:	4618      	mov	r0, r3
 801572e:	f000 fce6 	bl	80160fe <Osal_MemSet>
  rq.ogf = 0x3f;
 8015732:	233f      	movs	r3, #63	@ 0x3f
 8015734:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 8015736:	f240 1301 	movw	r3, #257	@ 0x101
 801573a:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 801573c:	1dfb      	adds	r3, r7, #7
 801573e:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8015740:	2301      	movs	r3, #1
 8015742:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8015744:	f107 0308 	add.w	r3, r7, #8
 8015748:	2100      	movs	r1, #0
 801574a:	4618      	mov	r0, r3
 801574c:	f000 ff60 	bl	8016610 <hci_send_req>
 8015750:	4603      	mov	r3, r0
 8015752:	2b00      	cmp	r3, #0
 8015754:	da01      	bge.n	801575a <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 8015756:	23ff      	movs	r3, #255	@ 0xff
 8015758:	e000      	b.n	801575c <aci_gatt_init+0x42>
  return status;
 801575a:	79fb      	ldrb	r3, [r7, #7]
}
 801575c:	4618      	mov	r0, r3
 801575e:	3720      	adds	r7, #32
 8015760:	46bd      	mov	sp, r7
 8015762:	bd80      	pop	{r7, pc}

08015764 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 8015764:	b590      	push	{r4, r7, lr}
 8015766:	b0cf      	sub	sp, #316	@ 0x13c
 8015768:	af00      	add	r7, sp, #0
 801576a:	4604      	mov	r4, r0
 801576c:	f507 709c 	add.w	r0, r7, #312	@ 0x138
 8015770:	f5a0 709c 	sub.w	r0, r0, #312	@ 0x138
 8015774:	6001      	str	r1, [r0, #0]
 8015776:	4610      	mov	r0, r2
 8015778:	4619      	mov	r1, r3
 801577a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801577e:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8015782:	4622      	mov	r2, r4
 8015784:	701a      	strb	r2, [r3, #0]
 8015786:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801578a:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 801578e:	4602      	mov	r2, r0
 8015790:	701a      	strb	r2, [r3, #0]
 8015792:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015796:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 801579a:	460a      	mov	r2, r1
 801579c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 801579e:	f107 0310 	add.w	r3, r7, #16
 80157a2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 80157a6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80157aa:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 80157ae:	781b      	ldrb	r3, [r3, #0]
 80157b0:	2b01      	cmp	r3, #1
 80157b2:	d00a      	beq.n	80157ca <aci_gatt_add_service+0x66>
 80157b4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80157b8:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 80157bc:	781b      	ldrb	r3, [r3, #0]
 80157be:	2b02      	cmp	r3, #2
 80157c0:	d101      	bne.n	80157c6 <aci_gatt_add_service+0x62>
 80157c2:	2311      	movs	r3, #17
 80157c4:	e002      	b.n	80157cc <aci_gatt_add_service+0x68>
 80157c6:	2301      	movs	r3, #1
 80157c8:	e000      	b.n	80157cc <aci_gatt_add_service+0x68>
 80157ca:	2303      	movs	r3, #3
 80157cc:	f107 0210 	add.w	r2, r7, #16
 80157d0:	4413      	add	r3, r2
 80157d2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 80157d6:	f107 030c 	add.w	r3, r7, #12
 80157da:	2203      	movs	r2, #3
 80157dc:	2100      	movs	r1, #0
 80157de:	4618      	mov	r0, r3
 80157e0:	f000 fc8d 	bl	80160fe <Osal_MemSet>
  int index_input = 0;
 80157e4:	2300      	movs	r3, #0
 80157e6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 80157ea:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80157ee:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 80157f2:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 80157f6:	7812      	ldrb	r2, [r2, #0]
 80157f8:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80157fa:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80157fe:	3301      	adds	r3, #1
 8015800:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 8015804:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015808:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 801580c:	781b      	ldrb	r3, [r3, #0]
 801580e:	2b01      	cmp	r3, #1
 8015810:	d002      	beq.n	8015818 <aci_gatt_add_service+0xb4>
 8015812:	2b02      	cmp	r3, #2
 8015814:	d004      	beq.n	8015820 <aci_gatt_add_service+0xbc>
 8015816:	e007      	b.n	8015828 <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 8015818:	2302      	movs	r3, #2
 801581a:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 801581e:	e005      	b.n	801582c <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 8015820:	2310      	movs	r3, #16
 8015822:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 8015826:	e001      	b.n	801582c <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 8015828:	2397      	movs	r3, #151	@ 0x97
 801582a:	e06c      	b.n	8015906 <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 801582c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8015830:	1c58      	adds	r0, r3, #1
 8015832:	f897 2137 	ldrb.w	r2, [r7, #311]	@ 0x137
 8015836:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801583a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 801583e:	6819      	ldr	r1, [r3, #0]
 8015840:	f000 fc4d 	bl	80160de <Osal_MemCpy>
    index_input += size;
 8015844:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
 8015848:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 801584c:	4413      	add	r3, r2
 801584e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Type = Service_Type;
 8015852:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015856:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 801585a:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 801585e:	7812      	ldrb	r2, [r2, #0]
 8015860:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8015862:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015866:	3301      	adds	r3, #1
 8015868:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 801586c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015870:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8015874:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 8015878:	7812      	ldrb	r2, [r2, #0]
 801587a:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 801587c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015880:	3301      	adds	r3, #1
 8015882:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8015886:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801588a:	2218      	movs	r2, #24
 801588c:	2100      	movs	r1, #0
 801588e:	4618      	mov	r0, r3
 8015890:	f000 fc35 	bl	80160fe <Osal_MemSet>
  rq.ogf = 0x3f;
 8015894:	233f      	movs	r3, #63	@ 0x3f
 8015896:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x102;
 801589a:	f44f 7381 	mov.w	r3, #258	@ 0x102
 801589e:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80158a2:	f107 0310 	add.w	r3, r7, #16
 80158a6:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80158aa:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80158ae:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 80158b2:	f107 030c 	add.w	r3, r7, #12
 80158b6:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 80158ba:	2303      	movs	r3, #3
 80158bc:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80158c0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80158c4:	2100      	movs	r1, #0
 80158c6:	4618      	mov	r0, r3
 80158c8:	f000 fea2 	bl	8016610 <hci_send_req>
 80158cc:	4603      	mov	r3, r0
 80158ce:	2b00      	cmp	r3, #0
 80158d0:	da01      	bge.n	80158d6 <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 80158d2:	23ff      	movs	r3, #255	@ 0xff
 80158d4:	e017      	b.n	8015906 <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 80158d6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80158da:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80158de:	781b      	ldrb	r3, [r3, #0]
 80158e0:	2b00      	cmp	r3, #0
 80158e2:	d005      	beq.n	80158f0 <aci_gatt_add_service+0x18c>
    return resp.Status;
 80158e4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80158e8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80158ec:	781b      	ldrb	r3, [r3, #0]
 80158ee:	e00a      	b.n	8015906 <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 80158f0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80158f4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80158f8:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80158fc:	b29a      	uxth	r2, r3
 80158fe:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8015902:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8015904:	2300      	movs	r3, #0
}
 8015906:	4618      	mov	r0, r3
 8015908:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 801590c:	46bd      	mov	sp, r7
 801590e:	bd90      	pop	{r4, r7, pc}

08015910 <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 8015910:	b590      	push	{r4, r7, lr}
 8015912:	b0d1      	sub	sp, #324	@ 0x144
 8015914:	af00      	add	r7, sp, #0
 8015916:	4604      	mov	r4, r0
 8015918:	4608      	mov	r0, r1
 801591a:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 801591e:	f5a1 719c 	sub.w	r1, r1, #312	@ 0x138
 8015922:	600a      	str	r2, [r1, #0]
 8015924:	4619      	mov	r1, r3
 8015926:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801592a:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 801592e:	4622      	mov	r2, r4
 8015930:	801a      	strh	r2, [r3, #0]
 8015932:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8015936:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 801593a:	4602      	mov	r2, r0
 801593c:	701a      	strb	r2, [r3, #0]
 801593e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8015942:	f5a3 739d 	sub.w	r3, r3, #314	@ 0x13a
 8015946:	460a      	mov	r2, r1
 8015948:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 801594a:	f107 0318 	add.w	r3, r7, #24
 801594e:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 8015952:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8015956:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 801595a:	781b      	ldrb	r3, [r3, #0]
 801595c:	2b01      	cmp	r3, #1
 801595e:	d00a      	beq.n	8015976 <aci_gatt_add_char+0x66>
 8015960:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8015964:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8015968:	781b      	ldrb	r3, [r3, #0]
 801596a:	2b02      	cmp	r3, #2
 801596c:	d101      	bne.n	8015972 <aci_gatt_add_char+0x62>
 801596e:	2313      	movs	r3, #19
 8015970:	e002      	b.n	8015978 <aci_gatt_add_char+0x68>
 8015972:	2303      	movs	r3, #3
 8015974:	e000      	b.n	8015978 <aci_gatt_add_char+0x68>
 8015976:	2305      	movs	r3, #5
 8015978:	f107 0218 	add.w	r2, r7, #24
 801597c:	4413      	add	r3, r2
 801597e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8015982:	f107 0314 	add.w	r3, r7, #20
 8015986:	2203      	movs	r2, #3
 8015988:	2100      	movs	r1, #0
 801598a:	4618      	mov	r0, r3
 801598c:	f000 fbb7 	bl	80160fe <Osal_MemSet>
  int index_input = 0;
 8015990:	2300      	movs	r3, #0
 8015992:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Service_Handle = Service_Handle;
 8015996:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 801599a:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 801599e:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 80159a2:	8812      	ldrh	r2, [r2, #0]
 80159a4:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80159a6:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80159aa:	3302      	adds	r3, #2
 80159ac:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 80159b0:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80159b4:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 80159b8:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 80159bc:	7812      	ldrb	r2, [r2, #0]
 80159be:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80159c0:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80159c4:	3301      	adds	r3, #1
 80159c6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 80159ca:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80159ce:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 80159d2:	781b      	ldrb	r3, [r3, #0]
 80159d4:	2b01      	cmp	r3, #1
 80159d6:	d002      	beq.n	80159de <aci_gatt_add_char+0xce>
 80159d8:	2b02      	cmp	r3, #2
 80159da:	d004      	beq.n	80159e6 <aci_gatt_add_char+0xd6>
 80159dc:	e007      	b.n	80159ee <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 80159de:	2302      	movs	r3, #2
 80159e0:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 80159e4:	e005      	b.n	80159f2 <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 80159e6:	2310      	movs	r3, #16
 80159e8:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 80159ec:	e001      	b.n	80159f2 <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 80159ee:	2397      	movs	r3, #151	@ 0x97
 80159f0:	e091      	b.n	8015b16 <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 80159f2:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80159f6:	1cd8      	adds	r0, r3, #3
 80159f8:	f897 213f 	ldrb.w	r2, [r7, #319]	@ 0x13f
 80159fc:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8015a00:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8015a04:	6819      	ldr	r1, [r3, #0]
 8015a06:	f000 fb6a 	bl	80160de <Osal_MemCpy>
    index_input += size;
 8015a0a:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 8015a0e:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8015a12:	4413      	add	r3, r2
 8015a14:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 8015a18:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8015a1c:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8015a20:	f5a2 729d 	sub.w	r2, r2, #314	@ 0x13a
 8015a24:	8812      	ldrh	r2, [r2, #0]
 8015a26:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8015a28:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8015a2c:	3302      	adds	r3, #2
 8015a2e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Properties = Char_Properties;
 8015a32:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8015a36:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 8015a3a:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 8015a3c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8015a40:	3301      	adds	r3, #1
 8015a42:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 8015a46:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8015a4a:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 8015a4e:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 8015a50:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8015a54:	3301      	adds	r3, #1
 8015a56:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 8015a5a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8015a5e:	f897 2158 	ldrb.w	r2, [r7, #344]	@ 0x158
 8015a62:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 8015a64:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8015a68:	3301      	adds	r3, #1
 8015a6a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 8015a6e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8015a72:	f897 215c 	ldrb.w	r2, [r7, #348]	@ 0x15c
 8015a76:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 8015a78:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8015a7c:	3301      	adds	r3, #1
 8015a7e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Is_Variable = Is_Variable;
 8015a82:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8015a86:	f897 2160 	ldrb.w	r2, [r7, #352]	@ 0x160
 8015a8a:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 8015a8c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8015a90:	3301      	adds	r3, #1
 8015a92:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8015a96:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8015a9a:	2218      	movs	r2, #24
 8015a9c:	2100      	movs	r1, #0
 8015a9e:	4618      	mov	r0, r3
 8015aa0:	f000 fb2d 	bl	80160fe <Osal_MemSet>
  rq.ogf = 0x3f;
 8015aa4:	233f      	movs	r3, #63	@ 0x3f
 8015aa6:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
  rq.ocf = 0x104;
 8015aaa:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8015aae:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
  rq.cparam = cmd_buffer;
 8015ab2:	f107 0318 	add.w	r3, r7, #24
 8015ab6:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.clen = index_input;
 8015aba:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8015abe:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  rq.rparam = &resp;
 8015ac2:	f107 0314 	add.w	r3, r7, #20
 8015ac6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  rq.rlen = sizeof(resp);
 8015aca:	2303      	movs	r3, #3
 8015acc:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8015ad0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8015ad4:	2100      	movs	r1, #0
 8015ad6:	4618      	mov	r0, r3
 8015ad8:	f000 fd9a 	bl	8016610 <hci_send_req>
 8015adc:	4603      	mov	r3, r0
 8015ade:	2b00      	cmp	r3, #0
 8015ae0:	da01      	bge.n	8015ae6 <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 8015ae2:	23ff      	movs	r3, #255	@ 0xff
 8015ae4:	e017      	b.n	8015b16 <aci_gatt_add_char+0x206>
  if ( resp.Status )
 8015ae6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8015aea:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8015aee:	781b      	ldrb	r3, [r3, #0]
 8015af0:	2b00      	cmp	r3, #0
 8015af2:	d005      	beq.n	8015b00 <aci_gatt_add_char+0x1f0>
    return resp.Status;
 8015af4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8015af8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8015afc:	781b      	ldrb	r3, [r3, #0]
 8015afe:	e00a      	b.n	8015b16 <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 8015b00:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8015b04:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8015b08:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8015b0c:	b29a      	uxth	r2, r3
 8015b0e:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8015b12:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8015b14:	2300      	movs	r3, #0
}
 8015b16:	4618      	mov	r0, r3
 8015b18:	f507 77a2 	add.w	r7, r7, #324	@ 0x144
 8015b1c:	46bd      	mov	sp, r7
 8015b1e:	bd90      	pop	{r4, r7, pc}

08015b20 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 8015b20:	b5b0      	push	{r4, r5, r7, lr}
 8015b22:	b0cc      	sub	sp, #304	@ 0x130
 8015b24:	af00      	add	r7, sp, #0
 8015b26:	4605      	mov	r5, r0
 8015b28:	460c      	mov	r4, r1
 8015b2a:	4610      	mov	r0, r2
 8015b2c:	4619      	mov	r1, r3
 8015b2e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015b32:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8015b36:	462a      	mov	r2, r5
 8015b38:	801a      	strh	r2, [r3, #0]
 8015b3a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015b3e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8015b42:	4622      	mov	r2, r4
 8015b44:	801a      	strh	r2, [r3, #0]
 8015b46:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015b4a:	f2a3 132d 	subw	r3, r3, #301	@ 0x12d
 8015b4e:	4602      	mov	r2, r0
 8015b50:	701a      	strb	r2, [r3, #0]
 8015b52:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015b56:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 8015b5a:	460a      	mov	r2, r1
 8015b5c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 8015b5e:	f107 0310 	add.w	r3, r7, #16
 8015b62:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8015b66:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015b6a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8015b6e:	2200      	movs	r2, #0
 8015b70:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8015b72:	2300      	movs	r3, #0
 8015b74:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_Handle = Service_Handle;
 8015b78:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015b7c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8015b80:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8015b84:	8812      	ldrh	r2, [r2, #0]
 8015b86:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8015b88:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015b8c:	3302      	adds	r3, #2
 8015b8e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Handle = Char_Handle;
 8015b92:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015b96:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8015b9a:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 8015b9e:	8812      	ldrh	r2, [r2, #0]
 8015ba0:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8015ba2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015ba6:	3302      	adds	r3, #2
 8015ba8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Val_Offset = Val_Offset;
 8015bac:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015bb0:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8015bb4:	f2a2 122d 	subw	r2, r2, #301	@ 0x12d
 8015bb8:	7812      	ldrb	r2, [r2, #0]
 8015bba:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8015bbc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015bc0:	3301      	adds	r3, #1
 8015bc2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 8015bc6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015bca:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8015bce:	f5a2 7297 	sub.w	r2, r2, #302	@ 0x12e
 8015bd2:	7812      	ldrb	r2, [r2, #0]
 8015bd4:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8015bd6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015bda:	3301      	adds	r3, #1
 8015bdc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 8015be0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015be4:	1d98      	adds	r0, r3, #6
 8015be6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015bea:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 8015bee:	781b      	ldrb	r3, [r3, #0]
 8015bf0:	461a      	mov	r2, r3
 8015bf2:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8015bf6:	f000 fa72 	bl	80160de <Osal_MemCpy>
  index_input += Char_Value_Length;
 8015bfa:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015bfe:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 8015c02:	781b      	ldrb	r3, [r3, #0]
 8015c04:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8015c08:	4413      	add	r3, r2
 8015c0a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8015c0e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8015c12:	2218      	movs	r2, #24
 8015c14:	2100      	movs	r1, #0
 8015c16:	4618      	mov	r0, r3
 8015c18:	f000 fa71 	bl	80160fe <Osal_MemSet>
  rq.ogf = 0x3f;
 8015c1c:	233f      	movs	r3, #63	@ 0x3f
 8015c1e:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x106;
 8015c22:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8015c26:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8015c2a:	f107 0310 	add.w	r3, r7, #16
 8015c2e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8015c32:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015c36:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8015c3a:	f107 030f 	add.w	r3, r7, #15
 8015c3e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8015c42:	2301      	movs	r3, #1
 8015c44:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8015c48:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8015c4c:	2100      	movs	r1, #0
 8015c4e:	4618      	mov	r0, r3
 8015c50:	f000 fcde 	bl	8016610 <hci_send_req>
 8015c54:	4603      	mov	r3, r0
 8015c56:	2b00      	cmp	r3, #0
 8015c58:	da01      	bge.n	8015c5e <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 8015c5a:	23ff      	movs	r3, #255	@ 0xff
 8015c5c:	e004      	b.n	8015c68 <aci_gatt_update_char_value+0x148>
  return status;
 8015c5e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015c62:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8015c66:	781b      	ldrb	r3, [r3, #0]
}
 8015c68:	4618      	mov	r0, r3
 8015c6a:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8015c6e:	46bd      	mov	sp, r7
 8015c70:	bdb0      	pop	{r4, r5, r7, pc}

08015c72 <aci_gatt_confirm_indication>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gatt_confirm_indication( uint16_t Connection_Handle )
{
 8015c72:	b580      	push	{r7, lr}
 8015c74:	b0cc      	sub	sp, #304	@ 0x130
 8015c76:	af00      	add	r7, sp, #0
 8015c78:	4602      	mov	r2, r0
 8015c7a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015c7e:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8015c82:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_confirm_indication_cp0 *cp0 = (aci_gatt_confirm_indication_cp0*)(cmd_buffer);
 8015c84:	f107 0310 	add.w	r3, r7, #16
 8015c88:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8015c8c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015c90:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8015c94:	2200      	movs	r2, #0
 8015c96:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8015c98:	2300      	movs	r3, #0
 8015c9a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 8015c9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015ca2:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8015ca6:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8015caa:	8812      	ldrh	r2, [r2, #0]
 8015cac:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8015cae:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015cb2:	3302      	adds	r3, #2
 8015cb4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8015cb8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8015cbc:	2218      	movs	r2, #24
 8015cbe:	2100      	movs	r1, #0
 8015cc0:	4618      	mov	r0, r3
 8015cc2:	f000 fa1c 	bl	80160fe <Osal_MemSet>
  rq.ogf = 0x3f;
 8015cc6:	233f      	movs	r3, #63	@ 0x3f
 8015cc8:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x125;
 8015ccc:	f240 1325 	movw	r3, #293	@ 0x125
 8015cd0:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8015cd4:	f107 0310 	add.w	r3, r7, #16
 8015cd8:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8015cdc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015ce0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8015ce4:	f107 030f 	add.w	r3, r7, #15
 8015ce8:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8015cec:	2301      	movs	r3, #1
 8015cee:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8015cf2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8015cf6:	2100      	movs	r1, #0
 8015cf8:	4618      	mov	r0, r3
 8015cfa:	f000 fc89 	bl	8016610 <hci_send_req>
 8015cfe:	4603      	mov	r3, r0
 8015d00:	2b00      	cmp	r3, #0
 8015d02:	da01      	bge.n	8015d08 <aci_gatt_confirm_indication+0x96>
    return BLE_STATUS_TIMEOUT;
 8015d04:	23ff      	movs	r3, #255	@ 0xff
 8015d06:	e004      	b.n	8015d12 <aci_gatt_confirm_indication+0xa0>
  return status;
 8015d08:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015d0c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8015d10:	781b      	ldrb	r3, [r3, #0]
}
 8015d12:	4618      	mov	r0, r3
 8015d14:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8015d18:	46bd      	mov	sp, r7
 8015d1a:	bd80      	pop	{r7, pc}

08015d1c <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 8015d1c:	b580      	push	{r7, lr}
 8015d1e:	b0cc      	sub	sp, #304	@ 0x130
 8015d20:	af00      	add	r7, sp, #0
 8015d22:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015d26:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8015d2a:	601a      	str	r2, [r3, #0]
 8015d2c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015d30:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8015d34:	4602      	mov	r2, r0
 8015d36:	701a      	strb	r2, [r3, #0]
 8015d38:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015d3c:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8015d40:	460a      	mov	r2, r1
 8015d42:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 8015d44:	f107 0310 	add.w	r3, r7, #16
 8015d48:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8015d4c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015d50:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8015d54:	2200      	movs	r2, #0
 8015d56:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8015d58:	2300      	movs	r3, #0
 8015d5a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Offset = Offset;
 8015d5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015d62:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8015d66:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8015d6a:	7812      	ldrb	r2, [r2, #0]
 8015d6c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8015d6e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015d72:	3301      	adds	r3, #1
 8015d74:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Length = Length;
 8015d78:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015d7c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8015d80:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8015d84:	7812      	ldrb	r2, [r2, #0]
 8015d86:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8015d88:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015d8c:	3301      	adds	r3, #1
 8015d8e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 8015d92:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015d96:	1c98      	adds	r0, r3, #2
 8015d98:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015d9c:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8015da0:	781a      	ldrb	r2, [r3, #0]
 8015da2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015da6:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8015daa:	6819      	ldr	r1, [r3, #0]
 8015dac:	f000 f997 	bl	80160de <Osal_MemCpy>
  index_input += Length;
 8015db0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015db4:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8015db8:	781b      	ldrb	r3, [r3, #0]
 8015dba:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8015dbe:	4413      	add	r3, r2
 8015dc0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8015dc4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8015dc8:	2218      	movs	r2, #24
 8015dca:	2100      	movs	r1, #0
 8015dcc:	4618      	mov	r0, r3
 8015dce:	f000 f996 	bl	80160fe <Osal_MemSet>
  rq.ogf = 0x3f;
 8015dd2:	233f      	movs	r3, #63	@ 0x3f
 8015dd4:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00c;
 8015dd8:	230c      	movs	r3, #12
 8015dda:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8015dde:	f107 0310 	add.w	r3, r7, #16
 8015de2:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8015de6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015dea:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8015dee:	f107 030f 	add.w	r3, r7, #15
 8015df2:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8015df6:	2301      	movs	r3, #1
 8015df8:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8015dfc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8015e00:	2100      	movs	r1, #0
 8015e02:	4618      	mov	r0, r3
 8015e04:	f000 fc04 	bl	8016610 <hci_send_req>
 8015e08:	4603      	mov	r3, r0
 8015e0a:	2b00      	cmp	r3, #0
 8015e0c:	da01      	bge.n	8015e12 <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 8015e0e:	23ff      	movs	r3, #255	@ 0xff
 8015e10:	e004      	b.n	8015e1c <aci_hal_write_config_data+0x100>
  return status;
 8015e12:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015e16:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8015e1a:	781b      	ldrb	r3, [r3, #0]
}
 8015e1c:	4618      	mov	r0, r3
 8015e1e:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8015e22:	46bd      	mov	sp, r7
 8015e24:	bd80      	pop	{r7, pc}

08015e26 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 8015e26:	b580      	push	{r7, lr}
 8015e28:	b0cc      	sub	sp, #304	@ 0x130
 8015e2a:	af00      	add	r7, sp, #0
 8015e2c:	4602      	mov	r2, r0
 8015e2e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015e32:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8015e36:	701a      	strb	r2, [r3, #0]
 8015e38:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015e3c:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8015e40:	460a      	mov	r2, r1
 8015e42:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 8015e44:	f107 0310 	add.w	r3, r7, #16
 8015e48:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8015e4c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015e50:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8015e54:	2200      	movs	r2, #0
 8015e56:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8015e58:	2300      	movs	r3, #0
 8015e5a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->En_High_Power = En_High_Power;
 8015e5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015e62:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8015e66:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8015e6a:	7812      	ldrb	r2, [r2, #0]
 8015e6c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8015e6e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015e72:	3301      	adds	r3, #1
 8015e74:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->PA_Level = PA_Level;
 8015e78:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015e7c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8015e80:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8015e84:	7812      	ldrb	r2, [r2, #0]
 8015e86:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8015e88:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015e8c:	3301      	adds	r3, #1
 8015e8e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8015e92:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8015e96:	2218      	movs	r2, #24
 8015e98:	2100      	movs	r1, #0
 8015e9a:	4618      	mov	r0, r3
 8015e9c:	f000 f92f 	bl	80160fe <Osal_MemSet>
  rq.ogf = 0x3f;
 8015ea0:	233f      	movs	r3, #63	@ 0x3f
 8015ea2:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00f;
 8015ea6:	230f      	movs	r3, #15
 8015ea8:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8015eac:	f107 0310 	add.w	r3, r7, #16
 8015eb0:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8015eb4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015eb8:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8015ebc:	f107 030f 	add.w	r3, r7, #15
 8015ec0:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8015ec4:	2301      	movs	r3, #1
 8015ec6:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8015eca:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8015ece:	2100      	movs	r1, #0
 8015ed0:	4618      	mov	r0, r3
 8015ed2:	f000 fb9d 	bl	8016610 <hci_send_req>
 8015ed6:	4603      	mov	r3, r0
 8015ed8:	2b00      	cmp	r3, #0
 8015eda:	da01      	bge.n	8015ee0 <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 8015edc:	23ff      	movs	r3, #255	@ 0xff
 8015ede:	e004      	b.n	8015eea <aci_hal_set_tx_power_level+0xc4>
  return status;
 8015ee0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015ee4:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8015ee8:	781b      	ldrb	r3, [r3, #0]
}
 8015eea:	4618      	mov	r0, r3
 8015eec:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8015ef0:	46bd      	mov	sp, r7
 8015ef2:	bd80      	pop	{r7, pc}

08015ef4 <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 8015ef4:	b580      	push	{r7, lr}
 8015ef6:	b0cc      	sub	sp, #304	@ 0x130
 8015ef8:	af00      	add	r7, sp, #0
 8015efa:	4602      	mov	r2, r0
 8015efc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015f00:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8015f04:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 8015f06:	f107 0310 	add.w	r3, r7, #16
 8015f0a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8015f0e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015f12:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8015f16:	2200      	movs	r2, #0
 8015f18:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8015f1a:	2300      	movs	r3, #0
 8015f1c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 8015f20:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015f24:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8015f28:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8015f2c:	8812      	ldrh	r2, [r2, #0]
 8015f2e:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8015f30:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015f34:	3302      	adds	r3, #2
 8015f36:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8015f3a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8015f3e:	2218      	movs	r2, #24
 8015f40:	2100      	movs	r1, #0
 8015f42:	4618      	mov	r0, r3
 8015f44:	f000 f8db 	bl	80160fe <Osal_MemSet>
  rq.ogf = 0x3f;
 8015f48:	233f      	movs	r3, #63	@ 0x3f
 8015f4a:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x018;
 8015f4e:	2318      	movs	r3, #24
 8015f50:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8015f54:	f107 0310 	add.w	r3, r7, #16
 8015f58:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8015f5c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015f60:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8015f64:	f107 030f 	add.w	r3, r7, #15
 8015f68:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8015f6c:	2301      	movs	r3, #1
 8015f6e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8015f72:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8015f76:	2100      	movs	r1, #0
 8015f78:	4618      	mov	r0, r3
 8015f7a:	f000 fb49 	bl	8016610 <hci_send_req>
 8015f7e:	4603      	mov	r3, r0
 8015f80:	2b00      	cmp	r3, #0
 8015f82:	da01      	bge.n	8015f88 <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 8015f84:	23ff      	movs	r3, #255	@ 0xff
 8015f86:	e004      	b.n	8015f92 <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 8015f88:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015f8c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8015f90:	781b      	ldrb	r3, [r3, #0]
}
 8015f92:	4618      	mov	r0, r3
 8015f94:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8015f98:	46bd      	mov	sp, r7
 8015f9a:	bd80      	pop	{r7, pc}

08015f9c <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 8015f9c:	b580      	push	{r7, lr}
 8015f9e:	b088      	sub	sp, #32
 8015fa0:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8015fa2:	2300      	movs	r3, #0
 8015fa4:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8015fa6:	f107 0308 	add.w	r3, r7, #8
 8015faa:	2218      	movs	r2, #24
 8015fac:	2100      	movs	r1, #0
 8015fae:	4618      	mov	r0, r3
 8015fb0:	f000 f8a5 	bl	80160fe <Osal_MemSet>
  rq.ogf = 0x03;
 8015fb4:	2303      	movs	r3, #3
 8015fb6:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 8015fb8:	2303      	movs	r3, #3
 8015fba:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8015fbc:	1dfb      	adds	r3, r7, #7
 8015fbe:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8015fc0:	2301      	movs	r3, #1
 8015fc2:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8015fc4:	f107 0308 	add.w	r3, r7, #8
 8015fc8:	2100      	movs	r1, #0
 8015fca:	4618      	mov	r0, r3
 8015fcc:	f000 fb20 	bl	8016610 <hci_send_req>
 8015fd0:	4603      	mov	r3, r0
 8015fd2:	2b00      	cmp	r3, #0
 8015fd4:	da01      	bge.n	8015fda <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 8015fd6:	23ff      	movs	r3, #255	@ 0xff
 8015fd8:	e000      	b.n	8015fdc <hci_reset+0x40>
  return status;
 8015fda:	79fb      	ldrb	r3, [r7, #7]
}
 8015fdc:	4618      	mov	r0, r3
 8015fde:	3720      	adds	r7, #32
 8015fe0:	46bd      	mov	sp, r7
 8015fe2:	bd80      	pop	{r7, pc}

08015fe4 <hci_le_set_default_phy>:
}

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 8015fe4:	b590      	push	{r4, r7, lr}
 8015fe6:	b0cd      	sub	sp, #308	@ 0x134
 8015fe8:	af00      	add	r7, sp, #0
 8015fea:	4604      	mov	r4, r0
 8015fec:	4608      	mov	r0, r1
 8015fee:	4611      	mov	r1, r2
 8015ff0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015ff4:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8015ff8:	4622      	mov	r2, r4
 8015ffa:	701a      	strb	r2, [r3, #0]
 8015ffc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8016000:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8016004:	4602      	mov	r2, r0
 8016006:	701a      	strb	r2, [r3, #0]
 8016008:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801600c:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8016010:	460a      	mov	r2, r1
 8016012:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 8016014:	f107 0310 	add.w	r3, r7, #16
 8016018:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 801601c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8016020:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8016024:	2200      	movs	r2, #0
 8016026:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8016028:	2300      	movs	r3, #0
 801602a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 801602e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8016032:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8016036:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 801603a:	7812      	ldrb	r2, [r2, #0]
 801603c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 801603e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8016042:	3301      	adds	r3, #1
 8016044:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->TX_PHYS = TX_PHYS;
 8016048:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801604c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8016050:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8016054:	7812      	ldrb	r2, [r2, #0]
 8016056:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8016058:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801605c:	3301      	adds	r3, #1
 801605e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->RX_PHYS = RX_PHYS;
 8016062:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8016066:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 801606a:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 801606e:	7812      	ldrb	r2, [r2, #0]
 8016070:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8016072:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8016076:	3301      	adds	r3, #1
 8016078:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 801607c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8016080:	2218      	movs	r2, #24
 8016082:	2100      	movs	r1, #0
 8016084:	4618      	mov	r0, r3
 8016086:	f000 f83a 	bl	80160fe <Osal_MemSet>
  rq.ogf = 0x08;
 801608a:	2308      	movs	r3, #8
 801608c:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x031;
 8016090:	2331      	movs	r3, #49	@ 0x31
 8016092:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8016096:	f107 0310 	add.w	r3, r7, #16
 801609a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 801609e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80160a2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80160a6:	f107 030f 	add.w	r3, r7, #15
 80160aa:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80160ae:	2301      	movs	r3, #1
 80160b0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80160b4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80160b8:	2100      	movs	r1, #0
 80160ba:	4618      	mov	r0, r3
 80160bc:	f000 faa8 	bl	8016610 <hci_send_req>
 80160c0:	4603      	mov	r3, r0
 80160c2:	2b00      	cmp	r3, #0
 80160c4:	da01      	bge.n	80160ca <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 80160c6:	23ff      	movs	r3, #255	@ 0xff
 80160c8:	e004      	b.n	80160d4 <hci_le_set_default_phy+0xf0>
  return status;
 80160ca:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80160ce:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80160d2:	781b      	ldrb	r3, [r3, #0]
}
 80160d4:	4618      	mov	r0, r3
 80160d6:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 80160da:	46bd      	mov	sp, r7
 80160dc:	bd90      	pop	{r4, r7, pc}

080160de <Osal_MemCpy>:
 * Osal_MemCpy
 *
 */

void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 80160de:	b580      	push	{r7, lr}
 80160e0:	b084      	sub	sp, #16
 80160e2:	af00      	add	r7, sp, #0
 80160e4:	60f8      	str	r0, [r7, #12]
 80160e6:	60b9      	str	r1, [r7, #8]
 80160e8:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size );
 80160ea:	687a      	ldr	r2, [r7, #4]
 80160ec:	68b9      	ldr	r1, [r7, #8]
 80160ee:	68f8      	ldr	r0, [r7, #12]
 80160f0:	f005 fc3f 	bl	801b972 <memcpy>
 80160f4:	4603      	mov	r3, r0
}
 80160f6:	4618      	mov	r0, r3
 80160f8:	3710      	adds	r7, #16
 80160fa:	46bd      	mov	sp, r7
 80160fc:	bd80      	pop	{r7, pc}

080160fe <Osal_MemSet>:
 * Osal_MemSet
 *
 */

void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 80160fe:	b580      	push	{r7, lr}
 8016100:	b084      	sub	sp, #16
 8016102:	af00      	add	r7, sp, #0
 8016104:	60f8      	str	r0, [r7, #12]
 8016106:	60b9      	str	r1, [r7, #8]
 8016108:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 801610a:	687a      	ldr	r2, [r7, #4]
 801610c:	68b9      	ldr	r1, [r7, #8]
 801610e:	68f8      	ldr	r0, [r7, #12]
 8016110:	f005 fb13 	bl	801b73a <memset>
 8016114:	4603      	mov	r3, r0
}
 8016116:	4618      	mov	r0, r3
 8016118:	3710      	adds	r7, #16
 801611a:	46bd      	mov	sp, r7
 801611c:	bd80      	pop	{r7, pc}

0801611e <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 801611e:	b480      	push	{r7}
 8016120:	af00      	add	r7, sp, #0
  return;
 8016122:	bf00      	nop
}
 8016124:	46bd      	mov	sp, r7
 8016126:	f85d 7b04 	ldr.w	r7, [sp], #4
 801612a:	4770      	bx	lr

0801612c <BLS_Init>:

__WEAK void BLS_Init( void )
{
 801612c:	b480      	push	{r7}
 801612e:	af00      	add	r7, sp, #0
  return;
 8016130:	bf00      	nop
}
 8016132:	46bd      	mov	sp, r7
 8016134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016138:	4770      	bx	lr

0801613a <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 801613a:	b480      	push	{r7}
 801613c:	af00      	add	r7, sp, #0
  return;
 801613e:	bf00      	nop
}
 8016140:	46bd      	mov	sp, r7
 8016142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016146:	4770      	bx	lr

08016148 <DIS_Init>:
__WEAK void DIS_Init( void )
{
 8016148:	b480      	push	{r7}
 801614a:	af00      	add	r7, sp, #0
  return;
 801614c:	bf00      	nop
}
 801614e:	46bd      	mov	sp, r7
 8016150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016154:	4770      	bx	lr

08016156 <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 8016156:	b480      	push	{r7}
 8016158:	af00      	add	r7, sp, #0
  return;
 801615a:	bf00      	nop
}
 801615c:	46bd      	mov	sp, r7
 801615e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016162:	4770      	bx	lr

08016164 <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 8016164:	b480      	push	{r7}
 8016166:	af00      	add	r7, sp, #0
  return;
 8016168:	bf00      	nop
}
 801616a:	46bd      	mov	sp, r7
 801616c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016170:	4770      	bx	lr

08016172 <HRS_Init>:
__WEAK void HRS_Init( void )
{
 8016172:	b480      	push	{r7}
 8016174:	af00      	add	r7, sp, #0
  return;
 8016176:	bf00      	nop
}
 8016178:	46bd      	mov	sp, r7
 801617a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801617e:	4770      	bx	lr

08016180 <HTS_Init>:
__WEAK void HTS_Init( void )
{
 8016180:	b480      	push	{r7}
 8016182:	af00      	add	r7, sp, #0
  return;
 8016184:	bf00      	nop
}
 8016186:	46bd      	mov	sp, r7
 8016188:	f85d 7b04 	ldr.w	r7, [sp], #4
 801618c:	4770      	bx	lr

0801618e <IAS_Init>:
__WEAK void IAS_Init( void )
{
 801618e:	b480      	push	{r7}
 8016190:	af00      	add	r7, sp, #0
  return;
 8016192:	bf00      	nop
}
 8016194:	46bd      	mov	sp, r7
 8016196:	f85d 7b04 	ldr.w	r7, [sp], #4
 801619a:	4770      	bx	lr

0801619c <LLS_Init>:
__WEAK void LLS_Init( void )
{
 801619c:	b480      	push	{r7}
 801619e:	af00      	add	r7, sp, #0
  return;
 80161a0:	bf00      	nop
}
 80161a2:	46bd      	mov	sp, r7
 80161a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161a8:	4770      	bx	lr

080161aa <TPS_Init>:
__WEAK void TPS_Init( void )
{
 80161aa:	b480      	push	{r7}
 80161ac:	af00      	add	r7, sp, #0
  return;
 80161ae:	bf00      	nop
}
 80161b0:	46bd      	mov	sp, r7
 80161b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161b6:	4770      	bx	lr

080161b8 <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 80161b8:	b480      	push	{r7}
 80161ba:	af00      	add	r7, sp, #0
  return;
 80161bc:	bf00      	nop
}
 80161be:	46bd      	mov	sp, r7
 80161c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161c4:	4770      	bx	lr

080161c6 <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 80161c6:	b480      	push	{r7}
 80161c8:	af00      	add	r7, sp, #0
  return;
 80161ca:	bf00      	nop
}
 80161cc:	46bd      	mov	sp, r7
 80161ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161d2:	4770      	bx	lr

080161d4 <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 80161d4:	b480      	push	{r7}
 80161d6:	af00      	add	r7, sp, #0
  return;
 80161d8:	bf00      	nop
}
 80161da:	46bd      	mov	sp, r7
 80161dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161e0:	4770      	bx	lr

080161e2 <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 80161e2:	b480      	push	{r7}
 80161e4:	af00      	add	r7, sp, #0
  return;
 80161e6:	bf00      	nop
}
 80161e8:	46bd      	mov	sp, r7
 80161ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161ee:	4770      	bx	lr

080161f0 <MESH_Init>:
__WEAK void MESH_Init( void )
{
 80161f0:	b480      	push	{r7}
 80161f2:	af00      	add	r7, sp, #0
  return;
 80161f4:	bf00      	nop
}
 80161f6:	46bd      	mov	sp, r7
 80161f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161fc:	4770      	bx	lr

080161fe <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 80161fe:	b480      	push	{r7}
 8016200:	af00      	add	r7, sp, #0
  return;
 8016202:	bf00      	nop
}
 8016204:	46bd      	mov	sp, r7
 8016206:	f85d 7b04 	ldr.w	r7, [sp], #4
 801620a:	4770      	bx	lr

0801620c <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 801620c:	b580      	push	{r7, lr}
 801620e:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 8016210:	4b04      	ldr	r3, [pc, #16]	@ (8016224 <SVCCTL_Init+0x18>)
 8016212:	2200      	movs	r2, #0
 8016214:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 8016216:	4b04      	ldr	r3, [pc, #16]	@ (8016228 <SVCCTL_Init+0x1c>)
 8016218:	2200      	movs	r2, #0
 801621a:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 801621c:	f000 f806 	bl	801622c <SVCCTL_SvcInit>

  return;
 8016220:	bf00      	nop
}
 8016222:	bd80      	pop	{r7, pc}
 8016224:	20000320 	.word	0x20000320
 8016228:	20000340 	.word	0x20000340

0801622c <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 801622c:	b580      	push	{r7, lr}
 801622e:	af00      	add	r7, sp, #0
  BAS_Init();
 8016230:	f7ff ff75 	bl	801611e <BAS_Init>

  BLS_Init();
 8016234:	f7ff ff7a 	bl	801612c <BLS_Init>

  CRS_STM_Init();
 8016238:	f7ff ff7f 	bl	801613a <CRS_STM_Init>

  DIS_Init();
 801623c:	f7ff ff84 	bl	8016148 <DIS_Init>

  EDS_STM_Init();
 8016240:	f7ff ff89 	bl	8016156 <EDS_STM_Init>

  HIDS_Init();
 8016244:	f7ff ff8e 	bl	8016164 <HIDS_Init>

  HRS_Init();
 8016248:	f7ff ff93 	bl	8016172 <HRS_Init>

  HTS_Init();
 801624c:	f7ff ff98 	bl	8016180 <HTS_Init>

  IAS_Init();
 8016250:	f7ff ff9d 	bl	801618e <IAS_Init>

  LLS_Init();
 8016254:	f7ff ffa2 	bl	801619c <LLS_Init>

  TPS_Init();
 8016258:	f7ff ffa7 	bl	80161aa <TPS_Init>

  MOTENV_STM_Init();
 801625c:	f7ff ffac 	bl	80161b8 <MOTENV_STM_Init>

  P2PS_STM_Init();
 8016260:	f7ff ffb1 	bl	80161c6 <P2PS_STM_Init>

  ZDD_STM_Init();
 8016264:	f7ff ffb6 	bl	80161d4 <ZDD_STM_Init>

  OTAS_STM_Init();
 8016268:	f7ff ffbb 	bl	80161e2 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 801626c:	f7ff ffc7 	bl	80161fe <BVOPUS_STM_Init>

  MESH_Init();
 8016270:	f7ff ffbe 	bl	80161f0 <MESH_Init>

  SVCCTL_InitCustomSvc();
 8016274:	f002 f844 	bl	8018300 <SVCCTL_InitCustomSvc>
  
  return;
 8016278:	bf00      	nop
}
 801627a:	bd80      	pop	{r7, pc}

0801627c <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 801627c:	b480      	push	{r7}
 801627e:	b083      	sub	sp, #12
 8016280:	af00      	add	r7, sp, #0
 8016282:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 8016284:	4b09      	ldr	r3, [pc, #36]	@ (80162ac <SVCCTL_RegisterSvcHandler+0x30>)
 8016286:	7f1b      	ldrb	r3, [r3, #28]
 8016288:	4619      	mov	r1, r3
 801628a:	4a08      	ldr	r2, [pc, #32]	@ (80162ac <SVCCTL_RegisterSvcHandler+0x30>)
 801628c:	687b      	ldr	r3, [r7, #4]
 801628e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 8016292:	4b06      	ldr	r3, [pc, #24]	@ (80162ac <SVCCTL_RegisterSvcHandler+0x30>)
 8016294:	7f1b      	ldrb	r3, [r3, #28]
 8016296:	3301      	adds	r3, #1
 8016298:	b2da      	uxtb	r2, r3
 801629a:	4b04      	ldr	r3, [pc, #16]	@ (80162ac <SVCCTL_RegisterSvcHandler+0x30>)
 801629c:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 801629e:	bf00      	nop
}
 80162a0:	370c      	adds	r7, #12
 80162a2:	46bd      	mov	sp, r7
 80162a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162a8:	4770      	bx	lr
 80162aa:	bf00      	nop
 80162ac:	20000320 	.word	0x20000320

080162b0 <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 80162b0:	b580      	push	{r7, lr}
 80162b2:	b086      	sub	sp, #24
 80162b4:	af00      	add	r7, sp, #0
 80162b6:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 80162b8:	687b      	ldr	r3, [r7, #4]
 80162ba:	3301      	adds	r3, #1
 80162bc:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 80162be:	2300      	movs	r3, #0
 80162c0:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 80162c2:	693b      	ldr	r3, [r7, #16]
 80162c4:	781b      	ldrb	r3, [r3, #0]
 80162c6:	2bff      	cmp	r3, #255	@ 0xff
 80162c8:	d125      	bne.n	8016316 <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 80162ca:	693b      	ldr	r3, [r7, #16]
 80162cc:	3302      	adds	r3, #2
 80162ce:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 80162d0:	68fb      	ldr	r3, [r7, #12]
 80162d2:	881b      	ldrh	r3, [r3, #0]
 80162d4:	b29b      	uxth	r3, r3
 80162d6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80162da:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80162de:	d118      	bne.n	8016312 <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 80162e0:	2300      	movs	r3, #0
 80162e2:	757b      	strb	r3, [r7, #21]
 80162e4:	e00d      	b.n	8016302 <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 80162e6:	7d7b      	ldrb	r3, [r7, #21]
 80162e8:	4a1a      	ldr	r2, [pc, #104]	@ (8016354 <SVCCTL_UserEvtRx+0xa4>)
 80162ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80162ee:	6878      	ldr	r0, [r7, #4]
 80162f0:	4798      	blx	r3
 80162f2:	4603      	mov	r3, r0
 80162f4:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 80162f6:	7dfb      	ldrb	r3, [r7, #23]
 80162f8:	2b00      	cmp	r3, #0
 80162fa:	d108      	bne.n	801630e <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 80162fc:	7d7b      	ldrb	r3, [r7, #21]
 80162fe:	3301      	adds	r3, #1
 8016300:	757b      	strb	r3, [r7, #21]
 8016302:	4b14      	ldr	r3, [pc, #80]	@ (8016354 <SVCCTL_UserEvtRx+0xa4>)
 8016304:	7f1b      	ldrb	r3, [r3, #28]
 8016306:	7d7a      	ldrb	r2, [r7, #21]
 8016308:	429a      	cmp	r2, r3
 801630a:	d3ec      	bcc.n	80162e6 <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 801630c:	e002      	b.n	8016314 <SVCCTL_UserEvtRx+0x64>
              break;
 801630e:	bf00      	nop
          break;
 8016310:	e000      	b.n	8016314 <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 8016312:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 8016314:	e000      	b.n	8016318 <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 8016316:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the application.
   */
  switch (event_notification_status)
 8016318:	7dfb      	ldrb	r3, [r7, #23]
 801631a:	2b02      	cmp	r3, #2
 801631c:	d00f      	beq.n	801633e <SVCCTL_UserEvtRx+0x8e>
 801631e:	2b02      	cmp	r3, #2
 8016320:	dc10      	bgt.n	8016344 <SVCCTL_UserEvtRx+0x94>
 8016322:	2b00      	cmp	r3, #0
 8016324:	d002      	beq.n	801632c <SVCCTL_UserEvtRx+0x7c>
 8016326:	2b01      	cmp	r3, #1
 8016328:	d006      	beq.n	8016338 <SVCCTL_UserEvtRx+0x88>
 801632a:	e00b      	b.n	8016344 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 801632c:	6878      	ldr	r0, [r7, #4]
 801632e:	f001 fc7f 	bl	8017c30 <SVCCTL_App_Notification>
 8016332:	4603      	mov	r3, r0
 8016334:	75bb      	strb	r3, [r7, #22]
      break;
 8016336:	e008      	b.n	801634a <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 8016338:	2301      	movs	r3, #1
 801633a:	75bb      	strb	r3, [r7, #22]
      break;
 801633c:	e005      	b.n	801634a <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 801633e:	2300      	movs	r3, #0
 8016340:	75bb      	strb	r3, [r7, #22]
      break;
 8016342:	e002      	b.n	801634a <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 8016344:	2301      	movs	r3, #1
 8016346:	75bb      	strb	r3, [r7, #22]
      break;
 8016348:	bf00      	nop
  }

  return (return_status);
 801634a:	7dbb      	ldrb	r3, [r7, #22]
}
 801634c:	4618      	mov	r0, r3
 801634e:	3718      	adds	r7, #24
 8016350:	46bd      	mov	sp, r7
 8016352:	bd80      	pop	{r7, pc}
 8016354:	20000320 	.word	0x20000320

08016358 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 8016358:	b580      	push	{r7, lr}
 801635a:	b088      	sub	sp, #32
 801635c:	af00      	add	r7, sp, #0
 801635e:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8016360:	f107 030c 	add.w	r3, r7, #12
 8016364:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 8016366:	687b      	ldr	r3, [r7, #4]
 8016368:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 801636c:	69fb      	ldr	r3, [r7, #28]
 801636e:	212e      	movs	r1, #46	@ 0x2e
 8016370:	f64f 4066 	movw	r0, #64614	@ 0xfc66
 8016374:	f000 fae8 	bl	8016948 <shci_send>
            p_rsp );
 
  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8016378:	69fb      	ldr	r3, [r7, #28]
 801637a:	330b      	adds	r3, #11
 801637c:	78db      	ldrb	r3, [r3, #3]
}
 801637e:	4618      	mov	r0, r3
 8016380:	3720      	adds	r7, #32
 8016382:	46bd      	mov	sp, r7
 8016384:	bd80      	pop	{r7, pc}

08016386 <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 8016386:	b580      	push	{r7, lr}
 8016388:	b088      	sub	sp, #32
 801638a:	af00      	add	r7, sp, #0
 801638c:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 801638e:	f107 030c 	add.w	r3, r7, #12
 8016392:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 8016394:	687b      	ldr	r3, [r7, #4]
 8016396:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 801639a:	69fb      	ldr	r3, [r7, #28]
 801639c:	210f      	movs	r1, #15
 801639e:	f64f 4068 	movw	r0, #64616	@ 0xfc68
 80163a2:	f000 fad1 	bl	8016948 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 80163a6:	69fb      	ldr	r3, [r7, #28]
 80163a8:	330b      	adds	r3, #11
 80163aa:	78db      	ldrb	r3, [r3, #3]
}
 80163ac:	4618      	mov	r0, r3
 80163ae:	3720      	adds	r7, #32
 80163b0:	46bd      	mov	sp, r7
 80163b2:	bd80      	pop	{r7, pc}

080163b4 <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 80163b4:	b580      	push	{r7, lr}
 80163b6:	b088      	sub	sp, #32
 80163b8:	af00      	add	r7, sp, #0
 80163ba:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 80163bc:	f107 030c 	add.w	r3, r7, #12
 80163c0:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 80163c2:	69fb      	ldr	r3, [r7, #28]
 80163c4:	687a      	ldr	r2, [r7, #4]
 80163c6:	2110      	movs	r1, #16
 80163c8:	f64f 4075 	movw	r0, #64629	@ 0xfc75
 80163cc:	f000 fabc 	bl	8016948 <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 80163d0:	69fb      	ldr	r3, [r7, #28]
 80163d2:	330b      	adds	r3, #11
 80163d4:	78db      	ldrb	r3, [r3, #3]
}
 80163d6:	4618      	mov	r0, r3
 80163d8:	3720      	adds	r7, #32
 80163da:	46bd      	mov	sp, r7
 80163dc:	bd80      	pop	{r7, pc}
	...

080163e0 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 80163e0:	b480      	push	{r7}
 80163e2:	b08b      	sub	sp, #44	@ 0x2c
 80163e4:	af00      	add	r7, sp, #0
 80163e6:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 80163e8:	2300      	movs	r3, #0
 80163ea:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 80163ec:	2300      	movs	r3, #0
 80163ee:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 80163f0:	2300      	movs	r3, #0
 80163f2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t wireless_firmware_memorySize = 0;
 80163f4:	2300      	movs	r3, #0
 80163f6:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 80163f8:	2300      	movs	r3, #0
 80163fa:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 80163fc:	2300      	movs	r3, #0
 80163fe:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 8016400:	2300      	movs	r3, #0
 8016402:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 8016404:	2300      	movs	r3, #0
 8016406:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 8016408:	4b4a      	ldr	r3, [pc, #296]	@ (8016534 <SHCI_GetWirelessFwInfo+0x154>)
 801640a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801640c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8016410:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 8016412:	693b      	ldr	r3, [r7, #16]
 8016414:	009b      	lsls	r3, r3, #2
 8016416:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 801641a:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 801641e:	681b      	ldr	r3, [r3, #0]
 8016420:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 8016422:	68bb      	ldr	r3, [r7, #8]
 8016424:	681b      	ldr	r3, [r3, #0]
 8016426:	4a44      	ldr	r2, [pc, #272]	@ (8016538 <SHCI_GetWirelessFwInfo+0x158>)
 8016428:	4293      	cmp	r3, r2
 801642a:	d10f      	bne.n	801644c <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 801642c:	68bb      	ldr	r3, [r7, #8]
 801642e:	695b      	ldr	r3, [r3, #20]
 8016430:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 8016432:	68bb      	ldr	r3, [r7, #8]
 8016434:	699b      	ldr	r3, [r3, #24]
 8016436:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 8016438:	68bb      	ldr	r3, [r7, #8]
 801643a:	69db      	ldr	r3, [r3, #28]
 801643c:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 801643e:	68bb      	ldr	r3, [r7, #8]
 8016440:	68db      	ldr	r3, [r3, #12]
 8016442:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 8016444:	68bb      	ldr	r3, [r7, #8]
 8016446:	691b      	ldr	r3, [r3, #16]
 8016448:	617b      	str	r3, [r7, #20]
 801644a:	e01a      	b.n	8016482 <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 801644c:	693b      	ldr	r3, [r7, #16]
 801644e:	009b      	lsls	r3, r3, #2
 8016450:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8016454:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 8016458:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 801645a:	68fb      	ldr	r3, [r7, #12]
 801645c:	681b      	ldr	r3, [r3, #0]
 801645e:	691b      	ldr	r3, [r3, #16]
 8016460:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 8016462:	68fb      	ldr	r3, [r7, #12]
 8016464:	681b      	ldr	r3, [r3, #0]
 8016466:	695b      	ldr	r3, [r3, #20]
 8016468:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 801646a:	68fb      	ldr	r3, [r7, #12]
 801646c:	681b      	ldr	r3, [r3, #0]
 801646e:	699b      	ldr	r3, [r3, #24]
 8016470:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 8016472:	68fb      	ldr	r3, [r7, #12]
 8016474:	681b      	ldr	r3, [r3, #0]
 8016476:	685b      	ldr	r3, [r3, #4]
 8016478:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 801647a:	68fb      	ldr	r3, [r7, #12]
 801647c:	681b      	ldr	r3, [r3, #0]
 801647e:	689b      	ldr	r3, [r3, #8]
 8016480:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8016482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016484:	0e1b      	lsrs	r3, r3, #24
 8016486:	b2da      	uxtb	r2, r3
 8016488:	687b      	ldr	r3, [r7, #4]
 801648a:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 801648c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801648e:	0c1b      	lsrs	r3, r3, #16
 8016490:	b2da      	uxtb	r2, r3
 8016492:	687b      	ldr	r3, [r7, #4]
 8016494:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8016496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016498:	0a1b      	lsrs	r3, r3, #8
 801649a:	b2da      	uxtb	r2, r3
 801649c:	687b      	ldr	r3, [r7, #4]
 801649e:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 80164a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80164a2:	091b      	lsrs	r3, r3, #4
 80164a4:	b2db      	uxtb	r3, r3
 80164a6:	f003 030f 	and.w	r3, r3, #15
 80164aa:	b2da      	uxtb	r2, r3
 80164ac:	687b      	ldr	r3, [r7, #4]
 80164ae:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 80164b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80164b2:	b2db      	uxtb	r3, r3
 80164b4:	f003 030f 	and.w	r3, r3, #15
 80164b8:	b2da      	uxtb	r2, r3
 80164ba:	687b      	ldr	r3, [r7, #4]
 80164bc:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 80164be:	6a3b      	ldr	r3, [r7, #32]
 80164c0:	0e1b      	lsrs	r3, r3, #24
 80164c2:	b2da      	uxtb	r2, r3
 80164c4:	687b      	ldr	r3, [r7, #4]
 80164c6:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 80164c8:	6a3b      	ldr	r3, [r7, #32]
 80164ca:	0c1b      	lsrs	r3, r3, #16
 80164cc:	b2da      	uxtb	r2, r3
 80164ce:	687b      	ldr	r3, [r7, #4]
 80164d0:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 80164d2:	6a3b      	ldr	r3, [r7, #32]
 80164d4:	0a1b      	lsrs	r3, r3, #8
 80164d6:	b2da      	uxtb	r2, r3
 80164d8:	687b      	ldr	r3, [r7, #4]
 80164da:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 80164dc:	6a3b      	ldr	r3, [r7, #32]
 80164de:	b2da      	uxtb	r2, r3
 80164e0:	687b      	ldr	r3, [r7, #4]
 80164e2:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 80164e4:	69fb      	ldr	r3, [r7, #28]
 80164e6:	b2da      	uxtb	r2, r3
 80164e8:	687b      	ldr	r3, [r7, #4]
 80164ea:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 80164ec:	69bb      	ldr	r3, [r7, #24]
 80164ee:	0e1b      	lsrs	r3, r3, #24
 80164f0:	b2da      	uxtb	r2, r3
 80164f2:	687b      	ldr	r3, [r7, #4]
 80164f4:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 80164f6:	69bb      	ldr	r3, [r7, #24]
 80164f8:	0c1b      	lsrs	r3, r3, #16
 80164fa:	b2da      	uxtb	r2, r3
 80164fc:	687b      	ldr	r3, [r7, #4]
 80164fe:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8016500:	69bb      	ldr	r3, [r7, #24]
 8016502:	0a1b      	lsrs	r3, r3, #8
 8016504:	b2da      	uxtb	r2, r3
 8016506:	687b      	ldr	r3, [r7, #4]
 8016508:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 801650a:	697b      	ldr	r3, [r7, #20]
 801650c:	0e1b      	lsrs	r3, r3, #24
 801650e:	b2da      	uxtb	r2, r3
 8016510:	687b      	ldr	r3, [r7, #4]
 8016512:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8016514:	697b      	ldr	r3, [r7, #20]
 8016516:	0c1b      	lsrs	r3, r3, #16
 8016518:	b2da      	uxtb	r2, r3
 801651a:	687b      	ldr	r3, [r7, #4]
 801651c:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 801651e:	697b      	ldr	r3, [r7, #20]
 8016520:	b2da      	uxtb	r2, r3
 8016522:	687b      	ldr	r3, [r7, #4]
 8016524:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 8016526:	2300      	movs	r3, #0
}
 8016528:	4618      	mov	r0, r3
 801652a:	372c      	adds	r7, #44	@ 0x2c
 801652c:	46bd      	mov	sp, r7
 801652e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016532:	4770      	bx	lr
 8016534:	58004000 	.word	0x58004000
 8016538:	a94656b9 	.word	0xa94656b9

0801653c <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 801653c:	b580      	push	{r7, lr}
 801653e:	b082      	sub	sp, #8
 8016540:	af00      	add	r7, sp, #0
 8016542:	6078      	str	r0, [r7, #4]
 8016544:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8016546:	683b      	ldr	r3, [r7, #0]
 8016548:	685b      	ldr	r3, [r3, #4]
 801654a:	4a08      	ldr	r2, [pc, #32]	@ (801656c <hci_init+0x30>)
 801654c:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 801654e:	4a08      	ldr	r2, [pc, #32]	@ (8016570 <hci_init+0x34>)
 8016550:	687b      	ldr	r3, [r7, #4]
 8016552:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 8016554:	4806      	ldr	r0, [pc, #24]	@ (8016570 <hci_init+0x34>)
 8016556:	f000 f979 	bl	801684c <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 801655a:	683b      	ldr	r3, [r7, #0]
 801655c:	681b      	ldr	r3, [r3, #0]
 801655e:	4618      	mov	r0, r3
 8016560:	f000 f8da 	bl	8016718 <TlInit>

  return;
 8016564:	bf00      	nop
}
 8016566:	3708      	adds	r7, #8
 8016568:	46bd      	mov	sp, r7
 801656a:	bd80      	pop	{r7, pc}
 801656c:	200014ec 	.word	0x200014ec
 8016570:	200014c4 	.word	0x200014c4

08016574 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8016574:	b580      	push	{r7, lr}
 8016576:	b084      	sub	sp, #16
 8016578:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 801657a:	4822      	ldr	r0, [pc, #136]	@ (8016604 <hci_user_evt_proc+0x90>)
 801657c:	f000 fd32 	bl	8016fe4 <LST_is_empty>
 8016580:	4603      	mov	r3, r0
 8016582:	2b00      	cmp	r3, #0
 8016584:	d12b      	bne.n	80165de <hci_user_evt_proc+0x6a>
 8016586:	4b20      	ldr	r3, [pc, #128]	@ (8016608 <hci_user_evt_proc+0x94>)
 8016588:	781b      	ldrb	r3, [r3, #0]
 801658a:	2b00      	cmp	r3, #0
 801658c:	d027      	beq.n	80165de <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 801658e:	f107 030c 	add.w	r3, r7, #12
 8016592:	4619      	mov	r1, r3
 8016594:	481b      	ldr	r0, [pc, #108]	@ (8016604 <hci_user_evt_proc+0x90>)
 8016596:	f000 fdb4 	bl	8017102 <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 801659a:	4b1c      	ldr	r3, [pc, #112]	@ (801660c <hci_user_evt_proc+0x98>)
 801659c:	69db      	ldr	r3, [r3, #28]
 801659e:	2b00      	cmp	r3, #0
 80165a0:	d00c      	beq.n	80165bc <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 80165a2:	68fb      	ldr	r3, [r7, #12]
 80165a4:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 80165a6:	2301      	movs	r3, #1
 80165a8:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 80165aa:	4b18      	ldr	r3, [pc, #96]	@ (801660c <hci_user_evt_proc+0x98>)
 80165ac:	69db      	ldr	r3, [r3, #28]
 80165ae:	1d3a      	adds	r2, r7, #4
 80165b0:	4610      	mov	r0, r2
 80165b2:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 80165b4:	793a      	ldrb	r2, [r7, #4]
 80165b6:	4b14      	ldr	r3, [pc, #80]	@ (8016608 <hci_user_evt_proc+0x94>)
 80165b8:	701a      	strb	r2, [r3, #0]
 80165ba:	e002      	b.n	80165c2 <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 80165bc:	4b12      	ldr	r3, [pc, #72]	@ (8016608 <hci_user_evt_proc+0x94>)
 80165be:	2201      	movs	r2, #1
 80165c0:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 80165c2:	4b11      	ldr	r3, [pc, #68]	@ (8016608 <hci_user_evt_proc+0x94>)
 80165c4:	781b      	ldrb	r3, [r3, #0]
 80165c6:	2b00      	cmp	r3, #0
 80165c8:	d004      	beq.n	80165d4 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 80165ca:	68fb      	ldr	r3, [r7, #12]
 80165cc:	4618      	mov	r0, r3
 80165ce:	f000 fc0d 	bl	8016dec <TL_MM_EvtDone>
 80165d2:	e004      	b.n	80165de <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 80165d4:	68fb      	ldr	r3, [r7, #12]
 80165d6:	4619      	mov	r1, r3
 80165d8:	480a      	ldr	r0, [pc, #40]	@ (8016604 <hci_user_evt_proc+0x90>)
 80165da:	f000 fd25 	bl	8017028 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 80165de:	4809      	ldr	r0, [pc, #36]	@ (8016604 <hci_user_evt_proc+0x90>)
 80165e0:	f000 fd00 	bl	8016fe4 <LST_is_empty>
 80165e4:	4603      	mov	r3, r0
 80165e6:	2b00      	cmp	r3, #0
 80165e8:	d107      	bne.n	80165fa <hci_user_evt_proc+0x86>
 80165ea:	4b07      	ldr	r3, [pc, #28]	@ (8016608 <hci_user_evt_proc+0x94>)
 80165ec:	781b      	ldrb	r3, [r3, #0]
 80165ee:	2b00      	cmp	r3, #0
 80165f0:	d003      	beq.n	80165fa <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 80165f2:	4804      	ldr	r0, [pc, #16]	@ (8016604 <hci_user_evt_proc+0x90>)
 80165f4:	f001 fd50 	bl	8018098 <hci_notify_asynch_evt>
  }


  return;
 80165f8:	bf00      	nop
 80165fa:	bf00      	nop
}
 80165fc:	3710      	adds	r7, #16
 80165fe:	46bd      	mov	sp, r7
 8016600:	bd80      	pop	{r7, pc}
 8016602:	bf00      	nop
 8016604:	20000348 	.word	0x20000348
 8016608:	20000354 	.word	0x20000354
 801660c:	200014c4 	.word	0x200014c4

08016610 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 8016610:	b580      	push	{r7, lr}
 8016612:	b088      	sub	sp, #32
 8016614:	af00      	add	r7, sp, #0
 8016616:	6078      	str	r0, [r7, #4]
 8016618:	460b      	mov	r3, r1
 801661a:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 801661c:	2000      	movs	r0, #0
 801661e:	f000 f8d1 	bl	80167c4 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 8016622:	2300      	movs	r3, #0
 8016624:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 8016626:	687b      	ldr	r3, [r7, #4]
 8016628:	885b      	ldrh	r3, [r3, #2]
 801662a:	b21b      	sxth	r3, r3
 801662c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8016630:	b21a      	sxth	r2, r3
 8016632:	687b      	ldr	r3, [r7, #4]
 8016634:	881b      	ldrh	r3, [r3, #0]
 8016636:	029b      	lsls	r3, r3, #10
 8016638:	b21b      	sxth	r3, r3
 801663a:	4313      	orrs	r3, r2
 801663c:	b21b      	sxth	r3, r3
 801663e:	83bb      	strh	r3, [r7, #28]
  
  CmdRspStatusFlag = HCI_TL_CMD_RESP_WAIT;
 8016640:	4b33      	ldr	r3, [pc, #204]	@ (8016710 <hci_send_req+0x100>)
 8016642:	2201      	movs	r2, #1
 8016644:	701a      	strb	r2, [r3, #0]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 8016646:	687b      	ldr	r3, [r7, #4]
 8016648:	68db      	ldr	r3, [r3, #12]
 801664a:	b2d9      	uxtb	r1, r3
 801664c:	687b      	ldr	r3, [r7, #4]
 801664e:	689a      	ldr	r2, [r3, #8]
 8016650:	8bbb      	ldrh	r3, [r7, #28]
 8016652:	4618      	mov	r0, r3
 8016654:	f000 f890 	bl	8016778 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 8016658:	e04e      	b.n	80166f8 <hci_send_req+0xe8>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 801665a:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 801665e:	f001 fd32 	bl	80180c6 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8016662:	e043      	b.n	80166ec <hci_send_req+0xdc>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 8016664:	f107 030c 	add.w	r3, r7, #12
 8016668:	4619      	mov	r1, r3
 801666a:	482a      	ldr	r0, [pc, #168]	@ (8016714 <hci_send_req+0x104>)
 801666c:	f000 fd49 	bl	8017102 <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 8016670:	68fb      	ldr	r3, [r7, #12]
 8016672:	7a5b      	ldrb	r3, [r3, #9]
 8016674:	2b0f      	cmp	r3, #15
 8016676:	d114      	bne.n	80166a2 <hci_send_req+0x92>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 8016678:	68fb      	ldr	r3, [r7, #12]
 801667a:	330b      	adds	r3, #11
 801667c:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 801667e:	693b      	ldr	r3, [r7, #16]
 8016680:	885b      	ldrh	r3, [r3, #2]
 8016682:	b29b      	uxth	r3, r3
 8016684:	8bba      	ldrh	r2, [r7, #28]
 8016686:	429a      	cmp	r2, r3
 8016688:	d104      	bne.n	8016694 <hci_send_req+0x84>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 801668a:	687b      	ldr	r3, [r7, #4]
 801668c:	691b      	ldr	r3, [r3, #16]
 801668e:	693a      	ldr	r2, [r7, #16]
 8016690:	7812      	ldrb	r2, [r2, #0]
 8016692:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 8016694:	693b      	ldr	r3, [r7, #16]
 8016696:	785b      	ldrb	r3, [r3, #1]
 8016698:	2b00      	cmp	r3, #0
 801669a:	d027      	beq.n	80166ec <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 801669c:	2301      	movs	r3, #1
 801669e:	77fb      	strb	r3, [r7, #31]
 80166a0:	e024      	b.n	80166ec <hci_send_req+0xdc>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 80166a2:	68fb      	ldr	r3, [r7, #12]
 80166a4:	330b      	adds	r3, #11
 80166a6:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 80166a8:	69bb      	ldr	r3, [r7, #24]
 80166aa:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80166ae:	b29b      	uxth	r3, r3
 80166b0:	8bba      	ldrh	r2, [r7, #28]
 80166b2:	429a      	cmp	r2, r3
 80166b4:	d114      	bne.n	80166e0 <hci_send_req+0xd0>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 80166b6:	68fb      	ldr	r3, [r7, #12]
 80166b8:	7a9b      	ldrb	r3, [r3, #10]
 80166ba:	3b03      	subs	r3, #3
 80166bc:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 80166be:	687b      	ldr	r3, [r7, #4]
 80166c0:	695a      	ldr	r2, [r3, #20]
 80166c2:	7dfb      	ldrb	r3, [r7, #23]
 80166c4:	429a      	cmp	r2, r3
 80166c6:	bfa8      	it	ge
 80166c8:	461a      	movge	r2, r3
 80166ca:	687b      	ldr	r3, [r7, #4]
 80166cc:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 80166ce:	687b      	ldr	r3, [r7, #4]
 80166d0:	6918      	ldr	r0, [r3, #16]
 80166d2:	69bb      	ldr	r3, [r7, #24]
 80166d4:	1cd9      	adds	r1, r3, #3
 80166d6:	687b      	ldr	r3, [r7, #4]
 80166d8:	695b      	ldr	r3, [r3, #20]
 80166da:	461a      	mov	r2, r3
 80166dc:	f005 f949 	bl	801b972 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 80166e0:	69bb      	ldr	r3, [r7, #24]
 80166e2:	781b      	ldrb	r3, [r3, #0]
 80166e4:	2b00      	cmp	r3, #0
 80166e6:	d001      	beq.n	80166ec <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 80166e8:	2301      	movs	r3, #1
 80166ea:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 80166ec:	4809      	ldr	r0, [pc, #36]	@ (8016714 <hci_send_req+0x104>)
 80166ee:	f000 fc79 	bl	8016fe4 <LST_is_empty>
 80166f2:	4603      	mov	r3, r0
 80166f4:	2b00      	cmp	r3, #0
 80166f6:	d0b5      	beq.n	8016664 <hci_send_req+0x54>
  while(local_cmd_status == HCI_TL_CmdBusy)
 80166f8:	7ffb      	ldrb	r3, [r7, #31]
 80166fa:	2b00      	cmp	r3, #0
 80166fc:	d0ad      	beq.n	801665a <hci_send_req+0x4a>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 80166fe:	2001      	movs	r0, #1
 8016700:	f000 f860 	bl	80167c4 <NotifyCmdStatus>

  return 0;
 8016704:	2300      	movs	r3, #0
}
 8016706:	4618      	mov	r0, r3
 8016708:	3720      	adds	r7, #32
 801670a:	46bd      	mov	sp, r7
 801670c:	bd80      	pop	{r7, pc}
 801670e:	bf00      	nop
 8016710:	200014f0 	.word	0x200014f0
 8016714:	200014e4 	.word	0x200014e4

08016718 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8016718:	b580      	push	{r7, lr}
 801671a:	b086      	sub	sp, #24
 801671c:	af00      	add	r7, sp, #0
 801671e:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 8016720:	480f      	ldr	r0, [pc, #60]	@ (8016760 <TlInit+0x48>)
 8016722:	f000 fc4f 	bl	8016fc4 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 8016726:	4a0f      	ldr	r2, [pc, #60]	@ (8016764 <TlInit+0x4c>)
 8016728:	687b      	ldr	r3, [r7, #4]
 801672a:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 801672c:	480e      	ldr	r0, [pc, #56]	@ (8016768 <TlInit+0x50>)
 801672e:	f000 fc49 	bl	8016fc4 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8016732:	4b0e      	ldr	r3, [pc, #56]	@ (801676c <TlInit+0x54>)
 8016734:	2201      	movs	r2, #1
 8016736:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 8016738:	4b0d      	ldr	r3, [pc, #52]	@ (8016770 <TlInit+0x58>)
 801673a:	681b      	ldr	r3, [r3, #0]
 801673c:	2b00      	cmp	r3, #0
 801673e:	d00a      	beq.n	8016756 <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8016740:	687b      	ldr	r3, [r7, #4]
 8016742:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 8016744:	4b0b      	ldr	r3, [pc, #44]	@ (8016774 <TlInit+0x5c>)
 8016746:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 8016748:	4b09      	ldr	r3, [pc, #36]	@ (8016770 <TlInit+0x58>)
 801674a:	681b      	ldr	r3, [r3, #0]
 801674c:	f107 0208 	add.w	r2, r7, #8
 8016750:	4610      	mov	r0, r2
 8016752:	4798      	blx	r3
  }

  return;
 8016754:	bf00      	nop
 8016756:	bf00      	nop
}
 8016758:	3718      	adds	r7, #24
 801675a:	46bd      	mov	sp, r7
 801675c:	bd80      	pop	{r7, pc}
 801675e:	bf00      	nop
 8016760:	200014e4 	.word	0x200014e4
 8016764:	20000350 	.word	0x20000350
 8016768:	20000348 	.word	0x20000348
 801676c:	20000354 	.word	0x20000354
 8016770:	200014c4 	.word	0x200014c4
 8016774:	08016805 	.word	0x08016805

08016778 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 8016778:	b580      	push	{r7, lr}
 801677a:	b082      	sub	sp, #8
 801677c:	af00      	add	r7, sp, #0
 801677e:	4603      	mov	r3, r0
 8016780:	603a      	str	r2, [r7, #0]
 8016782:	80fb      	strh	r3, [r7, #6]
 8016784:	460b      	mov	r3, r1
 8016786:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 8016788:	4b0c      	ldr	r3, [pc, #48]	@ (80167bc <SendCmd+0x44>)
 801678a:	681b      	ldr	r3, [r3, #0]
 801678c:	88fa      	ldrh	r2, [r7, #6]
 801678e:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 8016792:	4b0a      	ldr	r3, [pc, #40]	@ (80167bc <SendCmd+0x44>)
 8016794:	681b      	ldr	r3, [r3, #0]
 8016796:	797a      	ldrb	r2, [r7, #5]
 8016798:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 801679a:	4b08      	ldr	r3, [pc, #32]	@ (80167bc <SendCmd+0x44>)
 801679c:	681b      	ldr	r3, [r3, #0]
 801679e:	330c      	adds	r3, #12
 80167a0:	797a      	ldrb	r2, [r7, #5]
 80167a2:	6839      	ldr	r1, [r7, #0]
 80167a4:	4618      	mov	r0, r3
 80167a6:	f005 f8e4 	bl	801b972 <memcpy>

  hciContext.io.Send(0,0);
 80167aa:	4b05      	ldr	r3, [pc, #20]	@ (80167c0 <SendCmd+0x48>)
 80167ac:	691b      	ldr	r3, [r3, #16]
 80167ae:	2100      	movs	r1, #0
 80167b0:	2000      	movs	r0, #0
 80167b2:	4798      	blx	r3

  return;
 80167b4:	bf00      	nop
}
 80167b6:	3708      	adds	r7, #8
 80167b8:	46bd      	mov	sp, r7
 80167ba:	bd80      	pop	{r7, pc}
 80167bc:	20000350 	.word	0x20000350
 80167c0:	200014c4 	.word	0x200014c4

080167c4 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 80167c4:	b580      	push	{r7, lr}
 80167c6:	b082      	sub	sp, #8
 80167c8:	af00      	add	r7, sp, #0
 80167ca:	4603      	mov	r3, r0
 80167cc:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 80167ce:	79fb      	ldrb	r3, [r7, #7]
 80167d0:	2b00      	cmp	r3, #0
 80167d2:	d108      	bne.n	80167e6 <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 80167d4:	4b0a      	ldr	r3, [pc, #40]	@ (8016800 <NotifyCmdStatus+0x3c>)
 80167d6:	681b      	ldr	r3, [r3, #0]
 80167d8:	2b00      	cmp	r3, #0
 80167da:	d00d      	beq.n	80167f8 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 80167dc:	4b08      	ldr	r3, [pc, #32]	@ (8016800 <NotifyCmdStatus+0x3c>)
 80167de:	681b      	ldr	r3, [r3, #0]
 80167e0:	2000      	movs	r0, #0
 80167e2:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 80167e4:	e008      	b.n	80167f8 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 80167e6:	4b06      	ldr	r3, [pc, #24]	@ (8016800 <NotifyCmdStatus+0x3c>)
 80167e8:	681b      	ldr	r3, [r3, #0]
 80167ea:	2b00      	cmp	r3, #0
 80167ec:	d004      	beq.n	80167f8 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 80167ee:	4b04      	ldr	r3, [pc, #16]	@ (8016800 <NotifyCmdStatus+0x3c>)
 80167f0:	681b      	ldr	r3, [r3, #0]
 80167f2:	2001      	movs	r0, #1
 80167f4:	4798      	blx	r3
  return;
 80167f6:	bf00      	nop
 80167f8:	bf00      	nop
}
 80167fa:	3708      	adds	r7, #8
 80167fc:	46bd      	mov	sp, r7
 80167fe:	bd80      	pop	{r7, pc}
 8016800:	200014ec 	.word	0x200014ec

08016804 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 8016804:	b580      	push	{r7, lr}
 8016806:	b082      	sub	sp, #8
 8016808:	af00      	add	r7, sp, #0
 801680a:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 801680c:	687b      	ldr	r3, [r7, #4]
 801680e:	7a5b      	ldrb	r3, [r3, #9]
 8016810:	2b0f      	cmp	r3, #15
 8016812:	d003      	beq.n	801681c <TlEvtReceived+0x18>
 8016814:	687b      	ldr	r3, [r7, #4]
 8016816:	7a5b      	ldrb	r3, [r3, #9]
 8016818:	2b0e      	cmp	r3, #14
 801681a:	d107      	bne.n	801682c <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 801681c:	6879      	ldr	r1, [r7, #4]
 801681e:	4809      	ldr	r0, [pc, #36]	@ (8016844 <TlEvtReceived+0x40>)
 8016820:	f000 fc28 	bl	8017074 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 8016824:	2000      	movs	r0, #0
 8016826:	f001 fc43 	bl	80180b0 <hci_cmd_resp_release>
 801682a:	e006      	b.n	801683a <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 801682c:	6879      	ldr	r1, [r7, #4]
 801682e:	4806      	ldr	r0, [pc, #24]	@ (8016848 <TlEvtReceived+0x44>)
 8016830:	f000 fc20 	bl	8017074 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8016834:	4804      	ldr	r0, [pc, #16]	@ (8016848 <TlEvtReceived+0x44>)
 8016836:	f001 fc2f 	bl	8018098 <hci_notify_asynch_evt>
  }

  return;
 801683a:	bf00      	nop
}
 801683c:	3708      	adds	r7, #8
 801683e:	46bd      	mov	sp, r7
 8016840:	bd80      	pop	{r7, pc}
 8016842:	bf00      	nop
 8016844:	200014e4 	.word	0x200014e4
 8016848:	20000348 	.word	0x20000348

0801684c <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 801684c:	b480      	push	{r7}
 801684e:	b083      	sub	sp, #12
 8016850:	af00      	add	r7, sp, #0
 8016852:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 8016854:	687b      	ldr	r3, [r7, #4]
 8016856:	4a05      	ldr	r2, [pc, #20]	@ (801686c <hci_register_io_bus+0x20>)
 8016858:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 801685a:	687b      	ldr	r3, [r7, #4]
 801685c:	4a04      	ldr	r2, [pc, #16]	@ (8016870 <hci_register_io_bus+0x24>)
 801685e:	611a      	str	r2, [r3, #16]

  return;
 8016860:	bf00      	nop
}
 8016862:	370c      	adds	r7, #12
 8016864:	46bd      	mov	sp, r7
 8016866:	f85d 7b04 	ldr.w	r7, [sp], #4
 801686a:	4770      	bx	lr
 801686c:	08016b65 	.word	0x08016b65
 8016870:	08016bcd 	.word	0x08016bcd

08016874 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8016874:	b580      	push	{r7, lr}
 8016876:	b082      	sub	sp, #8
 8016878:	af00      	add	r7, sp, #0
 801687a:	6078      	str	r0, [r7, #4]
 801687c:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 801687e:	683b      	ldr	r3, [r7, #0]
 8016880:	685b      	ldr	r3, [r3, #4]
 8016882:	4a08      	ldr	r2, [pc, #32]	@ (80168a4 <shci_init+0x30>)
 8016884:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 8016886:	4a08      	ldr	r2, [pc, #32]	@ (80168a8 <shci_init+0x34>)
 8016888:	687b      	ldr	r3, [r7, #4]
 801688a:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 801688c:	4806      	ldr	r0, [pc, #24]	@ (80168a8 <shci_init+0x34>)
 801688e:	f000 f915 	bl	8016abc <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8016892:	683b      	ldr	r3, [r7, #0]
 8016894:	681b      	ldr	r3, [r3, #0]
 8016896:	4618      	mov	r0, r3
 8016898:	f000 f898 	bl	80169cc <TlInit>

  return;
 801689c:	bf00      	nop
}
 801689e:	3708      	adds	r7, #8
 80168a0:	46bd      	mov	sp, r7
 80168a2:	bd80      	pop	{r7, pc}
 80168a4:	20001514 	.word	0x20001514
 80168a8:	200014f4 	.word	0x200014f4

080168ac <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 80168ac:	b580      	push	{r7, lr}
 80168ae:	b084      	sub	sp, #16
 80168b0:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 80168b2:	4822      	ldr	r0, [pc, #136]	@ (801693c <shci_user_evt_proc+0x90>)
 80168b4:	f000 fb96 	bl	8016fe4 <LST_is_empty>
 80168b8:	4603      	mov	r3, r0
 80168ba:	2b00      	cmp	r3, #0
 80168bc:	d12b      	bne.n	8016916 <shci_user_evt_proc+0x6a>
 80168be:	4b20      	ldr	r3, [pc, #128]	@ (8016940 <shci_user_evt_proc+0x94>)
 80168c0:	781b      	ldrb	r3, [r3, #0]
 80168c2:	2b00      	cmp	r3, #0
 80168c4:	d027      	beq.n	8016916 <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 80168c6:	f107 030c 	add.w	r3, r7, #12
 80168ca:	4619      	mov	r1, r3
 80168cc:	481b      	ldr	r0, [pc, #108]	@ (801693c <shci_user_evt_proc+0x90>)
 80168ce:	f000 fc18 	bl	8017102 <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 80168d2:	4b1c      	ldr	r3, [pc, #112]	@ (8016944 <shci_user_evt_proc+0x98>)
 80168d4:	69db      	ldr	r3, [r3, #28]
 80168d6:	2b00      	cmp	r3, #0
 80168d8:	d00c      	beq.n	80168f4 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 80168da:	68fb      	ldr	r3, [r7, #12]
 80168dc:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 80168de:	2301      	movs	r3, #1
 80168e0:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 80168e2:	4b18      	ldr	r3, [pc, #96]	@ (8016944 <shci_user_evt_proc+0x98>)
 80168e4:	69db      	ldr	r3, [r3, #28]
 80168e6:	1d3a      	adds	r2, r7, #4
 80168e8:	4610      	mov	r0, r2
 80168ea:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 80168ec:	793a      	ldrb	r2, [r7, #4]
 80168ee:	4b14      	ldr	r3, [pc, #80]	@ (8016940 <shci_user_evt_proc+0x94>)
 80168f0:	701a      	strb	r2, [r3, #0]
 80168f2:	e002      	b.n	80168fa <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 80168f4:	4b12      	ldr	r3, [pc, #72]	@ (8016940 <shci_user_evt_proc+0x94>)
 80168f6:	2201      	movs	r2, #1
 80168f8:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 80168fa:	4b11      	ldr	r3, [pc, #68]	@ (8016940 <shci_user_evt_proc+0x94>)
 80168fc:	781b      	ldrb	r3, [r3, #0]
 80168fe:	2b00      	cmp	r3, #0
 8016900:	d004      	beq.n	801690c <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8016902:	68fb      	ldr	r3, [r7, #12]
 8016904:	4618      	mov	r0, r3
 8016906:	f000 fa71 	bl	8016dec <TL_MM_EvtDone>
 801690a:	e004      	b.n	8016916 <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 801690c:	68fb      	ldr	r3, [r7, #12]
 801690e:	4619      	mov	r1, r3
 8016910:	480a      	ldr	r0, [pc, #40]	@ (801693c <shci_user_evt_proc+0x90>)
 8016912:	f000 fb89 	bl	8017028 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8016916:	4809      	ldr	r0, [pc, #36]	@ (801693c <shci_user_evt_proc+0x90>)
 8016918:	f000 fb64 	bl	8016fe4 <LST_is_empty>
 801691c:	4603      	mov	r3, r0
 801691e:	2b00      	cmp	r3, #0
 8016920:	d107      	bne.n	8016932 <shci_user_evt_proc+0x86>
 8016922:	4b07      	ldr	r3, [pc, #28]	@ (8016940 <shci_user_evt_proc+0x94>)
 8016924:	781b      	ldrb	r3, [r3, #0]
 8016926:	2b00      	cmp	r3, #0
 8016928:	d003      	beq.n	8016932 <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 801692a:	4804      	ldr	r0, [pc, #16]	@ (801693c <shci_user_evt_proc+0x90>)
 801692c:	f7ea ff40 	bl	80017b0 <shci_notify_asynch_evt>
  }


  return;
 8016930:	bf00      	nop
 8016932:	bf00      	nop
}
 8016934:	3710      	adds	r7, #16
 8016936:	46bd      	mov	sp, r7
 8016938:	bd80      	pop	{r7, pc}
 801693a:	bf00      	nop
 801693c:	20000358 	.word	0x20000358
 8016940:	20000368 	.word	0x20000368
 8016944:	200014f4 	.word	0x200014f4

08016948 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 8016948:	b580      	push	{r7, lr}
 801694a:	b084      	sub	sp, #16
 801694c:	af00      	add	r7, sp, #0
 801694e:	60ba      	str	r2, [r7, #8]
 8016950:	607b      	str	r3, [r7, #4]
 8016952:	4603      	mov	r3, r0
 8016954:	81fb      	strh	r3, [r7, #14]
 8016956:	460b      	mov	r3, r1
 8016958:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 801695a:	2000      	movs	r0, #0
 801695c:	f000 f868 	bl	8016a30 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 8016960:	4b17      	ldr	r3, [pc, #92]	@ (80169c0 <shci_send+0x78>)
 8016962:	681b      	ldr	r3, [r3, #0]
 8016964:	89fa      	ldrh	r2, [r7, #14]
 8016966:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 801696a:	4b15      	ldr	r3, [pc, #84]	@ (80169c0 <shci_send+0x78>)
 801696c:	681b      	ldr	r3, [r3, #0]
 801696e:	7b7a      	ldrb	r2, [r7, #13]
 8016970:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 8016972:	4b13      	ldr	r3, [pc, #76]	@ (80169c0 <shci_send+0x78>)
 8016974:	681b      	ldr	r3, [r3, #0]
 8016976:	330c      	adds	r3, #12
 8016978:	7b7a      	ldrb	r2, [r7, #13]
 801697a:	68b9      	ldr	r1, [r7, #8]
 801697c:	4618      	mov	r0, r3
 801697e:	f004 fff8 	bl	801b972 <memcpy>
  CmdRspStatusFlag = SHCI_TL_CMD_RESP_WAIT;
 8016982:	4b10      	ldr	r3, [pc, #64]	@ (80169c4 <shci_send+0x7c>)
 8016984:	2201      	movs	r2, #1
 8016986:	701a      	strb	r2, [r3, #0]
  shciContext.io.Send(0,0);
 8016988:	4b0f      	ldr	r3, [pc, #60]	@ (80169c8 <shci_send+0x80>)
 801698a:	691b      	ldr	r3, [r3, #16]
 801698c:	2100      	movs	r1, #0
 801698e:	2000      	movs	r0, #0
 8016990:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 8016992:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 8016996:	f7ea ff22 	bl	80017de <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 801699a:	687b      	ldr	r3, [r7, #4]
 801699c:	f103 0008 	add.w	r0, r3, #8
 80169a0:	4b07      	ldr	r3, [pc, #28]	@ (80169c0 <shci_send+0x78>)
 80169a2:	6819      	ldr	r1, [r3, #0]
 80169a4:	4b06      	ldr	r3, [pc, #24]	@ (80169c0 <shci_send+0x78>)
 80169a6:	681b      	ldr	r3, [r3, #0]
 80169a8:	789b      	ldrb	r3, [r3, #2]
 80169aa:	3303      	adds	r3, #3
 80169ac:	461a      	mov	r2, r3
 80169ae:	f004 ffe0 	bl	801b972 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 80169b2:	2001      	movs	r0, #1
 80169b4:	f000 f83c 	bl	8016a30 <Cmd_SetStatus>

  return;
 80169b8:	bf00      	nop
}
 80169ba:	3710      	adds	r7, #16
 80169bc:	46bd      	mov	sp, r7
 80169be:	bd80      	pop	{r7, pc}
 80169c0:	20000364 	.word	0x20000364
 80169c4:	20001518 	.word	0x20001518
 80169c8:	200014f4 	.word	0x200014f4

080169cc <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 80169cc:	b580      	push	{r7, lr}
 80169ce:	b086      	sub	sp, #24
 80169d0:	af00      	add	r7, sp, #0
 80169d2:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 80169d4:	4a10      	ldr	r2, [pc, #64]	@ (8016a18 <TlInit+0x4c>)
 80169d6:	687b      	ldr	r3, [r7, #4]
 80169d8:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 80169da:	4810      	ldr	r0, [pc, #64]	@ (8016a1c <TlInit+0x50>)
 80169dc:	f000 faf2 	bl	8016fc4 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 80169e0:	2001      	movs	r0, #1
 80169e2:	f000 f825 	bl	8016a30 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 80169e6:	4b0e      	ldr	r3, [pc, #56]	@ (8016a20 <TlInit+0x54>)
 80169e8:	2201      	movs	r2, #1
 80169ea:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 80169ec:	4b0d      	ldr	r3, [pc, #52]	@ (8016a24 <TlInit+0x58>)
 80169ee:	681b      	ldr	r3, [r3, #0]
 80169f0:	2b00      	cmp	r3, #0
 80169f2:	d00c      	beq.n	8016a0e <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 80169f4:	687b      	ldr	r3, [r7, #4]
 80169f6:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 80169f8:	4b0b      	ldr	r3, [pc, #44]	@ (8016a28 <TlInit+0x5c>)
 80169fa:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 80169fc:	4b0b      	ldr	r3, [pc, #44]	@ (8016a2c <TlInit+0x60>)
 80169fe:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 8016a00:	4b08      	ldr	r3, [pc, #32]	@ (8016a24 <TlInit+0x58>)
 8016a02:	681b      	ldr	r3, [r3, #0]
 8016a04:	f107 020c 	add.w	r2, r7, #12
 8016a08:	4610      	mov	r0, r2
 8016a0a:	4798      	blx	r3
  }

  return;
 8016a0c:	bf00      	nop
 8016a0e:	bf00      	nop
}
 8016a10:	3718      	adds	r7, #24
 8016a12:	46bd      	mov	sp, r7
 8016a14:	bd80      	pop	{r7, pc}
 8016a16:	bf00      	nop
 8016a18:	20000364 	.word	0x20000364
 8016a1c:	20000358 	.word	0x20000358
 8016a20:	20000368 	.word	0x20000368
 8016a24:	200014f4 	.word	0x200014f4
 8016a28:	08016a81 	.word	0x08016a81
 8016a2c:	08016a99 	.word	0x08016a99

08016a30 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 8016a30:	b580      	push	{r7, lr}
 8016a32:	b082      	sub	sp, #8
 8016a34:	af00      	add	r7, sp, #0
 8016a36:	4603      	mov	r3, r0
 8016a38:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 8016a3a:	79fb      	ldrb	r3, [r7, #7]
 8016a3c:	2b00      	cmp	r3, #0
 8016a3e:	d10b      	bne.n	8016a58 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 8016a40:	4b0d      	ldr	r3, [pc, #52]	@ (8016a78 <Cmd_SetStatus+0x48>)
 8016a42:	681b      	ldr	r3, [r3, #0]
 8016a44:	2b00      	cmp	r3, #0
 8016a46:	d003      	beq.n	8016a50 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 8016a48:	4b0b      	ldr	r3, [pc, #44]	@ (8016a78 <Cmd_SetStatus+0x48>)
 8016a4a:	681b      	ldr	r3, [r3, #0]
 8016a4c:	2000      	movs	r0, #0
 8016a4e:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 8016a50:	4b0a      	ldr	r3, [pc, #40]	@ (8016a7c <Cmd_SetStatus+0x4c>)
 8016a52:	2200      	movs	r2, #0
 8016a54:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 8016a56:	e00b      	b.n	8016a70 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 8016a58:	4b08      	ldr	r3, [pc, #32]	@ (8016a7c <Cmd_SetStatus+0x4c>)
 8016a5a:	2201      	movs	r2, #1
 8016a5c:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 8016a5e:	4b06      	ldr	r3, [pc, #24]	@ (8016a78 <Cmd_SetStatus+0x48>)
 8016a60:	681b      	ldr	r3, [r3, #0]
 8016a62:	2b00      	cmp	r3, #0
 8016a64:	d004      	beq.n	8016a70 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 8016a66:	4b04      	ldr	r3, [pc, #16]	@ (8016a78 <Cmd_SetStatus+0x48>)
 8016a68:	681b      	ldr	r3, [r3, #0]
 8016a6a:	2001      	movs	r0, #1
 8016a6c:	4798      	blx	r3
  return;
 8016a6e:	bf00      	nop
 8016a70:	bf00      	nop
}
 8016a72:	3708      	adds	r7, #8
 8016a74:	46bd      	mov	sp, r7
 8016a76:	bd80      	pop	{r7, pc}
 8016a78:	20001514 	.word	0x20001514
 8016a7c:	20000360 	.word	0x20000360

08016a80 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 8016a80:	b580      	push	{r7, lr}
 8016a82:	b082      	sub	sp, #8
 8016a84:	af00      	add	r7, sp, #0
 8016a86:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 8016a88:	2000      	movs	r0, #0
 8016a8a:	f7ea fe9d 	bl	80017c8 <shci_cmd_resp_release>

  return;
 8016a8e:	bf00      	nop
}
 8016a90:	3708      	adds	r7, #8
 8016a92:	46bd      	mov	sp, r7
 8016a94:	bd80      	pop	{r7, pc}
	...

08016a98 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 8016a98:	b580      	push	{r7, lr}
 8016a9a:	b082      	sub	sp, #8
 8016a9c:	af00      	add	r7, sp, #0
 8016a9e:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 8016aa0:	6879      	ldr	r1, [r7, #4]
 8016aa2:	4805      	ldr	r0, [pc, #20]	@ (8016ab8 <TlUserEvtReceived+0x20>)
 8016aa4:	f000 fae6 	bl	8017074 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8016aa8:	4803      	ldr	r0, [pc, #12]	@ (8016ab8 <TlUserEvtReceived+0x20>)
 8016aaa:	f7ea fe81 	bl	80017b0 <shci_notify_asynch_evt>

  return;
 8016aae:	bf00      	nop
}
 8016ab0:	3708      	adds	r7, #8
 8016ab2:	46bd      	mov	sp, r7
 8016ab4:	bd80      	pop	{r7, pc}
 8016ab6:	bf00      	nop
 8016ab8:	20000358 	.word	0x20000358

08016abc <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 8016abc:	b480      	push	{r7}
 8016abe:	b083      	sub	sp, #12
 8016ac0:	af00      	add	r7, sp, #0
 8016ac2:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 8016ac4:	687b      	ldr	r3, [r7, #4]
 8016ac6:	4a05      	ldr	r2, [pc, #20]	@ (8016adc <shci_register_io_bus+0x20>)
 8016ac8:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 8016aca:	687b      	ldr	r3, [r7, #4]
 8016acc:	4a04      	ldr	r2, [pc, #16]	@ (8016ae0 <shci_register_io_bus+0x24>)
 8016ace:	611a      	str	r2, [r3, #16]

  return;
 8016ad0:	bf00      	nop
}
 8016ad2:	370c      	adds	r7, #12
 8016ad4:	46bd      	mov	sp, r7
 8016ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ada:	4770      	bx	lr
 8016adc:	08016c79 	.word	0x08016c79
 8016ae0:	08016ccd 	.word	0x08016ccd

08016ae4 <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 8016ae4:	b580      	push	{r7, lr}
 8016ae6:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 8016ae8:	f001 fe30 	bl	801874c <HW_IPCC_Enable>

  return;
 8016aec:	bf00      	nop
}
 8016aee:	bd80      	pop	{r7, pc}

08016af0 <TL_Init>:


void TL_Init( void )
{
 8016af0:	b580      	push	{r7, lr}
 8016af2:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 8016af4:	4b10      	ldr	r3, [pc, #64]	@ (8016b38 <TL_Init+0x48>)
 8016af6:	4a11      	ldr	r2, [pc, #68]	@ (8016b3c <TL_Init+0x4c>)
 8016af8:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 8016afa:	4b0f      	ldr	r3, [pc, #60]	@ (8016b38 <TL_Init+0x48>)
 8016afc:	4a10      	ldr	r2, [pc, #64]	@ (8016b40 <TL_Init+0x50>)
 8016afe:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 8016b00:	4b0d      	ldr	r3, [pc, #52]	@ (8016b38 <TL_Init+0x48>)
 8016b02:	4a10      	ldr	r2, [pc, #64]	@ (8016b44 <TL_Init+0x54>)
 8016b04:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 8016b06:	4b0c      	ldr	r3, [pc, #48]	@ (8016b38 <TL_Init+0x48>)
 8016b08:	4a0f      	ldr	r2, [pc, #60]	@ (8016b48 <TL_Init+0x58>)
 8016b0a:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 8016b0c:	4b0a      	ldr	r3, [pc, #40]	@ (8016b38 <TL_Init+0x48>)
 8016b0e:	4a0f      	ldr	r2, [pc, #60]	@ (8016b4c <TL_Init+0x5c>)
 8016b10:	625a      	str	r2, [r3, #36]	@ 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 8016b12:	4b09      	ldr	r3, [pc, #36]	@ (8016b38 <TL_Init+0x48>)
 8016b14:	4a0e      	ldr	r2, [pc, #56]	@ (8016b50 <TL_Init+0x60>)
 8016b16:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 8016b18:	4b07      	ldr	r3, [pc, #28]	@ (8016b38 <TL_Init+0x48>)
 8016b1a:	4a0e      	ldr	r2, [pc, #56]	@ (8016b54 <TL_Init+0x64>)
 8016b1c:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 8016b1e:	4b06      	ldr	r3, [pc, #24]	@ (8016b38 <TL_Init+0x48>)
 8016b20:	4a0d      	ldr	r2, [pc, #52]	@ (8016b58 <TL_Init+0x68>)
 8016b22:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 8016b24:	4b04      	ldr	r3, [pc, #16]	@ (8016b38 <TL_Init+0x48>)
 8016b26:	4a0d      	ldr	r2, [pc, #52]	@ (8016b5c <TL_Init+0x6c>)
 8016b28:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 8016b2a:	4b03      	ldr	r3, [pc, #12]	@ (8016b38 <TL_Init+0x48>)
 8016b2c:	4a0c      	ldr	r2, [pc, #48]	@ (8016b60 <TL_Init+0x70>)
 8016b2e:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 8016b30:	f001 fe20 	bl	8018774 <HW_IPCC_Init>

  return;
 8016b34:	bf00      	nop
}
 8016b36:	bd80      	pop	{r7, pc}
 8016b38:	20030000 	.word	0x20030000
 8016b3c:	20030028 	.word	0x20030028
 8016b40:	20030048 	.word	0x20030048
 8016b44:	20030058 	.word	0x20030058
 8016b48:	20030068 	.word	0x20030068
 8016b4c:	20030070 	.word	0x20030070
 8016b50:	20030078 	.word	0x20030078
 8016b54:	20030080 	.word	0x20030080
 8016b58:	2003009c 	.word	0x2003009c
 8016b5c:	200300a0 	.word	0x200300a0
 8016b60:	200300ac 	.word	0x200300ac

08016b64 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 8016b64:	b580      	push	{r7, lr}
 8016b66:	b084      	sub	sp, #16
 8016b68:	af00      	add	r7, sp, #0
 8016b6a:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 8016b6c:	687b      	ldr	r3, [r7, #4]
 8016b6e:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 8016b70:	4811      	ldr	r0, [pc, #68]	@ (8016bb8 <TL_BLE_Init+0x54>)
 8016b72:	f000 fa27 	bl	8016fc4 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 8016b76:	4b11      	ldr	r3, [pc, #68]	@ (8016bbc <TL_BLE_Init+0x58>)
 8016b78:	685b      	ldr	r3, [r3, #4]
 8016b7a:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8016b7c:	68fb      	ldr	r3, [r7, #12]
 8016b7e:	689a      	ldr	r2, [r3, #8]
 8016b80:	68bb      	ldr	r3, [r7, #8]
 8016b82:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 8016b84:	68fb      	ldr	r3, [r7, #12]
 8016b86:	68da      	ldr	r2, [r3, #12]
 8016b88:	68bb      	ldr	r3, [r7, #8]
 8016b8a:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 8016b8c:	68bb      	ldr	r3, [r7, #8]
 8016b8e:	4a0c      	ldr	r2, [pc, #48]	@ (8016bc0 <TL_BLE_Init+0x5c>)
 8016b90:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 8016b92:	68bb      	ldr	r3, [r7, #8]
 8016b94:	4a08      	ldr	r2, [pc, #32]	@ (8016bb8 <TL_BLE_Init+0x54>)
 8016b96:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 8016b98:	f001 fe02 	bl	80187a0 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 8016b9c:	68fb      	ldr	r3, [r7, #12]
 8016b9e:	681b      	ldr	r3, [r3, #0]
 8016ba0:	4a08      	ldr	r2, [pc, #32]	@ (8016bc4 <TL_BLE_Init+0x60>)
 8016ba2:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 8016ba4:	68fb      	ldr	r3, [r7, #12]
 8016ba6:	685b      	ldr	r3, [r3, #4]
 8016ba8:	4a07      	ldr	r2, [pc, #28]	@ (8016bc8 <TL_BLE_Init+0x64>)
 8016baa:	6013      	str	r3, [r2, #0]

  return 0;
 8016bac:	2300      	movs	r3, #0
}
 8016bae:	4618      	mov	r0, r3
 8016bb0:	3710      	adds	r7, #16
 8016bb2:	46bd      	mov	sp, r7
 8016bb4:	bd80      	pop	{r7, pc}
 8016bb6:	bf00      	nop
 8016bb8:	200300c8 	.word	0x200300c8
 8016bbc:	20030000 	.word	0x20030000
 8016bc0:	20030a58 	.word	0x20030a58
 8016bc4:	20001524 	.word	0x20001524
 8016bc8:	20001528 	.word	0x20001528

08016bcc <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 8016bcc:	b580      	push	{r7, lr}
 8016bce:	b082      	sub	sp, #8
 8016bd0:	af00      	add	r7, sp, #0
 8016bd2:	6078      	str	r0, [r7, #4]
 8016bd4:	460b      	mov	r3, r1
 8016bd6:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 8016bd8:	4b09      	ldr	r3, [pc, #36]	@ (8016c00 <TL_BLE_SendCmd+0x34>)
 8016bda:	685b      	ldr	r3, [r3, #4]
 8016bdc:	681b      	ldr	r3, [r3, #0]
 8016bde:	2201      	movs	r2, #1
 8016be0:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 8016be2:	4b07      	ldr	r3, [pc, #28]	@ (8016c00 <TL_BLE_SendCmd+0x34>)
 8016be4:	685b      	ldr	r3, [r3, #4]
 8016be6:	681b      	ldr	r3, [r3, #0]
 8016be8:	4619      	mov	r1, r3
 8016bea:	2001      	movs	r0, #1
 8016bec:	f000 f96c 	bl	8016ec8 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 8016bf0:	f001 fde0 	bl	80187b4 <HW_IPCC_BLE_SendCmd>

  return 0;
 8016bf4:	2300      	movs	r3, #0
}
 8016bf6:	4618      	mov	r0, r3
 8016bf8:	3708      	adds	r7, #8
 8016bfa:	46bd      	mov	sp, r7
 8016bfc:	bd80      	pop	{r7, pc}
 8016bfe:	bf00      	nop
 8016c00:	20030000 	.word	0x20030000

08016c04 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 8016c04:	b580      	push	{r7, lr}
 8016c06:	b082      	sub	sp, #8
 8016c08:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 8016c0a:	e01c      	b.n	8016c46 <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 8016c0c:	1d3b      	adds	r3, r7, #4
 8016c0e:	4619      	mov	r1, r3
 8016c10:	4812      	ldr	r0, [pc, #72]	@ (8016c5c <HW_IPCC_BLE_RxEvtNot+0x58>)
 8016c12:	f000 fa76 	bl	8017102 <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8016c16:	687b      	ldr	r3, [r7, #4]
 8016c18:	7a5b      	ldrb	r3, [r3, #9]
 8016c1a:	2b0f      	cmp	r3, #15
 8016c1c:	d003      	beq.n	8016c26 <HW_IPCC_BLE_RxEvtNot+0x22>
 8016c1e:	687b      	ldr	r3, [r7, #4]
 8016c20:	7a5b      	ldrb	r3, [r3, #9]
 8016c22:	2b0e      	cmp	r3, #14
 8016c24:	d105      	bne.n	8016c32 <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 8016c26:	687b      	ldr	r3, [r7, #4]
 8016c28:	4619      	mov	r1, r3
 8016c2a:	2002      	movs	r0, #2
 8016c2c:	f000 f94c 	bl	8016ec8 <OutputDbgTrace>
 8016c30:	e004      	b.n	8016c3c <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 8016c32:	687b      	ldr	r3, [r7, #4]
 8016c34:	4619      	mov	r1, r3
 8016c36:	2003      	movs	r0, #3
 8016c38:	f000 f946 	bl	8016ec8 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 8016c3c:	4b08      	ldr	r3, [pc, #32]	@ (8016c60 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 8016c3e:	681b      	ldr	r3, [r3, #0]
 8016c40:	687a      	ldr	r2, [r7, #4]
 8016c42:	4610      	mov	r0, r2
 8016c44:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 8016c46:	4805      	ldr	r0, [pc, #20]	@ (8016c5c <HW_IPCC_BLE_RxEvtNot+0x58>)
 8016c48:	f000 f9cc 	bl	8016fe4 <LST_is_empty>
 8016c4c:	4603      	mov	r3, r0
 8016c4e:	2b00      	cmp	r3, #0
 8016c50:	d0dc      	beq.n	8016c0c <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 8016c52:	bf00      	nop
}
 8016c54:	3708      	adds	r7, #8
 8016c56:	46bd      	mov	sp, r7
 8016c58:	bd80      	pop	{r7, pc}
 8016c5a:	bf00      	nop
 8016c5c:	200300c8 	.word	0x200300c8
 8016c60:	20001524 	.word	0x20001524

08016c64 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 8016c64:	b580      	push	{r7, lr}
 8016c66:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 8016c68:	4b02      	ldr	r3, [pc, #8]	@ (8016c74 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 8016c6a:	681b      	ldr	r3, [r3, #0]
 8016c6c:	4798      	blx	r3

  return;
 8016c6e:	bf00      	nop
}
 8016c70:	bd80      	pop	{r7, pc}
 8016c72:	bf00      	nop
 8016c74:	20001528 	.word	0x20001528

08016c78 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 8016c78:	b580      	push	{r7, lr}
 8016c7a:	b084      	sub	sp, #16
 8016c7c:	af00      	add	r7, sp, #0
 8016c7e:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 8016c80:	687b      	ldr	r3, [r7, #4]
 8016c82:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 8016c84:	480d      	ldr	r0, [pc, #52]	@ (8016cbc <TL_SYS_Init+0x44>)
 8016c86:	f000 f99d 	bl	8016fc4 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 8016c8a:	4b0d      	ldr	r3, [pc, #52]	@ (8016cc0 <TL_SYS_Init+0x48>)
 8016c8c:	68db      	ldr	r3, [r3, #12]
 8016c8e:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8016c90:	68fb      	ldr	r3, [r7, #12]
 8016c92:	689a      	ldr	r2, [r3, #8]
 8016c94:	68bb      	ldr	r3, [r7, #8]
 8016c96:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 8016c98:	68bb      	ldr	r3, [r7, #8]
 8016c9a:	4a08      	ldr	r2, [pc, #32]	@ (8016cbc <TL_SYS_Init+0x44>)
 8016c9c:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 8016c9e:	f001 fdab 	bl	80187f8 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 8016ca2:	68fb      	ldr	r3, [r7, #12]
 8016ca4:	681b      	ldr	r3, [r3, #0]
 8016ca6:	4a07      	ldr	r2, [pc, #28]	@ (8016cc4 <TL_SYS_Init+0x4c>)
 8016ca8:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 8016caa:	68fb      	ldr	r3, [r7, #12]
 8016cac:	685b      	ldr	r3, [r3, #4]
 8016cae:	4a06      	ldr	r2, [pc, #24]	@ (8016cc8 <TL_SYS_Init+0x50>)
 8016cb0:	6013      	str	r3, [r2, #0]

  return 0;
 8016cb2:	2300      	movs	r3, #0
}
 8016cb4:	4618      	mov	r0, r3
 8016cb6:	3710      	adds	r7, #16
 8016cb8:	46bd      	mov	sp, r7
 8016cba:	bd80      	pop	{r7, pc}
 8016cbc:	200300d0 	.word	0x200300d0
 8016cc0:	20030000 	.word	0x20030000
 8016cc4:	2000152c 	.word	0x2000152c
 8016cc8:	20001530 	.word	0x20001530

08016ccc <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 8016ccc:	b580      	push	{r7, lr}
 8016cce:	b082      	sub	sp, #8
 8016cd0:	af00      	add	r7, sp, #0
 8016cd2:	6078      	str	r0, [r7, #4]
 8016cd4:	460b      	mov	r3, r1
 8016cd6:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 8016cd8:	4b09      	ldr	r3, [pc, #36]	@ (8016d00 <TL_SYS_SendCmd+0x34>)
 8016cda:	68db      	ldr	r3, [r3, #12]
 8016cdc:	681b      	ldr	r3, [r3, #0]
 8016cde:	2210      	movs	r2, #16
 8016ce0:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 8016ce2:	4b07      	ldr	r3, [pc, #28]	@ (8016d00 <TL_SYS_SendCmd+0x34>)
 8016ce4:	68db      	ldr	r3, [r3, #12]
 8016ce6:	681b      	ldr	r3, [r3, #0]
 8016ce8:	4619      	mov	r1, r3
 8016cea:	2004      	movs	r0, #4
 8016cec:	f000 f8ec 	bl	8016ec8 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 8016cf0:	f001 fd8c 	bl	801880c <HW_IPCC_SYS_SendCmd>

  return 0;
 8016cf4:	2300      	movs	r3, #0
}
 8016cf6:	4618      	mov	r0, r3
 8016cf8:	3708      	adds	r7, #8
 8016cfa:	46bd      	mov	sp, r7
 8016cfc:	bd80      	pop	{r7, pc}
 8016cfe:	bf00      	nop
 8016d00:	20030000 	.word	0x20030000

08016d04 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 8016d04:	b580      	push	{r7, lr}
 8016d06:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8016d08:	4b07      	ldr	r3, [pc, #28]	@ (8016d28 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8016d0a:	68db      	ldr	r3, [r3, #12]
 8016d0c:	681b      	ldr	r3, [r3, #0]
 8016d0e:	4619      	mov	r1, r3
 8016d10:	2005      	movs	r0, #5
 8016d12:	f000 f8d9 	bl	8016ec8 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8016d16:	4b05      	ldr	r3, [pc, #20]	@ (8016d2c <HW_IPCC_SYS_CmdEvtNot+0x28>)
 8016d18:	681b      	ldr	r3, [r3, #0]
 8016d1a:	4a03      	ldr	r2, [pc, #12]	@ (8016d28 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8016d1c:	68d2      	ldr	r2, [r2, #12]
 8016d1e:	6812      	ldr	r2, [r2, #0]
 8016d20:	4610      	mov	r0, r2
 8016d22:	4798      	blx	r3

  return;
 8016d24:	bf00      	nop
}
 8016d26:	bd80      	pop	{r7, pc}
 8016d28:	20030000 	.word	0x20030000
 8016d2c:	2000152c 	.word	0x2000152c

08016d30 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 8016d30:	b580      	push	{r7, lr}
 8016d32:	b082      	sub	sp, #8
 8016d34:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8016d36:	e00e      	b.n	8016d56 <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 8016d38:	1d3b      	adds	r3, r7, #4
 8016d3a:	4619      	mov	r1, r3
 8016d3c:	480b      	ldr	r0, [pc, #44]	@ (8016d6c <HW_IPCC_SYS_EvtNot+0x3c>)
 8016d3e:	f000 f9e0 	bl	8017102 <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 8016d42:	687b      	ldr	r3, [r7, #4]
 8016d44:	4619      	mov	r1, r3
 8016d46:	2006      	movs	r0, #6
 8016d48:	f000 f8be 	bl	8016ec8 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 8016d4c:	4b08      	ldr	r3, [pc, #32]	@ (8016d70 <HW_IPCC_SYS_EvtNot+0x40>)
 8016d4e:	681b      	ldr	r3, [r3, #0]
 8016d50:	687a      	ldr	r2, [r7, #4]
 8016d52:	4610      	mov	r0, r2
 8016d54:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8016d56:	4805      	ldr	r0, [pc, #20]	@ (8016d6c <HW_IPCC_SYS_EvtNot+0x3c>)
 8016d58:	f000 f944 	bl	8016fe4 <LST_is_empty>
 8016d5c:	4603      	mov	r3, r0
 8016d5e:	2b00      	cmp	r3, #0
 8016d60:	d0ea      	beq.n	8016d38 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 8016d62:	bf00      	nop
}
 8016d64:	3708      	adds	r7, #8
 8016d66:	46bd      	mov	sp, r7
 8016d68:	bd80      	pop	{r7, pc}
 8016d6a:	bf00      	nop
 8016d6c:	200300d0 	.word	0x200300d0
 8016d70:	20001530 	.word	0x20001530

08016d74 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 8016d74:	b580      	push	{r7, lr}
 8016d76:	b082      	sub	sp, #8
 8016d78:	af00      	add	r7, sp, #0
 8016d7a:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 8016d7c:	4817      	ldr	r0, [pc, #92]	@ (8016ddc <TL_MM_Init+0x68>)
 8016d7e:	f000 f921 	bl	8016fc4 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 8016d82:	4817      	ldr	r0, [pc, #92]	@ (8016de0 <TL_MM_Init+0x6c>)
 8016d84:	f000 f91e 	bl	8016fc4 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 8016d88:	4b16      	ldr	r3, [pc, #88]	@ (8016de4 <TL_MM_Init+0x70>)
 8016d8a:	691b      	ldr	r3, [r3, #16]
 8016d8c:	4a16      	ldr	r2, [pc, #88]	@ (8016de8 <TL_MM_Init+0x74>)
 8016d8e:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 8016d90:	4b15      	ldr	r3, [pc, #84]	@ (8016de8 <TL_MM_Init+0x74>)
 8016d92:	681b      	ldr	r3, [r3, #0]
 8016d94:	687a      	ldr	r2, [r7, #4]
 8016d96:	6892      	ldr	r2, [r2, #8]
 8016d98:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 8016d9a:	4b13      	ldr	r3, [pc, #76]	@ (8016de8 <TL_MM_Init+0x74>)
 8016d9c:	681b      	ldr	r3, [r3, #0]
 8016d9e:	687a      	ldr	r2, [r7, #4]
 8016da0:	68d2      	ldr	r2, [r2, #12]
 8016da2:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 8016da4:	4b10      	ldr	r3, [pc, #64]	@ (8016de8 <TL_MM_Init+0x74>)
 8016da6:	681b      	ldr	r3, [r3, #0]
 8016da8:	4a0c      	ldr	r2, [pc, #48]	@ (8016ddc <TL_MM_Init+0x68>)
 8016daa:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 8016dac:	4b0e      	ldr	r3, [pc, #56]	@ (8016de8 <TL_MM_Init+0x74>)
 8016dae:	681b      	ldr	r3, [r3, #0]
 8016db0:	687a      	ldr	r2, [r7, #4]
 8016db2:	6812      	ldr	r2, [r2, #0]
 8016db4:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 8016db6:	4b0c      	ldr	r3, [pc, #48]	@ (8016de8 <TL_MM_Init+0x74>)
 8016db8:	681b      	ldr	r3, [r3, #0]
 8016dba:	687a      	ldr	r2, [r7, #4]
 8016dbc:	6852      	ldr	r2, [r2, #4]
 8016dbe:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 8016dc0:	4b09      	ldr	r3, [pc, #36]	@ (8016de8 <TL_MM_Init+0x74>)
 8016dc2:	681b      	ldr	r3, [r3, #0]
 8016dc4:	687a      	ldr	r2, [r7, #4]
 8016dc6:	6912      	ldr	r2, [r2, #16]
 8016dc8:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 8016dca:	4b07      	ldr	r3, [pc, #28]	@ (8016de8 <TL_MM_Init+0x74>)
 8016dcc:	681b      	ldr	r3, [r3, #0]
 8016dce:	687a      	ldr	r2, [r7, #4]
 8016dd0:	6952      	ldr	r2, [r2, #20]
 8016dd2:	619a      	str	r2, [r3, #24]

  return;
 8016dd4:	bf00      	nop
}
 8016dd6:	3708      	adds	r7, #8
 8016dd8:	46bd      	mov	sp, r7
 8016dda:	bd80      	pop	{r7, pc}
 8016ddc:	200300b8 	.word	0x200300b8
 8016de0:	2000151c 	.word	0x2000151c
 8016de4:	20030000 	.word	0x20030000
 8016de8:	20001534 	.word	0x20001534

08016dec <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 8016dec:	b580      	push	{r7, lr}
 8016dee:	b082      	sub	sp, #8
 8016df0:	af00      	add	r7, sp, #0
 8016df2:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 8016df4:	6879      	ldr	r1, [r7, #4]
 8016df6:	4807      	ldr	r0, [pc, #28]	@ (8016e14 <TL_MM_EvtDone+0x28>)
 8016df8:	f000 f93c 	bl	8017074 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 8016dfc:	6879      	ldr	r1, [r7, #4]
 8016dfe:	2000      	movs	r0, #0
 8016e00:	f000 f862 	bl	8016ec8 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 8016e04:	4804      	ldr	r0, [pc, #16]	@ (8016e18 <TL_MM_EvtDone+0x2c>)
 8016e06:	f001 fd27 	bl	8018858 <HW_IPCC_MM_SendFreeBuf>

  return;
 8016e0a:	bf00      	nop
}
 8016e0c:	3708      	adds	r7, #8
 8016e0e:	46bd      	mov	sp, r7
 8016e10:	bd80      	pop	{r7, pc}
 8016e12:	bf00      	nop
 8016e14:	2000151c 	.word	0x2000151c
 8016e18:	08016e1d 	.word	0x08016e1d

08016e1c <SendFreeBuf>:

static void SendFreeBuf( void )
{
 8016e1c:	b580      	push	{r7, lr}
 8016e1e:	b082      	sub	sp, #8
 8016e20:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8016e22:	e00c      	b.n	8016e3e <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 8016e24:	1d3b      	adds	r3, r7, #4
 8016e26:	4619      	mov	r1, r3
 8016e28:	480a      	ldr	r0, [pc, #40]	@ (8016e54 <SendFreeBuf+0x38>)
 8016e2a:	f000 f96a 	bl	8017102 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 8016e2e:	4b0a      	ldr	r3, [pc, #40]	@ (8016e58 <SendFreeBuf+0x3c>)
 8016e30:	691b      	ldr	r3, [r3, #16]
 8016e32:	691b      	ldr	r3, [r3, #16]
 8016e34:	687a      	ldr	r2, [r7, #4]
 8016e36:	4611      	mov	r1, r2
 8016e38:	4618      	mov	r0, r3
 8016e3a:	f000 f91b 	bl	8017074 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8016e3e:	4805      	ldr	r0, [pc, #20]	@ (8016e54 <SendFreeBuf+0x38>)
 8016e40:	f000 f8d0 	bl	8016fe4 <LST_is_empty>
 8016e44:	4603      	mov	r3, r0
 8016e46:	2b00      	cmp	r3, #0
 8016e48:	d0ec      	beq.n	8016e24 <SendFreeBuf+0x8>
  }

  return;
 8016e4a:	bf00      	nop
}
 8016e4c:	3708      	adds	r7, #8
 8016e4e:	46bd      	mov	sp, r7
 8016e50:	bd80      	pop	{r7, pc}
 8016e52:	bf00      	nop
 8016e54:	2000151c 	.word	0x2000151c
 8016e58:	20030000 	.word	0x20030000

08016e5c <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 8016e5c:	b580      	push	{r7, lr}
 8016e5e:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 8016e60:	4805      	ldr	r0, [pc, #20]	@ (8016e78 <TL_TRACES_Init+0x1c>)
 8016e62:	f000 f8af 	bl	8016fc4 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 8016e66:	4b05      	ldr	r3, [pc, #20]	@ (8016e7c <TL_TRACES_Init+0x20>)
 8016e68:	695b      	ldr	r3, [r3, #20]
 8016e6a:	4a03      	ldr	r2, [pc, #12]	@ (8016e78 <TL_TRACES_Init+0x1c>)
 8016e6c:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 8016e6e:	f001 fd29 	bl	80188c4 <HW_IPCC_TRACES_Init>

  return;
 8016e72:	bf00      	nop
}
 8016e74:	bd80      	pop	{r7, pc}
 8016e76:	bf00      	nop
 8016e78:	200300c0 	.word	0x200300c0
 8016e7c:	20030000 	.word	0x20030000

08016e80 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 8016e80:	b580      	push	{r7, lr}
 8016e82:	b082      	sub	sp, #8
 8016e84:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8016e86:	e008      	b.n	8016e9a <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 8016e88:	1d3b      	adds	r3, r7, #4
 8016e8a:	4619      	mov	r1, r3
 8016e8c:	4808      	ldr	r0, [pc, #32]	@ (8016eb0 <HW_IPCC_TRACES_EvtNot+0x30>)
 8016e8e:	f000 f938 	bl	8017102 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 8016e92:	687b      	ldr	r3, [r7, #4]
 8016e94:	4618      	mov	r0, r3
 8016e96:	f000 f80d 	bl	8016eb4 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8016e9a:	4805      	ldr	r0, [pc, #20]	@ (8016eb0 <HW_IPCC_TRACES_EvtNot+0x30>)
 8016e9c:	f000 f8a2 	bl	8016fe4 <LST_is_empty>
 8016ea0:	4603      	mov	r3, r0
 8016ea2:	2b00      	cmp	r3, #0
 8016ea4:	d0f0      	beq.n	8016e88 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 8016ea6:	bf00      	nop
}
 8016ea8:	3708      	adds	r7, #8
 8016eaa:	46bd      	mov	sp, r7
 8016eac:	bd80      	pop	{r7, pc}
 8016eae:	bf00      	nop
 8016eb0:	200300c0 	.word	0x200300c0

08016eb4 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 8016eb4:	b480      	push	{r7}
 8016eb6:	b083      	sub	sp, #12
 8016eb8:	af00      	add	r7, sp, #0
 8016eba:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 8016ebc:	bf00      	nop
 8016ebe:	370c      	adds	r7, #12
 8016ec0:	46bd      	mov	sp, r7
 8016ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ec6:	4770      	bx	lr

08016ec8 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 8016ec8:	b480      	push	{r7}
 8016eca:	b087      	sub	sp, #28
 8016ecc:	af00      	add	r7, sp, #0
 8016ece:	4603      	mov	r3, r0
 8016ed0:	6039      	str	r1, [r7, #0]
 8016ed2:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;
  TL_EvtSerial_t *p_cmd_rsp_packet;

  switch(packet_type)
 8016ed4:	79fb      	ldrb	r3, [r7, #7]
 8016ed6:	2b06      	cmp	r3, #6
 8016ed8:	d845      	bhi.n	8016f66 <OutputDbgTrace+0x9e>
 8016eda:	a201      	add	r2, pc, #4	@ (adr r2, 8016ee0 <OutputDbgTrace+0x18>)
 8016edc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016ee0:	08016efd 	.word	0x08016efd
 8016ee4:	08016f21 	.word	0x08016f21
 8016ee8:	08016f27 	.word	0x08016f27
 8016eec:	08016f3b 	.word	0x08016f3b
 8016ef0:	08016f47 	.word	0x08016f47
 8016ef4:	08016f4d 	.word	0x08016f4d
 8016ef8:	08016f5b 	.word	0x08016f5b
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8016efc:	683b      	ldr	r3, [r7, #0]
 8016efe:	617b      	str	r3, [r7, #20]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8016f00:	697b      	ldr	r3, [r7, #20]
 8016f02:	7a5b      	ldrb	r3, [r3, #9]
 8016f04:	2bff      	cmp	r3, #255	@ 0xff
 8016f06:	d005      	beq.n	8016f14 <OutputDbgTrace+0x4c>
 8016f08:	2bff      	cmp	r3, #255	@ 0xff
 8016f0a:	dc05      	bgt.n	8016f18 <OutputDbgTrace+0x50>
 8016f0c:	2b0e      	cmp	r3, #14
 8016f0e:	d005      	beq.n	8016f1c <OutputDbgTrace+0x54>
 8016f10:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 8016f12:	e001      	b.n	8016f18 <OutputDbgTrace+0x50>
          break;
 8016f14:	bf00      	nop
 8016f16:	e027      	b.n	8016f68 <OutputDbgTrace+0xa0>
          break;
 8016f18:	bf00      	nop
 8016f1a:	e025      	b.n	8016f68 <OutputDbgTrace+0xa0>
          break;
 8016f1c:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 8016f1e:	e023      	b.n	8016f68 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8016f20:	683b      	ldr	r3, [r7, #0]
 8016f22:	60fb      	str	r3, [r7, #12]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8016f24:	e020      	b.n	8016f68 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8016f26:	683b      	ldr	r3, [r7, #0]
 8016f28:	617b      	str	r3, [r7, #20]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8016f2a:	697b      	ldr	r3, [r7, #20]
 8016f2c:	7a5b      	ldrb	r3, [r3, #9]
 8016f2e:	2b0e      	cmp	r3, #14
 8016f30:	d001      	beq.n	8016f36 <OutputDbgTrace+0x6e>
 8016f32:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8016f34:	e000      	b.n	8016f38 <OutputDbgTrace+0x70>
          break;
 8016f36:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8016f38:	e016      	b.n	8016f68 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8016f3a:	683b      	ldr	r3, [r7, #0]
 8016f3c:	617b      	str	r3, [r7, #20]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8016f3e:	697b      	ldr	r3, [r7, #20]
 8016f40:	7a5b      	ldrb	r3, [r3, #9]
 8016f42:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8016f44:	e010      	b.n	8016f68 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8016f46:	683b      	ldr	r3, [r7, #0]
 8016f48:	60fb      	str	r3, [r7, #12]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8016f4a:	e00d      	b.n	8016f68 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_cmd_rsp_packet = (TL_EvtSerial_t*)buffer;
 8016f4c:	683b      	ldr	r3, [r7, #0]
 8016f4e:	613b      	str	r3, [r7, #16]
      switch(p_cmd_rsp_packet->evt.evtcode)
 8016f50:	693b      	ldr	r3, [r7, #16]
 8016f52:	785b      	ldrb	r3, [r3, #1]
 8016f54:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_cmd_rsp_packet->evt.evtcode);
          break;
 8016f56:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_rsp_packet->evt, p_cmd_rsp_packet->evt.plen+TL_EVT_HDR_SIZE);
      break;
 8016f58:	e006      	b.n	8016f68 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8016f5a:	683b      	ldr	r3, [r7, #0]
 8016f5c:	617b      	str	r3, [r7, #20]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8016f5e:	697b      	ldr	r3, [r7, #20]
 8016f60:	7a5b      	ldrb	r3, [r3, #9]
 8016f62:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8016f64:	e000      	b.n	8016f68 <OutputDbgTrace+0xa0>

    default:
      break;
 8016f66:	bf00      	nop
  }

  return;
 8016f68:	bf00      	nop
}
 8016f6a:	371c      	adds	r7, #28
 8016f6c:	46bd      	mov	sp, r7
 8016f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f72:	4770      	bx	lr

08016f74 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 8016f74:	b480      	push	{r7}
 8016f76:	b085      	sub	sp, #20
 8016f78:	af00      	add	r7, sp, #0
 8016f7a:	4603      	mov	r3, r0
 8016f7c:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 8016f7e:	4b0f      	ldr	r3, [pc, #60]	@ (8016fbc <OTP_Read+0x48>)
 8016f80:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8016f82:	e002      	b.n	8016f8a <OTP_Read+0x16>
  {
    p_id -= 8 ;
 8016f84:	68fb      	ldr	r3, [r7, #12]
 8016f86:	3b08      	subs	r3, #8
 8016f88:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8016f8a:	68fb      	ldr	r3, [r7, #12]
 8016f8c:	3307      	adds	r3, #7
 8016f8e:	781b      	ldrb	r3, [r3, #0]
 8016f90:	79fa      	ldrb	r2, [r7, #7]
 8016f92:	429a      	cmp	r2, r3
 8016f94:	d003      	beq.n	8016f9e <OTP_Read+0x2a>
 8016f96:	68fb      	ldr	r3, [r7, #12]
 8016f98:	4a09      	ldr	r2, [pc, #36]	@ (8016fc0 <OTP_Read+0x4c>)
 8016f9a:	4293      	cmp	r3, r2
 8016f9c:	d1f2      	bne.n	8016f84 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 8016f9e:	68fb      	ldr	r3, [r7, #12]
 8016fa0:	3307      	adds	r3, #7
 8016fa2:	781b      	ldrb	r3, [r3, #0]
 8016fa4:	79fa      	ldrb	r2, [r7, #7]
 8016fa6:	429a      	cmp	r2, r3
 8016fa8:	d001      	beq.n	8016fae <OTP_Read+0x3a>
  {
    p_id = 0 ;
 8016faa:	2300      	movs	r3, #0
 8016fac:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 8016fae:	68fb      	ldr	r3, [r7, #12]
}
 8016fb0:	4618      	mov	r0, r3
 8016fb2:	3714      	adds	r7, #20
 8016fb4:	46bd      	mov	sp, r7
 8016fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fba:	4770      	bx	lr
 8016fbc:	1fff73f8 	.word	0x1fff73f8
 8016fc0:	1fff7000 	.word	0x1fff7000

08016fc4 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 8016fc4:	b480      	push	{r7}
 8016fc6:	b083      	sub	sp, #12
 8016fc8:	af00      	add	r7, sp, #0
 8016fca:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8016fcc:	687b      	ldr	r3, [r7, #4]
 8016fce:	687a      	ldr	r2, [r7, #4]
 8016fd0:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 8016fd2:	687b      	ldr	r3, [r7, #4]
 8016fd4:	687a      	ldr	r2, [r7, #4]
 8016fd6:	605a      	str	r2, [r3, #4]
}
 8016fd8:	bf00      	nop
 8016fda:	370c      	adds	r7, #12
 8016fdc:	46bd      	mov	sp, r7
 8016fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fe2:	4770      	bx	lr

08016fe4 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 8016fe4:	b480      	push	{r7}
 8016fe6:	b087      	sub	sp, #28
 8016fe8:	af00      	add	r7, sp, #0
 8016fea:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016fec:	f3ef 8310 	mrs	r3, PRIMASK
 8016ff0:	60fb      	str	r3, [r7, #12]
  return(result);
 8016ff2:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8016ff4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8016ff6:	b672      	cpsid	i
}
 8016ff8:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 8016ffa:	687b      	ldr	r3, [r7, #4]
 8016ffc:	681b      	ldr	r3, [r3, #0]
 8016ffe:	687a      	ldr	r2, [r7, #4]
 8017000:	429a      	cmp	r2, r3
 8017002:	d102      	bne.n	801700a <LST_is_empty+0x26>
  {
    return_value = TRUE;
 8017004:	2301      	movs	r3, #1
 8017006:	75fb      	strb	r3, [r7, #23]
 8017008:	e001      	b.n	801700e <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 801700a:	2300      	movs	r3, #0
 801700c:	75fb      	strb	r3, [r7, #23]
 801700e:	693b      	ldr	r3, [r7, #16]
 8017010:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017012:	68bb      	ldr	r3, [r7, #8]
 8017014:	f383 8810 	msr	PRIMASK, r3
}
 8017018:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 801701a:	7dfb      	ldrb	r3, [r7, #23]
}
 801701c:	4618      	mov	r0, r3
 801701e:	371c      	adds	r7, #28
 8017020:	46bd      	mov	sp, r7
 8017022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017026:	4770      	bx	lr

08017028 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 8017028:	b480      	push	{r7}
 801702a:	b087      	sub	sp, #28
 801702c:	af00      	add	r7, sp, #0
 801702e:	6078      	str	r0, [r7, #4]
 8017030:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017032:	f3ef 8310 	mrs	r3, PRIMASK
 8017036:	60fb      	str	r3, [r7, #12]
  return(result);
 8017038:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 801703a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801703c:	b672      	cpsid	i
}
 801703e:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 8017040:	687b      	ldr	r3, [r7, #4]
 8017042:	681a      	ldr	r2, [r3, #0]
 8017044:	683b      	ldr	r3, [r7, #0]
 8017046:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8017048:	683b      	ldr	r3, [r7, #0]
 801704a:	687a      	ldr	r2, [r7, #4]
 801704c:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 801704e:	687b      	ldr	r3, [r7, #4]
 8017050:	683a      	ldr	r2, [r7, #0]
 8017052:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8017054:	683b      	ldr	r3, [r7, #0]
 8017056:	681b      	ldr	r3, [r3, #0]
 8017058:	683a      	ldr	r2, [r7, #0]
 801705a:	605a      	str	r2, [r3, #4]
 801705c:	697b      	ldr	r3, [r7, #20]
 801705e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017060:	693b      	ldr	r3, [r7, #16]
 8017062:	f383 8810 	msr	PRIMASK, r3
}
 8017066:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8017068:	bf00      	nop
 801706a:	371c      	adds	r7, #28
 801706c:	46bd      	mov	sp, r7
 801706e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017072:	4770      	bx	lr

08017074 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 8017074:	b480      	push	{r7}
 8017076:	b087      	sub	sp, #28
 8017078:	af00      	add	r7, sp, #0
 801707a:	6078      	str	r0, [r7, #4]
 801707c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801707e:	f3ef 8310 	mrs	r3, PRIMASK
 8017082:	60fb      	str	r3, [r7, #12]
  return(result);
 8017084:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8017086:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8017088:	b672      	cpsid	i
}
 801708a:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 801708c:	683b      	ldr	r3, [r7, #0]
 801708e:	687a      	ldr	r2, [r7, #4]
 8017090:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8017092:	687b      	ldr	r3, [r7, #4]
 8017094:	685a      	ldr	r2, [r3, #4]
 8017096:	683b      	ldr	r3, [r7, #0]
 8017098:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 801709a:	687b      	ldr	r3, [r7, #4]
 801709c:	683a      	ldr	r2, [r7, #0]
 801709e:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 80170a0:	683b      	ldr	r3, [r7, #0]
 80170a2:	685b      	ldr	r3, [r3, #4]
 80170a4:	683a      	ldr	r2, [r7, #0]
 80170a6:	601a      	str	r2, [r3, #0]
 80170a8:	697b      	ldr	r3, [r7, #20]
 80170aa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80170ac:	693b      	ldr	r3, [r7, #16]
 80170ae:	f383 8810 	msr	PRIMASK, r3
}
 80170b2:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80170b4:	bf00      	nop
 80170b6:	371c      	adds	r7, #28
 80170b8:	46bd      	mov	sp, r7
 80170ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170be:	4770      	bx	lr

080170c0 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 80170c0:	b480      	push	{r7}
 80170c2:	b087      	sub	sp, #28
 80170c4:	af00      	add	r7, sp, #0
 80170c6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80170c8:	f3ef 8310 	mrs	r3, PRIMASK
 80170cc:	60fb      	str	r3, [r7, #12]
  return(result);
 80170ce:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80170d0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80170d2:	b672      	cpsid	i
}
 80170d4:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 80170d6:	687b      	ldr	r3, [r7, #4]
 80170d8:	685b      	ldr	r3, [r3, #4]
 80170da:	687a      	ldr	r2, [r7, #4]
 80170dc:	6812      	ldr	r2, [r2, #0]
 80170de:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 80170e0:	687b      	ldr	r3, [r7, #4]
 80170e2:	681b      	ldr	r3, [r3, #0]
 80170e4:	687a      	ldr	r2, [r7, #4]
 80170e6:	6852      	ldr	r2, [r2, #4]
 80170e8:	605a      	str	r2, [r3, #4]
 80170ea:	697b      	ldr	r3, [r7, #20]
 80170ec:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80170ee:	693b      	ldr	r3, [r7, #16]
 80170f0:	f383 8810 	msr	PRIMASK, r3
}
 80170f4:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80170f6:	bf00      	nop
 80170f8:	371c      	adds	r7, #28
 80170fa:	46bd      	mov	sp, r7
 80170fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017100:	4770      	bx	lr

08017102 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 8017102:	b580      	push	{r7, lr}
 8017104:	b086      	sub	sp, #24
 8017106:	af00      	add	r7, sp, #0
 8017108:	6078      	str	r0, [r7, #4]
 801710a:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801710c:	f3ef 8310 	mrs	r3, PRIMASK
 8017110:	60fb      	str	r3, [r7, #12]
  return(result);
 8017112:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8017114:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8017116:	b672      	cpsid	i
}
 8017118:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 801711a:	687b      	ldr	r3, [r7, #4]
 801711c:	681a      	ldr	r2, [r3, #0]
 801711e:	683b      	ldr	r3, [r7, #0]
 8017120:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 8017122:	687b      	ldr	r3, [r7, #4]
 8017124:	681b      	ldr	r3, [r3, #0]
 8017126:	4618      	mov	r0, r3
 8017128:	f7ff ffca 	bl	80170c0 <LST_remove_node>
 801712c:	697b      	ldr	r3, [r7, #20]
 801712e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017130:	693b      	ldr	r3, [r7, #16]
 8017132:	f383 8810 	msr	PRIMASK, r3
}
 8017136:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8017138:	bf00      	nop
 801713a:	3718      	adds	r7, #24
 801713c:	46bd      	mov	sp, r7
 801713e:	bd80      	pop	{r7, pc}

08017140 <SPIF_Delay>:
bool     SPIF_ReadFn(SPIF_HandleTypeDef *Handle, uint32_t Address, uint8_t *Data, uint32_t Size);

/***********************************************************************************************************/

void SPIF_Delay(uint32_t Delay)
{
 8017140:	b580      	push	{r7, lr}
 8017142:	b082      	sub	sp, #8
 8017144:	af00      	add	r7, sp, #0
 8017146:	6078      	str	r0, [r7, #4]
#if SPIF_RTOS == SPIF_RTOS_DISABLE
  HAL_Delay(Delay);
 8017148:	6878      	ldr	r0, [r7, #4]
 801714a:	f7ea faf0 	bl	800172e <HAL_Delay>
  uint32_t d = (TX_TIMER_TICKS_PER_SECOND * Delay) / 1000;
  if (d == 0)
    d = 1;
  tx_thread_sleep(d);
#endif
}
 801714e:	bf00      	nop
 8017150:	3708      	adds	r7, #8
 8017152:	46bd      	mov	sp, r7
 8017154:	bd80      	pop	{r7, pc}

08017156 <SPIF_Lock>:

/***********************************************************************************************************/

void SPIF_Lock(SPIF_HandleTypeDef *Handle)
{
 8017156:	b580      	push	{r7, lr}
 8017158:	b082      	sub	sp, #8
 801715a:	af00      	add	r7, sp, #0
 801715c:	6078      	str	r0, [r7, #4]
  while (Handle->Lock)
 801715e:	e002      	b.n	8017166 <SPIF_Lock+0x10>
  {
    SPIF_Delay(1);
 8017160:	2001      	movs	r0, #1
 8017162:	f7ff ffed 	bl	8017140 <SPIF_Delay>
  while (Handle->Lock)
 8017166:	687b      	ldr	r3, [r7, #4]
 8017168:	7b1b      	ldrb	r3, [r3, #12]
 801716a:	2b00      	cmp	r3, #0
 801716c:	d1f8      	bne.n	8017160 <SPIF_Lock+0xa>
  }
  Handle->Lock = 1;
 801716e:	687b      	ldr	r3, [r7, #4]
 8017170:	2201      	movs	r2, #1
 8017172:	731a      	strb	r2, [r3, #12]
}
 8017174:	bf00      	nop
 8017176:	3708      	adds	r7, #8
 8017178:	46bd      	mov	sp, r7
 801717a:	bd80      	pop	{r7, pc}

0801717c <SPIF_UnLock>:

/***********************************************************************************************************/

void SPIF_UnLock(SPIF_HandleTypeDef *Handle)
{
 801717c:	b480      	push	{r7}
 801717e:	b083      	sub	sp, #12
 8017180:	af00      	add	r7, sp, #0
 8017182:	6078      	str	r0, [r7, #4]
  Handle->Lock = 0;
 8017184:	687b      	ldr	r3, [r7, #4]
 8017186:	2200      	movs	r2, #0
 8017188:	731a      	strb	r2, [r3, #12]
}
 801718a:	bf00      	nop
 801718c:	370c      	adds	r7, #12
 801718e:	46bd      	mov	sp, r7
 8017190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017194:	4770      	bx	lr

08017196 <SPIF_CsPin>:

/***********************************************************************************************************/

void SPIF_CsPin(SPIF_HandleTypeDef *Handle, bool Select)
{
 8017196:	b580      	push	{r7, lr}
 8017198:	b084      	sub	sp, #16
 801719a:	af00      	add	r7, sp, #0
 801719c:	6078      	str	r0, [r7, #4]
 801719e:	460b      	mov	r3, r1
 80171a0:	70fb      	strb	r3, [r7, #3]
  HAL_GPIO_WritePin(Handle->Gpio, Handle->Pin, (GPIO_PinState)Select);
 80171a2:	687b      	ldr	r3, [r7, #4]
 80171a4:	6858      	ldr	r0, [r3, #4]
 80171a6:	687b      	ldr	r3, [r7, #4]
 80171a8:	691b      	ldr	r3, [r3, #16]
 80171aa:	b29b      	uxth	r3, r3
 80171ac:	78fa      	ldrb	r2, [r7, #3]
 80171ae:	4619      	mov	r1, r3
 80171b0:	f7f2 f9e6 	bl	8009580 <HAL_GPIO_WritePin>
  for (int i = 0; i < 10; i++);
 80171b4:	2300      	movs	r3, #0
 80171b6:	60fb      	str	r3, [r7, #12]
 80171b8:	e002      	b.n	80171c0 <SPIF_CsPin+0x2a>
 80171ba:	68fb      	ldr	r3, [r7, #12]
 80171bc:	3301      	adds	r3, #1
 80171be:	60fb      	str	r3, [r7, #12]
 80171c0:	68fb      	ldr	r3, [r7, #12]
 80171c2:	2b09      	cmp	r3, #9
 80171c4:	ddf9      	ble.n	80171ba <SPIF_CsPin+0x24>
}
 80171c6:	bf00      	nop
 80171c8:	bf00      	nop
 80171ca:	3710      	adds	r7, #16
 80171cc:	46bd      	mov	sp, r7
 80171ce:	bd80      	pop	{r7, pc}

080171d0 <SPIF_TransmitReceive>:

/***********************************************************************************************************/

bool SPIF_TransmitReceive(SPIF_HandleTypeDef *Handle, uint8_t *Tx, uint8_t *Rx, size_t Size, uint32_t Timeout)
{
 80171d0:	b580      	push	{r7, lr}
 80171d2:	b088      	sub	sp, #32
 80171d4:	af02      	add	r7, sp, #8
 80171d6:	60f8      	str	r0, [r7, #12]
 80171d8:	60b9      	str	r1, [r7, #8]
 80171da:	607a      	str	r2, [r7, #4]
 80171dc:	603b      	str	r3, [r7, #0]
  bool retVal = false;
 80171de:	2300      	movs	r3, #0
 80171e0:	75fb      	strb	r3, [r7, #23]
#if (SPIF_PLATFORM == SPIF_PLATFORM_HAL)
  if (HAL_SPI_TransmitReceive(Handle->HSpi, Tx, Rx, Size, Timeout) == HAL_OK)
 80171e2:	68fb      	ldr	r3, [r7, #12]
 80171e4:	6818      	ldr	r0, [r3, #0]
 80171e6:	683b      	ldr	r3, [r7, #0]
 80171e8:	b29a      	uxth	r2, r3
 80171ea:	6a3b      	ldr	r3, [r7, #32]
 80171ec:	9300      	str	r3, [sp, #0]
 80171ee:	4613      	mov	r3, r2
 80171f0:	687a      	ldr	r2, [r7, #4]
 80171f2:	68b9      	ldr	r1, [r7, #8]
 80171f4:	f7f7 f92b 	bl	800e44e <HAL_SPI_TransmitReceive>
 80171f8:	4603      	mov	r3, r0
 80171fa:	2b00      	cmp	r3, #0
 80171fc:	d101      	bne.n	8017202 <SPIF_TransmitReceive+0x32>
  {
    retVal = true;
 80171fe:	2301      	movs	r3, #1
 8017200:	75fb      	strb	r3, [r7, #23]
        break;
      }
    }
  }
#endif
  return retVal;
 8017202:	7dfb      	ldrb	r3, [r7, #23]
}
 8017204:	4618      	mov	r0, r3
 8017206:	3718      	adds	r7, #24
 8017208:	46bd      	mov	sp, r7
 801720a:	bd80      	pop	{r7, pc}

0801720c <SPIF_Transmit>:

/***********************************************************************************************************/

bool SPIF_Transmit(SPIF_HandleTypeDef *Handle, uint8_t *Tx, size_t Size, uint32_t Timeout)
{
 801720c:	b580      	push	{r7, lr}
 801720e:	b086      	sub	sp, #24
 8017210:	af00      	add	r7, sp, #0
 8017212:	60f8      	str	r0, [r7, #12]
 8017214:	60b9      	str	r1, [r7, #8]
 8017216:	607a      	str	r2, [r7, #4]
 8017218:	603b      	str	r3, [r7, #0]
  bool retVal = false;
 801721a:	2300      	movs	r3, #0
 801721c:	75fb      	strb	r3, [r7, #23]
#if (SPIF_PLATFORM == SPIF_PLATFORM_HAL)
  if (HAL_SPI_Transmit(Handle->HSpi, Tx, Size, Timeout) == HAL_OK)
 801721e:	68fb      	ldr	r3, [r7, #12]
 8017220:	6818      	ldr	r0, [r3, #0]
 8017222:	687b      	ldr	r3, [r7, #4]
 8017224:	b29a      	uxth	r2, r3
 8017226:	683b      	ldr	r3, [r7, #0]
 8017228:	68b9      	ldr	r1, [r7, #8]
 801722a:	f7f6 fe62 	bl	800def2 <HAL_SPI_Transmit>
 801722e:	4603      	mov	r3, r0
 8017230:	2b00      	cmp	r3, #0
 8017232:	d101      	bne.n	8017238 <SPIF_Transmit+0x2c>
  {
    retVal = true;
 8017234:	2301      	movs	r3, #1
 8017236:	75fb      	strb	r3, [r7, #23]
        break;
      }
    }
  }
#endif
  return retVal;
 8017238:	7dfb      	ldrb	r3, [r7, #23]
}
 801723a:	4618      	mov	r0, r3
 801723c:	3718      	adds	r7, #24
 801723e:	46bd      	mov	sp, r7
 8017240:	bd80      	pop	{r7, pc}

08017242 <SPIF_Receive>:

/***********************************************************************************************************/

bool SPIF_Receive(SPIF_HandleTypeDef *Handle, uint8_t *Rx, size_t Size, uint32_t Timeout)
{
 8017242:	b580      	push	{r7, lr}
 8017244:	b086      	sub	sp, #24
 8017246:	af00      	add	r7, sp, #0
 8017248:	60f8      	str	r0, [r7, #12]
 801724a:	60b9      	str	r1, [r7, #8]
 801724c:	607a      	str	r2, [r7, #4]
 801724e:	603b      	str	r3, [r7, #0]
  bool retVal = false;
 8017250:	2300      	movs	r3, #0
 8017252:	75fb      	strb	r3, [r7, #23]
#if (SPIF_PLATFORM == SPIF_PLATFORM_HAL)
  if (HAL_SPI_Receive(Handle->HSpi, Rx, Size, Timeout) == HAL_OK)
 8017254:	68fb      	ldr	r3, [r7, #12]
 8017256:	6818      	ldr	r0, [r3, #0]
 8017258:	687b      	ldr	r3, [r7, #4]
 801725a:	b29a      	uxth	r2, r3
 801725c:	683b      	ldr	r3, [r7, #0]
 801725e:	68b9      	ldr	r1, [r7, #8]
 8017260:	f7f6 ffbd 	bl	800e1de <HAL_SPI_Receive>
 8017264:	4603      	mov	r3, r0
 8017266:	2b00      	cmp	r3, #0
 8017268:	d101      	bne.n	801726e <SPIF_Receive+0x2c>
  {
    retVal = true;
 801726a:	2301      	movs	r3, #1
 801726c:	75fb      	strb	r3, [r7, #23]
        break;
      }
    }
  }
#endif
  return retVal;
 801726e:	7dfb      	ldrb	r3, [r7, #23]
}
 8017270:	4618      	mov	r0, r3
 8017272:	3718      	adds	r7, #24
 8017274:	46bd      	mov	sp, r7
 8017276:	bd80      	pop	{r7, pc}

08017278 <SPIF_WriteEnable>:

/***********************************************************************************************************/

bool SPIF_WriteEnable(SPIF_HandleTypeDef *Handle)
{
 8017278:	b580      	push	{r7, lr}
 801727a:	b084      	sub	sp, #16
 801727c:	af00      	add	r7, sp, #0
 801727e:	6078      	str	r0, [r7, #4]
  bool retVal = true;
 8017280:	2301      	movs	r3, #1
 8017282:	73fb      	strb	r3, [r7, #15]
  uint8_t tx[1] = {SPIF_CMD_WRITEENABLE};
 8017284:	2306      	movs	r3, #6
 8017286:	733b      	strb	r3, [r7, #12]
  SPIF_CsPin(Handle, 0);
 8017288:	2100      	movs	r1, #0
 801728a:	6878      	ldr	r0, [r7, #4]
 801728c:	f7ff ff83 	bl	8017196 <SPIF_CsPin>
  if (SPIF_Transmit(Handle, tx, 1, 100) == false)
 8017290:	f107 010c 	add.w	r1, r7, #12
 8017294:	2364      	movs	r3, #100	@ 0x64
 8017296:	2201      	movs	r2, #1
 8017298:	6878      	ldr	r0, [r7, #4]
 801729a:	f7ff ffb7 	bl	801720c <SPIF_Transmit>
 801729e:	4603      	mov	r3, r0
 80172a0:	f083 0301 	eor.w	r3, r3, #1
 80172a4:	b2db      	uxtb	r3, r3
 80172a6:	2b00      	cmp	r3, #0
 80172a8:	d001      	beq.n	80172ae <SPIF_WriteEnable+0x36>
  {
    retVal = false;
 80172aa:	2300      	movs	r3, #0
 80172ac:	73fb      	strb	r3, [r7, #15]
    dprintf("SPIF_WriteEnable() Error\r\n");
  }
  SPIF_CsPin(Handle, 1);
 80172ae:	2101      	movs	r1, #1
 80172b0:	6878      	ldr	r0, [r7, #4]
 80172b2:	f7ff ff70 	bl	8017196 <SPIF_CsPin>
  return retVal;
 80172b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80172b8:	4618      	mov	r0, r3
 80172ba:	3710      	adds	r7, #16
 80172bc:	46bd      	mov	sp, r7
 80172be:	bd80      	pop	{r7, pc}

080172c0 <SPIF_WriteDisable>:

/***********************************************************************************************************/

bool SPIF_WriteDisable(SPIF_HandleTypeDef *Handle)
{
 80172c0:	b580      	push	{r7, lr}
 80172c2:	b084      	sub	sp, #16
 80172c4:	af00      	add	r7, sp, #0
 80172c6:	6078      	str	r0, [r7, #4]
  bool retVal = true;
 80172c8:	2301      	movs	r3, #1
 80172ca:	73fb      	strb	r3, [r7, #15]
  uint8_t tx[1] = {SPIF_CMD_WRITEDISABLE};
 80172cc:	2304      	movs	r3, #4
 80172ce:	733b      	strb	r3, [r7, #12]
  SPIF_CsPin(Handle, 0);
 80172d0:	2100      	movs	r1, #0
 80172d2:	6878      	ldr	r0, [r7, #4]
 80172d4:	f7ff ff5f 	bl	8017196 <SPIF_CsPin>
  if (SPIF_Transmit(Handle, tx, 1, 100) == false)
 80172d8:	f107 010c 	add.w	r1, r7, #12
 80172dc:	2364      	movs	r3, #100	@ 0x64
 80172de:	2201      	movs	r2, #1
 80172e0:	6878      	ldr	r0, [r7, #4]
 80172e2:	f7ff ff93 	bl	801720c <SPIF_Transmit>
 80172e6:	4603      	mov	r3, r0
 80172e8:	f083 0301 	eor.w	r3, r3, #1
 80172ec:	b2db      	uxtb	r3, r3
 80172ee:	2b00      	cmp	r3, #0
 80172f0:	d001      	beq.n	80172f6 <SPIF_WriteDisable+0x36>
  {
    retVal = false;
 80172f2:	2300      	movs	r3, #0
 80172f4:	73fb      	strb	r3, [r7, #15]
    dprintf("SPIF_WriteDisable() Error\r\n");
  }
  SPIF_CsPin(Handle, 1);
 80172f6:	2101      	movs	r1, #1
 80172f8:	6878      	ldr	r0, [r7, #4]
 80172fa:	f7ff ff4c 	bl	8017196 <SPIF_CsPin>
  return retVal;
 80172fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8017300:	4618      	mov	r0, r3
 8017302:	3710      	adds	r7, #16
 8017304:	46bd      	mov	sp, r7
 8017306:	bd80      	pop	{r7, pc}

08017308 <SPIF_ReadReg1>:

/***********************************************************************************************************/

uint8_t SPIF_ReadReg1(SPIF_HandleTypeDef *Handle)
{
 8017308:	b580      	push	{r7, lr}
 801730a:	b086      	sub	sp, #24
 801730c:	af02      	add	r7, sp, #8
 801730e:	6078      	str	r0, [r7, #4]
  uint8_t retVal = 0;
 8017310:	2300      	movs	r3, #0
 8017312:	73fb      	strb	r3, [r7, #15]
  uint8_t tx[2] = {SPIF_CMD_READSTATUS1, SPIF_DUMMY_BYTE};
 8017314:	f24a 5305 	movw	r3, #42245	@ 0xa505
 8017318:	81bb      	strh	r3, [r7, #12]
  uint8_t rx[2];
  SPIF_CsPin(Handle, 0);
 801731a:	2100      	movs	r1, #0
 801731c:	6878      	ldr	r0, [r7, #4]
 801731e:	f7ff ff3a 	bl	8017196 <SPIF_CsPin>
  if (SPIF_TransmitReceive(Handle, tx, rx, 2, 100) == true)
 8017322:	f107 0208 	add.w	r2, r7, #8
 8017326:	f107 010c 	add.w	r1, r7, #12
 801732a:	2364      	movs	r3, #100	@ 0x64
 801732c:	9300      	str	r3, [sp, #0]
 801732e:	2302      	movs	r3, #2
 8017330:	6878      	ldr	r0, [r7, #4]
 8017332:	f7ff ff4d 	bl	80171d0 <SPIF_TransmitReceive>
 8017336:	4603      	mov	r3, r0
 8017338:	2b00      	cmp	r3, #0
 801733a:	d001      	beq.n	8017340 <SPIF_ReadReg1+0x38>
  {
    retVal = rx[1];
 801733c:	7a7b      	ldrb	r3, [r7, #9]
 801733e:	73fb      	strb	r3, [r7, #15]
  }
  SPIF_CsPin(Handle, 1);
 8017340:	2101      	movs	r1, #1
 8017342:	6878      	ldr	r0, [r7, #4]
 8017344:	f7ff ff27 	bl	8017196 <SPIF_CsPin>
  return retVal;
 8017348:	7bfb      	ldrb	r3, [r7, #15]
}
 801734a:	4618      	mov	r0, r3
 801734c:	3710      	adds	r7, #16
 801734e:	46bd      	mov	sp, r7
 8017350:	bd80      	pop	{r7, pc}

08017352 <SPIF_WaitForWriting>:
}

/***********************************************************************************************************/

bool SPIF_WaitForWriting(SPIF_HandleTypeDef *Handle, uint32_t Timeout)
{
 8017352:	b580      	push	{r7, lr}
 8017354:	b084      	sub	sp, #16
 8017356:	af00      	add	r7, sp, #0
 8017358:	6078      	str	r0, [r7, #4]
 801735a:	6039      	str	r1, [r7, #0]
  bool retVal = false;
 801735c:	2300      	movs	r3, #0
 801735e:	73fb      	strb	r3, [r7, #15]
  uint32_t startTime = HAL_GetTick();
 8017360:	f7f0 f896 	bl	8007490 <HAL_GetTick>
 8017364:	60b8      	str	r0, [r7, #8]
  while (1)
  {
    SPIF_Delay(1);
 8017366:	2001      	movs	r0, #1
 8017368:	f7ff feea 	bl	8017140 <SPIF_Delay>
    if (HAL_GetTick() - startTime >= Timeout)
 801736c:	f7f0 f890 	bl	8007490 <HAL_GetTick>
 8017370:	4602      	mov	r2, r0
 8017372:	68bb      	ldr	r3, [r7, #8]
 8017374:	1ad3      	subs	r3, r2, r3
 8017376:	683a      	ldr	r2, [r7, #0]
 8017378:	429a      	cmp	r2, r3
 801737a:	d90a      	bls.n	8017392 <SPIF_WaitForWriting+0x40>
    {
      dprintf("SPIF_WaitForWriting() TIMEOUT\r\n");
      break;
    }
    if ((SPIF_ReadReg1(Handle) & SPIF_STATUS1_BUSY) == 0)
 801737c:	6878      	ldr	r0, [r7, #4]
 801737e:	f7ff ffc3 	bl	8017308 <SPIF_ReadReg1>
 8017382:	4603      	mov	r3, r0
 8017384:	f003 0301 	and.w	r3, r3, #1
 8017388:	2b00      	cmp	r3, #0
 801738a:	d1ec      	bne.n	8017366 <SPIF_WaitForWriting+0x14>
    {
      retVal = true;
 801738c:	2301      	movs	r3, #1
 801738e:	73fb      	strb	r3, [r7, #15]
      break;
 8017390:	e000      	b.n	8017394 <SPIF_WaitForWriting+0x42>
      break;
 8017392:	bf00      	nop
    }
  }
  return retVal;
 8017394:	7bfb      	ldrb	r3, [r7, #15]
}
 8017396:	4618      	mov	r0, r3
 8017398:	3710      	adds	r7, #16
 801739a:	46bd      	mov	sp, r7
 801739c:	bd80      	pop	{r7, pc}
	...

080173a0 <SPIF_FindChip>:

/***********************************************************************************************************/

bool SPIF_FindChip(SPIF_HandleTypeDef *Handle)
{
 80173a0:	b580      	push	{r7, lr}
 80173a2:	b088      	sub	sp, #32
 80173a4:	af02      	add	r7, sp, #8
 80173a6:	6078      	str	r0, [r7, #4]
  uint8_t tx[4] = {SPIF_CMD_JEDECID, 0xFF, 0xFF, 0xFF};
 80173a8:	f06f 0360 	mvn.w	r3, #96	@ 0x60
 80173ac:	613b      	str	r3, [r7, #16]
  uint8_t rx[4];
  bool retVal = false;
 80173ae:	2300      	movs	r3, #0
 80173b0:	75fb      	strb	r3, [r7, #23]
  do
  {
    dprintf("SPIF_FindChip()\r\n");
    SPIF_CsPin(Handle, 0);
 80173b2:	2100      	movs	r1, #0
 80173b4:	6878      	ldr	r0, [r7, #4]
 80173b6:	f7ff feee 	bl	8017196 <SPIF_CsPin>
    if (SPIF_TransmitReceive(Handle, tx, rx, 4, 100) == false)
 80173ba:	f107 020c 	add.w	r2, r7, #12
 80173be:	f107 0110 	add.w	r1, r7, #16
 80173c2:	2364      	movs	r3, #100	@ 0x64
 80173c4:	9300      	str	r3, [sp, #0]
 80173c6:	2304      	movs	r3, #4
 80173c8:	6878      	ldr	r0, [r7, #4]
 80173ca:	f7ff ff01 	bl	80171d0 <SPIF_TransmitReceive>
 80173ce:	4603      	mov	r3, r0
 80173d0:	f083 0301 	eor.w	r3, r3, #1
 80173d4:	b2db      	uxtb	r3, r3
 80173d6:	2b00      	cmp	r3, #0
 80173d8:	d004      	beq.n	80173e4 <SPIF_FindChip+0x44>
    {
      SPIF_CsPin(Handle, 1);
 80173da:	2101      	movs	r1, #1
 80173dc:	6878      	ldr	r0, [r7, #4]
 80173de:	f7ff feda 	bl	8017196 <SPIF_CsPin>
      break;
 80173e2:	e16f      	b.n	80176c4 <SPIF_FindChip+0x324>
    }
    SPIF_CsPin(Handle, 1);
 80173e4:	2101      	movs	r1, #1
 80173e6:	6878      	ldr	r0, [r7, #4]
 80173e8:	f7ff fed5 	bl	8017196 <SPIF_CsPin>
    dprintf("CHIP ID: 0x%02X%02X%02X\r\n", rx[1], rx[2], rx[3]);
    Handle->Manufactor = rx[1];
 80173ec:	7b7a      	ldrb	r2, [r7, #13]
 80173ee:	687b      	ldr	r3, [r7, #4]
 80173f0:	721a      	strb	r2, [r3, #8]
    Handle->MemType = rx[2];
 80173f2:	7bba      	ldrb	r2, [r7, #14]
 80173f4:	687b      	ldr	r3, [r7, #4]
 80173f6:	72da      	strb	r2, [r3, #11]
    Handle->Size = rx[3];
 80173f8:	7bfa      	ldrb	r2, [r7, #15]
 80173fa:	687b      	ldr	r3, [r7, #4]
 80173fc:	725a      	strb	r2, [r3, #9]

    dprintf("SPIF MANUFACTURE: ");
    switch (Handle->Manufactor)
 80173fe:	687b      	ldr	r3, [r7, #4]
 8017400:	7a1b      	ldrb	r3, [r3, #8]
 8017402:	2bef      	cmp	r3, #239	@ 0xef
 8017404:	f000 80f0 	beq.w	80175e8 <SPIF_FindChip+0x248>
 8017408:	2bef      	cmp	r3, #239	@ 0xef
 801740a:	f300 80e9 	bgt.w	80175e0 <SPIF_FindChip+0x240>
 801740e:	2bc8      	cmp	r3, #200	@ 0xc8
 8017410:	f300 80e6 	bgt.w	80175e0 <SPIF_FindChip+0x240>
 8017414:	2b85      	cmp	r3, #133	@ 0x85
 8017416:	da0c      	bge.n	8017432 <SPIF_FindChip+0x92>
 8017418:	2b62      	cmp	r3, #98	@ 0x62
 801741a:	f000 80e7 	beq.w	80175ec <SPIF_FindChip+0x24c>
 801741e:	2b62      	cmp	r3, #98	@ 0x62
 8017420:	f300 80de 	bgt.w	80175e0 <SPIF_FindChip+0x240>
 8017424:	2b20      	cmp	r3, #32
 8017426:	f300 80d9 	bgt.w	80175dc <SPIF_FindChip+0x23c>
 801742a:	2b00      	cmp	r3, #0
 801742c:	f300 8090 	bgt.w	8017550 <SPIF_FindChip+0x1b0>
 8017430:	e0d6      	b.n	80175e0 <SPIF_FindChip+0x240>
 8017432:	3b85      	subs	r3, #133	@ 0x85
 8017434:	2b43      	cmp	r3, #67	@ 0x43
 8017436:	f200 80d3 	bhi.w	80175e0 <SPIF_FindChip+0x240>
 801743a:	a201      	add	r2, pc, #4	@ (adr r2, 8017440 <SPIF_FindChip+0xa0>)
 801743c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017440:	080175f1 	.word	0x080175f1
 8017444:	080175e1 	.word	0x080175e1
 8017448:	080175e1 	.word	0x080175e1
 801744c:	080175e1 	.word	0x080175e1
 8017450:	080175f1 	.word	0x080175f1
 8017454:	080175e1 	.word	0x080175e1
 8017458:	080175e1 	.word	0x080175e1
 801745c:	080175f1 	.word	0x080175f1
 8017460:	080175e1 	.word	0x080175e1
 8017464:	080175e1 	.word	0x080175e1
 8017468:	080175e1 	.word	0x080175e1
 801746c:	080175e1 	.word	0x080175e1
 8017470:	080175e1 	.word	0x080175e1
 8017474:	080175e1 	.word	0x080175e1
 8017478:	080175e1 	.word	0x080175e1
 801747c:	080175e1 	.word	0x080175e1
 8017480:	080175e1 	.word	0x080175e1
 8017484:	080175e1 	.word	0x080175e1
 8017488:	080175e1 	.word	0x080175e1
 801748c:	080175e1 	.word	0x080175e1
 8017490:	080175e1 	.word	0x080175e1
 8017494:	080175e1 	.word	0x080175e1
 8017498:	080175e1 	.word	0x080175e1
 801749c:	080175e1 	.word	0x080175e1
 80174a0:	080175f1 	.word	0x080175f1
 80174a4:	080175e1 	.word	0x080175e1
 80174a8:	080175e1 	.word	0x080175e1
 80174ac:	080175e1 	.word	0x080175e1
 80174b0:	080175f1 	.word	0x080175f1
 80174b4:	080175e1 	.word	0x080175e1
 80174b8:	080175e1 	.word	0x080175e1
 80174bc:	080175e1 	.word	0x080175e1
 80174c0:	080175e1 	.word	0x080175e1
 80174c4:	080175e1 	.word	0x080175e1
 80174c8:	080175e1 	.word	0x080175e1
 80174cc:	080175e1 	.word	0x080175e1
 80174d0:	080175e1 	.word	0x080175e1
 80174d4:	080175e1 	.word	0x080175e1
 80174d8:	080175e1 	.word	0x080175e1
 80174dc:	080175e1 	.word	0x080175e1
 80174e0:	080175f1 	.word	0x080175f1
 80174e4:	080175e1 	.word	0x080175e1
 80174e8:	080175e1 	.word	0x080175e1
 80174ec:	080175e1 	.word	0x080175e1
 80174f0:	080175e1 	.word	0x080175e1
 80174f4:	080175e1 	.word	0x080175e1
 80174f8:	080175e1 	.word	0x080175e1
 80174fc:	080175e1 	.word	0x080175e1
 8017500:	080175e1 	.word	0x080175e1
 8017504:	080175e1 	.word	0x080175e1
 8017508:	080175e1 	.word	0x080175e1
 801750c:	080175e1 	.word	0x080175e1
 8017510:	080175e1 	.word	0x080175e1
 8017514:	080175e1 	.word	0x080175e1
 8017518:	080175e1 	.word	0x080175e1
 801751c:	080175e1 	.word	0x080175e1
 8017520:	080175e1 	.word	0x080175e1
 8017524:	080175e1 	.word	0x080175e1
 8017528:	080175f1 	.word	0x080175f1
 801752c:	080175e1 	.word	0x080175e1
 8017530:	080175e1 	.word	0x080175e1
 8017534:	080175f1 	.word	0x080175f1
 8017538:	080175e1 	.word	0x080175e1
 801753c:	080175e1 	.word	0x080175e1
 8017540:	080175e1 	.word	0x080175e1
 8017544:	080175e1 	.word	0x080175e1
 8017548:	080175e1 	.word	0x080175e1
 801754c:	080175f1 	.word	0x080175f1
 8017550:	3b01      	subs	r3, #1
 8017552:	2b1f      	cmp	r3, #31
 8017554:	d844      	bhi.n	80175e0 <SPIF_FindChip+0x240>
 8017556:	a201      	add	r2, pc, #4	@ (adr r2, 801755c <SPIF_FindChip+0x1bc>)
 8017558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801755c:	080175f5 	.word	0x080175f5
 8017560:	080175e1 	.word	0x080175e1
 8017564:	080175e1 	.word	0x080175e1
 8017568:	080175f5 	.word	0x080175f5
 801756c:	080175e1 	.word	0x080175e1
 8017570:	080175e1 	.word	0x080175e1
 8017574:	080175e1 	.word	0x080175e1
 8017578:	080175e1 	.word	0x080175e1
 801757c:	080175e1 	.word	0x080175e1
 8017580:	080175e1 	.word	0x080175e1
 8017584:	080175e1 	.word	0x080175e1
 8017588:	080175e1 	.word	0x080175e1
 801758c:	080175e1 	.word	0x080175e1
 8017590:	080175e1 	.word	0x080175e1
 8017594:	080175e1 	.word	0x080175e1
 8017598:	080175e1 	.word	0x080175e1
 801759c:	080175e1 	.word	0x080175e1
 80175a0:	080175e1 	.word	0x080175e1
 80175a4:	080175e1 	.word	0x080175e1
 80175a8:	080175e1 	.word	0x080175e1
 80175ac:	080175e1 	.word	0x080175e1
 80175b0:	080175e1 	.word	0x080175e1
 80175b4:	080175e1 	.word	0x080175e1
 80175b8:	080175e1 	.word	0x080175e1
 80175bc:	080175e1 	.word	0x080175e1
 80175c0:	080175e1 	.word	0x080175e1
 80175c4:	080175e1 	.word	0x080175e1
 80175c8:	080175f5 	.word	0x080175f5
 80175cc:	080175e1 	.word	0x080175e1
 80175d0:	080175e1 	.word	0x080175e1
 80175d4:	080175e1 	.word	0x080175e1
 80175d8:	080175f5 	.word	0x080175f5
 80175dc:	2b37      	cmp	r3, #55	@ 0x37
 80175de:	d00b      	beq.n	80175f8 <SPIF_FindChip+0x258>
      break;
    case SPIF_MANUFACTOR_PUYA:
      dprintf("PUYA");
      break;
    default:
      Handle->Manufactor = SPIF_MANUFACTOR_ERROR;
 80175e0:	687b      	ldr	r3, [r7, #4]
 80175e2:	2200      	movs	r2, #0
 80175e4:	721a      	strb	r2, [r3, #8]
      dprintf("ERROR");
      break;
 80175e6:	e008      	b.n	80175fa <SPIF_FindChip+0x25a>
      break;
 80175e8:	bf00      	nop
 80175ea:	e006      	b.n	80175fa <SPIF_FindChip+0x25a>
      break;
 80175ec:	bf00      	nop
 80175ee:	e004      	b.n	80175fa <SPIF_FindChip+0x25a>
      break;
 80175f0:	bf00      	nop
 80175f2:	e002      	b.n	80175fa <SPIF_FindChip+0x25a>
      break;
 80175f4:	bf00      	nop
 80175f6:	e000      	b.n	80175fa <SPIF_FindChip+0x25a>
      break;
 80175f8:	bf00      	nop
    }
    dprintf(" - MEMTYPE: 0x%02X", Handle->MemType);
    dprintf(" - SIZE: ");
    switch (Handle->Size)
 80175fa:	687b      	ldr	r3, [r7, #4]
 80175fc:	7a5b      	ldrb	r3, [r3, #9]
 80175fe:	3b11      	subs	r3, #17
 8017600:	2b0f      	cmp	r3, #15
 8017602:	d84e      	bhi.n	80176a2 <SPIF_FindChip+0x302>
 8017604:	a201      	add	r2, pc, #4	@ (adr r2, 801760c <SPIF_FindChip+0x26c>)
 8017606:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801760a:	bf00      	nop
 801760c:	0801764d 	.word	0x0801764d
 8017610:	08017655 	.word	0x08017655
 8017614:	0801765d 	.word	0x0801765d
 8017618:	08017665 	.word	0x08017665
 801761c:	0801766d 	.word	0x0801766d
 8017620:	08017675 	.word	0x08017675
 8017624:	0801767d 	.word	0x0801767d
 8017628:	08017685 	.word	0x08017685
 801762c:	0801768f 	.word	0x0801768f
 8017630:	080176a3 	.word	0x080176a3
 8017634:	080176a3 	.word	0x080176a3
 8017638:	080176a3 	.word	0x080176a3
 801763c:	080176a3 	.word	0x080176a3
 8017640:	080176a3 	.word	0x080176a3
 8017644:	080176a3 	.word	0x080176a3
 8017648:	08017699 	.word	0x08017699
    {
    case SPIF_SIZE_1MBIT:
      Handle->BlockCnt = 2;
 801764c:	687b      	ldr	r3, [r7, #4]
 801764e:	2202      	movs	r2, #2
 8017650:	61da      	str	r2, [r3, #28]
      dprintf("1 MBIT\r\n");
      break;
 8017652:	e02a      	b.n	80176aa <SPIF_FindChip+0x30a>
    case SPIF_SIZE_2MBIT:
      Handle->BlockCnt = 4;
 8017654:	687b      	ldr	r3, [r7, #4]
 8017656:	2204      	movs	r2, #4
 8017658:	61da      	str	r2, [r3, #28]
      dprintf("2 MBIT\r\n");
      break;
 801765a:	e026      	b.n	80176aa <SPIF_FindChip+0x30a>
    case SPIF_SIZE_4MBIT:
      Handle->BlockCnt = 8;
 801765c:	687b      	ldr	r3, [r7, #4]
 801765e:	2208      	movs	r2, #8
 8017660:	61da      	str	r2, [r3, #28]
      dprintf("4 MBIT\r\n");
      break;
 8017662:	e022      	b.n	80176aa <SPIF_FindChip+0x30a>
    case SPIF_SIZE_8MBIT:
      Handle->BlockCnt = 16;
 8017664:	687b      	ldr	r3, [r7, #4]
 8017666:	2210      	movs	r2, #16
 8017668:	61da      	str	r2, [r3, #28]
      dprintf("8 MBIT\r\n");
      break;
 801766a:	e01e      	b.n	80176aa <SPIF_FindChip+0x30a>
    case SPIF_SIZE_16MBIT:
      Handle->BlockCnt = 32;
 801766c:	687b      	ldr	r3, [r7, #4]
 801766e:	2220      	movs	r2, #32
 8017670:	61da      	str	r2, [r3, #28]
      dprintf("16 MBIT\r\n");
      break;
 8017672:	e01a      	b.n	80176aa <SPIF_FindChip+0x30a>
    case SPIF_SIZE_32MBIT:
      Handle->BlockCnt = 64;
 8017674:	687b      	ldr	r3, [r7, #4]
 8017676:	2240      	movs	r2, #64	@ 0x40
 8017678:	61da      	str	r2, [r3, #28]
      dprintf("32 MBIT\r\n");
      break;
 801767a:	e016      	b.n	80176aa <SPIF_FindChip+0x30a>
    case SPIF_SIZE_64MBIT:
      Handle->BlockCnt = 128;
 801767c:	687b      	ldr	r3, [r7, #4]
 801767e:	2280      	movs	r2, #128	@ 0x80
 8017680:	61da      	str	r2, [r3, #28]
      dprintf("64 MBIT\r\n");
      break;
 8017682:	e012      	b.n	80176aa <SPIF_FindChip+0x30a>
    case SPIF_SIZE_128MBIT:
      Handle->BlockCnt = 256;
 8017684:	687b      	ldr	r3, [r7, #4]
 8017686:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801768a:	61da      	str	r2, [r3, #28]
      dprintf("128 MBIT\r\n");
      break;
 801768c:	e00d      	b.n	80176aa <SPIF_FindChip+0x30a>
    case SPIF_SIZE_256MBIT:
      Handle->BlockCnt = 512;
 801768e:	687b      	ldr	r3, [r7, #4]
 8017690:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8017694:	61da      	str	r2, [r3, #28]
      dprintf("256 MBIT\r\n");
      break;
 8017696:	e008      	b.n	80176aa <SPIF_FindChip+0x30a>
    case SPIF_SIZE_512MBIT:
      Handle->BlockCnt = 1024;
 8017698:	687b      	ldr	r3, [r7, #4]
 801769a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 801769e:	61da      	str	r2, [r3, #28]
      dprintf("512 MBIT\r\n");
      break;
 80176a0:	e003      	b.n	80176aa <SPIF_FindChip+0x30a>
    default:
      Handle->Size = SPIF_SIZE_ERROR;
 80176a2:	687b      	ldr	r3, [r7, #4]
 80176a4:	2200      	movs	r2, #0
 80176a6:	725a      	strb	r2, [r3, #9]
      dprintf("ERROR\r\n");
      break;
 80176a8:	bf00      	nop
    }

    Handle->SectorCnt = Handle->BlockCnt * 16;
 80176aa:	687b      	ldr	r3, [r7, #4]
 80176ac:	69db      	ldr	r3, [r3, #28]
 80176ae:	011a      	lsls	r2, r3, #4
 80176b0:	687b      	ldr	r3, [r7, #4]
 80176b2:	619a      	str	r2, [r3, #24]
    Handle->PageCnt = (Handle->SectorCnt * SPIF_SECTOR_SIZE) / SPIF_PAGE_SIZE;
 80176b4:	687b      	ldr	r3, [r7, #4]
 80176b6:	699b      	ldr	r3, [r3, #24]
 80176b8:	031b      	lsls	r3, r3, #12
 80176ba:	0a1a      	lsrs	r2, r3, #8
 80176bc:	687b      	ldr	r3, [r7, #4]
 80176be:	615a      	str	r2, [r3, #20]
    dprintf("SPIF SECTOR CNT: %ld\r\n", Handle->SectorCnt);
    dprintf("SPIF PAGE CNT: %ld\r\n", Handle->PageCnt);
    dprintf("SPIF STATUS1: 0x%02X\r\n", SPIF_ReadReg1(Handle));
    dprintf("SPIF STATUS2: 0x%02X\r\n", SPIF_ReadReg2(Handle));
    dprintf("SPIF STATUS3: 0x%02X\r\n", SPIF_ReadReg3(Handle));
    retVal = true;
 80176c0:	2301      	movs	r3, #1
 80176c2:	75fb      	strb	r3, [r7, #23]

  } while (0);

  return retVal;
 80176c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80176c6:	4618      	mov	r0, r3
 80176c8:	3718      	adds	r7, #24
 80176ca:	46bd      	mov	sp, r7
 80176cc:	bd80      	pop	{r7, pc}
 80176ce:	bf00      	nop

080176d0 <SPIF_WriteFn>:

/***********************************************************************************************************/

bool SPIF_WriteFn(SPIF_HandleTypeDef *Handle, uint32_t PageNumber, uint8_t *Data, uint32_t Size, uint32_t Offset)
{
 80176d0:	b580      	push	{r7, lr}
 80176d2:	b08a      	sub	sp, #40	@ 0x28
 80176d4:	af00      	add	r7, sp, #0
 80176d6:	60f8      	str	r0, [r7, #12]
 80176d8:	60b9      	str	r1, [r7, #8]
 80176da:	607a      	str	r2, [r7, #4]
 80176dc:	603b      	str	r3, [r7, #0]
  bool retVal = false;
 80176de:	2300      	movs	r3, #0
 80176e0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t address = 0, maximum = SPIF_PAGE_SIZE - Offset;
 80176e4:	2300      	movs	r3, #0
 80176e6:	623b      	str	r3, [r7, #32]
 80176e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80176ea:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 80176ee:	61fb      	str	r3, [r7, #28]
  {
#if SPIF_DEBUG != SPIF_DEBUG_DISABLE
    uint32_t dbgTime = HAL_GetTick();
#endif
    dprintf("SPIF_WritePage() START PAGE %ld\r\n", PageNumber);
    if (PageNumber >= Handle->PageCnt)
 80176f0:	68fb      	ldr	r3, [r7, #12]
 80176f2:	695b      	ldr	r3, [r3, #20]
 80176f4:	68ba      	ldr	r2, [r7, #8]
 80176f6:	429a      	cmp	r2, r3
 80176f8:	f080 8084 	bcs.w	8017804 <SPIF_WriteFn+0x134>
    {
      dprintf("SPIF_WritePage() ERROR PageNumber\r\n");
      break;
    }
    if (Offset >= SPIF_PAGE_SIZE)
 80176fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80176fe:	2bff      	cmp	r3, #255	@ 0xff
 8017700:	f200 8082 	bhi.w	8017808 <SPIF_WriteFn+0x138>
    {
      dprintf("SPIF_WritePage() ERROR Offset\r\n");
      break;
    }
    if (Size > maximum)
 8017704:	683a      	ldr	r2, [r7, #0]
 8017706:	69fb      	ldr	r3, [r7, #28]
 8017708:	429a      	cmp	r2, r3
 801770a:	d901      	bls.n	8017710 <SPIF_WriteFn+0x40>
    {
      Size = maximum;
 801770c:	69fb      	ldr	r3, [r7, #28]
 801770e:	603b      	str	r3, [r7, #0]
    }
    address = SPIF_PageToAddress(PageNumber) + Offset;
 8017710:	68bb      	ldr	r3, [r7, #8]
 8017712:	021b      	lsls	r3, r3, #8
 8017714:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8017716:	4413      	add	r3, r2
 8017718:	623b      	str	r3, [r7, #32]
        }
        dprintf(", 0x%02X", Data[i]);
      }
      dprintf("\r\n}\r\n");
#endif
    if (SPIF_WriteEnable(Handle) == false)
 801771a:	68f8      	ldr	r0, [r7, #12]
 801771c:	f7ff fdac 	bl	8017278 <SPIF_WriteEnable>
 8017720:	4603      	mov	r3, r0
 8017722:	f083 0301 	eor.w	r3, r3, #1
 8017726:	b2db      	uxtb	r3, r3
 8017728:	2b00      	cmp	r3, #0
 801772a:	d16f      	bne.n	801780c <SPIF_WriteFn+0x13c>
    {
      break;
    }
    SPIF_CsPin(Handle, 0);
 801772c:	2100      	movs	r1, #0
 801772e:	68f8      	ldr	r0, [r7, #12]
 8017730:	f7ff fd31 	bl	8017196 <SPIF_CsPin>
    if (Handle->BlockCnt >= 512)
 8017734:	68fb      	ldr	r3, [r7, #12]
 8017736:	69db      	ldr	r3, [r3, #28]
 8017738:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801773c:	d322      	bcc.n	8017784 <SPIF_WriteFn+0xb4>
    {
      tx[0] = SPIF_CMD_PAGEPROG4ADD;
 801773e:	2312      	movs	r3, #18
 8017740:	753b      	strb	r3, [r7, #20]
      tx[1] = (address & 0xFF000000) >> 24;
 8017742:	6a3b      	ldr	r3, [r7, #32]
 8017744:	0e1b      	lsrs	r3, r3, #24
 8017746:	b2db      	uxtb	r3, r3
 8017748:	757b      	strb	r3, [r7, #21]
      tx[2] = (address & 0x00FF0000) >> 16;
 801774a:	6a3b      	ldr	r3, [r7, #32]
 801774c:	0c1b      	lsrs	r3, r3, #16
 801774e:	b2db      	uxtb	r3, r3
 8017750:	75bb      	strb	r3, [r7, #22]
      tx[3] = (address & 0x0000FF00) >> 8;
 8017752:	6a3b      	ldr	r3, [r7, #32]
 8017754:	0a1b      	lsrs	r3, r3, #8
 8017756:	b2db      	uxtb	r3, r3
 8017758:	75fb      	strb	r3, [r7, #23]
      tx[4] = (address & 0x000000FF);
 801775a:	6a3b      	ldr	r3, [r7, #32]
 801775c:	b2db      	uxtb	r3, r3
 801775e:	763b      	strb	r3, [r7, #24]
      if (SPIF_Transmit(Handle, tx, 5, 100) == false)
 8017760:	f107 0114 	add.w	r1, r7, #20
 8017764:	2364      	movs	r3, #100	@ 0x64
 8017766:	2205      	movs	r2, #5
 8017768:	68f8      	ldr	r0, [r7, #12]
 801776a:	f7ff fd4f 	bl	801720c <SPIF_Transmit>
 801776e:	4603      	mov	r3, r0
 8017770:	f083 0301 	eor.w	r3, r3, #1
 8017774:	b2db      	uxtb	r3, r3
 8017776:	2b00      	cmp	r3, #0
 8017778:	d023      	beq.n	80177c2 <SPIF_WriteFn+0xf2>
      {
        SPIF_CsPin(Handle, 1);
 801777a:	2101      	movs	r1, #1
 801777c:	68f8      	ldr	r0, [r7, #12]
 801777e:	f7ff fd0a 	bl	8017196 <SPIF_CsPin>
        break;
 8017782:	e044      	b.n	801780e <SPIF_WriteFn+0x13e>
      }
    }
    else
    {
      tx[0] = SPIF_CMD_PAGEPROG3ADD;
 8017784:	2302      	movs	r3, #2
 8017786:	753b      	strb	r3, [r7, #20]
      tx[1] = (address & 0x00FF0000) >> 16;
 8017788:	6a3b      	ldr	r3, [r7, #32]
 801778a:	0c1b      	lsrs	r3, r3, #16
 801778c:	b2db      	uxtb	r3, r3
 801778e:	757b      	strb	r3, [r7, #21]
      tx[2] = (address & 0x0000FF00) >> 8;
 8017790:	6a3b      	ldr	r3, [r7, #32]
 8017792:	0a1b      	lsrs	r3, r3, #8
 8017794:	b2db      	uxtb	r3, r3
 8017796:	75bb      	strb	r3, [r7, #22]
      tx[3] = (address & 0x000000FF);
 8017798:	6a3b      	ldr	r3, [r7, #32]
 801779a:	b2db      	uxtb	r3, r3
 801779c:	75fb      	strb	r3, [r7, #23]
      if (SPIF_Transmit(Handle, tx, 4, 100) == false)
 801779e:	f107 0114 	add.w	r1, r7, #20
 80177a2:	2364      	movs	r3, #100	@ 0x64
 80177a4:	2204      	movs	r2, #4
 80177a6:	68f8      	ldr	r0, [r7, #12]
 80177a8:	f7ff fd30 	bl	801720c <SPIF_Transmit>
 80177ac:	4603      	mov	r3, r0
 80177ae:	f083 0301 	eor.w	r3, r3, #1
 80177b2:	b2db      	uxtb	r3, r3
 80177b4:	2b00      	cmp	r3, #0
 80177b6:	d004      	beq.n	80177c2 <SPIF_WriteFn+0xf2>
      {
        SPIF_CsPin(Handle, 1);
 80177b8:	2101      	movs	r1, #1
 80177ba:	68f8      	ldr	r0, [r7, #12]
 80177bc:	f7ff fceb 	bl	8017196 <SPIF_CsPin>
        break;
 80177c0:	e025      	b.n	801780e <SPIF_WriteFn+0x13e>
      }
    }
    if (SPIF_Transmit(Handle, Data, Size, 1000) == false)
 80177c2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80177c6:	683a      	ldr	r2, [r7, #0]
 80177c8:	6879      	ldr	r1, [r7, #4]
 80177ca:	68f8      	ldr	r0, [r7, #12]
 80177cc:	f7ff fd1e 	bl	801720c <SPIF_Transmit>
 80177d0:	4603      	mov	r3, r0
 80177d2:	f083 0301 	eor.w	r3, r3, #1
 80177d6:	b2db      	uxtb	r3, r3
 80177d8:	2b00      	cmp	r3, #0
 80177da:	d004      	beq.n	80177e6 <SPIF_WriteFn+0x116>
    {
      SPIF_CsPin(Handle, 1);
 80177dc:	2101      	movs	r1, #1
 80177de:	68f8      	ldr	r0, [r7, #12]
 80177e0:	f7ff fcd9 	bl	8017196 <SPIF_CsPin>
      break;
 80177e4:	e013      	b.n	801780e <SPIF_WriteFn+0x13e>
    }
    SPIF_CsPin(Handle, 1);
 80177e6:	2101      	movs	r1, #1
 80177e8:	68f8      	ldr	r0, [r7, #12]
 80177ea:	f7ff fcd4 	bl	8017196 <SPIF_CsPin>
    if (SPIF_WaitForWriting(Handle, 100))
 80177ee:	2164      	movs	r1, #100	@ 0x64
 80177f0:	68f8      	ldr	r0, [r7, #12]
 80177f2:	f7ff fdae 	bl	8017352 <SPIF_WaitForWriting>
 80177f6:	4603      	mov	r3, r0
 80177f8:	2b00      	cmp	r3, #0
 80177fa:	d008      	beq.n	801780e <SPIF_WriteFn+0x13e>
    {
      dprintf("SPIF_WritePage() %d BYTES WITERN DONE AFTER %ld ms\r\n", (uint16_t)Size, HAL_GetTick() - dbgTime);
      retVal = true;
 80177fc:	2301      	movs	r3, #1
 80177fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8017802:	e004      	b.n	801780e <SPIF_WriteFn+0x13e>
      break;
 8017804:	bf00      	nop
 8017806:	e002      	b.n	801780e <SPIF_WriteFn+0x13e>
      break;
 8017808:	bf00      	nop
 801780a:	e000      	b.n	801780e <SPIF_WriteFn+0x13e>
      break;
 801780c:	bf00      	nop
    }

  } while (0);

  SPIF_WriteDisable(Handle);
 801780e:	68f8      	ldr	r0, [r7, #12]
 8017810:	f7ff fd56 	bl	80172c0 <SPIF_WriteDisable>
  return retVal;
 8017814:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8017818:	4618      	mov	r0, r3
 801781a:	3728      	adds	r7, #40	@ 0x28
 801781c:	46bd      	mov	sp, r7
 801781e:	bd80      	pop	{r7, pc}

08017820 <SPIF_ReadFn>:

/***********************************************************************************************************/

bool SPIF_ReadFn(SPIF_HandleTypeDef *Handle, uint32_t Address, uint8_t *Data, uint32_t Size)
{
 8017820:	b580      	push	{r7, lr}
 8017822:	b086      	sub	sp, #24
 8017824:	af00      	add	r7, sp, #0
 8017826:	60f8      	str	r0, [r7, #12]
 8017828:	60b9      	str	r1, [r7, #8]
 801782a:	607a      	str	r2, [r7, #4]
 801782c:	603b      	str	r3, [r7, #0]
  bool retVal = false;
 801782e:	2300      	movs	r3, #0
 8017830:	75fb      	strb	r3, [r7, #23]
  {
#if SPIF_DEBUG != SPIF_DEBUG_DISABLE
    uint32_t dbgTime = HAL_GetTick();
#endif
    dprintf("SPIF_ReadAddress() START ADDRESS %ld\r\n", Address);
    SPIF_CsPin(Handle, 0);
 8017832:	2100      	movs	r1, #0
 8017834:	68f8      	ldr	r0, [r7, #12]
 8017836:	f7ff fcae 	bl	8017196 <SPIF_CsPin>
    if (Handle->BlockCnt >= 512)
 801783a:	68fb      	ldr	r3, [r7, #12]
 801783c:	69db      	ldr	r3, [r3, #28]
 801783e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8017842:	d322      	bcc.n	801788a <SPIF_ReadFn+0x6a>
    {
      tx[0] = SPIF_CMD_READDATA4ADD;
 8017844:	2313      	movs	r3, #19
 8017846:	743b      	strb	r3, [r7, #16]
      tx[1] = (Address & 0xFF000000) >> 24;
 8017848:	68bb      	ldr	r3, [r7, #8]
 801784a:	0e1b      	lsrs	r3, r3, #24
 801784c:	b2db      	uxtb	r3, r3
 801784e:	747b      	strb	r3, [r7, #17]
      tx[2] = (Address & 0x00FF0000) >> 16;
 8017850:	68bb      	ldr	r3, [r7, #8]
 8017852:	0c1b      	lsrs	r3, r3, #16
 8017854:	b2db      	uxtb	r3, r3
 8017856:	74bb      	strb	r3, [r7, #18]
      tx[3] = (Address & 0x0000FF00) >> 8;
 8017858:	68bb      	ldr	r3, [r7, #8]
 801785a:	0a1b      	lsrs	r3, r3, #8
 801785c:	b2db      	uxtb	r3, r3
 801785e:	74fb      	strb	r3, [r7, #19]
      tx[4] = (Address & 0x000000FF);
 8017860:	68bb      	ldr	r3, [r7, #8]
 8017862:	b2db      	uxtb	r3, r3
 8017864:	753b      	strb	r3, [r7, #20]
      if (SPIF_Transmit(Handle, tx, 5, 100) == false)
 8017866:	f107 0110 	add.w	r1, r7, #16
 801786a:	2364      	movs	r3, #100	@ 0x64
 801786c:	2205      	movs	r2, #5
 801786e:	68f8      	ldr	r0, [r7, #12]
 8017870:	f7ff fccc 	bl	801720c <SPIF_Transmit>
 8017874:	4603      	mov	r3, r0
 8017876:	f083 0301 	eor.w	r3, r3, #1
 801787a:	b2db      	uxtb	r3, r3
 801787c:	2b00      	cmp	r3, #0
 801787e:	d023      	beq.n	80178c8 <SPIF_ReadFn+0xa8>
      {
        SPIF_CsPin(Handle, 1);
 8017880:	2101      	movs	r1, #1
 8017882:	68f8      	ldr	r0, [r7, #12]
 8017884:	f7ff fc87 	bl	8017196 <SPIF_CsPin>
        break;
 8017888:	e036      	b.n	80178f8 <SPIF_ReadFn+0xd8>
      }
    }
    else
    {
      tx[0] = SPIF_CMD_READDATA3ADD;
 801788a:	2303      	movs	r3, #3
 801788c:	743b      	strb	r3, [r7, #16]
      tx[1] = (Address & 0x00FF0000) >> 16;
 801788e:	68bb      	ldr	r3, [r7, #8]
 8017890:	0c1b      	lsrs	r3, r3, #16
 8017892:	b2db      	uxtb	r3, r3
 8017894:	747b      	strb	r3, [r7, #17]
      tx[2] = (Address & 0x0000FF00) >> 8;
 8017896:	68bb      	ldr	r3, [r7, #8]
 8017898:	0a1b      	lsrs	r3, r3, #8
 801789a:	b2db      	uxtb	r3, r3
 801789c:	74bb      	strb	r3, [r7, #18]
      tx[3] = (Address & 0x000000FF);
 801789e:	68bb      	ldr	r3, [r7, #8]
 80178a0:	b2db      	uxtb	r3, r3
 80178a2:	74fb      	strb	r3, [r7, #19]
      if (SPIF_Transmit(Handle, tx, 4, 100) == false)
 80178a4:	f107 0110 	add.w	r1, r7, #16
 80178a8:	2364      	movs	r3, #100	@ 0x64
 80178aa:	2204      	movs	r2, #4
 80178ac:	68f8      	ldr	r0, [r7, #12]
 80178ae:	f7ff fcad 	bl	801720c <SPIF_Transmit>
 80178b2:	4603      	mov	r3, r0
 80178b4:	f083 0301 	eor.w	r3, r3, #1
 80178b8:	b2db      	uxtb	r3, r3
 80178ba:	2b00      	cmp	r3, #0
 80178bc:	d004      	beq.n	80178c8 <SPIF_ReadFn+0xa8>
      {
        SPIF_CsPin(Handle, 1);
 80178be:	2101      	movs	r1, #1
 80178c0:	68f8      	ldr	r0, [r7, #12]
 80178c2:	f7ff fc68 	bl	8017196 <SPIF_CsPin>
        break;
 80178c6:	e017      	b.n	80178f8 <SPIF_ReadFn+0xd8>
      }
    }
    if (SPIF_Receive(Handle, Data, Size, 2000) == false)
 80178c8:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80178cc:	683a      	ldr	r2, [r7, #0]
 80178ce:	6879      	ldr	r1, [r7, #4]
 80178d0:	68f8      	ldr	r0, [r7, #12]
 80178d2:	f7ff fcb6 	bl	8017242 <SPIF_Receive>
 80178d6:	4603      	mov	r3, r0
 80178d8:	f083 0301 	eor.w	r3, r3, #1
 80178dc:	b2db      	uxtb	r3, r3
 80178de:	2b00      	cmp	r3, #0
 80178e0:	d004      	beq.n	80178ec <SPIF_ReadFn+0xcc>
    {
      SPIF_CsPin(Handle, 1);
 80178e2:	2101      	movs	r1, #1
 80178e4:	68f8      	ldr	r0, [r7, #12]
 80178e6:	f7ff fc56 	bl	8017196 <SPIF_CsPin>
      break;
 80178ea:	e005      	b.n	80178f8 <SPIF_ReadFn+0xd8>
    }
    SPIF_CsPin(Handle, 1);
 80178ec:	2101      	movs	r1, #1
 80178ee:	68f8      	ldr	r0, [r7, #12]
 80178f0:	f7ff fc51 	bl	8017196 <SPIF_CsPin>
      }
      dprintf(", 0x%02X", Data[i]);
    }
    dprintf("\r\n}\r\n");
#endif
    retVal = true;
 80178f4:	2301      	movs	r3, #1
 80178f6:	75fb      	strb	r3, [r7, #23]

  } while (0);

  return retVal;
 80178f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80178fa:	4618      	mov	r0, r3
 80178fc:	3718      	adds	r7, #24
 80178fe:	46bd      	mov	sp, r7
 8017900:	bd80      	pop	{r7, pc}

08017902 <SPIF_Init>:
  * @param  Pin: Pin of CS
  *
  * @retval bool: true or false
  */
bool SPIF_Init(SPIF_HandleTypeDef *Handle, SPI_HandleTypeDef *HSpi, GPIO_TypeDef *Gpio, uint16_t Pin)
{
 8017902:	b580      	push	{r7, lr}
 8017904:	b086      	sub	sp, #24
 8017906:	af00      	add	r7, sp, #0
 8017908:	60f8      	str	r0, [r7, #12]
 801790a:	60b9      	str	r1, [r7, #8]
 801790c:	607a      	str	r2, [r7, #4]
 801790e:	807b      	strh	r3, [r7, #2]
  bool retVal = false;
 8017910:	2300      	movs	r3, #0
 8017912:	75fb      	strb	r3, [r7, #23]
  do
  {
    if ((Handle == NULL) || (HSpi == NULL) || (Gpio == NULL) || (Handle->Inited == 1))
 8017914:	68fb      	ldr	r3, [r7, #12]
 8017916:	2b00      	cmp	r3, #0
 8017918:	d03a      	beq.n	8017990 <SPIF_Init+0x8e>
 801791a:	68bb      	ldr	r3, [r7, #8]
 801791c:	2b00      	cmp	r3, #0
 801791e:	d037      	beq.n	8017990 <SPIF_Init+0x8e>
 8017920:	687b      	ldr	r3, [r7, #4]
 8017922:	2b00      	cmp	r3, #0
 8017924:	d034      	beq.n	8017990 <SPIF_Init+0x8e>
 8017926:	68fb      	ldr	r3, [r7, #12]
 8017928:	7a9b      	ldrb	r3, [r3, #10]
 801792a:	2b01      	cmp	r3, #1
 801792c:	d030      	beq.n	8017990 <SPIF_Init+0x8e>
    {
      dprintf("SPIF_Init() Error, Wrong Parameter\r\n");
      break;
    }
    memset(Handle, 0, sizeof(SPIF_HandleTypeDef));
 801792e:	2220      	movs	r2, #32
 8017930:	2100      	movs	r1, #0
 8017932:	68f8      	ldr	r0, [r7, #12]
 8017934:	f003 ff01 	bl	801b73a <memset>
    Handle->HSpi = HSpi;
 8017938:	68fb      	ldr	r3, [r7, #12]
 801793a:	68ba      	ldr	r2, [r7, #8]
 801793c:	601a      	str	r2, [r3, #0]
    Handle->Gpio = Gpio;
 801793e:	68fb      	ldr	r3, [r7, #12]
 8017940:	687a      	ldr	r2, [r7, #4]
 8017942:	605a      	str	r2, [r3, #4]
    Handle->Pin = Pin;
 8017944:	887a      	ldrh	r2, [r7, #2]
 8017946:	68fb      	ldr	r3, [r7, #12]
 8017948:	611a      	str	r2, [r3, #16]
    SPIF_CsPin(Handle, 1);
 801794a:	2101      	movs	r1, #1
 801794c:	68f8      	ldr	r0, [r7, #12]
 801794e:	f7ff fc22 	bl	8017196 <SPIF_CsPin>
    /* wait for stable VCC */
    while (HAL_GetTick() < 20)
 8017952:	e002      	b.n	801795a <SPIF_Init+0x58>
    {
      SPIF_Delay(1);
 8017954:	2001      	movs	r0, #1
 8017956:	f7ff fbf3 	bl	8017140 <SPIF_Delay>
    while (HAL_GetTick() < 20)
 801795a:	f7ef fd99 	bl	8007490 <HAL_GetTick>
 801795e:	4603      	mov	r3, r0
 8017960:	2b13      	cmp	r3, #19
 8017962:	d9f7      	bls.n	8017954 <SPIF_Init+0x52>
    }
    if (SPIF_WriteDisable(Handle) == false)
 8017964:	68f8      	ldr	r0, [r7, #12]
 8017966:	f7ff fcab 	bl	80172c0 <SPIF_WriteDisable>
 801796a:	4603      	mov	r3, r0
 801796c:	f083 0301 	eor.w	r3, r3, #1
 8017970:	b2db      	uxtb	r3, r3
 8017972:	2b00      	cmp	r3, #0
 8017974:	d10b      	bne.n	801798e <SPIF_Init+0x8c>
    {
      break;
    }
    retVal = SPIF_FindChip(Handle);
 8017976:	68f8      	ldr	r0, [r7, #12]
 8017978:	f7ff fd12 	bl	80173a0 <SPIF_FindChip>
 801797c:	4603      	mov	r3, r0
 801797e:	75fb      	strb	r3, [r7, #23]
    if (retVal)
 8017980:	7dfb      	ldrb	r3, [r7, #23]
 8017982:	2b00      	cmp	r3, #0
 8017984:	d004      	beq.n	8017990 <SPIF_Init+0x8e>
    {
      Handle->Inited = 1;
 8017986:	68fb      	ldr	r3, [r7, #12]
 8017988:	2201      	movs	r2, #1
 801798a:	729a      	strb	r2, [r3, #10]
 801798c:	e000      	b.n	8017990 <SPIF_Init+0x8e>
      break;
 801798e:	bf00      	nop
      dprintf("SPIF_Init() Done\r\n");
    }

  } while (0);

  return retVal;
 8017990:	7dfb      	ldrb	r3, [r7, #23]
}
 8017992:	4618      	mov	r0, r3
 8017994:	3718      	adds	r7, #24
 8017996:	46bd      	mov	sp, r7
 8017998:	bd80      	pop	{r7, pc}

0801799a <SPIF_EraseSector>:
  * @param  Sector: Selected Sector
  *
  * @retval bool: true or false
  */
bool SPIF_EraseSector(SPIF_HandleTypeDef *Handle, uint32_t Sector)
{
 801799a:	b580      	push	{r7, lr}
 801799c:	b086      	sub	sp, #24
 801799e:	af00      	add	r7, sp, #0
 80179a0:	6078      	str	r0, [r7, #4]
 80179a2:	6039      	str	r1, [r7, #0]
  SPIF_Lock(Handle);
 80179a4:	6878      	ldr	r0, [r7, #4]
 80179a6:	f7ff fbd6 	bl	8017156 <SPIF_Lock>
  bool retVal = false;
 80179aa:	2300      	movs	r3, #0
 80179ac:	75fb      	strb	r3, [r7, #23]
  uint32_t address = Sector * SPIF_SECTOR_SIZE;
 80179ae:	683b      	ldr	r3, [r7, #0]
 80179b0:	031b      	lsls	r3, r3, #12
 80179b2:	613b      	str	r3, [r7, #16]
  {
#if SPIF_DEBUG != SPIF_DEBUG_DISABLE
    uint32_t dbgTime = HAL_GetTick();
#endif
    dprintf("SPIF_EraseSector() START SECTOR %ld\r\n", Sector);
    if (Sector >= Handle->SectorCnt)
 80179b4:	687b      	ldr	r3, [r7, #4]
 80179b6:	699b      	ldr	r3, [r3, #24]
 80179b8:	683a      	ldr	r2, [r7, #0]
 80179ba:	429a      	cmp	r2, r3
 80179bc:	d262      	bcs.n	8017a84 <SPIF_EraseSector+0xea>
    {
      dprintf("SPIF_EraseSector() ERROR Sector NUMBER\r\n");
      break;
    }
    if (SPIF_WriteEnable(Handle) == false)
 80179be:	6878      	ldr	r0, [r7, #4]
 80179c0:	f7ff fc5a 	bl	8017278 <SPIF_WriteEnable>
 80179c4:	4603      	mov	r3, r0
 80179c6:	f083 0301 	eor.w	r3, r3, #1
 80179ca:	b2db      	uxtb	r3, r3
 80179cc:	2b00      	cmp	r3, #0
 80179ce:	d15b      	bne.n	8017a88 <SPIF_EraseSector+0xee>
    {
      break;
    }
    SPIF_CsPin(Handle, 0);
 80179d0:	2100      	movs	r1, #0
 80179d2:	6878      	ldr	r0, [r7, #4]
 80179d4:	f7ff fbdf 	bl	8017196 <SPIF_CsPin>
    if (Handle->BlockCnt >= 512)
 80179d8:	687b      	ldr	r3, [r7, #4]
 80179da:	69db      	ldr	r3, [r3, #28]
 80179dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80179e0:	d322      	bcc.n	8017a28 <SPIF_EraseSector+0x8e>
    {
      tx[0] = SPIF_CMD_SECTORERASE4ADD;
 80179e2:	2321      	movs	r3, #33	@ 0x21
 80179e4:	723b      	strb	r3, [r7, #8]
      tx[1] = (address & 0xFF000000) >> 24;
 80179e6:	693b      	ldr	r3, [r7, #16]
 80179e8:	0e1b      	lsrs	r3, r3, #24
 80179ea:	b2db      	uxtb	r3, r3
 80179ec:	727b      	strb	r3, [r7, #9]
      tx[2] = (address & 0x00FF0000) >> 16;
 80179ee:	693b      	ldr	r3, [r7, #16]
 80179f0:	0c1b      	lsrs	r3, r3, #16
 80179f2:	b2db      	uxtb	r3, r3
 80179f4:	72bb      	strb	r3, [r7, #10]
      tx[3] = (address & 0x0000FF00) >> 8;
 80179f6:	693b      	ldr	r3, [r7, #16]
 80179f8:	0a1b      	lsrs	r3, r3, #8
 80179fa:	b2db      	uxtb	r3, r3
 80179fc:	72fb      	strb	r3, [r7, #11]
      tx[4] = (address & 0x000000FF);
 80179fe:	693b      	ldr	r3, [r7, #16]
 8017a00:	b2db      	uxtb	r3, r3
 8017a02:	733b      	strb	r3, [r7, #12]
      if (SPIF_Transmit(Handle, tx, 5, 100) == false)
 8017a04:	f107 0108 	add.w	r1, r7, #8
 8017a08:	2364      	movs	r3, #100	@ 0x64
 8017a0a:	2205      	movs	r2, #5
 8017a0c:	6878      	ldr	r0, [r7, #4]
 8017a0e:	f7ff fbfd 	bl	801720c <SPIF_Transmit>
 8017a12:	4603      	mov	r3, r0
 8017a14:	f083 0301 	eor.w	r3, r3, #1
 8017a18:	b2db      	uxtb	r3, r3
 8017a1a:	2b00      	cmp	r3, #0
 8017a1c:	d023      	beq.n	8017a66 <SPIF_EraseSector+0xcc>
      {
        SPIF_CsPin(Handle, 1);
 8017a1e:	2101      	movs	r1, #1
 8017a20:	6878      	ldr	r0, [r7, #4]
 8017a22:	f7ff fbb8 	bl	8017196 <SPIF_CsPin>
        break;
 8017a26:	e030      	b.n	8017a8a <SPIF_EraseSector+0xf0>
      }
    }
    else
    {
      tx[0] = SPIF_CMD_SECTORERASE3ADD;
 8017a28:	2320      	movs	r3, #32
 8017a2a:	723b      	strb	r3, [r7, #8]
      tx[1] = (address & 0x00FF0000) >> 16;
 8017a2c:	693b      	ldr	r3, [r7, #16]
 8017a2e:	0c1b      	lsrs	r3, r3, #16
 8017a30:	b2db      	uxtb	r3, r3
 8017a32:	727b      	strb	r3, [r7, #9]
      tx[2] = (address & 0x0000FF00) >> 8;
 8017a34:	693b      	ldr	r3, [r7, #16]
 8017a36:	0a1b      	lsrs	r3, r3, #8
 8017a38:	b2db      	uxtb	r3, r3
 8017a3a:	72bb      	strb	r3, [r7, #10]
      tx[3] = (address & 0x000000FF);
 8017a3c:	693b      	ldr	r3, [r7, #16]
 8017a3e:	b2db      	uxtb	r3, r3
 8017a40:	72fb      	strb	r3, [r7, #11]
      if (SPIF_Transmit(Handle, tx, 4, 100) == false)
 8017a42:	f107 0108 	add.w	r1, r7, #8
 8017a46:	2364      	movs	r3, #100	@ 0x64
 8017a48:	2204      	movs	r2, #4
 8017a4a:	6878      	ldr	r0, [r7, #4]
 8017a4c:	f7ff fbde 	bl	801720c <SPIF_Transmit>
 8017a50:	4603      	mov	r3, r0
 8017a52:	f083 0301 	eor.w	r3, r3, #1
 8017a56:	b2db      	uxtb	r3, r3
 8017a58:	2b00      	cmp	r3, #0
 8017a5a:	d004      	beq.n	8017a66 <SPIF_EraseSector+0xcc>
      {
        SPIF_CsPin(Handle, 1);
 8017a5c:	2101      	movs	r1, #1
 8017a5e:	6878      	ldr	r0, [r7, #4]
 8017a60:	f7ff fb99 	bl	8017196 <SPIF_CsPin>
        break;
 8017a64:	e011      	b.n	8017a8a <SPIF_EraseSector+0xf0>
      }
    }
    SPIF_CsPin(Handle, 1);
 8017a66:	2101      	movs	r1, #1
 8017a68:	6878      	ldr	r0, [r7, #4]
 8017a6a:	f7ff fb94 	bl	8017196 <SPIF_CsPin>
    if (SPIF_WaitForWriting(Handle, 1000))
 8017a6e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8017a72:	6878      	ldr	r0, [r7, #4]
 8017a74:	f7ff fc6d 	bl	8017352 <SPIF_WaitForWriting>
 8017a78:	4603      	mov	r3, r0
 8017a7a:	2b00      	cmp	r3, #0
 8017a7c:	d005      	beq.n	8017a8a <SPIF_EraseSector+0xf0>
    {
      dprintf("SPIF_EraseSector() DONE AFTER %ld ms\r\n", HAL_GetTick() - dbgTime);
      retVal = true;
 8017a7e:	2301      	movs	r3, #1
 8017a80:	75fb      	strb	r3, [r7, #23]
 8017a82:	e002      	b.n	8017a8a <SPIF_EraseSector+0xf0>
      break;
 8017a84:	bf00      	nop
 8017a86:	e000      	b.n	8017a8a <SPIF_EraseSector+0xf0>
      break;
 8017a88:	bf00      	nop
    }

  } while (0);

  SPIF_WriteDisable(Handle);
 8017a8a:	6878      	ldr	r0, [r7, #4]
 8017a8c:	f7ff fc18 	bl	80172c0 <SPIF_WriteDisable>
  SPIF_UnLock(Handle);
 8017a90:	6878      	ldr	r0, [r7, #4]
 8017a92:	f7ff fb73 	bl	801717c <SPIF_UnLock>
  return retVal;
 8017a96:	7dfb      	ldrb	r3, [r7, #23]
}
 8017a98:	4618      	mov	r0, r3
 8017a9a:	3718      	adds	r7, #24
 8017a9c:	46bd      	mov	sp, r7
 8017a9e:	bd80      	pop	{r7, pc}

08017aa0 <SPIF_WritePage>:
  * @param  Offset: The start point for writing data. (in byte)
  *
  * @retval bool: true or false
  */
bool SPIF_WritePage(SPIF_HandleTypeDef *Handle, uint32_t PageNumber, uint8_t *Data, uint32_t Size, uint32_t Offset)
{
 8017aa0:	b580      	push	{r7, lr}
 8017aa2:	b088      	sub	sp, #32
 8017aa4:	af02      	add	r7, sp, #8
 8017aa6:	60f8      	str	r0, [r7, #12]
 8017aa8:	60b9      	str	r1, [r7, #8]
 8017aaa:	607a      	str	r2, [r7, #4]
 8017aac:	603b      	str	r3, [r7, #0]
  SPIF_Lock(Handle);
 8017aae:	68f8      	ldr	r0, [r7, #12]
 8017ab0:	f7ff fb51 	bl	8017156 <SPIF_Lock>
  bool retVal = false;
 8017ab4:	2300      	movs	r3, #0
 8017ab6:	75fb      	strb	r3, [r7, #23]
  retVal = SPIF_WriteFn(Handle, PageNumber, Data, Size, Offset);
 8017ab8:	6a3b      	ldr	r3, [r7, #32]
 8017aba:	9300      	str	r3, [sp, #0]
 8017abc:	683b      	ldr	r3, [r7, #0]
 8017abe:	687a      	ldr	r2, [r7, #4]
 8017ac0:	68b9      	ldr	r1, [r7, #8]
 8017ac2:	68f8      	ldr	r0, [r7, #12]
 8017ac4:	f7ff fe04 	bl	80176d0 <SPIF_WriteFn>
 8017ac8:	4603      	mov	r3, r0
 8017aca:	75fb      	strb	r3, [r7, #23]
  SPIF_UnLock(Handle);
 8017acc:	68f8      	ldr	r0, [r7, #12]
 8017ace:	f7ff fb55 	bl	801717c <SPIF_UnLock>
  return retVal;
 8017ad2:	7dfb      	ldrb	r3, [r7, #23]
}
 8017ad4:	4618      	mov	r0, r3
 8017ad6:	3718      	adds	r7, #24
 8017ad8:	46bd      	mov	sp, r7
 8017ada:	bd80      	pop	{r7, pc}

08017adc <SPIF_ReadPage>:
  * @param  Offset: The start point for Reading data. (in byte)
  *
  * @retval bool: true or false
  */
bool SPIF_ReadPage(SPIF_HandleTypeDef *Handle, uint32_t PageNumber, uint8_t *Data, uint32_t Size, uint32_t Offset)
{
 8017adc:	b580      	push	{r7, lr}
 8017ade:	b088      	sub	sp, #32
 8017ae0:	af00      	add	r7, sp, #0
 8017ae2:	60f8      	str	r0, [r7, #12]
 8017ae4:	60b9      	str	r1, [r7, #8]
 8017ae6:	607a      	str	r2, [r7, #4]
 8017ae8:	603b      	str	r3, [r7, #0]
  SPIF_Lock(Handle);
 8017aea:	68f8      	ldr	r0, [r7, #12]
 8017aec:	f7ff fb33 	bl	8017156 <SPIF_Lock>
  bool retVal = false;
 8017af0:	2300      	movs	r3, #0
 8017af2:	77fb      	strb	r3, [r7, #31]
  uint32_t address = SPIF_PageToAddress(PageNumber) + Offset;
 8017af4:	68bb      	ldr	r3, [r7, #8]
 8017af6:	021b      	lsls	r3, r3, #8
 8017af8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8017afa:	4413      	add	r3, r2
 8017afc:	61bb      	str	r3, [r7, #24]
  uint32_t maximum = SPIF_PAGE_SIZE - Offset;
 8017afe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017b00:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8017b04:	617b      	str	r3, [r7, #20]
  if (Size > maximum)
 8017b06:	683a      	ldr	r2, [r7, #0]
 8017b08:	697b      	ldr	r3, [r7, #20]
 8017b0a:	429a      	cmp	r2, r3
 8017b0c:	d901      	bls.n	8017b12 <SPIF_ReadPage+0x36>
  {
    Size = maximum;
 8017b0e:	697b      	ldr	r3, [r7, #20]
 8017b10:	603b      	str	r3, [r7, #0]
  }
  retVal = SPIF_ReadFn(Handle, address, Data, Size);
 8017b12:	683b      	ldr	r3, [r7, #0]
 8017b14:	687a      	ldr	r2, [r7, #4]
 8017b16:	69b9      	ldr	r1, [r7, #24]
 8017b18:	68f8      	ldr	r0, [r7, #12]
 8017b1a:	f7ff fe81 	bl	8017820 <SPIF_ReadFn>
 8017b1e:	4603      	mov	r3, r0
 8017b20:	77fb      	strb	r3, [r7, #31]
  SPIF_UnLock(Handle);
 8017b22:	68f8      	ldr	r0, [r7, #12]
 8017b24:	f7ff fb2a 	bl	801717c <SPIF_UnLock>
  return retVal;
 8017b28:	7ffb      	ldrb	r3, [r7, #31]
}
 8017b2a:	4618      	mov	r0, r3
 8017b2c:	3720      	adds	r7, #32
 8017b2e:	46bd      	mov	sp, r7
 8017b30:	bd80      	pop	{r7, pc}
	...

08017b34 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8017b34:	b480      	push	{r7}
 8017b36:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 8017b38:	4b03      	ldr	r3, [pc, #12]	@ (8017b48 <LL_FLASH_GetUDN+0x14>)
 8017b3a:	681b      	ldr	r3, [r3, #0]
}
 8017b3c:	4618      	mov	r0, r3
 8017b3e:	46bd      	mov	sp, r7
 8017b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b44:	4770      	bx	lr
 8017b46:	bf00      	nop
 8017b48:	1fff7580 	.word	0x1fff7580

08017b4c <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8017b4c:	b480      	push	{r7}
 8017b4e:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8017b50:	4b03      	ldr	r3, [pc, #12]	@ (8017b60 <LL_FLASH_GetDeviceID+0x14>)
 8017b52:	681b      	ldr	r3, [r3, #0]
 8017b54:	b2db      	uxtb	r3, r3
}
 8017b56:	4618      	mov	r0, r3
 8017b58:	46bd      	mov	sp, r7
 8017b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b5e:	4770      	bx	lr
 8017b60:	1fff7584 	.word	0x1fff7584

08017b64 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8017b64:	b480      	push	{r7}
 8017b66:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8017b68:	4b03      	ldr	r3, [pc, #12]	@ (8017b78 <LL_FLASH_GetSTCompanyID+0x14>)
 8017b6a:	681b      	ldr	r3, [r3, #0]
 8017b6c:	0a1b      	lsrs	r3, r3, #8
}
 8017b6e:	4618      	mov	r0, r3
 8017b70:	46bd      	mov	sp, r7
 8017b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b76:	4770      	bx	lr
 8017b78:	1fff7584 	.word	0x1fff7584

08017b7c <APP_BLE_Init>:
/* USER CODE BEGIN EV */
/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 8017b7c:	b5b0      	push	{r4, r5, r7, lr}
 8017b7e:	b090      	sub	sp, #64	@ 0x40
 8017b80:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
#if (RADIO_ACTIVITY_EVENT != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8017b82:	2392      	movs	r3, #146	@ 0x92
 8017b84:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#endif /* RADIO_ACTIVITY_EVENT != 0 */
  /* USER CODE BEGIN APP_BLE_Init_1 */
  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 8017b88:	4b25      	ldr	r3, [pc, #148]	@ (8017c20 <APP_BLE_Init+0xa4>)
 8017b8a:	1d3c      	adds	r4, r7, #4
 8017b8c:	461d      	mov	r5, r3
 8017b8e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017b90:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017b92:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017b94:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017b96:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017b98:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017b9a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8017b9e:	c403      	stmia	r4!, {r0, r1}
 8017ba0:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 8017ba2:	f000 f921 	bl	8017de8 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 8017ba6:	2101      	movs	r1, #1
 8017ba8:	2002      	movs	r0, #2
 8017baa:	f001 fc03 	bl	80193b4 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 8017bae:	4a1d      	ldr	r2, [pc, #116]	@ (8017c24 <APP_BLE_Init+0xa8>)
 8017bb0:	2100      	movs	r1, #0
 8017bb2:	2002      	movs	r0, #2
 8017bb4:	f001 fd2a 	bl	801960c <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 8017bb8:	1d3b      	adds	r3, r7, #4
 8017bba:	4618      	mov	r0, r3
 8017bbc:	f7fe fbcc 	bl	8016358 <SHCI_C2_BLE_Init>
 8017bc0:	4603      	mov	r3, r0
 8017bc2:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  if (status != SHCI_Success)
 8017bc6:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8017bca:	2b00      	cmp	r3, #0
 8017bcc:	d001      	beq.n	8017bd2 <APP_BLE_Init+0x56>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 8017bce:	f7eb f89b 	bl	8002d08 <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 8017bd2:	f000 f91f 	bl	8017e14 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 8017bd6:	f7fe fb19 	bl	801620c <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8017bda:	4b13      	ldr	r3, [pc, #76]	@ (8017c28 <APP_BLE_Init+0xac>)
 8017bdc:	2200      	movs	r2, #0
 8017bde:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 8017be2:	4b11      	ldr	r3, [pc, #68]	@ (8017c28 <APP_BLE_Init+0xac>)
 8017be4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8017be8:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */

  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 8017bea:	4a10      	ldr	r2, [pc, #64]	@ (8017c2c <APP_BLE_Init+0xb0>)
 8017bec:	2100      	movs	r1, #0
 8017bee:	2001      	movs	r0, #1
 8017bf0:	f001 fd0c 	bl	801960c <UTIL_SEQ_RegTask>

  /**
   * Initialization of ADV - Ad Manufacturer Element - Support OTA Bit Mask
   */
#if (RADIO_ACTIVITY_EVENT != 0)
  ret = aci_hal_set_radio_activity_mask(0x0006);
 8017bf4:	2006      	movs	r0, #6
 8017bf6:	f7fe f97d 	bl	8015ef4 <aci_hal_set_radio_activity_mask>
 8017bfa:	4603      	mov	r3, r0
 8017bfc:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

  /**
   * Initialize Custom Template Application
   */
  Custom_APP_Init();
 8017c00:	f000 fad4 	bl	80181ac <Custom_APP_Init>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 8017c04:	4b08      	ldr	r3, [pc, #32]	@ (8017c28 <APP_BLE_Init+0xac>)
 8017c06:	2200      	movs	r2, #0
 8017c08:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 8017c0a:	4b07      	ldr	r3, [pc, #28]	@ (8017c28 <APP_BLE_Init+0xac>)
 8017c0c:	2200      	movs	r2, #0
 8017c0e:	761a      	strb	r2, [r3, #24]

  /**
   * Start to Advertise to be connected by a Client
   */
  Adv_Request(APP_BLE_FAST_ADV);
 8017c10:	2001      	movs	r0, #1
 8017c12:	f000 f9b3 	bl	8017f7c <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */
  /* USER CODE END APP_BLE_Init_2 */

  return;
 8017c16:	bf00      	nop
}
 8017c18:	3740      	adds	r7, #64	@ 0x40
 8017c1a:	46bd      	mov	sp, r7
 8017c1c:	bdb0      	pop	{r4, r5, r7, pc}
 8017c1e:	bf00      	nop
 8017c20:	0801ff80 	.word	0x0801ff80
 8017c24:	08016575 	.word	0x08016575
 8017c28:	20001540 	.word	0x20001540
 8017c2c:	08018065 	.word	0x08018065

08017c30 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 8017c30:	b580      	push	{r7, lr}
 8017c32:	b08c      	sub	sp, #48	@ 0x30
 8017c34:	af00      	add	r7, sp, #0
 8017c36:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 8017c38:	2392      	movs	r3, #146	@ 0x92
 8017c3a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  /* PAIRING */

  /* USER CODE BEGIN SVCCTL_App_Notification */
  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 8017c3e:	687b      	ldr	r3, [r7, #4]
 8017c40:	3301      	adds	r3, #1
 8017c42:	62bb      	str	r3, [r7, #40]	@ 0x28

  switch (p_event_pckt->evt)
 8017c44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017c46:	781b      	ldrb	r3, [r3, #0]
 8017c48:	2bff      	cmp	r3, #255	@ 0xff
 8017c4a:	d05c      	beq.n	8017d06 <SVCCTL_App_Notification+0xd6>
 8017c4c:	2bff      	cmp	r3, #255	@ 0xff
 8017c4e:	f300 80bd 	bgt.w	8017dcc <SVCCTL_App_Notification+0x19c>
 8017c52:	2b3e      	cmp	r3, #62	@ 0x3e
 8017c54:	d02b      	beq.n	8017cae <SVCCTL_App_Notification+0x7e>
 8017c56:	2b3e      	cmp	r3, #62	@ 0x3e
 8017c58:	f300 80b8 	bgt.w	8017dcc <SVCCTL_App_Notification+0x19c>
 8017c5c:	2b05      	cmp	r3, #5
 8017c5e:	d002      	beq.n	8017c66 <SVCCTL_App_Notification+0x36>
 8017c60:	2b10      	cmp	r3, #16
 8017c62:	d020      	beq.n	8017ca6 <SVCCTL_App_Notification+0x76>
      /* USER CODE END EVENT_PCKT */

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/
      /* USER CODE END ECODE_DEFAULT*/
      break;
 8017c64:	e0b2      	b.n	8017dcc <SVCCTL_App_Notification+0x19c>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 8017c66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017c68:	3302      	adds	r3, #2
 8017c6a:	60fb      	str	r3, [r7, #12]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 8017c6c:	68fb      	ldr	r3, [r7, #12]
 8017c6e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8017c72:	b29a      	uxth	r2, r3
 8017c74:	4b59      	ldr	r3, [pc, #356]	@ (8017ddc <SVCCTL_App_Notification+0x1ac>)
 8017c76:	8adb      	ldrh	r3, [r3, #22]
 8017c78:	429a      	cmp	r2, r3
 8017c7a:	d106      	bne.n	8017c8a <SVCCTL_App_Notification+0x5a>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 8017c7c:	4b57      	ldr	r3, [pc, #348]	@ (8017ddc <SVCCTL_App_Notification+0x1ac>)
 8017c7e:	2200      	movs	r2, #0
 8017c80:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8017c82:	4b56      	ldr	r3, [pc, #344]	@ (8017ddc <SVCCTL_App_Notification+0x1ac>)
 8017c84:	2200      	movs	r2, #0
 8017c86:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
      Adv_Request(APP_BLE_FAST_ADV);
 8017c8a:	2001      	movs	r0, #1
 8017c8c:	f000 f976 	bl	8017f7c <Adv_Request>
      HandleNotification.Custom_Evt_Opcode = CUSTOM_DISCON_HANDLE_EVT;
 8017c90:	4b53      	ldr	r3, [pc, #332]	@ (8017de0 <SVCCTL_App_Notification+0x1b0>)
 8017c92:	2201      	movs	r2, #1
 8017c94:	701a      	strb	r2, [r3, #0]
      HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8017c96:	4b51      	ldr	r3, [pc, #324]	@ (8017ddc <SVCCTL_App_Notification+0x1ac>)
 8017c98:	8ada      	ldrh	r2, [r3, #22]
 8017c9a:	4b51      	ldr	r3, [pc, #324]	@ (8017de0 <SVCCTL_App_Notification+0x1b0>)
 8017c9c:	805a      	strh	r2, [r3, #2]
      Custom_APP_Notification(&HandleNotification);
 8017c9e:	4850      	ldr	r0, [pc, #320]	@ (8017de0 <SVCCTL_App_Notification+0x1b0>)
 8017ca0:	f000 fa70 	bl	8018184 <Custom_APP_Notification>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 8017ca4:	e095      	b.n	8017dd2 <SVCCTL_App_Notification+0x1a2>
      p_hardware_error_event = (hci_hardware_error_event_rp0 *)p_event_pckt->data;
 8017ca6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017ca8:	3302      	adds	r3, #2
 8017caa:	613b      	str	r3, [r7, #16]
      break; /* HCI_HARDWARE_ERROR_EVT_CODE */
 8017cac:	e091      	b.n	8017dd2 <SVCCTL_App_Notification+0x1a2>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 8017cae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017cb0:	3302      	adds	r3, #2
 8017cb2:	61bb      	str	r3, [r7, #24]
      switch (p_meta_evt->subevent)
 8017cb4:	69bb      	ldr	r3, [r7, #24]
 8017cb6:	781b      	ldrb	r3, [r3, #0]
 8017cb8:	2b01      	cmp	r3, #1
 8017cba:	d001      	beq.n	8017cc0 <SVCCTL_App_Notification+0x90>
 8017cbc:	2b03      	cmp	r3, #3
          break;
 8017cbe:	e021      	b.n	8017d04 <SVCCTL_App_Notification+0xd4>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 8017cc0:	69bb      	ldr	r3, [r7, #24]
 8017cc2:	3301      	adds	r3, #1
 8017cc4:	617b      	str	r3, [r7, #20]
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 8017cc6:	4b45      	ldr	r3, [pc, #276]	@ (8017ddc <SVCCTL_App_Notification+0x1ac>)
 8017cc8:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8017ccc:	2b04      	cmp	r3, #4
 8017cce:	d104      	bne.n	8017cda <SVCCTL_App_Notification+0xaa>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 8017cd0:	4b42      	ldr	r3, [pc, #264]	@ (8017ddc <SVCCTL_App_Notification+0x1ac>)
 8017cd2:	2206      	movs	r2, #6
 8017cd4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 8017cd8:	e003      	b.n	8017ce2 <SVCCTL_App_Notification+0xb2>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 8017cda:	4b40      	ldr	r3, [pc, #256]	@ (8017ddc <SVCCTL_App_Notification+0x1ac>)
 8017cdc:	2205      	movs	r2, #5
 8017cde:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 8017ce2:	697b      	ldr	r3, [r7, #20]
 8017ce4:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8017ce8:	b29a      	uxth	r2, r3
 8017cea:	4b3c      	ldr	r3, [pc, #240]	@ (8017ddc <SVCCTL_App_Notification+0x1ac>)
 8017cec:	82da      	strh	r2, [r3, #22]
          HandleNotification.Custom_Evt_Opcode = CUSTOM_CONN_HANDLE_EVT;
 8017cee:	4b3c      	ldr	r3, [pc, #240]	@ (8017de0 <SVCCTL_App_Notification+0x1b0>)
 8017cf0:	2200      	movs	r2, #0
 8017cf2:	701a      	strb	r2, [r3, #0]
          HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8017cf4:	4b39      	ldr	r3, [pc, #228]	@ (8017ddc <SVCCTL_App_Notification+0x1ac>)
 8017cf6:	8ada      	ldrh	r2, [r3, #22]
 8017cf8:	4b39      	ldr	r3, [pc, #228]	@ (8017de0 <SVCCTL_App_Notification+0x1b0>)
 8017cfa:	805a      	strh	r2, [r3, #2]
          Custom_APP_Notification(&HandleNotification);
 8017cfc:	4838      	ldr	r0, [pc, #224]	@ (8017de0 <SVCCTL_App_Notification+0x1b0>)
 8017cfe:	f000 fa41 	bl	8018184 <Custom_APP_Notification>
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 8017d02:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 8017d04:	e065      	b.n	8017dd2 <SVCCTL_App_Notification+0x1a2>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 8017d06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017d08:	3302      	adds	r3, #2
 8017d0a:	627b      	str	r3, [r7, #36]	@ 0x24
      switch (p_blecore_evt->ecode)
 8017d0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017d0e:	881b      	ldrh	r3, [r3, #0]
 8017d10:	b29b      	uxth	r3, r3
 8017d12:	f640 420e 	movw	r2, #3086	@ 0xc0e
 8017d16:	4293      	cmp	r3, r2
 8017d18:	d048      	beq.n	8017dac <SVCCTL_App_Notification+0x17c>
 8017d1a:	f640 420e 	movw	r2, #3086	@ 0xc0e
 8017d1e:	4293      	cmp	r3, r2
 8017d20:	dc56      	bgt.n	8017dd0 <SVCCTL_App_Notification+0x1a0>
 8017d22:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8017d26:	d04b      	beq.n	8017dc0 <SVCCTL_App_Notification+0x190>
 8017d28:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8017d2c:	dc50      	bgt.n	8017dd0 <SVCCTL_App_Notification+0x1a0>
 8017d2e:	f240 420a 	movw	r2, #1034	@ 0x40a
 8017d32:	4293      	cmp	r3, r2
 8017d34:	dc4c      	bgt.n	8017dd0 <SVCCTL_App_Notification+0x1a0>
 8017d36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8017d3a:	dc04      	bgt.n	8017d46 <SVCCTL_App_Notification+0x116>
 8017d3c:	2b04      	cmp	r3, #4
 8017d3e:	d041      	beq.n	8017dc4 <SVCCTL_App_Notification+0x194>
 8017d40:	2b06      	cmp	r3, #6
 8017d42:	d039      	beq.n	8017db8 <SVCCTL_App_Notification+0x188>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8017d44:	e044      	b.n	8017dd0 <SVCCTL_App_Notification+0x1a0>
 8017d46:	f2a3 4301 	subw	r3, r3, #1025	@ 0x401
 8017d4a:	2b09      	cmp	r3, #9
 8017d4c:	d840      	bhi.n	8017dd0 <SVCCTL_App_Notification+0x1a0>
 8017d4e:	a201      	add	r2, pc, #4	@ (adr r2, 8017d54 <SVCCTL_App_Notification+0x124>)
 8017d50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017d54:	08017da5 	.word	0x08017da5
 8017d58:	08017d7d 	.word	0x08017d7d
 8017d5c:	08017dd1 	.word	0x08017dd1
 8017d60:	08017dd1 	.word	0x08017dd1
 8017d64:	08017dd1 	.word	0x08017dd1
 8017d68:	08017dd1 	.word	0x08017dd1
 8017d6c:	08017dc9 	.word	0x08017dc9
 8017d70:	08017dd1 	.word	0x08017dd1
 8017d74:	08017d91 	.word	0x08017d91
 8017d78:	08017dc9 	.word	0x08017dc9
          ret = aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, CFG_FIXED_PIN);
 8017d7c:	4b17      	ldr	r3, [pc, #92]	@ (8017ddc <SVCCTL_App_Notification+0x1ac>)
 8017d7e:	8adb      	ldrh	r3, [r3, #22]
 8017d80:	4918      	ldr	r1, [pc, #96]	@ (8017de4 <SVCCTL_App_Notification+0x1b4>)
 8017d82:	4618      	mov	r0, r3
 8017d84:	f7fd fab8 	bl	80152f8 <aci_gap_pass_key_resp>
 8017d88:	4603      	mov	r3, r0
 8017d8a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
          break;
 8017d8e:	e01c      	b.n	8017dca <SVCCTL_App_Notification+0x19a>
          ret = aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES);
 8017d90:	4b12      	ldr	r3, [pc, #72]	@ (8017ddc <SVCCTL_App_Notification+0x1ac>)
 8017d92:	8adb      	ldrh	r3, [r3, #22]
 8017d94:	2101      	movs	r1, #1
 8017d96:	4618      	mov	r0, r3
 8017d98:	f7fd fc58 	bl	801564c <aci_gap_numeric_comparison_value_confirm_yesno>
 8017d9c:	4603      	mov	r3, r0
 8017d9e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
          break;
 8017da2:	e012      	b.n	8017dca <SVCCTL_App_Notification+0x19a>
          p_pairing_complete = (aci_gap_pairing_complete_event_rp0*)p_blecore_evt->data;
 8017da4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017da6:	3302      	adds	r3, #2
 8017da8:	623b      	str	r3, [r7, #32]
          break;
 8017daa:	e00e      	b.n	8017dca <SVCCTL_App_Notification+0x19a>
          aci_gatt_confirm_indication(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 8017dac:	4b0b      	ldr	r3, [pc, #44]	@ (8017ddc <SVCCTL_App_Notification+0x1ac>)
 8017dae:	8adb      	ldrh	r3, [r3, #22]
 8017db0:	4618      	mov	r0, r3
 8017db2:	f7fd ff5e 	bl	8015c72 <aci_gatt_confirm_indication>
        break;
 8017db6:	e008      	b.n	8017dca <SVCCTL_App_Notification+0x19a>
	      p_fw_error_event = (aci_hal_fw_error_event_rp0 *)p_blecore_evt->data;
 8017db8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017dba:	3302      	adds	r3, #2
 8017dbc:	61fb      	str	r3, [r7, #28]
          break;
 8017dbe:	e004      	b.n	8017dca <SVCCTL_App_Notification+0x19a>
          break;
 8017dc0:	bf00      	nop
 8017dc2:	e005      	b.n	8017dd0 <SVCCTL_App_Notification+0x1a0>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 8017dc4:	bf00      	nop
 8017dc6:	e003      	b.n	8017dd0 <SVCCTL_App_Notification+0x1a0>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 8017dc8:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8017dca:	e001      	b.n	8017dd0 <SVCCTL_App_Notification+0x1a0>
      break;
 8017dcc:	bf00      	nop
 8017dce:	e000      	b.n	8017dd2 <SVCCTL_App_Notification+0x1a2>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8017dd0:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 8017dd2:	2301      	movs	r3, #1
}
 8017dd4:	4618      	mov	r0, r3
 8017dd6:	3730      	adds	r7, #48	@ 0x30
 8017dd8:	46bd      	mov	sp, r7
 8017dda:	bd80      	pop	{r7, pc}
 8017ddc:	20001540 	.word	0x20001540
 8017de0:	200015c4 	.word	0x200015c4
 8017de4:	0001b207 	.word	0x0001b207

08017de8 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 8017de8:	b580      	push	{r7, lr}
 8017dea:	b082      	sub	sp, #8
 8017dec:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 8017dee:	4b06      	ldr	r3, [pc, #24]	@ (8017e08 <Ble_Tl_Init+0x20>)
 8017df0:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 8017df2:	4b06      	ldr	r3, [pc, #24]	@ (8017e0c <Ble_Tl_Init+0x24>)
 8017df4:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 8017df6:	463b      	mov	r3, r7
 8017df8:	4619      	mov	r1, r3
 8017dfa:	4805      	ldr	r0, [pc, #20]	@ (8017e10 <Ble_Tl_Init+0x28>)
 8017dfc:	f7fe fb9e 	bl	801653c <hci_init>

  return;
 8017e00:	bf00      	nop
}
 8017e02:	3708      	adds	r7, #8
 8017e04:	46bd      	mov	sp, r7
 8017e06:	bd80      	pop	{r7, pc}
 8017e08:	200300d8 	.word	0x200300d8
 8017e0c:	08018115 	.word	0x08018115
 8017e10:	080180dd 	.word	0x080180dd

08017e14 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 8017e14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017e16:	b08d      	sub	sp, #52	@ 0x34
 8017e18:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 8017e1a:	2300      	movs	r3, #0
 8017e1c:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8017e1e:	2392      	movs	r3, #146	@ 0x92
 8017e20:	75fb      	strb	r3, [r7, #23]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 8017e22:	f7fe f8bb 	bl	8015f9c <hci_reset>
 8017e26:	4603      	mov	r3, r0
 8017e28:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 8017e2a:	f000 f8d7 	bl	8017fdc <BleGetBdAddress>
 8017e2e:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 8017e30:	693a      	ldr	r2, [r7, #16]
 8017e32:	2106      	movs	r1, #6
 8017e34:	2000      	movs	r0, #0
 8017e36:	f7fd ff71 	bl	8015d1c <aci_hal_write_config_data>
 8017e3a:	4603      	mov	r3, r0
 8017e3c:	75fb      	strb	r3, [r7, #23]
#endif /* CFG_BLE_ADDRESS_TYPE != GAP_PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive IRK and DHK(Legacy)
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 8017e3e:	4a4a      	ldr	r2, [pc, #296]	@ (8017f68 <Ble_Hci_Gap_Gatt_Init+0x154>)
 8017e40:	2110      	movs	r1, #16
 8017e42:	2018      	movs	r0, #24
 8017e44:	f7fd ff6a 	bl	8015d1c <aci_hal_write_config_data>
 8017e48:	4603      	mov	r3, r0
 8017e4a:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 8017e4c:	4a47      	ldr	r2, [pc, #284]	@ (8017f6c <Ble_Hci_Gap_Gatt_Init+0x158>)
 8017e4e:	2110      	movs	r1, #16
 8017e50:	2008      	movs	r0, #8
 8017e52:	f7fd ff63 	bl	8015d1c <aci_hal_write_config_data>
 8017e56:	4603      	mov	r3, r0
 8017e58:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 8017e5a:	2118      	movs	r1, #24
 8017e5c:	2001      	movs	r0, #1
 8017e5e:	f7fd ffe2 	bl	8015e26 <aci_hal_set_tx_power_level>
 8017e62:	4603      	mov	r3, r0
 8017e64:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 8017e66:	f7fd fc58 	bl	801571a <aci_gatt_init>
 8017e6a:	4603      	mov	r3, r0
 8017e6c:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 8017e6e:	2300      	movs	r3, #0
 8017e70:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 8017e72:	7bfb      	ldrb	r3, [r7, #15]
 8017e74:	f043 0301 	orr.w	r3, r3, #1
 8017e78:	73fb      	strb	r3, [r7, #15]
#endif /* BLE_CFG_CENTRAL == 1 */

/* USER CODE BEGIN Role_Mngt*/
/* USER CODE END Role_Mngt */

  if (role > 0)
 8017e7a:	7bfb      	ldrb	r3, [r7, #15]
 8017e7c:	2b00      	cmp	r3, #0
 8017e7e:	d01f      	beq.n	8017ec0 <Ble_Hci_Gap_Gatt_Init+0xac>
  {
    const char *name = CFG_GAP_DEVICE_NAME;
 8017e80:	4b3b      	ldr	r3, [pc, #236]	@ (8017f70 <Ble_Hci_Gap_Gatt_Init+0x15c>)
 8017e82:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 8017e84:	1dba      	adds	r2, r7, #6
 8017e86:	7bf8      	ldrb	r0, [r7, #15]
 8017e88:	1cbb      	adds	r3, r7, #2
 8017e8a:	9301      	str	r3, [sp, #4]
 8017e8c:	1d3b      	adds	r3, r7, #4
 8017e8e:	9300      	str	r3, [sp, #0]
 8017e90:	4613      	mov	r3, r2
 8017e92:	2208      	movs	r2, #8
 8017e94:	2100      	movs	r1, #0
 8017e96:	f7fd fa96 	bl	80153c6 <aci_gap_init>
 8017e9a:	4603      	mov	r3, r0
 8017e9c:	75fb      	strb	r3, [r7, #23]
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 8017e9e:	88fc      	ldrh	r4, [r7, #6]
 8017ea0:	88bd      	ldrh	r5, [r7, #4]
 8017ea2:	68b8      	ldr	r0, [r7, #8]
 8017ea4:	f7e8 f9bc 	bl	8000220 <strlen>
 8017ea8:	4603      	mov	r3, r0
 8017eaa:	b2da      	uxtb	r2, r3
 8017eac:	68bb      	ldr	r3, [r7, #8]
 8017eae:	9300      	str	r3, [sp, #0]
 8017eb0:	4613      	mov	r3, r2
 8017eb2:	2200      	movs	r2, #0
 8017eb4:	4629      	mov	r1, r5
 8017eb6:	4620      	mov	r0, r4
 8017eb8:	f7fd fe32 	bl	8015b20 <aci_gatt_update_char_value>
 8017ebc:	4603      	mov	r3, r0
 8017ebe:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 8017ec0:	88f8      	ldrh	r0, [r7, #6]
 8017ec2:	8879      	ldrh	r1, [r7, #2]
 8017ec4:	463b      	mov	r3, r7
 8017ec6:	9300      	str	r3, [sp, #0]
 8017ec8:	2302      	movs	r3, #2
 8017eca:	2200      	movs	r2, #0
 8017ecc:	f7fd fe28 	bl	8015b20 <aci_gatt_update_char_value>
 8017ed0:	4603      	mov	r3, r0
 8017ed2:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 8017ed4:	2202      	movs	r2, #2
 8017ed6:	2102      	movs	r1, #2
 8017ed8:	2000      	movs	r0, #0
 8017eda:	f7fe f883 	bl	8015fe4 <hci_le_set_default_phy>
 8017ede:	4603      	mov	r3, r0
 8017ee0:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 8017ee2:	4b24      	ldr	r3, [pc, #144]	@ (8017f74 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8017ee4:	2201      	movs	r2, #1
 8017ee6:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 8017ee8:	4b22      	ldr	r3, [pc, #136]	@ (8017f74 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8017eea:	781b      	ldrb	r3, [r3, #0]
 8017eec:	4618      	mov	r0, r3
 8017eee:	f7fd f8eb 	bl	80150c8 <aci_gap_set_io_capability>
 8017ef2:	4603      	mov	r3, r0
 8017ef4:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 8017ef6:	4b1f      	ldr	r3, [pc, #124]	@ (8017f74 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8017ef8:	2201      	movs	r2, #1
 8017efa:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 8017efc:	4b1d      	ldr	r3, [pc, #116]	@ (8017f74 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8017efe:	2208      	movs	r2, #8
 8017f00:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 8017f02:	4b1c      	ldr	r3, [pc, #112]	@ (8017f74 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8017f04:	2210      	movs	r2, #16
 8017f06:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 8017f08:	4b1a      	ldr	r3, [pc, #104]	@ (8017f74 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8017f0a:	2200      	movs	r2, #0
 8017f0c:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 8017f0e:	4b19      	ldr	r3, [pc, #100]	@ (8017f74 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8017f10:	4a19      	ldr	r2, [pc, #100]	@ (8017f78 <Ble_Hci_Gap_Gatt_Init+0x164>)
 8017f12:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 8017f14:	4b17      	ldr	r3, [pc, #92]	@ (8017f74 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8017f16:	2200      	movs	r2, #0
 8017f18:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 8017f1a:	4b16      	ldr	r3, [pc, #88]	@ (8017f74 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8017f1c:	789c      	ldrb	r4, [r3, #2]
 8017f1e:	4b15      	ldr	r3, [pc, #84]	@ (8017f74 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8017f20:	785d      	ldrb	r5, [r3, #1]
 8017f22:	4b14      	ldr	r3, [pc, #80]	@ (8017f74 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8017f24:	791b      	ldrb	r3, [r3, #4]
 8017f26:	4a13      	ldr	r2, [pc, #76]	@ (8017f74 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8017f28:	7952      	ldrb	r2, [r2, #5]
 8017f2a:	4912      	ldr	r1, [pc, #72]	@ (8017f74 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8017f2c:	78c9      	ldrb	r1, [r1, #3]
 8017f2e:	4811      	ldr	r0, [pc, #68]	@ (8017f74 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8017f30:	6880      	ldr	r0, [r0, #8]
 8017f32:	2600      	movs	r6, #0
 8017f34:	9604      	str	r6, [sp, #16]
 8017f36:	9003      	str	r0, [sp, #12]
 8017f38:	9102      	str	r1, [sp, #8]
 8017f3a:	9201      	str	r2, [sp, #4]
 8017f3c:	9300      	str	r3, [sp, #0]
 8017f3e:	2300      	movs	r3, #0
 8017f40:	2201      	movs	r2, #1
 8017f42:	4629      	mov	r1, r5
 8017f44:	4620      	mov	r0, r4
 8017f46:	f7fd f913 	bl	8015170 <aci_gap_set_authentication_requirement>
 8017f4a:	4603      	mov	r3, r0
 8017f4c:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 8017f4e:	4b09      	ldr	r3, [pc, #36]	@ (8017f74 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8017f50:	789b      	ldrb	r3, [r3, #2]
 8017f52:	2b00      	cmp	r3, #0
 8017f54:	d003      	beq.n	8017f5e <Ble_Hci_Gap_Gatt_Init+0x14a>
  {
    ret = aci_gap_configure_whitelist();
 8017f56:	f7fd fb55 	bl	8015604 <aci_gap_configure_filter_accept_list>
 8017f5a:	4603      	mov	r3, r0
 8017f5c:	75fb      	strb	r3, [r7, #23]
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
}
 8017f5e:	bf00      	nop
 8017f60:	371c      	adds	r7, #28
 8017f62:	46bd      	mov	sp, r7
 8017f64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017f66:	bf00      	nop
 8017f68:	080222a0 	.word	0x080222a0
 8017f6c:	080222b0 	.word	0x080222b0
 8017f70:	0801ffbc 	.word	0x0801ffbc
 8017f74:	20001540 	.word	0x20001540
 8017f78:	0001b207 	.word	0x0001b207

08017f7c <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 8017f7c:	b580      	push	{r7, lr}
 8017f7e:	b08c      	sub	sp, #48	@ 0x30
 8017f80:	af08      	add	r7, sp, #32
 8017f82:	4603      	mov	r3, r0
 8017f84:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8017f86:	2392      	movs	r3, #146	@ 0x92
 8017f88:	73fb      	strb	r3, [r7, #15]

  BleApplicationContext.Device_Connection_Status = NewStatus;
 8017f8a:	4a12      	ldr	r2, [pc, #72]	@ (8017fd4 <Adv_Request+0x58>)
 8017f8c:	79fb      	ldrb	r3, [r7, #7]
 8017f8e:	f882 3080 	strb.w	r3, [r2, #128]	@ 0x80
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_TYPE,
 8017f92:	2300      	movs	r3, #0
 8017f94:	9306      	str	r3, [sp, #24]
 8017f96:	2300      	movs	r3, #0
 8017f98:	9305      	str	r3, [sp, #20]
 8017f9a:	2300      	movs	r3, #0
 8017f9c:	9304      	str	r3, [sp, #16]
 8017f9e:	2300      	movs	r3, #0
 8017fa0:	9303      	str	r3, [sp, #12]
 8017fa2:	2300      	movs	r3, #0
 8017fa4:	9302      	str	r3, [sp, #8]
 8017fa6:	2300      	movs	r3, #0
 8017fa8:	9301      	str	r3, [sp, #4]
 8017faa:	2300      	movs	r3, #0
 8017fac:	9300      	str	r3, [sp, #0]
 8017fae:	2300      	movs	r3, #0
 8017fb0:	22a0      	movs	r2, #160	@ 0xa0
 8017fb2:	2180      	movs	r1, #128	@ 0x80
 8017fb4:	2000      	movs	r0, #0
 8017fb6:	f7fc ff8d 	bl	8014ed4 <aci_gap_set_discoverable>
 8017fba:	4603      	mov	r3, r0
 8017fbc:	73fb      	strb	r3, [r7, #15]
/* USER CODE BEGIN Adv_Request_1*/

/* USER CODE END Adv_Request_1*/

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_AdvData), (uint8_t*) a_AdvData);
 8017fbe:	4906      	ldr	r1, [pc, #24]	@ (8017fd8 <Adv_Request+0x5c>)
 8017fc0:	200e      	movs	r0, #14
 8017fc2:	f7fd faad 	bl	8015520 <aci_gap_update_adv_data>
 8017fc6:	4603      	mov	r3, r0
 8017fc8:	73fb      	strb	r3, [r7, #15]
  else
  {
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
  }

  return;
 8017fca:	bf00      	nop
}
 8017fcc:	3710      	adds	r7, #16
 8017fce:	46bd      	mov	sp, r7
 8017fd0:	bd80      	pop	{r7, pc}
 8017fd2:	bf00      	nop
 8017fd4:	20001540 	.word	0x20001540
 8017fd8:	200000c4 	.word	0x200000c4

08017fdc <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 8017fdc:	b580      	push	{r7, lr}
 8017fde:	b086      	sub	sp, #24
 8017fe0:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 8017fe2:	f7ff fda7 	bl	8017b34 <LL_FLASH_GetUDN>
 8017fe6:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 8017fe8:	693b      	ldr	r3, [r7, #16]
 8017fea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017fee:	d023      	beq.n	8018038 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 8017ff0:	f7ff fdb8 	bl	8017b64 <LL_FLASH_GetSTCompanyID>
 8017ff4:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 8017ff6:	f7ff fda9 	bl	8017b4c <LL_FLASH_GetDeviceID>
 8017ffa:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 8017ffc:	693b      	ldr	r3, [r7, #16]
 8017ffe:	b2da      	uxtb	r2, r3
 8018000:	4b16      	ldr	r3, [pc, #88]	@ (801805c <BleGetBdAddress+0x80>)
 8018002:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 8018004:	693b      	ldr	r3, [r7, #16]
 8018006:	0a1b      	lsrs	r3, r3, #8
 8018008:	b2da      	uxtb	r2, r3
 801800a:	4b14      	ldr	r3, [pc, #80]	@ (801805c <BleGetBdAddress+0x80>)
 801800c:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 801800e:	687b      	ldr	r3, [r7, #4]
 8018010:	b2da      	uxtb	r2, r3
 8018012:	4b12      	ldr	r3, [pc, #72]	@ (801805c <BleGetBdAddress+0x80>)
 8018014:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 8018016:	68bb      	ldr	r3, [r7, #8]
 8018018:	b2da      	uxtb	r2, r3
 801801a:	4b10      	ldr	r3, [pc, #64]	@ (801805c <BleGetBdAddress+0x80>)
 801801c:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 801801e:	68bb      	ldr	r3, [r7, #8]
 8018020:	0a1b      	lsrs	r3, r3, #8
 8018022:	b2da      	uxtb	r2, r3
 8018024:	4b0d      	ldr	r3, [pc, #52]	@ (801805c <BleGetBdAddress+0x80>)
 8018026:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 8018028:	68bb      	ldr	r3, [r7, #8]
 801802a:	0c1b      	lsrs	r3, r3, #16
 801802c:	b2da      	uxtb	r2, r3
 801802e:	4b0b      	ldr	r3, [pc, #44]	@ (801805c <BleGetBdAddress+0x80>)
 8018030:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 8018032:	4b0a      	ldr	r3, [pc, #40]	@ (801805c <BleGetBdAddress+0x80>)
 8018034:	617b      	str	r3, [r7, #20]
 8018036:	e00b      	b.n	8018050 <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 8018038:	2000      	movs	r0, #0
 801803a:	f7fe ff9b 	bl	8016f74 <OTP_Read>
 801803e:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 8018040:	68fb      	ldr	r3, [r7, #12]
 8018042:	2b00      	cmp	r3, #0
 8018044:	d002      	beq.n	801804c <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 8018046:	68fb      	ldr	r3, [r7, #12]
 8018048:	617b      	str	r3, [r7, #20]
 801804a:	e001      	b.n	8018050 <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 801804c:	4b04      	ldr	r3, [pc, #16]	@ (8018060 <BleGetBdAddress+0x84>)
 801804e:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 8018050:	697b      	ldr	r3, [r7, #20]
}
 8018052:	4618      	mov	r0, r3
 8018054:	3718      	adds	r7, #24
 8018056:	46bd      	mov	sp, r7
 8018058:	bd80      	pop	{r7, pc}
 801805a:	bf00      	nop
 801805c:	20001538 	.word	0x20001538
 8018060:	08022298 	.word	0x08022298

08018064 <Adv_Cancel>:
 *
 * SPECIFIC FUNCTIONS FOR CUSTOM
 *
 *************************************************************/
static void Adv_Cancel(void)
{
 8018064:	b580      	push	{r7, lr}
 8018066:	b082      	sub	sp, #8
 8018068:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_1 */

  /* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 801806a:	4b0a      	ldr	r3, [pc, #40]	@ (8018094 <Adv_Cancel+0x30>)
 801806c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8018070:	2b05      	cmp	r3, #5
 8018072:	d00a      	beq.n	801808a <Adv_Cancel+0x26>
  {
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8018074:	2392      	movs	r3, #146	@ 0x92
 8018076:	71fb      	strb	r3, [r7, #7]

    ret = aci_gap_set_non_discoverable();
 8018078:	f7fc ff08 	bl	8014e8c <aci_gap_set_non_discoverable>
 801807c:	4603      	mov	r3, r0
 801807e:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8018080:	4b04      	ldr	r3, [pc, #16]	@ (8018094 <Adv_Cancel+0x30>)
 8018082:	2200      	movs	r2, #0
 8018084:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* USER CODE BEGIN Adv_Cancel_2 */

  /* USER CODE END Adv_Cancel_2 */

  return;
 8018088:	bf00      	nop
 801808a:	bf00      	nop
}
 801808c:	3708      	adds	r7, #8
 801808e:	46bd      	mov	sp, r7
 8018090:	bd80      	pop	{r7, pc}
 8018092:	bf00      	nop
 8018094:	20001540 	.word	0x20001540

08018098 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 8018098:	b580      	push	{r7, lr}
 801809a:	b082      	sub	sp, #8
 801809c:	af00      	add	r7, sp, #0
 801809e:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 80180a0:	2100      	movs	r1, #0
 80180a2:	2002      	movs	r0, #2
 80180a4:	f001 fad4 	bl	8019650 <UTIL_SEQ_SetTask>

  return;
 80180a8:	bf00      	nop
}
 80180aa:	3708      	adds	r7, #8
 80180ac:	46bd      	mov	sp, r7
 80180ae:	bd80      	pop	{r7, pc}

080180b0 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 80180b0:	b580      	push	{r7, lr}
 80180b2:	b082      	sub	sp, #8
 80180b4:	af00      	add	r7, sp, #0
 80180b6:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 80180b8:	2001      	movs	r0, #1
 80180ba:	f001 fb35 	bl	8019728 <UTIL_SEQ_SetEvt>

  return;
 80180be:	bf00      	nop
}
 80180c0:	3708      	adds	r7, #8
 80180c2:	46bd      	mov	sp, r7
 80180c4:	bd80      	pop	{r7, pc}

080180c6 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 80180c6:	b580      	push	{r7, lr}
 80180c8:	b082      	sub	sp, #8
 80180ca:	af00      	add	r7, sp, #0
 80180cc:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 80180ce:	2001      	movs	r0, #1
 80180d0:	f001 fb4a 	bl	8019768 <UTIL_SEQ_WaitEvt>

  return;
 80180d4:	bf00      	nop
}
 80180d6:	3708      	adds	r7, #8
 80180d8:	46bd      	mov	sp, r7
 80180da:	bd80      	pop	{r7, pc}

080180dc <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 80180dc:	b580      	push	{r7, lr}
 80180de:	b084      	sub	sp, #16
 80180e0:	af00      	add	r7, sp, #0
 80180e2:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 80180e4:	687b      	ldr	r3, [r7, #4]
 80180e6:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 80180e8:	68fb      	ldr	r3, [r7, #12]
 80180ea:	685b      	ldr	r3, [r3, #4]
 80180ec:	3308      	adds	r3, #8
 80180ee:	4618      	mov	r0, r3
 80180f0:	f7fe f8de 	bl	80162b0 <SVCCTL_UserEvtRx>
 80180f4:	4603      	mov	r3, r0
 80180f6:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 80180f8:	7afb      	ldrb	r3, [r7, #11]
 80180fa:	2b00      	cmp	r3, #0
 80180fc:	d003      	beq.n	8018106 <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 80180fe:	68fb      	ldr	r3, [r7, #12]
 8018100:	2201      	movs	r2, #1
 8018102:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 8018104:	e003      	b.n	801810e <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 8018106:	68fb      	ldr	r3, [r7, #12]
 8018108:	2200      	movs	r2, #0
 801810a:	701a      	strb	r2, [r3, #0]
  return;
 801810c:	bf00      	nop
}
 801810e:	3710      	adds	r7, #16
 8018110:	46bd      	mov	sp, r7
 8018112:	bd80      	pop	{r7, pc}

08018114 <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 8018114:	b580      	push	{r7, lr}
 8018116:	b084      	sub	sp, #16
 8018118:	af00      	add	r7, sp, #0
 801811a:	4603      	mov	r3, r0
 801811c:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 801811e:	79fb      	ldrb	r3, [r7, #7]
 8018120:	2b00      	cmp	r3, #0
 8018122:	d002      	beq.n	801812a <BLE_StatusNot+0x16>
 8018124:	2b01      	cmp	r3, #1
 8018126:	d006      	beq.n	8018136 <BLE_StatusNot+0x22>
      break;

    default:
      /* USER CODE BEGIN Status */
      /* USER CODE END Status */
      break;
 8018128:	e00b      	b.n	8018142 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 801812a:	2307      	movs	r3, #7
 801812c:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 801812e:	68f8      	ldr	r0, [r7, #12]
 8018130:	f001 faba 	bl	80196a8 <UTIL_SEQ_PauseTask>
      break;
 8018134:	e005      	b.n	8018142 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8018136:	2307      	movs	r3, #7
 8018138:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 801813a:	68f8      	ldr	r0, [r7, #12]
 801813c:	f001 fad4 	bl	80196e8 <UTIL_SEQ_ResumeTask>
      break;
 8018140:	bf00      	nop
  }

  return;
 8018142:	bf00      	nop
}
 8018144:	3710      	adds	r7, #16
 8018146:	46bd      	mov	sp, r7
 8018148:	bd80      	pop	{r7, pc}
	...

0801814c <Custom_STM_App_Notification>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void Custom_STM_App_Notification(Custom_STM_App_Notification_evt_t *pNotification)
{
 801814c:	b480      	push	{r7}
 801814e:	b083      	sub	sp, #12
 8018150:	af00      	add	r7, sp, #0
 8018152:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_1 */

  /* USER CODE END CUSTOM_STM_App_Notification_1 */
  switch (pNotification->Custom_Evt_Opcode)
 8018154:	687b      	ldr	r3, [r7, #4]
 8018156:	781b      	ldrb	r3, [r3, #0]
 8018158:	2b03      	cmp	r3, #3
 801815a:	d80b      	bhi.n	8018174 <Custom_STM_App_Notification+0x28>
 801815c:	a201      	add	r2, pc, #4	@ (adr r2, 8018164 <Custom_STM_App_Notification+0x18>)
 801815e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018162:	bf00      	nop
 8018164:	08018175 	.word	0x08018175
 8018168:	08018175 	.word	0x08018175
 801816c:	08018175 	.word	0x08018175
 8018170:	08018175 	.word	0x08018175

    default:
      /* USER CODE BEGIN CUSTOM_STM_App_Notification_default */

      /* USER CODE END CUSTOM_STM_App_Notification_default */
      break;
 8018174:	bf00      	nop
  }
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_2 */

  /* USER CODE END CUSTOM_STM_App_Notification_2 */
  return;
 8018176:	bf00      	nop
}
 8018178:	370c      	adds	r7, #12
 801817a:	46bd      	mov	sp, r7
 801817c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018180:	4770      	bx	lr
 8018182:	bf00      	nop

08018184 <Custom_APP_Notification>:

void Custom_APP_Notification(Custom_App_ConnHandle_Not_evt_t *pNotification)
{
 8018184:	b480      	push	{r7}
 8018186:	b083      	sub	sp, #12
 8018188:	af00      	add	r7, sp, #0
 801818a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_APP_Notification_1 */

  /* USER CODE END CUSTOM_APP_Notification_1 */

  switch (pNotification->Custom_Evt_Opcode)
 801818c:	687b      	ldr	r3, [r7, #4]
 801818e:	781b      	ldrb	r3, [r3, #0]
 8018190:	2b00      	cmp	r3, #0
 8018192:	d002      	beq.n	801819a <Custom_APP_Notification+0x16>
 8018194:	2b01      	cmp	r3, #1
 8018196:	d002      	beq.n	801819e <Custom_APP_Notification+0x1a>

    default:
      /* USER CODE BEGIN CUSTOM_APP_Notification_default */

      /* USER CODE END CUSTOM_APP_Notification_default */
      break;
 8018198:	e002      	b.n	80181a0 <Custom_APP_Notification+0x1c>
      break;
 801819a:	bf00      	nop
 801819c:	e000      	b.n	80181a0 <Custom_APP_Notification+0x1c>
      break;
 801819e:	bf00      	nop

  /* USER CODE BEGIN CUSTOM_APP_Notification_2 */

  /* USER CODE END CUSTOM_APP_Notification_2 */

  return;
 80181a0:	bf00      	nop
}
 80181a2:	370c      	adds	r7, #12
 80181a4:	46bd      	mov	sp, r7
 80181a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181aa:	4770      	bx	lr

080181ac <Custom_APP_Init>:

void Custom_APP_Init(void)
{
 80181ac:	b480      	push	{r7}
 80181ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CUSTOM_APP_Init */

  /* USER CODE END CUSTOM_APP_Init */
  return;
 80181b0:	bf00      	nop
}
 80181b2:	46bd      	mov	sp, r7
 80181b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181b8:	4770      	bx	lr
	...

080181bc <Custom_STM_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Custom_STM_Event_Handler(void *Event)
{
 80181bc:	b580      	push	{r7, lr}
 80181be:	b08c      	sub	sp, #48	@ 0x30
 80181c0:	af00      	add	r7, sp, #0
 80181c2:	6078      	str	r0, [r7, #4]
  Custom_STM_App_Notification_evt_t     Notification;
  /* USER CODE BEGIN Custom_STM_Event_Handler_1 */

  /* USER CODE END Custom_STM_Event_Handler_1 */

  return_value = SVCCTL_EvtNotAck;
 80181c4:	2300      	movs	r3, #0
 80181c6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 80181ca:	687b      	ldr	r3, [r7, #4]
 80181cc:	3301      	adds	r3, #1
 80181ce:	62bb      	str	r3, [r7, #40]	@ 0x28

  switch (event_pckt->evt)
 80181d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80181d2:	781b      	ldrb	r3, [r3, #0]
 80181d4:	2bff      	cmp	r3, #255	@ 0xff
 80181d6:	f040 808a 	bne.w	80182ee <Custom_STM_Event_Handler+0x132>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 80181da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80181dc:	3302      	adds	r3, #2
 80181de:	627b      	str	r3, [r7, #36]	@ 0x24
      switch (blecore_evt->ecode)
 80181e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80181e2:	881b      	ldrh	r3, [r3, #0]
 80181e4:	b29b      	uxth	r3, r3
 80181e6:	f6a3 4301 	subw	r3, r3, #3073	@ 0xc01
 80181ea:	2b1a      	cmp	r3, #26
 80181ec:	d87b      	bhi.n	80182e6 <Custom_STM_Event_Handler+0x12a>
 80181ee:	a201      	add	r2, pc, #4	@ (adr r2, 80181f4 <Custom_STM_Event_Handler+0x38>)
 80181f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80181f4:	08018261 	.word	0x08018261
 80181f8:	080182e7 	.word	0x080182e7
 80181fc:	080182e7 	.word	0x080182e7
 8018200:	080182e7 	.word	0x080182e7
 8018204:	080182e7 	.word	0x080182e7
 8018208:	080182e7 	.word	0x080182e7
 801820c:	080182e7 	.word	0x080182e7
 8018210:	080182e7 	.word	0x080182e7
 8018214:	080182e7 	.word	0x080182e7
 8018218:	080182e7 	.word	0x080182e7
 801821c:	080182e7 	.word	0x080182e7
 8018220:	080182e7 	.word	0x080182e7
 8018224:	080182e7 	.word	0x080182e7
 8018228:	080182e7 	.word	0x080182e7
 801822c:	080182e7 	.word	0x080182e7
 8018230:	080182e7 	.word	0x080182e7
 8018234:	080182e7 	.word	0x080182e7
 8018238:	080182e7 	.word	0x080182e7
 801823c:	080182e7 	.word	0x080182e7
 8018240:	080182e7 	.word	0x080182e7
 8018244:	080182e7 	.word	0x080182e7
 8018248:	080182e7 	.word	0x080182e7
 801824c:	080182e7 	.word	0x080182e7
 8018250:	080182e7 	.word	0x080182e7
 8018254:	080182e7 	.word	0x080182e7
 8018258:	080182e7 	.word	0x080182e7
 801825c:	080182c9 	.word	0x080182c9
      {
        case ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE:
          /* USER CODE BEGIN EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_BEGIN */

          /* USER CODE END EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_BEGIN */
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 8018260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018262:	3302      	adds	r3, #2
 8018264:	61fb      	str	r3, [r7, #28]
          if (attribute_modified->Attr_Handle == (CustomContext.CustomSendnumHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 8018266:	69fb      	ldr	r3, [r7, #28]
 8018268:	885b      	ldrh	r3, [r3, #2]
 801826a:	b29b      	uxth	r3, r3
 801826c:	461a      	mov	r2, r3
 801826e:	4b23      	ldr	r3, [pc, #140]	@ (80182fc <Custom_STM_Event_Handler+0x140>)
 8018270:	889b      	ldrh	r3, [r3, #4]
 8018272:	3302      	adds	r3, #2
 8018274:	429a      	cmp	r2, r3
 8018276:	d119      	bne.n	80182ac <Custom_STM_Event_Handler+0xf0>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 8018278:	2301      	movs	r3, #1
 801827a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_2 */

            /* USER CODE END CUSTOM_STM_Service_1_Char_2 */
            switch (attribute_modified->Attr_Data[0])
 801827e:	69fb      	ldr	r3, [r7, #28]
 8018280:	7a1b      	ldrb	r3, [r3, #8]
 8018282:	2b00      	cmp	r3, #0
 8018284:	d002      	beq.n	801828c <Custom_STM_Event_Handler+0xd0>
 8018286:	2b01      	cmp	r3, #1
 8018288:	d008      	beq.n	801829c <Custom_STM_Event_Handler+0xe0>

              default:
                /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_2_default */

                /* USER CODE END CUSTOM_STM_Service_1_Char_2_default */
              break;
 801828a:	e01c      	b.n	80182c6 <Custom_STM_Event_Handler+0x10a>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_SENDNUM_NOTIFY_DISABLED_EVT;
 801828c:	2302      	movs	r3, #2
 801828e:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 8018290:	f107 0308 	add.w	r3, r7, #8
 8018294:	4618      	mov	r0, r3
 8018296:	f7ff ff59 	bl	801814c <Custom_STM_App_Notification>
                break;
 801829a:	e014      	b.n	80182c6 <Custom_STM_Event_Handler+0x10a>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_SENDNUM_NOTIFY_ENABLED_EVT;
 801829c:	2301      	movs	r3, #1
 801829e:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 80182a0:	f107 0308 	add.w	r3, r7, #8
 80182a4:	4618      	mov	r0, r3
 80182a6:	f7ff ff51 	bl	801814c <Custom_STM_App_Notification>
                break;
 80182aa:	e00c      	b.n	80182c6 <Custom_STM_Event_Handler+0x10a>
            }
          }  /* if (attribute_modified->Attr_Handle == (CustomContext.CustomSendnumHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))*/

          else if (attribute_modified->Attr_Handle == (CustomContext.CustomCharwriteHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 80182ac:	69fb      	ldr	r3, [r7, #28]
 80182ae:	885b      	ldrh	r3, [r3, #2]
 80182b0:	b29b      	uxth	r3, r3
 80182b2:	461a      	mov	r2, r3
 80182b4:	4b11      	ldr	r3, [pc, #68]	@ (80182fc <Custom_STM_Event_Handler+0x140>)
 80182b6:	885b      	ldrh	r3, [r3, #2]
 80182b8:	3301      	adds	r3, #1
 80182ba:	429a      	cmp	r2, r3
 80182bc:	d115      	bne.n	80182ea <Custom_STM_Event_Handler+0x12e>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 80182be:	2301      	movs	r3, #1
 80182c0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            /* USER CODE END CUSTOM_STM_Service_1_Char_1_ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE */
          } /* if (attribute_modified->Attr_Handle == (CustomContext.CustomCharwriteHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))*/
          /* USER CODE BEGIN EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_END */

          /* USER CODE END EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_END */
          break;
 80182c4:	e011      	b.n	80182ea <Custom_STM_Event_Handler+0x12e>
 80182c6:	e010      	b.n	80182ea <Custom_STM_Event_Handler+0x12e>
		case ACI_GATT_NOTIFICATION_COMPLETE_VSEVT_CODE:
        {
          /* USER CODE BEGIN EVT_BLUE_GATT_NOTIFICATION_COMPLETE_BEGIN */

          /* USER CODE END EVT_BLUE_GATT_NOTIFICATION_COMPLETE_BEGIN */
          notification_complete = (aci_gatt_notification_complete_event_rp0*)blecore_evt->data;
 80182c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80182ca:	3302      	adds	r3, #2
 80182cc:	623b      	str	r3, [r7, #32]
          Notification.Custom_Evt_Opcode = CUSTOM_STM_NOTIFICATION_COMPLETE_EVT;
 80182ce:	2303      	movs	r3, #3
 80182d0:	723b      	strb	r3, [r7, #8]
          Notification.AttrHandle = notification_complete->Attr_Handle;
 80182d2:	6a3b      	ldr	r3, [r7, #32]
 80182d4:	881b      	ldrh	r3, [r3, #0]
 80182d6:	b29b      	uxth	r3, r3
 80182d8:	833b      	strh	r3, [r7, #24]
          Custom_STM_App_Notification(&Notification);
 80182da:	f107 0308 	add.w	r3, r7, #8
 80182de:	4618      	mov	r0, r3
 80182e0:	f7ff ff34 	bl	801814c <Custom_STM_App_Notification>
          /* USER CODE BEGIN EVT_BLUE_GATT_NOTIFICATION_COMPLETE_END */

          /* USER CODE END EVT_BLUE_GATT_NOTIFICATION_COMPLETE_END */
          break;
 80182e4:	e002      	b.n	80182ec <Custom_STM_Event_Handler+0x130>
        /* USER CODE END BLECORE_EVT */
        default:
          /* USER CODE BEGIN EVT_DEFAULT */

          /* USER CODE END EVT_DEFAULT */
          break;
 80182e6:	bf00      	nop
 80182e8:	e002      	b.n	80182f0 <Custom_STM_Event_Handler+0x134>
          break;
 80182ea:	bf00      	nop
      }
      /* USER CODE BEGIN EVT_VENDOR*/

      /* USER CODE END EVT_VENDOR*/
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 80182ec:	e000      	b.n	80182f0 <Custom_STM_Event_Handler+0x134>

    default:
      /* USER CODE BEGIN EVENT_PCKT*/

      /* USER CODE END EVENT_PCKT*/
      break;
 80182ee:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_Event_Handler_2 */

  /* USER CODE END Custom_STM_Event_Handler_2 */

  return(return_value);
 80182f0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}/* end Custom_STM_Event_Handler */
 80182f4:	4618      	mov	r0, r3
 80182f6:	3730      	adds	r7, #48	@ 0x30
 80182f8:	46bd      	mov	sp, r7
 80182fa:	bd80      	pop	{r7, pc}
 80182fc:	200015c8 	.word	0x200015c8

08018300 <SVCCTL_InitCustomSvc>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void SVCCTL_InitCustomSvc(void)
{
 8018300:	b580      	push	{r7, lr}
 8018302:	b08c      	sub	sp, #48	@ 0x30
 8018304:	af06      	add	r7, sp, #24

  Char_UUID_t  uuid;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8018306:	2392      	movs	r3, #146	@ 0x92
 8018308:	75fb      	strb	r3, [r7, #23]
  /* USER CODE END SVCCTL_InitCustomSvc_1 */

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(Custom_STM_Event_Handler);
 801830a:	484f      	ldr	r0, [pc, #316]	@ (8018448 <SVCCTL_InitCustomSvc+0x148>)
 801830c:	f7fd ffb6 	bl	801627c <SVCCTL_RegisterSvcHandler>
   *                              = 6
   *
   * This value doesn't take into account number of descriptors manually added
   * In case of descriptors added, please update the max_attr_record value accordingly in the next SVCCTL_InitService User Section
   */
  max_attr_record = 6;
 8018310:	2306      	movs	r3, #6
 8018312:	75bb      	strb	r3, [r7, #22]
  /* USER CODE BEGIN SVCCTL_InitService */
  /* max_attr_record to be updated if descriptors have been added */

  /* USER CODE END SVCCTL_InitService */

  COPY_BPSERVICE_UUID(uuid.Char_UUID_128);
 8018314:	238f      	movs	r3, #143	@ 0x8f
 8018316:	713b      	strb	r3, [r7, #4]
 8018318:	23e5      	movs	r3, #229	@ 0xe5
 801831a:	717b      	strb	r3, [r7, #5]
 801831c:	23b3      	movs	r3, #179	@ 0xb3
 801831e:	71bb      	strb	r3, [r7, #6]
 8018320:	23d5      	movs	r3, #213	@ 0xd5
 8018322:	71fb      	strb	r3, [r7, #7]
 8018324:	232e      	movs	r3, #46	@ 0x2e
 8018326:	723b      	strb	r3, [r7, #8]
 8018328:	237f      	movs	r3, #127	@ 0x7f
 801832a:	727b      	strb	r3, [r7, #9]
 801832c:	234a      	movs	r3, #74	@ 0x4a
 801832e:	72bb      	strb	r3, [r7, #10]
 8018330:	2398      	movs	r3, #152	@ 0x98
 8018332:	72fb      	strb	r3, [r7, #11]
 8018334:	232a      	movs	r3, #42	@ 0x2a
 8018336:	733b      	strb	r3, [r7, #12]
 8018338:	2348      	movs	r3, #72	@ 0x48
 801833a:	737b      	strb	r3, [r7, #13]
 801833c:	237a      	movs	r3, #122	@ 0x7a
 801833e:	73bb      	strb	r3, [r7, #14]
 8018340:	23cc      	movs	r3, #204	@ 0xcc
 8018342:	73fb      	strb	r3, [r7, #15]
 8018344:	2300      	movs	r3, #0
 8018346:	743b      	strb	r3, [r7, #16]
 8018348:	2300      	movs	r3, #0
 801834a:	747b      	strb	r3, [r7, #17]
 801834c:	2300      	movs	r3, #0
 801834e:	74bb      	strb	r3, [r7, #18]
 8018350:	2300      	movs	r3, #0
 8018352:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_service(UUID_TYPE_128,
 8018354:	7dbb      	ldrb	r3, [r7, #22]
 8018356:	1d39      	adds	r1, r7, #4
 8018358:	4a3c      	ldr	r2, [pc, #240]	@ (801844c <SVCCTL_InitCustomSvc+0x14c>)
 801835a:	9200      	str	r2, [sp, #0]
 801835c:	2201      	movs	r2, #1
 801835e:	2002      	movs	r0, #2
 8018360:	f7fd fa00 	bl	8015764 <aci_gatt_add_service>
 8018364:	4603      	mov	r3, r0
 8018366:	75fb      	strb	r3, [r7, #23]
  }

  /**
   *  charWrite
   */
  COPY_CHARWRITE_UUID(uuid.Char_UUID_128);
 8018368:	2319      	movs	r3, #25
 801836a:	713b      	strb	r3, [r7, #4]
 801836c:	23ed      	movs	r3, #237	@ 0xed
 801836e:	717b      	strb	r3, [r7, #5]
 8018370:	2382      	movs	r3, #130	@ 0x82
 8018372:	71bb      	strb	r3, [r7, #6]
 8018374:	23ae      	movs	r3, #174	@ 0xae
 8018376:	71fb      	strb	r3, [r7, #7]
 8018378:	23ed      	movs	r3, #237	@ 0xed
 801837a:	723b      	strb	r3, [r7, #8]
 801837c:	2321      	movs	r3, #33	@ 0x21
 801837e:	727b      	strb	r3, [r7, #9]
 8018380:	234c      	movs	r3, #76	@ 0x4c
 8018382:	72bb      	strb	r3, [r7, #10]
 8018384:	239d      	movs	r3, #157	@ 0x9d
 8018386:	72fb      	strb	r3, [r7, #11]
 8018388:	2341      	movs	r3, #65	@ 0x41
 801838a:	733b      	strb	r3, [r7, #12]
 801838c:	2345      	movs	r3, #69	@ 0x45
 801838e:	737b      	strb	r3, [r7, #13]
 8018390:	2322      	movs	r3, #34	@ 0x22
 8018392:	73bb      	strb	r3, [r7, #14]
 8018394:	238e      	movs	r3, #142	@ 0x8e
 8018396:	73fb      	strb	r3, [r7, #15]
 8018398:	2300      	movs	r3, #0
 801839a:	743b      	strb	r3, [r7, #16]
 801839c:	2300      	movs	r3, #0
 801839e:	747b      	strb	r3, [r7, #17]
 80183a0:	2300      	movs	r3, #0
 80183a2:	74bb      	strb	r3, [r7, #18]
 80183a4:	2300      	movs	r3, #0
 80183a6:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomBpserviceHdle,
 80183a8:	4b28      	ldr	r3, [pc, #160]	@ (801844c <SVCCTL_InitCustomSvc+0x14c>)
 80183aa:	8818      	ldrh	r0, [r3, #0]
 80183ac:	4b28      	ldr	r3, [pc, #160]	@ (8018450 <SVCCTL_InitCustomSvc+0x150>)
 80183ae:	881b      	ldrh	r3, [r3, #0]
 80183b0:	1d3a      	adds	r2, r7, #4
 80183b2:	4928      	ldr	r1, [pc, #160]	@ (8018454 <SVCCTL_InitCustomSvc+0x154>)
 80183b4:	9105      	str	r1, [sp, #20]
 80183b6:	2100      	movs	r1, #0
 80183b8:	9104      	str	r1, [sp, #16]
 80183ba:	2110      	movs	r1, #16
 80183bc:	9103      	str	r1, [sp, #12]
 80183be:	2101      	movs	r1, #1
 80183c0:	9102      	str	r1, [sp, #8]
 80183c2:	2100      	movs	r1, #0
 80183c4:	9101      	str	r1, [sp, #4]
 80183c6:	2108      	movs	r1, #8
 80183c8:	9100      	str	r1, [sp, #0]
 80183ca:	2102      	movs	r1, #2
 80183cc:	f7fd faa0 	bl	8015910 <aci_gatt_add_char>
 80183d0:	4603      	mov	r3, r0
 80183d2:	75fb      	strb	r3, [r7, #23]

  /* USER CODE END SVCCTL_Init_Service1_Char1 */
  /**
   *  sendnum
   */
  COPY_SENDNUM_UUID(uuid.Char_UUID_128);
 80183d4:	2319      	movs	r3, #25
 80183d6:	713b      	strb	r3, [r7, #4]
 80183d8:	23ed      	movs	r3, #237	@ 0xed
 80183da:	717b      	strb	r3, [r7, #5]
 80183dc:	2382      	movs	r3, #130	@ 0x82
 80183de:	71bb      	strb	r3, [r7, #6]
 80183e0:	23ae      	movs	r3, #174	@ 0xae
 80183e2:	71fb      	strb	r3, [r7, #7]
 80183e4:	23ed      	movs	r3, #237	@ 0xed
 80183e6:	723b      	strb	r3, [r7, #8]
 80183e8:	2321      	movs	r3, #33	@ 0x21
 80183ea:	727b      	strb	r3, [r7, #9]
 80183ec:	234c      	movs	r3, #76	@ 0x4c
 80183ee:	72bb      	strb	r3, [r7, #10]
 80183f0:	239d      	movs	r3, #157	@ 0x9d
 80183f2:	72fb      	strb	r3, [r7, #11]
 80183f4:	2341      	movs	r3, #65	@ 0x41
 80183f6:	733b      	strb	r3, [r7, #12]
 80183f8:	2345      	movs	r3, #69	@ 0x45
 80183fa:	737b      	strb	r3, [r7, #13]
 80183fc:	2322      	movs	r3, #34	@ 0x22
 80183fe:	73bb      	strb	r3, [r7, #14]
 8018400:	238e      	movs	r3, #142	@ 0x8e
 8018402:	73fb      	strb	r3, [r7, #15]
 8018404:	2301      	movs	r3, #1
 8018406:	743b      	strb	r3, [r7, #16]
 8018408:	2300      	movs	r3, #0
 801840a:	747b      	strb	r3, [r7, #17]
 801840c:	2300      	movs	r3, #0
 801840e:	74bb      	strb	r3, [r7, #18]
 8018410:	2300      	movs	r3, #0
 8018412:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomBpserviceHdle,
 8018414:	4b0d      	ldr	r3, [pc, #52]	@ (801844c <SVCCTL_InitCustomSvc+0x14c>)
 8018416:	8818      	ldrh	r0, [r3, #0]
 8018418:	4b0f      	ldr	r3, [pc, #60]	@ (8018458 <SVCCTL_InitCustomSvc+0x158>)
 801841a:	881b      	ldrh	r3, [r3, #0]
 801841c:	1d3a      	adds	r2, r7, #4
 801841e:	490f      	ldr	r1, [pc, #60]	@ (801845c <SVCCTL_InitCustomSvc+0x15c>)
 8018420:	9105      	str	r1, [sp, #20]
 8018422:	2100      	movs	r1, #0
 8018424:	9104      	str	r1, [sp, #16]
 8018426:	2110      	movs	r1, #16
 8018428:	9103      	str	r1, [sp, #12]
 801842a:	2107      	movs	r1, #7
 801842c:	9102      	str	r1, [sp, #8]
 801842e:	2100      	movs	r1, #0
 8018430:	9101      	str	r1, [sp, #4]
 8018432:	2110      	movs	r1, #16
 8018434:	9100      	str	r1, [sp, #0]
 8018436:	2102      	movs	r1, #2
 8018438:	f7fd fa6a 	bl	8015910 <aci_gatt_add_char>
 801843c:	4603      	mov	r3, r0
 801843e:	75fb      	strb	r3, [r7, #23]

  /* USER CODE BEGIN SVCCTL_InitCustomSvc_2 */

  /* USER CODE END SVCCTL_InitCustomSvc_2 */

  return;
 8018440:	bf00      	nop
}
 8018442:	3718      	adds	r7, #24
 8018444:	46bd      	mov	sp, r7
 8018446:	bd80      	pop	{r7, pc}
 8018448:	080181bd 	.word	0x080181bd
 801844c:	200015c8 	.word	0x200015c8
 8018450:	200000d2 	.word	0x200000d2
 8018454:	200015ca 	.word	0x200015ca
 8018458:	200000d4 	.word	0x200000d4
 801845c:	200015cc 	.word	0x200015cc

08018460 <LL_PWR_EnableBootC2>:
{
 8018460:	b480      	push	{r7}
 8018462:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8018464:	4b05      	ldr	r3, [pc, #20]	@ (801847c <LL_PWR_EnableBootC2+0x1c>)
 8018466:	68db      	ldr	r3, [r3, #12]
 8018468:	4a04      	ldr	r2, [pc, #16]	@ (801847c <LL_PWR_EnableBootC2+0x1c>)
 801846a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801846e:	60d3      	str	r3, [r2, #12]
}
 8018470:	bf00      	nop
 8018472:	46bd      	mov	sp, r7
 8018474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018478:	4770      	bx	lr
 801847a:	bf00      	nop
 801847c:	58000400 	.word	0x58000400

08018480 <LL_C2_EXTI_EnableEvent_32_63>:
{
 8018480:	b480      	push	{r7}
 8018482:	b083      	sub	sp, #12
 8018484:	af00      	add	r7, sp, #0
 8018486:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 8018488:	4b06      	ldr	r3, [pc, #24]	@ (80184a4 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 801848a:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 801848e:	4905      	ldr	r1, [pc, #20]	@ (80184a4 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8018490:	687b      	ldr	r3, [r7, #4]
 8018492:	4313      	orrs	r3, r2
 8018494:	f8c1 30d4 	str.w	r3, [r1, #212]	@ 0xd4
}
 8018498:	bf00      	nop
 801849a:	370c      	adds	r7, #12
 801849c:	46bd      	mov	sp, r7
 801849e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80184a2:	4770      	bx	lr
 80184a4:	58000800 	.word	0x58000800

080184a8 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 80184a8:	b480      	push	{r7}
 80184aa:	b083      	sub	sp, #12
 80184ac:	af00      	add	r7, sp, #0
 80184ae:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 80184b0:	4b05      	ldr	r3, [pc, #20]	@ (80184c8 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80184b2:	6a1a      	ldr	r2, [r3, #32]
 80184b4:	4904      	ldr	r1, [pc, #16]	@ (80184c8 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80184b6:	687b      	ldr	r3, [r7, #4]
 80184b8:	4313      	orrs	r3, r2
 80184ba:	620b      	str	r3, [r1, #32]
}
 80184bc:	bf00      	nop
 80184be:	370c      	adds	r7, #12
 80184c0:	46bd      	mov	sp, r7
 80184c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80184c6:	4770      	bx	lr
 80184c8:	58000800 	.word	0x58000800

080184cc <LL_AHB3_GRP1_EnableClock>:
{
 80184cc:	b480      	push	{r7}
 80184ce:	b085      	sub	sp, #20
 80184d0:	af00      	add	r7, sp, #0
 80184d2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 80184d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80184d8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80184da:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80184de:	687b      	ldr	r3, [r7, #4]
 80184e0:	4313      	orrs	r3, r2
 80184e2:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80184e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80184e8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80184ea:	687b      	ldr	r3, [r7, #4]
 80184ec:	4013      	ands	r3, r2
 80184ee:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80184f0:	68fb      	ldr	r3, [r7, #12]
}
 80184f2:	bf00      	nop
 80184f4:	3714      	adds	r7, #20
 80184f6:	46bd      	mov	sp, r7
 80184f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80184fc:	4770      	bx	lr

080184fe <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 80184fe:	b480      	push	{r7}
 8018500:	b085      	sub	sp, #20
 8018502:	af00      	add	r7, sp, #0
 8018504:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 8018506:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801850a:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 801850e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8018512:	687b      	ldr	r3, [r7, #4]
 8018514:	4313      	orrs	r3, r2
 8018516:	f8c1 3150 	str.w	r3, [r1, #336]	@ 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 801851a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801851e:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 8018522:	687b      	ldr	r3, [r7, #4]
 8018524:	4013      	ands	r3, r2
 8018526:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8018528:	68fb      	ldr	r3, [r7, #12]
}
 801852a:	bf00      	nop
 801852c:	3714      	adds	r7, #20
 801852e:	46bd      	mov	sp, r7
 8018530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018534:	4770      	bx	lr

08018536 <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 8018536:	b480      	push	{r7}
 8018538:	b083      	sub	sp, #12
 801853a:	af00      	add	r7, sp, #0
 801853c:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 801853e:	687b      	ldr	r3, [r7, #4]
 8018540:	681b      	ldr	r3, [r3, #0]
 8018542:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8018546:	687b      	ldr	r3, [r7, #4]
 8018548:	601a      	str	r2, [r3, #0]
}
 801854a:	bf00      	nop
 801854c:	370c      	adds	r7, #12
 801854e:	46bd      	mov	sp, r7
 8018550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018554:	4770      	bx	lr

08018556 <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 8018556:	b480      	push	{r7}
 8018558:	b083      	sub	sp, #12
 801855a:	af00      	add	r7, sp, #0
 801855c:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 801855e:	687b      	ldr	r3, [r7, #4]
 8018560:	681b      	ldr	r3, [r3, #0]
 8018562:	f043 0201 	orr.w	r2, r3, #1
 8018566:	687b      	ldr	r3, [r7, #4]
 8018568:	601a      	str	r2, [r3, #0]
}
 801856a:	bf00      	nop
 801856c:	370c      	adds	r7, #12
 801856e:	46bd      	mov	sp, r7
 8018570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018574:	4770      	bx	lr

08018576 <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8018576:	b480      	push	{r7}
 8018578:	b083      	sub	sp, #12
 801857a:	af00      	add	r7, sp, #0
 801857c:	6078      	str	r0, [r7, #4]
 801857e:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8018580:	687b      	ldr	r3, [r7, #4]
 8018582:	685a      	ldr	r2, [r3, #4]
 8018584:	683b      	ldr	r3, [r7, #0]
 8018586:	041b      	lsls	r3, r3, #16
 8018588:	43db      	mvns	r3, r3
 801858a:	401a      	ands	r2, r3
 801858c:	687b      	ldr	r3, [r7, #4]
 801858e:	605a      	str	r2, [r3, #4]
}
 8018590:	bf00      	nop
 8018592:	370c      	adds	r7, #12
 8018594:	46bd      	mov	sp, r7
 8018596:	f85d 7b04 	ldr.w	r7, [sp], #4
 801859a:	4770      	bx	lr

0801859c <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 801859c:	b480      	push	{r7}
 801859e:	b083      	sub	sp, #12
 80185a0:	af00      	add	r7, sp, #0
 80185a2:	6078      	str	r0, [r7, #4]
 80185a4:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80185a6:	687b      	ldr	r3, [r7, #4]
 80185a8:	685a      	ldr	r2, [r3, #4]
 80185aa:	683b      	ldr	r3, [r7, #0]
 80185ac:	041b      	lsls	r3, r3, #16
 80185ae:	431a      	orrs	r2, r3
 80185b0:	687b      	ldr	r3, [r7, #4]
 80185b2:	605a      	str	r2, [r3, #4]
}
 80185b4:	bf00      	nop
 80185b6:	370c      	adds	r7, #12
 80185b8:	46bd      	mov	sp, r7
 80185ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80185be:	4770      	bx	lr

080185c0 <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80185c0:	b480      	push	{r7}
 80185c2:	b083      	sub	sp, #12
 80185c4:	af00      	add	r7, sp, #0
 80185c6:	6078      	str	r0, [r7, #4]
 80185c8:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 80185ca:	687b      	ldr	r3, [r7, #4]
 80185cc:	685a      	ldr	r2, [r3, #4]
 80185ce:	683b      	ldr	r3, [r7, #0]
 80185d0:	43db      	mvns	r3, r3
 80185d2:	401a      	ands	r2, r3
 80185d4:	687b      	ldr	r3, [r7, #4]
 80185d6:	605a      	str	r2, [r3, #4]
}
 80185d8:	bf00      	nop
 80185da:	370c      	adds	r7, #12
 80185dc:	46bd      	mov	sp, r7
 80185de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80185e2:	4770      	bx	lr

080185e4 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80185e4:	b480      	push	{r7}
 80185e6:	b083      	sub	sp, #12
 80185e8:	af00      	add	r7, sp, #0
 80185ea:	6078      	str	r0, [r7, #4]
 80185ec:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 80185ee:	687b      	ldr	r3, [r7, #4]
 80185f0:	683a      	ldr	r2, [r7, #0]
 80185f2:	609a      	str	r2, [r3, #8]
}
 80185f4:	bf00      	nop
 80185f6:	370c      	adds	r7, #12
 80185f8:	46bd      	mov	sp, r7
 80185fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80185fe:	4770      	bx	lr

08018600 <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8018600:	b480      	push	{r7}
 8018602:	b083      	sub	sp, #12
 8018604:	af00      	add	r7, sp, #0
 8018606:	6078      	str	r0, [r7, #4]
 8018608:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 801860a:	683b      	ldr	r3, [r7, #0]
 801860c:	041a      	lsls	r2, r3, #16
 801860e:	687b      	ldr	r3, [r7, #4]
 8018610:	609a      	str	r2, [r3, #8]
}
 8018612:	bf00      	nop
 8018614:	370c      	adds	r7, #12
 8018616:	46bd      	mov	sp, r7
 8018618:	f85d 7b04 	ldr.w	r7, [sp], #4
 801861c:	4770      	bx	lr

0801861e <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 801861e:	b480      	push	{r7}
 8018620:	b083      	sub	sp, #12
 8018622:	af00      	add	r7, sp, #0
 8018624:	6078      	str	r0, [r7, #4]
 8018626:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8018628:	687b      	ldr	r3, [r7, #4]
 801862a:	68da      	ldr	r2, [r3, #12]
 801862c:	683b      	ldr	r3, [r7, #0]
 801862e:	4013      	ands	r3, r2
 8018630:	683a      	ldr	r2, [r7, #0]
 8018632:	429a      	cmp	r2, r3
 8018634:	d101      	bne.n	801863a <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 8018636:	2301      	movs	r3, #1
 8018638:	e000      	b.n	801863c <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 801863a:	2300      	movs	r3, #0
}
 801863c:	4618      	mov	r0, r3
 801863e:	370c      	adds	r7, #12
 8018640:	46bd      	mov	sp, r7
 8018642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018646:	4770      	bx	lr

08018648 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8018648:	b480      	push	{r7}
 801864a:	b083      	sub	sp, #12
 801864c:	af00      	add	r7, sp, #0
 801864e:	6078      	str	r0, [r7, #4]
 8018650:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 8018652:	687b      	ldr	r3, [r7, #4]
 8018654:	69da      	ldr	r2, [r3, #28]
 8018656:	683b      	ldr	r3, [r7, #0]
 8018658:	4013      	ands	r3, r2
 801865a:	683a      	ldr	r2, [r7, #0]
 801865c:	429a      	cmp	r2, r3
 801865e:	d101      	bne.n	8018664 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 8018660:	2301      	movs	r3, #1
 8018662:	e000      	b.n	8018666 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 8018664:	2300      	movs	r3, #0
}
 8018666:	4618      	mov	r0, r3
 8018668:	370c      	adds	r7, #12
 801866a:	46bd      	mov	sp, r7
 801866c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018670:	4770      	bx	lr
	...

08018674 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 8018674:	b580      	push	{r7, lr}
 8018676:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 8018678:	2102      	movs	r1, #2
 801867a:	4818      	ldr	r0, [pc, #96]	@ (80186dc <HW_IPCC_Rx_Handler+0x68>)
 801867c:	f7ff ffe4 	bl	8018648 <LL_C2_IPCC_IsActiveFlag_CHx>
 8018680:	4603      	mov	r3, r0
 8018682:	2b00      	cmp	r3, #0
 8018684:	d008      	beq.n	8018698 <HW_IPCC_Rx_Handler+0x24>
 8018686:	4b15      	ldr	r3, [pc, #84]	@ (80186dc <HW_IPCC_Rx_Handler+0x68>)
 8018688:	685b      	ldr	r3, [r3, #4]
 801868a:	f003 0302 	and.w	r3, r3, #2
 801868e:	2b00      	cmp	r3, #0
 8018690:	d102      	bne.n	8018698 <HW_IPCC_Rx_Handler+0x24>
  {
      HW_IPCC_SYS_EvtHandler();
 8018692:	f000 f8d5 	bl	8018840 <HW_IPCC_SYS_EvtHandler>
 8018696:	e01e      	b.n	80186d6 <HW_IPCC_Rx_Handler+0x62>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 8018698:	2101      	movs	r1, #1
 801869a:	4810      	ldr	r0, [pc, #64]	@ (80186dc <HW_IPCC_Rx_Handler+0x68>)
 801869c:	f7ff ffd4 	bl	8018648 <LL_C2_IPCC_IsActiveFlag_CHx>
 80186a0:	4603      	mov	r3, r0
 80186a2:	2b00      	cmp	r3, #0
 80186a4:	d008      	beq.n	80186b8 <HW_IPCC_Rx_Handler+0x44>
 80186a6:	4b0d      	ldr	r3, [pc, #52]	@ (80186dc <HW_IPCC_Rx_Handler+0x68>)
 80186a8:	685b      	ldr	r3, [r3, #4]
 80186aa:	f003 0301 	and.w	r3, r3, #1
 80186ae:	2b00      	cmp	r3, #0
 80186b0:	d102      	bne.n	80186b8 <HW_IPCC_Rx_Handler+0x44>
  {
    HW_IPCC_BLE_EvtHandler();
 80186b2:	f000 f889 	bl	80187c8 <HW_IPCC_BLE_EvtHandler>
 80186b6:	e00e      	b.n	80186d6 <HW_IPCC_Rx_Handler+0x62>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 80186b8:	2108      	movs	r1, #8
 80186ba:	4808      	ldr	r0, [pc, #32]	@ (80186dc <HW_IPCC_Rx_Handler+0x68>)
 80186bc:	f7ff ffc4 	bl	8018648 <LL_C2_IPCC_IsActiveFlag_CHx>
 80186c0:	4603      	mov	r3, r0
 80186c2:	2b00      	cmp	r3, #0
 80186c4:	d008      	beq.n	80186d8 <HW_IPCC_Rx_Handler+0x64>
 80186c6:	4b05      	ldr	r3, [pc, #20]	@ (80186dc <HW_IPCC_Rx_Handler+0x68>)
 80186c8:	685b      	ldr	r3, [r3, #4]
 80186ca:	f003 0308 	and.w	r3, r3, #8
 80186ce:	2b00      	cmp	r3, #0
 80186d0:	d102      	bne.n	80186d8 <HW_IPCC_Rx_Handler+0x64>
  {
    HW_IPCC_TRACES_EvtHandler();
 80186d2:	f000 f901 	bl	80188d8 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 80186d6:	bf00      	nop
 80186d8:	bf00      	nop
}
 80186da:	bd80      	pop	{r7, pc}
 80186dc:	58000c00 	.word	0x58000c00

080186e0 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 80186e0:	b580      	push	{r7, lr}
 80186e2:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 80186e4:	2102      	movs	r1, #2
 80186e6:	4818      	ldr	r0, [pc, #96]	@ (8018748 <HW_IPCC_Tx_Handler+0x68>)
 80186e8:	f7ff ff99 	bl	801861e <LL_C1_IPCC_IsActiveFlag_CHx>
 80186ec:	4603      	mov	r3, r0
 80186ee:	2b00      	cmp	r3, #0
 80186f0:	d108      	bne.n	8018704 <HW_IPCC_Tx_Handler+0x24>
 80186f2:	4b15      	ldr	r3, [pc, #84]	@ (8018748 <HW_IPCC_Tx_Handler+0x68>)
 80186f4:	685b      	ldr	r3, [r3, #4]
 80186f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80186fa:	2b00      	cmp	r3, #0
 80186fc:	d102      	bne.n	8018704 <HW_IPCC_Tx_Handler+0x24>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 80186fe:	f000 f893 	bl	8018828 <HW_IPCC_SYS_CmdEvtHandler>
 8018702:	e01e      	b.n	8018742 <HW_IPCC_Tx_Handler+0x62>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 8018704:	2108      	movs	r1, #8
 8018706:	4810      	ldr	r0, [pc, #64]	@ (8018748 <HW_IPCC_Tx_Handler+0x68>)
 8018708:	f7ff ff89 	bl	801861e <LL_C1_IPCC_IsActiveFlag_CHx>
 801870c:	4603      	mov	r3, r0
 801870e:	2b00      	cmp	r3, #0
 8018710:	d108      	bne.n	8018724 <HW_IPCC_Tx_Handler+0x44>
 8018712:	4b0d      	ldr	r3, [pc, #52]	@ (8018748 <HW_IPCC_Tx_Handler+0x68>)
 8018714:	685b      	ldr	r3, [r3, #4]
 8018716:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 801871a:	2b00      	cmp	r3, #0
 801871c:	d102      	bne.n	8018724 <HW_IPCC_Tx_Handler+0x44>
  {
    HW_IPCC_MM_FreeBufHandler();
 801871e:	f000 f8bd 	bl	801889c <HW_IPCC_MM_FreeBufHandler>
 8018722:	e00e      	b.n	8018742 <HW_IPCC_Tx_Handler+0x62>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 8018724:	2120      	movs	r1, #32
 8018726:	4808      	ldr	r0, [pc, #32]	@ (8018748 <HW_IPCC_Tx_Handler+0x68>)
 8018728:	f7ff ff79 	bl	801861e <LL_C1_IPCC_IsActiveFlag_CHx>
 801872c:	4603      	mov	r3, r0
 801872e:	2b00      	cmp	r3, #0
 8018730:	d108      	bne.n	8018744 <HW_IPCC_Tx_Handler+0x64>
 8018732:	4b05      	ldr	r3, [pc, #20]	@ (8018748 <HW_IPCC_Tx_Handler+0x68>)
 8018734:	685b      	ldr	r3, [r3, #4]
 8018736:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 801873a:	2b00      	cmp	r3, #0
 801873c:	d102      	bne.n	8018744 <HW_IPCC_Tx_Handler+0x64>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 801873e:	f000 f84f 	bl	80187e0 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 8018742:	bf00      	nop
 8018744:	bf00      	nop
}
 8018746:	bd80      	pop	{r7, pc}
 8018748:	58000c00 	.word	0x58000c00

0801874c <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 801874c:	b580      	push	{r7, lr}
 801874e:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 8018750:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8018754:	f7ff fed3 	bl	80184fe <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 8018758:	f44f 7000 	mov.w	r0, #512	@ 0x200
 801875c:	f7ff fea4 	bl	80184a8 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 8018760:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8018764:	f7ff fe8c 	bl	8018480 <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 8018768:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 801876a:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 801876c:	f7ff fe78 	bl	8018460 <LL_PWR_EnableBootC2>

  return;
 8018770:	bf00      	nop
}
 8018772:	bd80      	pop	{r7, pc}

08018774 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 8018774:	b580      	push	{r7, lr}
 8018776:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 8018778:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 801877c:	f7ff fea6 	bl	80184cc <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 8018780:	4806      	ldr	r0, [pc, #24]	@ (801879c <HW_IPCC_Init+0x28>)
 8018782:	f7ff fee8 	bl	8018556 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 8018786:	4805      	ldr	r0, [pc, #20]	@ (801879c <HW_IPCC_Init+0x28>)
 8018788:	f7ff fed5 	bl	8018536 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 801878c:	202c      	movs	r0, #44	@ 0x2c
 801878e:	f7f0 f878 	bl	8008882 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8018792:	202d      	movs	r0, #45	@ 0x2d
 8018794:	f7f0 f875 	bl	8008882 <HAL_NVIC_EnableIRQ>

  return;
 8018798:	bf00      	nop
}
 801879a:	bd80      	pop	{r7, pc}
 801879c:	58000c00 	.word	0x58000c00

080187a0 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 80187a0:	b580      	push	{r7, lr}
 80187a2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 80187a4:	2101      	movs	r1, #1
 80187a6:	4802      	ldr	r0, [pc, #8]	@ (80187b0 <HW_IPCC_BLE_Init+0x10>)
 80187a8:	f7ff ff0a 	bl	80185c0 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80187ac:	bf00      	nop
}
 80187ae:	bd80      	pop	{r7, pc}
 80187b0:	58000c00 	.word	0x58000c00

080187b4 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 80187b4:	b580      	push	{r7, lr}
 80187b6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 80187b8:	2101      	movs	r1, #1
 80187ba:	4802      	ldr	r0, [pc, #8]	@ (80187c4 <HW_IPCC_BLE_SendCmd+0x10>)
 80187bc:	f7ff ff20 	bl	8018600 <LL_C1_IPCC_SetFlag_CHx>

  return;
 80187c0:	bf00      	nop
}
 80187c2:	bd80      	pop	{r7, pc}
 80187c4:	58000c00 	.word	0x58000c00

080187c8 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 80187c8:	b580      	push	{r7, lr}
 80187ca:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 80187cc:	f7fe fa1a 	bl	8016c04 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 80187d0:	2101      	movs	r1, #1
 80187d2:	4802      	ldr	r0, [pc, #8]	@ (80187dc <HW_IPCC_BLE_EvtHandler+0x14>)
 80187d4:	f7ff ff06 	bl	80185e4 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 80187d8:	bf00      	nop
}
 80187da:	bd80      	pop	{r7, pc}
 80187dc:	58000c00 	.word	0x58000c00

080187e0 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 80187e0:	b580      	push	{r7, lr}
 80187e2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 80187e4:	2120      	movs	r1, #32
 80187e6:	4803      	ldr	r0, [pc, #12]	@ (80187f4 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 80187e8:	f7ff fed8 	bl	801859c <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 80187ec:	f7fe fa3a 	bl	8016c64 <HW_IPCC_BLE_AclDataAckNot>

  return;
 80187f0:	bf00      	nop
}
 80187f2:	bd80      	pop	{r7, pc}
 80187f4:	58000c00 	.word	0x58000c00

080187f8 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 80187f8:	b580      	push	{r7, lr}
 80187fa:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 80187fc:	2102      	movs	r1, #2
 80187fe:	4802      	ldr	r0, [pc, #8]	@ (8018808 <HW_IPCC_SYS_Init+0x10>)
 8018800:	f7ff fede 	bl	80185c0 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8018804:	bf00      	nop
}
 8018806:	bd80      	pop	{r7, pc}
 8018808:	58000c00 	.word	0x58000c00

0801880c <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 801880c:	b580      	push	{r7, lr}
 801880e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8018810:	2102      	movs	r1, #2
 8018812:	4804      	ldr	r0, [pc, #16]	@ (8018824 <HW_IPCC_SYS_SendCmd+0x18>)
 8018814:	f7ff fef4 	bl	8018600 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8018818:	2102      	movs	r1, #2
 801881a:	4802      	ldr	r0, [pc, #8]	@ (8018824 <HW_IPCC_SYS_SendCmd+0x18>)
 801881c:	f7ff feab 	bl	8018576 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8018820:	bf00      	nop
}
 8018822:	bd80      	pop	{r7, pc}
 8018824:	58000c00 	.word	0x58000c00

08018828 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8018828:	b580      	push	{r7, lr}
 801882a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 801882c:	2102      	movs	r1, #2
 801882e:	4803      	ldr	r0, [pc, #12]	@ (801883c <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 8018830:	f7ff feb4 	bl	801859c <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 8018834:	f7fe fa66 	bl	8016d04 <HW_IPCC_SYS_CmdEvtNot>

  return;
 8018838:	bf00      	nop
}
 801883a:	bd80      	pop	{r7, pc}
 801883c:	58000c00 	.word	0x58000c00

08018840 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8018840:	b580      	push	{r7, lr}
 8018842:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 8018844:	f7fe fa74 	bl	8016d30 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8018848:	2102      	movs	r1, #2
 801884a:	4802      	ldr	r0, [pc, #8]	@ (8018854 <HW_IPCC_SYS_EvtHandler+0x14>)
 801884c:	f7ff feca 	bl	80185e4 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8018850:	bf00      	nop
}
 8018852:	bd80      	pop	{r7, pc}
 8018854:	58000c00 	.word	0x58000c00

08018858 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 8018858:	b580      	push	{r7, lr}
 801885a:	b082      	sub	sp, #8
 801885c:	af00      	add	r7, sp, #0
 801885e:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 8018860:	2108      	movs	r1, #8
 8018862:	480c      	ldr	r0, [pc, #48]	@ (8018894 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8018864:	f7ff fedb 	bl	801861e <LL_C1_IPCC_IsActiveFlag_CHx>
 8018868:	4603      	mov	r3, r0
 801886a:	2b00      	cmp	r3, #0
 801886c:	d007      	beq.n	801887e <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 801886e:	4a0a      	ldr	r2, [pc, #40]	@ (8018898 <HW_IPCC_MM_SendFreeBuf+0x40>)
 8018870:	687b      	ldr	r3, [r7, #4]
 8018872:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8018874:	2108      	movs	r1, #8
 8018876:	4807      	ldr	r0, [pc, #28]	@ (8018894 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8018878:	f7ff fe7d 	bl	8018576 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 801887c:	e006      	b.n	801888c <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 801887e:	687b      	ldr	r3, [r7, #4]
 8018880:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8018882:	2108      	movs	r1, #8
 8018884:	4803      	ldr	r0, [pc, #12]	@ (8018894 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8018886:	f7ff febb 	bl	8018600 <LL_C1_IPCC_SetFlag_CHx>
  return;
 801888a:	bf00      	nop
}
 801888c:	3708      	adds	r7, #8
 801888e:	46bd      	mov	sp, r7
 8018890:	bd80      	pop	{r7, pc}
 8018892:	bf00      	nop
 8018894:	58000c00 	.word	0x58000c00
 8018898:	200015d0 	.word	0x200015d0

0801889c <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 801889c:	b580      	push	{r7, lr}
 801889e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80188a0:	2108      	movs	r1, #8
 80188a2:	4806      	ldr	r0, [pc, #24]	@ (80188bc <HW_IPCC_MM_FreeBufHandler+0x20>)
 80188a4:	f7ff fe7a 	bl	801859c <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 80188a8:	4b05      	ldr	r3, [pc, #20]	@ (80188c0 <HW_IPCC_MM_FreeBufHandler+0x24>)
 80188aa:	681b      	ldr	r3, [r3, #0]
 80188ac:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80188ae:	2108      	movs	r1, #8
 80188b0:	4802      	ldr	r0, [pc, #8]	@ (80188bc <HW_IPCC_MM_FreeBufHandler+0x20>)
 80188b2:	f7ff fea5 	bl	8018600 <LL_C1_IPCC_SetFlag_CHx>

  return;
 80188b6:	bf00      	nop
}
 80188b8:	bd80      	pop	{r7, pc}
 80188ba:	bf00      	nop
 80188bc:	58000c00 	.word	0x58000c00
 80188c0:	200015d0 	.word	0x200015d0

080188c4 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 80188c4:	b580      	push	{r7, lr}
 80188c6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 80188c8:	2108      	movs	r1, #8
 80188ca:	4802      	ldr	r0, [pc, #8]	@ (80188d4 <HW_IPCC_TRACES_Init+0x10>)
 80188cc:	f7ff fe78 	bl	80185c0 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80188d0:	bf00      	nop
}
 80188d2:	bd80      	pop	{r7, pc}
 80188d4:	58000c00 	.word	0x58000c00

080188d8 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 80188d8:	b580      	push	{r7, lr}
 80188da:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 80188dc:	f7fe fad0 	bl	8016e80 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 80188e0:	2108      	movs	r1, #8
 80188e2:	4802      	ldr	r0, [pc, #8]	@ (80188ec <HW_IPCC_TRACES_EvtHandler+0x14>)
 80188e4:	f7ff fe7e 	bl	80185e4 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 80188e8:	bf00      	nop
}
 80188ea:	bd80      	pop	{r7, pc}
 80188ec:	58000c00 	.word	0x58000c00

080188f0 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 80188f0:	b580      	push	{r7, lr}
 80188f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 80188f4:	2200      	movs	r2, #0
 80188f6:	4912      	ldr	r1, [pc, #72]	@ (8018940 <MX_USB_Device_Init+0x50>)
 80188f8:	4812      	ldr	r0, [pc, #72]	@ (8018944 <MX_USB_Device_Init+0x54>)
 80188fa:	f7fb f82d 	bl	8013958 <USBD_Init>
 80188fe:	4603      	mov	r3, r0
 8018900:	2b00      	cmp	r3, #0
 8018902:	d001      	beq.n	8018908 <MX_USB_Device_Init+0x18>
    Error_Handler();
 8018904:	f7ea fa00 	bl	8002d08 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8018908:	490f      	ldr	r1, [pc, #60]	@ (8018948 <MX_USB_Device_Init+0x58>)
 801890a:	480e      	ldr	r0, [pc, #56]	@ (8018944 <MX_USB_Device_Init+0x54>)
 801890c:	f7fb f854 	bl	80139b8 <USBD_RegisterClass>
 8018910:	4603      	mov	r3, r0
 8018912:	2b00      	cmp	r3, #0
 8018914:	d001      	beq.n	801891a <MX_USB_Device_Init+0x2a>
    Error_Handler();
 8018916:	f7ea f9f7 	bl	8002d08 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 801891a:	490c      	ldr	r1, [pc, #48]	@ (801894c <MX_USB_Device_Init+0x5c>)
 801891c:	4809      	ldr	r0, [pc, #36]	@ (8018944 <MX_USB_Device_Init+0x54>)
 801891e:	f7fa ff4b 	bl	80137b8 <USBD_CDC_RegisterInterface>
 8018922:	4603      	mov	r3, r0
 8018924:	2b00      	cmp	r3, #0
 8018926:	d001      	beq.n	801892c <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8018928:	f7ea f9ee 	bl	8002d08 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 801892c:	4805      	ldr	r0, [pc, #20]	@ (8018944 <MX_USB_Device_Init+0x54>)
 801892e:	f7fb f879 	bl	8013a24 <USBD_Start>
 8018932:	4603      	mov	r3, r0
 8018934:	2b00      	cmp	r3, #0
 8018936:	d001      	beq.n	801893c <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8018938:	f7ea f9e6 	bl	8002d08 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 801893c:	bf00      	nop
 801893e:	bd80      	pop	{r7, pc}
 8018940:	200000ec 	.word	0x200000ec
 8018944:	200015d4 	.word	0x200015d4
 8018948:	20000044 	.word	0x20000044
 801894c:	200000d8 	.word	0x200000d8

08018950 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8018950:	b580      	push	{r7, lr}
 8018952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8018954:	2200      	movs	r2, #0
 8018956:	4905      	ldr	r1, [pc, #20]	@ (801896c <CDC_Init_FS+0x1c>)
 8018958:	4805      	ldr	r0, [pc, #20]	@ (8018970 <CDC_Init_FS+0x20>)
 801895a:	f7fa ff47 	bl	80137ec <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801895e:	4905      	ldr	r1, [pc, #20]	@ (8018974 <CDC_Init_FS+0x24>)
 8018960:	4803      	ldr	r0, [pc, #12]	@ (8018970 <CDC_Init_FS+0x20>)
 8018962:	f7fa ff65 	bl	8013830 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8018966:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8018968:	4618      	mov	r0, r3
 801896a:	bd80      	pop	{r7, pc}
 801896c:	200020b0 	.word	0x200020b0
 8018970:	200015d4 	.word	0x200015d4
 8018974:	200018b0 	.word	0x200018b0

08018978 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8018978:	b480      	push	{r7}
 801897a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 801897c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801897e:	4618      	mov	r0, r3
 8018980:	46bd      	mov	sp, r7
 8018982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018986:	4770      	bx	lr

08018988 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8018988:	b480      	push	{r7}
 801898a:	b083      	sub	sp, #12
 801898c:	af00      	add	r7, sp, #0
 801898e:	4603      	mov	r3, r0
 8018990:	6039      	str	r1, [r7, #0]
 8018992:	71fb      	strb	r3, [r7, #7]
 8018994:	4613      	mov	r3, r2
 8018996:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8018998:	79fb      	ldrb	r3, [r7, #7]
 801899a:	2b23      	cmp	r3, #35	@ 0x23
 801899c:	d84a      	bhi.n	8018a34 <CDC_Control_FS+0xac>
 801899e:	a201      	add	r2, pc, #4	@ (adr r2, 80189a4 <CDC_Control_FS+0x1c>)
 80189a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80189a4:	08018a35 	.word	0x08018a35
 80189a8:	08018a35 	.word	0x08018a35
 80189ac:	08018a35 	.word	0x08018a35
 80189b0:	08018a35 	.word	0x08018a35
 80189b4:	08018a35 	.word	0x08018a35
 80189b8:	08018a35 	.word	0x08018a35
 80189bc:	08018a35 	.word	0x08018a35
 80189c0:	08018a35 	.word	0x08018a35
 80189c4:	08018a35 	.word	0x08018a35
 80189c8:	08018a35 	.word	0x08018a35
 80189cc:	08018a35 	.word	0x08018a35
 80189d0:	08018a35 	.word	0x08018a35
 80189d4:	08018a35 	.word	0x08018a35
 80189d8:	08018a35 	.word	0x08018a35
 80189dc:	08018a35 	.word	0x08018a35
 80189e0:	08018a35 	.word	0x08018a35
 80189e4:	08018a35 	.word	0x08018a35
 80189e8:	08018a35 	.word	0x08018a35
 80189ec:	08018a35 	.word	0x08018a35
 80189f0:	08018a35 	.word	0x08018a35
 80189f4:	08018a35 	.word	0x08018a35
 80189f8:	08018a35 	.word	0x08018a35
 80189fc:	08018a35 	.word	0x08018a35
 8018a00:	08018a35 	.word	0x08018a35
 8018a04:	08018a35 	.word	0x08018a35
 8018a08:	08018a35 	.word	0x08018a35
 8018a0c:	08018a35 	.word	0x08018a35
 8018a10:	08018a35 	.word	0x08018a35
 8018a14:	08018a35 	.word	0x08018a35
 8018a18:	08018a35 	.word	0x08018a35
 8018a1c:	08018a35 	.word	0x08018a35
 8018a20:	08018a35 	.word	0x08018a35
 8018a24:	08018a35 	.word	0x08018a35
 8018a28:	08018a35 	.word	0x08018a35
 8018a2c:	08018a35 	.word	0x08018a35
 8018a30:	08018a35 	.word	0x08018a35
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8018a34:	bf00      	nop
  }

  return (USBD_OK);
 8018a36:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8018a38:	4618      	mov	r0, r3
 8018a3a:	370c      	adds	r7, #12
 8018a3c:	46bd      	mov	sp, r7
 8018a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a42:	4770      	bx	lr

08018a44 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8018a44:	b580      	push	{r7, lr}
 8018a46:	b084      	sub	sp, #16
 8018a48:	af00      	add	r7, sp, #0
 8018a4a:	6078      	str	r0, [r7, #4]
 8018a4c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8018a4e:	6879      	ldr	r1, [r7, #4]
 8018a50:	480f      	ldr	r0, [pc, #60]	@ (8018a90 <CDC_Receive_FS+0x4c>)
 8018a52:	f7fa feed 	bl	8013830 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8018a56:	480e      	ldr	r0, [pc, #56]	@ (8018a90 <CDC_Receive_FS+0x4c>)
 8018a58:	f7fa ff48 	bl	80138ec <USBD_CDC_ReceivePacket>

  memset (usbbuffer, '\0', 64);  // clear the buffer
 8018a5c:	2240      	movs	r2, #64	@ 0x40
 8018a5e:	2100      	movs	r1, #0
 8018a60:	480c      	ldr	r0, [pc, #48]	@ (8018a94 <CDC_Receive_FS+0x50>)
 8018a62:	f002 fe6a 	bl	801b73a <memset>
  uint8_t len = (uint8_t)*Len;
 8018a66:	683b      	ldr	r3, [r7, #0]
 8018a68:	681b      	ldr	r3, [r3, #0]
 8018a6a:	73fb      	strb	r3, [r7, #15]
  memcpy((uint8_t *) usbbuffer,(uint8_t *) Buf, len);  // copy the data to the buffer
 8018a6c:	7bfb      	ldrb	r3, [r7, #15]
 8018a6e:	461a      	mov	r2, r3
 8018a70:	6879      	ldr	r1, [r7, #4]
 8018a72:	4808      	ldr	r0, [pc, #32]	@ (8018a94 <CDC_Receive_FS+0x50>)
 8018a74:	f002 ff7d 	bl	801b972 <memcpy>
  memset(Buf, '\0', len);
 8018a78:	7bfb      	ldrb	r3, [r7, #15]
 8018a7a:	461a      	mov	r2, r3
 8018a7c:	2100      	movs	r1, #0
 8018a7e:	6878      	ldr	r0, [r7, #4]
 8018a80:	f002 fe5b 	bl	801b73a <memset>
  return (USBD_OK);
 8018a84:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8018a86:	4618      	mov	r0, r3
 8018a88:	3710      	adds	r7, #16
 8018a8a:	46bd      	mov	sp, r7
 8018a8c:	bd80      	pop	{r7, pc}
 8018a8e:	bf00      	nop
 8018a90:	200015d4 	.word	0x200015d4
 8018a94:	20000bfc 	.word	0x20000bfc

08018a98 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8018a98:	b580      	push	{r7, lr}
 8018a9a:	b084      	sub	sp, #16
 8018a9c:	af00      	add	r7, sp, #0
 8018a9e:	6078      	str	r0, [r7, #4]
 8018aa0:	460b      	mov	r3, r1
 8018aa2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8018aa4:	2300      	movs	r3, #0
 8018aa6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8018aa8:	4b0d      	ldr	r3, [pc, #52]	@ (8018ae0 <CDC_Transmit_FS+0x48>)
 8018aaa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8018aae:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8018ab0:	68bb      	ldr	r3, [r7, #8]
 8018ab2:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8018ab6:	2b00      	cmp	r3, #0
 8018ab8:	d001      	beq.n	8018abe <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8018aba:	2301      	movs	r3, #1
 8018abc:	e00b      	b.n	8018ad6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8018abe:	887b      	ldrh	r3, [r7, #2]
 8018ac0:	461a      	mov	r2, r3
 8018ac2:	6879      	ldr	r1, [r7, #4]
 8018ac4:	4806      	ldr	r0, [pc, #24]	@ (8018ae0 <CDC_Transmit_FS+0x48>)
 8018ac6:	f7fa fe91 	bl	80137ec <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8018aca:	4805      	ldr	r0, [pc, #20]	@ (8018ae0 <CDC_Transmit_FS+0x48>)
 8018acc:	f7fa fece 	bl	801386c <USBD_CDC_TransmitPacket>
 8018ad0:	4603      	mov	r3, r0
 8018ad2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8018ad4:	7bfb      	ldrb	r3, [r7, #15]
}
 8018ad6:	4618      	mov	r0, r3
 8018ad8:	3710      	adds	r7, #16
 8018ada:	46bd      	mov	sp, r7
 8018adc:	bd80      	pop	{r7, pc}
 8018ade:	bf00      	nop
 8018ae0:	200015d4 	.word	0x200015d4

08018ae4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8018ae4:	b480      	push	{r7}
 8018ae6:	b087      	sub	sp, #28
 8018ae8:	af00      	add	r7, sp, #0
 8018aea:	60f8      	str	r0, [r7, #12]
 8018aec:	60b9      	str	r1, [r7, #8]
 8018aee:	4613      	mov	r3, r2
 8018af0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8018af2:	2300      	movs	r3, #0
 8018af4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8018af6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8018afa:	4618      	mov	r0, r3
 8018afc:	371c      	adds	r7, #28
 8018afe:	46bd      	mov	sp, r7
 8018b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b04:	4770      	bx	lr
	...

08018b08 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018b08:	b480      	push	{r7}
 8018b0a:	b083      	sub	sp, #12
 8018b0c:	af00      	add	r7, sp, #0
 8018b0e:	4603      	mov	r3, r0
 8018b10:	6039      	str	r1, [r7, #0]
 8018b12:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8018b14:	683b      	ldr	r3, [r7, #0]
 8018b16:	2212      	movs	r2, #18
 8018b18:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 8018b1a:	4b03      	ldr	r3, [pc, #12]	@ (8018b28 <USBD_CDC_DeviceDescriptor+0x20>)
}
 8018b1c:	4618      	mov	r0, r3
 8018b1e:	370c      	adds	r7, #12
 8018b20:	46bd      	mov	sp, r7
 8018b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b26:	4770      	bx	lr
 8018b28:	2000010c 	.word	0x2000010c

08018b2c <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018b2c:	b480      	push	{r7}
 8018b2e:	b083      	sub	sp, #12
 8018b30:	af00      	add	r7, sp, #0
 8018b32:	4603      	mov	r3, r0
 8018b34:	6039      	str	r1, [r7, #0]
 8018b36:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8018b38:	683b      	ldr	r3, [r7, #0]
 8018b3a:	2204      	movs	r2, #4
 8018b3c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8018b3e:	4b03      	ldr	r3, [pc, #12]	@ (8018b4c <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8018b40:	4618      	mov	r0, r3
 8018b42:	370c      	adds	r7, #12
 8018b44:	46bd      	mov	sp, r7
 8018b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b4a:	4770      	bx	lr
 8018b4c:	20000120 	.word	0x20000120

08018b50 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018b50:	b580      	push	{r7, lr}
 8018b52:	b082      	sub	sp, #8
 8018b54:	af00      	add	r7, sp, #0
 8018b56:	4603      	mov	r3, r0
 8018b58:	6039      	str	r1, [r7, #0]
 8018b5a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8018b5c:	79fb      	ldrb	r3, [r7, #7]
 8018b5e:	2b00      	cmp	r3, #0
 8018b60:	d105      	bne.n	8018b6e <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8018b62:	683a      	ldr	r2, [r7, #0]
 8018b64:	4907      	ldr	r1, [pc, #28]	@ (8018b84 <USBD_CDC_ProductStrDescriptor+0x34>)
 8018b66:	4808      	ldr	r0, [pc, #32]	@ (8018b88 <USBD_CDC_ProductStrDescriptor+0x38>)
 8018b68:	f7fc f8a4 	bl	8014cb4 <USBD_GetString>
 8018b6c:	e004      	b.n	8018b78 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8018b6e:	683a      	ldr	r2, [r7, #0]
 8018b70:	4904      	ldr	r1, [pc, #16]	@ (8018b84 <USBD_CDC_ProductStrDescriptor+0x34>)
 8018b72:	4805      	ldr	r0, [pc, #20]	@ (8018b88 <USBD_CDC_ProductStrDescriptor+0x38>)
 8018b74:	f7fc f89e 	bl	8014cb4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8018b78:	4b02      	ldr	r3, [pc, #8]	@ (8018b84 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 8018b7a:	4618      	mov	r0, r3
 8018b7c:	3708      	adds	r7, #8
 8018b7e:	46bd      	mov	sp, r7
 8018b80:	bd80      	pop	{r7, pc}
 8018b82:	bf00      	nop
 8018b84:	200028b0 	.word	0x200028b0
 8018b88:	0801ffc4 	.word	0x0801ffc4

08018b8c <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018b8c:	b580      	push	{r7, lr}
 8018b8e:	b082      	sub	sp, #8
 8018b90:	af00      	add	r7, sp, #0
 8018b92:	4603      	mov	r3, r0
 8018b94:	6039      	str	r1, [r7, #0]
 8018b96:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8018b98:	683a      	ldr	r2, [r7, #0]
 8018b9a:	4904      	ldr	r1, [pc, #16]	@ (8018bac <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8018b9c:	4804      	ldr	r0, [pc, #16]	@ (8018bb0 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 8018b9e:	f7fc f889 	bl	8014cb4 <USBD_GetString>
  return USBD_StrDesc;
 8018ba2:	4b02      	ldr	r3, [pc, #8]	@ (8018bac <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8018ba4:	4618      	mov	r0, r3
 8018ba6:	3708      	adds	r7, #8
 8018ba8:	46bd      	mov	sp, r7
 8018baa:	bd80      	pop	{r7, pc}
 8018bac:	200028b0 	.word	0x200028b0
 8018bb0:	0801ffdc 	.word	0x0801ffdc

08018bb4 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018bb4:	b580      	push	{r7, lr}
 8018bb6:	b082      	sub	sp, #8
 8018bb8:	af00      	add	r7, sp, #0
 8018bba:	4603      	mov	r3, r0
 8018bbc:	6039      	str	r1, [r7, #0]
 8018bbe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8018bc0:	683b      	ldr	r3, [r7, #0]
 8018bc2:	221a      	movs	r2, #26
 8018bc4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8018bc6:	f000 f843 	bl	8018c50 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8018bca:	4b02      	ldr	r3, [pc, #8]	@ (8018bd4 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8018bcc:	4618      	mov	r0, r3
 8018bce:	3708      	adds	r7, #8
 8018bd0:	46bd      	mov	sp, r7
 8018bd2:	bd80      	pop	{r7, pc}
 8018bd4:	20000124 	.word	0x20000124

08018bd8 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018bd8:	b580      	push	{r7, lr}
 8018bda:	b082      	sub	sp, #8
 8018bdc:	af00      	add	r7, sp, #0
 8018bde:	4603      	mov	r3, r0
 8018be0:	6039      	str	r1, [r7, #0]
 8018be2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8018be4:	79fb      	ldrb	r3, [r7, #7]
 8018be6:	2b00      	cmp	r3, #0
 8018be8:	d105      	bne.n	8018bf6 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8018bea:	683a      	ldr	r2, [r7, #0]
 8018bec:	4907      	ldr	r1, [pc, #28]	@ (8018c0c <USBD_CDC_ConfigStrDescriptor+0x34>)
 8018bee:	4808      	ldr	r0, [pc, #32]	@ (8018c10 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8018bf0:	f7fc f860 	bl	8014cb4 <USBD_GetString>
 8018bf4:	e004      	b.n	8018c00 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8018bf6:	683a      	ldr	r2, [r7, #0]
 8018bf8:	4904      	ldr	r1, [pc, #16]	@ (8018c0c <USBD_CDC_ConfigStrDescriptor+0x34>)
 8018bfa:	4805      	ldr	r0, [pc, #20]	@ (8018c10 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8018bfc:	f7fc f85a 	bl	8014cb4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8018c00:	4b02      	ldr	r3, [pc, #8]	@ (8018c0c <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 8018c02:	4618      	mov	r0, r3
 8018c04:	3708      	adds	r7, #8
 8018c06:	46bd      	mov	sp, r7
 8018c08:	bd80      	pop	{r7, pc}
 8018c0a:	bf00      	nop
 8018c0c:	200028b0 	.word	0x200028b0
 8018c10:	0801fff0 	.word	0x0801fff0

08018c14 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018c14:	b580      	push	{r7, lr}
 8018c16:	b082      	sub	sp, #8
 8018c18:	af00      	add	r7, sp, #0
 8018c1a:	4603      	mov	r3, r0
 8018c1c:	6039      	str	r1, [r7, #0]
 8018c1e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8018c20:	79fb      	ldrb	r3, [r7, #7]
 8018c22:	2b00      	cmp	r3, #0
 8018c24:	d105      	bne.n	8018c32 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8018c26:	683a      	ldr	r2, [r7, #0]
 8018c28:	4907      	ldr	r1, [pc, #28]	@ (8018c48 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8018c2a:	4808      	ldr	r0, [pc, #32]	@ (8018c4c <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8018c2c:	f7fc f842 	bl	8014cb4 <USBD_GetString>
 8018c30:	e004      	b.n	8018c3c <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8018c32:	683a      	ldr	r2, [r7, #0]
 8018c34:	4904      	ldr	r1, [pc, #16]	@ (8018c48 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8018c36:	4805      	ldr	r0, [pc, #20]	@ (8018c4c <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8018c38:	f7fc f83c 	bl	8014cb4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8018c3c:	4b02      	ldr	r3, [pc, #8]	@ (8018c48 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 8018c3e:	4618      	mov	r0, r3
 8018c40:	3708      	adds	r7, #8
 8018c42:	46bd      	mov	sp, r7
 8018c44:	bd80      	pop	{r7, pc}
 8018c46:	bf00      	nop
 8018c48:	200028b0 	.word	0x200028b0
 8018c4c:	0801fffc 	.word	0x0801fffc

08018c50 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8018c50:	b580      	push	{r7, lr}
 8018c52:	b084      	sub	sp, #16
 8018c54:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8018c56:	4b0f      	ldr	r3, [pc, #60]	@ (8018c94 <Get_SerialNum+0x44>)
 8018c58:	681b      	ldr	r3, [r3, #0]
 8018c5a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8018c5c:	4b0e      	ldr	r3, [pc, #56]	@ (8018c98 <Get_SerialNum+0x48>)
 8018c5e:	681b      	ldr	r3, [r3, #0]
 8018c60:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8018c62:	4b0e      	ldr	r3, [pc, #56]	@ (8018c9c <Get_SerialNum+0x4c>)
 8018c64:	681b      	ldr	r3, [r3, #0]
 8018c66:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8018c68:	68fa      	ldr	r2, [r7, #12]
 8018c6a:	687b      	ldr	r3, [r7, #4]
 8018c6c:	4413      	add	r3, r2
 8018c6e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8018c70:	68fb      	ldr	r3, [r7, #12]
 8018c72:	2b00      	cmp	r3, #0
 8018c74:	d009      	beq.n	8018c8a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8018c76:	2208      	movs	r2, #8
 8018c78:	4909      	ldr	r1, [pc, #36]	@ (8018ca0 <Get_SerialNum+0x50>)
 8018c7a:	68f8      	ldr	r0, [r7, #12]
 8018c7c:	f000 f814 	bl	8018ca8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8018c80:	2204      	movs	r2, #4
 8018c82:	4908      	ldr	r1, [pc, #32]	@ (8018ca4 <Get_SerialNum+0x54>)
 8018c84:	68b8      	ldr	r0, [r7, #8]
 8018c86:	f000 f80f 	bl	8018ca8 <IntToUnicode>
  }
}
 8018c8a:	bf00      	nop
 8018c8c:	3710      	adds	r7, #16
 8018c8e:	46bd      	mov	sp, r7
 8018c90:	bd80      	pop	{r7, pc}
 8018c92:	bf00      	nop
 8018c94:	1fff7590 	.word	0x1fff7590
 8018c98:	1fff7594 	.word	0x1fff7594
 8018c9c:	1fff7598 	.word	0x1fff7598
 8018ca0:	20000126 	.word	0x20000126
 8018ca4:	20000136 	.word	0x20000136

08018ca8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8018ca8:	b480      	push	{r7}
 8018caa:	b087      	sub	sp, #28
 8018cac:	af00      	add	r7, sp, #0
 8018cae:	60f8      	str	r0, [r7, #12]
 8018cb0:	60b9      	str	r1, [r7, #8]
 8018cb2:	4613      	mov	r3, r2
 8018cb4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8018cb6:	2300      	movs	r3, #0
 8018cb8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8018cba:	2300      	movs	r3, #0
 8018cbc:	75fb      	strb	r3, [r7, #23]
 8018cbe:	e027      	b.n	8018d10 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8018cc0:	68fb      	ldr	r3, [r7, #12]
 8018cc2:	0f1b      	lsrs	r3, r3, #28
 8018cc4:	2b09      	cmp	r3, #9
 8018cc6:	d80b      	bhi.n	8018ce0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8018cc8:	68fb      	ldr	r3, [r7, #12]
 8018cca:	0f1b      	lsrs	r3, r3, #28
 8018ccc:	b2da      	uxtb	r2, r3
 8018cce:	7dfb      	ldrb	r3, [r7, #23]
 8018cd0:	005b      	lsls	r3, r3, #1
 8018cd2:	4619      	mov	r1, r3
 8018cd4:	68bb      	ldr	r3, [r7, #8]
 8018cd6:	440b      	add	r3, r1
 8018cd8:	3230      	adds	r2, #48	@ 0x30
 8018cda:	b2d2      	uxtb	r2, r2
 8018cdc:	701a      	strb	r2, [r3, #0]
 8018cde:	e00a      	b.n	8018cf6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8018ce0:	68fb      	ldr	r3, [r7, #12]
 8018ce2:	0f1b      	lsrs	r3, r3, #28
 8018ce4:	b2da      	uxtb	r2, r3
 8018ce6:	7dfb      	ldrb	r3, [r7, #23]
 8018ce8:	005b      	lsls	r3, r3, #1
 8018cea:	4619      	mov	r1, r3
 8018cec:	68bb      	ldr	r3, [r7, #8]
 8018cee:	440b      	add	r3, r1
 8018cf0:	3237      	adds	r2, #55	@ 0x37
 8018cf2:	b2d2      	uxtb	r2, r2
 8018cf4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8018cf6:	68fb      	ldr	r3, [r7, #12]
 8018cf8:	011b      	lsls	r3, r3, #4
 8018cfa:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8018cfc:	7dfb      	ldrb	r3, [r7, #23]
 8018cfe:	005b      	lsls	r3, r3, #1
 8018d00:	3301      	adds	r3, #1
 8018d02:	68ba      	ldr	r2, [r7, #8]
 8018d04:	4413      	add	r3, r2
 8018d06:	2200      	movs	r2, #0
 8018d08:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8018d0a:	7dfb      	ldrb	r3, [r7, #23]
 8018d0c:	3301      	adds	r3, #1
 8018d0e:	75fb      	strb	r3, [r7, #23]
 8018d10:	7dfa      	ldrb	r2, [r7, #23]
 8018d12:	79fb      	ldrb	r3, [r7, #7]
 8018d14:	429a      	cmp	r2, r3
 8018d16:	d3d3      	bcc.n	8018cc0 <IntToUnicode+0x18>
  }
}
 8018d18:	bf00      	nop
 8018d1a:	bf00      	nop
 8018d1c:	371c      	adds	r7, #28
 8018d1e:	46bd      	mov	sp, r7
 8018d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d24:	4770      	bx	lr

08018d26 <LL_AHB2_GRP1_EnableClock>:
{
 8018d26:	b480      	push	{r7}
 8018d28:	b085      	sub	sp, #20
 8018d2a:	af00      	add	r7, sp, #0
 8018d2c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8018d2e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8018d32:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8018d34:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8018d38:	687b      	ldr	r3, [r7, #4]
 8018d3a:	4313      	orrs	r3, r2
 8018d3c:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8018d3e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8018d42:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8018d44:	687b      	ldr	r3, [r7, #4]
 8018d46:	4013      	ands	r3, r2
 8018d48:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8018d4a:	68fb      	ldr	r3, [r7, #12]
}
 8018d4c:	bf00      	nop
 8018d4e:	3714      	adds	r7, #20
 8018d50:	46bd      	mov	sp, r7
 8018d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d56:	4770      	bx	lr

08018d58 <LL_APB1_GRP1_EnableClock>:
{
 8018d58:	b480      	push	{r7}
 8018d5a:	b085      	sub	sp, #20
 8018d5c:	af00      	add	r7, sp, #0
 8018d5e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8018d60:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8018d64:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8018d66:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8018d6a:	687b      	ldr	r3, [r7, #4]
 8018d6c:	4313      	orrs	r3, r2
 8018d6e:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8018d70:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8018d74:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8018d76:	687b      	ldr	r3, [r7, #4]
 8018d78:	4013      	ands	r3, r2
 8018d7a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8018d7c:	68fb      	ldr	r3, [r7, #12]
}
 8018d7e:	bf00      	nop
 8018d80:	3714      	adds	r7, #20
 8018d82:	46bd      	mov	sp, r7
 8018d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d88:	4770      	bx	lr
	...

08018d8c <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018d8c:	b580      	push	{r7, lr}
 8018d8e:	b088      	sub	sp, #32
 8018d90:	af00      	add	r7, sp, #0
 8018d92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8018d94:	f107 030c 	add.w	r3, r7, #12
 8018d98:	2200      	movs	r2, #0
 8018d9a:	601a      	str	r2, [r3, #0]
 8018d9c:	605a      	str	r2, [r3, #4]
 8018d9e:	609a      	str	r2, [r3, #8]
 8018da0:	60da      	str	r2, [r3, #12]
 8018da2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 8018da4:	687b      	ldr	r3, [r7, #4]
 8018da6:	681b      	ldr	r3, [r3, #0]
 8018da8:	4a13      	ldr	r2, [pc, #76]	@ (8018df8 <HAL_PCD_MspInit+0x6c>)
 8018daa:	4293      	cmp	r3, r2
 8018dac:	d120      	bne.n	8018df0 <HAL_PCD_MspInit+0x64>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8018dae:	2001      	movs	r0, #1
 8018db0:	f7ff ffb9 	bl	8018d26 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8018db4:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8018db8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8018dba:	2302      	movs	r3, #2
 8018dbc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018dbe:	2300      	movs	r3, #0
 8018dc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8018dc2:	2300      	movs	r3, #0
 8018dc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8018dc6:	230a      	movs	r3, #10
 8018dc8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8018dca:	f107 030c 	add.w	r3, r7, #12
 8018dce:	4619      	mov	r1, r3
 8018dd0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8018dd4:	f7f0 f96e 	bl	80090b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8018dd8:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 8018ddc:	f7ff ffbc 	bl	8018d58 <LL_APB1_GRP1_EnableClock>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 5, 0);
 8018de0:	2200      	movs	r2, #0
 8018de2:	2105      	movs	r1, #5
 8018de4:	2014      	movs	r0, #20
 8018de6:	f7ef fd32 	bl	800884e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8018dea:	2014      	movs	r0, #20
 8018dec:	f7ef fd49 	bl	8008882 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8018df0:	bf00      	nop
 8018df2:	3720      	adds	r7, #32
 8018df4:	46bd      	mov	sp, r7
 8018df6:	bd80      	pop	{r7, pc}
 8018df8:	40006800 	.word	0x40006800

08018dfc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018dfc:	b580      	push	{r7, lr}
 8018dfe:	b082      	sub	sp, #8
 8018e00:	af00      	add	r7, sp, #0
 8018e02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8018e04:	687b      	ldr	r3, [r7, #4]
 8018e06:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 8018e0a:	687b      	ldr	r3, [r7, #4]
 8018e0c:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8018e10:	4619      	mov	r1, r3
 8018e12:	4610      	mov	r0, r2
 8018e14:	f7fa fe53 	bl	8013abe <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8018e18:	bf00      	nop
 8018e1a:	3708      	adds	r7, #8
 8018e1c:	46bd      	mov	sp, r7
 8018e1e:	bd80      	pop	{r7, pc}

08018e20 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018e20:	b580      	push	{r7, lr}
 8018e22:	b082      	sub	sp, #8
 8018e24:	af00      	add	r7, sp, #0
 8018e26:	6078      	str	r0, [r7, #4]
 8018e28:	460b      	mov	r3, r1
 8018e2a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8018e2c:	687b      	ldr	r3, [r7, #4]
 8018e2e:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 8018e32:	78fa      	ldrb	r2, [r7, #3]
 8018e34:	6879      	ldr	r1, [r7, #4]
 8018e36:	4613      	mov	r3, r2
 8018e38:	009b      	lsls	r3, r3, #2
 8018e3a:	4413      	add	r3, r2
 8018e3c:	00db      	lsls	r3, r3, #3
 8018e3e:	440b      	add	r3, r1
 8018e40:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8018e44:	681a      	ldr	r2, [r3, #0]
 8018e46:	78fb      	ldrb	r3, [r7, #3]
 8018e48:	4619      	mov	r1, r3
 8018e4a:	f7fa fe8d 	bl	8013b68 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8018e4e:	bf00      	nop
 8018e50:	3708      	adds	r7, #8
 8018e52:	46bd      	mov	sp, r7
 8018e54:	bd80      	pop	{r7, pc}

08018e56 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018e56:	b580      	push	{r7, lr}
 8018e58:	b082      	sub	sp, #8
 8018e5a:	af00      	add	r7, sp, #0
 8018e5c:	6078      	str	r0, [r7, #4]
 8018e5e:	460b      	mov	r3, r1
 8018e60:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8018e62:	687b      	ldr	r3, [r7, #4]
 8018e64:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 8018e68:	78fa      	ldrb	r2, [r7, #3]
 8018e6a:	6879      	ldr	r1, [r7, #4]
 8018e6c:	4613      	mov	r3, r2
 8018e6e:	009b      	lsls	r3, r3, #2
 8018e70:	4413      	add	r3, r2
 8018e72:	00db      	lsls	r3, r3, #3
 8018e74:	440b      	add	r3, r1
 8018e76:	3324      	adds	r3, #36	@ 0x24
 8018e78:	681a      	ldr	r2, [r3, #0]
 8018e7a:	78fb      	ldrb	r3, [r7, #3]
 8018e7c:	4619      	mov	r1, r3
 8018e7e:	f7fa ff26 	bl	8013cce <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 8018e82:	bf00      	nop
 8018e84:	3708      	adds	r7, #8
 8018e86:	46bd      	mov	sp, r7
 8018e88:	bd80      	pop	{r7, pc}

08018e8a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018e8a:	b580      	push	{r7, lr}
 8018e8c:	b082      	sub	sp, #8
 8018e8e:	af00      	add	r7, sp, #0
 8018e90:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8018e92:	687b      	ldr	r3, [r7, #4]
 8018e94:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8018e98:	4618      	mov	r0, r3
 8018e9a:	f7fb f860 	bl	8013f5e <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 8018e9e:	bf00      	nop
 8018ea0:	3708      	adds	r7, #8
 8018ea2:	46bd      	mov	sp, r7
 8018ea4:	bd80      	pop	{r7, pc}

08018ea6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018ea6:	b580      	push	{r7, lr}
 8018ea8:	b084      	sub	sp, #16
 8018eaa:	af00      	add	r7, sp, #0
 8018eac:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8018eae:	2301      	movs	r3, #1
 8018eb0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8018eb2:	687b      	ldr	r3, [r7, #4]
 8018eb4:	795b      	ldrb	r3, [r3, #5]
 8018eb6:	2b02      	cmp	r3, #2
 8018eb8:	d001      	beq.n	8018ebe <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8018eba:	f7e9 ff25 	bl	8002d08 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8018ebe:	687b      	ldr	r3, [r7, #4]
 8018ec0:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8018ec4:	7bfa      	ldrb	r2, [r7, #15]
 8018ec6:	4611      	mov	r1, r2
 8018ec8:	4618      	mov	r0, r3
 8018eca:	f7fb f804 	bl	8013ed6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8018ece:	687b      	ldr	r3, [r7, #4]
 8018ed0:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8018ed4:	4618      	mov	r0, r3
 8018ed6:	f7fa ffac 	bl	8013e32 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8018eda:	bf00      	nop
 8018edc:	3710      	adds	r7, #16
 8018ede:	46bd      	mov	sp, r7
 8018ee0:	bd80      	pop	{r7, pc}
	...

08018ee4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018ee4:	b580      	push	{r7, lr}
 8018ee6:	b082      	sub	sp, #8
 8018ee8:	af00      	add	r7, sp, #0
 8018eea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8018eec:	687b      	ldr	r3, [r7, #4]
 8018eee:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8018ef2:	4618      	mov	r0, r3
 8018ef4:	f7fa ffff 	bl	8013ef6 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8018ef8:	687b      	ldr	r3, [r7, #4]
 8018efa:	7a5b      	ldrb	r3, [r3, #9]
 8018efc:	2b00      	cmp	r3, #0
 8018efe:	d005      	beq.n	8018f0c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8018f00:	4b04      	ldr	r3, [pc, #16]	@ (8018f14 <HAL_PCD_SuspendCallback+0x30>)
 8018f02:	691b      	ldr	r3, [r3, #16]
 8018f04:	4a03      	ldr	r2, [pc, #12]	@ (8018f14 <HAL_PCD_SuspendCallback+0x30>)
 8018f06:	f043 0306 	orr.w	r3, r3, #6
 8018f0a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8018f0c:	bf00      	nop
 8018f0e:	3708      	adds	r7, #8
 8018f10:	46bd      	mov	sp, r7
 8018f12:	bd80      	pop	{r7, pc}
 8018f14:	e000ed00 	.word	0xe000ed00

08018f18 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018f18:	b580      	push	{r7, lr}
 8018f1a:	b082      	sub	sp, #8
 8018f1c:	af00      	add	r7, sp, #0
 8018f1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8018f20:	687b      	ldr	r3, [r7, #4]
 8018f22:	7a5b      	ldrb	r3, [r3, #9]
 8018f24:	2b00      	cmp	r3, #0
 8018f26:	d007      	beq.n	8018f38 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8018f28:	4b08      	ldr	r3, [pc, #32]	@ (8018f4c <HAL_PCD_ResumeCallback+0x34>)
 8018f2a:	691b      	ldr	r3, [r3, #16]
 8018f2c:	4a07      	ldr	r2, [pc, #28]	@ (8018f4c <HAL_PCD_ResumeCallback+0x34>)
 8018f2e:	f023 0306 	bic.w	r3, r3, #6
 8018f32:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8018f34:	f000 f9fa 	bl	801932c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8018f38:	687b      	ldr	r3, [r7, #4]
 8018f3a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8018f3e:	4618      	mov	r0, r3
 8018f40:	f7fa fff5 	bl	8013f2e <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8018f44:	bf00      	nop
 8018f46:	3708      	adds	r7, #8
 8018f48:	46bd      	mov	sp, r7
 8018f4a:	bd80      	pop	{r7, pc}
 8018f4c:	e000ed00 	.word	0xe000ed00

08018f50 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8018f50:	b580      	push	{r7, lr}
 8018f52:	b082      	sub	sp, #8
 8018f54:	af00      	add	r7, sp, #0
 8018f56:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8018f58:	4a2c      	ldr	r2, [pc, #176]	@ (801900c <USBD_LL_Init+0xbc>)
 8018f5a:	687b      	ldr	r3, [r7, #4]
 8018f5c:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8018f60:	687b      	ldr	r3, [r7, #4]
 8018f62:	4a2a      	ldr	r2, [pc, #168]	@ (801900c <USBD_LL_Init+0xbc>)
 8018f64:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8
/* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 8018f68:	f7f2 fe14 	bl	800bb94 <HAL_PWREx_EnableVddUSB>

  hpcd_USB_FS.Instance = USB;
 8018f6c:	4b27      	ldr	r3, [pc, #156]	@ (801900c <USBD_LL_Init+0xbc>)
 8018f6e:	4a28      	ldr	r2, [pc, #160]	@ (8019010 <USBD_LL_Init+0xc0>)
 8018f70:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8018f72:	4b26      	ldr	r3, [pc, #152]	@ (801900c <USBD_LL_Init+0xbc>)
 8018f74:	2208      	movs	r2, #8
 8018f76:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8018f78:	4b24      	ldr	r3, [pc, #144]	@ (801900c <USBD_LL_Init+0xbc>)
 8018f7a:	2202      	movs	r2, #2
 8018f7c:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8018f7e:	4b23      	ldr	r3, [pc, #140]	@ (801900c <USBD_LL_Init+0xbc>)
 8018f80:	2202      	movs	r2, #2
 8018f82:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8018f84:	4b21      	ldr	r3, [pc, #132]	@ (801900c <USBD_LL_Init+0xbc>)
 8018f86:	2200      	movs	r2, #0
 8018f88:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8018f8a:	4b20      	ldr	r3, [pc, #128]	@ (801900c <USBD_LL_Init+0xbc>)
 8018f8c:	2200      	movs	r2, #0
 8018f8e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8018f90:	4b1e      	ldr	r3, [pc, #120]	@ (801900c <USBD_LL_Init+0xbc>)
 8018f92:	2200      	movs	r2, #0
 8018f94:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8018f96:	4b1d      	ldr	r3, [pc, #116]	@ (801900c <USBD_LL_Init+0xbc>)
 8018f98:	2200      	movs	r2, #0
 8018f9a:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8018f9c:	481b      	ldr	r0, [pc, #108]	@ (801900c <USBD_LL_Init+0xbc>)
 8018f9e:	f7f1 f8d9 	bl	800a154 <HAL_PCD_Init>
 8018fa2:	4603      	mov	r3, r0
 8018fa4:	2b00      	cmp	r3, #0
 8018fa6:	d001      	beq.n	8018fac <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 8018fa8:	f7e9 feae 	bl	8002d08 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8018fac:	687b      	ldr	r3, [r7, #4]
 8018fae:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8018fb2:	2318      	movs	r3, #24
 8018fb4:	2200      	movs	r2, #0
 8018fb6:	2100      	movs	r1, #0
 8018fb8:	f7f2 fd60 	bl	800ba7c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8018fbc:	687b      	ldr	r3, [r7, #4]
 8018fbe:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8018fc2:	2358      	movs	r3, #88	@ 0x58
 8018fc4:	2200      	movs	r2, #0
 8018fc6:	2180      	movs	r1, #128	@ 0x80
 8018fc8:	f7f2 fd58 	bl	800ba7c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8018fcc:	687b      	ldr	r3, [r7, #4]
 8018fce:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8018fd2:	23c0      	movs	r3, #192	@ 0xc0
 8018fd4:	2200      	movs	r2, #0
 8018fd6:	2181      	movs	r1, #129	@ 0x81
 8018fd8:	f7f2 fd50 	bl	800ba7c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8018fdc:	687b      	ldr	r3, [r7, #4]
 8018fde:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8018fe2:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8018fe6:	2200      	movs	r2, #0
 8018fe8:	2101      	movs	r1, #1
 8018fea:	f7f2 fd47 	bl	800ba7c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8018fee:	687b      	ldr	r3, [r7, #4]
 8018ff0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8018ff4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8018ff8:	2200      	movs	r2, #0
 8018ffa:	2182      	movs	r1, #130	@ 0x82
 8018ffc:	f7f2 fd3e 	bl	800ba7c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8019000:	2300      	movs	r3, #0
}
 8019002:	4618      	mov	r0, r3
 8019004:	3708      	adds	r7, #8
 8019006:	46bd      	mov	sp, r7
 8019008:	bd80      	pop	{r7, pc}
 801900a:	bf00      	nop
 801900c:	20002ab0 	.word	0x20002ab0
 8019010:	40006800 	.word	0x40006800

08019014 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8019014:	b580      	push	{r7, lr}
 8019016:	b084      	sub	sp, #16
 8019018:	af00      	add	r7, sp, #0
 801901a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801901c:	2300      	movs	r3, #0
 801901e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019020:	2300      	movs	r3, #0
 8019022:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8019024:	687b      	ldr	r3, [r7, #4]
 8019026:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801902a:	4618      	mov	r0, r3
 801902c:	f7f1 f960 	bl	800a2f0 <HAL_PCD_Start>
 8019030:	4603      	mov	r3, r0
 8019032:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019034:	7bfb      	ldrb	r3, [r7, #15]
 8019036:	4618      	mov	r0, r3
 8019038:	f000 f97e 	bl	8019338 <USBD_Get_USB_Status>
 801903c:	4603      	mov	r3, r0
 801903e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019040:	7bbb      	ldrb	r3, [r7, #14]
}
 8019042:	4618      	mov	r0, r3
 8019044:	3710      	adds	r7, #16
 8019046:	46bd      	mov	sp, r7
 8019048:	bd80      	pop	{r7, pc}

0801904a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801904a:	b580      	push	{r7, lr}
 801904c:	b084      	sub	sp, #16
 801904e:	af00      	add	r7, sp, #0
 8019050:	6078      	str	r0, [r7, #4]
 8019052:	4608      	mov	r0, r1
 8019054:	4611      	mov	r1, r2
 8019056:	461a      	mov	r2, r3
 8019058:	4603      	mov	r3, r0
 801905a:	70fb      	strb	r3, [r7, #3]
 801905c:	460b      	mov	r3, r1
 801905e:	70bb      	strb	r3, [r7, #2]
 8019060:	4613      	mov	r3, r2
 8019062:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019064:	2300      	movs	r3, #0
 8019066:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019068:	2300      	movs	r3, #0
 801906a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801906c:	687b      	ldr	r3, [r7, #4]
 801906e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8019072:	78bb      	ldrb	r3, [r7, #2]
 8019074:	883a      	ldrh	r2, [r7, #0]
 8019076:	78f9      	ldrb	r1, [r7, #3]
 8019078:	f7f1 faa7 	bl	800a5ca <HAL_PCD_EP_Open>
 801907c:	4603      	mov	r3, r0
 801907e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019080:	7bfb      	ldrb	r3, [r7, #15]
 8019082:	4618      	mov	r0, r3
 8019084:	f000 f958 	bl	8019338 <USBD_Get_USB_Status>
 8019088:	4603      	mov	r3, r0
 801908a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801908c:	7bbb      	ldrb	r3, [r7, #14]
}
 801908e:	4618      	mov	r0, r3
 8019090:	3710      	adds	r7, #16
 8019092:	46bd      	mov	sp, r7
 8019094:	bd80      	pop	{r7, pc}

08019096 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019096:	b580      	push	{r7, lr}
 8019098:	b084      	sub	sp, #16
 801909a:	af00      	add	r7, sp, #0
 801909c:	6078      	str	r0, [r7, #4]
 801909e:	460b      	mov	r3, r1
 80190a0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80190a2:	2300      	movs	r3, #0
 80190a4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80190a6:	2300      	movs	r3, #0
 80190a8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80190aa:	687b      	ldr	r3, [r7, #4]
 80190ac:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80190b0:	78fa      	ldrb	r2, [r7, #3]
 80190b2:	4611      	mov	r1, r2
 80190b4:	4618      	mov	r0, r3
 80190b6:	f7f1 fae7 	bl	800a688 <HAL_PCD_EP_Close>
 80190ba:	4603      	mov	r3, r0
 80190bc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80190be:	7bfb      	ldrb	r3, [r7, #15]
 80190c0:	4618      	mov	r0, r3
 80190c2:	f000 f939 	bl	8019338 <USBD_Get_USB_Status>
 80190c6:	4603      	mov	r3, r0
 80190c8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80190ca:	7bbb      	ldrb	r3, [r7, #14]
}
 80190cc:	4618      	mov	r0, r3
 80190ce:	3710      	adds	r7, #16
 80190d0:	46bd      	mov	sp, r7
 80190d2:	bd80      	pop	{r7, pc}

080190d4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80190d4:	b580      	push	{r7, lr}
 80190d6:	b084      	sub	sp, #16
 80190d8:	af00      	add	r7, sp, #0
 80190da:	6078      	str	r0, [r7, #4]
 80190dc:	460b      	mov	r3, r1
 80190de:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80190e0:	2300      	movs	r3, #0
 80190e2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80190e4:	2300      	movs	r3, #0
 80190e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80190e8:	687b      	ldr	r3, [r7, #4]
 80190ea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80190ee:	78fa      	ldrb	r2, [r7, #3]
 80190f0:	4611      	mov	r1, r2
 80190f2:	4618      	mov	r0, r3
 80190f4:	f7f1 fb90 	bl	800a818 <HAL_PCD_EP_SetStall>
 80190f8:	4603      	mov	r3, r0
 80190fa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80190fc:	7bfb      	ldrb	r3, [r7, #15]
 80190fe:	4618      	mov	r0, r3
 8019100:	f000 f91a 	bl	8019338 <USBD_Get_USB_Status>
 8019104:	4603      	mov	r3, r0
 8019106:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019108:	7bbb      	ldrb	r3, [r7, #14]
}
 801910a:	4618      	mov	r0, r3
 801910c:	3710      	adds	r7, #16
 801910e:	46bd      	mov	sp, r7
 8019110:	bd80      	pop	{r7, pc}

08019112 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019112:	b580      	push	{r7, lr}
 8019114:	b084      	sub	sp, #16
 8019116:	af00      	add	r7, sp, #0
 8019118:	6078      	str	r0, [r7, #4]
 801911a:	460b      	mov	r3, r1
 801911c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801911e:	2300      	movs	r3, #0
 8019120:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019122:	2300      	movs	r3, #0
 8019124:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8019126:	687b      	ldr	r3, [r7, #4]
 8019128:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801912c:	78fa      	ldrb	r2, [r7, #3]
 801912e:	4611      	mov	r1, r2
 8019130:	4618      	mov	r0, r3
 8019132:	f7f1 fbc3 	bl	800a8bc <HAL_PCD_EP_ClrStall>
 8019136:	4603      	mov	r3, r0
 8019138:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801913a:	7bfb      	ldrb	r3, [r7, #15]
 801913c:	4618      	mov	r0, r3
 801913e:	f000 f8fb 	bl	8019338 <USBD_Get_USB_Status>
 8019142:	4603      	mov	r3, r0
 8019144:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019146:	7bbb      	ldrb	r3, [r7, #14]
}
 8019148:	4618      	mov	r0, r3
 801914a:	3710      	adds	r7, #16
 801914c:	46bd      	mov	sp, r7
 801914e:	bd80      	pop	{r7, pc}

08019150 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019150:	b480      	push	{r7}
 8019152:	b085      	sub	sp, #20
 8019154:	af00      	add	r7, sp, #0
 8019156:	6078      	str	r0, [r7, #4]
 8019158:	460b      	mov	r3, r1
 801915a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801915c:	687b      	ldr	r3, [r7, #4]
 801915e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8019162:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8019164:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8019168:	2b00      	cmp	r3, #0
 801916a:	da0b      	bge.n	8019184 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801916c:	78fb      	ldrb	r3, [r7, #3]
 801916e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8019172:	68f9      	ldr	r1, [r7, #12]
 8019174:	4613      	mov	r3, r2
 8019176:	009b      	lsls	r3, r3, #2
 8019178:	4413      	add	r3, r2
 801917a:	00db      	lsls	r3, r3, #3
 801917c:	440b      	add	r3, r1
 801917e:	3312      	adds	r3, #18
 8019180:	781b      	ldrb	r3, [r3, #0]
 8019182:	e00b      	b.n	801919c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8019184:	78fb      	ldrb	r3, [r7, #3]
 8019186:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801918a:	68f9      	ldr	r1, [r7, #12]
 801918c:	4613      	mov	r3, r2
 801918e:	009b      	lsls	r3, r3, #2
 8019190:	4413      	add	r3, r2
 8019192:	00db      	lsls	r3, r3, #3
 8019194:	440b      	add	r3, r1
 8019196:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 801919a:	781b      	ldrb	r3, [r3, #0]
  }
}
 801919c:	4618      	mov	r0, r3
 801919e:	3714      	adds	r7, #20
 80191a0:	46bd      	mov	sp, r7
 80191a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191a6:	4770      	bx	lr

080191a8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80191a8:	b580      	push	{r7, lr}
 80191aa:	b084      	sub	sp, #16
 80191ac:	af00      	add	r7, sp, #0
 80191ae:	6078      	str	r0, [r7, #4]
 80191b0:	460b      	mov	r3, r1
 80191b2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80191b4:	2300      	movs	r3, #0
 80191b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80191b8:	2300      	movs	r3, #0
 80191ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80191bc:	687b      	ldr	r3, [r7, #4]
 80191be:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80191c2:	78fa      	ldrb	r2, [r7, #3]
 80191c4:	4611      	mov	r1, r2
 80191c6:	4618      	mov	r0, r3
 80191c8:	f7f1 f9db 	bl	800a582 <HAL_PCD_SetAddress>
 80191cc:	4603      	mov	r3, r0
 80191ce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80191d0:	7bfb      	ldrb	r3, [r7, #15]
 80191d2:	4618      	mov	r0, r3
 80191d4:	f000 f8b0 	bl	8019338 <USBD_Get_USB_Status>
 80191d8:	4603      	mov	r3, r0
 80191da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80191dc:	7bbb      	ldrb	r3, [r7, #14]
}
 80191de:	4618      	mov	r0, r3
 80191e0:	3710      	adds	r7, #16
 80191e2:	46bd      	mov	sp, r7
 80191e4:	bd80      	pop	{r7, pc}

080191e6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80191e6:	b580      	push	{r7, lr}
 80191e8:	b086      	sub	sp, #24
 80191ea:	af00      	add	r7, sp, #0
 80191ec:	60f8      	str	r0, [r7, #12]
 80191ee:	607a      	str	r2, [r7, #4]
 80191f0:	603b      	str	r3, [r7, #0]
 80191f2:	460b      	mov	r3, r1
 80191f4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80191f6:	2300      	movs	r3, #0
 80191f8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80191fa:	2300      	movs	r3, #0
 80191fc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80191fe:	68fb      	ldr	r3, [r7, #12]
 8019200:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8019204:	7af9      	ldrb	r1, [r7, #11]
 8019206:	683b      	ldr	r3, [r7, #0]
 8019208:	687a      	ldr	r2, [r7, #4]
 801920a:	f7f1 face 	bl	800a7aa <HAL_PCD_EP_Transmit>
 801920e:	4603      	mov	r3, r0
 8019210:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019212:	7dfb      	ldrb	r3, [r7, #23]
 8019214:	4618      	mov	r0, r3
 8019216:	f000 f88f 	bl	8019338 <USBD_Get_USB_Status>
 801921a:	4603      	mov	r3, r0
 801921c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801921e:	7dbb      	ldrb	r3, [r7, #22]
}
 8019220:	4618      	mov	r0, r3
 8019222:	3718      	adds	r7, #24
 8019224:	46bd      	mov	sp, r7
 8019226:	bd80      	pop	{r7, pc}

08019228 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8019228:	b580      	push	{r7, lr}
 801922a:	b086      	sub	sp, #24
 801922c:	af00      	add	r7, sp, #0
 801922e:	60f8      	str	r0, [r7, #12]
 8019230:	607a      	str	r2, [r7, #4]
 8019232:	603b      	str	r3, [r7, #0]
 8019234:	460b      	mov	r3, r1
 8019236:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019238:	2300      	movs	r3, #0
 801923a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801923c:	2300      	movs	r3, #0
 801923e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8019240:	68fb      	ldr	r3, [r7, #12]
 8019242:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8019246:	7af9      	ldrb	r1, [r7, #11]
 8019248:	683b      	ldr	r3, [r7, #0]
 801924a:	687a      	ldr	r2, [r7, #4]
 801924c:	f7f1 fa64 	bl	800a718 <HAL_PCD_EP_Receive>
 8019250:	4603      	mov	r3, r0
 8019252:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019254:	7dfb      	ldrb	r3, [r7, #23]
 8019256:	4618      	mov	r0, r3
 8019258:	f000 f86e 	bl	8019338 <USBD_Get_USB_Status>
 801925c:	4603      	mov	r3, r0
 801925e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8019260:	7dbb      	ldrb	r3, [r7, #22]
}
 8019262:	4618      	mov	r0, r3
 8019264:	3718      	adds	r7, #24
 8019266:	46bd      	mov	sp, r7
 8019268:	bd80      	pop	{r7, pc}

0801926a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801926a:	b580      	push	{r7, lr}
 801926c:	b082      	sub	sp, #8
 801926e:	af00      	add	r7, sp, #0
 8019270:	6078      	str	r0, [r7, #4]
 8019272:	460b      	mov	r3, r1
 8019274:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8019276:	687b      	ldr	r3, [r7, #4]
 8019278:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801927c:	78fa      	ldrb	r2, [r7, #3]
 801927e:	4611      	mov	r1, r2
 8019280:	4618      	mov	r0, r3
 8019282:	f7f1 fa7a 	bl	800a77a <HAL_PCD_EP_GetRxCount>
 8019286:	4603      	mov	r3, r0
}
 8019288:	4618      	mov	r0, r3
 801928a:	3708      	adds	r7, #8
 801928c:	46bd      	mov	sp, r7
 801928e:	bd80      	pop	{r7, pc}

08019290 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019290:	b580      	push	{r7, lr}
 8019292:	b082      	sub	sp, #8
 8019294:	af00      	add	r7, sp, #0
 8019296:	6078      	str	r0, [r7, #4]
 8019298:	460b      	mov	r3, r1
 801929a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 801929c:	78fb      	ldrb	r3, [r7, #3]
 801929e:	2b00      	cmp	r3, #0
 80192a0:	d002      	beq.n	80192a8 <HAL_PCDEx_LPM_Callback+0x18>
 80192a2:	2b01      	cmp	r3, #1
 80192a4:	d013      	beq.n	80192ce <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 80192a6:	e023      	b.n	80192f0 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 80192a8:	687b      	ldr	r3, [r7, #4]
 80192aa:	7a5b      	ldrb	r3, [r3, #9]
 80192ac:	2b00      	cmp	r3, #0
 80192ae:	d007      	beq.n	80192c0 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 80192b0:	f000 f83c 	bl	801932c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80192b4:	4b10      	ldr	r3, [pc, #64]	@ (80192f8 <HAL_PCDEx_LPM_Callback+0x68>)
 80192b6:	691b      	ldr	r3, [r3, #16]
 80192b8:	4a0f      	ldr	r2, [pc, #60]	@ (80192f8 <HAL_PCDEx_LPM_Callback+0x68>)
 80192ba:	f023 0306 	bic.w	r3, r3, #6
 80192be:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 80192c0:	687b      	ldr	r3, [r7, #4]
 80192c2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80192c6:	4618      	mov	r0, r3
 80192c8:	f7fa fe31 	bl	8013f2e <USBD_LL_Resume>
    break;
 80192cc:	e010      	b.n	80192f0 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 80192ce:	687b      	ldr	r3, [r7, #4]
 80192d0:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80192d4:	4618      	mov	r0, r3
 80192d6:	f7fa fe0e 	bl	8013ef6 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80192da:	687b      	ldr	r3, [r7, #4]
 80192dc:	7a5b      	ldrb	r3, [r3, #9]
 80192de:	2b00      	cmp	r3, #0
 80192e0:	d005      	beq.n	80192ee <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80192e2:	4b05      	ldr	r3, [pc, #20]	@ (80192f8 <HAL_PCDEx_LPM_Callback+0x68>)
 80192e4:	691b      	ldr	r3, [r3, #16]
 80192e6:	4a04      	ldr	r2, [pc, #16]	@ (80192f8 <HAL_PCDEx_LPM_Callback+0x68>)
 80192e8:	f043 0306 	orr.w	r3, r3, #6
 80192ec:	6113      	str	r3, [r2, #16]
    break;
 80192ee:	bf00      	nop
}
 80192f0:	bf00      	nop
 80192f2:	3708      	adds	r7, #8
 80192f4:	46bd      	mov	sp, r7
 80192f6:	bd80      	pop	{r7, pc}
 80192f8:	e000ed00 	.word	0xe000ed00

080192fc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80192fc:	b480      	push	{r7}
 80192fe:	b083      	sub	sp, #12
 8019300:	af00      	add	r7, sp, #0
 8019302:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8019304:	4b03      	ldr	r3, [pc, #12]	@ (8019314 <USBD_static_malloc+0x18>)
}
 8019306:	4618      	mov	r0, r3
 8019308:	370c      	adds	r7, #12
 801930a:	46bd      	mov	sp, r7
 801930c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019310:	4770      	bx	lr
 8019312:	bf00      	nop
 8019314:	20002d8c 	.word	0x20002d8c

08019318 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8019318:	b480      	push	{r7}
 801931a:	b083      	sub	sp, #12
 801931c:	af00      	add	r7, sp, #0
 801931e:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 8019320:	bf00      	nop
 8019322:	370c      	adds	r7, #12
 8019324:	46bd      	mov	sp, r7
 8019326:	f85d 7b04 	ldr.w	r7, [sp], #4
 801932a:	4770      	bx	lr

0801932c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 801932c:	b580      	push	{r7, lr}
 801932e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8019330:	f7e9 fc4c 	bl	8002bcc <SystemClock_Config>
}
 8019334:	bf00      	nop
 8019336:	bd80      	pop	{r7, pc}

08019338 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8019338:	b480      	push	{r7}
 801933a:	b085      	sub	sp, #20
 801933c:	af00      	add	r7, sp, #0
 801933e:	4603      	mov	r3, r0
 8019340:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019342:	2300      	movs	r3, #0
 8019344:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8019346:	79fb      	ldrb	r3, [r7, #7]
 8019348:	2b03      	cmp	r3, #3
 801934a:	d817      	bhi.n	801937c <USBD_Get_USB_Status+0x44>
 801934c:	a201      	add	r2, pc, #4	@ (adr r2, 8019354 <USBD_Get_USB_Status+0x1c>)
 801934e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019352:	bf00      	nop
 8019354:	08019365 	.word	0x08019365
 8019358:	0801936b 	.word	0x0801936b
 801935c:	08019371 	.word	0x08019371
 8019360:	08019377 	.word	0x08019377
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8019364:	2300      	movs	r3, #0
 8019366:	73fb      	strb	r3, [r7, #15]
    break;
 8019368:	e00b      	b.n	8019382 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801936a:	2303      	movs	r3, #3
 801936c:	73fb      	strb	r3, [r7, #15]
    break;
 801936e:	e008      	b.n	8019382 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8019370:	2301      	movs	r3, #1
 8019372:	73fb      	strb	r3, [r7, #15]
    break;
 8019374:	e005      	b.n	8019382 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8019376:	2303      	movs	r3, #3
 8019378:	73fb      	strb	r3, [r7, #15]
    break;
 801937a:	e002      	b.n	8019382 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801937c:	2303      	movs	r3, #3
 801937e:	73fb      	strb	r3, [r7, #15]
    break;
 8019380:	bf00      	nop
  }
  return usb_status;
 8019382:	7bfb      	ldrb	r3, [r7, #15]
}
 8019384:	4618      	mov	r0, r3
 8019386:	3714      	adds	r7, #20
 8019388:	46bd      	mov	sp, r7
 801938a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801938e:	4770      	bx	lr

08019390 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 8019390:	b480      	push	{r7}
 8019392:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8019394:	4b05      	ldr	r3, [pc, #20]	@ (80193ac <UTIL_LPM_Init+0x1c>)
 8019396:	2200      	movs	r2, #0
 8019398:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 801939a:	4b05      	ldr	r3, [pc, #20]	@ (80193b0 <UTIL_LPM_Init+0x20>)
 801939c:	2200      	movs	r2, #0
 801939e:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 80193a0:	bf00      	nop
 80193a2:	46bd      	mov	sp, r7
 80193a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193a8:	4770      	bx	lr
 80193aa:	bf00      	nop
 80193ac:	20002fac 	.word	0x20002fac
 80193b0:	20002fb0 	.word	0x20002fb0

080193b4 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 80193b4:	b480      	push	{r7}
 80193b6:	b087      	sub	sp, #28
 80193b8:	af00      	add	r7, sp, #0
 80193ba:	6078      	str	r0, [r7, #4]
 80193bc:	460b      	mov	r3, r1
 80193be:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80193c0:	f3ef 8310 	mrs	r3, PRIMASK
 80193c4:	613b      	str	r3, [r7, #16]
  return(result);
 80193c6:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 80193c8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80193ca:	b672      	cpsid	i
}
 80193cc:	bf00      	nop
  
  switch(state)
 80193ce:	78fb      	ldrb	r3, [r7, #3]
 80193d0:	2b00      	cmp	r3, #0
 80193d2:	d008      	beq.n	80193e6 <UTIL_LPM_SetOffMode+0x32>
 80193d4:	2b01      	cmp	r3, #1
 80193d6:	d10e      	bne.n	80193f6 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 80193d8:	4b0d      	ldr	r3, [pc, #52]	@ (8019410 <UTIL_LPM_SetOffMode+0x5c>)
 80193da:	681a      	ldr	r2, [r3, #0]
 80193dc:	687b      	ldr	r3, [r7, #4]
 80193de:	4313      	orrs	r3, r2
 80193e0:	4a0b      	ldr	r2, [pc, #44]	@ (8019410 <UTIL_LPM_SetOffMode+0x5c>)
 80193e2:	6013      	str	r3, [r2, #0]
      break;
 80193e4:	e008      	b.n	80193f8 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 80193e6:	687b      	ldr	r3, [r7, #4]
 80193e8:	43da      	mvns	r2, r3
 80193ea:	4b09      	ldr	r3, [pc, #36]	@ (8019410 <UTIL_LPM_SetOffMode+0x5c>)
 80193ec:	681b      	ldr	r3, [r3, #0]
 80193ee:	4013      	ands	r3, r2
 80193f0:	4a07      	ldr	r2, [pc, #28]	@ (8019410 <UTIL_LPM_SetOffMode+0x5c>)
 80193f2:	6013      	str	r3, [r2, #0]
      break;
 80193f4:	e000      	b.n	80193f8 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 80193f6:	bf00      	nop
 80193f8:	697b      	ldr	r3, [r7, #20]
 80193fa:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80193fc:	68fb      	ldr	r3, [r7, #12]
 80193fe:	f383 8810 	msr	PRIMASK, r3
}
 8019402:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8019404:	bf00      	nop
 8019406:	371c      	adds	r7, #28
 8019408:	46bd      	mov	sp, r7
 801940a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801940e:	4770      	bx	lr
 8019410:	20002fb0 	.word	0x20002fb0

08019414 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 8019414:	b580      	push	{r7, lr}
 8019416:	b090      	sub	sp, #64	@ 0x40
 8019418:	af00      	add	r7, sp, #0
 801941a:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 801941c:	4b73      	ldr	r3, [pc, #460]	@ (80195ec <UTIL_SEQ_Run+0x1d8>)
 801941e:	681b      	ldr	r3, [r3, #0]
 8019420:	62bb      	str	r3, [r7, #40]	@ 0x28
  SuperMask &= Mask_bm;
 8019422:	4b72      	ldr	r3, [pc, #456]	@ (80195ec <UTIL_SEQ_Run+0x1d8>)
 8019424:	681a      	ldr	r2, [r3, #0]
 8019426:	687b      	ldr	r3, [r7, #4]
 8019428:	4013      	ands	r3, r2
 801942a:	4a70      	ldr	r2, [pc, #448]	@ (80195ec <UTIL_SEQ_Run+0x1d8>)
 801942c:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 801942e:	4b70      	ldr	r3, [pc, #448]	@ (80195f0 <UTIL_SEQ_Run+0x1dc>)
 8019430:	681b      	ldr	r3, [r3, #0]
 8019432:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 8019434:	4b6f      	ldr	r3, [pc, #444]	@ (80195f4 <UTIL_SEQ_Run+0x1e0>)
 8019436:	681b      	ldr	r3, [r3, #0]
 8019438:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 801943a:	4b6f      	ldr	r3, [pc, #444]	@ (80195f8 <UTIL_SEQ_Run+0x1e4>)
 801943c:	681b      	ldr	r3, [r3, #0]
 801943e:	633b      	str	r3, [r7, #48]	@ 0x30
  local_evtwaited =  EvtWaited;
 8019440:	4b6e      	ldr	r3, [pc, #440]	@ (80195fc <UTIL_SEQ_Run+0x1e8>)
 8019442:	681b      	ldr	r3, [r3, #0]
 8019444:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8019446:	e08d      	b.n	8019564 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 8019448:	2300      	movs	r3, #0
 801944a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 801944c:	e002      	b.n	8019454 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 801944e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019450:	3301      	adds	r3, #1
 8019452:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8019454:	4a6a      	ldr	r2, [pc, #424]	@ (8019600 <UTIL_SEQ_Run+0x1ec>)
 8019456:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019458:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801945c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801945e:	401a      	ands	r2, r3
 8019460:	4b62      	ldr	r3, [pc, #392]	@ (80195ec <UTIL_SEQ_Run+0x1d8>)
 8019462:	681b      	ldr	r3, [r3, #0]
 8019464:	4013      	ands	r3, r2
 8019466:	2b00      	cmp	r3, #0
 8019468:	d0f1      	beq.n	801944e <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 801946a:	4a65      	ldr	r2, [pc, #404]	@ (8019600 <UTIL_SEQ_Run+0x1ec>)
 801946c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801946e:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8019472:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019474:	401a      	ands	r2, r3
 8019476:	4b5d      	ldr	r3, [pc, #372]	@ (80195ec <UTIL_SEQ_Run+0x1d8>)
 8019478:	681b      	ldr	r3, [r3, #0]
 801947a:	4013      	ands	r3, r2
 801947c:	627b      	str	r3, [r7, #36]	@ 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 801947e:	4a60      	ldr	r2, [pc, #384]	@ (8019600 <UTIL_SEQ_Run+0x1ec>)
 8019480:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019482:	00db      	lsls	r3, r3, #3
 8019484:	4413      	add	r3, r2
 8019486:	685a      	ldr	r2, [r3, #4]
 8019488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801948a:	4013      	ands	r3, r2
 801948c:	2b00      	cmp	r3, #0
 801948e:	d106      	bne.n	801949e <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 8019490:	4a5b      	ldr	r2, [pc, #364]	@ (8019600 <UTIL_SEQ_Run+0x1ec>)
 8019492:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019494:	00db      	lsls	r3, r3, #3
 8019496:	4413      	add	r3, r2
 8019498:	f04f 32ff 	mov.w	r2, #4294967295
 801949c:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 801949e:	4a58      	ldr	r2, [pc, #352]	@ (8019600 <UTIL_SEQ_Run+0x1ec>)
 80194a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80194a2:	00db      	lsls	r3, r3, #3
 80194a4:	4413      	add	r3, r2
 80194a6:	685a      	ldr	r2, [r3, #4]
 80194a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80194aa:	4013      	ands	r3, r2
 80194ac:	4618      	mov	r0, r3
 80194ae:	f000 f9b3 	bl	8019818 <SEQ_BitPosition>
 80194b2:	4603      	mov	r3, r0
 80194b4:	461a      	mov	r2, r3
 80194b6:	4b53      	ldr	r3, [pc, #332]	@ (8019604 <UTIL_SEQ_Run+0x1f0>)
 80194b8:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 80194ba:	4a51      	ldr	r2, [pc, #324]	@ (8019600 <UTIL_SEQ_Run+0x1ec>)
 80194bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80194be:	00db      	lsls	r3, r3, #3
 80194c0:	4413      	add	r3, r2
 80194c2:	685a      	ldr	r2, [r3, #4]
 80194c4:	4b4f      	ldr	r3, [pc, #316]	@ (8019604 <UTIL_SEQ_Run+0x1f0>)
 80194c6:	681b      	ldr	r3, [r3, #0]
 80194c8:	2101      	movs	r1, #1
 80194ca:	fa01 f303 	lsl.w	r3, r1, r3
 80194ce:	43db      	mvns	r3, r3
 80194d0:	401a      	ands	r2, r3
 80194d2:	494b      	ldr	r1, [pc, #300]	@ (8019600 <UTIL_SEQ_Run+0x1ec>)
 80194d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80194d6:	00db      	lsls	r3, r3, #3
 80194d8:	440b      	add	r3, r1
 80194da:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80194dc:	f3ef 8310 	mrs	r3, PRIMASK
 80194e0:	61bb      	str	r3, [r7, #24]
  return(result);
 80194e2:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80194e4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 80194e6:	b672      	cpsid	i
}
 80194e8:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 80194ea:	4b46      	ldr	r3, [pc, #280]	@ (8019604 <UTIL_SEQ_Run+0x1f0>)
 80194ec:	681b      	ldr	r3, [r3, #0]
 80194ee:	2201      	movs	r2, #1
 80194f0:	fa02 f303 	lsl.w	r3, r2, r3
 80194f4:	43da      	mvns	r2, r3
 80194f6:	4b3e      	ldr	r3, [pc, #248]	@ (80195f0 <UTIL_SEQ_Run+0x1dc>)
 80194f8:	681b      	ldr	r3, [r3, #0]
 80194fa:	4013      	ands	r3, r2
 80194fc:	4a3c      	ldr	r2, [pc, #240]	@ (80195f0 <UTIL_SEQ_Run+0x1dc>)
 80194fe:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8019500:	2301      	movs	r3, #1
 8019502:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8019504:	e013      	b.n	801952e <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 8019506:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019508:	3b01      	subs	r3, #1
 801950a:	4a3d      	ldr	r2, [pc, #244]	@ (8019600 <UTIL_SEQ_Run+0x1ec>)
 801950c:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8019510:	4b3c      	ldr	r3, [pc, #240]	@ (8019604 <UTIL_SEQ_Run+0x1f0>)
 8019512:	681b      	ldr	r3, [r3, #0]
 8019514:	2201      	movs	r2, #1
 8019516:	fa02 f303 	lsl.w	r3, r2, r3
 801951a:	43da      	mvns	r2, r3
 801951c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801951e:	3b01      	subs	r3, #1
 8019520:	400a      	ands	r2, r1
 8019522:	4937      	ldr	r1, [pc, #220]	@ (8019600 <UTIL_SEQ_Run+0x1ec>)
 8019524:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8019528:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801952a:	3b01      	subs	r3, #1
 801952c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801952e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019530:	2b00      	cmp	r3, #0
 8019532:	d1e8      	bne.n	8019506 <UTIL_SEQ_Run+0xf2>
 8019534:	6a3b      	ldr	r3, [r7, #32]
 8019536:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019538:	697b      	ldr	r3, [r7, #20]
 801953a:	f383 8810 	msr	PRIMASK, r3
}
 801953e:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 8019540:	4b30      	ldr	r3, [pc, #192]	@ (8019604 <UTIL_SEQ_Run+0x1f0>)
 8019542:	681b      	ldr	r3, [r3, #0]
 8019544:	4a30      	ldr	r2, [pc, #192]	@ (8019608 <UTIL_SEQ_Run+0x1f4>)
 8019546:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801954a:	4798      	blx	r3

    local_taskset = TaskSet;
 801954c:	4b28      	ldr	r3, [pc, #160]	@ (80195f0 <UTIL_SEQ_Run+0x1dc>)
 801954e:	681b      	ldr	r3, [r3, #0]
 8019550:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
 8019552:	4b28      	ldr	r3, [pc, #160]	@ (80195f4 <UTIL_SEQ_Run+0x1e0>)
 8019554:	681b      	ldr	r3, [r3, #0]
 8019556:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
 8019558:	4b27      	ldr	r3, [pc, #156]	@ (80195f8 <UTIL_SEQ_Run+0x1e4>)
 801955a:	681b      	ldr	r3, [r3, #0]
 801955c:	633b      	str	r3, [r7, #48]	@ 0x30
    local_evtwaited = EvtWaited;
 801955e:	4b27      	ldr	r3, [pc, #156]	@ (80195fc <UTIL_SEQ_Run+0x1e8>)
 8019560:	681b      	ldr	r3, [r3, #0]
 8019562:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8019564:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8019566:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019568:	401a      	ands	r2, r3
 801956a:	4b20      	ldr	r3, [pc, #128]	@ (80195ec <UTIL_SEQ_Run+0x1d8>)
 801956c:	681b      	ldr	r3, [r3, #0]
 801956e:	4013      	ands	r3, r2
 8019570:	2b00      	cmp	r3, #0
 8019572:	d005      	beq.n	8019580 <UTIL_SEQ_Run+0x16c>
 8019574:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8019576:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019578:	4013      	ands	r3, r2
 801957a:	2b00      	cmp	r3, #0
 801957c:	f43f af64 	beq.w	8019448 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 8019580:	4b20      	ldr	r3, [pc, #128]	@ (8019604 <UTIL_SEQ_Run+0x1f0>)
 8019582:	f04f 32ff 	mov.w	r2, #4294967295
 8019586:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 8019588:	f000 f938 	bl	80197fc <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801958c:	f3ef 8310 	mrs	r3, PRIMASK
 8019590:	613b      	str	r3, [r7, #16]
  return(result);
 8019592:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 8019594:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8019596:	b672      	cpsid	i
}
 8019598:	bf00      	nop
  local_taskset = TaskSet;
 801959a:	4b15      	ldr	r3, [pc, #84]	@ (80195f0 <UTIL_SEQ_Run+0x1dc>)
 801959c:	681b      	ldr	r3, [r3, #0]
 801959e:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 80195a0:	4b14      	ldr	r3, [pc, #80]	@ (80195f4 <UTIL_SEQ_Run+0x1e0>)
 80195a2:	681b      	ldr	r3, [r3, #0]
 80195a4:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 80195a6:	4b14      	ldr	r3, [pc, #80]	@ (80195f8 <UTIL_SEQ_Run+0x1e4>)
 80195a8:	681b      	ldr	r3, [r3, #0]
 80195aa:	633b      	str	r3, [r7, #48]	@ 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 80195ac:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80195ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80195b0:	401a      	ands	r2, r3
 80195b2:	4b0e      	ldr	r3, [pc, #56]	@ (80195ec <UTIL_SEQ_Run+0x1d8>)
 80195b4:	681b      	ldr	r3, [r3, #0]
 80195b6:	4013      	ands	r3, r2
 80195b8:	2b00      	cmp	r3, #0
 80195ba:	d107      	bne.n	80195cc <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 80195bc:	4b0f      	ldr	r3, [pc, #60]	@ (80195fc <UTIL_SEQ_Run+0x1e8>)
 80195be:	681a      	ldr	r2, [r3, #0]
 80195c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80195c2:	4013      	ands	r3, r2
 80195c4:	2b00      	cmp	r3, #0
 80195c6:	d101      	bne.n	80195cc <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 80195c8:	f7e8 f8de 	bl	8001788 <UTIL_SEQ_Idle>
 80195cc:	69fb      	ldr	r3, [r7, #28]
 80195ce:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80195d0:	68fb      	ldr	r3, [r7, #12]
 80195d2:	f383 8810 	msr	PRIMASK, r3
}
 80195d6:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 80195d8:	f000 f917 	bl	801980a <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 80195dc:	4a03      	ldr	r2, [pc, #12]	@ (80195ec <UTIL_SEQ_Run+0x1d8>)
 80195de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80195e0:	6013      	str	r3, [r2, #0]

  return;
 80195e2:	bf00      	nop
}
 80195e4:	3740      	adds	r7, #64	@ 0x40
 80195e6:	46bd      	mov	sp, r7
 80195e8:	bd80      	pop	{r7, pc}
 80195ea:	bf00      	nop
 80195ec:	20000144 	.word	0x20000144
 80195f0:	20002fb4 	.word	0x20002fb4
 80195f4:	20002fb8 	.word	0x20002fb8
 80195f8:	20000140 	.word	0x20000140
 80195fc:	20002fbc 	.word	0x20002fbc
 8019600:	20003044 	.word	0x20003044
 8019604:	20002fc0 	.word	0x20002fc0
 8019608:	20002fc4 	.word	0x20002fc4

0801960c <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 801960c:	b580      	push	{r7, lr}
 801960e:	b088      	sub	sp, #32
 8019610:	af00      	add	r7, sp, #0
 8019612:	60f8      	str	r0, [r7, #12]
 8019614:	60b9      	str	r1, [r7, #8]
 8019616:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019618:	f3ef 8310 	mrs	r3, PRIMASK
 801961c:	617b      	str	r3, [r7, #20]
  return(result);
 801961e:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 8019620:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8019622:	b672      	cpsid	i
}
 8019624:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 8019626:	68f8      	ldr	r0, [r7, #12]
 8019628:	f000 f8f6 	bl	8019818 <SEQ_BitPosition>
 801962c:	4603      	mov	r3, r0
 801962e:	4619      	mov	r1, r3
 8019630:	4a06      	ldr	r2, [pc, #24]	@ (801964c <UTIL_SEQ_RegTask+0x40>)
 8019632:	687b      	ldr	r3, [r7, #4]
 8019634:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8019638:	69fb      	ldr	r3, [r7, #28]
 801963a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801963c:	69bb      	ldr	r3, [r7, #24]
 801963e:	f383 8810 	msr	PRIMASK, r3
}
 8019642:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 8019644:	bf00      	nop
}
 8019646:	3720      	adds	r7, #32
 8019648:	46bd      	mov	sp, r7
 801964a:	bd80      	pop	{r7, pc}
 801964c:	20002fc4 	.word	0x20002fc4

08019650 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 8019650:	b480      	push	{r7}
 8019652:	b087      	sub	sp, #28
 8019654:	af00      	add	r7, sp, #0
 8019656:	6078      	str	r0, [r7, #4]
 8019658:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801965a:	f3ef 8310 	mrs	r3, PRIMASK
 801965e:	60fb      	str	r3, [r7, #12]
  return(result);
 8019660:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8019662:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8019664:	b672      	cpsid	i
}
 8019666:	bf00      	nop

  TaskSet |= TaskId_bm;
 8019668:	4b0d      	ldr	r3, [pc, #52]	@ (80196a0 <UTIL_SEQ_SetTask+0x50>)
 801966a:	681a      	ldr	r2, [r3, #0]
 801966c:	687b      	ldr	r3, [r7, #4]
 801966e:	4313      	orrs	r3, r2
 8019670:	4a0b      	ldr	r2, [pc, #44]	@ (80196a0 <UTIL_SEQ_SetTask+0x50>)
 8019672:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 8019674:	4a0b      	ldr	r2, [pc, #44]	@ (80196a4 <UTIL_SEQ_SetTask+0x54>)
 8019676:	683b      	ldr	r3, [r7, #0]
 8019678:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801967c:	687b      	ldr	r3, [r7, #4]
 801967e:	431a      	orrs	r2, r3
 8019680:	4908      	ldr	r1, [pc, #32]	@ (80196a4 <UTIL_SEQ_SetTask+0x54>)
 8019682:	683b      	ldr	r3, [r7, #0]
 8019684:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 8019688:	697b      	ldr	r3, [r7, #20]
 801968a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801968c:	693b      	ldr	r3, [r7, #16]
 801968e:	f383 8810 	msr	PRIMASK, r3
}
 8019692:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8019694:	bf00      	nop
}
 8019696:	371c      	adds	r7, #28
 8019698:	46bd      	mov	sp, r7
 801969a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801969e:	4770      	bx	lr
 80196a0:	20002fb4 	.word	0x20002fb4
 80196a4:	20003044 	.word	0x20003044

080196a8 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 80196a8:	b480      	push	{r7}
 80196aa:	b087      	sub	sp, #28
 80196ac:	af00      	add	r7, sp, #0
 80196ae:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80196b0:	f3ef 8310 	mrs	r3, PRIMASK
 80196b4:	60fb      	str	r3, [r7, #12]
  return(result);
 80196b6:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80196b8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80196ba:	b672      	cpsid	i
}
 80196bc:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 80196be:	687b      	ldr	r3, [r7, #4]
 80196c0:	43da      	mvns	r2, r3
 80196c2:	4b08      	ldr	r3, [pc, #32]	@ (80196e4 <UTIL_SEQ_PauseTask+0x3c>)
 80196c4:	681b      	ldr	r3, [r3, #0]
 80196c6:	4013      	ands	r3, r2
 80196c8:	4a06      	ldr	r2, [pc, #24]	@ (80196e4 <UTIL_SEQ_PauseTask+0x3c>)
 80196ca:	6013      	str	r3, [r2, #0]
 80196cc:	697b      	ldr	r3, [r7, #20]
 80196ce:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80196d0:	693b      	ldr	r3, [r7, #16]
 80196d2:	f383 8810 	msr	PRIMASK, r3
}
 80196d6:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 80196d8:	bf00      	nop
}
 80196da:	371c      	adds	r7, #28
 80196dc:	46bd      	mov	sp, r7
 80196de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80196e2:	4770      	bx	lr
 80196e4:	20000140 	.word	0x20000140

080196e8 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 80196e8:	b480      	push	{r7}
 80196ea:	b087      	sub	sp, #28
 80196ec:	af00      	add	r7, sp, #0
 80196ee:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80196f0:	f3ef 8310 	mrs	r3, PRIMASK
 80196f4:	60fb      	str	r3, [r7, #12]
  return(result);
 80196f6:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80196f8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80196fa:	b672      	cpsid	i
}
 80196fc:	bf00      	nop

  TaskMask |= TaskId_bm;
 80196fe:	4b09      	ldr	r3, [pc, #36]	@ (8019724 <UTIL_SEQ_ResumeTask+0x3c>)
 8019700:	681a      	ldr	r2, [r3, #0]
 8019702:	687b      	ldr	r3, [r7, #4]
 8019704:	4313      	orrs	r3, r2
 8019706:	4a07      	ldr	r2, [pc, #28]	@ (8019724 <UTIL_SEQ_ResumeTask+0x3c>)
 8019708:	6013      	str	r3, [r2, #0]
 801970a:	697b      	ldr	r3, [r7, #20]
 801970c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801970e:	693b      	ldr	r3, [r7, #16]
 8019710:	f383 8810 	msr	PRIMASK, r3
}
 8019714:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8019716:	bf00      	nop
}
 8019718:	371c      	adds	r7, #28
 801971a:	46bd      	mov	sp, r7
 801971c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019720:	4770      	bx	lr
 8019722:	bf00      	nop
 8019724:	20000140 	.word	0x20000140

08019728 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 8019728:	b480      	push	{r7}
 801972a:	b087      	sub	sp, #28
 801972c:	af00      	add	r7, sp, #0
 801972e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019730:	f3ef 8310 	mrs	r3, PRIMASK
 8019734:	60fb      	str	r3, [r7, #12]
  return(result);
 8019736:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8019738:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801973a:	b672      	cpsid	i
}
 801973c:	bf00      	nop

  EvtSet |= EvtId_bm;
 801973e:	4b09      	ldr	r3, [pc, #36]	@ (8019764 <UTIL_SEQ_SetEvt+0x3c>)
 8019740:	681a      	ldr	r2, [r3, #0]
 8019742:	687b      	ldr	r3, [r7, #4]
 8019744:	4313      	orrs	r3, r2
 8019746:	4a07      	ldr	r2, [pc, #28]	@ (8019764 <UTIL_SEQ_SetEvt+0x3c>)
 8019748:	6013      	str	r3, [r2, #0]
 801974a:	697b      	ldr	r3, [r7, #20]
 801974c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801974e:	693b      	ldr	r3, [r7, #16]
 8019750:	f383 8810 	msr	PRIMASK, r3
}
 8019754:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8019756:	bf00      	nop
}
 8019758:	371c      	adds	r7, #28
 801975a:	46bd      	mov	sp, r7
 801975c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019760:	4770      	bx	lr
 8019762:	bf00      	nop
 8019764:	20002fb8 	.word	0x20002fb8

08019768 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 8019768:	b580      	push	{r7, lr}
 801976a:	b088      	sub	sp, #32
 801976c:	af00      	add	r7, sp, #0
 801976e:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 8019770:	4b1f      	ldr	r3, [pc, #124]	@ (80197f0 <UTIL_SEQ_WaitEvt+0x88>)
 8019772:	681b      	ldr	r3, [r3, #0]
 8019774:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 8019776:	4b1e      	ldr	r3, [pc, #120]	@ (80197f0 <UTIL_SEQ_WaitEvt+0x88>)
 8019778:	681b      	ldr	r3, [r3, #0]
 801977a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801977e:	d102      	bne.n	8019786 <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 8019780:	2300      	movs	r3, #0
 8019782:	61fb      	str	r3, [r7, #28]
 8019784:	e005      	b.n	8019792 <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 8019786:	4b1a      	ldr	r3, [pc, #104]	@ (80197f0 <UTIL_SEQ_WaitEvt+0x88>)
 8019788:	681b      	ldr	r3, [r3, #0]
 801978a:	2201      	movs	r2, #1
 801978c:	fa02 f303 	lsl.w	r3, r2, r3
 8019790:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 8019792:	4b18      	ldr	r3, [pc, #96]	@ (80197f4 <UTIL_SEQ_WaitEvt+0x8c>)
 8019794:	681b      	ldr	r3, [r3, #0]
 8019796:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 8019798:	4a16      	ldr	r2, [pc, #88]	@ (80197f4 <UTIL_SEQ_WaitEvt+0x8c>)
 801979a:	687b      	ldr	r3, [r7, #4]
 801979c:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 801979e:	e003      	b.n	80197a8 <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 80197a0:	6879      	ldr	r1, [r7, #4]
 80197a2:	69f8      	ldr	r0, [r7, #28]
 80197a4:	f7e7 fff7 	bl	8001796 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 80197a8:	4b13      	ldr	r3, [pc, #76]	@ (80197f8 <UTIL_SEQ_WaitEvt+0x90>)
 80197aa:	681a      	ldr	r2, [r3, #0]
 80197ac:	687b      	ldr	r3, [r7, #4]
 80197ae:	4013      	ands	r3, r2
 80197b0:	2b00      	cmp	r3, #0
 80197b2:	d0f5      	beq.n	80197a0 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 80197b4:	4a0e      	ldr	r2, [pc, #56]	@ (80197f0 <UTIL_SEQ_WaitEvt+0x88>)
 80197b6:	69bb      	ldr	r3, [r7, #24]
 80197b8:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80197ba:	f3ef 8310 	mrs	r3, PRIMASK
 80197be:	60bb      	str	r3, [r7, #8]
  return(result);
 80197c0:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80197c2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80197c4:	b672      	cpsid	i
}
 80197c6:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 80197c8:	687b      	ldr	r3, [r7, #4]
 80197ca:	43da      	mvns	r2, r3
 80197cc:	4b0a      	ldr	r3, [pc, #40]	@ (80197f8 <UTIL_SEQ_WaitEvt+0x90>)
 80197ce:	681b      	ldr	r3, [r3, #0]
 80197d0:	4013      	ands	r3, r2
 80197d2:	4a09      	ldr	r2, [pc, #36]	@ (80197f8 <UTIL_SEQ_WaitEvt+0x90>)
 80197d4:	6013      	str	r3, [r2, #0]
 80197d6:	693b      	ldr	r3, [r7, #16]
 80197d8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80197da:	68fb      	ldr	r3, [r7, #12]
 80197dc:	f383 8810 	msr	PRIMASK, r3
}
 80197e0:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 80197e2:	4a04      	ldr	r2, [pc, #16]	@ (80197f4 <UTIL_SEQ_WaitEvt+0x8c>)
 80197e4:	697b      	ldr	r3, [r7, #20]
 80197e6:	6013      	str	r3, [r2, #0]
  return;
 80197e8:	bf00      	nop
}
 80197ea:	3720      	adds	r7, #32
 80197ec:	46bd      	mov	sp, r7
 80197ee:	bd80      	pop	{r7, pc}
 80197f0:	20002fc0 	.word	0x20002fc0
 80197f4:	20002fbc 	.word	0x20002fbc
 80197f8:	20002fb8 	.word	0x20002fb8

080197fc <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 80197fc:	b480      	push	{r7}
 80197fe:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8019800:	bf00      	nop
}
 8019802:	46bd      	mov	sp, r7
 8019804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019808:	4770      	bx	lr

0801980a <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 801980a:	b480      	push	{r7}
 801980c:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801980e:	bf00      	nop
}
 8019810:	46bd      	mov	sp, r7
 8019812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019816:	4770      	bx	lr

08019818 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 8019818:	b480      	push	{r7}
 801981a:	b085      	sub	sp, #20
 801981c:	af00      	add	r7, sp, #0
 801981e:	6078      	str	r0, [r7, #4]
 8019820:	687b      	ldr	r3, [r7, #4]
 8019822:	60fb      	str	r3, [r7, #12]
  if (value == 0U)
 8019824:	68fb      	ldr	r3, [r7, #12]
 8019826:	2b00      	cmp	r3, #0
 8019828:	d101      	bne.n	801982e <SEQ_BitPosition+0x16>
    return 32U;
 801982a:	2320      	movs	r3, #32
 801982c:	e003      	b.n	8019836 <SEQ_BitPosition+0x1e>
  return __builtin_clz(value);
 801982e:	68fb      	ldr	r3, [r7, #12]
 8019830:	fab3 f383 	clz	r3, r3
 8019834:	b2db      	uxtb	r3, r3
  return (uint8_t)(31 -__CLZ( Value ));
 8019836:	f1c3 031f 	rsb	r3, r3, #31
 801983a:	b2db      	uxtb	r3, r3
}
 801983c:	4618      	mov	r0, r3
 801983e:	3714      	adds	r7, #20
 8019840:	46bd      	mov	sp, r7
 8019842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019846:	4770      	bx	lr

08019848 <atoi>:
 8019848:	220a      	movs	r2, #10
 801984a:	2100      	movs	r1, #0
 801984c:	f000 bfa6 	b.w	801a79c <strtol>

08019850 <malloc>:
 8019850:	4b02      	ldr	r3, [pc, #8]	@ (801985c <malloc+0xc>)
 8019852:	4601      	mov	r1, r0
 8019854:	6818      	ldr	r0, [r3, #0]
 8019856:	f000 b82d 	b.w	80198b4 <_malloc_r>
 801985a:	bf00      	nop
 801985c:	200002c0 	.word	0x200002c0

08019860 <free>:
 8019860:	4b02      	ldr	r3, [pc, #8]	@ (801986c <free+0xc>)
 8019862:	4601      	mov	r1, r0
 8019864:	6818      	ldr	r0, [r3, #0]
 8019866:	f002 bf0b 	b.w	801c680 <_free_r>
 801986a:	bf00      	nop
 801986c:	200002c0 	.word	0x200002c0

08019870 <sbrk_aligned>:
 8019870:	b570      	push	{r4, r5, r6, lr}
 8019872:	4e0f      	ldr	r6, [pc, #60]	@ (80198b0 <sbrk_aligned+0x40>)
 8019874:	460c      	mov	r4, r1
 8019876:	6831      	ldr	r1, [r6, #0]
 8019878:	4605      	mov	r5, r0
 801987a:	b911      	cbnz	r1, 8019882 <sbrk_aligned+0x12>
 801987c:	f002 f822 	bl	801b8c4 <_sbrk_r>
 8019880:	6030      	str	r0, [r6, #0]
 8019882:	4621      	mov	r1, r4
 8019884:	4628      	mov	r0, r5
 8019886:	f002 f81d 	bl	801b8c4 <_sbrk_r>
 801988a:	1c43      	adds	r3, r0, #1
 801988c:	d103      	bne.n	8019896 <sbrk_aligned+0x26>
 801988e:	f04f 34ff 	mov.w	r4, #4294967295
 8019892:	4620      	mov	r0, r4
 8019894:	bd70      	pop	{r4, r5, r6, pc}
 8019896:	1cc4      	adds	r4, r0, #3
 8019898:	f024 0403 	bic.w	r4, r4, #3
 801989c:	42a0      	cmp	r0, r4
 801989e:	d0f8      	beq.n	8019892 <sbrk_aligned+0x22>
 80198a0:	1a21      	subs	r1, r4, r0
 80198a2:	4628      	mov	r0, r5
 80198a4:	f002 f80e 	bl	801b8c4 <_sbrk_r>
 80198a8:	3001      	adds	r0, #1
 80198aa:	d1f2      	bne.n	8019892 <sbrk_aligned+0x22>
 80198ac:	e7ef      	b.n	801988e <sbrk_aligned+0x1e>
 80198ae:	bf00      	nop
 80198b0:	2000304c 	.word	0x2000304c

080198b4 <_malloc_r>:
 80198b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80198b8:	1ccd      	adds	r5, r1, #3
 80198ba:	f025 0503 	bic.w	r5, r5, #3
 80198be:	3508      	adds	r5, #8
 80198c0:	2d0c      	cmp	r5, #12
 80198c2:	bf38      	it	cc
 80198c4:	250c      	movcc	r5, #12
 80198c6:	2d00      	cmp	r5, #0
 80198c8:	4606      	mov	r6, r0
 80198ca:	db01      	blt.n	80198d0 <_malloc_r+0x1c>
 80198cc:	42a9      	cmp	r1, r5
 80198ce:	d904      	bls.n	80198da <_malloc_r+0x26>
 80198d0:	230c      	movs	r3, #12
 80198d2:	6033      	str	r3, [r6, #0]
 80198d4:	2000      	movs	r0, #0
 80198d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80198da:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80199b0 <_malloc_r+0xfc>
 80198de:	f000 f869 	bl	80199b4 <__malloc_lock>
 80198e2:	f8d8 3000 	ldr.w	r3, [r8]
 80198e6:	461c      	mov	r4, r3
 80198e8:	bb44      	cbnz	r4, 801993c <_malloc_r+0x88>
 80198ea:	4629      	mov	r1, r5
 80198ec:	4630      	mov	r0, r6
 80198ee:	f7ff ffbf 	bl	8019870 <sbrk_aligned>
 80198f2:	1c43      	adds	r3, r0, #1
 80198f4:	4604      	mov	r4, r0
 80198f6:	d158      	bne.n	80199aa <_malloc_r+0xf6>
 80198f8:	f8d8 4000 	ldr.w	r4, [r8]
 80198fc:	4627      	mov	r7, r4
 80198fe:	2f00      	cmp	r7, #0
 8019900:	d143      	bne.n	801998a <_malloc_r+0xd6>
 8019902:	2c00      	cmp	r4, #0
 8019904:	d04b      	beq.n	801999e <_malloc_r+0xea>
 8019906:	6823      	ldr	r3, [r4, #0]
 8019908:	4639      	mov	r1, r7
 801990a:	4630      	mov	r0, r6
 801990c:	eb04 0903 	add.w	r9, r4, r3
 8019910:	f001 ffd8 	bl	801b8c4 <_sbrk_r>
 8019914:	4581      	cmp	r9, r0
 8019916:	d142      	bne.n	801999e <_malloc_r+0xea>
 8019918:	6821      	ldr	r1, [r4, #0]
 801991a:	1a6d      	subs	r5, r5, r1
 801991c:	4629      	mov	r1, r5
 801991e:	4630      	mov	r0, r6
 8019920:	f7ff ffa6 	bl	8019870 <sbrk_aligned>
 8019924:	3001      	adds	r0, #1
 8019926:	d03a      	beq.n	801999e <_malloc_r+0xea>
 8019928:	6823      	ldr	r3, [r4, #0]
 801992a:	442b      	add	r3, r5
 801992c:	6023      	str	r3, [r4, #0]
 801992e:	f8d8 3000 	ldr.w	r3, [r8]
 8019932:	685a      	ldr	r2, [r3, #4]
 8019934:	bb62      	cbnz	r2, 8019990 <_malloc_r+0xdc>
 8019936:	f8c8 7000 	str.w	r7, [r8]
 801993a:	e00f      	b.n	801995c <_malloc_r+0xa8>
 801993c:	6822      	ldr	r2, [r4, #0]
 801993e:	1b52      	subs	r2, r2, r5
 8019940:	d420      	bmi.n	8019984 <_malloc_r+0xd0>
 8019942:	2a0b      	cmp	r2, #11
 8019944:	d917      	bls.n	8019976 <_malloc_r+0xc2>
 8019946:	1961      	adds	r1, r4, r5
 8019948:	42a3      	cmp	r3, r4
 801994a:	6025      	str	r5, [r4, #0]
 801994c:	bf18      	it	ne
 801994e:	6059      	strne	r1, [r3, #4]
 8019950:	6863      	ldr	r3, [r4, #4]
 8019952:	bf08      	it	eq
 8019954:	f8c8 1000 	streq.w	r1, [r8]
 8019958:	5162      	str	r2, [r4, r5]
 801995a:	604b      	str	r3, [r1, #4]
 801995c:	4630      	mov	r0, r6
 801995e:	f000 f82f 	bl	80199c0 <__malloc_unlock>
 8019962:	f104 000b 	add.w	r0, r4, #11
 8019966:	1d23      	adds	r3, r4, #4
 8019968:	f020 0007 	bic.w	r0, r0, #7
 801996c:	1ac2      	subs	r2, r0, r3
 801996e:	bf1c      	itt	ne
 8019970:	1a1b      	subne	r3, r3, r0
 8019972:	50a3      	strne	r3, [r4, r2]
 8019974:	e7af      	b.n	80198d6 <_malloc_r+0x22>
 8019976:	6862      	ldr	r2, [r4, #4]
 8019978:	42a3      	cmp	r3, r4
 801997a:	bf0c      	ite	eq
 801997c:	f8c8 2000 	streq.w	r2, [r8]
 8019980:	605a      	strne	r2, [r3, #4]
 8019982:	e7eb      	b.n	801995c <_malloc_r+0xa8>
 8019984:	4623      	mov	r3, r4
 8019986:	6864      	ldr	r4, [r4, #4]
 8019988:	e7ae      	b.n	80198e8 <_malloc_r+0x34>
 801998a:	463c      	mov	r4, r7
 801998c:	687f      	ldr	r7, [r7, #4]
 801998e:	e7b6      	b.n	80198fe <_malloc_r+0x4a>
 8019990:	461a      	mov	r2, r3
 8019992:	685b      	ldr	r3, [r3, #4]
 8019994:	42a3      	cmp	r3, r4
 8019996:	d1fb      	bne.n	8019990 <_malloc_r+0xdc>
 8019998:	2300      	movs	r3, #0
 801999a:	6053      	str	r3, [r2, #4]
 801999c:	e7de      	b.n	801995c <_malloc_r+0xa8>
 801999e:	230c      	movs	r3, #12
 80199a0:	6033      	str	r3, [r6, #0]
 80199a2:	4630      	mov	r0, r6
 80199a4:	f000 f80c 	bl	80199c0 <__malloc_unlock>
 80199a8:	e794      	b.n	80198d4 <_malloc_r+0x20>
 80199aa:	6005      	str	r5, [r0, #0]
 80199ac:	e7d6      	b.n	801995c <_malloc_r+0xa8>
 80199ae:	bf00      	nop
 80199b0:	20003050 	.word	0x20003050

080199b4 <__malloc_lock>:
 80199b4:	4801      	ldr	r0, [pc, #4]	@ (80199bc <__malloc_lock+0x8>)
 80199b6:	f001 bfd2 	b.w	801b95e <__retarget_lock_acquire_recursive>
 80199ba:	bf00      	nop
 80199bc:	20003194 	.word	0x20003194

080199c0 <__malloc_unlock>:
 80199c0:	4801      	ldr	r0, [pc, #4]	@ (80199c8 <__malloc_unlock+0x8>)
 80199c2:	f001 bfcd 	b.w	801b960 <__retarget_lock_release_recursive>
 80199c6:	bf00      	nop
 80199c8:	20003194 	.word	0x20003194

080199cc <sulp>:
 80199cc:	b570      	push	{r4, r5, r6, lr}
 80199ce:	4604      	mov	r4, r0
 80199d0:	460d      	mov	r5, r1
 80199d2:	ec45 4b10 	vmov	d0, r4, r5
 80199d6:	4616      	mov	r6, r2
 80199d8:	f003 fd5c 	bl	801d494 <__ulp>
 80199dc:	ec51 0b10 	vmov	r0, r1, d0
 80199e0:	b17e      	cbz	r6, 8019a02 <sulp+0x36>
 80199e2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80199e6:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80199ea:	2b00      	cmp	r3, #0
 80199ec:	dd09      	ble.n	8019a02 <sulp+0x36>
 80199ee:	051b      	lsls	r3, r3, #20
 80199f0:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80199f4:	2400      	movs	r4, #0
 80199f6:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80199fa:	4622      	mov	r2, r4
 80199fc:	462b      	mov	r3, r5
 80199fe:	f7e6 fdd3 	bl	80005a8 <__aeabi_dmul>
 8019a02:	ec41 0b10 	vmov	d0, r0, r1
 8019a06:	bd70      	pop	{r4, r5, r6, pc}

08019a08 <_strtod_l>:
 8019a08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019a0c:	b09f      	sub	sp, #124	@ 0x7c
 8019a0e:	460c      	mov	r4, r1
 8019a10:	9217      	str	r2, [sp, #92]	@ 0x5c
 8019a12:	2200      	movs	r2, #0
 8019a14:	921a      	str	r2, [sp, #104]	@ 0x68
 8019a16:	9005      	str	r0, [sp, #20]
 8019a18:	f04f 0a00 	mov.w	sl, #0
 8019a1c:	f04f 0b00 	mov.w	fp, #0
 8019a20:	460a      	mov	r2, r1
 8019a22:	9219      	str	r2, [sp, #100]	@ 0x64
 8019a24:	7811      	ldrb	r1, [r2, #0]
 8019a26:	292b      	cmp	r1, #43	@ 0x2b
 8019a28:	d04a      	beq.n	8019ac0 <_strtod_l+0xb8>
 8019a2a:	d838      	bhi.n	8019a9e <_strtod_l+0x96>
 8019a2c:	290d      	cmp	r1, #13
 8019a2e:	d832      	bhi.n	8019a96 <_strtod_l+0x8e>
 8019a30:	2908      	cmp	r1, #8
 8019a32:	d832      	bhi.n	8019a9a <_strtod_l+0x92>
 8019a34:	2900      	cmp	r1, #0
 8019a36:	d03b      	beq.n	8019ab0 <_strtod_l+0xa8>
 8019a38:	2200      	movs	r2, #0
 8019a3a:	920b      	str	r2, [sp, #44]	@ 0x2c
 8019a3c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8019a3e:	782a      	ldrb	r2, [r5, #0]
 8019a40:	2a30      	cmp	r2, #48	@ 0x30
 8019a42:	f040 80b3 	bne.w	8019bac <_strtod_l+0x1a4>
 8019a46:	786a      	ldrb	r2, [r5, #1]
 8019a48:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8019a4c:	2a58      	cmp	r2, #88	@ 0x58
 8019a4e:	d16e      	bne.n	8019b2e <_strtod_l+0x126>
 8019a50:	9302      	str	r3, [sp, #8]
 8019a52:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8019a54:	9301      	str	r3, [sp, #4]
 8019a56:	ab1a      	add	r3, sp, #104	@ 0x68
 8019a58:	9300      	str	r3, [sp, #0]
 8019a5a:	4a8e      	ldr	r2, [pc, #568]	@ (8019c94 <_strtod_l+0x28c>)
 8019a5c:	9805      	ldr	r0, [sp, #20]
 8019a5e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8019a60:	a919      	add	r1, sp, #100	@ 0x64
 8019a62:	f002 febf 	bl	801c7e4 <__gethex>
 8019a66:	f010 060f 	ands.w	r6, r0, #15
 8019a6a:	4604      	mov	r4, r0
 8019a6c:	d005      	beq.n	8019a7a <_strtod_l+0x72>
 8019a6e:	2e06      	cmp	r6, #6
 8019a70:	d128      	bne.n	8019ac4 <_strtod_l+0xbc>
 8019a72:	3501      	adds	r5, #1
 8019a74:	2300      	movs	r3, #0
 8019a76:	9519      	str	r5, [sp, #100]	@ 0x64
 8019a78:	930b      	str	r3, [sp, #44]	@ 0x2c
 8019a7a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8019a7c:	2b00      	cmp	r3, #0
 8019a7e:	f040 858e 	bne.w	801a59e <_strtod_l+0xb96>
 8019a82:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8019a84:	b1cb      	cbz	r3, 8019aba <_strtod_l+0xb2>
 8019a86:	4652      	mov	r2, sl
 8019a88:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8019a8c:	ec43 2b10 	vmov	d0, r2, r3
 8019a90:	b01f      	add	sp, #124	@ 0x7c
 8019a92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019a96:	2920      	cmp	r1, #32
 8019a98:	d1ce      	bne.n	8019a38 <_strtod_l+0x30>
 8019a9a:	3201      	adds	r2, #1
 8019a9c:	e7c1      	b.n	8019a22 <_strtod_l+0x1a>
 8019a9e:	292d      	cmp	r1, #45	@ 0x2d
 8019aa0:	d1ca      	bne.n	8019a38 <_strtod_l+0x30>
 8019aa2:	2101      	movs	r1, #1
 8019aa4:	910b      	str	r1, [sp, #44]	@ 0x2c
 8019aa6:	1c51      	adds	r1, r2, #1
 8019aa8:	9119      	str	r1, [sp, #100]	@ 0x64
 8019aaa:	7852      	ldrb	r2, [r2, #1]
 8019aac:	2a00      	cmp	r2, #0
 8019aae:	d1c5      	bne.n	8019a3c <_strtod_l+0x34>
 8019ab0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8019ab2:	9419      	str	r4, [sp, #100]	@ 0x64
 8019ab4:	2b00      	cmp	r3, #0
 8019ab6:	f040 8570 	bne.w	801a59a <_strtod_l+0xb92>
 8019aba:	4652      	mov	r2, sl
 8019abc:	465b      	mov	r3, fp
 8019abe:	e7e5      	b.n	8019a8c <_strtod_l+0x84>
 8019ac0:	2100      	movs	r1, #0
 8019ac2:	e7ef      	b.n	8019aa4 <_strtod_l+0x9c>
 8019ac4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8019ac6:	b13a      	cbz	r2, 8019ad8 <_strtod_l+0xd0>
 8019ac8:	2135      	movs	r1, #53	@ 0x35
 8019aca:	a81c      	add	r0, sp, #112	@ 0x70
 8019acc:	f003 fddc 	bl	801d688 <__copybits>
 8019ad0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8019ad2:	9805      	ldr	r0, [sp, #20]
 8019ad4:	f003 f9aa 	bl	801ce2c <_Bfree>
 8019ad8:	3e01      	subs	r6, #1
 8019ada:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8019adc:	2e04      	cmp	r6, #4
 8019ade:	d806      	bhi.n	8019aee <_strtod_l+0xe6>
 8019ae0:	e8df f006 	tbb	[pc, r6]
 8019ae4:	201d0314 	.word	0x201d0314
 8019ae8:	14          	.byte	0x14
 8019ae9:	00          	.byte	0x00
 8019aea:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8019aee:	05e1      	lsls	r1, r4, #23
 8019af0:	bf48      	it	mi
 8019af2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8019af6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8019afa:	0d1b      	lsrs	r3, r3, #20
 8019afc:	051b      	lsls	r3, r3, #20
 8019afe:	2b00      	cmp	r3, #0
 8019b00:	d1bb      	bne.n	8019a7a <_strtod_l+0x72>
 8019b02:	f001 ff01 	bl	801b908 <__errno>
 8019b06:	2322      	movs	r3, #34	@ 0x22
 8019b08:	6003      	str	r3, [r0, #0]
 8019b0a:	e7b6      	b.n	8019a7a <_strtod_l+0x72>
 8019b0c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8019b10:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8019b14:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8019b18:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8019b1c:	e7e7      	b.n	8019aee <_strtod_l+0xe6>
 8019b1e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8019c9c <_strtod_l+0x294>
 8019b22:	e7e4      	b.n	8019aee <_strtod_l+0xe6>
 8019b24:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8019b28:	f04f 3aff 	mov.w	sl, #4294967295
 8019b2c:	e7df      	b.n	8019aee <_strtod_l+0xe6>
 8019b2e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8019b30:	1c5a      	adds	r2, r3, #1
 8019b32:	9219      	str	r2, [sp, #100]	@ 0x64
 8019b34:	785b      	ldrb	r3, [r3, #1]
 8019b36:	2b30      	cmp	r3, #48	@ 0x30
 8019b38:	d0f9      	beq.n	8019b2e <_strtod_l+0x126>
 8019b3a:	2b00      	cmp	r3, #0
 8019b3c:	d09d      	beq.n	8019a7a <_strtod_l+0x72>
 8019b3e:	2301      	movs	r3, #1
 8019b40:	9309      	str	r3, [sp, #36]	@ 0x24
 8019b42:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8019b44:	930c      	str	r3, [sp, #48]	@ 0x30
 8019b46:	2300      	movs	r3, #0
 8019b48:	9308      	str	r3, [sp, #32]
 8019b4a:	930a      	str	r3, [sp, #40]	@ 0x28
 8019b4c:	461f      	mov	r7, r3
 8019b4e:	220a      	movs	r2, #10
 8019b50:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8019b52:	7805      	ldrb	r5, [r0, #0]
 8019b54:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8019b58:	b2d9      	uxtb	r1, r3
 8019b5a:	2909      	cmp	r1, #9
 8019b5c:	d928      	bls.n	8019bb0 <_strtod_l+0x1a8>
 8019b5e:	494e      	ldr	r1, [pc, #312]	@ (8019c98 <_strtod_l+0x290>)
 8019b60:	2201      	movs	r2, #1
 8019b62:	f001 fdf2 	bl	801b74a <strncmp>
 8019b66:	2800      	cmp	r0, #0
 8019b68:	d032      	beq.n	8019bd0 <_strtod_l+0x1c8>
 8019b6a:	2000      	movs	r0, #0
 8019b6c:	462a      	mov	r2, r5
 8019b6e:	4681      	mov	r9, r0
 8019b70:	463d      	mov	r5, r7
 8019b72:	4603      	mov	r3, r0
 8019b74:	2a65      	cmp	r2, #101	@ 0x65
 8019b76:	d001      	beq.n	8019b7c <_strtod_l+0x174>
 8019b78:	2a45      	cmp	r2, #69	@ 0x45
 8019b7a:	d114      	bne.n	8019ba6 <_strtod_l+0x19e>
 8019b7c:	b91d      	cbnz	r5, 8019b86 <_strtod_l+0x17e>
 8019b7e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019b80:	4302      	orrs	r2, r0
 8019b82:	d095      	beq.n	8019ab0 <_strtod_l+0xa8>
 8019b84:	2500      	movs	r5, #0
 8019b86:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8019b88:	1c62      	adds	r2, r4, #1
 8019b8a:	9219      	str	r2, [sp, #100]	@ 0x64
 8019b8c:	7862      	ldrb	r2, [r4, #1]
 8019b8e:	2a2b      	cmp	r2, #43	@ 0x2b
 8019b90:	d077      	beq.n	8019c82 <_strtod_l+0x27a>
 8019b92:	2a2d      	cmp	r2, #45	@ 0x2d
 8019b94:	d07b      	beq.n	8019c8e <_strtod_l+0x286>
 8019b96:	f04f 0c00 	mov.w	ip, #0
 8019b9a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8019b9e:	2909      	cmp	r1, #9
 8019ba0:	f240 8082 	bls.w	8019ca8 <_strtod_l+0x2a0>
 8019ba4:	9419      	str	r4, [sp, #100]	@ 0x64
 8019ba6:	f04f 0800 	mov.w	r8, #0
 8019baa:	e0a2      	b.n	8019cf2 <_strtod_l+0x2ea>
 8019bac:	2300      	movs	r3, #0
 8019bae:	e7c7      	b.n	8019b40 <_strtod_l+0x138>
 8019bb0:	2f08      	cmp	r7, #8
 8019bb2:	bfd5      	itete	le
 8019bb4:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8019bb6:	9908      	ldrgt	r1, [sp, #32]
 8019bb8:	fb02 3301 	mlale	r3, r2, r1, r3
 8019bbc:	fb02 3301 	mlagt	r3, r2, r1, r3
 8019bc0:	f100 0001 	add.w	r0, r0, #1
 8019bc4:	bfd4      	ite	le
 8019bc6:	930a      	strle	r3, [sp, #40]	@ 0x28
 8019bc8:	9308      	strgt	r3, [sp, #32]
 8019bca:	3701      	adds	r7, #1
 8019bcc:	9019      	str	r0, [sp, #100]	@ 0x64
 8019bce:	e7bf      	b.n	8019b50 <_strtod_l+0x148>
 8019bd0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8019bd2:	1c5a      	adds	r2, r3, #1
 8019bd4:	9219      	str	r2, [sp, #100]	@ 0x64
 8019bd6:	785a      	ldrb	r2, [r3, #1]
 8019bd8:	b37f      	cbz	r7, 8019c3a <_strtod_l+0x232>
 8019bda:	4681      	mov	r9, r0
 8019bdc:	463d      	mov	r5, r7
 8019bde:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8019be2:	2b09      	cmp	r3, #9
 8019be4:	d912      	bls.n	8019c0c <_strtod_l+0x204>
 8019be6:	2301      	movs	r3, #1
 8019be8:	e7c4      	b.n	8019b74 <_strtod_l+0x16c>
 8019bea:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8019bec:	1c5a      	adds	r2, r3, #1
 8019bee:	9219      	str	r2, [sp, #100]	@ 0x64
 8019bf0:	785a      	ldrb	r2, [r3, #1]
 8019bf2:	3001      	adds	r0, #1
 8019bf4:	2a30      	cmp	r2, #48	@ 0x30
 8019bf6:	d0f8      	beq.n	8019bea <_strtod_l+0x1e2>
 8019bf8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8019bfc:	2b08      	cmp	r3, #8
 8019bfe:	f200 84d3 	bhi.w	801a5a8 <_strtod_l+0xba0>
 8019c02:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8019c04:	930c      	str	r3, [sp, #48]	@ 0x30
 8019c06:	4681      	mov	r9, r0
 8019c08:	2000      	movs	r0, #0
 8019c0a:	4605      	mov	r5, r0
 8019c0c:	3a30      	subs	r2, #48	@ 0x30
 8019c0e:	f100 0301 	add.w	r3, r0, #1
 8019c12:	d02a      	beq.n	8019c6a <_strtod_l+0x262>
 8019c14:	4499      	add	r9, r3
 8019c16:	eb00 0c05 	add.w	ip, r0, r5
 8019c1a:	462b      	mov	r3, r5
 8019c1c:	210a      	movs	r1, #10
 8019c1e:	4563      	cmp	r3, ip
 8019c20:	d10d      	bne.n	8019c3e <_strtod_l+0x236>
 8019c22:	1c69      	adds	r1, r5, #1
 8019c24:	4401      	add	r1, r0
 8019c26:	4428      	add	r0, r5
 8019c28:	2808      	cmp	r0, #8
 8019c2a:	dc16      	bgt.n	8019c5a <_strtod_l+0x252>
 8019c2c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8019c2e:	230a      	movs	r3, #10
 8019c30:	fb03 2300 	mla	r3, r3, r0, r2
 8019c34:	930a      	str	r3, [sp, #40]	@ 0x28
 8019c36:	2300      	movs	r3, #0
 8019c38:	e018      	b.n	8019c6c <_strtod_l+0x264>
 8019c3a:	4638      	mov	r0, r7
 8019c3c:	e7da      	b.n	8019bf4 <_strtod_l+0x1ec>
 8019c3e:	2b08      	cmp	r3, #8
 8019c40:	f103 0301 	add.w	r3, r3, #1
 8019c44:	dc03      	bgt.n	8019c4e <_strtod_l+0x246>
 8019c46:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8019c48:	434e      	muls	r6, r1
 8019c4a:	960a      	str	r6, [sp, #40]	@ 0x28
 8019c4c:	e7e7      	b.n	8019c1e <_strtod_l+0x216>
 8019c4e:	2b10      	cmp	r3, #16
 8019c50:	bfde      	ittt	le
 8019c52:	9e08      	ldrle	r6, [sp, #32]
 8019c54:	434e      	mulle	r6, r1
 8019c56:	9608      	strle	r6, [sp, #32]
 8019c58:	e7e1      	b.n	8019c1e <_strtod_l+0x216>
 8019c5a:	280f      	cmp	r0, #15
 8019c5c:	dceb      	bgt.n	8019c36 <_strtod_l+0x22e>
 8019c5e:	9808      	ldr	r0, [sp, #32]
 8019c60:	230a      	movs	r3, #10
 8019c62:	fb03 2300 	mla	r3, r3, r0, r2
 8019c66:	9308      	str	r3, [sp, #32]
 8019c68:	e7e5      	b.n	8019c36 <_strtod_l+0x22e>
 8019c6a:	4629      	mov	r1, r5
 8019c6c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8019c6e:	1c50      	adds	r0, r2, #1
 8019c70:	9019      	str	r0, [sp, #100]	@ 0x64
 8019c72:	7852      	ldrb	r2, [r2, #1]
 8019c74:	4618      	mov	r0, r3
 8019c76:	460d      	mov	r5, r1
 8019c78:	e7b1      	b.n	8019bde <_strtod_l+0x1d6>
 8019c7a:	f04f 0900 	mov.w	r9, #0
 8019c7e:	2301      	movs	r3, #1
 8019c80:	e77d      	b.n	8019b7e <_strtod_l+0x176>
 8019c82:	f04f 0c00 	mov.w	ip, #0
 8019c86:	1ca2      	adds	r2, r4, #2
 8019c88:	9219      	str	r2, [sp, #100]	@ 0x64
 8019c8a:	78a2      	ldrb	r2, [r4, #2]
 8019c8c:	e785      	b.n	8019b9a <_strtod_l+0x192>
 8019c8e:	f04f 0c01 	mov.w	ip, #1
 8019c92:	e7f8      	b.n	8019c86 <_strtod_l+0x27e>
 8019c94:	080222d8 	.word	0x080222d8
 8019c98:	080222c0 	.word	0x080222c0
 8019c9c:	7ff00000 	.word	0x7ff00000
 8019ca0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8019ca2:	1c51      	adds	r1, r2, #1
 8019ca4:	9119      	str	r1, [sp, #100]	@ 0x64
 8019ca6:	7852      	ldrb	r2, [r2, #1]
 8019ca8:	2a30      	cmp	r2, #48	@ 0x30
 8019caa:	d0f9      	beq.n	8019ca0 <_strtod_l+0x298>
 8019cac:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8019cb0:	2908      	cmp	r1, #8
 8019cb2:	f63f af78 	bhi.w	8019ba6 <_strtod_l+0x19e>
 8019cb6:	3a30      	subs	r2, #48	@ 0x30
 8019cb8:	920e      	str	r2, [sp, #56]	@ 0x38
 8019cba:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8019cbc:	920f      	str	r2, [sp, #60]	@ 0x3c
 8019cbe:	f04f 080a 	mov.w	r8, #10
 8019cc2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8019cc4:	1c56      	adds	r6, r2, #1
 8019cc6:	9619      	str	r6, [sp, #100]	@ 0x64
 8019cc8:	7852      	ldrb	r2, [r2, #1]
 8019cca:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8019cce:	f1be 0f09 	cmp.w	lr, #9
 8019cd2:	d939      	bls.n	8019d48 <_strtod_l+0x340>
 8019cd4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8019cd6:	1a76      	subs	r6, r6, r1
 8019cd8:	2e08      	cmp	r6, #8
 8019cda:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8019cde:	dc03      	bgt.n	8019ce8 <_strtod_l+0x2e0>
 8019ce0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8019ce2:	4588      	cmp	r8, r1
 8019ce4:	bfa8      	it	ge
 8019ce6:	4688      	movge	r8, r1
 8019ce8:	f1bc 0f00 	cmp.w	ip, #0
 8019cec:	d001      	beq.n	8019cf2 <_strtod_l+0x2ea>
 8019cee:	f1c8 0800 	rsb	r8, r8, #0
 8019cf2:	2d00      	cmp	r5, #0
 8019cf4:	d14e      	bne.n	8019d94 <_strtod_l+0x38c>
 8019cf6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8019cf8:	4308      	orrs	r0, r1
 8019cfa:	f47f aebe 	bne.w	8019a7a <_strtod_l+0x72>
 8019cfe:	2b00      	cmp	r3, #0
 8019d00:	f47f aed6 	bne.w	8019ab0 <_strtod_l+0xa8>
 8019d04:	2a69      	cmp	r2, #105	@ 0x69
 8019d06:	d028      	beq.n	8019d5a <_strtod_l+0x352>
 8019d08:	dc25      	bgt.n	8019d56 <_strtod_l+0x34e>
 8019d0a:	2a49      	cmp	r2, #73	@ 0x49
 8019d0c:	d025      	beq.n	8019d5a <_strtod_l+0x352>
 8019d0e:	2a4e      	cmp	r2, #78	@ 0x4e
 8019d10:	f47f aece 	bne.w	8019ab0 <_strtod_l+0xa8>
 8019d14:	499b      	ldr	r1, [pc, #620]	@ (8019f84 <_strtod_l+0x57c>)
 8019d16:	a819      	add	r0, sp, #100	@ 0x64
 8019d18:	f002 ff86 	bl	801cc28 <__match>
 8019d1c:	2800      	cmp	r0, #0
 8019d1e:	f43f aec7 	beq.w	8019ab0 <_strtod_l+0xa8>
 8019d22:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8019d24:	781b      	ldrb	r3, [r3, #0]
 8019d26:	2b28      	cmp	r3, #40	@ 0x28
 8019d28:	d12e      	bne.n	8019d88 <_strtod_l+0x380>
 8019d2a:	4997      	ldr	r1, [pc, #604]	@ (8019f88 <_strtod_l+0x580>)
 8019d2c:	aa1c      	add	r2, sp, #112	@ 0x70
 8019d2e:	a819      	add	r0, sp, #100	@ 0x64
 8019d30:	f002 ff8e 	bl	801cc50 <__hexnan>
 8019d34:	2805      	cmp	r0, #5
 8019d36:	d127      	bne.n	8019d88 <_strtod_l+0x380>
 8019d38:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8019d3a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8019d3e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8019d42:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8019d46:	e698      	b.n	8019a7a <_strtod_l+0x72>
 8019d48:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8019d4a:	fb08 2101 	mla	r1, r8, r1, r2
 8019d4e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8019d52:	920e      	str	r2, [sp, #56]	@ 0x38
 8019d54:	e7b5      	b.n	8019cc2 <_strtod_l+0x2ba>
 8019d56:	2a6e      	cmp	r2, #110	@ 0x6e
 8019d58:	e7da      	b.n	8019d10 <_strtod_l+0x308>
 8019d5a:	498c      	ldr	r1, [pc, #560]	@ (8019f8c <_strtod_l+0x584>)
 8019d5c:	a819      	add	r0, sp, #100	@ 0x64
 8019d5e:	f002 ff63 	bl	801cc28 <__match>
 8019d62:	2800      	cmp	r0, #0
 8019d64:	f43f aea4 	beq.w	8019ab0 <_strtod_l+0xa8>
 8019d68:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8019d6a:	4989      	ldr	r1, [pc, #548]	@ (8019f90 <_strtod_l+0x588>)
 8019d6c:	3b01      	subs	r3, #1
 8019d6e:	a819      	add	r0, sp, #100	@ 0x64
 8019d70:	9319      	str	r3, [sp, #100]	@ 0x64
 8019d72:	f002 ff59 	bl	801cc28 <__match>
 8019d76:	b910      	cbnz	r0, 8019d7e <_strtod_l+0x376>
 8019d78:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8019d7a:	3301      	adds	r3, #1
 8019d7c:	9319      	str	r3, [sp, #100]	@ 0x64
 8019d7e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8019fa0 <_strtod_l+0x598>
 8019d82:	f04f 0a00 	mov.w	sl, #0
 8019d86:	e678      	b.n	8019a7a <_strtod_l+0x72>
 8019d88:	4882      	ldr	r0, [pc, #520]	@ (8019f94 <_strtod_l+0x58c>)
 8019d8a:	f001 fe01 	bl	801b990 <nan>
 8019d8e:	ec5b ab10 	vmov	sl, fp, d0
 8019d92:	e672      	b.n	8019a7a <_strtod_l+0x72>
 8019d94:	eba8 0309 	sub.w	r3, r8, r9
 8019d98:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8019d9a:	9309      	str	r3, [sp, #36]	@ 0x24
 8019d9c:	2f00      	cmp	r7, #0
 8019d9e:	bf08      	it	eq
 8019da0:	462f      	moveq	r7, r5
 8019da2:	2d10      	cmp	r5, #16
 8019da4:	462c      	mov	r4, r5
 8019da6:	bfa8      	it	ge
 8019da8:	2410      	movge	r4, #16
 8019daa:	f7e6 fb83 	bl	80004b4 <__aeabi_ui2d>
 8019dae:	2d09      	cmp	r5, #9
 8019db0:	4682      	mov	sl, r0
 8019db2:	468b      	mov	fp, r1
 8019db4:	dc13      	bgt.n	8019dde <_strtod_l+0x3d6>
 8019db6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019db8:	2b00      	cmp	r3, #0
 8019dba:	f43f ae5e 	beq.w	8019a7a <_strtod_l+0x72>
 8019dbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019dc0:	dd78      	ble.n	8019eb4 <_strtod_l+0x4ac>
 8019dc2:	2b16      	cmp	r3, #22
 8019dc4:	dc5f      	bgt.n	8019e86 <_strtod_l+0x47e>
 8019dc6:	4974      	ldr	r1, [pc, #464]	@ (8019f98 <_strtod_l+0x590>)
 8019dc8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8019dcc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019dd0:	4652      	mov	r2, sl
 8019dd2:	465b      	mov	r3, fp
 8019dd4:	f7e6 fbe8 	bl	80005a8 <__aeabi_dmul>
 8019dd8:	4682      	mov	sl, r0
 8019dda:	468b      	mov	fp, r1
 8019ddc:	e64d      	b.n	8019a7a <_strtod_l+0x72>
 8019dde:	4b6e      	ldr	r3, [pc, #440]	@ (8019f98 <_strtod_l+0x590>)
 8019de0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8019de4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8019de8:	f7e6 fbde 	bl	80005a8 <__aeabi_dmul>
 8019dec:	4682      	mov	sl, r0
 8019dee:	9808      	ldr	r0, [sp, #32]
 8019df0:	468b      	mov	fp, r1
 8019df2:	f7e6 fb5f 	bl	80004b4 <__aeabi_ui2d>
 8019df6:	4602      	mov	r2, r0
 8019df8:	460b      	mov	r3, r1
 8019dfa:	4650      	mov	r0, sl
 8019dfc:	4659      	mov	r1, fp
 8019dfe:	f7e6 fa1d 	bl	800023c <__adddf3>
 8019e02:	2d0f      	cmp	r5, #15
 8019e04:	4682      	mov	sl, r0
 8019e06:	468b      	mov	fp, r1
 8019e08:	ddd5      	ble.n	8019db6 <_strtod_l+0x3ae>
 8019e0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019e0c:	1b2c      	subs	r4, r5, r4
 8019e0e:	441c      	add	r4, r3
 8019e10:	2c00      	cmp	r4, #0
 8019e12:	f340 8096 	ble.w	8019f42 <_strtod_l+0x53a>
 8019e16:	f014 030f 	ands.w	r3, r4, #15
 8019e1a:	d00a      	beq.n	8019e32 <_strtod_l+0x42a>
 8019e1c:	495e      	ldr	r1, [pc, #376]	@ (8019f98 <_strtod_l+0x590>)
 8019e1e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8019e22:	4652      	mov	r2, sl
 8019e24:	465b      	mov	r3, fp
 8019e26:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019e2a:	f7e6 fbbd 	bl	80005a8 <__aeabi_dmul>
 8019e2e:	4682      	mov	sl, r0
 8019e30:	468b      	mov	fp, r1
 8019e32:	f034 040f 	bics.w	r4, r4, #15
 8019e36:	d073      	beq.n	8019f20 <_strtod_l+0x518>
 8019e38:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8019e3c:	dd48      	ble.n	8019ed0 <_strtod_l+0x4c8>
 8019e3e:	2400      	movs	r4, #0
 8019e40:	46a0      	mov	r8, r4
 8019e42:	940a      	str	r4, [sp, #40]	@ 0x28
 8019e44:	46a1      	mov	r9, r4
 8019e46:	9a05      	ldr	r2, [sp, #20]
 8019e48:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8019fa0 <_strtod_l+0x598>
 8019e4c:	2322      	movs	r3, #34	@ 0x22
 8019e4e:	6013      	str	r3, [r2, #0]
 8019e50:	f04f 0a00 	mov.w	sl, #0
 8019e54:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8019e56:	2b00      	cmp	r3, #0
 8019e58:	f43f ae0f 	beq.w	8019a7a <_strtod_l+0x72>
 8019e5c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8019e5e:	9805      	ldr	r0, [sp, #20]
 8019e60:	f002 ffe4 	bl	801ce2c <_Bfree>
 8019e64:	9805      	ldr	r0, [sp, #20]
 8019e66:	4649      	mov	r1, r9
 8019e68:	f002 ffe0 	bl	801ce2c <_Bfree>
 8019e6c:	9805      	ldr	r0, [sp, #20]
 8019e6e:	4641      	mov	r1, r8
 8019e70:	f002 ffdc 	bl	801ce2c <_Bfree>
 8019e74:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8019e76:	9805      	ldr	r0, [sp, #20]
 8019e78:	f002 ffd8 	bl	801ce2c <_Bfree>
 8019e7c:	9805      	ldr	r0, [sp, #20]
 8019e7e:	4621      	mov	r1, r4
 8019e80:	f002 ffd4 	bl	801ce2c <_Bfree>
 8019e84:	e5f9      	b.n	8019a7a <_strtod_l+0x72>
 8019e86:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019e88:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8019e8c:	4293      	cmp	r3, r2
 8019e8e:	dbbc      	blt.n	8019e0a <_strtod_l+0x402>
 8019e90:	4c41      	ldr	r4, [pc, #260]	@ (8019f98 <_strtod_l+0x590>)
 8019e92:	f1c5 050f 	rsb	r5, r5, #15
 8019e96:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8019e9a:	4652      	mov	r2, sl
 8019e9c:	465b      	mov	r3, fp
 8019e9e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019ea2:	f7e6 fb81 	bl	80005a8 <__aeabi_dmul>
 8019ea6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019ea8:	1b5d      	subs	r5, r3, r5
 8019eaa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8019eae:	e9d4 2300 	ldrd	r2, r3, [r4]
 8019eb2:	e78f      	b.n	8019dd4 <_strtod_l+0x3cc>
 8019eb4:	3316      	adds	r3, #22
 8019eb6:	dba8      	blt.n	8019e0a <_strtod_l+0x402>
 8019eb8:	4b37      	ldr	r3, [pc, #220]	@ (8019f98 <_strtod_l+0x590>)
 8019eba:	eba9 0808 	sub.w	r8, r9, r8
 8019ebe:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8019ec2:	e9d8 2300 	ldrd	r2, r3, [r8]
 8019ec6:	4650      	mov	r0, sl
 8019ec8:	4659      	mov	r1, fp
 8019eca:	f7e6 fc97 	bl	80007fc <__aeabi_ddiv>
 8019ece:	e783      	b.n	8019dd8 <_strtod_l+0x3d0>
 8019ed0:	4b32      	ldr	r3, [pc, #200]	@ (8019f9c <_strtod_l+0x594>)
 8019ed2:	9308      	str	r3, [sp, #32]
 8019ed4:	2300      	movs	r3, #0
 8019ed6:	1124      	asrs	r4, r4, #4
 8019ed8:	4650      	mov	r0, sl
 8019eda:	4659      	mov	r1, fp
 8019edc:	461e      	mov	r6, r3
 8019ede:	2c01      	cmp	r4, #1
 8019ee0:	dc21      	bgt.n	8019f26 <_strtod_l+0x51e>
 8019ee2:	b10b      	cbz	r3, 8019ee8 <_strtod_l+0x4e0>
 8019ee4:	4682      	mov	sl, r0
 8019ee6:	468b      	mov	fp, r1
 8019ee8:	492c      	ldr	r1, [pc, #176]	@ (8019f9c <_strtod_l+0x594>)
 8019eea:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8019eee:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8019ef2:	4652      	mov	r2, sl
 8019ef4:	465b      	mov	r3, fp
 8019ef6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019efa:	f7e6 fb55 	bl	80005a8 <__aeabi_dmul>
 8019efe:	4b28      	ldr	r3, [pc, #160]	@ (8019fa0 <_strtod_l+0x598>)
 8019f00:	460a      	mov	r2, r1
 8019f02:	400b      	ands	r3, r1
 8019f04:	4927      	ldr	r1, [pc, #156]	@ (8019fa4 <_strtod_l+0x59c>)
 8019f06:	428b      	cmp	r3, r1
 8019f08:	4682      	mov	sl, r0
 8019f0a:	d898      	bhi.n	8019e3e <_strtod_l+0x436>
 8019f0c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8019f10:	428b      	cmp	r3, r1
 8019f12:	bf86      	itte	hi
 8019f14:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8019fa8 <_strtod_l+0x5a0>
 8019f18:	f04f 3aff 	movhi.w	sl, #4294967295
 8019f1c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8019f20:	2300      	movs	r3, #0
 8019f22:	9308      	str	r3, [sp, #32]
 8019f24:	e07a      	b.n	801a01c <_strtod_l+0x614>
 8019f26:	07e2      	lsls	r2, r4, #31
 8019f28:	d505      	bpl.n	8019f36 <_strtod_l+0x52e>
 8019f2a:	9b08      	ldr	r3, [sp, #32]
 8019f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019f30:	f7e6 fb3a 	bl	80005a8 <__aeabi_dmul>
 8019f34:	2301      	movs	r3, #1
 8019f36:	9a08      	ldr	r2, [sp, #32]
 8019f38:	3208      	adds	r2, #8
 8019f3a:	3601      	adds	r6, #1
 8019f3c:	1064      	asrs	r4, r4, #1
 8019f3e:	9208      	str	r2, [sp, #32]
 8019f40:	e7cd      	b.n	8019ede <_strtod_l+0x4d6>
 8019f42:	d0ed      	beq.n	8019f20 <_strtod_l+0x518>
 8019f44:	4264      	negs	r4, r4
 8019f46:	f014 020f 	ands.w	r2, r4, #15
 8019f4a:	d00a      	beq.n	8019f62 <_strtod_l+0x55a>
 8019f4c:	4b12      	ldr	r3, [pc, #72]	@ (8019f98 <_strtod_l+0x590>)
 8019f4e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8019f52:	4650      	mov	r0, sl
 8019f54:	4659      	mov	r1, fp
 8019f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019f5a:	f7e6 fc4f 	bl	80007fc <__aeabi_ddiv>
 8019f5e:	4682      	mov	sl, r0
 8019f60:	468b      	mov	fp, r1
 8019f62:	1124      	asrs	r4, r4, #4
 8019f64:	d0dc      	beq.n	8019f20 <_strtod_l+0x518>
 8019f66:	2c1f      	cmp	r4, #31
 8019f68:	dd20      	ble.n	8019fac <_strtod_l+0x5a4>
 8019f6a:	2400      	movs	r4, #0
 8019f6c:	46a0      	mov	r8, r4
 8019f6e:	940a      	str	r4, [sp, #40]	@ 0x28
 8019f70:	46a1      	mov	r9, r4
 8019f72:	9a05      	ldr	r2, [sp, #20]
 8019f74:	2322      	movs	r3, #34	@ 0x22
 8019f76:	f04f 0a00 	mov.w	sl, #0
 8019f7a:	f04f 0b00 	mov.w	fp, #0
 8019f7e:	6013      	str	r3, [r2, #0]
 8019f80:	e768      	b.n	8019e54 <_strtod_l+0x44c>
 8019f82:	bf00      	nop
 8019f84:	08022426 	.word	0x08022426
 8019f88:	080222c4 	.word	0x080222c4
 8019f8c:	0802241e 	.word	0x0802241e
 8019f90:	0802250a 	.word	0x0802250a
 8019f94:	08022506 	.word	0x08022506
 8019f98:	08022670 	.word	0x08022670
 8019f9c:	08022648 	.word	0x08022648
 8019fa0:	7ff00000 	.word	0x7ff00000
 8019fa4:	7ca00000 	.word	0x7ca00000
 8019fa8:	7fefffff 	.word	0x7fefffff
 8019fac:	f014 0310 	ands.w	r3, r4, #16
 8019fb0:	bf18      	it	ne
 8019fb2:	236a      	movne	r3, #106	@ 0x6a
 8019fb4:	4ea9      	ldr	r6, [pc, #676]	@ (801a25c <_strtod_l+0x854>)
 8019fb6:	9308      	str	r3, [sp, #32]
 8019fb8:	4650      	mov	r0, sl
 8019fba:	4659      	mov	r1, fp
 8019fbc:	2300      	movs	r3, #0
 8019fbe:	07e2      	lsls	r2, r4, #31
 8019fc0:	d504      	bpl.n	8019fcc <_strtod_l+0x5c4>
 8019fc2:	e9d6 2300 	ldrd	r2, r3, [r6]
 8019fc6:	f7e6 faef 	bl	80005a8 <__aeabi_dmul>
 8019fca:	2301      	movs	r3, #1
 8019fcc:	1064      	asrs	r4, r4, #1
 8019fce:	f106 0608 	add.w	r6, r6, #8
 8019fd2:	d1f4      	bne.n	8019fbe <_strtod_l+0x5b6>
 8019fd4:	b10b      	cbz	r3, 8019fda <_strtod_l+0x5d2>
 8019fd6:	4682      	mov	sl, r0
 8019fd8:	468b      	mov	fp, r1
 8019fda:	9b08      	ldr	r3, [sp, #32]
 8019fdc:	b1b3      	cbz	r3, 801a00c <_strtod_l+0x604>
 8019fde:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8019fe2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8019fe6:	2b00      	cmp	r3, #0
 8019fe8:	4659      	mov	r1, fp
 8019fea:	dd0f      	ble.n	801a00c <_strtod_l+0x604>
 8019fec:	2b1f      	cmp	r3, #31
 8019fee:	dd55      	ble.n	801a09c <_strtod_l+0x694>
 8019ff0:	2b34      	cmp	r3, #52	@ 0x34
 8019ff2:	bfde      	ittt	le
 8019ff4:	f04f 33ff 	movle.w	r3, #4294967295
 8019ff8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8019ffc:	4093      	lslle	r3, r2
 8019ffe:	f04f 0a00 	mov.w	sl, #0
 801a002:	bfcc      	ite	gt
 801a004:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 801a008:	ea03 0b01 	andle.w	fp, r3, r1
 801a00c:	2200      	movs	r2, #0
 801a00e:	2300      	movs	r3, #0
 801a010:	4650      	mov	r0, sl
 801a012:	4659      	mov	r1, fp
 801a014:	f7e6 fd30 	bl	8000a78 <__aeabi_dcmpeq>
 801a018:	2800      	cmp	r0, #0
 801a01a:	d1a6      	bne.n	8019f6a <_strtod_l+0x562>
 801a01c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801a01e:	9300      	str	r3, [sp, #0]
 801a020:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801a022:	9805      	ldr	r0, [sp, #20]
 801a024:	462b      	mov	r3, r5
 801a026:	463a      	mov	r2, r7
 801a028:	f002 ff68 	bl	801cefc <__s2b>
 801a02c:	900a      	str	r0, [sp, #40]	@ 0x28
 801a02e:	2800      	cmp	r0, #0
 801a030:	f43f af05 	beq.w	8019e3e <_strtod_l+0x436>
 801a034:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801a036:	2a00      	cmp	r2, #0
 801a038:	eba9 0308 	sub.w	r3, r9, r8
 801a03c:	bfa8      	it	ge
 801a03e:	2300      	movge	r3, #0
 801a040:	9312      	str	r3, [sp, #72]	@ 0x48
 801a042:	2400      	movs	r4, #0
 801a044:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 801a048:	9316      	str	r3, [sp, #88]	@ 0x58
 801a04a:	46a0      	mov	r8, r4
 801a04c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801a04e:	9805      	ldr	r0, [sp, #20]
 801a050:	6859      	ldr	r1, [r3, #4]
 801a052:	f002 feab 	bl	801cdac <_Balloc>
 801a056:	4681      	mov	r9, r0
 801a058:	2800      	cmp	r0, #0
 801a05a:	f43f aef4 	beq.w	8019e46 <_strtod_l+0x43e>
 801a05e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801a060:	691a      	ldr	r2, [r3, #16]
 801a062:	3202      	adds	r2, #2
 801a064:	f103 010c 	add.w	r1, r3, #12
 801a068:	0092      	lsls	r2, r2, #2
 801a06a:	300c      	adds	r0, #12
 801a06c:	f001 fc81 	bl	801b972 <memcpy>
 801a070:	ec4b ab10 	vmov	d0, sl, fp
 801a074:	9805      	ldr	r0, [sp, #20]
 801a076:	aa1c      	add	r2, sp, #112	@ 0x70
 801a078:	a91b      	add	r1, sp, #108	@ 0x6c
 801a07a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 801a07e:	f003 fa79 	bl	801d574 <__d2b>
 801a082:	901a      	str	r0, [sp, #104]	@ 0x68
 801a084:	2800      	cmp	r0, #0
 801a086:	f43f aede 	beq.w	8019e46 <_strtod_l+0x43e>
 801a08a:	9805      	ldr	r0, [sp, #20]
 801a08c:	2101      	movs	r1, #1
 801a08e:	f002 ffcb 	bl	801d028 <__i2b>
 801a092:	4680      	mov	r8, r0
 801a094:	b948      	cbnz	r0, 801a0aa <_strtod_l+0x6a2>
 801a096:	f04f 0800 	mov.w	r8, #0
 801a09a:	e6d4      	b.n	8019e46 <_strtod_l+0x43e>
 801a09c:	f04f 32ff 	mov.w	r2, #4294967295
 801a0a0:	fa02 f303 	lsl.w	r3, r2, r3
 801a0a4:	ea03 0a0a 	and.w	sl, r3, sl
 801a0a8:	e7b0      	b.n	801a00c <_strtod_l+0x604>
 801a0aa:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 801a0ac:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 801a0ae:	2d00      	cmp	r5, #0
 801a0b0:	bfab      	itete	ge
 801a0b2:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 801a0b4:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 801a0b6:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 801a0b8:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 801a0ba:	bfac      	ite	ge
 801a0bc:	18ef      	addge	r7, r5, r3
 801a0be:	1b5e      	sublt	r6, r3, r5
 801a0c0:	9b08      	ldr	r3, [sp, #32]
 801a0c2:	1aed      	subs	r5, r5, r3
 801a0c4:	4415      	add	r5, r2
 801a0c6:	4b66      	ldr	r3, [pc, #408]	@ (801a260 <_strtod_l+0x858>)
 801a0c8:	3d01      	subs	r5, #1
 801a0ca:	429d      	cmp	r5, r3
 801a0cc:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 801a0d0:	da50      	bge.n	801a174 <_strtod_l+0x76c>
 801a0d2:	1b5b      	subs	r3, r3, r5
 801a0d4:	2b1f      	cmp	r3, #31
 801a0d6:	eba2 0203 	sub.w	r2, r2, r3
 801a0da:	f04f 0101 	mov.w	r1, #1
 801a0de:	dc3d      	bgt.n	801a15c <_strtod_l+0x754>
 801a0e0:	fa01 f303 	lsl.w	r3, r1, r3
 801a0e4:	9313      	str	r3, [sp, #76]	@ 0x4c
 801a0e6:	2300      	movs	r3, #0
 801a0e8:	9310      	str	r3, [sp, #64]	@ 0x40
 801a0ea:	18bd      	adds	r5, r7, r2
 801a0ec:	9b08      	ldr	r3, [sp, #32]
 801a0ee:	42af      	cmp	r7, r5
 801a0f0:	4416      	add	r6, r2
 801a0f2:	441e      	add	r6, r3
 801a0f4:	463b      	mov	r3, r7
 801a0f6:	bfa8      	it	ge
 801a0f8:	462b      	movge	r3, r5
 801a0fa:	42b3      	cmp	r3, r6
 801a0fc:	bfa8      	it	ge
 801a0fe:	4633      	movge	r3, r6
 801a100:	2b00      	cmp	r3, #0
 801a102:	bfc2      	ittt	gt
 801a104:	1aed      	subgt	r5, r5, r3
 801a106:	1af6      	subgt	r6, r6, r3
 801a108:	1aff      	subgt	r7, r7, r3
 801a10a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801a10c:	2b00      	cmp	r3, #0
 801a10e:	dd16      	ble.n	801a13e <_strtod_l+0x736>
 801a110:	4641      	mov	r1, r8
 801a112:	9805      	ldr	r0, [sp, #20]
 801a114:	461a      	mov	r2, r3
 801a116:	f003 f847 	bl	801d1a8 <__pow5mult>
 801a11a:	4680      	mov	r8, r0
 801a11c:	2800      	cmp	r0, #0
 801a11e:	d0ba      	beq.n	801a096 <_strtod_l+0x68e>
 801a120:	4601      	mov	r1, r0
 801a122:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801a124:	9805      	ldr	r0, [sp, #20]
 801a126:	f002 ff95 	bl	801d054 <__multiply>
 801a12a:	900e      	str	r0, [sp, #56]	@ 0x38
 801a12c:	2800      	cmp	r0, #0
 801a12e:	f43f ae8a 	beq.w	8019e46 <_strtod_l+0x43e>
 801a132:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801a134:	9805      	ldr	r0, [sp, #20]
 801a136:	f002 fe79 	bl	801ce2c <_Bfree>
 801a13a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801a13c:	931a      	str	r3, [sp, #104]	@ 0x68
 801a13e:	2d00      	cmp	r5, #0
 801a140:	dc1d      	bgt.n	801a17e <_strtod_l+0x776>
 801a142:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a144:	2b00      	cmp	r3, #0
 801a146:	dd23      	ble.n	801a190 <_strtod_l+0x788>
 801a148:	4649      	mov	r1, r9
 801a14a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801a14c:	9805      	ldr	r0, [sp, #20]
 801a14e:	f003 f82b 	bl	801d1a8 <__pow5mult>
 801a152:	4681      	mov	r9, r0
 801a154:	b9e0      	cbnz	r0, 801a190 <_strtod_l+0x788>
 801a156:	f04f 0900 	mov.w	r9, #0
 801a15a:	e674      	b.n	8019e46 <_strtod_l+0x43e>
 801a15c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 801a160:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 801a164:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 801a168:	35e2      	adds	r5, #226	@ 0xe2
 801a16a:	fa01 f305 	lsl.w	r3, r1, r5
 801a16e:	9310      	str	r3, [sp, #64]	@ 0x40
 801a170:	9113      	str	r1, [sp, #76]	@ 0x4c
 801a172:	e7ba      	b.n	801a0ea <_strtod_l+0x6e2>
 801a174:	2300      	movs	r3, #0
 801a176:	9310      	str	r3, [sp, #64]	@ 0x40
 801a178:	2301      	movs	r3, #1
 801a17a:	9313      	str	r3, [sp, #76]	@ 0x4c
 801a17c:	e7b5      	b.n	801a0ea <_strtod_l+0x6e2>
 801a17e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801a180:	9805      	ldr	r0, [sp, #20]
 801a182:	462a      	mov	r2, r5
 801a184:	f003 f86a 	bl	801d25c <__lshift>
 801a188:	901a      	str	r0, [sp, #104]	@ 0x68
 801a18a:	2800      	cmp	r0, #0
 801a18c:	d1d9      	bne.n	801a142 <_strtod_l+0x73a>
 801a18e:	e65a      	b.n	8019e46 <_strtod_l+0x43e>
 801a190:	2e00      	cmp	r6, #0
 801a192:	dd07      	ble.n	801a1a4 <_strtod_l+0x79c>
 801a194:	4649      	mov	r1, r9
 801a196:	9805      	ldr	r0, [sp, #20]
 801a198:	4632      	mov	r2, r6
 801a19a:	f003 f85f 	bl	801d25c <__lshift>
 801a19e:	4681      	mov	r9, r0
 801a1a0:	2800      	cmp	r0, #0
 801a1a2:	d0d8      	beq.n	801a156 <_strtod_l+0x74e>
 801a1a4:	2f00      	cmp	r7, #0
 801a1a6:	dd08      	ble.n	801a1ba <_strtod_l+0x7b2>
 801a1a8:	4641      	mov	r1, r8
 801a1aa:	9805      	ldr	r0, [sp, #20]
 801a1ac:	463a      	mov	r2, r7
 801a1ae:	f003 f855 	bl	801d25c <__lshift>
 801a1b2:	4680      	mov	r8, r0
 801a1b4:	2800      	cmp	r0, #0
 801a1b6:	f43f ae46 	beq.w	8019e46 <_strtod_l+0x43e>
 801a1ba:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801a1bc:	9805      	ldr	r0, [sp, #20]
 801a1be:	464a      	mov	r2, r9
 801a1c0:	f003 f8d4 	bl	801d36c <__mdiff>
 801a1c4:	4604      	mov	r4, r0
 801a1c6:	2800      	cmp	r0, #0
 801a1c8:	f43f ae3d 	beq.w	8019e46 <_strtod_l+0x43e>
 801a1cc:	68c3      	ldr	r3, [r0, #12]
 801a1ce:	930f      	str	r3, [sp, #60]	@ 0x3c
 801a1d0:	2300      	movs	r3, #0
 801a1d2:	60c3      	str	r3, [r0, #12]
 801a1d4:	4641      	mov	r1, r8
 801a1d6:	f003 f8ad 	bl	801d334 <__mcmp>
 801a1da:	2800      	cmp	r0, #0
 801a1dc:	da46      	bge.n	801a26c <_strtod_l+0x864>
 801a1de:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801a1e0:	ea53 030a 	orrs.w	r3, r3, sl
 801a1e4:	d16c      	bne.n	801a2c0 <_strtod_l+0x8b8>
 801a1e6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801a1ea:	2b00      	cmp	r3, #0
 801a1ec:	d168      	bne.n	801a2c0 <_strtod_l+0x8b8>
 801a1ee:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801a1f2:	0d1b      	lsrs	r3, r3, #20
 801a1f4:	051b      	lsls	r3, r3, #20
 801a1f6:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 801a1fa:	d961      	bls.n	801a2c0 <_strtod_l+0x8b8>
 801a1fc:	6963      	ldr	r3, [r4, #20]
 801a1fe:	b913      	cbnz	r3, 801a206 <_strtod_l+0x7fe>
 801a200:	6923      	ldr	r3, [r4, #16]
 801a202:	2b01      	cmp	r3, #1
 801a204:	dd5c      	ble.n	801a2c0 <_strtod_l+0x8b8>
 801a206:	4621      	mov	r1, r4
 801a208:	2201      	movs	r2, #1
 801a20a:	9805      	ldr	r0, [sp, #20]
 801a20c:	f003 f826 	bl	801d25c <__lshift>
 801a210:	4641      	mov	r1, r8
 801a212:	4604      	mov	r4, r0
 801a214:	f003 f88e 	bl	801d334 <__mcmp>
 801a218:	2800      	cmp	r0, #0
 801a21a:	dd51      	ble.n	801a2c0 <_strtod_l+0x8b8>
 801a21c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801a220:	9a08      	ldr	r2, [sp, #32]
 801a222:	0d1b      	lsrs	r3, r3, #20
 801a224:	051b      	lsls	r3, r3, #20
 801a226:	2a00      	cmp	r2, #0
 801a228:	d06b      	beq.n	801a302 <_strtod_l+0x8fa>
 801a22a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 801a22e:	d868      	bhi.n	801a302 <_strtod_l+0x8fa>
 801a230:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 801a234:	f67f ae9d 	bls.w	8019f72 <_strtod_l+0x56a>
 801a238:	4b0a      	ldr	r3, [pc, #40]	@ (801a264 <_strtod_l+0x85c>)
 801a23a:	4650      	mov	r0, sl
 801a23c:	4659      	mov	r1, fp
 801a23e:	2200      	movs	r2, #0
 801a240:	f7e6 f9b2 	bl	80005a8 <__aeabi_dmul>
 801a244:	4b08      	ldr	r3, [pc, #32]	@ (801a268 <_strtod_l+0x860>)
 801a246:	400b      	ands	r3, r1
 801a248:	4682      	mov	sl, r0
 801a24a:	468b      	mov	fp, r1
 801a24c:	2b00      	cmp	r3, #0
 801a24e:	f47f ae05 	bne.w	8019e5c <_strtod_l+0x454>
 801a252:	9a05      	ldr	r2, [sp, #20]
 801a254:	2322      	movs	r3, #34	@ 0x22
 801a256:	6013      	str	r3, [r2, #0]
 801a258:	e600      	b.n	8019e5c <_strtod_l+0x454>
 801a25a:	bf00      	nop
 801a25c:	080222f0 	.word	0x080222f0
 801a260:	fffffc02 	.word	0xfffffc02
 801a264:	39500000 	.word	0x39500000
 801a268:	7ff00000 	.word	0x7ff00000
 801a26c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 801a270:	d165      	bne.n	801a33e <_strtod_l+0x936>
 801a272:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801a274:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801a278:	b35a      	cbz	r2, 801a2d2 <_strtod_l+0x8ca>
 801a27a:	4a9f      	ldr	r2, [pc, #636]	@ (801a4f8 <_strtod_l+0xaf0>)
 801a27c:	4293      	cmp	r3, r2
 801a27e:	d12b      	bne.n	801a2d8 <_strtod_l+0x8d0>
 801a280:	9b08      	ldr	r3, [sp, #32]
 801a282:	4651      	mov	r1, sl
 801a284:	b303      	cbz	r3, 801a2c8 <_strtod_l+0x8c0>
 801a286:	4b9d      	ldr	r3, [pc, #628]	@ (801a4fc <_strtod_l+0xaf4>)
 801a288:	465a      	mov	r2, fp
 801a28a:	4013      	ands	r3, r2
 801a28c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 801a290:	f04f 32ff 	mov.w	r2, #4294967295
 801a294:	d81b      	bhi.n	801a2ce <_strtod_l+0x8c6>
 801a296:	0d1b      	lsrs	r3, r3, #20
 801a298:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801a29c:	fa02 f303 	lsl.w	r3, r2, r3
 801a2a0:	4299      	cmp	r1, r3
 801a2a2:	d119      	bne.n	801a2d8 <_strtod_l+0x8d0>
 801a2a4:	4b96      	ldr	r3, [pc, #600]	@ (801a500 <_strtod_l+0xaf8>)
 801a2a6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801a2a8:	429a      	cmp	r2, r3
 801a2aa:	d102      	bne.n	801a2b2 <_strtod_l+0x8aa>
 801a2ac:	3101      	adds	r1, #1
 801a2ae:	f43f adca 	beq.w	8019e46 <_strtod_l+0x43e>
 801a2b2:	4b92      	ldr	r3, [pc, #584]	@ (801a4fc <_strtod_l+0xaf4>)
 801a2b4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801a2b6:	401a      	ands	r2, r3
 801a2b8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 801a2bc:	f04f 0a00 	mov.w	sl, #0
 801a2c0:	9b08      	ldr	r3, [sp, #32]
 801a2c2:	2b00      	cmp	r3, #0
 801a2c4:	d1b8      	bne.n	801a238 <_strtod_l+0x830>
 801a2c6:	e5c9      	b.n	8019e5c <_strtod_l+0x454>
 801a2c8:	f04f 33ff 	mov.w	r3, #4294967295
 801a2cc:	e7e8      	b.n	801a2a0 <_strtod_l+0x898>
 801a2ce:	4613      	mov	r3, r2
 801a2d0:	e7e6      	b.n	801a2a0 <_strtod_l+0x898>
 801a2d2:	ea53 030a 	orrs.w	r3, r3, sl
 801a2d6:	d0a1      	beq.n	801a21c <_strtod_l+0x814>
 801a2d8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801a2da:	b1db      	cbz	r3, 801a314 <_strtod_l+0x90c>
 801a2dc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801a2de:	4213      	tst	r3, r2
 801a2e0:	d0ee      	beq.n	801a2c0 <_strtod_l+0x8b8>
 801a2e2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801a2e4:	9a08      	ldr	r2, [sp, #32]
 801a2e6:	4650      	mov	r0, sl
 801a2e8:	4659      	mov	r1, fp
 801a2ea:	b1bb      	cbz	r3, 801a31c <_strtod_l+0x914>
 801a2ec:	f7ff fb6e 	bl	80199cc <sulp>
 801a2f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801a2f4:	ec53 2b10 	vmov	r2, r3, d0
 801a2f8:	f7e5 ffa0 	bl	800023c <__adddf3>
 801a2fc:	4682      	mov	sl, r0
 801a2fe:	468b      	mov	fp, r1
 801a300:	e7de      	b.n	801a2c0 <_strtod_l+0x8b8>
 801a302:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 801a306:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801a30a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801a30e:	f04f 3aff 	mov.w	sl, #4294967295
 801a312:	e7d5      	b.n	801a2c0 <_strtod_l+0x8b8>
 801a314:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801a316:	ea13 0f0a 	tst.w	r3, sl
 801a31a:	e7e1      	b.n	801a2e0 <_strtod_l+0x8d8>
 801a31c:	f7ff fb56 	bl	80199cc <sulp>
 801a320:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801a324:	ec53 2b10 	vmov	r2, r3, d0
 801a328:	f7e5 ff86 	bl	8000238 <__aeabi_dsub>
 801a32c:	2200      	movs	r2, #0
 801a32e:	2300      	movs	r3, #0
 801a330:	4682      	mov	sl, r0
 801a332:	468b      	mov	fp, r1
 801a334:	f7e6 fba0 	bl	8000a78 <__aeabi_dcmpeq>
 801a338:	2800      	cmp	r0, #0
 801a33a:	d0c1      	beq.n	801a2c0 <_strtod_l+0x8b8>
 801a33c:	e619      	b.n	8019f72 <_strtod_l+0x56a>
 801a33e:	4641      	mov	r1, r8
 801a340:	4620      	mov	r0, r4
 801a342:	f003 f96f 	bl	801d624 <__ratio>
 801a346:	ec57 6b10 	vmov	r6, r7, d0
 801a34a:	2200      	movs	r2, #0
 801a34c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 801a350:	4630      	mov	r0, r6
 801a352:	4639      	mov	r1, r7
 801a354:	f7e6 fba4 	bl	8000aa0 <__aeabi_dcmple>
 801a358:	2800      	cmp	r0, #0
 801a35a:	d06f      	beq.n	801a43c <_strtod_l+0xa34>
 801a35c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801a35e:	2b00      	cmp	r3, #0
 801a360:	d17a      	bne.n	801a458 <_strtod_l+0xa50>
 801a362:	f1ba 0f00 	cmp.w	sl, #0
 801a366:	d158      	bne.n	801a41a <_strtod_l+0xa12>
 801a368:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801a36a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801a36e:	2b00      	cmp	r3, #0
 801a370:	d15a      	bne.n	801a428 <_strtod_l+0xa20>
 801a372:	4b64      	ldr	r3, [pc, #400]	@ (801a504 <_strtod_l+0xafc>)
 801a374:	2200      	movs	r2, #0
 801a376:	4630      	mov	r0, r6
 801a378:	4639      	mov	r1, r7
 801a37a:	f7e6 fb87 	bl	8000a8c <__aeabi_dcmplt>
 801a37e:	2800      	cmp	r0, #0
 801a380:	d159      	bne.n	801a436 <_strtod_l+0xa2e>
 801a382:	4630      	mov	r0, r6
 801a384:	4639      	mov	r1, r7
 801a386:	4b60      	ldr	r3, [pc, #384]	@ (801a508 <_strtod_l+0xb00>)
 801a388:	2200      	movs	r2, #0
 801a38a:	f7e6 f90d 	bl	80005a8 <__aeabi_dmul>
 801a38e:	4606      	mov	r6, r0
 801a390:	460f      	mov	r7, r1
 801a392:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 801a396:	9606      	str	r6, [sp, #24]
 801a398:	9307      	str	r3, [sp, #28]
 801a39a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801a39e:	4d57      	ldr	r5, [pc, #348]	@ (801a4fc <_strtod_l+0xaf4>)
 801a3a0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 801a3a4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801a3a6:	401d      	ands	r5, r3
 801a3a8:	4b58      	ldr	r3, [pc, #352]	@ (801a50c <_strtod_l+0xb04>)
 801a3aa:	429d      	cmp	r5, r3
 801a3ac:	f040 80b2 	bne.w	801a514 <_strtod_l+0xb0c>
 801a3b0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801a3b2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 801a3b6:	ec4b ab10 	vmov	d0, sl, fp
 801a3ba:	f003 f86b 	bl	801d494 <__ulp>
 801a3be:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801a3c2:	ec51 0b10 	vmov	r0, r1, d0
 801a3c6:	f7e6 f8ef 	bl	80005a8 <__aeabi_dmul>
 801a3ca:	4652      	mov	r2, sl
 801a3cc:	465b      	mov	r3, fp
 801a3ce:	f7e5 ff35 	bl	800023c <__adddf3>
 801a3d2:	460b      	mov	r3, r1
 801a3d4:	4949      	ldr	r1, [pc, #292]	@ (801a4fc <_strtod_l+0xaf4>)
 801a3d6:	4a4e      	ldr	r2, [pc, #312]	@ (801a510 <_strtod_l+0xb08>)
 801a3d8:	4019      	ands	r1, r3
 801a3da:	4291      	cmp	r1, r2
 801a3dc:	4682      	mov	sl, r0
 801a3de:	d942      	bls.n	801a466 <_strtod_l+0xa5e>
 801a3e0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801a3e2:	4b47      	ldr	r3, [pc, #284]	@ (801a500 <_strtod_l+0xaf8>)
 801a3e4:	429a      	cmp	r2, r3
 801a3e6:	d103      	bne.n	801a3f0 <_strtod_l+0x9e8>
 801a3e8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801a3ea:	3301      	adds	r3, #1
 801a3ec:	f43f ad2b 	beq.w	8019e46 <_strtod_l+0x43e>
 801a3f0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 801a500 <_strtod_l+0xaf8>
 801a3f4:	f04f 3aff 	mov.w	sl, #4294967295
 801a3f8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801a3fa:	9805      	ldr	r0, [sp, #20]
 801a3fc:	f002 fd16 	bl	801ce2c <_Bfree>
 801a400:	9805      	ldr	r0, [sp, #20]
 801a402:	4649      	mov	r1, r9
 801a404:	f002 fd12 	bl	801ce2c <_Bfree>
 801a408:	9805      	ldr	r0, [sp, #20]
 801a40a:	4641      	mov	r1, r8
 801a40c:	f002 fd0e 	bl	801ce2c <_Bfree>
 801a410:	9805      	ldr	r0, [sp, #20]
 801a412:	4621      	mov	r1, r4
 801a414:	f002 fd0a 	bl	801ce2c <_Bfree>
 801a418:	e618      	b.n	801a04c <_strtod_l+0x644>
 801a41a:	f1ba 0f01 	cmp.w	sl, #1
 801a41e:	d103      	bne.n	801a428 <_strtod_l+0xa20>
 801a420:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801a422:	2b00      	cmp	r3, #0
 801a424:	f43f ada5 	beq.w	8019f72 <_strtod_l+0x56a>
 801a428:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 801a4d8 <_strtod_l+0xad0>
 801a42c:	4f35      	ldr	r7, [pc, #212]	@ (801a504 <_strtod_l+0xafc>)
 801a42e:	ed8d 7b06 	vstr	d7, [sp, #24]
 801a432:	2600      	movs	r6, #0
 801a434:	e7b1      	b.n	801a39a <_strtod_l+0x992>
 801a436:	4f34      	ldr	r7, [pc, #208]	@ (801a508 <_strtod_l+0xb00>)
 801a438:	2600      	movs	r6, #0
 801a43a:	e7aa      	b.n	801a392 <_strtod_l+0x98a>
 801a43c:	4b32      	ldr	r3, [pc, #200]	@ (801a508 <_strtod_l+0xb00>)
 801a43e:	4630      	mov	r0, r6
 801a440:	4639      	mov	r1, r7
 801a442:	2200      	movs	r2, #0
 801a444:	f7e6 f8b0 	bl	80005a8 <__aeabi_dmul>
 801a448:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801a44a:	4606      	mov	r6, r0
 801a44c:	460f      	mov	r7, r1
 801a44e:	2b00      	cmp	r3, #0
 801a450:	d09f      	beq.n	801a392 <_strtod_l+0x98a>
 801a452:	e9cd 6706 	strd	r6, r7, [sp, #24]
 801a456:	e7a0      	b.n	801a39a <_strtod_l+0x992>
 801a458:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 801a4e0 <_strtod_l+0xad8>
 801a45c:	ed8d 7b06 	vstr	d7, [sp, #24]
 801a460:	ec57 6b17 	vmov	r6, r7, d7
 801a464:	e799      	b.n	801a39a <_strtod_l+0x992>
 801a466:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 801a46a:	9b08      	ldr	r3, [sp, #32]
 801a46c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 801a470:	2b00      	cmp	r3, #0
 801a472:	d1c1      	bne.n	801a3f8 <_strtod_l+0x9f0>
 801a474:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801a478:	0d1b      	lsrs	r3, r3, #20
 801a47a:	051b      	lsls	r3, r3, #20
 801a47c:	429d      	cmp	r5, r3
 801a47e:	d1bb      	bne.n	801a3f8 <_strtod_l+0x9f0>
 801a480:	4630      	mov	r0, r6
 801a482:	4639      	mov	r1, r7
 801a484:	f7e6 fbf0 	bl	8000c68 <__aeabi_d2lz>
 801a488:	f7e6 f860 	bl	800054c <__aeabi_l2d>
 801a48c:	4602      	mov	r2, r0
 801a48e:	460b      	mov	r3, r1
 801a490:	4630      	mov	r0, r6
 801a492:	4639      	mov	r1, r7
 801a494:	f7e5 fed0 	bl	8000238 <__aeabi_dsub>
 801a498:	460b      	mov	r3, r1
 801a49a:	4602      	mov	r2, r0
 801a49c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 801a4a0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 801a4a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801a4a6:	ea46 060a 	orr.w	r6, r6, sl
 801a4aa:	431e      	orrs	r6, r3
 801a4ac:	d06f      	beq.n	801a58e <_strtod_l+0xb86>
 801a4ae:	a30e      	add	r3, pc, #56	@ (adr r3, 801a4e8 <_strtod_l+0xae0>)
 801a4b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a4b4:	f7e6 faea 	bl	8000a8c <__aeabi_dcmplt>
 801a4b8:	2800      	cmp	r0, #0
 801a4ba:	f47f accf 	bne.w	8019e5c <_strtod_l+0x454>
 801a4be:	a30c      	add	r3, pc, #48	@ (adr r3, 801a4f0 <_strtod_l+0xae8>)
 801a4c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a4c4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801a4c8:	f7e6 fafe 	bl	8000ac8 <__aeabi_dcmpgt>
 801a4cc:	2800      	cmp	r0, #0
 801a4ce:	d093      	beq.n	801a3f8 <_strtod_l+0x9f0>
 801a4d0:	e4c4      	b.n	8019e5c <_strtod_l+0x454>
 801a4d2:	bf00      	nop
 801a4d4:	f3af 8000 	nop.w
 801a4d8:	00000000 	.word	0x00000000
 801a4dc:	bff00000 	.word	0xbff00000
 801a4e0:	00000000 	.word	0x00000000
 801a4e4:	3ff00000 	.word	0x3ff00000
 801a4e8:	94a03595 	.word	0x94a03595
 801a4ec:	3fdfffff 	.word	0x3fdfffff
 801a4f0:	35afe535 	.word	0x35afe535
 801a4f4:	3fe00000 	.word	0x3fe00000
 801a4f8:	000fffff 	.word	0x000fffff
 801a4fc:	7ff00000 	.word	0x7ff00000
 801a500:	7fefffff 	.word	0x7fefffff
 801a504:	3ff00000 	.word	0x3ff00000
 801a508:	3fe00000 	.word	0x3fe00000
 801a50c:	7fe00000 	.word	0x7fe00000
 801a510:	7c9fffff 	.word	0x7c9fffff
 801a514:	9b08      	ldr	r3, [sp, #32]
 801a516:	b323      	cbz	r3, 801a562 <_strtod_l+0xb5a>
 801a518:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 801a51c:	d821      	bhi.n	801a562 <_strtod_l+0xb5a>
 801a51e:	a328      	add	r3, pc, #160	@ (adr r3, 801a5c0 <_strtod_l+0xbb8>)
 801a520:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a524:	4630      	mov	r0, r6
 801a526:	4639      	mov	r1, r7
 801a528:	f7e6 faba 	bl	8000aa0 <__aeabi_dcmple>
 801a52c:	b1a0      	cbz	r0, 801a558 <_strtod_l+0xb50>
 801a52e:	4639      	mov	r1, r7
 801a530:	4630      	mov	r0, r6
 801a532:	f7e6 fb11 	bl	8000b58 <__aeabi_d2uiz>
 801a536:	2801      	cmp	r0, #1
 801a538:	bf38      	it	cc
 801a53a:	2001      	movcc	r0, #1
 801a53c:	f7e5 ffba 	bl	80004b4 <__aeabi_ui2d>
 801a540:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801a542:	4606      	mov	r6, r0
 801a544:	460f      	mov	r7, r1
 801a546:	b9fb      	cbnz	r3, 801a588 <_strtod_l+0xb80>
 801a548:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801a54c:	9014      	str	r0, [sp, #80]	@ 0x50
 801a54e:	9315      	str	r3, [sp, #84]	@ 0x54
 801a550:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 801a554:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 801a558:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801a55a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 801a55e:	1b5b      	subs	r3, r3, r5
 801a560:	9311      	str	r3, [sp, #68]	@ 0x44
 801a562:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801a566:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 801a56a:	f002 ff93 	bl	801d494 <__ulp>
 801a56e:	4650      	mov	r0, sl
 801a570:	ec53 2b10 	vmov	r2, r3, d0
 801a574:	4659      	mov	r1, fp
 801a576:	f7e6 f817 	bl	80005a8 <__aeabi_dmul>
 801a57a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 801a57e:	f7e5 fe5d 	bl	800023c <__adddf3>
 801a582:	4682      	mov	sl, r0
 801a584:	468b      	mov	fp, r1
 801a586:	e770      	b.n	801a46a <_strtod_l+0xa62>
 801a588:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 801a58c:	e7e0      	b.n	801a550 <_strtod_l+0xb48>
 801a58e:	a30e      	add	r3, pc, #56	@ (adr r3, 801a5c8 <_strtod_l+0xbc0>)
 801a590:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a594:	f7e6 fa7a 	bl	8000a8c <__aeabi_dcmplt>
 801a598:	e798      	b.n	801a4cc <_strtod_l+0xac4>
 801a59a:	2300      	movs	r3, #0
 801a59c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801a59e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 801a5a0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801a5a2:	6013      	str	r3, [r2, #0]
 801a5a4:	f7ff ba6d 	b.w	8019a82 <_strtod_l+0x7a>
 801a5a8:	2a65      	cmp	r2, #101	@ 0x65
 801a5aa:	f43f ab66 	beq.w	8019c7a <_strtod_l+0x272>
 801a5ae:	2a45      	cmp	r2, #69	@ 0x45
 801a5b0:	f43f ab63 	beq.w	8019c7a <_strtod_l+0x272>
 801a5b4:	2301      	movs	r3, #1
 801a5b6:	f7ff bb9e 	b.w	8019cf6 <_strtod_l+0x2ee>
 801a5ba:	bf00      	nop
 801a5bc:	f3af 8000 	nop.w
 801a5c0:	ffc00000 	.word	0xffc00000
 801a5c4:	41dfffff 	.word	0x41dfffff
 801a5c8:	94a03595 	.word	0x94a03595
 801a5cc:	3fcfffff 	.word	0x3fcfffff

0801a5d0 <_strtod_r>:
 801a5d0:	4b01      	ldr	r3, [pc, #4]	@ (801a5d8 <_strtod_r+0x8>)
 801a5d2:	f7ff ba19 	b.w	8019a08 <_strtod_l>
 801a5d6:	bf00      	nop
 801a5d8:	20000154 	.word	0x20000154

0801a5dc <strtof>:
 801a5dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a5e0:	f8df 80bc 	ldr.w	r8, [pc, #188]	@ 801a6a0 <strtof+0xc4>
 801a5e4:	4b29      	ldr	r3, [pc, #164]	@ (801a68c <strtof+0xb0>)
 801a5e6:	460a      	mov	r2, r1
 801a5e8:	ed2d 8b02 	vpush	{d8}
 801a5ec:	4601      	mov	r1, r0
 801a5ee:	f8d8 0000 	ldr.w	r0, [r8]
 801a5f2:	f7ff fa09 	bl	8019a08 <_strtod_l>
 801a5f6:	ec55 4b10 	vmov	r4, r5, d0
 801a5fa:	4622      	mov	r2, r4
 801a5fc:	462b      	mov	r3, r5
 801a5fe:	4620      	mov	r0, r4
 801a600:	4629      	mov	r1, r5
 801a602:	f7e6 fa6b 	bl	8000adc <__aeabi_dcmpun>
 801a606:	b190      	cbz	r0, 801a62e <strtof+0x52>
 801a608:	2d00      	cmp	r5, #0
 801a60a:	4821      	ldr	r0, [pc, #132]	@ (801a690 <strtof+0xb4>)
 801a60c:	da09      	bge.n	801a622 <strtof+0x46>
 801a60e:	f001 f9c7 	bl	801b9a0 <nanf>
 801a612:	eeb1 8a40 	vneg.f32	s16, s0
 801a616:	eeb0 0a48 	vmov.f32	s0, s16
 801a61a:	ecbd 8b02 	vpop	{d8}
 801a61e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a622:	ecbd 8b02 	vpop	{d8}
 801a626:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a62a:	f001 b9b9 	b.w	801b9a0 <nanf>
 801a62e:	4620      	mov	r0, r4
 801a630:	4629      	mov	r1, r5
 801a632:	f7e6 fab1 	bl	8000b98 <__aeabi_d2f>
 801a636:	ee08 0a10 	vmov	s16, r0
 801a63a:	eddf 7a16 	vldr	s15, [pc, #88]	@ 801a694 <strtof+0xb8>
 801a63e:	eeb0 7ac8 	vabs.f32	s14, s16
 801a642:	eeb4 7a67 	vcmp.f32	s14, s15
 801a646:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a64a:	dd11      	ble.n	801a670 <strtof+0x94>
 801a64c:	f025 4700 	bic.w	r7, r5, #2147483648	@ 0x80000000
 801a650:	4b11      	ldr	r3, [pc, #68]	@ (801a698 <strtof+0xbc>)
 801a652:	f04f 32ff 	mov.w	r2, #4294967295
 801a656:	4620      	mov	r0, r4
 801a658:	4639      	mov	r1, r7
 801a65a:	f7e6 fa3f 	bl	8000adc <__aeabi_dcmpun>
 801a65e:	b980      	cbnz	r0, 801a682 <strtof+0xa6>
 801a660:	4b0d      	ldr	r3, [pc, #52]	@ (801a698 <strtof+0xbc>)
 801a662:	f04f 32ff 	mov.w	r2, #4294967295
 801a666:	4620      	mov	r0, r4
 801a668:	4639      	mov	r1, r7
 801a66a:	f7e6 fa19 	bl	8000aa0 <__aeabi_dcmple>
 801a66e:	b940      	cbnz	r0, 801a682 <strtof+0xa6>
 801a670:	ee18 3a10 	vmov	r3, s16
 801a674:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 801a678:	d1cd      	bne.n	801a616 <strtof+0x3a>
 801a67a:	4b08      	ldr	r3, [pc, #32]	@ (801a69c <strtof+0xc0>)
 801a67c:	402b      	ands	r3, r5
 801a67e:	2b00      	cmp	r3, #0
 801a680:	d0c9      	beq.n	801a616 <strtof+0x3a>
 801a682:	f8d8 3000 	ldr.w	r3, [r8]
 801a686:	2222      	movs	r2, #34	@ 0x22
 801a688:	601a      	str	r2, [r3, #0]
 801a68a:	e7c4      	b.n	801a616 <strtof+0x3a>
 801a68c:	20000154 	.word	0x20000154
 801a690:	08022506 	.word	0x08022506
 801a694:	7f7fffff 	.word	0x7f7fffff
 801a698:	7fefffff 	.word	0x7fefffff
 801a69c:	7ff00000 	.word	0x7ff00000
 801a6a0:	200002c0 	.word	0x200002c0

0801a6a4 <_strtol_l.constprop.0>:
 801a6a4:	2b24      	cmp	r3, #36	@ 0x24
 801a6a6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a6aa:	4686      	mov	lr, r0
 801a6ac:	4690      	mov	r8, r2
 801a6ae:	d801      	bhi.n	801a6b4 <_strtol_l.constprop.0+0x10>
 801a6b0:	2b01      	cmp	r3, #1
 801a6b2:	d106      	bne.n	801a6c2 <_strtol_l.constprop.0+0x1e>
 801a6b4:	f001 f928 	bl	801b908 <__errno>
 801a6b8:	2316      	movs	r3, #22
 801a6ba:	6003      	str	r3, [r0, #0]
 801a6bc:	2000      	movs	r0, #0
 801a6be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a6c2:	4834      	ldr	r0, [pc, #208]	@ (801a794 <_strtol_l.constprop.0+0xf0>)
 801a6c4:	460d      	mov	r5, r1
 801a6c6:	462a      	mov	r2, r5
 801a6c8:	f815 4b01 	ldrb.w	r4, [r5], #1
 801a6cc:	5d06      	ldrb	r6, [r0, r4]
 801a6ce:	f016 0608 	ands.w	r6, r6, #8
 801a6d2:	d1f8      	bne.n	801a6c6 <_strtol_l.constprop.0+0x22>
 801a6d4:	2c2d      	cmp	r4, #45	@ 0x2d
 801a6d6:	d12d      	bne.n	801a734 <_strtol_l.constprop.0+0x90>
 801a6d8:	782c      	ldrb	r4, [r5, #0]
 801a6da:	2601      	movs	r6, #1
 801a6dc:	1c95      	adds	r5, r2, #2
 801a6de:	f033 0210 	bics.w	r2, r3, #16
 801a6e2:	d109      	bne.n	801a6f8 <_strtol_l.constprop.0+0x54>
 801a6e4:	2c30      	cmp	r4, #48	@ 0x30
 801a6e6:	d12a      	bne.n	801a73e <_strtol_l.constprop.0+0x9a>
 801a6e8:	782a      	ldrb	r2, [r5, #0]
 801a6ea:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801a6ee:	2a58      	cmp	r2, #88	@ 0x58
 801a6f0:	d125      	bne.n	801a73e <_strtol_l.constprop.0+0x9a>
 801a6f2:	786c      	ldrb	r4, [r5, #1]
 801a6f4:	2310      	movs	r3, #16
 801a6f6:	3502      	adds	r5, #2
 801a6f8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 801a6fc:	f10c 3cff 	add.w	ip, ip, #4294967295
 801a700:	2200      	movs	r2, #0
 801a702:	fbbc f9f3 	udiv	r9, ip, r3
 801a706:	4610      	mov	r0, r2
 801a708:	fb03 ca19 	mls	sl, r3, r9, ip
 801a70c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 801a710:	2f09      	cmp	r7, #9
 801a712:	d81b      	bhi.n	801a74c <_strtol_l.constprop.0+0xa8>
 801a714:	463c      	mov	r4, r7
 801a716:	42a3      	cmp	r3, r4
 801a718:	dd27      	ble.n	801a76a <_strtol_l.constprop.0+0xc6>
 801a71a:	1c57      	adds	r7, r2, #1
 801a71c:	d007      	beq.n	801a72e <_strtol_l.constprop.0+0x8a>
 801a71e:	4581      	cmp	r9, r0
 801a720:	d320      	bcc.n	801a764 <_strtol_l.constprop.0+0xc0>
 801a722:	d101      	bne.n	801a728 <_strtol_l.constprop.0+0x84>
 801a724:	45a2      	cmp	sl, r4
 801a726:	db1d      	blt.n	801a764 <_strtol_l.constprop.0+0xc0>
 801a728:	fb00 4003 	mla	r0, r0, r3, r4
 801a72c:	2201      	movs	r2, #1
 801a72e:	f815 4b01 	ldrb.w	r4, [r5], #1
 801a732:	e7eb      	b.n	801a70c <_strtol_l.constprop.0+0x68>
 801a734:	2c2b      	cmp	r4, #43	@ 0x2b
 801a736:	bf04      	itt	eq
 801a738:	782c      	ldrbeq	r4, [r5, #0]
 801a73a:	1c95      	addeq	r5, r2, #2
 801a73c:	e7cf      	b.n	801a6de <_strtol_l.constprop.0+0x3a>
 801a73e:	2b00      	cmp	r3, #0
 801a740:	d1da      	bne.n	801a6f8 <_strtol_l.constprop.0+0x54>
 801a742:	2c30      	cmp	r4, #48	@ 0x30
 801a744:	bf0c      	ite	eq
 801a746:	2308      	moveq	r3, #8
 801a748:	230a      	movne	r3, #10
 801a74a:	e7d5      	b.n	801a6f8 <_strtol_l.constprop.0+0x54>
 801a74c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 801a750:	2f19      	cmp	r7, #25
 801a752:	d801      	bhi.n	801a758 <_strtol_l.constprop.0+0xb4>
 801a754:	3c37      	subs	r4, #55	@ 0x37
 801a756:	e7de      	b.n	801a716 <_strtol_l.constprop.0+0x72>
 801a758:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 801a75c:	2f19      	cmp	r7, #25
 801a75e:	d804      	bhi.n	801a76a <_strtol_l.constprop.0+0xc6>
 801a760:	3c57      	subs	r4, #87	@ 0x57
 801a762:	e7d8      	b.n	801a716 <_strtol_l.constprop.0+0x72>
 801a764:	f04f 32ff 	mov.w	r2, #4294967295
 801a768:	e7e1      	b.n	801a72e <_strtol_l.constprop.0+0x8a>
 801a76a:	1c53      	adds	r3, r2, #1
 801a76c:	d108      	bne.n	801a780 <_strtol_l.constprop.0+0xdc>
 801a76e:	2322      	movs	r3, #34	@ 0x22
 801a770:	f8ce 3000 	str.w	r3, [lr]
 801a774:	4660      	mov	r0, ip
 801a776:	f1b8 0f00 	cmp.w	r8, #0
 801a77a:	d0a0      	beq.n	801a6be <_strtol_l.constprop.0+0x1a>
 801a77c:	1e69      	subs	r1, r5, #1
 801a77e:	e006      	b.n	801a78e <_strtol_l.constprop.0+0xea>
 801a780:	b106      	cbz	r6, 801a784 <_strtol_l.constprop.0+0xe0>
 801a782:	4240      	negs	r0, r0
 801a784:	f1b8 0f00 	cmp.w	r8, #0
 801a788:	d099      	beq.n	801a6be <_strtol_l.constprop.0+0x1a>
 801a78a:	2a00      	cmp	r2, #0
 801a78c:	d1f6      	bne.n	801a77c <_strtol_l.constprop.0+0xd8>
 801a78e:	f8c8 1000 	str.w	r1, [r8]
 801a792:	e794      	b.n	801a6be <_strtol_l.constprop.0+0x1a>
 801a794:	08022319 	.word	0x08022319

0801a798 <_strtol_r>:
 801a798:	f7ff bf84 	b.w	801a6a4 <_strtol_l.constprop.0>

0801a79c <strtol>:
 801a79c:	4613      	mov	r3, r2
 801a79e:	460a      	mov	r2, r1
 801a7a0:	4601      	mov	r1, r0
 801a7a2:	4802      	ldr	r0, [pc, #8]	@ (801a7ac <strtol+0x10>)
 801a7a4:	6800      	ldr	r0, [r0, #0]
 801a7a6:	f7ff bf7d 	b.w	801a6a4 <_strtol_l.constprop.0>
 801a7aa:	bf00      	nop
 801a7ac:	200002c0 	.word	0x200002c0

0801a7b0 <__cvt>:
 801a7b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801a7b4:	ec57 6b10 	vmov	r6, r7, d0
 801a7b8:	2f00      	cmp	r7, #0
 801a7ba:	460c      	mov	r4, r1
 801a7bc:	4619      	mov	r1, r3
 801a7be:	463b      	mov	r3, r7
 801a7c0:	bfbb      	ittet	lt
 801a7c2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 801a7c6:	461f      	movlt	r7, r3
 801a7c8:	2300      	movge	r3, #0
 801a7ca:	232d      	movlt	r3, #45	@ 0x2d
 801a7cc:	700b      	strb	r3, [r1, #0]
 801a7ce:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801a7d0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 801a7d4:	4691      	mov	r9, r2
 801a7d6:	f023 0820 	bic.w	r8, r3, #32
 801a7da:	bfbc      	itt	lt
 801a7dc:	4632      	movlt	r2, r6
 801a7de:	4616      	movlt	r6, r2
 801a7e0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801a7e4:	d005      	beq.n	801a7f2 <__cvt+0x42>
 801a7e6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 801a7ea:	d100      	bne.n	801a7ee <__cvt+0x3e>
 801a7ec:	3401      	adds	r4, #1
 801a7ee:	2102      	movs	r1, #2
 801a7f0:	e000      	b.n	801a7f4 <__cvt+0x44>
 801a7f2:	2103      	movs	r1, #3
 801a7f4:	ab03      	add	r3, sp, #12
 801a7f6:	9301      	str	r3, [sp, #4]
 801a7f8:	ab02      	add	r3, sp, #8
 801a7fa:	9300      	str	r3, [sp, #0]
 801a7fc:	ec47 6b10 	vmov	d0, r6, r7
 801a800:	4653      	mov	r3, sl
 801a802:	4622      	mov	r2, r4
 801a804:	f001 f978 	bl	801baf8 <_dtoa_r>
 801a808:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 801a80c:	4605      	mov	r5, r0
 801a80e:	d119      	bne.n	801a844 <__cvt+0x94>
 801a810:	f019 0f01 	tst.w	r9, #1
 801a814:	d00e      	beq.n	801a834 <__cvt+0x84>
 801a816:	eb00 0904 	add.w	r9, r0, r4
 801a81a:	2200      	movs	r2, #0
 801a81c:	2300      	movs	r3, #0
 801a81e:	4630      	mov	r0, r6
 801a820:	4639      	mov	r1, r7
 801a822:	f7e6 f929 	bl	8000a78 <__aeabi_dcmpeq>
 801a826:	b108      	cbz	r0, 801a82c <__cvt+0x7c>
 801a828:	f8cd 900c 	str.w	r9, [sp, #12]
 801a82c:	2230      	movs	r2, #48	@ 0x30
 801a82e:	9b03      	ldr	r3, [sp, #12]
 801a830:	454b      	cmp	r3, r9
 801a832:	d31e      	bcc.n	801a872 <__cvt+0xc2>
 801a834:	9b03      	ldr	r3, [sp, #12]
 801a836:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801a838:	1b5b      	subs	r3, r3, r5
 801a83a:	4628      	mov	r0, r5
 801a83c:	6013      	str	r3, [r2, #0]
 801a83e:	b004      	add	sp, #16
 801a840:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a844:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801a848:	eb00 0904 	add.w	r9, r0, r4
 801a84c:	d1e5      	bne.n	801a81a <__cvt+0x6a>
 801a84e:	7803      	ldrb	r3, [r0, #0]
 801a850:	2b30      	cmp	r3, #48	@ 0x30
 801a852:	d10a      	bne.n	801a86a <__cvt+0xba>
 801a854:	2200      	movs	r2, #0
 801a856:	2300      	movs	r3, #0
 801a858:	4630      	mov	r0, r6
 801a85a:	4639      	mov	r1, r7
 801a85c:	f7e6 f90c 	bl	8000a78 <__aeabi_dcmpeq>
 801a860:	b918      	cbnz	r0, 801a86a <__cvt+0xba>
 801a862:	f1c4 0401 	rsb	r4, r4, #1
 801a866:	f8ca 4000 	str.w	r4, [sl]
 801a86a:	f8da 3000 	ldr.w	r3, [sl]
 801a86e:	4499      	add	r9, r3
 801a870:	e7d3      	b.n	801a81a <__cvt+0x6a>
 801a872:	1c59      	adds	r1, r3, #1
 801a874:	9103      	str	r1, [sp, #12]
 801a876:	701a      	strb	r2, [r3, #0]
 801a878:	e7d9      	b.n	801a82e <__cvt+0x7e>

0801a87a <__exponent>:
 801a87a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801a87c:	2900      	cmp	r1, #0
 801a87e:	bfba      	itte	lt
 801a880:	4249      	neglt	r1, r1
 801a882:	232d      	movlt	r3, #45	@ 0x2d
 801a884:	232b      	movge	r3, #43	@ 0x2b
 801a886:	2909      	cmp	r1, #9
 801a888:	7002      	strb	r2, [r0, #0]
 801a88a:	7043      	strb	r3, [r0, #1]
 801a88c:	dd29      	ble.n	801a8e2 <__exponent+0x68>
 801a88e:	f10d 0307 	add.w	r3, sp, #7
 801a892:	461d      	mov	r5, r3
 801a894:	270a      	movs	r7, #10
 801a896:	461a      	mov	r2, r3
 801a898:	fbb1 f6f7 	udiv	r6, r1, r7
 801a89c:	fb07 1416 	mls	r4, r7, r6, r1
 801a8a0:	3430      	adds	r4, #48	@ 0x30
 801a8a2:	f802 4c01 	strb.w	r4, [r2, #-1]
 801a8a6:	460c      	mov	r4, r1
 801a8a8:	2c63      	cmp	r4, #99	@ 0x63
 801a8aa:	f103 33ff 	add.w	r3, r3, #4294967295
 801a8ae:	4631      	mov	r1, r6
 801a8b0:	dcf1      	bgt.n	801a896 <__exponent+0x1c>
 801a8b2:	3130      	adds	r1, #48	@ 0x30
 801a8b4:	1e94      	subs	r4, r2, #2
 801a8b6:	f803 1c01 	strb.w	r1, [r3, #-1]
 801a8ba:	1c41      	adds	r1, r0, #1
 801a8bc:	4623      	mov	r3, r4
 801a8be:	42ab      	cmp	r3, r5
 801a8c0:	d30a      	bcc.n	801a8d8 <__exponent+0x5e>
 801a8c2:	f10d 0309 	add.w	r3, sp, #9
 801a8c6:	1a9b      	subs	r3, r3, r2
 801a8c8:	42ac      	cmp	r4, r5
 801a8ca:	bf88      	it	hi
 801a8cc:	2300      	movhi	r3, #0
 801a8ce:	3302      	adds	r3, #2
 801a8d0:	4403      	add	r3, r0
 801a8d2:	1a18      	subs	r0, r3, r0
 801a8d4:	b003      	add	sp, #12
 801a8d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a8d8:	f813 6b01 	ldrb.w	r6, [r3], #1
 801a8dc:	f801 6f01 	strb.w	r6, [r1, #1]!
 801a8e0:	e7ed      	b.n	801a8be <__exponent+0x44>
 801a8e2:	2330      	movs	r3, #48	@ 0x30
 801a8e4:	3130      	adds	r1, #48	@ 0x30
 801a8e6:	7083      	strb	r3, [r0, #2]
 801a8e8:	70c1      	strb	r1, [r0, #3]
 801a8ea:	1d03      	adds	r3, r0, #4
 801a8ec:	e7f1      	b.n	801a8d2 <__exponent+0x58>
	...

0801a8f0 <_printf_float>:
 801a8f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a8f4:	b08d      	sub	sp, #52	@ 0x34
 801a8f6:	460c      	mov	r4, r1
 801a8f8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 801a8fc:	4616      	mov	r6, r2
 801a8fe:	461f      	mov	r7, r3
 801a900:	4605      	mov	r5, r0
 801a902:	f000 ffa7 	bl	801b854 <_localeconv_r>
 801a906:	6803      	ldr	r3, [r0, #0]
 801a908:	9304      	str	r3, [sp, #16]
 801a90a:	4618      	mov	r0, r3
 801a90c:	f7e5 fc88 	bl	8000220 <strlen>
 801a910:	2300      	movs	r3, #0
 801a912:	930a      	str	r3, [sp, #40]	@ 0x28
 801a914:	f8d8 3000 	ldr.w	r3, [r8]
 801a918:	9005      	str	r0, [sp, #20]
 801a91a:	3307      	adds	r3, #7
 801a91c:	f023 0307 	bic.w	r3, r3, #7
 801a920:	f103 0208 	add.w	r2, r3, #8
 801a924:	f894 a018 	ldrb.w	sl, [r4, #24]
 801a928:	f8d4 b000 	ldr.w	fp, [r4]
 801a92c:	f8c8 2000 	str.w	r2, [r8]
 801a930:	e9d3 8900 	ldrd	r8, r9, [r3]
 801a934:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 801a938:	9307      	str	r3, [sp, #28]
 801a93a:	f8cd 8018 	str.w	r8, [sp, #24]
 801a93e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 801a942:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801a946:	4b9c      	ldr	r3, [pc, #624]	@ (801abb8 <_printf_float+0x2c8>)
 801a948:	f04f 32ff 	mov.w	r2, #4294967295
 801a94c:	f7e6 f8c6 	bl	8000adc <__aeabi_dcmpun>
 801a950:	bb70      	cbnz	r0, 801a9b0 <_printf_float+0xc0>
 801a952:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801a956:	4b98      	ldr	r3, [pc, #608]	@ (801abb8 <_printf_float+0x2c8>)
 801a958:	f04f 32ff 	mov.w	r2, #4294967295
 801a95c:	f7e6 f8a0 	bl	8000aa0 <__aeabi_dcmple>
 801a960:	bb30      	cbnz	r0, 801a9b0 <_printf_float+0xc0>
 801a962:	2200      	movs	r2, #0
 801a964:	2300      	movs	r3, #0
 801a966:	4640      	mov	r0, r8
 801a968:	4649      	mov	r1, r9
 801a96a:	f7e6 f88f 	bl	8000a8c <__aeabi_dcmplt>
 801a96e:	b110      	cbz	r0, 801a976 <_printf_float+0x86>
 801a970:	232d      	movs	r3, #45	@ 0x2d
 801a972:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801a976:	4a91      	ldr	r2, [pc, #580]	@ (801abbc <_printf_float+0x2cc>)
 801a978:	4b91      	ldr	r3, [pc, #580]	@ (801abc0 <_printf_float+0x2d0>)
 801a97a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801a97e:	bf94      	ite	ls
 801a980:	4690      	movls	r8, r2
 801a982:	4698      	movhi	r8, r3
 801a984:	2303      	movs	r3, #3
 801a986:	6123      	str	r3, [r4, #16]
 801a988:	f02b 0304 	bic.w	r3, fp, #4
 801a98c:	6023      	str	r3, [r4, #0]
 801a98e:	f04f 0900 	mov.w	r9, #0
 801a992:	9700      	str	r7, [sp, #0]
 801a994:	4633      	mov	r3, r6
 801a996:	aa0b      	add	r2, sp, #44	@ 0x2c
 801a998:	4621      	mov	r1, r4
 801a99a:	4628      	mov	r0, r5
 801a99c:	f000 f9d2 	bl	801ad44 <_printf_common>
 801a9a0:	3001      	adds	r0, #1
 801a9a2:	f040 808d 	bne.w	801aac0 <_printf_float+0x1d0>
 801a9a6:	f04f 30ff 	mov.w	r0, #4294967295
 801a9aa:	b00d      	add	sp, #52	@ 0x34
 801a9ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a9b0:	4642      	mov	r2, r8
 801a9b2:	464b      	mov	r3, r9
 801a9b4:	4640      	mov	r0, r8
 801a9b6:	4649      	mov	r1, r9
 801a9b8:	f7e6 f890 	bl	8000adc <__aeabi_dcmpun>
 801a9bc:	b140      	cbz	r0, 801a9d0 <_printf_float+0xe0>
 801a9be:	464b      	mov	r3, r9
 801a9c0:	2b00      	cmp	r3, #0
 801a9c2:	bfbc      	itt	lt
 801a9c4:	232d      	movlt	r3, #45	@ 0x2d
 801a9c6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 801a9ca:	4a7e      	ldr	r2, [pc, #504]	@ (801abc4 <_printf_float+0x2d4>)
 801a9cc:	4b7e      	ldr	r3, [pc, #504]	@ (801abc8 <_printf_float+0x2d8>)
 801a9ce:	e7d4      	b.n	801a97a <_printf_float+0x8a>
 801a9d0:	6863      	ldr	r3, [r4, #4]
 801a9d2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 801a9d6:	9206      	str	r2, [sp, #24]
 801a9d8:	1c5a      	adds	r2, r3, #1
 801a9da:	d13b      	bne.n	801aa54 <_printf_float+0x164>
 801a9dc:	2306      	movs	r3, #6
 801a9de:	6063      	str	r3, [r4, #4]
 801a9e0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 801a9e4:	2300      	movs	r3, #0
 801a9e6:	6022      	str	r2, [r4, #0]
 801a9e8:	9303      	str	r3, [sp, #12]
 801a9ea:	ab0a      	add	r3, sp, #40	@ 0x28
 801a9ec:	e9cd a301 	strd	sl, r3, [sp, #4]
 801a9f0:	ab09      	add	r3, sp, #36	@ 0x24
 801a9f2:	9300      	str	r3, [sp, #0]
 801a9f4:	6861      	ldr	r1, [r4, #4]
 801a9f6:	ec49 8b10 	vmov	d0, r8, r9
 801a9fa:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 801a9fe:	4628      	mov	r0, r5
 801aa00:	f7ff fed6 	bl	801a7b0 <__cvt>
 801aa04:	9b06      	ldr	r3, [sp, #24]
 801aa06:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801aa08:	2b47      	cmp	r3, #71	@ 0x47
 801aa0a:	4680      	mov	r8, r0
 801aa0c:	d129      	bne.n	801aa62 <_printf_float+0x172>
 801aa0e:	1cc8      	adds	r0, r1, #3
 801aa10:	db02      	blt.n	801aa18 <_printf_float+0x128>
 801aa12:	6863      	ldr	r3, [r4, #4]
 801aa14:	4299      	cmp	r1, r3
 801aa16:	dd41      	ble.n	801aa9c <_printf_float+0x1ac>
 801aa18:	f1aa 0a02 	sub.w	sl, sl, #2
 801aa1c:	fa5f fa8a 	uxtb.w	sl, sl
 801aa20:	3901      	subs	r1, #1
 801aa22:	4652      	mov	r2, sl
 801aa24:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 801aa28:	9109      	str	r1, [sp, #36]	@ 0x24
 801aa2a:	f7ff ff26 	bl	801a87a <__exponent>
 801aa2e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801aa30:	1813      	adds	r3, r2, r0
 801aa32:	2a01      	cmp	r2, #1
 801aa34:	4681      	mov	r9, r0
 801aa36:	6123      	str	r3, [r4, #16]
 801aa38:	dc02      	bgt.n	801aa40 <_printf_float+0x150>
 801aa3a:	6822      	ldr	r2, [r4, #0]
 801aa3c:	07d2      	lsls	r2, r2, #31
 801aa3e:	d501      	bpl.n	801aa44 <_printf_float+0x154>
 801aa40:	3301      	adds	r3, #1
 801aa42:	6123      	str	r3, [r4, #16]
 801aa44:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 801aa48:	2b00      	cmp	r3, #0
 801aa4a:	d0a2      	beq.n	801a992 <_printf_float+0xa2>
 801aa4c:	232d      	movs	r3, #45	@ 0x2d
 801aa4e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801aa52:	e79e      	b.n	801a992 <_printf_float+0xa2>
 801aa54:	9a06      	ldr	r2, [sp, #24]
 801aa56:	2a47      	cmp	r2, #71	@ 0x47
 801aa58:	d1c2      	bne.n	801a9e0 <_printf_float+0xf0>
 801aa5a:	2b00      	cmp	r3, #0
 801aa5c:	d1c0      	bne.n	801a9e0 <_printf_float+0xf0>
 801aa5e:	2301      	movs	r3, #1
 801aa60:	e7bd      	b.n	801a9de <_printf_float+0xee>
 801aa62:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801aa66:	d9db      	bls.n	801aa20 <_printf_float+0x130>
 801aa68:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 801aa6c:	d118      	bne.n	801aaa0 <_printf_float+0x1b0>
 801aa6e:	2900      	cmp	r1, #0
 801aa70:	6863      	ldr	r3, [r4, #4]
 801aa72:	dd0b      	ble.n	801aa8c <_printf_float+0x19c>
 801aa74:	6121      	str	r1, [r4, #16]
 801aa76:	b913      	cbnz	r3, 801aa7e <_printf_float+0x18e>
 801aa78:	6822      	ldr	r2, [r4, #0]
 801aa7a:	07d0      	lsls	r0, r2, #31
 801aa7c:	d502      	bpl.n	801aa84 <_printf_float+0x194>
 801aa7e:	3301      	adds	r3, #1
 801aa80:	440b      	add	r3, r1
 801aa82:	6123      	str	r3, [r4, #16]
 801aa84:	65a1      	str	r1, [r4, #88]	@ 0x58
 801aa86:	f04f 0900 	mov.w	r9, #0
 801aa8a:	e7db      	b.n	801aa44 <_printf_float+0x154>
 801aa8c:	b913      	cbnz	r3, 801aa94 <_printf_float+0x1a4>
 801aa8e:	6822      	ldr	r2, [r4, #0]
 801aa90:	07d2      	lsls	r2, r2, #31
 801aa92:	d501      	bpl.n	801aa98 <_printf_float+0x1a8>
 801aa94:	3302      	adds	r3, #2
 801aa96:	e7f4      	b.n	801aa82 <_printf_float+0x192>
 801aa98:	2301      	movs	r3, #1
 801aa9a:	e7f2      	b.n	801aa82 <_printf_float+0x192>
 801aa9c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 801aaa0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801aaa2:	4299      	cmp	r1, r3
 801aaa4:	db05      	blt.n	801aab2 <_printf_float+0x1c2>
 801aaa6:	6823      	ldr	r3, [r4, #0]
 801aaa8:	6121      	str	r1, [r4, #16]
 801aaaa:	07d8      	lsls	r0, r3, #31
 801aaac:	d5ea      	bpl.n	801aa84 <_printf_float+0x194>
 801aaae:	1c4b      	adds	r3, r1, #1
 801aab0:	e7e7      	b.n	801aa82 <_printf_float+0x192>
 801aab2:	2900      	cmp	r1, #0
 801aab4:	bfd4      	ite	le
 801aab6:	f1c1 0202 	rsble	r2, r1, #2
 801aaba:	2201      	movgt	r2, #1
 801aabc:	4413      	add	r3, r2
 801aabe:	e7e0      	b.n	801aa82 <_printf_float+0x192>
 801aac0:	6823      	ldr	r3, [r4, #0]
 801aac2:	055a      	lsls	r2, r3, #21
 801aac4:	d407      	bmi.n	801aad6 <_printf_float+0x1e6>
 801aac6:	6923      	ldr	r3, [r4, #16]
 801aac8:	4642      	mov	r2, r8
 801aaca:	4631      	mov	r1, r6
 801aacc:	4628      	mov	r0, r5
 801aace:	47b8      	blx	r7
 801aad0:	3001      	adds	r0, #1
 801aad2:	d12b      	bne.n	801ab2c <_printf_float+0x23c>
 801aad4:	e767      	b.n	801a9a6 <_printf_float+0xb6>
 801aad6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801aada:	f240 80dd 	bls.w	801ac98 <_printf_float+0x3a8>
 801aade:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801aae2:	2200      	movs	r2, #0
 801aae4:	2300      	movs	r3, #0
 801aae6:	f7e5 ffc7 	bl	8000a78 <__aeabi_dcmpeq>
 801aaea:	2800      	cmp	r0, #0
 801aaec:	d033      	beq.n	801ab56 <_printf_float+0x266>
 801aaee:	4a37      	ldr	r2, [pc, #220]	@ (801abcc <_printf_float+0x2dc>)
 801aaf0:	2301      	movs	r3, #1
 801aaf2:	4631      	mov	r1, r6
 801aaf4:	4628      	mov	r0, r5
 801aaf6:	47b8      	blx	r7
 801aaf8:	3001      	adds	r0, #1
 801aafa:	f43f af54 	beq.w	801a9a6 <_printf_float+0xb6>
 801aafe:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 801ab02:	4543      	cmp	r3, r8
 801ab04:	db02      	blt.n	801ab0c <_printf_float+0x21c>
 801ab06:	6823      	ldr	r3, [r4, #0]
 801ab08:	07d8      	lsls	r0, r3, #31
 801ab0a:	d50f      	bpl.n	801ab2c <_printf_float+0x23c>
 801ab0c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801ab10:	4631      	mov	r1, r6
 801ab12:	4628      	mov	r0, r5
 801ab14:	47b8      	blx	r7
 801ab16:	3001      	adds	r0, #1
 801ab18:	f43f af45 	beq.w	801a9a6 <_printf_float+0xb6>
 801ab1c:	f04f 0900 	mov.w	r9, #0
 801ab20:	f108 38ff 	add.w	r8, r8, #4294967295
 801ab24:	f104 0a1a 	add.w	sl, r4, #26
 801ab28:	45c8      	cmp	r8, r9
 801ab2a:	dc09      	bgt.n	801ab40 <_printf_float+0x250>
 801ab2c:	6823      	ldr	r3, [r4, #0]
 801ab2e:	079b      	lsls	r3, r3, #30
 801ab30:	f100 8103 	bmi.w	801ad3a <_printf_float+0x44a>
 801ab34:	68e0      	ldr	r0, [r4, #12]
 801ab36:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801ab38:	4298      	cmp	r0, r3
 801ab3a:	bfb8      	it	lt
 801ab3c:	4618      	movlt	r0, r3
 801ab3e:	e734      	b.n	801a9aa <_printf_float+0xba>
 801ab40:	2301      	movs	r3, #1
 801ab42:	4652      	mov	r2, sl
 801ab44:	4631      	mov	r1, r6
 801ab46:	4628      	mov	r0, r5
 801ab48:	47b8      	blx	r7
 801ab4a:	3001      	adds	r0, #1
 801ab4c:	f43f af2b 	beq.w	801a9a6 <_printf_float+0xb6>
 801ab50:	f109 0901 	add.w	r9, r9, #1
 801ab54:	e7e8      	b.n	801ab28 <_printf_float+0x238>
 801ab56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ab58:	2b00      	cmp	r3, #0
 801ab5a:	dc39      	bgt.n	801abd0 <_printf_float+0x2e0>
 801ab5c:	4a1b      	ldr	r2, [pc, #108]	@ (801abcc <_printf_float+0x2dc>)
 801ab5e:	2301      	movs	r3, #1
 801ab60:	4631      	mov	r1, r6
 801ab62:	4628      	mov	r0, r5
 801ab64:	47b8      	blx	r7
 801ab66:	3001      	adds	r0, #1
 801ab68:	f43f af1d 	beq.w	801a9a6 <_printf_float+0xb6>
 801ab6c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 801ab70:	ea59 0303 	orrs.w	r3, r9, r3
 801ab74:	d102      	bne.n	801ab7c <_printf_float+0x28c>
 801ab76:	6823      	ldr	r3, [r4, #0]
 801ab78:	07d9      	lsls	r1, r3, #31
 801ab7a:	d5d7      	bpl.n	801ab2c <_printf_float+0x23c>
 801ab7c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801ab80:	4631      	mov	r1, r6
 801ab82:	4628      	mov	r0, r5
 801ab84:	47b8      	blx	r7
 801ab86:	3001      	adds	r0, #1
 801ab88:	f43f af0d 	beq.w	801a9a6 <_printf_float+0xb6>
 801ab8c:	f04f 0a00 	mov.w	sl, #0
 801ab90:	f104 0b1a 	add.w	fp, r4, #26
 801ab94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ab96:	425b      	negs	r3, r3
 801ab98:	4553      	cmp	r3, sl
 801ab9a:	dc01      	bgt.n	801aba0 <_printf_float+0x2b0>
 801ab9c:	464b      	mov	r3, r9
 801ab9e:	e793      	b.n	801aac8 <_printf_float+0x1d8>
 801aba0:	2301      	movs	r3, #1
 801aba2:	465a      	mov	r2, fp
 801aba4:	4631      	mov	r1, r6
 801aba6:	4628      	mov	r0, r5
 801aba8:	47b8      	blx	r7
 801abaa:	3001      	adds	r0, #1
 801abac:	f43f aefb 	beq.w	801a9a6 <_printf_float+0xb6>
 801abb0:	f10a 0a01 	add.w	sl, sl, #1
 801abb4:	e7ee      	b.n	801ab94 <_printf_float+0x2a4>
 801abb6:	bf00      	nop
 801abb8:	7fefffff 	.word	0x7fefffff
 801abbc:	08022419 	.word	0x08022419
 801abc0:	0802241d 	.word	0x0802241d
 801abc4:	08022421 	.word	0x08022421
 801abc8:	08022425 	.word	0x08022425
 801abcc:	08022429 	.word	0x08022429
 801abd0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801abd2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801abd6:	4553      	cmp	r3, sl
 801abd8:	bfa8      	it	ge
 801abda:	4653      	movge	r3, sl
 801abdc:	2b00      	cmp	r3, #0
 801abde:	4699      	mov	r9, r3
 801abe0:	dc36      	bgt.n	801ac50 <_printf_float+0x360>
 801abe2:	f04f 0b00 	mov.w	fp, #0
 801abe6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801abea:	f104 021a 	add.w	r2, r4, #26
 801abee:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801abf0:	9306      	str	r3, [sp, #24]
 801abf2:	eba3 0309 	sub.w	r3, r3, r9
 801abf6:	455b      	cmp	r3, fp
 801abf8:	dc31      	bgt.n	801ac5e <_printf_float+0x36e>
 801abfa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801abfc:	459a      	cmp	sl, r3
 801abfe:	dc3a      	bgt.n	801ac76 <_printf_float+0x386>
 801ac00:	6823      	ldr	r3, [r4, #0]
 801ac02:	07da      	lsls	r2, r3, #31
 801ac04:	d437      	bmi.n	801ac76 <_printf_float+0x386>
 801ac06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ac08:	ebaa 0903 	sub.w	r9, sl, r3
 801ac0c:	9b06      	ldr	r3, [sp, #24]
 801ac0e:	ebaa 0303 	sub.w	r3, sl, r3
 801ac12:	4599      	cmp	r9, r3
 801ac14:	bfa8      	it	ge
 801ac16:	4699      	movge	r9, r3
 801ac18:	f1b9 0f00 	cmp.w	r9, #0
 801ac1c:	dc33      	bgt.n	801ac86 <_printf_float+0x396>
 801ac1e:	f04f 0800 	mov.w	r8, #0
 801ac22:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801ac26:	f104 0b1a 	add.w	fp, r4, #26
 801ac2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ac2c:	ebaa 0303 	sub.w	r3, sl, r3
 801ac30:	eba3 0309 	sub.w	r3, r3, r9
 801ac34:	4543      	cmp	r3, r8
 801ac36:	f77f af79 	ble.w	801ab2c <_printf_float+0x23c>
 801ac3a:	2301      	movs	r3, #1
 801ac3c:	465a      	mov	r2, fp
 801ac3e:	4631      	mov	r1, r6
 801ac40:	4628      	mov	r0, r5
 801ac42:	47b8      	blx	r7
 801ac44:	3001      	adds	r0, #1
 801ac46:	f43f aeae 	beq.w	801a9a6 <_printf_float+0xb6>
 801ac4a:	f108 0801 	add.w	r8, r8, #1
 801ac4e:	e7ec      	b.n	801ac2a <_printf_float+0x33a>
 801ac50:	4642      	mov	r2, r8
 801ac52:	4631      	mov	r1, r6
 801ac54:	4628      	mov	r0, r5
 801ac56:	47b8      	blx	r7
 801ac58:	3001      	adds	r0, #1
 801ac5a:	d1c2      	bne.n	801abe2 <_printf_float+0x2f2>
 801ac5c:	e6a3      	b.n	801a9a6 <_printf_float+0xb6>
 801ac5e:	2301      	movs	r3, #1
 801ac60:	4631      	mov	r1, r6
 801ac62:	4628      	mov	r0, r5
 801ac64:	9206      	str	r2, [sp, #24]
 801ac66:	47b8      	blx	r7
 801ac68:	3001      	adds	r0, #1
 801ac6a:	f43f ae9c 	beq.w	801a9a6 <_printf_float+0xb6>
 801ac6e:	9a06      	ldr	r2, [sp, #24]
 801ac70:	f10b 0b01 	add.w	fp, fp, #1
 801ac74:	e7bb      	b.n	801abee <_printf_float+0x2fe>
 801ac76:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801ac7a:	4631      	mov	r1, r6
 801ac7c:	4628      	mov	r0, r5
 801ac7e:	47b8      	blx	r7
 801ac80:	3001      	adds	r0, #1
 801ac82:	d1c0      	bne.n	801ac06 <_printf_float+0x316>
 801ac84:	e68f      	b.n	801a9a6 <_printf_float+0xb6>
 801ac86:	9a06      	ldr	r2, [sp, #24]
 801ac88:	464b      	mov	r3, r9
 801ac8a:	4442      	add	r2, r8
 801ac8c:	4631      	mov	r1, r6
 801ac8e:	4628      	mov	r0, r5
 801ac90:	47b8      	blx	r7
 801ac92:	3001      	adds	r0, #1
 801ac94:	d1c3      	bne.n	801ac1e <_printf_float+0x32e>
 801ac96:	e686      	b.n	801a9a6 <_printf_float+0xb6>
 801ac98:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801ac9c:	f1ba 0f01 	cmp.w	sl, #1
 801aca0:	dc01      	bgt.n	801aca6 <_printf_float+0x3b6>
 801aca2:	07db      	lsls	r3, r3, #31
 801aca4:	d536      	bpl.n	801ad14 <_printf_float+0x424>
 801aca6:	2301      	movs	r3, #1
 801aca8:	4642      	mov	r2, r8
 801acaa:	4631      	mov	r1, r6
 801acac:	4628      	mov	r0, r5
 801acae:	47b8      	blx	r7
 801acb0:	3001      	adds	r0, #1
 801acb2:	f43f ae78 	beq.w	801a9a6 <_printf_float+0xb6>
 801acb6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801acba:	4631      	mov	r1, r6
 801acbc:	4628      	mov	r0, r5
 801acbe:	47b8      	blx	r7
 801acc0:	3001      	adds	r0, #1
 801acc2:	f43f ae70 	beq.w	801a9a6 <_printf_float+0xb6>
 801acc6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801acca:	2200      	movs	r2, #0
 801accc:	2300      	movs	r3, #0
 801acce:	f10a 3aff 	add.w	sl, sl, #4294967295
 801acd2:	f7e5 fed1 	bl	8000a78 <__aeabi_dcmpeq>
 801acd6:	b9c0      	cbnz	r0, 801ad0a <_printf_float+0x41a>
 801acd8:	4653      	mov	r3, sl
 801acda:	f108 0201 	add.w	r2, r8, #1
 801acde:	4631      	mov	r1, r6
 801ace0:	4628      	mov	r0, r5
 801ace2:	47b8      	blx	r7
 801ace4:	3001      	adds	r0, #1
 801ace6:	d10c      	bne.n	801ad02 <_printf_float+0x412>
 801ace8:	e65d      	b.n	801a9a6 <_printf_float+0xb6>
 801acea:	2301      	movs	r3, #1
 801acec:	465a      	mov	r2, fp
 801acee:	4631      	mov	r1, r6
 801acf0:	4628      	mov	r0, r5
 801acf2:	47b8      	blx	r7
 801acf4:	3001      	adds	r0, #1
 801acf6:	f43f ae56 	beq.w	801a9a6 <_printf_float+0xb6>
 801acfa:	f108 0801 	add.w	r8, r8, #1
 801acfe:	45d0      	cmp	r8, sl
 801ad00:	dbf3      	blt.n	801acea <_printf_float+0x3fa>
 801ad02:	464b      	mov	r3, r9
 801ad04:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 801ad08:	e6df      	b.n	801aaca <_printf_float+0x1da>
 801ad0a:	f04f 0800 	mov.w	r8, #0
 801ad0e:	f104 0b1a 	add.w	fp, r4, #26
 801ad12:	e7f4      	b.n	801acfe <_printf_float+0x40e>
 801ad14:	2301      	movs	r3, #1
 801ad16:	4642      	mov	r2, r8
 801ad18:	e7e1      	b.n	801acde <_printf_float+0x3ee>
 801ad1a:	2301      	movs	r3, #1
 801ad1c:	464a      	mov	r2, r9
 801ad1e:	4631      	mov	r1, r6
 801ad20:	4628      	mov	r0, r5
 801ad22:	47b8      	blx	r7
 801ad24:	3001      	adds	r0, #1
 801ad26:	f43f ae3e 	beq.w	801a9a6 <_printf_float+0xb6>
 801ad2a:	f108 0801 	add.w	r8, r8, #1
 801ad2e:	68e3      	ldr	r3, [r4, #12]
 801ad30:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801ad32:	1a5b      	subs	r3, r3, r1
 801ad34:	4543      	cmp	r3, r8
 801ad36:	dcf0      	bgt.n	801ad1a <_printf_float+0x42a>
 801ad38:	e6fc      	b.n	801ab34 <_printf_float+0x244>
 801ad3a:	f04f 0800 	mov.w	r8, #0
 801ad3e:	f104 0919 	add.w	r9, r4, #25
 801ad42:	e7f4      	b.n	801ad2e <_printf_float+0x43e>

0801ad44 <_printf_common>:
 801ad44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ad48:	4616      	mov	r6, r2
 801ad4a:	4698      	mov	r8, r3
 801ad4c:	688a      	ldr	r2, [r1, #8]
 801ad4e:	690b      	ldr	r3, [r1, #16]
 801ad50:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801ad54:	4293      	cmp	r3, r2
 801ad56:	bfb8      	it	lt
 801ad58:	4613      	movlt	r3, r2
 801ad5a:	6033      	str	r3, [r6, #0]
 801ad5c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801ad60:	4607      	mov	r7, r0
 801ad62:	460c      	mov	r4, r1
 801ad64:	b10a      	cbz	r2, 801ad6a <_printf_common+0x26>
 801ad66:	3301      	adds	r3, #1
 801ad68:	6033      	str	r3, [r6, #0]
 801ad6a:	6823      	ldr	r3, [r4, #0]
 801ad6c:	0699      	lsls	r1, r3, #26
 801ad6e:	bf42      	ittt	mi
 801ad70:	6833      	ldrmi	r3, [r6, #0]
 801ad72:	3302      	addmi	r3, #2
 801ad74:	6033      	strmi	r3, [r6, #0]
 801ad76:	6825      	ldr	r5, [r4, #0]
 801ad78:	f015 0506 	ands.w	r5, r5, #6
 801ad7c:	d106      	bne.n	801ad8c <_printf_common+0x48>
 801ad7e:	f104 0a19 	add.w	sl, r4, #25
 801ad82:	68e3      	ldr	r3, [r4, #12]
 801ad84:	6832      	ldr	r2, [r6, #0]
 801ad86:	1a9b      	subs	r3, r3, r2
 801ad88:	42ab      	cmp	r3, r5
 801ad8a:	dc26      	bgt.n	801adda <_printf_common+0x96>
 801ad8c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801ad90:	6822      	ldr	r2, [r4, #0]
 801ad92:	3b00      	subs	r3, #0
 801ad94:	bf18      	it	ne
 801ad96:	2301      	movne	r3, #1
 801ad98:	0692      	lsls	r2, r2, #26
 801ad9a:	d42b      	bmi.n	801adf4 <_printf_common+0xb0>
 801ad9c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801ada0:	4641      	mov	r1, r8
 801ada2:	4638      	mov	r0, r7
 801ada4:	47c8      	blx	r9
 801ada6:	3001      	adds	r0, #1
 801ada8:	d01e      	beq.n	801ade8 <_printf_common+0xa4>
 801adaa:	6823      	ldr	r3, [r4, #0]
 801adac:	6922      	ldr	r2, [r4, #16]
 801adae:	f003 0306 	and.w	r3, r3, #6
 801adb2:	2b04      	cmp	r3, #4
 801adb4:	bf02      	ittt	eq
 801adb6:	68e5      	ldreq	r5, [r4, #12]
 801adb8:	6833      	ldreq	r3, [r6, #0]
 801adba:	1aed      	subeq	r5, r5, r3
 801adbc:	68a3      	ldr	r3, [r4, #8]
 801adbe:	bf0c      	ite	eq
 801adc0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801adc4:	2500      	movne	r5, #0
 801adc6:	4293      	cmp	r3, r2
 801adc8:	bfc4      	itt	gt
 801adca:	1a9b      	subgt	r3, r3, r2
 801adcc:	18ed      	addgt	r5, r5, r3
 801adce:	2600      	movs	r6, #0
 801add0:	341a      	adds	r4, #26
 801add2:	42b5      	cmp	r5, r6
 801add4:	d11a      	bne.n	801ae0c <_printf_common+0xc8>
 801add6:	2000      	movs	r0, #0
 801add8:	e008      	b.n	801adec <_printf_common+0xa8>
 801adda:	2301      	movs	r3, #1
 801addc:	4652      	mov	r2, sl
 801adde:	4641      	mov	r1, r8
 801ade0:	4638      	mov	r0, r7
 801ade2:	47c8      	blx	r9
 801ade4:	3001      	adds	r0, #1
 801ade6:	d103      	bne.n	801adf0 <_printf_common+0xac>
 801ade8:	f04f 30ff 	mov.w	r0, #4294967295
 801adec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801adf0:	3501      	adds	r5, #1
 801adf2:	e7c6      	b.n	801ad82 <_printf_common+0x3e>
 801adf4:	18e1      	adds	r1, r4, r3
 801adf6:	1c5a      	adds	r2, r3, #1
 801adf8:	2030      	movs	r0, #48	@ 0x30
 801adfa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801adfe:	4422      	add	r2, r4
 801ae00:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801ae04:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801ae08:	3302      	adds	r3, #2
 801ae0a:	e7c7      	b.n	801ad9c <_printf_common+0x58>
 801ae0c:	2301      	movs	r3, #1
 801ae0e:	4622      	mov	r2, r4
 801ae10:	4641      	mov	r1, r8
 801ae12:	4638      	mov	r0, r7
 801ae14:	47c8      	blx	r9
 801ae16:	3001      	adds	r0, #1
 801ae18:	d0e6      	beq.n	801ade8 <_printf_common+0xa4>
 801ae1a:	3601      	adds	r6, #1
 801ae1c:	e7d9      	b.n	801add2 <_printf_common+0x8e>
	...

0801ae20 <_printf_i>:
 801ae20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801ae24:	7e0f      	ldrb	r7, [r1, #24]
 801ae26:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801ae28:	2f78      	cmp	r7, #120	@ 0x78
 801ae2a:	4691      	mov	r9, r2
 801ae2c:	4680      	mov	r8, r0
 801ae2e:	460c      	mov	r4, r1
 801ae30:	469a      	mov	sl, r3
 801ae32:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801ae36:	d807      	bhi.n	801ae48 <_printf_i+0x28>
 801ae38:	2f62      	cmp	r7, #98	@ 0x62
 801ae3a:	d80a      	bhi.n	801ae52 <_printf_i+0x32>
 801ae3c:	2f00      	cmp	r7, #0
 801ae3e:	f000 80d2 	beq.w	801afe6 <_printf_i+0x1c6>
 801ae42:	2f58      	cmp	r7, #88	@ 0x58
 801ae44:	f000 80b9 	beq.w	801afba <_printf_i+0x19a>
 801ae48:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801ae4c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801ae50:	e03a      	b.n	801aec8 <_printf_i+0xa8>
 801ae52:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801ae56:	2b15      	cmp	r3, #21
 801ae58:	d8f6      	bhi.n	801ae48 <_printf_i+0x28>
 801ae5a:	a101      	add	r1, pc, #4	@ (adr r1, 801ae60 <_printf_i+0x40>)
 801ae5c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801ae60:	0801aeb9 	.word	0x0801aeb9
 801ae64:	0801aecd 	.word	0x0801aecd
 801ae68:	0801ae49 	.word	0x0801ae49
 801ae6c:	0801ae49 	.word	0x0801ae49
 801ae70:	0801ae49 	.word	0x0801ae49
 801ae74:	0801ae49 	.word	0x0801ae49
 801ae78:	0801aecd 	.word	0x0801aecd
 801ae7c:	0801ae49 	.word	0x0801ae49
 801ae80:	0801ae49 	.word	0x0801ae49
 801ae84:	0801ae49 	.word	0x0801ae49
 801ae88:	0801ae49 	.word	0x0801ae49
 801ae8c:	0801afcd 	.word	0x0801afcd
 801ae90:	0801aef7 	.word	0x0801aef7
 801ae94:	0801af87 	.word	0x0801af87
 801ae98:	0801ae49 	.word	0x0801ae49
 801ae9c:	0801ae49 	.word	0x0801ae49
 801aea0:	0801afef 	.word	0x0801afef
 801aea4:	0801ae49 	.word	0x0801ae49
 801aea8:	0801aef7 	.word	0x0801aef7
 801aeac:	0801ae49 	.word	0x0801ae49
 801aeb0:	0801ae49 	.word	0x0801ae49
 801aeb4:	0801af8f 	.word	0x0801af8f
 801aeb8:	6833      	ldr	r3, [r6, #0]
 801aeba:	1d1a      	adds	r2, r3, #4
 801aebc:	681b      	ldr	r3, [r3, #0]
 801aebe:	6032      	str	r2, [r6, #0]
 801aec0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801aec4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801aec8:	2301      	movs	r3, #1
 801aeca:	e09d      	b.n	801b008 <_printf_i+0x1e8>
 801aecc:	6833      	ldr	r3, [r6, #0]
 801aece:	6820      	ldr	r0, [r4, #0]
 801aed0:	1d19      	adds	r1, r3, #4
 801aed2:	6031      	str	r1, [r6, #0]
 801aed4:	0606      	lsls	r6, r0, #24
 801aed6:	d501      	bpl.n	801aedc <_printf_i+0xbc>
 801aed8:	681d      	ldr	r5, [r3, #0]
 801aeda:	e003      	b.n	801aee4 <_printf_i+0xc4>
 801aedc:	0645      	lsls	r5, r0, #25
 801aede:	d5fb      	bpl.n	801aed8 <_printf_i+0xb8>
 801aee0:	f9b3 5000 	ldrsh.w	r5, [r3]
 801aee4:	2d00      	cmp	r5, #0
 801aee6:	da03      	bge.n	801aef0 <_printf_i+0xd0>
 801aee8:	232d      	movs	r3, #45	@ 0x2d
 801aeea:	426d      	negs	r5, r5
 801aeec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801aef0:	4859      	ldr	r0, [pc, #356]	@ (801b058 <_printf_i+0x238>)
 801aef2:	230a      	movs	r3, #10
 801aef4:	e011      	b.n	801af1a <_printf_i+0xfa>
 801aef6:	6821      	ldr	r1, [r4, #0]
 801aef8:	6833      	ldr	r3, [r6, #0]
 801aefa:	0608      	lsls	r0, r1, #24
 801aefc:	f853 5b04 	ldr.w	r5, [r3], #4
 801af00:	d402      	bmi.n	801af08 <_printf_i+0xe8>
 801af02:	0649      	lsls	r1, r1, #25
 801af04:	bf48      	it	mi
 801af06:	b2ad      	uxthmi	r5, r5
 801af08:	2f6f      	cmp	r7, #111	@ 0x6f
 801af0a:	4853      	ldr	r0, [pc, #332]	@ (801b058 <_printf_i+0x238>)
 801af0c:	6033      	str	r3, [r6, #0]
 801af0e:	bf14      	ite	ne
 801af10:	230a      	movne	r3, #10
 801af12:	2308      	moveq	r3, #8
 801af14:	2100      	movs	r1, #0
 801af16:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801af1a:	6866      	ldr	r6, [r4, #4]
 801af1c:	60a6      	str	r6, [r4, #8]
 801af1e:	2e00      	cmp	r6, #0
 801af20:	bfa2      	ittt	ge
 801af22:	6821      	ldrge	r1, [r4, #0]
 801af24:	f021 0104 	bicge.w	r1, r1, #4
 801af28:	6021      	strge	r1, [r4, #0]
 801af2a:	b90d      	cbnz	r5, 801af30 <_printf_i+0x110>
 801af2c:	2e00      	cmp	r6, #0
 801af2e:	d04b      	beq.n	801afc8 <_printf_i+0x1a8>
 801af30:	4616      	mov	r6, r2
 801af32:	fbb5 f1f3 	udiv	r1, r5, r3
 801af36:	fb03 5711 	mls	r7, r3, r1, r5
 801af3a:	5dc7      	ldrb	r7, [r0, r7]
 801af3c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801af40:	462f      	mov	r7, r5
 801af42:	42bb      	cmp	r3, r7
 801af44:	460d      	mov	r5, r1
 801af46:	d9f4      	bls.n	801af32 <_printf_i+0x112>
 801af48:	2b08      	cmp	r3, #8
 801af4a:	d10b      	bne.n	801af64 <_printf_i+0x144>
 801af4c:	6823      	ldr	r3, [r4, #0]
 801af4e:	07df      	lsls	r7, r3, #31
 801af50:	d508      	bpl.n	801af64 <_printf_i+0x144>
 801af52:	6923      	ldr	r3, [r4, #16]
 801af54:	6861      	ldr	r1, [r4, #4]
 801af56:	4299      	cmp	r1, r3
 801af58:	bfde      	ittt	le
 801af5a:	2330      	movle	r3, #48	@ 0x30
 801af5c:	f806 3c01 	strble.w	r3, [r6, #-1]
 801af60:	f106 36ff 	addle.w	r6, r6, #4294967295
 801af64:	1b92      	subs	r2, r2, r6
 801af66:	6122      	str	r2, [r4, #16]
 801af68:	f8cd a000 	str.w	sl, [sp]
 801af6c:	464b      	mov	r3, r9
 801af6e:	aa03      	add	r2, sp, #12
 801af70:	4621      	mov	r1, r4
 801af72:	4640      	mov	r0, r8
 801af74:	f7ff fee6 	bl	801ad44 <_printf_common>
 801af78:	3001      	adds	r0, #1
 801af7a:	d14a      	bne.n	801b012 <_printf_i+0x1f2>
 801af7c:	f04f 30ff 	mov.w	r0, #4294967295
 801af80:	b004      	add	sp, #16
 801af82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801af86:	6823      	ldr	r3, [r4, #0]
 801af88:	f043 0320 	orr.w	r3, r3, #32
 801af8c:	6023      	str	r3, [r4, #0]
 801af8e:	4833      	ldr	r0, [pc, #204]	@ (801b05c <_printf_i+0x23c>)
 801af90:	2778      	movs	r7, #120	@ 0x78
 801af92:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801af96:	6823      	ldr	r3, [r4, #0]
 801af98:	6831      	ldr	r1, [r6, #0]
 801af9a:	061f      	lsls	r7, r3, #24
 801af9c:	f851 5b04 	ldr.w	r5, [r1], #4
 801afa0:	d402      	bmi.n	801afa8 <_printf_i+0x188>
 801afa2:	065f      	lsls	r7, r3, #25
 801afa4:	bf48      	it	mi
 801afa6:	b2ad      	uxthmi	r5, r5
 801afa8:	6031      	str	r1, [r6, #0]
 801afaa:	07d9      	lsls	r1, r3, #31
 801afac:	bf44      	itt	mi
 801afae:	f043 0320 	orrmi.w	r3, r3, #32
 801afb2:	6023      	strmi	r3, [r4, #0]
 801afb4:	b11d      	cbz	r5, 801afbe <_printf_i+0x19e>
 801afb6:	2310      	movs	r3, #16
 801afb8:	e7ac      	b.n	801af14 <_printf_i+0xf4>
 801afba:	4827      	ldr	r0, [pc, #156]	@ (801b058 <_printf_i+0x238>)
 801afbc:	e7e9      	b.n	801af92 <_printf_i+0x172>
 801afbe:	6823      	ldr	r3, [r4, #0]
 801afc0:	f023 0320 	bic.w	r3, r3, #32
 801afc4:	6023      	str	r3, [r4, #0]
 801afc6:	e7f6      	b.n	801afb6 <_printf_i+0x196>
 801afc8:	4616      	mov	r6, r2
 801afca:	e7bd      	b.n	801af48 <_printf_i+0x128>
 801afcc:	6833      	ldr	r3, [r6, #0]
 801afce:	6825      	ldr	r5, [r4, #0]
 801afd0:	6961      	ldr	r1, [r4, #20]
 801afd2:	1d18      	adds	r0, r3, #4
 801afd4:	6030      	str	r0, [r6, #0]
 801afd6:	062e      	lsls	r6, r5, #24
 801afd8:	681b      	ldr	r3, [r3, #0]
 801afda:	d501      	bpl.n	801afe0 <_printf_i+0x1c0>
 801afdc:	6019      	str	r1, [r3, #0]
 801afde:	e002      	b.n	801afe6 <_printf_i+0x1c6>
 801afe0:	0668      	lsls	r0, r5, #25
 801afe2:	d5fb      	bpl.n	801afdc <_printf_i+0x1bc>
 801afe4:	8019      	strh	r1, [r3, #0]
 801afe6:	2300      	movs	r3, #0
 801afe8:	6123      	str	r3, [r4, #16]
 801afea:	4616      	mov	r6, r2
 801afec:	e7bc      	b.n	801af68 <_printf_i+0x148>
 801afee:	6833      	ldr	r3, [r6, #0]
 801aff0:	1d1a      	adds	r2, r3, #4
 801aff2:	6032      	str	r2, [r6, #0]
 801aff4:	681e      	ldr	r6, [r3, #0]
 801aff6:	6862      	ldr	r2, [r4, #4]
 801aff8:	2100      	movs	r1, #0
 801affa:	4630      	mov	r0, r6
 801affc:	f7e5 f8c0 	bl	8000180 <memchr>
 801b000:	b108      	cbz	r0, 801b006 <_printf_i+0x1e6>
 801b002:	1b80      	subs	r0, r0, r6
 801b004:	6060      	str	r0, [r4, #4]
 801b006:	6863      	ldr	r3, [r4, #4]
 801b008:	6123      	str	r3, [r4, #16]
 801b00a:	2300      	movs	r3, #0
 801b00c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801b010:	e7aa      	b.n	801af68 <_printf_i+0x148>
 801b012:	6923      	ldr	r3, [r4, #16]
 801b014:	4632      	mov	r2, r6
 801b016:	4649      	mov	r1, r9
 801b018:	4640      	mov	r0, r8
 801b01a:	47d0      	blx	sl
 801b01c:	3001      	adds	r0, #1
 801b01e:	d0ad      	beq.n	801af7c <_printf_i+0x15c>
 801b020:	6823      	ldr	r3, [r4, #0]
 801b022:	079b      	lsls	r3, r3, #30
 801b024:	d413      	bmi.n	801b04e <_printf_i+0x22e>
 801b026:	68e0      	ldr	r0, [r4, #12]
 801b028:	9b03      	ldr	r3, [sp, #12]
 801b02a:	4298      	cmp	r0, r3
 801b02c:	bfb8      	it	lt
 801b02e:	4618      	movlt	r0, r3
 801b030:	e7a6      	b.n	801af80 <_printf_i+0x160>
 801b032:	2301      	movs	r3, #1
 801b034:	4632      	mov	r2, r6
 801b036:	4649      	mov	r1, r9
 801b038:	4640      	mov	r0, r8
 801b03a:	47d0      	blx	sl
 801b03c:	3001      	adds	r0, #1
 801b03e:	d09d      	beq.n	801af7c <_printf_i+0x15c>
 801b040:	3501      	adds	r5, #1
 801b042:	68e3      	ldr	r3, [r4, #12]
 801b044:	9903      	ldr	r1, [sp, #12]
 801b046:	1a5b      	subs	r3, r3, r1
 801b048:	42ab      	cmp	r3, r5
 801b04a:	dcf2      	bgt.n	801b032 <_printf_i+0x212>
 801b04c:	e7eb      	b.n	801b026 <_printf_i+0x206>
 801b04e:	2500      	movs	r5, #0
 801b050:	f104 0619 	add.w	r6, r4, #25
 801b054:	e7f5      	b.n	801b042 <_printf_i+0x222>
 801b056:	bf00      	nop
 801b058:	0802242b 	.word	0x0802242b
 801b05c:	0802243c 	.word	0x0802243c

0801b060 <_scanf_float>:
 801b060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b064:	b087      	sub	sp, #28
 801b066:	4617      	mov	r7, r2
 801b068:	9303      	str	r3, [sp, #12]
 801b06a:	688b      	ldr	r3, [r1, #8]
 801b06c:	1e5a      	subs	r2, r3, #1
 801b06e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 801b072:	bf81      	itttt	hi
 801b074:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 801b078:	eb03 0b05 	addhi.w	fp, r3, r5
 801b07c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 801b080:	608b      	strhi	r3, [r1, #8]
 801b082:	680b      	ldr	r3, [r1, #0]
 801b084:	460a      	mov	r2, r1
 801b086:	f04f 0500 	mov.w	r5, #0
 801b08a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 801b08e:	f842 3b1c 	str.w	r3, [r2], #28
 801b092:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801b096:	4680      	mov	r8, r0
 801b098:	460c      	mov	r4, r1
 801b09a:	bf98      	it	ls
 801b09c:	f04f 0b00 	movls.w	fp, #0
 801b0a0:	9201      	str	r2, [sp, #4]
 801b0a2:	4616      	mov	r6, r2
 801b0a4:	46aa      	mov	sl, r5
 801b0a6:	46a9      	mov	r9, r5
 801b0a8:	9502      	str	r5, [sp, #8]
 801b0aa:	68a2      	ldr	r2, [r4, #8]
 801b0ac:	b152      	cbz	r2, 801b0c4 <_scanf_float+0x64>
 801b0ae:	683b      	ldr	r3, [r7, #0]
 801b0b0:	781b      	ldrb	r3, [r3, #0]
 801b0b2:	2b4e      	cmp	r3, #78	@ 0x4e
 801b0b4:	d864      	bhi.n	801b180 <_scanf_float+0x120>
 801b0b6:	2b40      	cmp	r3, #64	@ 0x40
 801b0b8:	d83c      	bhi.n	801b134 <_scanf_float+0xd4>
 801b0ba:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 801b0be:	b2c8      	uxtb	r0, r1
 801b0c0:	280e      	cmp	r0, #14
 801b0c2:	d93a      	bls.n	801b13a <_scanf_float+0xda>
 801b0c4:	f1b9 0f00 	cmp.w	r9, #0
 801b0c8:	d003      	beq.n	801b0d2 <_scanf_float+0x72>
 801b0ca:	6823      	ldr	r3, [r4, #0]
 801b0cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801b0d0:	6023      	str	r3, [r4, #0]
 801b0d2:	f10a 3aff 	add.w	sl, sl, #4294967295
 801b0d6:	f1ba 0f01 	cmp.w	sl, #1
 801b0da:	f200 8117 	bhi.w	801b30c <_scanf_float+0x2ac>
 801b0de:	9b01      	ldr	r3, [sp, #4]
 801b0e0:	429e      	cmp	r6, r3
 801b0e2:	f200 8108 	bhi.w	801b2f6 <_scanf_float+0x296>
 801b0e6:	2001      	movs	r0, #1
 801b0e8:	b007      	add	sp, #28
 801b0ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b0ee:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 801b0f2:	2a0d      	cmp	r2, #13
 801b0f4:	d8e6      	bhi.n	801b0c4 <_scanf_float+0x64>
 801b0f6:	a101      	add	r1, pc, #4	@ (adr r1, 801b0fc <_scanf_float+0x9c>)
 801b0f8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801b0fc:	0801b243 	.word	0x0801b243
 801b100:	0801b0c5 	.word	0x0801b0c5
 801b104:	0801b0c5 	.word	0x0801b0c5
 801b108:	0801b0c5 	.word	0x0801b0c5
 801b10c:	0801b2a3 	.word	0x0801b2a3
 801b110:	0801b27b 	.word	0x0801b27b
 801b114:	0801b0c5 	.word	0x0801b0c5
 801b118:	0801b0c5 	.word	0x0801b0c5
 801b11c:	0801b251 	.word	0x0801b251
 801b120:	0801b0c5 	.word	0x0801b0c5
 801b124:	0801b0c5 	.word	0x0801b0c5
 801b128:	0801b0c5 	.word	0x0801b0c5
 801b12c:	0801b0c5 	.word	0x0801b0c5
 801b130:	0801b209 	.word	0x0801b209
 801b134:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 801b138:	e7db      	b.n	801b0f2 <_scanf_float+0x92>
 801b13a:	290e      	cmp	r1, #14
 801b13c:	d8c2      	bhi.n	801b0c4 <_scanf_float+0x64>
 801b13e:	a001      	add	r0, pc, #4	@ (adr r0, 801b144 <_scanf_float+0xe4>)
 801b140:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801b144:	0801b1f9 	.word	0x0801b1f9
 801b148:	0801b0c5 	.word	0x0801b0c5
 801b14c:	0801b1f9 	.word	0x0801b1f9
 801b150:	0801b28f 	.word	0x0801b28f
 801b154:	0801b0c5 	.word	0x0801b0c5
 801b158:	0801b1a1 	.word	0x0801b1a1
 801b15c:	0801b1df 	.word	0x0801b1df
 801b160:	0801b1df 	.word	0x0801b1df
 801b164:	0801b1df 	.word	0x0801b1df
 801b168:	0801b1df 	.word	0x0801b1df
 801b16c:	0801b1df 	.word	0x0801b1df
 801b170:	0801b1df 	.word	0x0801b1df
 801b174:	0801b1df 	.word	0x0801b1df
 801b178:	0801b1df 	.word	0x0801b1df
 801b17c:	0801b1df 	.word	0x0801b1df
 801b180:	2b6e      	cmp	r3, #110	@ 0x6e
 801b182:	d809      	bhi.n	801b198 <_scanf_float+0x138>
 801b184:	2b60      	cmp	r3, #96	@ 0x60
 801b186:	d8b2      	bhi.n	801b0ee <_scanf_float+0x8e>
 801b188:	2b54      	cmp	r3, #84	@ 0x54
 801b18a:	d07b      	beq.n	801b284 <_scanf_float+0x224>
 801b18c:	2b59      	cmp	r3, #89	@ 0x59
 801b18e:	d199      	bne.n	801b0c4 <_scanf_float+0x64>
 801b190:	2d07      	cmp	r5, #7
 801b192:	d197      	bne.n	801b0c4 <_scanf_float+0x64>
 801b194:	2508      	movs	r5, #8
 801b196:	e02c      	b.n	801b1f2 <_scanf_float+0x192>
 801b198:	2b74      	cmp	r3, #116	@ 0x74
 801b19a:	d073      	beq.n	801b284 <_scanf_float+0x224>
 801b19c:	2b79      	cmp	r3, #121	@ 0x79
 801b19e:	e7f6      	b.n	801b18e <_scanf_float+0x12e>
 801b1a0:	6821      	ldr	r1, [r4, #0]
 801b1a2:	05c8      	lsls	r0, r1, #23
 801b1a4:	d51b      	bpl.n	801b1de <_scanf_float+0x17e>
 801b1a6:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 801b1aa:	6021      	str	r1, [r4, #0]
 801b1ac:	f109 0901 	add.w	r9, r9, #1
 801b1b0:	f1bb 0f00 	cmp.w	fp, #0
 801b1b4:	d003      	beq.n	801b1be <_scanf_float+0x15e>
 801b1b6:	3201      	adds	r2, #1
 801b1b8:	f10b 3bff 	add.w	fp, fp, #4294967295
 801b1bc:	60a2      	str	r2, [r4, #8]
 801b1be:	68a3      	ldr	r3, [r4, #8]
 801b1c0:	3b01      	subs	r3, #1
 801b1c2:	60a3      	str	r3, [r4, #8]
 801b1c4:	6923      	ldr	r3, [r4, #16]
 801b1c6:	3301      	adds	r3, #1
 801b1c8:	6123      	str	r3, [r4, #16]
 801b1ca:	687b      	ldr	r3, [r7, #4]
 801b1cc:	3b01      	subs	r3, #1
 801b1ce:	2b00      	cmp	r3, #0
 801b1d0:	607b      	str	r3, [r7, #4]
 801b1d2:	f340 8087 	ble.w	801b2e4 <_scanf_float+0x284>
 801b1d6:	683b      	ldr	r3, [r7, #0]
 801b1d8:	3301      	adds	r3, #1
 801b1da:	603b      	str	r3, [r7, #0]
 801b1dc:	e765      	b.n	801b0aa <_scanf_float+0x4a>
 801b1de:	eb1a 0105 	adds.w	r1, sl, r5
 801b1e2:	f47f af6f 	bne.w	801b0c4 <_scanf_float+0x64>
 801b1e6:	6822      	ldr	r2, [r4, #0]
 801b1e8:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 801b1ec:	6022      	str	r2, [r4, #0]
 801b1ee:	460d      	mov	r5, r1
 801b1f0:	468a      	mov	sl, r1
 801b1f2:	f806 3b01 	strb.w	r3, [r6], #1
 801b1f6:	e7e2      	b.n	801b1be <_scanf_float+0x15e>
 801b1f8:	6822      	ldr	r2, [r4, #0]
 801b1fa:	0610      	lsls	r0, r2, #24
 801b1fc:	f57f af62 	bpl.w	801b0c4 <_scanf_float+0x64>
 801b200:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 801b204:	6022      	str	r2, [r4, #0]
 801b206:	e7f4      	b.n	801b1f2 <_scanf_float+0x192>
 801b208:	f1ba 0f00 	cmp.w	sl, #0
 801b20c:	d10e      	bne.n	801b22c <_scanf_float+0x1cc>
 801b20e:	f1b9 0f00 	cmp.w	r9, #0
 801b212:	d10e      	bne.n	801b232 <_scanf_float+0x1d2>
 801b214:	6822      	ldr	r2, [r4, #0]
 801b216:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 801b21a:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 801b21e:	d108      	bne.n	801b232 <_scanf_float+0x1d2>
 801b220:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801b224:	6022      	str	r2, [r4, #0]
 801b226:	f04f 0a01 	mov.w	sl, #1
 801b22a:	e7e2      	b.n	801b1f2 <_scanf_float+0x192>
 801b22c:	f1ba 0f02 	cmp.w	sl, #2
 801b230:	d055      	beq.n	801b2de <_scanf_float+0x27e>
 801b232:	2d01      	cmp	r5, #1
 801b234:	d002      	beq.n	801b23c <_scanf_float+0x1dc>
 801b236:	2d04      	cmp	r5, #4
 801b238:	f47f af44 	bne.w	801b0c4 <_scanf_float+0x64>
 801b23c:	3501      	adds	r5, #1
 801b23e:	b2ed      	uxtb	r5, r5
 801b240:	e7d7      	b.n	801b1f2 <_scanf_float+0x192>
 801b242:	f1ba 0f01 	cmp.w	sl, #1
 801b246:	f47f af3d 	bne.w	801b0c4 <_scanf_float+0x64>
 801b24a:	f04f 0a02 	mov.w	sl, #2
 801b24e:	e7d0      	b.n	801b1f2 <_scanf_float+0x192>
 801b250:	b97d      	cbnz	r5, 801b272 <_scanf_float+0x212>
 801b252:	f1b9 0f00 	cmp.w	r9, #0
 801b256:	f47f af38 	bne.w	801b0ca <_scanf_float+0x6a>
 801b25a:	6822      	ldr	r2, [r4, #0]
 801b25c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 801b260:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 801b264:	f040 8108 	bne.w	801b478 <_scanf_float+0x418>
 801b268:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801b26c:	6022      	str	r2, [r4, #0]
 801b26e:	2501      	movs	r5, #1
 801b270:	e7bf      	b.n	801b1f2 <_scanf_float+0x192>
 801b272:	2d03      	cmp	r5, #3
 801b274:	d0e2      	beq.n	801b23c <_scanf_float+0x1dc>
 801b276:	2d05      	cmp	r5, #5
 801b278:	e7de      	b.n	801b238 <_scanf_float+0x1d8>
 801b27a:	2d02      	cmp	r5, #2
 801b27c:	f47f af22 	bne.w	801b0c4 <_scanf_float+0x64>
 801b280:	2503      	movs	r5, #3
 801b282:	e7b6      	b.n	801b1f2 <_scanf_float+0x192>
 801b284:	2d06      	cmp	r5, #6
 801b286:	f47f af1d 	bne.w	801b0c4 <_scanf_float+0x64>
 801b28a:	2507      	movs	r5, #7
 801b28c:	e7b1      	b.n	801b1f2 <_scanf_float+0x192>
 801b28e:	6822      	ldr	r2, [r4, #0]
 801b290:	0591      	lsls	r1, r2, #22
 801b292:	f57f af17 	bpl.w	801b0c4 <_scanf_float+0x64>
 801b296:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 801b29a:	6022      	str	r2, [r4, #0]
 801b29c:	f8cd 9008 	str.w	r9, [sp, #8]
 801b2a0:	e7a7      	b.n	801b1f2 <_scanf_float+0x192>
 801b2a2:	6822      	ldr	r2, [r4, #0]
 801b2a4:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 801b2a8:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 801b2ac:	d006      	beq.n	801b2bc <_scanf_float+0x25c>
 801b2ae:	0550      	lsls	r0, r2, #21
 801b2b0:	f57f af08 	bpl.w	801b0c4 <_scanf_float+0x64>
 801b2b4:	f1b9 0f00 	cmp.w	r9, #0
 801b2b8:	f000 80de 	beq.w	801b478 <_scanf_float+0x418>
 801b2bc:	0591      	lsls	r1, r2, #22
 801b2be:	bf58      	it	pl
 801b2c0:	9902      	ldrpl	r1, [sp, #8]
 801b2c2:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801b2c6:	bf58      	it	pl
 801b2c8:	eba9 0101 	subpl.w	r1, r9, r1
 801b2cc:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 801b2d0:	bf58      	it	pl
 801b2d2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801b2d6:	6022      	str	r2, [r4, #0]
 801b2d8:	f04f 0900 	mov.w	r9, #0
 801b2dc:	e789      	b.n	801b1f2 <_scanf_float+0x192>
 801b2de:	f04f 0a03 	mov.w	sl, #3
 801b2e2:	e786      	b.n	801b1f2 <_scanf_float+0x192>
 801b2e4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 801b2e8:	4639      	mov	r1, r7
 801b2ea:	4640      	mov	r0, r8
 801b2ec:	4798      	blx	r3
 801b2ee:	2800      	cmp	r0, #0
 801b2f0:	f43f aedb 	beq.w	801b0aa <_scanf_float+0x4a>
 801b2f4:	e6e6      	b.n	801b0c4 <_scanf_float+0x64>
 801b2f6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801b2fa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801b2fe:	463a      	mov	r2, r7
 801b300:	4640      	mov	r0, r8
 801b302:	4798      	blx	r3
 801b304:	6923      	ldr	r3, [r4, #16]
 801b306:	3b01      	subs	r3, #1
 801b308:	6123      	str	r3, [r4, #16]
 801b30a:	e6e8      	b.n	801b0de <_scanf_float+0x7e>
 801b30c:	1e6b      	subs	r3, r5, #1
 801b30e:	2b06      	cmp	r3, #6
 801b310:	d824      	bhi.n	801b35c <_scanf_float+0x2fc>
 801b312:	2d02      	cmp	r5, #2
 801b314:	d836      	bhi.n	801b384 <_scanf_float+0x324>
 801b316:	9b01      	ldr	r3, [sp, #4]
 801b318:	429e      	cmp	r6, r3
 801b31a:	f67f aee4 	bls.w	801b0e6 <_scanf_float+0x86>
 801b31e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801b322:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801b326:	463a      	mov	r2, r7
 801b328:	4640      	mov	r0, r8
 801b32a:	4798      	blx	r3
 801b32c:	6923      	ldr	r3, [r4, #16]
 801b32e:	3b01      	subs	r3, #1
 801b330:	6123      	str	r3, [r4, #16]
 801b332:	e7f0      	b.n	801b316 <_scanf_float+0x2b6>
 801b334:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801b338:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 801b33c:	463a      	mov	r2, r7
 801b33e:	4640      	mov	r0, r8
 801b340:	4798      	blx	r3
 801b342:	6923      	ldr	r3, [r4, #16]
 801b344:	3b01      	subs	r3, #1
 801b346:	6123      	str	r3, [r4, #16]
 801b348:	f10a 3aff 	add.w	sl, sl, #4294967295
 801b34c:	fa5f fa8a 	uxtb.w	sl, sl
 801b350:	f1ba 0f02 	cmp.w	sl, #2
 801b354:	d1ee      	bne.n	801b334 <_scanf_float+0x2d4>
 801b356:	3d03      	subs	r5, #3
 801b358:	b2ed      	uxtb	r5, r5
 801b35a:	1b76      	subs	r6, r6, r5
 801b35c:	6823      	ldr	r3, [r4, #0]
 801b35e:	05da      	lsls	r2, r3, #23
 801b360:	d530      	bpl.n	801b3c4 <_scanf_float+0x364>
 801b362:	055b      	lsls	r3, r3, #21
 801b364:	d511      	bpl.n	801b38a <_scanf_float+0x32a>
 801b366:	9b01      	ldr	r3, [sp, #4]
 801b368:	429e      	cmp	r6, r3
 801b36a:	f67f aebc 	bls.w	801b0e6 <_scanf_float+0x86>
 801b36e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801b372:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801b376:	463a      	mov	r2, r7
 801b378:	4640      	mov	r0, r8
 801b37a:	4798      	blx	r3
 801b37c:	6923      	ldr	r3, [r4, #16]
 801b37e:	3b01      	subs	r3, #1
 801b380:	6123      	str	r3, [r4, #16]
 801b382:	e7f0      	b.n	801b366 <_scanf_float+0x306>
 801b384:	46aa      	mov	sl, r5
 801b386:	46b3      	mov	fp, r6
 801b388:	e7de      	b.n	801b348 <_scanf_float+0x2e8>
 801b38a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801b38e:	6923      	ldr	r3, [r4, #16]
 801b390:	2965      	cmp	r1, #101	@ 0x65
 801b392:	f103 33ff 	add.w	r3, r3, #4294967295
 801b396:	f106 35ff 	add.w	r5, r6, #4294967295
 801b39a:	6123      	str	r3, [r4, #16]
 801b39c:	d00c      	beq.n	801b3b8 <_scanf_float+0x358>
 801b39e:	2945      	cmp	r1, #69	@ 0x45
 801b3a0:	d00a      	beq.n	801b3b8 <_scanf_float+0x358>
 801b3a2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801b3a6:	463a      	mov	r2, r7
 801b3a8:	4640      	mov	r0, r8
 801b3aa:	4798      	blx	r3
 801b3ac:	6923      	ldr	r3, [r4, #16]
 801b3ae:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801b3b2:	3b01      	subs	r3, #1
 801b3b4:	1eb5      	subs	r5, r6, #2
 801b3b6:	6123      	str	r3, [r4, #16]
 801b3b8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801b3bc:	463a      	mov	r2, r7
 801b3be:	4640      	mov	r0, r8
 801b3c0:	4798      	blx	r3
 801b3c2:	462e      	mov	r6, r5
 801b3c4:	6822      	ldr	r2, [r4, #0]
 801b3c6:	f012 0210 	ands.w	r2, r2, #16
 801b3ca:	d001      	beq.n	801b3d0 <_scanf_float+0x370>
 801b3cc:	2000      	movs	r0, #0
 801b3ce:	e68b      	b.n	801b0e8 <_scanf_float+0x88>
 801b3d0:	7032      	strb	r2, [r6, #0]
 801b3d2:	6823      	ldr	r3, [r4, #0]
 801b3d4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 801b3d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801b3dc:	d11c      	bne.n	801b418 <_scanf_float+0x3b8>
 801b3de:	9b02      	ldr	r3, [sp, #8]
 801b3e0:	454b      	cmp	r3, r9
 801b3e2:	eba3 0209 	sub.w	r2, r3, r9
 801b3e6:	d123      	bne.n	801b430 <_scanf_float+0x3d0>
 801b3e8:	9901      	ldr	r1, [sp, #4]
 801b3ea:	2200      	movs	r2, #0
 801b3ec:	4640      	mov	r0, r8
 801b3ee:	f7ff f8ef 	bl	801a5d0 <_strtod_r>
 801b3f2:	9b03      	ldr	r3, [sp, #12]
 801b3f4:	6821      	ldr	r1, [r4, #0]
 801b3f6:	681b      	ldr	r3, [r3, #0]
 801b3f8:	f011 0f02 	tst.w	r1, #2
 801b3fc:	ec57 6b10 	vmov	r6, r7, d0
 801b400:	f103 0204 	add.w	r2, r3, #4
 801b404:	d01f      	beq.n	801b446 <_scanf_float+0x3e6>
 801b406:	9903      	ldr	r1, [sp, #12]
 801b408:	600a      	str	r2, [r1, #0]
 801b40a:	681b      	ldr	r3, [r3, #0]
 801b40c:	e9c3 6700 	strd	r6, r7, [r3]
 801b410:	68e3      	ldr	r3, [r4, #12]
 801b412:	3301      	adds	r3, #1
 801b414:	60e3      	str	r3, [r4, #12]
 801b416:	e7d9      	b.n	801b3cc <_scanf_float+0x36c>
 801b418:	9b04      	ldr	r3, [sp, #16]
 801b41a:	2b00      	cmp	r3, #0
 801b41c:	d0e4      	beq.n	801b3e8 <_scanf_float+0x388>
 801b41e:	9905      	ldr	r1, [sp, #20]
 801b420:	230a      	movs	r3, #10
 801b422:	3101      	adds	r1, #1
 801b424:	4640      	mov	r0, r8
 801b426:	f7ff f9b7 	bl	801a798 <_strtol_r>
 801b42a:	9b04      	ldr	r3, [sp, #16]
 801b42c:	9e05      	ldr	r6, [sp, #20]
 801b42e:	1ac2      	subs	r2, r0, r3
 801b430:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 801b434:	429e      	cmp	r6, r3
 801b436:	bf28      	it	cs
 801b438:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 801b43c:	4910      	ldr	r1, [pc, #64]	@ (801b480 <_scanf_float+0x420>)
 801b43e:	4630      	mov	r0, r6
 801b440:	f000 f918 	bl	801b674 <siprintf>
 801b444:	e7d0      	b.n	801b3e8 <_scanf_float+0x388>
 801b446:	f011 0f04 	tst.w	r1, #4
 801b44a:	9903      	ldr	r1, [sp, #12]
 801b44c:	600a      	str	r2, [r1, #0]
 801b44e:	d1dc      	bne.n	801b40a <_scanf_float+0x3aa>
 801b450:	681d      	ldr	r5, [r3, #0]
 801b452:	4632      	mov	r2, r6
 801b454:	463b      	mov	r3, r7
 801b456:	4630      	mov	r0, r6
 801b458:	4639      	mov	r1, r7
 801b45a:	f7e5 fb3f 	bl	8000adc <__aeabi_dcmpun>
 801b45e:	b128      	cbz	r0, 801b46c <_scanf_float+0x40c>
 801b460:	4808      	ldr	r0, [pc, #32]	@ (801b484 <_scanf_float+0x424>)
 801b462:	f000 fa9d 	bl	801b9a0 <nanf>
 801b466:	ed85 0a00 	vstr	s0, [r5]
 801b46a:	e7d1      	b.n	801b410 <_scanf_float+0x3b0>
 801b46c:	4630      	mov	r0, r6
 801b46e:	4639      	mov	r1, r7
 801b470:	f7e5 fb92 	bl	8000b98 <__aeabi_d2f>
 801b474:	6028      	str	r0, [r5, #0]
 801b476:	e7cb      	b.n	801b410 <_scanf_float+0x3b0>
 801b478:	f04f 0900 	mov.w	r9, #0
 801b47c:	e629      	b.n	801b0d2 <_scanf_float+0x72>
 801b47e:	bf00      	nop
 801b480:	0802244d 	.word	0x0802244d
 801b484:	08022506 	.word	0x08022506

0801b488 <std>:
 801b488:	2300      	movs	r3, #0
 801b48a:	b510      	push	{r4, lr}
 801b48c:	4604      	mov	r4, r0
 801b48e:	e9c0 3300 	strd	r3, r3, [r0]
 801b492:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801b496:	6083      	str	r3, [r0, #8]
 801b498:	8181      	strh	r1, [r0, #12]
 801b49a:	6643      	str	r3, [r0, #100]	@ 0x64
 801b49c:	81c2      	strh	r2, [r0, #14]
 801b49e:	6183      	str	r3, [r0, #24]
 801b4a0:	4619      	mov	r1, r3
 801b4a2:	2208      	movs	r2, #8
 801b4a4:	305c      	adds	r0, #92	@ 0x5c
 801b4a6:	f000 f948 	bl	801b73a <memset>
 801b4aa:	4b0d      	ldr	r3, [pc, #52]	@ (801b4e0 <std+0x58>)
 801b4ac:	6263      	str	r3, [r4, #36]	@ 0x24
 801b4ae:	4b0d      	ldr	r3, [pc, #52]	@ (801b4e4 <std+0x5c>)
 801b4b0:	62a3      	str	r3, [r4, #40]	@ 0x28
 801b4b2:	4b0d      	ldr	r3, [pc, #52]	@ (801b4e8 <std+0x60>)
 801b4b4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801b4b6:	4b0d      	ldr	r3, [pc, #52]	@ (801b4ec <std+0x64>)
 801b4b8:	6323      	str	r3, [r4, #48]	@ 0x30
 801b4ba:	4b0d      	ldr	r3, [pc, #52]	@ (801b4f0 <std+0x68>)
 801b4bc:	6224      	str	r4, [r4, #32]
 801b4be:	429c      	cmp	r4, r3
 801b4c0:	d006      	beq.n	801b4d0 <std+0x48>
 801b4c2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801b4c6:	4294      	cmp	r4, r2
 801b4c8:	d002      	beq.n	801b4d0 <std+0x48>
 801b4ca:	33d0      	adds	r3, #208	@ 0xd0
 801b4cc:	429c      	cmp	r4, r3
 801b4ce:	d105      	bne.n	801b4dc <std+0x54>
 801b4d0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801b4d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b4d8:	f000 ba40 	b.w	801b95c <__retarget_lock_init_recursive>
 801b4dc:	bd10      	pop	{r4, pc}
 801b4de:	bf00      	nop
 801b4e0:	0801b6b5 	.word	0x0801b6b5
 801b4e4:	0801b6d7 	.word	0x0801b6d7
 801b4e8:	0801b70f 	.word	0x0801b70f
 801b4ec:	0801b733 	.word	0x0801b733
 801b4f0:	20003054 	.word	0x20003054

0801b4f4 <stdio_exit_handler>:
 801b4f4:	4a02      	ldr	r2, [pc, #8]	@ (801b500 <stdio_exit_handler+0xc>)
 801b4f6:	4903      	ldr	r1, [pc, #12]	@ (801b504 <stdio_exit_handler+0x10>)
 801b4f8:	4803      	ldr	r0, [pc, #12]	@ (801b508 <stdio_exit_handler+0x14>)
 801b4fa:	f000 b869 	b.w	801b5d0 <_fwalk_sglue>
 801b4fe:	bf00      	nop
 801b500:	20000148 	.word	0x20000148
 801b504:	0801dd65 	.word	0x0801dd65
 801b508:	200002c4 	.word	0x200002c4

0801b50c <cleanup_stdio>:
 801b50c:	6841      	ldr	r1, [r0, #4]
 801b50e:	4b0c      	ldr	r3, [pc, #48]	@ (801b540 <cleanup_stdio+0x34>)
 801b510:	4299      	cmp	r1, r3
 801b512:	b510      	push	{r4, lr}
 801b514:	4604      	mov	r4, r0
 801b516:	d001      	beq.n	801b51c <cleanup_stdio+0x10>
 801b518:	f002 fc24 	bl	801dd64 <_fflush_r>
 801b51c:	68a1      	ldr	r1, [r4, #8]
 801b51e:	4b09      	ldr	r3, [pc, #36]	@ (801b544 <cleanup_stdio+0x38>)
 801b520:	4299      	cmp	r1, r3
 801b522:	d002      	beq.n	801b52a <cleanup_stdio+0x1e>
 801b524:	4620      	mov	r0, r4
 801b526:	f002 fc1d 	bl	801dd64 <_fflush_r>
 801b52a:	68e1      	ldr	r1, [r4, #12]
 801b52c:	4b06      	ldr	r3, [pc, #24]	@ (801b548 <cleanup_stdio+0x3c>)
 801b52e:	4299      	cmp	r1, r3
 801b530:	d004      	beq.n	801b53c <cleanup_stdio+0x30>
 801b532:	4620      	mov	r0, r4
 801b534:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b538:	f002 bc14 	b.w	801dd64 <_fflush_r>
 801b53c:	bd10      	pop	{r4, pc}
 801b53e:	bf00      	nop
 801b540:	20003054 	.word	0x20003054
 801b544:	200030bc 	.word	0x200030bc
 801b548:	20003124 	.word	0x20003124

0801b54c <global_stdio_init.part.0>:
 801b54c:	b510      	push	{r4, lr}
 801b54e:	4b0b      	ldr	r3, [pc, #44]	@ (801b57c <global_stdio_init.part.0+0x30>)
 801b550:	4c0b      	ldr	r4, [pc, #44]	@ (801b580 <global_stdio_init.part.0+0x34>)
 801b552:	4a0c      	ldr	r2, [pc, #48]	@ (801b584 <global_stdio_init.part.0+0x38>)
 801b554:	601a      	str	r2, [r3, #0]
 801b556:	4620      	mov	r0, r4
 801b558:	2200      	movs	r2, #0
 801b55a:	2104      	movs	r1, #4
 801b55c:	f7ff ff94 	bl	801b488 <std>
 801b560:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801b564:	2201      	movs	r2, #1
 801b566:	2109      	movs	r1, #9
 801b568:	f7ff ff8e 	bl	801b488 <std>
 801b56c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801b570:	2202      	movs	r2, #2
 801b572:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b576:	2112      	movs	r1, #18
 801b578:	f7ff bf86 	b.w	801b488 <std>
 801b57c:	2000318c 	.word	0x2000318c
 801b580:	20003054 	.word	0x20003054
 801b584:	0801b4f5 	.word	0x0801b4f5

0801b588 <__sfp_lock_acquire>:
 801b588:	4801      	ldr	r0, [pc, #4]	@ (801b590 <__sfp_lock_acquire+0x8>)
 801b58a:	f000 b9e8 	b.w	801b95e <__retarget_lock_acquire_recursive>
 801b58e:	bf00      	nop
 801b590:	20003195 	.word	0x20003195

0801b594 <__sfp_lock_release>:
 801b594:	4801      	ldr	r0, [pc, #4]	@ (801b59c <__sfp_lock_release+0x8>)
 801b596:	f000 b9e3 	b.w	801b960 <__retarget_lock_release_recursive>
 801b59a:	bf00      	nop
 801b59c:	20003195 	.word	0x20003195

0801b5a0 <__sinit>:
 801b5a0:	b510      	push	{r4, lr}
 801b5a2:	4604      	mov	r4, r0
 801b5a4:	f7ff fff0 	bl	801b588 <__sfp_lock_acquire>
 801b5a8:	6a23      	ldr	r3, [r4, #32]
 801b5aa:	b11b      	cbz	r3, 801b5b4 <__sinit+0x14>
 801b5ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b5b0:	f7ff bff0 	b.w	801b594 <__sfp_lock_release>
 801b5b4:	4b04      	ldr	r3, [pc, #16]	@ (801b5c8 <__sinit+0x28>)
 801b5b6:	6223      	str	r3, [r4, #32]
 801b5b8:	4b04      	ldr	r3, [pc, #16]	@ (801b5cc <__sinit+0x2c>)
 801b5ba:	681b      	ldr	r3, [r3, #0]
 801b5bc:	2b00      	cmp	r3, #0
 801b5be:	d1f5      	bne.n	801b5ac <__sinit+0xc>
 801b5c0:	f7ff ffc4 	bl	801b54c <global_stdio_init.part.0>
 801b5c4:	e7f2      	b.n	801b5ac <__sinit+0xc>
 801b5c6:	bf00      	nop
 801b5c8:	0801b50d 	.word	0x0801b50d
 801b5cc:	2000318c 	.word	0x2000318c

0801b5d0 <_fwalk_sglue>:
 801b5d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b5d4:	4607      	mov	r7, r0
 801b5d6:	4688      	mov	r8, r1
 801b5d8:	4614      	mov	r4, r2
 801b5da:	2600      	movs	r6, #0
 801b5dc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801b5e0:	f1b9 0901 	subs.w	r9, r9, #1
 801b5e4:	d505      	bpl.n	801b5f2 <_fwalk_sglue+0x22>
 801b5e6:	6824      	ldr	r4, [r4, #0]
 801b5e8:	2c00      	cmp	r4, #0
 801b5ea:	d1f7      	bne.n	801b5dc <_fwalk_sglue+0xc>
 801b5ec:	4630      	mov	r0, r6
 801b5ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b5f2:	89ab      	ldrh	r3, [r5, #12]
 801b5f4:	2b01      	cmp	r3, #1
 801b5f6:	d907      	bls.n	801b608 <_fwalk_sglue+0x38>
 801b5f8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801b5fc:	3301      	adds	r3, #1
 801b5fe:	d003      	beq.n	801b608 <_fwalk_sglue+0x38>
 801b600:	4629      	mov	r1, r5
 801b602:	4638      	mov	r0, r7
 801b604:	47c0      	blx	r8
 801b606:	4306      	orrs	r6, r0
 801b608:	3568      	adds	r5, #104	@ 0x68
 801b60a:	e7e9      	b.n	801b5e0 <_fwalk_sglue+0x10>

0801b60c <sniprintf>:
 801b60c:	b40c      	push	{r2, r3}
 801b60e:	b530      	push	{r4, r5, lr}
 801b610:	4b17      	ldr	r3, [pc, #92]	@ (801b670 <sniprintf+0x64>)
 801b612:	1e0c      	subs	r4, r1, #0
 801b614:	681d      	ldr	r5, [r3, #0]
 801b616:	b09d      	sub	sp, #116	@ 0x74
 801b618:	da08      	bge.n	801b62c <sniprintf+0x20>
 801b61a:	238b      	movs	r3, #139	@ 0x8b
 801b61c:	602b      	str	r3, [r5, #0]
 801b61e:	f04f 30ff 	mov.w	r0, #4294967295
 801b622:	b01d      	add	sp, #116	@ 0x74
 801b624:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801b628:	b002      	add	sp, #8
 801b62a:	4770      	bx	lr
 801b62c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801b630:	f8ad 3014 	strh.w	r3, [sp, #20]
 801b634:	bf14      	ite	ne
 801b636:	f104 33ff 	addne.w	r3, r4, #4294967295
 801b63a:	4623      	moveq	r3, r4
 801b63c:	9304      	str	r3, [sp, #16]
 801b63e:	9307      	str	r3, [sp, #28]
 801b640:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801b644:	9002      	str	r0, [sp, #8]
 801b646:	9006      	str	r0, [sp, #24]
 801b648:	f8ad 3016 	strh.w	r3, [sp, #22]
 801b64c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801b64e:	ab21      	add	r3, sp, #132	@ 0x84
 801b650:	a902      	add	r1, sp, #8
 801b652:	4628      	mov	r0, r5
 801b654:	9301      	str	r3, [sp, #4]
 801b656:	f002 f8c3 	bl	801d7e0 <_svfiprintf_r>
 801b65a:	1c43      	adds	r3, r0, #1
 801b65c:	bfbc      	itt	lt
 801b65e:	238b      	movlt	r3, #139	@ 0x8b
 801b660:	602b      	strlt	r3, [r5, #0]
 801b662:	2c00      	cmp	r4, #0
 801b664:	d0dd      	beq.n	801b622 <sniprintf+0x16>
 801b666:	9b02      	ldr	r3, [sp, #8]
 801b668:	2200      	movs	r2, #0
 801b66a:	701a      	strb	r2, [r3, #0]
 801b66c:	e7d9      	b.n	801b622 <sniprintf+0x16>
 801b66e:	bf00      	nop
 801b670:	200002c0 	.word	0x200002c0

0801b674 <siprintf>:
 801b674:	b40e      	push	{r1, r2, r3}
 801b676:	b500      	push	{lr}
 801b678:	b09c      	sub	sp, #112	@ 0x70
 801b67a:	ab1d      	add	r3, sp, #116	@ 0x74
 801b67c:	9002      	str	r0, [sp, #8]
 801b67e:	9006      	str	r0, [sp, #24]
 801b680:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801b684:	4809      	ldr	r0, [pc, #36]	@ (801b6ac <siprintf+0x38>)
 801b686:	9107      	str	r1, [sp, #28]
 801b688:	9104      	str	r1, [sp, #16]
 801b68a:	4909      	ldr	r1, [pc, #36]	@ (801b6b0 <siprintf+0x3c>)
 801b68c:	f853 2b04 	ldr.w	r2, [r3], #4
 801b690:	9105      	str	r1, [sp, #20]
 801b692:	6800      	ldr	r0, [r0, #0]
 801b694:	9301      	str	r3, [sp, #4]
 801b696:	a902      	add	r1, sp, #8
 801b698:	f002 f8a2 	bl	801d7e0 <_svfiprintf_r>
 801b69c:	9b02      	ldr	r3, [sp, #8]
 801b69e:	2200      	movs	r2, #0
 801b6a0:	701a      	strb	r2, [r3, #0]
 801b6a2:	b01c      	add	sp, #112	@ 0x70
 801b6a4:	f85d eb04 	ldr.w	lr, [sp], #4
 801b6a8:	b003      	add	sp, #12
 801b6aa:	4770      	bx	lr
 801b6ac:	200002c0 	.word	0x200002c0
 801b6b0:	ffff0208 	.word	0xffff0208

0801b6b4 <__sread>:
 801b6b4:	b510      	push	{r4, lr}
 801b6b6:	460c      	mov	r4, r1
 801b6b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b6bc:	f000 f8f0 	bl	801b8a0 <_read_r>
 801b6c0:	2800      	cmp	r0, #0
 801b6c2:	bfab      	itete	ge
 801b6c4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801b6c6:	89a3      	ldrhlt	r3, [r4, #12]
 801b6c8:	181b      	addge	r3, r3, r0
 801b6ca:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801b6ce:	bfac      	ite	ge
 801b6d0:	6563      	strge	r3, [r4, #84]	@ 0x54
 801b6d2:	81a3      	strhlt	r3, [r4, #12]
 801b6d4:	bd10      	pop	{r4, pc}

0801b6d6 <__swrite>:
 801b6d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b6da:	461f      	mov	r7, r3
 801b6dc:	898b      	ldrh	r3, [r1, #12]
 801b6de:	05db      	lsls	r3, r3, #23
 801b6e0:	4605      	mov	r5, r0
 801b6e2:	460c      	mov	r4, r1
 801b6e4:	4616      	mov	r6, r2
 801b6e6:	d505      	bpl.n	801b6f4 <__swrite+0x1e>
 801b6e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b6ec:	2302      	movs	r3, #2
 801b6ee:	2200      	movs	r2, #0
 801b6f0:	f000 f8c4 	bl	801b87c <_lseek_r>
 801b6f4:	89a3      	ldrh	r3, [r4, #12]
 801b6f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b6fa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801b6fe:	81a3      	strh	r3, [r4, #12]
 801b700:	4632      	mov	r2, r6
 801b702:	463b      	mov	r3, r7
 801b704:	4628      	mov	r0, r5
 801b706:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b70a:	f000 b8eb 	b.w	801b8e4 <_write_r>

0801b70e <__sseek>:
 801b70e:	b510      	push	{r4, lr}
 801b710:	460c      	mov	r4, r1
 801b712:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b716:	f000 f8b1 	bl	801b87c <_lseek_r>
 801b71a:	1c43      	adds	r3, r0, #1
 801b71c:	89a3      	ldrh	r3, [r4, #12]
 801b71e:	bf15      	itete	ne
 801b720:	6560      	strne	r0, [r4, #84]	@ 0x54
 801b722:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801b726:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801b72a:	81a3      	strheq	r3, [r4, #12]
 801b72c:	bf18      	it	ne
 801b72e:	81a3      	strhne	r3, [r4, #12]
 801b730:	bd10      	pop	{r4, pc}

0801b732 <__sclose>:
 801b732:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b736:	f000 b891 	b.w	801b85c <_close_r>

0801b73a <memset>:
 801b73a:	4402      	add	r2, r0
 801b73c:	4603      	mov	r3, r0
 801b73e:	4293      	cmp	r3, r2
 801b740:	d100      	bne.n	801b744 <memset+0xa>
 801b742:	4770      	bx	lr
 801b744:	f803 1b01 	strb.w	r1, [r3], #1
 801b748:	e7f9      	b.n	801b73e <memset+0x4>

0801b74a <strncmp>:
 801b74a:	b510      	push	{r4, lr}
 801b74c:	b16a      	cbz	r2, 801b76a <strncmp+0x20>
 801b74e:	3901      	subs	r1, #1
 801b750:	1884      	adds	r4, r0, r2
 801b752:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b756:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801b75a:	429a      	cmp	r2, r3
 801b75c:	d103      	bne.n	801b766 <strncmp+0x1c>
 801b75e:	42a0      	cmp	r0, r4
 801b760:	d001      	beq.n	801b766 <strncmp+0x1c>
 801b762:	2a00      	cmp	r2, #0
 801b764:	d1f5      	bne.n	801b752 <strncmp+0x8>
 801b766:	1ad0      	subs	r0, r2, r3
 801b768:	bd10      	pop	{r4, pc}
 801b76a:	4610      	mov	r0, r2
 801b76c:	e7fc      	b.n	801b768 <strncmp+0x1e>
	...

0801b770 <strtok>:
 801b770:	4b16      	ldr	r3, [pc, #88]	@ (801b7cc <strtok+0x5c>)
 801b772:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b776:	681f      	ldr	r7, [r3, #0]
 801b778:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 801b77a:	4605      	mov	r5, r0
 801b77c:	460e      	mov	r6, r1
 801b77e:	b9ec      	cbnz	r4, 801b7bc <strtok+0x4c>
 801b780:	2050      	movs	r0, #80	@ 0x50
 801b782:	f7fe f865 	bl	8019850 <malloc>
 801b786:	4602      	mov	r2, r0
 801b788:	6478      	str	r0, [r7, #68]	@ 0x44
 801b78a:	b920      	cbnz	r0, 801b796 <strtok+0x26>
 801b78c:	4b10      	ldr	r3, [pc, #64]	@ (801b7d0 <strtok+0x60>)
 801b78e:	4811      	ldr	r0, [pc, #68]	@ (801b7d4 <strtok+0x64>)
 801b790:	215b      	movs	r1, #91	@ 0x5b
 801b792:	f000 f90b 	bl	801b9ac <__assert_func>
 801b796:	e9c0 4400 	strd	r4, r4, [r0]
 801b79a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 801b79e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 801b7a2:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 801b7a6:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 801b7aa:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 801b7ae:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 801b7b2:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 801b7b6:	6184      	str	r4, [r0, #24]
 801b7b8:	7704      	strb	r4, [r0, #28]
 801b7ba:	6244      	str	r4, [r0, #36]	@ 0x24
 801b7bc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801b7be:	4631      	mov	r1, r6
 801b7c0:	4628      	mov	r0, r5
 801b7c2:	2301      	movs	r3, #1
 801b7c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b7c8:	f000 b806 	b.w	801b7d8 <__strtok_r>
 801b7cc:	200002c0 	.word	0x200002c0
 801b7d0:	08022452 	.word	0x08022452
 801b7d4:	08022469 	.word	0x08022469

0801b7d8 <__strtok_r>:
 801b7d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b7da:	4604      	mov	r4, r0
 801b7dc:	b908      	cbnz	r0, 801b7e2 <__strtok_r+0xa>
 801b7de:	6814      	ldr	r4, [r2, #0]
 801b7e0:	b144      	cbz	r4, 801b7f4 <__strtok_r+0x1c>
 801b7e2:	4620      	mov	r0, r4
 801b7e4:	f814 5b01 	ldrb.w	r5, [r4], #1
 801b7e8:	460f      	mov	r7, r1
 801b7ea:	f817 6b01 	ldrb.w	r6, [r7], #1
 801b7ee:	b91e      	cbnz	r6, 801b7f8 <__strtok_r+0x20>
 801b7f0:	b965      	cbnz	r5, 801b80c <__strtok_r+0x34>
 801b7f2:	6015      	str	r5, [r2, #0]
 801b7f4:	2000      	movs	r0, #0
 801b7f6:	e005      	b.n	801b804 <__strtok_r+0x2c>
 801b7f8:	42b5      	cmp	r5, r6
 801b7fa:	d1f6      	bne.n	801b7ea <__strtok_r+0x12>
 801b7fc:	2b00      	cmp	r3, #0
 801b7fe:	d1f0      	bne.n	801b7e2 <__strtok_r+0xa>
 801b800:	6014      	str	r4, [r2, #0]
 801b802:	7003      	strb	r3, [r0, #0]
 801b804:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b806:	461c      	mov	r4, r3
 801b808:	e00c      	b.n	801b824 <__strtok_r+0x4c>
 801b80a:	b915      	cbnz	r5, 801b812 <__strtok_r+0x3a>
 801b80c:	f814 3b01 	ldrb.w	r3, [r4], #1
 801b810:	460e      	mov	r6, r1
 801b812:	f816 5b01 	ldrb.w	r5, [r6], #1
 801b816:	42ab      	cmp	r3, r5
 801b818:	d1f7      	bne.n	801b80a <__strtok_r+0x32>
 801b81a:	2b00      	cmp	r3, #0
 801b81c:	d0f3      	beq.n	801b806 <__strtok_r+0x2e>
 801b81e:	2300      	movs	r3, #0
 801b820:	f804 3c01 	strb.w	r3, [r4, #-1]
 801b824:	6014      	str	r4, [r2, #0]
 801b826:	e7ed      	b.n	801b804 <__strtok_r+0x2c>

0801b828 <strstr>:
 801b828:	780a      	ldrb	r2, [r1, #0]
 801b82a:	b570      	push	{r4, r5, r6, lr}
 801b82c:	b96a      	cbnz	r2, 801b84a <strstr+0x22>
 801b82e:	bd70      	pop	{r4, r5, r6, pc}
 801b830:	429a      	cmp	r2, r3
 801b832:	d109      	bne.n	801b848 <strstr+0x20>
 801b834:	460c      	mov	r4, r1
 801b836:	4605      	mov	r5, r0
 801b838:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801b83c:	2b00      	cmp	r3, #0
 801b83e:	d0f6      	beq.n	801b82e <strstr+0x6>
 801b840:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801b844:	429e      	cmp	r6, r3
 801b846:	d0f7      	beq.n	801b838 <strstr+0x10>
 801b848:	3001      	adds	r0, #1
 801b84a:	7803      	ldrb	r3, [r0, #0]
 801b84c:	2b00      	cmp	r3, #0
 801b84e:	d1ef      	bne.n	801b830 <strstr+0x8>
 801b850:	4618      	mov	r0, r3
 801b852:	e7ec      	b.n	801b82e <strstr+0x6>

0801b854 <_localeconv_r>:
 801b854:	4800      	ldr	r0, [pc, #0]	@ (801b858 <_localeconv_r+0x4>)
 801b856:	4770      	bx	lr
 801b858:	20000244 	.word	0x20000244

0801b85c <_close_r>:
 801b85c:	b538      	push	{r3, r4, r5, lr}
 801b85e:	4d06      	ldr	r5, [pc, #24]	@ (801b878 <_close_r+0x1c>)
 801b860:	2300      	movs	r3, #0
 801b862:	4604      	mov	r4, r0
 801b864:	4608      	mov	r0, r1
 801b866:	602b      	str	r3, [r5, #0]
 801b868:	f7ea fe76 	bl	8006558 <_close>
 801b86c:	1c43      	adds	r3, r0, #1
 801b86e:	d102      	bne.n	801b876 <_close_r+0x1a>
 801b870:	682b      	ldr	r3, [r5, #0]
 801b872:	b103      	cbz	r3, 801b876 <_close_r+0x1a>
 801b874:	6023      	str	r3, [r4, #0]
 801b876:	bd38      	pop	{r3, r4, r5, pc}
 801b878:	20003190 	.word	0x20003190

0801b87c <_lseek_r>:
 801b87c:	b538      	push	{r3, r4, r5, lr}
 801b87e:	4d07      	ldr	r5, [pc, #28]	@ (801b89c <_lseek_r+0x20>)
 801b880:	4604      	mov	r4, r0
 801b882:	4608      	mov	r0, r1
 801b884:	4611      	mov	r1, r2
 801b886:	2200      	movs	r2, #0
 801b888:	602a      	str	r2, [r5, #0]
 801b88a:	461a      	mov	r2, r3
 801b88c:	f7ea fe8b 	bl	80065a6 <_lseek>
 801b890:	1c43      	adds	r3, r0, #1
 801b892:	d102      	bne.n	801b89a <_lseek_r+0x1e>
 801b894:	682b      	ldr	r3, [r5, #0]
 801b896:	b103      	cbz	r3, 801b89a <_lseek_r+0x1e>
 801b898:	6023      	str	r3, [r4, #0]
 801b89a:	bd38      	pop	{r3, r4, r5, pc}
 801b89c:	20003190 	.word	0x20003190

0801b8a0 <_read_r>:
 801b8a0:	b538      	push	{r3, r4, r5, lr}
 801b8a2:	4d07      	ldr	r5, [pc, #28]	@ (801b8c0 <_read_r+0x20>)
 801b8a4:	4604      	mov	r4, r0
 801b8a6:	4608      	mov	r0, r1
 801b8a8:	4611      	mov	r1, r2
 801b8aa:	2200      	movs	r2, #0
 801b8ac:	602a      	str	r2, [r5, #0]
 801b8ae:	461a      	mov	r2, r3
 801b8b0:	f7ea fe19 	bl	80064e6 <_read>
 801b8b4:	1c43      	adds	r3, r0, #1
 801b8b6:	d102      	bne.n	801b8be <_read_r+0x1e>
 801b8b8:	682b      	ldr	r3, [r5, #0]
 801b8ba:	b103      	cbz	r3, 801b8be <_read_r+0x1e>
 801b8bc:	6023      	str	r3, [r4, #0]
 801b8be:	bd38      	pop	{r3, r4, r5, pc}
 801b8c0:	20003190 	.word	0x20003190

0801b8c4 <_sbrk_r>:
 801b8c4:	b538      	push	{r3, r4, r5, lr}
 801b8c6:	4d06      	ldr	r5, [pc, #24]	@ (801b8e0 <_sbrk_r+0x1c>)
 801b8c8:	2300      	movs	r3, #0
 801b8ca:	4604      	mov	r4, r0
 801b8cc:	4608      	mov	r0, r1
 801b8ce:	602b      	str	r3, [r5, #0]
 801b8d0:	f7ea fe76 	bl	80065c0 <_sbrk>
 801b8d4:	1c43      	adds	r3, r0, #1
 801b8d6:	d102      	bne.n	801b8de <_sbrk_r+0x1a>
 801b8d8:	682b      	ldr	r3, [r5, #0]
 801b8da:	b103      	cbz	r3, 801b8de <_sbrk_r+0x1a>
 801b8dc:	6023      	str	r3, [r4, #0]
 801b8de:	bd38      	pop	{r3, r4, r5, pc}
 801b8e0:	20003190 	.word	0x20003190

0801b8e4 <_write_r>:
 801b8e4:	b538      	push	{r3, r4, r5, lr}
 801b8e6:	4d07      	ldr	r5, [pc, #28]	@ (801b904 <_write_r+0x20>)
 801b8e8:	4604      	mov	r4, r0
 801b8ea:	4608      	mov	r0, r1
 801b8ec:	4611      	mov	r1, r2
 801b8ee:	2200      	movs	r2, #0
 801b8f0:	602a      	str	r2, [r5, #0]
 801b8f2:	461a      	mov	r2, r3
 801b8f4:	f7ea fe14 	bl	8006520 <_write>
 801b8f8:	1c43      	adds	r3, r0, #1
 801b8fa:	d102      	bne.n	801b902 <_write_r+0x1e>
 801b8fc:	682b      	ldr	r3, [r5, #0]
 801b8fe:	b103      	cbz	r3, 801b902 <_write_r+0x1e>
 801b900:	6023      	str	r3, [r4, #0]
 801b902:	bd38      	pop	{r3, r4, r5, pc}
 801b904:	20003190 	.word	0x20003190

0801b908 <__errno>:
 801b908:	4b01      	ldr	r3, [pc, #4]	@ (801b910 <__errno+0x8>)
 801b90a:	6818      	ldr	r0, [r3, #0]
 801b90c:	4770      	bx	lr
 801b90e:	bf00      	nop
 801b910:	200002c0 	.word	0x200002c0

0801b914 <__libc_init_array>:
 801b914:	b570      	push	{r4, r5, r6, lr}
 801b916:	4d0d      	ldr	r5, [pc, #52]	@ (801b94c <__libc_init_array+0x38>)
 801b918:	4c0d      	ldr	r4, [pc, #52]	@ (801b950 <__libc_init_array+0x3c>)
 801b91a:	1b64      	subs	r4, r4, r5
 801b91c:	10a4      	asrs	r4, r4, #2
 801b91e:	2600      	movs	r6, #0
 801b920:	42a6      	cmp	r6, r4
 801b922:	d109      	bne.n	801b938 <__libc_init_array+0x24>
 801b924:	4d0b      	ldr	r5, [pc, #44]	@ (801b954 <__libc_init_array+0x40>)
 801b926:	4c0c      	ldr	r4, [pc, #48]	@ (801b958 <__libc_init_array+0x44>)
 801b928:	f004 f99a 	bl	801fc60 <_init>
 801b92c:	1b64      	subs	r4, r4, r5
 801b92e:	10a4      	asrs	r4, r4, #2
 801b930:	2600      	movs	r6, #0
 801b932:	42a6      	cmp	r6, r4
 801b934:	d105      	bne.n	801b942 <__libc_init_array+0x2e>
 801b936:	bd70      	pop	{r4, r5, r6, pc}
 801b938:	f855 3b04 	ldr.w	r3, [r5], #4
 801b93c:	4798      	blx	r3
 801b93e:	3601      	adds	r6, #1
 801b940:	e7ee      	b.n	801b920 <__libc_init_array+0xc>
 801b942:	f855 3b04 	ldr.w	r3, [r5], #4
 801b946:	4798      	blx	r3
 801b948:	3601      	adds	r6, #1
 801b94a:	e7f2      	b.n	801b932 <__libc_init_array+0x1e>
 801b94c:	08022948 	.word	0x08022948
 801b950:	08022948 	.word	0x08022948
 801b954:	08022948 	.word	0x08022948
 801b958:	0802294c 	.word	0x0802294c

0801b95c <__retarget_lock_init_recursive>:
 801b95c:	4770      	bx	lr

0801b95e <__retarget_lock_acquire_recursive>:
 801b95e:	4770      	bx	lr

0801b960 <__retarget_lock_release_recursive>:
 801b960:	4770      	bx	lr

0801b962 <strcpy>:
 801b962:	4603      	mov	r3, r0
 801b964:	f811 2b01 	ldrb.w	r2, [r1], #1
 801b968:	f803 2b01 	strb.w	r2, [r3], #1
 801b96c:	2a00      	cmp	r2, #0
 801b96e:	d1f9      	bne.n	801b964 <strcpy+0x2>
 801b970:	4770      	bx	lr

0801b972 <memcpy>:
 801b972:	440a      	add	r2, r1
 801b974:	4291      	cmp	r1, r2
 801b976:	f100 33ff 	add.w	r3, r0, #4294967295
 801b97a:	d100      	bne.n	801b97e <memcpy+0xc>
 801b97c:	4770      	bx	lr
 801b97e:	b510      	push	{r4, lr}
 801b980:	f811 4b01 	ldrb.w	r4, [r1], #1
 801b984:	f803 4f01 	strb.w	r4, [r3, #1]!
 801b988:	4291      	cmp	r1, r2
 801b98a:	d1f9      	bne.n	801b980 <memcpy+0xe>
 801b98c:	bd10      	pop	{r4, pc}
	...

0801b990 <nan>:
 801b990:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 801b998 <nan+0x8>
 801b994:	4770      	bx	lr
 801b996:	bf00      	nop
 801b998:	00000000 	.word	0x00000000
 801b99c:	7ff80000 	.word	0x7ff80000

0801b9a0 <nanf>:
 801b9a0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 801b9a8 <nanf+0x8>
 801b9a4:	4770      	bx	lr
 801b9a6:	bf00      	nop
 801b9a8:	7fc00000 	.word	0x7fc00000

0801b9ac <__assert_func>:
 801b9ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801b9ae:	4614      	mov	r4, r2
 801b9b0:	461a      	mov	r2, r3
 801b9b2:	4b09      	ldr	r3, [pc, #36]	@ (801b9d8 <__assert_func+0x2c>)
 801b9b4:	681b      	ldr	r3, [r3, #0]
 801b9b6:	4605      	mov	r5, r0
 801b9b8:	68d8      	ldr	r0, [r3, #12]
 801b9ba:	b954      	cbnz	r4, 801b9d2 <__assert_func+0x26>
 801b9bc:	4b07      	ldr	r3, [pc, #28]	@ (801b9dc <__assert_func+0x30>)
 801b9be:	461c      	mov	r4, r3
 801b9c0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801b9c4:	9100      	str	r1, [sp, #0]
 801b9c6:	462b      	mov	r3, r5
 801b9c8:	4905      	ldr	r1, [pc, #20]	@ (801b9e0 <__assert_func+0x34>)
 801b9ca:	f002 f9f3 	bl	801ddb4 <fiprintf>
 801b9ce:	f002 fab1 	bl	801df34 <abort>
 801b9d2:	4b04      	ldr	r3, [pc, #16]	@ (801b9e4 <__assert_func+0x38>)
 801b9d4:	e7f4      	b.n	801b9c0 <__assert_func+0x14>
 801b9d6:	bf00      	nop
 801b9d8:	200002c0 	.word	0x200002c0
 801b9dc:	08022506 	.word	0x08022506
 801b9e0:	080224d8 	.word	0x080224d8
 801b9e4:	080224cb 	.word	0x080224cb

0801b9e8 <quorem>:
 801b9e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b9ec:	6903      	ldr	r3, [r0, #16]
 801b9ee:	690c      	ldr	r4, [r1, #16]
 801b9f0:	42a3      	cmp	r3, r4
 801b9f2:	4607      	mov	r7, r0
 801b9f4:	db7e      	blt.n	801baf4 <quorem+0x10c>
 801b9f6:	3c01      	subs	r4, #1
 801b9f8:	f101 0814 	add.w	r8, r1, #20
 801b9fc:	00a3      	lsls	r3, r4, #2
 801b9fe:	f100 0514 	add.w	r5, r0, #20
 801ba02:	9300      	str	r3, [sp, #0]
 801ba04:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801ba08:	9301      	str	r3, [sp, #4]
 801ba0a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801ba0e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801ba12:	3301      	adds	r3, #1
 801ba14:	429a      	cmp	r2, r3
 801ba16:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801ba1a:	fbb2 f6f3 	udiv	r6, r2, r3
 801ba1e:	d32e      	bcc.n	801ba7e <quorem+0x96>
 801ba20:	f04f 0a00 	mov.w	sl, #0
 801ba24:	46c4      	mov	ip, r8
 801ba26:	46ae      	mov	lr, r5
 801ba28:	46d3      	mov	fp, sl
 801ba2a:	f85c 3b04 	ldr.w	r3, [ip], #4
 801ba2e:	b298      	uxth	r0, r3
 801ba30:	fb06 a000 	mla	r0, r6, r0, sl
 801ba34:	0c02      	lsrs	r2, r0, #16
 801ba36:	0c1b      	lsrs	r3, r3, #16
 801ba38:	fb06 2303 	mla	r3, r6, r3, r2
 801ba3c:	f8de 2000 	ldr.w	r2, [lr]
 801ba40:	b280      	uxth	r0, r0
 801ba42:	b292      	uxth	r2, r2
 801ba44:	1a12      	subs	r2, r2, r0
 801ba46:	445a      	add	r2, fp
 801ba48:	f8de 0000 	ldr.w	r0, [lr]
 801ba4c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801ba50:	b29b      	uxth	r3, r3
 801ba52:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801ba56:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801ba5a:	b292      	uxth	r2, r2
 801ba5c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801ba60:	45e1      	cmp	r9, ip
 801ba62:	f84e 2b04 	str.w	r2, [lr], #4
 801ba66:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801ba6a:	d2de      	bcs.n	801ba2a <quorem+0x42>
 801ba6c:	9b00      	ldr	r3, [sp, #0]
 801ba6e:	58eb      	ldr	r3, [r5, r3]
 801ba70:	b92b      	cbnz	r3, 801ba7e <quorem+0x96>
 801ba72:	9b01      	ldr	r3, [sp, #4]
 801ba74:	3b04      	subs	r3, #4
 801ba76:	429d      	cmp	r5, r3
 801ba78:	461a      	mov	r2, r3
 801ba7a:	d32f      	bcc.n	801badc <quorem+0xf4>
 801ba7c:	613c      	str	r4, [r7, #16]
 801ba7e:	4638      	mov	r0, r7
 801ba80:	f001 fc58 	bl	801d334 <__mcmp>
 801ba84:	2800      	cmp	r0, #0
 801ba86:	db25      	blt.n	801bad4 <quorem+0xec>
 801ba88:	4629      	mov	r1, r5
 801ba8a:	2000      	movs	r0, #0
 801ba8c:	f858 2b04 	ldr.w	r2, [r8], #4
 801ba90:	f8d1 c000 	ldr.w	ip, [r1]
 801ba94:	fa1f fe82 	uxth.w	lr, r2
 801ba98:	fa1f f38c 	uxth.w	r3, ip
 801ba9c:	eba3 030e 	sub.w	r3, r3, lr
 801baa0:	4403      	add	r3, r0
 801baa2:	0c12      	lsrs	r2, r2, #16
 801baa4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 801baa8:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 801baac:	b29b      	uxth	r3, r3
 801baae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801bab2:	45c1      	cmp	r9, r8
 801bab4:	f841 3b04 	str.w	r3, [r1], #4
 801bab8:	ea4f 4022 	mov.w	r0, r2, asr #16
 801babc:	d2e6      	bcs.n	801ba8c <quorem+0xa4>
 801babe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801bac2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801bac6:	b922      	cbnz	r2, 801bad2 <quorem+0xea>
 801bac8:	3b04      	subs	r3, #4
 801baca:	429d      	cmp	r5, r3
 801bacc:	461a      	mov	r2, r3
 801bace:	d30b      	bcc.n	801bae8 <quorem+0x100>
 801bad0:	613c      	str	r4, [r7, #16]
 801bad2:	3601      	adds	r6, #1
 801bad4:	4630      	mov	r0, r6
 801bad6:	b003      	add	sp, #12
 801bad8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801badc:	6812      	ldr	r2, [r2, #0]
 801bade:	3b04      	subs	r3, #4
 801bae0:	2a00      	cmp	r2, #0
 801bae2:	d1cb      	bne.n	801ba7c <quorem+0x94>
 801bae4:	3c01      	subs	r4, #1
 801bae6:	e7c6      	b.n	801ba76 <quorem+0x8e>
 801bae8:	6812      	ldr	r2, [r2, #0]
 801baea:	3b04      	subs	r3, #4
 801baec:	2a00      	cmp	r2, #0
 801baee:	d1ef      	bne.n	801bad0 <quorem+0xe8>
 801baf0:	3c01      	subs	r4, #1
 801baf2:	e7ea      	b.n	801baca <quorem+0xe2>
 801baf4:	2000      	movs	r0, #0
 801baf6:	e7ee      	b.n	801bad6 <quorem+0xee>

0801baf8 <_dtoa_r>:
 801baf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bafc:	69c7      	ldr	r7, [r0, #28]
 801bafe:	b099      	sub	sp, #100	@ 0x64
 801bb00:	ed8d 0b02 	vstr	d0, [sp, #8]
 801bb04:	ec55 4b10 	vmov	r4, r5, d0
 801bb08:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 801bb0a:	9109      	str	r1, [sp, #36]	@ 0x24
 801bb0c:	4683      	mov	fp, r0
 801bb0e:	920e      	str	r2, [sp, #56]	@ 0x38
 801bb10:	9313      	str	r3, [sp, #76]	@ 0x4c
 801bb12:	b97f      	cbnz	r7, 801bb34 <_dtoa_r+0x3c>
 801bb14:	2010      	movs	r0, #16
 801bb16:	f7fd fe9b 	bl	8019850 <malloc>
 801bb1a:	4602      	mov	r2, r0
 801bb1c:	f8cb 001c 	str.w	r0, [fp, #28]
 801bb20:	b920      	cbnz	r0, 801bb2c <_dtoa_r+0x34>
 801bb22:	4ba7      	ldr	r3, [pc, #668]	@ (801bdc0 <_dtoa_r+0x2c8>)
 801bb24:	21ef      	movs	r1, #239	@ 0xef
 801bb26:	48a7      	ldr	r0, [pc, #668]	@ (801bdc4 <_dtoa_r+0x2cc>)
 801bb28:	f7ff ff40 	bl	801b9ac <__assert_func>
 801bb2c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 801bb30:	6007      	str	r7, [r0, #0]
 801bb32:	60c7      	str	r7, [r0, #12]
 801bb34:	f8db 301c 	ldr.w	r3, [fp, #28]
 801bb38:	6819      	ldr	r1, [r3, #0]
 801bb3a:	b159      	cbz	r1, 801bb54 <_dtoa_r+0x5c>
 801bb3c:	685a      	ldr	r2, [r3, #4]
 801bb3e:	604a      	str	r2, [r1, #4]
 801bb40:	2301      	movs	r3, #1
 801bb42:	4093      	lsls	r3, r2
 801bb44:	608b      	str	r3, [r1, #8]
 801bb46:	4658      	mov	r0, fp
 801bb48:	f001 f970 	bl	801ce2c <_Bfree>
 801bb4c:	f8db 301c 	ldr.w	r3, [fp, #28]
 801bb50:	2200      	movs	r2, #0
 801bb52:	601a      	str	r2, [r3, #0]
 801bb54:	1e2b      	subs	r3, r5, #0
 801bb56:	bfb9      	ittee	lt
 801bb58:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801bb5c:	9303      	strlt	r3, [sp, #12]
 801bb5e:	2300      	movge	r3, #0
 801bb60:	6033      	strge	r3, [r6, #0]
 801bb62:	9f03      	ldr	r7, [sp, #12]
 801bb64:	4b98      	ldr	r3, [pc, #608]	@ (801bdc8 <_dtoa_r+0x2d0>)
 801bb66:	bfbc      	itt	lt
 801bb68:	2201      	movlt	r2, #1
 801bb6a:	6032      	strlt	r2, [r6, #0]
 801bb6c:	43bb      	bics	r3, r7
 801bb6e:	d112      	bne.n	801bb96 <_dtoa_r+0x9e>
 801bb70:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801bb72:	f242 730f 	movw	r3, #9999	@ 0x270f
 801bb76:	6013      	str	r3, [r2, #0]
 801bb78:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801bb7c:	4323      	orrs	r3, r4
 801bb7e:	f000 854d 	beq.w	801c61c <_dtoa_r+0xb24>
 801bb82:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801bb84:	f8df a254 	ldr.w	sl, [pc, #596]	@ 801bddc <_dtoa_r+0x2e4>
 801bb88:	2b00      	cmp	r3, #0
 801bb8a:	f000 854f 	beq.w	801c62c <_dtoa_r+0xb34>
 801bb8e:	f10a 0303 	add.w	r3, sl, #3
 801bb92:	f000 bd49 	b.w	801c628 <_dtoa_r+0xb30>
 801bb96:	ed9d 7b02 	vldr	d7, [sp, #8]
 801bb9a:	2200      	movs	r2, #0
 801bb9c:	ec51 0b17 	vmov	r0, r1, d7
 801bba0:	2300      	movs	r3, #0
 801bba2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 801bba6:	f7e4 ff67 	bl	8000a78 <__aeabi_dcmpeq>
 801bbaa:	4680      	mov	r8, r0
 801bbac:	b158      	cbz	r0, 801bbc6 <_dtoa_r+0xce>
 801bbae:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801bbb0:	2301      	movs	r3, #1
 801bbb2:	6013      	str	r3, [r2, #0]
 801bbb4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801bbb6:	b113      	cbz	r3, 801bbbe <_dtoa_r+0xc6>
 801bbb8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801bbba:	4b84      	ldr	r3, [pc, #528]	@ (801bdcc <_dtoa_r+0x2d4>)
 801bbbc:	6013      	str	r3, [r2, #0]
 801bbbe:	f8df a220 	ldr.w	sl, [pc, #544]	@ 801bde0 <_dtoa_r+0x2e8>
 801bbc2:	f000 bd33 	b.w	801c62c <_dtoa_r+0xb34>
 801bbc6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801bbca:	aa16      	add	r2, sp, #88	@ 0x58
 801bbcc:	a917      	add	r1, sp, #92	@ 0x5c
 801bbce:	4658      	mov	r0, fp
 801bbd0:	f001 fcd0 	bl	801d574 <__d2b>
 801bbd4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 801bbd8:	4681      	mov	r9, r0
 801bbda:	2e00      	cmp	r6, #0
 801bbdc:	d077      	beq.n	801bcce <_dtoa_r+0x1d6>
 801bbde:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801bbe0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 801bbe4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801bbe8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801bbec:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 801bbf0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 801bbf4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 801bbf8:	4619      	mov	r1, r3
 801bbfa:	2200      	movs	r2, #0
 801bbfc:	4b74      	ldr	r3, [pc, #464]	@ (801bdd0 <_dtoa_r+0x2d8>)
 801bbfe:	f7e4 fb1b 	bl	8000238 <__aeabi_dsub>
 801bc02:	a369      	add	r3, pc, #420	@ (adr r3, 801bda8 <_dtoa_r+0x2b0>)
 801bc04:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bc08:	f7e4 fcce 	bl	80005a8 <__aeabi_dmul>
 801bc0c:	a368      	add	r3, pc, #416	@ (adr r3, 801bdb0 <_dtoa_r+0x2b8>)
 801bc0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bc12:	f7e4 fb13 	bl	800023c <__adddf3>
 801bc16:	4604      	mov	r4, r0
 801bc18:	4630      	mov	r0, r6
 801bc1a:	460d      	mov	r5, r1
 801bc1c:	f7e4 fc5a 	bl	80004d4 <__aeabi_i2d>
 801bc20:	a365      	add	r3, pc, #404	@ (adr r3, 801bdb8 <_dtoa_r+0x2c0>)
 801bc22:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bc26:	f7e4 fcbf 	bl	80005a8 <__aeabi_dmul>
 801bc2a:	4602      	mov	r2, r0
 801bc2c:	460b      	mov	r3, r1
 801bc2e:	4620      	mov	r0, r4
 801bc30:	4629      	mov	r1, r5
 801bc32:	f7e4 fb03 	bl	800023c <__adddf3>
 801bc36:	4604      	mov	r4, r0
 801bc38:	460d      	mov	r5, r1
 801bc3a:	f7e4 ff65 	bl	8000b08 <__aeabi_d2iz>
 801bc3e:	2200      	movs	r2, #0
 801bc40:	4607      	mov	r7, r0
 801bc42:	2300      	movs	r3, #0
 801bc44:	4620      	mov	r0, r4
 801bc46:	4629      	mov	r1, r5
 801bc48:	f7e4 ff20 	bl	8000a8c <__aeabi_dcmplt>
 801bc4c:	b140      	cbz	r0, 801bc60 <_dtoa_r+0x168>
 801bc4e:	4638      	mov	r0, r7
 801bc50:	f7e4 fc40 	bl	80004d4 <__aeabi_i2d>
 801bc54:	4622      	mov	r2, r4
 801bc56:	462b      	mov	r3, r5
 801bc58:	f7e4 ff0e 	bl	8000a78 <__aeabi_dcmpeq>
 801bc5c:	b900      	cbnz	r0, 801bc60 <_dtoa_r+0x168>
 801bc5e:	3f01      	subs	r7, #1
 801bc60:	2f16      	cmp	r7, #22
 801bc62:	d851      	bhi.n	801bd08 <_dtoa_r+0x210>
 801bc64:	4b5b      	ldr	r3, [pc, #364]	@ (801bdd4 <_dtoa_r+0x2dc>)
 801bc66:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801bc6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bc6e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801bc72:	f7e4 ff0b 	bl	8000a8c <__aeabi_dcmplt>
 801bc76:	2800      	cmp	r0, #0
 801bc78:	d048      	beq.n	801bd0c <_dtoa_r+0x214>
 801bc7a:	3f01      	subs	r7, #1
 801bc7c:	2300      	movs	r3, #0
 801bc7e:	9312      	str	r3, [sp, #72]	@ 0x48
 801bc80:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801bc82:	1b9b      	subs	r3, r3, r6
 801bc84:	1e5a      	subs	r2, r3, #1
 801bc86:	bf44      	itt	mi
 801bc88:	f1c3 0801 	rsbmi	r8, r3, #1
 801bc8c:	2300      	movmi	r3, #0
 801bc8e:	9208      	str	r2, [sp, #32]
 801bc90:	bf54      	ite	pl
 801bc92:	f04f 0800 	movpl.w	r8, #0
 801bc96:	9308      	strmi	r3, [sp, #32]
 801bc98:	2f00      	cmp	r7, #0
 801bc9a:	db39      	blt.n	801bd10 <_dtoa_r+0x218>
 801bc9c:	9b08      	ldr	r3, [sp, #32]
 801bc9e:	970f      	str	r7, [sp, #60]	@ 0x3c
 801bca0:	443b      	add	r3, r7
 801bca2:	9308      	str	r3, [sp, #32]
 801bca4:	2300      	movs	r3, #0
 801bca6:	930a      	str	r3, [sp, #40]	@ 0x28
 801bca8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801bcaa:	2b09      	cmp	r3, #9
 801bcac:	d864      	bhi.n	801bd78 <_dtoa_r+0x280>
 801bcae:	2b05      	cmp	r3, #5
 801bcb0:	bfc4      	itt	gt
 801bcb2:	3b04      	subgt	r3, #4
 801bcb4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 801bcb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801bcb8:	f1a3 0302 	sub.w	r3, r3, #2
 801bcbc:	bfcc      	ite	gt
 801bcbe:	2400      	movgt	r4, #0
 801bcc0:	2401      	movle	r4, #1
 801bcc2:	2b03      	cmp	r3, #3
 801bcc4:	d863      	bhi.n	801bd8e <_dtoa_r+0x296>
 801bcc6:	e8df f003 	tbb	[pc, r3]
 801bcca:	372a      	.short	0x372a
 801bccc:	5535      	.short	0x5535
 801bcce:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 801bcd2:	441e      	add	r6, r3
 801bcd4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 801bcd8:	2b20      	cmp	r3, #32
 801bcda:	bfc1      	itttt	gt
 801bcdc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 801bce0:	409f      	lslgt	r7, r3
 801bce2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 801bce6:	fa24 f303 	lsrgt.w	r3, r4, r3
 801bcea:	bfd6      	itet	le
 801bcec:	f1c3 0320 	rsble	r3, r3, #32
 801bcf0:	ea47 0003 	orrgt.w	r0, r7, r3
 801bcf4:	fa04 f003 	lslle.w	r0, r4, r3
 801bcf8:	f7e4 fbdc 	bl	80004b4 <__aeabi_ui2d>
 801bcfc:	2201      	movs	r2, #1
 801bcfe:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 801bd02:	3e01      	subs	r6, #1
 801bd04:	9214      	str	r2, [sp, #80]	@ 0x50
 801bd06:	e777      	b.n	801bbf8 <_dtoa_r+0x100>
 801bd08:	2301      	movs	r3, #1
 801bd0a:	e7b8      	b.n	801bc7e <_dtoa_r+0x186>
 801bd0c:	9012      	str	r0, [sp, #72]	@ 0x48
 801bd0e:	e7b7      	b.n	801bc80 <_dtoa_r+0x188>
 801bd10:	427b      	negs	r3, r7
 801bd12:	930a      	str	r3, [sp, #40]	@ 0x28
 801bd14:	2300      	movs	r3, #0
 801bd16:	eba8 0807 	sub.w	r8, r8, r7
 801bd1a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801bd1c:	e7c4      	b.n	801bca8 <_dtoa_r+0x1b0>
 801bd1e:	2300      	movs	r3, #0
 801bd20:	930b      	str	r3, [sp, #44]	@ 0x2c
 801bd22:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801bd24:	2b00      	cmp	r3, #0
 801bd26:	dc35      	bgt.n	801bd94 <_dtoa_r+0x29c>
 801bd28:	2301      	movs	r3, #1
 801bd2a:	9300      	str	r3, [sp, #0]
 801bd2c:	9307      	str	r3, [sp, #28]
 801bd2e:	461a      	mov	r2, r3
 801bd30:	920e      	str	r2, [sp, #56]	@ 0x38
 801bd32:	e00b      	b.n	801bd4c <_dtoa_r+0x254>
 801bd34:	2301      	movs	r3, #1
 801bd36:	e7f3      	b.n	801bd20 <_dtoa_r+0x228>
 801bd38:	2300      	movs	r3, #0
 801bd3a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801bd3c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801bd3e:	18fb      	adds	r3, r7, r3
 801bd40:	9300      	str	r3, [sp, #0]
 801bd42:	3301      	adds	r3, #1
 801bd44:	2b01      	cmp	r3, #1
 801bd46:	9307      	str	r3, [sp, #28]
 801bd48:	bfb8      	it	lt
 801bd4a:	2301      	movlt	r3, #1
 801bd4c:	f8db 001c 	ldr.w	r0, [fp, #28]
 801bd50:	2100      	movs	r1, #0
 801bd52:	2204      	movs	r2, #4
 801bd54:	f102 0514 	add.w	r5, r2, #20
 801bd58:	429d      	cmp	r5, r3
 801bd5a:	d91f      	bls.n	801bd9c <_dtoa_r+0x2a4>
 801bd5c:	6041      	str	r1, [r0, #4]
 801bd5e:	4658      	mov	r0, fp
 801bd60:	f001 f824 	bl	801cdac <_Balloc>
 801bd64:	4682      	mov	sl, r0
 801bd66:	2800      	cmp	r0, #0
 801bd68:	d13c      	bne.n	801bde4 <_dtoa_r+0x2ec>
 801bd6a:	4b1b      	ldr	r3, [pc, #108]	@ (801bdd8 <_dtoa_r+0x2e0>)
 801bd6c:	4602      	mov	r2, r0
 801bd6e:	f240 11af 	movw	r1, #431	@ 0x1af
 801bd72:	e6d8      	b.n	801bb26 <_dtoa_r+0x2e>
 801bd74:	2301      	movs	r3, #1
 801bd76:	e7e0      	b.n	801bd3a <_dtoa_r+0x242>
 801bd78:	2401      	movs	r4, #1
 801bd7a:	2300      	movs	r3, #0
 801bd7c:	9309      	str	r3, [sp, #36]	@ 0x24
 801bd7e:	940b      	str	r4, [sp, #44]	@ 0x2c
 801bd80:	f04f 33ff 	mov.w	r3, #4294967295
 801bd84:	9300      	str	r3, [sp, #0]
 801bd86:	9307      	str	r3, [sp, #28]
 801bd88:	2200      	movs	r2, #0
 801bd8a:	2312      	movs	r3, #18
 801bd8c:	e7d0      	b.n	801bd30 <_dtoa_r+0x238>
 801bd8e:	2301      	movs	r3, #1
 801bd90:	930b      	str	r3, [sp, #44]	@ 0x2c
 801bd92:	e7f5      	b.n	801bd80 <_dtoa_r+0x288>
 801bd94:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801bd96:	9300      	str	r3, [sp, #0]
 801bd98:	9307      	str	r3, [sp, #28]
 801bd9a:	e7d7      	b.n	801bd4c <_dtoa_r+0x254>
 801bd9c:	3101      	adds	r1, #1
 801bd9e:	0052      	lsls	r2, r2, #1
 801bda0:	e7d8      	b.n	801bd54 <_dtoa_r+0x25c>
 801bda2:	bf00      	nop
 801bda4:	f3af 8000 	nop.w
 801bda8:	636f4361 	.word	0x636f4361
 801bdac:	3fd287a7 	.word	0x3fd287a7
 801bdb0:	8b60c8b3 	.word	0x8b60c8b3
 801bdb4:	3fc68a28 	.word	0x3fc68a28
 801bdb8:	509f79fb 	.word	0x509f79fb
 801bdbc:	3fd34413 	.word	0x3fd34413
 801bdc0:	08022452 	.word	0x08022452
 801bdc4:	08022514 	.word	0x08022514
 801bdc8:	7ff00000 	.word	0x7ff00000
 801bdcc:	0802242a 	.word	0x0802242a
 801bdd0:	3ff80000 	.word	0x3ff80000
 801bdd4:	08022670 	.word	0x08022670
 801bdd8:	0802256c 	.word	0x0802256c
 801bddc:	08022510 	.word	0x08022510
 801bde0:	08022429 	.word	0x08022429
 801bde4:	f8db 301c 	ldr.w	r3, [fp, #28]
 801bde8:	6018      	str	r0, [r3, #0]
 801bdea:	9b07      	ldr	r3, [sp, #28]
 801bdec:	2b0e      	cmp	r3, #14
 801bdee:	f200 80a4 	bhi.w	801bf3a <_dtoa_r+0x442>
 801bdf2:	2c00      	cmp	r4, #0
 801bdf4:	f000 80a1 	beq.w	801bf3a <_dtoa_r+0x442>
 801bdf8:	2f00      	cmp	r7, #0
 801bdfa:	dd33      	ble.n	801be64 <_dtoa_r+0x36c>
 801bdfc:	4bad      	ldr	r3, [pc, #692]	@ (801c0b4 <_dtoa_r+0x5bc>)
 801bdfe:	f007 020f 	and.w	r2, r7, #15
 801be02:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801be06:	ed93 7b00 	vldr	d7, [r3]
 801be0a:	05f8      	lsls	r0, r7, #23
 801be0c:	ed8d 7b04 	vstr	d7, [sp, #16]
 801be10:	ea4f 1427 	mov.w	r4, r7, asr #4
 801be14:	d516      	bpl.n	801be44 <_dtoa_r+0x34c>
 801be16:	4ba8      	ldr	r3, [pc, #672]	@ (801c0b8 <_dtoa_r+0x5c0>)
 801be18:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801be1c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801be20:	f7e4 fcec 	bl	80007fc <__aeabi_ddiv>
 801be24:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801be28:	f004 040f 	and.w	r4, r4, #15
 801be2c:	2603      	movs	r6, #3
 801be2e:	4da2      	ldr	r5, [pc, #648]	@ (801c0b8 <_dtoa_r+0x5c0>)
 801be30:	b954      	cbnz	r4, 801be48 <_dtoa_r+0x350>
 801be32:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801be36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801be3a:	f7e4 fcdf 	bl	80007fc <__aeabi_ddiv>
 801be3e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801be42:	e028      	b.n	801be96 <_dtoa_r+0x39e>
 801be44:	2602      	movs	r6, #2
 801be46:	e7f2      	b.n	801be2e <_dtoa_r+0x336>
 801be48:	07e1      	lsls	r1, r4, #31
 801be4a:	d508      	bpl.n	801be5e <_dtoa_r+0x366>
 801be4c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801be50:	e9d5 2300 	ldrd	r2, r3, [r5]
 801be54:	f7e4 fba8 	bl	80005a8 <__aeabi_dmul>
 801be58:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801be5c:	3601      	adds	r6, #1
 801be5e:	1064      	asrs	r4, r4, #1
 801be60:	3508      	adds	r5, #8
 801be62:	e7e5      	b.n	801be30 <_dtoa_r+0x338>
 801be64:	f000 80d2 	beq.w	801c00c <_dtoa_r+0x514>
 801be68:	427c      	negs	r4, r7
 801be6a:	4b92      	ldr	r3, [pc, #584]	@ (801c0b4 <_dtoa_r+0x5bc>)
 801be6c:	4d92      	ldr	r5, [pc, #584]	@ (801c0b8 <_dtoa_r+0x5c0>)
 801be6e:	f004 020f 	and.w	r2, r4, #15
 801be72:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801be76:	e9d3 2300 	ldrd	r2, r3, [r3]
 801be7a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801be7e:	f7e4 fb93 	bl	80005a8 <__aeabi_dmul>
 801be82:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801be86:	1124      	asrs	r4, r4, #4
 801be88:	2300      	movs	r3, #0
 801be8a:	2602      	movs	r6, #2
 801be8c:	2c00      	cmp	r4, #0
 801be8e:	f040 80b2 	bne.w	801bff6 <_dtoa_r+0x4fe>
 801be92:	2b00      	cmp	r3, #0
 801be94:	d1d3      	bne.n	801be3e <_dtoa_r+0x346>
 801be96:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801be98:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801be9c:	2b00      	cmp	r3, #0
 801be9e:	f000 80b7 	beq.w	801c010 <_dtoa_r+0x518>
 801bea2:	4b86      	ldr	r3, [pc, #536]	@ (801c0bc <_dtoa_r+0x5c4>)
 801bea4:	2200      	movs	r2, #0
 801bea6:	4620      	mov	r0, r4
 801bea8:	4629      	mov	r1, r5
 801beaa:	f7e4 fdef 	bl	8000a8c <__aeabi_dcmplt>
 801beae:	2800      	cmp	r0, #0
 801beb0:	f000 80ae 	beq.w	801c010 <_dtoa_r+0x518>
 801beb4:	9b07      	ldr	r3, [sp, #28]
 801beb6:	2b00      	cmp	r3, #0
 801beb8:	f000 80aa 	beq.w	801c010 <_dtoa_r+0x518>
 801bebc:	9b00      	ldr	r3, [sp, #0]
 801bebe:	2b00      	cmp	r3, #0
 801bec0:	dd37      	ble.n	801bf32 <_dtoa_r+0x43a>
 801bec2:	1e7b      	subs	r3, r7, #1
 801bec4:	9304      	str	r3, [sp, #16]
 801bec6:	4620      	mov	r0, r4
 801bec8:	4b7d      	ldr	r3, [pc, #500]	@ (801c0c0 <_dtoa_r+0x5c8>)
 801beca:	2200      	movs	r2, #0
 801becc:	4629      	mov	r1, r5
 801bece:	f7e4 fb6b 	bl	80005a8 <__aeabi_dmul>
 801bed2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801bed6:	9c00      	ldr	r4, [sp, #0]
 801bed8:	3601      	adds	r6, #1
 801beda:	4630      	mov	r0, r6
 801bedc:	f7e4 fafa 	bl	80004d4 <__aeabi_i2d>
 801bee0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801bee4:	f7e4 fb60 	bl	80005a8 <__aeabi_dmul>
 801bee8:	4b76      	ldr	r3, [pc, #472]	@ (801c0c4 <_dtoa_r+0x5cc>)
 801beea:	2200      	movs	r2, #0
 801beec:	f7e4 f9a6 	bl	800023c <__adddf3>
 801bef0:	4605      	mov	r5, r0
 801bef2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 801bef6:	2c00      	cmp	r4, #0
 801bef8:	f040 808d 	bne.w	801c016 <_dtoa_r+0x51e>
 801befc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801bf00:	4b71      	ldr	r3, [pc, #452]	@ (801c0c8 <_dtoa_r+0x5d0>)
 801bf02:	2200      	movs	r2, #0
 801bf04:	f7e4 f998 	bl	8000238 <__aeabi_dsub>
 801bf08:	4602      	mov	r2, r0
 801bf0a:	460b      	mov	r3, r1
 801bf0c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801bf10:	462a      	mov	r2, r5
 801bf12:	4633      	mov	r3, r6
 801bf14:	f7e4 fdd8 	bl	8000ac8 <__aeabi_dcmpgt>
 801bf18:	2800      	cmp	r0, #0
 801bf1a:	f040 828b 	bne.w	801c434 <_dtoa_r+0x93c>
 801bf1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801bf22:	462a      	mov	r2, r5
 801bf24:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 801bf28:	f7e4 fdb0 	bl	8000a8c <__aeabi_dcmplt>
 801bf2c:	2800      	cmp	r0, #0
 801bf2e:	f040 8128 	bne.w	801c182 <_dtoa_r+0x68a>
 801bf32:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 801bf36:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801bf3a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801bf3c:	2b00      	cmp	r3, #0
 801bf3e:	f2c0 815a 	blt.w	801c1f6 <_dtoa_r+0x6fe>
 801bf42:	2f0e      	cmp	r7, #14
 801bf44:	f300 8157 	bgt.w	801c1f6 <_dtoa_r+0x6fe>
 801bf48:	4b5a      	ldr	r3, [pc, #360]	@ (801c0b4 <_dtoa_r+0x5bc>)
 801bf4a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801bf4e:	ed93 7b00 	vldr	d7, [r3]
 801bf52:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801bf54:	2b00      	cmp	r3, #0
 801bf56:	ed8d 7b00 	vstr	d7, [sp]
 801bf5a:	da03      	bge.n	801bf64 <_dtoa_r+0x46c>
 801bf5c:	9b07      	ldr	r3, [sp, #28]
 801bf5e:	2b00      	cmp	r3, #0
 801bf60:	f340 8101 	ble.w	801c166 <_dtoa_r+0x66e>
 801bf64:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801bf68:	4656      	mov	r6, sl
 801bf6a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801bf6e:	4620      	mov	r0, r4
 801bf70:	4629      	mov	r1, r5
 801bf72:	f7e4 fc43 	bl	80007fc <__aeabi_ddiv>
 801bf76:	f7e4 fdc7 	bl	8000b08 <__aeabi_d2iz>
 801bf7a:	4680      	mov	r8, r0
 801bf7c:	f7e4 faaa 	bl	80004d4 <__aeabi_i2d>
 801bf80:	e9dd 2300 	ldrd	r2, r3, [sp]
 801bf84:	f7e4 fb10 	bl	80005a8 <__aeabi_dmul>
 801bf88:	4602      	mov	r2, r0
 801bf8a:	460b      	mov	r3, r1
 801bf8c:	4620      	mov	r0, r4
 801bf8e:	4629      	mov	r1, r5
 801bf90:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 801bf94:	f7e4 f950 	bl	8000238 <__aeabi_dsub>
 801bf98:	f806 4b01 	strb.w	r4, [r6], #1
 801bf9c:	9d07      	ldr	r5, [sp, #28]
 801bf9e:	eba6 040a 	sub.w	r4, r6, sl
 801bfa2:	42a5      	cmp	r5, r4
 801bfa4:	4602      	mov	r2, r0
 801bfa6:	460b      	mov	r3, r1
 801bfa8:	f040 8117 	bne.w	801c1da <_dtoa_r+0x6e2>
 801bfac:	f7e4 f946 	bl	800023c <__adddf3>
 801bfb0:	e9dd 2300 	ldrd	r2, r3, [sp]
 801bfb4:	4604      	mov	r4, r0
 801bfb6:	460d      	mov	r5, r1
 801bfb8:	f7e4 fd86 	bl	8000ac8 <__aeabi_dcmpgt>
 801bfbc:	2800      	cmp	r0, #0
 801bfbe:	f040 80f9 	bne.w	801c1b4 <_dtoa_r+0x6bc>
 801bfc2:	e9dd 2300 	ldrd	r2, r3, [sp]
 801bfc6:	4620      	mov	r0, r4
 801bfc8:	4629      	mov	r1, r5
 801bfca:	f7e4 fd55 	bl	8000a78 <__aeabi_dcmpeq>
 801bfce:	b118      	cbz	r0, 801bfd8 <_dtoa_r+0x4e0>
 801bfd0:	f018 0f01 	tst.w	r8, #1
 801bfd4:	f040 80ee 	bne.w	801c1b4 <_dtoa_r+0x6bc>
 801bfd8:	4649      	mov	r1, r9
 801bfda:	4658      	mov	r0, fp
 801bfdc:	f000 ff26 	bl	801ce2c <_Bfree>
 801bfe0:	2300      	movs	r3, #0
 801bfe2:	7033      	strb	r3, [r6, #0]
 801bfe4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801bfe6:	3701      	adds	r7, #1
 801bfe8:	601f      	str	r7, [r3, #0]
 801bfea:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801bfec:	2b00      	cmp	r3, #0
 801bfee:	f000 831d 	beq.w	801c62c <_dtoa_r+0xb34>
 801bff2:	601e      	str	r6, [r3, #0]
 801bff4:	e31a      	b.n	801c62c <_dtoa_r+0xb34>
 801bff6:	07e2      	lsls	r2, r4, #31
 801bff8:	d505      	bpl.n	801c006 <_dtoa_r+0x50e>
 801bffa:	e9d5 2300 	ldrd	r2, r3, [r5]
 801bffe:	f7e4 fad3 	bl	80005a8 <__aeabi_dmul>
 801c002:	3601      	adds	r6, #1
 801c004:	2301      	movs	r3, #1
 801c006:	1064      	asrs	r4, r4, #1
 801c008:	3508      	adds	r5, #8
 801c00a:	e73f      	b.n	801be8c <_dtoa_r+0x394>
 801c00c:	2602      	movs	r6, #2
 801c00e:	e742      	b.n	801be96 <_dtoa_r+0x39e>
 801c010:	9c07      	ldr	r4, [sp, #28]
 801c012:	9704      	str	r7, [sp, #16]
 801c014:	e761      	b.n	801beda <_dtoa_r+0x3e2>
 801c016:	4b27      	ldr	r3, [pc, #156]	@ (801c0b4 <_dtoa_r+0x5bc>)
 801c018:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801c01a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801c01e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801c022:	4454      	add	r4, sl
 801c024:	2900      	cmp	r1, #0
 801c026:	d053      	beq.n	801c0d0 <_dtoa_r+0x5d8>
 801c028:	4928      	ldr	r1, [pc, #160]	@ (801c0cc <_dtoa_r+0x5d4>)
 801c02a:	2000      	movs	r0, #0
 801c02c:	f7e4 fbe6 	bl	80007fc <__aeabi_ddiv>
 801c030:	4633      	mov	r3, r6
 801c032:	462a      	mov	r2, r5
 801c034:	f7e4 f900 	bl	8000238 <__aeabi_dsub>
 801c038:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801c03c:	4656      	mov	r6, sl
 801c03e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801c042:	f7e4 fd61 	bl	8000b08 <__aeabi_d2iz>
 801c046:	4605      	mov	r5, r0
 801c048:	f7e4 fa44 	bl	80004d4 <__aeabi_i2d>
 801c04c:	4602      	mov	r2, r0
 801c04e:	460b      	mov	r3, r1
 801c050:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801c054:	f7e4 f8f0 	bl	8000238 <__aeabi_dsub>
 801c058:	3530      	adds	r5, #48	@ 0x30
 801c05a:	4602      	mov	r2, r0
 801c05c:	460b      	mov	r3, r1
 801c05e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801c062:	f806 5b01 	strb.w	r5, [r6], #1
 801c066:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801c06a:	f7e4 fd0f 	bl	8000a8c <__aeabi_dcmplt>
 801c06e:	2800      	cmp	r0, #0
 801c070:	d171      	bne.n	801c156 <_dtoa_r+0x65e>
 801c072:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801c076:	4911      	ldr	r1, [pc, #68]	@ (801c0bc <_dtoa_r+0x5c4>)
 801c078:	2000      	movs	r0, #0
 801c07a:	f7e4 f8dd 	bl	8000238 <__aeabi_dsub>
 801c07e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801c082:	f7e4 fd03 	bl	8000a8c <__aeabi_dcmplt>
 801c086:	2800      	cmp	r0, #0
 801c088:	f040 8095 	bne.w	801c1b6 <_dtoa_r+0x6be>
 801c08c:	42a6      	cmp	r6, r4
 801c08e:	f43f af50 	beq.w	801bf32 <_dtoa_r+0x43a>
 801c092:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801c096:	4b0a      	ldr	r3, [pc, #40]	@ (801c0c0 <_dtoa_r+0x5c8>)
 801c098:	2200      	movs	r2, #0
 801c09a:	f7e4 fa85 	bl	80005a8 <__aeabi_dmul>
 801c09e:	4b08      	ldr	r3, [pc, #32]	@ (801c0c0 <_dtoa_r+0x5c8>)
 801c0a0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801c0a4:	2200      	movs	r2, #0
 801c0a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801c0aa:	f7e4 fa7d 	bl	80005a8 <__aeabi_dmul>
 801c0ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801c0b2:	e7c4      	b.n	801c03e <_dtoa_r+0x546>
 801c0b4:	08022670 	.word	0x08022670
 801c0b8:	08022648 	.word	0x08022648
 801c0bc:	3ff00000 	.word	0x3ff00000
 801c0c0:	40240000 	.word	0x40240000
 801c0c4:	401c0000 	.word	0x401c0000
 801c0c8:	40140000 	.word	0x40140000
 801c0cc:	3fe00000 	.word	0x3fe00000
 801c0d0:	4631      	mov	r1, r6
 801c0d2:	4628      	mov	r0, r5
 801c0d4:	f7e4 fa68 	bl	80005a8 <__aeabi_dmul>
 801c0d8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801c0dc:	9415      	str	r4, [sp, #84]	@ 0x54
 801c0de:	4656      	mov	r6, sl
 801c0e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801c0e4:	f7e4 fd10 	bl	8000b08 <__aeabi_d2iz>
 801c0e8:	4605      	mov	r5, r0
 801c0ea:	f7e4 f9f3 	bl	80004d4 <__aeabi_i2d>
 801c0ee:	4602      	mov	r2, r0
 801c0f0:	460b      	mov	r3, r1
 801c0f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801c0f6:	f7e4 f89f 	bl	8000238 <__aeabi_dsub>
 801c0fa:	3530      	adds	r5, #48	@ 0x30
 801c0fc:	f806 5b01 	strb.w	r5, [r6], #1
 801c100:	4602      	mov	r2, r0
 801c102:	460b      	mov	r3, r1
 801c104:	42a6      	cmp	r6, r4
 801c106:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801c10a:	f04f 0200 	mov.w	r2, #0
 801c10e:	d124      	bne.n	801c15a <_dtoa_r+0x662>
 801c110:	4bac      	ldr	r3, [pc, #688]	@ (801c3c4 <_dtoa_r+0x8cc>)
 801c112:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801c116:	f7e4 f891 	bl	800023c <__adddf3>
 801c11a:	4602      	mov	r2, r0
 801c11c:	460b      	mov	r3, r1
 801c11e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801c122:	f7e4 fcd1 	bl	8000ac8 <__aeabi_dcmpgt>
 801c126:	2800      	cmp	r0, #0
 801c128:	d145      	bne.n	801c1b6 <_dtoa_r+0x6be>
 801c12a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801c12e:	49a5      	ldr	r1, [pc, #660]	@ (801c3c4 <_dtoa_r+0x8cc>)
 801c130:	2000      	movs	r0, #0
 801c132:	f7e4 f881 	bl	8000238 <__aeabi_dsub>
 801c136:	4602      	mov	r2, r0
 801c138:	460b      	mov	r3, r1
 801c13a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801c13e:	f7e4 fca5 	bl	8000a8c <__aeabi_dcmplt>
 801c142:	2800      	cmp	r0, #0
 801c144:	f43f aef5 	beq.w	801bf32 <_dtoa_r+0x43a>
 801c148:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 801c14a:	1e73      	subs	r3, r6, #1
 801c14c:	9315      	str	r3, [sp, #84]	@ 0x54
 801c14e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801c152:	2b30      	cmp	r3, #48	@ 0x30
 801c154:	d0f8      	beq.n	801c148 <_dtoa_r+0x650>
 801c156:	9f04      	ldr	r7, [sp, #16]
 801c158:	e73e      	b.n	801bfd8 <_dtoa_r+0x4e0>
 801c15a:	4b9b      	ldr	r3, [pc, #620]	@ (801c3c8 <_dtoa_r+0x8d0>)
 801c15c:	f7e4 fa24 	bl	80005a8 <__aeabi_dmul>
 801c160:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801c164:	e7bc      	b.n	801c0e0 <_dtoa_r+0x5e8>
 801c166:	d10c      	bne.n	801c182 <_dtoa_r+0x68a>
 801c168:	4b98      	ldr	r3, [pc, #608]	@ (801c3cc <_dtoa_r+0x8d4>)
 801c16a:	2200      	movs	r2, #0
 801c16c:	e9dd 0100 	ldrd	r0, r1, [sp]
 801c170:	f7e4 fa1a 	bl	80005a8 <__aeabi_dmul>
 801c174:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801c178:	f7e4 fc9c 	bl	8000ab4 <__aeabi_dcmpge>
 801c17c:	2800      	cmp	r0, #0
 801c17e:	f000 8157 	beq.w	801c430 <_dtoa_r+0x938>
 801c182:	2400      	movs	r4, #0
 801c184:	4625      	mov	r5, r4
 801c186:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c188:	43db      	mvns	r3, r3
 801c18a:	9304      	str	r3, [sp, #16]
 801c18c:	4656      	mov	r6, sl
 801c18e:	2700      	movs	r7, #0
 801c190:	4621      	mov	r1, r4
 801c192:	4658      	mov	r0, fp
 801c194:	f000 fe4a 	bl	801ce2c <_Bfree>
 801c198:	2d00      	cmp	r5, #0
 801c19a:	d0dc      	beq.n	801c156 <_dtoa_r+0x65e>
 801c19c:	b12f      	cbz	r7, 801c1aa <_dtoa_r+0x6b2>
 801c19e:	42af      	cmp	r7, r5
 801c1a0:	d003      	beq.n	801c1aa <_dtoa_r+0x6b2>
 801c1a2:	4639      	mov	r1, r7
 801c1a4:	4658      	mov	r0, fp
 801c1a6:	f000 fe41 	bl	801ce2c <_Bfree>
 801c1aa:	4629      	mov	r1, r5
 801c1ac:	4658      	mov	r0, fp
 801c1ae:	f000 fe3d 	bl	801ce2c <_Bfree>
 801c1b2:	e7d0      	b.n	801c156 <_dtoa_r+0x65e>
 801c1b4:	9704      	str	r7, [sp, #16]
 801c1b6:	4633      	mov	r3, r6
 801c1b8:	461e      	mov	r6, r3
 801c1ba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801c1be:	2a39      	cmp	r2, #57	@ 0x39
 801c1c0:	d107      	bne.n	801c1d2 <_dtoa_r+0x6da>
 801c1c2:	459a      	cmp	sl, r3
 801c1c4:	d1f8      	bne.n	801c1b8 <_dtoa_r+0x6c0>
 801c1c6:	9a04      	ldr	r2, [sp, #16]
 801c1c8:	3201      	adds	r2, #1
 801c1ca:	9204      	str	r2, [sp, #16]
 801c1cc:	2230      	movs	r2, #48	@ 0x30
 801c1ce:	f88a 2000 	strb.w	r2, [sl]
 801c1d2:	781a      	ldrb	r2, [r3, #0]
 801c1d4:	3201      	adds	r2, #1
 801c1d6:	701a      	strb	r2, [r3, #0]
 801c1d8:	e7bd      	b.n	801c156 <_dtoa_r+0x65e>
 801c1da:	4b7b      	ldr	r3, [pc, #492]	@ (801c3c8 <_dtoa_r+0x8d0>)
 801c1dc:	2200      	movs	r2, #0
 801c1de:	f7e4 f9e3 	bl	80005a8 <__aeabi_dmul>
 801c1e2:	2200      	movs	r2, #0
 801c1e4:	2300      	movs	r3, #0
 801c1e6:	4604      	mov	r4, r0
 801c1e8:	460d      	mov	r5, r1
 801c1ea:	f7e4 fc45 	bl	8000a78 <__aeabi_dcmpeq>
 801c1ee:	2800      	cmp	r0, #0
 801c1f0:	f43f aebb 	beq.w	801bf6a <_dtoa_r+0x472>
 801c1f4:	e6f0      	b.n	801bfd8 <_dtoa_r+0x4e0>
 801c1f6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801c1f8:	2a00      	cmp	r2, #0
 801c1fa:	f000 80db 	beq.w	801c3b4 <_dtoa_r+0x8bc>
 801c1fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801c200:	2a01      	cmp	r2, #1
 801c202:	f300 80bf 	bgt.w	801c384 <_dtoa_r+0x88c>
 801c206:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801c208:	2a00      	cmp	r2, #0
 801c20a:	f000 80b7 	beq.w	801c37c <_dtoa_r+0x884>
 801c20e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801c212:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801c214:	4646      	mov	r6, r8
 801c216:	9a08      	ldr	r2, [sp, #32]
 801c218:	2101      	movs	r1, #1
 801c21a:	441a      	add	r2, r3
 801c21c:	4658      	mov	r0, fp
 801c21e:	4498      	add	r8, r3
 801c220:	9208      	str	r2, [sp, #32]
 801c222:	f000 ff01 	bl	801d028 <__i2b>
 801c226:	4605      	mov	r5, r0
 801c228:	b15e      	cbz	r6, 801c242 <_dtoa_r+0x74a>
 801c22a:	9b08      	ldr	r3, [sp, #32]
 801c22c:	2b00      	cmp	r3, #0
 801c22e:	dd08      	ble.n	801c242 <_dtoa_r+0x74a>
 801c230:	42b3      	cmp	r3, r6
 801c232:	9a08      	ldr	r2, [sp, #32]
 801c234:	bfa8      	it	ge
 801c236:	4633      	movge	r3, r6
 801c238:	eba8 0803 	sub.w	r8, r8, r3
 801c23c:	1af6      	subs	r6, r6, r3
 801c23e:	1ad3      	subs	r3, r2, r3
 801c240:	9308      	str	r3, [sp, #32]
 801c242:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c244:	b1f3      	cbz	r3, 801c284 <_dtoa_r+0x78c>
 801c246:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801c248:	2b00      	cmp	r3, #0
 801c24a:	f000 80b7 	beq.w	801c3bc <_dtoa_r+0x8c4>
 801c24e:	b18c      	cbz	r4, 801c274 <_dtoa_r+0x77c>
 801c250:	4629      	mov	r1, r5
 801c252:	4622      	mov	r2, r4
 801c254:	4658      	mov	r0, fp
 801c256:	f000 ffa7 	bl	801d1a8 <__pow5mult>
 801c25a:	464a      	mov	r2, r9
 801c25c:	4601      	mov	r1, r0
 801c25e:	4605      	mov	r5, r0
 801c260:	4658      	mov	r0, fp
 801c262:	f000 fef7 	bl	801d054 <__multiply>
 801c266:	4649      	mov	r1, r9
 801c268:	9004      	str	r0, [sp, #16]
 801c26a:	4658      	mov	r0, fp
 801c26c:	f000 fdde 	bl	801ce2c <_Bfree>
 801c270:	9b04      	ldr	r3, [sp, #16]
 801c272:	4699      	mov	r9, r3
 801c274:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c276:	1b1a      	subs	r2, r3, r4
 801c278:	d004      	beq.n	801c284 <_dtoa_r+0x78c>
 801c27a:	4649      	mov	r1, r9
 801c27c:	4658      	mov	r0, fp
 801c27e:	f000 ff93 	bl	801d1a8 <__pow5mult>
 801c282:	4681      	mov	r9, r0
 801c284:	2101      	movs	r1, #1
 801c286:	4658      	mov	r0, fp
 801c288:	f000 fece 	bl	801d028 <__i2b>
 801c28c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801c28e:	4604      	mov	r4, r0
 801c290:	2b00      	cmp	r3, #0
 801c292:	f000 81cf 	beq.w	801c634 <_dtoa_r+0xb3c>
 801c296:	461a      	mov	r2, r3
 801c298:	4601      	mov	r1, r0
 801c29a:	4658      	mov	r0, fp
 801c29c:	f000 ff84 	bl	801d1a8 <__pow5mult>
 801c2a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c2a2:	2b01      	cmp	r3, #1
 801c2a4:	4604      	mov	r4, r0
 801c2a6:	f300 8095 	bgt.w	801c3d4 <_dtoa_r+0x8dc>
 801c2aa:	9b02      	ldr	r3, [sp, #8]
 801c2ac:	2b00      	cmp	r3, #0
 801c2ae:	f040 8087 	bne.w	801c3c0 <_dtoa_r+0x8c8>
 801c2b2:	9b03      	ldr	r3, [sp, #12]
 801c2b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801c2b8:	2b00      	cmp	r3, #0
 801c2ba:	f040 8089 	bne.w	801c3d0 <_dtoa_r+0x8d8>
 801c2be:	9b03      	ldr	r3, [sp, #12]
 801c2c0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801c2c4:	0d1b      	lsrs	r3, r3, #20
 801c2c6:	051b      	lsls	r3, r3, #20
 801c2c8:	b12b      	cbz	r3, 801c2d6 <_dtoa_r+0x7de>
 801c2ca:	9b08      	ldr	r3, [sp, #32]
 801c2cc:	3301      	adds	r3, #1
 801c2ce:	9308      	str	r3, [sp, #32]
 801c2d0:	f108 0801 	add.w	r8, r8, #1
 801c2d4:	2301      	movs	r3, #1
 801c2d6:	930a      	str	r3, [sp, #40]	@ 0x28
 801c2d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801c2da:	2b00      	cmp	r3, #0
 801c2dc:	f000 81b0 	beq.w	801c640 <_dtoa_r+0xb48>
 801c2e0:	6923      	ldr	r3, [r4, #16]
 801c2e2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801c2e6:	6918      	ldr	r0, [r3, #16]
 801c2e8:	f000 fe52 	bl	801cf90 <__hi0bits>
 801c2ec:	f1c0 0020 	rsb	r0, r0, #32
 801c2f0:	9b08      	ldr	r3, [sp, #32]
 801c2f2:	4418      	add	r0, r3
 801c2f4:	f010 001f 	ands.w	r0, r0, #31
 801c2f8:	d077      	beq.n	801c3ea <_dtoa_r+0x8f2>
 801c2fa:	f1c0 0320 	rsb	r3, r0, #32
 801c2fe:	2b04      	cmp	r3, #4
 801c300:	dd6b      	ble.n	801c3da <_dtoa_r+0x8e2>
 801c302:	9b08      	ldr	r3, [sp, #32]
 801c304:	f1c0 001c 	rsb	r0, r0, #28
 801c308:	4403      	add	r3, r0
 801c30a:	4480      	add	r8, r0
 801c30c:	4406      	add	r6, r0
 801c30e:	9308      	str	r3, [sp, #32]
 801c310:	f1b8 0f00 	cmp.w	r8, #0
 801c314:	dd05      	ble.n	801c322 <_dtoa_r+0x82a>
 801c316:	4649      	mov	r1, r9
 801c318:	4642      	mov	r2, r8
 801c31a:	4658      	mov	r0, fp
 801c31c:	f000 ff9e 	bl	801d25c <__lshift>
 801c320:	4681      	mov	r9, r0
 801c322:	9b08      	ldr	r3, [sp, #32]
 801c324:	2b00      	cmp	r3, #0
 801c326:	dd05      	ble.n	801c334 <_dtoa_r+0x83c>
 801c328:	4621      	mov	r1, r4
 801c32a:	461a      	mov	r2, r3
 801c32c:	4658      	mov	r0, fp
 801c32e:	f000 ff95 	bl	801d25c <__lshift>
 801c332:	4604      	mov	r4, r0
 801c334:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801c336:	2b00      	cmp	r3, #0
 801c338:	d059      	beq.n	801c3ee <_dtoa_r+0x8f6>
 801c33a:	4621      	mov	r1, r4
 801c33c:	4648      	mov	r0, r9
 801c33e:	f000 fff9 	bl	801d334 <__mcmp>
 801c342:	2800      	cmp	r0, #0
 801c344:	da53      	bge.n	801c3ee <_dtoa_r+0x8f6>
 801c346:	1e7b      	subs	r3, r7, #1
 801c348:	9304      	str	r3, [sp, #16]
 801c34a:	4649      	mov	r1, r9
 801c34c:	2300      	movs	r3, #0
 801c34e:	220a      	movs	r2, #10
 801c350:	4658      	mov	r0, fp
 801c352:	f000 fd8d 	bl	801ce70 <__multadd>
 801c356:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801c358:	4681      	mov	r9, r0
 801c35a:	2b00      	cmp	r3, #0
 801c35c:	f000 8172 	beq.w	801c644 <_dtoa_r+0xb4c>
 801c360:	2300      	movs	r3, #0
 801c362:	4629      	mov	r1, r5
 801c364:	220a      	movs	r2, #10
 801c366:	4658      	mov	r0, fp
 801c368:	f000 fd82 	bl	801ce70 <__multadd>
 801c36c:	9b00      	ldr	r3, [sp, #0]
 801c36e:	2b00      	cmp	r3, #0
 801c370:	4605      	mov	r5, r0
 801c372:	dc67      	bgt.n	801c444 <_dtoa_r+0x94c>
 801c374:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c376:	2b02      	cmp	r3, #2
 801c378:	dc41      	bgt.n	801c3fe <_dtoa_r+0x906>
 801c37a:	e063      	b.n	801c444 <_dtoa_r+0x94c>
 801c37c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801c37e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 801c382:	e746      	b.n	801c212 <_dtoa_r+0x71a>
 801c384:	9b07      	ldr	r3, [sp, #28]
 801c386:	1e5c      	subs	r4, r3, #1
 801c388:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c38a:	42a3      	cmp	r3, r4
 801c38c:	bfbf      	itttt	lt
 801c38e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 801c390:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 801c392:	940a      	strlt	r4, [sp, #40]	@ 0x28
 801c394:	1ae3      	sublt	r3, r4, r3
 801c396:	bfb4      	ite	lt
 801c398:	18d2      	addlt	r2, r2, r3
 801c39a:	1b1c      	subge	r4, r3, r4
 801c39c:	9b07      	ldr	r3, [sp, #28]
 801c39e:	bfbc      	itt	lt
 801c3a0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 801c3a2:	2400      	movlt	r4, #0
 801c3a4:	2b00      	cmp	r3, #0
 801c3a6:	bfb5      	itete	lt
 801c3a8:	eba8 0603 	sublt.w	r6, r8, r3
 801c3ac:	9b07      	ldrge	r3, [sp, #28]
 801c3ae:	2300      	movlt	r3, #0
 801c3b0:	4646      	movge	r6, r8
 801c3b2:	e730      	b.n	801c216 <_dtoa_r+0x71e>
 801c3b4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801c3b6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 801c3b8:	4646      	mov	r6, r8
 801c3ba:	e735      	b.n	801c228 <_dtoa_r+0x730>
 801c3bc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801c3be:	e75c      	b.n	801c27a <_dtoa_r+0x782>
 801c3c0:	2300      	movs	r3, #0
 801c3c2:	e788      	b.n	801c2d6 <_dtoa_r+0x7de>
 801c3c4:	3fe00000 	.word	0x3fe00000
 801c3c8:	40240000 	.word	0x40240000
 801c3cc:	40140000 	.word	0x40140000
 801c3d0:	9b02      	ldr	r3, [sp, #8]
 801c3d2:	e780      	b.n	801c2d6 <_dtoa_r+0x7de>
 801c3d4:	2300      	movs	r3, #0
 801c3d6:	930a      	str	r3, [sp, #40]	@ 0x28
 801c3d8:	e782      	b.n	801c2e0 <_dtoa_r+0x7e8>
 801c3da:	d099      	beq.n	801c310 <_dtoa_r+0x818>
 801c3dc:	9a08      	ldr	r2, [sp, #32]
 801c3de:	331c      	adds	r3, #28
 801c3e0:	441a      	add	r2, r3
 801c3e2:	4498      	add	r8, r3
 801c3e4:	441e      	add	r6, r3
 801c3e6:	9208      	str	r2, [sp, #32]
 801c3e8:	e792      	b.n	801c310 <_dtoa_r+0x818>
 801c3ea:	4603      	mov	r3, r0
 801c3ec:	e7f6      	b.n	801c3dc <_dtoa_r+0x8e4>
 801c3ee:	9b07      	ldr	r3, [sp, #28]
 801c3f0:	9704      	str	r7, [sp, #16]
 801c3f2:	2b00      	cmp	r3, #0
 801c3f4:	dc20      	bgt.n	801c438 <_dtoa_r+0x940>
 801c3f6:	9300      	str	r3, [sp, #0]
 801c3f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c3fa:	2b02      	cmp	r3, #2
 801c3fc:	dd1e      	ble.n	801c43c <_dtoa_r+0x944>
 801c3fe:	9b00      	ldr	r3, [sp, #0]
 801c400:	2b00      	cmp	r3, #0
 801c402:	f47f aec0 	bne.w	801c186 <_dtoa_r+0x68e>
 801c406:	4621      	mov	r1, r4
 801c408:	2205      	movs	r2, #5
 801c40a:	4658      	mov	r0, fp
 801c40c:	f000 fd30 	bl	801ce70 <__multadd>
 801c410:	4601      	mov	r1, r0
 801c412:	4604      	mov	r4, r0
 801c414:	4648      	mov	r0, r9
 801c416:	f000 ff8d 	bl	801d334 <__mcmp>
 801c41a:	2800      	cmp	r0, #0
 801c41c:	f77f aeb3 	ble.w	801c186 <_dtoa_r+0x68e>
 801c420:	4656      	mov	r6, sl
 801c422:	2331      	movs	r3, #49	@ 0x31
 801c424:	f806 3b01 	strb.w	r3, [r6], #1
 801c428:	9b04      	ldr	r3, [sp, #16]
 801c42a:	3301      	adds	r3, #1
 801c42c:	9304      	str	r3, [sp, #16]
 801c42e:	e6ae      	b.n	801c18e <_dtoa_r+0x696>
 801c430:	9c07      	ldr	r4, [sp, #28]
 801c432:	9704      	str	r7, [sp, #16]
 801c434:	4625      	mov	r5, r4
 801c436:	e7f3      	b.n	801c420 <_dtoa_r+0x928>
 801c438:	9b07      	ldr	r3, [sp, #28]
 801c43a:	9300      	str	r3, [sp, #0]
 801c43c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801c43e:	2b00      	cmp	r3, #0
 801c440:	f000 8104 	beq.w	801c64c <_dtoa_r+0xb54>
 801c444:	2e00      	cmp	r6, #0
 801c446:	dd05      	ble.n	801c454 <_dtoa_r+0x95c>
 801c448:	4629      	mov	r1, r5
 801c44a:	4632      	mov	r2, r6
 801c44c:	4658      	mov	r0, fp
 801c44e:	f000 ff05 	bl	801d25c <__lshift>
 801c452:	4605      	mov	r5, r0
 801c454:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c456:	2b00      	cmp	r3, #0
 801c458:	d05a      	beq.n	801c510 <_dtoa_r+0xa18>
 801c45a:	6869      	ldr	r1, [r5, #4]
 801c45c:	4658      	mov	r0, fp
 801c45e:	f000 fca5 	bl	801cdac <_Balloc>
 801c462:	4606      	mov	r6, r0
 801c464:	b928      	cbnz	r0, 801c472 <_dtoa_r+0x97a>
 801c466:	4b84      	ldr	r3, [pc, #528]	@ (801c678 <_dtoa_r+0xb80>)
 801c468:	4602      	mov	r2, r0
 801c46a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801c46e:	f7ff bb5a 	b.w	801bb26 <_dtoa_r+0x2e>
 801c472:	692a      	ldr	r2, [r5, #16]
 801c474:	3202      	adds	r2, #2
 801c476:	0092      	lsls	r2, r2, #2
 801c478:	f105 010c 	add.w	r1, r5, #12
 801c47c:	300c      	adds	r0, #12
 801c47e:	f7ff fa78 	bl	801b972 <memcpy>
 801c482:	2201      	movs	r2, #1
 801c484:	4631      	mov	r1, r6
 801c486:	4658      	mov	r0, fp
 801c488:	f000 fee8 	bl	801d25c <__lshift>
 801c48c:	f10a 0301 	add.w	r3, sl, #1
 801c490:	9307      	str	r3, [sp, #28]
 801c492:	9b00      	ldr	r3, [sp, #0]
 801c494:	4453      	add	r3, sl
 801c496:	930b      	str	r3, [sp, #44]	@ 0x2c
 801c498:	9b02      	ldr	r3, [sp, #8]
 801c49a:	f003 0301 	and.w	r3, r3, #1
 801c49e:	462f      	mov	r7, r5
 801c4a0:	930a      	str	r3, [sp, #40]	@ 0x28
 801c4a2:	4605      	mov	r5, r0
 801c4a4:	9b07      	ldr	r3, [sp, #28]
 801c4a6:	4621      	mov	r1, r4
 801c4a8:	3b01      	subs	r3, #1
 801c4aa:	4648      	mov	r0, r9
 801c4ac:	9300      	str	r3, [sp, #0]
 801c4ae:	f7ff fa9b 	bl	801b9e8 <quorem>
 801c4b2:	4639      	mov	r1, r7
 801c4b4:	9002      	str	r0, [sp, #8]
 801c4b6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801c4ba:	4648      	mov	r0, r9
 801c4bc:	f000 ff3a 	bl	801d334 <__mcmp>
 801c4c0:	462a      	mov	r2, r5
 801c4c2:	9008      	str	r0, [sp, #32]
 801c4c4:	4621      	mov	r1, r4
 801c4c6:	4658      	mov	r0, fp
 801c4c8:	f000 ff50 	bl	801d36c <__mdiff>
 801c4cc:	68c2      	ldr	r2, [r0, #12]
 801c4ce:	4606      	mov	r6, r0
 801c4d0:	bb02      	cbnz	r2, 801c514 <_dtoa_r+0xa1c>
 801c4d2:	4601      	mov	r1, r0
 801c4d4:	4648      	mov	r0, r9
 801c4d6:	f000 ff2d 	bl	801d334 <__mcmp>
 801c4da:	4602      	mov	r2, r0
 801c4dc:	4631      	mov	r1, r6
 801c4de:	4658      	mov	r0, fp
 801c4e0:	920e      	str	r2, [sp, #56]	@ 0x38
 801c4e2:	f000 fca3 	bl	801ce2c <_Bfree>
 801c4e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c4e8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801c4ea:	9e07      	ldr	r6, [sp, #28]
 801c4ec:	ea43 0102 	orr.w	r1, r3, r2
 801c4f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c4f2:	4319      	orrs	r1, r3
 801c4f4:	d110      	bne.n	801c518 <_dtoa_r+0xa20>
 801c4f6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801c4fa:	d029      	beq.n	801c550 <_dtoa_r+0xa58>
 801c4fc:	9b08      	ldr	r3, [sp, #32]
 801c4fe:	2b00      	cmp	r3, #0
 801c500:	dd02      	ble.n	801c508 <_dtoa_r+0xa10>
 801c502:	9b02      	ldr	r3, [sp, #8]
 801c504:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 801c508:	9b00      	ldr	r3, [sp, #0]
 801c50a:	f883 8000 	strb.w	r8, [r3]
 801c50e:	e63f      	b.n	801c190 <_dtoa_r+0x698>
 801c510:	4628      	mov	r0, r5
 801c512:	e7bb      	b.n	801c48c <_dtoa_r+0x994>
 801c514:	2201      	movs	r2, #1
 801c516:	e7e1      	b.n	801c4dc <_dtoa_r+0x9e4>
 801c518:	9b08      	ldr	r3, [sp, #32]
 801c51a:	2b00      	cmp	r3, #0
 801c51c:	db04      	blt.n	801c528 <_dtoa_r+0xa30>
 801c51e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801c520:	430b      	orrs	r3, r1
 801c522:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801c524:	430b      	orrs	r3, r1
 801c526:	d120      	bne.n	801c56a <_dtoa_r+0xa72>
 801c528:	2a00      	cmp	r2, #0
 801c52a:	dded      	ble.n	801c508 <_dtoa_r+0xa10>
 801c52c:	4649      	mov	r1, r9
 801c52e:	2201      	movs	r2, #1
 801c530:	4658      	mov	r0, fp
 801c532:	f000 fe93 	bl	801d25c <__lshift>
 801c536:	4621      	mov	r1, r4
 801c538:	4681      	mov	r9, r0
 801c53a:	f000 fefb 	bl	801d334 <__mcmp>
 801c53e:	2800      	cmp	r0, #0
 801c540:	dc03      	bgt.n	801c54a <_dtoa_r+0xa52>
 801c542:	d1e1      	bne.n	801c508 <_dtoa_r+0xa10>
 801c544:	f018 0f01 	tst.w	r8, #1
 801c548:	d0de      	beq.n	801c508 <_dtoa_r+0xa10>
 801c54a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801c54e:	d1d8      	bne.n	801c502 <_dtoa_r+0xa0a>
 801c550:	9a00      	ldr	r2, [sp, #0]
 801c552:	2339      	movs	r3, #57	@ 0x39
 801c554:	7013      	strb	r3, [r2, #0]
 801c556:	4633      	mov	r3, r6
 801c558:	461e      	mov	r6, r3
 801c55a:	3b01      	subs	r3, #1
 801c55c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801c560:	2a39      	cmp	r2, #57	@ 0x39
 801c562:	d052      	beq.n	801c60a <_dtoa_r+0xb12>
 801c564:	3201      	adds	r2, #1
 801c566:	701a      	strb	r2, [r3, #0]
 801c568:	e612      	b.n	801c190 <_dtoa_r+0x698>
 801c56a:	2a00      	cmp	r2, #0
 801c56c:	dd07      	ble.n	801c57e <_dtoa_r+0xa86>
 801c56e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801c572:	d0ed      	beq.n	801c550 <_dtoa_r+0xa58>
 801c574:	9a00      	ldr	r2, [sp, #0]
 801c576:	f108 0301 	add.w	r3, r8, #1
 801c57a:	7013      	strb	r3, [r2, #0]
 801c57c:	e608      	b.n	801c190 <_dtoa_r+0x698>
 801c57e:	9b07      	ldr	r3, [sp, #28]
 801c580:	9a07      	ldr	r2, [sp, #28]
 801c582:	f803 8c01 	strb.w	r8, [r3, #-1]
 801c586:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801c588:	4293      	cmp	r3, r2
 801c58a:	d028      	beq.n	801c5de <_dtoa_r+0xae6>
 801c58c:	4649      	mov	r1, r9
 801c58e:	2300      	movs	r3, #0
 801c590:	220a      	movs	r2, #10
 801c592:	4658      	mov	r0, fp
 801c594:	f000 fc6c 	bl	801ce70 <__multadd>
 801c598:	42af      	cmp	r7, r5
 801c59a:	4681      	mov	r9, r0
 801c59c:	f04f 0300 	mov.w	r3, #0
 801c5a0:	f04f 020a 	mov.w	r2, #10
 801c5a4:	4639      	mov	r1, r7
 801c5a6:	4658      	mov	r0, fp
 801c5a8:	d107      	bne.n	801c5ba <_dtoa_r+0xac2>
 801c5aa:	f000 fc61 	bl	801ce70 <__multadd>
 801c5ae:	4607      	mov	r7, r0
 801c5b0:	4605      	mov	r5, r0
 801c5b2:	9b07      	ldr	r3, [sp, #28]
 801c5b4:	3301      	adds	r3, #1
 801c5b6:	9307      	str	r3, [sp, #28]
 801c5b8:	e774      	b.n	801c4a4 <_dtoa_r+0x9ac>
 801c5ba:	f000 fc59 	bl	801ce70 <__multadd>
 801c5be:	4629      	mov	r1, r5
 801c5c0:	4607      	mov	r7, r0
 801c5c2:	2300      	movs	r3, #0
 801c5c4:	220a      	movs	r2, #10
 801c5c6:	4658      	mov	r0, fp
 801c5c8:	f000 fc52 	bl	801ce70 <__multadd>
 801c5cc:	4605      	mov	r5, r0
 801c5ce:	e7f0      	b.n	801c5b2 <_dtoa_r+0xaba>
 801c5d0:	9b00      	ldr	r3, [sp, #0]
 801c5d2:	2b00      	cmp	r3, #0
 801c5d4:	bfcc      	ite	gt
 801c5d6:	461e      	movgt	r6, r3
 801c5d8:	2601      	movle	r6, #1
 801c5da:	4456      	add	r6, sl
 801c5dc:	2700      	movs	r7, #0
 801c5de:	4649      	mov	r1, r9
 801c5e0:	2201      	movs	r2, #1
 801c5e2:	4658      	mov	r0, fp
 801c5e4:	f000 fe3a 	bl	801d25c <__lshift>
 801c5e8:	4621      	mov	r1, r4
 801c5ea:	4681      	mov	r9, r0
 801c5ec:	f000 fea2 	bl	801d334 <__mcmp>
 801c5f0:	2800      	cmp	r0, #0
 801c5f2:	dcb0      	bgt.n	801c556 <_dtoa_r+0xa5e>
 801c5f4:	d102      	bne.n	801c5fc <_dtoa_r+0xb04>
 801c5f6:	f018 0f01 	tst.w	r8, #1
 801c5fa:	d1ac      	bne.n	801c556 <_dtoa_r+0xa5e>
 801c5fc:	4633      	mov	r3, r6
 801c5fe:	461e      	mov	r6, r3
 801c600:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801c604:	2a30      	cmp	r2, #48	@ 0x30
 801c606:	d0fa      	beq.n	801c5fe <_dtoa_r+0xb06>
 801c608:	e5c2      	b.n	801c190 <_dtoa_r+0x698>
 801c60a:	459a      	cmp	sl, r3
 801c60c:	d1a4      	bne.n	801c558 <_dtoa_r+0xa60>
 801c60e:	9b04      	ldr	r3, [sp, #16]
 801c610:	3301      	adds	r3, #1
 801c612:	9304      	str	r3, [sp, #16]
 801c614:	2331      	movs	r3, #49	@ 0x31
 801c616:	f88a 3000 	strb.w	r3, [sl]
 801c61a:	e5b9      	b.n	801c190 <_dtoa_r+0x698>
 801c61c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801c61e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 801c67c <_dtoa_r+0xb84>
 801c622:	b11b      	cbz	r3, 801c62c <_dtoa_r+0xb34>
 801c624:	f10a 0308 	add.w	r3, sl, #8
 801c628:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801c62a:	6013      	str	r3, [r2, #0]
 801c62c:	4650      	mov	r0, sl
 801c62e:	b019      	add	sp, #100	@ 0x64
 801c630:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c634:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c636:	2b01      	cmp	r3, #1
 801c638:	f77f ae37 	ble.w	801c2aa <_dtoa_r+0x7b2>
 801c63c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801c63e:	930a      	str	r3, [sp, #40]	@ 0x28
 801c640:	2001      	movs	r0, #1
 801c642:	e655      	b.n	801c2f0 <_dtoa_r+0x7f8>
 801c644:	9b00      	ldr	r3, [sp, #0]
 801c646:	2b00      	cmp	r3, #0
 801c648:	f77f aed6 	ble.w	801c3f8 <_dtoa_r+0x900>
 801c64c:	4656      	mov	r6, sl
 801c64e:	4621      	mov	r1, r4
 801c650:	4648      	mov	r0, r9
 801c652:	f7ff f9c9 	bl	801b9e8 <quorem>
 801c656:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801c65a:	f806 8b01 	strb.w	r8, [r6], #1
 801c65e:	9b00      	ldr	r3, [sp, #0]
 801c660:	eba6 020a 	sub.w	r2, r6, sl
 801c664:	4293      	cmp	r3, r2
 801c666:	ddb3      	ble.n	801c5d0 <_dtoa_r+0xad8>
 801c668:	4649      	mov	r1, r9
 801c66a:	2300      	movs	r3, #0
 801c66c:	220a      	movs	r2, #10
 801c66e:	4658      	mov	r0, fp
 801c670:	f000 fbfe 	bl	801ce70 <__multadd>
 801c674:	4681      	mov	r9, r0
 801c676:	e7ea      	b.n	801c64e <_dtoa_r+0xb56>
 801c678:	0802256c 	.word	0x0802256c
 801c67c:	08022507 	.word	0x08022507

0801c680 <_free_r>:
 801c680:	b538      	push	{r3, r4, r5, lr}
 801c682:	4605      	mov	r5, r0
 801c684:	2900      	cmp	r1, #0
 801c686:	d041      	beq.n	801c70c <_free_r+0x8c>
 801c688:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801c68c:	1f0c      	subs	r4, r1, #4
 801c68e:	2b00      	cmp	r3, #0
 801c690:	bfb8      	it	lt
 801c692:	18e4      	addlt	r4, r4, r3
 801c694:	f7fd f98e 	bl	80199b4 <__malloc_lock>
 801c698:	4a1d      	ldr	r2, [pc, #116]	@ (801c710 <_free_r+0x90>)
 801c69a:	6813      	ldr	r3, [r2, #0]
 801c69c:	b933      	cbnz	r3, 801c6ac <_free_r+0x2c>
 801c69e:	6063      	str	r3, [r4, #4]
 801c6a0:	6014      	str	r4, [r2, #0]
 801c6a2:	4628      	mov	r0, r5
 801c6a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801c6a8:	f7fd b98a 	b.w	80199c0 <__malloc_unlock>
 801c6ac:	42a3      	cmp	r3, r4
 801c6ae:	d908      	bls.n	801c6c2 <_free_r+0x42>
 801c6b0:	6820      	ldr	r0, [r4, #0]
 801c6b2:	1821      	adds	r1, r4, r0
 801c6b4:	428b      	cmp	r3, r1
 801c6b6:	bf01      	itttt	eq
 801c6b8:	6819      	ldreq	r1, [r3, #0]
 801c6ba:	685b      	ldreq	r3, [r3, #4]
 801c6bc:	1809      	addeq	r1, r1, r0
 801c6be:	6021      	streq	r1, [r4, #0]
 801c6c0:	e7ed      	b.n	801c69e <_free_r+0x1e>
 801c6c2:	461a      	mov	r2, r3
 801c6c4:	685b      	ldr	r3, [r3, #4]
 801c6c6:	b10b      	cbz	r3, 801c6cc <_free_r+0x4c>
 801c6c8:	42a3      	cmp	r3, r4
 801c6ca:	d9fa      	bls.n	801c6c2 <_free_r+0x42>
 801c6cc:	6811      	ldr	r1, [r2, #0]
 801c6ce:	1850      	adds	r0, r2, r1
 801c6d0:	42a0      	cmp	r0, r4
 801c6d2:	d10b      	bne.n	801c6ec <_free_r+0x6c>
 801c6d4:	6820      	ldr	r0, [r4, #0]
 801c6d6:	4401      	add	r1, r0
 801c6d8:	1850      	adds	r0, r2, r1
 801c6da:	4283      	cmp	r3, r0
 801c6dc:	6011      	str	r1, [r2, #0]
 801c6de:	d1e0      	bne.n	801c6a2 <_free_r+0x22>
 801c6e0:	6818      	ldr	r0, [r3, #0]
 801c6e2:	685b      	ldr	r3, [r3, #4]
 801c6e4:	6053      	str	r3, [r2, #4]
 801c6e6:	4408      	add	r0, r1
 801c6e8:	6010      	str	r0, [r2, #0]
 801c6ea:	e7da      	b.n	801c6a2 <_free_r+0x22>
 801c6ec:	d902      	bls.n	801c6f4 <_free_r+0x74>
 801c6ee:	230c      	movs	r3, #12
 801c6f0:	602b      	str	r3, [r5, #0]
 801c6f2:	e7d6      	b.n	801c6a2 <_free_r+0x22>
 801c6f4:	6820      	ldr	r0, [r4, #0]
 801c6f6:	1821      	adds	r1, r4, r0
 801c6f8:	428b      	cmp	r3, r1
 801c6fa:	bf04      	itt	eq
 801c6fc:	6819      	ldreq	r1, [r3, #0]
 801c6fe:	685b      	ldreq	r3, [r3, #4]
 801c700:	6063      	str	r3, [r4, #4]
 801c702:	bf04      	itt	eq
 801c704:	1809      	addeq	r1, r1, r0
 801c706:	6021      	streq	r1, [r4, #0]
 801c708:	6054      	str	r4, [r2, #4]
 801c70a:	e7ca      	b.n	801c6a2 <_free_r+0x22>
 801c70c:	bd38      	pop	{r3, r4, r5, pc}
 801c70e:	bf00      	nop
 801c710:	20003050 	.word	0x20003050

0801c714 <rshift>:
 801c714:	6903      	ldr	r3, [r0, #16]
 801c716:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801c71a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801c71e:	ea4f 1261 	mov.w	r2, r1, asr #5
 801c722:	f100 0414 	add.w	r4, r0, #20
 801c726:	dd45      	ble.n	801c7b4 <rshift+0xa0>
 801c728:	f011 011f 	ands.w	r1, r1, #31
 801c72c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801c730:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801c734:	d10c      	bne.n	801c750 <rshift+0x3c>
 801c736:	f100 0710 	add.w	r7, r0, #16
 801c73a:	4629      	mov	r1, r5
 801c73c:	42b1      	cmp	r1, r6
 801c73e:	d334      	bcc.n	801c7aa <rshift+0x96>
 801c740:	1a9b      	subs	r3, r3, r2
 801c742:	009b      	lsls	r3, r3, #2
 801c744:	1eea      	subs	r2, r5, #3
 801c746:	4296      	cmp	r6, r2
 801c748:	bf38      	it	cc
 801c74a:	2300      	movcc	r3, #0
 801c74c:	4423      	add	r3, r4
 801c74e:	e015      	b.n	801c77c <rshift+0x68>
 801c750:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801c754:	f1c1 0820 	rsb	r8, r1, #32
 801c758:	40cf      	lsrs	r7, r1
 801c75a:	f105 0e04 	add.w	lr, r5, #4
 801c75e:	46a1      	mov	r9, r4
 801c760:	4576      	cmp	r6, lr
 801c762:	46f4      	mov	ip, lr
 801c764:	d815      	bhi.n	801c792 <rshift+0x7e>
 801c766:	1a9a      	subs	r2, r3, r2
 801c768:	0092      	lsls	r2, r2, #2
 801c76a:	3a04      	subs	r2, #4
 801c76c:	3501      	adds	r5, #1
 801c76e:	42ae      	cmp	r6, r5
 801c770:	bf38      	it	cc
 801c772:	2200      	movcc	r2, #0
 801c774:	18a3      	adds	r3, r4, r2
 801c776:	50a7      	str	r7, [r4, r2]
 801c778:	b107      	cbz	r7, 801c77c <rshift+0x68>
 801c77a:	3304      	adds	r3, #4
 801c77c:	1b1a      	subs	r2, r3, r4
 801c77e:	42a3      	cmp	r3, r4
 801c780:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801c784:	bf08      	it	eq
 801c786:	2300      	moveq	r3, #0
 801c788:	6102      	str	r2, [r0, #16]
 801c78a:	bf08      	it	eq
 801c78c:	6143      	streq	r3, [r0, #20]
 801c78e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c792:	f8dc c000 	ldr.w	ip, [ip]
 801c796:	fa0c fc08 	lsl.w	ip, ip, r8
 801c79a:	ea4c 0707 	orr.w	r7, ip, r7
 801c79e:	f849 7b04 	str.w	r7, [r9], #4
 801c7a2:	f85e 7b04 	ldr.w	r7, [lr], #4
 801c7a6:	40cf      	lsrs	r7, r1
 801c7a8:	e7da      	b.n	801c760 <rshift+0x4c>
 801c7aa:	f851 cb04 	ldr.w	ip, [r1], #4
 801c7ae:	f847 cf04 	str.w	ip, [r7, #4]!
 801c7b2:	e7c3      	b.n	801c73c <rshift+0x28>
 801c7b4:	4623      	mov	r3, r4
 801c7b6:	e7e1      	b.n	801c77c <rshift+0x68>

0801c7b8 <__hexdig_fun>:
 801c7b8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 801c7bc:	2b09      	cmp	r3, #9
 801c7be:	d802      	bhi.n	801c7c6 <__hexdig_fun+0xe>
 801c7c0:	3820      	subs	r0, #32
 801c7c2:	b2c0      	uxtb	r0, r0
 801c7c4:	4770      	bx	lr
 801c7c6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 801c7ca:	2b05      	cmp	r3, #5
 801c7cc:	d801      	bhi.n	801c7d2 <__hexdig_fun+0x1a>
 801c7ce:	3847      	subs	r0, #71	@ 0x47
 801c7d0:	e7f7      	b.n	801c7c2 <__hexdig_fun+0xa>
 801c7d2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 801c7d6:	2b05      	cmp	r3, #5
 801c7d8:	d801      	bhi.n	801c7de <__hexdig_fun+0x26>
 801c7da:	3827      	subs	r0, #39	@ 0x27
 801c7dc:	e7f1      	b.n	801c7c2 <__hexdig_fun+0xa>
 801c7de:	2000      	movs	r0, #0
 801c7e0:	4770      	bx	lr
	...

0801c7e4 <__gethex>:
 801c7e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c7e8:	b085      	sub	sp, #20
 801c7ea:	468a      	mov	sl, r1
 801c7ec:	9302      	str	r3, [sp, #8]
 801c7ee:	680b      	ldr	r3, [r1, #0]
 801c7f0:	9001      	str	r0, [sp, #4]
 801c7f2:	4690      	mov	r8, r2
 801c7f4:	1c9c      	adds	r4, r3, #2
 801c7f6:	46a1      	mov	r9, r4
 801c7f8:	f814 0b01 	ldrb.w	r0, [r4], #1
 801c7fc:	2830      	cmp	r0, #48	@ 0x30
 801c7fe:	d0fa      	beq.n	801c7f6 <__gethex+0x12>
 801c800:	eba9 0303 	sub.w	r3, r9, r3
 801c804:	f1a3 0b02 	sub.w	fp, r3, #2
 801c808:	f7ff ffd6 	bl	801c7b8 <__hexdig_fun>
 801c80c:	4605      	mov	r5, r0
 801c80e:	2800      	cmp	r0, #0
 801c810:	d168      	bne.n	801c8e4 <__gethex+0x100>
 801c812:	49a0      	ldr	r1, [pc, #640]	@ (801ca94 <__gethex+0x2b0>)
 801c814:	2201      	movs	r2, #1
 801c816:	4648      	mov	r0, r9
 801c818:	f7fe ff97 	bl	801b74a <strncmp>
 801c81c:	4607      	mov	r7, r0
 801c81e:	2800      	cmp	r0, #0
 801c820:	d167      	bne.n	801c8f2 <__gethex+0x10e>
 801c822:	f899 0001 	ldrb.w	r0, [r9, #1]
 801c826:	4626      	mov	r6, r4
 801c828:	f7ff ffc6 	bl	801c7b8 <__hexdig_fun>
 801c82c:	2800      	cmp	r0, #0
 801c82e:	d062      	beq.n	801c8f6 <__gethex+0x112>
 801c830:	4623      	mov	r3, r4
 801c832:	7818      	ldrb	r0, [r3, #0]
 801c834:	2830      	cmp	r0, #48	@ 0x30
 801c836:	4699      	mov	r9, r3
 801c838:	f103 0301 	add.w	r3, r3, #1
 801c83c:	d0f9      	beq.n	801c832 <__gethex+0x4e>
 801c83e:	f7ff ffbb 	bl	801c7b8 <__hexdig_fun>
 801c842:	fab0 f580 	clz	r5, r0
 801c846:	096d      	lsrs	r5, r5, #5
 801c848:	f04f 0b01 	mov.w	fp, #1
 801c84c:	464a      	mov	r2, r9
 801c84e:	4616      	mov	r6, r2
 801c850:	3201      	adds	r2, #1
 801c852:	7830      	ldrb	r0, [r6, #0]
 801c854:	f7ff ffb0 	bl	801c7b8 <__hexdig_fun>
 801c858:	2800      	cmp	r0, #0
 801c85a:	d1f8      	bne.n	801c84e <__gethex+0x6a>
 801c85c:	498d      	ldr	r1, [pc, #564]	@ (801ca94 <__gethex+0x2b0>)
 801c85e:	2201      	movs	r2, #1
 801c860:	4630      	mov	r0, r6
 801c862:	f7fe ff72 	bl	801b74a <strncmp>
 801c866:	2800      	cmp	r0, #0
 801c868:	d13f      	bne.n	801c8ea <__gethex+0x106>
 801c86a:	b944      	cbnz	r4, 801c87e <__gethex+0x9a>
 801c86c:	1c74      	adds	r4, r6, #1
 801c86e:	4622      	mov	r2, r4
 801c870:	4616      	mov	r6, r2
 801c872:	3201      	adds	r2, #1
 801c874:	7830      	ldrb	r0, [r6, #0]
 801c876:	f7ff ff9f 	bl	801c7b8 <__hexdig_fun>
 801c87a:	2800      	cmp	r0, #0
 801c87c:	d1f8      	bne.n	801c870 <__gethex+0x8c>
 801c87e:	1ba4      	subs	r4, r4, r6
 801c880:	00a7      	lsls	r7, r4, #2
 801c882:	7833      	ldrb	r3, [r6, #0]
 801c884:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 801c888:	2b50      	cmp	r3, #80	@ 0x50
 801c88a:	d13e      	bne.n	801c90a <__gethex+0x126>
 801c88c:	7873      	ldrb	r3, [r6, #1]
 801c88e:	2b2b      	cmp	r3, #43	@ 0x2b
 801c890:	d033      	beq.n	801c8fa <__gethex+0x116>
 801c892:	2b2d      	cmp	r3, #45	@ 0x2d
 801c894:	d034      	beq.n	801c900 <__gethex+0x11c>
 801c896:	1c71      	adds	r1, r6, #1
 801c898:	2400      	movs	r4, #0
 801c89a:	7808      	ldrb	r0, [r1, #0]
 801c89c:	f7ff ff8c 	bl	801c7b8 <__hexdig_fun>
 801c8a0:	1e43      	subs	r3, r0, #1
 801c8a2:	b2db      	uxtb	r3, r3
 801c8a4:	2b18      	cmp	r3, #24
 801c8a6:	d830      	bhi.n	801c90a <__gethex+0x126>
 801c8a8:	f1a0 0210 	sub.w	r2, r0, #16
 801c8ac:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801c8b0:	f7ff ff82 	bl	801c7b8 <__hexdig_fun>
 801c8b4:	f100 3cff 	add.w	ip, r0, #4294967295
 801c8b8:	fa5f fc8c 	uxtb.w	ip, ip
 801c8bc:	f1bc 0f18 	cmp.w	ip, #24
 801c8c0:	f04f 030a 	mov.w	r3, #10
 801c8c4:	d91e      	bls.n	801c904 <__gethex+0x120>
 801c8c6:	b104      	cbz	r4, 801c8ca <__gethex+0xe6>
 801c8c8:	4252      	negs	r2, r2
 801c8ca:	4417      	add	r7, r2
 801c8cc:	f8ca 1000 	str.w	r1, [sl]
 801c8d0:	b1ed      	cbz	r5, 801c90e <__gethex+0x12a>
 801c8d2:	f1bb 0f00 	cmp.w	fp, #0
 801c8d6:	bf0c      	ite	eq
 801c8d8:	2506      	moveq	r5, #6
 801c8da:	2500      	movne	r5, #0
 801c8dc:	4628      	mov	r0, r5
 801c8de:	b005      	add	sp, #20
 801c8e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c8e4:	2500      	movs	r5, #0
 801c8e6:	462c      	mov	r4, r5
 801c8e8:	e7b0      	b.n	801c84c <__gethex+0x68>
 801c8ea:	2c00      	cmp	r4, #0
 801c8ec:	d1c7      	bne.n	801c87e <__gethex+0x9a>
 801c8ee:	4627      	mov	r7, r4
 801c8f0:	e7c7      	b.n	801c882 <__gethex+0x9e>
 801c8f2:	464e      	mov	r6, r9
 801c8f4:	462f      	mov	r7, r5
 801c8f6:	2501      	movs	r5, #1
 801c8f8:	e7c3      	b.n	801c882 <__gethex+0x9e>
 801c8fa:	2400      	movs	r4, #0
 801c8fc:	1cb1      	adds	r1, r6, #2
 801c8fe:	e7cc      	b.n	801c89a <__gethex+0xb6>
 801c900:	2401      	movs	r4, #1
 801c902:	e7fb      	b.n	801c8fc <__gethex+0x118>
 801c904:	fb03 0002 	mla	r0, r3, r2, r0
 801c908:	e7ce      	b.n	801c8a8 <__gethex+0xc4>
 801c90a:	4631      	mov	r1, r6
 801c90c:	e7de      	b.n	801c8cc <__gethex+0xe8>
 801c90e:	eba6 0309 	sub.w	r3, r6, r9
 801c912:	3b01      	subs	r3, #1
 801c914:	4629      	mov	r1, r5
 801c916:	2b07      	cmp	r3, #7
 801c918:	dc0a      	bgt.n	801c930 <__gethex+0x14c>
 801c91a:	9801      	ldr	r0, [sp, #4]
 801c91c:	f000 fa46 	bl	801cdac <_Balloc>
 801c920:	4604      	mov	r4, r0
 801c922:	b940      	cbnz	r0, 801c936 <__gethex+0x152>
 801c924:	4b5c      	ldr	r3, [pc, #368]	@ (801ca98 <__gethex+0x2b4>)
 801c926:	4602      	mov	r2, r0
 801c928:	21e4      	movs	r1, #228	@ 0xe4
 801c92a:	485c      	ldr	r0, [pc, #368]	@ (801ca9c <__gethex+0x2b8>)
 801c92c:	f7ff f83e 	bl	801b9ac <__assert_func>
 801c930:	3101      	adds	r1, #1
 801c932:	105b      	asrs	r3, r3, #1
 801c934:	e7ef      	b.n	801c916 <__gethex+0x132>
 801c936:	f100 0a14 	add.w	sl, r0, #20
 801c93a:	2300      	movs	r3, #0
 801c93c:	4655      	mov	r5, sl
 801c93e:	469b      	mov	fp, r3
 801c940:	45b1      	cmp	r9, r6
 801c942:	d337      	bcc.n	801c9b4 <__gethex+0x1d0>
 801c944:	f845 bb04 	str.w	fp, [r5], #4
 801c948:	eba5 050a 	sub.w	r5, r5, sl
 801c94c:	10ad      	asrs	r5, r5, #2
 801c94e:	6125      	str	r5, [r4, #16]
 801c950:	4658      	mov	r0, fp
 801c952:	f000 fb1d 	bl	801cf90 <__hi0bits>
 801c956:	016d      	lsls	r5, r5, #5
 801c958:	f8d8 6000 	ldr.w	r6, [r8]
 801c95c:	1a2d      	subs	r5, r5, r0
 801c95e:	42b5      	cmp	r5, r6
 801c960:	dd54      	ble.n	801ca0c <__gethex+0x228>
 801c962:	1bad      	subs	r5, r5, r6
 801c964:	4629      	mov	r1, r5
 801c966:	4620      	mov	r0, r4
 801c968:	f000 feb1 	bl	801d6ce <__any_on>
 801c96c:	4681      	mov	r9, r0
 801c96e:	b178      	cbz	r0, 801c990 <__gethex+0x1ac>
 801c970:	1e6b      	subs	r3, r5, #1
 801c972:	1159      	asrs	r1, r3, #5
 801c974:	f003 021f 	and.w	r2, r3, #31
 801c978:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 801c97c:	f04f 0901 	mov.w	r9, #1
 801c980:	fa09 f202 	lsl.w	r2, r9, r2
 801c984:	420a      	tst	r2, r1
 801c986:	d003      	beq.n	801c990 <__gethex+0x1ac>
 801c988:	454b      	cmp	r3, r9
 801c98a:	dc36      	bgt.n	801c9fa <__gethex+0x216>
 801c98c:	f04f 0902 	mov.w	r9, #2
 801c990:	4629      	mov	r1, r5
 801c992:	4620      	mov	r0, r4
 801c994:	f7ff febe 	bl	801c714 <rshift>
 801c998:	442f      	add	r7, r5
 801c99a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801c99e:	42bb      	cmp	r3, r7
 801c9a0:	da42      	bge.n	801ca28 <__gethex+0x244>
 801c9a2:	9801      	ldr	r0, [sp, #4]
 801c9a4:	4621      	mov	r1, r4
 801c9a6:	f000 fa41 	bl	801ce2c <_Bfree>
 801c9aa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801c9ac:	2300      	movs	r3, #0
 801c9ae:	6013      	str	r3, [r2, #0]
 801c9b0:	25a3      	movs	r5, #163	@ 0xa3
 801c9b2:	e793      	b.n	801c8dc <__gethex+0xf8>
 801c9b4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 801c9b8:	2a2e      	cmp	r2, #46	@ 0x2e
 801c9ba:	d012      	beq.n	801c9e2 <__gethex+0x1fe>
 801c9bc:	2b20      	cmp	r3, #32
 801c9be:	d104      	bne.n	801c9ca <__gethex+0x1e6>
 801c9c0:	f845 bb04 	str.w	fp, [r5], #4
 801c9c4:	f04f 0b00 	mov.w	fp, #0
 801c9c8:	465b      	mov	r3, fp
 801c9ca:	7830      	ldrb	r0, [r6, #0]
 801c9cc:	9303      	str	r3, [sp, #12]
 801c9ce:	f7ff fef3 	bl	801c7b8 <__hexdig_fun>
 801c9d2:	9b03      	ldr	r3, [sp, #12]
 801c9d4:	f000 000f 	and.w	r0, r0, #15
 801c9d8:	4098      	lsls	r0, r3
 801c9da:	ea4b 0b00 	orr.w	fp, fp, r0
 801c9de:	3304      	adds	r3, #4
 801c9e0:	e7ae      	b.n	801c940 <__gethex+0x15c>
 801c9e2:	45b1      	cmp	r9, r6
 801c9e4:	d8ea      	bhi.n	801c9bc <__gethex+0x1d8>
 801c9e6:	492b      	ldr	r1, [pc, #172]	@ (801ca94 <__gethex+0x2b0>)
 801c9e8:	9303      	str	r3, [sp, #12]
 801c9ea:	2201      	movs	r2, #1
 801c9ec:	4630      	mov	r0, r6
 801c9ee:	f7fe feac 	bl	801b74a <strncmp>
 801c9f2:	9b03      	ldr	r3, [sp, #12]
 801c9f4:	2800      	cmp	r0, #0
 801c9f6:	d1e1      	bne.n	801c9bc <__gethex+0x1d8>
 801c9f8:	e7a2      	b.n	801c940 <__gethex+0x15c>
 801c9fa:	1ea9      	subs	r1, r5, #2
 801c9fc:	4620      	mov	r0, r4
 801c9fe:	f000 fe66 	bl	801d6ce <__any_on>
 801ca02:	2800      	cmp	r0, #0
 801ca04:	d0c2      	beq.n	801c98c <__gethex+0x1a8>
 801ca06:	f04f 0903 	mov.w	r9, #3
 801ca0a:	e7c1      	b.n	801c990 <__gethex+0x1ac>
 801ca0c:	da09      	bge.n	801ca22 <__gethex+0x23e>
 801ca0e:	1b75      	subs	r5, r6, r5
 801ca10:	4621      	mov	r1, r4
 801ca12:	9801      	ldr	r0, [sp, #4]
 801ca14:	462a      	mov	r2, r5
 801ca16:	f000 fc21 	bl	801d25c <__lshift>
 801ca1a:	1b7f      	subs	r7, r7, r5
 801ca1c:	4604      	mov	r4, r0
 801ca1e:	f100 0a14 	add.w	sl, r0, #20
 801ca22:	f04f 0900 	mov.w	r9, #0
 801ca26:	e7b8      	b.n	801c99a <__gethex+0x1b6>
 801ca28:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801ca2c:	42bd      	cmp	r5, r7
 801ca2e:	dd6f      	ble.n	801cb10 <__gethex+0x32c>
 801ca30:	1bed      	subs	r5, r5, r7
 801ca32:	42ae      	cmp	r6, r5
 801ca34:	dc34      	bgt.n	801caa0 <__gethex+0x2bc>
 801ca36:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801ca3a:	2b02      	cmp	r3, #2
 801ca3c:	d022      	beq.n	801ca84 <__gethex+0x2a0>
 801ca3e:	2b03      	cmp	r3, #3
 801ca40:	d024      	beq.n	801ca8c <__gethex+0x2a8>
 801ca42:	2b01      	cmp	r3, #1
 801ca44:	d115      	bne.n	801ca72 <__gethex+0x28e>
 801ca46:	42ae      	cmp	r6, r5
 801ca48:	d113      	bne.n	801ca72 <__gethex+0x28e>
 801ca4a:	2e01      	cmp	r6, #1
 801ca4c:	d10b      	bne.n	801ca66 <__gethex+0x282>
 801ca4e:	9a02      	ldr	r2, [sp, #8]
 801ca50:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801ca54:	6013      	str	r3, [r2, #0]
 801ca56:	2301      	movs	r3, #1
 801ca58:	6123      	str	r3, [r4, #16]
 801ca5a:	f8ca 3000 	str.w	r3, [sl]
 801ca5e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ca60:	2562      	movs	r5, #98	@ 0x62
 801ca62:	601c      	str	r4, [r3, #0]
 801ca64:	e73a      	b.n	801c8dc <__gethex+0xf8>
 801ca66:	1e71      	subs	r1, r6, #1
 801ca68:	4620      	mov	r0, r4
 801ca6a:	f000 fe30 	bl	801d6ce <__any_on>
 801ca6e:	2800      	cmp	r0, #0
 801ca70:	d1ed      	bne.n	801ca4e <__gethex+0x26a>
 801ca72:	9801      	ldr	r0, [sp, #4]
 801ca74:	4621      	mov	r1, r4
 801ca76:	f000 f9d9 	bl	801ce2c <_Bfree>
 801ca7a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801ca7c:	2300      	movs	r3, #0
 801ca7e:	6013      	str	r3, [r2, #0]
 801ca80:	2550      	movs	r5, #80	@ 0x50
 801ca82:	e72b      	b.n	801c8dc <__gethex+0xf8>
 801ca84:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801ca86:	2b00      	cmp	r3, #0
 801ca88:	d1f3      	bne.n	801ca72 <__gethex+0x28e>
 801ca8a:	e7e0      	b.n	801ca4e <__gethex+0x26a>
 801ca8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801ca8e:	2b00      	cmp	r3, #0
 801ca90:	d1dd      	bne.n	801ca4e <__gethex+0x26a>
 801ca92:	e7ee      	b.n	801ca72 <__gethex+0x28e>
 801ca94:	080222c0 	.word	0x080222c0
 801ca98:	0802256c 	.word	0x0802256c
 801ca9c:	0802257d 	.word	0x0802257d
 801caa0:	1e6f      	subs	r7, r5, #1
 801caa2:	f1b9 0f00 	cmp.w	r9, #0
 801caa6:	d130      	bne.n	801cb0a <__gethex+0x326>
 801caa8:	b127      	cbz	r7, 801cab4 <__gethex+0x2d0>
 801caaa:	4639      	mov	r1, r7
 801caac:	4620      	mov	r0, r4
 801caae:	f000 fe0e 	bl	801d6ce <__any_on>
 801cab2:	4681      	mov	r9, r0
 801cab4:	117a      	asrs	r2, r7, #5
 801cab6:	2301      	movs	r3, #1
 801cab8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801cabc:	f007 071f 	and.w	r7, r7, #31
 801cac0:	40bb      	lsls	r3, r7
 801cac2:	4213      	tst	r3, r2
 801cac4:	4629      	mov	r1, r5
 801cac6:	4620      	mov	r0, r4
 801cac8:	bf18      	it	ne
 801caca:	f049 0902 	orrne.w	r9, r9, #2
 801cace:	f7ff fe21 	bl	801c714 <rshift>
 801cad2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 801cad6:	1b76      	subs	r6, r6, r5
 801cad8:	2502      	movs	r5, #2
 801cada:	f1b9 0f00 	cmp.w	r9, #0
 801cade:	d047      	beq.n	801cb70 <__gethex+0x38c>
 801cae0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801cae4:	2b02      	cmp	r3, #2
 801cae6:	d015      	beq.n	801cb14 <__gethex+0x330>
 801cae8:	2b03      	cmp	r3, #3
 801caea:	d017      	beq.n	801cb1c <__gethex+0x338>
 801caec:	2b01      	cmp	r3, #1
 801caee:	d109      	bne.n	801cb04 <__gethex+0x320>
 801caf0:	f019 0f02 	tst.w	r9, #2
 801caf4:	d006      	beq.n	801cb04 <__gethex+0x320>
 801caf6:	f8da 3000 	ldr.w	r3, [sl]
 801cafa:	ea49 0903 	orr.w	r9, r9, r3
 801cafe:	f019 0f01 	tst.w	r9, #1
 801cb02:	d10e      	bne.n	801cb22 <__gethex+0x33e>
 801cb04:	f045 0510 	orr.w	r5, r5, #16
 801cb08:	e032      	b.n	801cb70 <__gethex+0x38c>
 801cb0a:	f04f 0901 	mov.w	r9, #1
 801cb0e:	e7d1      	b.n	801cab4 <__gethex+0x2d0>
 801cb10:	2501      	movs	r5, #1
 801cb12:	e7e2      	b.n	801cada <__gethex+0x2f6>
 801cb14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801cb16:	f1c3 0301 	rsb	r3, r3, #1
 801cb1a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801cb1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801cb1e:	2b00      	cmp	r3, #0
 801cb20:	d0f0      	beq.n	801cb04 <__gethex+0x320>
 801cb22:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801cb26:	f104 0314 	add.w	r3, r4, #20
 801cb2a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801cb2e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801cb32:	f04f 0c00 	mov.w	ip, #0
 801cb36:	4618      	mov	r0, r3
 801cb38:	f853 2b04 	ldr.w	r2, [r3], #4
 801cb3c:	f1b2 3fff 	cmp.w	r2, #4294967295
 801cb40:	d01b      	beq.n	801cb7a <__gethex+0x396>
 801cb42:	3201      	adds	r2, #1
 801cb44:	6002      	str	r2, [r0, #0]
 801cb46:	2d02      	cmp	r5, #2
 801cb48:	f104 0314 	add.w	r3, r4, #20
 801cb4c:	d13c      	bne.n	801cbc8 <__gethex+0x3e4>
 801cb4e:	f8d8 2000 	ldr.w	r2, [r8]
 801cb52:	3a01      	subs	r2, #1
 801cb54:	42b2      	cmp	r2, r6
 801cb56:	d109      	bne.n	801cb6c <__gethex+0x388>
 801cb58:	1171      	asrs	r1, r6, #5
 801cb5a:	2201      	movs	r2, #1
 801cb5c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801cb60:	f006 061f 	and.w	r6, r6, #31
 801cb64:	fa02 f606 	lsl.w	r6, r2, r6
 801cb68:	421e      	tst	r6, r3
 801cb6a:	d13a      	bne.n	801cbe2 <__gethex+0x3fe>
 801cb6c:	f045 0520 	orr.w	r5, r5, #32
 801cb70:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801cb72:	601c      	str	r4, [r3, #0]
 801cb74:	9b02      	ldr	r3, [sp, #8]
 801cb76:	601f      	str	r7, [r3, #0]
 801cb78:	e6b0      	b.n	801c8dc <__gethex+0xf8>
 801cb7a:	4299      	cmp	r1, r3
 801cb7c:	f843 cc04 	str.w	ip, [r3, #-4]
 801cb80:	d8d9      	bhi.n	801cb36 <__gethex+0x352>
 801cb82:	68a3      	ldr	r3, [r4, #8]
 801cb84:	459b      	cmp	fp, r3
 801cb86:	db17      	blt.n	801cbb8 <__gethex+0x3d4>
 801cb88:	6861      	ldr	r1, [r4, #4]
 801cb8a:	9801      	ldr	r0, [sp, #4]
 801cb8c:	3101      	adds	r1, #1
 801cb8e:	f000 f90d 	bl	801cdac <_Balloc>
 801cb92:	4681      	mov	r9, r0
 801cb94:	b918      	cbnz	r0, 801cb9e <__gethex+0x3ba>
 801cb96:	4b1a      	ldr	r3, [pc, #104]	@ (801cc00 <__gethex+0x41c>)
 801cb98:	4602      	mov	r2, r0
 801cb9a:	2184      	movs	r1, #132	@ 0x84
 801cb9c:	e6c5      	b.n	801c92a <__gethex+0x146>
 801cb9e:	6922      	ldr	r2, [r4, #16]
 801cba0:	3202      	adds	r2, #2
 801cba2:	f104 010c 	add.w	r1, r4, #12
 801cba6:	0092      	lsls	r2, r2, #2
 801cba8:	300c      	adds	r0, #12
 801cbaa:	f7fe fee2 	bl	801b972 <memcpy>
 801cbae:	4621      	mov	r1, r4
 801cbb0:	9801      	ldr	r0, [sp, #4]
 801cbb2:	f000 f93b 	bl	801ce2c <_Bfree>
 801cbb6:	464c      	mov	r4, r9
 801cbb8:	6923      	ldr	r3, [r4, #16]
 801cbba:	1c5a      	adds	r2, r3, #1
 801cbbc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801cbc0:	6122      	str	r2, [r4, #16]
 801cbc2:	2201      	movs	r2, #1
 801cbc4:	615a      	str	r2, [r3, #20]
 801cbc6:	e7be      	b.n	801cb46 <__gethex+0x362>
 801cbc8:	6922      	ldr	r2, [r4, #16]
 801cbca:	455a      	cmp	r2, fp
 801cbcc:	dd0b      	ble.n	801cbe6 <__gethex+0x402>
 801cbce:	2101      	movs	r1, #1
 801cbd0:	4620      	mov	r0, r4
 801cbd2:	f7ff fd9f 	bl	801c714 <rshift>
 801cbd6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801cbda:	3701      	adds	r7, #1
 801cbdc:	42bb      	cmp	r3, r7
 801cbde:	f6ff aee0 	blt.w	801c9a2 <__gethex+0x1be>
 801cbe2:	2501      	movs	r5, #1
 801cbe4:	e7c2      	b.n	801cb6c <__gethex+0x388>
 801cbe6:	f016 061f 	ands.w	r6, r6, #31
 801cbea:	d0fa      	beq.n	801cbe2 <__gethex+0x3fe>
 801cbec:	4453      	add	r3, sl
 801cbee:	f1c6 0620 	rsb	r6, r6, #32
 801cbf2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801cbf6:	f000 f9cb 	bl	801cf90 <__hi0bits>
 801cbfa:	42b0      	cmp	r0, r6
 801cbfc:	dbe7      	blt.n	801cbce <__gethex+0x3ea>
 801cbfe:	e7f0      	b.n	801cbe2 <__gethex+0x3fe>
 801cc00:	0802256c 	.word	0x0802256c

0801cc04 <L_shift>:
 801cc04:	f1c2 0208 	rsb	r2, r2, #8
 801cc08:	0092      	lsls	r2, r2, #2
 801cc0a:	b570      	push	{r4, r5, r6, lr}
 801cc0c:	f1c2 0620 	rsb	r6, r2, #32
 801cc10:	6843      	ldr	r3, [r0, #4]
 801cc12:	6804      	ldr	r4, [r0, #0]
 801cc14:	fa03 f506 	lsl.w	r5, r3, r6
 801cc18:	432c      	orrs	r4, r5
 801cc1a:	40d3      	lsrs	r3, r2
 801cc1c:	6004      	str	r4, [r0, #0]
 801cc1e:	f840 3f04 	str.w	r3, [r0, #4]!
 801cc22:	4288      	cmp	r0, r1
 801cc24:	d3f4      	bcc.n	801cc10 <L_shift+0xc>
 801cc26:	bd70      	pop	{r4, r5, r6, pc}

0801cc28 <__match>:
 801cc28:	b530      	push	{r4, r5, lr}
 801cc2a:	6803      	ldr	r3, [r0, #0]
 801cc2c:	3301      	adds	r3, #1
 801cc2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 801cc32:	b914      	cbnz	r4, 801cc3a <__match+0x12>
 801cc34:	6003      	str	r3, [r0, #0]
 801cc36:	2001      	movs	r0, #1
 801cc38:	bd30      	pop	{r4, r5, pc}
 801cc3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801cc3e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 801cc42:	2d19      	cmp	r5, #25
 801cc44:	bf98      	it	ls
 801cc46:	3220      	addls	r2, #32
 801cc48:	42a2      	cmp	r2, r4
 801cc4a:	d0f0      	beq.n	801cc2e <__match+0x6>
 801cc4c:	2000      	movs	r0, #0
 801cc4e:	e7f3      	b.n	801cc38 <__match+0x10>

0801cc50 <__hexnan>:
 801cc50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cc54:	680b      	ldr	r3, [r1, #0]
 801cc56:	6801      	ldr	r1, [r0, #0]
 801cc58:	115e      	asrs	r6, r3, #5
 801cc5a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801cc5e:	f013 031f 	ands.w	r3, r3, #31
 801cc62:	b087      	sub	sp, #28
 801cc64:	bf18      	it	ne
 801cc66:	3604      	addne	r6, #4
 801cc68:	2500      	movs	r5, #0
 801cc6a:	1f37      	subs	r7, r6, #4
 801cc6c:	4682      	mov	sl, r0
 801cc6e:	4690      	mov	r8, r2
 801cc70:	9301      	str	r3, [sp, #4]
 801cc72:	f846 5c04 	str.w	r5, [r6, #-4]
 801cc76:	46b9      	mov	r9, r7
 801cc78:	463c      	mov	r4, r7
 801cc7a:	9502      	str	r5, [sp, #8]
 801cc7c:	46ab      	mov	fp, r5
 801cc7e:	784a      	ldrb	r2, [r1, #1]
 801cc80:	1c4b      	adds	r3, r1, #1
 801cc82:	9303      	str	r3, [sp, #12]
 801cc84:	b342      	cbz	r2, 801ccd8 <__hexnan+0x88>
 801cc86:	4610      	mov	r0, r2
 801cc88:	9105      	str	r1, [sp, #20]
 801cc8a:	9204      	str	r2, [sp, #16]
 801cc8c:	f7ff fd94 	bl	801c7b8 <__hexdig_fun>
 801cc90:	2800      	cmp	r0, #0
 801cc92:	d151      	bne.n	801cd38 <__hexnan+0xe8>
 801cc94:	9a04      	ldr	r2, [sp, #16]
 801cc96:	9905      	ldr	r1, [sp, #20]
 801cc98:	2a20      	cmp	r2, #32
 801cc9a:	d818      	bhi.n	801ccce <__hexnan+0x7e>
 801cc9c:	9b02      	ldr	r3, [sp, #8]
 801cc9e:	459b      	cmp	fp, r3
 801cca0:	dd13      	ble.n	801ccca <__hexnan+0x7a>
 801cca2:	454c      	cmp	r4, r9
 801cca4:	d206      	bcs.n	801ccb4 <__hexnan+0x64>
 801cca6:	2d07      	cmp	r5, #7
 801cca8:	dc04      	bgt.n	801ccb4 <__hexnan+0x64>
 801ccaa:	462a      	mov	r2, r5
 801ccac:	4649      	mov	r1, r9
 801ccae:	4620      	mov	r0, r4
 801ccb0:	f7ff ffa8 	bl	801cc04 <L_shift>
 801ccb4:	4544      	cmp	r4, r8
 801ccb6:	d952      	bls.n	801cd5e <__hexnan+0x10e>
 801ccb8:	2300      	movs	r3, #0
 801ccba:	f1a4 0904 	sub.w	r9, r4, #4
 801ccbe:	f844 3c04 	str.w	r3, [r4, #-4]
 801ccc2:	f8cd b008 	str.w	fp, [sp, #8]
 801ccc6:	464c      	mov	r4, r9
 801ccc8:	461d      	mov	r5, r3
 801ccca:	9903      	ldr	r1, [sp, #12]
 801cccc:	e7d7      	b.n	801cc7e <__hexnan+0x2e>
 801ccce:	2a29      	cmp	r2, #41	@ 0x29
 801ccd0:	d157      	bne.n	801cd82 <__hexnan+0x132>
 801ccd2:	3102      	adds	r1, #2
 801ccd4:	f8ca 1000 	str.w	r1, [sl]
 801ccd8:	f1bb 0f00 	cmp.w	fp, #0
 801ccdc:	d051      	beq.n	801cd82 <__hexnan+0x132>
 801ccde:	454c      	cmp	r4, r9
 801cce0:	d206      	bcs.n	801ccf0 <__hexnan+0xa0>
 801cce2:	2d07      	cmp	r5, #7
 801cce4:	dc04      	bgt.n	801ccf0 <__hexnan+0xa0>
 801cce6:	462a      	mov	r2, r5
 801cce8:	4649      	mov	r1, r9
 801ccea:	4620      	mov	r0, r4
 801ccec:	f7ff ff8a 	bl	801cc04 <L_shift>
 801ccf0:	4544      	cmp	r4, r8
 801ccf2:	d936      	bls.n	801cd62 <__hexnan+0x112>
 801ccf4:	f1a8 0204 	sub.w	r2, r8, #4
 801ccf8:	4623      	mov	r3, r4
 801ccfa:	f853 1b04 	ldr.w	r1, [r3], #4
 801ccfe:	f842 1f04 	str.w	r1, [r2, #4]!
 801cd02:	429f      	cmp	r7, r3
 801cd04:	d2f9      	bcs.n	801ccfa <__hexnan+0xaa>
 801cd06:	1b3b      	subs	r3, r7, r4
 801cd08:	f023 0303 	bic.w	r3, r3, #3
 801cd0c:	3304      	adds	r3, #4
 801cd0e:	3401      	adds	r4, #1
 801cd10:	3e03      	subs	r6, #3
 801cd12:	42b4      	cmp	r4, r6
 801cd14:	bf88      	it	hi
 801cd16:	2304      	movhi	r3, #4
 801cd18:	4443      	add	r3, r8
 801cd1a:	2200      	movs	r2, #0
 801cd1c:	f843 2b04 	str.w	r2, [r3], #4
 801cd20:	429f      	cmp	r7, r3
 801cd22:	d2fb      	bcs.n	801cd1c <__hexnan+0xcc>
 801cd24:	683b      	ldr	r3, [r7, #0]
 801cd26:	b91b      	cbnz	r3, 801cd30 <__hexnan+0xe0>
 801cd28:	4547      	cmp	r7, r8
 801cd2a:	d128      	bne.n	801cd7e <__hexnan+0x12e>
 801cd2c:	2301      	movs	r3, #1
 801cd2e:	603b      	str	r3, [r7, #0]
 801cd30:	2005      	movs	r0, #5
 801cd32:	b007      	add	sp, #28
 801cd34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cd38:	3501      	adds	r5, #1
 801cd3a:	2d08      	cmp	r5, #8
 801cd3c:	f10b 0b01 	add.w	fp, fp, #1
 801cd40:	dd06      	ble.n	801cd50 <__hexnan+0x100>
 801cd42:	4544      	cmp	r4, r8
 801cd44:	d9c1      	bls.n	801ccca <__hexnan+0x7a>
 801cd46:	2300      	movs	r3, #0
 801cd48:	f844 3c04 	str.w	r3, [r4, #-4]
 801cd4c:	2501      	movs	r5, #1
 801cd4e:	3c04      	subs	r4, #4
 801cd50:	6822      	ldr	r2, [r4, #0]
 801cd52:	f000 000f 	and.w	r0, r0, #15
 801cd56:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801cd5a:	6020      	str	r0, [r4, #0]
 801cd5c:	e7b5      	b.n	801ccca <__hexnan+0x7a>
 801cd5e:	2508      	movs	r5, #8
 801cd60:	e7b3      	b.n	801ccca <__hexnan+0x7a>
 801cd62:	9b01      	ldr	r3, [sp, #4]
 801cd64:	2b00      	cmp	r3, #0
 801cd66:	d0dd      	beq.n	801cd24 <__hexnan+0xd4>
 801cd68:	f1c3 0320 	rsb	r3, r3, #32
 801cd6c:	f04f 32ff 	mov.w	r2, #4294967295
 801cd70:	40da      	lsrs	r2, r3
 801cd72:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801cd76:	4013      	ands	r3, r2
 801cd78:	f846 3c04 	str.w	r3, [r6, #-4]
 801cd7c:	e7d2      	b.n	801cd24 <__hexnan+0xd4>
 801cd7e:	3f04      	subs	r7, #4
 801cd80:	e7d0      	b.n	801cd24 <__hexnan+0xd4>
 801cd82:	2004      	movs	r0, #4
 801cd84:	e7d5      	b.n	801cd32 <__hexnan+0xe2>

0801cd86 <__ascii_mbtowc>:
 801cd86:	b082      	sub	sp, #8
 801cd88:	b901      	cbnz	r1, 801cd8c <__ascii_mbtowc+0x6>
 801cd8a:	a901      	add	r1, sp, #4
 801cd8c:	b142      	cbz	r2, 801cda0 <__ascii_mbtowc+0x1a>
 801cd8e:	b14b      	cbz	r3, 801cda4 <__ascii_mbtowc+0x1e>
 801cd90:	7813      	ldrb	r3, [r2, #0]
 801cd92:	600b      	str	r3, [r1, #0]
 801cd94:	7812      	ldrb	r2, [r2, #0]
 801cd96:	1e10      	subs	r0, r2, #0
 801cd98:	bf18      	it	ne
 801cd9a:	2001      	movne	r0, #1
 801cd9c:	b002      	add	sp, #8
 801cd9e:	4770      	bx	lr
 801cda0:	4610      	mov	r0, r2
 801cda2:	e7fb      	b.n	801cd9c <__ascii_mbtowc+0x16>
 801cda4:	f06f 0001 	mvn.w	r0, #1
 801cda8:	e7f8      	b.n	801cd9c <__ascii_mbtowc+0x16>
	...

0801cdac <_Balloc>:
 801cdac:	b570      	push	{r4, r5, r6, lr}
 801cdae:	69c6      	ldr	r6, [r0, #28]
 801cdb0:	4604      	mov	r4, r0
 801cdb2:	460d      	mov	r5, r1
 801cdb4:	b976      	cbnz	r6, 801cdd4 <_Balloc+0x28>
 801cdb6:	2010      	movs	r0, #16
 801cdb8:	f7fc fd4a 	bl	8019850 <malloc>
 801cdbc:	4602      	mov	r2, r0
 801cdbe:	61e0      	str	r0, [r4, #28]
 801cdc0:	b920      	cbnz	r0, 801cdcc <_Balloc+0x20>
 801cdc2:	4b18      	ldr	r3, [pc, #96]	@ (801ce24 <_Balloc+0x78>)
 801cdc4:	4818      	ldr	r0, [pc, #96]	@ (801ce28 <_Balloc+0x7c>)
 801cdc6:	216b      	movs	r1, #107	@ 0x6b
 801cdc8:	f7fe fdf0 	bl	801b9ac <__assert_func>
 801cdcc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801cdd0:	6006      	str	r6, [r0, #0]
 801cdd2:	60c6      	str	r6, [r0, #12]
 801cdd4:	69e6      	ldr	r6, [r4, #28]
 801cdd6:	68f3      	ldr	r3, [r6, #12]
 801cdd8:	b183      	cbz	r3, 801cdfc <_Balloc+0x50>
 801cdda:	69e3      	ldr	r3, [r4, #28]
 801cddc:	68db      	ldr	r3, [r3, #12]
 801cdde:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801cde2:	b9b8      	cbnz	r0, 801ce14 <_Balloc+0x68>
 801cde4:	2101      	movs	r1, #1
 801cde6:	fa01 f605 	lsl.w	r6, r1, r5
 801cdea:	1d72      	adds	r2, r6, #5
 801cdec:	0092      	lsls	r2, r2, #2
 801cdee:	4620      	mov	r0, r4
 801cdf0:	f001 f8a7 	bl	801df42 <_calloc_r>
 801cdf4:	b160      	cbz	r0, 801ce10 <_Balloc+0x64>
 801cdf6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801cdfa:	e00e      	b.n	801ce1a <_Balloc+0x6e>
 801cdfc:	2221      	movs	r2, #33	@ 0x21
 801cdfe:	2104      	movs	r1, #4
 801ce00:	4620      	mov	r0, r4
 801ce02:	f001 f89e 	bl	801df42 <_calloc_r>
 801ce06:	69e3      	ldr	r3, [r4, #28]
 801ce08:	60f0      	str	r0, [r6, #12]
 801ce0a:	68db      	ldr	r3, [r3, #12]
 801ce0c:	2b00      	cmp	r3, #0
 801ce0e:	d1e4      	bne.n	801cdda <_Balloc+0x2e>
 801ce10:	2000      	movs	r0, #0
 801ce12:	bd70      	pop	{r4, r5, r6, pc}
 801ce14:	6802      	ldr	r2, [r0, #0]
 801ce16:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801ce1a:	2300      	movs	r3, #0
 801ce1c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801ce20:	e7f7      	b.n	801ce12 <_Balloc+0x66>
 801ce22:	bf00      	nop
 801ce24:	08022452 	.word	0x08022452
 801ce28:	080225dd 	.word	0x080225dd

0801ce2c <_Bfree>:
 801ce2c:	b570      	push	{r4, r5, r6, lr}
 801ce2e:	69c6      	ldr	r6, [r0, #28]
 801ce30:	4605      	mov	r5, r0
 801ce32:	460c      	mov	r4, r1
 801ce34:	b976      	cbnz	r6, 801ce54 <_Bfree+0x28>
 801ce36:	2010      	movs	r0, #16
 801ce38:	f7fc fd0a 	bl	8019850 <malloc>
 801ce3c:	4602      	mov	r2, r0
 801ce3e:	61e8      	str	r0, [r5, #28]
 801ce40:	b920      	cbnz	r0, 801ce4c <_Bfree+0x20>
 801ce42:	4b09      	ldr	r3, [pc, #36]	@ (801ce68 <_Bfree+0x3c>)
 801ce44:	4809      	ldr	r0, [pc, #36]	@ (801ce6c <_Bfree+0x40>)
 801ce46:	218f      	movs	r1, #143	@ 0x8f
 801ce48:	f7fe fdb0 	bl	801b9ac <__assert_func>
 801ce4c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801ce50:	6006      	str	r6, [r0, #0]
 801ce52:	60c6      	str	r6, [r0, #12]
 801ce54:	b13c      	cbz	r4, 801ce66 <_Bfree+0x3a>
 801ce56:	69eb      	ldr	r3, [r5, #28]
 801ce58:	6862      	ldr	r2, [r4, #4]
 801ce5a:	68db      	ldr	r3, [r3, #12]
 801ce5c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801ce60:	6021      	str	r1, [r4, #0]
 801ce62:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801ce66:	bd70      	pop	{r4, r5, r6, pc}
 801ce68:	08022452 	.word	0x08022452
 801ce6c:	080225dd 	.word	0x080225dd

0801ce70 <__multadd>:
 801ce70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ce74:	690d      	ldr	r5, [r1, #16]
 801ce76:	4607      	mov	r7, r0
 801ce78:	460c      	mov	r4, r1
 801ce7a:	461e      	mov	r6, r3
 801ce7c:	f101 0c14 	add.w	ip, r1, #20
 801ce80:	2000      	movs	r0, #0
 801ce82:	f8dc 3000 	ldr.w	r3, [ip]
 801ce86:	b299      	uxth	r1, r3
 801ce88:	fb02 6101 	mla	r1, r2, r1, r6
 801ce8c:	0c1e      	lsrs	r6, r3, #16
 801ce8e:	0c0b      	lsrs	r3, r1, #16
 801ce90:	fb02 3306 	mla	r3, r2, r6, r3
 801ce94:	b289      	uxth	r1, r1
 801ce96:	3001      	adds	r0, #1
 801ce98:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801ce9c:	4285      	cmp	r5, r0
 801ce9e:	f84c 1b04 	str.w	r1, [ip], #4
 801cea2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801cea6:	dcec      	bgt.n	801ce82 <__multadd+0x12>
 801cea8:	b30e      	cbz	r6, 801ceee <__multadd+0x7e>
 801ceaa:	68a3      	ldr	r3, [r4, #8]
 801ceac:	42ab      	cmp	r3, r5
 801ceae:	dc19      	bgt.n	801cee4 <__multadd+0x74>
 801ceb0:	6861      	ldr	r1, [r4, #4]
 801ceb2:	4638      	mov	r0, r7
 801ceb4:	3101      	adds	r1, #1
 801ceb6:	f7ff ff79 	bl	801cdac <_Balloc>
 801ceba:	4680      	mov	r8, r0
 801cebc:	b928      	cbnz	r0, 801ceca <__multadd+0x5a>
 801cebe:	4602      	mov	r2, r0
 801cec0:	4b0c      	ldr	r3, [pc, #48]	@ (801cef4 <__multadd+0x84>)
 801cec2:	480d      	ldr	r0, [pc, #52]	@ (801cef8 <__multadd+0x88>)
 801cec4:	21ba      	movs	r1, #186	@ 0xba
 801cec6:	f7fe fd71 	bl	801b9ac <__assert_func>
 801ceca:	6922      	ldr	r2, [r4, #16]
 801cecc:	3202      	adds	r2, #2
 801cece:	f104 010c 	add.w	r1, r4, #12
 801ced2:	0092      	lsls	r2, r2, #2
 801ced4:	300c      	adds	r0, #12
 801ced6:	f7fe fd4c 	bl	801b972 <memcpy>
 801ceda:	4621      	mov	r1, r4
 801cedc:	4638      	mov	r0, r7
 801cede:	f7ff ffa5 	bl	801ce2c <_Bfree>
 801cee2:	4644      	mov	r4, r8
 801cee4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801cee8:	3501      	adds	r5, #1
 801ceea:	615e      	str	r6, [r3, #20]
 801ceec:	6125      	str	r5, [r4, #16]
 801ceee:	4620      	mov	r0, r4
 801cef0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cef4:	0802256c 	.word	0x0802256c
 801cef8:	080225dd 	.word	0x080225dd

0801cefc <__s2b>:
 801cefc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801cf00:	460c      	mov	r4, r1
 801cf02:	4615      	mov	r5, r2
 801cf04:	461f      	mov	r7, r3
 801cf06:	2209      	movs	r2, #9
 801cf08:	3308      	adds	r3, #8
 801cf0a:	4606      	mov	r6, r0
 801cf0c:	fb93 f3f2 	sdiv	r3, r3, r2
 801cf10:	2100      	movs	r1, #0
 801cf12:	2201      	movs	r2, #1
 801cf14:	429a      	cmp	r2, r3
 801cf16:	db09      	blt.n	801cf2c <__s2b+0x30>
 801cf18:	4630      	mov	r0, r6
 801cf1a:	f7ff ff47 	bl	801cdac <_Balloc>
 801cf1e:	b940      	cbnz	r0, 801cf32 <__s2b+0x36>
 801cf20:	4602      	mov	r2, r0
 801cf22:	4b19      	ldr	r3, [pc, #100]	@ (801cf88 <__s2b+0x8c>)
 801cf24:	4819      	ldr	r0, [pc, #100]	@ (801cf8c <__s2b+0x90>)
 801cf26:	21d3      	movs	r1, #211	@ 0xd3
 801cf28:	f7fe fd40 	bl	801b9ac <__assert_func>
 801cf2c:	0052      	lsls	r2, r2, #1
 801cf2e:	3101      	adds	r1, #1
 801cf30:	e7f0      	b.n	801cf14 <__s2b+0x18>
 801cf32:	9b08      	ldr	r3, [sp, #32]
 801cf34:	6143      	str	r3, [r0, #20]
 801cf36:	2d09      	cmp	r5, #9
 801cf38:	f04f 0301 	mov.w	r3, #1
 801cf3c:	6103      	str	r3, [r0, #16]
 801cf3e:	dd16      	ble.n	801cf6e <__s2b+0x72>
 801cf40:	f104 0909 	add.w	r9, r4, #9
 801cf44:	46c8      	mov	r8, r9
 801cf46:	442c      	add	r4, r5
 801cf48:	f818 3b01 	ldrb.w	r3, [r8], #1
 801cf4c:	4601      	mov	r1, r0
 801cf4e:	3b30      	subs	r3, #48	@ 0x30
 801cf50:	220a      	movs	r2, #10
 801cf52:	4630      	mov	r0, r6
 801cf54:	f7ff ff8c 	bl	801ce70 <__multadd>
 801cf58:	45a0      	cmp	r8, r4
 801cf5a:	d1f5      	bne.n	801cf48 <__s2b+0x4c>
 801cf5c:	f1a5 0408 	sub.w	r4, r5, #8
 801cf60:	444c      	add	r4, r9
 801cf62:	1b2d      	subs	r5, r5, r4
 801cf64:	1963      	adds	r3, r4, r5
 801cf66:	42bb      	cmp	r3, r7
 801cf68:	db04      	blt.n	801cf74 <__s2b+0x78>
 801cf6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801cf6e:	340a      	adds	r4, #10
 801cf70:	2509      	movs	r5, #9
 801cf72:	e7f6      	b.n	801cf62 <__s2b+0x66>
 801cf74:	f814 3b01 	ldrb.w	r3, [r4], #1
 801cf78:	4601      	mov	r1, r0
 801cf7a:	3b30      	subs	r3, #48	@ 0x30
 801cf7c:	220a      	movs	r2, #10
 801cf7e:	4630      	mov	r0, r6
 801cf80:	f7ff ff76 	bl	801ce70 <__multadd>
 801cf84:	e7ee      	b.n	801cf64 <__s2b+0x68>
 801cf86:	bf00      	nop
 801cf88:	0802256c 	.word	0x0802256c
 801cf8c:	080225dd 	.word	0x080225dd

0801cf90 <__hi0bits>:
 801cf90:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801cf94:	4603      	mov	r3, r0
 801cf96:	bf36      	itet	cc
 801cf98:	0403      	lslcc	r3, r0, #16
 801cf9a:	2000      	movcs	r0, #0
 801cf9c:	2010      	movcc	r0, #16
 801cf9e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801cfa2:	bf3c      	itt	cc
 801cfa4:	021b      	lslcc	r3, r3, #8
 801cfa6:	3008      	addcc	r0, #8
 801cfa8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801cfac:	bf3c      	itt	cc
 801cfae:	011b      	lslcc	r3, r3, #4
 801cfb0:	3004      	addcc	r0, #4
 801cfb2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801cfb6:	bf3c      	itt	cc
 801cfb8:	009b      	lslcc	r3, r3, #2
 801cfba:	3002      	addcc	r0, #2
 801cfbc:	2b00      	cmp	r3, #0
 801cfbe:	db05      	blt.n	801cfcc <__hi0bits+0x3c>
 801cfc0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 801cfc4:	f100 0001 	add.w	r0, r0, #1
 801cfc8:	bf08      	it	eq
 801cfca:	2020      	moveq	r0, #32
 801cfcc:	4770      	bx	lr

0801cfce <__lo0bits>:
 801cfce:	6803      	ldr	r3, [r0, #0]
 801cfd0:	4602      	mov	r2, r0
 801cfd2:	f013 0007 	ands.w	r0, r3, #7
 801cfd6:	d00b      	beq.n	801cff0 <__lo0bits+0x22>
 801cfd8:	07d9      	lsls	r1, r3, #31
 801cfda:	d421      	bmi.n	801d020 <__lo0bits+0x52>
 801cfdc:	0798      	lsls	r0, r3, #30
 801cfde:	bf49      	itett	mi
 801cfe0:	085b      	lsrmi	r3, r3, #1
 801cfe2:	089b      	lsrpl	r3, r3, #2
 801cfe4:	2001      	movmi	r0, #1
 801cfe6:	6013      	strmi	r3, [r2, #0]
 801cfe8:	bf5c      	itt	pl
 801cfea:	6013      	strpl	r3, [r2, #0]
 801cfec:	2002      	movpl	r0, #2
 801cfee:	4770      	bx	lr
 801cff0:	b299      	uxth	r1, r3
 801cff2:	b909      	cbnz	r1, 801cff8 <__lo0bits+0x2a>
 801cff4:	0c1b      	lsrs	r3, r3, #16
 801cff6:	2010      	movs	r0, #16
 801cff8:	b2d9      	uxtb	r1, r3
 801cffa:	b909      	cbnz	r1, 801d000 <__lo0bits+0x32>
 801cffc:	3008      	adds	r0, #8
 801cffe:	0a1b      	lsrs	r3, r3, #8
 801d000:	0719      	lsls	r1, r3, #28
 801d002:	bf04      	itt	eq
 801d004:	091b      	lsreq	r3, r3, #4
 801d006:	3004      	addeq	r0, #4
 801d008:	0799      	lsls	r1, r3, #30
 801d00a:	bf04      	itt	eq
 801d00c:	089b      	lsreq	r3, r3, #2
 801d00e:	3002      	addeq	r0, #2
 801d010:	07d9      	lsls	r1, r3, #31
 801d012:	d403      	bmi.n	801d01c <__lo0bits+0x4e>
 801d014:	085b      	lsrs	r3, r3, #1
 801d016:	f100 0001 	add.w	r0, r0, #1
 801d01a:	d003      	beq.n	801d024 <__lo0bits+0x56>
 801d01c:	6013      	str	r3, [r2, #0]
 801d01e:	4770      	bx	lr
 801d020:	2000      	movs	r0, #0
 801d022:	4770      	bx	lr
 801d024:	2020      	movs	r0, #32
 801d026:	4770      	bx	lr

0801d028 <__i2b>:
 801d028:	b510      	push	{r4, lr}
 801d02a:	460c      	mov	r4, r1
 801d02c:	2101      	movs	r1, #1
 801d02e:	f7ff febd 	bl	801cdac <_Balloc>
 801d032:	4602      	mov	r2, r0
 801d034:	b928      	cbnz	r0, 801d042 <__i2b+0x1a>
 801d036:	4b05      	ldr	r3, [pc, #20]	@ (801d04c <__i2b+0x24>)
 801d038:	4805      	ldr	r0, [pc, #20]	@ (801d050 <__i2b+0x28>)
 801d03a:	f240 1145 	movw	r1, #325	@ 0x145
 801d03e:	f7fe fcb5 	bl	801b9ac <__assert_func>
 801d042:	2301      	movs	r3, #1
 801d044:	6144      	str	r4, [r0, #20]
 801d046:	6103      	str	r3, [r0, #16]
 801d048:	bd10      	pop	{r4, pc}
 801d04a:	bf00      	nop
 801d04c:	0802256c 	.word	0x0802256c
 801d050:	080225dd 	.word	0x080225dd

0801d054 <__multiply>:
 801d054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d058:	4614      	mov	r4, r2
 801d05a:	690a      	ldr	r2, [r1, #16]
 801d05c:	6923      	ldr	r3, [r4, #16]
 801d05e:	429a      	cmp	r2, r3
 801d060:	bfa8      	it	ge
 801d062:	4623      	movge	r3, r4
 801d064:	460f      	mov	r7, r1
 801d066:	bfa4      	itt	ge
 801d068:	460c      	movge	r4, r1
 801d06a:	461f      	movge	r7, r3
 801d06c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 801d070:	f8d7 9010 	ldr.w	r9, [r7, #16]
 801d074:	68a3      	ldr	r3, [r4, #8]
 801d076:	6861      	ldr	r1, [r4, #4]
 801d078:	eb0a 0609 	add.w	r6, sl, r9
 801d07c:	42b3      	cmp	r3, r6
 801d07e:	b085      	sub	sp, #20
 801d080:	bfb8      	it	lt
 801d082:	3101      	addlt	r1, #1
 801d084:	f7ff fe92 	bl	801cdac <_Balloc>
 801d088:	b930      	cbnz	r0, 801d098 <__multiply+0x44>
 801d08a:	4602      	mov	r2, r0
 801d08c:	4b44      	ldr	r3, [pc, #272]	@ (801d1a0 <__multiply+0x14c>)
 801d08e:	4845      	ldr	r0, [pc, #276]	@ (801d1a4 <__multiply+0x150>)
 801d090:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801d094:	f7fe fc8a 	bl	801b9ac <__assert_func>
 801d098:	f100 0514 	add.w	r5, r0, #20
 801d09c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801d0a0:	462b      	mov	r3, r5
 801d0a2:	2200      	movs	r2, #0
 801d0a4:	4543      	cmp	r3, r8
 801d0a6:	d321      	bcc.n	801d0ec <__multiply+0x98>
 801d0a8:	f107 0114 	add.w	r1, r7, #20
 801d0ac:	f104 0214 	add.w	r2, r4, #20
 801d0b0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 801d0b4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 801d0b8:	9302      	str	r3, [sp, #8]
 801d0ba:	1b13      	subs	r3, r2, r4
 801d0bc:	3b15      	subs	r3, #21
 801d0be:	f023 0303 	bic.w	r3, r3, #3
 801d0c2:	3304      	adds	r3, #4
 801d0c4:	f104 0715 	add.w	r7, r4, #21
 801d0c8:	42ba      	cmp	r2, r7
 801d0ca:	bf38      	it	cc
 801d0cc:	2304      	movcc	r3, #4
 801d0ce:	9301      	str	r3, [sp, #4]
 801d0d0:	9b02      	ldr	r3, [sp, #8]
 801d0d2:	9103      	str	r1, [sp, #12]
 801d0d4:	428b      	cmp	r3, r1
 801d0d6:	d80c      	bhi.n	801d0f2 <__multiply+0x9e>
 801d0d8:	2e00      	cmp	r6, #0
 801d0da:	dd03      	ble.n	801d0e4 <__multiply+0x90>
 801d0dc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801d0e0:	2b00      	cmp	r3, #0
 801d0e2:	d05b      	beq.n	801d19c <__multiply+0x148>
 801d0e4:	6106      	str	r6, [r0, #16]
 801d0e6:	b005      	add	sp, #20
 801d0e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d0ec:	f843 2b04 	str.w	r2, [r3], #4
 801d0f0:	e7d8      	b.n	801d0a4 <__multiply+0x50>
 801d0f2:	f8b1 a000 	ldrh.w	sl, [r1]
 801d0f6:	f1ba 0f00 	cmp.w	sl, #0
 801d0fa:	d024      	beq.n	801d146 <__multiply+0xf2>
 801d0fc:	f104 0e14 	add.w	lr, r4, #20
 801d100:	46a9      	mov	r9, r5
 801d102:	f04f 0c00 	mov.w	ip, #0
 801d106:	f85e 7b04 	ldr.w	r7, [lr], #4
 801d10a:	f8d9 3000 	ldr.w	r3, [r9]
 801d10e:	fa1f fb87 	uxth.w	fp, r7
 801d112:	b29b      	uxth	r3, r3
 801d114:	fb0a 330b 	mla	r3, sl, fp, r3
 801d118:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 801d11c:	f8d9 7000 	ldr.w	r7, [r9]
 801d120:	4463      	add	r3, ip
 801d122:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801d126:	fb0a c70b 	mla	r7, sl, fp, ip
 801d12a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 801d12e:	b29b      	uxth	r3, r3
 801d130:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801d134:	4572      	cmp	r2, lr
 801d136:	f849 3b04 	str.w	r3, [r9], #4
 801d13a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801d13e:	d8e2      	bhi.n	801d106 <__multiply+0xb2>
 801d140:	9b01      	ldr	r3, [sp, #4]
 801d142:	f845 c003 	str.w	ip, [r5, r3]
 801d146:	9b03      	ldr	r3, [sp, #12]
 801d148:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801d14c:	3104      	adds	r1, #4
 801d14e:	f1b9 0f00 	cmp.w	r9, #0
 801d152:	d021      	beq.n	801d198 <__multiply+0x144>
 801d154:	682b      	ldr	r3, [r5, #0]
 801d156:	f104 0c14 	add.w	ip, r4, #20
 801d15a:	46ae      	mov	lr, r5
 801d15c:	f04f 0a00 	mov.w	sl, #0
 801d160:	f8bc b000 	ldrh.w	fp, [ip]
 801d164:	f8be 7002 	ldrh.w	r7, [lr, #2]
 801d168:	fb09 770b 	mla	r7, r9, fp, r7
 801d16c:	4457      	add	r7, sl
 801d16e:	b29b      	uxth	r3, r3
 801d170:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801d174:	f84e 3b04 	str.w	r3, [lr], #4
 801d178:	f85c 3b04 	ldr.w	r3, [ip], #4
 801d17c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801d180:	f8be 3000 	ldrh.w	r3, [lr]
 801d184:	fb09 330a 	mla	r3, r9, sl, r3
 801d188:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 801d18c:	4562      	cmp	r2, ip
 801d18e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801d192:	d8e5      	bhi.n	801d160 <__multiply+0x10c>
 801d194:	9f01      	ldr	r7, [sp, #4]
 801d196:	51eb      	str	r3, [r5, r7]
 801d198:	3504      	adds	r5, #4
 801d19a:	e799      	b.n	801d0d0 <__multiply+0x7c>
 801d19c:	3e01      	subs	r6, #1
 801d19e:	e79b      	b.n	801d0d8 <__multiply+0x84>
 801d1a0:	0802256c 	.word	0x0802256c
 801d1a4:	080225dd 	.word	0x080225dd

0801d1a8 <__pow5mult>:
 801d1a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d1ac:	4615      	mov	r5, r2
 801d1ae:	f012 0203 	ands.w	r2, r2, #3
 801d1b2:	4607      	mov	r7, r0
 801d1b4:	460e      	mov	r6, r1
 801d1b6:	d007      	beq.n	801d1c8 <__pow5mult+0x20>
 801d1b8:	4c25      	ldr	r4, [pc, #148]	@ (801d250 <__pow5mult+0xa8>)
 801d1ba:	3a01      	subs	r2, #1
 801d1bc:	2300      	movs	r3, #0
 801d1be:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801d1c2:	f7ff fe55 	bl	801ce70 <__multadd>
 801d1c6:	4606      	mov	r6, r0
 801d1c8:	10ad      	asrs	r5, r5, #2
 801d1ca:	d03d      	beq.n	801d248 <__pow5mult+0xa0>
 801d1cc:	69fc      	ldr	r4, [r7, #28]
 801d1ce:	b97c      	cbnz	r4, 801d1f0 <__pow5mult+0x48>
 801d1d0:	2010      	movs	r0, #16
 801d1d2:	f7fc fb3d 	bl	8019850 <malloc>
 801d1d6:	4602      	mov	r2, r0
 801d1d8:	61f8      	str	r0, [r7, #28]
 801d1da:	b928      	cbnz	r0, 801d1e8 <__pow5mult+0x40>
 801d1dc:	4b1d      	ldr	r3, [pc, #116]	@ (801d254 <__pow5mult+0xac>)
 801d1de:	481e      	ldr	r0, [pc, #120]	@ (801d258 <__pow5mult+0xb0>)
 801d1e0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 801d1e4:	f7fe fbe2 	bl	801b9ac <__assert_func>
 801d1e8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801d1ec:	6004      	str	r4, [r0, #0]
 801d1ee:	60c4      	str	r4, [r0, #12]
 801d1f0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 801d1f4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801d1f8:	b94c      	cbnz	r4, 801d20e <__pow5mult+0x66>
 801d1fa:	f240 2171 	movw	r1, #625	@ 0x271
 801d1fe:	4638      	mov	r0, r7
 801d200:	f7ff ff12 	bl	801d028 <__i2b>
 801d204:	2300      	movs	r3, #0
 801d206:	f8c8 0008 	str.w	r0, [r8, #8]
 801d20a:	4604      	mov	r4, r0
 801d20c:	6003      	str	r3, [r0, #0]
 801d20e:	f04f 0900 	mov.w	r9, #0
 801d212:	07eb      	lsls	r3, r5, #31
 801d214:	d50a      	bpl.n	801d22c <__pow5mult+0x84>
 801d216:	4631      	mov	r1, r6
 801d218:	4622      	mov	r2, r4
 801d21a:	4638      	mov	r0, r7
 801d21c:	f7ff ff1a 	bl	801d054 <__multiply>
 801d220:	4631      	mov	r1, r6
 801d222:	4680      	mov	r8, r0
 801d224:	4638      	mov	r0, r7
 801d226:	f7ff fe01 	bl	801ce2c <_Bfree>
 801d22a:	4646      	mov	r6, r8
 801d22c:	106d      	asrs	r5, r5, #1
 801d22e:	d00b      	beq.n	801d248 <__pow5mult+0xa0>
 801d230:	6820      	ldr	r0, [r4, #0]
 801d232:	b938      	cbnz	r0, 801d244 <__pow5mult+0x9c>
 801d234:	4622      	mov	r2, r4
 801d236:	4621      	mov	r1, r4
 801d238:	4638      	mov	r0, r7
 801d23a:	f7ff ff0b 	bl	801d054 <__multiply>
 801d23e:	6020      	str	r0, [r4, #0]
 801d240:	f8c0 9000 	str.w	r9, [r0]
 801d244:	4604      	mov	r4, r0
 801d246:	e7e4      	b.n	801d212 <__pow5mult+0x6a>
 801d248:	4630      	mov	r0, r6
 801d24a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d24e:	bf00      	nop
 801d250:	08022638 	.word	0x08022638
 801d254:	08022452 	.word	0x08022452
 801d258:	080225dd 	.word	0x080225dd

0801d25c <__lshift>:
 801d25c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d260:	460c      	mov	r4, r1
 801d262:	6849      	ldr	r1, [r1, #4]
 801d264:	6923      	ldr	r3, [r4, #16]
 801d266:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801d26a:	68a3      	ldr	r3, [r4, #8]
 801d26c:	4607      	mov	r7, r0
 801d26e:	4691      	mov	r9, r2
 801d270:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801d274:	f108 0601 	add.w	r6, r8, #1
 801d278:	42b3      	cmp	r3, r6
 801d27a:	db0b      	blt.n	801d294 <__lshift+0x38>
 801d27c:	4638      	mov	r0, r7
 801d27e:	f7ff fd95 	bl	801cdac <_Balloc>
 801d282:	4605      	mov	r5, r0
 801d284:	b948      	cbnz	r0, 801d29a <__lshift+0x3e>
 801d286:	4602      	mov	r2, r0
 801d288:	4b28      	ldr	r3, [pc, #160]	@ (801d32c <__lshift+0xd0>)
 801d28a:	4829      	ldr	r0, [pc, #164]	@ (801d330 <__lshift+0xd4>)
 801d28c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801d290:	f7fe fb8c 	bl	801b9ac <__assert_func>
 801d294:	3101      	adds	r1, #1
 801d296:	005b      	lsls	r3, r3, #1
 801d298:	e7ee      	b.n	801d278 <__lshift+0x1c>
 801d29a:	2300      	movs	r3, #0
 801d29c:	f100 0114 	add.w	r1, r0, #20
 801d2a0:	f100 0210 	add.w	r2, r0, #16
 801d2a4:	4618      	mov	r0, r3
 801d2a6:	4553      	cmp	r3, sl
 801d2a8:	db33      	blt.n	801d312 <__lshift+0xb6>
 801d2aa:	6920      	ldr	r0, [r4, #16]
 801d2ac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801d2b0:	f104 0314 	add.w	r3, r4, #20
 801d2b4:	f019 091f 	ands.w	r9, r9, #31
 801d2b8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801d2bc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801d2c0:	d02b      	beq.n	801d31a <__lshift+0xbe>
 801d2c2:	f1c9 0e20 	rsb	lr, r9, #32
 801d2c6:	468a      	mov	sl, r1
 801d2c8:	2200      	movs	r2, #0
 801d2ca:	6818      	ldr	r0, [r3, #0]
 801d2cc:	fa00 f009 	lsl.w	r0, r0, r9
 801d2d0:	4310      	orrs	r0, r2
 801d2d2:	f84a 0b04 	str.w	r0, [sl], #4
 801d2d6:	f853 2b04 	ldr.w	r2, [r3], #4
 801d2da:	459c      	cmp	ip, r3
 801d2dc:	fa22 f20e 	lsr.w	r2, r2, lr
 801d2e0:	d8f3      	bhi.n	801d2ca <__lshift+0x6e>
 801d2e2:	ebac 0304 	sub.w	r3, ip, r4
 801d2e6:	3b15      	subs	r3, #21
 801d2e8:	f023 0303 	bic.w	r3, r3, #3
 801d2ec:	3304      	adds	r3, #4
 801d2ee:	f104 0015 	add.w	r0, r4, #21
 801d2f2:	4584      	cmp	ip, r0
 801d2f4:	bf38      	it	cc
 801d2f6:	2304      	movcc	r3, #4
 801d2f8:	50ca      	str	r2, [r1, r3]
 801d2fa:	b10a      	cbz	r2, 801d300 <__lshift+0xa4>
 801d2fc:	f108 0602 	add.w	r6, r8, #2
 801d300:	3e01      	subs	r6, #1
 801d302:	4638      	mov	r0, r7
 801d304:	612e      	str	r6, [r5, #16]
 801d306:	4621      	mov	r1, r4
 801d308:	f7ff fd90 	bl	801ce2c <_Bfree>
 801d30c:	4628      	mov	r0, r5
 801d30e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d312:	f842 0f04 	str.w	r0, [r2, #4]!
 801d316:	3301      	adds	r3, #1
 801d318:	e7c5      	b.n	801d2a6 <__lshift+0x4a>
 801d31a:	3904      	subs	r1, #4
 801d31c:	f853 2b04 	ldr.w	r2, [r3], #4
 801d320:	f841 2f04 	str.w	r2, [r1, #4]!
 801d324:	459c      	cmp	ip, r3
 801d326:	d8f9      	bhi.n	801d31c <__lshift+0xc0>
 801d328:	e7ea      	b.n	801d300 <__lshift+0xa4>
 801d32a:	bf00      	nop
 801d32c:	0802256c 	.word	0x0802256c
 801d330:	080225dd 	.word	0x080225dd

0801d334 <__mcmp>:
 801d334:	690a      	ldr	r2, [r1, #16]
 801d336:	4603      	mov	r3, r0
 801d338:	6900      	ldr	r0, [r0, #16]
 801d33a:	1a80      	subs	r0, r0, r2
 801d33c:	b530      	push	{r4, r5, lr}
 801d33e:	d10e      	bne.n	801d35e <__mcmp+0x2a>
 801d340:	3314      	adds	r3, #20
 801d342:	3114      	adds	r1, #20
 801d344:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801d348:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801d34c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801d350:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801d354:	4295      	cmp	r5, r2
 801d356:	d003      	beq.n	801d360 <__mcmp+0x2c>
 801d358:	d205      	bcs.n	801d366 <__mcmp+0x32>
 801d35a:	f04f 30ff 	mov.w	r0, #4294967295
 801d35e:	bd30      	pop	{r4, r5, pc}
 801d360:	42a3      	cmp	r3, r4
 801d362:	d3f3      	bcc.n	801d34c <__mcmp+0x18>
 801d364:	e7fb      	b.n	801d35e <__mcmp+0x2a>
 801d366:	2001      	movs	r0, #1
 801d368:	e7f9      	b.n	801d35e <__mcmp+0x2a>
	...

0801d36c <__mdiff>:
 801d36c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d370:	4689      	mov	r9, r1
 801d372:	4606      	mov	r6, r0
 801d374:	4611      	mov	r1, r2
 801d376:	4648      	mov	r0, r9
 801d378:	4614      	mov	r4, r2
 801d37a:	f7ff ffdb 	bl	801d334 <__mcmp>
 801d37e:	1e05      	subs	r5, r0, #0
 801d380:	d112      	bne.n	801d3a8 <__mdiff+0x3c>
 801d382:	4629      	mov	r1, r5
 801d384:	4630      	mov	r0, r6
 801d386:	f7ff fd11 	bl	801cdac <_Balloc>
 801d38a:	4602      	mov	r2, r0
 801d38c:	b928      	cbnz	r0, 801d39a <__mdiff+0x2e>
 801d38e:	4b3f      	ldr	r3, [pc, #252]	@ (801d48c <__mdiff+0x120>)
 801d390:	f240 2137 	movw	r1, #567	@ 0x237
 801d394:	483e      	ldr	r0, [pc, #248]	@ (801d490 <__mdiff+0x124>)
 801d396:	f7fe fb09 	bl	801b9ac <__assert_func>
 801d39a:	2301      	movs	r3, #1
 801d39c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801d3a0:	4610      	mov	r0, r2
 801d3a2:	b003      	add	sp, #12
 801d3a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d3a8:	bfbc      	itt	lt
 801d3aa:	464b      	movlt	r3, r9
 801d3ac:	46a1      	movlt	r9, r4
 801d3ae:	4630      	mov	r0, r6
 801d3b0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801d3b4:	bfba      	itte	lt
 801d3b6:	461c      	movlt	r4, r3
 801d3b8:	2501      	movlt	r5, #1
 801d3ba:	2500      	movge	r5, #0
 801d3bc:	f7ff fcf6 	bl	801cdac <_Balloc>
 801d3c0:	4602      	mov	r2, r0
 801d3c2:	b918      	cbnz	r0, 801d3cc <__mdiff+0x60>
 801d3c4:	4b31      	ldr	r3, [pc, #196]	@ (801d48c <__mdiff+0x120>)
 801d3c6:	f240 2145 	movw	r1, #581	@ 0x245
 801d3ca:	e7e3      	b.n	801d394 <__mdiff+0x28>
 801d3cc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801d3d0:	6926      	ldr	r6, [r4, #16]
 801d3d2:	60c5      	str	r5, [r0, #12]
 801d3d4:	f109 0310 	add.w	r3, r9, #16
 801d3d8:	f109 0514 	add.w	r5, r9, #20
 801d3dc:	f104 0e14 	add.w	lr, r4, #20
 801d3e0:	f100 0b14 	add.w	fp, r0, #20
 801d3e4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801d3e8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801d3ec:	9301      	str	r3, [sp, #4]
 801d3ee:	46d9      	mov	r9, fp
 801d3f0:	f04f 0c00 	mov.w	ip, #0
 801d3f4:	9b01      	ldr	r3, [sp, #4]
 801d3f6:	f85e 0b04 	ldr.w	r0, [lr], #4
 801d3fa:	f853 af04 	ldr.w	sl, [r3, #4]!
 801d3fe:	9301      	str	r3, [sp, #4]
 801d400:	fa1f f38a 	uxth.w	r3, sl
 801d404:	4619      	mov	r1, r3
 801d406:	b283      	uxth	r3, r0
 801d408:	1acb      	subs	r3, r1, r3
 801d40a:	0c00      	lsrs	r0, r0, #16
 801d40c:	4463      	add	r3, ip
 801d40e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801d412:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801d416:	b29b      	uxth	r3, r3
 801d418:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801d41c:	4576      	cmp	r6, lr
 801d41e:	f849 3b04 	str.w	r3, [r9], #4
 801d422:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801d426:	d8e5      	bhi.n	801d3f4 <__mdiff+0x88>
 801d428:	1b33      	subs	r3, r6, r4
 801d42a:	3b15      	subs	r3, #21
 801d42c:	f023 0303 	bic.w	r3, r3, #3
 801d430:	3415      	adds	r4, #21
 801d432:	3304      	adds	r3, #4
 801d434:	42a6      	cmp	r6, r4
 801d436:	bf38      	it	cc
 801d438:	2304      	movcc	r3, #4
 801d43a:	441d      	add	r5, r3
 801d43c:	445b      	add	r3, fp
 801d43e:	461e      	mov	r6, r3
 801d440:	462c      	mov	r4, r5
 801d442:	4544      	cmp	r4, r8
 801d444:	d30e      	bcc.n	801d464 <__mdiff+0xf8>
 801d446:	f108 0103 	add.w	r1, r8, #3
 801d44a:	1b49      	subs	r1, r1, r5
 801d44c:	f021 0103 	bic.w	r1, r1, #3
 801d450:	3d03      	subs	r5, #3
 801d452:	45a8      	cmp	r8, r5
 801d454:	bf38      	it	cc
 801d456:	2100      	movcc	r1, #0
 801d458:	440b      	add	r3, r1
 801d45a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801d45e:	b191      	cbz	r1, 801d486 <__mdiff+0x11a>
 801d460:	6117      	str	r7, [r2, #16]
 801d462:	e79d      	b.n	801d3a0 <__mdiff+0x34>
 801d464:	f854 1b04 	ldr.w	r1, [r4], #4
 801d468:	46e6      	mov	lr, ip
 801d46a:	0c08      	lsrs	r0, r1, #16
 801d46c:	fa1c fc81 	uxtah	ip, ip, r1
 801d470:	4471      	add	r1, lr
 801d472:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801d476:	b289      	uxth	r1, r1
 801d478:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801d47c:	f846 1b04 	str.w	r1, [r6], #4
 801d480:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801d484:	e7dd      	b.n	801d442 <__mdiff+0xd6>
 801d486:	3f01      	subs	r7, #1
 801d488:	e7e7      	b.n	801d45a <__mdiff+0xee>
 801d48a:	bf00      	nop
 801d48c:	0802256c 	.word	0x0802256c
 801d490:	080225dd 	.word	0x080225dd

0801d494 <__ulp>:
 801d494:	b082      	sub	sp, #8
 801d496:	ed8d 0b00 	vstr	d0, [sp]
 801d49a:	9a01      	ldr	r2, [sp, #4]
 801d49c:	4b0f      	ldr	r3, [pc, #60]	@ (801d4dc <__ulp+0x48>)
 801d49e:	4013      	ands	r3, r2
 801d4a0:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 801d4a4:	2b00      	cmp	r3, #0
 801d4a6:	dc08      	bgt.n	801d4ba <__ulp+0x26>
 801d4a8:	425b      	negs	r3, r3
 801d4aa:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 801d4ae:	ea4f 5223 	mov.w	r2, r3, asr #20
 801d4b2:	da04      	bge.n	801d4be <__ulp+0x2a>
 801d4b4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 801d4b8:	4113      	asrs	r3, r2
 801d4ba:	2200      	movs	r2, #0
 801d4bc:	e008      	b.n	801d4d0 <__ulp+0x3c>
 801d4be:	f1a2 0314 	sub.w	r3, r2, #20
 801d4c2:	2b1e      	cmp	r3, #30
 801d4c4:	bfda      	itte	le
 801d4c6:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 801d4ca:	40da      	lsrle	r2, r3
 801d4cc:	2201      	movgt	r2, #1
 801d4ce:	2300      	movs	r3, #0
 801d4d0:	4619      	mov	r1, r3
 801d4d2:	4610      	mov	r0, r2
 801d4d4:	ec41 0b10 	vmov	d0, r0, r1
 801d4d8:	b002      	add	sp, #8
 801d4da:	4770      	bx	lr
 801d4dc:	7ff00000 	.word	0x7ff00000

0801d4e0 <__b2d>:
 801d4e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d4e4:	6906      	ldr	r6, [r0, #16]
 801d4e6:	f100 0814 	add.w	r8, r0, #20
 801d4ea:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801d4ee:	1f37      	subs	r7, r6, #4
 801d4f0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801d4f4:	4610      	mov	r0, r2
 801d4f6:	f7ff fd4b 	bl	801cf90 <__hi0bits>
 801d4fa:	f1c0 0320 	rsb	r3, r0, #32
 801d4fe:	280a      	cmp	r0, #10
 801d500:	600b      	str	r3, [r1, #0]
 801d502:	491b      	ldr	r1, [pc, #108]	@ (801d570 <__b2d+0x90>)
 801d504:	dc15      	bgt.n	801d532 <__b2d+0x52>
 801d506:	f1c0 0c0b 	rsb	ip, r0, #11
 801d50a:	fa22 f30c 	lsr.w	r3, r2, ip
 801d50e:	45b8      	cmp	r8, r7
 801d510:	ea43 0501 	orr.w	r5, r3, r1
 801d514:	bf34      	ite	cc
 801d516:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801d51a:	2300      	movcs	r3, #0
 801d51c:	3015      	adds	r0, #21
 801d51e:	fa02 f000 	lsl.w	r0, r2, r0
 801d522:	fa23 f30c 	lsr.w	r3, r3, ip
 801d526:	4303      	orrs	r3, r0
 801d528:	461c      	mov	r4, r3
 801d52a:	ec45 4b10 	vmov	d0, r4, r5
 801d52e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d532:	45b8      	cmp	r8, r7
 801d534:	bf3a      	itte	cc
 801d536:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801d53a:	f1a6 0708 	subcc.w	r7, r6, #8
 801d53e:	2300      	movcs	r3, #0
 801d540:	380b      	subs	r0, #11
 801d542:	d012      	beq.n	801d56a <__b2d+0x8a>
 801d544:	f1c0 0120 	rsb	r1, r0, #32
 801d548:	fa23 f401 	lsr.w	r4, r3, r1
 801d54c:	4082      	lsls	r2, r0
 801d54e:	4322      	orrs	r2, r4
 801d550:	4547      	cmp	r7, r8
 801d552:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 801d556:	bf8c      	ite	hi
 801d558:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 801d55c:	2200      	movls	r2, #0
 801d55e:	4083      	lsls	r3, r0
 801d560:	40ca      	lsrs	r2, r1
 801d562:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 801d566:	4313      	orrs	r3, r2
 801d568:	e7de      	b.n	801d528 <__b2d+0x48>
 801d56a:	ea42 0501 	orr.w	r5, r2, r1
 801d56e:	e7db      	b.n	801d528 <__b2d+0x48>
 801d570:	3ff00000 	.word	0x3ff00000

0801d574 <__d2b>:
 801d574:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801d578:	460f      	mov	r7, r1
 801d57a:	2101      	movs	r1, #1
 801d57c:	ec59 8b10 	vmov	r8, r9, d0
 801d580:	4616      	mov	r6, r2
 801d582:	f7ff fc13 	bl	801cdac <_Balloc>
 801d586:	4604      	mov	r4, r0
 801d588:	b930      	cbnz	r0, 801d598 <__d2b+0x24>
 801d58a:	4602      	mov	r2, r0
 801d58c:	4b23      	ldr	r3, [pc, #140]	@ (801d61c <__d2b+0xa8>)
 801d58e:	4824      	ldr	r0, [pc, #144]	@ (801d620 <__d2b+0xac>)
 801d590:	f240 310f 	movw	r1, #783	@ 0x30f
 801d594:	f7fe fa0a 	bl	801b9ac <__assert_func>
 801d598:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801d59c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801d5a0:	b10d      	cbz	r5, 801d5a6 <__d2b+0x32>
 801d5a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801d5a6:	9301      	str	r3, [sp, #4]
 801d5a8:	f1b8 0300 	subs.w	r3, r8, #0
 801d5ac:	d023      	beq.n	801d5f6 <__d2b+0x82>
 801d5ae:	4668      	mov	r0, sp
 801d5b0:	9300      	str	r3, [sp, #0]
 801d5b2:	f7ff fd0c 	bl	801cfce <__lo0bits>
 801d5b6:	e9dd 1200 	ldrd	r1, r2, [sp]
 801d5ba:	b1d0      	cbz	r0, 801d5f2 <__d2b+0x7e>
 801d5bc:	f1c0 0320 	rsb	r3, r0, #32
 801d5c0:	fa02 f303 	lsl.w	r3, r2, r3
 801d5c4:	430b      	orrs	r3, r1
 801d5c6:	40c2      	lsrs	r2, r0
 801d5c8:	6163      	str	r3, [r4, #20]
 801d5ca:	9201      	str	r2, [sp, #4]
 801d5cc:	9b01      	ldr	r3, [sp, #4]
 801d5ce:	61a3      	str	r3, [r4, #24]
 801d5d0:	2b00      	cmp	r3, #0
 801d5d2:	bf0c      	ite	eq
 801d5d4:	2201      	moveq	r2, #1
 801d5d6:	2202      	movne	r2, #2
 801d5d8:	6122      	str	r2, [r4, #16]
 801d5da:	b1a5      	cbz	r5, 801d606 <__d2b+0x92>
 801d5dc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801d5e0:	4405      	add	r5, r0
 801d5e2:	603d      	str	r5, [r7, #0]
 801d5e4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801d5e8:	6030      	str	r0, [r6, #0]
 801d5ea:	4620      	mov	r0, r4
 801d5ec:	b003      	add	sp, #12
 801d5ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d5f2:	6161      	str	r1, [r4, #20]
 801d5f4:	e7ea      	b.n	801d5cc <__d2b+0x58>
 801d5f6:	a801      	add	r0, sp, #4
 801d5f8:	f7ff fce9 	bl	801cfce <__lo0bits>
 801d5fc:	9b01      	ldr	r3, [sp, #4]
 801d5fe:	6163      	str	r3, [r4, #20]
 801d600:	3020      	adds	r0, #32
 801d602:	2201      	movs	r2, #1
 801d604:	e7e8      	b.n	801d5d8 <__d2b+0x64>
 801d606:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801d60a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801d60e:	6038      	str	r0, [r7, #0]
 801d610:	6918      	ldr	r0, [r3, #16]
 801d612:	f7ff fcbd 	bl	801cf90 <__hi0bits>
 801d616:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801d61a:	e7e5      	b.n	801d5e8 <__d2b+0x74>
 801d61c:	0802256c 	.word	0x0802256c
 801d620:	080225dd 	.word	0x080225dd

0801d624 <__ratio>:
 801d624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d628:	b085      	sub	sp, #20
 801d62a:	e9cd 1000 	strd	r1, r0, [sp]
 801d62e:	a902      	add	r1, sp, #8
 801d630:	f7ff ff56 	bl	801d4e0 <__b2d>
 801d634:	9800      	ldr	r0, [sp, #0]
 801d636:	a903      	add	r1, sp, #12
 801d638:	ec55 4b10 	vmov	r4, r5, d0
 801d63c:	f7ff ff50 	bl	801d4e0 <__b2d>
 801d640:	9b01      	ldr	r3, [sp, #4]
 801d642:	6919      	ldr	r1, [r3, #16]
 801d644:	9b00      	ldr	r3, [sp, #0]
 801d646:	691b      	ldr	r3, [r3, #16]
 801d648:	1ac9      	subs	r1, r1, r3
 801d64a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 801d64e:	1a9b      	subs	r3, r3, r2
 801d650:	ec5b ab10 	vmov	sl, fp, d0
 801d654:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 801d658:	2b00      	cmp	r3, #0
 801d65a:	bfce      	itee	gt
 801d65c:	462a      	movgt	r2, r5
 801d65e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801d662:	465a      	movle	r2, fp
 801d664:	462f      	mov	r7, r5
 801d666:	46d9      	mov	r9, fp
 801d668:	bfcc      	ite	gt
 801d66a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801d66e:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 801d672:	464b      	mov	r3, r9
 801d674:	4652      	mov	r2, sl
 801d676:	4620      	mov	r0, r4
 801d678:	4639      	mov	r1, r7
 801d67a:	f7e3 f8bf 	bl	80007fc <__aeabi_ddiv>
 801d67e:	ec41 0b10 	vmov	d0, r0, r1
 801d682:	b005      	add	sp, #20
 801d684:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d688 <__copybits>:
 801d688:	3901      	subs	r1, #1
 801d68a:	b570      	push	{r4, r5, r6, lr}
 801d68c:	1149      	asrs	r1, r1, #5
 801d68e:	6914      	ldr	r4, [r2, #16]
 801d690:	3101      	adds	r1, #1
 801d692:	f102 0314 	add.w	r3, r2, #20
 801d696:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801d69a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801d69e:	1f05      	subs	r5, r0, #4
 801d6a0:	42a3      	cmp	r3, r4
 801d6a2:	d30c      	bcc.n	801d6be <__copybits+0x36>
 801d6a4:	1aa3      	subs	r3, r4, r2
 801d6a6:	3b11      	subs	r3, #17
 801d6a8:	f023 0303 	bic.w	r3, r3, #3
 801d6ac:	3211      	adds	r2, #17
 801d6ae:	42a2      	cmp	r2, r4
 801d6b0:	bf88      	it	hi
 801d6b2:	2300      	movhi	r3, #0
 801d6b4:	4418      	add	r0, r3
 801d6b6:	2300      	movs	r3, #0
 801d6b8:	4288      	cmp	r0, r1
 801d6ba:	d305      	bcc.n	801d6c8 <__copybits+0x40>
 801d6bc:	bd70      	pop	{r4, r5, r6, pc}
 801d6be:	f853 6b04 	ldr.w	r6, [r3], #4
 801d6c2:	f845 6f04 	str.w	r6, [r5, #4]!
 801d6c6:	e7eb      	b.n	801d6a0 <__copybits+0x18>
 801d6c8:	f840 3b04 	str.w	r3, [r0], #4
 801d6cc:	e7f4      	b.n	801d6b8 <__copybits+0x30>

0801d6ce <__any_on>:
 801d6ce:	f100 0214 	add.w	r2, r0, #20
 801d6d2:	6900      	ldr	r0, [r0, #16]
 801d6d4:	114b      	asrs	r3, r1, #5
 801d6d6:	4298      	cmp	r0, r3
 801d6d8:	b510      	push	{r4, lr}
 801d6da:	db11      	blt.n	801d700 <__any_on+0x32>
 801d6dc:	dd0a      	ble.n	801d6f4 <__any_on+0x26>
 801d6de:	f011 011f 	ands.w	r1, r1, #31
 801d6e2:	d007      	beq.n	801d6f4 <__any_on+0x26>
 801d6e4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801d6e8:	fa24 f001 	lsr.w	r0, r4, r1
 801d6ec:	fa00 f101 	lsl.w	r1, r0, r1
 801d6f0:	428c      	cmp	r4, r1
 801d6f2:	d10b      	bne.n	801d70c <__any_on+0x3e>
 801d6f4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801d6f8:	4293      	cmp	r3, r2
 801d6fa:	d803      	bhi.n	801d704 <__any_on+0x36>
 801d6fc:	2000      	movs	r0, #0
 801d6fe:	bd10      	pop	{r4, pc}
 801d700:	4603      	mov	r3, r0
 801d702:	e7f7      	b.n	801d6f4 <__any_on+0x26>
 801d704:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801d708:	2900      	cmp	r1, #0
 801d70a:	d0f5      	beq.n	801d6f8 <__any_on+0x2a>
 801d70c:	2001      	movs	r0, #1
 801d70e:	e7f6      	b.n	801d6fe <__any_on+0x30>

0801d710 <__ascii_wctomb>:
 801d710:	4603      	mov	r3, r0
 801d712:	4608      	mov	r0, r1
 801d714:	b141      	cbz	r1, 801d728 <__ascii_wctomb+0x18>
 801d716:	2aff      	cmp	r2, #255	@ 0xff
 801d718:	d904      	bls.n	801d724 <__ascii_wctomb+0x14>
 801d71a:	228a      	movs	r2, #138	@ 0x8a
 801d71c:	601a      	str	r2, [r3, #0]
 801d71e:	f04f 30ff 	mov.w	r0, #4294967295
 801d722:	4770      	bx	lr
 801d724:	700a      	strb	r2, [r1, #0]
 801d726:	2001      	movs	r0, #1
 801d728:	4770      	bx	lr

0801d72a <__ssputs_r>:
 801d72a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d72e:	688e      	ldr	r6, [r1, #8]
 801d730:	461f      	mov	r7, r3
 801d732:	42be      	cmp	r6, r7
 801d734:	680b      	ldr	r3, [r1, #0]
 801d736:	4682      	mov	sl, r0
 801d738:	460c      	mov	r4, r1
 801d73a:	4690      	mov	r8, r2
 801d73c:	d82d      	bhi.n	801d79a <__ssputs_r+0x70>
 801d73e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801d742:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801d746:	d026      	beq.n	801d796 <__ssputs_r+0x6c>
 801d748:	6965      	ldr	r5, [r4, #20]
 801d74a:	6909      	ldr	r1, [r1, #16]
 801d74c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801d750:	eba3 0901 	sub.w	r9, r3, r1
 801d754:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801d758:	1c7b      	adds	r3, r7, #1
 801d75a:	444b      	add	r3, r9
 801d75c:	106d      	asrs	r5, r5, #1
 801d75e:	429d      	cmp	r5, r3
 801d760:	bf38      	it	cc
 801d762:	461d      	movcc	r5, r3
 801d764:	0553      	lsls	r3, r2, #21
 801d766:	d527      	bpl.n	801d7b8 <__ssputs_r+0x8e>
 801d768:	4629      	mov	r1, r5
 801d76a:	f7fc f8a3 	bl	80198b4 <_malloc_r>
 801d76e:	4606      	mov	r6, r0
 801d770:	b360      	cbz	r0, 801d7cc <__ssputs_r+0xa2>
 801d772:	6921      	ldr	r1, [r4, #16]
 801d774:	464a      	mov	r2, r9
 801d776:	f7fe f8fc 	bl	801b972 <memcpy>
 801d77a:	89a3      	ldrh	r3, [r4, #12]
 801d77c:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801d780:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801d784:	81a3      	strh	r3, [r4, #12]
 801d786:	6126      	str	r6, [r4, #16]
 801d788:	6165      	str	r5, [r4, #20]
 801d78a:	444e      	add	r6, r9
 801d78c:	eba5 0509 	sub.w	r5, r5, r9
 801d790:	6026      	str	r6, [r4, #0]
 801d792:	60a5      	str	r5, [r4, #8]
 801d794:	463e      	mov	r6, r7
 801d796:	42be      	cmp	r6, r7
 801d798:	d900      	bls.n	801d79c <__ssputs_r+0x72>
 801d79a:	463e      	mov	r6, r7
 801d79c:	6820      	ldr	r0, [r4, #0]
 801d79e:	4632      	mov	r2, r6
 801d7a0:	4641      	mov	r1, r8
 801d7a2:	f000 fbad 	bl	801df00 <memmove>
 801d7a6:	68a3      	ldr	r3, [r4, #8]
 801d7a8:	1b9b      	subs	r3, r3, r6
 801d7aa:	60a3      	str	r3, [r4, #8]
 801d7ac:	6823      	ldr	r3, [r4, #0]
 801d7ae:	4433      	add	r3, r6
 801d7b0:	6023      	str	r3, [r4, #0]
 801d7b2:	2000      	movs	r0, #0
 801d7b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d7b8:	462a      	mov	r2, r5
 801d7ba:	f000 fbd6 	bl	801df6a <_realloc_r>
 801d7be:	4606      	mov	r6, r0
 801d7c0:	2800      	cmp	r0, #0
 801d7c2:	d1e0      	bne.n	801d786 <__ssputs_r+0x5c>
 801d7c4:	6921      	ldr	r1, [r4, #16]
 801d7c6:	4650      	mov	r0, sl
 801d7c8:	f7fe ff5a 	bl	801c680 <_free_r>
 801d7cc:	230c      	movs	r3, #12
 801d7ce:	f8ca 3000 	str.w	r3, [sl]
 801d7d2:	89a3      	ldrh	r3, [r4, #12]
 801d7d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801d7d8:	81a3      	strh	r3, [r4, #12]
 801d7da:	f04f 30ff 	mov.w	r0, #4294967295
 801d7de:	e7e9      	b.n	801d7b4 <__ssputs_r+0x8a>

0801d7e0 <_svfiprintf_r>:
 801d7e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d7e4:	4698      	mov	r8, r3
 801d7e6:	898b      	ldrh	r3, [r1, #12]
 801d7e8:	061b      	lsls	r3, r3, #24
 801d7ea:	b09d      	sub	sp, #116	@ 0x74
 801d7ec:	4607      	mov	r7, r0
 801d7ee:	460d      	mov	r5, r1
 801d7f0:	4614      	mov	r4, r2
 801d7f2:	d510      	bpl.n	801d816 <_svfiprintf_r+0x36>
 801d7f4:	690b      	ldr	r3, [r1, #16]
 801d7f6:	b973      	cbnz	r3, 801d816 <_svfiprintf_r+0x36>
 801d7f8:	2140      	movs	r1, #64	@ 0x40
 801d7fa:	f7fc f85b 	bl	80198b4 <_malloc_r>
 801d7fe:	6028      	str	r0, [r5, #0]
 801d800:	6128      	str	r0, [r5, #16]
 801d802:	b930      	cbnz	r0, 801d812 <_svfiprintf_r+0x32>
 801d804:	230c      	movs	r3, #12
 801d806:	603b      	str	r3, [r7, #0]
 801d808:	f04f 30ff 	mov.w	r0, #4294967295
 801d80c:	b01d      	add	sp, #116	@ 0x74
 801d80e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d812:	2340      	movs	r3, #64	@ 0x40
 801d814:	616b      	str	r3, [r5, #20]
 801d816:	2300      	movs	r3, #0
 801d818:	9309      	str	r3, [sp, #36]	@ 0x24
 801d81a:	2320      	movs	r3, #32
 801d81c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801d820:	f8cd 800c 	str.w	r8, [sp, #12]
 801d824:	2330      	movs	r3, #48	@ 0x30
 801d826:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801d9c4 <_svfiprintf_r+0x1e4>
 801d82a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801d82e:	f04f 0901 	mov.w	r9, #1
 801d832:	4623      	mov	r3, r4
 801d834:	469a      	mov	sl, r3
 801d836:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d83a:	b10a      	cbz	r2, 801d840 <_svfiprintf_r+0x60>
 801d83c:	2a25      	cmp	r2, #37	@ 0x25
 801d83e:	d1f9      	bne.n	801d834 <_svfiprintf_r+0x54>
 801d840:	ebba 0b04 	subs.w	fp, sl, r4
 801d844:	d00b      	beq.n	801d85e <_svfiprintf_r+0x7e>
 801d846:	465b      	mov	r3, fp
 801d848:	4622      	mov	r2, r4
 801d84a:	4629      	mov	r1, r5
 801d84c:	4638      	mov	r0, r7
 801d84e:	f7ff ff6c 	bl	801d72a <__ssputs_r>
 801d852:	3001      	adds	r0, #1
 801d854:	f000 80a7 	beq.w	801d9a6 <_svfiprintf_r+0x1c6>
 801d858:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801d85a:	445a      	add	r2, fp
 801d85c:	9209      	str	r2, [sp, #36]	@ 0x24
 801d85e:	f89a 3000 	ldrb.w	r3, [sl]
 801d862:	2b00      	cmp	r3, #0
 801d864:	f000 809f 	beq.w	801d9a6 <_svfiprintf_r+0x1c6>
 801d868:	2300      	movs	r3, #0
 801d86a:	f04f 32ff 	mov.w	r2, #4294967295
 801d86e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801d872:	f10a 0a01 	add.w	sl, sl, #1
 801d876:	9304      	str	r3, [sp, #16]
 801d878:	9307      	str	r3, [sp, #28]
 801d87a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801d87e:	931a      	str	r3, [sp, #104]	@ 0x68
 801d880:	4654      	mov	r4, sl
 801d882:	2205      	movs	r2, #5
 801d884:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d888:	484e      	ldr	r0, [pc, #312]	@ (801d9c4 <_svfiprintf_r+0x1e4>)
 801d88a:	f7e2 fc79 	bl	8000180 <memchr>
 801d88e:	9a04      	ldr	r2, [sp, #16]
 801d890:	b9d8      	cbnz	r0, 801d8ca <_svfiprintf_r+0xea>
 801d892:	06d0      	lsls	r0, r2, #27
 801d894:	bf44      	itt	mi
 801d896:	2320      	movmi	r3, #32
 801d898:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801d89c:	0711      	lsls	r1, r2, #28
 801d89e:	bf44      	itt	mi
 801d8a0:	232b      	movmi	r3, #43	@ 0x2b
 801d8a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801d8a6:	f89a 3000 	ldrb.w	r3, [sl]
 801d8aa:	2b2a      	cmp	r3, #42	@ 0x2a
 801d8ac:	d015      	beq.n	801d8da <_svfiprintf_r+0xfa>
 801d8ae:	9a07      	ldr	r2, [sp, #28]
 801d8b0:	4654      	mov	r4, sl
 801d8b2:	2000      	movs	r0, #0
 801d8b4:	f04f 0c0a 	mov.w	ip, #10
 801d8b8:	4621      	mov	r1, r4
 801d8ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 801d8be:	3b30      	subs	r3, #48	@ 0x30
 801d8c0:	2b09      	cmp	r3, #9
 801d8c2:	d94b      	bls.n	801d95c <_svfiprintf_r+0x17c>
 801d8c4:	b1b0      	cbz	r0, 801d8f4 <_svfiprintf_r+0x114>
 801d8c6:	9207      	str	r2, [sp, #28]
 801d8c8:	e014      	b.n	801d8f4 <_svfiprintf_r+0x114>
 801d8ca:	eba0 0308 	sub.w	r3, r0, r8
 801d8ce:	fa09 f303 	lsl.w	r3, r9, r3
 801d8d2:	4313      	orrs	r3, r2
 801d8d4:	9304      	str	r3, [sp, #16]
 801d8d6:	46a2      	mov	sl, r4
 801d8d8:	e7d2      	b.n	801d880 <_svfiprintf_r+0xa0>
 801d8da:	9b03      	ldr	r3, [sp, #12]
 801d8dc:	1d19      	adds	r1, r3, #4
 801d8de:	681b      	ldr	r3, [r3, #0]
 801d8e0:	9103      	str	r1, [sp, #12]
 801d8e2:	2b00      	cmp	r3, #0
 801d8e4:	bfbb      	ittet	lt
 801d8e6:	425b      	neglt	r3, r3
 801d8e8:	f042 0202 	orrlt.w	r2, r2, #2
 801d8ec:	9307      	strge	r3, [sp, #28]
 801d8ee:	9307      	strlt	r3, [sp, #28]
 801d8f0:	bfb8      	it	lt
 801d8f2:	9204      	strlt	r2, [sp, #16]
 801d8f4:	7823      	ldrb	r3, [r4, #0]
 801d8f6:	2b2e      	cmp	r3, #46	@ 0x2e
 801d8f8:	d10a      	bne.n	801d910 <_svfiprintf_r+0x130>
 801d8fa:	7863      	ldrb	r3, [r4, #1]
 801d8fc:	2b2a      	cmp	r3, #42	@ 0x2a
 801d8fe:	d132      	bne.n	801d966 <_svfiprintf_r+0x186>
 801d900:	9b03      	ldr	r3, [sp, #12]
 801d902:	1d1a      	adds	r2, r3, #4
 801d904:	681b      	ldr	r3, [r3, #0]
 801d906:	9203      	str	r2, [sp, #12]
 801d908:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801d90c:	3402      	adds	r4, #2
 801d90e:	9305      	str	r3, [sp, #20]
 801d910:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801d9d4 <_svfiprintf_r+0x1f4>
 801d914:	7821      	ldrb	r1, [r4, #0]
 801d916:	2203      	movs	r2, #3
 801d918:	4650      	mov	r0, sl
 801d91a:	f7e2 fc31 	bl	8000180 <memchr>
 801d91e:	b138      	cbz	r0, 801d930 <_svfiprintf_r+0x150>
 801d920:	9b04      	ldr	r3, [sp, #16]
 801d922:	eba0 000a 	sub.w	r0, r0, sl
 801d926:	2240      	movs	r2, #64	@ 0x40
 801d928:	4082      	lsls	r2, r0
 801d92a:	4313      	orrs	r3, r2
 801d92c:	3401      	adds	r4, #1
 801d92e:	9304      	str	r3, [sp, #16]
 801d930:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d934:	4824      	ldr	r0, [pc, #144]	@ (801d9c8 <_svfiprintf_r+0x1e8>)
 801d936:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801d93a:	2206      	movs	r2, #6
 801d93c:	f7e2 fc20 	bl	8000180 <memchr>
 801d940:	2800      	cmp	r0, #0
 801d942:	d036      	beq.n	801d9b2 <_svfiprintf_r+0x1d2>
 801d944:	4b21      	ldr	r3, [pc, #132]	@ (801d9cc <_svfiprintf_r+0x1ec>)
 801d946:	bb1b      	cbnz	r3, 801d990 <_svfiprintf_r+0x1b0>
 801d948:	9b03      	ldr	r3, [sp, #12]
 801d94a:	3307      	adds	r3, #7
 801d94c:	f023 0307 	bic.w	r3, r3, #7
 801d950:	3308      	adds	r3, #8
 801d952:	9303      	str	r3, [sp, #12]
 801d954:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d956:	4433      	add	r3, r6
 801d958:	9309      	str	r3, [sp, #36]	@ 0x24
 801d95a:	e76a      	b.n	801d832 <_svfiprintf_r+0x52>
 801d95c:	fb0c 3202 	mla	r2, ip, r2, r3
 801d960:	460c      	mov	r4, r1
 801d962:	2001      	movs	r0, #1
 801d964:	e7a8      	b.n	801d8b8 <_svfiprintf_r+0xd8>
 801d966:	2300      	movs	r3, #0
 801d968:	3401      	adds	r4, #1
 801d96a:	9305      	str	r3, [sp, #20]
 801d96c:	4619      	mov	r1, r3
 801d96e:	f04f 0c0a 	mov.w	ip, #10
 801d972:	4620      	mov	r0, r4
 801d974:	f810 2b01 	ldrb.w	r2, [r0], #1
 801d978:	3a30      	subs	r2, #48	@ 0x30
 801d97a:	2a09      	cmp	r2, #9
 801d97c:	d903      	bls.n	801d986 <_svfiprintf_r+0x1a6>
 801d97e:	2b00      	cmp	r3, #0
 801d980:	d0c6      	beq.n	801d910 <_svfiprintf_r+0x130>
 801d982:	9105      	str	r1, [sp, #20]
 801d984:	e7c4      	b.n	801d910 <_svfiprintf_r+0x130>
 801d986:	fb0c 2101 	mla	r1, ip, r1, r2
 801d98a:	4604      	mov	r4, r0
 801d98c:	2301      	movs	r3, #1
 801d98e:	e7f0      	b.n	801d972 <_svfiprintf_r+0x192>
 801d990:	ab03      	add	r3, sp, #12
 801d992:	9300      	str	r3, [sp, #0]
 801d994:	462a      	mov	r2, r5
 801d996:	4b0e      	ldr	r3, [pc, #56]	@ (801d9d0 <_svfiprintf_r+0x1f0>)
 801d998:	a904      	add	r1, sp, #16
 801d99a:	4638      	mov	r0, r7
 801d99c:	f7fc ffa8 	bl	801a8f0 <_printf_float>
 801d9a0:	1c42      	adds	r2, r0, #1
 801d9a2:	4606      	mov	r6, r0
 801d9a4:	d1d6      	bne.n	801d954 <_svfiprintf_r+0x174>
 801d9a6:	89ab      	ldrh	r3, [r5, #12]
 801d9a8:	065b      	lsls	r3, r3, #25
 801d9aa:	f53f af2d 	bmi.w	801d808 <_svfiprintf_r+0x28>
 801d9ae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801d9b0:	e72c      	b.n	801d80c <_svfiprintf_r+0x2c>
 801d9b2:	ab03      	add	r3, sp, #12
 801d9b4:	9300      	str	r3, [sp, #0]
 801d9b6:	462a      	mov	r2, r5
 801d9b8:	4b05      	ldr	r3, [pc, #20]	@ (801d9d0 <_svfiprintf_r+0x1f0>)
 801d9ba:	a904      	add	r1, sp, #16
 801d9bc:	4638      	mov	r0, r7
 801d9be:	f7fd fa2f 	bl	801ae20 <_printf_i>
 801d9c2:	e7ed      	b.n	801d9a0 <_svfiprintf_r+0x1c0>
 801d9c4:	08022738 	.word	0x08022738
 801d9c8:	08022742 	.word	0x08022742
 801d9cc:	0801a8f1 	.word	0x0801a8f1
 801d9d0:	0801d72b 	.word	0x0801d72b
 801d9d4:	0802273e 	.word	0x0802273e

0801d9d8 <__sfputc_r>:
 801d9d8:	6893      	ldr	r3, [r2, #8]
 801d9da:	3b01      	subs	r3, #1
 801d9dc:	2b00      	cmp	r3, #0
 801d9de:	b410      	push	{r4}
 801d9e0:	6093      	str	r3, [r2, #8]
 801d9e2:	da08      	bge.n	801d9f6 <__sfputc_r+0x1e>
 801d9e4:	6994      	ldr	r4, [r2, #24]
 801d9e6:	42a3      	cmp	r3, r4
 801d9e8:	db01      	blt.n	801d9ee <__sfputc_r+0x16>
 801d9ea:	290a      	cmp	r1, #10
 801d9ec:	d103      	bne.n	801d9f6 <__sfputc_r+0x1e>
 801d9ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d9f2:	f000 b9f1 	b.w	801ddd8 <__swbuf_r>
 801d9f6:	6813      	ldr	r3, [r2, #0]
 801d9f8:	1c58      	adds	r0, r3, #1
 801d9fa:	6010      	str	r0, [r2, #0]
 801d9fc:	7019      	strb	r1, [r3, #0]
 801d9fe:	4608      	mov	r0, r1
 801da00:	f85d 4b04 	ldr.w	r4, [sp], #4
 801da04:	4770      	bx	lr

0801da06 <__sfputs_r>:
 801da06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801da08:	4606      	mov	r6, r0
 801da0a:	460f      	mov	r7, r1
 801da0c:	4614      	mov	r4, r2
 801da0e:	18d5      	adds	r5, r2, r3
 801da10:	42ac      	cmp	r4, r5
 801da12:	d101      	bne.n	801da18 <__sfputs_r+0x12>
 801da14:	2000      	movs	r0, #0
 801da16:	e007      	b.n	801da28 <__sfputs_r+0x22>
 801da18:	f814 1b01 	ldrb.w	r1, [r4], #1
 801da1c:	463a      	mov	r2, r7
 801da1e:	4630      	mov	r0, r6
 801da20:	f7ff ffda 	bl	801d9d8 <__sfputc_r>
 801da24:	1c43      	adds	r3, r0, #1
 801da26:	d1f3      	bne.n	801da10 <__sfputs_r+0xa>
 801da28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801da2c <_vfiprintf_r>:
 801da2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801da30:	460d      	mov	r5, r1
 801da32:	b09d      	sub	sp, #116	@ 0x74
 801da34:	4614      	mov	r4, r2
 801da36:	4698      	mov	r8, r3
 801da38:	4606      	mov	r6, r0
 801da3a:	b118      	cbz	r0, 801da44 <_vfiprintf_r+0x18>
 801da3c:	6a03      	ldr	r3, [r0, #32]
 801da3e:	b90b      	cbnz	r3, 801da44 <_vfiprintf_r+0x18>
 801da40:	f7fd fdae 	bl	801b5a0 <__sinit>
 801da44:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801da46:	07d9      	lsls	r1, r3, #31
 801da48:	d405      	bmi.n	801da56 <_vfiprintf_r+0x2a>
 801da4a:	89ab      	ldrh	r3, [r5, #12]
 801da4c:	059a      	lsls	r2, r3, #22
 801da4e:	d402      	bmi.n	801da56 <_vfiprintf_r+0x2a>
 801da50:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801da52:	f7fd ff84 	bl	801b95e <__retarget_lock_acquire_recursive>
 801da56:	89ab      	ldrh	r3, [r5, #12]
 801da58:	071b      	lsls	r3, r3, #28
 801da5a:	d501      	bpl.n	801da60 <_vfiprintf_r+0x34>
 801da5c:	692b      	ldr	r3, [r5, #16]
 801da5e:	b99b      	cbnz	r3, 801da88 <_vfiprintf_r+0x5c>
 801da60:	4629      	mov	r1, r5
 801da62:	4630      	mov	r0, r6
 801da64:	f000 f9f6 	bl	801de54 <__swsetup_r>
 801da68:	b170      	cbz	r0, 801da88 <_vfiprintf_r+0x5c>
 801da6a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801da6c:	07dc      	lsls	r4, r3, #31
 801da6e:	d504      	bpl.n	801da7a <_vfiprintf_r+0x4e>
 801da70:	f04f 30ff 	mov.w	r0, #4294967295
 801da74:	b01d      	add	sp, #116	@ 0x74
 801da76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801da7a:	89ab      	ldrh	r3, [r5, #12]
 801da7c:	0598      	lsls	r0, r3, #22
 801da7e:	d4f7      	bmi.n	801da70 <_vfiprintf_r+0x44>
 801da80:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801da82:	f7fd ff6d 	bl	801b960 <__retarget_lock_release_recursive>
 801da86:	e7f3      	b.n	801da70 <_vfiprintf_r+0x44>
 801da88:	2300      	movs	r3, #0
 801da8a:	9309      	str	r3, [sp, #36]	@ 0x24
 801da8c:	2320      	movs	r3, #32
 801da8e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801da92:	f8cd 800c 	str.w	r8, [sp, #12]
 801da96:	2330      	movs	r3, #48	@ 0x30
 801da98:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801dc48 <_vfiprintf_r+0x21c>
 801da9c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801daa0:	f04f 0901 	mov.w	r9, #1
 801daa4:	4623      	mov	r3, r4
 801daa6:	469a      	mov	sl, r3
 801daa8:	f813 2b01 	ldrb.w	r2, [r3], #1
 801daac:	b10a      	cbz	r2, 801dab2 <_vfiprintf_r+0x86>
 801daae:	2a25      	cmp	r2, #37	@ 0x25
 801dab0:	d1f9      	bne.n	801daa6 <_vfiprintf_r+0x7a>
 801dab2:	ebba 0b04 	subs.w	fp, sl, r4
 801dab6:	d00b      	beq.n	801dad0 <_vfiprintf_r+0xa4>
 801dab8:	465b      	mov	r3, fp
 801daba:	4622      	mov	r2, r4
 801dabc:	4629      	mov	r1, r5
 801dabe:	4630      	mov	r0, r6
 801dac0:	f7ff ffa1 	bl	801da06 <__sfputs_r>
 801dac4:	3001      	adds	r0, #1
 801dac6:	f000 80a7 	beq.w	801dc18 <_vfiprintf_r+0x1ec>
 801daca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801dacc:	445a      	add	r2, fp
 801dace:	9209      	str	r2, [sp, #36]	@ 0x24
 801dad0:	f89a 3000 	ldrb.w	r3, [sl]
 801dad4:	2b00      	cmp	r3, #0
 801dad6:	f000 809f 	beq.w	801dc18 <_vfiprintf_r+0x1ec>
 801dada:	2300      	movs	r3, #0
 801dadc:	f04f 32ff 	mov.w	r2, #4294967295
 801dae0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801dae4:	f10a 0a01 	add.w	sl, sl, #1
 801dae8:	9304      	str	r3, [sp, #16]
 801daea:	9307      	str	r3, [sp, #28]
 801daec:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801daf0:	931a      	str	r3, [sp, #104]	@ 0x68
 801daf2:	4654      	mov	r4, sl
 801daf4:	2205      	movs	r2, #5
 801daf6:	f814 1b01 	ldrb.w	r1, [r4], #1
 801dafa:	4853      	ldr	r0, [pc, #332]	@ (801dc48 <_vfiprintf_r+0x21c>)
 801dafc:	f7e2 fb40 	bl	8000180 <memchr>
 801db00:	9a04      	ldr	r2, [sp, #16]
 801db02:	b9d8      	cbnz	r0, 801db3c <_vfiprintf_r+0x110>
 801db04:	06d1      	lsls	r1, r2, #27
 801db06:	bf44      	itt	mi
 801db08:	2320      	movmi	r3, #32
 801db0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801db0e:	0713      	lsls	r3, r2, #28
 801db10:	bf44      	itt	mi
 801db12:	232b      	movmi	r3, #43	@ 0x2b
 801db14:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801db18:	f89a 3000 	ldrb.w	r3, [sl]
 801db1c:	2b2a      	cmp	r3, #42	@ 0x2a
 801db1e:	d015      	beq.n	801db4c <_vfiprintf_r+0x120>
 801db20:	9a07      	ldr	r2, [sp, #28]
 801db22:	4654      	mov	r4, sl
 801db24:	2000      	movs	r0, #0
 801db26:	f04f 0c0a 	mov.w	ip, #10
 801db2a:	4621      	mov	r1, r4
 801db2c:	f811 3b01 	ldrb.w	r3, [r1], #1
 801db30:	3b30      	subs	r3, #48	@ 0x30
 801db32:	2b09      	cmp	r3, #9
 801db34:	d94b      	bls.n	801dbce <_vfiprintf_r+0x1a2>
 801db36:	b1b0      	cbz	r0, 801db66 <_vfiprintf_r+0x13a>
 801db38:	9207      	str	r2, [sp, #28]
 801db3a:	e014      	b.n	801db66 <_vfiprintf_r+0x13a>
 801db3c:	eba0 0308 	sub.w	r3, r0, r8
 801db40:	fa09 f303 	lsl.w	r3, r9, r3
 801db44:	4313      	orrs	r3, r2
 801db46:	9304      	str	r3, [sp, #16]
 801db48:	46a2      	mov	sl, r4
 801db4a:	e7d2      	b.n	801daf2 <_vfiprintf_r+0xc6>
 801db4c:	9b03      	ldr	r3, [sp, #12]
 801db4e:	1d19      	adds	r1, r3, #4
 801db50:	681b      	ldr	r3, [r3, #0]
 801db52:	9103      	str	r1, [sp, #12]
 801db54:	2b00      	cmp	r3, #0
 801db56:	bfbb      	ittet	lt
 801db58:	425b      	neglt	r3, r3
 801db5a:	f042 0202 	orrlt.w	r2, r2, #2
 801db5e:	9307      	strge	r3, [sp, #28]
 801db60:	9307      	strlt	r3, [sp, #28]
 801db62:	bfb8      	it	lt
 801db64:	9204      	strlt	r2, [sp, #16]
 801db66:	7823      	ldrb	r3, [r4, #0]
 801db68:	2b2e      	cmp	r3, #46	@ 0x2e
 801db6a:	d10a      	bne.n	801db82 <_vfiprintf_r+0x156>
 801db6c:	7863      	ldrb	r3, [r4, #1]
 801db6e:	2b2a      	cmp	r3, #42	@ 0x2a
 801db70:	d132      	bne.n	801dbd8 <_vfiprintf_r+0x1ac>
 801db72:	9b03      	ldr	r3, [sp, #12]
 801db74:	1d1a      	adds	r2, r3, #4
 801db76:	681b      	ldr	r3, [r3, #0]
 801db78:	9203      	str	r2, [sp, #12]
 801db7a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801db7e:	3402      	adds	r4, #2
 801db80:	9305      	str	r3, [sp, #20]
 801db82:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801dc58 <_vfiprintf_r+0x22c>
 801db86:	7821      	ldrb	r1, [r4, #0]
 801db88:	2203      	movs	r2, #3
 801db8a:	4650      	mov	r0, sl
 801db8c:	f7e2 faf8 	bl	8000180 <memchr>
 801db90:	b138      	cbz	r0, 801dba2 <_vfiprintf_r+0x176>
 801db92:	9b04      	ldr	r3, [sp, #16]
 801db94:	eba0 000a 	sub.w	r0, r0, sl
 801db98:	2240      	movs	r2, #64	@ 0x40
 801db9a:	4082      	lsls	r2, r0
 801db9c:	4313      	orrs	r3, r2
 801db9e:	3401      	adds	r4, #1
 801dba0:	9304      	str	r3, [sp, #16]
 801dba2:	f814 1b01 	ldrb.w	r1, [r4], #1
 801dba6:	4829      	ldr	r0, [pc, #164]	@ (801dc4c <_vfiprintf_r+0x220>)
 801dba8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801dbac:	2206      	movs	r2, #6
 801dbae:	f7e2 fae7 	bl	8000180 <memchr>
 801dbb2:	2800      	cmp	r0, #0
 801dbb4:	d03f      	beq.n	801dc36 <_vfiprintf_r+0x20a>
 801dbb6:	4b26      	ldr	r3, [pc, #152]	@ (801dc50 <_vfiprintf_r+0x224>)
 801dbb8:	bb1b      	cbnz	r3, 801dc02 <_vfiprintf_r+0x1d6>
 801dbba:	9b03      	ldr	r3, [sp, #12]
 801dbbc:	3307      	adds	r3, #7
 801dbbe:	f023 0307 	bic.w	r3, r3, #7
 801dbc2:	3308      	adds	r3, #8
 801dbc4:	9303      	str	r3, [sp, #12]
 801dbc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801dbc8:	443b      	add	r3, r7
 801dbca:	9309      	str	r3, [sp, #36]	@ 0x24
 801dbcc:	e76a      	b.n	801daa4 <_vfiprintf_r+0x78>
 801dbce:	fb0c 3202 	mla	r2, ip, r2, r3
 801dbd2:	460c      	mov	r4, r1
 801dbd4:	2001      	movs	r0, #1
 801dbd6:	e7a8      	b.n	801db2a <_vfiprintf_r+0xfe>
 801dbd8:	2300      	movs	r3, #0
 801dbda:	3401      	adds	r4, #1
 801dbdc:	9305      	str	r3, [sp, #20]
 801dbde:	4619      	mov	r1, r3
 801dbe0:	f04f 0c0a 	mov.w	ip, #10
 801dbe4:	4620      	mov	r0, r4
 801dbe6:	f810 2b01 	ldrb.w	r2, [r0], #1
 801dbea:	3a30      	subs	r2, #48	@ 0x30
 801dbec:	2a09      	cmp	r2, #9
 801dbee:	d903      	bls.n	801dbf8 <_vfiprintf_r+0x1cc>
 801dbf0:	2b00      	cmp	r3, #0
 801dbf2:	d0c6      	beq.n	801db82 <_vfiprintf_r+0x156>
 801dbf4:	9105      	str	r1, [sp, #20]
 801dbf6:	e7c4      	b.n	801db82 <_vfiprintf_r+0x156>
 801dbf8:	fb0c 2101 	mla	r1, ip, r1, r2
 801dbfc:	4604      	mov	r4, r0
 801dbfe:	2301      	movs	r3, #1
 801dc00:	e7f0      	b.n	801dbe4 <_vfiprintf_r+0x1b8>
 801dc02:	ab03      	add	r3, sp, #12
 801dc04:	9300      	str	r3, [sp, #0]
 801dc06:	462a      	mov	r2, r5
 801dc08:	4b12      	ldr	r3, [pc, #72]	@ (801dc54 <_vfiprintf_r+0x228>)
 801dc0a:	a904      	add	r1, sp, #16
 801dc0c:	4630      	mov	r0, r6
 801dc0e:	f7fc fe6f 	bl	801a8f0 <_printf_float>
 801dc12:	4607      	mov	r7, r0
 801dc14:	1c78      	adds	r0, r7, #1
 801dc16:	d1d6      	bne.n	801dbc6 <_vfiprintf_r+0x19a>
 801dc18:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801dc1a:	07d9      	lsls	r1, r3, #31
 801dc1c:	d405      	bmi.n	801dc2a <_vfiprintf_r+0x1fe>
 801dc1e:	89ab      	ldrh	r3, [r5, #12]
 801dc20:	059a      	lsls	r2, r3, #22
 801dc22:	d402      	bmi.n	801dc2a <_vfiprintf_r+0x1fe>
 801dc24:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801dc26:	f7fd fe9b 	bl	801b960 <__retarget_lock_release_recursive>
 801dc2a:	89ab      	ldrh	r3, [r5, #12]
 801dc2c:	065b      	lsls	r3, r3, #25
 801dc2e:	f53f af1f 	bmi.w	801da70 <_vfiprintf_r+0x44>
 801dc32:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801dc34:	e71e      	b.n	801da74 <_vfiprintf_r+0x48>
 801dc36:	ab03      	add	r3, sp, #12
 801dc38:	9300      	str	r3, [sp, #0]
 801dc3a:	462a      	mov	r2, r5
 801dc3c:	4b05      	ldr	r3, [pc, #20]	@ (801dc54 <_vfiprintf_r+0x228>)
 801dc3e:	a904      	add	r1, sp, #16
 801dc40:	4630      	mov	r0, r6
 801dc42:	f7fd f8ed 	bl	801ae20 <_printf_i>
 801dc46:	e7e4      	b.n	801dc12 <_vfiprintf_r+0x1e6>
 801dc48:	08022738 	.word	0x08022738
 801dc4c:	08022742 	.word	0x08022742
 801dc50:	0801a8f1 	.word	0x0801a8f1
 801dc54:	0801da07 	.word	0x0801da07
 801dc58:	0802273e 	.word	0x0802273e

0801dc5c <__sflush_r>:
 801dc5c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801dc60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801dc64:	0716      	lsls	r6, r2, #28
 801dc66:	4605      	mov	r5, r0
 801dc68:	460c      	mov	r4, r1
 801dc6a:	d454      	bmi.n	801dd16 <__sflush_r+0xba>
 801dc6c:	684b      	ldr	r3, [r1, #4]
 801dc6e:	2b00      	cmp	r3, #0
 801dc70:	dc02      	bgt.n	801dc78 <__sflush_r+0x1c>
 801dc72:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801dc74:	2b00      	cmp	r3, #0
 801dc76:	dd48      	ble.n	801dd0a <__sflush_r+0xae>
 801dc78:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801dc7a:	2e00      	cmp	r6, #0
 801dc7c:	d045      	beq.n	801dd0a <__sflush_r+0xae>
 801dc7e:	2300      	movs	r3, #0
 801dc80:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801dc84:	682f      	ldr	r7, [r5, #0]
 801dc86:	6a21      	ldr	r1, [r4, #32]
 801dc88:	602b      	str	r3, [r5, #0]
 801dc8a:	d030      	beq.n	801dcee <__sflush_r+0x92>
 801dc8c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801dc8e:	89a3      	ldrh	r3, [r4, #12]
 801dc90:	0759      	lsls	r1, r3, #29
 801dc92:	d505      	bpl.n	801dca0 <__sflush_r+0x44>
 801dc94:	6863      	ldr	r3, [r4, #4]
 801dc96:	1ad2      	subs	r2, r2, r3
 801dc98:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801dc9a:	b10b      	cbz	r3, 801dca0 <__sflush_r+0x44>
 801dc9c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801dc9e:	1ad2      	subs	r2, r2, r3
 801dca0:	2300      	movs	r3, #0
 801dca2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801dca4:	6a21      	ldr	r1, [r4, #32]
 801dca6:	4628      	mov	r0, r5
 801dca8:	47b0      	blx	r6
 801dcaa:	1c43      	adds	r3, r0, #1
 801dcac:	89a3      	ldrh	r3, [r4, #12]
 801dcae:	d106      	bne.n	801dcbe <__sflush_r+0x62>
 801dcb0:	6829      	ldr	r1, [r5, #0]
 801dcb2:	291d      	cmp	r1, #29
 801dcb4:	d82b      	bhi.n	801dd0e <__sflush_r+0xb2>
 801dcb6:	4a2a      	ldr	r2, [pc, #168]	@ (801dd60 <__sflush_r+0x104>)
 801dcb8:	410a      	asrs	r2, r1
 801dcba:	07d6      	lsls	r6, r2, #31
 801dcbc:	d427      	bmi.n	801dd0e <__sflush_r+0xb2>
 801dcbe:	2200      	movs	r2, #0
 801dcc0:	6062      	str	r2, [r4, #4]
 801dcc2:	04d9      	lsls	r1, r3, #19
 801dcc4:	6922      	ldr	r2, [r4, #16]
 801dcc6:	6022      	str	r2, [r4, #0]
 801dcc8:	d504      	bpl.n	801dcd4 <__sflush_r+0x78>
 801dcca:	1c42      	adds	r2, r0, #1
 801dccc:	d101      	bne.n	801dcd2 <__sflush_r+0x76>
 801dcce:	682b      	ldr	r3, [r5, #0]
 801dcd0:	b903      	cbnz	r3, 801dcd4 <__sflush_r+0x78>
 801dcd2:	6560      	str	r0, [r4, #84]	@ 0x54
 801dcd4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801dcd6:	602f      	str	r7, [r5, #0]
 801dcd8:	b1b9      	cbz	r1, 801dd0a <__sflush_r+0xae>
 801dcda:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801dcde:	4299      	cmp	r1, r3
 801dce0:	d002      	beq.n	801dce8 <__sflush_r+0x8c>
 801dce2:	4628      	mov	r0, r5
 801dce4:	f7fe fccc 	bl	801c680 <_free_r>
 801dce8:	2300      	movs	r3, #0
 801dcea:	6363      	str	r3, [r4, #52]	@ 0x34
 801dcec:	e00d      	b.n	801dd0a <__sflush_r+0xae>
 801dcee:	2301      	movs	r3, #1
 801dcf0:	4628      	mov	r0, r5
 801dcf2:	47b0      	blx	r6
 801dcf4:	4602      	mov	r2, r0
 801dcf6:	1c50      	adds	r0, r2, #1
 801dcf8:	d1c9      	bne.n	801dc8e <__sflush_r+0x32>
 801dcfa:	682b      	ldr	r3, [r5, #0]
 801dcfc:	2b00      	cmp	r3, #0
 801dcfe:	d0c6      	beq.n	801dc8e <__sflush_r+0x32>
 801dd00:	2b1d      	cmp	r3, #29
 801dd02:	d001      	beq.n	801dd08 <__sflush_r+0xac>
 801dd04:	2b16      	cmp	r3, #22
 801dd06:	d11e      	bne.n	801dd46 <__sflush_r+0xea>
 801dd08:	602f      	str	r7, [r5, #0]
 801dd0a:	2000      	movs	r0, #0
 801dd0c:	e022      	b.n	801dd54 <__sflush_r+0xf8>
 801dd0e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801dd12:	b21b      	sxth	r3, r3
 801dd14:	e01b      	b.n	801dd4e <__sflush_r+0xf2>
 801dd16:	690f      	ldr	r7, [r1, #16]
 801dd18:	2f00      	cmp	r7, #0
 801dd1a:	d0f6      	beq.n	801dd0a <__sflush_r+0xae>
 801dd1c:	0793      	lsls	r3, r2, #30
 801dd1e:	680e      	ldr	r6, [r1, #0]
 801dd20:	bf08      	it	eq
 801dd22:	694b      	ldreq	r3, [r1, #20]
 801dd24:	600f      	str	r7, [r1, #0]
 801dd26:	bf18      	it	ne
 801dd28:	2300      	movne	r3, #0
 801dd2a:	eba6 0807 	sub.w	r8, r6, r7
 801dd2e:	608b      	str	r3, [r1, #8]
 801dd30:	f1b8 0f00 	cmp.w	r8, #0
 801dd34:	dde9      	ble.n	801dd0a <__sflush_r+0xae>
 801dd36:	6a21      	ldr	r1, [r4, #32]
 801dd38:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801dd3a:	4643      	mov	r3, r8
 801dd3c:	463a      	mov	r2, r7
 801dd3e:	4628      	mov	r0, r5
 801dd40:	47b0      	blx	r6
 801dd42:	2800      	cmp	r0, #0
 801dd44:	dc08      	bgt.n	801dd58 <__sflush_r+0xfc>
 801dd46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801dd4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801dd4e:	81a3      	strh	r3, [r4, #12]
 801dd50:	f04f 30ff 	mov.w	r0, #4294967295
 801dd54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801dd58:	4407      	add	r7, r0
 801dd5a:	eba8 0800 	sub.w	r8, r8, r0
 801dd5e:	e7e7      	b.n	801dd30 <__sflush_r+0xd4>
 801dd60:	dfbffffe 	.word	0xdfbffffe

0801dd64 <_fflush_r>:
 801dd64:	b538      	push	{r3, r4, r5, lr}
 801dd66:	690b      	ldr	r3, [r1, #16]
 801dd68:	4605      	mov	r5, r0
 801dd6a:	460c      	mov	r4, r1
 801dd6c:	b913      	cbnz	r3, 801dd74 <_fflush_r+0x10>
 801dd6e:	2500      	movs	r5, #0
 801dd70:	4628      	mov	r0, r5
 801dd72:	bd38      	pop	{r3, r4, r5, pc}
 801dd74:	b118      	cbz	r0, 801dd7e <_fflush_r+0x1a>
 801dd76:	6a03      	ldr	r3, [r0, #32]
 801dd78:	b90b      	cbnz	r3, 801dd7e <_fflush_r+0x1a>
 801dd7a:	f7fd fc11 	bl	801b5a0 <__sinit>
 801dd7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801dd82:	2b00      	cmp	r3, #0
 801dd84:	d0f3      	beq.n	801dd6e <_fflush_r+0xa>
 801dd86:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801dd88:	07d0      	lsls	r0, r2, #31
 801dd8a:	d404      	bmi.n	801dd96 <_fflush_r+0x32>
 801dd8c:	0599      	lsls	r1, r3, #22
 801dd8e:	d402      	bmi.n	801dd96 <_fflush_r+0x32>
 801dd90:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801dd92:	f7fd fde4 	bl	801b95e <__retarget_lock_acquire_recursive>
 801dd96:	4628      	mov	r0, r5
 801dd98:	4621      	mov	r1, r4
 801dd9a:	f7ff ff5f 	bl	801dc5c <__sflush_r>
 801dd9e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801dda0:	07da      	lsls	r2, r3, #31
 801dda2:	4605      	mov	r5, r0
 801dda4:	d4e4      	bmi.n	801dd70 <_fflush_r+0xc>
 801dda6:	89a3      	ldrh	r3, [r4, #12]
 801dda8:	059b      	lsls	r3, r3, #22
 801ddaa:	d4e1      	bmi.n	801dd70 <_fflush_r+0xc>
 801ddac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801ddae:	f7fd fdd7 	bl	801b960 <__retarget_lock_release_recursive>
 801ddb2:	e7dd      	b.n	801dd70 <_fflush_r+0xc>

0801ddb4 <fiprintf>:
 801ddb4:	b40e      	push	{r1, r2, r3}
 801ddb6:	b503      	push	{r0, r1, lr}
 801ddb8:	4601      	mov	r1, r0
 801ddba:	ab03      	add	r3, sp, #12
 801ddbc:	4805      	ldr	r0, [pc, #20]	@ (801ddd4 <fiprintf+0x20>)
 801ddbe:	f853 2b04 	ldr.w	r2, [r3], #4
 801ddc2:	6800      	ldr	r0, [r0, #0]
 801ddc4:	9301      	str	r3, [sp, #4]
 801ddc6:	f7ff fe31 	bl	801da2c <_vfiprintf_r>
 801ddca:	b002      	add	sp, #8
 801ddcc:	f85d eb04 	ldr.w	lr, [sp], #4
 801ddd0:	b003      	add	sp, #12
 801ddd2:	4770      	bx	lr
 801ddd4:	200002c0 	.word	0x200002c0

0801ddd8 <__swbuf_r>:
 801ddd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ddda:	460e      	mov	r6, r1
 801dddc:	4614      	mov	r4, r2
 801ddde:	4605      	mov	r5, r0
 801dde0:	b118      	cbz	r0, 801ddea <__swbuf_r+0x12>
 801dde2:	6a03      	ldr	r3, [r0, #32]
 801dde4:	b90b      	cbnz	r3, 801ddea <__swbuf_r+0x12>
 801dde6:	f7fd fbdb 	bl	801b5a0 <__sinit>
 801ddea:	69a3      	ldr	r3, [r4, #24]
 801ddec:	60a3      	str	r3, [r4, #8]
 801ddee:	89a3      	ldrh	r3, [r4, #12]
 801ddf0:	071a      	lsls	r2, r3, #28
 801ddf2:	d501      	bpl.n	801ddf8 <__swbuf_r+0x20>
 801ddf4:	6923      	ldr	r3, [r4, #16]
 801ddf6:	b943      	cbnz	r3, 801de0a <__swbuf_r+0x32>
 801ddf8:	4621      	mov	r1, r4
 801ddfa:	4628      	mov	r0, r5
 801ddfc:	f000 f82a 	bl	801de54 <__swsetup_r>
 801de00:	b118      	cbz	r0, 801de0a <__swbuf_r+0x32>
 801de02:	f04f 37ff 	mov.w	r7, #4294967295
 801de06:	4638      	mov	r0, r7
 801de08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801de0a:	6823      	ldr	r3, [r4, #0]
 801de0c:	6922      	ldr	r2, [r4, #16]
 801de0e:	1a98      	subs	r0, r3, r2
 801de10:	6963      	ldr	r3, [r4, #20]
 801de12:	b2f6      	uxtb	r6, r6
 801de14:	4283      	cmp	r3, r0
 801de16:	4637      	mov	r7, r6
 801de18:	dc05      	bgt.n	801de26 <__swbuf_r+0x4e>
 801de1a:	4621      	mov	r1, r4
 801de1c:	4628      	mov	r0, r5
 801de1e:	f7ff ffa1 	bl	801dd64 <_fflush_r>
 801de22:	2800      	cmp	r0, #0
 801de24:	d1ed      	bne.n	801de02 <__swbuf_r+0x2a>
 801de26:	68a3      	ldr	r3, [r4, #8]
 801de28:	3b01      	subs	r3, #1
 801de2a:	60a3      	str	r3, [r4, #8]
 801de2c:	6823      	ldr	r3, [r4, #0]
 801de2e:	1c5a      	adds	r2, r3, #1
 801de30:	6022      	str	r2, [r4, #0]
 801de32:	701e      	strb	r6, [r3, #0]
 801de34:	6962      	ldr	r2, [r4, #20]
 801de36:	1c43      	adds	r3, r0, #1
 801de38:	429a      	cmp	r2, r3
 801de3a:	d004      	beq.n	801de46 <__swbuf_r+0x6e>
 801de3c:	89a3      	ldrh	r3, [r4, #12]
 801de3e:	07db      	lsls	r3, r3, #31
 801de40:	d5e1      	bpl.n	801de06 <__swbuf_r+0x2e>
 801de42:	2e0a      	cmp	r6, #10
 801de44:	d1df      	bne.n	801de06 <__swbuf_r+0x2e>
 801de46:	4621      	mov	r1, r4
 801de48:	4628      	mov	r0, r5
 801de4a:	f7ff ff8b 	bl	801dd64 <_fflush_r>
 801de4e:	2800      	cmp	r0, #0
 801de50:	d0d9      	beq.n	801de06 <__swbuf_r+0x2e>
 801de52:	e7d6      	b.n	801de02 <__swbuf_r+0x2a>

0801de54 <__swsetup_r>:
 801de54:	b538      	push	{r3, r4, r5, lr}
 801de56:	4b29      	ldr	r3, [pc, #164]	@ (801defc <__swsetup_r+0xa8>)
 801de58:	4605      	mov	r5, r0
 801de5a:	6818      	ldr	r0, [r3, #0]
 801de5c:	460c      	mov	r4, r1
 801de5e:	b118      	cbz	r0, 801de68 <__swsetup_r+0x14>
 801de60:	6a03      	ldr	r3, [r0, #32]
 801de62:	b90b      	cbnz	r3, 801de68 <__swsetup_r+0x14>
 801de64:	f7fd fb9c 	bl	801b5a0 <__sinit>
 801de68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801de6c:	0719      	lsls	r1, r3, #28
 801de6e:	d422      	bmi.n	801deb6 <__swsetup_r+0x62>
 801de70:	06da      	lsls	r2, r3, #27
 801de72:	d407      	bmi.n	801de84 <__swsetup_r+0x30>
 801de74:	2209      	movs	r2, #9
 801de76:	602a      	str	r2, [r5, #0]
 801de78:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801de7c:	81a3      	strh	r3, [r4, #12]
 801de7e:	f04f 30ff 	mov.w	r0, #4294967295
 801de82:	e033      	b.n	801deec <__swsetup_r+0x98>
 801de84:	0758      	lsls	r0, r3, #29
 801de86:	d512      	bpl.n	801deae <__swsetup_r+0x5a>
 801de88:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801de8a:	b141      	cbz	r1, 801de9e <__swsetup_r+0x4a>
 801de8c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801de90:	4299      	cmp	r1, r3
 801de92:	d002      	beq.n	801de9a <__swsetup_r+0x46>
 801de94:	4628      	mov	r0, r5
 801de96:	f7fe fbf3 	bl	801c680 <_free_r>
 801de9a:	2300      	movs	r3, #0
 801de9c:	6363      	str	r3, [r4, #52]	@ 0x34
 801de9e:	89a3      	ldrh	r3, [r4, #12]
 801dea0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801dea4:	81a3      	strh	r3, [r4, #12]
 801dea6:	2300      	movs	r3, #0
 801dea8:	6063      	str	r3, [r4, #4]
 801deaa:	6923      	ldr	r3, [r4, #16]
 801deac:	6023      	str	r3, [r4, #0]
 801deae:	89a3      	ldrh	r3, [r4, #12]
 801deb0:	f043 0308 	orr.w	r3, r3, #8
 801deb4:	81a3      	strh	r3, [r4, #12]
 801deb6:	6923      	ldr	r3, [r4, #16]
 801deb8:	b94b      	cbnz	r3, 801dece <__swsetup_r+0x7a>
 801deba:	89a3      	ldrh	r3, [r4, #12]
 801debc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801dec0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801dec4:	d003      	beq.n	801dece <__swsetup_r+0x7a>
 801dec6:	4621      	mov	r1, r4
 801dec8:	4628      	mov	r0, r5
 801deca:	f000 f8a2 	bl	801e012 <__smakebuf_r>
 801dece:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ded2:	f013 0201 	ands.w	r2, r3, #1
 801ded6:	d00a      	beq.n	801deee <__swsetup_r+0x9a>
 801ded8:	2200      	movs	r2, #0
 801deda:	60a2      	str	r2, [r4, #8]
 801dedc:	6962      	ldr	r2, [r4, #20]
 801dede:	4252      	negs	r2, r2
 801dee0:	61a2      	str	r2, [r4, #24]
 801dee2:	6922      	ldr	r2, [r4, #16]
 801dee4:	b942      	cbnz	r2, 801def8 <__swsetup_r+0xa4>
 801dee6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801deea:	d1c5      	bne.n	801de78 <__swsetup_r+0x24>
 801deec:	bd38      	pop	{r3, r4, r5, pc}
 801deee:	0799      	lsls	r1, r3, #30
 801def0:	bf58      	it	pl
 801def2:	6962      	ldrpl	r2, [r4, #20]
 801def4:	60a2      	str	r2, [r4, #8]
 801def6:	e7f4      	b.n	801dee2 <__swsetup_r+0x8e>
 801def8:	2000      	movs	r0, #0
 801defa:	e7f7      	b.n	801deec <__swsetup_r+0x98>
 801defc:	200002c0 	.word	0x200002c0

0801df00 <memmove>:
 801df00:	4288      	cmp	r0, r1
 801df02:	b510      	push	{r4, lr}
 801df04:	eb01 0402 	add.w	r4, r1, r2
 801df08:	d902      	bls.n	801df10 <memmove+0x10>
 801df0a:	4284      	cmp	r4, r0
 801df0c:	4623      	mov	r3, r4
 801df0e:	d807      	bhi.n	801df20 <memmove+0x20>
 801df10:	1e43      	subs	r3, r0, #1
 801df12:	42a1      	cmp	r1, r4
 801df14:	d008      	beq.n	801df28 <memmove+0x28>
 801df16:	f811 2b01 	ldrb.w	r2, [r1], #1
 801df1a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801df1e:	e7f8      	b.n	801df12 <memmove+0x12>
 801df20:	4402      	add	r2, r0
 801df22:	4601      	mov	r1, r0
 801df24:	428a      	cmp	r2, r1
 801df26:	d100      	bne.n	801df2a <memmove+0x2a>
 801df28:	bd10      	pop	{r4, pc}
 801df2a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801df2e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801df32:	e7f7      	b.n	801df24 <memmove+0x24>

0801df34 <abort>:
 801df34:	b508      	push	{r3, lr}
 801df36:	2006      	movs	r0, #6
 801df38:	f000 f8d0 	bl	801e0dc <raise>
 801df3c:	2001      	movs	r0, #1
 801df3e:	f7e8 fac7 	bl	80064d0 <_exit>

0801df42 <_calloc_r>:
 801df42:	b570      	push	{r4, r5, r6, lr}
 801df44:	fba1 5402 	umull	r5, r4, r1, r2
 801df48:	b93c      	cbnz	r4, 801df5a <_calloc_r+0x18>
 801df4a:	4629      	mov	r1, r5
 801df4c:	f7fb fcb2 	bl	80198b4 <_malloc_r>
 801df50:	4606      	mov	r6, r0
 801df52:	b928      	cbnz	r0, 801df60 <_calloc_r+0x1e>
 801df54:	2600      	movs	r6, #0
 801df56:	4630      	mov	r0, r6
 801df58:	bd70      	pop	{r4, r5, r6, pc}
 801df5a:	220c      	movs	r2, #12
 801df5c:	6002      	str	r2, [r0, #0]
 801df5e:	e7f9      	b.n	801df54 <_calloc_r+0x12>
 801df60:	462a      	mov	r2, r5
 801df62:	4621      	mov	r1, r4
 801df64:	f7fd fbe9 	bl	801b73a <memset>
 801df68:	e7f5      	b.n	801df56 <_calloc_r+0x14>

0801df6a <_realloc_r>:
 801df6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801df6e:	4680      	mov	r8, r0
 801df70:	4615      	mov	r5, r2
 801df72:	460c      	mov	r4, r1
 801df74:	b921      	cbnz	r1, 801df80 <_realloc_r+0x16>
 801df76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801df7a:	4611      	mov	r1, r2
 801df7c:	f7fb bc9a 	b.w	80198b4 <_malloc_r>
 801df80:	b92a      	cbnz	r2, 801df8e <_realloc_r+0x24>
 801df82:	f7fe fb7d 	bl	801c680 <_free_r>
 801df86:	2400      	movs	r4, #0
 801df88:	4620      	mov	r0, r4
 801df8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801df8e:	f000 f8e3 	bl	801e158 <_malloc_usable_size_r>
 801df92:	4285      	cmp	r5, r0
 801df94:	4606      	mov	r6, r0
 801df96:	d802      	bhi.n	801df9e <_realloc_r+0x34>
 801df98:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801df9c:	d8f4      	bhi.n	801df88 <_realloc_r+0x1e>
 801df9e:	4629      	mov	r1, r5
 801dfa0:	4640      	mov	r0, r8
 801dfa2:	f7fb fc87 	bl	80198b4 <_malloc_r>
 801dfa6:	4607      	mov	r7, r0
 801dfa8:	2800      	cmp	r0, #0
 801dfaa:	d0ec      	beq.n	801df86 <_realloc_r+0x1c>
 801dfac:	42b5      	cmp	r5, r6
 801dfae:	462a      	mov	r2, r5
 801dfb0:	4621      	mov	r1, r4
 801dfb2:	bf28      	it	cs
 801dfb4:	4632      	movcs	r2, r6
 801dfb6:	f7fd fcdc 	bl	801b972 <memcpy>
 801dfba:	4621      	mov	r1, r4
 801dfbc:	4640      	mov	r0, r8
 801dfbe:	f7fe fb5f 	bl	801c680 <_free_r>
 801dfc2:	463c      	mov	r4, r7
 801dfc4:	e7e0      	b.n	801df88 <_realloc_r+0x1e>

0801dfc6 <__swhatbuf_r>:
 801dfc6:	b570      	push	{r4, r5, r6, lr}
 801dfc8:	460c      	mov	r4, r1
 801dfca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801dfce:	2900      	cmp	r1, #0
 801dfd0:	b096      	sub	sp, #88	@ 0x58
 801dfd2:	4615      	mov	r5, r2
 801dfd4:	461e      	mov	r6, r3
 801dfd6:	da0d      	bge.n	801dff4 <__swhatbuf_r+0x2e>
 801dfd8:	89a3      	ldrh	r3, [r4, #12]
 801dfda:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801dfde:	f04f 0100 	mov.w	r1, #0
 801dfe2:	bf14      	ite	ne
 801dfe4:	2340      	movne	r3, #64	@ 0x40
 801dfe6:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801dfea:	2000      	movs	r0, #0
 801dfec:	6031      	str	r1, [r6, #0]
 801dfee:	602b      	str	r3, [r5, #0]
 801dff0:	b016      	add	sp, #88	@ 0x58
 801dff2:	bd70      	pop	{r4, r5, r6, pc}
 801dff4:	466a      	mov	r2, sp
 801dff6:	f000 f879 	bl	801e0ec <_fstat_r>
 801dffa:	2800      	cmp	r0, #0
 801dffc:	dbec      	blt.n	801dfd8 <__swhatbuf_r+0x12>
 801dffe:	9901      	ldr	r1, [sp, #4]
 801e000:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801e004:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801e008:	4259      	negs	r1, r3
 801e00a:	4159      	adcs	r1, r3
 801e00c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801e010:	e7eb      	b.n	801dfea <__swhatbuf_r+0x24>

0801e012 <__smakebuf_r>:
 801e012:	898b      	ldrh	r3, [r1, #12]
 801e014:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801e016:	079d      	lsls	r5, r3, #30
 801e018:	4606      	mov	r6, r0
 801e01a:	460c      	mov	r4, r1
 801e01c:	d507      	bpl.n	801e02e <__smakebuf_r+0x1c>
 801e01e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801e022:	6023      	str	r3, [r4, #0]
 801e024:	6123      	str	r3, [r4, #16]
 801e026:	2301      	movs	r3, #1
 801e028:	6163      	str	r3, [r4, #20]
 801e02a:	b003      	add	sp, #12
 801e02c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e02e:	ab01      	add	r3, sp, #4
 801e030:	466a      	mov	r2, sp
 801e032:	f7ff ffc8 	bl	801dfc6 <__swhatbuf_r>
 801e036:	9f00      	ldr	r7, [sp, #0]
 801e038:	4605      	mov	r5, r0
 801e03a:	4639      	mov	r1, r7
 801e03c:	4630      	mov	r0, r6
 801e03e:	f7fb fc39 	bl	80198b4 <_malloc_r>
 801e042:	b948      	cbnz	r0, 801e058 <__smakebuf_r+0x46>
 801e044:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e048:	059a      	lsls	r2, r3, #22
 801e04a:	d4ee      	bmi.n	801e02a <__smakebuf_r+0x18>
 801e04c:	f023 0303 	bic.w	r3, r3, #3
 801e050:	f043 0302 	orr.w	r3, r3, #2
 801e054:	81a3      	strh	r3, [r4, #12]
 801e056:	e7e2      	b.n	801e01e <__smakebuf_r+0xc>
 801e058:	89a3      	ldrh	r3, [r4, #12]
 801e05a:	6020      	str	r0, [r4, #0]
 801e05c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801e060:	81a3      	strh	r3, [r4, #12]
 801e062:	9b01      	ldr	r3, [sp, #4]
 801e064:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801e068:	b15b      	cbz	r3, 801e082 <__smakebuf_r+0x70>
 801e06a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801e06e:	4630      	mov	r0, r6
 801e070:	f000 f84e 	bl	801e110 <_isatty_r>
 801e074:	b128      	cbz	r0, 801e082 <__smakebuf_r+0x70>
 801e076:	89a3      	ldrh	r3, [r4, #12]
 801e078:	f023 0303 	bic.w	r3, r3, #3
 801e07c:	f043 0301 	orr.w	r3, r3, #1
 801e080:	81a3      	strh	r3, [r4, #12]
 801e082:	89a3      	ldrh	r3, [r4, #12]
 801e084:	431d      	orrs	r5, r3
 801e086:	81a5      	strh	r5, [r4, #12]
 801e088:	e7cf      	b.n	801e02a <__smakebuf_r+0x18>

0801e08a <_raise_r>:
 801e08a:	291f      	cmp	r1, #31
 801e08c:	b538      	push	{r3, r4, r5, lr}
 801e08e:	4605      	mov	r5, r0
 801e090:	460c      	mov	r4, r1
 801e092:	d904      	bls.n	801e09e <_raise_r+0x14>
 801e094:	2316      	movs	r3, #22
 801e096:	6003      	str	r3, [r0, #0]
 801e098:	f04f 30ff 	mov.w	r0, #4294967295
 801e09c:	bd38      	pop	{r3, r4, r5, pc}
 801e09e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801e0a0:	b112      	cbz	r2, 801e0a8 <_raise_r+0x1e>
 801e0a2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801e0a6:	b94b      	cbnz	r3, 801e0bc <_raise_r+0x32>
 801e0a8:	4628      	mov	r0, r5
 801e0aa:	f000 f853 	bl	801e154 <_getpid_r>
 801e0ae:	4622      	mov	r2, r4
 801e0b0:	4601      	mov	r1, r0
 801e0b2:	4628      	mov	r0, r5
 801e0b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801e0b8:	f000 b83a 	b.w	801e130 <_kill_r>
 801e0bc:	2b01      	cmp	r3, #1
 801e0be:	d00a      	beq.n	801e0d6 <_raise_r+0x4c>
 801e0c0:	1c59      	adds	r1, r3, #1
 801e0c2:	d103      	bne.n	801e0cc <_raise_r+0x42>
 801e0c4:	2316      	movs	r3, #22
 801e0c6:	6003      	str	r3, [r0, #0]
 801e0c8:	2001      	movs	r0, #1
 801e0ca:	e7e7      	b.n	801e09c <_raise_r+0x12>
 801e0cc:	2100      	movs	r1, #0
 801e0ce:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801e0d2:	4620      	mov	r0, r4
 801e0d4:	4798      	blx	r3
 801e0d6:	2000      	movs	r0, #0
 801e0d8:	e7e0      	b.n	801e09c <_raise_r+0x12>
	...

0801e0dc <raise>:
 801e0dc:	4b02      	ldr	r3, [pc, #8]	@ (801e0e8 <raise+0xc>)
 801e0de:	4601      	mov	r1, r0
 801e0e0:	6818      	ldr	r0, [r3, #0]
 801e0e2:	f7ff bfd2 	b.w	801e08a <_raise_r>
 801e0e6:	bf00      	nop
 801e0e8:	200002c0 	.word	0x200002c0

0801e0ec <_fstat_r>:
 801e0ec:	b538      	push	{r3, r4, r5, lr}
 801e0ee:	4d07      	ldr	r5, [pc, #28]	@ (801e10c <_fstat_r+0x20>)
 801e0f0:	2300      	movs	r3, #0
 801e0f2:	4604      	mov	r4, r0
 801e0f4:	4608      	mov	r0, r1
 801e0f6:	4611      	mov	r1, r2
 801e0f8:	602b      	str	r3, [r5, #0]
 801e0fa:	f7e8 fa39 	bl	8006570 <_fstat>
 801e0fe:	1c43      	adds	r3, r0, #1
 801e100:	d102      	bne.n	801e108 <_fstat_r+0x1c>
 801e102:	682b      	ldr	r3, [r5, #0]
 801e104:	b103      	cbz	r3, 801e108 <_fstat_r+0x1c>
 801e106:	6023      	str	r3, [r4, #0]
 801e108:	bd38      	pop	{r3, r4, r5, pc}
 801e10a:	bf00      	nop
 801e10c:	20003190 	.word	0x20003190

0801e110 <_isatty_r>:
 801e110:	b538      	push	{r3, r4, r5, lr}
 801e112:	4d06      	ldr	r5, [pc, #24]	@ (801e12c <_isatty_r+0x1c>)
 801e114:	2300      	movs	r3, #0
 801e116:	4604      	mov	r4, r0
 801e118:	4608      	mov	r0, r1
 801e11a:	602b      	str	r3, [r5, #0]
 801e11c:	f7e8 fa38 	bl	8006590 <_isatty>
 801e120:	1c43      	adds	r3, r0, #1
 801e122:	d102      	bne.n	801e12a <_isatty_r+0x1a>
 801e124:	682b      	ldr	r3, [r5, #0]
 801e126:	b103      	cbz	r3, 801e12a <_isatty_r+0x1a>
 801e128:	6023      	str	r3, [r4, #0]
 801e12a:	bd38      	pop	{r3, r4, r5, pc}
 801e12c:	20003190 	.word	0x20003190

0801e130 <_kill_r>:
 801e130:	b538      	push	{r3, r4, r5, lr}
 801e132:	4d07      	ldr	r5, [pc, #28]	@ (801e150 <_kill_r+0x20>)
 801e134:	2300      	movs	r3, #0
 801e136:	4604      	mov	r4, r0
 801e138:	4608      	mov	r0, r1
 801e13a:	4611      	mov	r1, r2
 801e13c:	602b      	str	r3, [r5, #0]
 801e13e:	f7e8 f9b7 	bl	80064b0 <_kill>
 801e142:	1c43      	adds	r3, r0, #1
 801e144:	d102      	bne.n	801e14c <_kill_r+0x1c>
 801e146:	682b      	ldr	r3, [r5, #0]
 801e148:	b103      	cbz	r3, 801e14c <_kill_r+0x1c>
 801e14a:	6023      	str	r3, [r4, #0]
 801e14c:	bd38      	pop	{r3, r4, r5, pc}
 801e14e:	bf00      	nop
 801e150:	20003190 	.word	0x20003190

0801e154 <_getpid_r>:
 801e154:	f7e8 b9a4 	b.w	80064a0 <_getpid>

0801e158 <_malloc_usable_size_r>:
 801e158:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801e15c:	1f18      	subs	r0, r3, #4
 801e15e:	2b00      	cmp	r3, #0
 801e160:	bfbc      	itt	lt
 801e162:	580b      	ldrlt	r3, [r1, r0]
 801e164:	18c0      	addlt	r0, r0, r3
 801e166:	4770      	bx	lr

0801e168 <cos>:
 801e168:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801e16a:	ec53 2b10 	vmov	r2, r3, d0
 801e16e:	4826      	ldr	r0, [pc, #152]	@ (801e208 <cos+0xa0>)
 801e170:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 801e174:	4281      	cmp	r1, r0
 801e176:	d806      	bhi.n	801e186 <cos+0x1e>
 801e178:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 801e200 <cos+0x98>
 801e17c:	b005      	add	sp, #20
 801e17e:	f85d eb04 	ldr.w	lr, [sp], #4
 801e182:	f000 b9b1 	b.w	801e4e8 <__kernel_cos>
 801e186:	4821      	ldr	r0, [pc, #132]	@ (801e20c <cos+0xa4>)
 801e188:	4281      	cmp	r1, r0
 801e18a:	d908      	bls.n	801e19e <cos+0x36>
 801e18c:	4610      	mov	r0, r2
 801e18e:	4619      	mov	r1, r3
 801e190:	f7e2 f852 	bl	8000238 <__aeabi_dsub>
 801e194:	ec41 0b10 	vmov	d0, r0, r1
 801e198:	b005      	add	sp, #20
 801e19a:	f85d fb04 	ldr.w	pc, [sp], #4
 801e19e:	4668      	mov	r0, sp
 801e1a0:	f000 fb26 	bl	801e7f0 <__ieee754_rem_pio2>
 801e1a4:	f000 0003 	and.w	r0, r0, #3
 801e1a8:	2801      	cmp	r0, #1
 801e1aa:	d00b      	beq.n	801e1c4 <cos+0x5c>
 801e1ac:	2802      	cmp	r0, #2
 801e1ae:	d015      	beq.n	801e1dc <cos+0x74>
 801e1b0:	b9d8      	cbnz	r0, 801e1ea <cos+0x82>
 801e1b2:	ed9d 1b02 	vldr	d1, [sp, #8]
 801e1b6:	ed9d 0b00 	vldr	d0, [sp]
 801e1ba:	f000 f995 	bl	801e4e8 <__kernel_cos>
 801e1be:	ec51 0b10 	vmov	r0, r1, d0
 801e1c2:	e7e7      	b.n	801e194 <cos+0x2c>
 801e1c4:	ed9d 1b02 	vldr	d1, [sp, #8]
 801e1c8:	ed9d 0b00 	vldr	d0, [sp]
 801e1cc:	f000 fa54 	bl	801e678 <__kernel_sin>
 801e1d0:	ec53 2b10 	vmov	r2, r3, d0
 801e1d4:	4610      	mov	r0, r2
 801e1d6:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 801e1da:	e7db      	b.n	801e194 <cos+0x2c>
 801e1dc:	ed9d 1b02 	vldr	d1, [sp, #8]
 801e1e0:	ed9d 0b00 	vldr	d0, [sp]
 801e1e4:	f000 f980 	bl	801e4e8 <__kernel_cos>
 801e1e8:	e7f2      	b.n	801e1d0 <cos+0x68>
 801e1ea:	ed9d 1b02 	vldr	d1, [sp, #8]
 801e1ee:	ed9d 0b00 	vldr	d0, [sp]
 801e1f2:	2001      	movs	r0, #1
 801e1f4:	f000 fa40 	bl	801e678 <__kernel_sin>
 801e1f8:	e7e1      	b.n	801e1be <cos+0x56>
 801e1fa:	bf00      	nop
 801e1fc:	f3af 8000 	nop.w
	...
 801e208:	3fe921fb 	.word	0x3fe921fb
 801e20c:	7fefffff 	.word	0x7fefffff

0801e210 <sin>:
 801e210:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801e212:	ec53 2b10 	vmov	r2, r3, d0
 801e216:	4826      	ldr	r0, [pc, #152]	@ (801e2b0 <sin+0xa0>)
 801e218:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 801e21c:	4281      	cmp	r1, r0
 801e21e:	d807      	bhi.n	801e230 <sin+0x20>
 801e220:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 801e2a8 <sin+0x98>
 801e224:	2000      	movs	r0, #0
 801e226:	b005      	add	sp, #20
 801e228:	f85d eb04 	ldr.w	lr, [sp], #4
 801e22c:	f000 ba24 	b.w	801e678 <__kernel_sin>
 801e230:	4820      	ldr	r0, [pc, #128]	@ (801e2b4 <sin+0xa4>)
 801e232:	4281      	cmp	r1, r0
 801e234:	d908      	bls.n	801e248 <sin+0x38>
 801e236:	4610      	mov	r0, r2
 801e238:	4619      	mov	r1, r3
 801e23a:	f7e1 fffd 	bl	8000238 <__aeabi_dsub>
 801e23e:	ec41 0b10 	vmov	d0, r0, r1
 801e242:	b005      	add	sp, #20
 801e244:	f85d fb04 	ldr.w	pc, [sp], #4
 801e248:	4668      	mov	r0, sp
 801e24a:	f000 fad1 	bl	801e7f0 <__ieee754_rem_pio2>
 801e24e:	f000 0003 	and.w	r0, r0, #3
 801e252:	2801      	cmp	r0, #1
 801e254:	d00c      	beq.n	801e270 <sin+0x60>
 801e256:	2802      	cmp	r0, #2
 801e258:	d011      	beq.n	801e27e <sin+0x6e>
 801e25a:	b9e8      	cbnz	r0, 801e298 <sin+0x88>
 801e25c:	ed9d 1b02 	vldr	d1, [sp, #8]
 801e260:	ed9d 0b00 	vldr	d0, [sp]
 801e264:	2001      	movs	r0, #1
 801e266:	f000 fa07 	bl	801e678 <__kernel_sin>
 801e26a:	ec51 0b10 	vmov	r0, r1, d0
 801e26e:	e7e6      	b.n	801e23e <sin+0x2e>
 801e270:	ed9d 1b02 	vldr	d1, [sp, #8]
 801e274:	ed9d 0b00 	vldr	d0, [sp]
 801e278:	f000 f936 	bl	801e4e8 <__kernel_cos>
 801e27c:	e7f5      	b.n	801e26a <sin+0x5a>
 801e27e:	ed9d 1b02 	vldr	d1, [sp, #8]
 801e282:	ed9d 0b00 	vldr	d0, [sp]
 801e286:	2001      	movs	r0, #1
 801e288:	f000 f9f6 	bl	801e678 <__kernel_sin>
 801e28c:	ec53 2b10 	vmov	r2, r3, d0
 801e290:	4610      	mov	r0, r2
 801e292:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 801e296:	e7d2      	b.n	801e23e <sin+0x2e>
 801e298:	ed9d 1b02 	vldr	d1, [sp, #8]
 801e29c:	ed9d 0b00 	vldr	d0, [sp]
 801e2a0:	f000 f922 	bl	801e4e8 <__kernel_cos>
 801e2a4:	e7f2      	b.n	801e28c <sin+0x7c>
 801e2a6:	bf00      	nop
	...
 801e2b0:	3fe921fb 	.word	0x3fe921fb
 801e2b4:	7fefffff 	.word	0x7fefffff

0801e2b8 <expf>:
 801e2b8:	b508      	push	{r3, lr}
 801e2ba:	ed2d 8b02 	vpush	{d8}
 801e2be:	eef0 8a40 	vmov.f32	s17, s0
 801e2c2:	f000 fccd 	bl	801ec60 <__ieee754_expf>
 801e2c6:	eeb0 8a40 	vmov.f32	s16, s0
 801e2ca:	eeb0 0a68 	vmov.f32	s0, s17
 801e2ce:	f000 f87d 	bl	801e3cc <finitef>
 801e2d2:	b160      	cbz	r0, 801e2ee <expf+0x36>
 801e2d4:	eddf 7a0f 	vldr	s15, [pc, #60]	@ 801e314 <expf+0x5c>
 801e2d8:	eef4 8ae7 	vcmpe.f32	s17, s15
 801e2dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e2e0:	dd0a      	ble.n	801e2f8 <expf+0x40>
 801e2e2:	f7fd fb11 	bl	801b908 <__errno>
 801e2e6:	ed9f 8a0c 	vldr	s16, [pc, #48]	@ 801e318 <expf+0x60>
 801e2ea:	2322      	movs	r3, #34	@ 0x22
 801e2ec:	6003      	str	r3, [r0, #0]
 801e2ee:	eeb0 0a48 	vmov.f32	s0, s16
 801e2f2:	ecbd 8b02 	vpop	{d8}
 801e2f6:	bd08      	pop	{r3, pc}
 801e2f8:	eddf 7a08 	vldr	s15, [pc, #32]	@ 801e31c <expf+0x64>
 801e2fc:	eef4 8ae7 	vcmpe.f32	s17, s15
 801e300:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e304:	d5f3      	bpl.n	801e2ee <expf+0x36>
 801e306:	f7fd faff 	bl	801b908 <__errno>
 801e30a:	2322      	movs	r3, #34	@ 0x22
 801e30c:	ed9f 8a04 	vldr	s16, [pc, #16]	@ 801e320 <expf+0x68>
 801e310:	6003      	str	r3, [r0, #0]
 801e312:	e7ec      	b.n	801e2ee <expf+0x36>
 801e314:	42b17217 	.word	0x42b17217
 801e318:	7f800000 	.word	0x7f800000
 801e31c:	c2cff1b5 	.word	0xc2cff1b5
 801e320:	00000000 	.word	0x00000000

0801e324 <fmin>:
 801e324:	b508      	push	{r3, lr}
 801e326:	ed2d 8b04 	vpush	{d8-d9}
 801e32a:	eeb0 8a40 	vmov.f32	s16, s0
 801e32e:	eef0 8a60 	vmov.f32	s17, s1
 801e332:	eeb0 9a41 	vmov.f32	s18, s2
 801e336:	eef0 9a61 	vmov.f32	s19, s3
 801e33a:	f000 f81d 	bl	801e378 <__fpclassifyd>
 801e33e:	b950      	cbnz	r0, 801e356 <fmin+0x32>
 801e340:	eeb0 8a49 	vmov.f32	s16, s18
 801e344:	eef0 8a69 	vmov.f32	s17, s19
 801e348:	eeb0 0a48 	vmov.f32	s0, s16
 801e34c:	eef0 0a68 	vmov.f32	s1, s17
 801e350:	ecbd 8b04 	vpop	{d8-d9}
 801e354:	bd08      	pop	{r3, pc}
 801e356:	eeb0 0a49 	vmov.f32	s0, s18
 801e35a:	eef0 0a69 	vmov.f32	s1, s19
 801e35e:	f000 f80b 	bl	801e378 <__fpclassifyd>
 801e362:	2800      	cmp	r0, #0
 801e364:	d0f0      	beq.n	801e348 <fmin+0x24>
 801e366:	ec53 2b19 	vmov	r2, r3, d9
 801e36a:	ec51 0b18 	vmov	r0, r1, d8
 801e36e:	f7e2 fb8d 	bl	8000a8c <__aeabi_dcmplt>
 801e372:	2800      	cmp	r0, #0
 801e374:	d0e4      	beq.n	801e340 <fmin+0x1c>
 801e376:	e7e7      	b.n	801e348 <fmin+0x24>

0801e378 <__fpclassifyd>:
 801e378:	ec51 0b10 	vmov	r0, r1, d0
 801e37c:	b510      	push	{r4, lr}
 801e37e:	f031 4400 	bics.w	r4, r1, #2147483648	@ 0x80000000
 801e382:	460b      	mov	r3, r1
 801e384:	d019      	beq.n	801e3ba <__fpclassifyd+0x42>
 801e386:	f5a1 1280 	sub.w	r2, r1, #1048576	@ 0x100000
 801e38a:	490e      	ldr	r1, [pc, #56]	@ (801e3c4 <__fpclassifyd+0x4c>)
 801e38c:	428a      	cmp	r2, r1
 801e38e:	d90e      	bls.n	801e3ae <__fpclassifyd+0x36>
 801e390:	f103 42ff 	add.w	r2, r3, #2139095040	@ 0x7f800000
 801e394:	f502 02e0 	add.w	r2, r2, #7340032	@ 0x700000
 801e398:	428a      	cmp	r2, r1
 801e39a:	d908      	bls.n	801e3ae <__fpclassifyd+0x36>
 801e39c:	4a0a      	ldr	r2, [pc, #40]	@ (801e3c8 <__fpclassifyd+0x50>)
 801e39e:	4213      	tst	r3, r2
 801e3a0:	d007      	beq.n	801e3b2 <__fpclassifyd+0x3a>
 801e3a2:	4294      	cmp	r4, r2
 801e3a4:	d107      	bne.n	801e3b6 <__fpclassifyd+0x3e>
 801e3a6:	fab0 f080 	clz	r0, r0
 801e3aa:	0940      	lsrs	r0, r0, #5
 801e3ac:	bd10      	pop	{r4, pc}
 801e3ae:	2004      	movs	r0, #4
 801e3b0:	e7fc      	b.n	801e3ac <__fpclassifyd+0x34>
 801e3b2:	2003      	movs	r0, #3
 801e3b4:	e7fa      	b.n	801e3ac <__fpclassifyd+0x34>
 801e3b6:	2000      	movs	r0, #0
 801e3b8:	e7f8      	b.n	801e3ac <__fpclassifyd+0x34>
 801e3ba:	2800      	cmp	r0, #0
 801e3bc:	d1ee      	bne.n	801e39c <__fpclassifyd+0x24>
 801e3be:	2002      	movs	r0, #2
 801e3c0:	e7f4      	b.n	801e3ac <__fpclassifyd+0x34>
 801e3c2:	bf00      	nop
 801e3c4:	7fdfffff 	.word	0x7fdfffff
 801e3c8:	7ff00000 	.word	0x7ff00000

0801e3cc <finitef>:
 801e3cc:	ee10 3a10 	vmov	r3, s0
 801e3d0:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 801e3d4:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 801e3d8:	bfac      	ite	ge
 801e3da:	2000      	movge	r0, #0
 801e3dc:	2001      	movlt	r0, #1
 801e3de:	4770      	bx	lr

0801e3e0 <cosl>:
 801e3e0:	f7ff bec2 	b.w	801e168 <cos>

0801e3e4 <sinl>:
 801e3e4:	f7ff bf14 	b.w	801e210 <sin>

0801e3e8 <acosl>:
 801e3e8:	f000 bbfe 	b.w	801ebe8 <acos>
 801e3ec:	0000      	movs	r0, r0
	...

0801e3f0 <floor>:
 801e3f0:	ec51 0b10 	vmov	r0, r1, d0
 801e3f4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801e3f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e3fc:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 801e400:	2e13      	cmp	r6, #19
 801e402:	460c      	mov	r4, r1
 801e404:	4605      	mov	r5, r0
 801e406:	4680      	mov	r8, r0
 801e408:	dc34      	bgt.n	801e474 <floor+0x84>
 801e40a:	2e00      	cmp	r6, #0
 801e40c:	da17      	bge.n	801e43e <floor+0x4e>
 801e40e:	a332      	add	r3, pc, #200	@ (adr r3, 801e4d8 <floor+0xe8>)
 801e410:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e414:	f7e1 ff12 	bl	800023c <__adddf3>
 801e418:	2200      	movs	r2, #0
 801e41a:	2300      	movs	r3, #0
 801e41c:	f7e2 fb54 	bl	8000ac8 <__aeabi_dcmpgt>
 801e420:	b150      	cbz	r0, 801e438 <floor+0x48>
 801e422:	2c00      	cmp	r4, #0
 801e424:	da55      	bge.n	801e4d2 <floor+0xe2>
 801e426:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 801e42a:	432c      	orrs	r4, r5
 801e42c:	2500      	movs	r5, #0
 801e42e:	42ac      	cmp	r4, r5
 801e430:	4c2b      	ldr	r4, [pc, #172]	@ (801e4e0 <floor+0xf0>)
 801e432:	bf08      	it	eq
 801e434:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 801e438:	4621      	mov	r1, r4
 801e43a:	4628      	mov	r0, r5
 801e43c:	e023      	b.n	801e486 <floor+0x96>
 801e43e:	4f29      	ldr	r7, [pc, #164]	@ (801e4e4 <floor+0xf4>)
 801e440:	4137      	asrs	r7, r6
 801e442:	ea01 0307 	and.w	r3, r1, r7
 801e446:	4303      	orrs	r3, r0
 801e448:	d01d      	beq.n	801e486 <floor+0x96>
 801e44a:	a323      	add	r3, pc, #140	@ (adr r3, 801e4d8 <floor+0xe8>)
 801e44c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e450:	f7e1 fef4 	bl	800023c <__adddf3>
 801e454:	2200      	movs	r2, #0
 801e456:	2300      	movs	r3, #0
 801e458:	f7e2 fb36 	bl	8000ac8 <__aeabi_dcmpgt>
 801e45c:	2800      	cmp	r0, #0
 801e45e:	d0eb      	beq.n	801e438 <floor+0x48>
 801e460:	2c00      	cmp	r4, #0
 801e462:	bfbe      	ittt	lt
 801e464:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 801e468:	4133      	asrlt	r3, r6
 801e46a:	18e4      	addlt	r4, r4, r3
 801e46c:	ea24 0407 	bic.w	r4, r4, r7
 801e470:	2500      	movs	r5, #0
 801e472:	e7e1      	b.n	801e438 <floor+0x48>
 801e474:	2e33      	cmp	r6, #51	@ 0x33
 801e476:	dd0a      	ble.n	801e48e <floor+0x9e>
 801e478:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 801e47c:	d103      	bne.n	801e486 <floor+0x96>
 801e47e:	4602      	mov	r2, r0
 801e480:	460b      	mov	r3, r1
 801e482:	f7e1 fedb 	bl	800023c <__adddf3>
 801e486:	ec41 0b10 	vmov	d0, r0, r1
 801e48a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e48e:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 801e492:	f04f 37ff 	mov.w	r7, #4294967295
 801e496:	40df      	lsrs	r7, r3
 801e498:	4207      	tst	r7, r0
 801e49a:	d0f4      	beq.n	801e486 <floor+0x96>
 801e49c:	a30e      	add	r3, pc, #56	@ (adr r3, 801e4d8 <floor+0xe8>)
 801e49e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e4a2:	f7e1 fecb 	bl	800023c <__adddf3>
 801e4a6:	2200      	movs	r2, #0
 801e4a8:	2300      	movs	r3, #0
 801e4aa:	f7e2 fb0d 	bl	8000ac8 <__aeabi_dcmpgt>
 801e4ae:	2800      	cmp	r0, #0
 801e4b0:	d0c2      	beq.n	801e438 <floor+0x48>
 801e4b2:	2c00      	cmp	r4, #0
 801e4b4:	da0a      	bge.n	801e4cc <floor+0xdc>
 801e4b6:	2e14      	cmp	r6, #20
 801e4b8:	d101      	bne.n	801e4be <floor+0xce>
 801e4ba:	3401      	adds	r4, #1
 801e4bc:	e006      	b.n	801e4cc <floor+0xdc>
 801e4be:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 801e4c2:	2301      	movs	r3, #1
 801e4c4:	40b3      	lsls	r3, r6
 801e4c6:	441d      	add	r5, r3
 801e4c8:	4545      	cmp	r5, r8
 801e4ca:	d3f6      	bcc.n	801e4ba <floor+0xca>
 801e4cc:	ea25 0507 	bic.w	r5, r5, r7
 801e4d0:	e7b2      	b.n	801e438 <floor+0x48>
 801e4d2:	2500      	movs	r5, #0
 801e4d4:	462c      	mov	r4, r5
 801e4d6:	e7af      	b.n	801e438 <floor+0x48>
 801e4d8:	8800759c 	.word	0x8800759c
 801e4dc:	7e37e43c 	.word	0x7e37e43c
 801e4e0:	bff00000 	.word	0xbff00000
 801e4e4:	000fffff 	.word	0x000fffff

0801e4e8 <__kernel_cos>:
 801e4e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e4ec:	ec57 6b10 	vmov	r6, r7, d0
 801e4f0:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 801e4f4:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 801e4f8:	ed8d 1b00 	vstr	d1, [sp]
 801e4fc:	d206      	bcs.n	801e50c <__kernel_cos+0x24>
 801e4fe:	4630      	mov	r0, r6
 801e500:	4639      	mov	r1, r7
 801e502:	f7e2 fb01 	bl	8000b08 <__aeabi_d2iz>
 801e506:	2800      	cmp	r0, #0
 801e508:	f000 8088 	beq.w	801e61c <__kernel_cos+0x134>
 801e50c:	4632      	mov	r2, r6
 801e50e:	463b      	mov	r3, r7
 801e510:	4630      	mov	r0, r6
 801e512:	4639      	mov	r1, r7
 801e514:	f7e2 f848 	bl	80005a8 <__aeabi_dmul>
 801e518:	4b51      	ldr	r3, [pc, #324]	@ (801e660 <__kernel_cos+0x178>)
 801e51a:	2200      	movs	r2, #0
 801e51c:	4604      	mov	r4, r0
 801e51e:	460d      	mov	r5, r1
 801e520:	f7e2 f842 	bl	80005a8 <__aeabi_dmul>
 801e524:	a340      	add	r3, pc, #256	@ (adr r3, 801e628 <__kernel_cos+0x140>)
 801e526:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e52a:	4682      	mov	sl, r0
 801e52c:	468b      	mov	fp, r1
 801e52e:	4620      	mov	r0, r4
 801e530:	4629      	mov	r1, r5
 801e532:	f7e2 f839 	bl	80005a8 <__aeabi_dmul>
 801e536:	a33e      	add	r3, pc, #248	@ (adr r3, 801e630 <__kernel_cos+0x148>)
 801e538:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e53c:	f7e1 fe7e 	bl	800023c <__adddf3>
 801e540:	4622      	mov	r2, r4
 801e542:	462b      	mov	r3, r5
 801e544:	f7e2 f830 	bl	80005a8 <__aeabi_dmul>
 801e548:	a33b      	add	r3, pc, #236	@ (adr r3, 801e638 <__kernel_cos+0x150>)
 801e54a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e54e:	f7e1 fe73 	bl	8000238 <__aeabi_dsub>
 801e552:	4622      	mov	r2, r4
 801e554:	462b      	mov	r3, r5
 801e556:	f7e2 f827 	bl	80005a8 <__aeabi_dmul>
 801e55a:	a339      	add	r3, pc, #228	@ (adr r3, 801e640 <__kernel_cos+0x158>)
 801e55c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e560:	f7e1 fe6c 	bl	800023c <__adddf3>
 801e564:	4622      	mov	r2, r4
 801e566:	462b      	mov	r3, r5
 801e568:	f7e2 f81e 	bl	80005a8 <__aeabi_dmul>
 801e56c:	a336      	add	r3, pc, #216	@ (adr r3, 801e648 <__kernel_cos+0x160>)
 801e56e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e572:	f7e1 fe61 	bl	8000238 <__aeabi_dsub>
 801e576:	4622      	mov	r2, r4
 801e578:	462b      	mov	r3, r5
 801e57a:	f7e2 f815 	bl	80005a8 <__aeabi_dmul>
 801e57e:	a334      	add	r3, pc, #208	@ (adr r3, 801e650 <__kernel_cos+0x168>)
 801e580:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e584:	f7e1 fe5a 	bl	800023c <__adddf3>
 801e588:	4622      	mov	r2, r4
 801e58a:	462b      	mov	r3, r5
 801e58c:	f7e2 f80c 	bl	80005a8 <__aeabi_dmul>
 801e590:	4622      	mov	r2, r4
 801e592:	462b      	mov	r3, r5
 801e594:	f7e2 f808 	bl	80005a8 <__aeabi_dmul>
 801e598:	e9dd 2300 	ldrd	r2, r3, [sp]
 801e59c:	4604      	mov	r4, r0
 801e59e:	460d      	mov	r5, r1
 801e5a0:	4630      	mov	r0, r6
 801e5a2:	4639      	mov	r1, r7
 801e5a4:	f7e2 f800 	bl	80005a8 <__aeabi_dmul>
 801e5a8:	460b      	mov	r3, r1
 801e5aa:	4602      	mov	r2, r0
 801e5ac:	4629      	mov	r1, r5
 801e5ae:	4620      	mov	r0, r4
 801e5b0:	f7e1 fe42 	bl	8000238 <__aeabi_dsub>
 801e5b4:	4b2b      	ldr	r3, [pc, #172]	@ (801e664 <__kernel_cos+0x17c>)
 801e5b6:	4598      	cmp	r8, r3
 801e5b8:	4606      	mov	r6, r0
 801e5ba:	460f      	mov	r7, r1
 801e5bc:	d810      	bhi.n	801e5e0 <__kernel_cos+0xf8>
 801e5be:	4602      	mov	r2, r0
 801e5c0:	460b      	mov	r3, r1
 801e5c2:	4650      	mov	r0, sl
 801e5c4:	4659      	mov	r1, fp
 801e5c6:	f7e1 fe37 	bl	8000238 <__aeabi_dsub>
 801e5ca:	460b      	mov	r3, r1
 801e5cc:	4926      	ldr	r1, [pc, #152]	@ (801e668 <__kernel_cos+0x180>)
 801e5ce:	4602      	mov	r2, r0
 801e5d0:	2000      	movs	r0, #0
 801e5d2:	f7e1 fe31 	bl	8000238 <__aeabi_dsub>
 801e5d6:	ec41 0b10 	vmov	d0, r0, r1
 801e5da:	b003      	add	sp, #12
 801e5dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e5e0:	4b22      	ldr	r3, [pc, #136]	@ (801e66c <__kernel_cos+0x184>)
 801e5e2:	4921      	ldr	r1, [pc, #132]	@ (801e668 <__kernel_cos+0x180>)
 801e5e4:	4598      	cmp	r8, r3
 801e5e6:	bf8c      	ite	hi
 801e5e8:	4d21      	ldrhi	r5, [pc, #132]	@ (801e670 <__kernel_cos+0x188>)
 801e5ea:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 801e5ee:	2400      	movs	r4, #0
 801e5f0:	4622      	mov	r2, r4
 801e5f2:	462b      	mov	r3, r5
 801e5f4:	2000      	movs	r0, #0
 801e5f6:	f7e1 fe1f 	bl	8000238 <__aeabi_dsub>
 801e5fa:	4622      	mov	r2, r4
 801e5fc:	4680      	mov	r8, r0
 801e5fe:	4689      	mov	r9, r1
 801e600:	462b      	mov	r3, r5
 801e602:	4650      	mov	r0, sl
 801e604:	4659      	mov	r1, fp
 801e606:	f7e1 fe17 	bl	8000238 <__aeabi_dsub>
 801e60a:	4632      	mov	r2, r6
 801e60c:	463b      	mov	r3, r7
 801e60e:	f7e1 fe13 	bl	8000238 <__aeabi_dsub>
 801e612:	4602      	mov	r2, r0
 801e614:	460b      	mov	r3, r1
 801e616:	4640      	mov	r0, r8
 801e618:	4649      	mov	r1, r9
 801e61a:	e7da      	b.n	801e5d2 <__kernel_cos+0xea>
 801e61c:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 801e658 <__kernel_cos+0x170>
 801e620:	e7db      	b.n	801e5da <__kernel_cos+0xf2>
 801e622:	bf00      	nop
 801e624:	f3af 8000 	nop.w
 801e628:	be8838d4 	.word	0xbe8838d4
 801e62c:	bda8fae9 	.word	0xbda8fae9
 801e630:	bdb4b1c4 	.word	0xbdb4b1c4
 801e634:	3e21ee9e 	.word	0x3e21ee9e
 801e638:	809c52ad 	.word	0x809c52ad
 801e63c:	3e927e4f 	.word	0x3e927e4f
 801e640:	19cb1590 	.word	0x19cb1590
 801e644:	3efa01a0 	.word	0x3efa01a0
 801e648:	16c15177 	.word	0x16c15177
 801e64c:	3f56c16c 	.word	0x3f56c16c
 801e650:	5555554c 	.word	0x5555554c
 801e654:	3fa55555 	.word	0x3fa55555
 801e658:	00000000 	.word	0x00000000
 801e65c:	3ff00000 	.word	0x3ff00000
 801e660:	3fe00000 	.word	0x3fe00000
 801e664:	3fd33332 	.word	0x3fd33332
 801e668:	3ff00000 	.word	0x3ff00000
 801e66c:	3fe90000 	.word	0x3fe90000
 801e670:	3fd20000 	.word	0x3fd20000
 801e674:	00000000 	.word	0x00000000

0801e678 <__kernel_sin>:
 801e678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e67c:	ec55 4b10 	vmov	r4, r5, d0
 801e680:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 801e684:	b085      	sub	sp, #20
 801e686:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 801e68a:	ed8d 1b02 	vstr	d1, [sp, #8]
 801e68e:	4680      	mov	r8, r0
 801e690:	d205      	bcs.n	801e69e <__kernel_sin+0x26>
 801e692:	4620      	mov	r0, r4
 801e694:	4629      	mov	r1, r5
 801e696:	f7e2 fa37 	bl	8000b08 <__aeabi_d2iz>
 801e69a:	2800      	cmp	r0, #0
 801e69c:	d052      	beq.n	801e744 <__kernel_sin+0xcc>
 801e69e:	4622      	mov	r2, r4
 801e6a0:	462b      	mov	r3, r5
 801e6a2:	4620      	mov	r0, r4
 801e6a4:	4629      	mov	r1, r5
 801e6a6:	f7e1 ff7f 	bl	80005a8 <__aeabi_dmul>
 801e6aa:	4682      	mov	sl, r0
 801e6ac:	468b      	mov	fp, r1
 801e6ae:	4602      	mov	r2, r0
 801e6b0:	460b      	mov	r3, r1
 801e6b2:	4620      	mov	r0, r4
 801e6b4:	4629      	mov	r1, r5
 801e6b6:	f7e1 ff77 	bl	80005a8 <__aeabi_dmul>
 801e6ba:	a342      	add	r3, pc, #264	@ (adr r3, 801e7c4 <__kernel_sin+0x14c>)
 801e6bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e6c0:	e9cd 0100 	strd	r0, r1, [sp]
 801e6c4:	4650      	mov	r0, sl
 801e6c6:	4659      	mov	r1, fp
 801e6c8:	f7e1 ff6e 	bl	80005a8 <__aeabi_dmul>
 801e6cc:	a33f      	add	r3, pc, #252	@ (adr r3, 801e7cc <__kernel_sin+0x154>)
 801e6ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e6d2:	f7e1 fdb1 	bl	8000238 <__aeabi_dsub>
 801e6d6:	4652      	mov	r2, sl
 801e6d8:	465b      	mov	r3, fp
 801e6da:	f7e1 ff65 	bl	80005a8 <__aeabi_dmul>
 801e6de:	a33d      	add	r3, pc, #244	@ (adr r3, 801e7d4 <__kernel_sin+0x15c>)
 801e6e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e6e4:	f7e1 fdaa 	bl	800023c <__adddf3>
 801e6e8:	4652      	mov	r2, sl
 801e6ea:	465b      	mov	r3, fp
 801e6ec:	f7e1 ff5c 	bl	80005a8 <__aeabi_dmul>
 801e6f0:	a33a      	add	r3, pc, #232	@ (adr r3, 801e7dc <__kernel_sin+0x164>)
 801e6f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e6f6:	f7e1 fd9f 	bl	8000238 <__aeabi_dsub>
 801e6fa:	4652      	mov	r2, sl
 801e6fc:	465b      	mov	r3, fp
 801e6fe:	f7e1 ff53 	bl	80005a8 <__aeabi_dmul>
 801e702:	a338      	add	r3, pc, #224	@ (adr r3, 801e7e4 <__kernel_sin+0x16c>)
 801e704:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e708:	f7e1 fd98 	bl	800023c <__adddf3>
 801e70c:	4606      	mov	r6, r0
 801e70e:	460f      	mov	r7, r1
 801e710:	f1b8 0f00 	cmp.w	r8, #0
 801e714:	d11b      	bne.n	801e74e <__kernel_sin+0xd6>
 801e716:	4602      	mov	r2, r0
 801e718:	460b      	mov	r3, r1
 801e71a:	4650      	mov	r0, sl
 801e71c:	4659      	mov	r1, fp
 801e71e:	f7e1 ff43 	bl	80005a8 <__aeabi_dmul>
 801e722:	a325      	add	r3, pc, #148	@ (adr r3, 801e7b8 <__kernel_sin+0x140>)
 801e724:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e728:	f7e1 fd86 	bl	8000238 <__aeabi_dsub>
 801e72c:	e9dd 2300 	ldrd	r2, r3, [sp]
 801e730:	f7e1 ff3a 	bl	80005a8 <__aeabi_dmul>
 801e734:	4602      	mov	r2, r0
 801e736:	460b      	mov	r3, r1
 801e738:	4620      	mov	r0, r4
 801e73a:	4629      	mov	r1, r5
 801e73c:	f7e1 fd7e 	bl	800023c <__adddf3>
 801e740:	4604      	mov	r4, r0
 801e742:	460d      	mov	r5, r1
 801e744:	ec45 4b10 	vmov	d0, r4, r5
 801e748:	b005      	add	sp, #20
 801e74a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e74e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801e752:	4b1b      	ldr	r3, [pc, #108]	@ (801e7c0 <__kernel_sin+0x148>)
 801e754:	2200      	movs	r2, #0
 801e756:	f7e1 ff27 	bl	80005a8 <__aeabi_dmul>
 801e75a:	4632      	mov	r2, r6
 801e75c:	4680      	mov	r8, r0
 801e75e:	4689      	mov	r9, r1
 801e760:	463b      	mov	r3, r7
 801e762:	e9dd 0100 	ldrd	r0, r1, [sp]
 801e766:	f7e1 ff1f 	bl	80005a8 <__aeabi_dmul>
 801e76a:	4602      	mov	r2, r0
 801e76c:	460b      	mov	r3, r1
 801e76e:	4640      	mov	r0, r8
 801e770:	4649      	mov	r1, r9
 801e772:	f7e1 fd61 	bl	8000238 <__aeabi_dsub>
 801e776:	4652      	mov	r2, sl
 801e778:	465b      	mov	r3, fp
 801e77a:	f7e1 ff15 	bl	80005a8 <__aeabi_dmul>
 801e77e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801e782:	f7e1 fd59 	bl	8000238 <__aeabi_dsub>
 801e786:	a30c      	add	r3, pc, #48	@ (adr r3, 801e7b8 <__kernel_sin+0x140>)
 801e788:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e78c:	4606      	mov	r6, r0
 801e78e:	460f      	mov	r7, r1
 801e790:	e9dd 0100 	ldrd	r0, r1, [sp]
 801e794:	f7e1 ff08 	bl	80005a8 <__aeabi_dmul>
 801e798:	4602      	mov	r2, r0
 801e79a:	460b      	mov	r3, r1
 801e79c:	4630      	mov	r0, r6
 801e79e:	4639      	mov	r1, r7
 801e7a0:	f7e1 fd4c 	bl	800023c <__adddf3>
 801e7a4:	4602      	mov	r2, r0
 801e7a6:	460b      	mov	r3, r1
 801e7a8:	4620      	mov	r0, r4
 801e7aa:	4629      	mov	r1, r5
 801e7ac:	f7e1 fd44 	bl	8000238 <__aeabi_dsub>
 801e7b0:	e7c6      	b.n	801e740 <__kernel_sin+0xc8>
 801e7b2:	bf00      	nop
 801e7b4:	f3af 8000 	nop.w
 801e7b8:	55555549 	.word	0x55555549
 801e7bc:	3fc55555 	.word	0x3fc55555
 801e7c0:	3fe00000 	.word	0x3fe00000
 801e7c4:	5acfd57c 	.word	0x5acfd57c
 801e7c8:	3de5d93a 	.word	0x3de5d93a
 801e7cc:	8a2b9ceb 	.word	0x8a2b9ceb
 801e7d0:	3e5ae5e6 	.word	0x3e5ae5e6
 801e7d4:	57b1fe7d 	.word	0x57b1fe7d
 801e7d8:	3ec71de3 	.word	0x3ec71de3
 801e7dc:	19c161d5 	.word	0x19c161d5
 801e7e0:	3f2a01a0 	.word	0x3f2a01a0
 801e7e4:	1110f8a6 	.word	0x1110f8a6
 801e7e8:	3f811111 	.word	0x3f811111
 801e7ec:	00000000 	.word	0x00000000

0801e7f0 <__ieee754_rem_pio2>:
 801e7f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e7f4:	ec57 6b10 	vmov	r6, r7, d0
 801e7f8:	4bc5      	ldr	r3, [pc, #788]	@ (801eb10 <__ieee754_rem_pio2+0x320>)
 801e7fa:	b08d      	sub	sp, #52	@ 0x34
 801e7fc:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 801e800:	4598      	cmp	r8, r3
 801e802:	4604      	mov	r4, r0
 801e804:	9704      	str	r7, [sp, #16]
 801e806:	d807      	bhi.n	801e818 <__ieee754_rem_pio2+0x28>
 801e808:	2200      	movs	r2, #0
 801e80a:	2300      	movs	r3, #0
 801e80c:	ed80 0b00 	vstr	d0, [r0]
 801e810:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801e814:	2500      	movs	r5, #0
 801e816:	e028      	b.n	801e86a <__ieee754_rem_pio2+0x7a>
 801e818:	4bbe      	ldr	r3, [pc, #760]	@ (801eb14 <__ieee754_rem_pio2+0x324>)
 801e81a:	4598      	cmp	r8, r3
 801e81c:	d878      	bhi.n	801e910 <__ieee754_rem_pio2+0x120>
 801e81e:	9b04      	ldr	r3, [sp, #16]
 801e820:	4dbd      	ldr	r5, [pc, #756]	@ (801eb18 <__ieee754_rem_pio2+0x328>)
 801e822:	2b00      	cmp	r3, #0
 801e824:	4630      	mov	r0, r6
 801e826:	a3ac      	add	r3, pc, #688	@ (adr r3, 801ead8 <__ieee754_rem_pio2+0x2e8>)
 801e828:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e82c:	4639      	mov	r1, r7
 801e82e:	dd38      	ble.n	801e8a2 <__ieee754_rem_pio2+0xb2>
 801e830:	f7e1 fd02 	bl	8000238 <__aeabi_dsub>
 801e834:	45a8      	cmp	r8, r5
 801e836:	4606      	mov	r6, r0
 801e838:	460f      	mov	r7, r1
 801e83a:	d01a      	beq.n	801e872 <__ieee754_rem_pio2+0x82>
 801e83c:	a3a8      	add	r3, pc, #672	@ (adr r3, 801eae0 <__ieee754_rem_pio2+0x2f0>)
 801e83e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e842:	f7e1 fcf9 	bl	8000238 <__aeabi_dsub>
 801e846:	4602      	mov	r2, r0
 801e848:	460b      	mov	r3, r1
 801e84a:	4680      	mov	r8, r0
 801e84c:	4689      	mov	r9, r1
 801e84e:	4630      	mov	r0, r6
 801e850:	4639      	mov	r1, r7
 801e852:	f7e1 fcf1 	bl	8000238 <__aeabi_dsub>
 801e856:	a3a2      	add	r3, pc, #648	@ (adr r3, 801eae0 <__ieee754_rem_pio2+0x2f0>)
 801e858:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e85c:	f7e1 fcec 	bl	8000238 <__aeabi_dsub>
 801e860:	e9c4 8900 	strd	r8, r9, [r4]
 801e864:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801e868:	2501      	movs	r5, #1
 801e86a:	4628      	mov	r0, r5
 801e86c:	b00d      	add	sp, #52	@ 0x34
 801e86e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e872:	a39d      	add	r3, pc, #628	@ (adr r3, 801eae8 <__ieee754_rem_pio2+0x2f8>)
 801e874:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e878:	f7e1 fcde 	bl	8000238 <__aeabi_dsub>
 801e87c:	a39c      	add	r3, pc, #624	@ (adr r3, 801eaf0 <__ieee754_rem_pio2+0x300>)
 801e87e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e882:	4606      	mov	r6, r0
 801e884:	460f      	mov	r7, r1
 801e886:	f7e1 fcd7 	bl	8000238 <__aeabi_dsub>
 801e88a:	4602      	mov	r2, r0
 801e88c:	460b      	mov	r3, r1
 801e88e:	4680      	mov	r8, r0
 801e890:	4689      	mov	r9, r1
 801e892:	4630      	mov	r0, r6
 801e894:	4639      	mov	r1, r7
 801e896:	f7e1 fccf 	bl	8000238 <__aeabi_dsub>
 801e89a:	a395      	add	r3, pc, #596	@ (adr r3, 801eaf0 <__ieee754_rem_pio2+0x300>)
 801e89c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e8a0:	e7dc      	b.n	801e85c <__ieee754_rem_pio2+0x6c>
 801e8a2:	f7e1 fccb 	bl	800023c <__adddf3>
 801e8a6:	45a8      	cmp	r8, r5
 801e8a8:	4606      	mov	r6, r0
 801e8aa:	460f      	mov	r7, r1
 801e8ac:	d018      	beq.n	801e8e0 <__ieee754_rem_pio2+0xf0>
 801e8ae:	a38c      	add	r3, pc, #560	@ (adr r3, 801eae0 <__ieee754_rem_pio2+0x2f0>)
 801e8b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e8b4:	f7e1 fcc2 	bl	800023c <__adddf3>
 801e8b8:	4602      	mov	r2, r0
 801e8ba:	460b      	mov	r3, r1
 801e8bc:	4680      	mov	r8, r0
 801e8be:	4689      	mov	r9, r1
 801e8c0:	4630      	mov	r0, r6
 801e8c2:	4639      	mov	r1, r7
 801e8c4:	f7e1 fcb8 	bl	8000238 <__aeabi_dsub>
 801e8c8:	a385      	add	r3, pc, #532	@ (adr r3, 801eae0 <__ieee754_rem_pio2+0x2f0>)
 801e8ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e8ce:	f7e1 fcb5 	bl	800023c <__adddf3>
 801e8d2:	f04f 35ff 	mov.w	r5, #4294967295
 801e8d6:	e9c4 8900 	strd	r8, r9, [r4]
 801e8da:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801e8de:	e7c4      	b.n	801e86a <__ieee754_rem_pio2+0x7a>
 801e8e0:	a381      	add	r3, pc, #516	@ (adr r3, 801eae8 <__ieee754_rem_pio2+0x2f8>)
 801e8e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e8e6:	f7e1 fca9 	bl	800023c <__adddf3>
 801e8ea:	a381      	add	r3, pc, #516	@ (adr r3, 801eaf0 <__ieee754_rem_pio2+0x300>)
 801e8ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e8f0:	4606      	mov	r6, r0
 801e8f2:	460f      	mov	r7, r1
 801e8f4:	f7e1 fca2 	bl	800023c <__adddf3>
 801e8f8:	4602      	mov	r2, r0
 801e8fa:	460b      	mov	r3, r1
 801e8fc:	4680      	mov	r8, r0
 801e8fe:	4689      	mov	r9, r1
 801e900:	4630      	mov	r0, r6
 801e902:	4639      	mov	r1, r7
 801e904:	f7e1 fc98 	bl	8000238 <__aeabi_dsub>
 801e908:	a379      	add	r3, pc, #484	@ (adr r3, 801eaf0 <__ieee754_rem_pio2+0x300>)
 801e90a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e90e:	e7de      	b.n	801e8ce <__ieee754_rem_pio2+0xde>
 801e910:	4b82      	ldr	r3, [pc, #520]	@ (801eb1c <__ieee754_rem_pio2+0x32c>)
 801e912:	4598      	cmp	r8, r3
 801e914:	f200 80d1 	bhi.w	801eaba <__ieee754_rem_pio2+0x2ca>
 801e918:	f000 f99a 	bl	801ec50 <fabs>
 801e91c:	ec57 6b10 	vmov	r6, r7, d0
 801e920:	a375      	add	r3, pc, #468	@ (adr r3, 801eaf8 <__ieee754_rem_pio2+0x308>)
 801e922:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e926:	4630      	mov	r0, r6
 801e928:	4639      	mov	r1, r7
 801e92a:	f7e1 fe3d 	bl	80005a8 <__aeabi_dmul>
 801e92e:	4b7c      	ldr	r3, [pc, #496]	@ (801eb20 <__ieee754_rem_pio2+0x330>)
 801e930:	2200      	movs	r2, #0
 801e932:	f7e1 fc83 	bl	800023c <__adddf3>
 801e936:	f7e2 f8e7 	bl	8000b08 <__aeabi_d2iz>
 801e93a:	4605      	mov	r5, r0
 801e93c:	f7e1 fdca 	bl	80004d4 <__aeabi_i2d>
 801e940:	4602      	mov	r2, r0
 801e942:	460b      	mov	r3, r1
 801e944:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801e948:	a363      	add	r3, pc, #396	@ (adr r3, 801ead8 <__ieee754_rem_pio2+0x2e8>)
 801e94a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e94e:	f7e1 fe2b 	bl	80005a8 <__aeabi_dmul>
 801e952:	4602      	mov	r2, r0
 801e954:	460b      	mov	r3, r1
 801e956:	4630      	mov	r0, r6
 801e958:	4639      	mov	r1, r7
 801e95a:	f7e1 fc6d 	bl	8000238 <__aeabi_dsub>
 801e95e:	a360      	add	r3, pc, #384	@ (adr r3, 801eae0 <__ieee754_rem_pio2+0x2f0>)
 801e960:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e964:	4682      	mov	sl, r0
 801e966:	468b      	mov	fp, r1
 801e968:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801e96c:	f7e1 fe1c 	bl	80005a8 <__aeabi_dmul>
 801e970:	2d1f      	cmp	r5, #31
 801e972:	4606      	mov	r6, r0
 801e974:	460f      	mov	r7, r1
 801e976:	dc0c      	bgt.n	801e992 <__ieee754_rem_pio2+0x1a2>
 801e978:	4b6a      	ldr	r3, [pc, #424]	@ (801eb24 <__ieee754_rem_pio2+0x334>)
 801e97a:	1e6a      	subs	r2, r5, #1
 801e97c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801e980:	4543      	cmp	r3, r8
 801e982:	d006      	beq.n	801e992 <__ieee754_rem_pio2+0x1a2>
 801e984:	4632      	mov	r2, r6
 801e986:	463b      	mov	r3, r7
 801e988:	4650      	mov	r0, sl
 801e98a:	4659      	mov	r1, fp
 801e98c:	f7e1 fc54 	bl	8000238 <__aeabi_dsub>
 801e990:	e00e      	b.n	801e9b0 <__ieee754_rem_pio2+0x1c0>
 801e992:	463b      	mov	r3, r7
 801e994:	4632      	mov	r2, r6
 801e996:	4650      	mov	r0, sl
 801e998:	4659      	mov	r1, fp
 801e99a:	f7e1 fc4d 	bl	8000238 <__aeabi_dsub>
 801e99e:	ea4f 5328 	mov.w	r3, r8, asr #20
 801e9a2:	9305      	str	r3, [sp, #20]
 801e9a4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801e9a8:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 801e9ac:	2b10      	cmp	r3, #16
 801e9ae:	dc02      	bgt.n	801e9b6 <__ieee754_rem_pio2+0x1c6>
 801e9b0:	e9c4 0100 	strd	r0, r1, [r4]
 801e9b4:	e039      	b.n	801ea2a <__ieee754_rem_pio2+0x23a>
 801e9b6:	a34c      	add	r3, pc, #304	@ (adr r3, 801eae8 <__ieee754_rem_pio2+0x2f8>)
 801e9b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e9bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801e9c0:	f7e1 fdf2 	bl	80005a8 <__aeabi_dmul>
 801e9c4:	4606      	mov	r6, r0
 801e9c6:	460f      	mov	r7, r1
 801e9c8:	4602      	mov	r2, r0
 801e9ca:	460b      	mov	r3, r1
 801e9cc:	4650      	mov	r0, sl
 801e9ce:	4659      	mov	r1, fp
 801e9d0:	f7e1 fc32 	bl	8000238 <__aeabi_dsub>
 801e9d4:	4602      	mov	r2, r0
 801e9d6:	460b      	mov	r3, r1
 801e9d8:	4680      	mov	r8, r0
 801e9da:	4689      	mov	r9, r1
 801e9dc:	4650      	mov	r0, sl
 801e9de:	4659      	mov	r1, fp
 801e9e0:	f7e1 fc2a 	bl	8000238 <__aeabi_dsub>
 801e9e4:	4632      	mov	r2, r6
 801e9e6:	463b      	mov	r3, r7
 801e9e8:	f7e1 fc26 	bl	8000238 <__aeabi_dsub>
 801e9ec:	a340      	add	r3, pc, #256	@ (adr r3, 801eaf0 <__ieee754_rem_pio2+0x300>)
 801e9ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e9f2:	4606      	mov	r6, r0
 801e9f4:	460f      	mov	r7, r1
 801e9f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801e9fa:	f7e1 fdd5 	bl	80005a8 <__aeabi_dmul>
 801e9fe:	4632      	mov	r2, r6
 801ea00:	463b      	mov	r3, r7
 801ea02:	f7e1 fc19 	bl	8000238 <__aeabi_dsub>
 801ea06:	4602      	mov	r2, r0
 801ea08:	460b      	mov	r3, r1
 801ea0a:	4606      	mov	r6, r0
 801ea0c:	460f      	mov	r7, r1
 801ea0e:	4640      	mov	r0, r8
 801ea10:	4649      	mov	r1, r9
 801ea12:	f7e1 fc11 	bl	8000238 <__aeabi_dsub>
 801ea16:	9a05      	ldr	r2, [sp, #20]
 801ea18:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801ea1c:	1ad3      	subs	r3, r2, r3
 801ea1e:	2b31      	cmp	r3, #49	@ 0x31
 801ea20:	dc20      	bgt.n	801ea64 <__ieee754_rem_pio2+0x274>
 801ea22:	e9c4 0100 	strd	r0, r1, [r4]
 801ea26:	46c2      	mov	sl, r8
 801ea28:	46cb      	mov	fp, r9
 801ea2a:	e9d4 8900 	ldrd	r8, r9, [r4]
 801ea2e:	4650      	mov	r0, sl
 801ea30:	4642      	mov	r2, r8
 801ea32:	464b      	mov	r3, r9
 801ea34:	4659      	mov	r1, fp
 801ea36:	f7e1 fbff 	bl	8000238 <__aeabi_dsub>
 801ea3a:	463b      	mov	r3, r7
 801ea3c:	4632      	mov	r2, r6
 801ea3e:	f7e1 fbfb 	bl	8000238 <__aeabi_dsub>
 801ea42:	9b04      	ldr	r3, [sp, #16]
 801ea44:	2b00      	cmp	r3, #0
 801ea46:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801ea4a:	f6bf af0e 	bge.w	801e86a <__ieee754_rem_pio2+0x7a>
 801ea4e:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 801ea52:	6063      	str	r3, [r4, #4]
 801ea54:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801ea58:	f8c4 8000 	str.w	r8, [r4]
 801ea5c:	60a0      	str	r0, [r4, #8]
 801ea5e:	60e3      	str	r3, [r4, #12]
 801ea60:	426d      	negs	r5, r5
 801ea62:	e702      	b.n	801e86a <__ieee754_rem_pio2+0x7a>
 801ea64:	a326      	add	r3, pc, #152	@ (adr r3, 801eb00 <__ieee754_rem_pio2+0x310>)
 801ea66:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ea6a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801ea6e:	f7e1 fd9b 	bl	80005a8 <__aeabi_dmul>
 801ea72:	4606      	mov	r6, r0
 801ea74:	460f      	mov	r7, r1
 801ea76:	4602      	mov	r2, r0
 801ea78:	460b      	mov	r3, r1
 801ea7a:	4640      	mov	r0, r8
 801ea7c:	4649      	mov	r1, r9
 801ea7e:	f7e1 fbdb 	bl	8000238 <__aeabi_dsub>
 801ea82:	4602      	mov	r2, r0
 801ea84:	460b      	mov	r3, r1
 801ea86:	4682      	mov	sl, r0
 801ea88:	468b      	mov	fp, r1
 801ea8a:	4640      	mov	r0, r8
 801ea8c:	4649      	mov	r1, r9
 801ea8e:	f7e1 fbd3 	bl	8000238 <__aeabi_dsub>
 801ea92:	4632      	mov	r2, r6
 801ea94:	463b      	mov	r3, r7
 801ea96:	f7e1 fbcf 	bl	8000238 <__aeabi_dsub>
 801ea9a:	a31b      	add	r3, pc, #108	@ (adr r3, 801eb08 <__ieee754_rem_pio2+0x318>)
 801ea9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eaa0:	4606      	mov	r6, r0
 801eaa2:	460f      	mov	r7, r1
 801eaa4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801eaa8:	f7e1 fd7e 	bl	80005a8 <__aeabi_dmul>
 801eaac:	4632      	mov	r2, r6
 801eaae:	463b      	mov	r3, r7
 801eab0:	f7e1 fbc2 	bl	8000238 <__aeabi_dsub>
 801eab4:	4606      	mov	r6, r0
 801eab6:	460f      	mov	r7, r1
 801eab8:	e764      	b.n	801e984 <__ieee754_rem_pio2+0x194>
 801eaba:	4b1b      	ldr	r3, [pc, #108]	@ (801eb28 <__ieee754_rem_pio2+0x338>)
 801eabc:	4598      	cmp	r8, r3
 801eabe:	d935      	bls.n	801eb2c <__ieee754_rem_pio2+0x33c>
 801eac0:	4632      	mov	r2, r6
 801eac2:	463b      	mov	r3, r7
 801eac4:	4630      	mov	r0, r6
 801eac6:	4639      	mov	r1, r7
 801eac8:	f7e1 fbb6 	bl	8000238 <__aeabi_dsub>
 801eacc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801ead0:	e9c4 0100 	strd	r0, r1, [r4]
 801ead4:	e69e      	b.n	801e814 <__ieee754_rem_pio2+0x24>
 801ead6:	bf00      	nop
 801ead8:	54400000 	.word	0x54400000
 801eadc:	3ff921fb 	.word	0x3ff921fb
 801eae0:	1a626331 	.word	0x1a626331
 801eae4:	3dd0b461 	.word	0x3dd0b461
 801eae8:	1a600000 	.word	0x1a600000
 801eaec:	3dd0b461 	.word	0x3dd0b461
 801eaf0:	2e037073 	.word	0x2e037073
 801eaf4:	3ba3198a 	.word	0x3ba3198a
 801eaf8:	6dc9c883 	.word	0x6dc9c883
 801eafc:	3fe45f30 	.word	0x3fe45f30
 801eb00:	2e000000 	.word	0x2e000000
 801eb04:	3ba3198a 	.word	0x3ba3198a
 801eb08:	252049c1 	.word	0x252049c1
 801eb0c:	397b839a 	.word	0x397b839a
 801eb10:	3fe921fb 	.word	0x3fe921fb
 801eb14:	4002d97b 	.word	0x4002d97b
 801eb18:	3ff921fb 	.word	0x3ff921fb
 801eb1c:	413921fb 	.word	0x413921fb
 801eb20:	3fe00000 	.word	0x3fe00000
 801eb24:	0802274c 	.word	0x0802274c
 801eb28:	7fefffff 	.word	0x7fefffff
 801eb2c:	ea4f 5528 	mov.w	r5, r8, asr #20
 801eb30:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 801eb34:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 801eb38:	4630      	mov	r0, r6
 801eb3a:	460f      	mov	r7, r1
 801eb3c:	f7e1 ffe4 	bl	8000b08 <__aeabi_d2iz>
 801eb40:	f7e1 fcc8 	bl	80004d4 <__aeabi_i2d>
 801eb44:	4602      	mov	r2, r0
 801eb46:	460b      	mov	r3, r1
 801eb48:	4630      	mov	r0, r6
 801eb4a:	4639      	mov	r1, r7
 801eb4c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801eb50:	f7e1 fb72 	bl	8000238 <__aeabi_dsub>
 801eb54:	4b22      	ldr	r3, [pc, #136]	@ (801ebe0 <__ieee754_rem_pio2+0x3f0>)
 801eb56:	2200      	movs	r2, #0
 801eb58:	f7e1 fd26 	bl	80005a8 <__aeabi_dmul>
 801eb5c:	460f      	mov	r7, r1
 801eb5e:	4606      	mov	r6, r0
 801eb60:	f7e1 ffd2 	bl	8000b08 <__aeabi_d2iz>
 801eb64:	f7e1 fcb6 	bl	80004d4 <__aeabi_i2d>
 801eb68:	4602      	mov	r2, r0
 801eb6a:	460b      	mov	r3, r1
 801eb6c:	4630      	mov	r0, r6
 801eb6e:	4639      	mov	r1, r7
 801eb70:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801eb74:	f7e1 fb60 	bl	8000238 <__aeabi_dsub>
 801eb78:	4b19      	ldr	r3, [pc, #100]	@ (801ebe0 <__ieee754_rem_pio2+0x3f0>)
 801eb7a:	2200      	movs	r2, #0
 801eb7c:	f7e1 fd14 	bl	80005a8 <__aeabi_dmul>
 801eb80:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 801eb84:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 801eb88:	f04f 0803 	mov.w	r8, #3
 801eb8c:	2600      	movs	r6, #0
 801eb8e:	2700      	movs	r7, #0
 801eb90:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 801eb94:	4632      	mov	r2, r6
 801eb96:	463b      	mov	r3, r7
 801eb98:	46c2      	mov	sl, r8
 801eb9a:	f108 38ff 	add.w	r8, r8, #4294967295
 801eb9e:	f7e1 ff6b 	bl	8000a78 <__aeabi_dcmpeq>
 801eba2:	2800      	cmp	r0, #0
 801eba4:	d1f4      	bne.n	801eb90 <__ieee754_rem_pio2+0x3a0>
 801eba6:	4b0f      	ldr	r3, [pc, #60]	@ (801ebe4 <__ieee754_rem_pio2+0x3f4>)
 801eba8:	9301      	str	r3, [sp, #4]
 801ebaa:	2302      	movs	r3, #2
 801ebac:	9300      	str	r3, [sp, #0]
 801ebae:	462a      	mov	r2, r5
 801ebb0:	4653      	mov	r3, sl
 801ebb2:	4621      	mov	r1, r4
 801ebb4:	a806      	add	r0, sp, #24
 801ebb6:	f000 f947 	bl	801ee48 <__kernel_rem_pio2>
 801ebba:	9b04      	ldr	r3, [sp, #16]
 801ebbc:	2b00      	cmp	r3, #0
 801ebbe:	4605      	mov	r5, r0
 801ebc0:	f6bf ae53 	bge.w	801e86a <__ieee754_rem_pio2+0x7a>
 801ebc4:	e9d4 2100 	ldrd	r2, r1, [r4]
 801ebc8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801ebcc:	e9c4 2300 	strd	r2, r3, [r4]
 801ebd0:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 801ebd4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801ebd8:	e9c4 2302 	strd	r2, r3, [r4, #8]
 801ebdc:	e740      	b.n	801ea60 <__ieee754_rem_pio2+0x270>
 801ebde:	bf00      	nop
 801ebe0:	41700000 	.word	0x41700000
 801ebe4:	080227cc 	.word	0x080227cc

0801ebe8 <acos>:
 801ebe8:	b538      	push	{r3, r4, r5, lr}
 801ebea:	ed2d 8b02 	vpush	{d8}
 801ebee:	ec55 4b10 	vmov	r4, r5, d0
 801ebf2:	f000 fc81 	bl	801f4f8 <__ieee754_acos>
 801ebf6:	4622      	mov	r2, r4
 801ebf8:	462b      	mov	r3, r5
 801ebfa:	4620      	mov	r0, r4
 801ebfc:	4629      	mov	r1, r5
 801ebfe:	eeb0 8a40 	vmov.f32	s16, s0
 801ec02:	eef0 8a60 	vmov.f32	s17, s1
 801ec06:	f7e1 ff69 	bl	8000adc <__aeabi_dcmpun>
 801ec0a:	b9a8      	cbnz	r0, 801ec38 <acos+0x50>
 801ec0c:	ec45 4b10 	vmov	d0, r4, r5
 801ec10:	f000 f81e 	bl	801ec50 <fabs>
 801ec14:	4b0c      	ldr	r3, [pc, #48]	@ (801ec48 <acos+0x60>)
 801ec16:	ec51 0b10 	vmov	r0, r1, d0
 801ec1a:	2200      	movs	r2, #0
 801ec1c:	f7e1 ff54 	bl	8000ac8 <__aeabi_dcmpgt>
 801ec20:	b150      	cbz	r0, 801ec38 <acos+0x50>
 801ec22:	f7fc fe71 	bl	801b908 <__errno>
 801ec26:	ecbd 8b02 	vpop	{d8}
 801ec2a:	2321      	movs	r3, #33	@ 0x21
 801ec2c:	6003      	str	r3, [r0, #0]
 801ec2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801ec32:	4806      	ldr	r0, [pc, #24]	@ (801ec4c <acos+0x64>)
 801ec34:	f7fc beac 	b.w	801b990 <nan>
 801ec38:	eeb0 0a48 	vmov.f32	s0, s16
 801ec3c:	eef0 0a68 	vmov.f32	s1, s17
 801ec40:	ecbd 8b02 	vpop	{d8}
 801ec44:	bd38      	pop	{r3, r4, r5, pc}
 801ec46:	bf00      	nop
 801ec48:	3ff00000 	.word	0x3ff00000
 801ec4c:	08022506 	.word	0x08022506

0801ec50 <fabs>:
 801ec50:	ec51 0b10 	vmov	r0, r1, d0
 801ec54:	4602      	mov	r2, r0
 801ec56:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801ec5a:	ec43 2b10 	vmov	d0, r2, r3
 801ec5e:	4770      	bx	lr

0801ec60 <__ieee754_expf>:
 801ec60:	ee10 2a10 	vmov	r2, s0
 801ec64:	f022 4300 	bic.w	r3, r2, #2147483648	@ 0x80000000
 801ec68:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 801ec6c:	d902      	bls.n	801ec74 <__ieee754_expf+0x14>
 801ec6e:	ee30 0a00 	vadd.f32	s0, s0, s0
 801ec72:	4770      	bx	lr
 801ec74:	ea4f 71d2 	mov.w	r1, r2, lsr #31
 801ec78:	d106      	bne.n	801ec88 <__ieee754_expf+0x28>
 801ec7a:	eddf 7a4e 	vldr	s15, [pc, #312]	@ 801edb4 <__ieee754_expf+0x154>
 801ec7e:	2900      	cmp	r1, #0
 801ec80:	bf18      	it	ne
 801ec82:	eeb0 0a67 	vmovne.f32	s0, s15
 801ec86:	4770      	bx	lr
 801ec88:	484b      	ldr	r0, [pc, #300]	@ (801edb8 <__ieee754_expf+0x158>)
 801ec8a:	4282      	cmp	r2, r0
 801ec8c:	dd02      	ble.n	801ec94 <__ieee754_expf+0x34>
 801ec8e:	2000      	movs	r0, #0
 801ec90:	f000 b8d4 	b.w	801ee3c <__math_oflowf>
 801ec94:	2a00      	cmp	r2, #0
 801ec96:	da05      	bge.n	801eca4 <__ieee754_expf+0x44>
 801ec98:	4a48      	ldr	r2, [pc, #288]	@ (801edbc <__ieee754_expf+0x15c>)
 801ec9a:	4293      	cmp	r3, r2
 801ec9c:	d902      	bls.n	801eca4 <__ieee754_expf+0x44>
 801ec9e:	2000      	movs	r0, #0
 801eca0:	f000 b8c6 	b.w	801ee30 <__math_uflowf>
 801eca4:	4a46      	ldr	r2, [pc, #280]	@ (801edc0 <__ieee754_expf+0x160>)
 801eca6:	4293      	cmp	r3, r2
 801eca8:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 801ecac:	d952      	bls.n	801ed54 <__ieee754_expf+0xf4>
 801ecae:	4a45      	ldr	r2, [pc, #276]	@ (801edc4 <__ieee754_expf+0x164>)
 801ecb0:	4293      	cmp	r3, r2
 801ecb2:	ea4f 0281 	mov.w	r2, r1, lsl #2
 801ecb6:	d834      	bhi.n	801ed22 <__ieee754_expf+0xc2>
 801ecb8:	4b43      	ldr	r3, [pc, #268]	@ (801edc8 <__ieee754_expf+0x168>)
 801ecba:	4413      	add	r3, r2
 801ecbc:	ed93 7a00 	vldr	s14, [r3]
 801ecc0:	4b42      	ldr	r3, [pc, #264]	@ (801edcc <__ieee754_expf+0x16c>)
 801ecc2:	4413      	add	r3, r2
 801ecc4:	ee30 7a47 	vsub.f32	s14, s0, s14
 801ecc8:	f1c1 0201 	rsb	r2, r1, #1
 801eccc:	edd3 7a00 	vldr	s15, [r3]
 801ecd0:	1a52      	subs	r2, r2, r1
 801ecd2:	ee37 0a67 	vsub.f32	s0, s14, s15
 801ecd6:	ee20 6a00 	vmul.f32	s12, s0, s0
 801ecda:	ed9f 5a3d 	vldr	s10, [pc, #244]	@ 801edd0 <__ieee754_expf+0x170>
 801ecde:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 801edd4 <__ieee754_expf+0x174>
 801ece2:	eee6 6a05 	vfma.f32	s13, s12, s10
 801ece6:	ed9f 5a3c 	vldr	s10, [pc, #240]	@ 801edd8 <__ieee754_expf+0x178>
 801ecea:	eea6 5a86 	vfma.f32	s10, s13, s12
 801ecee:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 801eddc <__ieee754_expf+0x17c>
 801ecf2:	eee5 6a06 	vfma.f32	s13, s10, s12
 801ecf6:	ed9f 5a3a 	vldr	s10, [pc, #232]	@ 801ede0 <__ieee754_expf+0x180>
 801ecfa:	eea6 5a86 	vfma.f32	s10, s13, s12
 801ecfe:	eef0 6a40 	vmov.f32	s13, s0
 801ed02:	eee5 6a46 	vfms.f32	s13, s10, s12
 801ed06:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 801ed0a:	ee20 5a26 	vmul.f32	s10, s0, s13
 801ed0e:	bb92      	cbnz	r2, 801ed76 <__ieee754_expf+0x116>
 801ed10:	ee76 6ac6 	vsub.f32	s13, s13, s12
 801ed14:	eec5 7a26 	vdiv.f32	s15, s10, s13
 801ed18:	ee37 0ac0 	vsub.f32	s0, s15, s0
 801ed1c:	ee35 0ac0 	vsub.f32	s0, s11, s0
 801ed20:	4770      	bx	lr
 801ed22:	4b30      	ldr	r3, [pc, #192]	@ (801ede4 <__ieee754_expf+0x184>)
 801ed24:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 801ede8 <__ieee754_expf+0x188>
 801ed28:	eddf 6a30 	vldr	s13, [pc, #192]	@ 801edec <__ieee754_expf+0x18c>
 801ed2c:	4413      	add	r3, r2
 801ed2e:	edd3 7a00 	vldr	s15, [r3]
 801ed32:	eee0 7a07 	vfma.f32	s15, s0, s14
 801ed36:	eeb0 7a40 	vmov.f32	s14, s0
 801ed3a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801ed3e:	ee17 2a90 	vmov	r2, s15
 801ed42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801ed46:	eea7 7ae6 	vfms.f32	s14, s15, s13
 801ed4a:	eddf 6a29 	vldr	s13, [pc, #164]	@ 801edf0 <__ieee754_expf+0x190>
 801ed4e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801ed52:	e7be      	b.n	801ecd2 <__ieee754_expf+0x72>
 801ed54:	f1b3 5f50 	cmp.w	r3, #872415232	@ 0x34000000
 801ed58:	d20b      	bcs.n	801ed72 <__ieee754_expf+0x112>
 801ed5a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 801edf4 <__ieee754_expf+0x194>
 801ed5e:	ee70 6a26 	vadd.f32	s13, s0, s13
 801ed62:	eef4 6ae5 	vcmpe.f32	s13, s11
 801ed66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ed6a:	dd02      	ble.n	801ed72 <__ieee754_expf+0x112>
 801ed6c:	ee30 0a25 	vadd.f32	s0, s0, s11
 801ed70:	4770      	bx	lr
 801ed72:	2200      	movs	r2, #0
 801ed74:	e7af      	b.n	801ecd6 <__ieee754_expf+0x76>
 801ed76:	ee36 6a66 	vsub.f32	s12, s12, s13
 801ed7a:	f112 0f7d 	cmn.w	r2, #125	@ 0x7d
 801ed7e:	eec5 6a06 	vdiv.f32	s13, s10, s12
 801ed82:	bfb8      	it	lt
 801ed84:	3264      	addlt	r2, #100	@ 0x64
 801ed86:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801ed8a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801ed8e:	ee75 7ae7 	vsub.f32	s15, s11, s15
 801ed92:	ee17 3a90 	vmov	r3, s15
 801ed96:	bfab      	itete	ge
 801ed98:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 801ed9c:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 801eda0:	ee00 3a10 	vmovge	s0, r3
 801eda4:	eddf 7a14 	vldrlt	s15, [pc, #80]	@ 801edf8 <__ieee754_expf+0x198>
 801eda8:	bfbc      	itt	lt
 801edaa:	ee00 3a10 	vmovlt	s0, r3
 801edae:	ee20 0a27 	vmullt.f32	s0, s0, s15
 801edb2:	4770      	bx	lr
 801edb4:	00000000 	.word	0x00000000
 801edb8:	42b17217 	.word	0x42b17217
 801edbc:	42cff1b5 	.word	0x42cff1b5
 801edc0:	3eb17218 	.word	0x3eb17218
 801edc4:	3f851591 	.word	0x3f851591
 801edc8:	080228dc 	.word	0x080228dc
 801edcc:	080228d4 	.word	0x080228d4
 801edd0:	3331bb4c 	.word	0x3331bb4c
 801edd4:	b5ddea0e 	.word	0xb5ddea0e
 801edd8:	388ab355 	.word	0x388ab355
 801eddc:	bb360b61 	.word	0xbb360b61
 801ede0:	3e2aaaab 	.word	0x3e2aaaab
 801ede4:	080228e4 	.word	0x080228e4
 801ede8:	3fb8aa3b 	.word	0x3fb8aa3b
 801edec:	3f317180 	.word	0x3f317180
 801edf0:	3717f7d1 	.word	0x3717f7d1
 801edf4:	7149f2ca 	.word	0x7149f2ca
 801edf8:	0d800000 	.word	0x0d800000

0801edfc <with_errnof>:
 801edfc:	b510      	push	{r4, lr}
 801edfe:	ed2d 8b02 	vpush	{d8}
 801ee02:	eeb0 8a40 	vmov.f32	s16, s0
 801ee06:	4604      	mov	r4, r0
 801ee08:	f7fc fd7e 	bl	801b908 <__errno>
 801ee0c:	eeb0 0a48 	vmov.f32	s0, s16
 801ee10:	ecbd 8b02 	vpop	{d8}
 801ee14:	6004      	str	r4, [r0, #0]
 801ee16:	bd10      	pop	{r4, pc}

0801ee18 <xflowf>:
 801ee18:	b130      	cbz	r0, 801ee28 <xflowf+0x10>
 801ee1a:	eef1 7a40 	vneg.f32	s15, s0
 801ee1e:	ee27 0a80 	vmul.f32	s0, s15, s0
 801ee22:	2022      	movs	r0, #34	@ 0x22
 801ee24:	f7ff bfea 	b.w	801edfc <with_errnof>
 801ee28:	eef0 7a40 	vmov.f32	s15, s0
 801ee2c:	e7f7      	b.n	801ee1e <xflowf+0x6>
	...

0801ee30 <__math_uflowf>:
 801ee30:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 801ee38 <__math_uflowf+0x8>
 801ee34:	f7ff bff0 	b.w	801ee18 <xflowf>
 801ee38:	10000000 	.word	0x10000000

0801ee3c <__math_oflowf>:
 801ee3c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 801ee44 <__math_oflowf+0x8>
 801ee40:	f7ff bfea 	b.w	801ee18 <xflowf>
 801ee44:	70000000 	.word	0x70000000

0801ee48 <__kernel_rem_pio2>:
 801ee48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ee4c:	ed2d 8b02 	vpush	{d8}
 801ee50:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 801ee54:	f112 0f14 	cmn.w	r2, #20
 801ee58:	9306      	str	r3, [sp, #24]
 801ee5a:	9104      	str	r1, [sp, #16]
 801ee5c:	4bbe      	ldr	r3, [pc, #760]	@ (801f158 <__kernel_rem_pio2+0x310>)
 801ee5e:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 801ee60:	9008      	str	r0, [sp, #32]
 801ee62:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801ee66:	9300      	str	r3, [sp, #0]
 801ee68:	9b06      	ldr	r3, [sp, #24]
 801ee6a:	f103 33ff 	add.w	r3, r3, #4294967295
 801ee6e:	bfa8      	it	ge
 801ee70:	1ed4      	subge	r4, r2, #3
 801ee72:	9305      	str	r3, [sp, #20]
 801ee74:	bfb2      	itee	lt
 801ee76:	2400      	movlt	r4, #0
 801ee78:	2318      	movge	r3, #24
 801ee7a:	fb94 f4f3 	sdivge	r4, r4, r3
 801ee7e:	f06f 0317 	mvn.w	r3, #23
 801ee82:	fb04 3303 	mla	r3, r4, r3, r3
 801ee86:	eb03 0b02 	add.w	fp, r3, r2
 801ee8a:	9b00      	ldr	r3, [sp, #0]
 801ee8c:	9a05      	ldr	r2, [sp, #20]
 801ee8e:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 801f148 <__kernel_rem_pio2+0x300>
 801ee92:	eb03 0802 	add.w	r8, r3, r2
 801ee96:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 801ee98:	1aa7      	subs	r7, r4, r2
 801ee9a:	ae20      	add	r6, sp, #128	@ 0x80
 801ee9c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 801eea0:	2500      	movs	r5, #0
 801eea2:	4545      	cmp	r5, r8
 801eea4:	dd13      	ble.n	801eece <__kernel_rem_pio2+0x86>
 801eea6:	9b06      	ldr	r3, [sp, #24]
 801eea8:	aa20      	add	r2, sp, #128	@ 0x80
 801eeaa:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 801eeae:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 801eeb2:	f04f 0800 	mov.w	r8, #0
 801eeb6:	9b00      	ldr	r3, [sp, #0]
 801eeb8:	4598      	cmp	r8, r3
 801eeba:	dc31      	bgt.n	801ef20 <__kernel_rem_pio2+0xd8>
 801eebc:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 801f148 <__kernel_rem_pio2+0x300>
 801eec0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801eec4:	ed8d 7b02 	vstr	d7, [sp, #8]
 801eec8:	462f      	mov	r7, r5
 801eeca:	2600      	movs	r6, #0
 801eecc:	e01b      	b.n	801ef06 <__kernel_rem_pio2+0xbe>
 801eece:	42ef      	cmn	r7, r5
 801eed0:	d407      	bmi.n	801eee2 <__kernel_rem_pio2+0x9a>
 801eed2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 801eed6:	f7e1 fafd 	bl	80004d4 <__aeabi_i2d>
 801eeda:	e8e6 0102 	strd	r0, r1, [r6], #8
 801eede:	3501      	adds	r5, #1
 801eee0:	e7df      	b.n	801eea2 <__kernel_rem_pio2+0x5a>
 801eee2:	ec51 0b18 	vmov	r0, r1, d8
 801eee6:	e7f8      	b.n	801eeda <__kernel_rem_pio2+0x92>
 801eee8:	e9d7 2300 	ldrd	r2, r3, [r7]
 801eeec:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 801eef0:	f7e1 fb5a 	bl	80005a8 <__aeabi_dmul>
 801eef4:	4602      	mov	r2, r0
 801eef6:	460b      	mov	r3, r1
 801eef8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801eefc:	f7e1 f99e 	bl	800023c <__adddf3>
 801ef00:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801ef04:	3601      	adds	r6, #1
 801ef06:	9b05      	ldr	r3, [sp, #20]
 801ef08:	429e      	cmp	r6, r3
 801ef0a:	f1a7 0708 	sub.w	r7, r7, #8
 801ef0e:	ddeb      	ble.n	801eee8 <__kernel_rem_pio2+0xa0>
 801ef10:	ed9d 7b02 	vldr	d7, [sp, #8]
 801ef14:	f108 0801 	add.w	r8, r8, #1
 801ef18:	ecaa 7b02 	vstmia	sl!, {d7}
 801ef1c:	3508      	adds	r5, #8
 801ef1e:	e7ca      	b.n	801eeb6 <__kernel_rem_pio2+0x6e>
 801ef20:	9b00      	ldr	r3, [sp, #0]
 801ef22:	f8dd 8000 	ldr.w	r8, [sp]
 801ef26:	aa0c      	add	r2, sp, #48	@ 0x30
 801ef28:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801ef2c:	930a      	str	r3, [sp, #40]	@ 0x28
 801ef2e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 801ef30:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801ef34:	9309      	str	r3, [sp, #36]	@ 0x24
 801ef36:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 801ef3a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801ef3c:	ab98      	add	r3, sp, #608	@ 0x260
 801ef3e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801ef42:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 801ef46:	ed8d 7b02 	vstr	d7, [sp, #8]
 801ef4a:	ac0c      	add	r4, sp, #48	@ 0x30
 801ef4c:	ab70      	add	r3, sp, #448	@ 0x1c0
 801ef4e:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 801ef52:	46a1      	mov	r9, r4
 801ef54:	46c2      	mov	sl, r8
 801ef56:	f1ba 0f00 	cmp.w	sl, #0
 801ef5a:	f1a5 0508 	sub.w	r5, r5, #8
 801ef5e:	dc77      	bgt.n	801f050 <__kernel_rem_pio2+0x208>
 801ef60:	4658      	mov	r0, fp
 801ef62:	ed9d 0b02 	vldr	d0, [sp, #8]
 801ef66:	f000 fd23 	bl	801f9b0 <scalbn>
 801ef6a:	ec57 6b10 	vmov	r6, r7, d0
 801ef6e:	2200      	movs	r2, #0
 801ef70:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 801ef74:	4630      	mov	r0, r6
 801ef76:	4639      	mov	r1, r7
 801ef78:	f7e1 fb16 	bl	80005a8 <__aeabi_dmul>
 801ef7c:	ec41 0b10 	vmov	d0, r0, r1
 801ef80:	f7ff fa36 	bl	801e3f0 <floor>
 801ef84:	4b75      	ldr	r3, [pc, #468]	@ (801f15c <__kernel_rem_pio2+0x314>)
 801ef86:	ec51 0b10 	vmov	r0, r1, d0
 801ef8a:	2200      	movs	r2, #0
 801ef8c:	f7e1 fb0c 	bl	80005a8 <__aeabi_dmul>
 801ef90:	4602      	mov	r2, r0
 801ef92:	460b      	mov	r3, r1
 801ef94:	4630      	mov	r0, r6
 801ef96:	4639      	mov	r1, r7
 801ef98:	f7e1 f94e 	bl	8000238 <__aeabi_dsub>
 801ef9c:	460f      	mov	r7, r1
 801ef9e:	4606      	mov	r6, r0
 801efa0:	f7e1 fdb2 	bl	8000b08 <__aeabi_d2iz>
 801efa4:	9002      	str	r0, [sp, #8]
 801efa6:	f7e1 fa95 	bl	80004d4 <__aeabi_i2d>
 801efaa:	4602      	mov	r2, r0
 801efac:	460b      	mov	r3, r1
 801efae:	4630      	mov	r0, r6
 801efb0:	4639      	mov	r1, r7
 801efb2:	f7e1 f941 	bl	8000238 <__aeabi_dsub>
 801efb6:	f1bb 0f00 	cmp.w	fp, #0
 801efba:	4606      	mov	r6, r0
 801efbc:	460f      	mov	r7, r1
 801efbe:	dd6c      	ble.n	801f09a <__kernel_rem_pio2+0x252>
 801efc0:	f108 31ff 	add.w	r1, r8, #4294967295
 801efc4:	ab0c      	add	r3, sp, #48	@ 0x30
 801efc6:	9d02      	ldr	r5, [sp, #8]
 801efc8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801efcc:	f1cb 0018 	rsb	r0, fp, #24
 801efd0:	fa43 f200 	asr.w	r2, r3, r0
 801efd4:	4415      	add	r5, r2
 801efd6:	4082      	lsls	r2, r0
 801efd8:	1a9b      	subs	r3, r3, r2
 801efda:	aa0c      	add	r2, sp, #48	@ 0x30
 801efdc:	9502      	str	r5, [sp, #8]
 801efde:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801efe2:	f1cb 0217 	rsb	r2, fp, #23
 801efe6:	fa43 f902 	asr.w	r9, r3, r2
 801efea:	f1b9 0f00 	cmp.w	r9, #0
 801efee:	dd64      	ble.n	801f0ba <__kernel_rem_pio2+0x272>
 801eff0:	9b02      	ldr	r3, [sp, #8]
 801eff2:	2200      	movs	r2, #0
 801eff4:	3301      	adds	r3, #1
 801eff6:	9302      	str	r3, [sp, #8]
 801eff8:	4615      	mov	r5, r2
 801effa:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 801effe:	4590      	cmp	r8, r2
 801f000:	f300 80b8 	bgt.w	801f174 <__kernel_rem_pio2+0x32c>
 801f004:	f1bb 0f00 	cmp.w	fp, #0
 801f008:	dd07      	ble.n	801f01a <__kernel_rem_pio2+0x1d2>
 801f00a:	f1bb 0f01 	cmp.w	fp, #1
 801f00e:	f000 80bf 	beq.w	801f190 <__kernel_rem_pio2+0x348>
 801f012:	f1bb 0f02 	cmp.w	fp, #2
 801f016:	f000 80c6 	beq.w	801f1a6 <__kernel_rem_pio2+0x35e>
 801f01a:	f1b9 0f02 	cmp.w	r9, #2
 801f01e:	d14c      	bne.n	801f0ba <__kernel_rem_pio2+0x272>
 801f020:	4632      	mov	r2, r6
 801f022:	463b      	mov	r3, r7
 801f024:	494e      	ldr	r1, [pc, #312]	@ (801f160 <__kernel_rem_pio2+0x318>)
 801f026:	2000      	movs	r0, #0
 801f028:	f7e1 f906 	bl	8000238 <__aeabi_dsub>
 801f02c:	4606      	mov	r6, r0
 801f02e:	460f      	mov	r7, r1
 801f030:	2d00      	cmp	r5, #0
 801f032:	d042      	beq.n	801f0ba <__kernel_rem_pio2+0x272>
 801f034:	4658      	mov	r0, fp
 801f036:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 801f150 <__kernel_rem_pio2+0x308>
 801f03a:	f000 fcb9 	bl	801f9b0 <scalbn>
 801f03e:	4630      	mov	r0, r6
 801f040:	4639      	mov	r1, r7
 801f042:	ec53 2b10 	vmov	r2, r3, d0
 801f046:	f7e1 f8f7 	bl	8000238 <__aeabi_dsub>
 801f04a:	4606      	mov	r6, r0
 801f04c:	460f      	mov	r7, r1
 801f04e:	e034      	b.n	801f0ba <__kernel_rem_pio2+0x272>
 801f050:	4b44      	ldr	r3, [pc, #272]	@ (801f164 <__kernel_rem_pio2+0x31c>)
 801f052:	2200      	movs	r2, #0
 801f054:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f058:	f7e1 faa6 	bl	80005a8 <__aeabi_dmul>
 801f05c:	f7e1 fd54 	bl	8000b08 <__aeabi_d2iz>
 801f060:	f7e1 fa38 	bl	80004d4 <__aeabi_i2d>
 801f064:	4b40      	ldr	r3, [pc, #256]	@ (801f168 <__kernel_rem_pio2+0x320>)
 801f066:	2200      	movs	r2, #0
 801f068:	4606      	mov	r6, r0
 801f06a:	460f      	mov	r7, r1
 801f06c:	f7e1 fa9c 	bl	80005a8 <__aeabi_dmul>
 801f070:	4602      	mov	r2, r0
 801f072:	460b      	mov	r3, r1
 801f074:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f078:	f7e1 f8de 	bl	8000238 <__aeabi_dsub>
 801f07c:	f7e1 fd44 	bl	8000b08 <__aeabi_d2iz>
 801f080:	e9d5 2300 	ldrd	r2, r3, [r5]
 801f084:	f849 0b04 	str.w	r0, [r9], #4
 801f088:	4639      	mov	r1, r7
 801f08a:	4630      	mov	r0, r6
 801f08c:	f7e1 f8d6 	bl	800023c <__adddf3>
 801f090:	f10a 3aff 	add.w	sl, sl, #4294967295
 801f094:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801f098:	e75d      	b.n	801ef56 <__kernel_rem_pio2+0x10e>
 801f09a:	d107      	bne.n	801f0ac <__kernel_rem_pio2+0x264>
 801f09c:	f108 33ff 	add.w	r3, r8, #4294967295
 801f0a0:	aa0c      	add	r2, sp, #48	@ 0x30
 801f0a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801f0a6:	ea4f 59e3 	mov.w	r9, r3, asr #23
 801f0aa:	e79e      	b.n	801efea <__kernel_rem_pio2+0x1a2>
 801f0ac:	4b2f      	ldr	r3, [pc, #188]	@ (801f16c <__kernel_rem_pio2+0x324>)
 801f0ae:	2200      	movs	r2, #0
 801f0b0:	f7e1 fd00 	bl	8000ab4 <__aeabi_dcmpge>
 801f0b4:	2800      	cmp	r0, #0
 801f0b6:	d143      	bne.n	801f140 <__kernel_rem_pio2+0x2f8>
 801f0b8:	4681      	mov	r9, r0
 801f0ba:	2200      	movs	r2, #0
 801f0bc:	2300      	movs	r3, #0
 801f0be:	4630      	mov	r0, r6
 801f0c0:	4639      	mov	r1, r7
 801f0c2:	f7e1 fcd9 	bl	8000a78 <__aeabi_dcmpeq>
 801f0c6:	2800      	cmp	r0, #0
 801f0c8:	f000 80bf 	beq.w	801f24a <__kernel_rem_pio2+0x402>
 801f0cc:	f108 33ff 	add.w	r3, r8, #4294967295
 801f0d0:	2200      	movs	r2, #0
 801f0d2:	9900      	ldr	r1, [sp, #0]
 801f0d4:	428b      	cmp	r3, r1
 801f0d6:	da6e      	bge.n	801f1b6 <__kernel_rem_pio2+0x36e>
 801f0d8:	2a00      	cmp	r2, #0
 801f0da:	f000 8089 	beq.w	801f1f0 <__kernel_rem_pio2+0x3a8>
 801f0de:	f108 38ff 	add.w	r8, r8, #4294967295
 801f0e2:	ab0c      	add	r3, sp, #48	@ 0x30
 801f0e4:	f1ab 0b18 	sub.w	fp, fp, #24
 801f0e8:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 801f0ec:	2b00      	cmp	r3, #0
 801f0ee:	d0f6      	beq.n	801f0de <__kernel_rem_pio2+0x296>
 801f0f0:	4658      	mov	r0, fp
 801f0f2:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 801f150 <__kernel_rem_pio2+0x308>
 801f0f6:	f000 fc5b 	bl	801f9b0 <scalbn>
 801f0fa:	f108 0301 	add.w	r3, r8, #1
 801f0fe:	00da      	lsls	r2, r3, #3
 801f100:	9205      	str	r2, [sp, #20]
 801f102:	ec55 4b10 	vmov	r4, r5, d0
 801f106:	aa70      	add	r2, sp, #448	@ 0x1c0
 801f108:	f8df b058 	ldr.w	fp, [pc, #88]	@ 801f164 <__kernel_rem_pio2+0x31c>
 801f10c:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 801f110:	4646      	mov	r6, r8
 801f112:	f04f 0a00 	mov.w	sl, #0
 801f116:	2e00      	cmp	r6, #0
 801f118:	f280 80cf 	bge.w	801f2ba <__kernel_rem_pio2+0x472>
 801f11c:	4644      	mov	r4, r8
 801f11e:	2c00      	cmp	r4, #0
 801f120:	f2c0 80fd 	blt.w	801f31e <__kernel_rem_pio2+0x4d6>
 801f124:	4b12      	ldr	r3, [pc, #72]	@ (801f170 <__kernel_rem_pio2+0x328>)
 801f126:	461f      	mov	r7, r3
 801f128:	ab70      	add	r3, sp, #448	@ 0x1c0
 801f12a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801f12e:	9306      	str	r3, [sp, #24]
 801f130:	f04f 0a00 	mov.w	sl, #0
 801f134:	f04f 0b00 	mov.w	fp, #0
 801f138:	2600      	movs	r6, #0
 801f13a:	eba8 0504 	sub.w	r5, r8, r4
 801f13e:	e0e2      	b.n	801f306 <__kernel_rem_pio2+0x4be>
 801f140:	f04f 0902 	mov.w	r9, #2
 801f144:	e754      	b.n	801eff0 <__kernel_rem_pio2+0x1a8>
 801f146:	bf00      	nop
	...
 801f154:	3ff00000 	.word	0x3ff00000
 801f158:	08022930 	.word	0x08022930
 801f15c:	40200000 	.word	0x40200000
 801f160:	3ff00000 	.word	0x3ff00000
 801f164:	3e700000 	.word	0x3e700000
 801f168:	41700000 	.word	0x41700000
 801f16c:	3fe00000 	.word	0x3fe00000
 801f170:	080228f0 	.word	0x080228f0
 801f174:	f854 3b04 	ldr.w	r3, [r4], #4
 801f178:	b945      	cbnz	r5, 801f18c <__kernel_rem_pio2+0x344>
 801f17a:	b123      	cbz	r3, 801f186 <__kernel_rem_pio2+0x33e>
 801f17c:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 801f180:	f844 3c04 	str.w	r3, [r4, #-4]
 801f184:	2301      	movs	r3, #1
 801f186:	3201      	adds	r2, #1
 801f188:	461d      	mov	r5, r3
 801f18a:	e738      	b.n	801effe <__kernel_rem_pio2+0x1b6>
 801f18c:	1acb      	subs	r3, r1, r3
 801f18e:	e7f7      	b.n	801f180 <__kernel_rem_pio2+0x338>
 801f190:	f108 32ff 	add.w	r2, r8, #4294967295
 801f194:	ab0c      	add	r3, sp, #48	@ 0x30
 801f196:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801f19a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801f19e:	a90c      	add	r1, sp, #48	@ 0x30
 801f1a0:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 801f1a4:	e739      	b.n	801f01a <__kernel_rem_pio2+0x1d2>
 801f1a6:	f108 32ff 	add.w	r2, r8, #4294967295
 801f1aa:	ab0c      	add	r3, sp, #48	@ 0x30
 801f1ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801f1b0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801f1b4:	e7f3      	b.n	801f19e <__kernel_rem_pio2+0x356>
 801f1b6:	a90c      	add	r1, sp, #48	@ 0x30
 801f1b8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 801f1bc:	3b01      	subs	r3, #1
 801f1be:	430a      	orrs	r2, r1
 801f1c0:	e787      	b.n	801f0d2 <__kernel_rem_pio2+0x28a>
 801f1c2:	3401      	adds	r4, #1
 801f1c4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 801f1c8:	2a00      	cmp	r2, #0
 801f1ca:	d0fa      	beq.n	801f1c2 <__kernel_rem_pio2+0x37a>
 801f1cc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801f1ce:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 801f1d2:	eb0d 0503 	add.w	r5, sp, r3
 801f1d6:	9b06      	ldr	r3, [sp, #24]
 801f1d8:	aa20      	add	r2, sp, #128	@ 0x80
 801f1da:	4443      	add	r3, r8
 801f1dc:	f108 0701 	add.w	r7, r8, #1
 801f1e0:	3d98      	subs	r5, #152	@ 0x98
 801f1e2:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 801f1e6:	4444      	add	r4, r8
 801f1e8:	42bc      	cmp	r4, r7
 801f1ea:	da04      	bge.n	801f1f6 <__kernel_rem_pio2+0x3ae>
 801f1ec:	46a0      	mov	r8, r4
 801f1ee:	e6a2      	b.n	801ef36 <__kernel_rem_pio2+0xee>
 801f1f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801f1f2:	2401      	movs	r4, #1
 801f1f4:	e7e6      	b.n	801f1c4 <__kernel_rem_pio2+0x37c>
 801f1f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f1f8:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 801f1fc:	f7e1 f96a 	bl	80004d4 <__aeabi_i2d>
 801f200:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 801f4c8 <__kernel_rem_pio2+0x680>
 801f204:	e8e6 0102 	strd	r0, r1, [r6], #8
 801f208:	ed8d 7b02 	vstr	d7, [sp, #8]
 801f20c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801f210:	46b2      	mov	sl, r6
 801f212:	f04f 0800 	mov.w	r8, #0
 801f216:	9b05      	ldr	r3, [sp, #20]
 801f218:	4598      	cmp	r8, r3
 801f21a:	dd05      	ble.n	801f228 <__kernel_rem_pio2+0x3e0>
 801f21c:	ed9d 7b02 	vldr	d7, [sp, #8]
 801f220:	3701      	adds	r7, #1
 801f222:	eca5 7b02 	vstmia	r5!, {d7}
 801f226:	e7df      	b.n	801f1e8 <__kernel_rem_pio2+0x3a0>
 801f228:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 801f22c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 801f230:	f7e1 f9ba 	bl	80005a8 <__aeabi_dmul>
 801f234:	4602      	mov	r2, r0
 801f236:	460b      	mov	r3, r1
 801f238:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f23c:	f7e0 fffe 	bl	800023c <__adddf3>
 801f240:	f108 0801 	add.w	r8, r8, #1
 801f244:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801f248:	e7e5      	b.n	801f216 <__kernel_rem_pio2+0x3ce>
 801f24a:	f1cb 0000 	rsb	r0, fp, #0
 801f24e:	ec47 6b10 	vmov	d0, r6, r7
 801f252:	f000 fbad 	bl	801f9b0 <scalbn>
 801f256:	ec55 4b10 	vmov	r4, r5, d0
 801f25a:	4b9d      	ldr	r3, [pc, #628]	@ (801f4d0 <__kernel_rem_pio2+0x688>)
 801f25c:	2200      	movs	r2, #0
 801f25e:	4620      	mov	r0, r4
 801f260:	4629      	mov	r1, r5
 801f262:	f7e1 fc27 	bl	8000ab4 <__aeabi_dcmpge>
 801f266:	b300      	cbz	r0, 801f2aa <__kernel_rem_pio2+0x462>
 801f268:	4b9a      	ldr	r3, [pc, #616]	@ (801f4d4 <__kernel_rem_pio2+0x68c>)
 801f26a:	2200      	movs	r2, #0
 801f26c:	4620      	mov	r0, r4
 801f26e:	4629      	mov	r1, r5
 801f270:	f7e1 f99a 	bl	80005a8 <__aeabi_dmul>
 801f274:	f7e1 fc48 	bl	8000b08 <__aeabi_d2iz>
 801f278:	4606      	mov	r6, r0
 801f27a:	f7e1 f92b 	bl	80004d4 <__aeabi_i2d>
 801f27e:	4b94      	ldr	r3, [pc, #592]	@ (801f4d0 <__kernel_rem_pio2+0x688>)
 801f280:	2200      	movs	r2, #0
 801f282:	f7e1 f991 	bl	80005a8 <__aeabi_dmul>
 801f286:	460b      	mov	r3, r1
 801f288:	4602      	mov	r2, r0
 801f28a:	4629      	mov	r1, r5
 801f28c:	4620      	mov	r0, r4
 801f28e:	f7e0 ffd3 	bl	8000238 <__aeabi_dsub>
 801f292:	f7e1 fc39 	bl	8000b08 <__aeabi_d2iz>
 801f296:	ab0c      	add	r3, sp, #48	@ 0x30
 801f298:	f10b 0b18 	add.w	fp, fp, #24
 801f29c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 801f2a0:	f108 0801 	add.w	r8, r8, #1
 801f2a4:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 801f2a8:	e722      	b.n	801f0f0 <__kernel_rem_pio2+0x2a8>
 801f2aa:	4620      	mov	r0, r4
 801f2ac:	4629      	mov	r1, r5
 801f2ae:	f7e1 fc2b 	bl	8000b08 <__aeabi_d2iz>
 801f2b2:	ab0c      	add	r3, sp, #48	@ 0x30
 801f2b4:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 801f2b8:	e71a      	b.n	801f0f0 <__kernel_rem_pio2+0x2a8>
 801f2ba:	ab0c      	add	r3, sp, #48	@ 0x30
 801f2bc:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 801f2c0:	f7e1 f908 	bl	80004d4 <__aeabi_i2d>
 801f2c4:	4622      	mov	r2, r4
 801f2c6:	462b      	mov	r3, r5
 801f2c8:	f7e1 f96e 	bl	80005a8 <__aeabi_dmul>
 801f2cc:	4652      	mov	r2, sl
 801f2ce:	e967 0102 	strd	r0, r1, [r7, #-8]!
 801f2d2:	465b      	mov	r3, fp
 801f2d4:	4620      	mov	r0, r4
 801f2d6:	4629      	mov	r1, r5
 801f2d8:	f7e1 f966 	bl	80005a8 <__aeabi_dmul>
 801f2dc:	3e01      	subs	r6, #1
 801f2de:	4604      	mov	r4, r0
 801f2e0:	460d      	mov	r5, r1
 801f2e2:	e718      	b.n	801f116 <__kernel_rem_pio2+0x2ce>
 801f2e4:	9906      	ldr	r1, [sp, #24]
 801f2e6:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 801f2ea:	9106      	str	r1, [sp, #24]
 801f2ec:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 801f2f0:	f7e1 f95a 	bl	80005a8 <__aeabi_dmul>
 801f2f4:	4602      	mov	r2, r0
 801f2f6:	460b      	mov	r3, r1
 801f2f8:	4650      	mov	r0, sl
 801f2fa:	4659      	mov	r1, fp
 801f2fc:	f7e0 ff9e 	bl	800023c <__adddf3>
 801f300:	3601      	adds	r6, #1
 801f302:	4682      	mov	sl, r0
 801f304:	468b      	mov	fp, r1
 801f306:	9b00      	ldr	r3, [sp, #0]
 801f308:	429e      	cmp	r6, r3
 801f30a:	dc01      	bgt.n	801f310 <__kernel_rem_pio2+0x4c8>
 801f30c:	42b5      	cmp	r5, r6
 801f30e:	dae9      	bge.n	801f2e4 <__kernel_rem_pio2+0x49c>
 801f310:	ab48      	add	r3, sp, #288	@ 0x120
 801f312:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 801f316:	e9c5 ab00 	strd	sl, fp, [r5]
 801f31a:	3c01      	subs	r4, #1
 801f31c:	e6ff      	b.n	801f11e <__kernel_rem_pio2+0x2d6>
 801f31e:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 801f320:	2b02      	cmp	r3, #2
 801f322:	dc0b      	bgt.n	801f33c <__kernel_rem_pio2+0x4f4>
 801f324:	2b00      	cmp	r3, #0
 801f326:	dc39      	bgt.n	801f39c <__kernel_rem_pio2+0x554>
 801f328:	d05d      	beq.n	801f3e6 <__kernel_rem_pio2+0x59e>
 801f32a:	9b02      	ldr	r3, [sp, #8]
 801f32c:	f003 0007 	and.w	r0, r3, #7
 801f330:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 801f334:	ecbd 8b02 	vpop	{d8}
 801f338:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f33c:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 801f33e:	2b03      	cmp	r3, #3
 801f340:	d1f3      	bne.n	801f32a <__kernel_rem_pio2+0x4e2>
 801f342:	9b05      	ldr	r3, [sp, #20]
 801f344:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 801f348:	eb0d 0403 	add.w	r4, sp, r3
 801f34c:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 801f350:	4625      	mov	r5, r4
 801f352:	46c2      	mov	sl, r8
 801f354:	f1ba 0f00 	cmp.w	sl, #0
 801f358:	f1a5 0508 	sub.w	r5, r5, #8
 801f35c:	dc6b      	bgt.n	801f436 <__kernel_rem_pio2+0x5ee>
 801f35e:	4645      	mov	r5, r8
 801f360:	2d01      	cmp	r5, #1
 801f362:	f1a4 0408 	sub.w	r4, r4, #8
 801f366:	f300 8087 	bgt.w	801f478 <__kernel_rem_pio2+0x630>
 801f36a:	9c05      	ldr	r4, [sp, #20]
 801f36c:	ab48      	add	r3, sp, #288	@ 0x120
 801f36e:	441c      	add	r4, r3
 801f370:	2000      	movs	r0, #0
 801f372:	2100      	movs	r1, #0
 801f374:	f1b8 0f01 	cmp.w	r8, #1
 801f378:	f300 809c 	bgt.w	801f4b4 <__kernel_rem_pio2+0x66c>
 801f37c:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 801f380:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 801f384:	f1b9 0f00 	cmp.w	r9, #0
 801f388:	f040 80a6 	bne.w	801f4d8 <__kernel_rem_pio2+0x690>
 801f38c:	9b04      	ldr	r3, [sp, #16]
 801f38e:	e9c3 7800 	strd	r7, r8, [r3]
 801f392:	e9c3 5602 	strd	r5, r6, [r3, #8]
 801f396:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801f39a:	e7c6      	b.n	801f32a <__kernel_rem_pio2+0x4e2>
 801f39c:	9d05      	ldr	r5, [sp, #20]
 801f39e:	ab48      	add	r3, sp, #288	@ 0x120
 801f3a0:	441d      	add	r5, r3
 801f3a2:	4644      	mov	r4, r8
 801f3a4:	2000      	movs	r0, #0
 801f3a6:	2100      	movs	r1, #0
 801f3a8:	2c00      	cmp	r4, #0
 801f3aa:	da35      	bge.n	801f418 <__kernel_rem_pio2+0x5d0>
 801f3ac:	f1b9 0f00 	cmp.w	r9, #0
 801f3b0:	d038      	beq.n	801f424 <__kernel_rem_pio2+0x5dc>
 801f3b2:	4602      	mov	r2, r0
 801f3b4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801f3b8:	9c04      	ldr	r4, [sp, #16]
 801f3ba:	e9c4 2300 	strd	r2, r3, [r4]
 801f3be:	4602      	mov	r2, r0
 801f3c0:	460b      	mov	r3, r1
 801f3c2:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 801f3c6:	f7e0 ff37 	bl	8000238 <__aeabi_dsub>
 801f3ca:	ad4a      	add	r5, sp, #296	@ 0x128
 801f3cc:	2401      	movs	r4, #1
 801f3ce:	45a0      	cmp	r8, r4
 801f3d0:	da2b      	bge.n	801f42a <__kernel_rem_pio2+0x5e2>
 801f3d2:	f1b9 0f00 	cmp.w	r9, #0
 801f3d6:	d002      	beq.n	801f3de <__kernel_rem_pio2+0x596>
 801f3d8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801f3dc:	4619      	mov	r1, r3
 801f3de:	9b04      	ldr	r3, [sp, #16]
 801f3e0:	e9c3 0102 	strd	r0, r1, [r3, #8]
 801f3e4:	e7a1      	b.n	801f32a <__kernel_rem_pio2+0x4e2>
 801f3e6:	9c05      	ldr	r4, [sp, #20]
 801f3e8:	ab48      	add	r3, sp, #288	@ 0x120
 801f3ea:	441c      	add	r4, r3
 801f3ec:	2000      	movs	r0, #0
 801f3ee:	2100      	movs	r1, #0
 801f3f0:	f1b8 0f00 	cmp.w	r8, #0
 801f3f4:	da09      	bge.n	801f40a <__kernel_rem_pio2+0x5c2>
 801f3f6:	f1b9 0f00 	cmp.w	r9, #0
 801f3fa:	d002      	beq.n	801f402 <__kernel_rem_pio2+0x5ba>
 801f3fc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801f400:	4619      	mov	r1, r3
 801f402:	9b04      	ldr	r3, [sp, #16]
 801f404:	e9c3 0100 	strd	r0, r1, [r3]
 801f408:	e78f      	b.n	801f32a <__kernel_rem_pio2+0x4e2>
 801f40a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801f40e:	f7e0 ff15 	bl	800023c <__adddf3>
 801f412:	f108 38ff 	add.w	r8, r8, #4294967295
 801f416:	e7eb      	b.n	801f3f0 <__kernel_rem_pio2+0x5a8>
 801f418:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 801f41c:	f7e0 ff0e 	bl	800023c <__adddf3>
 801f420:	3c01      	subs	r4, #1
 801f422:	e7c1      	b.n	801f3a8 <__kernel_rem_pio2+0x560>
 801f424:	4602      	mov	r2, r0
 801f426:	460b      	mov	r3, r1
 801f428:	e7c6      	b.n	801f3b8 <__kernel_rem_pio2+0x570>
 801f42a:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 801f42e:	f7e0 ff05 	bl	800023c <__adddf3>
 801f432:	3401      	adds	r4, #1
 801f434:	e7cb      	b.n	801f3ce <__kernel_rem_pio2+0x586>
 801f436:	ed95 7b00 	vldr	d7, [r5]
 801f43a:	ed8d 7b00 	vstr	d7, [sp]
 801f43e:	ed95 7b02 	vldr	d7, [r5, #8]
 801f442:	e9dd 0100 	ldrd	r0, r1, [sp]
 801f446:	ec53 2b17 	vmov	r2, r3, d7
 801f44a:	ed8d 7b06 	vstr	d7, [sp, #24]
 801f44e:	f7e0 fef5 	bl	800023c <__adddf3>
 801f452:	4602      	mov	r2, r0
 801f454:	460b      	mov	r3, r1
 801f456:	4606      	mov	r6, r0
 801f458:	460f      	mov	r7, r1
 801f45a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801f45e:	f7e0 feeb 	bl	8000238 <__aeabi_dsub>
 801f462:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801f466:	f7e0 fee9 	bl	800023c <__adddf3>
 801f46a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801f46e:	e9c5 0102 	strd	r0, r1, [r5, #8]
 801f472:	e9c5 6700 	strd	r6, r7, [r5]
 801f476:	e76d      	b.n	801f354 <__kernel_rem_pio2+0x50c>
 801f478:	ed94 7b00 	vldr	d7, [r4]
 801f47c:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 801f480:	ec51 0b17 	vmov	r0, r1, d7
 801f484:	4652      	mov	r2, sl
 801f486:	465b      	mov	r3, fp
 801f488:	ed8d 7b00 	vstr	d7, [sp]
 801f48c:	f7e0 fed6 	bl	800023c <__adddf3>
 801f490:	4602      	mov	r2, r0
 801f492:	460b      	mov	r3, r1
 801f494:	4606      	mov	r6, r0
 801f496:	460f      	mov	r7, r1
 801f498:	e9dd 0100 	ldrd	r0, r1, [sp]
 801f49c:	f7e0 fecc 	bl	8000238 <__aeabi_dsub>
 801f4a0:	4652      	mov	r2, sl
 801f4a2:	465b      	mov	r3, fp
 801f4a4:	f7e0 feca 	bl	800023c <__adddf3>
 801f4a8:	3d01      	subs	r5, #1
 801f4aa:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801f4ae:	e9c4 6700 	strd	r6, r7, [r4]
 801f4b2:	e755      	b.n	801f360 <__kernel_rem_pio2+0x518>
 801f4b4:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801f4b8:	f7e0 fec0 	bl	800023c <__adddf3>
 801f4bc:	f108 38ff 	add.w	r8, r8, #4294967295
 801f4c0:	e758      	b.n	801f374 <__kernel_rem_pio2+0x52c>
 801f4c2:	bf00      	nop
 801f4c4:	f3af 8000 	nop.w
	...
 801f4d0:	41700000 	.word	0x41700000
 801f4d4:	3e700000 	.word	0x3e700000
 801f4d8:	9b04      	ldr	r3, [sp, #16]
 801f4da:	9a04      	ldr	r2, [sp, #16]
 801f4dc:	601f      	str	r7, [r3, #0]
 801f4de:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 801f4e2:	605c      	str	r4, [r3, #4]
 801f4e4:	609d      	str	r5, [r3, #8]
 801f4e6:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 801f4ea:	60d3      	str	r3, [r2, #12]
 801f4ec:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801f4f0:	6110      	str	r0, [r2, #16]
 801f4f2:	6153      	str	r3, [r2, #20]
 801f4f4:	e719      	b.n	801f32a <__kernel_rem_pio2+0x4e2>
 801f4f6:	bf00      	nop

0801f4f8 <__ieee754_acos>:
 801f4f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f4fc:	ec55 4b10 	vmov	r4, r5, d0
 801f500:	49b7      	ldr	r1, [pc, #732]	@ (801f7e0 <__ieee754_acos+0x2e8>)
 801f502:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 801f506:	428b      	cmp	r3, r1
 801f508:	d919      	bls.n	801f53e <__ieee754_acos+0x46>
 801f50a:	f103 4340 	add.w	r3, r3, #3221225472	@ 0xc0000000
 801f50e:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 801f512:	4323      	orrs	r3, r4
 801f514:	d106      	bne.n	801f524 <__ieee754_acos+0x2c>
 801f516:	2d00      	cmp	r5, #0
 801f518:	f340 8210 	ble.w	801f93c <__ieee754_acos+0x444>
 801f51c:	ed9f 0b94 	vldr	d0, [pc, #592]	@ 801f770 <__ieee754_acos+0x278>
 801f520:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f524:	4622      	mov	r2, r4
 801f526:	462b      	mov	r3, r5
 801f528:	4620      	mov	r0, r4
 801f52a:	4629      	mov	r1, r5
 801f52c:	f7e0 fe84 	bl	8000238 <__aeabi_dsub>
 801f530:	4602      	mov	r2, r0
 801f532:	460b      	mov	r3, r1
 801f534:	f7e1 f962 	bl	80007fc <__aeabi_ddiv>
 801f538:	ec41 0b10 	vmov	d0, r0, r1
 801f53c:	e7f0      	b.n	801f520 <__ieee754_acos+0x28>
 801f53e:	49a9      	ldr	r1, [pc, #676]	@ (801f7e4 <__ieee754_acos+0x2ec>)
 801f540:	428b      	cmp	r3, r1
 801f542:	f200 8085 	bhi.w	801f650 <__ieee754_acos+0x158>
 801f546:	4aa8      	ldr	r2, [pc, #672]	@ (801f7e8 <__ieee754_acos+0x2f0>)
 801f548:	4293      	cmp	r3, r2
 801f54a:	f240 81fa 	bls.w	801f942 <__ieee754_acos+0x44a>
 801f54e:	4622      	mov	r2, r4
 801f550:	462b      	mov	r3, r5
 801f552:	4620      	mov	r0, r4
 801f554:	4629      	mov	r1, r5
 801f556:	f7e1 f827 	bl	80005a8 <__aeabi_dmul>
 801f55a:	a387      	add	r3, pc, #540	@ (adr r3, 801f778 <__ieee754_acos+0x280>)
 801f55c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f560:	4606      	mov	r6, r0
 801f562:	460f      	mov	r7, r1
 801f564:	f7e1 f820 	bl	80005a8 <__aeabi_dmul>
 801f568:	a385      	add	r3, pc, #532	@ (adr r3, 801f780 <__ieee754_acos+0x288>)
 801f56a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f56e:	f7e0 fe65 	bl	800023c <__adddf3>
 801f572:	4632      	mov	r2, r6
 801f574:	463b      	mov	r3, r7
 801f576:	f7e1 f817 	bl	80005a8 <__aeabi_dmul>
 801f57a:	a383      	add	r3, pc, #524	@ (adr r3, 801f788 <__ieee754_acos+0x290>)
 801f57c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f580:	f7e0 fe5a 	bl	8000238 <__aeabi_dsub>
 801f584:	4632      	mov	r2, r6
 801f586:	463b      	mov	r3, r7
 801f588:	f7e1 f80e 	bl	80005a8 <__aeabi_dmul>
 801f58c:	a380      	add	r3, pc, #512	@ (adr r3, 801f790 <__ieee754_acos+0x298>)
 801f58e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f592:	f7e0 fe53 	bl	800023c <__adddf3>
 801f596:	4632      	mov	r2, r6
 801f598:	463b      	mov	r3, r7
 801f59a:	f7e1 f805 	bl	80005a8 <__aeabi_dmul>
 801f59e:	a37e      	add	r3, pc, #504	@ (adr r3, 801f798 <__ieee754_acos+0x2a0>)
 801f5a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f5a4:	f7e0 fe48 	bl	8000238 <__aeabi_dsub>
 801f5a8:	4632      	mov	r2, r6
 801f5aa:	463b      	mov	r3, r7
 801f5ac:	f7e0 fffc 	bl	80005a8 <__aeabi_dmul>
 801f5b0:	a37b      	add	r3, pc, #492	@ (adr r3, 801f7a0 <__ieee754_acos+0x2a8>)
 801f5b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f5b6:	f7e0 fe41 	bl	800023c <__adddf3>
 801f5ba:	4632      	mov	r2, r6
 801f5bc:	463b      	mov	r3, r7
 801f5be:	f7e0 fff3 	bl	80005a8 <__aeabi_dmul>
 801f5c2:	a379      	add	r3, pc, #484	@ (adr r3, 801f7a8 <__ieee754_acos+0x2b0>)
 801f5c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f5c8:	4680      	mov	r8, r0
 801f5ca:	4689      	mov	r9, r1
 801f5cc:	4630      	mov	r0, r6
 801f5ce:	4639      	mov	r1, r7
 801f5d0:	f7e0 ffea 	bl	80005a8 <__aeabi_dmul>
 801f5d4:	a376      	add	r3, pc, #472	@ (adr r3, 801f7b0 <__ieee754_acos+0x2b8>)
 801f5d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f5da:	f7e0 fe2d 	bl	8000238 <__aeabi_dsub>
 801f5de:	4632      	mov	r2, r6
 801f5e0:	463b      	mov	r3, r7
 801f5e2:	f7e0 ffe1 	bl	80005a8 <__aeabi_dmul>
 801f5e6:	a374      	add	r3, pc, #464	@ (adr r3, 801f7b8 <__ieee754_acos+0x2c0>)
 801f5e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f5ec:	f7e0 fe26 	bl	800023c <__adddf3>
 801f5f0:	4632      	mov	r2, r6
 801f5f2:	463b      	mov	r3, r7
 801f5f4:	f7e0 ffd8 	bl	80005a8 <__aeabi_dmul>
 801f5f8:	a371      	add	r3, pc, #452	@ (adr r3, 801f7c0 <__ieee754_acos+0x2c8>)
 801f5fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f5fe:	f7e0 fe1b 	bl	8000238 <__aeabi_dsub>
 801f602:	4632      	mov	r2, r6
 801f604:	463b      	mov	r3, r7
 801f606:	f7e0 ffcf 	bl	80005a8 <__aeabi_dmul>
 801f60a:	4b78      	ldr	r3, [pc, #480]	@ (801f7ec <__ieee754_acos+0x2f4>)
 801f60c:	2200      	movs	r2, #0
 801f60e:	f7e0 fe15 	bl	800023c <__adddf3>
 801f612:	4602      	mov	r2, r0
 801f614:	460b      	mov	r3, r1
 801f616:	4640      	mov	r0, r8
 801f618:	4649      	mov	r1, r9
 801f61a:	f7e1 f8ef 	bl	80007fc <__aeabi_ddiv>
 801f61e:	4622      	mov	r2, r4
 801f620:	462b      	mov	r3, r5
 801f622:	f7e0 ffc1 	bl	80005a8 <__aeabi_dmul>
 801f626:	4602      	mov	r2, r0
 801f628:	460b      	mov	r3, r1
 801f62a:	a167      	add	r1, pc, #412	@ (adr r1, 801f7c8 <__ieee754_acos+0x2d0>)
 801f62c:	e9d1 0100 	ldrd	r0, r1, [r1]
 801f630:	f7e0 fe02 	bl	8000238 <__aeabi_dsub>
 801f634:	4602      	mov	r2, r0
 801f636:	460b      	mov	r3, r1
 801f638:	4620      	mov	r0, r4
 801f63a:	4629      	mov	r1, r5
 801f63c:	f7e0 fdfc 	bl	8000238 <__aeabi_dsub>
 801f640:	4602      	mov	r2, r0
 801f642:	460b      	mov	r3, r1
 801f644:	a162      	add	r1, pc, #392	@ (adr r1, 801f7d0 <__ieee754_acos+0x2d8>)
 801f646:	e9d1 0100 	ldrd	r0, r1, [r1]
 801f64a:	f7e0 fdf5 	bl	8000238 <__aeabi_dsub>
 801f64e:	e773      	b.n	801f538 <__ieee754_acos+0x40>
 801f650:	2d00      	cmp	r5, #0
 801f652:	f280 80cf 	bge.w	801f7f4 <__ieee754_acos+0x2fc>
 801f656:	4b65      	ldr	r3, [pc, #404]	@ (801f7ec <__ieee754_acos+0x2f4>)
 801f658:	2200      	movs	r2, #0
 801f65a:	4620      	mov	r0, r4
 801f65c:	4629      	mov	r1, r5
 801f65e:	f7e0 fded 	bl	800023c <__adddf3>
 801f662:	4b63      	ldr	r3, [pc, #396]	@ (801f7f0 <__ieee754_acos+0x2f8>)
 801f664:	2200      	movs	r2, #0
 801f666:	f7e0 ff9f 	bl	80005a8 <__aeabi_dmul>
 801f66a:	a343      	add	r3, pc, #268	@ (adr r3, 801f778 <__ieee754_acos+0x280>)
 801f66c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f670:	4604      	mov	r4, r0
 801f672:	460d      	mov	r5, r1
 801f674:	f7e0 ff98 	bl	80005a8 <__aeabi_dmul>
 801f678:	a341      	add	r3, pc, #260	@ (adr r3, 801f780 <__ieee754_acos+0x288>)
 801f67a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f67e:	f7e0 fddd 	bl	800023c <__adddf3>
 801f682:	4622      	mov	r2, r4
 801f684:	462b      	mov	r3, r5
 801f686:	f7e0 ff8f 	bl	80005a8 <__aeabi_dmul>
 801f68a:	a33f      	add	r3, pc, #252	@ (adr r3, 801f788 <__ieee754_acos+0x290>)
 801f68c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f690:	f7e0 fdd2 	bl	8000238 <__aeabi_dsub>
 801f694:	4622      	mov	r2, r4
 801f696:	462b      	mov	r3, r5
 801f698:	f7e0 ff86 	bl	80005a8 <__aeabi_dmul>
 801f69c:	a33c      	add	r3, pc, #240	@ (adr r3, 801f790 <__ieee754_acos+0x298>)
 801f69e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f6a2:	f7e0 fdcb 	bl	800023c <__adddf3>
 801f6a6:	4622      	mov	r2, r4
 801f6a8:	462b      	mov	r3, r5
 801f6aa:	f7e0 ff7d 	bl	80005a8 <__aeabi_dmul>
 801f6ae:	a33a      	add	r3, pc, #232	@ (adr r3, 801f798 <__ieee754_acos+0x2a0>)
 801f6b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f6b4:	f7e0 fdc0 	bl	8000238 <__aeabi_dsub>
 801f6b8:	4622      	mov	r2, r4
 801f6ba:	462b      	mov	r3, r5
 801f6bc:	f7e0 ff74 	bl	80005a8 <__aeabi_dmul>
 801f6c0:	a337      	add	r3, pc, #220	@ (adr r3, 801f7a0 <__ieee754_acos+0x2a8>)
 801f6c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f6c6:	f7e0 fdb9 	bl	800023c <__adddf3>
 801f6ca:	4622      	mov	r2, r4
 801f6cc:	462b      	mov	r3, r5
 801f6ce:	f7e0 ff6b 	bl	80005a8 <__aeabi_dmul>
 801f6d2:	a335      	add	r3, pc, #212	@ (adr r3, 801f7a8 <__ieee754_acos+0x2b0>)
 801f6d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f6d8:	4606      	mov	r6, r0
 801f6da:	460f      	mov	r7, r1
 801f6dc:	4620      	mov	r0, r4
 801f6de:	4629      	mov	r1, r5
 801f6e0:	f7e0 ff62 	bl	80005a8 <__aeabi_dmul>
 801f6e4:	a332      	add	r3, pc, #200	@ (adr r3, 801f7b0 <__ieee754_acos+0x2b8>)
 801f6e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f6ea:	f7e0 fda5 	bl	8000238 <__aeabi_dsub>
 801f6ee:	4622      	mov	r2, r4
 801f6f0:	462b      	mov	r3, r5
 801f6f2:	f7e0 ff59 	bl	80005a8 <__aeabi_dmul>
 801f6f6:	a330      	add	r3, pc, #192	@ (adr r3, 801f7b8 <__ieee754_acos+0x2c0>)
 801f6f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f6fc:	f7e0 fd9e 	bl	800023c <__adddf3>
 801f700:	4622      	mov	r2, r4
 801f702:	462b      	mov	r3, r5
 801f704:	f7e0 ff50 	bl	80005a8 <__aeabi_dmul>
 801f708:	a32d      	add	r3, pc, #180	@ (adr r3, 801f7c0 <__ieee754_acos+0x2c8>)
 801f70a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f70e:	f7e0 fd93 	bl	8000238 <__aeabi_dsub>
 801f712:	4622      	mov	r2, r4
 801f714:	462b      	mov	r3, r5
 801f716:	f7e0 ff47 	bl	80005a8 <__aeabi_dmul>
 801f71a:	4b34      	ldr	r3, [pc, #208]	@ (801f7ec <__ieee754_acos+0x2f4>)
 801f71c:	2200      	movs	r2, #0
 801f71e:	f7e0 fd8d 	bl	800023c <__adddf3>
 801f722:	ec45 4b10 	vmov	d0, r4, r5
 801f726:	4680      	mov	r8, r0
 801f728:	4689      	mov	r9, r1
 801f72a:	f000 f9bf 	bl	801faac <__ieee754_sqrt>
 801f72e:	ec55 4b10 	vmov	r4, r5, d0
 801f732:	4642      	mov	r2, r8
 801f734:	464b      	mov	r3, r9
 801f736:	4630      	mov	r0, r6
 801f738:	4639      	mov	r1, r7
 801f73a:	f7e1 f85f 	bl	80007fc <__aeabi_ddiv>
 801f73e:	4622      	mov	r2, r4
 801f740:	462b      	mov	r3, r5
 801f742:	f7e0 ff31 	bl	80005a8 <__aeabi_dmul>
 801f746:	a320      	add	r3, pc, #128	@ (adr r3, 801f7c8 <__ieee754_acos+0x2d0>)
 801f748:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f74c:	f7e0 fd74 	bl	8000238 <__aeabi_dsub>
 801f750:	4622      	mov	r2, r4
 801f752:	462b      	mov	r3, r5
 801f754:	f7e0 fd72 	bl	800023c <__adddf3>
 801f758:	4602      	mov	r2, r0
 801f75a:	460b      	mov	r3, r1
 801f75c:	f7e0 fd6e 	bl	800023c <__adddf3>
 801f760:	4602      	mov	r2, r0
 801f762:	460b      	mov	r3, r1
 801f764:	a11c      	add	r1, pc, #112	@ (adr r1, 801f7d8 <__ieee754_acos+0x2e0>)
 801f766:	e9d1 0100 	ldrd	r0, r1, [r1]
 801f76a:	e76e      	b.n	801f64a <__ieee754_acos+0x152>
 801f76c:	f3af 8000 	nop.w
	...
 801f778:	0dfdf709 	.word	0x0dfdf709
 801f77c:	3f023de1 	.word	0x3f023de1
 801f780:	7501b288 	.word	0x7501b288
 801f784:	3f49efe0 	.word	0x3f49efe0
 801f788:	b5688f3b 	.word	0xb5688f3b
 801f78c:	3fa48228 	.word	0x3fa48228
 801f790:	0e884455 	.word	0x0e884455
 801f794:	3fc9c155 	.word	0x3fc9c155
 801f798:	03eb6f7d 	.word	0x03eb6f7d
 801f79c:	3fd4d612 	.word	0x3fd4d612
 801f7a0:	55555555 	.word	0x55555555
 801f7a4:	3fc55555 	.word	0x3fc55555
 801f7a8:	b12e9282 	.word	0xb12e9282
 801f7ac:	3fb3b8c5 	.word	0x3fb3b8c5
 801f7b0:	1b8d0159 	.word	0x1b8d0159
 801f7b4:	3fe6066c 	.word	0x3fe6066c
 801f7b8:	9c598ac8 	.word	0x9c598ac8
 801f7bc:	40002ae5 	.word	0x40002ae5
 801f7c0:	1c8a2d4b 	.word	0x1c8a2d4b
 801f7c4:	40033a27 	.word	0x40033a27
 801f7c8:	33145c07 	.word	0x33145c07
 801f7cc:	3c91a626 	.word	0x3c91a626
 801f7d0:	54442d18 	.word	0x54442d18
 801f7d4:	3ff921fb 	.word	0x3ff921fb
 801f7d8:	54442d18 	.word	0x54442d18
 801f7dc:	400921fb 	.word	0x400921fb
 801f7e0:	3fefffff 	.word	0x3fefffff
 801f7e4:	3fdfffff 	.word	0x3fdfffff
 801f7e8:	3c600000 	.word	0x3c600000
 801f7ec:	3ff00000 	.word	0x3ff00000
 801f7f0:	3fe00000 	.word	0x3fe00000
 801f7f4:	4622      	mov	r2, r4
 801f7f6:	462b      	mov	r3, r5
 801f7f8:	496b      	ldr	r1, [pc, #428]	@ (801f9a8 <__ieee754_acos+0x4b0>)
 801f7fa:	2000      	movs	r0, #0
 801f7fc:	f7e0 fd1c 	bl	8000238 <__aeabi_dsub>
 801f800:	4b6a      	ldr	r3, [pc, #424]	@ (801f9ac <__ieee754_acos+0x4b4>)
 801f802:	2200      	movs	r2, #0
 801f804:	f7e0 fed0 	bl	80005a8 <__aeabi_dmul>
 801f808:	4604      	mov	r4, r0
 801f80a:	460d      	mov	r5, r1
 801f80c:	ec45 4b10 	vmov	d0, r4, r5
 801f810:	f000 f94c 	bl	801faac <__ieee754_sqrt>
 801f814:	a34c      	add	r3, pc, #304	@ (adr r3, 801f948 <__ieee754_acos+0x450>)
 801f816:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f81a:	4620      	mov	r0, r4
 801f81c:	4629      	mov	r1, r5
 801f81e:	ec59 8b10 	vmov	r8, r9, d0
 801f822:	f7e0 fec1 	bl	80005a8 <__aeabi_dmul>
 801f826:	a34a      	add	r3, pc, #296	@ (adr r3, 801f950 <__ieee754_acos+0x458>)
 801f828:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f82c:	f7e0 fd06 	bl	800023c <__adddf3>
 801f830:	4622      	mov	r2, r4
 801f832:	462b      	mov	r3, r5
 801f834:	f7e0 feb8 	bl	80005a8 <__aeabi_dmul>
 801f838:	a347      	add	r3, pc, #284	@ (adr r3, 801f958 <__ieee754_acos+0x460>)
 801f83a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f83e:	f7e0 fcfb 	bl	8000238 <__aeabi_dsub>
 801f842:	4622      	mov	r2, r4
 801f844:	462b      	mov	r3, r5
 801f846:	f7e0 feaf 	bl	80005a8 <__aeabi_dmul>
 801f84a:	a345      	add	r3, pc, #276	@ (adr r3, 801f960 <__ieee754_acos+0x468>)
 801f84c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f850:	f7e0 fcf4 	bl	800023c <__adddf3>
 801f854:	4622      	mov	r2, r4
 801f856:	462b      	mov	r3, r5
 801f858:	f7e0 fea6 	bl	80005a8 <__aeabi_dmul>
 801f85c:	a342      	add	r3, pc, #264	@ (adr r3, 801f968 <__ieee754_acos+0x470>)
 801f85e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f862:	f7e0 fce9 	bl	8000238 <__aeabi_dsub>
 801f866:	4622      	mov	r2, r4
 801f868:	462b      	mov	r3, r5
 801f86a:	f7e0 fe9d 	bl	80005a8 <__aeabi_dmul>
 801f86e:	a340      	add	r3, pc, #256	@ (adr r3, 801f970 <__ieee754_acos+0x478>)
 801f870:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f874:	f7e0 fce2 	bl	800023c <__adddf3>
 801f878:	4622      	mov	r2, r4
 801f87a:	462b      	mov	r3, r5
 801f87c:	f7e0 fe94 	bl	80005a8 <__aeabi_dmul>
 801f880:	a33d      	add	r3, pc, #244	@ (adr r3, 801f978 <__ieee754_acos+0x480>)
 801f882:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f886:	4682      	mov	sl, r0
 801f888:	468b      	mov	fp, r1
 801f88a:	4620      	mov	r0, r4
 801f88c:	4629      	mov	r1, r5
 801f88e:	f7e0 fe8b 	bl	80005a8 <__aeabi_dmul>
 801f892:	a33b      	add	r3, pc, #236	@ (adr r3, 801f980 <__ieee754_acos+0x488>)
 801f894:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f898:	f7e0 fcce 	bl	8000238 <__aeabi_dsub>
 801f89c:	4622      	mov	r2, r4
 801f89e:	462b      	mov	r3, r5
 801f8a0:	f7e0 fe82 	bl	80005a8 <__aeabi_dmul>
 801f8a4:	a338      	add	r3, pc, #224	@ (adr r3, 801f988 <__ieee754_acos+0x490>)
 801f8a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f8aa:	f7e0 fcc7 	bl	800023c <__adddf3>
 801f8ae:	4622      	mov	r2, r4
 801f8b0:	462b      	mov	r3, r5
 801f8b2:	f7e0 fe79 	bl	80005a8 <__aeabi_dmul>
 801f8b6:	a336      	add	r3, pc, #216	@ (adr r3, 801f990 <__ieee754_acos+0x498>)
 801f8b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f8bc:	f7e0 fcbc 	bl	8000238 <__aeabi_dsub>
 801f8c0:	4622      	mov	r2, r4
 801f8c2:	462b      	mov	r3, r5
 801f8c4:	f7e0 fe70 	bl	80005a8 <__aeabi_dmul>
 801f8c8:	4b37      	ldr	r3, [pc, #220]	@ (801f9a8 <__ieee754_acos+0x4b0>)
 801f8ca:	2200      	movs	r2, #0
 801f8cc:	f7e0 fcb6 	bl	800023c <__adddf3>
 801f8d0:	4602      	mov	r2, r0
 801f8d2:	460b      	mov	r3, r1
 801f8d4:	4650      	mov	r0, sl
 801f8d6:	4659      	mov	r1, fp
 801f8d8:	f7e0 ff90 	bl	80007fc <__aeabi_ddiv>
 801f8dc:	4642      	mov	r2, r8
 801f8de:	464b      	mov	r3, r9
 801f8e0:	f7e0 fe62 	bl	80005a8 <__aeabi_dmul>
 801f8e4:	2600      	movs	r6, #0
 801f8e6:	4682      	mov	sl, r0
 801f8e8:	468b      	mov	fp, r1
 801f8ea:	4632      	mov	r2, r6
 801f8ec:	464b      	mov	r3, r9
 801f8ee:	4630      	mov	r0, r6
 801f8f0:	4649      	mov	r1, r9
 801f8f2:	f7e0 fe59 	bl	80005a8 <__aeabi_dmul>
 801f8f6:	4602      	mov	r2, r0
 801f8f8:	460b      	mov	r3, r1
 801f8fa:	4620      	mov	r0, r4
 801f8fc:	4629      	mov	r1, r5
 801f8fe:	f7e0 fc9b 	bl	8000238 <__aeabi_dsub>
 801f902:	4632      	mov	r2, r6
 801f904:	4604      	mov	r4, r0
 801f906:	460d      	mov	r5, r1
 801f908:	464b      	mov	r3, r9
 801f90a:	4640      	mov	r0, r8
 801f90c:	4649      	mov	r1, r9
 801f90e:	f7e0 fc95 	bl	800023c <__adddf3>
 801f912:	4602      	mov	r2, r0
 801f914:	460b      	mov	r3, r1
 801f916:	4620      	mov	r0, r4
 801f918:	4629      	mov	r1, r5
 801f91a:	f7e0 ff6f 	bl	80007fc <__aeabi_ddiv>
 801f91e:	4602      	mov	r2, r0
 801f920:	460b      	mov	r3, r1
 801f922:	4650      	mov	r0, sl
 801f924:	4659      	mov	r1, fp
 801f926:	f7e0 fc89 	bl	800023c <__adddf3>
 801f92a:	4632      	mov	r2, r6
 801f92c:	464b      	mov	r3, r9
 801f92e:	f7e0 fc85 	bl	800023c <__adddf3>
 801f932:	4602      	mov	r2, r0
 801f934:	460b      	mov	r3, r1
 801f936:	f7e0 fc81 	bl	800023c <__adddf3>
 801f93a:	e5fd      	b.n	801f538 <__ieee754_acos+0x40>
 801f93c:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 801f998 <__ieee754_acos+0x4a0>
 801f940:	e5ee      	b.n	801f520 <__ieee754_acos+0x28>
 801f942:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 801f9a0 <__ieee754_acos+0x4a8>
 801f946:	e5eb      	b.n	801f520 <__ieee754_acos+0x28>
 801f948:	0dfdf709 	.word	0x0dfdf709
 801f94c:	3f023de1 	.word	0x3f023de1
 801f950:	7501b288 	.word	0x7501b288
 801f954:	3f49efe0 	.word	0x3f49efe0
 801f958:	b5688f3b 	.word	0xb5688f3b
 801f95c:	3fa48228 	.word	0x3fa48228
 801f960:	0e884455 	.word	0x0e884455
 801f964:	3fc9c155 	.word	0x3fc9c155
 801f968:	03eb6f7d 	.word	0x03eb6f7d
 801f96c:	3fd4d612 	.word	0x3fd4d612
 801f970:	55555555 	.word	0x55555555
 801f974:	3fc55555 	.word	0x3fc55555
 801f978:	b12e9282 	.word	0xb12e9282
 801f97c:	3fb3b8c5 	.word	0x3fb3b8c5
 801f980:	1b8d0159 	.word	0x1b8d0159
 801f984:	3fe6066c 	.word	0x3fe6066c
 801f988:	9c598ac8 	.word	0x9c598ac8
 801f98c:	40002ae5 	.word	0x40002ae5
 801f990:	1c8a2d4b 	.word	0x1c8a2d4b
 801f994:	40033a27 	.word	0x40033a27
 801f998:	54442d18 	.word	0x54442d18
 801f99c:	400921fb 	.word	0x400921fb
 801f9a0:	54442d18 	.word	0x54442d18
 801f9a4:	3ff921fb 	.word	0x3ff921fb
 801f9a8:	3ff00000 	.word	0x3ff00000
 801f9ac:	3fe00000 	.word	0x3fe00000

0801f9b0 <scalbn>:
 801f9b0:	b570      	push	{r4, r5, r6, lr}
 801f9b2:	ec55 4b10 	vmov	r4, r5, d0
 801f9b6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 801f9ba:	4606      	mov	r6, r0
 801f9bc:	462b      	mov	r3, r5
 801f9be:	b991      	cbnz	r1, 801f9e6 <scalbn+0x36>
 801f9c0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 801f9c4:	4323      	orrs	r3, r4
 801f9c6:	d03d      	beq.n	801fa44 <scalbn+0x94>
 801f9c8:	4b35      	ldr	r3, [pc, #212]	@ (801faa0 <scalbn+0xf0>)
 801f9ca:	4620      	mov	r0, r4
 801f9cc:	4629      	mov	r1, r5
 801f9ce:	2200      	movs	r2, #0
 801f9d0:	f7e0 fdea 	bl	80005a8 <__aeabi_dmul>
 801f9d4:	4b33      	ldr	r3, [pc, #204]	@ (801faa4 <scalbn+0xf4>)
 801f9d6:	429e      	cmp	r6, r3
 801f9d8:	4604      	mov	r4, r0
 801f9da:	460d      	mov	r5, r1
 801f9dc:	da0f      	bge.n	801f9fe <scalbn+0x4e>
 801f9de:	a328      	add	r3, pc, #160	@ (adr r3, 801fa80 <scalbn+0xd0>)
 801f9e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f9e4:	e01e      	b.n	801fa24 <scalbn+0x74>
 801f9e6:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 801f9ea:	4291      	cmp	r1, r2
 801f9ec:	d10b      	bne.n	801fa06 <scalbn+0x56>
 801f9ee:	4622      	mov	r2, r4
 801f9f0:	4620      	mov	r0, r4
 801f9f2:	4629      	mov	r1, r5
 801f9f4:	f7e0 fc22 	bl	800023c <__adddf3>
 801f9f8:	4604      	mov	r4, r0
 801f9fa:	460d      	mov	r5, r1
 801f9fc:	e022      	b.n	801fa44 <scalbn+0x94>
 801f9fe:	460b      	mov	r3, r1
 801fa00:	f3c1 510a 	ubfx	r1, r1, #20, #11
 801fa04:	3936      	subs	r1, #54	@ 0x36
 801fa06:	f24c 3250 	movw	r2, #50000	@ 0xc350
 801fa0a:	4296      	cmp	r6, r2
 801fa0c:	dd0d      	ble.n	801fa2a <scalbn+0x7a>
 801fa0e:	2d00      	cmp	r5, #0
 801fa10:	a11d      	add	r1, pc, #116	@ (adr r1, 801fa88 <scalbn+0xd8>)
 801fa12:	e9d1 0100 	ldrd	r0, r1, [r1]
 801fa16:	da02      	bge.n	801fa1e <scalbn+0x6e>
 801fa18:	a11d      	add	r1, pc, #116	@ (adr r1, 801fa90 <scalbn+0xe0>)
 801fa1a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801fa1e:	a31a      	add	r3, pc, #104	@ (adr r3, 801fa88 <scalbn+0xd8>)
 801fa20:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fa24:	f7e0 fdc0 	bl	80005a8 <__aeabi_dmul>
 801fa28:	e7e6      	b.n	801f9f8 <scalbn+0x48>
 801fa2a:	1872      	adds	r2, r6, r1
 801fa2c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 801fa30:	428a      	cmp	r2, r1
 801fa32:	dcec      	bgt.n	801fa0e <scalbn+0x5e>
 801fa34:	2a00      	cmp	r2, #0
 801fa36:	dd08      	ble.n	801fa4a <scalbn+0x9a>
 801fa38:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801fa3c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 801fa40:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801fa44:	ec45 4b10 	vmov	d0, r4, r5
 801fa48:	bd70      	pop	{r4, r5, r6, pc}
 801fa4a:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 801fa4e:	da08      	bge.n	801fa62 <scalbn+0xb2>
 801fa50:	2d00      	cmp	r5, #0
 801fa52:	a10b      	add	r1, pc, #44	@ (adr r1, 801fa80 <scalbn+0xd0>)
 801fa54:	e9d1 0100 	ldrd	r0, r1, [r1]
 801fa58:	dac1      	bge.n	801f9de <scalbn+0x2e>
 801fa5a:	a10f      	add	r1, pc, #60	@ (adr r1, 801fa98 <scalbn+0xe8>)
 801fa5c:	e9d1 0100 	ldrd	r0, r1, [r1]
 801fa60:	e7bd      	b.n	801f9de <scalbn+0x2e>
 801fa62:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801fa66:	3236      	adds	r2, #54	@ 0x36
 801fa68:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 801fa6c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801fa70:	4620      	mov	r0, r4
 801fa72:	4b0d      	ldr	r3, [pc, #52]	@ (801faa8 <scalbn+0xf8>)
 801fa74:	4629      	mov	r1, r5
 801fa76:	2200      	movs	r2, #0
 801fa78:	e7d4      	b.n	801fa24 <scalbn+0x74>
 801fa7a:	bf00      	nop
 801fa7c:	f3af 8000 	nop.w
 801fa80:	c2f8f359 	.word	0xc2f8f359
 801fa84:	01a56e1f 	.word	0x01a56e1f
 801fa88:	8800759c 	.word	0x8800759c
 801fa8c:	7e37e43c 	.word	0x7e37e43c
 801fa90:	8800759c 	.word	0x8800759c
 801fa94:	fe37e43c 	.word	0xfe37e43c
 801fa98:	c2f8f359 	.word	0xc2f8f359
 801fa9c:	81a56e1f 	.word	0x81a56e1f
 801faa0:	43500000 	.word	0x43500000
 801faa4:	ffff3cb0 	.word	0xffff3cb0
 801faa8:	3c900000 	.word	0x3c900000

0801faac <__ieee754_sqrt>:
 801faac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fab0:	4a68      	ldr	r2, [pc, #416]	@ (801fc54 <__ieee754_sqrt+0x1a8>)
 801fab2:	ec55 4b10 	vmov	r4, r5, d0
 801fab6:	43aa      	bics	r2, r5
 801fab8:	462b      	mov	r3, r5
 801faba:	4621      	mov	r1, r4
 801fabc:	d110      	bne.n	801fae0 <__ieee754_sqrt+0x34>
 801fabe:	4622      	mov	r2, r4
 801fac0:	4620      	mov	r0, r4
 801fac2:	4629      	mov	r1, r5
 801fac4:	f7e0 fd70 	bl	80005a8 <__aeabi_dmul>
 801fac8:	4602      	mov	r2, r0
 801faca:	460b      	mov	r3, r1
 801facc:	4620      	mov	r0, r4
 801face:	4629      	mov	r1, r5
 801fad0:	f7e0 fbb4 	bl	800023c <__adddf3>
 801fad4:	4604      	mov	r4, r0
 801fad6:	460d      	mov	r5, r1
 801fad8:	ec45 4b10 	vmov	d0, r4, r5
 801fadc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fae0:	2d00      	cmp	r5, #0
 801fae2:	dc0e      	bgt.n	801fb02 <__ieee754_sqrt+0x56>
 801fae4:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 801fae8:	4322      	orrs	r2, r4
 801faea:	d0f5      	beq.n	801fad8 <__ieee754_sqrt+0x2c>
 801faec:	b19d      	cbz	r5, 801fb16 <__ieee754_sqrt+0x6a>
 801faee:	4622      	mov	r2, r4
 801faf0:	4620      	mov	r0, r4
 801faf2:	4629      	mov	r1, r5
 801faf4:	f7e0 fba0 	bl	8000238 <__aeabi_dsub>
 801faf8:	4602      	mov	r2, r0
 801fafa:	460b      	mov	r3, r1
 801fafc:	f7e0 fe7e 	bl	80007fc <__aeabi_ddiv>
 801fb00:	e7e8      	b.n	801fad4 <__ieee754_sqrt+0x28>
 801fb02:	152a      	asrs	r2, r5, #20
 801fb04:	d115      	bne.n	801fb32 <__ieee754_sqrt+0x86>
 801fb06:	2000      	movs	r0, #0
 801fb08:	e009      	b.n	801fb1e <__ieee754_sqrt+0x72>
 801fb0a:	0acb      	lsrs	r3, r1, #11
 801fb0c:	3a15      	subs	r2, #21
 801fb0e:	0549      	lsls	r1, r1, #21
 801fb10:	2b00      	cmp	r3, #0
 801fb12:	d0fa      	beq.n	801fb0a <__ieee754_sqrt+0x5e>
 801fb14:	e7f7      	b.n	801fb06 <__ieee754_sqrt+0x5a>
 801fb16:	462a      	mov	r2, r5
 801fb18:	e7fa      	b.n	801fb10 <__ieee754_sqrt+0x64>
 801fb1a:	005b      	lsls	r3, r3, #1
 801fb1c:	3001      	adds	r0, #1
 801fb1e:	02dc      	lsls	r4, r3, #11
 801fb20:	d5fb      	bpl.n	801fb1a <__ieee754_sqrt+0x6e>
 801fb22:	1e44      	subs	r4, r0, #1
 801fb24:	1b12      	subs	r2, r2, r4
 801fb26:	f1c0 0420 	rsb	r4, r0, #32
 801fb2a:	fa21 f404 	lsr.w	r4, r1, r4
 801fb2e:	4323      	orrs	r3, r4
 801fb30:	4081      	lsls	r1, r0
 801fb32:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801fb36:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 801fb3a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801fb3e:	07d2      	lsls	r2, r2, #31
 801fb40:	bf5c      	itt	pl
 801fb42:	005b      	lslpl	r3, r3, #1
 801fb44:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 801fb48:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801fb4c:	bf58      	it	pl
 801fb4e:	0049      	lslpl	r1, r1, #1
 801fb50:	2600      	movs	r6, #0
 801fb52:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 801fb56:	106d      	asrs	r5, r5, #1
 801fb58:	0049      	lsls	r1, r1, #1
 801fb5a:	2016      	movs	r0, #22
 801fb5c:	4632      	mov	r2, r6
 801fb5e:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 801fb62:	1917      	adds	r7, r2, r4
 801fb64:	429f      	cmp	r7, r3
 801fb66:	bfde      	ittt	le
 801fb68:	193a      	addle	r2, r7, r4
 801fb6a:	1bdb      	suble	r3, r3, r7
 801fb6c:	1936      	addle	r6, r6, r4
 801fb6e:	0fcf      	lsrs	r7, r1, #31
 801fb70:	3801      	subs	r0, #1
 801fb72:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 801fb76:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801fb7a:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801fb7e:	d1f0      	bne.n	801fb62 <__ieee754_sqrt+0xb6>
 801fb80:	4604      	mov	r4, r0
 801fb82:	2720      	movs	r7, #32
 801fb84:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 801fb88:	429a      	cmp	r2, r3
 801fb8a:	eb00 0e0c 	add.w	lr, r0, ip
 801fb8e:	db02      	blt.n	801fb96 <__ieee754_sqrt+0xea>
 801fb90:	d113      	bne.n	801fbba <__ieee754_sqrt+0x10e>
 801fb92:	458e      	cmp	lr, r1
 801fb94:	d811      	bhi.n	801fbba <__ieee754_sqrt+0x10e>
 801fb96:	f1be 0f00 	cmp.w	lr, #0
 801fb9a:	eb0e 000c 	add.w	r0, lr, ip
 801fb9e:	da42      	bge.n	801fc26 <__ieee754_sqrt+0x17a>
 801fba0:	2800      	cmp	r0, #0
 801fba2:	db40      	blt.n	801fc26 <__ieee754_sqrt+0x17a>
 801fba4:	f102 0801 	add.w	r8, r2, #1
 801fba8:	1a9b      	subs	r3, r3, r2
 801fbaa:	458e      	cmp	lr, r1
 801fbac:	bf88      	it	hi
 801fbae:	f103 33ff 	addhi.w	r3, r3, #4294967295
 801fbb2:	eba1 010e 	sub.w	r1, r1, lr
 801fbb6:	4464      	add	r4, ip
 801fbb8:	4642      	mov	r2, r8
 801fbba:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 801fbbe:	3f01      	subs	r7, #1
 801fbc0:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 801fbc4:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801fbc8:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 801fbcc:	d1dc      	bne.n	801fb88 <__ieee754_sqrt+0xdc>
 801fbce:	4319      	orrs	r1, r3
 801fbd0:	d01b      	beq.n	801fc0a <__ieee754_sqrt+0x15e>
 801fbd2:	f8df a084 	ldr.w	sl, [pc, #132]	@ 801fc58 <__ieee754_sqrt+0x1ac>
 801fbd6:	f8df b084 	ldr.w	fp, [pc, #132]	@ 801fc5c <__ieee754_sqrt+0x1b0>
 801fbda:	e9da 0100 	ldrd	r0, r1, [sl]
 801fbde:	e9db 2300 	ldrd	r2, r3, [fp]
 801fbe2:	f7e0 fb29 	bl	8000238 <__aeabi_dsub>
 801fbe6:	e9da 8900 	ldrd	r8, r9, [sl]
 801fbea:	4602      	mov	r2, r0
 801fbec:	460b      	mov	r3, r1
 801fbee:	4640      	mov	r0, r8
 801fbf0:	4649      	mov	r1, r9
 801fbf2:	f7e0 ff55 	bl	8000aa0 <__aeabi_dcmple>
 801fbf6:	b140      	cbz	r0, 801fc0a <__ieee754_sqrt+0x15e>
 801fbf8:	f1b4 3fff 	cmp.w	r4, #4294967295
 801fbfc:	e9da 0100 	ldrd	r0, r1, [sl]
 801fc00:	e9db 2300 	ldrd	r2, r3, [fp]
 801fc04:	d111      	bne.n	801fc2a <__ieee754_sqrt+0x17e>
 801fc06:	3601      	adds	r6, #1
 801fc08:	463c      	mov	r4, r7
 801fc0a:	1072      	asrs	r2, r6, #1
 801fc0c:	0863      	lsrs	r3, r4, #1
 801fc0e:	07f1      	lsls	r1, r6, #31
 801fc10:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 801fc14:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 801fc18:	bf48      	it	mi
 801fc1a:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 801fc1e:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 801fc22:	4618      	mov	r0, r3
 801fc24:	e756      	b.n	801fad4 <__ieee754_sqrt+0x28>
 801fc26:	4690      	mov	r8, r2
 801fc28:	e7be      	b.n	801fba8 <__ieee754_sqrt+0xfc>
 801fc2a:	f7e0 fb07 	bl	800023c <__adddf3>
 801fc2e:	e9da 8900 	ldrd	r8, r9, [sl]
 801fc32:	4602      	mov	r2, r0
 801fc34:	460b      	mov	r3, r1
 801fc36:	4640      	mov	r0, r8
 801fc38:	4649      	mov	r1, r9
 801fc3a:	f7e0 ff27 	bl	8000a8c <__aeabi_dcmplt>
 801fc3e:	b120      	cbz	r0, 801fc4a <__ieee754_sqrt+0x19e>
 801fc40:	1ca0      	adds	r0, r4, #2
 801fc42:	bf08      	it	eq
 801fc44:	3601      	addeq	r6, #1
 801fc46:	3402      	adds	r4, #2
 801fc48:	e7df      	b.n	801fc0a <__ieee754_sqrt+0x15e>
 801fc4a:	1c63      	adds	r3, r4, #1
 801fc4c:	f023 0401 	bic.w	r4, r3, #1
 801fc50:	e7db      	b.n	801fc0a <__ieee754_sqrt+0x15e>
 801fc52:	bf00      	nop
 801fc54:	7ff00000 	.word	0x7ff00000
 801fc58:	20000318 	.word	0x20000318
 801fc5c:	20000310 	.word	0x20000310

0801fc60 <_init>:
 801fc60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fc62:	bf00      	nop
 801fc64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801fc66:	bc08      	pop	{r3}
 801fc68:	469e      	mov	lr, r3
 801fc6a:	4770      	bx	lr

0801fc6c <_fini>:
 801fc6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fc6e:	bf00      	nop
 801fc70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801fc72:	bc08      	pop	{r3}
 801fc74:	469e      	mov	lr, r3
 801fc76:	4770      	bx	lr
