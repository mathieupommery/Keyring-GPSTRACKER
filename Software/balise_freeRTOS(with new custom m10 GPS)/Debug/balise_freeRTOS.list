
balise_freeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015ab8  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002b78  08015bf8  08015bf8  00016bf8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08018770  08018770  00019770  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08018778  08018778  00019778  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801877c  0801877c  0001977c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000308  20000008  08018780  0001a008  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00005894  20000310  08018a88  0001a310  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  20005ba4  08018a88  0001aba4  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0001a310  2**0
                  CONTENTS, READONLY
 10 .debug_info   000630c0  00000000  00000000  0001a340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000b663  00000000  00000000  0007d400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loclists 00029f3e  00000000  00000000  00088a63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002978  00000000  00000000  000b29a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00005b79  00000000  00000000  000b5320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00030ff2  00000000  00000000  000bae99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0005fb78  00000000  00000000  000ebe8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0010d7a6  00000000  00000000  0014ba03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  002591a9  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00009410  00000000  00000000  002591ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 00000093  00000000  00000000  002625fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000310 	.word	0x20000310
 800015c:	00000000 	.word	0x00000000
 8000160:	08015be0 	.word	0x08015be0

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000314 	.word	0x20000314
 800017c:	08015be0 	.word	0x08015be0

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	@ 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_d2uiz>:
 8000b58:	004a      	lsls	r2, r1, #1
 8000b5a:	d211      	bcs.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d211      	bcs.n	8000b86 <__aeabi_d2uiz+0x2e>
 8000b62:	d50d      	bpl.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d40e      	bmi.n	8000b8c <__aeabi_d2uiz+0x34>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_d2uiz+0x3a>
 8000b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0000 	mov.w	r0, #0
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2f>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ba0:	bf24      	itt	cs
 8000ba2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ba6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000baa:	d90d      	bls.n	8000bc8 <__aeabi_d2f+0x30>
 8000bac:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bb0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bb4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bb8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bbc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bcc:	d121      	bne.n	8000c12 <__aeabi_d2f+0x7a>
 8000bce:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bd2:	bfbc      	itt	lt
 8000bd4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	4770      	bxlt	lr
 8000bda:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bde:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000be2:	f1c2 0218 	rsb	r2, r2, #24
 8000be6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bea:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bee:	fa20 f002 	lsr.w	r0, r0, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	f040 0001 	orrne.w	r0, r0, #1
 8000bf8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bfc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c04:	ea40 000c 	orr.w	r0, r0, ip
 8000c08:	fa23 f302 	lsr.w	r3, r3, r2
 8000c0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c10:	e7cc      	b.n	8000bac <__aeabi_d2f+0x14>
 8000c12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c16:	d107      	bne.n	8000c28 <__aeabi_d2f+0x90>
 8000c18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c1c:	bf1e      	ittt	ne
 8000c1e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c22:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c26:	4770      	bxne	lr
 8000c28:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c2c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop

08000c38 <__aeabi_uldivmod>:
 8000c38:	b953      	cbnz	r3, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3a:	b94a      	cbnz	r2, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3c:	2900      	cmp	r1, #0
 8000c3e:	bf08      	it	eq
 8000c40:	2800      	cmpeq	r0, #0
 8000c42:	bf1c      	itt	ne
 8000c44:	f04f 31ff 	movne.w	r1, #4294967295
 8000c48:	f04f 30ff 	movne.w	r0, #4294967295
 8000c4c:	f000 b9a0 	b.w	8000f90 <__aeabi_idiv0>
 8000c50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c58:	f000 f83c 	bl	8000cd4 <__udivmoddi4>
 8000c5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c64:	b004      	add	sp, #16
 8000c66:	4770      	bx	lr

08000c68 <__aeabi_d2lz>:
 8000c68:	b538      	push	{r3, r4, r5, lr}
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	4604      	mov	r4, r0
 8000c70:	460d      	mov	r5, r1
 8000c72:	f7ff ff0b 	bl	8000a8c <__aeabi_dcmplt>
 8000c76:	b928      	cbnz	r0, 8000c84 <__aeabi_d2lz+0x1c>
 8000c78:	4620      	mov	r0, r4
 8000c7a:	4629      	mov	r1, r5
 8000c7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c80:	f000 b80a 	b.w	8000c98 <__aeabi_d2ulz>
 8000c84:	4620      	mov	r0, r4
 8000c86:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000c8a:	f000 f805 	bl	8000c98 <__aeabi_d2ulz>
 8000c8e:	4240      	negs	r0, r0
 8000c90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c94:	bd38      	pop	{r3, r4, r5, pc}
 8000c96:	bf00      	nop

08000c98 <__aeabi_d2ulz>:
 8000c98:	b5d0      	push	{r4, r6, r7, lr}
 8000c9a:	4b0c      	ldr	r3, [pc, #48]	@ (8000ccc <__aeabi_d2ulz+0x34>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	4606      	mov	r6, r0
 8000ca0:	460f      	mov	r7, r1
 8000ca2:	f7ff fc81 	bl	80005a8 <__aeabi_dmul>
 8000ca6:	f7ff ff57 	bl	8000b58 <__aeabi_d2uiz>
 8000caa:	4604      	mov	r4, r0
 8000cac:	f7ff fc02 	bl	80004b4 <__aeabi_ui2d>
 8000cb0:	4b07      	ldr	r3, [pc, #28]	@ (8000cd0 <__aeabi_d2ulz+0x38>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	f7ff fc78 	bl	80005a8 <__aeabi_dmul>
 8000cb8:	4602      	mov	r2, r0
 8000cba:	460b      	mov	r3, r1
 8000cbc:	4630      	mov	r0, r6
 8000cbe:	4639      	mov	r1, r7
 8000cc0:	f7ff faba 	bl	8000238 <__aeabi_dsub>
 8000cc4:	f7ff ff48 	bl	8000b58 <__aeabi_d2uiz>
 8000cc8:	4621      	mov	r1, r4
 8000cca:	bdd0      	pop	{r4, r6, r7, pc}
 8000ccc:	3df00000 	.word	0x3df00000
 8000cd0:	41f00000 	.word	0x41f00000

08000cd4 <__udivmoddi4>:
 8000cd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cd8:	9d08      	ldr	r5, [sp, #32]
 8000cda:	460c      	mov	r4, r1
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d14e      	bne.n	8000d7e <__udivmoddi4+0xaa>
 8000ce0:	4694      	mov	ip, r2
 8000ce2:	458c      	cmp	ip, r1
 8000ce4:	4686      	mov	lr, r0
 8000ce6:	fab2 f282 	clz	r2, r2
 8000cea:	d962      	bls.n	8000db2 <__udivmoddi4+0xde>
 8000cec:	b14a      	cbz	r2, 8000d02 <__udivmoddi4+0x2e>
 8000cee:	f1c2 0320 	rsb	r3, r2, #32
 8000cf2:	4091      	lsls	r1, r2
 8000cf4:	fa20 f303 	lsr.w	r3, r0, r3
 8000cf8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cfc:	4319      	orrs	r1, r3
 8000cfe:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d02:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d06:	fa1f f68c 	uxth.w	r6, ip
 8000d0a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d0e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d12:	fb07 1114 	mls	r1, r7, r4, r1
 8000d16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d1a:	fb04 f106 	mul.w	r1, r4, r6
 8000d1e:	4299      	cmp	r1, r3
 8000d20:	d90a      	bls.n	8000d38 <__udivmoddi4+0x64>
 8000d22:	eb1c 0303 	adds.w	r3, ip, r3
 8000d26:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d2a:	f080 8112 	bcs.w	8000f52 <__udivmoddi4+0x27e>
 8000d2e:	4299      	cmp	r1, r3
 8000d30:	f240 810f 	bls.w	8000f52 <__udivmoddi4+0x27e>
 8000d34:	3c02      	subs	r4, #2
 8000d36:	4463      	add	r3, ip
 8000d38:	1a59      	subs	r1, r3, r1
 8000d3a:	fa1f f38e 	uxth.w	r3, lr
 8000d3e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d42:	fb07 1110 	mls	r1, r7, r0, r1
 8000d46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d4a:	fb00 f606 	mul.w	r6, r0, r6
 8000d4e:	429e      	cmp	r6, r3
 8000d50:	d90a      	bls.n	8000d68 <__udivmoddi4+0x94>
 8000d52:	eb1c 0303 	adds.w	r3, ip, r3
 8000d56:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d5a:	f080 80fc 	bcs.w	8000f56 <__udivmoddi4+0x282>
 8000d5e:	429e      	cmp	r6, r3
 8000d60:	f240 80f9 	bls.w	8000f56 <__udivmoddi4+0x282>
 8000d64:	4463      	add	r3, ip
 8000d66:	3802      	subs	r0, #2
 8000d68:	1b9b      	subs	r3, r3, r6
 8000d6a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d6e:	2100      	movs	r1, #0
 8000d70:	b11d      	cbz	r5, 8000d7a <__udivmoddi4+0xa6>
 8000d72:	40d3      	lsrs	r3, r2
 8000d74:	2200      	movs	r2, #0
 8000d76:	e9c5 3200 	strd	r3, r2, [r5]
 8000d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d905      	bls.n	8000d8e <__udivmoddi4+0xba>
 8000d82:	b10d      	cbz	r5, 8000d88 <__udivmoddi4+0xb4>
 8000d84:	e9c5 0100 	strd	r0, r1, [r5]
 8000d88:	2100      	movs	r1, #0
 8000d8a:	4608      	mov	r0, r1
 8000d8c:	e7f5      	b.n	8000d7a <__udivmoddi4+0xa6>
 8000d8e:	fab3 f183 	clz	r1, r3
 8000d92:	2900      	cmp	r1, #0
 8000d94:	d146      	bne.n	8000e24 <__udivmoddi4+0x150>
 8000d96:	42a3      	cmp	r3, r4
 8000d98:	d302      	bcc.n	8000da0 <__udivmoddi4+0xcc>
 8000d9a:	4290      	cmp	r0, r2
 8000d9c:	f0c0 80f0 	bcc.w	8000f80 <__udivmoddi4+0x2ac>
 8000da0:	1a86      	subs	r6, r0, r2
 8000da2:	eb64 0303 	sbc.w	r3, r4, r3
 8000da6:	2001      	movs	r0, #1
 8000da8:	2d00      	cmp	r5, #0
 8000daa:	d0e6      	beq.n	8000d7a <__udivmoddi4+0xa6>
 8000dac:	e9c5 6300 	strd	r6, r3, [r5]
 8000db0:	e7e3      	b.n	8000d7a <__udivmoddi4+0xa6>
 8000db2:	2a00      	cmp	r2, #0
 8000db4:	f040 8090 	bne.w	8000ed8 <__udivmoddi4+0x204>
 8000db8:	eba1 040c 	sub.w	r4, r1, ip
 8000dbc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000dc0:	fa1f f78c 	uxth.w	r7, ip
 8000dc4:	2101      	movs	r1, #1
 8000dc6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dca:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000dce:	fb08 4416 	mls	r4, r8, r6, r4
 8000dd2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dd6:	fb07 f006 	mul.w	r0, r7, r6
 8000dda:	4298      	cmp	r0, r3
 8000ddc:	d908      	bls.n	8000df0 <__udivmoddi4+0x11c>
 8000dde:	eb1c 0303 	adds.w	r3, ip, r3
 8000de2:	f106 34ff 	add.w	r4, r6, #4294967295
 8000de6:	d202      	bcs.n	8000dee <__udivmoddi4+0x11a>
 8000de8:	4298      	cmp	r0, r3
 8000dea:	f200 80cd 	bhi.w	8000f88 <__udivmoddi4+0x2b4>
 8000dee:	4626      	mov	r6, r4
 8000df0:	1a1c      	subs	r4, r3, r0
 8000df2:	fa1f f38e 	uxth.w	r3, lr
 8000df6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dfa:	fb08 4410 	mls	r4, r8, r0, r4
 8000dfe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e02:	fb00 f707 	mul.w	r7, r0, r7
 8000e06:	429f      	cmp	r7, r3
 8000e08:	d908      	bls.n	8000e1c <__udivmoddi4+0x148>
 8000e0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e0e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e12:	d202      	bcs.n	8000e1a <__udivmoddi4+0x146>
 8000e14:	429f      	cmp	r7, r3
 8000e16:	f200 80b0 	bhi.w	8000f7a <__udivmoddi4+0x2a6>
 8000e1a:	4620      	mov	r0, r4
 8000e1c:	1bdb      	subs	r3, r3, r7
 8000e1e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e22:	e7a5      	b.n	8000d70 <__udivmoddi4+0x9c>
 8000e24:	f1c1 0620 	rsb	r6, r1, #32
 8000e28:	408b      	lsls	r3, r1
 8000e2a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e2e:	431f      	orrs	r7, r3
 8000e30:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e34:	fa04 f301 	lsl.w	r3, r4, r1
 8000e38:	ea43 030c 	orr.w	r3, r3, ip
 8000e3c:	40f4      	lsrs	r4, r6
 8000e3e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e42:	0c38      	lsrs	r0, r7, #16
 8000e44:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e48:	fbb4 fef0 	udiv	lr, r4, r0
 8000e4c:	fa1f fc87 	uxth.w	ip, r7
 8000e50:	fb00 441e 	mls	r4, r0, lr, r4
 8000e54:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e58:	fb0e f90c 	mul.w	r9, lr, ip
 8000e5c:	45a1      	cmp	r9, r4
 8000e5e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e62:	d90a      	bls.n	8000e7a <__udivmoddi4+0x1a6>
 8000e64:	193c      	adds	r4, r7, r4
 8000e66:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e6a:	f080 8084 	bcs.w	8000f76 <__udivmoddi4+0x2a2>
 8000e6e:	45a1      	cmp	r9, r4
 8000e70:	f240 8081 	bls.w	8000f76 <__udivmoddi4+0x2a2>
 8000e74:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e78:	443c      	add	r4, r7
 8000e7a:	eba4 0409 	sub.w	r4, r4, r9
 8000e7e:	fa1f f983 	uxth.w	r9, r3
 8000e82:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e86:	fb00 4413 	mls	r4, r0, r3, r4
 8000e8a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e8e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e92:	45a4      	cmp	ip, r4
 8000e94:	d907      	bls.n	8000ea6 <__udivmoddi4+0x1d2>
 8000e96:	193c      	adds	r4, r7, r4
 8000e98:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e9c:	d267      	bcs.n	8000f6e <__udivmoddi4+0x29a>
 8000e9e:	45a4      	cmp	ip, r4
 8000ea0:	d965      	bls.n	8000f6e <__udivmoddi4+0x29a>
 8000ea2:	3b02      	subs	r3, #2
 8000ea4:	443c      	add	r4, r7
 8000ea6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000eaa:	fba0 9302 	umull	r9, r3, r0, r2
 8000eae:	eba4 040c 	sub.w	r4, r4, ip
 8000eb2:	429c      	cmp	r4, r3
 8000eb4:	46ce      	mov	lr, r9
 8000eb6:	469c      	mov	ip, r3
 8000eb8:	d351      	bcc.n	8000f5e <__udivmoddi4+0x28a>
 8000eba:	d04e      	beq.n	8000f5a <__udivmoddi4+0x286>
 8000ebc:	b155      	cbz	r5, 8000ed4 <__udivmoddi4+0x200>
 8000ebe:	ebb8 030e 	subs.w	r3, r8, lr
 8000ec2:	eb64 040c 	sbc.w	r4, r4, ip
 8000ec6:	fa04 f606 	lsl.w	r6, r4, r6
 8000eca:	40cb      	lsrs	r3, r1
 8000ecc:	431e      	orrs	r6, r3
 8000ece:	40cc      	lsrs	r4, r1
 8000ed0:	e9c5 6400 	strd	r6, r4, [r5]
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	e750      	b.n	8000d7a <__udivmoddi4+0xa6>
 8000ed8:	f1c2 0320 	rsb	r3, r2, #32
 8000edc:	fa20 f103 	lsr.w	r1, r0, r3
 8000ee0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ee4:	fa24 f303 	lsr.w	r3, r4, r3
 8000ee8:	4094      	lsls	r4, r2
 8000eea:	430c      	orrs	r4, r1
 8000eec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ef0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ef4:	fa1f f78c 	uxth.w	r7, ip
 8000ef8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000efc:	fb08 3110 	mls	r1, r8, r0, r3
 8000f00:	0c23      	lsrs	r3, r4, #16
 8000f02:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f06:	fb00 f107 	mul.w	r1, r0, r7
 8000f0a:	4299      	cmp	r1, r3
 8000f0c:	d908      	bls.n	8000f20 <__udivmoddi4+0x24c>
 8000f0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f12:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f16:	d22c      	bcs.n	8000f72 <__udivmoddi4+0x29e>
 8000f18:	4299      	cmp	r1, r3
 8000f1a:	d92a      	bls.n	8000f72 <__udivmoddi4+0x29e>
 8000f1c:	3802      	subs	r0, #2
 8000f1e:	4463      	add	r3, ip
 8000f20:	1a5b      	subs	r3, r3, r1
 8000f22:	b2a4      	uxth	r4, r4
 8000f24:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f28:	fb08 3311 	mls	r3, r8, r1, r3
 8000f2c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f30:	fb01 f307 	mul.w	r3, r1, r7
 8000f34:	42a3      	cmp	r3, r4
 8000f36:	d908      	bls.n	8000f4a <__udivmoddi4+0x276>
 8000f38:	eb1c 0404 	adds.w	r4, ip, r4
 8000f3c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f40:	d213      	bcs.n	8000f6a <__udivmoddi4+0x296>
 8000f42:	42a3      	cmp	r3, r4
 8000f44:	d911      	bls.n	8000f6a <__udivmoddi4+0x296>
 8000f46:	3902      	subs	r1, #2
 8000f48:	4464      	add	r4, ip
 8000f4a:	1ae4      	subs	r4, r4, r3
 8000f4c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f50:	e739      	b.n	8000dc6 <__udivmoddi4+0xf2>
 8000f52:	4604      	mov	r4, r0
 8000f54:	e6f0      	b.n	8000d38 <__udivmoddi4+0x64>
 8000f56:	4608      	mov	r0, r1
 8000f58:	e706      	b.n	8000d68 <__udivmoddi4+0x94>
 8000f5a:	45c8      	cmp	r8, r9
 8000f5c:	d2ae      	bcs.n	8000ebc <__udivmoddi4+0x1e8>
 8000f5e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f62:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f66:	3801      	subs	r0, #1
 8000f68:	e7a8      	b.n	8000ebc <__udivmoddi4+0x1e8>
 8000f6a:	4631      	mov	r1, r6
 8000f6c:	e7ed      	b.n	8000f4a <__udivmoddi4+0x276>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	e799      	b.n	8000ea6 <__udivmoddi4+0x1d2>
 8000f72:	4630      	mov	r0, r6
 8000f74:	e7d4      	b.n	8000f20 <__udivmoddi4+0x24c>
 8000f76:	46d6      	mov	lr, sl
 8000f78:	e77f      	b.n	8000e7a <__udivmoddi4+0x1a6>
 8000f7a:	4463      	add	r3, ip
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	e74d      	b.n	8000e1c <__udivmoddi4+0x148>
 8000f80:	4606      	mov	r6, r0
 8000f82:	4623      	mov	r3, r4
 8000f84:	4608      	mov	r0, r1
 8000f86:	e70f      	b.n	8000da8 <__udivmoddi4+0xd4>
 8000f88:	3e02      	subs	r6, #2
 8000f8a:	4463      	add	r3, ip
 8000f8c:	e730      	b.n	8000df0 <__udivmoddi4+0x11c>
 8000f8e:	bf00      	nop

08000f90 <__aeabi_idiv0>:
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop

08000f94 <GNSS_Init>:
/*!
 * Structure initialization.
 * @param GNSS Pointer to main GNSS structure.
 * @param huart Pointer to uart handle.
 */
void GNSS_Init(GNSS_StateHandle *GNSS, UART_HandleTypeDef *huart) {
 8000f94:	b500      	push	{lr}
 8000f96:	b083      	sub	sp, #12
	GNSS->huart = huart;
	GNSS->year = 0;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	f8a0 306e 	strh.w	r3, [r0, #110]	@ 0x6e
	GNSS->month = 0;
 8000f9e:	f8c0 3072 	str.w	r3, [r0, #114]	@ 0x72
 8000fa2:	f8c0 3076 	str.w	r3, [r0, #118]	@ 0x76
	GNSS->min = 0;
	GNSS->sec = 0;
	GNSS->fixType = 0;
	GNSS->numSV = 0;
	GNSS->satCount = 0;
	GNSS->lon = 0;
 8000fa6:	67c3      	str	r3, [r0, #124]	@ 0x7c
	GNSS->lat = 0;
 8000fa8:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
	GNSS->height = 0;
 8000fac:	f8c0 3094 	str.w	r3, [r0, #148]	@ 0x94
	GNSS->hMSL = 0;
 8000fb0:	f8c0 309c 	str.w	r3, [r0, #156]	@ 0x9c
	GNSS->hAcc = 0;
 8000fb4:	f8c0 30a8 	str.w	r3, [r0, #168]	@ 0xa8
	GNSS->vAcc = 0;
 8000fb8:	f8c0 30b0 	str.w	r3, [r0, #176]	@ 0xb0
	GNSS->gSpeed = 0;
 8000fbc:	f8c0 30b8 	str.w	r3, [r0, #184]	@ 0xb8
	GNSS->headMot = 0;
 8000fc0:	f8c0 30c4 	str.w	r3, [r0, #196]	@ 0xc4
void GNSS_Init(GNSS_StateHandle *GNSS, UART_HandleTypeDef *huart) {
 8000fc4:	9101      	str	r1, [sp, #4]

	HAL_UART_Transmit_DMA(&huart,uart1outprotnmeadisable,sizeof(uart1outprotnmeadisable)/(sizeof(uint8_t)));
 8000fc6:	2211      	movs	r2, #17
	GNSS->huart = huart;
 8000fc8:	6001      	str	r1, [r0, #0]
	HAL_UART_Transmit_DMA(&huart,uart1outprotnmeadisable,sizeof(uart1outprotnmeadisable)/(sizeof(uint8_t)));
 8000fca:	4915      	ldr	r1, [pc, #84]	@ (8001020 <GNSS_Init+0x8c>)
 8000fcc:	a801      	add	r0, sp, #4
 8000fce:	f009 fd2f 	bl	800aa30 <HAL_UART_Transmit_DMA>
	  HAL_Delay(30);
 8000fd2:	201e      	movs	r0, #30
 8000fd4:	f004 fbd6 	bl	8005784 <HAL_Delay>
	  HAL_UART_Transmit_DMA(&huart,uart1outprotubxenable,sizeof(uart1outprotubxenable)/(sizeof(uint8_t)));
 8000fd8:	4912      	ldr	r1, [pc, #72]	@ (8001024 <GNSS_Init+0x90>)
 8000fda:	2211      	movs	r2, #17
 8000fdc:	a801      	add	r0, sp, #4
 8000fde:	f009 fd27 	bl	800aa30 <HAL_UART_Transmit_DMA>
	  HAL_Delay(30);
 8000fe2:	201e      	movs	r0, #30
 8000fe4:	f004 fbce 	bl	8005784 <HAL_Delay>
	  HAL_UART_Transmit_DMA(&huart,setGPS_GAL_GLONASS,sizeof(setGPS_GAL_BEIDOU_GLONASS)/(sizeof(uint8_t)));
 8000fe8:	490f      	ldr	r1, [pc, #60]	@ (8001028 <GNSS_Init+0x94>)
 8000fea:	2234      	movs	r2, #52	@ 0x34
 8000fec:	a801      	add	r0, sp, #4
 8000fee:	f009 fd1f 	bl	800aa30 <HAL_UART_Transmit_DMA>
	  HAL_Delay(30);
 8000ff2:	201e      	movs	r0, #30
 8000ff4:	f004 fbc6 	bl	8005784 <HAL_Delay>
	  HAL_UART_Transmit_DMA(&huart,meas_rate_5hz,sizeof(meas_rate_10hz)/(sizeof(uint8_t)));
 8000ff8:	490c      	ldr	r1, [pc, #48]	@ (800102c <GNSS_Init+0x98>)
 8000ffa:	2212      	movs	r2, #18
 8000ffc:	a801      	add	r0, sp, #4
 8000ffe:	f009 fd17 	bl	800aa30 <HAL_UART_Transmit_DMA>
	  HAL_Delay(30);
 8001002:	201e      	movs	r0, #30
 8001004:	f004 fbbe 	bl	8005784 <HAL_Delay>
	  HAL_UART_Transmit_DMA(&huart,ubx_pvt_every_1meas,sizeof(ubx_pvt_every_1meas)/(sizeof(uint8_t)));
 8001008:	4909      	ldr	r1, [pc, #36]	@ (8001030 <GNSS_Init+0x9c>)
 800100a:	2211      	movs	r2, #17
 800100c:	a801      	add	r0, sp, #4
 800100e:	f009 fd0f 	bl	800aa30 <HAL_UART_Transmit_DMA>

	HAL_Delay(100);
 8001012:	2064      	movs	r0, #100	@ 0x64
 8001014:	f004 fbb6 	bl	8005784 <HAL_Delay>
}
 8001018:	b003      	add	sp, #12
 800101a:	f85d fb04 	ldr.w	pc, [sp], #4
 800101e:	bf00      	nop
 8001020:	08015cc0 	.word	0x08015cc0
 8001024:	08015cd4 	.word	0x08015cd4
 8001028:	08015c6c 	.word	0x08015c6c
 800102c:	08015cac 	.word	0x08015cac
 8001030:	08015c98 	.word	0x08015c98
 8001034:	00000000 	.word	0x00000000

08001038 <GNSS_ParsePVTData>:
/*!
 * Parse data to navigation position velocity time solution standard.
 * Look at: 32.17.15.1 u-blox 8 Receiver description.
 * @param GNSS Pointer to main GNSS structure.
 */
void GNSS_ParsePVTData(GNSS_StateHandle *GNSS) {
 8001038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800103a:	4604      	mov	r4, r0
	uShort.bytes[0] = GNSS->uartWorkingBuffer[10];
 800103c:	4d70      	ldr	r5, [pc, #448]	@ (8001200 <GNSS_ParsePVTData+0x1c8>)
 800103e:	7d82      	ldrb	r2, [r0, #22]
 8001040:	8a63      	ldrh	r3, [r4, #18]
 8001042:	7c81      	ldrb	r1, [r0, #18]
 8001044:	802b      	strh	r3, [r5, #0]
	GNSS->yearBytes[0]=GNSS->uartWorkingBuffer[10];
	uShort.bytes[1] = GNSS->uartWorkingBuffer[11];
 8001046:	7cc0      	ldrb	r0, [r0, #19]
	GNSS->yearBytes[1]=GNSS->uartWorkingBuffer[11];
	GNSS->year = uShort.uShort;
 8001048:	f8a4 306e 	strh.w	r3, [r4, #110]	@ 0x6e
	GNSS->month = GNSS->uartWorkingBuffer[12];
	GNSS->day = GNSS->uartWorkingBuffer[13];
	GNSS->hour = GNSS->uartWorkingBuffer[14];
	GNSS->min = GNSS->uartWorkingBuffer[15];
	GNSS->sec = GNSS->uartWorkingBuffer[16];
	GNSS->fixType = GNSS->uartWorkingBuffer[26];
 800104c:	2300      	movs	r3, #0
 800104e:	f362 0307 	bfi	r3, r2, #0, #8
 8001052:	7de2      	ldrb	r2, [r4, #23]
 8001054:	4e6b      	ldr	r6, [pc, #428]	@ (8001204 <GNSS_ParsePVTData+0x1cc>)
	}
	GNSS->hMSL = iLong.iLong;
	GNSS->fhMSL=(float)GNSS->hMSL/1000.0;

	for (int var = 0; var < 4; ++var) {
		uLong.bytes[var] = GNSS->uartWorkingBuffer[var + 46];
 8001056:	4f6c      	ldr	r7, [pc, #432]	@ (8001208 <GNSS_ParsePVTData+0x1d0>)
 8001058:	f362 230f 	bfi	r3, r2, #8, #8
 800105c:	7e22      	ldrb	r2, [r4, #24]
 800105e:	f362 4317 	bfi	r3, r2, #16, #8
 8001062:	f894 2022 	ldrb.w	r2, [r4, #34]	@ 0x22
 8001066:	f362 631f 	bfi	r3, r2, #24, #8
	GNSS->yearBytes[0]=GNSS->uartWorkingBuffer[10];
 800106a:	2200      	movs	r2, #0
 800106c:	f361 0207 	bfi	r2, r1, #0, #8
 8001070:	7d21      	ldrb	r1, [r4, #20]
 8001072:	f360 220f 	bfi	r2, r0, #8, #8
 8001076:	f361 4217 	bfi	r2, r1, #16, #8
 800107a:	7d61      	ldrb	r1, [r4, #21]
	GNSS->numSV = GNSS->uartWorkingBuffer[29];
 800107c:	f894 0025 	ldrb.w	r0, [r4, #37]	@ 0x25
 8001080:	f884 0078 	strb.w	r0, [r4, #120]	@ 0x78
	GNSS->yearBytes[0]=GNSS->uartWorkingBuffer[10];
 8001084:	f361 621f 	bfi	r2, r1, #24, #8
 8001088:	e9c4 231c 	strd	r2, r3, [r4, #112]	@ 0x70
		iLong.bytes[var] = GNSS->uartWorkingBuffer[var + 30];
 800108c:	f8d4 3026 	ldr.w	r3, [r4, #38]	@ 0x26
 8001090:	f846 3c04 	str.w	r3, [r6, #-4]
	GNSS->fLon=(float)iLong.iLong/10000000.0;
 8001094:	ee07 3a90 	vmov	s15, r3
 8001098:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	GNSS->lon = iLong.iLong;
 800109c:	e9c4 331f 	strd	r3, r3, [r4, #124]	@ 0x7c
	GNSS->fLon=(float)iLong.iLong/10000000.0;
 80010a0:	ee17 0a90 	vmov	r0, s15
 80010a4:	f7ff fa28 	bl	80004f8 <__aeabi_f2d>
 80010a8:	a34f      	add	r3, pc, #316	@ (adr r3, 80011e8 <GNSS_ParsePVTData+0x1b0>)
 80010aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010ae:	f7ff fa7b 	bl	80005a8 <__aeabi_dmul>
 80010b2:	f7ff fd71 	bl	8000b98 <__aeabi_d2f>
		iLong.bytes[var] = GNSS->uartWorkingBuffer[var + 34];
 80010b6:	f8d4 302a 	ldr.w	r3, [r4, #42]	@ 0x2a
	GNSS->fLon=(float)iLong.iLong/10000000.0;
 80010ba:	f8c4 008c 	str.w	r0, [r4, #140]	@ 0x8c
	GNSS->fLat=(float)iLong.iLong/10000000.0;
 80010be:	ee07 3a90 	vmov	s15, r3
 80010c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	GNSS->lat = iLong.iLong;
 80010c6:	e9c4 3321 	strd	r3, r3, [r4, #132]	@ 0x84
	GNSS->fLat=(float)iLong.iLong/10000000.0;
 80010ca:	ee17 0a90 	vmov	r0, s15
 80010ce:	f7ff fa13 	bl	80004f8 <__aeabi_f2d>
 80010d2:	a345      	add	r3, pc, #276	@ (adr r3, 80011e8 <GNSS_ParsePVTData+0x1b0>)
 80010d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010d8:	f7ff fa66 	bl	80005a8 <__aeabi_dmul>
 80010dc:	f7ff fd5c 	bl	8000b98 <__aeabi_d2f>
		iLong.bytes[var] = GNSS->uartWorkingBuffer[var + 38];
 80010e0:	f8d4 302e 	ldr.w	r3, [r4, #46]	@ 0x2e
	GNSS->fLat=(float)iLong.iLong/10000000.0;
 80010e4:	f8c4 0090 	str.w	r0, [r4, #144]	@ 0x90
	GNSS->fheight=(float)GNSS->height/1000.0;
 80010e8:	ee07 3a90 	vmov	s15, r3
 80010ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	GNSS->height = iLong.iLong;
 80010f0:	f8c4 3094 	str.w	r3, [r4, #148]	@ 0x94
	GNSS->fheight=(float)GNSS->height/1000.0;
 80010f4:	ee17 0a90 	vmov	r0, s15
		iLong.bytes[var] = GNSS->uartWorkingBuffer[var + 38];
 80010f8:	f846 3c04 	str.w	r3, [r6, #-4]
	GNSS->fheight=(float)GNSS->height/1000.0;
 80010fc:	f7ff f9fc 	bl	80004f8 <__aeabi_f2d>
 8001100:	a33b      	add	r3, pc, #236	@ (adr r3, 80011f0 <GNSS_ParsePVTData+0x1b8>)
 8001102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001106:	f7ff fa4f 	bl	80005a8 <__aeabi_dmul>
 800110a:	f7ff fd45 	bl	8000b98 <__aeabi_d2f>
		iLong.bytes[var] = GNSS->uartWorkingBuffer[var + 42];
 800110e:	f8d4 3032 	ldr.w	r3, [r4, #50]	@ 0x32
	GNSS->fheight=(float)GNSS->height/1000.0;
 8001112:	f8c4 0098 	str.w	r0, [r4, #152]	@ 0x98
	GNSS->fhMSL=(float)GNSS->hMSL/1000.0;
 8001116:	ee07 3a90 	vmov	s15, r3
 800111a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	GNSS->hMSL = iLong.iLong;
 800111e:	e9c4 3327 	strd	r3, r3, [r4, #156]	@ 0x9c
	GNSS->fhMSL=(float)GNSS->hMSL/1000.0;
 8001122:	ee17 0a90 	vmov	r0, s15
		iLong.bytes[var] = GNSS->uartWorkingBuffer[var + 42];
 8001126:	f846 3c04 	str.w	r3, [r6, #-4]
	GNSS->fhMSL=(float)GNSS->hMSL/1000.0;
 800112a:	f7ff f9e5 	bl	80004f8 <__aeabi_f2d>
 800112e:	a330      	add	r3, pc, #192	@ (adr r3, 80011f0 <GNSS_ParsePVTData+0x1b8>)
 8001130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001134:	f7ff fa38 	bl	80005a8 <__aeabi_dmul>
 8001138:	f7ff fd2e 	bl	8000b98 <__aeabi_d2f>
 800113c:	f8c4 00a4 	str.w	r0, [r4, #164]	@ 0xa4
		uLong.bytes[var] = GNSS->uartWorkingBuffer[var + 46];
 8001140:	f8d4 0036 	ldr.w	r0, [r4, #54]	@ 0x36
	}
	GNSS->hAcc = uLong.uLong;
 8001144:	f8c4 00a8 	str.w	r0, [r4, #168]	@ 0xa8
	GNSS->fhACC=(float)GNSS->hAcc/1000.0;
 8001148:	ee07 0a90 	vmov	s15, r0
 800114c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001150:	1f35      	subs	r5, r6, #4
 8001152:	ee17 0a90 	vmov	r0, s15
 8001156:	f7ff f9cf 	bl	80004f8 <__aeabi_f2d>
 800115a:	a325      	add	r3, pc, #148	@ (adr r3, 80011f0 <GNSS_ParsePVTData+0x1b8>)
 800115c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001160:	f7ff fa22 	bl	80005a8 <__aeabi_dmul>
 8001164:	f7ff fd18 	bl	8000b98 <__aeabi_d2f>
 8001168:	f8c4 00ac 	str.w	r0, [r4, #172]	@ 0xac

	for (int var = 0; var < 4; ++var) {
		uLong.bytes[var] = GNSS->uartWorkingBuffer[var + 50];
 800116c:	f8d4 003a 	ldr.w	r0, [r4, #58]	@ 0x3a
	}
	GNSS->vAcc = uLong.uLong;
 8001170:	f8c4 00b0 	str.w	r0, [r4, #176]	@ 0xb0
	GNSS->fvACC=(float)GNSS->vAcc/1000.0;
 8001174:	ee07 0a90 	vmov	s15, r0
 8001178:	eef8 7a67 	vcvt.f32.u32	s15, s15
		uLong.bytes[var] = GNSS->uartWorkingBuffer[var + 50];
 800117c:	6038      	str	r0, [r7, #0]
	GNSS->fvACC=(float)GNSS->vAcc/1000.0;
 800117e:	ee17 0a90 	vmov	r0, s15
 8001182:	f7ff f9b9 	bl	80004f8 <__aeabi_f2d>
 8001186:	a31a      	add	r3, pc, #104	@ (adr r3, 80011f0 <GNSS_ParsePVTData+0x1b8>)
 8001188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800118c:	f7ff fa0c 	bl	80005a8 <__aeabi_dmul>
 8001190:	f7ff fd02 	bl	8000b98 <__aeabi_d2f>

	for (int var = 0; var < 4; ++var) {
		iLong.bytes[var] = GNSS->uartWorkingBuffer[var + 66];
 8001194:	f8d4 304a 	ldr.w	r3, [r4, #74]	@ 0x4a
	GNSS->fvACC=(float)GNSS->vAcc/1000.0;
 8001198:	f8c4 00b4 	str.w	r0, [r4, #180]	@ 0xb4
		GNSS->gSpeedBytes[var] = GNSS->uartWorkingBuffer[var + 66];
	}
	GNSS->gSpeed = iLong.iLong;
	GNSS->fgSpeed=(float)GNSS->gSpeed/1000.0;
 800119c:	ee07 3a90 	vmov	s15, r3
 80011a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	GNSS->gSpeed = iLong.iLong;
 80011a4:	e9c4 332e 	strd	r3, r3, [r4, #184]	@ 0xb8
	GNSS->fgSpeed=(float)GNSS->gSpeed/1000.0;
 80011a8:	ee17 0a90 	vmov	r0, s15
 80011ac:	f7ff f9a4 	bl	80004f8 <__aeabi_f2d>
 80011b0:	a30f      	add	r3, pc, #60	@ (adr r3, 80011f0 <GNSS_ParsePVTData+0x1b8>)
 80011b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011b6:	f7ff f9f7 	bl	80005a8 <__aeabi_dmul>
 80011ba:	f7ff fced 	bl	8000b98 <__aeabi_d2f>

	for (int var = 0; var < 4; ++var) {
		iLong.bytes[var] = GNSS->uartWorkingBuffer[var + 70];
 80011be:	f8d4 304e 	ldr.w	r3, [r4, #78]	@ 0x4e
	GNSS->fgSpeed=(float)GNSS->gSpeed/1000.0;
 80011c2:	f8c4 00c0 	str.w	r0, [r4, #192]	@ 0xc0
		iLong.bytes[var] = GNSS->uartWorkingBuffer[var + 70];
 80011c6:	602b      	str	r3, [r5, #0]
	}
	GNSS->headMot = iLong.iLong * 1e-5;
 80011c8:	4618      	mov	r0, r3
 80011ca:	f7ff f983 	bl	80004d4 <__aeabi_i2d>
 80011ce:	a30a      	add	r3, pc, #40	@ (adr r3, 80011f8 <GNSS_ParsePVTData+0x1c0>)
 80011d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011d4:	f7ff f9e8 	bl	80005a8 <__aeabi_dmul>
 80011d8:	f7ff fc96 	bl	8000b08 <__aeabi_d2iz>
 80011dc:	f8c4 00c4 	str.w	r0, [r4, #196]	@ 0xc4
}
 80011e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80011e2:	bf00      	nop
 80011e4:	f3af 8000 	nop.w
 80011e8:	9abcaf48 	.word	0x9abcaf48
 80011ec:	3e7ad7f2 	.word	0x3e7ad7f2
 80011f0:	d2f1a9fc 	.word	0xd2f1a9fc
 80011f4:	3f50624d 	.word	0x3f50624d
 80011f8:	88e368f1 	.word	0x88e368f1
 80011fc:	3ee4f8b5 	.word	0x3ee4f8b5
 8001200:	20000334 	.word	0x20000334
 8001204:	20000330 	.word	0x20000330
 8001208:	20000330 	.word	0x20000330
 800120c:	00000000 	.word	0x00000000

08001210 <distancecalc>:
}




double distancecalc(double lat1, double lat2, double long1, double long2){
 8001210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001214:	ed2d 8b04 	vpush	{d8-d9}
	double distance=0;
	distance=(double) 6371000*acosl(fmin(1,sinl(lat1*(M_PI/180))*sinl(lat2*(M_PI/180))+cosl(lat1*(M_PI/180))*cosl(lat2*(M_PI/180))*cosl((long2-long1)*(M_PI/180))));
 8001218:	a34a      	add	r3, pc, #296	@ (adr r3, 8001344 <distancecalc+0x134>)
 800121a:	e9d3 2300 	ldrd	r2, r3, [r3]
double distancecalc(double lat1, double lat2, double long1, double long2){
 800121e:	b083      	sub	sp, #12
 8001220:	ec51 0b10 	vmov	r0, r1, d0
 8001224:	ec55 4b11 	vmov	r4, r5, d1
 8001228:	ec57 6b13 	vmov	r6, r7, d3
 800122c:	ec59 8b12 	vmov	r8, r9, d2
	distance=(double) 6371000*acosl(fmin(1,sinl(lat1*(M_PI/180))*sinl(lat2*(M_PI/180))+cosl(lat1*(M_PI/180))*cosl(lat2*(M_PI/180))*cosl((long2-long1)*(M_PI/180))));
 8001230:	f7ff f9ba 	bl	80005a8 <__aeabi_dmul>
 8001234:	ec41 0b19 	vmov	d9, r0, r1
 8001238:	eeb0 0a49 	vmov.f32	s0, s18
 800123c:	eef0 0a69 	vmov.f32	s1, s19
 8001240:	f012 fc65 	bl	8013b0e <sinl>
 8001244:	a33f      	add	r3, pc, #252	@ (adr r3, 8001344 <distancecalc+0x134>)
 8001246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800124a:	4620      	mov	r0, r4
 800124c:	4629      	mov	r1, r5
 800124e:	ed8d 0b00 	vstr	d0, [sp]
 8001252:	f7ff f9a9 	bl	80005a8 <__aeabi_dmul>
 8001256:	ec41 0b18 	vmov	d8, r0, r1
 800125a:	eeb0 0a48 	vmov.f32	s0, s16
 800125e:	eef0 0a68 	vmov.f32	s1, s17
 8001262:	f012 fc54 	bl	8013b0e <sinl>
 8001266:	eeb0 7a40 	vmov.f32	s14, s0
 800126a:	eef0 7a60 	vmov.f32	s15, s1
 800126e:	eeb0 0a49 	vmov.f32	s0, s18
 8001272:	eef0 0a69 	vmov.f32	s1, s19
 8001276:	ec5b ab17 	vmov	sl, fp, d7
 800127a:	f012 fc46 	bl	8013b0a <cosl>
 800127e:	eeb0 7a40 	vmov.f32	s14, s0
 8001282:	eef0 7a60 	vmov.f32	s15, s1
 8001286:	eeb0 0a48 	vmov.f32	s0, s16
 800128a:	eef0 0a68 	vmov.f32	s1, s17
 800128e:	ec55 4b17 	vmov	r4, r5, d7
 8001292:	f012 fc3a 	bl	8013b0a <cosl>
 8001296:	4642      	mov	r2, r8
 8001298:	464b      	mov	r3, r9
 800129a:	4630      	mov	r0, r6
 800129c:	4639      	mov	r1, r7
 800129e:	ec57 6b10 	vmov	r6, r7, d0
 80012a2:	f7fe ffc9 	bl	8000238 <__aeabi_dsub>
 80012a6:	a327      	add	r3, pc, #156	@ (adr r3, 8001344 <distancecalc+0x134>)
 80012a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ac:	f7ff f97c 	bl	80005a8 <__aeabi_dmul>
 80012b0:	ec41 0b10 	vmov	d0, r0, r1
 80012b4:	f012 fc29 	bl	8013b0a <cosl>
 80012b8:	4620      	mov	r0, r4
 80012ba:	4629      	mov	r1, r5
 80012bc:	ec55 4b10 	vmov	r4, r5, d0
 80012c0:	4632      	mov	r2, r6
 80012c2:	463b      	mov	r3, r7
 80012c4:	f7ff f970 	bl	80005a8 <__aeabi_dmul>
 80012c8:	4622      	mov	r2, r4
 80012ca:	462b      	mov	r3, r5
 80012cc:	f7ff f96c 	bl	80005a8 <__aeabi_dmul>
 80012d0:	4652      	mov	r2, sl
 80012d2:	465b      	mov	r3, fp
 80012d4:	4604      	mov	r4, r0
 80012d6:	460d      	mov	r5, r1
 80012d8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80012dc:	f7ff f964 	bl	80005a8 <__aeabi_dmul>
 80012e0:	4602      	mov	r2, r0
 80012e2:	460b      	mov	r3, r1
 80012e4:	4620      	mov	r0, r4
 80012e6:	4629      	mov	r1, r5
 80012e8:	f7fe ffa8 	bl	800023c <__adddf3>
 80012ec:	4602      	mov	r2, r0
 80012ee:	460b      	mov	r3, r1
 80012f0:	ec43 2b18 	vmov	d8, r2, r3
 80012f4:	4b12      	ldr	r3, [pc, #72]	@ (8001340 <distancecalc+0x130>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	f7ff fbd2 	bl	8000aa0 <__aeabi_dcmple>
 80012fc:	b908      	cbnz	r0, 8001302 <distancecalc+0xf2>
 80012fe:	ed9f 8b0c 	vldr	d8, [pc, #48]	@ 8001330 <distancecalc+0x120>
 8001302:	eeb0 0a48 	vmov.f32	s0, s16
 8001306:	eef0 0a68 	vmov.f32	s1, s17
 800130a:	f012 fc02 	bl	8013b12 <acosl>
 800130e:	a30a      	add	r3, pc, #40	@ (adr r3, 8001338 <distancecalc+0x128>)
 8001310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001314:	ec51 0b10 	vmov	r0, r1, d0
 8001318:	f7ff f946 	bl	80005a8 <__aeabi_dmul>

	return distance;
}
 800131c:	ec41 0b10 	vmov	d0, r0, r1
 8001320:	b003      	add	sp, #12
 8001322:	ecbd 8b04 	vpop	{d8-d9}
 8001326:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800132a:	bf00      	nop
 800132c:	f3af 8000 	nop.w
 8001330:	00000000 	.word	0x00000000
 8001334:	3ff00000 	.word	0x3ff00000
 8001338:	00000000 	.word	0x00000000
 800133c:	41584dae 	.word	0x41584dae
 8001340:	3ff00000 	.word	0x3ff00000
 8001344:	a2529d39 	.word	0xa2529d39
 8001348:	3f91df46 	.word	0x3f91df46

0800134c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800134c:	b500      	push	{lr}

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800134e:	482d      	ldr	r0, [pc, #180]	@ (8001404 <MX_ADC1_Init+0xb8>)
 8001350:	492d      	ldr	r1, [pc, #180]	@ (8001408 <MX_ADC1_Init+0xbc>)
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001352:	2201      	movs	r2, #1
  ADC_ChannelConfTypeDef sConfig = {0};
 8001354:	2300      	movs	r3, #0
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001356:	6102      	str	r2, [r0, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001358:	f44f 7280 	mov.w	r2, #256	@ 0x100
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800135c:	e9c0 1300 	strd	r1, r3, [r0]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001360:	8302      	strh	r2, [r0, #24]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001362:	2104      	movs	r1, #4
  hadc1.Init.ContinuousConvMode = ENABLE;
  hadc1.Init.NbrOfConversion = 3;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T2_TRGO;
 8001364:	f44f 62d8 	mov.w	r2, #1728	@ 0x6c0
{
 8001368:	b087      	sub	sp, #28
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800136a:	6141      	str	r1, [r0, #20]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T2_TRGO;
 800136c:	6282      	str	r2, [r0, #40]	@ 0x28
  hadc1.Init.NbrOfConversion = 3;
 800136e:	2103      	movs	r1, #3
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001370:	f44f 6280 	mov.w	r2, #1024	@ 0x400
  ADC_ChannelConfTypeDef sConfig = {0};
 8001374:	e9cd 3300 	strd	r3, r3, [sp]
 8001378:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800137c:	e9cd 3304 	strd	r3, r3, [sp, #16]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001380:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hadc1.Init.NbrOfConversion = 3;
 8001384:	61c1      	str	r1, [r0, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001386:	f880 3020 	strb.w	r3, [r0, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800138a:	62c2      	str	r2, [r0, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800138c:	f880 3030 	strb.w	r3, [r0, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001390:	6343      	str	r3, [r0, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001392:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001396:	f004 fa07 	bl	80057a8 <HAL_ADC_Init>
 800139a:	bb28      	cbnz	r0, 80013e8 <MX_ADC1_Init+0x9c>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 800139c:	4a1b      	ldr	r2, [pc, #108]	@ (800140c <MX_ADC1_Init+0xc0>)
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800139e:	4819      	ldr	r0, [pc, #100]	@ (8001404 <MX_ADC1_Init+0xb8>)
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80013a0:	2306      	movs	r3, #6
 80013a2:	e9cd 2300 	strd	r2, r3, [sp]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80013a6:	2107      	movs	r1, #7
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80013a8:	237f      	movs	r3, #127	@ 0x7f
 80013aa:	e9cd 1302 	strd	r1, r3, [sp, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80013ae:	2204      	movs	r2, #4
  sConfig.Offset = 0;
 80013b0:	2300      	movs	r3, #0
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013b2:	4669      	mov	r1, sp
  sConfig.Offset = 0;
 80013b4:	e9cd 2304 	strd	r2, r3, [sp, #16]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013b8:	f004 fb1c 	bl	80059f4 <HAL_ADC_ConfigChannel>
 80013bc:	b9f8      	cbnz	r0, 80013fe <MX_ADC1_Init+0xb2>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80013be:	4a14      	ldr	r2, [pc, #80]	@ (8001410 <MX_ADC1_Init+0xc4>)
  sConfig.Rank = ADC_REGULAR_RANK_2;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013c0:	4810      	ldr	r0, [pc, #64]	@ (8001404 <MX_ADC1_Init+0xb8>)
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80013c2:	230c      	movs	r3, #12
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013c4:	4669      	mov	r1, sp
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80013c6:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013ca:	f004 fb13 	bl	80059f4 <HAL_ADC_ConfigChannel>
 80013ce:	b998      	cbnz	r0, 80013f8 <MX_ADC1_Init+0xac>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80013d0:	4a10      	ldr	r2, [pc, #64]	@ (8001414 <MX_ADC1_Init+0xc8>)
  sConfig.Rank = ADC_REGULAR_RANK_3;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013d2:	480c      	ldr	r0, [pc, #48]	@ (8001404 <MX_ADC1_Init+0xb8>)
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80013d4:	2312      	movs	r3, #18
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013d6:	4669      	mov	r1, sp
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80013d8:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013dc:	f004 fb0a 	bl	80059f4 <HAL_ADC_ConfigChannel>
 80013e0:	b928      	cbnz	r0, 80013ee <MX_ADC1_Init+0xa2>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80013e2:	b007      	add	sp, #28
 80013e4:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80013e8:	f000 ff2e 	bl	8002248 <Error_Handler>
 80013ec:	e7d6      	b.n	800139c <MX_ADC1_Init+0x50>
    Error_Handler();
 80013ee:	f000 ff2b 	bl	8002248 <Error_Handler>
}
 80013f2:	b007      	add	sp, #28
 80013f4:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80013f8:	f000 ff26 	bl	8002248 <Error_Handler>
 80013fc:	e7e8      	b.n	80013d0 <MX_ADC1_Init+0x84>
    Error_Handler();
 80013fe:	f000 ff23 	bl	8002248 <Error_Handler>
 8001402:	e7dc      	b.n	80013be <MX_ADC1_Init+0x72>
 8001404:	20000398 	.word	0x20000398
 8001408:	50040000 	.word	0x50040000
 800140c:	80000001 	.word	0x80000001
 8001410:	c7520000 	.word	0xc7520000
 8001414:	25b00200 	.word	0x25b00200

08001418 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001418:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(adcHandle->Instance==ADC1)
 800141a:	4b24      	ldr	r3, [pc, #144]	@ (80014ac <HAL_ADC_MspInit+0x94>)
 800141c:	6802      	ldr	r2, [r0, #0]
{
 800141e:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001420:	2400      	movs	r4, #0
  if(adcHandle->Instance==ADC1)
 8001422:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001424:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8001428:	e9cd 4404 	strd	r4, r4, [sp, #16]
 800142c:	9406      	str	r4, [sp, #24]
  if(adcHandle->Instance==ADC1)
 800142e:	d001      	beq.n	8001434 <HAL_ADC_MspInit+0x1c>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001430:	b008      	add	sp, #32
 8001432:	bd70      	pop	{r4, r5, r6, pc}
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001434:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001438:	4605      	mov	r5, r0
 800143a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
    hdma_adc1.Instance = DMA1_Channel1;
 800143c:	4e1c      	ldr	r6, [pc, #112]	@ (80014b0 <HAL_ADC_MspInit+0x98>)
 800143e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001442:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001444:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001446:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800144a:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 800144c:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800144e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001450:	f042 0201 	orr.w	r2, r2, #1
 8001454:	64da      	str	r2, [r3, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001456:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001458:	f003 0301 	and.w	r3, r3, #1
 800145c:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800145e:	2210      	movs	r2, #16
 8001460:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001462:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001466:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001468:	e9cd 2302 	strd	r2, r3, [sp, #8]
  (void)tmpreg;
 800146c:	9b00      	ldr	r3, [sp, #0]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800146e:	f004 ff9b 	bl	80063a8 <HAL_GPIO_Init>
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001472:	4a10      	ldr	r2, [pc, #64]	@ (80014b4 <HAL_ADC_MspInit+0x9c>)
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001474:	6234      	str	r4, [r6, #32]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001476:	2305      	movs	r3, #5
 8001478:	e9c6 2300 	strd	r2, r3, [r6]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800147c:	2280      	movs	r2, #128	@ 0x80
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800147e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001482:	e9c6 2304 	strd	r2, r3, [r6, #16]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001486:	4630      	mov	r0, r6
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001488:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800148c:	2320      	movs	r3, #32
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800148e:	e9c6 4402 	strd	r4, r4, [r6, #8]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001492:	e9c6 2306 	strd	r2, r3, [r6, #24]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001496:	f004 fddd 	bl	8006054 <HAL_DMA_Init>
 800149a:	b918      	cbnz	r0, 80014a4 <HAL_ADC_MspInit+0x8c>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800149c:	64ee      	str	r6, [r5, #76]	@ 0x4c
 800149e:	62b5      	str	r5, [r6, #40]	@ 0x28
}
 80014a0:	b008      	add	sp, #32
 80014a2:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 80014a4:	f000 fed0 	bl	8002248 <Error_Handler>
 80014a8:	e7f8      	b.n	800149c <HAL_ADC_MspInit+0x84>
 80014aa:	bf00      	nop
 80014ac:	50040000 	.word	0x50040000
 80014b0:	20000338 	.word	0x20000338
 80014b4:	40020008 	.word	0x40020008

080014b8 <HAL_ADC_ConvCpltCallback>:
}

/* USER CODE BEGIN 1 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){

	if(hadc->Instance==ADC1){
 80014b8:	4b41      	ldr	r3, [pc, #260]	@ (80015c0 <HAL_ADC_ConvCpltCallback+0x108>)
 80014ba:	6802      	ldr	r2, [r0, #0]
 80014bc:	429a      	cmp	r2, r3
 80014be:	d004      	beq.n	80014ca <HAL_ADC_ConvCpltCallback+0x12>
//		vtemp=(float) ((vrefint*rawdata[1])/4095.0);
		temp=(float) (((100.0)/(tscal2-tscal1))*(rawdata[1]*(vrefint/3.0)-tscal1))+30.0;
		vbat=(float) 2*(rawdata[2]/4095.0)*vrefint;

	}
	HAL_ADC_Start_DMA(&hadc1,(uint32_t*)rawdata, 3);
 80014c0:	4940      	ldr	r1, [pc, #256]	@ (80015c4 <HAL_ADC_ConvCpltCallback+0x10c>)
 80014c2:	4841      	ldr	r0, [pc, #260]	@ (80015c8 <HAL_ADC_ConvCpltCallback+0x110>)
 80014c4:	2203      	movs	r2, #3
 80014c6:	f004 bd15 	b.w	8005ef4 <HAL_ADC_Start_DMA>
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 80014ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		vrefint=(float) ((4095.0*1.212)/rawdata[0]);
 80014ce:	4e3d      	ldr	r6, [pc, #244]	@ (80015c4 <HAL_ADC_ConvCpltCallback+0x10c>)
		temp=(float) (((100.0)/(tscal2-tscal1))*(rawdata[1]*(vrefint/3.0)-tscal1))+30.0;
 80014d0:	4f3e      	ldr	r7, [pc, #248]	@ (80015cc <HAL_ADC_ConvCpltCallback+0x114>)
		vrefint=(float) ((4095.0*1.212)/rawdata[0]);
 80014d2:	8830      	ldrh	r0, [r6, #0]
		vbat=(float) 2*(rawdata[2]/4095.0)*vrefint;
 80014d4:	f8df a108 	ldr.w	sl, [pc, #264]	@ 80015e0 <HAL_ADC_ConvCpltCallback+0x128>
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 80014d8:	ed2d 8b02 	vpush	{d8}
		vrefint=(float) ((4095.0*1.212)/rawdata[0]);
 80014dc:	f7fe fffa 	bl	80004d4 <__aeabi_i2d>
 80014e0:	4602      	mov	r2, r0
 80014e2:	460b      	mov	r3, r1
 80014e4:	a130      	add	r1, pc, #192	@ (adr r1, 80015a8 <HAL_ADC_ConvCpltCallback+0xf0>)
 80014e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80014ea:	f7ff f987 	bl	80007fc <__aeabi_ddiv>
 80014ee:	f7ff fb53 	bl	8000b98 <__aeabi_d2f>
 80014f2:	4a37      	ldr	r2, [pc, #220]	@ (80015d0 <HAL_ADC_ConvCpltCallback+0x118>)
		temp=(float) (((100.0)/(tscal2-tscal1))*(rawdata[1]*(vrefint/3.0)-tscal1))+30.0;
 80014f4:	4b37      	ldr	r3, [pc, #220]	@ (80015d4 <HAL_ADC_ConvCpltCallback+0x11c>)
		vrefint=(float) ((4095.0*1.212)/rawdata[0]);
 80014f6:	6010      	str	r0, [r2, #0]
		temp=(float) (((100.0)/(tscal2-tscal1))*(rawdata[1]*(vrefint/3.0)-tscal1))+30.0;
 80014f8:	ed93 8a00 	vldr	s16, [r3]
 80014fc:	f7fe fffc 	bl	80004f8 <__aeabi_f2d>
 8001500:	4604      	mov	r4, r0
 8001502:	8870      	ldrh	r0, [r6, #2]
 8001504:	460d      	mov	r5, r1
 8001506:	f7fe ffe5 	bl	80004d4 <__aeabi_i2d>
 800150a:	a329      	add	r3, pc, #164	@ (adr r3, 80015b0 <HAL_ADC_ConvCpltCallback+0xf8>)
 800150c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001510:	f7ff f84a 	bl	80005a8 <__aeabi_dmul>
 8001514:	4622      	mov	r2, r4
 8001516:	462b      	mov	r3, r5
 8001518:	f7ff f846 	bl	80005a8 <__aeabi_dmul>
 800151c:	4680      	mov	r8, r0
 800151e:	ee18 0a10 	vmov	r0, s16
 8001522:	4689      	mov	r9, r1
 8001524:	f7fe ffe8 	bl	80004f8 <__aeabi_f2d>
 8001528:	4602      	mov	r2, r0
 800152a:	460b      	mov	r3, r1
 800152c:	4640      	mov	r0, r8
 800152e:	4649      	mov	r1, r9
 8001530:	f7fe fe82 	bl	8000238 <__aeabi_dsub>
 8001534:	4b28      	ldr	r3, [pc, #160]	@ (80015d8 <HAL_ADC_ConvCpltCallback+0x120>)
 8001536:	edd3 7a00 	vldr	s15, [r3]
 800153a:	ee77 7ac8 	vsub.f32	s15, s15, s16
 800153e:	4680      	mov	r8, r0
 8001540:	ee17 0a90 	vmov	r0, s15
 8001544:	4689      	mov	r9, r1
 8001546:	f7fe ffd7 	bl	80004f8 <__aeabi_f2d>
 800154a:	4602      	mov	r2, r0
 800154c:	460b      	mov	r3, r1
 800154e:	2000      	movs	r0, #0
 8001550:	4922      	ldr	r1, [pc, #136]	@ (80015dc <HAL_ADC_ConvCpltCallback+0x124>)
 8001552:	f7ff f953 	bl	80007fc <__aeabi_ddiv>
 8001556:	4602      	mov	r2, r0
 8001558:	460b      	mov	r3, r1
 800155a:	4640      	mov	r0, r8
 800155c:	4649      	mov	r1, r9
 800155e:	f7ff f823 	bl	80005a8 <__aeabi_dmul>
 8001562:	f7ff fb19 	bl	8000b98 <__aeabi_d2f>
 8001566:	ee07 0a90 	vmov	s15, r0
 800156a:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 800156e:	ee77 7a87 	vadd.f32	s15, s15, s14
		vbat=(float) 2*(rawdata[2]/4095.0)*vrefint;
 8001572:	88b0      	ldrh	r0, [r6, #4]
		temp=(float) (((100.0)/(tscal2-tscal1))*(rawdata[1]*(vrefint/3.0)-tscal1))+30.0;
 8001574:	edc7 7a00 	vstr	s15, [r7]
		vbat=(float) 2*(rawdata[2]/4095.0)*vrefint;
 8001578:	f7fe ffac 	bl	80004d4 <__aeabi_i2d>
 800157c:	a30e      	add	r3, pc, #56	@ (adr r3, 80015b8 <HAL_ADC_ConvCpltCallback+0x100>)
 800157e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001582:	f7ff f811 	bl	80005a8 <__aeabi_dmul>
 8001586:	4622      	mov	r2, r4
 8001588:	462b      	mov	r3, r5
 800158a:	f7ff f80d 	bl	80005a8 <__aeabi_dmul>
 800158e:	f7ff fb03 	bl	8000b98 <__aeabi_d2f>



}
 8001592:	ecbd 8b02 	vpop	{d8}
		vbat=(float) 2*(rawdata[2]/4095.0)*vrefint;
 8001596:	f8ca 0000 	str.w	r0, [sl]
	HAL_ADC_Start_DMA(&hadc1,(uint32_t*)rawdata, 3);
 800159a:	490a      	ldr	r1, [pc, #40]	@ (80015c4 <HAL_ADC_ConvCpltCallback+0x10c>)
 800159c:	480a      	ldr	r0, [pc, #40]	@ (80015c8 <HAL_ADC_ConvCpltCallback+0x110>)
}
 800159e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	HAL_ADC_Start_DMA(&hadc1,(uint32_t*)rawdata, 3);
 80015a2:	2203      	movs	r2, #3
 80015a4:	f004 bca6 	b.w	8005ef4 <HAL_ADC_Start_DMA>
 80015a8:	d70a3d70 	.word	0xd70a3d70
 80015ac:	40b36323 	.word	0x40b36323
 80015b0:	55555555 	.word	0x55555555
 80015b4:	3fd55555 	.word	0x3fd55555
 80015b8:	10010010 	.word	0x10010010
 80015bc:	3f400100 	.word	0x3f400100
 80015c0:	50040000 	.word	0x50040000
 80015c4:	20000fdc 	.word	0x20000fdc
 80015c8:	20000398 	.word	0x20000398
 80015cc:	20000fd8 	.word	0x20000fd8
 80015d0:	20000fd4 	.word	0x20000fd4
 80015d4:	20000008 	.word	0x20000008
 80015d8:	2000000c 	.word	0x2000000c
 80015dc:	40590000 	.word	0x40590000
 80015e0:	20000fd0 	.word	0x20000fd0

080015e4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80015e4:	b508      	push	{r3, lr}
  /* init code for USB_Device */
  MX_USB_Device_Init();
 80015e6:	f00d faaf 	bl	800eb48 <MX_USB_Device_Init>
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
	statemachine();
 80015ea:	f001 ffed 	bl	80035c8 <statemachine>
	ssd1306_UpdateScreen();
 80015ee:	f001 f963 	bl	80028b8 <ssd1306_UpdateScreen>
    osDelay(50);
 80015f2:	2032      	movs	r0, #50	@ 0x32
 80015f4:	f00b fe6a 	bl	800d2cc <osDelay>
  for(;;)
 80015f8:	e7f7      	b.n	80015ea <StartDefaultTask+0x6>
 80015fa:	bf00      	nop

080015fc <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 80015fc:	4c09      	ldr	r4, [pc, #36]	@ (8001624 <StartTask02+0x28>)
  {


	  if(received_flag==1){

	  		  GNSS_ParsePVTData(&GNSSData);
 80015fe:	4e0a      	ldr	r6, [pc, #40]	@ (8001628 <StartTask02+0x2c>)
	  		  received_flag=0;


	  	  }
	HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_0);
 8001600:	4d0a      	ldr	r5, [pc, #40]	@ (800162c <StartTask02+0x30>)
{
 8001602:	b580      	push	{r7, lr}
	  		  received_flag=0;
 8001604:	2700      	movs	r7, #0
	  if(received_flag==1){
 8001606:	6823      	ldr	r3, [r4, #0]
 8001608:	2b01      	cmp	r3, #1
	  		  GNSS_ParsePVTData(&GNSSData);
 800160a:	4630      	mov	r0, r6
	  if(received_flag==1){
 800160c:	d102      	bne.n	8001614 <StartTask02+0x18>
	  		  GNSS_ParsePVTData(&GNSSData);
 800160e:	f7ff fd13 	bl	8001038 <GNSS_ParsePVTData>
	  		  received_flag=0;
 8001612:	6027      	str	r7, [r4, #0]
	HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_0);
 8001614:	4628      	mov	r0, r5
 8001616:	2101      	movs	r1, #1
 8001618:	f004 ffc2 	bl	80065a0 <HAL_GPIO_TogglePin>
    osDelay(100);
 800161c:	2064      	movs	r0, #100	@ 0x64
 800161e:	f00b fe55 	bl	800d2cc <osDelay>
	  if(received_flag==1){
 8001622:	e7f0      	b.n	8001606 <StartTask02+0xa>
 8001624:	2000051c 	.word	0x2000051c
 8001628:	20000520 	.word	0x20000520
 800162c:	48000400 	.word	0x48000400

08001630 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void const * argument)
{
 8001630:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8001634:	4c42      	ldr	r4, [pc, #264]	@ (8001740 <StartTask03+0x110>)
 8001636:	f8df 9138 	ldr.w	r9, [pc, #312]	@ 8001770 <StartTask03+0x140>
 800163a:	f8df b138 	ldr.w	fp, [pc, #312]	@ 8001774 <StartTask03+0x144>
 800163e:	f8df 8138 	ldr.w	r8, [pc, #312]	@ 8001778 <StartTask03+0x148>
 8001642:	4f40      	ldr	r7, [pc, #256]	@ (8001744 <StartTask03+0x114>)
 8001644:	4e40      	ldr	r6, [pc, #256]	@ (8001748 <StartTask03+0x118>)
							  }


								bmp581_read_precise_normal(&bmp581);
								distanceparcouru=distanceparcouru + distancecalc(oldlat,GNSSData.fLat,oldlong, GNSSData.fLon);
								flashbufferlen=csvframe((uint8_t *)flashwrite,temp,vbat,GNSSData,GNSSData.numSV,GNSSData.fhACC,bmpalt);
 8001646:	4d41      	ldr	r5, [pc, #260]	@ (800174c <StartTask03+0x11c>)
{
 8001648:	b0b1      	sub	sp, #196	@ 0xc4
	  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_1);
 800164a:	4841      	ldr	r0, [pc, #260]	@ (8001750 <StartTask03+0x120>)
 800164c:	2102      	movs	r1, #2
 800164e:	f004 ffa7 	bl	80065a0 <HAL_GPIO_TogglePin>
	  if(GNSSData.fgSpeed>=vitmax){
 8001652:	edd4 7a30 	vldr	s15, [r4, #192]	@ 0xc0
 8001656:	ed99 7a00 	vldr	s14, [r9]
							  if(pagenumber+1>=MAX_WRITE_PAGE){
 800165a:	f8db 2000 	ldr.w	r2, [fp]
	  if(GNSSData.fgSpeed>=vitmax){
 800165e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001662:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
							  if(pagenumber+1>=MAX_WRITE_PAGE){
 8001666:	f246 33fd 	movw	r3, #25597	@ 0x63fd
							  									 vitmax=GNSSData.fgSpeed;
 800166a:	bfa8      	it	ge
 800166c:	edc9 7a00 	vstrge	s15, [r9]
							  if(pagenumber+1>=MAX_WRITE_PAGE){
 8001670:	429a      	cmp	r2, r3
								  osThreadSuspend(NULL);
 8001672:	f04f 0000 	mov.w	r0, #0
							  if(pagenumber+1>=MAX_WRITE_PAGE){
 8001676:	dd04      	ble.n	8001682 <StartTask03+0x52>
								  osThreadSuspend(NULL);
 8001678:	f00b fe30 	bl	800d2dc <osThreadSuspend>
								  balisestate=2;
 800167c:	4a35      	ldr	r2, [pc, #212]	@ (8001754 <StartTask03+0x124>)
 800167e:	2302      	movs	r3, #2
 8001680:	7013      	strb	r3, [r2, #0]
								bmp581_read_precise_normal(&bmp581);
 8001682:	4835      	ldr	r0, [pc, #212]	@ (8001758 <StartTask03+0x128>)
 8001684:	f000 f99c 	bl	80019c0 <bmp581_read_precise_normal>
								distanceparcouru=distanceparcouru + distancecalc(oldlat,GNSSData.fLat,oldlong, GNSSData.fLon);
 8001688:	f8d4 008c 	ldr.w	r0, [r4, #140]	@ 0x8c
 800168c:	f7fe ff34 	bl	80004f8 <__aeabi_f2d>
 8001690:	ec41 0b18 	vmov	d8, r0, r1
 8001694:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
 8001698:	f7fe ff2e 	bl	80004f8 <__aeabi_f2d>
 800169c:	eeb0 3a48 	vmov.f32	s6, s16
 80016a0:	eef0 3a68 	vmov.f32	s7, s17
 80016a4:	ed98 ab00 	vldr	d10, [r8]
 80016a8:	ec41 0b11 	vmov	d1, r0, r1
 80016ac:	eeb0 2a4a 	vmov.f32	s4, s20
 80016b0:	eef0 2a6a 	vmov.f32	s5, s21
 80016b4:	ed97 0b00 	vldr	d0, [r7]
 80016b8:	f7ff fdaa 	bl	8001210 <distancecalc>
 80016bc:	e9d6 0100 	ldrd	r0, r1, [r6]
 80016c0:	ec53 2b10 	vmov	r2, r3, d0
 80016c4:	f7fe fdba 	bl	800023c <__adddf3>
								flashbufferlen=csvframe((uint8_t *)flashwrite,temp,vbat,GNSSData,GNSSData.numSV,GNSSData.fhACC,bmpalt);
 80016c8:	4b24      	ldr	r3, [pc, #144]	@ (800175c <StartTask03+0x12c>)
 80016ca:	ed94 9a2b 	vldr	s18, [r4, #172]	@ 0xac
 80016ce:	ed93 ab00 	vldr	d10, [r3]
 80016d2:	4b23      	ldr	r3, [pc, #140]	@ (8001760 <StartTask03+0x130>)
 80016d4:	edd3 8a00 	vldr	s17, [r3]
 80016d8:	4b22      	ldr	r3, [pc, #136]	@ (8001764 <StartTask03+0x134>)
 80016da:	ed93 8a00 	vldr	s16, [r3]
 80016de:	f894 3078 	ldrb.w	r3, [r4, #120]	@ 0x78
 80016e2:	932f      	str	r3, [sp, #188]	@ 0xbc
								distanceparcouru=distanceparcouru + distancecalc(oldlat,GNSSData.fLat,oldlong, GNSSData.fLon);
 80016e4:	e9c6 0100 	strd	r0, r1, [r6]
								flashbufferlen=csvframe((uint8_t *)flashwrite,temp,vbat,GNSSData,GNSSData.numSV,GNSSData.fhACC,bmpalt);
 80016e8:	22bc      	movs	r2, #188	@ 0xbc
 80016ea:	491f      	ldr	r1, [pc, #124]	@ (8001768 <StartTask03+0x138>)
 80016ec:	4668      	mov	r0, sp
 80016ee:	f00e fde6 	bl	80102be <memcpy>
 80016f2:	eeb0 2a4a 	vmov.f32	s4, s20
 80016f6:	eef0 2a6a 	vmov.f32	s5, s21
 80016fa:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80016fe:	eeb0 1a49 	vmov.f32	s2, s18
 8001702:	eef0 0a68 	vmov.f32	s1, s17
 8001706:	eeb0 0a48 	vmov.f32	s0, s16
 800170a:	4628      	mov	r0, r5
 800170c:	f000 ff00 	bl	8002510 <csvframe>
 8001710:	4b16      	ldr	r3, [pc, #88]	@ (800176c <StartTask03+0x13c>)
 8001712:	4682      	mov	sl, r0
 8001714:	6018      	str	r0, [r3, #0]
								  oldlat=GNSSData.fLat;
 8001716:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
 800171a:	f7fe feed 	bl	80004f8 <__aeabi_f2d>
 800171e:	e9c7 0100 	strd	r0, r1, [r7]
								  oldlong=GNSSData.fLon;
 8001722:	f8d4 008c 	ldr.w	r0, [r4, #140]	@ 0x8c
 8001726:	f7fe fee7 	bl	80004f8 <__aeabi_f2d>
 800172a:	e9c8 0100 	strd	r0, r1, [r8]
								  writebuffertoflash((uint8_t*)flashwrite,flashbufferlen);
 800172e:	4628      	mov	r0, r5
 8001730:	4651      	mov	r1, sl
 8001732:	f000 ffcf 	bl	80026d4 <writebuffertoflash>


    osDelay(200);
 8001736:	20c8      	movs	r0, #200	@ 0xc8
 8001738:	f00b fdc8 	bl	800d2cc <osDelay>
	  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_1);
 800173c:	e785      	b.n	800164a <StartTask03+0x1a>
 800173e:	bf00      	nop
 8001740:	20000520 	.word	0x20000520
 8001744:	20000618 	.word	0x20000618
 8001748:	20000620 	.word	0x20000620
 800174c:	20000ed0 	.word	0x20000ed0
 8001750:	48000400 	.word	0x48000400
 8001754:	2000107b 	.word	0x2000107b
 8001758:	200005e8 	.word	0x200005e8
 800175c:	20000418 	.word	0x20000418
 8001760:	20000fd0 	.word	0x20000fd0
 8001764:	20000fd8 	.word	0x20000fd8
 8001768:	2000052c 	.word	0x2000052c
 800176c:	20000634 	.word	0x20000634
 8001770:	2000064c 	.word	0x2000064c
 8001774:	200006c8 	.word	0x200006c8
 8001778:	20000610 	.word	0x20000610

0800177c <StartTask04>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask04 */
void StartTask04(void const * argument)
{
 800177c:	b508      	push	{r3, lr}
  for(;;)
  {

	  usbtransmit();
	  ssd1306_UpdateScreen();
	  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_1);
 800177e:	4c06      	ldr	r4, [pc, #24]	@ (8001798 <StartTask04+0x1c>)
	  usbtransmit();
 8001780:	f003 fe46 	bl	8005410 <usbtransmit>
	  ssd1306_UpdateScreen();
 8001784:	f001 f898 	bl	80028b8 <ssd1306_UpdateScreen>
	  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_1);
 8001788:	4620      	mov	r0, r4
 800178a:	2102      	movs	r1, #2
 800178c:	f004 ff08 	bl	80065a0 <HAL_GPIO_TogglePin>
	  osDelay(100);
 8001790:	2064      	movs	r0, #100	@ 0x64
 8001792:	f00b fd9b 	bl	800d2cc <osDelay>
  for(;;)
 8001796:	e7f3      	b.n	8001780 <StartTask04+0x4>
 8001798:	48000400 	.word	0x48000400

0800179c <StartTask05>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask05 */
void StartTask05(void const * argument)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	4c17      	ldr	r4, [pc, #92]	@ (80017fc <StartTask05+0x60>)
 80017a0:	f8df 9068 	ldr.w	r9, [pc, #104]	@ 800180c <StartTask05+0x70>
 80017a4:	f8df 8068 	ldr.w	r8, [pc, #104]	@ 8001810 <StartTask05+0x74>
  /* Infinite loop */
  for(;;)
  {

	  if(GNSSData.fixType>=3){
		  bmp581_read_precise_normal(&bmp581);
 80017a8:	4d15      	ldr	r5, [pc, #84]	@ (8001800 <StartTask05+0x64>)
		  P0 =(double) bmppress / powf((1 - (GNSSData.fhMSL / 44330.0f)), 5.255f);
 80017aa:	eddf 8a16 	vldr	s17, [pc, #88]	@ 8001804 <StartTask05+0x68>
 80017ae:	ed9f 8a16 	vldr	s16, [pc, #88]	@ 8001808 <StartTask05+0x6c>
	  if(GNSSData.fixType>=3){
 80017b2:	f894 3077 	ldrb.w	r3, [r4, #119]	@ 0x77
 80017b6:	2b02      	cmp	r3, #2
		  bmp581_read_precise_normal(&bmp581);
 80017b8:	4628      	mov	r0, r5
	  if(GNSSData.fixType>=3){
 80017ba:	d919      	bls.n	80017f0 <StartTask05+0x54>
		  bmp581_read_precise_normal(&bmp581);
 80017bc:	f000 f900 	bl	80019c0 <bmp581_read_precise_normal>
		  P0 =(double) bmppress / powf((1 - (GNSSData.fhMSL / 44330.0f)), 5.255f);
 80017c0:	edd4 7a29 	vldr	s15, [r4, #164]	@ 0xa4
 80017c4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80017c8:	eea7 0ae8 	vfms.f32	s0, s15, s17
 80017cc:	eef0 0a48 	vmov.f32	s1, s16
 80017d0:	f012 f93a 	bl	8013a48 <powf>
 80017d4:	ee10 0a10 	vmov	r0, s0
 80017d8:	f7fe fe8e 	bl	80004f8 <__aeabi_f2d>
 80017dc:	e9d9 6700 	ldrd	r6, r7, [r9]
 80017e0:	4602      	mov	r2, r0
 80017e2:	460b      	mov	r3, r1
 80017e4:	4630      	mov	r0, r6
 80017e6:	4639      	mov	r1, r7
 80017e8:	f7ff f808 	bl	80007fc <__aeabi_ddiv>
 80017ec:	e9c8 0100 	strd	r0, r1, [r8]

	  }
    osDelay(20000);
 80017f0:	f644 6020 	movw	r0, #20000	@ 0x4e20
 80017f4:	f00b fd6a 	bl	800d2cc <osDelay>
	  if(GNSSData.fixType>=3){
 80017f8:	e7db      	b.n	80017b2 <StartTask05+0x16>
 80017fa:	bf00      	nop
 80017fc:	20000520 	.word	0x20000520
 8001800:	200005e8 	.word	0x200005e8
 8001804:	37bd3b20 	.word	0x37bd3b20
 8001808:	40a828f6 	.word	0x40a828f6
 800180c:	20000420 	.word	0x20000420
 8001810:	20000010 	.word	0x20000010

08001814 <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void) {
 8001814:	b570      	push	{r4, r5, r6, lr}
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 256);
 8001816:	4c32      	ldr	r4, [pc, #200]	@ (80018e0 <MX_FREERTOS_Init+0xcc>)
  BALISEHandle = osThreadCreate(osThread(BALISE), NULL);
 8001818:	4e32      	ldr	r6, [pc, #200]	@ (80018e4 <MX_FREERTOS_Init+0xd0>)
  USBTRANSMITHandle = osThreadCreate(osThread(USBTRANSMIT), NULL);
 800181a:	4d33      	ldr	r5, [pc, #204]	@ (80018e8 <MX_FREERTOS_Init+0xd4>)
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 256);
 800181c:	46a6      	mov	lr, r4
 800181e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
void MX_FREERTOS_Init(void) {
 8001822:	b09a      	sub	sp, #104	@ 0x68
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 256);
 8001824:	f10d 0c04 	add.w	ip, sp, #4
 8001828:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800182c:	f8de 3000 	ldr.w	r3, [lr]
 8001830:	f8cc 3000 	str.w	r3, [ip]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001834:	2100      	movs	r1, #0
 8001836:	a801      	add	r0, sp, #4
 8001838:	f00b fd22 	bl	800d280 <osThreadCreate>
 800183c:	4b2b      	ldr	r3, [pc, #172]	@ (80018ec <MX_FREERTOS_Init+0xd8>)
  osThreadDef(GNSSPARSE, StartTask02, osPriorityAboveNormal, 0, 256);
 800183e:	f104 0e14 	add.w	lr, r4, #20
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001842:	6018      	str	r0, [r3, #0]
  osThreadDef(GNSSPARSE, StartTask02, osPriorityAboveNormal, 0, 256);
 8001844:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8001848:	f10d 0c18 	add.w	ip, sp, #24
 800184c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8001850:	f8de 3000 	ldr.w	r3, [lr]
 8001854:	f8cc 3000 	str.w	r3, [ip]
  GNSSPARSEHandle = osThreadCreate(osThread(GNSSPARSE), NULL);
 8001858:	2100      	movs	r1, #0
 800185a:	a806      	add	r0, sp, #24
 800185c:	f00b fd10 	bl	800d280 <osThreadCreate>
 8001860:	4b23      	ldr	r3, [pc, #140]	@ (80018f0 <MX_FREERTOS_Init+0xdc>)
  osThreadDef(BALISE, StartTask03, osPriorityRealtime, 0, 256);
 8001862:	f104 0e28 	add.w	lr, r4, #40	@ 0x28
  GNSSPARSEHandle = osThreadCreate(osThread(GNSSPARSE), NULL);
 8001866:	6018      	str	r0, [r3, #0]
  osThreadDef(BALISE, StartTask03, osPriorityRealtime, 0, 256);
 8001868:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800186c:	f10d 0c2c 	add.w	ip, sp, #44	@ 0x2c
 8001870:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8001874:	f8de 3000 	ldr.w	r3, [lr]
 8001878:	f8cc 3000 	str.w	r3, [ip]
  BALISEHandle = osThreadCreate(osThread(BALISE), NULL);
 800187c:	2100      	movs	r1, #0
 800187e:	a80b      	add	r0, sp, #44	@ 0x2c
 8001880:	f00b fcfe 	bl	800d280 <osThreadCreate>
  osThreadDef(USBTRANSMIT, StartTask04, osPriorityHigh, 0, 256);
 8001884:	f104 0e3c 	add.w	lr, r4, #60	@ 0x3c
  BALISEHandle = osThreadCreate(osThread(BALISE), NULL);
 8001888:	6030      	str	r0, [r6, #0]
  osThreadDef(USBTRANSMIT, StartTask04, osPriorityHigh, 0, 256);
 800188a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800188e:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 8001892:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8001896:	f8de 3000 	ldr.w	r3, [lr]
 800189a:	f8cc 3000 	str.w	r3, [ip]
  USBTRANSMITHandle = osThreadCreate(osThread(USBTRANSMIT), NULL);
 800189e:	2100      	movs	r1, #0
 80018a0:	a810      	add	r0, sp, #64	@ 0x40
 80018a2:	f00b fced 	bl	800d280 <osThreadCreate>
  osThreadDef(BAROCALIB, StartTask05, osPriorityBelowNormal, 0, 256);
 80018a6:	f104 0c50 	add.w	ip, r4, #80	@ 0x50
  USBTRANSMITHandle = osThreadCreate(osThread(USBTRANSMIT), NULL);
 80018aa:	6028      	str	r0, [r5, #0]
  osThreadDef(BAROCALIB, StartTask05, osPriorityBelowNormal, 0, 256);
 80018ac:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80018b0:	ac15      	add	r4, sp, #84	@ 0x54
 80018b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018b4:	f8dc 3000 	ldr.w	r3, [ip]
 80018b8:	6023      	str	r3, [r4, #0]
  BAROCALIBHandle = osThreadCreate(osThread(BAROCALIB), NULL);
 80018ba:	2100      	movs	r1, #0
 80018bc:	a815      	add	r0, sp, #84	@ 0x54
 80018be:	f00b fcdf 	bl	800d280 <osThreadCreate>
 80018c2:	4b0c      	ldr	r3, [pc, #48]	@ (80018f4 <MX_FREERTOS_Init+0xe0>)
 80018c4:	4602      	mov	r2, r0
  osThreadSuspend(BALISEHandle);
 80018c6:	6830      	ldr	r0, [r6, #0]
  BAROCALIBHandle = osThreadCreate(osThread(BAROCALIB), NULL);
 80018c8:	601a      	str	r2, [r3, #0]
  osThreadSuspend(BALISEHandle);
 80018ca:	f00b fd07 	bl	800d2dc <osThreadSuspend>
  osThreadSuspend(USBTRANSMITHandle);
 80018ce:	6828      	ldr	r0, [r5, #0]
 80018d0:	f00b fd04 	bl	800d2dc <osThreadSuspend>
  osThreadSetPriority(USBTRANSMITHandle, osPriorityRealtime);
 80018d4:	6828      	ldr	r0, [r5, #0]
 80018d6:	2103      	movs	r1, #3
 80018d8:	f00b fcee 	bl	800d2b8 <osThreadSetPriority>
}
 80018dc:	b01a      	add	sp, #104	@ 0x68
 80018de:	bd70      	pop	{r4, r5, r6, pc}
 80018e0:	08015bf8 	.word	0x08015bf8
 80018e4:	20000404 	.word	0x20000404
 80018e8:	20000400 	.word	0x20000400
 80018ec:	2000040c 	.word	0x2000040c
 80018f0:	20000408 	.word	0x20000408
 80018f4:	200003fc 	.word	0x200003fc

080018f8 <bmp581_init_precise_normal>:
uint8_t odrcheck=0;
double P0=101325.0;

//Ox18 donc 11000 pour ODR donc 5hz en mode normal avec oversampling a 128 pour la pression et 8 pour la temperature

uint8_t bmp581_init_precise_normal(BMP_t * bmp581){
 80018f8:	b570      	push	{r4, r5, r6, lr}
 80018fa:	b086      	sub	sp, #24

//	uint8_t OSR_tmask = 0b01111111;
//	uint8_t ODR_tmask = 0b01100001;

	uint8_t OSR_tmask = 0b01111011;
 80018fc:	217b      	movs	r1, #123	@ 0x7b
 80018fe:	f88d 1014 	strb.w	r1, [sp, #20]
	uint8_t ODR_tmask = 0b01101001;
 8001902:	2169      	movs	r1, #105	@ 0x69
 8001904:	f88d 1015 	strb.w	r1, [sp, #21]
	uint8_t DSP_conf_mask = 0b00101011;
 8001908:	212b      	movs	r1, #43	@ 0x2b
	uint8_t DSP_conf_mask2 = 0b00010010;
	int check=0;

	if(HAL_I2C_Mem_Write(&hi2c1, BMP581_WRITE_ADDR, BMP581_OSR_CONFIG, 1, &OSR_tmask, 1, 100)!=HAL_OK){
 800190a:	2501      	movs	r5, #1
 800190c:	2664      	movs	r6, #100	@ 0x64
 800190e:	a805      	add	r0, sp, #20
	uint8_t DSP_conf_mask = 0b00101011;
 8001910:	f88d 1016 	strb.w	r1, [sp, #22]
	uint8_t DSP_conf_mask2 = 0b00010010;
 8001914:	2112      	movs	r1, #18
	if(HAL_I2C_Mem_Write(&hi2c1, BMP581_WRITE_ADDR, BMP581_OSR_CONFIG, 1, &OSR_tmask, 1, 100)!=HAL_OK){
 8001916:	462b      	mov	r3, r5
 8001918:	9000      	str	r0, [sp, #0]
	uint8_t DSP_conf_mask2 = 0b00010010;
 800191a:	f88d 1017 	strb.w	r1, [sp, #23]
	if(HAL_I2C_Mem_Write(&hi2c1, BMP581_WRITE_ADDR, BMP581_OSR_CONFIG, 1, &OSR_tmask, 1, 100)!=HAL_OK){
 800191e:	e9cd 5601 	strd	r5, r6, [sp, #4]
 8001922:	2236      	movs	r2, #54	@ 0x36
 8001924:	218e      	movs	r1, #142	@ 0x8e
 8001926:	4823      	ldr	r0, [pc, #140]	@ (80019b4 <bmp581_init_precise_normal+0xbc>)
 8001928:	f005 f97e 	bl	8006c28 <HAL_I2C_Mem_Write>
			check=1;
		}
	if(HAL_I2C_Mem_Write(&hi2c1, BMP581_WRITE_ADDR, BMP581_ODR_CONFIG, 1, &ODR_tmask, 1, 100)!=HAL_OK){
 800192c:	f10d 0215 	add.w	r2, sp, #21
 8001930:	462b      	mov	r3, r5
 8001932:	9200      	str	r2, [sp, #0]
 8001934:	e9cd 5601 	strd	r5, r6, [sp, #4]
	if(HAL_I2C_Mem_Write(&hi2c1, BMP581_WRITE_ADDR, BMP581_OSR_CONFIG, 1, &OSR_tmask, 1, 100)!=HAL_OK){
 8001938:	4604      	mov	r4, r0
	if(HAL_I2C_Mem_Write(&hi2c1, BMP581_WRITE_ADDR, BMP581_ODR_CONFIG, 1, &ODR_tmask, 1, 100)!=HAL_OK){
 800193a:	2237      	movs	r2, #55	@ 0x37
 800193c:	218e      	movs	r1, #142	@ 0x8e
 800193e:	481d      	ldr	r0, [pc, #116]	@ (80019b4 <bmp581_init_precise_normal+0xbc>)
 8001940:	f005 f972 	bl	8006c28 <HAL_I2C_Mem_Write>
 8001944:	4304      	orrs	r4, r0
					check=1;
				}
	if(HAL_I2C_Mem_Write(&hi2c1, BMP581_WRITE_ADDR, BMP581_DSP_CONFIG, 1, &DSP_conf_mask, 1, 100)!=HAL_OK){
 8001946:	f10d 0216 	add.w	r2, sp, #22
	if(HAL_I2C_Mem_Write(&hi2c1, BMP581_WRITE_ADDR, BMP581_ODR_CONFIG, 1, &ODR_tmask, 1, 100)!=HAL_OK){
 800194a:	b2e4      	uxtb	r4, r4
 800194c:	3c00      	subs	r4, #0
	if(HAL_I2C_Mem_Write(&hi2c1, BMP581_WRITE_ADDR, BMP581_DSP_CONFIG, 1, &DSP_conf_mask, 1, 100)!=HAL_OK){
 800194e:	462b      	mov	r3, r5
 8001950:	9200      	str	r2, [sp, #0]
 8001952:	e9cd 5601 	strd	r5, r6, [sp, #4]
 8001956:	f04f 0230 	mov.w	r2, #48	@ 0x30
 800195a:	f04f 018e 	mov.w	r1, #142	@ 0x8e
 800195e:	4815      	ldr	r0, [pc, #84]	@ (80019b4 <bmp581_init_precise_normal+0xbc>)
	if(HAL_I2C_Mem_Write(&hi2c1, BMP581_WRITE_ADDR, BMP581_ODR_CONFIG, 1, &ODR_tmask, 1, 100)!=HAL_OK){
 8001960:	bf18      	it	ne
 8001962:	2401      	movne	r4, #1
	if(HAL_I2C_Mem_Write(&hi2c1, BMP581_WRITE_ADDR, BMP581_DSP_CONFIG, 1, &DSP_conf_mask, 1, 100)!=HAL_OK){
 8001964:	f005 f960 	bl	8006c28 <HAL_I2C_Mem_Write>
				check=1;
			}
	if(HAL_I2C_Mem_Write(&hi2c1, BMP581_WRITE_ADDR, BMP581_DSP_CONFIG, 1, &DSP_conf_mask2, 1, 100)!=HAL_OK){
 8001968:	f10d 0317 	add.w	r3, sp, #23
				check=1;
 800196c:	2800      	cmp	r0, #0
	if(HAL_I2C_Mem_Write(&hi2c1, BMP581_WRITE_ADDR, BMP581_DSP_CONFIG, 1, &DSP_conf_mask2, 1, 100)!=HAL_OK){
 800196e:	9300      	str	r3, [sp, #0]
 8001970:	e9cd 5601 	strd	r5, r6, [sp, #4]
 8001974:	462b      	mov	r3, r5
 8001976:	f04f 0230 	mov.w	r2, #48	@ 0x30
 800197a:	f04f 018e 	mov.w	r1, #142	@ 0x8e
 800197e:	480d      	ldr	r0, [pc, #52]	@ (80019b4 <bmp581_init_precise_normal+0xbc>)
				check=1;
 8001980:	bf18      	it	ne
 8001982:	462c      	movne	r4, r5
	if(HAL_I2C_Mem_Write(&hi2c1, BMP581_WRITE_ADDR, BMP581_DSP_CONFIG, 1, &DSP_conf_mask2, 1, 100)!=HAL_OK){
 8001984:	f005 f950 	bl	8006c28 <HAL_I2C_Mem_Write>
					check=1;
				}
	if(HAL_I2C_Mem_Read(&hi2c1, BMP581_READ_ADDR, BMP581_OSR_EFF, 1, &odrcheck, 1, 100)!=HAL_OK){
 8001988:	4b0b      	ldr	r3, [pc, #44]	@ (80019b8 <bmp581_init_precise_normal+0xc0>)
 800198a:	9300      	str	r3, [sp, #0]
					check=1;
 800198c:	2800      	cmp	r0, #0
	if(HAL_I2C_Mem_Read(&hi2c1, BMP581_READ_ADDR, BMP581_OSR_EFF, 1, &odrcheck, 1, 100)!=HAL_OK){
 800198e:	e9cd 5601 	strd	r5, r6, [sp, #4]
 8001992:	462b      	mov	r3, r5
 8001994:	f04f 0238 	mov.w	r2, #56	@ 0x38
 8001998:	f04f 018f 	mov.w	r1, #143	@ 0x8f
 800199c:	4805      	ldr	r0, [pc, #20]	@ (80019b4 <bmp581_init_precise_normal+0xbc>)
					check=1;
 800199e:	bf18      	it	ne
 80019a0:	462c      	movne	r4, r5
	if(HAL_I2C_Mem_Read(&hi2c1, BMP581_READ_ADDR, BMP581_OSR_EFF, 1, &odrcheck, 1, 100)!=HAL_OK){
 80019a2:	f005 fa3d 	bl	8006e20 <HAL_I2C_Mem_Read>
 80019a6:	2800      	cmp	r0, #0
				}


	return check;

}
 80019a8:	bf0c      	ite	eq
 80019aa:	4620      	moveq	r0, r4
 80019ac:	4628      	movne	r0, r5
 80019ae:	b006      	add	sp, #24
 80019b0:	bd70      	pop	{r4, r5, r6, pc}
 80019b2:	bf00      	nop
 80019b4:	20000488 	.word	0x20000488
 80019b8:	20000410 	.word	0x20000410
 80019bc:	00000000 	.word	0x00000000

080019c0 <bmp581_read_precise_normal>:




uint8_t bmp581_read_precise_normal(BMP_t * bmp581){
 80019c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019c2:	b087      	sub	sp, #28
//			check=1;
//		}
//		if(HAL_I2C_Mem_Read(&hi2c1, BMP581_READ_ADDR, BMP581_PRESS_DATA_MSB, 1, &recarray[5], 1, 100)!=HAL_OK){
//			check=1;
//		}
		if(HAL_I2C_Mem_Read(&hi2c1, BMP581_READ_ADDR, BMP581_TEMP_DATA_XLSB, 1, &recarray, 6, 100)!=HAL_OK){
 80019c4:	2164      	movs	r1, #100	@ 0x64
 80019c6:	2206      	movs	r2, #6
 80019c8:	ab04      	add	r3, sp, #16
 80019ca:	e9cd 2101 	strd	r2, r1, [sp, #4]
 80019ce:	9300      	str	r3, [sp, #0]
 80019d0:	4827      	ldr	r0, [pc, #156]	@ (8001a70 <bmp581_read_precise_normal+0xb0>)
 80019d2:	2301      	movs	r3, #1
 80019d4:	221d      	movs	r2, #29
 80019d6:	218f      	movs	r1, #143	@ 0x8f
 80019d8:	f005 fa22 	bl	8006e20 <HAL_I2C_Mem_Read>
 80019dc:	2800      	cmp	r0, #0
 80019de:	d13f      	bne.n	8001a60 <bmp581_read_precise_normal+0xa0>
				}


		if(check==0){

		intbuffertemp=(recarray[2]<<16)|(recarray[1]<<8)|(recarray[0]);
 80019e0:	f89d 3011 	ldrb.w	r3, [sp, #17]
		intbufferpres=(recarray[5]<<16)|(recarray[4]<<8)|(recarray[3]);
 80019e4:	f89d 5014 	ldrb.w	r5, [sp, #20]
		intbuffertemp=(recarray[2]<<16)|(recarray[1]<<8)|(recarray[0]);
 80019e8:	f89d 1012 	ldrb.w	r1, [sp, #18]
		intbufferpres=(recarray[5]<<16)|(recarray[4]<<8)|(recarray[3]);
 80019ec:	f89d 2015 	ldrb.w	r2, [sp, #21]
		bmptemp=(double)intbuffertemp/65536.0;
 80019f0:	4f20      	ldr	r7, [pc, #128]	@ (8001a74 <bmp581_read_precise_normal+0xb4>)
		bmppress=(double) intbufferpres/64.0;
		bmpalt=(double) ((8.314*298.15)/(9.80665*0.028964))*log(P0/(bmppress));
 80019f2:	4e21      	ldr	r6, [pc, #132]	@ (8001a78 <bmp581_read_precise_normal+0xb8>)
 80019f4:	4604      	mov	r4, r0
		intbuffertemp=(recarray[2]<<16)|(recarray[1]<<8)|(recarray[0]);
 80019f6:	021b      	lsls	r3, r3, #8
 80019f8:	f89d 0010 	ldrb.w	r0, [sp, #16]
		intbufferpres=(recarray[5]<<16)|(recarray[4]<<8)|(recarray[3]);
 80019fc:	022d      	lsls	r5, r5, #8
		intbuffertemp=(recarray[2]<<16)|(recarray[1]<<8)|(recarray[0]);
 80019fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
		intbufferpres=(recarray[5]<<16)|(recarray[4]<<8)|(recarray[3]);
 8001a02:	ea45 4502 	orr.w	r5, r5, r2, lsl #16
 8001a06:	f89d 2013 	ldrb.w	r2, [sp, #19]
		bmptemp=(double)intbuffertemp/65536.0;
 8001a0a:	4318      	orrs	r0, r3
		intbufferpres=(recarray[5]<<16)|(recarray[4]<<8)|(recarray[3]);
 8001a0c:	4315      	orrs	r5, r2
		bmptemp=(double)intbuffertemp/65536.0;
 8001a0e:	f7fe fd61 	bl	80004d4 <__aeabi_i2d>
 8001a12:	4b1a      	ldr	r3, [pc, #104]	@ (8001a7c <bmp581_read_precise_normal+0xbc>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	f7fe fdc7 	bl	80005a8 <__aeabi_dmul>
 8001a1a:	e9c7 0100 	strd	r0, r1, [r7]
		bmppress=(double) intbufferpres/64.0;
 8001a1e:	4628      	mov	r0, r5
 8001a20:	f7fe fd58 	bl	80004d4 <__aeabi_i2d>
 8001a24:	4b16      	ldr	r3, [pc, #88]	@ (8001a80 <bmp581_read_precise_normal+0xc0>)
 8001a26:	4d17      	ldr	r5, [pc, #92]	@ (8001a84 <bmp581_read_precise_normal+0xc4>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	f7fe fdbd 	bl	80005a8 <__aeabi_dmul>
 8001a2e:	460b      	mov	r3, r1
		bmpalt=(double) ((8.314*298.15)/(9.80665*0.028964))*log(P0/(bmppress));
 8001a30:	4915      	ldr	r1, [pc, #84]	@ (8001a88 <bmp581_read_precise_normal+0xc8>)
		bmppress=(double) intbufferpres/64.0;
 8001a32:	4602      	mov	r2, r0
 8001a34:	e9c5 2300 	strd	r2, r3, [r5]
		bmpalt=(double) ((8.314*298.15)/(9.80665*0.028964))*log(P0/(bmppress));
 8001a38:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001a3c:	f7fe fede 	bl	80007fc <__aeabi_ddiv>
 8001a40:	ec41 0b10 	vmov	d0, r0, r1
 8001a44:	f011 ff18 	bl	8013878 <log>
 8001a48:	a307      	add	r3, pc, #28	@ (adr r3, 8001a68 <bmp581_read_precise_normal+0xa8>)
 8001a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a4e:	ec51 0b10 	vmov	r0, r1, d0
 8001a52:	f7fe fda9 	bl	80005a8 <__aeabi_dmul>
 8001a56:	e9c6 0100 	strd	r0, r1, [r6]

		}

		return check;
}
 8001a5a:	4620      	mov	r0, r4
 8001a5c:	b007      	add	sp, #28
 8001a5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a60:	2401      	movs	r4, #1
 8001a62:	4620      	mov	r0, r4
 8001a64:	b007      	add	sp, #28
 8001a66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a68:	a7b85a1b 	.word	0xa7b85a1b
 8001a6c:	40c10b81 	.word	0x40c10b81
 8001a70:	20000488 	.word	0x20000488
 8001a74:	20000428 	.word	0x20000428
 8001a78:	20000418 	.word	0x20000418
 8001a7c:	3ef00000 	.word	0x3ef00000
 8001a80:	3f900000 	.word	0x3f900000
 8001a84:	20000420 	.word	0x20000420
 8001a88:	20000010 	.word	0x20000010

08001a8c <MX_DMA_Init>:
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001a8c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001a90:	b510      	push	{r4, lr}
 8001a92:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8001a94:	f040 0004 	orr.w	r0, r0, #4
 8001a98:	6498      	str	r0, [r3, #72]	@ 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001a9a:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
 8001a9c:	b082      	sub	sp, #8
 8001a9e:	f004 0404 	and.w	r4, r4, #4
 8001aa2:	9401      	str	r4, [sp, #4]
  (void)tmpreg;
 8001aa4:	9c01      	ldr	r4, [sp, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001aa6:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
 8001aa8:	f044 0401 	orr.w	r4, r4, #1
 8001aac:	649c      	str	r4, [r3, #72]	@ 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001aae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ab0:	f003 0301 	and.w	r3, r3, #1
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
  __HAL_RCC_DMA1_CLK_ENABLE();

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	2105      	movs	r1, #5
 8001ab8:	9300      	str	r3, [sp, #0]
 8001aba:	200b      	movs	r0, #11
  (void)tmpreg;
 8001abc:	9b00      	ldr	r3, [sp, #0]
 8001abe:	f004 fa7f 	bl	8005fc0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001ac2:	200b      	movs	r0, #11
 8001ac4:	f004 fab8 	bl	8006038 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 6, 0);
 8001ac8:	2200      	movs	r2, #0
 8001aca:	2106      	movs	r1, #6
 8001acc:	200c      	movs	r0, #12
 8001ace:	f004 fa77 	bl	8005fc0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001ad2:	200c      	movs	r0, #12
 8001ad4:	f004 fab0 	bl	8006038 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 8001ad8:	200d      	movs	r0, #13
 8001ada:	2200      	movs	r2, #0
 8001adc:	2105      	movs	r1, #5
 8001ade:	f004 fa6f 	bl	8005fc0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001ae2:	200d      	movs	r0, #13

}
 8001ae4:	b002      	add	sp, #8
 8001ae6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001aea:	f004 baa5 	b.w	8006038 <HAL_NVIC_EnableIRQ>
 8001aee:	bf00      	nop

08001af0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001af0:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001af2:	2400      	movs	r4, #0
{
 8001af4:	b08a      	sub	sp, #40	@ 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001af6:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8001afa:	e9cd 4406 	strd	r4, r4, [sp, #24]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001afe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b02:	9408      	str	r4, [sp, #32]
 8001b04:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED0_Pin|LED1_Pin|SPI_CS_Pin, GPIO_PIN_RESET);
 8001b06:	4e27      	ldr	r6, [pc, #156]	@ (8001ba4 <MX_GPIO_Init+0xb4>)
 8001b08:	f041 0104 	orr.w	r1, r1, #4
 8001b0c:	64d9      	str	r1, [r3, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001b0e:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8001b10:	f001 0104 	and.w	r1, r1, #4
 8001b14:	9103      	str	r1, [sp, #12]
  (void)tmpreg;
 8001b16:	9903      	ldr	r1, [sp, #12]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001b18:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8001b1a:	f041 0102 	orr.w	r1, r1, #2
 8001b1e:	64d9      	str	r1, [r3, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001b20:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8001b22:	f001 0102 	and.w	r1, r1, #2
 8001b26:	9102      	str	r1, [sp, #8]
  (void)tmpreg;
 8001b28:	9902      	ldr	r1, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001b2a:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8001b2c:	f041 0101 	orr.w	r1, r1, #1
 8001b30:	64d9      	str	r1, [r3, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001b32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b34:	f003 0301 	and.w	r3, r3, #1
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8001b38:	4622      	mov	r2, r4
 8001b3a:	9301      	str	r3, [sp, #4]
 8001b3c:	2101      	movs	r1, #1
 8001b3e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
  (void)tmpreg;
 8001b42:	9b01      	ldr	r3, [sp, #4]
 8001b44:	f004 fd26 	bl	8006594 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, LED0_Pin|LED1_Pin|SPI_CS_Pin, GPIO_PIN_RESET);
 8001b48:	4622      	mov	r2, r4
 8001b4a:	4630      	mov	r0, r6
 8001b4c:	2183      	movs	r1, #131	@ 0x83
 8001b4e:	f004 fd21 	bl	8006594 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001b52:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8001b56:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b5a:	a904      	add	r1, sp, #16
 8001b5c:	4812      	ldr	r0, [pc, #72]	@ (8001ba8 <MX_GPIO_Init+0xb8>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5e:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001b60:	e9cd 2304 	strd	r2, r3, [sp, #16]

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001b64:	2501      	movs	r5, #1
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b66:	f004 fc1f 	bl	80063a8 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b6a:	a904      	add	r1, sp, #16
 8001b6c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b70:	e9cd 5504 	strd	r5, r5, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b74:	e9cd 4406 	strd	r4, r4, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b78:	f004 fc16 	bl	80063a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED0_Pin LED1_Pin SPI_CS_Pin */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin|SPI_CS_Pin;
 8001b7c:	2383      	movs	r3, #131	@ 0x83
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b7e:	a904      	add	r1, sp, #16
 8001b80:	4630      	mov	r0, r6
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b82:	e9cd 3504 	strd	r3, r5, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b86:	e9cd 4406 	strd	r4, r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b8a:	f004 fc0d 	bl	80063a8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001b8e:	4622      	mov	r2, r4
 8001b90:	2105      	movs	r1, #5
 8001b92:	2028      	movs	r0, #40	@ 0x28
 8001b94:	f004 fa14 	bl	8005fc0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001b98:	2028      	movs	r0, #40	@ 0x28
 8001b9a:	f004 fa4d 	bl	8006038 <HAL_NVIC_EnableIRQ>

}
 8001b9e:	b00a      	add	sp, #40	@ 0x28
 8001ba0:	bd70      	pop	{r4, r5, r6, pc}
 8001ba2:	bf00      	nop
 8001ba4:	48000400 	.word	0x48000400
 8001ba8:	48000800 	.word	0x48000800

08001bac <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001bac:	b510      	push	{r4, lr}
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001bae:	4818      	ldr	r0, [pc, #96]	@ (8001c10 <MX_I2C1_Init+0x64>)
 8001bb0:	4c18      	ldr	r4, [pc, #96]	@ (8001c14 <MX_I2C1_Init+0x68>)
  hi2c1.Init.Timing = 0x10B17DB5;
 8001bb2:	4919      	ldr	r1, [pc, #100]	@ (8001c18 <MX_I2C1_Init+0x6c>)
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	e9c0 4100 	strd	r4, r1, [r0]
 8001bbc:	e9c0 3202 	strd	r3, r2, [r0, #8]
 8001bc0:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001bc4:	e9c0 3306 	strd	r3, r3, [r0, #24]
 8001bc8:	6203      	str	r3, [r0, #32]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001bca:	f004 ffd3 	bl	8006b74 <HAL_I2C_Init>
 8001bce:	b950      	cbnz	r0, 8001be6 <MX_I2C1_Init+0x3a>
    Error_Handler();
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001bd0:	480f      	ldr	r0, [pc, #60]	@ (8001c10 <MX_I2C1_Init+0x64>)
 8001bd2:	2100      	movs	r1, #0
 8001bd4:	f005 fa22 	bl	800701c <HAL_I2CEx_ConfigAnalogFilter>
 8001bd8:	b968      	cbnz	r0, 8001bf6 <MX_I2C1_Init+0x4a>
    Error_Handler();
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001bda:	480d      	ldr	r0, [pc, #52]	@ (8001c10 <MX_I2C1_Init+0x64>)
 8001bdc:	2100      	movs	r1, #0
 8001bde:	f005 fa47 	bl	8007070 <HAL_I2CEx_ConfigDigitalFilter>
 8001be2:	b980      	cbnz	r0, 8001c06 <MX_I2C1_Init+0x5a>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001be4:	bd10      	pop	{r4, pc}
    Error_Handler();
 8001be6:	f000 fb2f 	bl	8002248 <Error_Handler>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001bea:	4809      	ldr	r0, [pc, #36]	@ (8001c10 <MX_I2C1_Init+0x64>)
 8001bec:	2100      	movs	r1, #0
 8001bee:	f005 fa15 	bl	800701c <HAL_I2CEx_ConfigAnalogFilter>
 8001bf2:	2800      	cmp	r0, #0
 8001bf4:	d0f1      	beq.n	8001bda <MX_I2C1_Init+0x2e>
    Error_Handler();
 8001bf6:	f000 fb27 	bl	8002248 <Error_Handler>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001bfa:	4805      	ldr	r0, [pc, #20]	@ (8001c10 <MX_I2C1_Init+0x64>)
 8001bfc:	2100      	movs	r1, #0
 8001bfe:	f005 fa37 	bl	8007070 <HAL_I2CEx_ConfigDigitalFilter>
 8001c02:	2800      	cmp	r0, #0
 8001c04:	d0ee      	beq.n	8001be4 <MX_I2C1_Init+0x38>
}
 8001c06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8001c0a:	f000 bb1d 	b.w	8002248 <Error_Handler>
 8001c0e:	bf00      	nop
 8001c10:	20000488 	.word	0x20000488
 8001c14:	40005400 	.word	0x40005400
 8001c18:	10b17db5 	.word	0x10b17db5

08001c1c <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001c1c:	b510      	push	{r4, lr}
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001c1e:	481c      	ldr	r0, [pc, #112]	@ (8001c90 <MX_I2C3_Init+0x74>)
 8001c20:	4c1c      	ldr	r4, [pc, #112]	@ (8001c94 <MX_I2C3_Init+0x78>)
  hi2c3.Init.Timing = 0x00910B1C;
 8001c22:	491d      	ldr	r1, [pc, #116]	@ (8001c98 <MX_I2C3_Init+0x7c>)
 8001c24:	2300      	movs	r3, #0
 8001c26:	2201      	movs	r2, #1
 8001c28:	e9c0 4100 	strd	r4, r1, [r0]
 8001c2c:	e9c0 3202 	strd	r3, r2, [r0, #8]
 8001c30:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001c34:	e9c0 3306 	strd	r3, r3, [r0, #24]
 8001c38:	6203      	str	r3, [r0, #32]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c3.Init.OwnAddress2 = 0;
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001c3a:	f004 ff9b 	bl	8006b74 <HAL_I2C_Init>
 8001c3e:	b978      	cbnz	r0, 8001c60 <MX_I2C3_Init+0x44>
    Error_Handler();
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001c40:	4813      	ldr	r0, [pc, #76]	@ (8001c90 <MX_I2C3_Init+0x74>)
 8001c42:	2100      	movs	r1, #0
 8001c44:	f005 f9ea 	bl	800701c <HAL_I2CEx_ConfigAnalogFilter>
 8001c48:	b990      	cbnz	r0, 8001c70 <MX_I2C3_Init+0x54>
    Error_Handler();
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001c4a:	4811      	ldr	r0, [pc, #68]	@ (8001c90 <MX_I2C3_Init+0x74>)
 8001c4c:	2100      	movs	r1, #0
 8001c4e:	f005 fa0f 	bl	8007070 <HAL_I2CEx_ConfigDigitalFilter>
 8001c52:	b9a8      	cbnz	r0, 8001c80 <MX_I2C3_Init+0x64>
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C3);
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001c54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C3);
 8001c58:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 8001c5c:	f005 ba34 	b.w	80070c8 <HAL_I2CEx_EnableFastModePlus>
    Error_Handler();
 8001c60:	f000 faf2 	bl	8002248 <Error_Handler>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001c64:	480a      	ldr	r0, [pc, #40]	@ (8001c90 <MX_I2C3_Init+0x74>)
 8001c66:	2100      	movs	r1, #0
 8001c68:	f005 f9d8 	bl	800701c <HAL_I2CEx_ConfigAnalogFilter>
 8001c6c:	2800      	cmp	r0, #0
 8001c6e:	d0ec      	beq.n	8001c4a <MX_I2C3_Init+0x2e>
    Error_Handler();
 8001c70:	f000 faea 	bl	8002248 <Error_Handler>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001c74:	4806      	ldr	r0, [pc, #24]	@ (8001c90 <MX_I2C3_Init+0x74>)
 8001c76:	2100      	movs	r1, #0
 8001c78:	f005 f9fa 	bl	8007070 <HAL_I2CEx_ConfigDigitalFilter>
 8001c7c:	2800      	cmp	r0, #0
 8001c7e:	d0e9      	beq.n	8001c54 <MX_I2C3_Init+0x38>
    Error_Handler();
 8001c80:	f000 fae2 	bl	8002248 <Error_Handler>
}
 8001c84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C3);
 8001c88:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 8001c8c:	f005 ba1c 	b.w	80070c8 <HAL_I2CEx_EnableFastModePlus>
 8001c90:	20000430 	.word	0x20000430
 8001c94:	40005c00 	.word	0x40005c00
 8001c98:	00910b1c 	.word	0x00910b1c

08001c9c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001c9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c9e:	4604      	mov	r4, r0
 8001ca0:	b0a1      	sub	sp, #132	@ 0x84

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ca2:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ca4:	2250      	movs	r2, #80	@ 0x50
 8001ca6:	a80c      	add	r0, sp, #48	@ 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ca8:	e9cd 1106 	strd	r1, r1, [sp, #24]
 8001cac:	e9cd 1108 	strd	r1, r1, [sp, #32]
 8001cb0:	910a      	str	r1, [sp, #40]	@ 0x28
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001cb2:	f00e fa84 	bl	80101be <memset>
  if(i2cHandle->Instance==I2C1)
 8001cb6:	6823      	ldr	r3, [r4, #0]
 8001cb8:	4a3f      	ldr	r2, [pc, #252]	@ (8001db8 <HAL_I2C_MspInit+0x11c>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d004      	beq.n	8001cc8 <HAL_I2C_MspInit+0x2c>
    __HAL_RCC_I2C1_CLK_ENABLE();
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
  else if(i2cHandle->Instance==I2C3)
 8001cbe:	4a3f      	ldr	r2, [pc, #252]	@ (8001dbc <HAL_I2C_MspInit+0x120>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d030      	beq.n	8001d26 <HAL_I2C_MspInit+0x8a>
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8001cc4:	b021      	add	sp, #132	@ 0x84
 8001cc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001cc8:	2204      	movs	r2, #4
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001cca:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001cce:	a80c      	add	r0, sp, #48	@ 0x30
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001cd0:	920c      	str	r2, [sp, #48]	@ 0x30
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001cd2:	9314      	str	r3, [sp, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001cd4:	f007 f8de 	bl	8008e94 <HAL_RCCEx_PeriphCLKConfig>
 8001cd8:	2800      	cmp	r0, #0
 8001cda:	d167      	bne.n	8001dac <HAL_I2C_MspInit+0x110>
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001cdc:	f04f 44b0 	mov.w	r4, #1476395008	@ 0x58000000
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001ce0:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8001ce4:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ce6:	4836      	ldr	r0, [pc, #216]	@ (8001dc0 <HAL_I2C_MspInit+0x124>)
 8001ce8:	f043 0302 	orr.w	r3, r3, #2
 8001cec:	64e3      	str	r3, [r4, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001cee:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8001cf0:	f003 0302 	and.w	r3, r3, #2
 8001cf4:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001cf6:	2312      	movs	r3, #18
 8001cf8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	2300      	movs	r3, #0
 8001d00:	e9cd 2308 	strd	r2, r3, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d04:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001d06:	2304      	movs	r3, #4
 8001d08:	930a      	str	r3, [sp, #40]	@ 0x28
  (void)tmpreg;
 8001d0a:	9a02      	ldr	r2, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d0c:	f004 fb4c 	bl	80063a8 <HAL_GPIO_Init>
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001d10:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8001d12:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001d16:	65a3      	str	r3, [r4, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001d18:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8001d1a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d1e:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001d20:	9b01      	ldr	r3, [sp, #4]
}
 8001d22:	b021      	add	sp, #132	@ 0x84
 8001d24:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001d26:	2208      	movs	r2, #8
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8001d28:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d2c:	a80c      	add	r0, sp, #48	@ 0x30
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001d2e:	920c      	str	r2, [sp, #48]	@ 0x30
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8001d30:	9315      	str	r3, [sp, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d32:	f007 f8af 	bl	8008e94 <HAL_RCCEx_PeriphCLKConfig>
 8001d36:	2800      	cmp	r0, #0
 8001d38:	d13b      	bne.n	8001db2 <HAL_I2C_MspInit+0x116>
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001d3a:	f04f 44b0 	mov.w	r4, #1476395008	@ 0x58000000
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001d3e:	2504      	movs	r5, #4
 8001d40:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8001d42:	f043 0301 	orr.w	r3, r3, #1
 8001d46:	64e3      	str	r3, [r4, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001d48:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8001d4a:	f003 0301 	and.w	r3, r3, #1
 8001d4e:	9305      	str	r3, [sp, #20]
  (void)tmpreg;
 8001d50:	9b05      	ldr	r3, [sp, #20]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001d52:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8001d54:	f043 0302 	orr.w	r3, r3, #2
 8001d58:	64e3      	str	r3, [r4, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001d5a:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8001d5c:	950a      	str	r5, [sp, #40]	@ 0x28
 8001d5e:	f003 0302 	and.w	r3, r3, #2
 8001d62:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001d64:	2280      	movs	r2, #128	@ 0x80
 8001d66:	2600      	movs	r6, #0
 8001d68:	2700      	movs	r7, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d6a:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001d6c:	2312      	movs	r3, #18
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d6e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001d72:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8001d76:	e9cd 6708 	strd	r6, r7, [sp, #32]
  (void)tmpreg;
 8001d7a:	9b04      	ldr	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d7c:	f004 fb14 	bl	80063a8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001d80:	2210      	movs	r2, #16
 8001d82:	2312      	movs	r3, #18
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d84:	480e      	ldr	r0, [pc, #56]	@ (8001dc0 <HAL_I2C_MspInit+0x124>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001d86:	950a      	str	r5, [sp, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d88:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001d8a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8001d8e:	e9cd 6708 	strd	r6, r7, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d92:	f004 fb09 	bl	80063a8 <HAL_GPIO_Init>
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001d96:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8001d98:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001d9c:	65a3      	str	r3, [r4, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001d9e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8001da0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001da4:	9303      	str	r3, [sp, #12]
  (void)tmpreg;
 8001da6:	9b03      	ldr	r3, [sp, #12]
}
 8001da8:	b021      	add	sp, #132	@ 0x84
 8001daa:	bdf0      	pop	{r4, r5, r6, r7, pc}
      Error_Handler();
 8001dac:	f000 fa4c 	bl	8002248 <Error_Handler>
 8001db0:	e794      	b.n	8001cdc <HAL_I2C_MspInit+0x40>
      Error_Handler();
 8001db2:	f000 fa49 	bl	8002248 <Error_Handler>
 8001db6:	e7c0      	b.n	8001d3a <HAL_I2C_MspInit+0x9e>
 8001db8:	40005400 	.word	0x40005400
 8001dbc:	40005c00 	.word	0x40005c00
 8001dc0:	48000400 	.word	0x48000400

08001dc4 <MX_IPCC_Init>:
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8001dc4:	4805      	ldr	r0, [pc, #20]	@ (8001ddc <MX_IPCC_Init+0x18>)
{
 8001dc6:	b508      	push	{r3, lr}
  hipcc.Instance = IPCC;
 8001dc8:	4b05      	ldr	r3, [pc, #20]	@ (8001de0 <MX_IPCC_Init+0x1c>)
 8001dca:	6003      	str	r3, [r0, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8001dcc:	f005 f988 	bl	80070e0 <HAL_IPCC_Init>
 8001dd0:	b900      	cbnz	r0, 8001dd4 <MX_IPCC_Init+0x10>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 8001dd2:	bd08      	pop	{r3, pc}
 8001dd4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8001dd8:	f000 ba36 	b.w	8002248 <Error_Handler>
 8001ddc:	200004dc 	.word	0x200004dc
 8001de0:	58000c00 	.word	0x58000c00

08001de4 <HAL_IPCC_MspInit>:

void HAL_IPCC_MspInit(IPCC_HandleTypeDef* ipccHandle)
{

  if(ipccHandle->Instance==IPCC)
 8001de4:	4b12      	ldr	r3, [pc, #72]	@ (8001e30 <HAL_IPCC_MspInit+0x4c>)
 8001de6:	6802      	ldr	r2, [r0, #0]
 8001de8:	429a      	cmp	r2, r3
 8001dea:	d000      	beq.n	8001dee <HAL_IPCC_MspInit+0xa>
 8001dec:	4770      	bx	lr
  SET_BIT(RCC->AHB3ENR, Periphs);
 8001dee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
{
 8001df2:	b500      	push	{lr}
 8001df4:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8001df6:	f440 1080 	orr.w	r0, r0, #1048576	@ 0x100000
 8001dfa:	6518      	str	r0, [r3, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8001dfc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001dfe:	b083      	sub	sp, #12
 8001e00:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
  /* USER CODE END IPCC_MspInit 0 */
    /* IPCC clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();

    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 5, 0);
 8001e04:	2200      	movs	r2, #0
 8001e06:	2105      	movs	r1, #5
 8001e08:	9301      	str	r3, [sp, #4]
 8001e0a:	202c      	movs	r0, #44	@ 0x2c
  (void)tmpreg;
 8001e0c:	9b01      	ldr	r3, [sp, #4]
 8001e0e:	f004 f8d7 	bl	8005fc0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8001e12:	202c      	movs	r0, #44	@ 0x2c
 8001e14:	f004 f910 	bl	8006038 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 5, 0);
 8001e18:	202d      	movs	r0, #45	@ 0x2d
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	2105      	movs	r1, #5
 8001e1e:	f004 f8cf 	bl	8005fc0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8001e22:	202d      	movs	r0, #45	@ 0x2d
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }
}
 8001e24:	b003      	add	sp, #12
 8001e26:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8001e2a:	f004 b905 	b.w	8006038 <HAL_NVIC_EnableIRQ>
 8001e2e:	bf00      	nop
 8001e30:	58000c00 	.word	0x58000c00

08001e34 <HAL_GPIO_EXTI_Callback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)//lors d'un appuie sur un bouton, le systeme s'interrompt afin d'arriver dans cette fonction redefinie avec en parametre d'entre , le bouton sur lequel l'on a appuiyé
{
	if(GPIO_Pin==GPIO_PIN_14){
 8001e34:	f5b0 4f80 	cmp.w	r0, #16384	@ 0x4000
{
 8001e38:	b510      	push	{r4, lr}
 8001e3a:	4601      	mov	r1, r0
	if(GPIO_Pin==GPIO_PIN_14){
 8001e3c:	d023      	beq.n	8001e86 <HAL_GPIO_EXTI_Callback+0x52>
			BTN_A_LONG++;
			BTN_A=0;
		}

	}
	if(GPIO_Pin==GPIO_PIN_15){
 8001e3e:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8001e42:	d000      	beq.n	8001e46 <HAL_GPIO_EXTI_Callback+0x12>
		}



	}
}
 8001e44:	bd10      	pop	{r4, pc}
		if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_15)== GPIO_PIN_RESET){
 8001e46:	482b      	ldr	r0, [pc, #172]	@ (8001ef4 <HAL_GPIO_EXTI_Callback+0xc0>)
 8001e48:	f004 fb9e 	bl	8006588 <HAL_GPIO_ReadPin>
 8001e4c:	2800      	cmp	r0, #0
 8001e4e:	d047      	beq.n	8001ee0 <HAL_GPIO_EXTI_Callback+0xac>
			boutonBtime=HAL_GetTick()-tbtn2;
 8001e50:	f003 fc8c 	bl	800576c <HAL_GetTick>
 8001e54:	4a28      	ldr	r2, [pc, #160]	@ (8001ef8 <HAL_GPIO_EXTI_Callback+0xc4>)
 8001e56:	4c29      	ldr	r4, [pc, #164]	@ (8001efc <HAL_GPIO_EXTI_Callback+0xc8>)
 8001e58:	6813      	ldr	r3, [r2, #0]
			tbtn2=0;
 8001e5a:	2100      	movs	r1, #0
			boutonBtime=HAL_GetTick()-tbtn2;
 8001e5c:	1ac0      	subs	r0, r0, r3
 8001e5e:	4603      	mov	r3, r0
 8001e60:	6020      	str	r0, [r4, #0]
			tbtn2=0;
 8001e62:	6011      	str	r1, [r2, #0]
		if(boutonBtime>=50 && boutonBtime<=400){
 8001e64:	3832      	subs	r0, #50	@ 0x32
 8001e66:	f5b0 7faf 	cmp.w	r0, #350	@ 0x15e
 8001e6a:	d806      	bhi.n	8001e7a <HAL_GPIO_EXTI_Callback+0x46>
			BTN_B++;
 8001e6c:	4924      	ldr	r1, [pc, #144]	@ (8001f00 <HAL_GPIO_EXTI_Callback+0xcc>)
			BTN_B_LONG=0;
 8001e6e:	4825      	ldr	r0, [pc, #148]	@ (8001f04 <HAL_GPIO_EXTI_Callback+0xd0>)
			BTN_B++;
 8001e70:	680a      	ldr	r2, [r1, #0]
			BTN_B_LONG=0;
 8001e72:	2400      	movs	r4, #0
			BTN_B++;
 8001e74:	3201      	adds	r2, #1
 8001e76:	600a      	str	r2, [r1, #0]
			BTN_B_LONG=0;
 8001e78:	6004      	str	r4, [r0, #0]
		if(boutonBtime>=400){
 8001e7a:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8001e7e:	dbe1      	blt.n	8001e44 <HAL_GPIO_EXTI_Callback+0x10>
			BTN_B_LONG++;
 8001e80:	4a20      	ldr	r2, [pc, #128]	@ (8001f04 <HAL_GPIO_EXTI_Callback+0xd0>)
			BTN_B=0;
 8001e82:	491f      	ldr	r1, [pc, #124]	@ (8001f00 <HAL_GPIO_EXTI_Callback+0xcc>)
 8001e84:	e01d      	b.n	8001ec2 <HAL_GPIO_EXTI_Callback+0x8e>
		if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_14)== GPIO_PIN_RESET){
 8001e86:	481b      	ldr	r0, [pc, #108]	@ (8001ef4 <HAL_GPIO_EXTI_Callback+0xc0>)
 8001e88:	f004 fb7e 	bl	8006588 <HAL_GPIO_ReadPin>
 8001e8c:	b1f8      	cbz	r0, 8001ece <HAL_GPIO_EXTI_Callback+0x9a>
					boutonAtime=HAL_GetTick()-tbtn1;
 8001e8e:	f003 fc6d 	bl	800576c <HAL_GetTick>
 8001e92:	4a1d      	ldr	r2, [pc, #116]	@ (8001f08 <HAL_GPIO_EXTI_Callback+0xd4>)
 8001e94:	4c1d      	ldr	r4, [pc, #116]	@ (8001f0c <HAL_GPIO_EXTI_Callback+0xd8>)
 8001e96:	6813      	ldr	r3, [r2, #0]
					tbtn1=0;
 8001e98:	2100      	movs	r1, #0
					boutonAtime=HAL_GetTick()-tbtn1;
 8001e9a:	1ac0      	subs	r0, r0, r3
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	6020      	str	r0, [r4, #0]
					tbtn1=0;
 8001ea0:	6011      	str	r1, [r2, #0]
		if(boutonAtime>=50 && boutonAtime<=400){
 8001ea2:	3832      	subs	r0, #50	@ 0x32
 8001ea4:	f5b0 7faf 	cmp.w	r0, #350	@ 0x15e
 8001ea8:	d806      	bhi.n	8001eb8 <HAL_GPIO_EXTI_Callback+0x84>
			BTN_A++;
 8001eaa:	4919      	ldr	r1, [pc, #100]	@ (8001f10 <HAL_GPIO_EXTI_Callback+0xdc>)
			BTN_A_LONG=0;
 8001eac:	4819      	ldr	r0, [pc, #100]	@ (8001f14 <HAL_GPIO_EXTI_Callback+0xe0>)
			BTN_A++;
 8001eae:	680a      	ldr	r2, [r1, #0]
			BTN_A_LONG=0;
 8001eb0:	2400      	movs	r4, #0
			BTN_A++;
 8001eb2:	3201      	adds	r2, #1
 8001eb4:	600a      	str	r2, [r1, #0]
			BTN_A_LONG=0;
 8001eb6:	6004      	str	r4, [r0, #0]
		if(boutonAtime>=400){
 8001eb8:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8001ebc:	dbc2      	blt.n	8001e44 <HAL_GPIO_EXTI_Callback+0x10>
			BTN_A_LONG++;
 8001ebe:	4a15      	ldr	r2, [pc, #84]	@ (8001f14 <HAL_GPIO_EXTI_Callback+0xe0>)
			BTN_A=0;
 8001ec0:	4913      	ldr	r1, [pc, #76]	@ (8001f10 <HAL_GPIO_EXTI_Callback+0xdc>)
			BTN_B_LONG++;
 8001ec2:	6813      	ldr	r3, [r2, #0]
			BTN_B=0;
 8001ec4:	2000      	movs	r0, #0
			BTN_B_LONG++;
 8001ec6:	3301      	adds	r3, #1
 8001ec8:	6013      	str	r3, [r2, #0]
			BTN_B=0;
 8001eca:	6008      	str	r0, [r1, #0]
}
 8001ecc:	bd10      	pop	{r4, pc}
					boutonAtime=0;
 8001ece:	4c0f      	ldr	r4, [pc, #60]	@ (8001f0c <HAL_GPIO_EXTI_Callback+0xd8>)
 8001ed0:	6020      	str	r0, [r4, #0]
					tbtn1=HAL_GetTick();
 8001ed2:	f003 fc4b 	bl	800576c <HAL_GetTick>
 8001ed6:	4a0c      	ldr	r2, [pc, #48]	@ (8001f08 <HAL_GPIO_EXTI_Callback+0xd4>)
		if(boutonAtime>=50 && boutonAtime<=400){
 8001ed8:	6823      	ldr	r3, [r4, #0]
					tbtn1=HAL_GetTick();
 8001eda:	6010      	str	r0, [r2, #0]
		if(boutonAtime>=50 && boutonAtime<=400){
 8001edc:	4618      	mov	r0, r3
 8001ede:	e7e0      	b.n	8001ea2 <HAL_GPIO_EXTI_Callback+0x6e>
			boutonBtime=0;
 8001ee0:	4c06      	ldr	r4, [pc, #24]	@ (8001efc <HAL_GPIO_EXTI_Callback+0xc8>)
 8001ee2:	6020      	str	r0, [r4, #0]
			tbtn2=HAL_GetTick();
 8001ee4:	f003 fc42 	bl	800576c <HAL_GetTick>
 8001ee8:	4a03      	ldr	r2, [pc, #12]	@ (8001ef8 <HAL_GPIO_EXTI_Callback+0xc4>)
		if(boutonBtime>=50 && boutonBtime<=400){
 8001eea:	6823      	ldr	r3, [r4, #0]
			tbtn2=HAL_GetTick();
 8001eec:	6010      	str	r0, [r2, #0]
		if(boutonBtime>=50 && boutonBtime<=400){
 8001eee:	4618      	mov	r0, r3
 8001ef0:	e7b8      	b.n	8001e64 <HAL_GPIO_EXTI_Callback+0x30>
 8001ef2:	bf00      	nop
 8001ef4:	48000800 	.word	0x48000800
 8001ef8:	200005f8 	.word	0x200005f8
 8001efc:	20000600 	.word	0x20000600
 8001f00:	20001004 	.word	0x20001004
 8001f04:	200005f4 	.word	0x200005f4
 8001f08:	200005fc 	.word	0x200005fc
 8001f0c:	20000604 	.word	0x20000604
 8001f10:	20001008 	.word	0x20001008
 8001f14:	200005f0 	.word	0x200005f0

08001f18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f18:	b510      	push	{r4, lr}
 8001f1a:	b09c      	sub	sp, #112	@ 0x70
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f1c:	2224      	movs	r2, #36	@ 0x24
 8001f1e:	2100      	movs	r1, #0
 8001f20:	a80c      	add	r0, sp, #48	@ 0x30
 8001f22:	f00e f94c 	bl	80101be <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f26:	2300      	movs	r3, #0
 8001f28:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8001f2c:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8001f30:	e9cd 3306 	strd	r3, r3, [sp, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f34:	4a22      	ldr	r2, [pc, #136]	@ (8001fc0 <SystemClock_Config+0xa8>)
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f36:	9308      	str	r3, [sp, #32]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f38:	6813      	ldr	r3, [r2, #0]
 8001f3a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001f3e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001f42:	6013      	str	r3, [r2, #0]
 8001f44:	6813      	ldr	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001f46:	2003      	movs	r0, #3
 8001f48:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f4c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001f50:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f54:	9301      	str	r3, [sp, #4]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f56:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001f5a:	2340      	movs	r3, #64	@ 0x40
 8001f5c:	e9cd 130d 	strd	r1, r3, [sp, #52]	@ 0x34
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8001f60:	2310      	movs	r3, #16
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f62:	2202      	movs	r2, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001f64:	2403      	movs	r4, #3
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8001f66:	9317      	str	r3, [sp, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLN = 8;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001f68:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001f6c:	e9cd 2415 	strd	r2, r4, [sp, #84]	@ 0x54
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f70:	9801      	ldr	r0, [sp, #4]
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001f72:	931b      	str	r3, [sp, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLN = 8;
 8001f74:	2108      	movs	r1, #8
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001f76:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001f7a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f7e:	a80a      	add	r0, sp, #40	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001f80:	e9cd 2319 	strd	r2, r3, [sp, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLN = 8;
 8001f84:	9118      	str	r1, [sp, #96]	@ 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f86:	f006 fa0d 	bl	80083a4 <HAL_RCC_OscConfig>
 8001f8a:	b108      	cbz	r0, 8001f90 <SystemClock_Config+0x78>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f8c:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f8e:	e7fe      	b.n	8001f8e <SystemClock_Config+0x76>
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f90:	ed9f 7b09 	vldr	d7, [pc, #36]	@ 8001fb8 <SystemClock_Config+0xa0>
 8001f94:	4603      	mov	r3, r0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8001f96:	226f      	movs	r2, #111	@ 0x6f
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001f98:	a802      	add	r0, sp, #8
 8001f9a:	4621      	mov	r1, r4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f9c:	ed8d 7b06 	vstr	d7, [sp, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001fa0:	e9cd 4303 	strd	r4, r3, [sp, #12]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8001fa4:	9202      	str	r2, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001fa6:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8001fa8:	9308      	str	r3, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001faa:	f006 fd51 	bl	8008a50 <HAL_RCC_ClockConfig>
 8001fae:	b108      	cbz	r0, 8001fb4 <SystemClock_Config+0x9c>
 8001fb0:	b672      	cpsid	i
  while (1)
 8001fb2:	e7fe      	b.n	8001fb2 <SystemClock_Config+0x9a>
}
 8001fb4:	b01c      	add	sp, #112	@ 0x70
 8001fb6:	bd10      	pop	{r4, pc}
 8001fb8:	00000000 	.word	0x00000000
 8001fbc:	00000080 	.word	0x00000080
 8001fc0:	58000400 	.word	0x58000400
 8001fc4:	00000000 	.word	0x00000000

08001fc8 <PeriphCommonClock_Config>:
{
 8001fc8:	b510      	push	{r4, lr}
 8001fca:	b094      	sub	sp, #80	@ 0x50
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001fcc:	2238      	movs	r2, #56	@ 0x38
 8001fce:	2100      	movs	r1, #0
 8001fd0:	a806      	add	r0, sp, #24
 8001fd2:	f00e f8f4 	bl	80101be <memset>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP
 8001fd6:	f44f 5254 	mov.w	r2, #13568	@ 0x3500
  PeriphClkInitStruct.PLLSAI1.PLLN = 6;
 8001fda:	2306      	movs	r3, #6
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8001fdc:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 8002020 <PeriphCommonClock_Config+0x58>
  PeriphClkInitStruct.PLLSAI1.PLLN = 6;
 8001fe0:	e9cd 2300 	strd	r2, r3, [sp]
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8001fe4:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8001fe8:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8001fec:	f44f 3400 	mov.w	r4, #131072	@ 0x20000
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8001ff0:	e9cd 4002 	strd	r4, r0, [sp, #8]
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001ff4:	f04f 5180 	mov.w	r1, #268435456	@ 0x10000000
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_HSE_DIV1024;
 8001ff8:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8001ffc:	930d      	str	r3, [sp, #52]	@ 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ffe:	4668      	mov	r0, sp
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_HSE_DIV1024;
 8002000:	2302      	movs	r3, #2
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8002002:	ed8d 7b04 	vstr	d7, [sp, #16]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_HSE_DIV1024;
 8002006:	e9cd 2311 	strd	r2, r3, [sp, #68]	@ 0x44
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800200a:	910f      	str	r1, [sp, #60]	@ 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800200c:	f006 ff42 	bl	8008e94 <HAL_RCCEx_PeriphCLKConfig>
 8002010:	b108      	cbz	r0, 8002016 <PeriphCommonClock_Config+0x4e>
 8002012:	b672      	cpsid	i
  while (1)
 8002014:	e7fe      	b.n	8002014 <PeriphCommonClock_Config+0x4c>
}
 8002016:	b014      	add	sp, #80	@ 0x50
 8002018:	bd10      	pop	{r4, pc}
 800201a:	bf00      	nop
 800201c:	f3af 8000 	nop.w
 8002020:	20000000 	.word	0x20000000
 8002024:	11000000 	.word	0x11000000

08002028 <main>:
{
 8002028:	b530      	push	{r4, r5, lr}
 800202a:	b089      	sub	sp, #36	@ 0x24
  HAL_Init();
 800202c:	f003 fb7a 	bl	8005724 <HAL_Init>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002030:	2300      	movs	r3, #0
 8002032:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8002036:	e9cd 3306 	strd	r3, r3, [sp, #24]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800203a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
   HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800203e:	4866      	ldr	r0, [pc, #408]	@ (80021d8 <main+0x1b0>)
 8002040:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 8002042:	f043 0304 	orr.w	r3, r3, #4
 8002046:	64d3      	str	r3, [r2, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002048:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 800204a:	f003 0304 	and.w	r3, r3, #4
 800204e:	9302      	str	r3, [sp, #8]
 8002050:	a903      	add	r1, sp, #12
   GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14;
 8002052:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
  (void)tmpreg;
 8002056:	9a02      	ldr	r2, [sp, #8]
 8002058:	9303      	str	r3, [sp, #12]
   HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800205a:	f004 f9a5 	bl	80063a8 <HAL_GPIO_Init>
   if ((HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_14) == GPIO_PIN_RESET) &&
 800205e:	485e      	ldr	r0, [pc, #376]	@ (80021d8 <main+0x1b0>)
 8002060:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002064:	f004 fa90 	bl	8006588 <HAL_GPIO_ReadPin>
 8002068:	2800      	cmp	r0, #0
 800206a:	f000 808f 	beq.w	800218c <main+0x164>
   if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_14)==GPIO_PIN_RESET){
 800206e:	485a      	ldr	r0, [pc, #360]	@ (80021d8 <main+0x1b0>)
	   modesansechec=1;
 8002070:	4d5a      	ldr	r5, [pc, #360]	@ (80021dc <main+0x1b4>)
   if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_14)==GPIO_PIN_RESET){
 8002072:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002076:	f004 fa87 	bl	8006588 <HAL_GPIO_ReadPin>
 800207a:	b908      	cbnz	r0, 8002080 <main+0x58>
	   modesansechec=1;
 800207c:	2301      	movs	r3, #1
 800207e:	602b      	str	r3, [r5, #0]
  SystemClock_Config();
 8002080:	f7ff ff4a 	bl	8001f18 <SystemClock_Config>
  PeriphCommonClock_Config();
 8002084:	f7ff ffa0 	bl	8001fc8 <PeriphCommonClock_Config>
  MX_IPCC_Init();
 8002088:	f7ff fe9c 	bl	8001dc4 <MX_IPCC_Init>
  MX_GPIO_Init();
 800208c:	f7ff fd30 	bl	8001af0 <MX_GPIO_Init>
  MX_DMA_Init();
 8002090:	f7ff fcfc 	bl	8001a8c <MX_DMA_Init>
  MX_ADC1_Init();
 8002094:	f7ff f95a 	bl	800134c <MX_ADC1_Init>
  MX_I2C1_Init();
 8002098:	f7ff fd88 	bl	8001bac <MX_I2C1_Init>
  MX_I2C3_Init();
 800209c:	f7ff fdbe 	bl	8001c1c <MX_I2C3_Init>
  MX_LPUART1_UART_Init();
 80020a0:	f003 f89e 	bl	80051e0 <MX_LPUART1_UART_Init>
  MX_TIM2_Init();
 80020a4:	f002 ffda 	bl	800505c <MX_TIM2_Init>
  MX_TIM17_Init();
 80020a8:	f003 f830 	bl	800510c <MX_TIM17_Init>
  MX_SPI1_Init();
 80020ac:	f000 f9b6 	bl	800241c <MX_SPI1_Init>
  MX_RTC_Init();
 80020b0:	f000 f8ce 	bl	8002250 <MX_RTC_Init>
  MX_TIM16_Init();
 80020b4:	f003 f80e 	bl	80050d4 <MX_TIM16_Init>
  MX_RF_Init();
 80020b8:	f000 f8c8 	bl	800224c <MX_RF_Init>
  	ssd1306_Init();
 80020bc:	f000 fc48 	bl	8002950 <ssd1306_Init>
  	HAL_Delay(10);
 80020c0:	200a      	movs	r0, #10
 80020c2:	f003 fb5f 	bl	8005784 <HAL_Delay>
  	ssd1306_Fill(Black);
 80020c6:	2000      	movs	r0, #0
 80020c8:	f000 fbea 	bl	80028a0 <ssd1306_Fill>
  	ssd1306_DrawBitmap(32, 32, startimg, 64, 32, White);
 80020cc:	2401      	movs	r4, #1
 80020ce:	2120      	movs	r1, #32
 80020d0:	2340      	movs	r3, #64	@ 0x40
 80020d2:	4608      	mov	r0, r1
 80020d4:	e9cd 1400 	strd	r1, r4, [sp]
 80020d8:	4a41      	ldr	r2, [pc, #260]	@ (80021e0 <main+0x1b8>)
 80020da:	f000 fead 	bl	8002e38 <ssd1306_DrawBitmap>
  	ssd1306_UpdateScreen();
 80020de:	f000 fbeb 	bl	80028b8 <ssd1306_UpdateScreen>
  	HAL_ADC_Start_DMA(&hadc1,(uint32_t*)rawdata, 3);
 80020e2:	4940      	ldr	r1, [pc, #256]	@ (80021e4 <main+0x1bc>)
 80020e4:	4840      	ldr	r0, [pc, #256]	@ (80021e8 <main+0x1c0>)
 80020e6:	2203      	movs	r2, #3
 80020e8:	f003 ff04 	bl	8005ef4 <HAL_ADC_Start_DMA>
  	HAL_TIM_Base_Start(&htim2);
 80020ec:	483f      	ldr	r0, [pc, #252]	@ (80021ec <main+0x1c4>)
 80020ee:	f008 fa9f 	bl	800a630 <HAL_TIM_Base_Start>
  	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_0,GPIO_PIN_SET);
 80020f2:	4622      	mov	r2, r4
 80020f4:	4621      	mov	r1, r4
 80020f6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80020fa:	f004 fa4b 	bl	8006594 <HAL_GPIO_WritePin>
  	HAL_Delay(100);
 80020fe:	2064      	movs	r0, #100	@ 0x64
 8002100:	f003 fb40 	bl	8005784 <HAL_Delay>
  	GNSS_Init(&GNSSData, &hlpuart1);
 8002104:	493a      	ldr	r1, [pc, #232]	@ (80021f0 <main+0x1c8>)
 8002106:	483b      	ldr	r0, [pc, #236]	@ (80021f4 <main+0x1cc>)
 8002108:	f7fe ff44 	bl	8000f94 <GNSS_Init>
  	HAL_UART_Abort(&hlpuart1);
 800210c:	4838      	ldr	r0, [pc, #224]	@ (80021f0 <main+0x1c8>)
 800210e:	f008 fcd3 	bl	800aab8 <HAL_UART_Abort>
  	HAL_UART_Receive_DMA(&hlpuart1, (uint8_t *)workingbuffer, 100);
 8002112:	4939      	ldr	r1, [pc, #228]	@ (80021f8 <main+0x1d0>)
 8002114:	4836      	ldr	r0, [pc, #216]	@ (80021f0 <main+0x1c8>)
 8002116:	2264      	movs	r2, #100	@ 0x64
 8002118:	f009 fb4e 	bl	800b7b8 <HAL_UART_Receive_DMA>
  	memset(flashread,'1',256);
 800211c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002120:	2131      	movs	r1, #49	@ 0x31
 8002122:	4836      	ldr	r0, [pc, #216]	@ (80021fc <main+0x1d4>)
 8002124:	f00e f84b 	bl	80101be <memset>
  	memset(flashwrite,'\0',256);
 8002128:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800212c:	2100      	movs	r1, #0
 800212e:	4834      	ldr	r0, [pc, #208]	@ (8002200 <main+0x1d8>)
 8002130:	f00e f845 	bl	80101be <memset>
  	memset((uint8_t *)bufferscreen ,'\0',50);
 8002134:	2232      	movs	r2, #50	@ 0x32
 8002136:	2100      	movs	r1, #0
 8002138:	4832      	ldr	r0, [pc, #200]	@ (8002204 <main+0x1dc>)
 800213a:	f00e f840 	bl	80101be <memset>
  	SPIF_Init(&hspif1, &hspi1, GPIOB, GPIO_PIN_7);
 800213e:	2380      	movs	r3, #128	@ 0x80
 8002140:	4a31      	ldr	r2, [pc, #196]	@ (8002208 <main+0x1e0>)
 8002142:	4932      	ldr	r1, [pc, #200]	@ (800220c <main+0x1e4>)
 8002144:	4832      	ldr	r0, [pc, #200]	@ (8002210 <main+0x1e8>)
 8002146:	f00c fbcf 	bl	800e8e8 <SPIF_Init>
  	HAL_Delay(100);
 800214a:	2064      	movs	r0, #100	@ 0x64
 800214c:	f003 fb1a 	bl	8005784 <HAL_Delay>
  	if(modesansechec==0){
 8002150:	682b      	ldr	r3, [r5, #0]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d03c      	beq.n	80021d0 <main+0x1a8>
  	ssd1306_Fill(Black);
 8002156:	2000      	movs	r0, #0
 8002158:	f000 fba2 	bl	80028a0 <ssd1306_Fill>
  	bmp581->i2c=&hi2c1;
 800215c:	482d      	ldr	r0, [pc, #180]	@ (8002214 <main+0x1ec>)
 800215e:	492e      	ldr	r1, [pc, #184]	@ (8002218 <main+0x1f0>)
 8002160:	6803      	ldr	r3, [r0, #0]
  	bmp581->addr=0x47;
 8002162:	2247      	movs	r2, #71	@ 0x47
  	bmp581->i2c=&hi2c1;
 8002164:	6019      	str	r1, [r3, #0]
  	bmp581->addr=0x47;
 8002166:	711a      	strb	r2, [r3, #4]
  	if(bmp581_init_precise_normal(&bmp581)!=0){
 8002168:	f7ff fbc6 	bl	80018f8 <bmp581_init_precise_normal>
 800216c:	b9f8      	cbnz	r0, 80021ae <main+0x186>
  	BTN_A=0;
 800216e:	492b      	ldr	r1, [pc, #172]	@ (800221c <main+0x1f4>)
  	BTN_A_LONG=0;
 8002170:	4a2b      	ldr	r2, [pc, #172]	@ (8002220 <main+0x1f8>)
  	state=STATE_SPEED;
 8002172:	4c2c      	ldr	r4, [pc, #176]	@ (8002224 <main+0x1fc>)
 8002174:	2300      	movs	r3, #0
  	HAL_Delay(200);
 8002176:	20c8      	movs	r0, #200	@ 0xc8
  	state=STATE_SPEED;
 8002178:	7023      	strb	r3, [r4, #0]
  	BTN_A=0;
 800217a:	600b      	str	r3, [r1, #0]
  	BTN_A_LONG=0;
 800217c:	6013      	str	r3, [r2, #0]
  	HAL_Delay(200);
 800217e:	f003 fb01 	bl	8005784 <HAL_Delay>
  MX_FREERTOS_Init();
 8002182:	f7ff fb47 	bl	8001814 <MX_FREERTOS_Init>
  osKernelStart();
 8002186:	f00b f875 	bl	800d274 <osKernelStart>
  while (1)
 800218a:	e7fe      	b.n	800218a <main+0x162>
 	  (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_15) == GPIO_PIN_RESET))
 800218c:	4812      	ldr	r0, [pc, #72]	@ (80021d8 <main+0x1b0>)
 800218e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002192:	f004 f9f9 	bl	8006588 <HAL_GPIO_ReadPin>
   if ((HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_14) == GPIO_PIN_RESET) &&
 8002196:	2800      	cmp	r0, #0
 8002198:	f47f af69 	bne.w	800206e <main+0x46>
 	  HAL_DeInit();
 800219c:	f003 fa9c 	bl	80056d8 <HAL_DeInit>
 	  __set_MSP(*(__IO uint32_t*)SYS_MEM_START_ADDR);
 80021a0:	4b21      	ldr	r3, [pc, #132]	@ (8002228 <main+0x200>)
 80021a2:	681a      	ldr	r2, [r3, #0]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 80021a4:	f382 8808 	msr	MSP, r2
 	  boot_jump();
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	4798      	blx	r3
 80021ac:	e75f      	b.n	800206e <main+0x46>
  		ssd1306_SetCursor(32,42);
 80021ae:	212a      	movs	r1, #42	@ 0x2a
 80021b0:	2020      	movs	r0, #32
 80021b2:	f000 fe3b 	bl	8002e2c <ssd1306_SetCursor>
  		ssd1306_WriteString("bmp prbm", Font_7x10, White);
 80021b6:	4a1d      	ldr	r2, [pc, #116]	@ (800222c <main+0x204>)
 80021b8:	481d      	ldr	r0, [pc, #116]	@ (8002230 <main+0x208>)
 80021ba:	ca06      	ldmia	r2, {r1, r2}
 80021bc:	2301      	movs	r3, #1
 80021be:	f000 fe19 	bl	8002df4 <ssd1306_WriteString>
  		ssd1306_UpdateScreen();
 80021c2:	f000 fb79 	bl	80028b8 <ssd1306_UpdateScreen>
  		HAL_Delay(1000);
 80021c6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80021ca:	f003 fadb 	bl	8005784 <HAL_Delay>
 80021ce:	e7ce      	b.n	800216e <main+0x146>
  		getindex();
 80021d0:	f000 fa36 	bl	8002640 <getindex>
 80021d4:	e7bf      	b.n	8002156 <main+0x12e>
 80021d6:	bf00      	nop
 80021d8:	48000800 	.word	0x48000800
 80021dc:	20000518 	.word	0x20000518
 80021e0:	08015d2c 	.word	0x08015d2c
 80021e4:	20000fdc 	.word	0x20000fdc
 80021e8:	20000398 	.word	0x20000398
 80021ec:	20001658 	.word	0x20001658
 80021f0:	20001768 	.word	0x20001768
 80021f4:	20000520 	.word	0x20000520
 80021f8:	2000100c 	.word	0x2000100c
 80021fc:	200006d0 	.word	0x200006d0
 8002200:	20000ed0 	.word	0x20000ed0
 8002204:	20000690 	.word	0x20000690
 8002208:	48000400 	.word	0x48000400
 800220c:	200010a8 	.word	0x200010a8
 8002210:	20000fe4 	.word	0x20000fe4
 8002214:	200005e8 	.word	0x200005e8
 8002218:	20000488 	.word	0x20000488
 800221c:	20001008 	.word	0x20001008
 8002220:	200005f0 	.word	0x200005f0
 8002224:	20001080 	.word	0x20001080
 8002228:	1fff0000 	.word	0x1fff0000
 800222c:	20000024 	.word	0x20000024
 8002230:	08015d20 	.word	0x08015d20

08002234 <HAL_TIM_PeriodElapsedCallback>:
  if (htim->Instance == TIM1)
 8002234:	4b03      	ldr	r3, [pc, #12]	@ (8002244 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8002236:	6802      	ldr	r2, [r0, #0]
 8002238:	429a      	cmp	r2, r3
 800223a:	d000      	beq.n	800223e <HAL_TIM_PeriodElapsedCallback+0xa>
}
 800223c:	4770      	bx	lr
    HAL_IncTick();
 800223e:	f003 ba89 	b.w	8005754 <HAL_IncTick>
 8002242:	bf00      	nop
 8002244:	40012c00 	.word	0x40012c00

08002248 <Error_Handler>:
  __ASM volatile ("cpsid i" : : : "memory");
 8002248:	b672      	cpsid	i
  while (1)
 800224a:	e7fe      	b.n	800224a <Error_Handler+0x2>

0800224c <MX_RF_Init>:
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 800224c:	4770      	bx	lr
 800224e:	bf00      	nop

08002250 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8002250:	b500      	push	{lr}

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002252:	4822      	ldr	r0, [pc, #136]	@ (80022dc <MX_RTC_Init+0x8c>)
 8002254:	4922      	ldr	r1, [pc, #136]	@ (80022e0 <MX_RTC_Init+0x90>)
{
 8002256:	b087      	sub	sp, #28
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
  hrtc.Init.AsynchPrediv = 99;
 8002258:	2263      	movs	r2, #99	@ 0x63
  RTC_TimeTypeDef sTime = {0};
 800225a:	2300      	movs	r3, #0
  hrtc.Init.AsynchPrediv = 99;
 800225c:	6082      	str	r2, [r0, #8]
  hrtc.Init.SynchPrediv = 9999;
 800225e:	f242 720f 	movw	r2, #9999	@ 0x270f
  RTC_TimeTypeDef sTime = {0};
 8002262:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8002266:	e9cd 3303 	strd	r3, r3, [sp, #12]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800226a:	e9c0 1300 	strd	r1, r3, [r0]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800226e:	e9c0 2303 	strd	r2, r3, [r0, #12]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002272:	e9c0 3306 	strd	r3, r3, [r0, #24]
  RTC_TimeTypeDef sTime = {0};
 8002276:	9305      	str	r3, [sp, #20]
  RTC_DateTypeDef sDate = {0};
 8002278:	9300      	str	r3, [sp, #0]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800227a:	6143      	str	r3, [r0, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800227c:	f007 f80c 	bl	8009298 <HAL_RTC_Init>
 8002280:	b9f0      	cbnz	r0, 80022c0 <MX_RTC_Init+0x70>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8002282:	2300      	movs	r3, #0
  sTime.Minutes = 0x0;
  sTime.Seconds = 0x0;
  sTime.SubSeconds = 0x0;
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002284:	4815      	ldr	r0, [pc, #84]	@ (80022dc <MX_RTC_Init+0x8c>)
  sTime.Hours = 0x0;
 8002286:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800228a:	2201      	movs	r2, #1
 800228c:	a901      	add	r1, sp, #4
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800228e:	e9cd 3304 	strd	r3, r3, [sp, #16]
  sTime.Seconds = 0x0;
 8002292:	f88d 3006 	strb.w	r3, [sp, #6]
  sTime.SubSeconds = 0x0;
 8002296:	9302      	str	r3, [sp, #8]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002298:	f007 f882 	bl	80093a0 <HAL_RTC_SetTime>
 800229c:	b9d8      	cbnz	r0, 80022d6 <MX_RTC_Init+0x86>
  {
    Error_Handler();
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800229e:	4b11      	ldr	r3, [pc, #68]	@ (80022e4 <MX_RTC_Init+0x94>)
  sDate.Month = RTC_MONTH_JANUARY;
  sDate.Date = 0x1;
  sDate.Year = 0x0;

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80022a0:	480e      	ldr	r0, [pc, #56]	@ (80022dc <MX_RTC_Init+0x8c>)
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80022a2:	9300      	str	r3, [sp, #0]
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80022a4:	2201      	movs	r2, #1
 80022a6:	4669      	mov	r1, sp
 80022a8:	f007 f976 	bl	8009598 <HAL_RTC_SetDate>
 80022ac:	b980      	cbnz	r0, 80022d0 <MX_RTC_Init+0x80>
    Error_Handler();
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
 80022ae:	480b      	ldr	r0, [pc, #44]	@ (80022dc <MX_RTC_Init+0x8c>)
 80022b0:	2204      	movs	r2, #4
 80022b2:	2100      	movs	r1, #0
 80022b4:	f007 fa58 	bl	8009768 <HAL_RTCEx_SetWakeUpTimer_IT>
 80022b8:	b928      	cbnz	r0, 80022c6 <MX_RTC_Init+0x76>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80022ba:	b007      	add	sp, #28
 80022bc:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80022c0:	f7ff ffc2 	bl	8002248 <Error_Handler>
 80022c4:	e7dd      	b.n	8002282 <MX_RTC_Init+0x32>
    Error_Handler();
 80022c6:	f7ff ffbf 	bl	8002248 <Error_Handler>
}
 80022ca:	b007      	add	sp, #28
 80022cc:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80022d0:	f7ff ffba 	bl	8002248 <Error_Handler>
 80022d4:	e7eb      	b.n	80022ae <MX_RTC_Init+0x5e>
    Error_Handler();
 80022d6:	f7ff ffb7 	bl	8002248 <Error_Handler>
 80022da:	e7e0      	b.n	800229e <MX_RTC_Init+0x4e>
 80022dc:	20001084 	.word	0x20001084
 80022e0:	40002800 	.word	0x40002800
 80022e4:	00010101 	.word	0x00010101

080022e8 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80022e8:	b510      	push	{r4, lr}
 80022ea:	4604      	mov	r4, r0
 80022ec:	b096      	sub	sp, #88	@ 0x58

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80022ee:	2250      	movs	r2, #80	@ 0x50
 80022f0:	2100      	movs	r1, #0
 80022f2:	a802      	add	r0, sp, #8
 80022f4:	f00d ff63 	bl	80101be <memset>
  if(rtcHandle->Instance==RTC)
 80022f8:	4b18      	ldr	r3, [pc, #96]	@ (800235c <HAL_RTC_MspInit+0x74>)
 80022fa:	6822      	ldr	r2, [r4, #0]
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d001      	beq.n	8002304 <HAL_RTC_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8002300:	b016      	add	sp, #88	@ 0x58
 8002302:	bd10      	pop	{r4, pc}
	  HAL_PWR_EnableBkUpAccess();
 8002304:	f005 ff86 	bl	8008214 <HAL_PWR_EnableBkUpAccess>
	  HAL_PWR_EnableBkUpAccess();
 8002308:	f005 ff84 	bl	8008214 <HAL_PWR_EnableBkUpAccess>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800230c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV32;
 8002310:	f44f 7340 	mov.w	r3, #768	@ 0x300
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002314:	a802      	add	r0, sp, #8
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002316:	9202      	str	r2, [sp, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV32;
 8002318:	9312      	str	r3, [sp, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800231a:	f006 fdbb 	bl	8008e94 <HAL_RCCEx_PeriphCLKConfig>
 800231e:	b9d0      	cbnz	r0, 8002356 <HAL_RTC_MspInit+0x6e>
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8002320:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 5, 0);
 8002324:	2200      	movs	r2, #0
 8002326:	f8d3 1090 	ldr.w	r1, [r3, #144]	@ 0x90
 800232a:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 800232e:	f8c3 1090 	str.w	r1, [r3, #144]	@ 0x90
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002332:	6d9c      	ldr	r4, [r3, #88]	@ 0x58
 8002334:	f444 6480 	orr.w	r4, r4, #1024	@ 0x400
 8002338:	659c      	str	r4, [r3, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800233a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800233c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002340:	2105      	movs	r1, #5
 8002342:	9301      	str	r3, [sp, #4]
 8002344:	2003      	movs	r0, #3
  (void)tmpreg;
 8002346:	9b01      	ldr	r3, [sp, #4]
 8002348:	f003 fe3a 	bl	8005fc0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 800234c:	2003      	movs	r0, #3
 800234e:	f003 fe73 	bl	8006038 <HAL_NVIC_EnableIRQ>
}
 8002352:	b016      	add	sp, #88	@ 0x58
 8002354:	bd10      	pop	{r4, pc}
      Error_Handler();
 8002356:	f7ff ff77 	bl	8002248 <Error_Handler>
 800235a:	e7e1      	b.n	8002320 <HAL_RTC_MspInit+0x38>
 800235c:	40002800 	.word	0x40002800

08002360 <set_time>:
}

/* USER CODE BEGIN 1 */

void set_time (uint8_t hr, uint8_t min, uint8_t sec)
{
 8002360:	b500      	push	{lr}
 8002362:	b087      	sub	sp, #28
	RTC_TimeTypeDef sTime = {0};
 8002364:	2300      	movs	r3, #0
{
 8002366:	4686      	mov	lr, r0
 8002368:	4694      	mov	ip, r2
	sTime.Hours = hr;
	sTime.Minutes = min;
 800236a:	f88d 1005 	strb.w	r1, [sp, #5]
	sTime.Seconds = sec;
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800236e:	480e      	ldr	r0, [pc, #56]	@ (80023a8 <set_time+0x48>)
	RTC_TimeTypeDef sTime = {0};
 8002370:	f8cd 3007 	str.w	r3, [sp, #7]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8002374:	461a      	mov	r2, r3
 8002376:	a901      	add	r1, sp, #4
	RTC_TimeTypeDef sTime = {0};
 8002378:	f8cd 300b 	str.w	r3, [sp, #11]
 800237c:	f8cd 300f 	str.w	r3, [sp, #15]
 8002380:	f8cd 3013 	str.w	r3, [sp, #19]
	sTime.Hours = hr;
 8002384:	f88d e004 	strb.w	lr, [sp, #4]
	sTime.Seconds = sec;
 8002388:	f88d c006 	strb.w	ip, [sp, #6]
	RTC_TimeTypeDef sTime = {0};
 800238c:	f88d 3017 	strb.w	r3, [sp, #23]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8002390:	f007 f806 	bl	80093a0 <HAL_RTC_SetTime>
 8002394:	b910      	cbnz	r0, 800239c <set_time+0x3c>
	{
		Error_Handler();
	}
}
 8002396:	b007      	add	sp, #28
 8002398:	f85d fb04 	ldr.w	pc, [sp], #4
		Error_Handler();
 800239c:	f7ff ff54 	bl	8002248 <Error_Handler>
}
 80023a0:	b007      	add	sp, #28
 80023a2:	f85d fb04 	ldr.w	pc, [sp], #4
 80023a6:	bf00      	nop
 80023a8:	20001084 	.word	0x20001084

080023ac <get_time_date>:
	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x2345);  // backup register
}


void get_time_date()
{
 80023ac:	b510      	push	{r4, lr}
  RTC_DateTypeDef gDate;
  RTC_TimeTypeDef gTime;

  /* Get the RTC current Time */
  HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 80023ae:	4c14      	ldr	r4, [pc, #80]	@ (8002400 <get_time_date+0x54>)
{
 80023b0:	b086      	sub	sp, #24
  HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 80023b2:	a901      	add	r1, sp, #4
 80023b4:	2200      	movs	r2, #0
 80023b6:	4620      	mov	r0, r4
 80023b8:	f007 f8b2 	bl	8009520 <HAL_RTC_GetTime>
  /* Get the RTC current Date */
  HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 80023bc:	4669      	mov	r1, sp
 80023be:	2200      	movs	r2, #0
 80023c0:	4620      	mov	r0, r4
 80023c2:	f007 f99b 	bl	80096fc <HAL_RTC_GetDate>

  SEC=gTime.Seconds;
  HR=gTime.Hours;
 80023c6:	4c0f      	ldr	r4, [pc, #60]	@ (8002404 <get_time_date+0x58>)
  SEC=gTime.Seconds;
 80023c8:	490f      	ldr	r1, [pc, #60]	@ (8002408 <get_time_date+0x5c>)
 80023ca:	f89d 0006 	ldrb.w	r0, [sp, #6]
  MINUTE=gTime.Minutes;
 80023ce:	4a0f      	ldr	r2, [pc, #60]	@ (800240c <get_time_date+0x60>)
  HR=gTime.Hours;
 80023d0:	f89d c004 	ldrb.w	ip, [sp, #4]
  SEC=gTime.Seconds;
 80023d4:	7008      	strb	r0, [r1, #0]
  HR=gTime.Hours;
 80023d6:	f884 c000 	strb.w	ip, [r4]
  JOURS=gDate.Date;
 80023da:	480d      	ldr	r0, [pc, #52]	@ (8002410 <get_time_date+0x64>)
  MINUTE=gTime.Minutes;
 80023dc:	f89d 4005 	ldrb.w	r4, [sp, #5]
 80023e0:	7014      	strb	r4, [r2, #0]
  MOIS=gDate.Month;
  ANNEE=gDate.Year+2000;
 80023e2:	f89d 3003 	ldrb.w	r3, [sp, #3]
  JOURS=gDate.Date;
 80023e6:	f89d 4002 	ldrb.w	r4, [sp, #2]
  MOIS=gDate.Month;
 80023ea:	490a      	ldr	r1, [pc, #40]	@ (8002414 <get_time_date+0x68>)
  ANNEE=gDate.Year+2000;
 80023ec:	4a0a      	ldr	r2, [pc, #40]	@ (8002418 <get_time_date+0x6c>)
  JOURS=gDate.Date;
 80023ee:	7004      	strb	r4, [r0, #0]
  MOIS=gDate.Month;
 80023f0:	f89d 0001 	ldrb.w	r0, [sp, #1]
 80023f4:	7008      	strb	r0, [r1, #0]
  ANNEE=gDate.Year+2000;
 80023f6:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 80023fa:	8013      	strh	r3, [r2, #0]
  /* Display time Format: hh:mm:ss */
  //sprintf((char*)time,"%02d:%02d:%02d",gTime.Hours, gTime.Minutes, gTime.Seconds);

  /* Display date Format: dd-mm-yyyy */
  //sprintf((char*)date,"%02d-%02d-%2d",gDate.Date, gDate.Month, 2000 + gDate.Year);
}
 80023fc:	b006      	add	sp, #24
 80023fe:	bd10      	pop	{r4, pc}
 8002400:	20001084 	.word	0x20001084
 8002404:	2000060d 	.word	0x2000060d
 8002408:	2000060e 	.word	0x2000060e
 800240c:	2000060c 	.word	0x2000060c
 8002410:	2000001b 	.word	0x2000001b
 8002414:	2000001a 	.word	0x2000001a
 8002418:	20000018 	.word	0x20000018

0800241c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800241c:	b510      	push	{r4, lr}
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800241e:	4811      	ldr	r0, [pc, #68]	@ (8002464 <MX_SPI1_Init+0x48>)
 8002420:	4c11      	ldr	r4, [pc, #68]	@ (8002468 <MX_SPI1_Init+0x4c>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002422:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002426:	2300      	movs	r3, #0
 8002428:	e9c0 4200 	strd	r4, r2, [r0]
 800242c:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8002430:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002434:	e9c0 3102 	strd	r3, r1, [r0, #8]
 8002438:	2410      	movs	r4, #16
 800243a:	6182      	str	r2, [r0, #24]
 800243c:	2107      	movs	r1, #7
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 7;
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800243e:	2208      	movs	r2, #8
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002440:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002444:	e9c0 4307 	strd	r4, r3, [r0, #28]
 8002448:	e9c0 3309 	strd	r3, r3, [r0, #36]	@ 0x24
 800244c:	e9c0 130b 	strd	r1, r3, [r0, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002450:	6342      	str	r2, [r0, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002452:	f007 fb3b 	bl	8009acc <HAL_SPI_Init>
 8002456:	b900      	cbnz	r0, 800245a <MX_SPI1_Init+0x3e>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002458:	bd10      	pop	{r4, pc}
 800245a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 800245e:	f7ff bef3 	b.w	8002248 <Error_Handler>
 8002462:	bf00      	nop
 8002464:	200010a8 	.word	0x200010a8
 8002468:	40013000 	.word	0x40013000

0800246c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800246c:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(spiHandle->Instance==SPI1)
 800246e:	4b25      	ldr	r3, [pc, #148]	@ (8002504 <HAL_SPI_MspInit+0x98>)
 8002470:	6802      	ldr	r2, [r0, #0]
{
 8002472:	b08b      	sub	sp, #44	@ 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002474:	2400      	movs	r4, #0
  if(spiHandle->Instance==SPI1)
 8002476:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002478:	e9cd 4404 	strd	r4, r4, [sp, #16]
 800247c:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8002480:	9408      	str	r4, [sp, #32]
  if(spiHandle->Instance==SPI1)
 8002482:	d001      	beq.n	8002488 <HAL_SPI_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002484:	b00b      	add	sp, #44	@ 0x2c
 8002486:	bd30      	pop	{r4, r5, pc}
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8002488:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800248c:	2505      	movs	r5, #5
 800248e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002490:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002494:	661a      	str	r2, [r3, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002496:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002498:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800249c:	9203      	str	r2, [sp, #12]
  (void)tmpreg;
 800249e:	9a03      	ldr	r2, [sp, #12]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80024a0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80024a2:	f042 0201 	orr.w	r2, r2, #1
 80024a6:	64da      	str	r2, [r3, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80024a8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80024aa:	f002 0201 	and.w	r2, r2, #1
 80024ae:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 80024b0:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80024b2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80024b4:	f042 0202 	orr.w	r2, r2, #2
 80024b8:	64da      	str	r2, [r3, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80024ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024bc:	9508      	str	r5, [sp, #32]
 80024be:	f003 0302 	and.w	r3, r3, #2
 80024c2:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024c4:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6;
 80024c6:	2242      	movs	r2, #66	@ 0x42
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024c8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6;
 80024cc:	2302      	movs	r3, #2
 80024ce:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)tmpreg;
 80024d2:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024d4:	f003 ff68 	bl	80063a8 <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024d8:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024da:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024dc:	2220      	movs	r2, #32
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024de:	480a      	ldr	r0, [pc, #40]	@ (8002508 <HAL_SPI_MspInit+0x9c>)
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80024e0:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024e2:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024e6:	e9cd 4406 	strd	r4, r4, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024ea:	f003 ff5d 	bl	80063a8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI1_IRQn, 7, 0);
 80024ee:	4622      	mov	r2, r4
 80024f0:	2107      	movs	r1, #7
 80024f2:	2022      	movs	r0, #34	@ 0x22
 80024f4:	f003 fd64 	bl	8005fc0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80024f8:	2022      	movs	r0, #34	@ 0x22
 80024fa:	f003 fd9d 	bl	8006038 <HAL_NVIC_EnableIRQ>
}
 80024fe:	b00b      	add	sp, #44	@ 0x2c
 8002500:	bd30      	pop	{r4, r5, pc}
 8002502:	bf00      	nop
 8002504:	40013000 	.word	0x40013000
 8002508:	48000400 	.word	0x48000400
 800250c:	00000000 	.word	0x00000000

08002510 <csvframe>:
  /* USER CODE END SPI1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
int csvframe(uint8_t* buffer,float temp,float vbat,GNSS_StateHandle GNSSData,int otherval1,float otherval2,double baroalt){
 8002510:	b084      	sub	sp, #16
 8002512:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int framesize=0;
	framesize=snprintf((char *)buffer,256, "%0.2f,%0.3f,%0.2f,%0.7f,%0.7f,%0.2f,%d,%0.2f,%0.2lf,%d-%02d-%02dT%02d:%02d:%02d.00+02:00\n\r",temp,vbat,(GNSSData.fgSpeed)*3.6,GNSSData.fLat,GNSSData.fLon,GNSSData.fhMSL,otherval1,otherval2,baroalt,ANNEE,MOIS,JOURS,HR,MINUTE,SEC);
 8002514:	ed8d 2b1a 	vstr	d2, [sp, #104]	@ 0x68
 8002518:	4e2b      	ldr	r6, [pc, #172]	@ (80025c8 <csvframe+0xb8>)
int csvframe(uint8_t* buffer,float temp,float vbat,GNSS_StateHandle GNSSData,int otherval1,float otherval2,double baroalt){
 800251a:	9f39      	ldr	r7, [sp, #228]	@ 0xe4
	framesize=snprintf((char *)buffer,256, "%0.2f,%0.3f,%0.2f,%0.7f,%0.7f,%0.2f,%d,%0.2f,%0.2lf,%d-%02d-%02dT%02d:%02d:%02d.00+02:00\n\r",temp,vbat,(GNSSData.fgSpeed)*3.6,GNSSData.fLat,GNSSData.fLon,GNSSData.fhMSL,otherval1,otherval2,baroalt,ANNEE,MOIS,JOURS,HR,MINUTE,SEC);
 800251c:	7836      	ldrb	r6, [r6, #0]
 800251e:	9621      	str	r6, [sp, #132]	@ 0x84
 8002520:	4e2a      	ldr	r6, [pc, #168]	@ (80025cc <csvframe+0xbc>)
 8002522:	7836      	ldrb	r6, [r6, #0]
 8002524:	9620      	str	r6, [sp, #128]	@ 0x80
 8002526:	4e2a      	ldr	r6, [pc, #168]	@ (80025d0 <csvframe+0xc0>)
 8002528:	7836      	ldrb	r6, [r6, #0]
 800252a:	961f      	str	r6, [sp, #124]	@ 0x7c
 800252c:	4e29      	ldr	r6, [pc, #164]	@ (80025d4 <csvframe+0xc4>)
 800252e:	7836      	ldrb	r6, [r6, #0]
 8002530:	961e      	str	r6, [sp, #120]	@ 0x78
 8002532:	4e29      	ldr	r6, [pc, #164]	@ (80025d8 <csvframe+0xc8>)
 8002534:	7836      	ldrb	r6, [r6, #0]
 8002536:	961d      	str	r6, [sp, #116]	@ 0x74
 8002538:	4e28      	ldr	r6, [pc, #160]	@ (80025dc <csvframe+0xcc>)
 800253a:	8836      	ldrh	r6, [r6, #0]
 800253c:	961c      	str	r6, [sp, #112]	@ 0x70
int csvframe(uint8_t* buffer,float temp,float vbat,GNSS_StateHandle GNSSData,int otherval1,float otherval2,double baroalt){
 800253e:	ae07      	add	r6, sp, #28
 8002540:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 8002544:	4604      	mov	r4, r0
 8002546:	ee11 0a10 	vmov	r0, s2
 800254a:	ee10 5a10 	vmov	r5, s0
 800254e:	ee10 6a90 	vmov	r6, s1
	framesize=snprintf((char *)buffer,256, "%0.2f,%0.3f,%0.2f,%0.7f,%0.7f,%0.2f,%d,%0.2f,%0.2lf,%d-%02d-%02dT%02d:%02d:%02d.00+02:00\n\r",temp,vbat,(GNSSData.fgSpeed)*3.6,GNSSData.fLat,GNSSData.fLon,GNSSData.fhMSL,otherval1,otherval2,baroalt,ANNEE,MOIS,JOURS,HR,MINUTE,SEC);
 8002552:	f7fd ffd1 	bl	80004f8 <__aeabi_f2d>
 8002556:	e9cd 0118 	strd	r0, r1, [sp, #96]	@ 0x60
 800255a:	9830      	ldr	r0, [sp, #192]	@ 0xc0
 800255c:	9716      	str	r7, [sp, #88]	@ 0x58
 800255e:	f7fd ffcb 	bl	80004f8 <__aeabi_f2d>
 8002562:	e9cd 0114 	strd	r0, r1, [sp, #80]	@ 0x50
 8002566:	982a      	ldr	r0, [sp, #168]	@ 0xa8
 8002568:	f7fd ffc6 	bl	80004f8 <__aeabi_f2d>
 800256c:	e9cd 0112 	strd	r0, r1, [sp, #72]	@ 0x48
 8002570:	982b      	ldr	r0, [sp, #172]	@ 0xac
 8002572:	f7fd ffc1 	bl	80004f8 <__aeabi_f2d>
 8002576:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800257a:	9837      	ldr	r0, [sp, #220]	@ 0xdc
 800257c:	f7fd ffbc 	bl	80004f8 <__aeabi_f2d>
 8002580:	a30f      	add	r3, pc, #60	@ (adr r3, 80025c0 <csvframe+0xb0>)
 8002582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002586:	f7fe f80f 	bl	80005a8 <__aeabi_dmul>
 800258a:	4602      	mov	r2, r0
 800258c:	460b      	mov	r3, r1
 800258e:	4630      	mov	r0, r6
 8002590:	e9cd 230e 	strd	r2, r3, [sp, #56]	@ 0x38
 8002594:	f7fd ffb0 	bl	80004f8 <__aeabi_f2d>
 8002598:	4602      	mov	r2, r0
 800259a:	460b      	mov	r3, r1
 800259c:	4628      	mov	r0, r5
 800259e:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80025a2:	f7fd ffa9 	bl	80004f8 <__aeabi_f2d>
 80025a6:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 80025aa:	4620      	mov	r0, r4
	return framesize;
}
 80025ac:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	framesize=snprintf((char *)buffer,256, "%0.2f,%0.3f,%0.2f,%0.7f,%0.7f,%0.2f,%d,%0.2f,%0.2lf,%d-%02d-%02dT%02d:%02d:%02d.00+02:00\n\r",temp,vbat,(GNSSData.fgSpeed)*3.6,GNSSData.fLat,GNSSData.fLon,GNSSData.fhMSL,otherval1,otherval2,baroalt,ANNEE,MOIS,JOURS,HR,MINUTE,SEC);
 80025b0:	4a0b      	ldr	r2, [pc, #44]	@ (80025e0 <csvframe+0xd0>)
 80025b2:	f44f 7180 	mov.w	r1, #256	@ 0x100
}
 80025b6:	b004      	add	sp, #16
	framesize=snprintf((char *)buffer,256, "%0.2f,%0.3f,%0.2f,%0.7f,%0.7f,%0.2f,%d,%0.2f,%0.2lf,%d-%02d-%02dT%02d:%02d:%02d.00+02:00\n\r",temp,vbat,(GNSSData.fgSpeed)*3.6,GNSSData.fLat,GNSSData.fLon,GNSSData.fhMSL,otherval1,otherval2,baroalt,ANNEE,MOIS,JOURS,HR,MINUTE,SEC);
 80025b8:	f00d bd6a 	b.w	8010090 <sniprintf>
 80025bc:	f3af 8000 	nop.w
 80025c0:	cccccccd 	.word	0xcccccccd
 80025c4:	400ccccc 	.word	0x400ccccc
 80025c8:	2000060e 	.word	0x2000060e
 80025cc:	2000060c 	.word	0x2000060c
 80025d0:	2000060d 	.word	0x2000060d
 80025d4:	2000001b 	.word	0x2000001b
 80025d8:	2000001a 	.word	0x2000001a
 80025dc:	20000018 	.word	0x20000018
 80025e0:	08015e2c 	.word	0x08015e2c

080025e4 <storeindex>:


void storeindex(void){
 80025e4:	b530      	push	{r4, r5, lr}
	int writepage=MAX_WRITE_PAGE+1;
	uint8_t writebuffer[10];
	memset((uint8_t*)writebuffer,'\0',10);
	writebuffer[0]=((uint8_t)pageoffset)&0xFF;
	uint8_t debut=(((uint16_t)pagenumber)>>8)&0xFF;
 80025e6:	4b13      	ldr	r3, [pc, #76]	@ (8002634 <storeindex+0x50>)
	uint8_t fin=((uint16_t)pagenumber)&0xFF;
	writebuffer[1]=debut;
	writebuffer[2]=fin;
	writebuffer[3]=6;
	writebuffer[4]=6;
	SPIF_EraseSector(&hspif1, (int)floor((writepage)/16));
 80025e8:	4d13      	ldr	r5, [pc, #76]	@ (8002638 <storeindex+0x54>)
	uint8_t debut=(((uint16_t)pagenumber)>>8)&0xFF;
 80025ea:	681b      	ldr	r3, [r3, #0]
	writebuffer[0]=((uint8_t)pageoffset)&0xFF;
 80025ec:	4a13      	ldr	r2, [pc, #76]	@ (800263c <storeindex+0x58>)
void storeindex(void){
 80025ee:	b087      	sub	sp, #28
	memset((uint8_t*)writebuffer,'\0',10);
 80025f0:	2400      	movs	r4, #0
	uint8_t fin=((uint16_t)pagenumber)&0xFF;
 80025f2:	f88d 300e 	strb.w	r3, [sp, #14]
	uint8_t debut=(((uint16_t)pagenumber)>>8)&0xFF;
 80025f6:	f3c3 2307 	ubfx	r3, r3, #8, #8
	writebuffer[0]=((uint8_t)pageoffset)&0xFF;
 80025fa:	6812      	ldr	r2, [r2, #0]
	uint8_t debut=(((uint16_t)pagenumber)>>8)&0xFF;
 80025fc:	f88d 300d 	strb.w	r3, [sp, #13]
	SPIF_EraseSector(&hspif1, (int)floor((writepage)/16));
 8002600:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
	writebuffer[3]=6;
 8002604:	f240 6306 	movw	r3, #1542	@ 0x606
	SPIF_EraseSector(&hspif1, (int)floor((writepage)/16));
 8002608:	4628      	mov	r0, r5
	writebuffer[0]=((uint8_t)pageoffset)&0xFF;
 800260a:	f88d 200c 	strb.w	r2, [sp, #12]
	writebuffer[3]=6;
 800260e:	f8ad 300f 	strh.w	r3, [sp, #15]
	memset((uint8_t*)writebuffer,'\0',10);
 8002612:	f88d 4015 	strb.w	r4, [sp, #21]
 8002616:	f8cd 4011 	str.w	r4, [sp, #17]
	SPIF_EraseSector(&hspif1, (int)floor((writepage)/16));
 800261a:	f00c f9af 	bl	800e97c <SPIF_EraseSector>
	SPIF_WritePage(&hspif1,writepage, (uint8_t *)writebuffer, 5,0);
 800261e:	9400      	str	r4, [sp, #0]
 8002620:	2305      	movs	r3, #5
 8002622:	aa03      	add	r2, sp, #12
 8002624:	f44f 41c8 	mov.w	r1, #25600	@ 0x6400
 8002628:	4628      	mov	r0, r5
 800262a:	f00c fa2b 	bl	800ea84 <SPIF_WritePage>

}
 800262e:	b007      	add	sp, #28
 8002630:	bd30      	pop	{r4, r5, pc}
 8002632:	bf00      	nop
 8002634:	200006c8 	.word	0x200006c8
 8002638:	20000fe4 	.word	0x20000fe4
 800263c:	200006cc 	.word	0x200006cc

08002640 <getindex>:

void getindex(void){
 8002640:	b510      	push	{r4, lr}
	int readpage=MAX_WRITE_PAGE+1;
	SPIF_ReadPage(&hspif1, readpage, (uint8_t *)indexbuffer, 5, 0);
 8002642:	4c20      	ldr	r4, [pc, #128]	@ (80026c4 <getindex+0x84>)
 8002644:	4820      	ldr	r0, [pc, #128]	@ (80026c8 <getindex+0x88>)
void getindex(void){
 8002646:	b086      	sub	sp, #24
	SPIF_ReadPage(&hspif1, readpage, (uint8_t *)indexbuffer, 5, 0);
 8002648:	2300      	movs	r3, #0
 800264a:	9300      	str	r3, [sp, #0]
 800264c:	4622      	mov	r2, r4
 800264e:	2305      	movs	r3, #5
 8002650:	f44f 41c8 	mov.w	r1, #25600	@ 0x6400
 8002654:	f00c fa34 	bl	800eac0 <SPIF_ReadPage>
	if((indexbuffer[3]==6)&&(indexbuffer[4]==6) ){
 8002658:	78e3      	ldrb	r3, [r4, #3]
 800265a:	2b06      	cmp	r3, #6
 800265c:	d102      	bne.n	8002664 <getindex+0x24>
 800265e:	7923      	ldrb	r3, [r4, #4]
 8002660:	2b06      	cmp	r3, #6
 8002662:	d023      	beq.n	80026ac <getindex+0x6c>
	uint8_t debut=(((uint16_t)pagenumber)>>8)&0xFF;
 8002664:	4b19      	ldr	r3, [pc, #100]	@ (80026cc <getindex+0x8c>)
	writebuffer[0]=((uint8_t)pageoffset)&0xFF;
 8002666:	4a1a      	ldr	r2, [pc, #104]	@ (80026d0 <getindex+0x90>)
	uint8_t debut=(((uint16_t)pagenumber)>>8)&0xFF;
 8002668:	681b      	ldr	r3, [r3, #0]
	writebuffer[0]=((uint8_t)pageoffset)&0xFF;
 800266a:	6811      	ldr	r1, [r2, #0]
 800266c:	f88d 100c 	strb.w	r1, [sp, #12]
	uint8_t debut=(((uint16_t)pagenumber)>>8)&0xFF;
 8002670:	f3c3 2207 	ubfx	r2, r3, #8, #8
	memset((uint8_t*)writebuffer,'\0',10);
 8002674:	2400      	movs	r4, #0
	uint8_t debut=(((uint16_t)pagenumber)>>8)&0xFF;
 8002676:	f88d 200d 	strb.w	r2, [sp, #13]
	SPIF_EraseSector(&hspif1, (int)floor((writepage)/16));
 800267a:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
	writebuffer[3]=6;
 800267e:	f240 6206 	movw	r2, #1542	@ 0x606
	SPIF_EraseSector(&hspif1, (int)floor((writepage)/16));
 8002682:	4811      	ldr	r0, [pc, #68]	@ (80026c8 <getindex+0x88>)
	writebuffer[3]=6;
 8002684:	f8ad 200f 	strh.w	r2, [sp, #15]
	uint8_t fin=((uint16_t)pagenumber)&0xFF;
 8002688:	f88d 300e 	strb.w	r3, [sp, #14]
	memset((uint8_t*)writebuffer,'\0',10);
 800268c:	f88d 4015 	strb.w	r4, [sp, #21]
 8002690:	f8cd 4011 	str.w	r4, [sp, #17]
	SPIF_EraseSector(&hspif1, (int)floor((writepage)/16));
 8002694:	f00c f972 	bl	800e97c <SPIF_EraseSector>
	SPIF_WritePage(&hspif1,writepage, (uint8_t *)writebuffer, 5,0);
 8002698:	9400      	str	r4, [sp, #0]
 800269a:	2305      	movs	r3, #5
 800269c:	aa03      	add	r2, sp, #12
 800269e:	f44f 41c8 	mov.w	r1, #25600	@ 0x6400
 80026a2:	4809      	ldr	r0, [pc, #36]	@ (80026c8 <getindex+0x88>)
 80026a4:	f00c f9ee 	bl	800ea84 <SPIF_WritePage>
	}
	else{
		storeindex();
	}

}
 80026a8:	b006      	add	sp, #24
 80026aa:	bd10      	pop	{r4, pc}
		pagenumber=(int)((indexbuffer[1]<<8)|indexbuffer[2]);
 80026ac:	f8b4 3001 	ldrh.w	r3, [r4, #1]
		pageoffset=(int)indexbuffer[0];
 80026b0:	4907      	ldr	r1, [pc, #28]	@ (80026d0 <getindex+0x90>)
		pagenumber=(int)((indexbuffer[1]<<8)|indexbuffer[2]);
 80026b2:	4a06      	ldr	r2, [pc, #24]	@ (80026cc <getindex+0x8c>)
		pageoffset=(int)indexbuffer[0];
 80026b4:	7820      	ldrb	r0, [r4, #0]
 80026b6:	6008      	str	r0, [r1, #0]
		pagenumber=(int)((indexbuffer[1]<<8)|indexbuffer[2]);
 80026b8:	ba5b      	rev16	r3, r3
 80026ba:	b29b      	uxth	r3, r3
 80026bc:	6013      	str	r3, [r2, #0]
}
 80026be:	b006      	add	sp, #24
 80026c0:	bd10      	pop	{r4, pc}
 80026c2:	bf00      	nop
 80026c4:	2000110c 	.word	0x2000110c
 80026c8:	20000fe4 	.word	0x20000fe4
 80026cc:	200006c8 	.word	0x200006c8
 80026d0:	200006cc 	.word	0x200006cc

080026d4 <writebuffertoflash>:

void writebuffertoflash(uint8_t * buffer,int bufferlenght){
 80026d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if((pagenumber+1)%16==0){
 80026d8:	4f38      	ldr	r7, [pc, #224]	@ (80027bc <writebuffertoflash+0xe8>)
		if(sectoreraseen==0){
 80026da:	f8df 80ec 	ldr.w	r8, [pc, #236]	@ 80027c8 <writebuffertoflash+0xf4>
	if((pagenumber+1)%16==0){
 80026de:	f8d7 c000 	ldr.w	ip, [r7]
void writebuffertoflash(uint8_t * buffer,int bufferlenght){
 80026e2:	460c      	mov	r4, r1
	if((pagenumber+1)%16==0){
 80026e4:	f10c 0201 	add.w	r2, ip, #1
		if(sectoreraseen==0){
 80026e8:	f8d8 1000 	ldr.w	r1, [r8]
 80026ec:	f002 030f 	and.w	r3, r2, #15
 80026f0:	430b      	orrs	r3, r1
void writebuffertoflash(uint8_t * buffer,int bufferlenght){
 80026f2:	b086      	sub	sp, #24
 80026f4:	4606      	mov	r6, r0
		if(sectoreraseen==0){
 80026f6:	d052      	beq.n	800279e <writebuffertoflash+0xca>
		SPIF_EraseSector(&hspif1, (int)floor((pagenumber+1)/16));
		sectoreraseen=1;
		}

		  }
	if(bufferlenght+pageoffset<256){
 80026f8:	4d31      	ldr	r5, [pc, #196]	@ (80027c0 <writebuffertoflash+0xec>)
 80026fa:	682b      	ldr	r3, [r5, #0]
 80026fc:	191a      	adds	r2, r3, r4
 80026fe:	2aff      	cmp	r2, #255	@ 0xff
 8002700:	dc2b      	bgt.n	800275a <writebuffertoflash+0x86>
		SPIF_WritePage(&hspif1,pagenumber, (uint8_t *)buffer, bufferlenght,pageoffset);
 8002702:	9300      	str	r3, [sp, #0]
 8002704:	4632      	mov	r2, r6
 8002706:	4623      	mov	r3, r4
 8002708:	482e      	ldr	r0, [pc, #184]	@ (80027c4 <writebuffertoflash+0xf0>)
 800270a:	4661      	mov	r1, ip
 800270c:	f00c f9ba 	bl	800ea84 <SPIF_WritePage>
		pageoffset=pageoffset+bufferlenght;
 8002710:	682a      	ldr	r2, [r5, #0]
	uint8_t debut=(((uint16_t)pagenumber)>>8)&0xFF;
 8002712:	683b      	ldr	r3, [r7, #0]
		pageoffset=pageoffset+bufferlenght;
 8002714:	4414      	add	r4, r2
 8002716:	602c      	str	r4, [r5, #0]
	writebuffer[3]=6;
 8002718:	f240 6006 	movw	r0, #1542	@ 0x606
	memset((uint8_t*)writebuffer,'\0',10);
 800271c:	2500      	movs	r5, #0
	uint8_t debut=(((uint16_t)pagenumber)>>8)&0xFF;
 800271e:	f3c3 2207 	ubfx	r2, r3, #8, #8
	writebuffer[3]=6;
 8002722:	f8ad 000f 	strh.w	r0, [sp, #15]
	SPIF_EraseSector(&hspif1, (int)floor((writepage)/16));
 8002726:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 800272a:	4826      	ldr	r0, [pc, #152]	@ (80027c4 <writebuffertoflash+0xf0>)
	uint8_t debut=(((uint16_t)pagenumber)>>8)&0xFF;
 800272c:	f88d 200d 	strb.w	r2, [sp, #13]
	uint8_t fin=((uint16_t)pagenumber)&0xFF;
 8002730:	f88d 300e 	strb.w	r3, [sp, #14]
	memset((uint8_t*)writebuffer,'\0',10);
 8002734:	f88d 5015 	strb.w	r5, [sp, #21]
 8002738:	f8cd 5011 	str.w	r5, [sp, #17]
	writebuffer[0]=((uint8_t)pageoffset)&0xFF;
 800273c:	f88d 400c 	strb.w	r4, [sp, #12]
	SPIF_EraseSector(&hspif1, (int)floor((writepage)/16));
 8002740:	f00c f91c 	bl	800e97c <SPIF_EraseSector>
	SPIF_WritePage(&hspif1,writepage, (uint8_t *)writebuffer, 5,0);
 8002744:	9500      	str	r5, [sp, #0]
 8002746:	2305      	movs	r3, #5
 8002748:	aa03      	add	r2, sp, #12
 800274a:	f44f 41c8 	mov.w	r1, #25600	@ 0x6400
 800274e:	481d      	ldr	r0, [pc, #116]	@ (80027c4 <writebuffertoflash+0xf0>)
 8002750:	f00c f998 	bl	800ea84 <SPIF_WritePage>
		sectoreraseen=0;
		pageoffset=(bufferlenght-(256-pageoffset));
	}
	storeindex();

}
 8002754:	b006      	add	sp, #24
 8002756:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		SPIF_WritePage(&hspif1,pagenumber, (uint8_t *)buffer, 256-pageoffset,pageoffset);
 800275a:	4661      	mov	r1, ip
 800275c:	4632      	mov	r2, r6
 800275e:	9300      	str	r3, [sp, #0]
 8002760:	4818      	ldr	r0, [pc, #96]	@ (80027c4 <writebuffertoflash+0xf0>)
 8002762:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8002766:	f00c f98d 	bl	800ea84 <SPIF_WritePage>
		HAL_Delay(100);
 800276a:	2064      	movs	r0, #100	@ 0x64
 800276c:	f003 f80a 	bl	8005784 <HAL_Delay>
		SPIF_WritePage(&hspif1,pagenumber+1, (uint8_t *)buffer+(256-pageoffset), bufferlenght-(256-pageoffset),0);
 8002770:	682b      	ldr	r3, [r5, #0]
 8002772:	6839      	ldr	r1, [r7, #0]
 8002774:	4813      	ldr	r0, [pc, #76]	@ (80027c4 <writebuffertoflash+0xf0>)
 8002776:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 800277a:	18f2      	adds	r2, r6, r3
 800277c:	2600      	movs	r6, #0
 800277e:	1ae3      	subs	r3, r4, r3
 8002780:	3101      	adds	r1, #1
 8002782:	9600      	str	r6, [sp, #0]
 8002784:	f00c f97e 	bl	800ea84 <SPIF_WritePage>
		pageoffset=(bufferlenght-(256-pageoffset));
 8002788:	682b      	ldr	r3, [r5, #0]
		sectoreraseen=0;
 800278a:	f8c8 6000 	str.w	r6, [r8]
		pageoffset=(bufferlenght-(256-pageoffset));
 800278e:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8002792:	1ae4      	subs	r4, r4, r3
		pagenumber=pagenumber+1;
 8002794:	683b      	ldr	r3, [r7, #0]
		pageoffset=(bufferlenght-(256-pageoffset));
 8002796:	602c      	str	r4, [r5, #0]
		pagenumber=pagenumber+1;
 8002798:	3301      	adds	r3, #1
 800279a:	603b      	str	r3, [r7, #0]
		pageoffset=(bufferlenght-(256-pageoffset));
 800279c:	e7bc      	b.n	8002718 <writebuffertoflash+0x44>
		SPIF_EraseSector(&hspif1, (int)floor((pagenumber+1)/16));
 800279e:	1e11      	subs	r1, r2, #0
 80027a0:	bfb8      	it	lt
 80027a2:	f10c 0110 	addlt.w	r1, ip, #16
 80027a6:	4807      	ldr	r0, [pc, #28]	@ (80027c4 <writebuffertoflash+0xf0>)
 80027a8:	1109      	asrs	r1, r1, #4
 80027aa:	f00c f8e7 	bl	800e97c <SPIF_EraseSector>
		sectoreraseen=1;
 80027ae:	2301      	movs	r3, #1
		SPIF_WritePage(&hspif1,pagenumber, (uint8_t *)buffer, bufferlenght,pageoffset);
 80027b0:	f8d7 c000 	ldr.w	ip, [r7]
		sectoreraseen=1;
 80027b4:	f8c8 3000 	str.w	r3, [r8]
 80027b8:	e79e      	b.n	80026f8 <writebuffertoflash+0x24>
 80027ba:	bf00      	nop
 80027bc:	200006c8 	.word	0x200006c8
 80027c0:	200006cc 	.word	0x200006cc
 80027c4:	20000fe4 	.word	0x20000fe4
 80027c8:	200006c4 	.word	0x200006c4

080027cc <ssd1306_Line.constprop.0>:
    SSD1306.CurrentX = x;
    SSD1306.CurrentY = y;
}

/* Draw line by Bresenhem's algorithm */
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 80027cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int32_t deltaX = abs(x2 - x1);
 80027d0:	1a16      	subs	r6, r2, r0
    int32_t deltaY = abs(y2 - y1);
 80027d2:	eba3 0b01 	sub.w	fp, r3, r1
    int32_t deltaX = abs(x2 - x1);
 80027d6:	2e00      	cmp	r6, #0
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 80027d8:	b085      	sub	sp, #20
    int32_t deltaX = abs(x2 - x1);
 80027da:	bfb8      	it	lt
 80027dc:	4276      	neglt	r6, r6
    int32_t deltaY = abs(y2 - y1);
 80027de:	f1bb 0f00 	cmp.w	fp, #0
 80027e2:	bfb8      	it	lt
 80027e4:	f1cb 0b00 	rsblt	fp, fp, #0
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 80027e8:	469a      	mov	sl, r3
    int32_t signX = ((x1 < x2) ? 1 : -1);
 80027ea:	4282      	cmp	r2, r0
 80027ec:	bf8c      	ite	hi
 80027ee:	2301      	movhi	r3, #1
 80027f0:	f04f 33ff 	movls.w	r3, #4294967295
 80027f4:	9301      	str	r3, [sp, #4]
    int32_t signY = ((y1 < y2) ? 1 : -1);
 80027f6:	458a      	cmp	sl, r1
 80027f8:	bf8c      	ite	hi
 80027fa:	2301      	movhi	r3, #1
 80027fc:	f04f 33ff 	movls.w	r3, #4294967295
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8002800:	0617      	lsls	r7, r2, #24
    int32_t signY = ((y1 < y2) ? 1 : -1);
 8002802:	9302      	str	r3, [sp, #8]
    int32_t error = deltaX - deltaY;
 8002804:	eba6 0e0b 	sub.w	lr, r6, fp
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8002808:	d40f      	bmi.n	800282a <ssd1306_Line.constprop.0+0x5e>
 800280a:	f1ba 0f3f 	cmp.w	sl, #63	@ 0x3f
 800280e:	d80c      	bhi.n	800282a <ssd1306_Line.constprop.0+0x5e>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002810:	ea4f 04da 	mov.w	r4, sl, lsr #3
 8002814:	4d21      	ldr	r5, [pc, #132]	@ (800289c <ssd1306_Line.constprop.0+0xd0>)
 8002816:	eb02 14c4 	add.w	r4, r2, r4, lsl #7
 800281a:	f00a 0c07 	and.w	ip, sl, #7
 800281e:	5d2f      	ldrb	r7, [r5, r4]
 8002820:	2301      	movs	r3, #1
 8002822:	fa03 f30c 	lsl.w	r3, r3, ip
 8002826:	433b      	orrs	r3, r7
 8002828:	552b      	strb	r3, [r5, r4]
 800282a:	4b1c      	ldr	r3, [pc, #112]	@ (800289c <ssd1306_Line.constprop.0+0xd0>)
 800282c:	f8cd b00c 	str.w	fp, [sp, #12]
 8002830:	2780      	movs	r7, #128	@ 0x80
    ssd1306_DrawPixel(x2, y2, color);

    while((x1 != x2) || (y1 != y2)) {
        ssd1306_DrawPixel(x1, y1, color);
        error2 = error * 2;
        if(error2 > -deltaY) {
 8002832:	f1cb 0800 	rsb	r8, fp, #0
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002836:	08cc      	lsrs	r4, r1, #3
    while((x1 != x2) || (y1 != y2)) {
 8002838:	4282      	cmp	r2, r0
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800283a:	fb17 0404 	smlabb	r4, r7, r4, r0
        error2 = error * 2;
 800283e:	ea4f 0c4e 	mov.w	ip, lr, lsl #1
    while((x1 != x2) || (y1 != y2)) {
 8002842:	d101      	bne.n	8002848 <ssd1306_Line.constprop.0+0x7c>
 8002844:	458a      	cmp	sl, r1
 8002846:	d026      	beq.n	8002896 <ssd1306_Line.constprop.0+0xca>
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8002848:	0605      	lsls	r5, r0, #24
 800284a:	d40c      	bmi.n	8002866 <ssd1306_Line.constprop.0+0x9a>
 800284c:	293f      	cmp	r1, #63	@ 0x3f
 800284e:	d80a      	bhi.n	8002866 <ssd1306_Line.constprop.0+0x9a>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002850:	f813 9004 	ldrb.w	r9, [r3, r4]
 8002854:	f001 0507 	and.w	r5, r1, #7
 8002858:	f04f 0b01 	mov.w	fp, #1
 800285c:	fa0b f505 	lsl.w	r5, fp, r5
 8002860:	ea45 0509 	orr.w	r5, r5, r9
 8002864:	551d      	strb	r5, [r3, r4]
        if(error2 > -deltaY) {
 8002866:	ebb8 0f4e 	cmp.w	r8, lr, lsl #1
 800286a:	da05      	bge.n	8002878 <ssd1306_Line.constprop.0+0xac>
            error -= deltaY;
            x1 += signX;
 800286c:	9c01      	ldr	r4, [sp, #4]
 800286e:	4420      	add	r0, r4
            error -= deltaY;
 8002870:	9c03      	ldr	r4, [sp, #12]
            x1 += signX;
 8002872:	b2c0      	uxtb	r0, r0
            error -= deltaY;
 8002874:	ebae 0e04 	sub.w	lr, lr, r4
        }
        
        if(error2 < deltaX) {
 8002878:	4566      	cmp	r6, ip
 800287a:	dddc      	ble.n	8002836 <ssd1306_Line.constprop.0+0x6a>
            error += deltaX;
            y1 += signY;
 800287c:	9c02      	ldr	r4, [sp, #8]
 800287e:	4421      	add	r1, r4
 8002880:	b2c9      	uxtb	r1, r1
            error += deltaX;
 8002882:	44b6      	add	lr, r6
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002884:	08cc      	lsrs	r4, r1, #3
    while((x1 != x2) || (y1 != y2)) {
 8002886:	4282      	cmp	r2, r0
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002888:	fb17 0404 	smlabb	r4, r7, r4, r0
        error2 = error * 2;
 800288c:	ea4f 0c4e 	mov.w	ip, lr, lsl #1
    while((x1 != x2) || (y1 != y2)) {
 8002890:	d1da      	bne.n	8002848 <ssd1306_Line.constprop.0+0x7c>
 8002892:	458a      	cmp	sl, r1
 8002894:	d1d8      	bne.n	8002848 <ssd1306_Line.constprop.0+0x7c>
        }
    }
    return;
}
 8002896:	b005      	add	sp, #20
 8002898:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800289c:	20001148 	.word	0x20001148

080028a0 <ssd1306_Fill>:
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80028a0:	2800      	cmp	r0, #0
 80028a2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80028a6:	4803      	ldr	r0, [pc, #12]	@ (80028b4 <ssd1306_Fill+0x14>)
 80028a8:	bf14      	ite	ne
 80028aa:	21ff      	movne	r1, #255	@ 0xff
 80028ac:	2100      	moveq	r1, #0
 80028ae:	f00d bc86 	b.w	80101be <memset>
 80028b2:	bf00      	nop
 80028b4:	20001148 	.word	0x20001148

080028b8 <ssd1306_UpdateScreen>:
void ssd1306_UpdateScreen(void) {
 80028b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80028bc:	f8df 908c 	ldr.w	r9, [pc, #140]	@ 800294c <ssd1306_UpdateScreen+0x94>
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80028c0:	4f21      	ldr	r7, [pc, #132]	@ (8002948 <ssd1306_UpdateScreen+0x90>)
void ssd1306_UpdateScreen(void) {
 80028c2:	b086      	sub	sp, #24
 80028c4:	25b0      	movs	r5, #176	@ 0xb0
 80028c6:	f10d 0817 	add.w	r8, sp, #23
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80028ca:	f04f 0a00 	mov.w	sl, #0
 80028ce:	2401      	movs	r4, #1
 80028d0:	f04f 36ff 	mov.w	r6, #4294967295
 80028d4:	4623      	mov	r3, r4
 80028d6:	2200      	movs	r2, #0
 80028d8:	2178      	movs	r1, #120	@ 0x78
 80028da:	e9cd 4601 	strd	r4, r6, [sp, #4]
 80028de:	f8cd 8000 	str.w	r8, [sp]
 80028e2:	4638      	mov	r0, r7
 80028e4:	f88d 5017 	strb.w	r5, [sp, #23]
 80028e8:	f004 f99e 	bl	8006c28 <HAL_I2C_Mem_Write>
 80028ec:	4623      	mov	r3, r4
 80028ee:	2200      	movs	r2, #0
 80028f0:	2178      	movs	r1, #120	@ 0x78
 80028f2:	e9cd 4601 	strd	r4, r6, [sp, #4]
 80028f6:	f8cd 8000 	str.w	r8, [sp]
 80028fa:	4638      	mov	r0, r7
 80028fc:	f88d a017 	strb.w	sl, [sp, #23]
 8002900:	f004 f992 	bl	8006c28 <HAL_I2C_Mem_Write>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8002904:	f04f 0c10 	mov.w	ip, #16
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8002908:	4623      	mov	r3, r4
 800290a:	2200      	movs	r2, #0
 800290c:	2178      	movs	r1, #120	@ 0x78
 800290e:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8002912:	f8cd 8000 	str.w	r8, [sp]
 8002916:	4638      	mov	r0, r7
 8002918:	f88d c017 	strb.w	ip, [sp, #23]
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800291c:	4425      	add	r5, r4
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 800291e:	f004 f983 	bl	8006c28 <HAL_I2C_Mem_Write>
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8002922:	2380      	movs	r3, #128	@ 0x80
 8002924:	e9cd 3601 	strd	r3, r6, [sp, #4]
 8002928:	f8cd 9000 	str.w	r9, [sp]
 800292c:	4623      	mov	r3, r4
 800292e:	2240      	movs	r2, #64	@ 0x40
 8002930:	2178      	movs	r1, #120	@ 0x78
 8002932:	4638      	mov	r0, r7
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002934:	b2ed      	uxtb	r5, r5
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8002936:	f004 f977 	bl	8006c28 <HAL_I2C_Mem_Write>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800293a:	2db8      	cmp	r5, #184	@ 0xb8
 800293c:	f109 0980 	add.w	r9, r9, #128	@ 0x80
 8002940:	d1c5      	bne.n	80028ce <ssd1306_UpdateScreen+0x16>
}
 8002942:	b006      	add	sp, #24
 8002944:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002948:	20000430 	.word	0x20000430
 800294c:	20001148 	.word	0x20001148

08002950 <ssd1306_Init>:
void ssd1306_Init(void) {
 8002950:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    HAL_Delay(100);
 8002954:	2064      	movs	r0, #100	@ 0x64
void ssd1306_Init(void) {
 8002956:	b086      	sub	sp, #24
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8002958:	4fc2      	ldr	r7, [pc, #776]	@ (8002c64 <ssd1306_Init+0x314>)
    if (on) {
        value = 0xAF;   // Display on
        SSD1306.DisplayOn = 1;
    } else {
        value = 0xAE;   // Display off
        SSD1306.DisplayOn = 0;
 800295a:	f8df 9310 	ldr.w	r9, [pc, #784]	@ 8002c6c <ssd1306_Init+0x31c>
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 800295e:	2401      	movs	r4, #1
        SSD1306.DisplayOn = 0;
 8002960:	2500      	movs	r5, #0
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8002962:	f04f 36ff 	mov.w	r6, #4294967295
 8002966:	f10d 0817 	add.w	r8, sp, #23
    HAL_Delay(100);
 800296a:	f002 ff0b 	bl	8005784 <HAL_Delay>
        SSD1306.DisplayOn = 0;
 800296e:	20ae      	movs	r0, #174	@ 0xae
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8002970:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8002974:	f8cd 8000 	str.w	r8, [sp]
 8002978:	4623      	mov	r3, r4
 800297a:	462a      	mov	r2, r5
 800297c:	f88d 0017 	strb.w	r0, [sp, #23]
        SSD1306.DisplayOn = 0;
 8002980:	f889 5005 	strb.w	r5, [r9, #5]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8002984:	2178      	movs	r1, #120	@ 0x78
 8002986:	4638      	mov	r0, r7
 8002988:	f004 f94e 	bl	8006c28 <HAL_I2C_Mem_Write>
    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 800298c:	f04f 0a20 	mov.w	sl, #32
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8002990:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8002994:	4623      	mov	r3, r4
 8002996:	462a      	mov	r2, r5
 8002998:	f8cd 8000 	str.w	r8, [sp]
 800299c:	2178      	movs	r1, #120	@ 0x78
 800299e:	4638      	mov	r0, r7
 80029a0:	f88d a017 	strb.w	sl, [sp, #23]
 80029a4:	f004 f940 	bl	8006c28 <HAL_I2C_Mem_Write>
 80029a8:	e9cd 4601 	strd	r4, r6, [sp, #4]
 80029ac:	4623      	mov	r3, r4
 80029ae:	462a      	mov	r2, r5
 80029b0:	f8cd 8000 	str.w	r8, [sp]
 80029b4:	2178      	movs	r1, #120	@ 0x78
 80029b6:	4638      	mov	r0, r7
 80029b8:	f88d 5017 	strb.w	r5, [sp, #23]
 80029bc:	f004 f934 	bl	8006c28 <HAL_I2C_Mem_Write>
    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80029c0:	20b0      	movs	r0, #176	@ 0xb0
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80029c2:	e9cd 4601 	strd	r4, r6, [sp, #4]
 80029c6:	4623      	mov	r3, r4
 80029c8:	462a      	mov	r2, r5
 80029ca:	f88d 0017 	strb.w	r0, [sp, #23]
 80029ce:	f8cd 8000 	str.w	r8, [sp]
 80029d2:	2178      	movs	r1, #120	@ 0x78
 80029d4:	4638      	mov	r0, r7
 80029d6:	f004 f927 	bl	8006c28 <HAL_I2C_Mem_Write>
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80029da:	20c8      	movs	r0, #200	@ 0xc8
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80029dc:	e9cd 4601 	strd	r4, r6, [sp, #4]
 80029e0:	4623      	mov	r3, r4
 80029e2:	462a      	mov	r2, r5
 80029e4:	f88d 0017 	strb.w	r0, [sp, #23]
 80029e8:	f8cd 8000 	str.w	r8, [sp]
 80029ec:	2178      	movs	r1, #120	@ 0x78
 80029ee:	4638      	mov	r0, r7
 80029f0:	f004 f91a 	bl	8006c28 <HAL_I2C_Mem_Write>
 80029f4:	e9cd 4601 	strd	r4, r6, [sp, #4]
 80029f8:	4623      	mov	r3, r4
 80029fa:	462a      	mov	r2, r5
 80029fc:	f8cd 8000 	str.w	r8, [sp]
 8002a00:	2178      	movs	r1, #120	@ 0x78
 8002a02:	4638      	mov	r0, r7
 8002a04:	f88d 5017 	strb.w	r5, [sp, #23]
 8002a08:	f004 f90e 	bl	8006c28 <HAL_I2C_Mem_Write>
    ssd1306_WriteCommand(0x10); //---set high column address
 8002a0c:	2010      	movs	r0, #16
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8002a0e:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8002a12:	4623      	mov	r3, r4
 8002a14:	462a      	mov	r2, r5
 8002a16:	f88d 0017 	strb.w	r0, [sp, #23]
 8002a1a:	f8cd 8000 	str.w	r8, [sp]
 8002a1e:	2178      	movs	r1, #120	@ 0x78
 8002a20:	4638      	mov	r0, r7
 8002a22:	f004 f901 	bl	8006c28 <HAL_I2C_Mem_Write>
    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8002a26:	2040      	movs	r0, #64	@ 0x40
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8002a28:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8002a2c:	4623      	mov	r3, r4
 8002a2e:	462a      	mov	r2, r5
 8002a30:	f88d 0017 	strb.w	r0, [sp, #23]
 8002a34:	f8cd 8000 	str.w	r8, [sp]
 8002a38:	2178      	movs	r1, #120	@ 0x78
 8002a3a:	4638      	mov	r0, r7
 8002a3c:	f004 f8f4 	bl	8006c28 <HAL_I2C_Mem_Write>
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8002a40:	2081      	movs	r0, #129	@ 0x81
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8002a42:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8002a46:	4623      	mov	r3, r4
 8002a48:	462a      	mov	r2, r5
 8002a4a:	f88d 0017 	strb.w	r0, [sp, #23]
 8002a4e:	f8cd 8000 	str.w	r8, [sp]
 8002a52:	2178      	movs	r1, #120	@ 0x78
 8002a54:	4638      	mov	r0, r7
 8002a56:	f004 f8e7 	bl	8006c28 <HAL_I2C_Mem_Write>
 8002a5a:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8002a5e:	4623      	mov	r3, r4
 8002a60:	462a      	mov	r2, r5
 8002a62:	f8cd 8000 	str.w	r8, [sp]
 8002a66:	2178      	movs	r1, #120	@ 0x78
 8002a68:	4638      	mov	r0, r7
 8002a6a:	f88d 6017 	strb.w	r6, [sp, #23]
 8002a6e:	f004 f8db 	bl	8006c28 <HAL_I2C_Mem_Write>
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8002a72:	20a1      	movs	r0, #161	@ 0xa1
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8002a74:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8002a78:	4623      	mov	r3, r4
 8002a7a:	462a      	mov	r2, r5
 8002a7c:	f88d 0017 	strb.w	r0, [sp, #23]
 8002a80:	f8cd 8000 	str.w	r8, [sp]
 8002a84:	2178      	movs	r1, #120	@ 0x78
 8002a86:	4638      	mov	r0, r7
 8002a88:	f004 f8ce 	bl	8006c28 <HAL_I2C_Mem_Write>
    ssd1306_WriteCommand(0xA6); //--set normal color
 8002a8c:	20a6      	movs	r0, #166	@ 0xa6
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8002a8e:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8002a92:	4623      	mov	r3, r4
 8002a94:	462a      	mov	r2, r5
 8002a96:	f88d 0017 	strb.w	r0, [sp, #23]
 8002a9a:	f8cd 8000 	str.w	r8, [sp]
 8002a9e:	2178      	movs	r1, #120	@ 0x78
 8002aa0:	4638      	mov	r0, r7
 8002aa2:	f004 f8c1 	bl	8006c28 <HAL_I2C_Mem_Write>
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8002aa6:	20a8      	movs	r0, #168	@ 0xa8
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8002aa8:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8002aac:	4623      	mov	r3, r4
 8002aae:	462a      	mov	r2, r5
 8002ab0:	f88d 0017 	strb.w	r0, [sp, #23]
 8002ab4:	f8cd 8000 	str.w	r8, [sp]
 8002ab8:	2178      	movs	r1, #120	@ 0x78
 8002aba:	4638      	mov	r0, r7
 8002abc:	f004 f8b4 	bl	8006c28 <HAL_I2C_Mem_Write>
    ssd1306_WriteCommand(0x3F); //
 8002ac0:	203f      	movs	r0, #63	@ 0x3f
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8002ac2:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8002ac6:	4623      	mov	r3, r4
 8002ac8:	462a      	mov	r2, r5
 8002aca:	f88d 0017 	strb.w	r0, [sp, #23]
 8002ace:	f8cd 8000 	str.w	r8, [sp]
 8002ad2:	2178      	movs	r1, #120	@ 0x78
 8002ad4:	4638      	mov	r0, r7
 8002ad6:	f004 f8a7 	bl	8006c28 <HAL_I2C_Mem_Write>
    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8002ada:	20a4      	movs	r0, #164	@ 0xa4
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8002adc:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8002ae0:	4623      	mov	r3, r4
 8002ae2:	462a      	mov	r2, r5
 8002ae4:	f88d 0017 	strb.w	r0, [sp, #23]
 8002ae8:	f8cd 8000 	str.w	r8, [sp]
 8002aec:	2178      	movs	r1, #120	@ 0x78
 8002aee:	4638      	mov	r0, r7
 8002af0:	f004 f89a 	bl	8006c28 <HAL_I2C_Mem_Write>
    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8002af4:	20d3      	movs	r0, #211	@ 0xd3
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8002af6:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8002afa:	4623      	mov	r3, r4
 8002afc:	462a      	mov	r2, r5
 8002afe:	f88d 0017 	strb.w	r0, [sp, #23]
 8002b02:	f8cd 8000 	str.w	r8, [sp]
 8002b06:	2178      	movs	r1, #120	@ 0x78
 8002b08:	4638      	mov	r0, r7
 8002b0a:	f004 f88d 	bl	8006c28 <HAL_I2C_Mem_Write>
 8002b0e:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8002b12:	4623      	mov	r3, r4
 8002b14:	462a      	mov	r2, r5
 8002b16:	f8cd 8000 	str.w	r8, [sp]
 8002b1a:	2178      	movs	r1, #120	@ 0x78
 8002b1c:	4638      	mov	r0, r7
 8002b1e:	f88d 5017 	strb.w	r5, [sp, #23]
 8002b22:	f004 f881 	bl	8006c28 <HAL_I2C_Mem_Write>
    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8002b26:	20d5      	movs	r0, #213	@ 0xd5
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8002b28:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8002b2c:	4623      	mov	r3, r4
 8002b2e:	462a      	mov	r2, r5
 8002b30:	f88d 0017 	strb.w	r0, [sp, #23]
 8002b34:	f8cd 8000 	str.w	r8, [sp]
 8002b38:	2178      	movs	r1, #120	@ 0x78
 8002b3a:	4638      	mov	r0, r7
 8002b3c:	f004 f874 	bl	8006c28 <HAL_I2C_Mem_Write>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8002b40:	20f0      	movs	r0, #240	@ 0xf0
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8002b42:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8002b46:	4623      	mov	r3, r4
 8002b48:	462a      	mov	r2, r5
 8002b4a:	f88d 0017 	strb.w	r0, [sp, #23]
 8002b4e:	f8cd 8000 	str.w	r8, [sp]
 8002b52:	2178      	movs	r1, #120	@ 0x78
 8002b54:	4638      	mov	r0, r7
 8002b56:	f004 f867 	bl	8006c28 <HAL_I2C_Mem_Write>
    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8002b5a:	20d9      	movs	r0, #217	@ 0xd9
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8002b5c:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8002b60:	4623      	mov	r3, r4
 8002b62:	462a      	mov	r2, r5
 8002b64:	f88d 0017 	strb.w	r0, [sp, #23]
 8002b68:	f8cd 8000 	str.w	r8, [sp]
 8002b6c:	2178      	movs	r1, #120	@ 0x78
 8002b6e:	4638      	mov	r0, r7
 8002b70:	f004 f85a 	bl	8006c28 <HAL_I2C_Mem_Write>
    ssd1306_WriteCommand(0x22); //
 8002b74:	2022      	movs	r0, #34	@ 0x22
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8002b76:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8002b7a:	4623      	mov	r3, r4
 8002b7c:	462a      	mov	r2, r5
 8002b7e:	f88d 0017 	strb.w	r0, [sp, #23]
 8002b82:	f8cd 8000 	str.w	r8, [sp]
 8002b86:	2178      	movs	r1, #120	@ 0x78
 8002b88:	4638      	mov	r0, r7
 8002b8a:	f004 f84d 	bl	8006c28 <HAL_I2C_Mem_Write>
    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8002b8e:	20da      	movs	r0, #218	@ 0xda
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8002b90:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8002b94:	4623      	mov	r3, r4
 8002b96:	462a      	mov	r2, r5
 8002b98:	f88d 0017 	strb.w	r0, [sp, #23]
 8002b9c:	f8cd 8000 	str.w	r8, [sp]
 8002ba0:	2178      	movs	r1, #120	@ 0x78
 8002ba2:	4638      	mov	r0, r7
 8002ba4:	f004 f840 	bl	8006c28 <HAL_I2C_Mem_Write>
    ssd1306_WriteCommand(0x12);
 8002ba8:	2012      	movs	r0, #18
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8002baa:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8002bae:	4623      	mov	r3, r4
 8002bb0:	462a      	mov	r2, r5
 8002bb2:	f88d 0017 	strb.w	r0, [sp, #23]
 8002bb6:	f8cd 8000 	str.w	r8, [sp]
 8002bba:	2178      	movs	r1, #120	@ 0x78
 8002bbc:	4638      	mov	r0, r7
 8002bbe:	f004 f833 	bl	8006c28 <HAL_I2C_Mem_Write>
    ssd1306_WriteCommand(0xDB); //--set vcomh
 8002bc2:	20db      	movs	r0, #219	@ 0xdb
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8002bc4:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8002bc8:	4623      	mov	r3, r4
 8002bca:	462a      	mov	r2, r5
 8002bcc:	f88d 0017 	strb.w	r0, [sp, #23]
 8002bd0:	f8cd 8000 	str.w	r8, [sp]
 8002bd4:	2178      	movs	r1, #120	@ 0x78
 8002bd6:	4638      	mov	r0, r7
 8002bd8:	f004 f826 	bl	8006c28 <HAL_I2C_Mem_Write>
 8002bdc:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8002be0:	4623      	mov	r3, r4
 8002be2:	462a      	mov	r2, r5
 8002be4:	f8cd 8000 	str.w	r8, [sp]
 8002be8:	2178      	movs	r1, #120	@ 0x78
 8002bea:	4638      	mov	r0, r7
 8002bec:	f88d a017 	strb.w	sl, [sp, #23]
 8002bf0:	f004 f81a 	bl	8006c28 <HAL_I2C_Mem_Write>
    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8002bf4:	208d      	movs	r0, #141	@ 0x8d
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8002bf6:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8002bfa:	4623      	mov	r3, r4
 8002bfc:	462a      	mov	r2, r5
 8002bfe:	f88d 0017 	strb.w	r0, [sp, #23]
 8002c02:	f8cd 8000 	str.w	r8, [sp]
 8002c06:	2178      	movs	r1, #120	@ 0x78
 8002c08:	4638      	mov	r0, r7
 8002c0a:	f004 f80d 	bl	8006c28 <HAL_I2C_Mem_Write>
    ssd1306_WriteCommand(0x14); //
 8002c0e:	2014      	movs	r0, #20
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8002c10:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8002c14:	4623      	mov	r3, r4
 8002c16:	462a      	mov	r2, r5
 8002c18:	f88d 0017 	strb.w	r0, [sp, #23]
 8002c1c:	f8cd 8000 	str.w	r8, [sp]
 8002c20:	2178      	movs	r1, #120	@ 0x78
 8002c22:	4638      	mov	r0, r7
 8002c24:	f004 f800 	bl	8006c28 <HAL_I2C_Mem_Write>
 8002c28:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8002c2c:	4623      	mov	r3, r4
 8002c2e:	f8cd 8000 	str.w	r8, [sp]
 8002c32:	462a      	mov	r2, r5
 8002c34:	4638      	mov	r0, r7
        SSD1306.DisplayOn = 1;
 8002c36:	f889 4005 	strb.w	r4, [r9, #5]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8002c3a:	2178      	movs	r1, #120	@ 0x78
 8002c3c:	26af      	movs	r6, #175	@ 0xaf
 8002c3e:	f88d 6017 	strb.w	r6, [sp, #23]
 8002c42:	f003 fff1 	bl	8006c28 <HAL_I2C_Mem_Write>
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8002c46:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002c4a:	4629      	mov	r1, r5
 8002c4c:	4806      	ldr	r0, [pc, #24]	@ (8002c68 <ssd1306_Init+0x318>)
 8002c4e:	f00d fab6 	bl	80101be <memset>
    ssd1306_UpdateScreen();
 8002c52:	f7ff fe31 	bl	80028b8 <ssd1306_UpdateScreen>
    SSD1306.CurrentX = 0;
 8002c56:	f8c9 5000 	str.w	r5, [r9]
    SSD1306.Initialized = 1;
 8002c5a:	f889 4004 	strb.w	r4, [r9, #4]
}
 8002c5e:	b006      	add	sp, #24
 8002c60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c64:	20000430 	.word	0x20000430
 8002c68:	20001148 	.word	0x20001148
 8002c6c:	20001140 	.word	0x20001140

08002c70 <ssd1306_WriteChar>:
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8002c70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c74:	b087      	sub	sp, #28
    if (ch < 32 || ch > 126)
 8002c76:	f1a0 0520 	sub.w	r5, r0, #32
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8002c7a:	4686      	mov	lr, r0
 8002c7c:	a806      	add	r0, sp, #24
 8002c7e:	e900 0006 	stmdb	r0, {r1, r2}
    if (ch < 32 || ch > 126)
 8002c82:	b2ea      	uxtb	r2, r5
 8002c84:	2a5e      	cmp	r2, #94	@ 0x5e
 8002c86:	d862      	bhi.n	8002d4e <ssd1306_WriteChar+0xde>
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8002c88:	4858      	ldr	r0, [pc, #352]	@ (8002dec <ssd1306_WriteChar+0x17c>)
 8002c8a:	f89d 4010 	ldrb.w	r4, [sp, #16]
 8002c8e:	8807      	ldrh	r7, [r0, #0]
 8002c90:	193a      	adds	r2, r7, r4
 8002c92:	2a80      	cmp	r2, #128	@ 0x80
 8002c94:	dc5b      	bgt.n	8002d4e <ssd1306_WriteChar+0xde>
 8002c96:	f89d 1011 	ldrb.w	r1, [sp, #17]
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8002c9a:	8840      	ldrh	r0, [r0, #2]
 8002c9c:	1846      	adds	r6, r0, r1
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8002c9e:	2e40      	cmp	r6, #64	@ 0x40
 8002ca0:	dc55      	bgt.n	8002d4e <ssd1306_WriteChar+0xde>
    for(i = 0; i < Font.FontHeight; i++) {
 8002ca2:	2900      	cmp	r1, #0
 8002ca4:	d04d      	beq.n	8002d42 <ssd1306_WriteChar+0xd2>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8002ca6:	fb01 f605 	mul.w	r6, r1, r5
 8002caa:	4431      	add	r1, r6
 8002cac:	9d05      	ldr	r5, [sp, #20]
 8002cae:	f106 4600 	add.w	r6, r6, #2147483648	@ 0x80000000
 8002cb2:	3e01      	subs	r6, #1
 8002cb4:	eb05 0646 	add.w	r6, r5, r6, lsl #1
 8002cb8:	3d02      	subs	r5, #2
 8002cba:	eb05 0941 	add.w	r9, r5, r1, lsl #1
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002cbe:	4d4c      	ldr	r5, [pc, #304]	@ (8002df0 <ssd1306_WriteChar+0x180>)
 8002cc0:	f8cd 9004 	str.w	r9, [sp, #4]
 8002cc4:	b2c0      	uxtb	r0, r0
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8002cc6:	fa5f fb87 	uxtb.w	fp, r7
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002cca:	4692      	mov	sl, r2
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8002ccc:	f836 7f02 	ldrh.w	r7, [r6, #2]!
        for(j = 0; j < Font.FontWidth; j++) {
 8002cd0:	b38c      	cbz	r4, 8002d36 <ssd1306_WriteChar+0xc6>
 8002cd2:	283f      	cmp	r0, #63	@ 0x3f
 8002cd4:	46f0      	mov	r8, lr
 8002cd6:	d82d      	bhi.n	8002d34 <ssd1306_WriteChar+0xc4>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002cd8:	2201      	movs	r2, #1
 8002cda:	f000 0e07 	and.w	lr, r0, #7
 8002cde:	fa02 fe0e 	lsl.w	lr, r2, lr
 8002ce2:	ea6f 020e 	mvn.w	r2, lr
 8002ce6:	08c1      	lsrs	r1, r0, #3
 8002ce8:	2b01      	cmp	r3, #1
 8002cea:	fa5f f982 	uxtb.w	r9, r2
 8002cee:	ea4f 11c1 	mov.w	r1, r1, lsl #7
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8002cf2:	465a      	mov	r2, fp
 8002cf4:	d02f      	beq.n	8002d56 <ssd1306_WriteChar+0xe6>
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d05a      	beq.n	8002db0 <ssd1306_WriteChar+0x140>
        for(j = 0; j < Font.FontWidth; j++) {
 8002cfa:	f04f 0c00 	mov.w	ip, #0
 8002cfe:	9602      	str	r6, [sp, #8]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8002d00:	0617      	lsls	r7, r2, #24
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002d02:	eb02 0601 	add.w	r6, r2, r1
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8002d06:	d405      	bmi.n	8002d14 <ssd1306_WriteChar+0xa4>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002d08:	f815 e006 	ldrb.w	lr, [r5, r6]
 8002d0c:	ea09 0e0e 	and.w	lr, r9, lr
 8002d10:	f805 e006 	strb.w	lr, [r5, r6]
        for(j = 0; j < Font.FontWidth; j++) {
 8002d14:	f10c 0c01 	add.w	ip, ip, #1
 8002d18:	3201      	adds	r2, #1
 8002d1a:	4564      	cmp	r4, ip
 8002d1c:	b2d2      	uxtb	r2, r2
 8002d1e:	d1ef      	bne.n	8002d00 <ssd1306_WriteChar+0x90>
 8002d20:	9e02      	ldr	r6, [sp, #8]
    for(i = 0; i < Font.FontHeight; i++) {
 8002d22:	9a01      	ldr	r2, [sp, #4]
 8002d24:	3001      	adds	r0, #1
 8002d26:	42b2      	cmp	r2, r6
 8002d28:	b2c0      	uxtb	r0, r0
 8002d2a:	d03f      	beq.n	8002dac <ssd1306_WriteChar+0x13c>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8002d2c:	283f      	cmp	r0, #63	@ 0x3f
 8002d2e:	f836 7f02 	ldrh.w	r7, [r6, #2]!
        for(j = 0; j < Font.FontWidth; j++) {
 8002d32:	d9d1      	bls.n	8002cd8 <ssd1306_WriteChar+0x68>
 8002d34:	46c6      	mov	lr, r8
    for(i = 0; i < Font.FontHeight; i++) {
 8002d36:	9a01      	ldr	r2, [sp, #4]
 8002d38:	3001      	adds	r0, #1
 8002d3a:	4296      	cmp	r6, r2
 8002d3c:	b2c0      	uxtb	r0, r0
 8002d3e:	d1c5      	bne.n	8002ccc <ssd1306_WriteChar+0x5c>
 8002d40:	4652      	mov	r2, sl
    SSD1306.CurrentX += Font.FontWidth;
 8002d42:	4b2a      	ldr	r3, [pc, #168]	@ (8002dec <ssd1306_WriteChar+0x17c>)
    return ch;
 8002d44:	4670      	mov	r0, lr
    SSD1306.CurrentX += Font.FontWidth;
 8002d46:	801a      	strh	r2, [r3, #0]
}
 8002d48:	b007      	add	sp, #28
 8002d4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return 0;
 8002d4e:	2000      	movs	r0, #0
}
 8002d50:	b007      	add	sp, #28
 8002d52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        for(j = 0; j < Font.FontWidth; j++) {
 8002d56:	e9cd 6002 	strd	r6, r0, [sp, #8]
 8002d5a:	f04f 0c00 	mov.w	ip, #0
 8002d5e:	e00b      	b.n	8002d78 <ssd1306_WriteChar+0x108>
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8002d60:	0616      	lsls	r6, r2, #24
 8002d62:	d403      	bmi.n	8002d6c <ssd1306_WriteChar+0xfc>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002d64:	5c2e      	ldrb	r6, [r5, r0]
 8002d66:	ea46 060e 	orr.w	r6, r6, lr
 8002d6a:	542e      	strb	r6, [r5, r0]
        for(j = 0; j < Font.FontWidth; j++) {
 8002d6c:	f10c 0c01 	add.w	ip, ip, #1
 8002d70:	3201      	adds	r2, #1
 8002d72:	4564      	cmp	r4, ip
 8002d74:	b2d2      	uxtb	r2, r2
 8002d76:	d012      	beq.n	8002d9e <ssd1306_WriteChar+0x12e>
            if((b << j) & 0x8000)  {
 8002d78:	fa07 f00c 	lsl.w	r0, r7, ip
 8002d7c:	f410 4f00 	tst.w	r0, #32768	@ 0x8000
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002d80:	eb02 0001 	add.w	r0, r2, r1
            if((b << j) & 0x8000)  {
 8002d84:	d1ec      	bne.n	8002d60 <ssd1306_WriteChar+0xf0>
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8002d86:	0616      	lsls	r6, r2, #24
 8002d88:	d4f0      	bmi.n	8002d6c <ssd1306_WriteChar+0xfc>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002d8a:	5c2e      	ldrb	r6, [r5, r0]
        for(j = 0; j < Font.FontWidth; j++) {
 8002d8c:	f10c 0c01 	add.w	ip, ip, #1
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002d90:	ea09 0606 	and.w	r6, r9, r6
        for(j = 0; j < Font.FontWidth; j++) {
 8002d94:	3201      	adds	r2, #1
 8002d96:	4564      	cmp	r4, ip
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002d98:	542e      	strb	r6, [r5, r0]
        for(j = 0; j < Font.FontWidth; j++) {
 8002d9a:	b2d2      	uxtb	r2, r2
 8002d9c:	d1ec      	bne.n	8002d78 <ssd1306_WriteChar+0x108>
 8002d9e:	e9dd 6002 	ldrd	r6, r0, [sp, #8]
    for(i = 0; i < Font.FontHeight; i++) {
 8002da2:	9a01      	ldr	r2, [sp, #4]
 8002da4:	3001      	adds	r0, #1
 8002da6:	42b2      	cmp	r2, r6
 8002da8:	b2c0      	uxtb	r0, r0
 8002daa:	d1bf      	bne.n	8002d2c <ssd1306_WriteChar+0xbc>
 8002dac:	46c6      	mov	lr, r8
 8002dae:	e7c7      	b.n	8002d40 <ssd1306_WriteChar+0xd0>
        for(j = 0; j < Font.FontWidth; j++) {
 8002db0:	e9cd 6002 	strd	r6, r0, [sp, #8]
 8002db4:	469c      	mov	ip, r3
 8002db6:	e00b      	b.n	8002dd0 <ssd1306_WriteChar+0x160>
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8002db8:	0616      	lsls	r6, r2, #24
 8002dba:	d403      	bmi.n	8002dc4 <ssd1306_WriteChar+0x154>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002dbc:	5c2e      	ldrb	r6, [r5, r0]
 8002dbe:	ea09 0606 	and.w	r6, r9, r6
 8002dc2:	542e      	strb	r6, [r5, r0]
        for(j = 0; j < Font.FontWidth; j++) {
 8002dc4:	f10c 0c01 	add.w	ip, ip, #1
 8002dc8:	3201      	adds	r2, #1
 8002dca:	45a4      	cmp	ip, r4
 8002dcc:	b2d2      	uxtb	r2, r2
 8002dce:	d0e6      	beq.n	8002d9e <ssd1306_WriteChar+0x12e>
            if((b << j) & 0x8000)  {
 8002dd0:	fa07 f00c 	lsl.w	r0, r7, ip
 8002dd4:	f410 4f00 	tst.w	r0, #32768	@ 0x8000
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002dd8:	eb02 0001 	add.w	r0, r2, r1
            if((b << j) & 0x8000)  {
 8002ddc:	d1ec      	bne.n	8002db8 <ssd1306_WriteChar+0x148>
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8002dde:	0616      	lsls	r6, r2, #24
 8002de0:	d4f0      	bmi.n	8002dc4 <ssd1306_WriteChar+0x154>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002de2:	5c2e      	ldrb	r6, [r5, r0]
 8002de4:	ea46 060e 	orr.w	r6, r6, lr
 8002de8:	542e      	strb	r6, [r5, r0]
 8002dea:	e7eb      	b.n	8002dc4 <ssd1306_WriteChar+0x154>
 8002dec:	20001140 	.word	0x20001140
 8002df0:	20001148 	.word	0x20001148

08002df4 <ssd1306_WriteString>:
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8002df4:	b570      	push	{r4, r5, r6, lr}
 8002df6:	4604      	mov	r4, r0
 8002df8:	b082      	sub	sp, #8
    while (*str) {
 8002dfa:	7800      	ldrb	r0, [r0, #0]
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8002dfc:	466d      	mov	r5, sp
 8002dfe:	e885 0006 	stmia.w	r5, {r1, r2}
    while (*str) {
 8002e02:	b178      	cbz	r0, 8002e24 <ssd1306_WriteString+0x30>
 8002e04:	461e      	mov	r6, r3
 8002e06:	e002      	b.n	8002e0e <ssd1306_WriteString+0x1a>
 8002e08:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8002e0c:	b150      	cbz	r0, 8002e24 <ssd1306_WriteString+0x30>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8002e0e:	e895 0006 	ldmia.w	r5, {r1, r2}
 8002e12:	4633      	mov	r3, r6
 8002e14:	f7ff ff2c 	bl	8002c70 <ssd1306_WriteChar>
 8002e18:	7822      	ldrb	r2, [r4, #0]
 8002e1a:	4290      	cmp	r0, r2
 8002e1c:	d0f4      	beq.n	8002e08 <ssd1306_WriteString+0x14>
}
 8002e1e:	4610      	mov	r0, r2
 8002e20:	b002      	add	sp, #8
 8002e22:	bd70      	pop	{r4, r5, r6, pc}
    return *str;
 8002e24:	2200      	movs	r2, #0
}
 8002e26:	4610      	mov	r0, r2
 8002e28:	b002      	add	sp, #8
 8002e2a:	bd70      	pop	{r4, r5, r6, pc}

08002e2c <ssd1306_SetCursor>:
    SSD1306.CurrentX = x;
 8002e2c:	4b01      	ldr	r3, [pc, #4]	@ (8002e34 <ssd1306_SetCursor+0x8>)
 8002e2e:	8018      	strh	r0, [r3, #0]
    SSD1306.CurrentY = y;
 8002e30:	8059      	strh	r1, [r3, #2]
}
 8002e32:	4770      	bx	lr
 8002e34:	20001140 	.word	0x20001140

08002e38 <ssd1306_DrawBitmap>:
void ssd1306_DrawBitmap(uint8_t x, uint8_t y, const unsigned char* bitmap, uint8_t w, uint8_t h, SSD1306_COLOR color) {
 8002e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e3c:	b085      	sub	sp, #20
 8002e3e:	4604      	mov	r4, r0
 8002e40:	4617      	mov	r7, r2
    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8002e42:	0624      	lsls	r4, r4, #24
void ssd1306_DrawBitmap(uint8_t x, uint8_t y, const unsigned char* bitmap, uint8_t w, uint8_t h, SSD1306_COLOR color) {
 8002e44:	f89d 203c 	ldrb.w	r2, [sp, #60]	@ 0x3c
 8002e48:	9001      	str	r0, [sp, #4]
 8002e4a:	9200      	str	r2, [sp, #0]
 8002e4c:	f89d 0038 	ldrb.w	r0, [sp, #56]	@ 0x38
    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8002e50:	d44f      	bmi.n	8002ef2 <ssd1306_DrawBitmap+0xba>
 8002e52:	293f      	cmp	r1, #63	@ 0x3f
 8002e54:	d84d      	bhi.n	8002ef2 <ssd1306_DrawBitmap+0xba>
    for (uint8_t j = 0; j < h; j++, y++) {
 8002e56:	2800      	cmp	r0, #0
 8002e58:	d04b      	beq.n	8002ef2 <ssd1306_DrawBitmap+0xba>
 8002e5a:	4408      	add	r0, r1
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8002e5c:	1dda      	adds	r2, r3, #7
 8002e5e:	2500      	movs	r5, #0
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002e60:	f8df 811c 	ldr.w	r8, [pc, #284]	@ 8002f80 <ssd1306_DrawBitmap+0x148>
 8002e64:	b2c6      	uxtb	r6, r0
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8002e66:	ea4f 0be2 	mov.w	fp, r2, asr #3
    uint8_t byte = 0;
 8002e6a:	4628      	mov	r0, r5
 8002e6c:	46ba      	mov	sl, r7
        for (uint8_t i = 0; i < w; i++) {
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d03a      	beq.n	8002ee8 <ssd1306_DrawBitmap+0xb0>
 8002e72:	293f      	cmp	r1, #63	@ 0x3f
 8002e74:	d840      	bhi.n	8002ef8 <ssd1306_DrawBitmap+0xc0>
 8002e76:	9a00      	ldr	r2, [sp, #0]
 8002e78:	2a01      	cmp	r2, #1
 8002e7a:	d053      	beq.n	8002f24 <ssd1306_DrawBitmap+0xec>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	f001 0c07 	and.w	ip, r1, #7
 8002e82:	fa02 fc0c 	lsl.w	ip, r2, ip
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002e86:	ea6f 0c0c 	mvn.w	ip, ip
 8002e8a:	fa5f fc8c 	uxtb.w	ip, ip
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002e8e:	ea4f 09d1 	mov.w	r9, r1, lsr #3
                byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8002e92:	e9cd c102 	strd	ip, r1, [sp, #8]
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002e96:	9c01      	ldr	r4, [sp, #4]
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002e98:	ea4f 19c9 	mov.w	r9, r9, lsl #7
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002e9c:	2200      	movs	r2, #0
                byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8002e9e:	eb0a 0e05 	add.w	lr, sl, r5
 8002ea2:	e002      	b.n	8002eaa <ssd1306_DrawBitmap+0x72>
        for (uint8_t i = 0; i < w; i++) {
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	b2fc      	uxtb	r4, r7
 8002ea8:	d01d      	beq.n	8002ee6 <ssd1306_DrawBitmap+0xae>
                byte <<= 1;
 8002eaa:	b2d7      	uxtb	r7, r2
                byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8002eac:	08ff      	lsrs	r7, r7, #3
            if (i & 7) {
 8002eae:	f012 0f07 	tst.w	r2, #7
                byte <<= 1;
 8002eb2:	ea4f 0040 	mov.w	r0, r0, lsl #1
                byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8002eb6:	bf0c      	ite	eq
 8002eb8:	f81e 0007 	ldrbeq.w	r0, [lr, r7]
                byte <<= 1;
 8002ebc:	b2c0      	uxtbne	r0, r0
            if (byte & 0x80) {
 8002ebe:	0601      	lsls	r1, r0, #24
        for (uint8_t i = 0; i < w; i++) {
 8002ec0:	f104 0701 	add.w	r7, r4, #1
 8002ec4:	f102 0201 	add.w	r2, r2, #1
            if (byte & 0x80) {
 8002ec8:	d5ec      	bpl.n	8002ea4 <ssd1306_DrawBitmap+0x6c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002eca:	eb04 0c09 	add.w	ip, r4, r9
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8002ece:	0624      	lsls	r4, r4, #24
 8002ed0:	d4e8      	bmi.n	8002ea4 <ssd1306_DrawBitmap+0x6c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002ed2:	f818 400c 	ldrb.w	r4, [r8, ip]
 8002ed6:	9902      	ldr	r1, [sp, #8]
        for (uint8_t i = 0; i < w; i++) {
 8002ed8:	429a      	cmp	r2, r3
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002eda:	ea04 0401 	and.w	r4, r4, r1
 8002ede:	f808 400c 	strb.w	r4, [r8, ip]
        for (uint8_t i = 0; i < w; i++) {
 8002ee2:	b2fc      	uxtb	r4, r7
 8002ee4:	d1e1      	bne.n	8002eaa <ssd1306_DrawBitmap+0x72>
 8002ee6:	9903      	ldr	r1, [sp, #12]
    for (uint8_t j = 0; j < h; j++, y++) {
 8002ee8:	3101      	adds	r1, #1
 8002eea:	b2c9      	uxtb	r1, r1
 8002eec:	42b1      	cmp	r1, r6
 8002eee:	445d      	add	r5, fp
 8002ef0:	d1bd      	bne.n	8002e6e <ssd1306_DrawBitmap+0x36>
}
 8002ef2:	b005      	add	sp, #20
 8002ef4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        for (uint8_t i = 0; i < w; i++) {
 8002ef8:	2400      	movs	r4, #0
                byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8002efa:	eb0a 0705 	add.w	r7, sl, r5
                byte <<= 1;
 8002efe:	b2e2      	uxtb	r2, r4
                byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8002f00:	08d2      	lsrs	r2, r2, #3
            if (i & 7) {
 8002f02:	f014 0f07 	tst.w	r4, #7
                byte <<= 1;
 8002f06:	ea4f 0040 	mov.w	r0, r0, lsl #1
        for (uint8_t i = 0; i < w; i++) {
 8002f0a:	f104 0401 	add.w	r4, r4, #1
                byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8002f0e:	bf0c      	ite	eq
 8002f10:	5cb8      	ldrbeq	r0, [r7, r2]
                byte <<= 1;
 8002f12:	b2c0      	uxtbne	r0, r0
        for (uint8_t i = 0; i < w; i++) {
 8002f14:	429c      	cmp	r4, r3
 8002f16:	d1f2      	bne.n	8002efe <ssd1306_DrawBitmap+0xc6>
    for (uint8_t j = 0; j < h; j++, y++) {
 8002f18:	3101      	adds	r1, #1
 8002f1a:	b2c9      	uxtb	r1, r1
 8002f1c:	42b1      	cmp	r1, r6
 8002f1e:	445d      	add	r5, fp
 8002f20:	d1a5      	bne.n	8002e6e <ssd1306_DrawBitmap+0x36>
 8002f22:	e7e6      	b.n	8002ef2 <ssd1306_DrawBitmap+0xba>
 8002f24:	4614      	mov	r4, r2
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002f26:	f001 0207 	and.w	r2, r1, #7
 8002f2a:	fa04 f202 	lsl.w	r2, r4, r2
 8002f2e:	b2d2      	uxtb	r2, r2
 8002f30:	ea4f 0ed1 	mov.w	lr, r1, lsr #3
 8002f34:	9202      	str	r2, [sp, #8]
 8002f36:	9c01      	ldr	r4, [sp, #4]
                byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8002f38:	9103      	str	r1, [sp, #12]
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002f3a:	ea4f 1ece 	mov.w	lr, lr, lsl #7
 8002f3e:	2200      	movs	r2, #0
                byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8002f40:	eb0a 0c05 	add.w	ip, sl, r5
 8002f44:	e002      	b.n	8002f4c <ssd1306_DrawBitmap+0x114>
        for (uint8_t i = 0; i < w; i++) {
 8002f46:	4293      	cmp	r3, r2
 8002f48:	b2fc      	uxtb	r4, r7
 8002f4a:	d0cc      	beq.n	8002ee6 <ssd1306_DrawBitmap+0xae>
                byte <<= 1;
 8002f4c:	b2d7      	uxtb	r7, r2
                byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8002f4e:	08ff      	lsrs	r7, r7, #3
            if (i & 7) {
 8002f50:	0751      	lsls	r1, r2, #29
                byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8002f52:	bf0e      	itee	eq
 8002f54:	f81c 0007 	ldrbeq.w	r0, [ip, r7]
                byte <<= 1;
 8002f58:	0040      	lslne	r0, r0, #1
 8002f5a:	b2c0      	uxtbne	r0, r0
            if (byte & 0x80) {
 8002f5c:	0601      	lsls	r1, r0, #24
        for (uint8_t i = 0; i < w; i++) {
 8002f5e:	f104 0701 	add.w	r7, r4, #1
 8002f62:	f102 0201 	add.w	r2, r2, #1
            if (byte & 0x80) {
 8002f66:	d5ee      	bpl.n	8002f46 <ssd1306_DrawBitmap+0x10e>
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8002f68:	0621      	lsls	r1, r4, #24
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002f6a:	eb04 090e 	add.w	r9, r4, lr
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8002f6e:	d4ea      	bmi.n	8002f46 <ssd1306_DrawBitmap+0x10e>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002f70:	f818 4009 	ldrb.w	r4, [r8, r9]
 8002f74:	9902      	ldr	r1, [sp, #8]
 8002f76:	430c      	orrs	r4, r1
 8002f78:	f808 4009 	strb.w	r4, [r8, r9]
 8002f7c:	e7e3      	b.n	8002f46 <ssd1306_DrawBitmap+0x10e>
 8002f7e:	bf00      	nop
 8002f80:	20001148 	.word	0x20001148
 8002f84:	00000000 	.word	0x00000000

08002f88 <batterygauge>:
uint8_t ssd1306_GetDisplayOn() {
    return SSD1306.DisplayOn;
}


void batterygauge(float vbat,int x, int y,int currentsquare){
 8002f88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	ssd1306_Line(x+15,y+1,x+15,y+5, White);
 8002f8c:	b2cc      	uxtb	r4, r1
 8002f8e:	b2c5      	uxtb	r5, r0
 8002f90:	1c66      	adds	r6, r4, #1
 8002f92:	1d67      	adds	r7, r4, #5
 8002f94:	f105 010f 	add.w	r1, r5, #15
 8002f98:	b2c9      	uxtb	r1, r1
 8002f9a:	b2f6      	uxtb	r6, r6
 8002f9c:	b2ff      	uxtb	r7, r7
void batterygauge(float vbat,int x, int y,int currentsquare){
 8002f9e:	b083      	sub	sp, #12
	ssd1306_Line(x+15,y+1,x+15,y+5, White);
 8002fa0:	463b      	mov	r3, r7
 8002fa2:	4608      	mov	r0, r1
void batterygauge(float vbat,int x, int y,int currentsquare){
 8002fa4:	4691      	mov	r9, r2
	ssd1306_Line(x+15,y+1,x+15,y+5, White);
 8002fa6:	460a      	mov	r2, r1
 8002fa8:	4631      	mov	r1, r6
 8002faa:	f7ff fc0f 	bl	80027cc <ssd1306_Line.constprop.0>
	ssd1306_Line(x+16,y+1,x+16,y+5, White);
 8002fae:	f105 0210 	add.w	r2, r5, #16
 8002fb2:	463b      	mov	r3, r7
 8002fb4:	b2d2      	uxtb	r2, r2
	ssd1306_DrawRectangle(x, y, x+14, y+6, White);
 8002fb6:	f105 070e 	add.w	r7, r5, #14
 8002fba:	b2ff      	uxtb	r7, r7
	ssd1306_Line(x+16,y+1,x+16,y+5, White);
 8002fbc:	4631      	mov	r1, r6
 8002fbe:	4610      	mov	r0, r2
	ssd1306_DrawRectangle(x, y, x+14, y+6, White);
 8002fc0:	1da6      	adds	r6, r4, #6
	ssd1306_Line(x+16,y+1,x+16,y+5, White);
 8002fc2:	f7ff fc03 	bl	80027cc <ssd1306_Line.constprop.0>
	ssd1306_DrawRectangle(x, y, x+14, y+6, White);
 8002fc6:	b2f6      	uxtb	r6, r6
    ssd1306_Line(x1,y1,x2,y1,color);
 8002fc8:	463a      	mov	r2, r7
 8002fca:	4623      	mov	r3, r4
 8002fcc:	4621      	mov	r1, r4
 8002fce:	4628      	mov	r0, r5
 8002fd0:	f7ff fbfc 	bl	80027cc <ssd1306_Line.constprop.0>
    ssd1306_Line(x2,y1,x2,y2,color);
 8002fd4:	4633      	mov	r3, r6
 8002fd6:	4621      	mov	r1, r4
 8002fd8:	4638      	mov	r0, r7
 8002fda:	f7ff fbf7 	bl	80027cc <ssd1306_Line.constprop.0>
void batterygauge(float vbat,int x, int y,int currentsquare){
 8002fde:	ee10 8a10 	vmov	r8, s0
    ssd1306_Line(x2,y2,x1,y2,color);
 8002fe2:	462a      	mov	r2, r5
 8002fe4:	4633      	mov	r3, r6
 8002fe6:	4631      	mov	r1, r6
 8002fe8:	4638      	mov	r0, r7
 8002fea:	f7ff fbef 	bl	80027cc <ssd1306_Line.constprop.0>
    ssd1306_Line(x1,y2,x1,y1,color);
 8002fee:	4623      	mov	r3, r4
 8002ff0:	4631      	mov	r1, r6
 8002ff2:	4628      	mov	r0, r5
 8002ff4:	f7ff fbea 	bl	80027cc <ssd1306_Line.constprop.0>
	if(vbat<=3.7){
 8002ff8:	4640      	mov	r0, r8
 8002ffa:	f7fd fa7d 	bl	80004f8 <__aeabi_f2d>
		ssd1306_DrawRectangle(x+2, y+2, x+3, y+4, White);
 8002ffe:	1ca6      	adds	r6, r4, #2
 8003000:	f105 0802 	add.w	r8, r5, #2
 8003004:	3404      	adds	r4, #4
 8003006:	1cef      	adds	r7, r5, #3
	if(vbat<=3.7){
 8003008:	a3a7      	add	r3, pc, #668	@ (adr r3, 80032a8 <batterygauge+0x320>)
 800300a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800300e:	4682      	mov	sl, r0
 8003010:	468b      	mov	fp, r1
		ssd1306_DrawRectangle(x+2, y+2, x+3, y+4, White);
 8003012:	fa5f f888 	uxtb.w	r8, r8
 8003016:	b2f6      	uxtb	r6, r6
 8003018:	b2e4      	uxtb	r4, r4
 800301a:	b2ff      	uxtb	r7, r7
	if(vbat<=3.7){
 800301c:	f7fd fd40 	bl	8000aa0 <__aeabi_dcmple>
 8003020:	2800      	cmp	r0, #0
 8003022:	d169      	bne.n	80030f8 <batterygauge+0x170>
		}
		else{

		}
	}
	if(vbat>3.7 && vbat<= 3.9){
 8003024:	a3a2      	add	r3, pc, #648	@ (adr r3, 80032b0 <batterygauge+0x328>)
 8003026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800302a:	4650      	mov	r0, sl
 800302c:	4659      	mov	r1, fp
 800302e:	f7fd fd37 	bl	8000aa0 <__aeabi_dcmple>
 8003032:	2800      	cmp	r0, #0
 8003034:	f040 80cc 	bne.w	80031d0 <batterygauge+0x248>
				else{

				}

	}
	if(vbat>3.9 && vbat<=4.1){
 8003038:	a39f      	add	r3, pc, #636	@ (adr r3, 80032b8 <batterygauge+0x330>)
 800303a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800303e:	4650      	mov	r0, sl
 8003040:	4659      	mov	r1, fp
 8003042:	f7fd fd2d 	bl	8000aa0 <__aeabi_dcmple>
 8003046:	2800      	cmp	r0, #0
 8003048:	f040 8087 	bne.w	800315a <batterygauge+0x1d2>
    ssd1306_Line(x1,y1,x2,y1,color);
 800304c:	463a      	mov	r2, r7
 800304e:	4640      	mov	r0, r8
 8003050:	4633      	mov	r3, r6
 8003052:	4631      	mov	r1, r6
 8003054:	f7ff fbba 	bl	80027cc <ssd1306_Line.constprop.0>
    ssd1306_Line(x2,y1,x2,y2,color);
 8003058:	4638      	mov	r0, r7
 800305a:	4623      	mov	r3, r4
 800305c:	4631      	mov	r1, r6
 800305e:	f7ff fbb5 	bl	80027cc <ssd1306_Line.constprop.0>
    ssd1306_Line(x2,y2,x1,y2,color);
 8003062:	4642      	mov	r2, r8
 8003064:	4638      	mov	r0, r7
 8003066:	4623      	mov	r3, r4
 8003068:	4621      	mov	r1, r4
 800306a:	f7ff fbaf 	bl	80027cc <ssd1306_Line.constprop.0>
				}
	}

	if(vbat>4.1){
		ssd1306_DrawRectangle(x+2, y+2, x+3, y+4, White);
		ssd1306_DrawRectangle(x+5, y+2, x+6, y+4, White);
 800306e:	1daf      	adds	r7, r5, #6
    ssd1306_Line(x1,y2,x1,y1,color);
 8003070:	4640      	mov	r0, r8
		ssd1306_DrawRectangle(x+5, y+2, x+6, y+4, White);
 8003072:	f105 0805 	add.w	r8, r5, #5
 8003076:	fa5f f888 	uxtb.w	r8, r8
 800307a:	b2ff      	uxtb	r7, r7
    ssd1306_Line(x1,y2,x1,y1,color);
 800307c:	4633      	mov	r3, r6
 800307e:	4621      	mov	r1, r4
 8003080:	f7ff fba4 	bl	80027cc <ssd1306_Line.constprop.0>
    ssd1306_Line(x1,y1,x2,y1,color);
 8003084:	463a      	mov	r2, r7
 8003086:	4640      	mov	r0, r8
 8003088:	4633      	mov	r3, r6
 800308a:	4631      	mov	r1, r6
 800308c:	f7ff fb9e 	bl	80027cc <ssd1306_Line.constprop.0>
    ssd1306_Line(x2,y1,x2,y2,color);
 8003090:	4638      	mov	r0, r7
 8003092:	4623      	mov	r3, r4
 8003094:	4631      	mov	r1, r6
 8003096:	f7ff fb99 	bl	80027cc <ssd1306_Line.constprop.0>
    ssd1306_Line(x2,y2,x1,y2,color);
 800309a:	4642      	mov	r2, r8
 800309c:	4638      	mov	r0, r7
 800309e:	4623      	mov	r3, r4
 80030a0:	4621      	mov	r1, r4
 80030a2:	f7ff fb93 	bl	80027cc <ssd1306_Line.constprop.0>
		ssd1306_DrawRectangle(x+8, y+2, x+9, y+4, White);
 80030a6:	f105 0709 	add.w	r7, r5, #9
    ssd1306_Line(x1,y2,x1,y1,color);
 80030aa:	4640      	mov	r0, r8
		ssd1306_DrawRectangle(x+8, y+2, x+9, y+4, White);
 80030ac:	f105 0808 	add.w	r8, r5, #8
 80030b0:	fa5f f888 	uxtb.w	r8, r8
 80030b4:	b2ff      	uxtb	r7, r7
    ssd1306_Line(x1,y2,x1,y1,color);
 80030b6:	4633      	mov	r3, r6
 80030b8:	4621      	mov	r1, r4
 80030ba:	f7ff fb87 	bl	80027cc <ssd1306_Line.constprop.0>
    ssd1306_Line(x1,y1,x2,y1,color);
 80030be:	463a      	mov	r2, r7
 80030c0:	4633      	mov	r3, r6
 80030c2:	4631      	mov	r1, r6
 80030c4:	4640      	mov	r0, r8
 80030c6:	f7ff fb81 	bl	80027cc <ssd1306_Line.constprop.0>
    ssd1306_Line(x2,y1,x2,y2,color);
 80030ca:	4623      	mov	r3, r4
 80030cc:	4631      	mov	r1, r6
 80030ce:	4638      	mov	r0, r7
 80030d0:	f7ff fb7c 	bl	80027cc <ssd1306_Line.constprop.0>
    ssd1306_Line(x2,y2,x1,y2,color);
 80030d4:	4623      	mov	r3, r4
 80030d6:	4642      	mov	r2, r8
 80030d8:	4621      	mov	r1, r4
 80030da:	4638      	mov	r0, r7
 80030dc:	f7ff fb76 	bl	80027cc <ssd1306_Line.constprop.0>
    ssd1306_Line(x1,y2,x1,y1,color);
 80030e0:	4633      	mov	r3, r6
 80030e2:	4621      	mov	r1, r4
 80030e4:	4640      	mov	r0, r8
 80030e6:	f7ff fb71 	bl	80027cc <ssd1306_Line.constprop.0>
		if(currentsquare==1){
 80030ea:	f1b9 0f01 	cmp.w	r9, #1
 80030ee:	f000 80a4 	beq.w	800323a <batterygauge+0x2b2>
	}




}
 80030f2:	b003      	add	sp, #12
 80030f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ssd1306_Line(x1,y1,x2,y1,color);
 80030f8:	463a      	mov	r2, r7
 80030fa:	4633      	mov	r3, r6
 80030fc:	4631      	mov	r1, r6
 80030fe:	4640      	mov	r0, r8
 8003100:	f7ff fb64 	bl	80027cc <ssd1306_Line.constprop.0>
    ssd1306_Line(x2,y1,x2,y2,color);
 8003104:	4623      	mov	r3, r4
 8003106:	4631      	mov	r1, r6
 8003108:	4638      	mov	r0, r7
 800310a:	f7ff fb5f 	bl	80027cc <ssd1306_Line.constprop.0>
    ssd1306_Line(x2,y2,x1,y2,color);
 800310e:	4623      	mov	r3, r4
 8003110:	4642      	mov	r2, r8
 8003112:	4621      	mov	r1, r4
 8003114:	4638      	mov	r0, r7
 8003116:	f7ff fb59 	bl	80027cc <ssd1306_Line.constprop.0>
    ssd1306_Line(x1,y2,x1,y1,color);
 800311a:	4633      	mov	r3, r6
 800311c:	4621      	mov	r1, r4
 800311e:	4640      	mov	r0, r8
 8003120:	f7ff fb54 	bl	80027cc <ssd1306_Line.constprop.0>
		if(currentsquare==1){
 8003124:	f1b9 0f01 	cmp.w	r9, #1
 8003128:	f000 80a5 	beq.w	8003276 <batterygauge+0x2ee>
	if(vbat>3.9 && vbat<=4.1){
 800312c:	a360      	add	r3, pc, #384	@ (adr r3, 80032b0 <batterygauge+0x328>)
 800312e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003132:	4650      	mov	r0, sl
 8003134:	4659      	mov	r1, fp
 8003136:	f7fd fcc7 	bl	8000ac8 <__aeabi_dcmpgt>
 800313a:	2800      	cmp	r0, #0
 800313c:	f47f af7c 	bne.w	8003038 <batterygauge+0xb0>
	if(vbat>4.1){
 8003140:	a35d      	add	r3, pc, #372	@ (adr r3, 80032b8 <batterygauge+0x330>)
 8003142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003146:	4650      	mov	r0, sl
 8003148:	4659      	mov	r1, fp
 800314a:	f7fd fcbd 	bl	8000ac8 <__aeabi_dcmpgt>
 800314e:	2800      	cmp	r0, #0
 8003150:	f47f af7c 	bne.w	800304c <batterygauge+0xc4>
}
 8003154:	b003      	add	sp, #12
 8003156:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ssd1306_Line(x1,y1,x2,y1,color);
 800315a:	463a      	mov	r2, r7
 800315c:	4633      	mov	r3, r6
 800315e:	4631      	mov	r1, r6
 8003160:	4640      	mov	r0, r8
 8003162:	f7ff fb33 	bl	80027cc <ssd1306_Line.constprop.0>
    ssd1306_Line(x2,y1,x2,y2,color);
 8003166:	4623      	mov	r3, r4
 8003168:	4631      	mov	r1, r6
 800316a:	4638      	mov	r0, r7
 800316c:	f7ff fb2e 	bl	80027cc <ssd1306_Line.constprop.0>
		ssd1306_DrawRectangle(x+5, y+2, x+6, y+4, White);
 8003170:	f105 0b05 	add.w	fp, r5, #5
    ssd1306_Line(x2,y2,x1,y2,color);
 8003174:	4642      	mov	r2, r8
 8003176:	4623      	mov	r3, r4
 8003178:	4621      	mov	r1, r4
 800317a:	4638      	mov	r0, r7
		ssd1306_DrawRectangle(x+5, y+2, x+6, y+4, White);
 800317c:	f105 0a06 	add.w	sl, r5, #6
    ssd1306_Line(x2,y2,x1,y2,color);
 8003180:	f7ff fb24 	bl	80027cc <ssd1306_Line.constprop.0>
		ssd1306_DrawRectangle(x+5, y+2, x+6, y+4, White);
 8003184:	fa5f fb8b 	uxtb.w	fp, fp
 8003188:	fa5f fa8a 	uxtb.w	sl, sl
    ssd1306_Line(x1,y2,x1,y1,color);
 800318c:	4633      	mov	r3, r6
 800318e:	4621      	mov	r1, r4
 8003190:	4640      	mov	r0, r8
 8003192:	f7ff fb1b 	bl	80027cc <ssd1306_Line.constprop.0>
    ssd1306_Line(x1,y1,x2,y1,color);
 8003196:	4652      	mov	r2, sl
 8003198:	4633      	mov	r3, r6
 800319a:	4631      	mov	r1, r6
 800319c:	4658      	mov	r0, fp
 800319e:	f7ff fb15 	bl	80027cc <ssd1306_Line.constprop.0>
    ssd1306_Line(x2,y1,x2,y2,color);
 80031a2:	4623      	mov	r3, r4
 80031a4:	4631      	mov	r1, r6
 80031a6:	4650      	mov	r0, sl
 80031a8:	f7ff fb10 	bl	80027cc <ssd1306_Line.constprop.0>
    ssd1306_Line(x2,y2,x1,y2,color);
 80031ac:	4623      	mov	r3, r4
 80031ae:	465a      	mov	r2, fp
 80031b0:	4621      	mov	r1, r4
 80031b2:	4650      	mov	r0, sl
 80031b4:	f7ff fb0a 	bl	80027cc <ssd1306_Line.constprop.0>
    ssd1306_Line(x1,y2,x1,y1,color);
 80031b8:	4633      	mov	r3, r6
 80031ba:	4621      	mov	r1, r4
 80031bc:	4658      	mov	r0, fp
 80031be:	f7ff fb05 	bl	80027cc <ssd1306_Line.constprop.0>
		if(currentsquare==1){
 80031c2:	f1b9 0f01 	cmp.w	r9, #1
 80031c6:	d194      	bne.n	80030f2 <batterygauge+0x16a>
			ssd1306_DrawRectangle(x+8, y+2, x+9, y+4, White);
 80031c8:	f105 0708 	add.w	r7, r5, #8
 80031cc:	3509      	adds	r5, #9
 80031ce:	e037      	b.n	8003240 <batterygauge+0x2b8>
    ssd1306_Line(x1,y1,x2,y1,color);
 80031d0:	463a      	mov	r2, r7
 80031d2:	4633      	mov	r3, r6
 80031d4:	4631      	mov	r1, r6
 80031d6:	4640      	mov	r0, r8
 80031d8:	f7ff faf8 	bl	80027cc <ssd1306_Line.constprop.0>
    ssd1306_Line(x2,y1,x2,y2,color);
 80031dc:	4623      	mov	r3, r4
 80031de:	4631      	mov	r1, r6
 80031e0:	4638      	mov	r0, r7
 80031e2:	f7ff faf3 	bl	80027cc <ssd1306_Line.constprop.0>
    ssd1306_Line(x2,y2,x1,y2,color);
 80031e6:	4623      	mov	r3, r4
 80031e8:	4642      	mov	r2, r8
 80031ea:	4621      	mov	r1, r4
 80031ec:	4638      	mov	r0, r7
 80031ee:	f7ff faed 	bl	80027cc <ssd1306_Line.constprop.0>
    ssd1306_Line(x1,y2,x1,y1,color);
 80031f2:	4633      	mov	r3, r6
 80031f4:	4621      	mov	r1, r4
 80031f6:	4640      	mov	r0, r8
 80031f8:	f7ff fae8 	bl	80027cc <ssd1306_Line.constprop.0>
		if(currentsquare==1){
 80031fc:	f1b9 0f01 	cmp.w	r9, #1
 8003200:	d19e      	bne.n	8003140 <batterygauge+0x1b8>
			ssd1306_DrawRectangle(x+5, y+2, x+6, y+4, White);
 8003202:	1d6b      	adds	r3, r5, #5
 8003204:	b2d8      	uxtb	r0, r3
 8003206:	1dab      	adds	r3, r5, #6
 8003208:	b2db      	uxtb	r3, r3
 800320a:	461a      	mov	r2, r3
    ssd1306_Line(x1,y1,x2,y1,color);
 800320c:	4631      	mov	r1, r6
 800320e:	4633      	mov	r3, r6
 8003210:	9000      	str	r0, [sp, #0]
 8003212:	f7ff fadb 	bl	80027cc <ssd1306_Line.constprop.0>
    ssd1306_Line(x2,y1,x2,y2,color);
 8003216:	4623      	mov	r3, r4
 8003218:	4631      	mov	r1, r6
 800321a:	4610      	mov	r0, r2
 800321c:	9201      	str	r2, [sp, #4]
 800321e:	f7ff fad5 	bl	80027cc <ssd1306_Line.constprop.0>
    ssd1306_Line(x2,y2,x1,y2,color);
 8003222:	9a00      	ldr	r2, [sp, #0]
 8003224:	9801      	ldr	r0, [sp, #4]
 8003226:	4623      	mov	r3, r4
 8003228:	4621      	mov	r1, r4
 800322a:	f7ff facf 	bl	80027cc <ssd1306_Line.constprop.0>
    ssd1306_Line(x1,y2,x1,y1,color);
 800322e:	4633      	mov	r3, r6
 8003230:	4621      	mov	r1, r4
 8003232:	4610      	mov	r0, r2
 8003234:	f7ff faca 	bl	80027cc <ssd1306_Line.constprop.0>
    return;
 8003238:	e782      	b.n	8003140 <batterygauge+0x1b8>
			ssd1306_DrawRectangle(x+11, y+2, x+12, y+4, White);
 800323a:	f105 070b 	add.w	r7, r5, #11
 800323e:	350c      	adds	r5, #12
 8003240:	b2ff      	uxtb	r7, r7
 8003242:	b2ed      	uxtb	r5, r5
    ssd1306_Line(x1,y1,x2,y1,color);
 8003244:	462a      	mov	r2, r5
 8003246:	4633      	mov	r3, r6
 8003248:	4631      	mov	r1, r6
 800324a:	4638      	mov	r0, r7
 800324c:	f7ff fabe 	bl	80027cc <ssd1306_Line.constprop.0>
    ssd1306_Line(x2,y1,x2,y2,color);
 8003250:	4623      	mov	r3, r4
 8003252:	4631      	mov	r1, r6
 8003254:	4628      	mov	r0, r5
 8003256:	f7ff fab9 	bl	80027cc <ssd1306_Line.constprop.0>
    ssd1306_Line(x2,y2,x1,y2,color);
 800325a:	4623      	mov	r3, r4
 800325c:	4621      	mov	r1, r4
 800325e:	4628      	mov	r0, r5
 8003260:	463a      	mov	r2, r7
 8003262:	f7ff fab3 	bl	80027cc <ssd1306_Line.constprop.0>
    ssd1306_Line(x1,y2,x1,y1,color);
 8003266:	4633      	mov	r3, r6
 8003268:	4621      	mov	r1, r4
 800326a:	4638      	mov	r0, r7
}
 800326c:	b003      	add	sp, #12
 800326e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ssd1306_Line(x1,y2,x1,y1,color);
 8003272:	f7ff baab 	b.w	80027cc <ssd1306_Line.constprop.0>
    ssd1306_Line(x1,y1,x2,y1,color);
 8003276:	463a      	mov	r2, r7
 8003278:	4633      	mov	r3, r6
 800327a:	4631      	mov	r1, r6
 800327c:	4640      	mov	r0, r8
 800327e:	f7ff faa5 	bl	80027cc <ssd1306_Line.constprop.0>
    ssd1306_Line(x2,y1,x2,y2,color);
 8003282:	4623      	mov	r3, r4
 8003284:	4631      	mov	r1, r6
 8003286:	4638      	mov	r0, r7
 8003288:	f7ff faa0 	bl	80027cc <ssd1306_Line.constprop.0>
    ssd1306_Line(x2,y2,x1,y2,color);
 800328c:	4623      	mov	r3, r4
 800328e:	4621      	mov	r1, r4
 8003290:	4638      	mov	r0, r7
 8003292:	4642      	mov	r2, r8
 8003294:	f7ff fa9a 	bl	80027cc <ssd1306_Line.constprop.0>
    ssd1306_Line(x1,y2,x1,y1,color);
 8003298:	4633      	mov	r3, r6
 800329a:	4621      	mov	r1, r4
 800329c:	4640      	mov	r0, r8
 800329e:	f7ff fa95 	bl	80027cc <ssd1306_Line.constprop.0>
    return;
 80032a2:	e743      	b.n	800312c <batterygauge+0x1a4>
 80032a4:	f3af 8000 	nop.w
 80032a8:	9999999a 	.word	0x9999999a
 80032ac:	400d9999 	.word	0x400d9999
 80032b0:	33333333 	.word	0x33333333
 80032b4:	400f3333 	.word	0x400f3333
 80032b8:	66666666 	.word	0x66666666
 80032bc:	40106666 	.word	0x40106666

080032c0 <percentage>:

void percentage(float percent){
 80032c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80032c4:	ee10 0a10 	vmov	r0, s0
 80032c8:	b089      	sub	sp, #36	@ 0x24
	ssd1306_FillRectangle(32, 40, floor(0.63*percent+32), 56, White);
 80032ca:	f7fd f915 	bl	80004f8 <__aeabi_f2d>
 80032ce:	a3bc      	add	r3, pc, #752	@ (adr r3, 80035c0 <percentage+0x300>)
 80032d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032d4:	4606      	mov	r6, r0
 80032d6:	460f      	mov	r7, r1
 80032d8:	f7fd f966 	bl	80005a8 <__aeabi_dmul>
 80032dc:	4bb0      	ldr	r3, [pc, #704]	@ (80035a0 <percentage+0x2e0>)
 80032de:	4cb1      	ldr	r4, [pc, #708]	@ (80035a4 <percentage+0x2e4>)
 80032e0:	2200      	movs	r2, #0
 80032e2:	f7fc ffab 	bl	800023c <__adddf3>
 80032e6:	ec41 0b10 	vmov	d0, r0, r1
 80032ea:	f010 fc15 	bl	8013b18 <floor>
 80032ee:	ec51 0b10 	vmov	r0, r1, d0
 80032f2:	f7fd fc31 	bl	8000b58 <__aeabi_d2uiz>
 80032f6:	b2c5      	uxtb	r5, r0
    uint8_t x_start = ((x1<=x2) ? x1 : x2);
 80032f8:	2d20      	cmp	r5, #32
 80032fa:	46ae      	mov	lr, r5
 80032fc:	bf28      	it	cs
 80032fe:	f04f 0e20 	movcs.w	lr, #32
    uint8_t x_end   = ((x1<=x2) ? x2 : x1);
 8003302:	2d20      	cmp	r5, #32
 8003304:	bf38      	it	cc
 8003306:	2520      	movcc	r5, #32
    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 8003308:	f04f 0c28 	mov.w	ip, #40	@ 0x28
 800330c:	f10e 3aff 	add.w	sl, lr, #4294967295
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8003310:	f04f 0901 	mov.w	r9, #1
 8003314:	f04f 0880 	mov.w	r8, #128	@ 0x80
 8003318:	f00c 0007 	and.w	r0, ip, #7
 800331c:	ea4f 01dc 	mov.w	r1, ip, lsr #3
 8003320:	fa09 f000 	lsl.w	r0, r9, r0
 8003324:	fb18 a101 	smlabb	r1, r8, r1, sl
 8003328:	b2c0      	uxtb	r0, r0
 800332a:	4421      	add	r1, r4
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 800332c:	4673      	mov	r3, lr
 800332e:	e001      	b.n	8003334 <percentage+0x74>
 8003330:	061a      	lsls	r2, r3, #24
 8003332:	d407      	bmi.n	8003344 <percentage+0x84>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8003334:	f811 2f01 	ldrb.w	r2, [r1, #1]!
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 8003338:	3301      	adds	r3, #1
 800333a:	b2db      	uxtb	r3, r3
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800333c:	4302      	orrs	r2, r0
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 800333e:	429d      	cmp	r5, r3
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8003340:	700a      	strb	r2, [r1, #0]
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 8003342:	d2f5      	bcs.n	8003330 <percentage+0x70>
    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 8003344:	f10c 0c01 	add.w	ip, ip, #1
 8003348:	fa5f fc8c 	uxtb.w	ip, ip
 800334c:	f1bc 0f39 	cmp.w	ip, #57	@ 0x39
 8003350:	d1e2      	bne.n	8003318 <percentage+0x58>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8003352:	f8d4 22a0 	ldr.w	r2, [r4, #672]	@ 0x2a0
 8003356:	f8b4 32dc 	ldrh.w	r3, [r4, #732]	@ 0x2dc
 800335a:	f042 3201 	orr.w	r2, r2, #16843009	@ 0x1010101
 800335e:	f8c4 22a0 	str.w	r2, [r4, #672]	@ 0x2a0
 8003362:	f8d4 22a4 	ldr.w	r2, [r4, #676]	@ 0x2a4
 8003366:	f042 3201 	orr.w	r2, r2, #16843009	@ 0x1010101
 800336a:	f8c4 22a4 	str.w	r2, [r4, #676]	@ 0x2a4
 800336e:	f8d4 22a8 	ldr.w	r2, [r4, #680]	@ 0x2a8
 8003372:	f042 3201 	orr.w	r2, r2, #16843009	@ 0x1010101
 8003376:	f8c4 22a8 	str.w	r2, [r4, #680]	@ 0x2a8
 800337a:	f8d4 22ac 	ldr.w	r2, [r4, #684]	@ 0x2ac
 800337e:	f042 3201 	orr.w	r2, r2, #16843009	@ 0x1010101
 8003382:	f8c4 22ac 	str.w	r2, [r4, #684]	@ 0x2ac
 8003386:	f8d4 22b0 	ldr.w	r2, [r4, #688]	@ 0x2b0
 800338a:	f042 3201 	orr.w	r2, r2, #16843009	@ 0x1010101
 800338e:	f8c4 22b0 	str.w	r2, [r4, #688]	@ 0x2b0
 8003392:	f8d4 22b4 	ldr.w	r2, [r4, #692]	@ 0x2b4
 8003396:	f042 3201 	orr.w	r2, r2, #16843009	@ 0x1010101
 800339a:	f8c4 22b4 	str.w	r2, [r4, #692]	@ 0x2b4
 800339e:	f8d4 22b8 	ldr.w	r2, [r4, #696]	@ 0x2b8
 80033a2:	f042 3201 	orr.w	r2, r2, #16843009	@ 0x1010101
 80033a6:	f8c4 22b8 	str.w	r2, [r4, #696]	@ 0x2b8
 80033aa:	f8d4 22bc 	ldr.w	r2, [r4, #700]	@ 0x2bc
 80033ae:	f042 3201 	orr.w	r2, r2, #16843009	@ 0x1010101
 80033b2:	f8c4 22bc 	str.w	r2, [r4, #700]	@ 0x2bc
 80033b6:	f8d4 22c0 	ldr.w	r2, [r4, #704]	@ 0x2c0
 80033ba:	f042 3201 	orr.w	r2, r2, #16843009	@ 0x1010101
 80033be:	f8c4 22c0 	str.w	r2, [r4, #704]	@ 0x2c0
 80033c2:	f8d4 22c4 	ldr.w	r2, [r4, #708]	@ 0x2c4
 80033c6:	f042 3201 	orr.w	r2, r2, #16843009	@ 0x1010101
 80033ca:	f8c4 22c4 	str.w	r2, [r4, #708]	@ 0x2c4
 80033ce:	f8d4 22c8 	ldr.w	r2, [r4, #712]	@ 0x2c8
 80033d2:	f042 3201 	orr.w	r2, r2, #16843009	@ 0x1010101
 80033d6:	f8c4 22c8 	str.w	r2, [r4, #712]	@ 0x2c8
 80033da:	f8d4 22cc 	ldr.w	r2, [r4, #716]	@ 0x2cc
 80033de:	f042 3201 	orr.w	r2, r2, #16843009	@ 0x1010101
 80033e2:	f8c4 22cc 	str.w	r2, [r4, #716]	@ 0x2cc
 80033e6:	f8d4 22d0 	ldr.w	r2, [r4, #720]	@ 0x2d0
 80033ea:	f042 3201 	orr.w	r2, r2, #16843009	@ 0x1010101
 80033ee:	f8c4 22d0 	str.w	r2, [r4, #720]	@ 0x2d0
 80033f2:	f8d4 22d4 	ldr.w	r2, [r4, #724]	@ 0x2d4
 80033f6:	f042 3201 	orr.w	r2, r2, #16843009	@ 0x1010101
 80033fa:	f8c4 22d4 	str.w	r2, [r4, #724]	@ 0x2d4
 80033fe:	f8d4 22d8 	ldr.w	r2, [r4, #728]	@ 0x2d8
 8003402:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003406:	f042 3201 	orr.w	r2, r2, #16843009	@ 0x1010101
 800340a:	f043 0301 	orr.w	r3, r3, #1
 800340e:	f8c4 22d8 	str.w	r2, [r4, #728]	@ 0x2d8
 8003412:	f894 22de 	ldrb.w	r2, [r4, #734]	@ 0x2de
 8003416:	f8a4 32dc 	strh.w	r3, [r4, #732]	@ 0x2dc
 800341a:	f894 33df 	ldrb.w	r3, [r4, #991]	@ 0x3df
 800341e:	f042 0201 	orr.w	r2, r2, #1
 8003422:	f043 0301 	orr.w	r3, r3, #1
 8003426:	f884 22de 	strb.w	r2, [r4, #734]	@ 0x2de
 800342a:	f894 23a0 	ldrb.w	r2, [r4, #928]	@ 0x3a0
 800342e:	f884 33df 	strb.w	r3, [r4, #991]	@ 0x3df
 8003432:	4b5d      	ldr	r3, [pc, #372]	@ (80035a8 <percentage+0x2e8>)
 8003434:	21ff      	movs	r1, #255	@ 0xff
 8003436:	f042 0201 	orr.w	r2, r2, #1
 800343a:	f884 12df 	strb.w	r1, [r4, #735]	@ 0x2df
 800343e:	f884 135f 	strb.w	r1, [r4, #863]	@ 0x35f
 8003442:	f884 23a0 	strb.w	r2, [r4, #928]	@ 0x3a0
 8003446:	f1a3 013f 	sub.w	r1, r3, #63	@ 0x3f
 800344a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800344e:	f042 0201 	orr.w	r2, r2, #1
    while((x1 != x2) || (y1 != y2)) {
 8003452:	4299      	cmp	r1, r3
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8003454:	701a      	strb	r2, [r3, #0]
    while((x1 != x2) || (y1 != y2)) {
 8003456:	d1f8      	bne.n	800344a <percentage+0x18a>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8003458:	f894 33a0 	ldrb.w	r3, [r4, #928]	@ 0x3a0
	ssd1306_DrawRectangle(32, 40, 95, 56, White);
	snprintf((char  *)bufferscreen,20,"%0.2f %%",(float) percent);
 800345c:	4d53      	ldr	r5, [pc, #332]	@ (80035ac <percentage+0x2ec>)
 800345e:	4a54      	ldr	r2, [pc, #336]	@ (80035b0 <percentage+0x2f0>)
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8003460:	f043 0301 	orr.w	r3, r3, #1
 8003464:	21ff      	movs	r1, #255	@ 0xff
	snprintf((char  *)bufferscreen,20,"%0.2f %%",(float) percent);
 8003466:	e9cd 6700 	strd	r6, r7, [sp]
 800346a:	4628      	mov	r0, r5
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800346c:	f884 33a0 	strb.w	r3, [r4, #928]	@ 0x3a0
 8003470:	f884 1320 	strb.w	r1, [r4, #800]	@ 0x320
 8003474:	f884 12a0 	strb.w	r1, [r4, #672]	@ 0x2a0
	snprintf((char  *)bufferscreen,20,"%0.2f %%",(float) percent);
 8003478:	2114      	movs	r1, #20
 800347a:	f00c fe09 	bl	8010090 <sniprintf>
    SSD1306.CurrentY = y;
 800347e:	4a4d      	ldr	r2, [pc, #308]	@ (80035b4 <percentage+0x2f4>)
    SSD1306.CurrentX = x;
 8003480:	494d      	ldr	r1, [pc, #308]	@ (80035b8 <percentage+0x2f8>)
    while (*str) {
 8003482:	7828      	ldrb	r0, [r5, #0]
    SSD1306.CurrentX = x;
 8003484:	4b4d      	ldr	r3, [pc, #308]	@ (80035bc <percentage+0x2fc>)
 8003486:	600b      	str	r3, [r1, #0]
	ssd1306_SetCursor(45,44);
	ssd1306_WriteString((char  *)bufferscreen,Font_6x8,White);
 8003488:	f892 b000 	ldrb.w	fp, [r2]
 800348c:	7853      	ldrb	r3, [r2, #1]
 800348e:	6851      	ldr	r1, [r2, #4]
    while (*str) {
 8003490:	2800      	cmp	r0, #0
 8003492:	d07b      	beq.n	800358c <percentage+0x2cc>
 8003494:	1e8e      	subs	r6, r1, #2
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8003496:	46b2      	mov	sl, r6
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8003498:	f04f 092d 	mov.w	r9, #45	@ 0x2d
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800349c:	9107      	str	r1, [sp, #28]
 800349e:	46ac      	mov	ip, r5
 80034a0:	465e      	mov	r6, fp
    if (ch < 32 || ch > 126)
 80034a2:	3820      	subs	r0, #32
 80034a4:	b2c2      	uxtb	r2, r0
 80034a6:	2a5e      	cmp	r2, #94	@ 0x5e
 80034a8:	d86d      	bhi.n	8003586 <percentage+0x2c6>
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80034aa:	eb09 0206 	add.w	r2, r9, r6
 80034ae:	2a80      	cmp	r2, #128	@ 0x80
 80034b0:	dc69      	bgt.n	8003586 <percentage+0x2c6>
 80034b2:	2b14      	cmp	r3, #20
 80034b4:	dc67      	bgt.n	8003586 <percentage+0x2c6>
    for(i = 0; i < Font.FontHeight; i++) {
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d05f      	beq.n	800357a <percentage+0x2ba>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 80034ba:	fb03 f000 	mul.w	r0, r3, r0
 80034be:	f100 4800 	add.w	r8, r0, #2147483648	@ 0x80000000
 80034c2:	9907      	ldr	r1, [sp, #28]
        for(j = 0; j < Font.FontWidth; j++) {
 80034c4:	9206      	str	r2, [sp, #24]
 80034c6:	e9cd 3c04 	strd	r3, ip, [sp, #16]
 80034ca:	f108 38ff 	add.w	r8, r8, #4294967295
 80034ce:	4418      	add	r0, r3
 80034d0:	fa5f fb89 	uxtb.w	fp, r9
 80034d4:	eb01 0848 	add.w	r8, r1, r8, lsl #1
 80034d8:	eb0a 0740 	add.w	r7, sl, r0, lsl #1
 80034dc:	252c      	movs	r5, #44	@ 0x2c
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 80034de:	f838 0f02 	ldrh.w	r0, [r8, #2]!
        for(j = 0; j < Font.FontWidth; j++) {
 80034e2:	2e00      	cmp	r6, #0
 80034e4:	d042      	beq.n	800356c <percentage+0x2ac>
 80034e6:	2d3f      	cmp	r5, #63	@ 0x3f
 80034e8:	46d6      	mov	lr, sl
 80034ea:	d83e      	bhi.n	800356a <percentage+0x2aa>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80034ec:	f005 0907 	and.w	r9, r5, #7
 80034f0:	2301      	movs	r3, #1
 80034f2:	fa03 f909 	lsl.w	r9, r3, r9
 80034f6:	ea6f 0a09 	mvn.w	sl, r9
 80034fa:	08e9      	lsrs	r1, r5, #3
 80034fc:	fa5f fa8a 	uxtb.w	sl, sl
        for(j = 0; j < Font.FontWidth; j++) {
 8003500:	9503      	str	r5, [sp, #12]
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8003502:	01c9      	lsls	r1, r1, #7
 8003504:	fa5f f989 	uxtb.w	r9, r9
 8003508:	465b      	mov	r3, fp
        for(j = 0; j < Font.FontWidth; j++) {
 800350a:	2200      	movs	r2, #0
 800350c:	4655      	mov	r5, sl
 800350e:	e00d      	b.n	800352c <percentage+0x26c>
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8003510:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003514:	d105      	bne.n	8003522 <percentage+0x262>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8003516:	f814 a00c 	ldrb.w	sl, [r4, ip]
 800351a:	ea05 0a0a 	and.w	sl, r5, sl
 800351e:	f804 a00c 	strb.w	sl, [r4, ip]
        for(j = 0; j < Font.FontWidth; j++) {
 8003522:	3201      	adds	r2, #1
 8003524:	3301      	adds	r3, #1
 8003526:	4296      	cmp	r6, r2
 8003528:	b2db      	uxtb	r3, r3
 800352a:	d014      	beq.n	8003556 <percentage+0x296>
            if((b << j) & 0x8000)  {
 800352c:	fa00 fc02 	lsl.w	ip, r0, r2
 8003530:	f41c 4f00 	tst.w	ip, #32768	@ 0x8000
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8003534:	eb03 0c01 	add.w	ip, r3, r1
            if((b << j) & 0x8000)  {
 8003538:	d0ea      	beq.n	8003510 <percentage+0x250>
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800353a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800353e:	d1f0      	bne.n	8003522 <percentage+0x262>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8003540:	f814 a00c 	ldrb.w	sl, [r4, ip]
        for(j = 0; j < Font.FontWidth; j++) {
 8003544:	3201      	adds	r2, #1
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8003546:	ea49 0a0a 	orr.w	sl, r9, sl
        for(j = 0; j < Font.FontWidth; j++) {
 800354a:	3301      	adds	r3, #1
 800354c:	4296      	cmp	r6, r2
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800354e:	f804 a00c 	strb.w	sl, [r4, ip]
        for(j = 0; j < Font.FontWidth; j++) {
 8003552:	b2db      	uxtb	r3, r3
 8003554:	d1ea      	bne.n	800352c <percentage+0x26c>
    for(i = 0; i < Font.FontHeight; i++) {
 8003556:	9d03      	ldr	r5, [sp, #12]
 8003558:	4547      	cmp	r7, r8
 800355a:	f105 0501 	add.w	r5, r5, #1
 800355e:	b2ed      	uxtb	r5, r5
 8003560:	d017      	beq.n	8003592 <percentage+0x2d2>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8003562:	2d3f      	cmp	r5, #63	@ 0x3f
 8003564:	f838 0f02 	ldrh.w	r0, [r8, #2]!
        for(j = 0; j < Font.FontWidth; j++) {
 8003568:	d9c0      	bls.n	80034ec <percentage+0x22c>
 800356a:	46f2      	mov	sl, lr
    for(i = 0; i < Font.FontHeight; i++) {
 800356c:	3501      	adds	r5, #1
 800356e:	4547      	cmp	r7, r8
 8003570:	b2ed      	uxtb	r5, r5
 8003572:	d1b4      	bne.n	80034de <percentage+0x21e>
 8003574:	e9dd 3c04 	ldrd	r3, ip, [sp, #16]
 8003578:	9a06      	ldr	r2, [sp, #24]
    while (*str) {
 800357a:	f81c 0f01 	ldrb.w	r0, [ip, #1]!
    SSD1306.CurrentX += Font.FontWidth;
 800357e:	fa1f f982 	uxth.w	r9, r2
    while (*str) {
 8003582:	2800      	cmp	r0, #0
 8003584:	d18d      	bne.n	80034a2 <percentage+0x1e2>
 8003586:	4b0c      	ldr	r3, [pc, #48]	@ (80035b8 <percentage+0x2f8>)
 8003588:	f8a3 9000 	strh.w	r9, [r3]


}
 800358c:	b009      	add	sp, #36	@ 0x24
 800358e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003592:	e9dd 3c04 	ldrd	r3, ip, [sp, #16]
 8003596:	9a06      	ldr	r2, [sp, #24]
 8003598:	46f2      	mov	sl, lr
 800359a:	e7ee      	b.n	800357a <percentage+0x2ba>
 800359c:	f3af 8000 	nop.w
 80035a0:	40400000 	.word	0x40400000
 80035a4:	20001148 	.word	0x20001148
 80035a8:	20001528 	.word	0x20001528
 80035ac:	20000690 	.word	0x20000690
 80035b0:	08015e88 	.word	0x08015e88
 80035b4:	2000002c 	.word	0x2000002c
 80035b8:	20001140 	.word	0x20001140
 80035bc:	002c002d 	.word	0x002c002d
 80035c0:	c28f5c29 	.word	0xc28f5c29
 80035c4:	3fe428f5 	.word	0x3fe428f5

080035c8 <statemachine>:
int flag_50kmh=0;
int flag_100kmh=0;
float time50kmh=0.0;
float time100kmh=0.0;

void statemachine(void){
 80035c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80035cc:	ed2d 8b04 	vpush	{d8-d9}
	switch(state){
 80035d0:	4eb0      	ldr	r6, [pc, #704]	@ (8003894 <statemachine+0x2cc>)
 80035d2:	7833      	ldrb	r3, [r6, #0]
void statemachine(void){
 80035d4:	b085      	sub	sp, #20
	switch(state){
 80035d6:	2b05      	cmp	r3, #5
 80035d8:	f200 8084 	bhi.w	80036e4 <statemachine+0x11c>
 80035dc:	e8df f013 	tbh	[pc, r3, lsl #1]
 80035e0:	00f500a0 	.word	0x00f500a0
 80035e4:	0006019a 	.word	0x0006019a
 80035e8:	008701a9 	.word	0x008701a9
									 									 									  			 	BTN_A_LONG=0;
									 									 									  	}
			  break;
		  case STATE_CHRONOMETER:

			  ssd1306_Fill(Black);
 80035ec:	2000      	movs	r0, #0
 80035ee:	f7ff f957 	bl	80028a0 <ssd1306_Fill>
			  ssd1306_SetCursor(32, 32);
 80035f2:	2120      	movs	r1, #32
 80035f4:	4608      	mov	r0, r1
 80035f6:	f7ff fc19 	bl	8002e2c <ssd1306_SetCursor>
			  ssd1306_WriteString("chrono", Font_6x8, White);
 80035fa:	4aa7      	ldr	r2, [pc, #668]	@ (8003898 <statemachine+0x2d0>)
 80035fc:	48a7      	ldr	r0, [pc, #668]	@ (800389c <statemachine+0x2d4>)
 80035fe:	ca06      	ldmia	r2, {r1, r2}
 8003600:	2301      	movs	r3, #1
 8003602:	f7ff fbf7 	bl	8002df4 <ssd1306_WriteString>
			  ssd1306_SetCursor(32,40);
 8003606:	2128      	movs	r1, #40	@ 0x28
 8003608:	2020      	movs	r0, #32
 800360a:	f7ff fc0f 	bl	8002e2c <ssd1306_SetCursor>

			  switch(chronostate){
 800360e:	49a4      	ldr	r1, [pc, #656]	@ (80038a0 <statemachine+0x2d8>)
 8003610:	780a      	ldrb	r2, [r1, #0]
 8003612:	2a01      	cmp	r2, #1
 8003614:	f000 85fb 	beq.w	800420e <statemachine+0xc46>
 8003618:	2a02      	cmp	r2, #2
 800361a:	f001 800a 	beq.w	8004632 <statemachine+0x106a>
 800361e:	2a00      	cmp	r2, #0
 8003620:	f000 87ed 	beq.w	80045fe <statemachine+0x1036>
			  }


				  break;
			  case STATE_PAUSE:
				  timehandler=calctime;
 8003624:	4b9f      	ldr	r3, [pc, #636]	@ (80038a4 <statemachine+0x2dc>)


				  break;
			  }

			  min=floor((float) calctime/60000);
 8003626:	eddf 7aa0 	vldr	s15, [pc, #640]	@ 80038a8 <statemachine+0x2e0>
 800362a:	ed93 8a00 	vldr	s16, [r3]
 800362e:	eeb8 8a48 	vcvt.f32.u32	s16, s16
 8003632:	ee68 7a27 	vmul.f32	s15, s16, s15
 8003636:	4d9d      	ldr	r5, [pc, #628]	@ (80038ac <statemachine+0x2e4>)
 8003638:	ee17 0a90 	vmov	r0, s15
 800363c:	f7fc ff5c 	bl	80004f8 <__aeabi_f2d>
 8003640:	ec41 0b10 	vmov	d0, r0, r1
 8003644:	f010 fa68 	bl	8013b18 <floor>
 8003648:	ec51 0b10 	vmov	r0, r1, d0
 800364c:	f7fd faa4 	bl	8000b98 <__aeabi_d2f>
			  seconde=(float) ((calctime-(min*60000))/1000);
 8003650:	ed9f 7a97 	vldr	s14, [pc, #604]	@ 80038b0 <statemachine+0x2e8>
 8003654:	eddf 7a97 	vldr	s15, [pc, #604]	@ 80038b4 <statemachine+0x2ec>
			  min=floor((float) calctime/60000);
 8003658:	ee08 0a90 	vmov	s17, r0
			  seconde=(float) ((calctime-(min*60000))/1000);
 800365c:	eea8 8ac7 	vfms.f32	s16, s17, s14
 8003660:	ee28 8a27 	vmul.f32	s16, s16, s15
			  snprintf((char *)bufferscreen,15, "%0.0fmin",min);
 8003664:	f7fc ff48 	bl	80004f8 <__aeabi_f2d>
 8003668:	4b93      	ldr	r3, [pc, #588]	@ (80038b8 <statemachine+0x2f0>)
			  ssd1306_WriteString((char *)bufferscreen, Font_7x10, White);
 800366a:	4c94      	ldr	r4, [pc, #592]	@ (80038bc <statemachine+0x2f4>)
			  snprintf((char *)bufferscreen,15, "%0.0fmin",min);
 800366c:	4a94      	ldr	r2, [pc, #592]	@ (80038c0 <statemachine+0x2f8>)
 800366e:	e9cd 0100 	strd	r0, r1, [sp]
 8003672:	210f      	movs	r1, #15
			  min=floor((float) calctime/60000);
 8003674:	edc3 8a00 	vstr	s17, [r3]
			  snprintf((char *)bufferscreen,15, "%0.0fmin",min);
 8003678:	4892      	ldr	r0, [pc, #584]	@ (80038c4 <statemachine+0x2fc>)
			  seconde=(float) ((calctime-(min*60000))/1000);
 800367a:	ed85 8a00 	vstr	s16, [r5]
			  snprintf((char *)bufferscreen,15, "%0.0fmin",min);
 800367e:	f00c fd07 	bl	8010090 <sniprintf>
			  ssd1306_WriteString((char *)bufferscreen, Font_7x10, White);
 8003682:	e894 0006 	ldmia.w	r4, {r1, r2}
 8003686:	2301      	movs	r3, #1
 8003688:	488e      	ldr	r0, [pc, #568]	@ (80038c4 <statemachine+0x2fc>)
 800368a:	f7ff fbb3 	bl	8002df4 <ssd1306_WriteString>
			  ssd1306_SetCursor(32, 50);
 800368e:	2132      	movs	r1, #50	@ 0x32
 8003690:	2020      	movs	r0, #32
 8003692:	f7ff fbcb 	bl	8002e2c <ssd1306_SetCursor>
			  snprintf((char *)bufferscreen,15, "%0.3fs",seconde);
 8003696:	6828      	ldr	r0, [r5, #0]
 8003698:	f7fc ff2e 	bl	80004f8 <__aeabi_f2d>
 800369c:	4a8a      	ldr	r2, [pc, #552]	@ (80038c8 <statemachine+0x300>)
 800369e:	e9cd 0100 	strd	r0, r1, [sp]
 80036a2:	210f      	movs	r1, #15
 80036a4:	4887      	ldr	r0, [pc, #540]	@ (80038c4 <statemachine+0x2fc>)
 80036a6:	f00c fcf3 	bl	8010090 <sniprintf>
			  ssd1306_WriteString((char *)bufferscreen, Font_7x10, White);
 80036aa:	e894 0006 	ldmia.w	r4, {r1, r2}


			  if(BTN_A>=1){
 80036ae:	4c87      	ldr	r4, [pc, #540]	@ (80038cc <statemachine+0x304>)
			  ssd1306_WriteString((char *)bufferscreen, Font_7x10, White);
 80036b0:	4884      	ldr	r0, [pc, #528]	@ (80038c4 <statemachine+0x2fc>)
 80036b2:	2301      	movs	r3, #1
 80036b4:	f7ff fb9e 	bl	8002df4 <ssd1306_WriteString>
			  if(BTN_A>=1){
 80036b8:	6823      	ldr	r3, [r4, #0]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	dd06      	ble.n	80036cc <statemachine+0x104>
			 	state++;
 80036be:	7833      	ldrb	r3, [r6, #0]
			 	BTN_A=0;
			 	BTN_B=0;
 80036c0:	4983      	ldr	r1, [pc, #524]	@ (80038d0 <statemachine+0x308>)
			 	BTN_A=0;
 80036c2:	2200      	movs	r2, #0
			 	state++;
 80036c4:	3301      	adds	r3, #1
 80036c6:	7033      	strb	r3, [r6, #0]
			 	BTN_A=0;
 80036c8:	6022      	str	r2, [r4, #0]
			 	BTN_B=0;
 80036ca:	600a      	str	r2, [r1, #0]
						  	state--;
						  	BTN_A=0;
						  	BTN_B=0;
						  }

		 					if(BTN_A_LONG>=1){
 80036cc:	4b81      	ldr	r3, [pc, #516]	@ (80038d4 <statemachine+0x30c>)
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	2a00      	cmp	r2, #0
 80036d2:	dd07      	ble.n	80036e4 <statemachine+0x11c>
			 								state--;
 80036d4:	7831      	ldrb	r1, [r6, #0]
			 								BTN_A=0;
			 								BTN_B=0;
 80036d6:	487e      	ldr	r0, [pc, #504]	@ (80038d0 <statemachine+0x308>)
			 								BTN_A=0;
 80036d8:	2200      	movs	r2, #0
			 								state--;
 80036da:	3901      	subs	r1, #1
			 								BTN_A=0;
 80036dc:	6022      	str	r2, [r4, #0]
			 								state--;
 80036de:	7031      	strb	r1, [r6, #0]
			 								BTN_B=0;
 80036e0:	6002      	str	r2, [r0, #0]
			 								BTN_A_LONG=0;
 80036e2:	601a      	str	r2, [r3, #0]

					  break;

	}
return ;
}
 80036e4:	b005      	add	sp, #20
 80036e6:	ecbd 8b04 	vpop	{d8-d9}
 80036ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					  ssd1306_Fill(Black);
 80036ee:	2000      	movs	r0, #0
 80036f0:	f7ff f8d6 	bl	80028a0 <ssd1306_Fill>
					  ssd1306_WriteString("0-100",Font_6x8,White);
 80036f4:	4d68      	ldr	r5, [pc, #416]	@ (8003898 <statemachine+0x2d0>)
					  switch(accelstate){
 80036f6:	4f78      	ldr	r7, [pc, #480]	@ (80038d8 <statemachine+0x310>)
					  ssd1306_SetCursor(32,32);
 80036f8:	2120      	movs	r1, #32
 80036fa:	4608      	mov	r0, r1
 80036fc:	f7ff fb96 	bl	8002e2c <ssd1306_SetCursor>
					  ssd1306_WriteString("0-100",Font_6x8,White);
 8003700:	2301      	movs	r3, #1
 8003702:	e895 0006 	ldmia.w	r5, {r1, r2}
 8003706:	4875      	ldr	r0, [pc, #468]	@ (80038dc <statemachine+0x314>)
 8003708:	f7ff fb74 	bl	8002df4 <ssd1306_WriteString>
					  switch(accelstate){
 800370c:	783b      	ldrb	r3, [r7, #0]
 800370e:	2b04      	cmp	r3, #4
 8003710:	d8e8      	bhi.n	80036e4 <statemachine+0x11c>
 8003712:	e8df f013 	tbh	[pc, r3, lsl #1]
 8003716:	0330      	.short	0x0330
 8003718:	034f0312 	.word	0x034f0312
 800371c:	024d02b7 	.word	0x024d02b7
				 if(GNSSData.fgSpeed>=vitmax){
 8003720:	4f6f      	ldr	r7, [pc, #444]	@ (80038e0 <statemachine+0x318>)
 8003722:	4c70      	ldr	r4, [pc, #448]	@ (80038e4 <statemachine+0x31c>)
		ssd1306_Fill(Black);
 8003724:	2000      	movs	r0, #0
 8003726:	f7ff f8bb 	bl	80028a0 <ssd1306_Fill>
				 if(GNSSData.fgSpeed>=vitmax){
 800372a:	ed94 8a30 	vldr	s16, [r4, #192]	@ 0xc0
 800372e:	edd7 7a00 	vldr	s15, [r7]
 8003732:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8003736:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
								 if (GNSSData.fgSpeed!=0){
 800373a:	eeb5 8a40 	vcmp.f32	s16, #0.0
									 vitmax=GNSSData.fgSpeed;
 800373e:	bfa8      	it	ge
 8003740:	ed87 8a00 	vstrge	s16, [r7]
								 if (GNSSData.fgSpeed!=0){
 8003744:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003748:	f000 8152 	beq.w	80039f0 <statemachine+0x428>
									 pace=1000/(60*GNSSData.fgSpeed);
 800374c:	eddf 7a66 	vldr	s15, [pc, #408]	@ 80038e8 <statemachine+0x320>
									 sec=(pace-floor(pace))*60;
 8003750:	eec7 7a88 	vdiv.f32	s15, s15, s16
 8003754:	ee17 0a90 	vmov	r0, s15
 8003758:	f7fc fece 	bl	80004f8 <__aeabi_f2d>
 800375c:	ec41 0b19 	vmov	d9, r0, r1
 8003760:	eeb0 0a49 	vmov.f32	s0, s18
 8003764:	eef0 0a69 	vmov.f32	s1, s19
 8003768:	f010 f9d6 	bl	8013b18 <floor>
 800376c:	ec51 0b19 	vmov	r0, r1, d9
 8003770:	ec53 2b10 	vmov	r2, r3, d0
 8003774:	f7fc fd60 	bl	8000238 <__aeabi_dsub>
 8003778:	4b5c      	ldr	r3, [pc, #368]	@ (80038ec <statemachine+0x324>)
 800377a:	2200      	movs	r2, #0
 800377c:	f7fc ff14 	bl	80005a8 <__aeabi_dmul>
 8003780:	f7fd fa0a 	bl	8000b98 <__aeabi_d2f>
 8003784:	ee08 0a10 	vmov	s16, r0
				  switch(spdstate){
 8003788:	f8df 8180 	ldr.w	r8, [pc, #384]	@ 800390c <statemachine+0x344>
 800378c:	f898 5000 	ldrb.w	r5, [r8]
 8003790:	2d01      	cmp	r5, #1
 8003792:	f001 804f 	beq.w	8004834 <statemachine+0x126c>
 8003796:	2d02      	cmp	r5, #2
 8003798:	f000 87a5 	beq.w	80046e6 <statemachine+0x111e>
 800379c:	2d00      	cmp	r5, #0
 800379e:	f000 8769 	beq.w	8004674 <statemachine+0x10ac>
				  					if(BTN_A>=1){
 80037a2:	4b4a      	ldr	r3, [pc, #296]	@ (80038cc <statemachine+0x304>)
 80037a4:	681a      	ldr	r2, [r3, #0]
 80037a6:	2a00      	cmp	r2, #0
 80037a8:	dd06      	ble.n	80037b8 <statemachine+0x1f0>
				  									 					state++;
 80037aa:	7832      	ldrb	r2, [r6, #0]
				  									 					BTN_B=0;
 80037ac:	4848      	ldr	r0, [pc, #288]	@ (80038d0 <statemachine+0x308>)
				  									 					BTN_A=0;
 80037ae:	2100      	movs	r1, #0
 80037b0:	6019      	str	r1, [r3, #0]
				  									 					state++;
 80037b2:	1c53      	adds	r3, r2, #1
 80037b4:	7033      	strb	r3, [r6, #0]
				  									 					BTN_B=0;
 80037b6:	6001      	str	r1, [r0, #0]
				  									 	 if(BTN_B_LONG>=1){
 80037b8:	4b4d      	ldr	r3, [pc, #308]	@ (80038f0 <statemachine+0x328>)
 80037ba:	681a      	ldr	r2, [r3, #0]
 80037bc:	2a00      	cmp	r2, #0
 80037be:	dd91      	ble.n	80036e4 <statemachine+0x11c>
				  									 					  							  vitmax=0;
 80037c0:	2100      	movs	r1, #0
				  									 					  							BTN_B_LONG=0;
 80037c2:	2200      	movs	r2, #0
				  									 					  							  vitmax=0;
 80037c4:	6039      	str	r1, [r7, #0]
				  									 					  							BTN_B_LONG=0;
 80037c6:	601a      	str	r2, [r3, #0]
 80037c8:	e78c      	b.n	80036e4 <statemachine+0x11c>
					  if(settimeen==0){
 80037ca:	4f4a      	ldr	r7, [pc, #296]	@ (80038f4 <statemachine+0x32c>)
					  ssd1306_Fill(Black);
 80037cc:	2000      	movs	r0, #0
 80037ce:	f7ff f867 	bl	80028a0 <ssd1306_Fill>
					  if(settimeen==0){
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	b92b      	cbnz	r3, 80037e2 <statemachine+0x21a>
						  if(GNSSData.fixType>=1){
 80037d6:	4c43      	ldr	r4, [pc, #268]	@ (80038e4 <statemachine+0x31c>)
 80037d8:	f894 3077 	ldrb.w	r3, [r4, #119]	@ 0x77
 80037dc:	2b00      	cmp	r3, #0
 80037de:	f040 810a 	bne.w	80039f6 <statemachine+0x42e>
					  switch(balisestate){
 80037e2:	f8df 812c 	ldr.w	r8, [pc, #300]	@ 8003910 <statemachine+0x348>
 80037e6:	f898 5000 	ldrb.w	r5, [r8]
 80037ea:	2d01      	cmp	r5, #1
 80037ec:	f000 857e 	beq.w	80042ec <statemachine+0xd24>
 80037f0:	2d02      	cmp	r5, #2
 80037f2:	f000 8543 	beq.w	800427c <statemachine+0xcb4>
 80037f6:	2d00      	cmp	r5, #0
 80037f8:	f47f af74 	bne.w	80036e4 <statemachine+0x11c>
						  ssd1306_SetCursor(32,32);
 80037fc:	2120      	movs	r1, #32
 80037fe:	4608      	mov	r0, r1
 8003800:	f7ff fb14 	bl	8002e2c <ssd1306_SetCursor>
						  ssd1306_WriteString("Tracker",Font_6x8,White);
 8003804:	4a24      	ldr	r2, [pc, #144]	@ (8003898 <statemachine+0x2d0>)
 8003806:	483c      	ldr	r0, [pc, #240]	@ (80038f8 <statemachine+0x330>)
						  ssd1306_WriteString((char *)bufferscreen,Font_7x10,White);
 8003808:	4c2c      	ldr	r4, [pc, #176]	@ (80038bc <statemachine+0x2f4>)
						  ssd1306_WriteString("Tracker",Font_6x8,White);
 800380a:	ca06      	ldmia	r2, {r1, r2}
 800380c:	2301      	movs	r3, #1
 800380e:	f7ff faf1 	bl	8002df4 <ssd1306_WriteString>
						  snprintf((char *)bufferscreen,50, "offset=%d",pageoffset);
 8003812:	4b3a      	ldr	r3, [pc, #232]	@ (80038fc <statemachine+0x334>)
 8003814:	4a3a      	ldr	r2, [pc, #232]	@ (8003900 <statemachine+0x338>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	482a      	ldr	r0, [pc, #168]	@ (80038c4 <statemachine+0x2fc>)
 800381a:	2132      	movs	r1, #50	@ 0x32
 800381c:	f00c fc38 	bl	8010090 <sniprintf>
						  ssd1306_SetCursor(32,42);
 8003820:	212a      	movs	r1, #42	@ 0x2a
 8003822:	2020      	movs	r0, #32
 8003824:	f7ff fb02 	bl	8002e2c <ssd1306_SetCursor>
						  ssd1306_WriteString((char *)bufferscreen,Font_7x10,White);
 8003828:	e894 0006 	ldmia.w	r4, {r1, r2}
 800382c:	2301      	movs	r3, #1
 800382e:	4825      	ldr	r0, [pc, #148]	@ (80038c4 <statemachine+0x2fc>)
 8003830:	f7ff fae0 	bl	8002df4 <ssd1306_WriteString>
						  snprintf((char *)bufferscreen,50, "page=%d",pagenumber);
 8003834:	4b33      	ldr	r3, [pc, #204]	@ (8003904 <statemachine+0x33c>)
 8003836:	4a34      	ldr	r2, [pc, #208]	@ (8003908 <statemachine+0x340>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4822      	ldr	r0, [pc, #136]	@ (80038c4 <statemachine+0x2fc>)
 800383c:	2132      	movs	r1, #50	@ 0x32
 800383e:	f00c fc27 	bl	8010090 <sniprintf>
						  ssd1306_SetCursor(32,52);
 8003842:	2134      	movs	r1, #52	@ 0x34
 8003844:	2020      	movs	r0, #32
 8003846:	f7ff faf1 	bl	8002e2c <ssd1306_SetCursor>
						  ssd1306_WriteString((char *)bufferscreen,Font_7x10,White);
 800384a:	e894 0006 	ldmia.w	r4, {r1, r2}
 800384e:	2301      	movs	r3, #1
 8003850:	481c      	ldr	r0, [pc, #112]	@ (80038c4 <statemachine+0x2fc>)
 8003852:	f7ff facf 	bl	8002df4 <ssd1306_WriteString>
						  if(BTN_B_LONG>=1){
 8003856:	4b26      	ldr	r3, [pc, #152]	@ (80038f0 <statemachine+0x328>)
 8003858:	681a      	ldr	r2, [r3, #0]
 800385a:	2a00      	cmp	r2, #0
 800385c:	f301 8041 	bgt.w	80048e2 <statemachine+0x131a>
 8003860:	4c1a      	ldr	r4, [pc, #104]	@ (80038cc <statemachine+0x304>)
						  if(BTN_A>=1){
 8003862:	6823      	ldr	r3, [r4, #0]
 8003864:	2b00      	cmp	r3, #0
 8003866:	dd07      	ble.n	8003878 <statemachine+0x2b0>
						  				  			 	state++;
 8003868:	7832      	ldrb	r2, [r6, #0]
						  				  			 	BTN_B=0;
 800386a:	4919      	ldr	r1, [pc, #100]	@ (80038d0 <statemachine+0x308>)
						  				  			 	BTN_A=0;
 800386c:	2300      	movs	r3, #0
						  				  			 	state++;
 800386e:	3201      	adds	r2, #1
						  				  			 	BTN_A=0;
 8003870:	6023      	str	r3, [r4, #0]
						  				  			 	state++;
 8003872:	7032      	strb	r2, [r6, #0]
						  				  			 	BTN_B=0;
 8003874:	600b      	str	r3, [r1, #0]
						  				  			 	settimeen=0;
 8003876:	603b      	str	r3, [r7, #0]
						  if(BTN_A_LONG>=1){
 8003878:	4b16      	ldr	r3, [pc, #88]	@ (80038d4 <statemachine+0x30c>)
 800387a:	681a      	ldr	r2, [r3, #0]
 800387c:	2a00      	cmp	r2, #0
 800387e:	f77f af31 	ble.w	80036e4 <statemachine+0x11c>
									  state--;
 8003882:	7831      	ldrb	r1, [r6, #0]
									BTN_B=0;
 8003884:	4812      	ldr	r0, [pc, #72]	@ (80038d0 <statemachine+0x308>)
									BTN_A_LONG=0;
 8003886:	2200      	movs	r2, #0
 8003888:	601a      	str	r2, [r3, #0]
									  state--;
 800388a:	1e4b      	subs	r3, r1, #1
 800388c:	7033      	strb	r3, [r6, #0]
									BTN_B=0;
 800388e:	6002      	str	r2, [r0, #0]
									settimeen=0;
 8003890:	603a      	str	r2, [r7, #0]
 8003892:	e727      	b.n	80036e4 <statemachine+0x11c>
 8003894:	20001080 	.word	0x20001080
 8003898:	2000002c 	.word	0x2000002c
 800389c:	08017f5c 	.word	0x08017f5c
 80038a0:	2000107d 	.word	0x2000107d
 80038a4:	2000063c 	.word	0x2000063c
 80038a8:	378bcf65 	.word	0x378bcf65
 80038ac:	20000648 	.word	0x20000648
 80038b0:	476a6000 	.word	0x476a6000
 80038b4:	3a83126f 	.word	0x3a83126f
 80038b8:	20000644 	.word	0x20000644
 80038bc:	20000024 	.word	0x20000024
 80038c0:	08017f64 	.word	0x08017f64
 80038c4:	20000690 	.word	0x20000690
 80038c8:	08017f70 	.word	0x08017f70
 80038cc:	20001008 	.word	0x20001008
 80038d0:	20001004 	.word	0x20001004
 80038d4:	200005f0 	.word	0x200005f0
 80038d8:	2000107a 	.word	0x2000107a
 80038dc:	08017fc4 	.word	0x08017fc4
 80038e0:	2000064c 	.word	0x2000064c
 80038e4:	20000520 	.word	0x20000520
 80038e8:	41855556 	.word	0x41855556
 80038ec:	404e0000 	.word	0x404e0000
 80038f0:	200005f4 	.word	0x200005f4
 80038f4:	20000608 	.word	0x20000608
 80038f8:	08017e00 	.word	0x08017e00
 80038fc:	200006cc 	.word	0x200006cc
 8003900:	08017e08 	.word	0x08017e08
 8003904:	200006c8 	.word	0x200006c8
 8003908:	08017e14 	.word	0x08017e14
 800390c:	2000107f 	.word	0x2000107f
 8003910:	2000107b 	.word	0x2000107b
			  switch(posstate){
 8003914:	4c8e      	ldr	r4, [pc, #568]	@ (8003b50 <statemachine+0x588>)
			  ssd1306_Fill(Black);
 8003916:	2000      	movs	r0, #0
 8003918:	f7fe ffc2 	bl	80028a0 <ssd1306_Fill>
			  switch(posstate){
 800391c:	7823      	ldrb	r3, [r4, #0]
 800391e:	2b05      	cmp	r3, #5
 8003920:	d860      	bhi.n	80039e4 <statemachine+0x41c>
 8003922:	e8df f013 	tbh	[pc, r3, lsl #1]
 8003926:	02a3      	.short	0x02a3
 8003928:	03b30431 	.word	0x03b30431
 800392c:	02fe0361 	.word	0x02fe0361
 8003930:	0011      	.short	0x0011
				  switch(usbstate){
 8003932:	4f88      	ldr	r7, [pc, #544]	@ (8003b54 <statemachine+0x58c>)
 8003934:	783b      	ldrb	r3, [r7, #0]
 8003936:	2b03      	cmp	r3, #3
 8003938:	f63f aed4 	bhi.w	80036e4 <statemachine+0x11c>
 800393c:	e8df f013 	tbh	[pc, r3, lsl #1]
 8003940:	00a200dc 	.word	0x00a200dc
 8003944:	006a0095 	.word	0x006a0095
			  			  ssd1306_Fill(Black);
 8003948:	2000      	movs	r0, #0
 800394a:	f7fe ffa9 	bl	80028a0 <ssd1306_Fill>
			  			  if(settimeen==0){
 800394e:	4b82      	ldr	r3, [pc, #520]	@ (8003b58 <statemachine+0x590>)
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	2a00      	cmp	r2, #0
 8003954:	f001 80cb 	beq.w	8004aee <statemachine+0x1526>
 8003958:	4d80      	ldr	r5, [pc, #512]	@ (8003b5c <statemachine+0x594>)
 800395a:	f8df 822c 	ldr.w	r8, [pc, #556]	@ 8003b88 <statemachine+0x5c0>
 800395e:	4f80      	ldr	r7, [pc, #512]	@ (8003b60 <statemachine+0x598>)
			  			get_time_date();
 8003960:	f7fe fd24 	bl	80023ac <get_time_date>
			  				  ssd1306_SetCursor(32, 32);
 8003964:	2120      	movs	r1, #32
 8003966:	4608      	mov	r0, r1
 8003968:	f7ff fa60 	bl	8002e2c <ssd1306_SetCursor>
			  				  ssd1306_WriteString("hr GMT:", Font_6x8, White);
 800396c:	4a7d      	ldr	r2, [pc, #500]	@ (8003b64 <statemachine+0x59c>)
 800396e:	487e      	ldr	r0, [pc, #504]	@ (8003b68 <statemachine+0x5a0>)
 8003970:	ca06      	ldmia	r2, {r1, r2}
 8003972:	2301      	movs	r3, #1
 8003974:	f7ff fa3e 	bl	8002df4 <ssd1306_WriteString>
			  				ssd1306_SetCursor(32, 42);
 8003978:	212a      	movs	r1, #42	@ 0x2a
 800397a:	2020      	movs	r0, #32
 800397c:	f7ff fa56 	bl	8002e2c <ssd1306_SetCursor>
			  				snprintf((char *)bufferscreen,15, "%02d:%02d",HR,MINUTE);
 8003980:	782b      	ldrb	r3, [r5, #0]
 8003982:	f898 2000 	ldrb.w	r2, [r8]
			  				ssd1306_WriteString((char *)bufferscreen, Font_7x10, White);
 8003986:	4d79      	ldr	r5, [pc, #484]	@ (8003b6c <statemachine+0x5a4>)
			  				snprintf((char *)bufferscreen,15, "%02d:%02d",HR,MINUTE);
 8003988:	9200      	str	r2, [sp, #0]
 800398a:	210f      	movs	r1, #15
 800398c:	4a78      	ldr	r2, [pc, #480]	@ (8003b70 <statemachine+0x5a8>)
 800398e:	4879      	ldr	r0, [pc, #484]	@ (8003b74 <statemachine+0x5ac>)
 8003990:	f00c fb7e 	bl	8010090 <sniprintf>
			  				ssd1306_WriteString((char *)bufferscreen, Font_7x10, White);
 8003994:	e895 0006 	ldmia.w	r5, {r1, r2}
 8003998:	2301      	movs	r3, #1
 800399a:	4876      	ldr	r0, [pc, #472]	@ (8003b74 <statemachine+0x5ac>)
 800399c:	f7ff fa2a 	bl	8002df4 <ssd1306_WriteString>
			  				ssd1306_SetCursor(32, 52);
 80039a0:	2134      	movs	r1, #52	@ 0x34
 80039a2:	2020      	movs	r0, #32
 80039a4:	f7ff fa42 	bl	8002e2c <ssd1306_SetCursor>
			  				snprintf((char *)bufferscreen,15, "%02d sec",SEC);
 80039a8:	783b      	ldrb	r3, [r7, #0]
 80039aa:	4a73      	ldr	r2, [pc, #460]	@ (8003b78 <statemachine+0x5b0>)
 80039ac:	4871      	ldr	r0, [pc, #452]	@ (8003b74 <statemachine+0x5ac>)
 80039ae:	210f      	movs	r1, #15
 80039b0:	f00c fb6e 	bl	8010090 <sniprintf>
			  				ssd1306_WriteString((char *)bufferscreen, Font_7x10, White);
 80039b4:	e895 0006 	ldmia.w	r5, {r1, r2}
 80039b8:	2301      	movs	r3, #1
 80039ba:	486e      	ldr	r0, [pc, #440]	@ (8003b74 <statemachine+0x5ac>)
 80039bc:	f7ff fa1a 	bl	8002df4 <ssd1306_WriteString>
			  				if(BTN_B>=1){
 80039c0:	4b6e      	ldr	r3, [pc, #440]	@ (8003b7c <statemachine+0x5b4>)
 80039c2:	681a      	ldr	r2, [r3, #0]
 80039c4:	2a00      	cmp	r2, #0
 80039c6:	dd04      	ble.n	80039d2 <statemachine+0x40a>
			  					posstate--;
 80039c8:	7822      	ldrb	r2, [r4, #0]
			  					BTN_B=0;
 80039ca:	2100      	movs	r1, #0
			  					posstate--;
 80039cc:	3a05      	subs	r2, #5
 80039ce:	7022      	strb	r2, [r4, #0]
			  					BTN_B=0;
 80039d0:	6019      	str	r1, [r3, #0]
			  				if(BTN_B_LONG>=1){
 80039d2:	4b6b      	ldr	r3, [pc, #428]	@ (8003b80 <statemachine+0x5b8>)
 80039d4:	681a      	ldr	r2, [r3, #0]
 80039d6:	2a00      	cmp	r2, #0
 80039d8:	dd04      	ble.n	80039e4 <statemachine+0x41c>
			  							  					posstate--;
 80039da:	7822      	ldrb	r2, [r4, #0]
			  							  					BTN_B_LONG=0;
 80039dc:	2100      	movs	r1, #0
			  							  					posstate--;
 80039de:	3a01      	subs	r2, #1
 80039e0:	7022      	strb	r2, [r4, #0]
			  							  					BTN_B_LONG=0;
 80039e2:	6019      	str	r1, [r3, #0]
					if(BTN_A>=1){
 80039e4:	4c67      	ldr	r4, [pc, #412]	@ (8003b84 <statemachine+0x5bc>)
 80039e6:	6823      	ldr	r3, [r4, #0]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	f73f ae68 	bgt.w	80036be <statemachine+0xf6>
 80039ee:	e66d      	b.n	80036cc <statemachine+0x104>
 80039f0:	ed9f 9b55 	vldr	d9, [pc, #340]	@ 8003b48 <statemachine+0x580>
 80039f4:	e6c8      	b.n	8003788 <statemachine+0x1c0>
							HR=GNSSData.hour;
 80039f6:	4b59      	ldr	r3, [pc, #356]	@ (8003b5c <statemachine+0x594>)
 80039f8:	f894 2074 	ldrb.w	r2, [r4, #116]	@ 0x74
 80039fc:	701a      	strb	r2, [r3, #0]
							settimeen=1;
 80039fe:	2101      	movs	r1, #1
							MINUTE=GNSSData.min;
 8003a00:	4b61      	ldr	r3, [pc, #388]	@ (8003b88 <statemachine+0x5c0>)
							settimeen=1;
 8003a02:	6039      	str	r1, [r7, #0]
							MINUTE=GNSSData.min;
 8003a04:	f894 1075 	ldrb.w	r1, [r4, #117]	@ 0x75
 8003a08:	7019      	strb	r1, [r3, #0]
							SEC=GNSSData.sec;
 8003a0a:	4b55      	ldr	r3, [pc, #340]	@ (8003b60 <statemachine+0x598>)
 8003a0c:	f894 2076 	ldrb.w	r2, [r4, #118]	@ 0x76
 8003a10:	701a      	strb	r2, [r3, #0]
 8003a12:	e6e6      	b.n	80037e2 <statemachine+0x21a>
				 						ssd1306_Fill(Black);
 8003a14:	2000      	movs	r0, #0
 8003a16:	f7fe ff43 	bl	80028a0 <ssd1306_Fill>
				 						ssd1306_SetCursor(32,40);
 8003a1a:	2128      	movs	r1, #40	@ 0x28
 8003a1c:	2020      	movs	r0, #32
 8003a1e:	f7ff fa05 	bl	8002e2c <ssd1306_SetCursor>
				 						ssd1306_WriteString("finished",Font_6x8,White);
 8003a22:	4a50      	ldr	r2, [pc, #320]	@ (8003b64 <statemachine+0x59c>)
 8003a24:	4859      	ldr	r0, [pc, #356]	@ (8003b8c <statemachine+0x5c4>)
 8003a26:	ca06      	ldmia	r2, {r1, r2}
 8003a28:	2301      	movs	r3, #1
 8003a2a:	f7ff f9e3 	bl	8002df4 <ssd1306_WriteString>
				 						HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1,GPIO_PIN_RESET);
 8003a2e:	2200      	movs	r2, #0
 8003a30:	4857      	ldr	r0, [pc, #348]	@ (8003b90 <statemachine+0x5c8>)
 8003a32:	2102      	movs	r1, #2
 8003a34:	f002 fdae 	bl	8006594 <HAL_GPIO_WritePin>
						 					if(BTN_B>=1){
 8003a38:	4b50      	ldr	r3, [pc, #320]	@ (8003b7c <statemachine+0x5b4>)
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	2a00      	cmp	r2, #0
 8003a3e:	f340 873e 	ble.w	80048be <statemachine+0x12f6>
						 						usbstate--;
 8003a42:	783a      	ldrb	r2, [r7, #0]
						 						BTN_A=0;
 8003a44:	4c4f      	ldr	r4, [pc, #316]	@ (8003b84 <statemachine+0x5bc>)
						 						BTN_B=0;
 8003a46:	2100      	movs	r1, #0
						 						usbstate--;
 8003a48:	3a03      	subs	r2, #3
 8003a4a:	703a      	strb	r2, [r7, #0]
						 						BTN_B=0;
 8003a4c:	6019      	str	r1, [r3, #0]
						 						BTN_A=0;
 8003a4e:	6021      	str	r1, [r4, #0]
						 					if(BTN_A_LONG>=1){
 8003a50:	4a50      	ldr	r2, [pc, #320]	@ (8003b94 <statemachine+0x5cc>)
 8003a52:	6811      	ldr	r1, [r2, #0]
 8003a54:	2900      	cmp	r1, #0
 8003a56:	f77f ae45 	ble.w	80036e4 <statemachine+0x11c>
						 								state--;
 8003a5a:	7831      	ldrb	r1, [r6, #0]
 8003a5c:	3901      	subs	r1, #1
 8003a5e:	7031      	strb	r1, [r6, #0]
						 								BTN_A=0;
 8003a60:	2100      	movs	r1, #0
 8003a62:	6021      	str	r1, [r4, #0]
						 								BTN_B=0;
 8003a64:	6019      	str	r1, [r3, #0]
						 								BTN_A_LONG=0;
 8003a66:	6011      	str	r1, [r2, #0]
 8003a68:	e63c      	b.n	80036e4 <statemachine+0x11c>
if(usbtransmiten==0){
 8003a6a:	4d4b      	ldr	r5, [pc, #300]	@ (8003b98 <statemachine+0x5d0>)
 8003a6c:	6828      	ldr	r0, [r5, #0]
 8003a6e:	2800      	cmp	r0, #0
 8003a70:	f001 8010 	beq.w	8004a94 <statemachine+0x14cc>
				 					if(BTN_A>=1){
 8003a74:	4c43      	ldr	r4, [pc, #268]	@ (8003b84 <statemachine+0x5bc>)
 8003a76:	6823      	ldr	r3, [r4, #0]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	f77f ae33 	ble.w	80036e4 <statemachine+0x11c>
				 					BTN_A=0;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	6023      	str	r3, [r4, #0]
 8003a82:	e62f      	b.n	80036e4 <statemachine+0x11c>
				 					 ssd1306_Fill(Black);
 8003a84:	2000      	movs	r0, #0
 8003a86:	f7fe ff0b 	bl	80028a0 <ssd1306_Fill>
				 									  ssd1306_WriteString("usb",Font_6x8,White);
 8003a8a:	4d36      	ldr	r5, [pc, #216]	@ (8003b64 <statemachine+0x59c>)
				 					if(erasedisplay==1){
 8003a8c:	f8df b11c 	ldr.w	fp, [pc, #284]	@ 8003bac <statemachine+0x5e4>
				 									  ssd1306_SetCursor(32,32);
 8003a90:	2120      	movs	r1, #32
 8003a92:	4608      	mov	r0, r1
 8003a94:	f7ff f9ca 	bl	8002e2c <ssd1306_SetCursor>
				 									  ssd1306_WriteString("usb",Font_6x8,White);
 8003a98:	e895 0006 	ldmia.w	r5, {r1, r2}
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	483f      	ldr	r0, [pc, #252]	@ (8003b9c <statemachine+0x5d4>)
 8003aa0:	f7ff f9a8 	bl	8002df4 <ssd1306_WriteString>
				 					 ssd1306_SetCursor(32,40);
 8003aa4:	2128      	movs	r1, #40	@ 0x28
 8003aa6:	2020      	movs	r0, #32
 8003aa8:	f7ff f9c0 	bl	8002e2c <ssd1306_SetCursor>
				 					ssd1306_WriteString("Push A",Font_6x8,White);
 8003aac:	e895 0006 	ldmia.w	r5, {r1, r2}
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	483b      	ldr	r0, [pc, #236]	@ (8003ba0 <statemachine+0x5d8>)
 8003ab4:	f7ff f99e 	bl	8002df4 <ssd1306_WriteString>
				 					ssd1306_SetCursor(32,48);
 8003ab8:	2130      	movs	r1, #48	@ 0x30
 8003aba:	2020      	movs	r0, #32
 8003abc:	f7ff f9b6 	bl	8002e2c <ssd1306_SetCursor>
				 					ssd1306_WriteString("to erase",Font_6x8,White);
 8003ac0:	e895 0006 	ldmia.w	r5, {r1, r2}
 8003ac4:	4837      	ldr	r0, [pc, #220]	@ (8003ba4 <statemachine+0x5dc>)
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	f7ff f994 	bl	8002df4 <ssd1306_WriteString>
				 					if(erasedisplay==1){
 8003acc:	f8db 4000 	ldr.w	r4, [fp]
 8003ad0:	2c01      	cmp	r4, #1
 8003ad2:	f001 8069 	beq.w	8004ba8 <statemachine+0x15e0>
				 					if(BTN_A>=1){
 8003ad6:	4c2b      	ldr	r4, [pc, #172]	@ (8003b84 <statemachine+0x5bc>)
 8003ad8:	6823      	ldr	r3, [r4, #0]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	f300 871f 	bgt.w	800491e <statemachine+0x1356>
				 					if(BTN_B>=1){
 8003ae0:	4926      	ldr	r1, [pc, #152]	@ (8003b7c <statemachine+0x5b4>)
 8003ae2:	680b      	ldr	r3, [r1, #0]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	f77f adfd 	ble.w	80036e4 <statemachine+0x11c>
					 						usbstate++;
 8003aea:	783b      	ldrb	r3, [r7, #0]
					 						  BTN_B=0;
 8003aec:	2200      	movs	r2, #0
					 						usbstate++;
 8003aee:	3301      	adds	r3, #1
 8003af0:	703b      	strb	r3, [r7, #0]
					 						  BTN_B=0;
 8003af2:	600a      	str	r2, [r1, #0]
					 						  BTN_A=0;
 8003af4:	6022      	str	r2, [r4, #0]
 8003af6:	e5f5      	b.n	80036e4 <statemachine+0x11c>
				 					 ssd1306_Fill(Black);
 8003af8:	2000      	movs	r0, #0
 8003afa:	f7fe fed1 	bl	80028a0 <ssd1306_Fill>
				 									  ssd1306_WriteString("usb",Font_6x8,White);
 8003afe:	4c19      	ldr	r4, [pc, #100]	@ (8003b64 <statemachine+0x59c>)
				 									  ssd1306_SetCursor(32,32);
 8003b00:	2120      	movs	r1, #32
 8003b02:	4608      	mov	r0, r1
 8003b04:	f7ff f992 	bl	8002e2c <ssd1306_SetCursor>
				 									  ssd1306_WriteString("usb",Font_6x8,White);
 8003b08:	e894 0006 	ldmia.w	r4, {r1, r2}
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	4823      	ldr	r0, [pc, #140]	@ (8003b9c <statemachine+0x5d4>)
 8003b10:	f7ff f970 	bl	8002df4 <ssd1306_WriteString>
				 					  ssd1306_SetCursor(32,40);
 8003b14:	2128      	movs	r1, #40	@ 0x28
 8003b16:	2020      	movs	r0, #32
 8003b18:	f7ff f988 	bl	8002e2c <ssd1306_SetCursor>
				 					  ssd1306_WriteString("do nothing",Font_6x8,White);
 8003b1c:	e894 0006 	ldmia.w	r4, {r1, r2}
 8003b20:	2301      	movs	r3, #1
 8003b22:	4821      	ldr	r0, [pc, #132]	@ (8003ba8 <statemachine+0x5e0>)
 8003b24:	f7ff f966 	bl	8002df4 <ssd1306_WriteString>
				 					  usbtransmiten=0;
 8003b28:	491b      	ldr	r1, [pc, #108]	@ (8003b98 <statemachine+0x5d0>)
				 					  if(BTN_B>=1){
 8003b2a:	4b14      	ldr	r3, [pc, #80]	@ (8003b7c <statemachine+0x5b4>)
				 					  usbtransmiten=0;
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	600a      	str	r2, [r1, #0]
				 					  if(BTN_B>=1){
 8003b30:	6819      	ldr	r1, [r3, #0]
 8003b32:	4291      	cmp	r1, r2
 8003b34:	f340 86b7 	ble.w	80048a6 <statemachine+0x12de>
				 						  usbstate++;
 8003b38:	7839      	ldrb	r1, [r7, #0]
				 						  BTN_A=0;
 8003b3a:	4c12      	ldr	r4, [pc, #72]	@ (8003b84 <statemachine+0x5bc>)
				 						  BTN_B=0;
 8003b3c:	601a      	str	r2, [r3, #0]
				 						  usbstate++;
 8003b3e:	3101      	adds	r1, #1
 8003b40:	7039      	strb	r1, [r7, #0]
				 						  BTN_A=0;
 8003b42:	6022      	str	r2, [r4, #0]
				 					 if(BTN_A>=1){
 8003b44:	e784      	b.n	8003a50 <statemachine+0x488>
 8003b46:	bf00      	nop
 8003b48:	00000000 	.word	0x00000000
 8003b4c:	4058c000 	.word	0x4058c000
 8003b50:	2000107e 	.word	0x2000107e
 8003b54:	2000107c 	.word	0x2000107c
 8003b58:	20000608 	.word	0x20000608
 8003b5c:	2000060d 	.word	0x2000060d
 8003b60:	2000060e 	.word	0x2000060e
 8003b64:	2000002c 	.word	0x2000002c
 8003b68:	08017f3c 	.word	0x08017f3c
 8003b6c:	20000024 	.word	0x20000024
 8003b70:	08017f44 	.word	0x08017f44
 8003b74:	20000690 	.word	0x20000690
 8003b78:	08017f50 	.word	0x08017f50
 8003b7c:	20001004 	.word	0x20001004
 8003b80:	200005f4 	.word	0x200005f4
 8003b84:	20001008 	.word	0x20001008
 8003b88:	2000060c 	.word	0x2000060c
 8003b8c:	08017fb8 	.word	0x08017fb8
 8003b90:	48000400 	.word	0x48000400
 8003b94:	200005f0 	.word	0x200005f0
 8003b98:	20000628 	.word	0x20000628
 8003b9c:	08017f78 	.word	0x08017f78
 8003ba0:	08017f88 	.word	0x08017f88
 8003ba4:	08017f90 	.word	0x08017f90
 8003ba8:	08017f7c 	.word	0x08017f7c
 8003bac:	2000062c 	.word	0x2000062c
						  ssd1306_Fill(Black);
 8003bb0:	2000      	movs	r0, #0
 8003bb2:	f7fe fe75 	bl	80028a0 <ssd1306_Fill>
						 ssd1306_SetCursor(32,32);
 8003bb6:	2120      	movs	r1, #32
 8003bb8:	4608      	mov	r0, r1
 8003bba:	f7ff f937 	bl	8002e2c <ssd1306_SetCursor>
						 snprintf((char *)bufferscreen,15, "%0.1fs",time50kmh);
 8003bbe:	f8df 927c 	ldr.w	r9, [pc, #636]	@ 8003e3c <statemachine+0x874>
						 ssd1306_WriteString("0-50kmh",Font_6x8,White);
 8003bc2:	4893      	ldr	r0, [pc, #588]	@ (8003e10 <statemachine+0x848>)
						 snprintf((char *)bufferscreen,15, "%0.1fs",time100kmh);
 8003bc4:	f8df 82a0 	ldr.w	r8, [pc, #672]	@ 8003e68 <statemachine+0x8a0>
						 if((BTN_A>=1)||(BTN_B>=1)||(BTN_A_LONG>=1)){
 8003bc8:	4c92      	ldr	r4, [pc, #584]	@ (8003e14 <statemachine+0x84c>)
						 ssd1306_WriteString("0-50kmh",Font_6x8,White);
 8003bca:	e895 0006 	ldmia.w	r5, {r1, r2}
 8003bce:	2301      	movs	r3, #1
 8003bd0:	f7ff f910 	bl	8002df4 <ssd1306_WriteString>
						 ssd1306_SetCursor(32,40);
 8003bd4:	2128      	movs	r1, #40	@ 0x28
 8003bd6:	2020      	movs	r0, #32
 8003bd8:	f7ff f928 	bl	8002e2c <ssd1306_SetCursor>
						 snprintf((char *)bufferscreen,15, "%0.1fs",time50kmh);
 8003bdc:	f8d9 0000 	ldr.w	r0, [r9]
 8003be0:	f7fc fc8a 	bl	80004f8 <__aeabi_f2d>
 8003be4:	4a8c      	ldr	r2, [pc, #560]	@ (8003e18 <statemachine+0x850>)
 8003be6:	e9cd 0100 	strd	r0, r1, [sp]
 8003bea:	210f      	movs	r1, #15
 8003bec:	488b      	ldr	r0, [pc, #556]	@ (8003e1c <statemachine+0x854>)
 8003bee:	f00c fa4f 	bl	8010090 <sniprintf>
						 ssd1306_WriteString((char *)bufferscreen,Font_6x8,White);
 8003bf2:	e895 0006 	ldmia.w	r5, {r1, r2}
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	4888      	ldr	r0, [pc, #544]	@ (8003e1c <statemachine+0x854>)
 8003bfa:	f7ff f8fb 	bl	8002df4 <ssd1306_WriteString>
						 ssd1306_SetCursor(32,48);
 8003bfe:	2130      	movs	r1, #48	@ 0x30
 8003c00:	2020      	movs	r0, #32
 8003c02:	f7ff f913 	bl	8002e2c <ssd1306_SetCursor>
						 ssd1306_WriteString("0-100kmh",Font_6x8,White);
 8003c06:	e895 0006 	ldmia.w	r5, {r1, r2}
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	4884      	ldr	r0, [pc, #528]	@ (8003e20 <statemachine+0x858>)
 8003c0e:	f7ff f8f1 	bl	8002df4 <ssd1306_WriteString>
						 ssd1306_SetCursor(32,56);
 8003c12:	2138      	movs	r1, #56	@ 0x38
 8003c14:	2020      	movs	r0, #32
 8003c16:	f7ff f909 	bl	8002e2c <ssd1306_SetCursor>
						 snprintf((char *)bufferscreen,15, "%0.1fs",time100kmh);
 8003c1a:	f8d8 0000 	ldr.w	r0, [r8]
 8003c1e:	f7fc fc6b 	bl	80004f8 <__aeabi_f2d>
 8003c22:	4a7d      	ldr	r2, [pc, #500]	@ (8003e18 <statemachine+0x850>)
 8003c24:	e9cd 0100 	strd	r0, r1, [sp]
 8003c28:	210f      	movs	r1, #15
 8003c2a:	487c      	ldr	r0, [pc, #496]	@ (8003e1c <statemachine+0x854>)
 8003c2c:	f00c fa30 	bl	8010090 <sniprintf>
						 ssd1306_WriteString((char *)bufferscreen,Font_6x8,White);
 8003c30:	2301      	movs	r3, #1
 8003c32:	e895 0006 	ldmia.w	r5, {r1, r2}
 8003c36:	4879      	ldr	r0, [pc, #484]	@ (8003e1c <statemachine+0x854>)
 8003c38:	f7ff f8dc 	bl	8002df4 <ssd1306_WriteString>
						 if((BTN_A>=1)||(BTN_B>=1)||(BTN_A_LONG>=1)){
 8003c3c:	6823      	ldr	r3, [r4, #0]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	f340 86d9 	ble.w	80049f6 <statemachine+0x142e>
							 time50kmh=0.0;
 8003c44:	2300      	movs	r3, #0
		 					if(BTN_A_LONG>=1){
 8003c46:	4877      	ldr	r0, [pc, #476]	@ (8003e24 <statemachine+0x85c>)
							 flag_50kmh=0;
 8003c48:	f8df e1e8 	ldr.w	lr, [pc, #488]	@ 8003e34 <statemachine+0x86c>
							 flag_100kmh=0;
 8003c4c:	4d76      	ldr	r5, [pc, #472]	@ (8003e28 <statemachine+0x860>)
							 time50kmh=0.0;
 8003c4e:	f8c9 3000 	str.w	r3, [r9]
							 time100kmh=0.0;
 8003c52:	f8c8 3000 	str.w	r3, [r8]
						  	BTN_B=0;
 8003c56:	4b75      	ldr	r3, [pc, #468]	@ (8003e2c <statemachine+0x864>)
						  	state--;
 8003c58:	7832      	ldrb	r2, [r6, #0]
							 flag_50kmh=0;
 8003c5a:	2100      	movs	r1, #0
 8003c5c:	f8ce 1000 	str.w	r1, [lr]
							 flag_100kmh=0;
 8003c60:	6029      	str	r1, [r5, #0]
							 accelstate=WAITFORGPS;
 8003c62:	7039      	strb	r1, [r7, #0]
						  	BTN_A=0;
 8003c64:	6021      	str	r1, [r4, #0]
						  	BTN_B=0;
 8003c66:	6019      	str	r1, [r3, #0]
		 					if(BTN_A_LONG>=1){
 8003c68:	6801      	ldr	r1, [r0, #0]
						  	state--;
 8003c6a:	3a05      	subs	r2, #5
 8003c6c:	b2d2      	uxtb	r2, r2
		 					if(BTN_A_LONG>=1){
 8003c6e:	2900      	cmp	r1, #0
						  	state--;
 8003c70:	7032      	strb	r2, [r6, #0]
		 					if(BTN_A_LONG>=1){
 8003c72:	f77f ad37 	ble.w	80036e4 <statemachine+0x11c>
			 								state--;
 8003c76:	3a01      	subs	r2, #1
 8003c78:	7032      	strb	r2, [r6, #0]
			 								BTN_A=0;
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	6022      	str	r2, [r4, #0]
			 								BTN_B=0;
 8003c7e:	601a      	str	r2, [r3, #0]
			 								BTN_A_LONG=0;
 8003c80:	6002      	str	r2, [r0, #0]
		 					if(BTN_B>=1){
 8003c82:	e52f      	b.n	80036e4 <statemachine+0x11c>
						  if(((GNSSData.fgSpeed*3.6)>=50.0)&&(flag_50kmh==0)){
 8003c84:	4c6a      	ldr	r4, [pc, #424]	@ (8003e30 <statemachine+0x868>)
 8003c86:	f8d4 00c0 	ldr.w	r0, [r4, #192]	@ 0xc0
 8003c8a:	f7fc fc35 	bl	80004f8 <__aeabi_f2d>
 8003c8e:	a358      	add	r3, pc, #352	@ (adr r3, 8003df0 <statemachine+0x828>)
 8003c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c94:	4680      	mov	r8, r0
 8003c96:	4689      	mov	r9, r1
 8003c98:	f7fc ff0c 	bl	8000ab4 <__aeabi_dcmpge>
 8003c9c:	b190      	cbz	r0, 8003cc4 <statemachine+0x6fc>
 8003c9e:	4d65      	ldr	r5, [pc, #404]	@ (8003e34 <statemachine+0x86c>)
 8003ca0:	682b      	ldr	r3, [r5, #0]
 8003ca2:	b97b      	cbnz	r3, 8003cc4 <statemachine+0x6fc>
							  time50kmh=(float)(htim16.Instance->CNT/1000.0);
 8003ca4:	4b64      	ldr	r3, [pc, #400]	@ (8003e38 <statemachine+0x870>)
 8003ca6:	4e65      	ldr	r6, [pc, #404]	@ (8003e3c <statemachine+0x874>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8003cac:	f7fc fc02 	bl	80004b4 <__aeabi_ui2d>
 8003cb0:	a351      	add	r3, pc, #324	@ (adr r3, 8003df8 <statemachine+0x830>)
 8003cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cb6:	f7fc fc77 	bl	80005a8 <__aeabi_dmul>
 8003cba:	f7fc ff6d 	bl	8000b98 <__aeabi_d2f>
							  flag_50kmh=1;
 8003cbe:	2301      	movs	r3, #1
							  time50kmh=(float)(htim16.Instance->CNT/1000.0);
 8003cc0:	6030      	str	r0, [r6, #0]
							  flag_50kmh=1;
 8003cc2:	602b      	str	r3, [r5, #0]
						  if(((GNSSData.fgSpeed*3.6)>=100.0)&&(flag_100kmh==0)){
 8003cc4:	a34e      	add	r3, pc, #312	@ (adr r3, 8003e00 <statemachine+0x838>)
 8003cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cca:	4640      	mov	r0, r8
 8003ccc:	4649      	mov	r1, r9
 8003cce:	f7fc fef1 	bl	8000ab4 <__aeabi_dcmpge>
 8003cd2:	b120      	cbz	r0, 8003cde <statemachine+0x716>
 8003cd4:	4e54      	ldr	r6, [pc, #336]	@ (8003e28 <statemachine+0x860>)
 8003cd6:	6835      	ldr	r5, [r6, #0]
 8003cd8:	2d00      	cmp	r5, #0
 8003cda:	f000 87ad 	beq.w	8004c38 <statemachine+0x1670>
						  ssd1306_SetCursor(32,40);
 8003cde:	2128      	movs	r1, #40	@ 0x28
 8003ce0:	2020      	movs	r0, #32
 8003ce2:	f7ff f8a3 	bl	8002e2c <ssd1306_SetCursor>
						  snprintf((char *)bufferscreen,15, "%0.1f",GNSSData.fgSpeed*3.6);
 8003ce6:	f8d4 00c0 	ldr.w	r0, [r4, #192]	@ 0xc0
 8003cea:	f7fc fc05 	bl	80004f8 <__aeabi_f2d>
 8003cee:	a346      	add	r3, pc, #280	@ (adr r3, 8003e08 <statemachine+0x840>)
 8003cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cf4:	f7fc fc58 	bl	80005a8 <__aeabi_dmul>
 8003cf8:	4604      	mov	r4, r0
 8003cfa:	460d      	mov	r5, r1
 8003cfc:	4a50      	ldr	r2, [pc, #320]	@ (8003e40 <statemachine+0x878>)
 8003cfe:	4847      	ldr	r0, [pc, #284]	@ (8003e1c <statemachine+0x854>)
 8003d00:	210f      	movs	r1, #15
 8003d02:	e9cd 4500 	strd	r4, r5, [sp]
 8003d06:	f00c f9c3 	bl	8010090 <sniprintf>
						  ssd1306_WriteString((char *)bufferscreen,Font_16x24,White);
 8003d0a:	4b4e      	ldr	r3, [pc, #312]	@ (8003e44 <statemachine+0x87c>)
 8003d0c:	4843      	ldr	r0, [pc, #268]	@ (8003e1c <statemachine+0x854>)
 8003d0e:	e893 0006 	ldmia.w	r3, {r1, r2}
 8003d12:	2301      	movs	r3, #1
 8003d14:	f7ff f86e 	bl	8002df4 <ssd1306_WriteString>
						  if(BTN_B_LONG>=1){
 8003d18:	4b4b      	ldr	r3, [pc, #300]	@ (8003e48 <statemachine+0x880>)
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	2a00      	cmp	r2, #0
 8003d1e:	f77f ace1 	ble.w	80036e4 <statemachine+0x11c>
							  accelstate++;
 8003d22:	783a      	ldrb	r2, [r7, #0]
							  HAL_TIM_Base_Stop(&htim16);
 8003d24:	4d44      	ldr	r5, [pc, #272]	@ (8003e38 <statemachine+0x870>)
							  accelstate++;
 8003d26:	3201      	adds	r2, #1
							  BTN_B_LONG=0;
 8003d28:	2400      	movs	r4, #0
							  HAL_TIM_Base_Stop(&htim16);
 8003d2a:	4628      	mov	r0, r5
							  BTN_B_LONG=0;
 8003d2c:	601c      	str	r4, [r3, #0]
							  accelstate++;
 8003d2e:	703a      	strb	r2, [r7, #0]
							  HAL_TIM_Base_Stop(&htim16);
 8003d30:	f006 fca2 	bl	800a678 <HAL_TIM_Base_Stop>
							  htim16.Instance->CNT=0;
 8003d34:	682b      	ldr	r3, [r5, #0]
 8003d36:	625c      	str	r4, [r3, #36]	@ 0x24
 8003d38:	e4d4      	b.n	80036e4 <statemachine+0x11c>
						  timecounter++;
 8003d3a:	4d44      	ldr	r5, [pc, #272]	@ (8003e4c <statemachine+0x884>)
 8003d3c:	682b      	ldr	r3, [r5, #0]
 8003d3e:	3301      	adds	r3, #1
						  if(timecounter>=10){
 8003d40:	2b09      	cmp	r3, #9
						  timecounter++;
 8003d42:	602b      	str	r3, [r5, #0]
						  if(timecounter>=10){
 8003d44:	f340 85c8 	ble.w	80048d8 <statemachine+0x1310>
							  timecounter=0;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	602b      	str	r3, [r5, #0]
							  ssd1306_SetCursor(32,40);
 8003d4c:	2128      	movs	r1, #40	@ 0x28
 8003d4e:	2020      	movs	r0, #32
 8003d50:	f7ff f86c 	bl	8002e2c <ssd1306_SetCursor>
							  ssd1306_WriteString("Push B",Font_7x10,White);
 8003d54:	4a3e      	ldr	r2, [pc, #248]	@ (8003e50 <statemachine+0x888>)
 8003d56:	483f      	ldr	r0, [pc, #252]	@ (8003e54 <statemachine+0x88c>)
 8003d58:	ca06      	ldmia	r2, {r1, r2}
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	f7ff f84a 	bl	8002df4 <ssd1306_WriteString>
						  if(BTN_B_LONG>=1){
 8003d60:	4b39      	ldr	r3, [pc, #228]	@ (8003e48 <statemachine+0x880>)
 8003d62:	681a      	ldr	r2, [r3, #0]
 8003d64:	2a00      	cmp	r2, #0
 8003d66:	f340 8662 	ble.w	8004a2e <statemachine+0x1466>
							  accelstate++;
 8003d6a:	783a      	ldrb	r2, [r7, #0]
						  				 						BTN_B_LONG=0;
 8003d6c:	2100      	movs	r1, #0
							  accelstate++;
 8003d6e:	3201      	adds	r2, #1
 8003d70:	703a      	strb	r2, [r7, #0]
						  				 						BTN_B_LONG=0;
 8003d72:	6019      	str	r1, [r3, #0]
 8003d74:	e4b6      	b.n	80036e4 <statemachine+0x11c>
						  ssd1306_SetCursor(32,40);
 8003d76:	2128      	movs	r1, #40	@ 0x28
 8003d78:	2020      	movs	r0, #32
 8003d7a:	f7ff f857 	bl	8002e2c <ssd1306_SetCursor>
						  ssd1306_WriteString("GPS fix",Font_7x10,White);
 8003d7e:	4a34      	ldr	r2, [pc, #208]	@ (8003e50 <statemachine+0x888>)
 8003d80:	4835      	ldr	r0, [pc, #212]	@ (8003e58 <statemachine+0x890>)
 8003d82:	2301      	movs	r3, #1
 8003d84:	ca06      	ldmia	r2, {r1, r2}
 8003d86:	f7ff f835 	bl	8002df4 <ssd1306_WriteString>
						  if(GNSSData.fixType>=2){
 8003d8a:	4b29      	ldr	r3, [pc, #164]	@ (8003e30 <statemachine+0x868>)
 8003d8c:	f893 3077 	ldrb.w	r3, [r3, #119]	@ 0x77
 8003d90:	2b01      	cmp	r3, #1
 8003d92:	d902      	bls.n	8003d9a <statemachine+0x7d2>
							  accelstate++;
 8003d94:	783b      	ldrb	r3, [r7, #0]
 8003d96:	3301      	adds	r3, #1
 8003d98:	703b      	strb	r3, [r7, #0]
						  if(BTN_A>=1){
 8003d9a:	4c1e      	ldr	r4, [pc, #120]	@ (8003e14 <statemachine+0x84c>)
 8003d9c:	6823      	ldr	r3, [r4, #0]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	f77f ac94 	ble.w	80036cc <statemachine+0x104>
						  	state--;
 8003da4:	7833      	ldrb	r3, [r6, #0]
						  	BTN_B=0;
 8003da6:	4921      	ldr	r1, [pc, #132]	@ (8003e2c <statemachine+0x864>)
						  	BTN_A=0;
 8003da8:	2200      	movs	r2, #0
						  	state--;
 8003daa:	3b05      	subs	r3, #5
 8003dac:	7033      	strb	r3, [r6, #0]
						  	BTN_A=0;
 8003dae:	6022      	str	r2, [r4, #0]
						  	BTN_B=0;
 8003db0:	600a      	str	r2, [r1, #0]
 8003db2:	e48b      	b.n	80036cc <statemachine+0x104>
						  if(GNSSData.fgSpeed<=1.0){
 8003db4:	4b1e      	ldr	r3, [pc, #120]	@ (8003e30 <statemachine+0x868>)
 8003db6:	ed93 7a30 	vldr	s14, [r3, #192]	@ 0xc0
 8003dba:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8003dbe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003dc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dc6:	f240 863c 	bls.w	8004a42 <statemachine+0x147a>
							  ssd1306_SetCursor(32,40);
 8003dca:	2128      	movs	r1, #40	@ 0x28
 8003dcc:	2020      	movs	r0, #32
 8003dce:	f7ff f82d 	bl	8002e2c <ssd1306_SetCursor>
							  ssd1306_WriteString("Please stop",Font_6x8,White);
 8003dd2:	e895 0006 	ldmia.w	r5, {r1, r2}
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	4820      	ldr	r0, [pc, #128]	@ (8003e5c <statemachine+0x894>)
 8003dda:	f7ff f80b 	bl	8002df4 <ssd1306_WriteString>
							  counterforstart=0;
 8003dde:	4920      	ldr	r1, [pc, #128]	@ (8003e60 <statemachine+0x898>)
							  indexcounterforstart=0;
 8003de0:	4a20      	ldr	r2, [pc, #128]	@ (8003e64 <statemachine+0x89c>)
							  counterforstart=0;
 8003de2:	2300      	movs	r3, #0
 8003de4:	600b      	str	r3, [r1, #0]
							  indexcounterforstart=0;
 8003de6:	6013      	str	r3, [r2, #0]
 8003de8:	e47c      	b.n	80036e4 <statemachine+0x11c>
 8003dea:	bf00      	nop
 8003dec:	f3af 8000 	nop.w
 8003df0:	71c71c72 	.word	0x71c71c72
 8003df4:	402bc71c 	.word	0x402bc71c
 8003df8:	d2f1a9fc 	.word	0xd2f1a9fc
 8003dfc:	3f50624d 	.word	0x3f50624d
 8003e00:	71c71c72 	.word	0x71c71c72
 8003e04:	403bc71c 	.word	0x403bc71c
 8003e08:	cccccccd 	.word	0xcccccccd
 8003e0c:	400ccccc 	.word	0x400ccccc
 8003e10:	08017fe8 	.word	0x08017fe8
 8003e14:	20001008 	.word	0x20001008
 8003e18:	08017ff0 	.word	0x08017ff0
 8003e1c:	20000690 	.word	0x20000690
 8003e20:	08017ff8 	.word	0x08017ff8
 8003e24:	200005f0 	.word	0x200005f0
 8003e28:	20001550 	.word	0x20001550
 8003e2c:	20001004 	.word	0x20001004
 8003e30:	20000520 	.word	0x20000520
 8003e34:	20001554 	.word	0x20001554
 8003e38:	20001608 	.word	0x20001608
 8003e3c:	2000154c 	.word	0x2000154c
 8003e40:	08017dc0 	.word	0x08017dc0
 8003e44:	2000001c 	.word	0x2000001c
 8003e48:	200005f4 	.word	0x200005f4
 8003e4c:	20001560 	.word	0x20001560
 8003e50:	20000024 	.word	0x20000024
 8003e54:	08017fd4 	.word	0x08017fd4
 8003e58:	08017fcc 	.word	0x08017fcc
 8003e5c:	08017fdc 	.word	0x08017fdc
 8003e60:	2000155c 	.word	0x2000155c
 8003e64:	20001558 	.word	0x20001558
 8003e68:	20001548 	.word	0x20001548
						ssd1306_SetCursor(32, 32);
 8003e6c:	2120      	movs	r1, #32
 8003e6e:	4608      	mov	r0, r1
 8003e70:	f7fe ffdc 	bl	8002e2c <ssd1306_SetCursor>
						snprintf((char *)bufferscreen,15, "Latitude:");
 8003e74:	4bae      	ldr	r3, [pc, #696]	@ (8004130 <statemachine+0xb68>)
 8003e76:	4daf      	ldr	r5, [pc, #700]	@ (8004134 <statemachine+0xb6c>)
						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 8003e78:	4faf      	ldr	r7, [pc, #700]	@ (8004138 <statemachine+0xb70>)
						snprintf((char *)bufferscreen,15, "%0.7f",GNSSData.fLat);//pas forcement utile d'afficher 7 decimales apres la virgule, 6 donne une precision au metre ce qui est le max du gps
 8003e7a:	f8df 8308 	ldr.w	r8, [pc, #776]	@ 8004184 <statemachine+0xbbc>
						snprintf((char *)bufferscreen,15, "Latitude:");
 8003e7e:	cb03      	ldmia	r3!, {r0, r1}
 8003e80:	881b      	ldrh	r3, [r3, #0]
 8003e82:	6028      	str	r0, [r5, #0]
 8003e84:	6069      	str	r1, [r5, #4]
 8003e86:	812b      	strh	r3, [r5, #8]
						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 8003e88:	e897 0006 	ldmia.w	r7, {r1, r2}
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	4628      	mov	r0, r5
 8003e90:	f7fe ffb0 	bl	8002df4 <ssd1306_WriteString>
						snprintf((char *)bufferscreen,15, "%0.7f",GNSSData.fLat);//pas forcement utile d'afficher 7 decimales apres la virgule, 6 donne une precision au metre ce qui est le max du gps
 8003e94:	f8d8 0090 	ldr.w	r0, [r8, #144]	@ 0x90
 8003e98:	f7fc fb2e 	bl	80004f8 <__aeabi_f2d>
 8003e9c:	4aa7      	ldr	r2, [pc, #668]	@ (800413c <statemachine+0xb74>)
 8003e9e:	e9cd 0100 	strd	r0, r1, [sp]
 8003ea2:	210f      	movs	r1, #15
 8003ea4:	4628      	mov	r0, r5
 8003ea6:	f00c f8f3 	bl	8010090 <sniprintf>
						ssd1306_SetCursor(32, 40);
 8003eaa:	2128      	movs	r1, #40	@ 0x28
 8003eac:	2020      	movs	r0, #32
 8003eae:	f7fe ffbd 	bl	8002e2c <ssd1306_SetCursor>
						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 8003eb2:	e897 0006 	ldmia.w	r7, {r1, r2}
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	4628      	mov	r0, r5
 8003eba:	f7fe ff9b 	bl	8002df4 <ssd1306_WriteString>
						snprintf((char *)bufferscreen,15, "Longitude:");
 8003ebe:	4ba0      	ldr	r3, [pc, #640]	@ (8004140 <statemachine+0xb78>)
 8003ec0:	cb03      	ldmia	r3!, {r0, r1}
 8003ec2:	881a      	ldrh	r2, [r3, #0]
 8003ec4:	6028      	str	r0, [r5, #0]
 8003ec6:	789b      	ldrb	r3, [r3, #2]
 8003ec8:	6069      	str	r1, [r5, #4]
						ssd1306_SetCursor(32, 48);
 8003eca:	2020      	movs	r0, #32
 8003ecc:	2130      	movs	r1, #48	@ 0x30
						snprintf((char *)bufferscreen,15, "Longitude:");
 8003ece:	812a      	strh	r2, [r5, #8]
 8003ed0:	72ab      	strb	r3, [r5, #10]
						ssd1306_SetCursor(32, 48);
 8003ed2:	f7fe ffab 	bl	8002e2c <ssd1306_SetCursor>
						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e897 0006 	ldmia.w	r7, {r1, r2}
 8003edc:	4628      	mov	r0, r5
 8003ede:	f7fe ff89 	bl	8002df4 <ssd1306_WriteString>
						snprintf((char *)bufferscreen,15, "%0.7f",GNSSData.fLon);
 8003ee2:	f8d8 008c 	ldr.w	r0, [r8, #140]	@ 0x8c
 8003ee6:	f7fc fb07 	bl	80004f8 <__aeabi_f2d>
 8003eea:	4a94      	ldr	r2, [pc, #592]	@ (800413c <statemachine+0xb74>)
 8003eec:	e9cd 0100 	strd	r0, r1, [sp]
 8003ef0:	210f      	movs	r1, #15
 8003ef2:	4628      	mov	r0, r5
 8003ef4:	f00c f8cc 	bl	8010090 <sniprintf>
						ssd1306_SetCursor(32, 56);
 8003ef8:	2138      	movs	r1, #56	@ 0x38
 8003efa:	2020      	movs	r0, #32
 8003efc:	f7fe ff96 	bl	8002e2c <ssd1306_SetCursor>
						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 8003f00:	e897 0006 	ldmia.w	r7, {r1, r2}
 8003f04:	2301      	movs	r3, #1
 8003f06:	4628      	mov	r0, r5
 8003f08:	f7fe ff74 	bl	8002df4 <ssd1306_WriteString>
				  if(BTN_B>=1){
 8003f0c:	4b8d      	ldr	r3, [pc, #564]	@ (8004144 <statemachine+0xb7c>)
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	2a00      	cmp	r2, #0
 8003f12:	f77f ad67 	ble.w	80039e4 <statemachine+0x41c>
					  posstate++;
 8003f16:	7822      	ldrb	r2, [r4, #0]
					  BTN_B=0;
 8003f18:	2100      	movs	r1, #0
					  posstate++;
 8003f1a:	3201      	adds	r2, #1
 8003f1c:	7022      	strb	r2, [r4, #0]
					  BTN_B=0;
 8003f1e:	6019      	str	r1, [r3, #0]
 8003f20:	e560      	b.n	80039e4 <statemachine+0x41c>
				  	  	  	  	  	  	bmp581_read_precise_normal(bmp581);
 8003f22:	4b89      	ldr	r3, [pc, #548]	@ (8004148 <statemachine+0xb80>)
				  						snprintf((char *)bufferscreen,15, "baroalt:");
 8003f24:	4d83      	ldr	r5, [pc, #524]	@ (8004134 <statemachine+0xb6c>)
				  	  	  	  	  	  	bmp581_read_precise_normal(bmp581);
 8003f26:	6818      	ldr	r0, [r3, #0]
				  						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 8003f28:	4f83      	ldr	r7, [pc, #524]	@ (8004138 <statemachine+0xb70>)
				  	  	  	  	  	  	bmp581_read_precise_normal(bmp581);
 8003f2a:	f7fd fd49 	bl	80019c0 <bmp581_read_precise_normal>
				  						ssd1306_SetCursor(32, 32);
 8003f2e:	2120      	movs	r1, #32
 8003f30:	4608      	mov	r0, r1
 8003f32:	f7fe ff7b 	bl	8002e2c <ssd1306_SetCursor>
				  						snprintf((char *)bufferscreen,15, "baroalt:");
 8003f36:	4b85      	ldr	r3, [pc, #532]	@ (800414c <statemachine+0xb84>)
 8003f38:	cb03      	ldmia	r3!, {r0, r1}
 8003f3a:	781b      	ldrb	r3, [r3, #0]
 8003f3c:	6028      	str	r0, [r5, #0]
 8003f3e:	6069      	str	r1, [r5, #4]
 8003f40:	722b      	strb	r3, [r5, #8]
				  						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 8003f42:	e897 0006 	ldmia.w	r7, {r1, r2}
 8003f46:	2301      	movs	r3, #1
 8003f48:	4628      	mov	r0, r5
 8003f4a:	f7fe ff53 	bl	8002df4 <ssd1306_WriteString>
				  						snprintf((char *)bufferscreen,15, "%0.2lf m",bmpalt);//pas forcement utile d'afficher 7 decimales apres la virgule, 6 donne une precision au metre ce qui est le max du gps
 8003f4e:	4b80      	ldr	r3, [pc, #512]	@ (8004150 <statemachine+0xb88>)
 8003f50:	4a80      	ldr	r2, [pc, #512]	@ (8004154 <statemachine+0xb8c>)
 8003f52:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003f56:	e9cd 0100 	strd	r0, r1, [sp]
 8003f5a:	210f      	movs	r1, #15
 8003f5c:	4628      	mov	r0, r5
 8003f5e:	f00c f897 	bl	8010090 <sniprintf>
				  						ssd1306_SetCursor(32, 40);
 8003f62:	2128      	movs	r1, #40	@ 0x28
 8003f64:	2020      	movs	r0, #32
 8003f66:	f7fe ff61 	bl	8002e2c <ssd1306_SetCursor>
				  						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 8003f6a:	e897 0006 	ldmia.w	r7, {r1, r2}
 8003f6e:	2301      	movs	r3, #1
 8003f70:	4628      	mov	r0, r5
 8003f72:	f7fe ff3f 	bl	8002df4 <ssd1306_WriteString>
				  						snprintf((char *)bufferscreen,15, "baropress:");
 8003f76:	4b78      	ldr	r3, [pc, #480]	@ (8004158 <statemachine+0xb90>)
 8003f78:	cb03      	ldmia	r3!, {r0, r1}
 8003f7a:	881a      	ldrh	r2, [r3, #0]
 8003f7c:	6028      	str	r0, [r5, #0]
 8003f7e:	789b      	ldrb	r3, [r3, #2]
 8003f80:	6069      	str	r1, [r5, #4]
				  						ssd1306_SetCursor(32, 48);
 8003f82:	2020      	movs	r0, #32
 8003f84:	2130      	movs	r1, #48	@ 0x30
				  						snprintf((char *)bufferscreen,15, "baropress:");
 8003f86:	812a      	strh	r2, [r5, #8]
 8003f88:	72ab      	strb	r3, [r5, #10]
				  						ssd1306_SetCursor(32, 48);
 8003f8a:	f7fe ff4f 	bl	8002e2c <ssd1306_SetCursor>
				  						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 8003f8e:	e897 0006 	ldmia.w	r7, {r1, r2}
 8003f92:	2301      	movs	r3, #1
 8003f94:	4628      	mov	r0, r5
 8003f96:	f7fe ff2d 	bl	8002df4 <ssd1306_WriteString>
				  						snprintf((char *)bufferscreen,15, "%0.3lfkPa",bmppress/1000.0);
 8003f9a:	4b70      	ldr	r3, [pc, #448]	@ (800415c <statemachine+0xb94>)
 8003f9c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003fa0:	a361      	add	r3, pc, #388	@ (adr r3, 8004128 <statemachine+0xb60>)
 8003fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fa6:	f7fc faff 	bl	80005a8 <__aeabi_dmul>
 8003faa:	4a6d      	ldr	r2, [pc, #436]	@ (8004160 <statemachine+0xb98>)
 8003fac:	e9cd 0100 	strd	r0, r1, [sp]
 8003fb0:	210f      	movs	r1, #15
 8003fb2:	4628      	mov	r0, r5
 8003fb4:	f00c f86c 	bl	8010090 <sniprintf>
				  						ssd1306_SetCursor(32, 56);
 8003fb8:	2138      	movs	r1, #56	@ 0x38
 8003fba:	2020      	movs	r0, #32
 8003fbc:	f7fe ff36 	bl	8002e2c <ssd1306_SetCursor>
				  						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 8003fc0:	e897 0006 	ldmia.w	r7, {r1, r2}
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	4628      	mov	r0, r5
 8003fc8:	f7fe ff14 	bl	8002df4 <ssd1306_WriteString>
				  						HAL_Delay(200);
 8003fcc:	20c8      	movs	r0, #200	@ 0xc8
 8003fce:	f001 fbd9 	bl	8005784 <HAL_Delay>
				  if(BTN_B>=1){
 8003fd2:	4b5c      	ldr	r3, [pc, #368]	@ (8004144 <statemachine+0xb7c>)
 8003fd4:	681a      	ldr	r2, [r3, #0]
 8003fd6:	2a00      	cmp	r2, #0
 8003fd8:	f77f acfb 	ble.w	80039d2 <statemachine+0x40a>
				  					posstate++;
 8003fdc:	7822      	ldrb	r2, [r4, #0]
				  					BTN_B=0;
 8003fde:	2100      	movs	r1, #0
				  					posstate++;
 8003fe0:	3201      	adds	r2, #1
 8003fe2:	7022      	strb	r2, [r4, #0]
				  					BTN_B=0;
 8003fe4:	6019      	str	r1, [r3, #0]
				  if(BTN_B_LONG>=1){
 8003fe6:	e4f4      	b.n	80039d2 <statemachine+0x40a>
				  						ssd1306_SetCursor(32, 32);
 8003fe8:	2120      	movs	r1, #32
 8003fea:	4608      	mov	r0, r1
 8003fec:	f7fe ff1e 	bl	8002e2c <ssd1306_SetCursor>
				  						snprintf((char *)bufferscreen,15, "altitude:");
 8003ff0:	4b5c      	ldr	r3, [pc, #368]	@ (8004164 <statemachine+0xb9c>)
 8003ff2:	4d50      	ldr	r5, [pc, #320]	@ (8004134 <statemachine+0xb6c>)
				  						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 8003ff4:	4f50      	ldr	r7, [pc, #320]	@ (8004138 <statemachine+0xb70>)
				  						snprintf((char *)bufferscreen,15, "%0.2f m",GNSSData.fhMSL);//pas forcement utile d'afficher 7 decimales apres la virgule, 6 donne une precision au metre ce qui est le max du gps
 8003ff6:	f8df 818c 	ldr.w	r8, [pc, #396]	@ 8004184 <statemachine+0xbbc>
				  						snprintf((char *)bufferscreen,15, "altitude:");
 8003ffa:	cb03      	ldmia	r3!, {r0, r1}
 8003ffc:	881b      	ldrh	r3, [r3, #0]
 8003ffe:	6028      	str	r0, [r5, #0]
 8004000:	6069      	str	r1, [r5, #4]
 8004002:	812b      	strh	r3, [r5, #8]
				  						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 8004004:	e897 0006 	ldmia.w	r7, {r1, r2}
 8004008:	2301      	movs	r3, #1
 800400a:	4628      	mov	r0, r5
 800400c:	f7fe fef2 	bl	8002df4 <ssd1306_WriteString>
				  						snprintf((char *)bufferscreen,15, "%0.2f m",GNSSData.fhMSL);//pas forcement utile d'afficher 7 decimales apres la virgule, 6 donne une precision au metre ce qui est le max du gps
 8004010:	f8d8 00a4 	ldr.w	r0, [r8, #164]	@ 0xa4
 8004014:	f7fc fa70 	bl	80004f8 <__aeabi_f2d>
 8004018:	4a53      	ldr	r2, [pc, #332]	@ (8004168 <statemachine+0xba0>)
 800401a:	e9cd 0100 	strd	r0, r1, [sp]
 800401e:	210f      	movs	r1, #15
 8004020:	4628      	mov	r0, r5
 8004022:	f00c f835 	bl	8010090 <sniprintf>
				  						ssd1306_SetCursor(32, 40);
 8004026:	2128      	movs	r1, #40	@ 0x28
 8004028:	2020      	movs	r0, #32
 800402a:	f7fe feff 	bl	8002e2c <ssd1306_SetCursor>
				  						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 800402e:	e897 0006 	ldmia.w	r7, {r1, r2}
 8004032:	2301      	movs	r3, #1
 8004034:	4628      	mov	r0, r5
 8004036:	f7fe fedd 	bl	8002df4 <ssd1306_WriteString>
				  						snprintf((char *)bufferscreen,15, "Accuracy(m)");
 800403a:	4b4c      	ldr	r3, [pc, #304]	@ (800416c <statemachine+0xba4>)
 800403c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800403e:	6028      	str	r0, [r5, #0]
 8004040:	6069      	str	r1, [r5, #4]
				  						ssd1306_SetCursor(32, 48);
 8004042:	2020      	movs	r0, #32
 8004044:	2130      	movs	r1, #48	@ 0x30
				  						snprintf((char *)bufferscreen,15, "Accuracy(m)");
 8004046:	60aa      	str	r2, [r5, #8]
				  						ssd1306_SetCursor(32, 48);
 8004048:	f7fe fef0 	bl	8002e2c <ssd1306_SetCursor>
				  						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 800404c:	e897 0006 	ldmia.w	r7, {r1, r2}
 8004050:	2301      	movs	r3, #1
 8004052:	4628      	mov	r0, r5
 8004054:	f7fe fece 	bl	8002df4 <ssd1306_WriteString>
				  						snprintf((char *)bufferscreen,15, "%0.1f",GNSSData.fvACC);
 8004058:	f8d8 00b4 	ldr.w	r0, [r8, #180]	@ 0xb4
 800405c:	f7fc fa4c 	bl	80004f8 <__aeabi_f2d>
 8004060:	4a43      	ldr	r2, [pc, #268]	@ (8004170 <statemachine+0xba8>)
 8004062:	e9cd 0100 	strd	r0, r1, [sp]
 8004066:	210f      	movs	r1, #15
 8004068:	4628      	mov	r0, r5
 800406a:	f00c f811 	bl	8010090 <sniprintf>
				  						ssd1306_SetCursor(32, 56);
 800406e:	2138      	movs	r1, #56	@ 0x38
 8004070:	2020      	movs	r0, #32
 8004072:	f7fe fedb 	bl	8002e2c <ssd1306_SetCursor>
				  						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 8004076:	e897 0006 	ldmia.w	r7, {r1, r2}
 800407a:	2301      	movs	r3, #1
 800407c:	4628      	mov	r0, r5
 800407e:	f7fe feb9 	bl	8002df4 <ssd1306_WriteString>
				  if(BTN_B>=1){
 8004082:	4b30      	ldr	r3, [pc, #192]	@ (8004144 <statemachine+0xb7c>)
 8004084:	681a      	ldr	r2, [r3, #0]
 8004086:	2a00      	cmp	r2, #0
 8004088:	dca8      	bgt.n	8003fdc <statemachine+0xa14>
 800408a:	e4a2      	b.n	80039d2 <statemachine+0x40a>
			  				ssd1306_Fill(Black);
 800408c:	2000      	movs	r0, #0
 800408e:	f7fe fc07 	bl	80028a0 <ssd1306_Fill>
			  				snprintf((char *)bufferscreen,15, "Satnum");//sert a	connaitre la qualitée du fix si proche de 1 voir inférieur alors le fix est tres bon
 8004092:	4b38      	ldr	r3, [pc, #224]	@ (8004174 <statemachine+0xbac>)
 8004094:	4d27      	ldr	r5, [pc, #156]	@ (8004134 <statemachine+0xb6c>)
 8004096:	6818      	ldr	r0, [r3, #0]
			  				ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 8004098:	4f27      	ldr	r7, [pc, #156]	@ (8004138 <statemachine+0xb70>)
			  				snprintf((char *)bufferscreen,20, "%d sat",GNSSData.numSV);
 800409a:	f8df 80e8 	ldr.w	r8, [pc, #232]	@ 8004184 <statemachine+0xbbc>
			  				snprintf((char *)bufferscreen,15, "Satnum");//sert a	connaitre la qualitée du fix si proche de 1 voir inférieur alors le fix est tres bon
 800409e:	889a      	ldrh	r2, [r3, #4]
 80040a0:	6028      	str	r0, [r5, #0]
			  				ssd1306_SetCursor(32, 32);
 80040a2:	2120      	movs	r1, #32
			  				snprintf((char *)bufferscreen,15, "Satnum");//sert a	connaitre la qualitée du fix si proche de 1 voir inférieur alors le fix est tres bon
 80040a4:	799b      	ldrb	r3, [r3, #6]
 80040a6:	80aa      	strh	r2, [r5, #4]
			  				ssd1306_SetCursor(32, 32);
 80040a8:	4608      	mov	r0, r1
			  				snprintf((char *)bufferscreen,15, "Satnum");//sert a	connaitre la qualitée du fix si proche de 1 voir inférieur alors le fix est tres bon
 80040aa:	71ab      	strb	r3, [r5, #6]
			  				ssd1306_SetCursor(32, 32);
 80040ac:	f7fe febe 	bl	8002e2c <ssd1306_SetCursor>
			  				ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 80040b0:	e897 0006 	ldmia.w	r7, {r1, r2}
 80040b4:	2301      	movs	r3, #1
 80040b6:	4628      	mov	r0, r5
 80040b8:	f7fe fe9c 	bl	8002df4 <ssd1306_WriteString>
			  				snprintf((char *)bufferscreen,20, "%d sat",GNSSData.numSV);
 80040bc:	f898 3078 	ldrb.w	r3, [r8, #120]	@ 0x78
 80040c0:	4a2d      	ldr	r2, [pc, #180]	@ (8004178 <statemachine+0xbb0>)
 80040c2:	2114      	movs	r1, #20
 80040c4:	4628      	mov	r0, r5
 80040c6:	f00b ffe3 	bl	8010090 <sniprintf>
			  				ssd1306_SetCursor(32, 40);
 80040ca:	2128      	movs	r1, #40	@ 0x28
 80040cc:	2020      	movs	r0, #32
 80040ce:	f7fe fead 	bl	8002e2c <ssd1306_SetCursor>
			  				ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 80040d2:	e897 0006 	ldmia.w	r7, {r1, r2}
 80040d6:	2301      	movs	r3, #1
 80040d8:	4628      	mov	r0, r5
 80040da:	f7fe fe8b 	bl	8002df4 <ssd1306_WriteString>
			  				ssd1306_SetCursor(32, 48);
 80040de:	2130      	movs	r1, #48	@ 0x30
 80040e0:	2020      	movs	r0, #32
 80040e2:	f7fe fea3 	bl	8002e2c <ssd1306_SetCursor>
			  				snprintf((char *)bufferscreen,15,  "DateJ/M/Y");
 80040e6:	4a25      	ldr	r2, [pc, #148]	@ (800417c <statemachine+0xbb4>)
 80040e8:	ca03      	ldmia	r2!, {r0, r1}
 80040ea:	8812      	ldrh	r2, [r2, #0]
 80040ec:	6028      	str	r0, [r5, #0]
			  				ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 80040ee:	2301      	movs	r3, #1
			  				snprintf((char *)bufferscreen,15,  "DateJ/M/Y");
 80040f0:	6069      	str	r1, [r5, #4]
 80040f2:	812a      	strh	r2, [r5, #8]
			  				ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 80040f4:	4628      	mov	r0, r5
 80040f6:	e897 0006 	ldmia.w	r7, {r1, r2}
 80040fa:	f7fe fe7b 	bl	8002df4 <ssd1306_WriteString>
			  				ssd1306_SetCursor(32, 56);
 80040fe:	2138      	movs	r1, #56	@ 0x38
 8004100:	2020      	movs	r0, #32
 8004102:	f7fe fe93 	bl	8002e2c <ssd1306_SetCursor>
			  				snprintf((char *)bufferscreen,15,  "%d/%d/%d",GNSSData.day,GNSSData.month,GNSSData.year);
 8004106:	f8b8 306e 	ldrh.w	r3, [r8, #110]	@ 0x6e
 800410a:	9301      	str	r3, [sp, #4]
 800410c:	f898 3072 	ldrb.w	r3, [r8, #114]	@ 0x72
 8004110:	9300      	str	r3, [sp, #0]
 8004112:	f898 3073 	ldrb.w	r3, [r8, #115]	@ 0x73
 8004116:	4a1a      	ldr	r2, [pc, #104]	@ (8004180 <statemachine+0xbb8>)
 8004118:	210f      	movs	r1, #15
 800411a:	4628      	mov	r0, r5
 800411c:	f00b ffb8 	bl	8010090 <sniprintf>
			  				ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 8004120:	e7a9      	b.n	8004076 <statemachine+0xaae>
 8004122:	bf00      	nop
 8004124:	f3af 8000 	nop.w
 8004128:	d2f1a9fc 	.word	0xd2f1a9fc
 800412c:	3f50624d 	.word	0x3f50624d
 8004130:	08017e80 	.word	0x08017e80
 8004134:	20000690 	.word	0x20000690
 8004138:	2000002c 	.word	0x2000002c
 800413c:	08017e8c 	.word	0x08017e8c
 8004140:	08017e94 	.word	0x08017e94
 8004144:	20001004 	.word	0x20001004
 8004148:	200005e8 	.word	0x200005e8
 800414c:	08017f0c 	.word	0x08017f0c
 8004150:	20000418 	.word	0x20000418
 8004154:	08017f18 	.word	0x08017f18
 8004158:	08017f24 	.word	0x08017f24
 800415c:	20000420 	.word	0x20000420
 8004160:	08017f30 	.word	0x08017f30
 8004164:	08017eec 	.word	0x08017eec
 8004168:	08017ef8 	.word	0x08017ef8
 800416c:	08017f00 	.word	0x08017f00
 8004170:	08017dc0 	.word	0x08017dc0
 8004174:	08017ec4 	.word	0x08017ec4
 8004178:	08017ecc 	.word	0x08017ecc
 800417c:	08017ed4 	.word	0x08017ed4
 8004180:	08017ee0 	.word	0x08017ee0
 8004184:	20000520 	.word	0x20000520
				ssd1306_Fill(Black);
 8004188:	2000      	movs	r0, #0
 800418a:	f7fe fb89 	bl	80028a0 <ssd1306_Fill>
				snprintf((char *)bufferscreen,15, "hacc=%0.2fm",GNSSData.fhACC);//sert a	connaitre la qualitée du fix si proche de 1 voir inférieur alors le fix est tres bon
 800418e:	4bb4      	ldr	r3, [pc, #720]	@ (8004460 <statemachine+0xe98>)
				ssd1306_WriteString((char *)bufferscreen, Font_7x10, White);
 8004190:	4db4      	ldr	r5, [pc, #720]	@ (8004464 <statemachine+0xe9c>)
				snprintf((char *)bufferscreen,15, "hacc=%0.2fm",GNSSData.fhACC);//sert a	connaitre la qualitée du fix si proche de 1 voir inférieur alors le fix est tres bon
 8004192:	f8d3 00ac 	ldr.w	r0, [r3, #172]	@ 0xac
 8004196:	f7fc f9af 	bl	80004f8 <__aeabi_f2d>
 800419a:	4ab3      	ldr	r2, [pc, #716]	@ (8004468 <statemachine+0xea0>)
 800419c:	e9cd 0100 	strd	r0, r1, [sp]
 80041a0:	210f      	movs	r1, #15
 80041a2:	48b2      	ldr	r0, [pc, #712]	@ (800446c <statemachine+0xea4>)
 80041a4:	f00b ff74 	bl	8010090 <sniprintf>
				ssd1306_SetCursor(32, 32);
 80041a8:	2120      	movs	r1, #32
 80041aa:	4608      	mov	r0, r1
 80041ac:	f7fe fe3e 	bl	8002e2c <ssd1306_SetCursor>
				ssd1306_WriteString((char *)bufferscreen, Font_7x10, White);
 80041b0:	e895 0006 	ldmia.w	r5, {r1, r2}
 80041b4:	2301      	movs	r3, #1
 80041b6:	48ad      	ldr	r0, [pc, #692]	@ (800446c <statemachine+0xea4>)
 80041b8:	f7fe fe1c 	bl	8002df4 <ssd1306_WriteString>
				snprintf((char *)bufferscreen,20, "v=%0.2fV",vbat);
 80041bc:	4bac      	ldr	r3, [pc, #688]	@ (8004470 <statemachine+0xea8>)
 80041be:	6818      	ldr	r0, [r3, #0]
 80041c0:	f7fc f99a 	bl	80004f8 <__aeabi_f2d>
 80041c4:	4aab      	ldr	r2, [pc, #684]	@ (8004474 <statemachine+0xeac>)
 80041c6:	e9cd 0100 	strd	r0, r1, [sp]
 80041ca:	2114      	movs	r1, #20
 80041cc:	48a7      	ldr	r0, [pc, #668]	@ (800446c <statemachine+0xea4>)
 80041ce:	f00b ff5f 	bl	8010090 <sniprintf>
				ssd1306_SetCursor(32, 42);
 80041d2:	212a      	movs	r1, #42	@ 0x2a
 80041d4:	2020      	movs	r0, #32
 80041d6:	f7fe fe29 	bl	8002e2c <ssd1306_SetCursor>
				ssd1306_WriteString((char *)bufferscreen, Font_7x10, White);
 80041da:	e895 0006 	ldmia.w	r5, {r1, r2}
 80041de:	2301      	movs	r3, #1
 80041e0:	48a2      	ldr	r0, [pc, #648]	@ (800446c <statemachine+0xea4>)
 80041e2:	f7fe fe07 	bl	8002df4 <ssd1306_WriteString>
				ssd1306_SetCursor(32, 52);
 80041e6:	2134      	movs	r1, #52	@ 0x34
 80041e8:	2020      	movs	r0, #32
 80041ea:	f7fe fe1f 	bl	8002e2c <ssd1306_SetCursor>
				snprintf((char *)bufferscreen,15,  "T=%0.2fC",temp);
 80041ee:	4ba2      	ldr	r3, [pc, #648]	@ (8004478 <statemachine+0xeb0>)
 80041f0:	6818      	ldr	r0, [r3, #0]
 80041f2:	f7fc f981 	bl	80004f8 <__aeabi_f2d>
 80041f6:	4aa1      	ldr	r2, [pc, #644]	@ (800447c <statemachine+0xeb4>)
 80041f8:	e9cd 0100 	strd	r0, r1, [sp]
 80041fc:	210f      	movs	r1, #15
 80041fe:	489b      	ldr	r0, [pc, #620]	@ (800446c <statemachine+0xea4>)
 8004200:	f00b ff46 	bl	8010090 <sniprintf>
				ssd1306_WriteString((char *)bufferscreen, Font_7x10, White);
 8004204:	e895 0006 	ldmia.w	r5, {r1, r2}
 8004208:	4898      	ldr	r0, [pc, #608]	@ (800446c <statemachine+0xea4>)
 800420a:	2301      	movs	r3, #1
 800420c:	e737      	b.n	800407e <statemachine+0xab6>
				  calctime=uwTick-starttime+timehandler;
 800420e:	4b9c      	ldr	r3, [pc, #624]	@ (8004480 <statemachine+0xeb8>)
 8004210:	489c      	ldr	r0, [pc, #624]	@ (8004484 <statemachine+0xebc>)
 8004212:	4a9d      	ldr	r2, [pc, #628]	@ (8004488 <statemachine+0xec0>)
 8004214:	6800      	ldr	r0, [r0, #0]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	6812      	ldr	r2, [r2, #0]
 800421a:	4403      	add	r3, r0
 800421c:	1a9b      	subs	r3, r3, r2
 800421e:	489b      	ldr	r0, [pc, #620]	@ (800448c <statemachine+0xec4>)
				  if(BTN_B>=1){
 8004220:	4a9b      	ldr	r2, [pc, #620]	@ (8004490 <statemachine+0xec8>)
				  calctime=uwTick-starttime+timehandler;
 8004222:	6003      	str	r3, [r0, #0]
				  if(BTN_B>=1){
 8004224:	6810      	ldr	r0, [r2, #0]
			  min=floor((float) calctime/60000);
 8004226:	ee07 3a90 	vmov	s15, r3
				  if(BTN_B>=1){
 800422a:	2800      	cmp	r0, #0
			  min=floor((float) calctime/60000);
 800422c:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8004230:	eddf 7a98 	vldr	s15, [pc, #608]	@ 8004494 <statemachine+0xecc>
				  if(BTN_B>=1){
 8004234:	f77f a9fd 	ble.w	8003632 <statemachine+0x6a>
			  min=floor((float) calctime/60000);
 8004238:	ee68 7a27 	vmul.f32	s15, s16, s15
				  		chronostate++;
 800423c:	2302      	movs	r3, #2
				  		BTN_B=0;
 800423e:	2400      	movs	r4, #0
				  		chronostate++;
 8004240:	700b      	strb	r3, [r1, #0]
			  min=floor((float) calctime/60000);
 8004242:	ee17 0a90 	vmov	r0, s15
				  		BTN_B=0;
 8004246:	6014      	str	r4, [r2, #0]
			  min=floor((float) calctime/60000);
 8004248:	f7fc f956 	bl	80004f8 <__aeabi_f2d>
 800424c:	ec41 0b10 	vmov	d0, r0, r1
 8004250:	f00f fc62 	bl	8013b18 <floor>
 8004254:	ec51 0b10 	vmov	r0, r1, d0
 8004258:	f7fc fc9e 	bl	8000b98 <__aeabi_d2f>
			  seconde=(float) ((calctime-(min*60000))/1000);
 800425c:	ed9f 7a8e 	vldr	s14, [pc, #568]	@ 8004498 <statemachine+0xed0>
 8004260:	eddf 7a8e 	vldr	s15, [pc, #568]	@ 800449c <statemachine+0xed4>
 8004264:	4d8e      	ldr	r5, [pc, #568]	@ (80044a0 <statemachine+0xed8>)
			  min=floor((float) calctime/60000);
 8004266:	ee08 0a90 	vmov	s17, r0
			  seconde=(float) ((calctime-(min*60000))/1000);
 800426a:	eea8 8ac7 	vfms.f32	s16, s17, s14
 800426e:	ee28 8a27 	vmul.f32	s16, s16, s15
			  snprintf((char *)bufferscreen,15, "%0.0fmin",min);
 8004272:	f7fc f941 	bl	80004f8 <__aeabi_f2d>
 8004276:	4b8b      	ldr	r3, [pc, #556]	@ (80044a4 <statemachine+0xedc>)
 8004278:	f7ff b9f7 	b.w	800366a <statemachine+0xa2>
						  ssd1306_WriteString("fin de",Font_6x8,White);
 800427c:	4c8a      	ldr	r4, [pc, #552]	@ (80044a8 <statemachine+0xee0>)
						  ssd1306_SetCursor(32,32);
 800427e:	2120      	movs	r1, #32
 8004280:	4608      	mov	r0, r1
 8004282:	f7fe fdd3 	bl	8002e2c <ssd1306_SetCursor>
						  ssd1306_WriteString("fin de",Font_6x8,White);
 8004286:	e894 0006 	ldmia.w	r4, {r1, r2}
 800428a:	2301      	movs	r3, #1
 800428c:	4887      	ldr	r0, [pc, #540]	@ (80044ac <statemachine+0xee4>)
 800428e:	f7fe fdb1 	bl	8002df4 <ssd1306_WriteString>
						  ssd1306_SetCursor(32,42);
 8004292:	212a      	movs	r1, #42	@ 0x2a
 8004294:	2020      	movs	r0, #32
 8004296:	f7fe fdc9 	bl	8002e2c <ssd1306_SetCursor>
						  ssd1306_WriteString("memoire",Font_6x8,White);
 800429a:	e894 0006 	ldmia.w	r4, {r1, r2}
 800429e:	2301      	movs	r3, #1
 80042a0:	4883      	ldr	r0, [pc, #524]	@ (80044b0 <statemachine+0xee8>)
 80042a2:	f7fe fda7 	bl	8002df4 <ssd1306_WriteString>
						  ssd1306_SetCursor(32,52);
 80042a6:	2134      	movs	r1, #52	@ 0x34
 80042a8:	2020      	movs	r0, #32
 80042aa:	f7fe fdbf 	bl	8002e2c <ssd1306_SetCursor>
						  snprintf((char *)bufferscreen,50,"%d,%d",pageoffset,pagenumber);
 80042ae:	4a81      	ldr	r2, [pc, #516]	@ (80044b4 <statemachine+0xeec>)
 80042b0:	4b81      	ldr	r3, [pc, #516]	@ (80044b8 <statemachine+0xef0>)
 80042b2:	6812      	ldr	r2, [r2, #0]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	486d      	ldr	r0, [pc, #436]	@ (800446c <statemachine+0xea4>)
 80042b8:	9200      	str	r2, [sp, #0]
 80042ba:	2132      	movs	r1, #50	@ 0x32
 80042bc:	4a7f      	ldr	r2, [pc, #508]	@ (80044bc <statemachine+0xef4>)
 80042be:	f00b fee7 	bl	8010090 <sniprintf>
						  ssd1306_WriteString((char *)bufferscreen,Font_6x8,White);
 80042c2:	e894 0006 	ldmia.w	r4, {r1, r2}
						  if(BTN_A>=1){
 80042c6:	4c7e      	ldr	r4, [pc, #504]	@ (80044c0 <statemachine+0xef8>)
						  ssd1306_WriteString((char *)bufferscreen,Font_6x8,White);
 80042c8:	4868      	ldr	r0, [pc, #416]	@ (800446c <statemachine+0xea4>)
 80042ca:	2301      	movs	r3, #1
 80042cc:	f7fe fd92 	bl	8002df4 <ssd1306_WriteString>
						  if(BTN_A>=1){
 80042d0:	6823      	ldr	r3, [r4, #0]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	f77f a9fa 	ble.w	80036cc <statemachine+0x104>
						  				  			 	state++;
 80042d8:	7832      	ldrb	r2, [r6, #0]
						  				  			 	BTN_B=0;
 80042da:	496d      	ldr	r1, [pc, #436]	@ (8004490 <statemachine+0xec8>)
						  				  			 	BTN_A=0;
 80042dc:	2300      	movs	r3, #0
						  				  			 	state++;
 80042de:	3201      	adds	r2, #1
						  				  			 	BTN_B=0;
 80042e0:	600b      	str	r3, [r1, #0]
						  				  			 	state++;
 80042e2:	7032      	strb	r2, [r6, #0]
						  				  			 	BTN_A=0;
 80042e4:	6023      	str	r3, [r4, #0]
						  				  			settimeen=0;
 80042e6:	603b      	str	r3, [r7, #0]
						  if(BTN_A_LONG>=1){
 80042e8:	f7ff b9f0 	b.w	80036cc <statemachine+0x104>
						  ssd1306_SetCursor(32,32);
 80042ec:	2120      	movs	r1, #32
						  switch(ecranstate){
 80042ee:	4f75      	ldr	r7, [pc, #468]	@ (80044c4 <statemachine+0xefc>)
						  ssd1306_SetCursor(32,32);
 80042f0:	4608      	mov	r0, r1
 80042f2:	f7fe fd9b 	bl	8002e2c <ssd1306_SetCursor>
						  switch(ecranstate){
 80042f6:	783b      	ldrb	r3, [r7, #0]
 80042f8:	2b05      	cmp	r3, #5
 80042fa:	f200 84cb 	bhi.w	8004c94 <statemachine+0x16cc>
 80042fe:	e8df f013 	tbh	[pc, r3, lsl #1]
 8004302:	0167      	.short	0x0167
 8004304:	01180148 	.word	0x01180148
 8004308:	007f00f5 	.word	0x007f00f5
 800430c:	0006      	.short	0x0006
							  snprintf((char  *)bufferscreen,50,"%0.1f",vitmax*3.6);
 800430e:	4b6e      	ldr	r3, [pc, #440]	@ (80044c8 <statemachine+0xf00>)
							  							ssd1306_WriteString("MaxV",Font_6x8,White);
 8004310:	4d65      	ldr	r5, [pc, #404]	@ (80044a8 <statemachine+0xee0>)
							  snprintf((char  *)bufferscreen,50,"%0.1f",vitmax*3.6);
 8004312:	6818      	ldr	r0, [r3, #0]
 8004314:	f7fc f8f0 	bl	80004f8 <__aeabi_f2d>
 8004318:	a34f      	add	r3, pc, #316	@ (adr r3, 8004458 <statemachine+0xe90>)
 800431a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800431e:	f7fc f943 	bl	80005a8 <__aeabi_dmul>
 8004322:	4a6a      	ldr	r2, [pc, #424]	@ (80044cc <statemachine+0xf04>)
 8004324:	e9cd 0100 	strd	r0, r1, [sp]
 8004328:	2132      	movs	r1, #50	@ 0x32
 800432a:	4850      	ldr	r0, [pc, #320]	@ (800446c <statemachine+0xea4>)
 800432c:	f00b feb0 	bl	8010090 <sniprintf>
							  							  ssd1306_WriteString((char *)bufferscreen,Font_7x10,White);
 8004330:	4a4c      	ldr	r2, [pc, #304]	@ (8004464 <statemachine+0xe9c>)
 8004332:	484e      	ldr	r0, [pc, #312]	@ (800446c <statemachine+0xea4>)
 8004334:	ca06      	ldmia	r2, {r1, r2}
 8004336:	2301      	movs	r3, #1
 8004338:	f7fe fd5c 	bl	8002df4 <ssd1306_WriteString>
							  							ssd1306_SetCursor(32,42);
 800433c:	212a      	movs	r1, #42	@ 0x2a
 800433e:	2020      	movs	r0, #32
 8004340:	f7fe fd74 	bl	8002e2c <ssd1306_SetCursor>
							  							ssd1306_WriteString("MaxV",Font_6x8,White);
 8004344:	e895 0006 	ldmia.w	r5, {r1, r2}
 8004348:	2301      	movs	r3, #1
 800434a:	4861      	ldr	r0, [pc, #388]	@ (80044d0 <statemachine+0xf08>)
 800434c:	f7fe fd52 	bl	8002df4 <ssd1306_WriteString>
							  if(BTN_B>=1){
 8004350:	4b4f      	ldr	r3, [pc, #316]	@ (8004490 <statemachine+0xec8>)
 8004352:	681a      	ldr	r2, [r3, #0]
 8004354:	2a00      	cmp	r2, #0
 8004356:	f340 83c7 	ble.w	8004ae8 <statemachine+0x1520>
							  														ecranstate--;
 800435a:	783a      	ldrb	r2, [r7, #0]
 800435c:	3a05      	subs	r2, #5
							  													  	BTN_A=0;
 800435e:	4958      	ldr	r1, [pc, #352]	@ (80044c0 <statemachine+0xef8>)
							  														ecranstate--;
 8004360:	703a      	strb	r2, [r7, #0]
							  													  	BTN_B=0;
 8004362:	4c3f      	ldr	r4, [pc, #252]	@ (8004460 <statemachine+0xe98>)
 8004364:	2200      	movs	r2, #0
 8004366:	601a      	str	r2, [r3, #0]
							  													  	BTN_A=0;
 8004368:	600a      	str	r2, [r1, #0]
 800436a:	4e41      	ldr	r6, [pc, #260]	@ (8004470 <statemachine+0xea8>)
						 	batterygauge(vbat,79, 42,1);
 800436c:	ed96 0a00 	vldr	s0, [r6]
 8004370:	2201      	movs	r2, #1
 8004372:	212a      	movs	r1, #42	@ 0x2a
 8004374:	204f      	movs	r0, #79	@ 0x4f
 8004376:	f7fe fe07 	bl	8002f88 <batterygauge>
						 	ssd1306_SetCursor(32,52);
 800437a:	2134      	movs	r1, #52	@ 0x34
 800437c:	2020      	movs	r0, #32
 800437e:	f7fe fd55 	bl	8002e2c <ssd1306_SetCursor>
						 	snprintf((char  *)bufferscreen,50, "%0.2fV",vbat);
 8004382:	6830      	ldr	r0, [r6, #0]
 8004384:	f7fc f8b8 	bl	80004f8 <__aeabi_f2d>
 8004388:	4a52      	ldr	r2, [pc, #328]	@ (80044d4 <statemachine+0xf0c>)
 800438a:	e9cd 0100 	strd	r0, r1, [sp]
 800438e:	2132      	movs	r1, #50	@ 0x32
 8004390:	4836      	ldr	r0, [pc, #216]	@ (800446c <statemachine+0xea4>)
 8004392:	f00b fe7d 	bl	8010090 <sniprintf>
						 	ssd1306_WriteString((char *)bufferscreen,Font_6x8,White);
 8004396:	e895 0006 	ldmia.w	r5, {r1, r2}
 800439a:	2301      	movs	r3, #1
 800439c:	4833      	ldr	r0, [pc, #204]	@ (800446c <statemachine+0xea4>)
 800439e:	f7fe fd29 	bl	8002df4 <ssd1306_WriteString>
						 	ssd1306_SetCursor(65,52);
 80043a2:	2134      	movs	r1, #52	@ 0x34
 80043a4:	2041      	movs	r0, #65	@ 0x41
 80043a6:	f7fe fd41 	bl	8002e2c <ssd1306_SetCursor>
						 	snprintf((char  *)bufferscreen,50, "sat=%d",GNSSData.numSV);
 80043aa:	f894 3078 	ldrb.w	r3, [r4, #120]	@ 0x78
 80043ae:	4a4a      	ldr	r2, [pc, #296]	@ (80044d8 <statemachine+0xf10>)
 80043b0:	482e      	ldr	r0, [pc, #184]	@ (800446c <statemachine+0xea4>)
 80043b2:	2132      	movs	r1, #50	@ 0x32
 80043b4:	f00b fe6c 	bl	8010090 <sniprintf>
						 	ssd1306_WriteString((char *)bufferscreen,Font_6x8,White);
 80043b8:	e895 0006 	ldmia.w	r5, {r1, r2}
 80043bc:	2301      	movs	r3, #1
 80043be:	482b      	ldr	r0, [pc, #172]	@ (800446c <statemachine+0xea4>)
 80043c0:	f7fe fd18 	bl	8002df4 <ssd1306_WriteString>
						  if(BTN_B_LONG>=1){
 80043c4:	4b45      	ldr	r3, [pc, #276]	@ (80044dc <statemachine+0xf14>)
 80043c6:	681a      	ldr	r2, [r3, #0]
 80043c8:	2a00      	cmp	r2, #0
 80043ca:	f77f a98b 	ble.w	80036e4 <statemachine+0x11c>
						  						  balisestate--;
 80043ce:	f898 2000 	ldrb.w	r2, [r8]
						  						osThreadSuspend(BALISEHandle);
 80043d2:	4843      	ldr	r0, [pc, #268]	@ (80044e0 <statemachine+0xf18>)
						  						  BTN_A=0;
 80043d4:	493a      	ldr	r1, [pc, #232]	@ (80044c0 <statemachine+0xef8>)
						  						osThreadSuspend(BALISEHandle);
 80043d6:	6800      	ldr	r0, [r0, #0]
						  						  BTN_B_LONG=0;
 80043d8:	2400      	movs	r4, #0
 80043da:	601c      	str	r4, [r3, #0]
						  						  balisestate--;
 80043dc:	1e53      	subs	r3, r2, #1
						  						  BTN_A=0;
 80043de:	600c      	str	r4, [r1, #0]
						  						  balisestate--;
 80043e0:	f888 3000 	strb.w	r3, [r8]
						  						osThreadSuspend(BALISEHandle);
 80043e4:	f008 ff7a 	bl	800d2dc <osThreadSuspend>
						  						storeindex();
 80043e8:	f7fe f8fc 	bl	80025e4 <storeindex>
						  						HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1,GPIO_PIN_RESET);
 80043ec:	483d      	ldr	r0, [pc, #244]	@ (80044e4 <statemachine+0xf1c>)
 80043ee:	4622      	mov	r2, r4
 80043f0:	2102      	movs	r1, #2
}
 80043f2:	b005      	add	sp, #20
 80043f4:	ecbd 8b04 	vpop	{d8-d9}
 80043f8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
						  						HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1,GPIO_PIN_RESET);
 80043fc:	f002 b8ca 	b.w	8006594 <HAL_GPIO_WritePin>
							  snprintf((char  *)bufferscreen,50,"%0.1f",vbat);
 8004400:	4e1b      	ldr	r6, [pc, #108]	@ (8004470 <statemachine+0xea8>)
							  ssd1306_WriteString("Vbat(V)",Font_6x8,White);
 8004402:	4d29      	ldr	r5, [pc, #164]	@ (80044a8 <statemachine+0xee0>)
							  snprintf((char  *)bufferscreen,50,"%0.1f",vbat);
 8004404:	6830      	ldr	r0, [r6, #0]
 8004406:	f7fc f877 	bl	80004f8 <__aeabi_f2d>
 800440a:	4a30      	ldr	r2, [pc, #192]	@ (80044cc <statemachine+0xf04>)
 800440c:	e9cd 0100 	strd	r0, r1, [sp]
 8004410:	2132      	movs	r1, #50	@ 0x32
 8004412:	4816      	ldr	r0, [pc, #88]	@ (800446c <statemachine+0xea4>)
 8004414:	f00b fe3c 	bl	8010090 <sniprintf>
							  ssd1306_WriteString((char *)bufferscreen,Font_7x10,White);
 8004418:	4a12      	ldr	r2, [pc, #72]	@ (8004464 <statemachine+0xe9c>)
 800441a:	4814      	ldr	r0, [pc, #80]	@ (800446c <statemachine+0xea4>)
 800441c:	ca06      	ldmia	r2, {r1, r2}
 800441e:	2301      	movs	r3, #1
 8004420:	f7fe fce8 	bl	8002df4 <ssd1306_WriteString>
							  ssd1306_SetCursor(32,42);
 8004424:	212a      	movs	r1, #42	@ 0x2a
 8004426:	2020      	movs	r0, #32
 8004428:	f7fe fd00 	bl	8002e2c <ssd1306_SetCursor>
							  ssd1306_WriteString("Vbat(V)",Font_6x8,White);
 800442c:	e895 0006 	ldmia.w	r5, {r1, r2}
 8004430:	2301      	movs	r3, #1
 8004432:	482d      	ldr	r0, [pc, #180]	@ (80044e8 <statemachine+0xf20>)
 8004434:	f7fe fcde 	bl	8002df4 <ssd1306_WriteString>
							  if(BTN_B>=1){
 8004438:	4b15      	ldr	r3, [pc, #84]	@ (8004490 <statemachine+0xec8>)
 800443a:	681a      	ldr	r2, [r3, #0]
 800443c:	2a00      	cmp	r2, #0
 800443e:	dd06      	ble.n	800444e <statemachine+0xe86>
							  														  ecranstate++;
 8004440:	783a      	ldrb	r2, [r7, #0]
 8004442:	3201      	adds	r2, #1
 8004444:	703a      	strb	r2, [r7, #0]
							  													  	BTN_B=0;
 8004446:	2200      	movs	r2, #0
 8004448:	601a      	str	r2, [r3, #0]
							  													  	BTN_A=0;
 800444a:	4b1d      	ldr	r3, [pc, #116]	@ (80044c0 <statemachine+0xef8>)
 800444c:	601a      	str	r2, [r3, #0]
 800444e:	4c04      	ldr	r4, [pc, #16]	@ (8004460 <statemachine+0xe98>)
 8004450:	e78c      	b.n	800436c <statemachine+0xda4>
 8004452:	bf00      	nop
 8004454:	f3af 8000 	nop.w
 8004458:	cccccccd 	.word	0xcccccccd
 800445c:	400ccccc 	.word	0x400ccccc
 8004460:	20000520 	.word	0x20000520
 8004464:	20000024 	.word	0x20000024
 8004468:	08017ea0 	.word	0x08017ea0
 800446c:	20000690 	.word	0x20000690
 8004470:	20000fd0 	.word	0x20000fd0
 8004474:	08017eac 	.word	0x08017eac
 8004478:	20000fd8 	.word	0x20000fd8
 800447c:	08017eb8 	.word	0x08017eb8
 8004480:	20001814 	.word	0x20001814
 8004484:	20000638 	.word	0x20000638
 8004488:	20000640 	.word	0x20000640
 800448c:	2000063c 	.word	0x2000063c
 8004490:	20001004 	.word	0x20001004
 8004494:	378bcf65 	.word	0x378bcf65
 8004498:	476a6000 	.word	0x476a6000
 800449c:	3a83126f 	.word	0x3a83126f
 80044a0:	20000648 	.word	0x20000648
 80044a4:	20000644 	.word	0x20000644
 80044a8:	2000002c 	.word	0x2000002c
 80044ac:	08017e68 	.word	0x08017e68
 80044b0:	08017e70 	.word	0x08017e70
 80044b4:	200006c8 	.word	0x200006c8
 80044b8:	200006cc 	.word	0x200006cc
 80044bc:	08017e78 	.word	0x08017e78
 80044c0:	20001008 	.word	0x20001008
 80044c4:	200005ec 	.word	0x200005ec
 80044c8:	2000064c 	.word	0x2000064c
 80044cc:	08017dc0 	.word	0x08017dc0
 80044d0:	08017e50 	.word	0x08017e50
 80044d4:	08017e58 	.word	0x08017e58
 80044d8:	08017e60 	.word	0x08017e60
 80044dc:	200005f4 	.word	0x200005f4
 80044e0:	20000404 	.word	0x20000404
 80044e4:	48000400 	.word	0x48000400
 80044e8:	08017e48 	.word	0x08017e48
							  snprintf((char  *)bufferscreen,50,"%0.1lf",bmpalt);
 80044ec:	4bb2      	ldr	r3, [pc, #712]	@ (80047b8 <statemachine+0x11f0>)
 80044ee:	4ab3      	ldr	r2, [pc, #716]	@ (80047bc <statemachine+0x11f4>)
							  							ssd1306_WriteString("alt(m)",Font_6x8,White);
 80044f0:	4db3      	ldr	r5, [pc, #716]	@ (80047c0 <statemachine+0x11f8>)
							  snprintf((char  *)bufferscreen,50,"%0.1lf",bmpalt);
 80044f2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80044f6:	e9cd 0100 	strd	r0, r1, [sp]
 80044fa:	2132      	movs	r1, #50	@ 0x32
 80044fc:	48b1      	ldr	r0, [pc, #708]	@ (80047c4 <statemachine+0x11fc>)
 80044fe:	f00b fdc7 	bl	8010090 <sniprintf>
							  							  ssd1306_WriteString((char *)bufferscreen,Font_7x10,White);
 8004502:	4ab1      	ldr	r2, [pc, #708]	@ (80047c8 <statemachine+0x1200>)
 8004504:	48af      	ldr	r0, [pc, #700]	@ (80047c4 <statemachine+0x11fc>)
 8004506:	ca06      	ldmia	r2, {r1, r2}
 8004508:	2301      	movs	r3, #1
 800450a:	f7fe fc73 	bl	8002df4 <ssd1306_WriteString>
							  							ssd1306_SetCursor(32,42);
 800450e:	212a      	movs	r1, #42	@ 0x2a
 8004510:	2020      	movs	r0, #32
 8004512:	f7fe fc8b 	bl	8002e2c <ssd1306_SetCursor>
							  							ssd1306_WriteString("alt(m)",Font_6x8,White);
 8004516:	e895 0006 	ldmia.w	r5, {r1, r2}
 800451a:	48ac      	ldr	r0, [pc, #688]	@ (80047cc <statemachine+0x1204>)
 800451c:	2301      	movs	r3, #1
 800451e:	f7fe fc69 	bl	8002df4 <ssd1306_WriteString>
							  if(BTN_B>=1){
 8004522:	4bab      	ldr	r3, [pc, #684]	@ (80047d0 <statemachine+0x1208>)
 8004524:	681a      	ldr	r2, [r3, #0]
 8004526:	2a00      	cmp	r2, #0
 8004528:	f340 82de 	ble.w	8004ae8 <statemachine+0x1520>
							  														  ecranstate++;
 800452c:	783a      	ldrb	r2, [r7, #0]
 800452e:	3201      	adds	r2, #1
 8004530:	e715      	b.n	800435e <statemachine+0xd96>
							  snprintf((char  *)bufferscreen,50,"%0.1f",GNSSData.fgSpeed*3.6);
 8004532:	4ca8      	ldr	r4, [pc, #672]	@ (80047d4 <statemachine+0x120c>)
							  ssd1306_WriteString("Vit(kmh)",Font_6x8,White);
 8004534:	4da2      	ldr	r5, [pc, #648]	@ (80047c0 <statemachine+0x11f8>)
							  snprintf((char  *)bufferscreen,50,"%0.1f",GNSSData.fgSpeed*3.6);
 8004536:	f8d4 00c0 	ldr.w	r0, [r4, #192]	@ 0xc0
 800453a:	f7fb ffdd 	bl	80004f8 <__aeabi_f2d>
 800453e:	a39a      	add	r3, pc, #616	@ (adr r3, 80047a8 <statemachine+0x11e0>)
 8004540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004544:	f7fc f830 	bl	80005a8 <__aeabi_dmul>
 8004548:	4aa3      	ldr	r2, [pc, #652]	@ (80047d8 <statemachine+0x1210>)
 800454a:	e9cd 0100 	strd	r0, r1, [sp]
 800454e:	2132      	movs	r1, #50	@ 0x32
 8004550:	489c      	ldr	r0, [pc, #624]	@ (80047c4 <statemachine+0x11fc>)
 8004552:	f00b fd9d 	bl	8010090 <sniprintf>
							  ssd1306_WriteString((char *)bufferscreen,Font_7x10,White);
 8004556:	4a9c      	ldr	r2, [pc, #624]	@ (80047c8 <statemachine+0x1200>)
 8004558:	489a      	ldr	r0, [pc, #616]	@ (80047c4 <statemachine+0x11fc>)
 800455a:	ca06      	ldmia	r2, {r1, r2}
 800455c:	2301      	movs	r3, #1
 800455e:	f7fe fc49 	bl	8002df4 <ssd1306_WriteString>
							  ssd1306_SetCursor(32,42);
 8004562:	212a      	movs	r1, #42	@ 0x2a
 8004564:	2020      	movs	r0, #32
 8004566:	f7fe fc61 	bl	8002e2c <ssd1306_SetCursor>
							  ssd1306_WriteString("Vit(kmh)",Font_6x8,White);
 800456a:	e895 0006 	ldmia.w	r5, {r1, r2}
 800456e:	2301      	movs	r3, #1
 8004570:	489a      	ldr	r0, [pc, #616]	@ (80047dc <statemachine+0x1214>)
 8004572:	f7fe fc3f 	bl	8002df4 <ssd1306_WriteString>
							  if(BTN_B>=1){
 8004576:	4b96      	ldr	r3, [pc, #600]	@ (80047d0 <statemachine+0x1208>)
 8004578:	681a      	ldr	r2, [r3, #0]
 800457a:	2a00      	cmp	r2, #0
 800457c:	f77f aef5 	ble.w	800436a <statemachine+0xda2>
							  														  ecranstate++;
 8004580:	783a      	ldrb	r2, [r7, #0]
 8004582:	4e97      	ldr	r6, [pc, #604]	@ (80047e0 <statemachine+0x1218>)
 8004584:	3201      	adds	r2, #1
 8004586:	703a      	strb	r2, [r7, #0]
							  													  	BTN_B=0;
 8004588:	2200      	movs	r2, #0
 800458a:	601a      	str	r2, [r3, #0]
							  													  	BTN_A=0;
 800458c:	4b95      	ldr	r3, [pc, #596]	@ (80047e4 <statemachine+0x121c>)
 800458e:	601a      	str	r2, [r3, #0]
 8004590:	e6ec      	b.n	800436c <statemachine+0xda4>
							  snprintf((char  *)bufferscreen,50,"%0.3lf",distanceparcouru/1000);
 8004592:	4995      	ldr	r1, [pc, #596]	@ (80047e8 <statemachine+0x1220>)
							  ssd1306_WriteString("Dist(km)",Font_6x8,White);
 8004594:	4d8a      	ldr	r5, [pc, #552]	@ (80047c0 <statemachine+0x11f8>)
							  snprintf((char  *)bufferscreen,50,"%0.3lf",distanceparcouru/1000);
 8004596:	a386      	add	r3, pc, #536	@ (adr r3, 80047b0 <statemachine+0x11e8>)
 8004598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800459c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80045a0:	f7fc f802 	bl	80005a8 <__aeabi_dmul>
 80045a4:	4a91      	ldr	r2, [pc, #580]	@ (80047ec <statemachine+0x1224>)
 80045a6:	e9cd 0100 	strd	r0, r1, [sp]
 80045aa:	2132      	movs	r1, #50	@ 0x32
 80045ac:	4885      	ldr	r0, [pc, #532]	@ (80047c4 <statemachine+0x11fc>)
 80045ae:	f00b fd6f 	bl	8010090 <sniprintf>
							  ssd1306_WriteString((char *)bufferscreen,Font_7x10,White);
 80045b2:	4a85      	ldr	r2, [pc, #532]	@ (80047c8 <statemachine+0x1200>)
 80045b4:	4883      	ldr	r0, [pc, #524]	@ (80047c4 <statemachine+0x11fc>)
 80045b6:	ca06      	ldmia	r2, {r1, r2}
 80045b8:	2301      	movs	r3, #1
 80045ba:	f7fe fc1b 	bl	8002df4 <ssd1306_WriteString>
							  ssd1306_SetCursor(32,42);
 80045be:	212a      	movs	r1, #42	@ 0x2a
 80045c0:	2020      	movs	r0, #32
 80045c2:	f7fe fc33 	bl	8002e2c <ssd1306_SetCursor>
							  ssd1306_WriteString("Dist(km)",Font_6x8,White);
 80045c6:	e895 0006 	ldmia.w	r5, {r1, r2}
 80045ca:	4889      	ldr	r0, [pc, #548]	@ (80047f0 <statemachine+0x1228>)
 80045cc:	2301      	movs	r3, #1
 80045ce:	e7a6      	b.n	800451e <statemachine+0xf56>
							  snprintf((char *)bufferscreen,50,"%d",pagenumber);
 80045d0:	4b88      	ldr	r3, [pc, #544]	@ (80047f4 <statemachine+0x122c>)
 80045d2:	4a89      	ldr	r2, [pc, #548]	@ (80047f8 <statemachine+0x1230>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	487b      	ldr	r0, [pc, #492]	@ (80047c4 <statemachine+0x11fc>)
							  ssd1306_WriteString("PageNb",Font_6x8,White);
 80045d8:	4d79      	ldr	r5, [pc, #484]	@ (80047c0 <statemachine+0x11f8>)
							  snprintf((char *)bufferscreen,50,"%d",pagenumber);
 80045da:	2132      	movs	r1, #50	@ 0x32
 80045dc:	f00b fd58 	bl	8010090 <sniprintf>
							  ssd1306_WriteString((char *)bufferscreen,Font_7x10,White);
 80045e0:	4a79      	ldr	r2, [pc, #484]	@ (80047c8 <statemachine+0x1200>)
 80045e2:	4878      	ldr	r0, [pc, #480]	@ (80047c4 <statemachine+0x11fc>)
 80045e4:	ca06      	ldmia	r2, {r1, r2}
 80045e6:	2301      	movs	r3, #1
 80045e8:	f7fe fc04 	bl	8002df4 <ssd1306_WriteString>
							  ssd1306_SetCursor(32,42);
 80045ec:	212a      	movs	r1, #42	@ 0x2a
 80045ee:	2020      	movs	r0, #32
 80045f0:	f7fe fc1c 	bl	8002e2c <ssd1306_SetCursor>
							  ssd1306_WriteString("PageNb",Font_6x8,White);
 80045f4:	e895 0006 	ldmia.w	r5, {r1, r2}
 80045f8:	4880      	ldr	r0, [pc, #512]	@ (80047fc <statemachine+0x1234>)
 80045fa:	2301      	movs	r3, #1
 80045fc:	e78f      	b.n	800451e <statemachine+0xf56>
				  min=0;
 80045fe:	4b80      	ldr	r3, [pc, #512]	@ (8004800 <statemachine+0x1238>)
				  seconde=0;
 8004600:	4d80      	ldr	r5, [pc, #512]	@ (8004804 <statemachine+0x123c>)
				  	 if(BTN_B>=1){
 8004602:	4c73      	ldr	r4, [pc, #460]	@ (80047d0 <statemachine+0x1208>)
				  min=0;
 8004604:	2000      	movs	r0, #0
 8004606:	6018      	str	r0, [r3, #0]
				  seconde=0;
 8004608:	6028      	str	r0, [r5, #0]
				  calctime=0;
 800460a:	487f      	ldr	r0, [pc, #508]	@ (8004808 <statemachine+0x1240>)
 800460c:	6002      	str	r2, [r0, #0]
				  	 if(BTN_B>=1){
 800460e:	6820      	ldr	r0, [r4, #0]
 8004610:	2800      	cmp	r0, #0
 8004612:	dd06      	ble.n	8004622 <statemachine+0x105a>
				  		BTN_B=0;
 8004614:	6022      	str	r2, [r4, #0]
				  		starttime=uwTick;
 8004616:	4a7d      	ldr	r2, [pc, #500]	@ (800480c <statemachine+0x1244>)
 8004618:	6810      	ldr	r0, [r2, #0]
 800461a:	4a7d      	ldr	r2, [pc, #500]	@ (8004810 <statemachine+0x1248>)
 800461c:	6010      	str	r0, [r2, #0]
				  		chronostate++;
 800461e:	2201      	movs	r2, #1
 8004620:	700a      	strb	r2, [r1, #0]
				  			starttime=uwTick;
 8004622:	ed9f 8a7c 	vldr	s16, [pc, #496]	@ 8004814 <statemachine+0x124c>
 8004626:	2000      	movs	r0, #0
 8004628:	2100      	movs	r1, #0
 800462a:	eef0 8a48 	vmov.f32	s17, s16
 800462e:	f7ff b81c 	b.w	800366a <statemachine+0xa2>
				  if(BTN_B>=1){
 8004632:	4867      	ldr	r0, [pc, #412]	@ (80047d0 <statemachine+0x1208>)
				  timehandler=calctime;
 8004634:	4b74      	ldr	r3, [pc, #464]	@ (8004808 <statemachine+0x1240>)
				  if(BTN_B>=1){
 8004636:	6804      	ldr	r4, [r0, #0]
				  timehandler=calctime;
 8004638:	4d77      	ldr	r5, [pc, #476]	@ (8004818 <statemachine+0x1250>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	602b      	str	r3, [r5, #0]
				  if(BTN_B>=1){
 800463e:	2c00      	cmp	r4, #0
 8004640:	dd07      	ble.n	8004652 <statemachine+0x108a>
				  			starttime=uwTick;
 8004642:	4a72      	ldr	r2, [pc, #456]	@ (800480c <statemachine+0x1244>)
 8004644:	6814      	ldr	r4, [r2, #0]
 8004646:	4a72      	ldr	r2, [pc, #456]	@ (8004810 <statemachine+0x1248>)
 8004648:	6014      	str	r4, [r2, #0]
				  			chronostate--;
 800464a:	2201      	movs	r2, #1
				  			BTN_B=0;
 800464c:	2400      	movs	r4, #0
				  			chronostate--;
 800464e:	700a      	strb	r2, [r1, #0]
				  			BTN_B=0;
 8004650:	6004      	str	r4, [r0, #0]
				  if(BTN_B_LONG>=1){
 8004652:	4872      	ldr	r0, [pc, #456]	@ (800481c <statemachine+0x1254>)
 8004654:	6804      	ldr	r4, [r0, #0]
 8004656:	2c00      	cmp	r4, #0
 8004658:	dd04      	ble.n	8004664 <statemachine+0x109c>
				  				  	chronostate--;
 800465a:	3a02      	subs	r2, #2
 800465c:	700a      	strb	r2, [r1, #0]
				  				  	BTN_B_LONG=0;
 800465e:	2200      	movs	r2, #0
 8004660:	6002      	str	r2, [r0, #0]
				  				  	timehandler=0;
 8004662:	602a      	str	r2, [r5, #0]
			  min=floor((float) calctime/60000);
 8004664:	ee07 3a90 	vmov	s15, r3
 8004668:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 800466c:	eddf 7a6c 	vldr	s15, [pc, #432]	@ 8004820 <statemachine+0x1258>
 8004670:	f7fe bfdf 	b.w	8003632 <statemachine+0x6a>
						ssd1306_SetCursor(32, 32);
 8004674:	2120      	movs	r1, #32
 8004676:	4608      	mov	r0, r1
 8004678:	f7fe fbd8 	bl	8002e2c <ssd1306_SetCursor>
						snprintf((char *)bufferscreen,15, "%0.1f",(GNSSData.fgSpeed)*3.6);
 800467c:	f8d4 00c0 	ldr.w	r0, [r4, #192]	@ 0xc0
 8004680:	f7fb ff3a 	bl	80004f8 <__aeabi_f2d>
 8004684:	a348      	add	r3, pc, #288	@ (adr r3, 80047a8 <statemachine+0x11e0>)
 8004686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800468a:	f7fb ff8d 	bl	80005a8 <__aeabi_dmul>
 800468e:	4a52      	ldr	r2, [pc, #328]	@ (80047d8 <statemachine+0x1210>)
 8004690:	e9cd 0100 	strd	r0, r1, [sp]
 8004694:	210f      	movs	r1, #15
 8004696:	484b      	ldr	r0, [pc, #300]	@ (80047c4 <statemachine+0x11fc>)
 8004698:	f00b fcfa 	bl	8010090 <sniprintf>
						ssd1306_WriteString((char *)bufferscreen, Font_16x24, White);
 800469c:	4a61      	ldr	r2, [pc, #388]	@ (8004824 <statemachine+0x125c>)
 800469e:	4849      	ldr	r0, [pc, #292]	@ (80047c4 <statemachine+0x11fc>)
 80046a0:	ca06      	ldmia	r2, {r1, r2}
 80046a2:	2301      	movs	r3, #1
 80046a4:	f7fe fba6 	bl	8002df4 <ssd1306_WriteString>
						ssd1306_SetCursor(32, 56);
 80046a8:	2138      	movs	r1, #56	@ 0x38
 80046aa:	2020      	movs	r0, #32
 80046ac:	f7fe fbbe 	bl	8002e2c <ssd1306_SetCursor>
						ssd1306_WriteString("Vit(kmh)", Font_6x8, White);
 80046b0:	4a43      	ldr	r2, [pc, #268]	@ (80047c0 <statemachine+0x11f8>)
 80046b2:	484a      	ldr	r0, [pc, #296]	@ (80047dc <statemachine+0x1214>)
 80046b4:	ca06      	ldmia	r2, {r1, r2}
 80046b6:	2301      	movs	r3, #1
 80046b8:	f7fe fb9c 	bl	8002df4 <ssd1306_WriteString>
						batterygauge(vbat,79, 57,1);
 80046bc:	4b48      	ldr	r3, [pc, #288]	@ (80047e0 <statemachine+0x1218>)
 80046be:	2201      	movs	r2, #1
 80046c0:	ed93 0a00 	vldr	s0, [r3]
 80046c4:	2139      	movs	r1, #57	@ 0x39
 80046c6:	204f      	movs	r0, #79	@ 0x4f
 80046c8:	f7fe fc5e 	bl	8002f88 <batterygauge>
					 if(BTN_B>=1){
 80046cc:	4b40      	ldr	r3, [pc, #256]	@ (80047d0 <statemachine+0x1208>)
 80046ce:	681a      	ldr	r2, [r3, #0]
 80046d0:	2a00      	cmp	r2, #0
 80046d2:	f77f a866 	ble.w	80037a2 <statemachine+0x1da>
							BTN_B=0;
 80046d6:	601d      	str	r5, [r3, #0]
							spdstate++;
 80046d8:	f898 3000 	ldrb.w	r3, [r8]
 80046dc:	3301      	adds	r3, #1
 80046de:	f888 3000 	strb.w	r3, [r8]
							BTN_B=0;
 80046e2:	f7ff b85e 	b.w	80037a2 <statemachine+0x1da>
				  						ssd1306_SetCursor(32, 32);
 80046e6:	2120      	movs	r1, #32
 80046e8:	4608      	mov	r0, r1
 80046ea:	f7fe fb9f 	bl	8002e2c <ssd1306_SetCursor>
				  						snprintf((char *)bufferscreen,15, "%0.0fmin%0.0fs",floor(pace),floor(sec));
 80046ee:	eeb0 0a49 	vmov.f32	s0, s18
 80046f2:	eef0 0a69 	vmov.f32	s1, s19
 80046f6:	f00f fa0f 	bl	8013b18 <floor>
 80046fa:	ee18 0a10 	vmov	r0, s16
 80046fe:	eeb0 8a40 	vmov.f32	s16, s0
 8004702:	eef0 8a60 	vmov.f32	s17, s1
 8004706:	f7fb fef7 	bl	80004f8 <__aeabi_f2d>
 800470a:	ec41 0b10 	vmov	d0, r0, r1
 800470e:	f00f fa03 	bl	8013b18 <floor>
 8004712:	4a45      	ldr	r2, [pc, #276]	@ (8004828 <statemachine+0x1260>)
 8004714:	482b      	ldr	r0, [pc, #172]	@ (80047c4 <statemachine+0x11fc>)
				  						ssd1306_WriteString("pace", Font_6x8, White);
 8004716:	4c2a      	ldr	r4, [pc, #168]	@ (80047c0 <statemachine+0x11f8>)
				  						snprintf((char *)bufferscreen,15, "%0.0fmin%0.0fs",floor(pace),floor(sec));
 8004718:	ed8d 0b02 	vstr	d0, [sp, #8]
 800471c:	210f      	movs	r1, #15
 800471e:	ed8d 8b00 	vstr	d8, [sp]
 8004722:	f00b fcb5 	bl	8010090 <sniprintf>
				  						ssd1306_WriteString((char *)bufferscreen, Font_7x10, White);
 8004726:	4a28      	ldr	r2, [pc, #160]	@ (80047c8 <statemachine+0x1200>)
 8004728:	4826      	ldr	r0, [pc, #152]	@ (80047c4 <statemachine+0x11fc>)
 800472a:	ca06      	ldmia	r2, {r1, r2}
 800472c:	2301      	movs	r3, #1
 800472e:	f7fe fb61 	bl	8002df4 <ssd1306_WriteString>
				  						ssd1306_SetCursor(32, 42);
 8004732:	212a      	movs	r1, #42	@ 0x2a
 8004734:	2020      	movs	r0, #32
 8004736:	f7fe fb79 	bl	8002e2c <ssd1306_SetCursor>
				  						ssd1306_WriteString("pace", Font_6x8, White);
 800473a:	e894 0006 	ldmia.w	r4, {r1, r2}
 800473e:	2301      	movs	r3, #1
 8004740:	483a      	ldr	r0, [pc, #232]	@ (800482c <statemachine+0x1264>)
 8004742:	f7fe fb57 	bl	8002df4 <ssd1306_WriteString>
				  						ssd1306_SetCursor(32, 56);
 8004746:	2138      	movs	r1, #56	@ 0x38
 8004748:	2020      	movs	r0, #32
 800474a:	f7fe fb6f 	bl	8002e2c <ssd1306_SetCursor>
				  						snprintf((char *)bufferscreen,15, "V=%0.1fkmh",vitmax*3.6);
 800474e:	6838      	ldr	r0, [r7, #0]
 8004750:	f7fb fed2 	bl	80004f8 <__aeabi_f2d>
 8004754:	a314      	add	r3, pc, #80	@ (adr r3, 80047a8 <statemachine+0x11e0>)
 8004756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800475a:	f7fb ff25 	bl	80005a8 <__aeabi_dmul>
 800475e:	4a34      	ldr	r2, [pc, #208]	@ (8004830 <statemachine+0x1268>)
 8004760:	e9cd 0100 	strd	r0, r1, [sp]
 8004764:	210f      	movs	r1, #15
 8004766:	4817      	ldr	r0, [pc, #92]	@ (80047c4 <statemachine+0x11fc>)
 8004768:	f00b fc92 	bl	8010090 <sniprintf>
				  						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 800476c:	e894 0006 	ldmia.w	r4, {r1, r2}
 8004770:	2301      	movs	r3, #1
 8004772:	4814      	ldr	r0, [pc, #80]	@ (80047c4 <statemachine+0x11fc>)
 8004774:	f7fe fb3e 	bl	8002df4 <ssd1306_WriteString>
				  						batterygauge(vbat,79, 43,1);
 8004778:	4b19      	ldr	r3, [pc, #100]	@ (80047e0 <statemachine+0x1218>)
 800477a:	2201      	movs	r2, #1
 800477c:	ed93 0a00 	vldr	s0, [r3]
 8004780:	212b      	movs	r1, #43	@ 0x2b
 8004782:	204f      	movs	r0, #79	@ 0x4f
 8004784:	f7fe fc00 	bl	8002f88 <batterygauge>
				  					 if(BTN_B>=1){
 8004788:	4b11      	ldr	r3, [pc, #68]	@ (80047d0 <statemachine+0x1208>)
 800478a:	681a      	ldr	r2, [r3, #0]
 800478c:	2a00      	cmp	r2, #0
 800478e:	f77f a808 	ble.w	80037a2 <statemachine+0x1da>
				  								spdstate--;
 8004792:	f898 2000 	ldrb.w	r2, [r8]
 8004796:	3a02      	subs	r2, #2
 8004798:	f888 2000 	strb.w	r2, [r8]
				  								BTN_B=0;
 800479c:	2200      	movs	r2, #0
 800479e:	601a      	str	r2, [r3, #0]
 80047a0:	f7fe bfff 	b.w	80037a2 <statemachine+0x1da>
 80047a4:	f3af 8000 	nop.w
 80047a8:	cccccccd 	.word	0xcccccccd
 80047ac:	400ccccc 	.word	0x400ccccc
 80047b0:	d2f1a9fc 	.word	0xd2f1a9fc
 80047b4:	3f50624d 	.word	0x3f50624d
 80047b8:	20000418 	.word	0x20000418
 80047bc:	08017e38 	.word	0x08017e38
 80047c0:	2000002c 	.word	0x2000002c
 80047c4:	20000690 	.word	0x20000690
 80047c8:	20000024 	.word	0x20000024
 80047cc:	08017e40 	.word	0x08017e40
 80047d0:	20001004 	.word	0x20001004
 80047d4:	20000520 	.word	0x20000520
 80047d8:	08017dc0 	.word	0x08017dc0
 80047dc:	08017dc8 	.word	0x08017dc8
 80047e0:	20000fd0 	.word	0x20000fd0
 80047e4:	20001008 	.word	0x20001008
 80047e8:	20000620 	.word	0x20000620
 80047ec:	08017e24 	.word	0x08017e24
 80047f0:	08017e2c 	.word	0x08017e2c
 80047f4:	200006c8 	.word	0x200006c8
 80047f8:	08017e64 	.word	0x08017e64
 80047fc:	08017e1c 	.word	0x08017e1c
 8004800:	20000644 	.word	0x20000644
 8004804:	20000648 	.word	0x20000648
 8004808:	2000063c 	.word	0x2000063c
 800480c:	20001814 	.word	0x20001814
 8004810:	20000640 	.word	0x20000640
 8004814:	00000000 	.word	0x00000000
 8004818:	20000638 	.word	0x20000638
 800481c:	200005f4 	.word	0x200005f4
 8004820:	378bcf65 	.word	0x378bcf65
 8004824:	2000001c 	.word	0x2000001c
 8004828:	08017ddc 	.word	0x08017ddc
 800482c:	08017dec 	.word	0x08017dec
 8004830:	08017df4 	.word	0x08017df4
					 ssd1306_SetCursor(32, 32);
 8004834:	2120      	movs	r1, #32
 8004836:	4608      	mov	r0, r1
 8004838:	f7fe faf8 	bl	8002e2c <ssd1306_SetCursor>
					 snprintf((char *)bufferscreen,15, "%0.1f",vitmax*3.6);
 800483c:	6838      	ldr	r0, [r7, #0]
 800483e:	f7fb fe5b 	bl	80004f8 <__aeabi_f2d>
 8004842:	a3d3      	add	r3, pc, #844	@ (adr r3, 8004b90 <statemachine+0x15c8>)
 8004844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004848:	f7fb feae 	bl	80005a8 <__aeabi_dmul>
 800484c:	4ab2      	ldr	r2, [pc, #712]	@ (8004b18 <statemachine+0x1550>)
 800484e:	e9cd 0100 	strd	r0, r1, [sp]
 8004852:	210f      	movs	r1, #15
 8004854:	48b1      	ldr	r0, [pc, #708]	@ (8004b1c <statemachine+0x1554>)
 8004856:	f00b fc1b 	bl	8010090 <sniprintf>
					 ssd1306_WriteString((char *)bufferscreen, Font_16x24, White);
 800485a:	4ab1      	ldr	r2, [pc, #708]	@ (8004b20 <statemachine+0x1558>)
 800485c:	48af      	ldr	r0, [pc, #700]	@ (8004b1c <statemachine+0x1554>)
 800485e:	ca06      	ldmia	r2, {r1, r2}
 8004860:	462b      	mov	r3, r5
 8004862:	f7fe fac7 	bl	8002df4 <ssd1306_WriteString>
					 ssd1306_SetCursor(32, 56);
 8004866:	2138      	movs	r1, #56	@ 0x38
 8004868:	2020      	movs	r0, #32
 800486a:	f7fe fadf 	bl	8002e2c <ssd1306_SetCursor>
					 ssd1306_WriteString("maxV", Font_6x8, White);
 800486e:	4aad      	ldr	r2, [pc, #692]	@ (8004b24 <statemachine+0x155c>)
 8004870:	48ad      	ldr	r0, [pc, #692]	@ (8004b28 <statemachine+0x1560>)
 8004872:	ca06      	ldmia	r2, {r1, r2}
 8004874:	462b      	mov	r3, r5
 8004876:	f7fe fabd 	bl	8002df4 <ssd1306_WriteString>
					 batterygauge(vbat,79, 57,1);
 800487a:	4bac      	ldr	r3, [pc, #688]	@ (8004b2c <statemachine+0x1564>)
 800487c:	462a      	mov	r2, r5
 800487e:	ed93 0a00 	vldr	s0, [r3]
 8004882:	2139      	movs	r1, #57	@ 0x39
 8004884:	204f      	movs	r0, #79	@ 0x4f
 8004886:	f7fe fb7f 	bl	8002f88 <batterygauge>
					 if(BTN_B>=1){
 800488a:	4ba9      	ldr	r3, [pc, #676]	@ (8004b30 <statemachine+0x1568>)
 800488c:	681a      	ldr	r2, [r3, #0]
 800488e:	2a00      	cmp	r2, #0
 8004890:	f77e af87 	ble.w	80037a2 <statemachine+0x1da>
					 							spdstate++;
 8004894:	f898 2000 	ldrb.w	r2, [r8]
 8004898:	3201      	adds	r2, #1
 800489a:	f888 2000 	strb.w	r2, [r8]
					 							BTN_B=0;
 800489e:	2200      	movs	r2, #0
 80048a0:	601a      	str	r2, [r3, #0]
 80048a2:	f7fe bf7e 	b.w	80037a2 <statemachine+0x1da>
				 					 if(BTN_A>=1){
 80048a6:	4ca3      	ldr	r4, [pc, #652]	@ (8004b34 <statemachine+0x156c>)
 80048a8:	6821      	ldr	r1, [r4, #0]
 80048aa:	2900      	cmp	r1, #0
 80048ac:	f77f a8d0 	ble.w	8003a50 <statemachine+0x488>
				 						 state++;
 80048b0:	7831      	ldrb	r1, [r6, #0]
				 									  			 	BTN_A=0;
 80048b2:	6022      	str	r2, [r4, #0]
				 						 state++;
 80048b4:	3101      	adds	r1, #1
 80048b6:	7031      	strb	r1, [r6, #0]
				 									  			 	BTN_B=0;
 80048b8:	601a      	str	r2, [r3, #0]
				 					if(BTN_A_LONG>=1){
 80048ba:	f7ff b8c9 	b.w	8003a50 <statemachine+0x488>
						 					 if(BTN_A>=1){
 80048be:	4c9d      	ldr	r4, [pc, #628]	@ (8004b34 <statemachine+0x156c>)
 80048c0:	6822      	ldr	r2, [r4, #0]
 80048c2:	2a00      	cmp	r2, #0
 80048c4:	f77f a8c4 	ble.w	8003a50 <statemachine+0x488>
						 						 	state++;
 80048c8:	7832      	ldrb	r2, [r6, #0]
						 							BTN_A=0;
 80048ca:	2100      	movs	r1, #0
						 						 	state++;
 80048cc:	3201      	adds	r2, #1
 80048ce:	7032      	strb	r2, [r6, #0]
						 							BTN_A=0;
 80048d0:	6021      	str	r1, [r4, #0]
						 							BTN_B=0;
 80048d2:	6019      	str	r1, [r3, #0]
 80048d4:	f7ff b8bc 	b.w	8003a50 <statemachine+0x488>
						  if(timecounter%2==0){
 80048d8:	07db      	lsls	r3, r3, #31
 80048da:	f53f aa41 	bmi.w	8003d60 <statemachine+0x798>
 80048de:	f7ff ba35 	b.w	8003d4c <statemachine+0x784>
							BTN_B_LONG=0;
 80048e2:	601d      	str	r5, [r3, #0]
							osThreadResume(BALISEHandle);
 80048e4:	4b94      	ldr	r3, [pc, #592]	@ (8004b38 <statemachine+0x1570>)
							BTN_A=0;
 80048e6:	4c93      	ldr	r4, [pc, #588]	@ (8004b34 <statemachine+0x156c>)
							osThreadResume(BALISEHandle);
 80048e8:	6818      	ldr	r0, [r3, #0]
							balisestate++;
 80048ea:	f898 3000 	ldrb.w	r3, [r8]
							BTN_A=0;
 80048ee:	6025      	str	r5, [r4, #0]
							oldlat=GNSSData.fLat;
 80048f0:	4d92      	ldr	r5, [pc, #584]	@ (8004b3c <statemachine+0x1574>)
							balisestate++;
 80048f2:	3301      	adds	r3, #1
 80048f4:	f888 3000 	strb.w	r3, [r8]
							osThreadResume(BALISEHandle);
 80048f8:	f008 fcf6 	bl	800d2e8 <osThreadResume>
							oldlat=GNSSData.fLat;
 80048fc:	f8d5 0090 	ldr.w	r0, [r5, #144]	@ 0x90
 8004900:	f8df 8294 	ldr.w	r8, [pc, #660]	@ 8004b98 <statemachine+0x15d0>
 8004904:	f7fb fdf8 	bl	80004f8 <__aeabi_f2d>
 8004908:	e9c8 0100 	strd	r0, r1, [r8]
							oldlong=GNSSData.fLon;
 800490c:	f8d5 008c 	ldr.w	r0, [r5, #140]	@ 0x8c
 8004910:	4d8b      	ldr	r5, [pc, #556]	@ (8004b40 <statemachine+0x1578>)
 8004912:	f7fb fdf1 	bl	80004f8 <__aeabi_f2d>
 8004916:	e9c5 0100 	strd	r0, r1, [r5]
 800491a:	f7fe bfa2 	b.w	8003862 <statemachine+0x29a>
				 						erasetime=HAL_GetTick();
 800491e:	f000 ff25 	bl	800576c <HAL_GetTick>
				 						for(int i=0;i<=(int)floor((pagenumber)/16);i++){
 8004922:	f8df 8278 	ldr.w	r8, [pc, #632]	@ 8004b9c <statemachine+0x15d4>
				 						erasetime=HAL_GetTick();
 8004926:	4b87      	ldr	r3, [pc, #540]	@ (8004b44 <statemachine+0x157c>)
 8004928:	6018      	str	r0, [r3, #0]
				 						for(int i=0;i<=(int)floor((pagenumber)/16);i++){
 800492a:	f8d8 3000 	ldr.w	r3, [r8]
 800492e:	330f      	adds	r3, #15
 8004930:	db3a      	blt.n	80049a8 <statemachine+0x13e0>
 8004932:	2700      	movs	r7, #0
				 								percentage((float) 0);
 8004934:	ed9f 8a84 	vldr	s16, [pc, #528]	@ 8004b48 <statemachine+0x1580>
				 							ssd1306_WriteString("usb",Font_6x8,White);
 8004938:	f8df a250 	ldr.w	sl, [pc, #592]	@ 8004b8c <statemachine+0x15c4>
				 							SPIF_EraseSector(&hspif1,i);
 800493c:	f8df 920c 	ldr.w	r9, [pc, #524]	@ 8004b4c <statemachine+0x1584>
				 						for(int i=0;i<=(int)floor((pagenumber)/16);i++){
 8004940:	463e      	mov	r6, r7
				 							ssd1306_Fill(Black);
 8004942:	2000      	movs	r0, #0
 8004944:	f7fd ffac 	bl	80028a0 <ssd1306_Fill>
				 							ssd1306_SetCursor(32,32);
 8004948:	2120      	movs	r1, #32
 800494a:	4608      	mov	r0, r1
 800494c:	f7fe fa6e 	bl	8002e2c <ssd1306_SetCursor>
				 							ssd1306_WriteString("usb",Font_6x8,White);
 8004950:	e895 0006 	ldmia.w	r5, {r1, r2}
 8004954:	2301      	movs	r3, #1
 8004956:	4650      	mov	r0, sl
 8004958:	f7fe fa4c 	bl	8002df4 <ssd1306_WriteString>
				 							SPIF_EraseSector(&hspif1,i);
 800495c:	4631      	mov	r1, r6
 800495e:	4648      	mov	r0, r9
 8004960:	f00a f80c 	bl	800e97c <SPIF_EraseSector>
				 							percentage((float) (i*100)/((int)floor((pagenumber)/16)));
 8004964:	ee07 7a90 	vmov	s15, r7
				 								percentage((float) 0);
 8004968:	eeb0 0a48 	vmov.f32	s0, s16
				 							percentage((float) (i*100)/((int)floor((pagenumber)/16)));
 800496c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
				 							if(i>=1){
 8004970:	b3a6      	cbz	r6, 80049dc <statemachine+0x1414>
				 							percentage((float) (i*100)/((int)floor((pagenumber)/16)));
 8004972:	f8d8 3000 	ldr.w	r3, [r8]
 8004976:	2b00      	cmp	r3, #0
 8004978:	bfb8      	it	lt
 800497a:	330f      	addlt	r3, #15
 800497c:	111b      	asrs	r3, r3, #4
 800497e:	ee07 3a10 	vmov	s14, r3
 8004982:	eeb8 0ac7 	vcvt.f32.s32	s0, s14
				 						for(int i=0;i<=(int)floor((pagenumber)/16);i++){
 8004986:	3601      	adds	r6, #1
				 							percentage((float) (i*100)/((int)floor((pagenumber)/16)));
 8004988:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800498c:	f7fe fc98 	bl	80032c0 <percentage>
				 							ssd1306_UpdateScreen();
 8004990:	f7fd ff92 	bl	80028b8 <ssd1306_UpdateScreen>
				 						for(int i=0;i<=(int)floor((pagenumber)/16);i++){
 8004994:	f8d8 3000 	ldr.w	r3, [r8]
 8004998:	2b00      	cmp	r3, #0
 800499a:	bfb8      	it	lt
 800499c:	330f      	addlt	r3, #15
 800499e:	ebb6 1f23 	cmp.w	r6, r3, asr #4
 80049a2:	f107 0764 	add.w	r7, r7, #100	@ 0x64
 80049a6:	ddcc      	ble.n	8004942 <statemachine+0x137a>
				 						SPIF_EraseSector(&hspif1, (int)floor((MAX_WRITE_PAGE+1)/16));
 80049a8:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 80049ac:	4867      	ldr	r0, [pc, #412]	@ (8004b4c <statemachine+0x1584>)
 80049ae:	f009 ffe5 	bl	800e97c <SPIF_EraseSector>
				 						erasetime=HAL_GetTick()-erasetime;
 80049b2:	f000 fedb 	bl	800576c <HAL_GetTick>
 80049b6:	4a63      	ldr	r2, [pc, #396]	@ (8004b44 <statemachine+0x157c>)
 80049b8:	6813      	ldr	r3, [r2, #0]
 80049ba:	1ac3      	subs	r3, r0, r3
 80049bc:	6013      	str	r3, [r2, #0]
				 						pageoffset=0;
 80049be:	4b64      	ldr	r3, [pc, #400]	@ (8004b50 <statemachine+0x1588>)
 80049c0:	2500      	movs	r5, #0
				 						erasedisplay=1;
 80049c2:	2201      	movs	r2, #1
				 						pageoffset=0;
 80049c4:	601d      	str	r5, [r3, #0]
				 						erasedisplay=1;
 80049c6:	f8cb 2000 	str.w	r2, [fp]
				 						pagenumber=0;
 80049ca:	f8c8 5000 	str.w	r5, [r8]
				 						storeindex();
 80049ce:	f7fd fe09 	bl	80025e4 <storeindex>
				 						BTN_B=0;
 80049d2:	4b57      	ldr	r3, [pc, #348]	@ (8004b30 <statemachine+0x1568>)
				 						BTN_A=0;
 80049d4:	6025      	str	r5, [r4, #0]
				 						BTN_B=0;
 80049d6:	601d      	str	r5, [r3, #0]
				 					if(BTN_B>=1){
 80049d8:	f7fe be84 	b.w	80036e4 <statemachine+0x11c>
				 								percentage((float) 0);
 80049dc:	f7fe fc70 	bl	80032c0 <percentage>
				 							ssd1306_UpdateScreen();
 80049e0:	f7fd ff6a 	bl	80028b8 <ssd1306_UpdateScreen>
				 						for(int i=0;i<=(int)floor((pagenumber)/16);i++){
 80049e4:	f8d8 3000 	ldr.w	r3, [r8]
 80049e8:	2b0f      	cmp	r3, #15
 80049ea:	f107 0764 	add.w	r7, r7, #100	@ 0x64
 80049ee:	f04f 0601 	mov.w	r6, #1
 80049f2:	dca6      	bgt.n	8004942 <statemachine+0x137a>
 80049f4:	e7d8      	b.n	80049a8 <statemachine+0x13e0>
						 if((BTN_A>=1)||(BTN_B>=1)||(BTN_A_LONG>=1)){
 80049f6:	4b4e      	ldr	r3, [pc, #312]	@ (8004b30 <statemachine+0x1568>)
 80049f8:	4856      	ldr	r0, [pc, #344]	@ (8004b54 <statemachine+0x158c>)
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	6801      	ldr	r1, [r0, #0]
 80049fe:	2a00      	cmp	r2, #0
 8004a00:	f340 8109 	ble.w	8004c16 <statemachine+0x164e>
							 time50kmh=0.0;
 8004a04:	2200      	movs	r2, #0
							 flag_50kmh=0;
 8004a06:	f8df c198 	ldr.w	ip, [pc, #408]	@ 8004ba0 <statemachine+0x15d8>
							 flag_100kmh=0;
 8004a0a:	4d53      	ldr	r5, [pc, #332]	@ (8004b58 <statemachine+0x1590>)
							 time50kmh=0.0;
 8004a0c:	f8c9 2000 	str.w	r2, [r9]
							 time100kmh=0.0;
 8004a10:	f8c8 2000 	str.w	r2, [r8]
							 flag_50kmh=0;
 8004a14:	2200      	movs	r2, #0
		 					if(BTN_A_LONG>=1){
 8004a16:	4291      	cmp	r1, r2
							 flag_50kmh=0;
 8004a18:	f8cc 2000 	str.w	r2, [ip]
							 flag_100kmh=0;
 8004a1c:	602a      	str	r2, [r5, #0]
							 accelstate=WAITFORGPS;
 8004a1e:	703a      	strb	r2, [r7, #0]
			 								state--;
 8004a20:	bfc8      	it	gt
 8004a22:	7832      	ldrbgt	r2, [r6, #0]
		 					if(BTN_A_LONG>=1){
 8004a24:	f73f a927 	bgt.w	8003c76 <statemachine+0x6ae>
		 						BTN_B=0;
 8004a28:	601a      	str	r2, [r3, #0]
return ;
 8004a2a:	f7fe be5b 	b.w	80036e4 <statemachine+0x11c>
						  if(BTN_A>=1){
 8004a2e:	4c41      	ldr	r4, [pc, #260]	@ (8004b34 <statemachine+0x156c>)
						  timecounter++;
 8004a30:	682b      	ldr	r3, [r5, #0]
						  if(BTN_A>=1){
 8004a32:	6822      	ldr	r2, [r4, #0]
						  timecounter++;
 8004a34:	3301      	adds	r3, #1
						  if(BTN_A>=1){
 8004a36:	2a00      	cmp	r2, #0
						  timecounter++;
 8004a38:	602b      	str	r3, [r5, #0]
						  if(BTN_A>=1){
 8004a3a:	f73f a9b3 	bgt.w	8003da4 <statemachine+0x7dc>
 8004a3e:	f7fe be45 	b.w	80036cc <statemachine+0x104>
							  snprintf((char *)bufferscreen,15, "%d",3-counterforstart);
 8004a42:	4c46      	ldr	r4, [pc, #280]	@ (8004b5c <statemachine+0x1594>)
							  ssd1306_SetCursor(56,40);
 8004a44:	2128      	movs	r1, #40	@ 0x28
 8004a46:	2038      	movs	r0, #56	@ 0x38
 8004a48:	f7fe f9f0 	bl	8002e2c <ssd1306_SetCursor>
							  snprintf((char *)bufferscreen,15, "%d",3-counterforstart);
 8004a4c:	6823      	ldr	r3, [r4, #0]
 8004a4e:	4a44      	ldr	r2, [pc, #272]	@ (8004b60 <statemachine+0x1598>)
 8004a50:	4832      	ldr	r0, [pc, #200]	@ (8004b1c <statemachine+0x1554>)
 8004a52:	f1c3 0303 	rsb	r3, r3, #3
 8004a56:	210f      	movs	r1, #15
 8004a58:	f00b fb1a 	bl	8010090 <sniprintf>
							  ssd1306_WriteString((char *)bufferscreen, Font_16x24, White);
 8004a5c:	4a30      	ldr	r2, [pc, #192]	@ (8004b20 <statemachine+0x1558>)
 8004a5e:	482f      	ldr	r0, [pc, #188]	@ (8004b1c <statemachine+0x1554>)
 8004a60:	2301      	movs	r3, #1
 8004a62:	ca06      	ldmia	r2, {r1, r2}
 8004a64:	f7fe f9c6 	bl	8002df4 <ssd1306_WriteString>
							  if(counterforstart==3){
 8004a68:	6823      	ldr	r3, [r4, #0]
 8004a6a:	2b03      	cmp	r3, #3
 8004a6c:	f000 8102 	beq.w	8004c74 <statemachine+0x16ac>
 8004a70:	4d3c      	ldr	r5, [pc, #240]	@ (8004b64 <statemachine+0x159c>)
							  indexcounterforstart++;
 8004a72:	682b      	ldr	r3, [r5, #0]
 8004a74:	493c      	ldr	r1, [pc, #240]	@ (8004b68 <statemachine+0x15a0>)
 8004a76:	4a3d      	ldr	r2, [pc, #244]	@ (8004b6c <statemachine+0x15a4>)
 8004a78:	3301      	adds	r3, #1
 8004a7a:	fb01 2203 	mla	r2, r1, r3, r2
							  if(indexcounterforstart%10==0){
 8004a7e:	493c      	ldr	r1, [pc, #240]	@ (8004b70 <statemachine+0x15a8>)
							  indexcounterforstart++;
 8004a80:	602b      	str	r3, [r5, #0]
							  if(indexcounterforstart%10==0){
 8004a82:	ebb1 0f72 	cmp.w	r1, r2, ror #1
 8004a86:	f67e ae2d 	bls.w	80036e4 <statemachine+0x11c>
								  counterforstart++;
 8004a8a:	6823      	ldr	r3, [r4, #0]
 8004a8c:	3301      	adds	r3, #1
 8004a8e:	6023      	str	r3, [r4, #0]
 8004a90:	f7fe be28 	b.w	80036e4 <statemachine+0x11c>
				 					ssd1306_WriteString("push A",Font_6x8,White);
 8004a94:	4c23      	ldr	r4, [pc, #140]	@ (8004b24 <statemachine+0x155c>)
				 					ssd1306_Fill(Black);
 8004a96:	f7fd ff03 	bl	80028a0 <ssd1306_Fill>
				 					ssd1306_SetCursor(32,40);
 8004a9a:	2128      	movs	r1, #40	@ 0x28
 8004a9c:	2020      	movs	r0, #32
 8004a9e:	f7fe f9c5 	bl	8002e2c <ssd1306_SetCursor>
				 					ssd1306_WriteString("push A",Font_6x8,White);
 8004aa2:	e894 0006 	ldmia.w	r4, {r1, r2}
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	4832      	ldr	r0, [pc, #200]	@ (8004b74 <statemachine+0x15ac>)
 8004aaa:	f7fe f9a3 	bl	8002df4 <ssd1306_WriteString>
				 					ssd1306_SetCursor(32,32);
 8004aae:	2120      	movs	r1, #32
 8004ab0:	4608      	mov	r0, r1
 8004ab2:	f7fe f9bb 	bl	8002e2c <ssd1306_SetCursor>
				 					ssd1306_WriteString("write",Font_6x8,White);
 8004ab6:	e894 0006 	ldmia.w	r4, {r1, r2}
				 					if(BTN_A>=1){
 8004aba:	4c1e      	ldr	r4, [pc, #120]	@ (8004b34 <statemachine+0x156c>)
				 					ssd1306_WriteString("write",Font_6x8,White);
 8004abc:	482e      	ldr	r0, [pc, #184]	@ (8004b78 <statemachine+0x15b0>)
 8004abe:	2301      	movs	r3, #1
 8004ac0:	f7fe f998 	bl	8002df4 <ssd1306_WriteString>
				 					if(BTN_A>=1){
 8004ac4:	6823      	ldr	r3, [r4, #0]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	f77e ae0c 	ble.w	80036e4 <statemachine+0x11c>
				 					if(usbtransmiten==0){
 8004acc:	682b      	ldr	r3, [r5, #0]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	f47e afd5 	bne.w	8003a7e <statemachine+0x4b6>
				 						osThreadResume(USBTRANSMITHandle);
 8004ad4:	4929      	ldr	r1, [pc, #164]	@ (8004b7c <statemachine+0x15b4>)
				 						usbtransmitstate=STATE_UNDER16PAGES1;
 8004ad6:	4a2a      	ldr	r2, [pc, #168]	@ (8004b80 <statemachine+0x15b8>)
				 						osThreadResume(USBTRANSMITHandle);
 8004ad8:	6808      	ldr	r0, [r1, #0]
				 						usbtransmitstate=STATE_UNDER16PAGES1;
 8004ada:	7013      	strb	r3, [r2, #0]
				 						osThreadResume(USBTRANSMITHandle);
 8004adc:	f008 fc04 	bl	800d2e8 <osThreadResume>
				 					usbtransmiten=1;
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	602b      	str	r3, [r5, #0]
 8004ae4:	f7fe bfcb 	b.w	8003a7e <statemachine+0x4b6>
 8004ae8:	4c14      	ldr	r4, [pc, #80]	@ (8004b3c <statemachine+0x1574>)
 8004aea:	4e10      	ldr	r6, [pc, #64]	@ (8004b2c <statemachine+0x1564>)
 8004aec:	e43e      	b.n	800436c <statemachine+0xda4>
			  							HR=GNSSData.hour;
 8004aee:	4a13      	ldr	r2, [pc, #76]	@ (8004b3c <statemachine+0x1574>)
 8004af0:	4d24      	ldr	r5, [pc, #144]	@ (8004b84 <statemachine+0x15bc>)
			  							MINUTE=GNSSData.min;
 8004af2:	f8df 80b0 	ldr.w	r8, [pc, #176]	@ 8004ba4 <statemachine+0x15dc>
			  							SEC=GNSSData.sec;
 8004af6:	4f24      	ldr	r7, [pc, #144]	@ (8004b88 <statemachine+0x15c0>)
			  							HR=GNSSData.hour;
 8004af8:	f892 0074 	ldrb.w	r0, [r2, #116]	@ 0x74
 8004afc:	7028      	strb	r0, [r5, #0]
			  							settimeen=1;
 8004afe:	2101      	movs	r1, #1
 8004b00:	6019      	str	r1, [r3, #0]
			  							MINUTE=GNSSData.min;
 8004b02:	f892 1075 	ldrb.w	r1, [r2, #117]	@ 0x75
			  							SEC=GNSSData.sec;
 8004b06:	f892 2076 	ldrb.w	r2, [r2, #118]	@ 0x76
			  							MINUTE=GNSSData.min;
 8004b0a:	f888 1000 	strb.w	r1, [r8]
			  							SEC=GNSSData.sec;
 8004b0e:	703a      	strb	r2, [r7, #0]
			  							set_time (HR, MINUTE, SEC);
 8004b10:	f7fd fc26 	bl	8002360 <set_time>
 8004b14:	f7fe bf24 	b.w	8003960 <statemachine+0x398>
 8004b18:	08017dc0 	.word	0x08017dc0
 8004b1c:	20000690 	.word	0x20000690
 8004b20:	2000001c 	.word	0x2000001c
 8004b24:	2000002c 	.word	0x2000002c
 8004b28:	08017dd4 	.word	0x08017dd4
 8004b2c:	20000fd0 	.word	0x20000fd0
 8004b30:	20001004 	.word	0x20001004
 8004b34:	20001008 	.word	0x20001008
 8004b38:	20000404 	.word	0x20000404
 8004b3c:	20000520 	.word	0x20000520
 8004b40:	20000610 	.word	0x20000610
 8004b44:	20000630 	.word	0x20000630
 8004b48:	00000000 	.word	0x00000000
 8004b4c:	20000fe4 	.word	0x20000fe4
 8004b50:	200006cc 	.word	0x200006cc
 8004b54:	200005f0 	.word	0x200005f0
 8004b58:	20001550 	.word	0x20001550
 8004b5c:	2000155c 	.word	0x2000155c
 8004b60:	08017e64 	.word	0x08017e64
 8004b64:	20001558 	.word	0x20001558
 8004b68:	cccccccd 	.word	0xcccccccd
 8004b6c:	19999998 	.word	0x19999998
 8004b70:	19999999 	.word	0x19999999
 8004b74:	08017fa8 	.word	0x08017fa8
 8004b78:	08017fb0 	.word	0x08017fb0
 8004b7c:	20000400 	.word	0x20000400
 8004b80:	20001808 	.word	0x20001808
 8004b84:	2000060d 	.word	0x2000060d
 8004b88:	2000060e 	.word	0x2000060e
 8004b8c:	08017f78 	.word	0x08017f78
 8004b90:	cccccccd 	.word	0xcccccccd
 8004b94:	400ccccc 	.word	0x400ccccc
 8004b98:	20000618 	.word	0x20000618
 8004b9c:	200006c8 	.word	0x200006c8
 8004ba0:	20001554 	.word	0x20001554
 8004ba4:	2000060c 	.word	0x2000060c
					 					 ssd1306_Fill(Black);
 8004ba8:	2000      	movs	r0, #0
 8004baa:	f7fd fe79 	bl	80028a0 <ssd1306_Fill>
					 					 ssd1306_SetCursor(32,32);
 8004bae:	2120      	movs	r1, #32
 8004bb0:	4608      	mov	r0, r1
 8004bb2:	f7fe f93b 	bl	8002e2c <ssd1306_SetCursor>
					 					ssd1306_WriteString("usb",Font_6x8,White);
 8004bb6:	e895 0006 	ldmia.w	r5, {r1, r2}
 8004bba:	4623      	mov	r3, r4
 8004bbc:	483a      	ldr	r0, [pc, #232]	@ (8004ca8 <statemachine+0x16e0>)
 8004bbe:	f7fe f919 	bl	8002df4 <ssd1306_WriteString>
					 					ssd1306_SetCursor(32,42);
 8004bc2:	212a      	movs	r1, #42	@ 0x2a
 8004bc4:	2020      	movs	r0, #32
 8004bc6:	f7fe f931 	bl	8002e2c <ssd1306_SetCursor>
					 					ssd1306_WriteString("FIN",Font_7x10,White);
 8004bca:	4a38      	ldr	r2, [pc, #224]	@ (8004cac <statemachine+0x16e4>)
 8004bcc:	4838      	ldr	r0, [pc, #224]	@ (8004cb0 <statemachine+0x16e8>)
 8004bce:	ca06      	ldmia	r2, {r1, r2}
 8004bd0:	4623      	mov	r3, r4
 8004bd2:	f7fe f90f 	bl	8002df4 <ssd1306_WriteString>
					 					ssd1306_SetCursor(32,56);
 8004bd6:	2138      	movs	r1, #56	@ 0x38
 8004bd8:	2020      	movs	r0, #32
 8004bda:	f7fe f927 	bl	8002e2c <ssd1306_SetCursor>
				 						snprintf((char  *)bufferscreen,50,"t=%0.2f",(float)erasetime/1000);
 8004bde:	4b35      	ldr	r3, [pc, #212]	@ (8004cb4 <statemachine+0x16ec>)
 8004be0:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 8004cb8 <statemachine+0x16f0>
 8004be4:	edd3 7a00 	vldr	s15, [r3]
 8004be8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004bec:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004bf0:	ee17 0a90 	vmov	r0, s15
 8004bf4:	f7fb fc80 	bl	80004f8 <__aeabi_f2d>
 8004bf8:	4a30      	ldr	r2, [pc, #192]	@ (8004cbc <statemachine+0x16f4>)
 8004bfa:	e9cd 0100 	strd	r0, r1, [sp]
 8004bfe:	2132      	movs	r1, #50	@ 0x32
 8004c00:	482f      	ldr	r0, [pc, #188]	@ (8004cc0 <statemachine+0x16f8>)
 8004c02:	f00b fa45 	bl	8010090 <sniprintf>
				 						ssd1306_WriteString((char *)bufferscreen,Font_6x8,White);
 8004c06:	e895 0006 	ldmia.w	r5, {r1, r2}
 8004c0a:	4623      	mov	r3, r4
 8004c0c:	482c      	ldr	r0, [pc, #176]	@ (8004cc0 <statemachine+0x16f8>)
 8004c0e:	f7fe f8f1 	bl	8002df4 <ssd1306_WriteString>
 8004c12:	f7fe bf60 	b.w	8003ad6 <statemachine+0x50e>
						 if((BTN_A>=1)||(BTN_B>=1)||(BTN_A_LONG>=1)){
 8004c16:	2900      	cmp	r1, #0
 8004c18:	f77e ad64 	ble.w	80036e4 <statemachine+0x11c>
							 time50kmh=0.0;
 8004c1c:	2200      	movs	r2, #0
							 flag_50kmh=0;
 8004c1e:	4d29      	ldr	r5, [pc, #164]	@ (8004cc4 <statemachine+0x16fc>)
							 flag_100kmh=0;
 8004c20:	4929      	ldr	r1, [pc, #164]	@ (8004cc8 <statemachine+0x1700>)
							 time50kmh=0.0;
 8004c22:	f8c9 2000 	str.w	r2, [r9]
							 time100kmh=0.0;
 8004c26:	f8c8 2000 	str.w	r2, [r8]
							 flag_50kmh=0;
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	602a      	str	r2, [r5, #0]
							 flag_100kmh=0;
 8004c2e:	600a      	str	r2, [r1, #0]
							 accelstate=WAITFORGPS;
 8004c30:	703a      	strb	r2, [r7, #0]
			 								state--;
 8004c32:	7832      	ldrb	r2, [r6, #0]
 8004c34:	f7ff b81f 	b.w	8003c76 <statemachine+0x6ae>
							  time100kmh=(float)(htim16.Instance->CNT/1000.0);
 8004c38:	f8df 80a0 	ldr.w	r8, [pc, #160]	@ 8004cdc <statemachine+0x1714>
 8004c3c:	f8df 90a0 	ldr.w	r9, [pc, #160]	@ 8004ce0 <statemachine+0x1718>
 8004c40:	f8d8 3000 	ldr.w	r3, [r8]
 8004c44:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8004c46:	f7fb fc35 	bl	80004b4 <__aeabi_ui2d>
 8004c4a:	a315      	add	r3, pc, #84	@ (adr r3, 8004ca0 <statemachine+0x16d8>)
 8004c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c50:	f7fb fcaa 	bl	80005a8 <__aeabi_dmul>
 8004c54:	f7fb ffa0 	bl	8000b98 <__aeabi_d2f>
							  flag_100kmh=1;
 8004c58:	2301      	movs	r3, #1
							  time100kmh=(float)(htim16.Instance->CNT/1000.0);
 8004c5a:	f8c9 0000 	str.w	r0, [r9]
							  flag_100kmh=1;
 8004c5e:	6033      	str	r3, [r6, #0]
							  HAL_TIM_Base_Stop(&htim16);
 8004c60:	4640      	mov	r0, r8
							  accelstate++;
 8004c62:	2304      	movs	r3, #4
 8004c64:	703b      	strb	r3, [r7, #0]
							  HAL_TIM_Base_Stop(&htim16);
 8004c66:	f005 fd07 	bl	800a678 <HAL_TIM_Base_Stop>
							  htim16.Instance->CNT=0;
 8004c6a:	f8d8 3000 	ldr.w	r3, [r8]
 8004c6e:	625d      	str	r5, [r3, #36]	@ 0x24
 8004c70:	f7ff b835 	b.w	8003cde <statemachine+0x716>
							  				accelstate++;
 8004c74:	783b      	ldrb	r3, [r7, #0]
							  				HAL_TIM_Base_Start(&htim16);
 8004c76:	f8df 8064 	ldr.w	r8, [pc, #100]	@ 8004cdc <statemachine+0x1714>
							  				indexcounterforstart=0;
 8004c7a:	4d14      	ldr	r5, [pc, #80]	@ (8004ccc <statemachine+0x1704>)
							  				counterforstart=0;
 8004c7c:	2600      	movs	r6, #0
							  				accelstate++;
 8004c7e:	3301      	adds	r3, #1
							  				HAL_TIM_Base_Start(&htim16);
 8004c80:	4640      	mov	r0, r8
							  				accelstate++;
 8004c82:	703b      	strb	r3, [r7, #0]
							  				counterforstart=0;
 8004c84:	6026      	str	r6, [r4, #0]
							  				indexcounterforstart=0;
 8004c86:	602e      	str	r6, [r5, #0]
							  				HAL_TIM_Base_Start(&htim16);
 8004c88:	f005 fcd2 	bl	800a630 <HAL_TIM_Base_Start>
							  				htim16.Instance->CNT=0;
 8004c8c:	f8d8 3000 	ldr.w	r3, [r8]
 8004c90:	625e      	str	r6, [r3, #36]	@ 0x24
 8004c92:	e6ee      	b.n	8004a72 <statemachine+0x14aa>
 8004c94:	4c0e      	ldr	r4, [pc, #56]	@ (8004cd0 <statemachine+0x1708>)
 8004c96:	4d0f      	ldr	r5, [pc, #60]	@ (8004cd4 <statemachine+0x170c>)
 8004c98:	4e0f      	ldr	r6, [pc, #60]	@ (8004cd8 <statemachine+0x1710>)
 8004c9a:	f7ff bb67 	b.w	800436c <statemachine+0xda4>
 8004c9e:	bf00      	nop
 8004ca0:	d2f1a9fc 	.word	0xd2f1a9fc
 8004ca4:	3f50624d 	.word	0x3f50624d
 8004ca8:	08017f78 	.word	0x08017f78
 8004cac:	20000024 	.word	0x20000024
 8004cb0:	08017f9c 	.word	0x08017f9c
 8004cb4:	20000630 	.word	0x20000630
 8004cb8:	3a83126f 	.word	0x3a83126f
 8004cbc:	08017fa0 	.word	0x08017fa0
 8004cc0:	20000690 	.word	0x20000690
 8004cc4:	20001554 	.word	0x20001554
 8004cc8:	20001550 	.word	0x20001550
 8004ccc:	20001558 	.word	0x20001558
 8004cd0:	20000520 	.word	0x20000520
 8004cd4:	2000002c 	.word	0x2000002c
 8004cd8:	20000fd0 	.word	0x20000fd0
 8004cdc:	20001608 	.word	0x20001608
 8004ce0:	20001548 	.word	0x20001548

08004ce4 <HAL_MspInit>:
  SET_BIT(RCC->AHB3ENR, Periphs);
 8004ce4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004ce8:	b500      	push	{lr}
 8004cea:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8004cec:	f440 2000 	orr.w	r0, r0, #524288	@ 0x80000
 8004cf0:	6518      	str	r0, [r3, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8004cf2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004cf4:	b083      	sub	sp, #12
 8004cf6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004cfa:	9301      	str	r3, [sp, #4]

  __HAL_RCC_HSEM_CLK_ENABLE();

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	210f      	movs	r1, #15
 8004d00:	f06f 0001 	mvn.w	r0, #1
  (void)tmpreg;
 8004d04:	9b01      	ldr	r3, [sp, #4]
 8004d06:	f001 f95b 	bl	8005fc0 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 5, 0);
 8004d0a:	202e      	movs	r0, #46	@ 0x2e
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	2105      	movs	r1, #5
 8004d10:	f001 f956 	bl	8005fc0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8004d14:	202e      	movs	r0, #46	@ 0x2e

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004d16:	b003      	add	sp, #12
 8004d18:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8004d1c:	f001 b98c 	b.w	8006038 <HAL_NVIC_EnableIRQ>

08004d20 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004d20:	b570      	push	{r4, r5, r6, lr}
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;

  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 8004d22:	4601      	mov	r1, r0
{
 8004d24:	b08a      	sub	sp, #40	@ 0x28
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 8004d26:	2200      	movs	r2, #0
{
 8004d28:	4606      	mov	r6, r0
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 8004d2a:	2019      	movs	r0, #25
 8004d2c:	f001 f948 	bl	8005fc0 <HAL_NVIC_SetPriority>
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8004d30:	2019      	movs	r0, #25
 8004d32:	f001 f981 	bl	8006038 <HAL_NVIC_EnableIRQ>
  SET_BIT(RCC->APB2ENR, Periphs);
 8004d36:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004d3a:	a901      	add	r1, sp, #4
 8004d3c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8004d3e:	4c1c      	ldr	r4, [pc, #112]	@ (8004db0 <HAL_InitTick+0x90>)
 8004d40:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004d44:	661a      	str	r2, [r3, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8004d46:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d48:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004d4c:	a803      	add	r0, sp, #12
 8004d4e:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
 8004d50:	9b02      	ldr	r3, [sp, #8]
 8004d52:	f004 f875 	bl	8008e40 <HAL_RCC_GetClockConfig>
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8004d56:	f004 f831 	bl	8008dbc <HAL_RCC_GetPCLK2Freq>
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004d5a:	4a16      	ldr	r2, [pc, #88]	@ (8004db4 <HAL_InitTick+0x94>)
  htim1.Instance = TIM1;
 8004d5c:	4916      	ldr	r1, [pc, #88]	@ (8004db8 <HAL_InitTick+0x98>)
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004d5e:	fba2 2300 	umull	r2, r3, r2, r0
 8004d62:	0c9b      	lsrs	r3, r3, #18
 8004d64:	3b01      	subs	r3, #1
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
  htim1.Init.Prescaler = uwPrescalerValue;
  htim1.Init.ClockDivision = 0;
 8004d66:	2200      	movs	r2, #0
  htim1.Init.Prescaler = uwPrescalerValue;
 8004d68:	e9c4 1300 	strd	r1, r3, [r4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;

  status = HAL_TIM_Base_Init(&htim1);
 8004d6c:	4620      	mov	r0, r4
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8004d6e:	f240 33e7 	movw	r3, #999	@ 0x3e7
  htim1.Init.ClockDivision = 0;
 8004d72:	6122      	str	r2, [r4, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004d74:	60a2      	str	r2, [r4, #8]
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8004d76:	60e3      	str	r3, [r4, #12]
  status = HAL_TIM_Base_Init(&htim1);
 8004d78:	f005 fbec 	bl	800a554 <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 8004d7c:	4605      	mov	r5, r0
 8004d7e:	b110      	cbz	r0, 8004d86 <HAL_InitTick+0x66>
    }
  }

 /* Return function status */
  return status;
}
 8004d80:	4628      	mov	r0, r5
 8004d82:	b00a      	add	sp, #40	@ 0x28
 8004d84:	bd70      	pop	{r4, r5, r6, pc}
    status = HAL_TIM_Base_Start_IT(&htim1);
 8004d86:	4620      	mov	r0, r4
 8004d88:	f005 fc8c 	bl	800a6a4 <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 8004d8c:	4605      	mov	r5, r0
 8004d8e:	2800      	cmp	r0, #0
 8004d90:	d1f6      	bne.n	8004d80 <HAL_InitTick+0x60>
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8004d92:	2019      	movs	r0, #25
 8004d94:	f001 f950 	bl	8006038 <HAL_NVIC_EnableIRQ>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004d98:	2e0f      	cmp	r6, #15
 8004d9a:	d901      	bls.n	8004da0 <HAL_InitTick+0x80>
        status = HAL_ERROR;
 8004d9c:	2501      	movs	r5, #1
 8004d9e:	e7ef      	b.n	8004d80 <HAL_InitTick+0x60>
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8004da0:	462a      	mov	r2, r5
 8004da2:	4631      	mov	r1, r6
 8004da4:	2019      	movs	r0, #25
 8004da6:	f001 f90b 	bl	8005fc0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004daa:	4b04      	ldr	r3, [pc, #16]	@ (8004dbc <HAL_InitTick+0x9c>)
 8004dac:	601e      	str	r6, [r3, #0]
 8004dae:	e7e7      	b.n	8004d80 <HAL_InitTick+0x60>
 8004db0:	20001564 	.word	0x20001564
 8004db4:	431bde83 	.word	0x431bde83
 8004db8:	40012c00 	.word	0x40012c00
 8004dbc:	2000003c 	.word	0x2000003c

08004dc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004dc0:	b508      	push	{r3, lr}
 8004dc2:	4c07      	ldr	r4, [pc, #28]	@ (8004de0 <NMI_Handler+0x20>)
  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
  {
	   ssd1306_SetCursor(32, 20);
	   	  ssd1306_WriteString("NMI", Font_7x10, White);
 8004dc4:	4d07      	ldr	r5, [pc, #28]	@ (8004de4 <NMI_Handler+0x24>)
	   ssd1306_SetCursor(32, 20);
 8004dc6:	2114      	movs	r1, #20
 8004dc8:	2020      	movs	r0, #32
 8004dca:	f7fe f82f 	bl	8002e2c <ssd1306_SetCursor>
	   	  ssd1306_WriteString("NMI", Font_7x10, White);
 8004dce:	e894 0006 	ldmia.w	r4, {r1, r2}
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	4628      	mov	r0, r5
 8004dd6:	f7fe f80d 	bl	8002df4 <ssd1306_WriteString>
	   	  ssd1306_UpdateScreen();
 8004dda:	f7fd fd6d 	bl	80028b8 <ssd1306_UpdateScreen>
   while (1)
 8004dde:	e7f2      	b.n	8004dc6 <NMI_Handler+0x6>
 8004de0:	20000024 	.word	0x20000024
 8004de4:	08018004 	.word	0x08018004

08004de8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004de8:	b508      	push	{r3, lr}
 8004dea:	4c07      	ldr	r4, [pc, #28]	@ (8004e08 <HardFault_Handler+0x20>)
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  ssd1306_SetCursor(32, 20);
	  ssd1306_WriteString("hardfault", Font_7x10, White);
 8004dec:	4d07      	ldr	r5, [pc, #28]	@ (8004e0c <HardFault_Handler+0x24>)
	  ssd1306_SetCursor(32, 20);
 8004dee:	2114      	movs	r1, #20
 8004df0:	2020      	movs	r0, #32
 8004df2:	f7fe f81b 	bl	8002e2c <ssd1306_SetCursor>
	  ssd1306_WriteString("hardfault", Font_7x10, White);
 8004df6:	e894 0006 	ldmia.w	r4, {r1, r2}
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	4628      	mov	r0, r5
 8004dfe:	f7fd fff9 	bl	8002df4 <ssd1306_WriteString>
	  ssd1306_UpdateScreen();
 8004e02:	f7fd fd59 	bl	80028b8 <ssd1306_UpdateScreen>
  while (1)
 8004e06:	e7f2      	b.n	8004dee <HardFault_Handler+0x6>
 8004e08:	20000024 	.word	0x20000024
 8004e0c:	08018008 	.word	0x08018008

08004e10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004e10:	b508      	push	{r3, lr}
 8004e12:	4c07      	ldr	r4, [pc, #28]	@ (8004e30 <MemManage_Handler+0x20>)
  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
	  ssd1306_SetCursor(32, 20);
	  	  ssd1306_WriteString("mem", Font_7x10, White);
 8004e14:	4d07      	ldr	r5, [pc, #28]	@ (8004e34 <MemManage_Handler+0x24>)
	  ssd1306_SetCursor(32, 20);
 8004e16:	2114      	movs	r1, #20
 8004e18:	2020      	movs	r0, #32
 8004e1a:	f7fe f807 	bl	8002e2c <ssd1306_SetCursor>
	  	  ssd1306_WriteString("mem", Font_7x10, White);
 8004e1e:	e894 0006 	ldmia.w	r4, {r1, r2}
 8004e22:	2301      	movs	r3, #1
 8004e24:	4628      	mov	r0, r5
 8004e26:	f7fd ffe5 	bl	8002df4 <ssd1306_WriteString>
	  	  ssd1306_UpdateScreen();
 8004e2a:	f7fd fd45 	bl	80028b8 <ssd1306_UpdateScreen>
  while (1)
 8004e2e:	e7f2      	b.n	8004e16 <MemManage_Handler+0x6>
 8004e30:	20000024 	.word	0x20000024
 8004e34:	08018014 	.word	0x08018014

08004e38 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004e38:	b508      	push	{r3, lr}
 8004e3a:	4c07      	ldr	r4, [pc, #28]	@ (8004e58 <BusFault_Handler+0x20>)
  /* USER CODE END BusFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_BusFault_IRQn 0 */
	  ssd1306_SetCursor(32, 20);
	  	  ssd1306_WriteString("bus", Font_7x10, White);
 8004e3c:	4d07      	ldr	r5, [pc, #28]	@ (8004e5c <BusFault_Handler+0x24>)
	  ssd1306_SetCursor(32, 20);
 8004e3e:	2114      	movs	r1, #20
 8004e40:	2020      	movs	r0, #32
 8004e42:	f7fd fff3 	bl	8002e2c <ssd1306_SetCursor>
	  	  ssd1306_WriteString("bus", Font_7x10, White);
 8004e46:	e894 0006 	ldmia.w	r4, {r1, r2}
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	4628      	mov	r0, r5
 8004e4e:	f7fd ffd1 	bl	8002df4 <ssd1306_WriteString>
	  	  ssd1306_UpdateScreen();
 8004e52:	f7fd fd31 	bl	80028b8 <ssd1306_UpdateScreen>
  while (1)
 8004e56:	e7f2      	b.n	8004e3e <BusFault_Handler+0x6>
 8004e58:	20000024 	.word	0x20000024
 8004e5c:	08018018 	.word	0x08018018

08004e60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004e60:	b508      	push	{r3, lr}
 8004e62:	4c07      	ldr	r4, [pc, #28]	@ (8004e80 <UsageFault_Handler+0x20>)
  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_UsageFault_IRQn 0 */
	  ssd1306_SetCursor(32, 20);
	  	  ssd1306_WriteString("usage", Font_7x10, White);
 8004e64:	4d07      	ldr	r5, [pc, #28]	@ (8004e84 <UsageFault_Handler+0x24>)
	  ssd1306_SetCursor(32, 20);
 8004e66:	2114      	movs	r1, #20
 8004e68:	2020      	movs	r0, #32
 8004e6a:	f7fd ffdf 	bl	8002e2c <ssd1306_SetCursor>
	  	  ssd1306_WriteString("usage", Font_7x10, White);
 8004e6e:	e894 0006 	ldmia.w	r4, {r1, r2}
 8004e72:	2301      	movs	r3, #1
 8004e74:	4628      	mov	r0, r5
 8004e76:	f7fd ffbd 	bl	8002df4 <ssd1306_WriteString>
	  	  ssd1306_UpdateScreen();
 8004e7a:	f7fd fd1d 	bl	80028b8 <ssd1306_UpdateScreen>
  while (1)
 8004e7e:	e7f2      	b.n	8004e66 <UsageFault_Handler+0x6>
 8004e80:	20000024 	.word	0x20000024
 8004e84:	0801801c 	.word	0x0801801c

08004e88 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004e88:	4770      	bx	lr
 8004e8a:	bf00      	nop

08004e8c <RTC_WKUP_IRQHandler>:
void RTC_WKUP_IRQHandler(void)
{
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8004e8c:	4801      	ldr	r0, [pc, #4]	@ (8004e94 <RTC_WKUP_IRQHandler+0x8>)
 8004e8e:	f004 bce9 	b.w	8009864 <HAL_RTCEx_WakeUpTimerIRQHandler>
 8004e92:	bf00      	nop
 8004e94:	20001084 	.word	0x20001084

08004e98 <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004e98:	4801      	ldr	r0, [pc, #4]	@ (8004ea0 <DMA1_Channel1_IRQHandler+0x8>)
 8004e9a:	f001 ba35 	b.w	8006308 <HAL_DMA_IRQHandler>
 8004e9e:	bf00      	nop
 8004ea0:	20000338 	.word	0x20000338

08004ea4 <DMA1_Channel2_IRQHandler>:
void DMA1_Channel2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8004ea4:	4801      	ldr	r0, [pc, #4]	@ (8004eac <DMA1_Channel2_IRQHandler+0x8>)
 8004ea6:	f001 ba2f 	b.w	8006308 <HAL_DMA_IRQHandler>
 8004eaa:	bf00      	nop
 8004eac:	20001708 	.word	0x20001708

08004eb0 <DMA1_Channel3_IRQHandler>:
void DMA1_Channel3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8004eb0:	4801      	ldr	r0, [pc, #4]	@ (8004eb8 <DMA1_Channel3_IRQHandler+0x8>)
 8004eb2:	f001 ba29 	b.w	8006308 <HAL_DMA_IRQHandler>
 8004eb6:	bf00      	nop
 8004eb8:	200016a8 	.word	0x200016a8

08004ebc <USB_LP_IRQHandler>:
void USB_LP_IRQHandler(void)
{
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8004ebc:	4801      	ldr	r0, [pc, #4]	@ (8004ec4 <USB_LP_IRQHandler+0x8>)
 8004ebe:	f002 ba97 	b.w	80073f0 <HAL_PCD_IRQHandler>
 8004ec2:	bf00      	nop
 8004ec4:	2000577c 	.word	0x2000577c

08004ec8 <TIM1_UP_TIM16_IRQHandler>:
void TIM1_UP_TIM16_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  if (htim1.Instance != NULL)
 8004ec8:	4806      	ldr	r0, [pc, #24]	@ (8004ee4 <TIM1_UP_TIM16_IRQHandler+0x1c>)
{
 8004eca:	b508      	push	{r3, lr}
  if (htim1.Instance != NULL)
 8004ecc:	6803      	ldr	r3, [r0, #0]
 8004ece:	b10b      	cbz	r3, 8004ed4 <TIM1_UP_TIM16_IRQHandler+0xc>
  {
    HAL_TIM_IRQHandler(&htim1);
 8004ed0:	f005 fcca 	bl	800a868 <HAL_TIM_IRQHandler>
  }
  if (htim16.Instance != NULL)
 8004ed4:	4804      	ldr	r0, [pc, #16]	@ (8004ee8 <TIM1_UP_TIM16_IRQHandler+0x20>)
 8004ed6:	6803      	ldr	r3, [r0, #0]
 8004ed8:	b11b      	cbz	r3, 8004ee2 <TIM1_UP_TIM16_IRQHandler+0x1a>
    HAL_TIM_IRQHandler(&htim16);
  }
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8004eda:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_TIM_IRQHandler(&htim16);
 8004ede:	f005 bcc3 	b.w	800a868 <HAL_TIM_IRQHandler>
}
 8004ee2:	bd08      	pop	{r3, pc}
 8004ee4:	20001564 	.word	0x20001564
 8004ee8:	20001608 	.word	0x20001608

08004eec <TIM1_TRG_COM_TIM17_IRQHandler>:
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8004eec:	4801      	ldr	r0, [pc, #4]	@ (8004ef4 <TIM1_TRG_COM_TIM17_IRQHandler+0x8>)
 8004eee:	f005 bcbb 	b.w	800a868 <HAL_TIM_IRQHandler>
 8004ef2:	bf00      	nop
 8004ef4:	200015b8 	.word	0x200015b8

08004ef8 <SPI1_IRQHandler>:
void SPI1_IRQHandler(void)
{
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8004ef8:	4801      	ldr	r0, [pc, #4]	@ (8004f00 <SPI1_IRQHandler+0x8>)
 8004efa:	f005 ba9f 	b.w	800a43c <HAL_SPI_IRQHandler>
 8004efe:	bf00      	nop
 8004f00:	200010a8 	.word	0x200010a8

08004f04 <LPUART1_IRQHandler>:
void LPUART1_IRQHandler(void)
{
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8004f04:	4801      	ldr	r0, [pc, #4]	@ (8004f0c <LPUART1_IRQHandler+0x8>)
 8004f06:	f005 bf0f 	b.w	800ad28 <HAL_UART_IRQHandler>
 8004f0a:	bf00      	nop
 8004f0c:	20001768 	.word	0x20001768

08004f10 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004f10:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8004f12:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8004f16:	f001 fb4d 	bl	80065b4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004f1a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8004f1e:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8004f22:	f001 bb47 	b.w	80065b4 <HAL_GPIO_EXTI_IRQHandler>
 8004f26:	bf00      	nop

08004f28 <IPCC_C1_RX_IRQHandler>:
void IPCC_C1_RX_IRQHandler(void)
{
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8004f28:	4801      	ldr	r0, [pc, #4]	@ (8004f30 <IPCC_C1_RX_IRQHandler+0x8>)
 8004f2a:	f002 b935 	b.w	8007198 <HAL_IPCC_RX_IRQHandler>
 8004f2e:	bf00      	nop
 8004f30:	200004dc 	.word	0x200004dc

08004f34 <IPCC_C1_TX_IRQHandler>:
void IPCC_C1_TX_IRQHandler(void)
{
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8004f34:	4801      	ldr	r0, [pc, #4]	@ (8004f3c <IPCC_C1_TX_IRQHandler+0x8>)
 8004f36:	f002 b903 	b.w	8007140 <HAL_IPCC_TX_IRQHandler>
 8004f3a:	bf00      	nop
 8004f3c:	200004dc 	.word	0x200004dc

08004f40 <HSEM_IRQHandler>:
void HSEM_IRQHandler(void)
{
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8004f40:	f001 bb46 	b.w	80065d0 <HAL_HSEM_IRQHandler>

08004f44 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8004f44:	2001      	movs	r0, #1
 8004f46:	4770      	bx	lr

08004f48 <_kill>:

int _kill(int pid, int sig)
{
 8004f48:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004f4a:	f00b f98b 	bl	8010264 <__errno>
 8004f4e:	2316      	movs	r3, #22
 8004f50:	6003      	str	r3, [r0, #0]
  return -1;
}
 8004f52:	f04f 30ff 	mov.w	r0, #4294967295
 8004f56:	bd08      	pop	{r3, pc}

08004f58 <_exit>:

void _exit (int status)
{
 8004f58:	b508      	push	{r3, lr}
  errno = EINVAL;
 8004f5a:	f00b f983 	bl	8010264 <__errno>
 8004f5e:	2316      	movs	r3, #22
 8004f60:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 8004f62:	e7fe      	b.n	8004f62 <_exit+0xa>

08004f64 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004f64:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004f66:	1e16      	subs	r6, r2, #0
 8004f68:	dd07      	ble.n	8004f7a <_read+0x16>
 8004f6a:	460c      	mov	r4, r1
 8004f6c:	198d      	adds	r5, r1, r6
  {
    *ptr++ = __io_getchar();
 8004f6e:	f3af 8000 	nop.w
 8004f72:	f804 0b01 	strb.w	r0, [r4], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004f76:	42a5      	cmp	r5, r4
 8004f78:	d1f9      	bne.n	8004f6e <_read+0xa>
  }

  return len;
}
 8004f7a:	4630      	mov	r0, r6
 8004f7c:	bd70      	pop	{r4, r5, r6, pc}
 8004f7e:	bf00      	nop

08004f80 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004f80:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004f82:	1e16      	subs	r6, r2, #0
 8004f84:	dd07      	ble.n	8004f96 <_write+0x16>
 8004f86:	460c      	mov	r4, r1
 8004f88:	198d      	adds	r5, r1, r6
  {
    __io_putchar(*ptr++);
 8004f8a:	f814 0b01 	ldrb.w	r0, [r4], #1
 8004f8e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004f92:	42ac      	cmp	r4, r5
 8004f94:	d1f9      	bne.n	8004f8a <_write+0xa>
  }
  return len;
}
 8004f96:	4630      	mov	r0, r6
 8004f98:	bd70      	pop	{r4, r5, r6, pc}
 8004f9a:	bf00      	nop

08004f9c <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8004f9c:	f04f 30ff 	mov.w	r0, #4294967295
 8004fa0:	4770      	bx	lr
 8004fa2:	bf00      	nop

08004fa4 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8004fa4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004fa8:	604b      	str	r3, [r1, #4]
  return 0;
}
 8004faa:	2000      	movs	r0, #0
 8004fac:	4770      	bx	lr
 8004fae:	bf00      	nop

08004fb0 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8004fb0:	2001      	movs	r0, #1
 8004fb2:	4770      	bx	lr

08004fb4 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8004fb4:	2000      	movs	r0, #0
 8004fb6:	4770      	bx	lr

08004fb8 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004fb8:	490c      	ldr	r1, [pc, #48]	@ (8004fec <_sbrk+0x34>)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004fba:	4a0d      	ldr	r2, [pc, #52]	@ (8004ff0 <_sbrk+0x38>)
  if (NULL == __sbrk_heap_end)
 8004fbc:	680b      	ldr	r3, [r1, #0]
{
 8004fbe:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004fc0:	4c0c      	ldr	r4, [pc, #48]	@ (8004ff4 <_sbrk+0x3c>)
 8004fc2:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 8004fc4:	b12b      	cbz	r3, 8004fd2 <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004fc6:	4418      	add	r0, r3
 8004fc8:	4290      	cmp	r0, r2
 8004fca:	d807      	bhi.n	8004fdc <_sbrk+0x24>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8004fcc:	6008      	str	r0, [r1, #0]

  return (void *)prev_heap_end;
}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8004fd2:	4b09      	ldr	r3, [pc, #36]	@ (8004ff8 <_sbrk+0x40>)
 8004fd4:	600b      	str	r3, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 8004fd6:	4418      	add	r0, r3
 8004fd8:	4290      	cmp	r0, r2
 8004fda:	d9f7      	bls.n	8004fcc <_sbrk+0x14>
    errno = ENOMEM;
 8004fdc:	f00b f942 	bl	8010264 <__errno>
 8004fe0:	230c      	movs	r3, #12
 8004fe2:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8004fe4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	bd10      	pop	{r4, pc}
 8004fec:	200015b0 	.word	0x200015b0
 8004ff0:	20030000 	.word	0x20030000
 8004ff4:	00000400 	.word	0x00000400
 8004ff8:	20005ba8 	.word	0x20005ba8

08004ffc <SystemInit>:
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8004ffc:	4914      	ldr	r1, [pc, #80]	@ (8005050 <SystemInit+0x54>)
 8004ffe:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8005002:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8005006:	f442 0270 	orr.w	r2, r2, #15728640	@ 0xf00000
 800500a:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  RCC->CR |= RCC_CR_MSION;
 800500e:	6819      	ldr	r1, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8005010:	4a10      	ldr	r2, [pc, #64]	@ (8005054 <SystemInit+0x58>)
  RCC->CFGR = 0x00070000U;
 8005012:	f44f 20e0 	mov.w	r0, #458752	@ 0x70000
  RCC->CR |= RCC_CR_MSION;
 8005016:	f041 0101 	orr.w	r1, r1, #1
 800501a:	6019      	str	r1, [r3, #0]
  RCC->CFGR = 0x00070000U;
 800501c:	6098      	str	r0, [r3, #8]
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 800501e:	6818      	ldr	r0, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8005020:	490d      	ldr	r1, [pc, #52]	@ (8005058 <SystemInit+0x5c>)
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8005022:	4002      	ands	r2, r0
 8005024:	601a      	str	r2, [r3, #0]
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8005026:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 800502a:	f022 0205 	bic.w	r2, r2, #5
 800502e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8005032:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8005036:	f022 0201 	bic.w	r2, r2, #1
 800503a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  RCC->PLLCFGR = 0x22041000U;
 800503e:	60d9      	str	r1, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8005040:	6119      	str	r1, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8005042:	681a      	ldr	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8005044:	2100      	movs	r1, #0
  RCC->CR &= 0xFFFBFFFFU;
 8005046:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800504a:	601a      	str	r2, [r3, #0]
  RCC->CIER = 0x00000000;
 800504c:	6199      	str	r1, [r3, #24]
}
 800504e:	4770      	bx	lr
 8005050:	e000ed00 	.word	0xe000ed00
 8005054:	faf6fefb 	.word	0xfaf6fefb
 8005058:	22041000 	.word	0x22041000

0800505c <MX_TIM2_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800505c:	b500      	push	{lr}
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800505e:	481c      	ldr	r0, [pc, #112]	@ (80050d0 <MX_TIM2_Init+0x74>)
 8005060:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
{
 8005064:	b089      	sub	sp, #36	@ 0x24
  htim2.Instance = TIM2;
 8005066:	6002      	str	r2, [r0, #0]
  htim2.Init.Prescaler = 6400-1;
 8005068:	f641 02ff 	movw	r2, #6399	@ 0x18ff
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800506c:	2300      	movs	r3, #0
  htim2.Init.Prescaler = 6400-1;
 800506e:	6042      	str	r2, [r0, #4]
 8005070:	f240 32e7 	movw	r2, #999	@ 0x3e7
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005074:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8005078:	e9cd 3306 	strd	r3, r3, [sp, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800507c:	e9cd 3301 	strd	r3, r3, [sp, #4]
  htim2.Init.Prescaler = 6400-1;
 8005080:	e9c0 3202 	strd	r3, r2, [r0, #8]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005084:	9303      	str	r3, [sp, #12]
  htim2.Init.Prescaler = 6400-1;
 8005086:	6103      	str	r3, [r0, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 1000-1;
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005088:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800508a:	f005 fa63 	bl	800a554 <HAL_TIM_Base_Init>
 800508e:	b998      	cbnz	r0, 80050b8 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005090:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8005094:	480e      	ldr	r0, [pc, #56]	@ (80050d0 <MX_TIM2_Init+0x74>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005096:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8005098:	a904      	add	r1, sp, #16
 800509a:	f005 fb2b 	bl	800a6f4 <HAL_TIM_ConfigClockSource>
 800509e:	b998      	cbnz	r0, 80050c8 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80050a0:	2220      	movs	r2, #32
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80050a2:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80050a4:	480a      	ldr	r0, [pc, #40]	@ (80050d0 <MX_TIM2_Init+0x74>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80050a6:	9201      	str	r2, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80050a8:	a901      	add	r1, sp, #4
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80050aa:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80050ac:	f005 fc88 	bl	800a9c0 <HAL_TIMEx_MasterConfigSynchronization>
 80050b0:	b928      	cbnz	r0, 80050be <MX_TIM2_Init+0x62>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80050b2:	b009      	add	sp, #36	@ 0x24
 80050b4:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80050b8:	f7fd f8c6 	bl	8002248 <Error_Handler>
 80050bc:	e7e8      	b.n	8005090 <MX_TIM2_Init+0x34>
    Error_Handler();
 80050be:	f7fd f8c3 	bl	8002248 <Error_Handler>
}
 80050c2:	b009      	add	sp, #36	@ 0x24
 80050c4:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80050c8:	f7fd f8be 	bl	8002248 <Error_Handler>
 80050cc:	e7e8      	b.n	80050a0 <MX_TIM2_Init+0x44>
 80050ce:	bf00      	nop
 80050d0:	20001658 	.word	0x20001658

080050d4 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 80050d4:	b510      	push	{r4, lr}
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80050d6:	480b      	ldr	r0, [pc, #44]	@ (8005104 <MX_TIM16_Init+0x30>)
 80050d8:	4c0b      	ldr	r4, [pc, #44]	@ (8005108 <MX_TIM16_Init+0x34>)
  htim16.Init.Prescaler = 64000-1;
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80050da:	2300      	movs	r3, #0
  htim16.Init.Prescaler = 64000-1;
 80050dc:	f64f 11ff 	movw	r1, #63999	@ 0xf9ff
  htim16.Init.Period = 65535;
 80050e0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
  htim16.Init.Prescaler = 64000-1;
 80050e4:	e9c0 4100 	strd	r4, r1, [r0]
  htim16.Init.Period = 65535;
 80050e8:	e9c0 3202 	strd	r3, r2, [r0, #8]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim16.Init.RepetitionCounter = 0;
 80050ec:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80050f0:	6183      	str	r3, [r0, #24]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80050f2:	f005 fa2f 	bl	800a554 <HAL_TIM_Base_Init>
 80050f6:	b900      	cbnz	r0, 80050fa <MX_TIM16_Init+0x26>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80050f8:	bd10      	pop	{r4, pc}
 80050fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 80050fe:	f7fd b8a3 	b.w	8002248 <Error_Handler>
 8005102:	bf00      	nop
 8005104:	20001608 	.word	0x20001608
 8005108:	40014400 	.word	0x40014400

0800510c <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 800510c:	b510      	push	{r4, lr}
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 800510e:	480a      	ldr	r0, [pc, #40]	@ (8005138 <MX_TIM17_Init+0x2c>)
 8005110:	4c0a      	ldr	r4, [pc, #40]	@ (800513c <MX_TIM17_Init+0x30>)
  htim17.Init.Prescaler = 64000-1;
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005112:	2300      	movs	r3, #0
  htim17.Init.Prescaler = 64000-1;
 8005114:	f64f 11ff 	movw	r1, #63999	@ 0xf9ff
  htim17.Init.Period = 200-1;
 8005118:	22c7      	movs	r2, #199	@ 0xc7
  htim17.Init.Prescaler = 64000-1;
 800511a:	e9c0 4100 	strd	r4, r1, [r0]
  htim17.Init.Period = 200-1;
 800511e:	e9c0 3202 	strd	r3, r2, [r0, #8]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim17.Init.RepetitionCounter = 0;
 8005122:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005126:	6183      	str	r3, [r0, #24]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8005128:	f005 fa14 	bl	800a554 <HAL_TIM_Base_Init>
 800512c:	b900      	cbnz	r0, 8005130 <MX_TIM17_Init+0x24>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 800512e:	bd10      	pop	{r4, pc}
 8005130:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8005134:	f7fd b888 	b.w	8002248 <Error_Handler>
 8005138:	200015b8 	.word	0x200015b8
 800513c:	40014800 	.word	0x40014800

08005140 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005140:	b500      	push	{lr}

  if(tim_baseHandle->Instance==TIM2)
 8005142:	6803      	ldr	r3, [r0, #0]
 8005144:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
{
 8005148:	b085      	sub	sp, #20
  if(tim_baseHandle->Instance==TIM2)
 800514a:	d008      	beq.n	800515e <HAL_TIM_Base_MspInit+0x1e>
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM16)
 800514c:	4a21      	ldr	r2, [pc, #132]	@ (80051d4 <HAL_TIM_Base_MspInit+0x94>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d029      	beq.n	80051a6 <HAL_TIM_Base_MspInit+0x66>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM17)
 8005152:	4a21      	ldr	r2, [pc, #132]	@ (80051d8 <HAL_TIM_Base_MspInit+0x98>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d010      	beq.n	800517a <HAL_TIM_Base_MspInit+0x3a>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8005158:	b005      	add	sp, #20
 800515a:	f85d fb04 	ldr.w	pc, [sp], #4
  SET_BIT(RCC->APB1ENR1, Periphs);
 800515e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005162:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005164:	f042 0201 	orr.w	r2, r2, #1
 8005168:	659a      	str	r2, [r3, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800516a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800516c:	f003 0301 	and.w	r3, r3, #1
 8005170:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8005172:	9b01      	ldr	r3, [sp, #4]
 8005174:	b005      	add	sp, #20
 8005176:	f85d fb04 	ldr.w	pc, [sp], #4
  SET_BIT(RCC->APB2ENR, Periphs);
 800517a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 5, 0);
 800517e:	201a      	movs	r0, #26
 8005180:	6e19      	ldr	r1, [r3, #96]	@ 0x60
 8005182:	f441 2180 	orr.w	r1, r1, #262144	@ 0x40000
 8005186:	6619      	str	r1, [r3, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8005188:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800518a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800518e:	9303      	str	r3, [sp, #12]
 8005190:	2200      	movs	r2, #0
 8005192:	2105      	movs	r1, #5
  (void)tmpreg;
 8005194:	9b03      	ldr	r3, [sp, #12]
 8005196:	f000 ff13 	bl	8005fc0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 800519a:	201a      	movs	r0, #26
}
 800519c:	b005      	add	sp, #20
 800519e:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 80051a2:	f000 bf49 	b.w	8006038 <HAL_NVIC_EnableIRQ>
  SET_BIT(RCC->APB2ENR, Periphs);
 80051a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 15, 0);
 80051aa:	2019      	movs	r0, #25
 80051ac:	6e19      	ldr	r1, [r3, #96]	@ 0x60
 80051ae:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 80051b2:	6619      	str	r1, [r3, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80051b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80051b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051ba:	9302      	str	r3, [sp, #8]
 80051bc:	2200      	movs	r2, #0
 80051be:	210f      	movs	r1, #15
  (void)tmpreg;
 80051c0:	9b02      	ldr	r3, [sp, #8]
 80051c2:	f000 fefd 	bl	8005fc0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80051c6:	2019      	movs	r0, #25
}
 80051c8:	b005      	add	sp, #20
 80051ca:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 80051ce:	f000 bf33 	b.w	8006038 <HAL_NVIC_EnableIRQ>
 80051d2:	bf00      	nop
 80051d4:	40014400 	.word	0x40014400
 80051d8:	40014800 	.word	0x40014800
 80051dc:	00000000 	.word	0x00000000

080051e0 <MX_LPUART1_UART_Init>:
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
  hlpuart1.Init.Parity = UART_PARITY_NONE;
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80051e0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8005268 <MX_LPUART1_UART_Init+0x88>
{
 80051e4:	b510      	push	{r4, lr}
  hlpuart1.Instance = LPUART1;
 80051e6:	4822      	ldr	r0, [pc, #136]	@ (8005270 <MX_LPUART1_UART_Init+0x90>)
 80051e8:	4c22      	ldr	r4, [pc, #136]	@ (8005274 <MX_LPUART1_UART_Init+0x94>)
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80051ea:	2300      	movs	r3, #0
  hlpuart1.Init.BaudRate = 115200;
 80051ec:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80051f0:	220c      	movs	r2, #12
  hlpuart1.Init.BaudRate = 115200;
 80051f2:	e9c0 4100 	strd	r4, r1, [r0]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80051f6:	ed80 7b08 	vstr	d7, [r0, #32]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80051fa:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80051fe:	e9c0 3204 	strd	r3, r2, [r0, #16]
 8005202:	6183      	str	r3, [r0, #24]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005204:	6283      	str	r3, [r0, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8005206:	6643      	str	r3, [r0, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8005208:	f006 f952 	bl	800b4b0 <HAL_UART_Init>
 800520c:	b970      	cbnz	r0, 800522c <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800520e:	4818      	ldr	r0, [pc, #96]	@ (8005270 <MX_LPUART1_UART_Init+0x90>)
 8005210:	2100      	movs	r1, #0
 8005212:	f006 fb17 	bl	800b844 <HAL_UARTEx_SetTxFifoThreshold>
 8005216:	b988      	cbnz	r0, 800523c <MX_LPUART1_UART_Init+0x5c>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005218:	4815      	ldr	r0, [pc, #84]	@ (8005270 <MX_LPUART1_UART_Init+0x90>)
 800521a:	2100      	movs	r1, #0
 800521c:	f006 fb54 	bl	800b8c8 <HAL_UARTEx_SetRxFifoThreshold>
 8005220:	b9a0      	cbnz	r0, 800524c <MX_LPUART1_UART_Init+0x6c>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8005222:	4813      	ldr	r0, [pc, #76]	@ (8005270 <MX_LPUART1_UART_Init+0x90>)
 8005224:	f006 faf0 	bl	800b808 <HAL_UARTEx_DisableFifoMode>
 8005228:	b9b8      	cbnz	r0, 800525a <MX_LPUART1_UART_Init+0x7a>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800522a:	bd10      	pop	{r4, pc}
    Error_Handler();
 800522c:	f7fd f80c 	bl	8002248 <Error_Handler>
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005230:	480f      	ldr	r0, [pc, #60]	@ (8005270 <MX_LPUART1_UART_Init+0x90>)
 8005232:	2100      	movs	r1, #0
 8005234:	f006 fb06 	bl	800b844 <HAL_UARTEx_SetTxFifoThreshold>
 8005238:	2800      	cmp	r0, #0
 800523a:	d0ed      	beq.n	8005218 <MX_LPUART1_UART_Init+0x38>
    Error_Handler();
 800523c:	f7fd f804 	bl	8002248 <Error_Handler>
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005240:	480b      	ldr	r0, [pc, #44]	@ (8005270 <MX_LPUART1_UART_Init+0x90>)
 8005242:	2100      	movs	r1, #0
 8005244:	f006 fb40 	bl	800b8c8 <HAL_UARTEx_SetRxFifoThreshold>
 8005248:	2800      	cmp	r0, #0
 800524a:	d0ea      	beq.n	8005222 <MX_LPUART1_UART_Init+0x42>
    Error_Handler();
 800524c:	f7fc fffc 	bl	8002248 <Error_Handler>
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8005250:	4807      	ldr	r0, [pc, #28]	@ (8005270 <MX_LPUART1_UART_Init+0x90>)
 8005252:	f006 fad9 	bl	800b808 <HAL_UARTEx_DisableFifoMode>
 8005256:	2800      	cmp	r0, #0
 8005258:	d0e7      	beq.n	800522a <MX_LPUART1_UART_Init+0x4a>
}
 800525a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 800525e:	f7fc bff3 	b.w	8002248 <Error_Handler>
 8005262:	bf00      	nop
 8005264:	f3af 8000 	nop.w
	...
 8005270:	20001768 	.word	0x20001768
 8005274:	40008000 	.word	0x40008000

08005278 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005278:	b570      	push	{r4, r5, r6, lr}
 800527a:	4604      	mov	r4, r0
 800527c:	b09c      	sub	sp, #112	@ 0x70

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800527e:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005280:	2250      	movs	r2, #80	@ 0x50
 8005282:	a808      	add	r0, sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005284:	e9cd 1102 	strd	r1, r1, [sp, #8]
 8005288:	e9cd 1104 	strd	r1, r1, [sp, #16]
 800528c:	9106      	str	r1, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800528e:	f00a ff96 	bl	80101be <memset>
  if(uartHandle->Instance==LPUART1)
 8005292:	4b38      	ldr	r3, [pc, #224]	@ (8005374 <HAL_UART_MspInit+0xfc>)
 8005294:	6822      	ldr	r2, [r4, #0]
 8005296:	429a      	cmp	r2, r3
 8005298:	d001      	beq.n	800529e <HAL_UART_MspInit+0x26>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 800529a:	b01c      	add	sp, #112	@ 0x70
 800529c:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800529e:	2202      	movs	r2, #2
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_HSI;
 80052a0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80052a4:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80052a6:	9208      	str	r2, [sp, #32]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_HSI;
 80052a8:	930f      	str	r3, [sp, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80052aa:	f003 fdf3 	bl	8008e94 <HAL_RCCEx_PeriphCLKConfig>
 80052ae:	2800      	cmp	r0, #0
 80052b0:	d157      	bne.n	8005362 <HAL_UART_MspInit+0xea>
  SET_BIT(RCC->APB1ENR2, Periphs);
 80052b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80052b6:	a902      	add	r1, sp, #8
 80052b8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
    hdma_lpuart1_rx.Instance = DMA1_Channel2;
 80052ba:	4e2f      	ldr	r6, [pc, #188]	@ (8005378 <HAL_UART_MspInit+0x100>)
 80052bc:	f042 0201 	orr.w	r2, r2, #1
 80052c0:	65da      	str	r2, [r3, #92]	@ 0x5c
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 80052c2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80052c4:	f002 0201 	and.w	r2, r2, #1
 80052c8:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 80052ca:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80052cc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80052ce:	f042 0201 	orr.w	r2, r2, #1
 80052d2:	64da      	str	r2, [r3, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80052d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80052d6:	f003 0301 	and.w	r3, r3, #1
 80052da:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80052dc:	220c      	movs	r2, #12
 80052de:	2302      	movs	r3, #2
 80052e0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80052e4:	2200      	movs	r2, #0
  (void)tmpreg;
 80052e6:	9b00      	ldr	r3, [sp, #0]
 80052e8:	2300      	movs	r3, #0
 80052ea:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80052ee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80052f2:	2308      	movs	r3, #8
 80052f4:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80052f6:	f001 f857 	bl	80063a8 <HAL_GPIO_Init>
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 80052fa:	4920      	ldr	r1, [pc, #128]	@ (800537c <HAL_UART_MspInit+0x104>)
 80052fc:	2210      	movs	r2, #16
 80052fe:	2300      	movs	r3, #0
 8005300:	e9c6 1200 	strd	r1, r2, [r6]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8005304:	4630      	mov	r0, r6
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8005306:	2180      	movs	r1, #128	@ 0x80
 8005308:	2220      	movs	r2, #32
 800530a:	e9c6 3302 	strd	r3, r3, [r6, #8]
 800530e:	e9c6 1304 	strd	r1, r3, [r6, #16]
 8005312:	e9c6 3206 	strd	r3, r2, [r6, #24]
 8005316:	6233      	str	r3, [r6, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8005318:	f000 fe9c 	bl	8006054 <HAL_DMA_Init>
 800531c:	bb38      	cbnz	r0, 800536e <HAL_UART_MspInit+0xf6>
    hdma_lpuart1_tx.Instance = DMA1_Channel3;
 800531e:	4d18      	ldr	r5, [pc, #96]	@ (8005380 <HAL_UART_MspInit+0x108>)
 8005320:	4918      	ldr	r1, [pc, #96]	@ (8005384 <HAL_UART_MspInit+0x10c>)
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 8005322:	f8c4 6080 	str.w	r6, [r4, #128]	@ 0x80
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8005326:	2211      	movs	r2, #17
 8005328:	2300      	movs	r3, #0
 800532a:	e9c5 1200 	strd	r1, r2, [r5]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 800532e:	4628      	mov	r0, r5
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8005330:	2110      	movs	r1, #16
 8005332:	2280      	movs	r2, #128	@ 0x80
 8005334:	e9c5 1302 	strd	r1, r3, [r5, #8]
 8005338:	e9c5 3305 	strd	r3, r3, [r5, #20]
 800533c:	e9c5 3307 	strd	r3, r3, [r5, #28]
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 8005340:	62b4      	str	r4, [r6, #40]	@ 0x28
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8005342:	612a      	str	r2, [r5, #16]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8005344:	f000 fe86 	bl	8006054 <HAL_DMA_Init>
 8005348:	b970      	cbnz	r0, 8005368 <HAL_UART_MspInit+0xf0>
    HAL_NVIC_SetPriority(LPUART1_IRQn, 6, 0);
 800534a:	2200      	movs	r2, #0
 800534c:	2106      	movs	r1, #6
 800534e:	2025      	movs	r0, #37	@ 0x25
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 8005350:	67e5      	str	r5, [r4, #124]	@ 0x7c
 8005352:	62ac      	str	r4, [r5, #40]	@ 0x28
    HAL_NVIC_SetPriority(LPUART1_IRQn, 6, 0);
 8005354:	f000 fe34 	bl	8005fc0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8005358:	2025      	movs	r0, #37	@ 0x25
 800535a:	f000 fe6d 	bl	8006038 <HAL_NVIC_EnableIRQ>
}
 800535e:	b01c      	add	sp, #112	@ 0x70
 8005360:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 8005362:	f7fc ff71 	bl	8002248 <Error_Handler>
 8005366:	e7a4      	b.n	80052b2 <HAL_UART_MspInit+0x3a>
      Error_Handler();
 8005368:	f7fc ff6e 	bl	8002248 <Error_Handler>
 800536c:	e7ed      	b.n	800534a <HAL_UART_MspInit+0xd2>
      Error_Handler();
 800536e:	f7fc ff6b 	bl	8002248 <Error_Handler>
 8005372:	e7d4      	b.n	800531e <HAL_UART_MspInit+0xa6>
 8005374:	40008000 	.word	0x40008000
 8005378:	20001708 	.word	0x20001708
 800537c:	4002001c 	.word	0x4002001c
 8005380:	200016a8 	.word	0x200016a8
 8005384:	40020030 	.word	0x40020030

08005388 <HAL_UART_RxCpltCallback>:
  }
}

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
	if(huart->Instance==LPUART1){
 8005388:	4b18      	ldr	r3, [pc, #96]	@ (80053ec <HAL_UART_RxCpltCallback+0x64>)
 800538a:	6802      	ldr	r2, [r0, #0]
 800538c:	429a      	cmp	r2, r3
 800538e:	d000      	beq.n	8005392 <HAL_UART_RxCpltCallback+0xa>
 8005390:	4770      	bx	lr
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8005392:	b510      	push	{r4, lr}
		if(itest==0){
 8005394:	4c16      	ldr	r4, [pc, #88]	@ (80053f0 <HAL_UART_RxCpltCallback+0x68>)
 8005396:	6823      	ldr	r3, [r4, #0]
 8005398:	b1c3      	cbz	r3, 80053cc <HAL_UART_RxCpltCallback+0x44>
			timetest1=HAL_GetTick();
		}
		itest++;
 800539a:	3301      	adds	r3, #1
		if(itest>=10){
 800539c:	2b09      	cmp	r3, #9
 800539e:	dc1b      	bgt.n	80053d8 <HAL_UART_RxCpltCallback+0x50>
		itest++;
 80053a0:	6023      	str	r3, [r4, #0]




		}
		received_flag=1;
 80053a2:	4b14      	ldr	r3, [pc, #80]	@ (80053f4 <HAL_UART_RxCpltCallback+0x6c>)
		memcpy((uint8_t*)GNSSData.uartWorkingBuffer,(uint8_t *) workingbuffer,100);
 80053a4:	4914      	ldr	r1, [pc, #80]	@ (80053f8 <HAL_UART_RxCpltCallback+0x70>)
 80053a6:	4815      	ldr	r0, [pc, #84]	@ (80053fc <HAL_UART_RxCpltCallback+0x74>)
 80053a8:	2264      	movs	r2, #100	@ 0x64
		received_flag=1;
 80053aa:	2401      	movs	r4, #1
 80053ac:	601c      	str	r4, [r3, #0]
		memcpy((uint8_t*)GNSSData.uartWorkingBuffer,(uint8_t *) workingbuffer,100);
 80053ae:	f00a ff86 	bl	80102be <memcpy>
		__HAL_DMA_DISABLE_IT(&hdma_lpuart1_rx, DMA_IT_HT);
 80053b2:	4b13      	ldr	r3, [pc, #76]	@ (8005400 <HAL_UART_RxCpltCallback+0x78>)
		HAL_UART_Receive_DMA(&hlpuart1, (uint8_t *)workingbuffer, 100);
 80053b4:	4910      	ldr	r1, [pc, #64]	@ (80053f8 <HAL_UART_RxCpltCallback+0x70>)
		__HAL_DMA_DISABLE_IT(&hdma_lpuart1_rx, DMA_IT_HT);
 80053b6:	681c      	ldr	r4, [r3, #0]
		HAL_UART_Receive_DMA(&hlpuart1, (uint8_t *)workingbuffer, 100);
 80053b8:	4812      	ldr	r0, [pc, #72]	@ (8005404 <HAL_UART_RxCpltCallback+0x7c>)
		__HAL_DMA_DISABLE_IT(&hdma_lpuart1_rx, DMA_IT_HT);
 80053ba:	6823      	ldr	r3, [r4, #0]
 80053bc:	f023 0304 	bic.w	r3, r3, #4
 80053c0:	6023      	str	r3, [r4, #0]
		HAL_UART_Receive_DMA(&hlpuart1, (uint8_t *)workingbuffer, 100);
 80053c2:	2264      	movs	r2, #100	@ 0x64

	}

}
 80053c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		HAL_UART_Receive_DMA(&hlpuart1, (uint8_t *)workingbuffer, 100);
 80053c8:	f006 b9f6 	b.w	800b7b8 <HAL_UART_Receive_DMA>
			timetest1=HAL_GetTick();
 80053cc:	f000 f9ce 	bl	800576c <HAL_GetTick>
 80053d0:	4a0d      	ldr	r2, [pc, #52]	@ (8005408 <HAL_UART_RxCpltCallback+0x80>)
		itest++;
 80053d2:	6823      	ldr	r3, [r4, #0]
			timetest1=HAL_GetTick();
 80053d4:	6010      	str	r0, [r2, #0]
 80053d6:	e7e0      	b.n	800539a <HAL_UART_RxCpltCallback+0x12>
			itest=0;
 80053d8:	2300      	movs	r3, #0
 80053da:	6023      	str	r3, [r4, #0]
			timetest2=HAL_GetTick()-timetest1;
 80053dc:	f000 f9c6 	bl	800576c <HAL_GetTick>
 80053e0:	4a09      	ldr	r2, [pc, #36]	@ (8005408 <HAL_UART_RxCpltCallback+0x80>)
 80053e2:	4b0a      	ldr	r3, [pc, #40]	@ (800540c <HAL_UART_RxCpltCallback+0x84>)
 80053e4:	6812      	ldr	r2, [r2, #0]
 80053e6:	1a80      	subs	r0, r0, r2
 80053e8:	6018      	str	r0, [r3, #0]
 80053ea:	e7da      	b.n	80053a2 <HAL_UART_RxCpltCallback+0x1a>
 80053ec:	40008000 	.word	0x40008000
 80053f0:	200017fc 	.word	0x200017fc
 80053f4:	2000051c 	.word	0x2000051c
 80053f8:	2000100c 	.word	0x2000100c
 80053fc:	20000528 	.word	0x20000528
 8005400:	20001708 	.word	0x20001708
 8005404:	20001768 	.word	0x20001768
 8005408:	20001804 	.word	0x20001804
 800540c:	20001800 	.word	0x20001800

08005410 <usbtransmit>:
	gpupower=atoi((uint8_t *)usbnumbuf2);


}

void usbtransmit(void){
 8005410:	b5f0      	push	{r4, r5, r6, r7, lr}

	if(pagenumber>0){
 8005412:	4c82      	ldr	r4, [pc, #520]	@ (800561c <usbtransmit+0x20c>)
 8005414:	6823      	ldr	r3, [r4, #0]
 8005416:	2b00      	cmp	r3, #0
void usbtransmit(void){
 8005418:	b083      	sub	sp, #12
	if(pagenumber>0){
 800541a:	dd3b      	ble.n	8005494 <usbtransmit+0x84>
		ssd1306_Fill(Black);
 800541c:	2000      	movs	r0, #0
 800541e:	f7fd fa3f 	bl	80028a0 <ssd1306_Fill>
		ssd1306_SetCursor(32,32);
 8005422:	2120      	movs	r1, #32
 8005424:	4608      	mov	r0, r1
 8005426:	f7fd fd01 	bl	8002e2c <ssd1306_SetCursor>
		ssd1306_WriteString("write",Font_6x8,White);
 800542a:	4b7d      	ldr	r3, [pc, #500]	@ (8005620 <usbtransmit+0x210>)
		int taillefin=0;
	switch(usbtransmitstate){
 800542c:	4d7d      	ldr	r5, [pc, #500]	@ (8005624 <usbtransmit+0x214>)
		ssd1306_WriteString("write",Font_6x8,White);
 800542e:	487e      	ldr	r0, [pc, #504]	@ (8005628 <usbtransmit+0x218>)
 8005430:	e893 0006 	ldmia.w	r3, {r1, r2}
 8005434:	2301      	movs	r3, #1
 8005436:	f7fd fcdd 	bl	8002df4 <ssd1306_WriteString>
	switch(usbtransmitstate){
 800543a:	782b      	ldrb	r3, [r5, #0]
 800543c:	2b06      	cmp	r3, #6
 800543e:	d827      	bhi.n	8005490 <usbtransmit+0x80>
 8005440:	e8df f013 	tbh	[pc, r3, lsl #1]
 8005444:	000700b7 	.word	0x000700b7
 8005448:	005a0051 	.word	0x005a0051
 800544c:	00de0086 	.word	0x00de0086
 8005450:	0051      	.short	0x0051

		}

		break;
	case STATE_UNDER16PAGES2:
		SPIF_ReadPage(&hspif1,pagenumber, (uint8_t   *)flashread, pageoffset, 0);
 8005452:	4e76      	ldr	r6, [pc, #472]	@ (800562c <usbtransmit+0x21c>)
 8005454:	6821      	ldr	r1, [r4, #0]
 8005456:	6833      	ldr	r3, [r6, #0]
 8005458:	4875      	ldr	r0, [pc, #468]	@ (8005630 <usbtransmit+0x220>)
 800545a:	2200      	movs	r2, #0
 800545c:	9200      	str	r2, [sp, #0]
 800545e:	4a75      	ldr	r2, [pc, #468]	@ (8005634 <usbtransmit+0x224>)
 8005460:	f009 fb2e 	bl	800eac0 <SPIF_ReadPage>
		CDC_Transmit_FS((uint8_t   * )flashread,pageoffset);
 8005464:	8831      	ldrh	r1, [r6, #0]
 8005466:	4873      	ldr	r0, [pc, #460]	@ (8005634 <usbtransmit+0x224>)
 8005468:	f009 fbe4 	bl	800ec34 <CDC_Transmit_FS>
		HAL_Delay(100);
 800546c:	2064      	movs	r0, #100	@ 0x64
 800546e:	f000 f989 	bl	8005784 <HAL_Delay>

		break;
	case STATE_OVER16PAGES3:
		SPIF_ReadPage(&hspif1,pagenumber, (uint8_t   *)flashread, pageoffset, 0);
		CDC_Transmit_FS((uint8_t   * )flashread,pageoffset);
		taillefin = snprintf((char  *)usbbuffer,64,"findetrame\n\r");
 8005472:	4b71      	ldr	r3, [pc, #452]	@ (8005638 <usbtransmit+0x228>)
 8005474:	4c71      	ldr	r4, [pc, #452]	@ (800563c <usbtransmit+0x22c>)
 8005476:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005478:	781b      	ldrb	r3, [r3, #0]
 800547a:	6020      	str	r0, [r4, #0]
 800547c:	6061      	str	r1, [r4, #4]
		CDC_Transmit_FS((char  *)usbbuffer,taillefin);
 800547e:	4620      	mov	r0, r4
 8005480:	210c      	movs	r1, #12
		taillefin = snprintf((char  *)usbbuffer,64,"findetrame\n\r");
 8005482:	60a2      	str	r2, [r4, #8]
 8005484:	7323      	strb	r3, [r4, #12]
		CDC_Transmit_FS((char  *)usbbuffer,taillefin);
 8005486:	f009 fbd5 	bl	800ec34 <CDC_Transmit_FS>
		usbtransmitstate++;
 800548a:	782b      	ldrb	r3, [r5, #0]
 800548c:	3301      	adds	r3, #1
 800548e:	702b      	strb	r3, [r5, #0]


				}


}
 8005490:	b003      	add	sp, #12
 8005492:	bdf0      	pop	{r4, r5, r6, r7, pc}
					ssd1306_WriteString("write",Font_7x10,White);
 8005494:	4c6a      	ldr	r4, [pc, #424]	@ (8005640 <usbtransmit+0x230>)
					ssd1306_Fill(Black);
 8005496:	2000      	movs	r0, #0
 8005498:	f7fd fa02 	bl	80028a0 <ssd1306_Fill>
					ssd1306_SetCursor(32,40);
 800549c:	2128      	movs	r1, #40	@ 0x28
 800549e:	2020      	movs	r0, #32
 80054a0:	f7fd fcc4 	bl	8002e2c <ssd1306_SetCursor>
					ssd1306_WriteString("write",Font_7x10,White);
 80054a4:	e894 0006 	ldmia.w	r4, {r1, r2}
 80054a8:	2301      	movs	r3, #1
 80054aa:	485f      	ldr	r0, [pc, #380]	@ (8005628 <usbtransmit+0x218>)
 80054ac:	f7fd fca2 	bl	8002df4 <ssd1306_WriteString>
					ssd1306_SetCursor(32,50);
 80054b0:	2132      	movs	r1, #50	@ 0x32
 80054b2:	2020      	movs	r0, #32
 80054b4:	f7fd fcba 	bl	8002e2c <ssd1306_SetCursor>
					ssd1306_WriteString("nothing",Font_7x10,White);
 80054b8:	e894 0006 	ldmia.w	r4, {r1, r2}
 80054bc:	4861      	ldr	r0, [pc, #388]	@ (8005644 <usbtransmit+0x234>)
					usbtransmiten=0;
 80054be:	4d62      	ldr	r5, [pc, #392]	@ (8005648 <usbtransmit+0x238>)
					usbstate=USBSTATEFINISH;
 80054c0:	4c62      	ldr	r4, [pc, #392]	@ (800564c <usbtransmit+0x23c>)
					ssd1306_WriteString("nothing",Font_7x10,White);
 80054c2:	2301      	movs	r3, #1
 80054c4:	f7fd fc96 	bl	8002df4 <ssd1306_WriteString>
					osThreadSuspend(USBTRANSMITHandle);
 80054c8:	4861      	ldr	r0, [pc, #388]	@ (8005650 <usbtransmit+0x240>)
					usbindexsecteur=0;
 80054ca:	4962      	ldr	r1, [pc, #392]	@ (8005654 <usbtransmit+0x244>)
							usbindexpage=0;
 80054cc:	4a62      	ldr	r2, [pc, #392]	@ (8005658 <usbtransmit+0x248>)
					osThreadSuspend(USBTRANSMITHandle);
 80054ce:	6800      	ldr	r0, [r0, #0]
					usbtransmiten=0;
 80054d0:	2300      	movs	r3, #0
 80054d2:	602b      	str	r3, [r5, #0]
					usbstate=USBSTATEFINISH;
 80054d4:	2503      	movs	r5, #3
 80054d6:	7025      	strb	r5, [r4, #0]
					usbindexsecteur=0;
 80054d8:	600b      	str	r3, [r1, #0]
							usbindexpage=0;
 80054da:	6013      	str	r3, [r2, #0]
}
 80054dc:	b003      	add	sp, #12
 80054de:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
					osThreadSuspend(USBTRANSMITHandle);
 80054e2:	f007 befb 	b.w	800d2dc <osThreadSuspend>
		ssd1306_SetCursor(32,48);
 80054e6:	2130      	movs	r1, #48	@ 0x30
 80054e8:	2020      	movs	r0, #32
 80054ea:	f7fd fc9f 	bl	8002e2c <ssd1306_SetCursor>
		ssd1306_WriteString("finish",Font_7x10,White);
 80054ee:	4b54      	ldr	r3, [pc, #336]	@ (8005640 <usbtransmit+0x230>)
 80054f0:	485a      	ldr	r0, [pc, #360]	@ (800565c <usbtransmit+0x24c>)
 80054f2:	e893 0006 	ldmia.w	r3, {r1, r2}
 80054f6:	e7e2      	b.n	80054be <usbtransmit+0xae>
			SPIF_ReadSector(&hspif1,usbindexsecteur, (uint8_t  *)flashread, 2048, 0);
 80054f8:	4e56      	ldr	r6, [pc, #344]	@ (8005654 <usbtransmit+0x244>)
 80054fa:	4a4e      	ldr	r2, [pc, #312]	@ (8005634 <usbtransmit+0x224>)
 80054fc:	484c      	ldr	r0, [pc, #304]	@ (8005630 <usbtransmit+0x220>)
 80054fe:	2100      	movs	r1, #0
 8005500:	9100      	str	r1, [sp, #0]
 8005502:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005506:	6831      	ldr	r1, [r6, #0]
 8005508:	f009 fafc 	bl	800eb04 <SPIF_ReadSector>
			CDC_Transmit_FS((char  * )flashread,2048);
 800550c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005510:	4848      	ldr	r0, [pc, #288]	@ (8005634 <usbtransmit+0x224>)
 8005512:	f009 fb8f 	bl	800ec34 <CDC_Transmit_FS>
			percentage((float) (usbindexsecteur*16*100)/pagenumber);
 8005516:	6833      	ldr	r3, [r6, #0]
 8005518:	ed94 7a00 	vldr	s14, [r4]
 800551c:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8005520:	fb02 f303 	mul.w	r3, r2, r3
 8005524:	ee07 3a90 	vmov	s15, r3
 8005528:	eeb8 0ac7 	vcvt.f32.s32	s0, s14
 800552c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005530:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8005534:	f7fd fec4 	bl	80032c0 <percentage>
			if(usbindexsecteur==((int)(floor(pagenumber/16)))){
 8005538:	6822      	ldr	r2, [r4, #0]
			usbindexsecteur++;
 800553a:	6833      	ldr	r3, [r6, #0]
			if(usbindexsecteur==((int)(floor(pagenumber/16)))){
 800553c:	2a00      	cmp	r2, #0
			usbindexsecteur++;
 800553e:	f103 0301 	add.w	r3, r3, #1
			if(usbindexsecteur==((int)(floor(pagenumber/16)))){
 8005542:	bfb8      	it	lt
 8005544:	320f      	addlt	r2, #15
 8005546:	ebb3 1f22 	cmp.w	r3, r2, asr #4
			usbindexsecteur++;
 800554a:	6033      	str	r3, [r6, #0]
			if(usbindexsecteur==((int)(floor(pagenumber/16)))){
 800554c:	d1a0      	bne.n	8005490 <usbtransmit+0x80>
 800554e:	e79c      	b.n	800548a <usbtransmit+0x7a>
		SPIF_ReadPage(&hspif1,(usbindexsecteur*16+usbindexpage), (uint8_t  *)flashread, 256, 0);
 8005550:	4e41      	ldr	r6, [pc, #260]	@ (8005658 <usbtransmit+0x248>)
 8005552:	4f40      	ldr	r7, [pc, #256]	@ (8005654 <usbtransmit+0x244>)
 8005554:	6833      	ldr	r3, [r6, #0]
 8005556:	6839      	ldr	r1, [r7, #0]
 8005558:	4a36      	ldr	r2, [pc, #216]	@ (8005634 <usbtransmit+0x224>)
 800555a:	4835      	ldr	r0, [pc, #212]	@ (8005630 <usbtransmit+0x220>)
 800555c:	eb03 1101 	add.w	r1, r3, r1, lsl #4
 8005560:	2300      	movs	r3, #0
 8005562:	9300      	str	r3, [sp, #0]
 8005564:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005568:	f009 faaa 	bl	800eac0 <SPIF_ReadPage>
		CDC_Transmit_FS((char  * )flashread,256);
 800556c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005570:	4830      	ldr	r0, [pc, #192]	@ (8005634 <usbtransmit+0x224>)
 8005572:	f009 fb5f 	bl	800ec34 <CDC_Transmit_FS>
		percentage((float) ((usbindexsecteur*16+usbindexpage)*100)/pagenumber);
 8005576:	683a      	ldr	r2, [r7, #0]
 8005578:	6833      	ldr	r3, [r6, #0]
 800557a:	edd4 7a00 	vldr	s15, [r4]
 800557e:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8005582:	2264      	movs	r2, #100	@ 0x64
 8005584:	fb02 f303 	mul.w	r3, r2, r3
 8005588:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 800558c:	ee07 3a90 	vmov	s15, r3
 8005590:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005594:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8005598:	f7fd fe92 	bl	80032c0 <percentage>
		usbindexpage++;
 800559c:	6833      	ldr	r3, [r6, #0]
		if(((usbindexsecteur)*16+usbindexpage)==(pagenumber)){
 800559e:	683a      	ldr	r2, [r7, #0]
 80055a0:	6821      	ldr	r1, [r4, #0]
		usbindexpage++;
 80055a2:	3301      	adds	r3, #1
		if(((usbindexsecteur)*16+usbindexpage)==(pagenumber)){
 80055a4:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 80055a8:	428a      	cmp	r2, r1
		usbindexpage++;
 80055aa:	6033      	str	r3, [r6, #0]
		if(((usbindexsecteur)*16+usbindexpage)==(pagenumber)){
 80055ac:	f47f af70 	bne.w	8005490 <usbtransmit+0x80>
 80055b0:	e76b      	b.n	800548a <usbtransmit+0x7a>
		SPIF_ReadPage(&hspif1,usbindexpage, (uint8_t  *)flashread, 256, 0);
 80055b2:	4e29      	ldr	r6, [pc, #164]	@ (8005658 <usbtransmit+0x248>)
 80055b4:	4a1f      	ldr	r2, [pc, #124]	@ (8005634 <usbtransmit+0x224>)
 80055b6:	481e      	ldr	r0, [pc, #120]	@ (8005630 <usbtransmit+0x220>)
 80055b8:	2100      	movs	r1, #0
 80055ba:	9100      	str	r1, [sp, #0]
 80055bc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80055c0:	6831      	ldr	r1, [r6, #0]
 80055c2:	f009 fa7d 	bl	800eac0 <SPIF_ReadPage>
		CDC_Transmit_FS((char  * )flashread,256);
 80055c6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80055ca:	481a      	ldr	r0, [pc, #104]	@ (8005634 <usbtransmit+0x224>)
 80055cc:	f009 fb32 	bl	800ec34 <CDC_Transmit_FS>
		percentage((float) (usbindexpage*100)/pagenumber);
 80055d0:	6833      	ldr	r3, [r6, #0]
 80055d2:	ed94 7a00 	vldr	s14, [r4]
 80055d6:	2264      	movs	r2, #100	@ 0x64
 80055d8:	fb02 f303 	mul.w	r3, r2, r3
 80055dc:	ee07 3a90 	vmov	s15, r3
 80055e0:	eeb8 0ac7 	vcvt.f32.s32	s0, s14
 80055e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80055e8:	ee87 0a80 	vdiv.f32	s0, s15, s0
 80055ec:	f7fd fe68 	bl	80032c0 <percentage>
		usbindexpage++;
 80055f0:	6833      	ldr	r3, [r6, #0]
		if(usbindexpage==pagenumber){
 80055f2:	6822      	ldr	r2, [r4, #0]
		usbindexpage++;
 80055f4:	3301      	adds	r3, #1
		if(usbindexpage==pagenumber){
 80055f6:	4293      	cmp	r3, r2
		usbindexpage++;
 80055f8:	6033      	str	r3, [r6, #0]
		if(usbindexpage==pagenumber){
 80055fa:	f47f af49 	bne.w	8005490 <usbtransmit+0x80>
 80055fe:	e744      	b.n	800548a <usbtransmit+0x7a>
		SPIF_ReadPage(&hspif1,pagenumber, (uint8_t   *)flashread, pageoffset, 0);
 8005600:	4e0a      	ldr	r6, [pc, #40]	@ (800562c <usbtransmit+0x21c>)
 8005602:	6821      	ldr	r1, [r4, #0]
 8005604:	6833      	ldr	r3, [r6, #0]
 8005606:	480a      	ldr	r0, [pc, #40]	@ (8005630 <usbtransmit+0x220>)
 8005608:	2200      	movs	r2, #0
 800560a:	9200      	str	r2, [sp, #0]
 800560c:	4a09      	ldr	r2, [pc, #36]	@ (8005634 <usbtransmit+0x224>)
 800560e:	f009 fa57 	bl	800eac0 <SPIF_ReadPage>
		CDC_Transmit_FS((uint8_t   * )flashread,pageoffset);
 8005612:	8831      	ldrh	r1, [r6, #0]
 8005614:	4807      	ldr	r0, [pc, #28]	@ (8005634 <usbtransmit+0x224>)
 8005616:	f009 fb0d 	bl	800ec34 <CDC_Transmit_FS>
 800561a:	e72a      	b.n	8005472 <usbtransmit+0x62>
 800561c:	200006c8 	.word	0x200006c8
 8005620:	2000002c 	.word	0x2000002c
 8005624:	20001808 	.word	0x20001808
 8005628:	08017fb0 	.word	0x08017fb0
 800562c:	200006cc 	.word	0x200006cc
 8005630:	20000fe4 	.word	0x20000fe4
 8005634:	200006d0 	.word	0x200006d0
 8005638:	080180c4 	.word	0x080180c4
 800563c:	20000650 	.word	0x20000650
 8005640:	20000024 	.word	0x20000024
 8005644:	080180dc 	.word	0x080180dc
 8005648:	20000628 	.word	0x20000628
 800564c:	2000107c 	.word	0x2000107c
 8005650:	20000400 	.word	0x20000400
 8005654:	2000180c 	.word	0x2000180c
 8005658:	20001810 	.word	0x20001810
 800565c:	080180d4 	.word	0x080180d4

08005660 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8005660:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005662:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005664:	3304      	adds	r3, #4

08005666 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005666:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005668:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 800566a:	d3f9      	bcc.n	8005660 <CopyDataInit>
  bx lr
 800566c:	4770      	bx	lr

0800566e <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 800566e:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8005670:	3004      	adds	r0, #4

08005672 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8005672:	4288      	cmp	r0, r1
  bcc FillZerobss
 8005674:	d3fb      	bcc.n	800566e <FillZerobss>
  bx lr
 8005676:	4770      	bx	lr

08005678 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005678:	480c      	ldr	r0, [pc, #48]	@ (80056ac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800567a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800567c:	f7ff fcbe 	bl	8004ffc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8005680:	480b      	ldr	r0, [pc, #44]	@ (80056b0 <LoopForever+0x6>)
 8005682:	490c      	ldr	r1, [pc, #48]	@ (80056b4 <LoopForever+0xa>)
 8005684:	4a0c      	ldr	r2, [pc, #48]	@ (80056b8 <LoopForever+0xe>)
 8005686:	2300      	movs	r3, #0
 8005688:	f7ff ffed 	bl	8005666 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 800568c:	480b      	ldr	r0, [pc, #44]	@ (80056bc <LoopForever+0x12>)
 800568e:	490c      	ldr	r1, [pc, #48]	@ (80056c0 <LoopForever+0x16>)
 8005690:	4a0c      	ldr	r2, [pc, #48]	@ (80056c4 <LoopForever+0x1a>)
 8005692:	2300      	movs	r3, #0
 8005694:	f7ff ffe7 	bl	8005666 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8005698:	480b      	ldr	r0, [pc, #44]	@ (80056c8 <LoopForever+0x1e>)
 800569a:	490c      	ldr	r1, [pc, #48]	@ (80056cc <LoopForever+0x22>)
 800569c:	2300      	movs	r3, #0
 800569e:	f7ff ffe8 	bl	8005672 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80056a2:	f00a fde5 	bl	8010270 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80056a6:	f7fc fcbf 	bl	8002028 <main>

080056aa <LoopForever>:

LoopForever:
  b LoopForever
 80056aa:	e7fe      	b.n	80056aa <LoopForever>
  ldr   r0, =_estack
 80056ac:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 80056b0:	20000008 	.word	0x20000008
 80056b4:	20000310 	.word	0x20000310
 80056b8:	08018780 	.word	0x08018780
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80056bc:	20030000 	.word	0x20030000
 80056c0:	20030000 	.word	0x20030000
 80056c4:	08018a88 	.word	0x08018a88
  INIT_BSS _sbss, _ebss
 80056c8:	20000310 	.word	0x20000310
 80056cc:	20005ba4 	.word	0x20005ba4

080056d0 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80056d0:	e7fe      	b.n	80056d0 <ADC1_IRQHandler>
	...

080056d4 <HAL_MspDeInit>:

/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
 80056d4:	4770      	bx	lr
 80056d6:	bf00      	nop

080056d8 <HAL_DeInit>:
  SET_BIT(RCC->APB1RSTR1, Periphs);
 80056d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80056dc:	f04f 32ff 	mov.w	r2, #4294967295
 80056e0:	6b99      	ldr	r1, [r3, #56]	@ 0x38
{
 80056e2:	b510      	push	{r4, lr}
 80056e4:	639a      	str	r2, [r3, #56]	@ 0x38
  SET_BIT(RCC->APB1RSTR2, Periphs);
 80056e6:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 80056e8:	63da      	str	r2, [r3, #60]	@ 0x3c
  CLEAR_BIT(RCC->APB1RSTR1, Periphs);
 80056ea:	2400      	movs	r4, #0
 80056ec:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 80056ee:	639c      	str	r4, [r3, #56]	@ 0x38
  CLEAR_BIT(RCC->APB1RSTR2, Periphs);
 80056f0:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 80056f2:	63dc      	str	r4, [r3, #60]	@ 0x3c
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_ForceReset(uint32_t Periphs)
{
  SET_BIT(RCC->APB2RSTR, Periphs);
 80056f4:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80056f6:	641a      	str	r2, [r3, #64]	@ 0x40
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_ReleaseReset(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
 80056f8:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80056fa:	641c      	str	r4, [r3, #64]	@ 0x40
  *         @arg @ref LL_APB3_GRP1_PERIPH_RF
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_ForceReset(uint32_t Periphs)
{
  SET_BIT(RCC->APB3RSTR, Periphs);
 80056fc:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80056fe:	645a      	str	r2, [r3, #68]	@ 0x44
  *         @arg @ref LL_APB3_GRP1_PERIPH_RF
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_ReleaseReset(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB3RSTR, Periphs);
 8005700:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8005702:	645c      	str	r4, [r3, #68]	@ 0x44
  SET_BIT(RCC->AHB1RSTR, Periphs);
 8005704:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8005706:	629a      	str	r2, [r3, #40]	@ 0x28
  CLEAR_BIT(RCC->AHB1RSTR, Periphs);
 8005708:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800570a:	629c      	str	r4, [r3, #40]	@ 0x28
  SET_BIT(RCC->AHB2RSTR, Periphs);
 800570c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800570e:	62da      	str	r2, [r3, #44]	@ 0x2c
  CLEAR_BIT(RCC->AHB2RSTR, Periphs);
 8005710:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005712:	62dc      	str	r4, [r3, #44]	@ 0x2c
  SET_BIT(RCC->AHB3RSTR, Periphs);
 8005714:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8005716:	631a      	str	r2, [r3, #48]	@ 0x30
  CLEAR_BIT(RCC->AHB3RSTR, Periphs);
 8005718:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800571a:	631c      	str	r4, [r3, #48]	@ 0x30
  HAL_MspDeInit();
 800571c:	f7ff ffda 	bl	80056d4 <HAL_MspDeInit>
}
 8005720:	4620      	mov	r0, r4
 8005722:	bd10      	pop	{r4, pc}

08005724 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005724:	4a0a      	ldr	r2, [pc, #40]	@ (8005750 <HAL_Init+0x2c>)
 8005726:	6813      	ldr	r3, [r2, #0]
 8005728:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
{
 800572c:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800572e:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005730:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005732:	f000 fc33 	bl	8005f9c <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005736:	200f      	movs	r0, #15
 8005738:	f7ff faf2 	bl	8004d20 <HAL_InitTick>
 800573c:	b110      	cbz	r0, 8005744 <HAL_Init+0x20>
    status = HAL_ERROR;
 800573e:	2401      	movs	r4, #1
}
 8005740:	4620      	mov	r0, r4
 8005742:	bd10      	pop	{r4, pc}
 8005744:	4604      	mov	r4, r0
    HAL_MspInit();
 8005746:	f7ff facd 	bl	8004ce4 <HAL_MspInit>
}
 800574a:	4620      	mov	r0, r4
 800574c:	bd10      	pop	{r4, pc}
 800574e:	bf00      	nop
 8005750:	58004000 	.word	0x58004000

08005754 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8005754:	4a03      	ldr	r2, [pc, #12]	@ (8005764 <HAL_IncTick+0x10>)
 8005756:	4b04      	ldr	r3, [pc, #16]	@ (8005768 <HAL_IncTick+0x14>)
 8005758:	6811      	ldr	r1, [r2, #0]
 800575a:	781b      	ldrb	r3, [r3, #0]
 800575c:	440b      	add	r3, r1
 800575e:	6013      	str	r3, [r2, #0]
}
 8005760:	4770      	bx	lr
 8005762:	bf00      	nop
 8005764:	20001814 	.word	0x20001814
 8005768:	20000038 	.word	0x20000038

0800576c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800576c:	4b01      	ldr	r3, [pc, #4]	@ (8005774 <HAL_GetTick+0x8>)
 800576e:	6818      	ldr	r0, [r3, #0]
}
 8005770:	4770      	bx	lr
 8005772:	bf00      	nop
 8005774:	20001814 	.word	0x20001814

08005778 <HAL_GetTickPrio>:
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
  return uwTickPrio;
 8005778:	4b01      	ldr	r3, [pc, #4]	@ (8005780 <HAL_GetTickPrio+0x8>)
}
 800577a:	6818      	ldr	r0, [r3, #0]
 800577c:	4770      	bx	lr
 800577e:	bf00      	nop
 8005780:	2000003c 	.word	0x2000003c

08005784 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005784:	b538      	push	{r3, r4, r5, lr}
 8005786:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8005788:	f7ff fff0 	bl	800576c <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800578c:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 800578e:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8005790:	d002      	beq.n	8005798 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8005792:	4b04      	ldr	r3, [pc, #16]	@ (80057a4 <HAL_Delay+0x20>)
 8005794:	781b      	ldrb	r3, [r3, #0]
 8005796:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005798:	f7ff ffe8 	bl	800576c <HAL_GetTick>
 800579c:	1b40      	subs	r0, r0, r5
 800579e:	42a0      	cmp	r0, r4
 80057a0:	d3fa      	bcc.n	8005798 <HAL_Delay+0x14>
  {
  }
}
 80057a2:	bd38      	pop	{r3, r4, r5, pc}
 80057a4:	20000038 	.word	0x20000038

080057a8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80057a8:	b530      	push	{r4, r5, lr}
 80057aa:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR = 0UL;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80057ac:	2300      	movs	r3, #0
 80057ae:	9301      	str	r3, [sp, #4]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Check ADC handle */
  if (hadc == NULL)
 80057b0:	2800      	cmp	r0, #0
 80057b2:	f000 8087 	beq.w	80058c4 <HAL_ADC_Init+0x11c>
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80057b6:	6d45      	ldr	r5, [r0, #84]	@ 0x54
 80057b8:	4604      	mov	r4, r0
 80057ba:	2d00      	cmp	r5, #0
 80057bc:	f000 8087 	beq.w	80058ce <HAL_ADC_Init+0x126>

  /* - Exit from deep power-down mode and ADC voltage regulator enable        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  /* Feature "deep power-down" not available on ADC peripheral of this STM32WB device */
#else
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80057c0:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80057c2:	6893      	ldr	r3, [r2, #8]
 80057c4:	0098      	lsls	r0, r3, #2
 80057c6:	d505      	bpl.n	80057d4 <HAL_ADC_Init+0x2c>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80057c8:	6893      	ldr	r3, [r2, #8]
 80057ca:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80057ce:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80057d2:	6093      	str	r3, [r2, #8]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80057d4:	6893      	ldr	r3, [r2, #8]
 80057d6:	00d9      	lsls	r1, r3, #3
 80057d8:	d419      	bmi.n	800580e <HAL_ADC_Init+0x66>
    LL_ADC_EnableInternalRegulator(hadc->Instance);

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80057da:	4b5a      	ldr	r3, [pc, #360]	@ (8005944 <HAL_ADC_Init+0x19c>)
 80057dc:	485a      	ldr	r0, [pc, #360]	@ (8005948 <HAL_ADC_Init+0x1a0>)
 80057de:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(ADCx->CR,
 80057e0:	6891      	ldr	r1, [r2, #8]
 80057e2:	099b      	lsrs	r3, r3, #6
 80057e4:	fba0 0303 	umull	r0, r3, r0, r3
 80057e8:	f021 4110 	bic.w	r1, r1, #2415919104	@ 0x90000000
 80057ec:	099b      	lsrs	r3, r3, #6
 80057ee:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 80057f2:	3301      	adds	r3, #1
 80057f4:	005b      	lsls	r3, r3, #1
 80057f6:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 80057fa:	6091      	str	r1, [r2, #8]
 80057fc:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80057fe:	9b01      	ldr	r3, [sp, #4]
 8005800:	b12b      	cbz	r3, 800580e <HAL_ADC_Init+0x66>
    {
      wait_loop_index--;
 8005802:	9b01      	ldr	r3, [sp, #4]
 8005804:	3b01      	subs	r3, #1
 8005806:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8005808:	9b01      	ldr	r3, [sp, #4]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d1f9      	bne.n	8005802 <HAL_ADC_Init+0x5a>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800580e:	6893      	ldr	r3, [r2, #8]
 8005810:	00db      	lsls	r3, r3, #3
 8005812:	d45a      	bmi.n	80058ca <HAL_ADC_Init+0x122>
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005814:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8005816:	f043 0310 	orr.w	r3, r3, #16
 800581a:	6563      	str	r3, [r4, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800581c:	6da3      	ldr	r3, [r4, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800581e:	2001      	movs	r0, #1
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005820:	4303      	orrs	r3, r0
 8005822:	65a3      	str	r3, [r4, #88]	@ 0x58
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005824:	6893      	ldr	r3, [r2, #8]
 8005826:	f013 0f04 	tst.w	r3, #4
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800582a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800582c:	d146      	bne.n	80058bc <HAL_ADC_Init+0x114>
 800582e:	06dd      	lsls	r5, r3, #27
 8005830:	d444      	bmi.n	80058bc <HAL_ADC_Init+0x114>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005832:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8005834:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8005838:	f043 0302 	orr.w	r3, r3, #2
 800583c:	6563      	str	r3, [r4, #84]	@ 0x54
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800583e:	6893      	ldr	r3, [r2, #8]
 8005840:	07d9      	lsls	r1, r3, #31
 8005842:	d40a      	bmi.n	800585a <HAL_ADC_Init+0xb2>
 8005844:	4b41      	ldr	r3, [pc, #260]	@ (800594c <HAL_ADC_Init+0x1a4>)
 8005846:	689b      	ldr	r3, [r3, #8]
 8005848:	07db      	lsls	r3, r3, #31
 800584a:	d406      	bmi.n	800585a <HAL_ADC_Init+0xb2>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800584c:	4940      	ldr	r1, [pc, #256]	@ (8005950 <HAL_ADC_Init+0x1a8>)
 800584e:	6865      	ldr	r5, [r4, #4]
 8005850:	688b      	ldr	r3, [r1, #8]
 8005852:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 8005856:	432b      	orrs	r3, r5
 8005858:	608b      	str	r3, [r1, #8]
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
                hadc->Init.Overrun                                                     |
                hadc->Init.DataAlign                                                   |
 800585a:	68e5      	ldr	r5, [r4, #12]
 800585c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
                hadc->Init.Resolution                                                  |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800585e:	f894 1020 	ldrb.w	r1, [r4, #32]
                hadc->Init.DataAlign                                                   |
 8005862:	432b      	orrs	r3, r5
 8005864:	68a5      	ldr	r5, [r4, #8]
 8005866:	432b      	orrs	r3, r5
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005868:	7e65      	ldrb	r5, [r4, #25]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800586a:	2901      	cmp	r1, #1
                hadc->Init.DataAlign                                                   |
 800586c:	ea43 3345 	orr.w	r3, r3, r5, lsl #13
                hadc->Init.Resolution                                                  |
 8005870:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005874:	d047      	beq.n	8005906 <HAL_ADC_Init+0x15e>
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005876:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8005878:	b121      	cbz	r1, 8005884 <HAL_ADC_Init+0xdc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
                  | hadc->Init.ExternalTrigConvEdge
 800587a:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800587c:	f401 7170 	and.w	r1, r1, #960	@ 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8005880:	4329      	orrs	r1, r5
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005882:	430b      	orrs	r3, r1
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8005884:	68d5      	ldr	r5, [r2, #12]
 8005886:	4933      	ldr	r1, [pc, #204]	@ (8005954 <HAL_ADC_Init+0x1ac>)
 8005888:	4029      	ands	r1, r5
 800588a:	4319      	orrs	r1, r3
 800588c:	60d1      	str	r1, [r2, #12]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800588e:	6891      	ldr	r1, [r2, #8]
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005890:	6893      	ldr	r3, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005892:	f001 0104 	and.w	r1, r1, #4
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005896:	f003 0308 	and.w	r3, r3, #8
 800589a:	430b      	orrs	r3, r1
 800589c:	d01d      	beq.n	80058da <HAL_ADC_Init+0x132>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800589e:	6923      	ldr	r3, [r4, #16]
 80058a0:	2b01      	cmp	r3, #1
 80058a2:	d035      	beq.n	8005910 <HAL_ADC_Init+0x168>
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80058a4:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 80058a6:	f023 030f 	bic.w	r3, r3, #15
 80058aa:	6313      	str	r3, [r2, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80058ac:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80058ae:	f023 0303 	bic.w	r3, r3, #3
 80058b2:	f043 0301 	orr.w	r3, r3, #1
 80058b6:	6563      	str	r3, [r4, #84]	@ 0x54
    tmp_hal_status = HAL_ERROR;
  }

  /* Return function status */
  return tmp_hal_status;
}
 80058b8:	b003      	add	sp, #12
 80058ba:	bd30      	pop	{r4, r5, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80058bc:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80058be:	f043 0310 	orr.w	r3, r3, #16
 80058c2:	6563      	str	r3, [r4, #84]	@ 0x54
    return HAL_ERROR;
 80058c4:	2001      	movs	r0, #1
}
 80058c6:	b003      	add	sp, #12
 80058c8:	bd30      	pop	{r4, r5, pc}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80058ca:	2000      	movs	r0, #0
 80058cc:	e7aa      	b.n	8005824 <HAL_ADC_Init+0x7c>
    HAL_ADC_MspInit(hadc);
 80058ce:	f7fb fda3 	bl	8001418 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 80058d2:	65a5      	str	r5, [r4, #88]	@ 0x58
    hadc->Lock = HAL_UNLOCKED;
 80058d4:	f884 5050 	strb.w	r5, [r4, #80]	@ 0x50
 80058d8:	e772      	b.n	80057c0 <HAL_ADC_Init+0x18>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80058da:	68d1      	ldr	r1, [r2, #12]
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80058dc:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80058e0:	7e25      	ldrb	r5, [r4, #24]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80058e2:	f421 4180 	bic.w	r1, r1, #16384	@ 0x4000
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80058e6:	005b      	lsls	r3, r3, #1
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80058e8:	f021 0102 	bic.w	r1, r1, #2
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80058ec:	ea43 3385 	orr.w	r3, r3, r5, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80058f0:	430b      	orrs	r3, r1
 80058f2:	60d3      	str	r3, [r2, #12]
      if (hadc->Init.OversamplingMode == ENABLE)
 80058f4:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 80058f8:	2b01      	cmp	r3, #1
 80058fa:	d011      	beq.n	8005920 <HAL_ADC_Init+0x178>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80058fc:	6913      	ldr	r3, [r2, #16]
 80058fe:	f023 0301 	bic.w	r3, r3, #1
 8005902:	6113      	str	r3, [r2, #16]
 8005904:	e7cb      	b.n	800589e <HAL_ADC_Init+0xf6>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8005906:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8005908:	3901      	subs	r1, #1
 800590a:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 800590e:	e7b2      	b.n	8005876 <HAL_ADC_Init+0xce>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8005910:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8005912:	69e3      	ldr	r3, [r4, #28]
 8005914:	f021 010f 	bic.w	r1, r1, #15
 8005918:	3b01      	subs	r3, #1
 800591a:	430b      	orrs	r3, r1
 800591c:	6313      	str	r3, [r2, #48]	@ 0x30
 800591e:	e7c5      	b.n	80058ac <HAL_ADC_Init+0x104>
        MODIFY_REG(hadc->Instance->CFGR2,
 8005920:	6911      	ldr	r1, [r2, #16]
 8005922:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8005924:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 8005926:	f421 61ff 	bic.w	r1, r1, #2040	@ 0x7f8
 800592a:	f021 0104 	bic.w	r1, r1, #4
 800592e:	432b      	orrs	r3, r5
 8005930:	430b      	orrs	r3, r1
 8005932:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8005934:	430b      	orrs	r3, r1
 8005936:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8005938:	430b      	orrs	r3, r1
 800593a:	f043 0301 	orr.w	r3, r3, #1
 800593e:	6113      	str	r3, [r2, #16]
 8005940:	e7ad      	b.n	800589e <HAL_ADC_Init+0xf6>
 8005942:	bf00      	nop
 8005944:	20000034 	.word	0x20000034
 8005948:	053e2d63 	.word	0x053e2d63
 800594c:	50040000 	.word	0x50040000
 8005950:	50040300 	.word	0x50040300
 8005954:	fff0c007 	.word	0xfff0c007

08005958 <HAL_ADC_ConvHalfCpltCallback>:
/**
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
 8005958:	4770      	bx	lr
 800595a:	bf00      	nop

0800595c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800595c:	b508      	push	{r3, lr}

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800595e:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8005960:	f7ff fffa 	bl	8005958 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005964:	bd08      	pop	{r3, pc}
 8005966:	bf00      	nop

08005968 <HAL_ADC_ErrorCallback>:
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
 8005968:	4770      	bx	lr
 800596a:	bf00      	nop

0800596c <ADC_DMAConvCplt>:
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800596c:	6a83      	ldr	r3, [r0, #40]	@ 0x28
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800596e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005970:	f012 0f50 	tst.w	r2, #80	@ 0x50
{
 8005974:	b510      	push	{r4, lr}
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005976:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8005978:	d11d      	bne.n	80059b6 <ADC_DMAConvCplt+0x4a>
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800597a:	6819      	ldr	r1, [r3, #0]
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800597c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005980:	655a      	str	r2, [r3, #84]	@ 0x54
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8005982:	680a      	ldr	r2, [r1, #0]
 8005984:	f012 0f08 	tst.w	r2, #8
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8005988:	68ca      	ldr	r2, [r1, #12]
 800598a:	d01b      	beq.n	80059c4 <ADC_DMAConvCplt+0x58>
 800598c:	f412 6f40 	tst.w	r2, #3072	@ 0xc00
 8005990:	d10d      	bne.n	80059ae <ADC_DMAConvCplt+0x42>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8005992:	68ca      	ldr	r2, [r1, #12]
 8005994:	0494      	lsls	r4, r2, #18
 8005996:	d40a      	bmi.n	80059ae <ADC_DMAConvCplt+0x42>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005998:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800599a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800599e:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80059a0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80059a2:	04d1      	lsls	r1, r2, #19
 80059a4:	d403      	bmi.n	80059ae <ADC_DMAConvCplt+0x42>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80059a6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80059a8:	f042 0201 	orr.w	r2, r2, #1
 80059ac:	655a      	str	r2, [r3, #84]	@ 0x54
    HAL_ADC_ConvCpltCallback(hadc);
 80059ae:	4618      	mov	r0, r3
 80059b0:	f7fb fd82 	bl	80014b8 <HAL_ADC_ConvCpltCallback>
}
 80059b4:	bd10      	pop	{r4, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80059b6:	06d2      	lsls	r2, r2, #27
 80059b8:	d40a      	bmi.n	80059d0 <ADC_DMAConvCplt+0x64>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80059ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80059bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80059c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059c2:	4718      	bx	r3
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80059c4:	0790      	lsls	r0, r2, #30
 80059c6:	d5e7      	bpl.n	8005998 <ADC_DMAConvCplt+0x2c>
    HAL_ADC_ConvCpltCallback(hadc);
 80059c8:	4618      	mov	r0, r3
 80059ca:	f7fb fd75 	bl	80014b8 <HAL_ADC_ConvCpltCallback>
 80059ce:	e7f1      	b.n	80059b4 <ADC_DMAConvCplt+0x48>
      HAL_ADC_ErrorCallback(hadc);
 80059d0:	4618      	mov	r0, r3
 80059d2:	f7ff ffc9 	bl	8005968 <HAL_ADC_ErrorCallback>
}
 80059d6:	bd10      	pop	{r4, pc}

080059d8 <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80059d8:	6a80      	ldr	r0, [r0, #40]	@ 0x28
{
 80059da:	b508      	push	{r3, lr}

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80059dc:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 80059de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80059e2:	6543      	str	r3, [r0, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80059e4:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 80059e6:	f043 0304 	orr.w	r3, r3, #4
 80059ea:	6583      	str	r3, [r0, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80059ec:	f7ff ffbc 	bl	8005968 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80059f0:	bd08      	pop	{r3, pc}
 80059f2:	bf00      	nop

080059f4 <HAL_ADC_ConfigChannel>:
{
 80059f4:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hadc);
 80059f6:	f890 2050 	ldrb.w	r2, [r0, #80]	@ 0x50
{
 80059fa:	b083      	sub	sp, #12
 80059fc:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 80059fe:	2a01      	cmp	r2, #1
  __IO uint32_t wait_loop_index = 0;
 8005a00:	f04f 0000 	mov.w	r0, #0
 8005a04:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 8005a06:	f000 80e9 	beq.w	8005bdc <HAL_ADC_ConfigChannel+0x1e8>
 8005a0a:	2001      	movs	r0, #1
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005a0c:	681a      	ldr	r2, [r3, #0]
  __HAL_LOCK(hadc);
 8005a0e:	f883 0050 	strb.w	r0, [r3, #80]	@ 0x50
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005a12:	6890      	ldr	r0, [r2, #8]
 8005a14:	0745      	lsls	r5, r0, #29
 8005a16:	d509      	bpl.n	8005a2c <HAL_ADC_ConfigChannel+0x38>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005a18:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005a1a:	f042 0220 	orr.w	r2, r2, #32
 8005a1e:	655a      	str	r2, [r3, #84]	@ 0x54
    tmp_hal_status = HAL_ERROR;
 8005a20:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8005a22:	2200      	movs	r2, #0
 8005a24:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
}
 8005a28:	b003      	add	sp, #12
 8005a2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8005a2c:	6848      	ldr	r0, [r1, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8005a2e:	ea4f 1e90 	mov.w	lr, r0, lsr #6
  MODIFY_REG(*preg,
 8005a32:	f000 0c1f 	and.w	ip, r0, #31
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8005a36:	f00e 0e0c 	and.w	lr, lr, #12
  MODIFY_REG(*preg,
 8005a3a:	6808      	ldr	r0, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8005a3c:	f102 0430 	add.w	r4, r2, #48	@ 0x30
  MODIFY_REG(*preg,
 8005a40:	f3c0 6084 	ubfx	r0, r0, #26, #5
 8005a44:	f854 500e 	ldr.w	r5, [r4, lr]
 8005a48:	261f      	movs	r6, #31
 8005a4a:	fa00 f00c 	lsl.w	r0, r0, ip
 8005a4e:	fa06 fc0c 	lsl.w	ip, r6, ip
 8005a52:	ea25 0c0c 	bic.w	ip, r5, ip
 8005a56:	ea40 000c 	orr.w	r0, r0, ip
 8005a5a:	f844 000e 	str.w	r0, [r4, lr]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005a5e:	6890      	ldr	r0, [r2, #8]
 8005a60:	f010 0f04 	tst.w	r0, #4
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005a64:	6890      	ldr	r0, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005a66:	d101      	bne.n	8005a6c <HAL_ADC_ConfigChannel+0x78>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005a68:	0704      	lsls	r4, r0, #28
 8005a6a:	d538      	bpl.n	8005ade <HAL_ADC_ConfigChannel+0xea>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005a6c:	6890      	ldr	r0, [r2, #8]
 8005a6e:	07c0      	lsls	r0, r0, #31
 8005a70:	d433      	bmi.n	8005ada <HAL_ADC_ConfigChannel+0xe6>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8005a72:	68ce      	ldr	r6, [r1, #12]
 8005a74:	680c      	ldr	r4, [r1, #0]
  MODIFY_REG(ADCx->DIFSEL,
 8005a76:	48c0      	ldr	r0, [pc, #768]	@ (8005d78 <HAL_ADC_ConfigChannel+0x384>)
 8005a78:	f8d2 50b0 	ldr.w	r5, [r2, #176]	@ 0xb0
 8005a7c:	f006 0718 	and.w	r7, r6, #24
 8005a80:	40f8      	lsrs	r0, r7
 8005a82:	f3c4 0712 	ubfx	r7, r4, #0, #19
 8005a86:	4020      	ands	r0, r4
 8005a88:	ea25 0507 	bic.w	r5, r5, r7
 8005a8c:	4328      	orrs	r0, r5
 8005a8e:	f8c2 00b0 	str.w	r0, [r2, #176]	@ 0xb0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005a92:	48ba      	ldr	r0, [pc, #744]	@ (8005d7c <HAL_ADC_ConfigChannel+0x388>)
 8005a94:	4286      	cmp	r6, r0
 8005a96:	d051      	beq.n	8005b3c <HAL_ADC_ConfigChannel+0x148>
      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8005a98:	49b9      	ldr	r1, [pc, #740]	@ (8005d80 <HAL_ADC_ConfigChannel+0x38c>)
 8005a9a:	420c      	tst	r4, r1
 8005a9c:	d01d      	beq.n	8005ada <HAL_ADC_ConfigChannel+0xe6>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8005a9e:	48b9      	ldr	r0, [pc, #740]	@ (8005d84 <HAL_ADC_ConfigChannel+0x390>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005aa0:	49b9      	ldr	r1, [pc, #740]	@ (8005d88 <HAL_ADC_ConfigChannel+0x394>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8005aa2:	6886      	ldr	r6, [r0, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005aa4:	688d      	ldr	r5, [r1, #8]
 8005aa6:	07ef      	lsls	r7, r5, #31
 8005aa8:	d4b6      	bmi.n	8005a18 <HAL_ADC_ConfigChannel+0x24>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005aaa:	4db8      	ldr	r5, [pc, #736]	@ (8005d8c <HAL_ADC_ConfigChannel+0x398>)
 8005aac:	42ac      	cmp	r4, r5
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8005aae:	f006 77e0 	and.w	r7, r6, #29360128	@ 0x1c00000
 8005ab2:	f000 80aa 	beq.w	8005c0a <HAL_ADC_ConfigChannel+0x216>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005ab6:	4db6      	ldr	r5, [pc, #728]	@ (8005d90 <HAL_ADC_ConfigChannel+0x39c>)
 8005ab8:	42ac      	cmp	r4, r5
 8005aba:	f000 814e 	beq.w	8005d5a <HAL_ADC_ConfigChannel+0x366>
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005abe:	4db5      	ldr	r5, [pc, #724]	@ (8005d94 <HAL_ADC_ConfigChannel+0x3a0>)
 8005ac0:	42ac      	cmp	r4, r5
 8005ac2:	d10a      	bne.n	8005ada <HAL_ADC_ConfigChannel+0xe6>
 8005ac4:	0274      	lsls	r4, r6, #9
 8005ac6:	d408      	bmi.n	8005ada <HAL_ADC_ConfigChannel+0xe6>
            if (ADC_VREFINT_INSTANCE(hadc))
 8005ac8:	428a      	cmp	r2, r1
 8005aca:	d106      	bne.n	8005ada <HAL_ADC_ConfigChannel+0xe6>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8005acc:	6882      	ldr	r2, [r0, #8]
 8005ace:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 8005ad2:	433a      	orrs	r2, r7
 8005ad4:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8005ad8:	6082      	str	r2, [r0, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005ada:	2000      	movs	r0, #0
 8005adc:	e7a1      	b.n	8005a22 <HAL_ADC_ConfigChannel+0x2e>
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8005ade:	680c      	ldr	r4, [r1, #0]
  MODIFY_REG(*preg,
 8005ae0:	6888      	ldr	r0, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005ae2:	0de5      	lsrs	r5, r4, #23
 8005ae4:	f005 0504 	and.w	r5, r5, #4
 8005ae8:	f102 0614 	add.w	r6, r2, #20
  MODIFY_REG(*preg,
 8005aec:	f3c4 5404 	ubfx	r4, r4, #20, #5
 8005af0:	fa00 f704 	lsl.w	r7, r0, r4
 8005af4:	f04f 0c07 	mov.w	ip, #7
 8005af8:	5970      	ldr	r0, [r6, r5]
 8005afa:	fa0c f404 	lsl.w	r4, ip, r4
 8005afe:	ea20 0004 	bic.w	r0, r0, r4
 8005b02:	4338      	orrs	r0, r7
 8005b04:	5170      	str	r0, [r6, r5]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8005b06:	e9d1 6004 	ldrd	r6, r0, [r1, #16]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005b0a:	2e04      	cmp	r6, #4
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8005b0c:	68d4      	ldr	r4, [r2, #12]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005b0e:	f102 0560 	add.w	r5, r2, #96	@ 0x60
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005b12:	f000 809e 	beq.w	8005c52 <HAL_ADC_ConfigChannel+0x25e>
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8005b16:	f3c4 04c1 	ubfx	r4, r4, #3, #2
 8005b1a:	0064      	lsls	r4, r4, #1
  MODIFY_REG(*preg,
 8005b1c:	f855 c026 	ldr.w	ip, [r5, r6, lsl #2]
 8005b20:	4f9d      	ldr	r7, [pc, #628]	@ (8005d98 <HAL_ADC_ConfigChannel+0x3a4>)
 8005b22:	40a0      	lsls	r0, r4
 8005b24:	680c      	ldr	r4, [r1, #0]
 8005b26:	ea0c 0707 	and.w	r7, ip, r7
 8005b2a:	f004 44f8 	and.w	r4, r4, #2080374784	@ 0x7c000000
 8005b2e:	433c      	orrs	r4, r7
 8005b30:	4320      	orrs	r0, r4
 8005b32:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8005b36:	f845 0026 	str.w	r0, [r5, r6, lsl #2]
}
 8005b3a:	e797      	b.n	8005a6c <HAL_ADC_ConfigChannel+0x78>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005b3c:	2f00      	cmp	r7, #0
 8005b3e:	d050      	beq.n	8005be2 <HAL_ADC_ConfigChannel+0x1ee>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b40:	fa94 f0a4 	rbit	r0, r4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8005b44:	2800      	cmp	r0, #0
 8005b46:	f000 80b0 	beq.w	8005caa <HAL_ADC_ConfigChannel+0x2b6>
  {
    return 32U;
  }
  return __builtin_clz(value);
 8005b4a:	fab0 f080 	clz	r0, r0
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005b4e:	3001      	adds	r0, #1
 8005b50:	f000 001f 	and.w	r0, r0, #31
 8005b54:	2809      	cmp	r0, #9
 8005b56:	f240 80a8 	bls.w	8005caa <HAL_ADC_ConfigChannel+0x2b6>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b5a:	fa94 f0a4 	rbit	r0, r4
  if (value == 0U)
 8005b5e:	2800      	cmp	r0, #0
 8005b60:	f000 815a 	beq.w	8005e18 <HAL_ADC_ConfigChannel+0x424>
  return __builtin_clz(value);
 8005b64:	fab0 f080 	clz	r0, r0
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005b68:	3001      	adds	r0, #1
 8005b6a:	0680      	lsls	r0, r0, #26
 8005b6c:	f000 40f8 	and.w	r0, r0, #2080374784	@ 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b70:	fa94 f5a4 	rbit	r5, r4
  if (value == 0U)
 8005b74:	2d00      	cmp	r5, #0
 8005b76:	f000 814d 	beq.w	8005e14 <HAL_ADC_ConfigChannel+0x420>
  return __builtin_clz(value);
 8005b7a:	fab5 f585 	clz	r5, r5
 8005b7e:	3501      	adds	r5, #1
 8005b80:	f005 051f 	and.w	r5, r5, #31
 8005b84:	2601      	movs	r6, #1
 8005b86:	fa06 f505 	lsl.w	r5, r6, r5
 8005b8a:	4328      	orrs	r0, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b8c:	fa94 f4a4 	rbit	r4, r4
  if (value == 0U)
 8005b90:	2c00      	cmp	r4, #0
 8005b92:	f000 813d 	beq.w	8005e10 <HAL_ADC_ConfigChannel+0x41c>
  return __builtin_clz(value);
 8005b96:	fab4 f484 	clz	r4, r4
 8005b9a:	1c65      	adds	r5, r4, #1
 8005b9c:	f005 051f 	and.w	r5, r5, #31
 8005ba0:	2403      	movs	r4, #3
 8005ba2:	f06f 061d 	mvn.w	r6, #29
 8005ba6:	fb14 6405 	smlabb	r4, r4, r5, r6
 8005baa:	0524      	lsls	r4, r4, #20
 8005bac:	f044 7400 	orr.w	r4, r4, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005bb0:	4320      	orrs	r0, r4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005bb2:	0dc5      	lsrs	r5, r0, #23
  MODIFY_REG(*preg,
 8005bb4:	688c      	ldr	r4, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005bb6:	f005 0504 	and.w	r5, r5, #4
 8005bba:	f102 0614 	add.w	r6, r2, #20
  MODIFY_REG(*preg,
 8005bbe:	f3c0 5004 	ubfx	r0, r0, #20, #5
 8005bc2:	fa04 f700 	lsl.w	r7, r4, r0
 8005bc6:	f04f 0c07 	mov.w	ip, #7
 8005bca:	5974      	ldr	r4, [r6, r5]
 8005bcc:	fa0c f000 	lsl.w	r0, ip, r0
 8005bd0:	ea24 0000 	bic.w	r0, r4, r0
 8005bd4:	4338      	orrs	r0, r7
 8005bd6:	5170      	str	r0, [r6, r5]
      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8005bd8:	680c      	ldr	r4, [r1, #0]
}
 8005bda:	e75d      	b.n	8005a98 <HAL_ADC_ConfigChannel+0xa4>
  __HAL_LOCK(hadc);
 8005bdc:	2002      	movs	r0, #2
}
 8005bde:	b003      	add	sp, #12
 8005be0:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005be2:	0ea4      	lsrs	r4, r4, #26
 8005be4:	3401      	adds	r4, #1
 8005be6:	f004 051f 	and.w	r5, r4, #31
 8005bea:	2001      	movs	r0, #1
 8005bec:	06a4      	lsls	r4, r4, #26
 8005bee:	f004 44f8 	and.w	r4, r4, #2080374784	@ 0x7c000000
 8005bf2:	40a8      	lsls	r0, r5
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005bf4:	2d09      	cmp	r5, #9
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005bf6:	ea40 0004 	orr.w	r0, r0, r4
 8005bfa:	eb05 0445 	add.w	r4, r5, r5, lsl #1
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005bfe:	d979      	bls.n	8005cf4 <HAL_ADC_ConfigChannel+0x300>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005c00:	3c1e      	subs	r4, #30
 8005c02:	0524      	lsls	r4, r4, #20
 8005c04:	f044 7400 	orr.w	r4, r4, #33554432	@ 0x2000000
 8005c08:	e7d2      	b.n	8005bb0 <HAL_ADC_ConfigChannel+0x1bc>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005c0a:	0236      	lsls	r6, r6, #8
 8005c0c:	f53f af65 	bmi.w	8005ada <HAL_ADC_ConfigChannel+0xe6>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005c10:	428a      	cmp	r2, r1
 8005c12:	f47f af62 	bne.w	8005ada <HAL_ADC_ConfigChannel+0xe6>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8005c16:	6882      	ldr	r2, [r0, #8]
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005c18:	4960      	ldr	r1, [pc, #384]	@ (8005d9c <HAL_ADC_ConfigChannel+0x3a8>)
 8005c1a:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 8005c1e:	433a      	orrs	r2, r7
 8005c20:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8005c24:	6082      	str	r2, [r0, #8]
 8005c26:	680a      	ldr	r2, [r1, #0]
 8005c28:	495d      	ldr	r1, [pc, #372]	@ (8005da0 <HAL_ADC_ConfigChannel+0x3ac>)
 8005c2a:	0992      	lsrs	r2, r2, #6
 8005c2c:	fba1 1202 	umull	r1, r2, r1, r2
 8005c30:	0992      	lsrs	r2, r2, #6
 8005c32:	3201      	adds	r2, #1
 8005c34:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8005c38:	0092      	lsls	r2, r2, #2
 8005c3a:	9201      	str	r2, [sp, #4]
              while(wait_loop_index != 0UL)
 8005c3c:	9a01      	ldr	r2, [sp, #4]
 8005c3e:	2a00      	cmp	r2, #0
 8005c40:	f43f af4b 	beq.w	8005ada <HAL_ADC_ConfigChannel+0xe6>
                wait_loop_index--;
 8005c44:	9a01      	ldr	r2, [sp, #4]
 8005c46:	3a01      	subs	r2, #1
 8005c48:	9201      	str	r2, [sp, #4]
              while(wait_loop_index != 0UL)
 8005c4a:	9a01      	ldr	r2, [sp, #4]
 8005c4c:	2a00      	cmp	r2, #0
 8005c4e:	d1f9      	bne.n	8005c44 <HAL_ADC_ConfigChannel+0x250>
 8005c50:	e743      	b.n	8005ada <HAL_ADC_ConfigChannel+0xe6>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005c52:	6e10      	ldr	r0, [r2, #96]	@ 0x60
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005c54:	6808      	ldr	r0, [r1, #0]
 8005c56:	6e14      	ldr	r4, [r2, #96]	@ 0x60
 8005c58:	f3c0 0612 	ubfx	r6, r0, #0, #19
 8005c5c:	f3c4 6484 	ubfx	r4, r4, #26, #5
 8005c60:	2e00      	cmp	r6, #0
 8005c62:	d149      	bne.n	8005cf8 <HAL_ADC_ConfigChannel+0x304>
 8005c64:	f3c0 6084 	ubfx	r0, r0, #26, #5
 8005c68:	4284      	cmp	r4, r0
 8005c6a:	f000 80c1 	beq.w	8005df0 <HAL_ADC_ConfigChannel+0x3fc>
 8005c6e:	6e54      	ldr	r4, [r2, #100]	@ 0x64
 8005c70:	6e54      	ldr	r4, [r2, #100]	@ 0x64
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005c72:	f3c4 6484 	ubfx	r4, r4, #26, #5
 8005c76:	4284      	cmp	r4, r0
 8005c78:	f000 8094 	beq.w	8005da4 <HAL_ADC_ConfigChannel+0x3b0>
 8005c7c:	68ac      	ldr	r4, [r5, #8]
 8005c7e:	68ac      	ldr	r4, [r5, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005c80:	f105 0608 	add.w	r6, r5, #8
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005c84:	f3c4 6484 	ubfx	r4, r4, #26, #5
 8005c88:	4284      	cmp	r4, r0
 8005c8a:	f000 809e 	beq.w	8005dca <HAL_ADC_ConfigChannel+0x3d6>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005c8e:	68ec      	ldr	r4, [r5, #12]
 8005c90:	68ec      	ldr	r4, [r5, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005c92:	f105 070c 	add.w	r7, r5, #12
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005c96:	f3c4 6484 	ubfx	r4, r4, #26, #5
 8005c9a:	42a0      	cmp	r0, r4
 8005c9c:	f47f aee6 	bne.w	8005a6c <HAL_ADC_ConfigChannel+0x78>
  MODIFY_REG(*preg,
 8005ca0:	6838      	ldr	r0, [r7, #0]
 8005ca2:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8005ca6:	6038      	str	r0, [r7, #0]
}
 8005ca8:	e6e0      	b.n	8005a6c <HAL_ADC_ConfigChannel+0x78>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005caa:	fa94 f0a4 	rbit	r0, r4
  if (value == 0U)
 8005cae:	2800      	cmp	r0, #0
 8005cb0:	f000 80ba 	beq.w	8005e28 <HAL_ADC_ConfigChannel+0x434>
  return __builtin_clz(value);
 8005cb4:	fab0 f080 	clz	r0, r0
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005cb8:	3001      	adds	r0, #1
 8005cba:	0680      	lsls	r0, r0, #26
 8005cbc:	f000 40f8 	and.w	r0, r0, #2080374784	@ 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cc0:	fa94 f5a4 	rbit	r5, r4
  if (value == 0U)
 8005cc4:	2d00      	cmp	r5, #0
 8005cc6:	f000 80ad 	beq.w	8005e24 <HAL_ADC_ConfigChannel+0x430>
  return __builtin_clz(value);
 8005cca:	fab5 f585 	clz	r5, r5
 8005cce:	3501      	adds	r5, #1
 8005cd0:	f005 051f 	and.w	r5, r5, #31
 8005cd4:	2601      	movs	r6, #1
 8005cd6:	fa06 f505 	lsl.w	r5, r6, r5
 8005cda:	4328      	orrs	r0, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cdc:	fa94 f4a4 	rbit	r4, r4
  if (value == 0U)
 8005ce0:	2c00      	cmp	r4, #0
 8005ce2:	f000 809c 	beq.w	8005e1e <HAL_ADC_ConfigChannel+0x42a>
  return __builtin_clz(value);
 8005ce6:	fab4 f484 	clz	r4, r4
 8005cea:	3401      	adds	r4, #1
 8005cec:	f004 041f 	and.w	r4, r4, #31
 8005cf0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8005cf4:	0524      	lsls	r4, r4, #20
 8005cf6:	e75b      	b.n	8005bb0 <HAL_ADC_ConfigChannel+0x1bc>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cf8:	fa90 f6a0 	rbit	r6, r0
  if (value == 0U)
 8005cfc:	b11e      	cbz	r6, 8005d06 <HAL_ADC_ConfigChannel+0x312>
  return __builtin_clz(value);
 8005cfe:	fab6 f686 	clz	r6, r6
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005d02:	42b4      	cmp	r4, r6
 8005d04:	d074      	beq.n	8005df0 <HAL_ADC_ConfigChannel+0x3fc>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005d06:	6e54      	ldr	r4, [r2, #100]	@ 0x64
 8005d08:	6e54      	ldr	r4, [r2, #100]	@ 0x64
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005d0a:	f3c4 6484 	ubfx	r4, r4, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d0e:	fa90 f7a0 	rbit	r7, r0
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005d12:	f105 0608 	add.w	r6, r5, #8
 8005d16:	46b4      	mov	ip, r6
  if (value == 0U)
 8005d18:	b11f      	cbz	r7, 8005d22 <HAL_ADC_ConfigChannel+0x32e>
  return __builtin_clz(value);
 8005d1a:	fab7 f787 	clz	r7, r7
 8005d1e:	42a7      	cmp	r7, r4
 8005d20:	d042      	beq.n	8005da8 <HAL_ADC_ConfigChannel+0x3b4>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005d22:	68ac      	ldr	r4, [r5, #8]
 8005d24:	68ac      	ldr	r4, [r5, #8]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005d26:	f3c4 6484 	ubfx	r4, r4, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d2a:	fa90 fca0 	rbit	ip, r0
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005d2e:	f105 070c 	add.w	r7, r5, #12
 8005d32:	46be      	mov	lr, r7
  if (value == 0U)
 8005d34:	f1bc 0f00 	cmp.w	ip, #0
 8005d38:	d003      	beq.n	8005d42 <HAL_ADC_ConfigChannel+0x34e>
  return __builtin_clz(value);
 8005d3a:	fabc fc8c 	clz	ip, ip
 8005d3e:	45a4      	cmp	ip, r4
 8005d40:	d045      	beq.n	8005dce <HAL_ADC_ConfigChannel+0x3da>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005d42:	68ec      	ldr	r4, [r5, #12]
 8005d44:	68ec      	ldr	r4, [r5, #12]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005d46:	f3c4 6484 	ubfx	r4, r4, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d4a:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 8005d4e:	2800      	cmp	r0, #0
 8005d50:	f43f ae8c 	beq.w	8005a6c <HAL_ADC_ConfigChannel+0x78>
  return __builtin_clz(value);
 8005d54:	fab0 f080 	clz	r0, r0
 8005d58:	e79f      	b.n	8005c9a <HAL_ADC_ConfigChannel+0x2a6>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005d5a:	01f5      	lsls	r5, r6, #7
 8005d5c:	f53f aebd 	bmi.w	8005ada <HAL_ADC_ConfigChannel+0xe6>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005d60:	428a      	cmp	r2, r1
 8005d62:	f47f aeba 	bne.w	8005ada <HAL_ADC_ConfigChannel+0xe6>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8005d66:	6882      	ldr	r2, [r0, #8]
 8005d68:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 8005d6c:	433a      	orrs	r2, r7
 8005d6e:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8005d72:	6082      	str	r2, [r0, #8]
}
 8005d74:	e6b1      	b.n	8005ada <HAL_ADC_ConfigChannel+0xe6>
 8005d76:	bf00      	nop
 8005d78:	0007ffff 	.word	0x0007ffff
 8005d7c:	407f0000 	.word	0x407f0000
 8005d80:	80080000 	.word	0x80080000
 8005d84:	50040300 	.word	0x50040300
 8005d88:	50040000 	.word	0x50040000
 8005d8c:	c7520000 	.word	0xc7520000
 8005d90:	cb840000 	.word	0xcb840000
 8005d94:	80000001 	.word	0x80000001
 8005d98:	03fff000 	.word	0x03fff000
 8005d9c:	20000034 	.word	0x20000034
 8005da0:	053e2d63 	.word	0x053e2d63
 8005da4:	f105 0c08 	add.w	ip, r5, #8
  MODIFY_REG(*preg,
 8005da8:	6e50      	ldr	r0, [r2, #100]	@ 0x64
 8005daa:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8005dae:	6650      	str	r0, [r2, #100]	@ 0x64
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005db0:	68a8      	ldr	r0, [r5, #8]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005db2:	6808      	ldr	r0, [r1, #0]
 8005db4:	68ac      	ldr	r4, [r5, #8]
 8005db6:	f3c0 0712 	ubfx	r7, r0, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005dba:	4666      	mov	r6, ip
 8005dbc:	f3c4 6484 	ubfx	r4, r4, #26, #5
 8005dc0:	2f00      	cmp	r7, #0
 8005dc2:	d1b2      	bne.n	8005d2a <HAL_ADC_ConfigChannel+0x336>
 8005dc4:	f3c0 6084 	ubfx	r0, r0, #26, #5
 8005dc8:	e75e      	b.n	8005c88 <HAL_ADC_ConfigChannel+0x294>
 8005dca:	f105 0e0c 	add.w	lr, r5, #12
  MODIFY_REG(*preg,
 8005dce:	6830      	ldr	r0, [r6, #0]
 8005dd0:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8005dd4:	6030      	str	r0, [r6, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005dd6:	68e8      	ldr	r0, [r5, #12]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005dd8:	6808      	ldr	r0, [r1, #0]
 8005dda:	68ec      	ldr	r4, [r5, #12]
 8005ddc:	f3c0 0512 	ubfx	r5, r0, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005de0:	4677      	mov	r7, lr
 8005de2:	f3c4 6484 	ubfx	r4, r4, #26, #5
 8005de6:	2d00      	cmp	r5, #0
 8005de8:	d1af      	bne.n	8005d4a <HAL_ADC_ConfigChannel+0x356>
 8005dea:	f3c0 6084 	ubfx	r0, r0, #26, #5
 8005dee:	e754      	b.n	8005c9a <HAL_ADC_ConfigChannel+0x2a6>
  MODIFY_REG(*preg,
 8005df0:	6e10      	ldr	r0, [r2, #96]	@ 0x60
 8005df2:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8005df6:	6610      	str	r0, [r2, #96]	@ 0x60
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005df8:	6e50      	ldr	r0, [r2, #100]	@ 0x64
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005dfa:	6808      	ldr	r0, [r1, #0]
 8005dfc:	6e54      	ldr	r4, [r2, #100]	@ 0x64
 8005dfe:	f3c0 0612 	ubfx	r6, r0, #0, #19
 8005e02:	f3c4 6484 	ubfx	r4, r4, #26, #5
 8005e06:	2e00      	cmp	r6, #0
 8005e08:	d181      	bne.n	8005d0e <HAL_ADC_ConfigChannel+0x31a>
 8005e0a:	f3c0 6084 	ubfx	r0, r0, #26, #5
 8005e0e:	e732      	b.n	8005c76 <HAL_ADC_ConfigChannel+0x282>
 8005e10:	4c07      	ldr	r4, [pc, #28]	@ (8005e30 <HAL_ADC_ConfigChannel+0x43c>)
 8005e12:	e6cd      	b.n	8005bb0 <HAL_ADC_ConfigChannel+0x1bc>
 8005e14:	2502      	movs	r5, #2
 8005e16:	e6b8      	b.n	8005b8a <HAL_ADC_ConfigChannel+0x196>
 8005e18:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 8005e1c:	e6a8      	b.n	8005b70 <HAL_ADC_ConfigChannel+0x17c>
 8005e1e:	f44f 1440 	mov.w	r4, #3145728	@ 0x300000
 8005e22:	e6c5      	b.n	8005bb0 <HAL_ADC_ConfigChannel+0x1bc>
 8005e24:	2502      	movs	r5, #2
 8005e26:	e758      	b.n	8005cda <HAL_ADC_ConfigChannel+0x2e6>
 8005e28:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 8005e2c:	e748      	b.n	8005cc0 <HAL_ADC_ConfigChannel+0x2cc>
 8005e2e:	bf00      	nop
 8005e30:	fe500000 	.word	0xfe500000

08005e34 <ADC_Enable>:
{
 8005e34:	b570      	push	{r4, r5, r6, lr}
 8005e36:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0UL;
 8005e38:	2200      	movs	r2, #0
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005e3a:	6803      	ldr	r3, [r0, #0]
  __IO uint32_t wait_loop_index = 0UL;
 8005e3c:	9201      	str	r2, [sp, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005e3e:	689a      	ldr	r2, [r3, #8]
 8005e40:	07d4      	lsls	r4, r2, #31
 8005e42:	d430      	bmi.n	8005ea6 <ADC_Enable+0x72>
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8005e44:	6899      	ldr	r1, [r3, #8]
 8005e46:	4a26      	ldr	r2, [pc, #152]	@ (8005ee0 <ADC_Enable+0xac>)
 8005e48:	4211      	tst	r1, r2
 8005e4a:	4604      	mov	r4, r0
 8005e4c:	d120      	bne.n	8005e90 <ADC_Enable+0x5c>
  MODIFY_REG(ADCx->CR,
 8005e4e:	689a      	ldr	r2, [r3, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8005e50:	4924      	ldr	r1, [pc, #144]	@ (8005ee4 <ADC_Enable+0xb0>)
  MODIFY_REG(ADCx->CR,
 8005e52:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8005e56:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8005e5a:	f042 0201 	orr.w	r2, r2, #1
 8005e5e:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8005e60:	688b      	ldr	r3, [r1, #8]
    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8005e62:	0218      	lsls	r0, r3, #8
 8005e64:	d428      	bmi.n	8005eb8 <ADC_Enable+0x84>
      tickstart = HAL_GetTick();
 8005e66:	f7ff fc81 	bl	800576c <HAL_GetTick>
  MODIFY_REG(ADCx->CR,
 8005e6a:	4e1f      	ldr	r6, [pc, #124]	@ (8005ee8 <ADC_Enable+0xb4>)
 8005e6c:	4605      	mov	r5, r0
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005e6e:	6823      	ldr	r3, [r4, #0]
 8005e70:	681a      	ldr	r2, [r3, #0]
 8005e72:	07d2      	lsls	r2, r2, #31
 8005e74:	d417      	bmi.n	8005ea6 <ADC_Enable+0x72>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005e76:	689a      	ldr	r2, [r3, #8]
 8005e78:	07d1      	lsls	r1, r2, #31
 8005e7a:	d417      	bmi.n	8005eac <ADC_Enable+0x78>
  MODIFY_REG(ADCx->CR,
 8005e7c:	689a      	ldr	r2, [r3, #8]
 8005e7e:	4032      	ands	r2, r6
 8005e80:	f042 0201 	orr.w	r2, r2, #1
 8005e84:	609a      	str	r2, [r3, #8]
        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005e86:	f7ff fc71 	bl	800576c <HAL_GetTick>
 8005e8a:	1b40      	subs	r0, r0, r5
 8005e8c:	2802      	cmp	r0, #2
 8005e8e:	d9ee      	bls.n	8005e6e <ADC_Enable+0x3a>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005e90:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8005e92:	f043 0310 	orr.w	r3, r3, #16
 8005e96:	6563      	str	r3, [r4, #84]	@ 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005e98:	6da3      	ldr	r3, [r4, #88]	@ 0x58
      return HAL_ERROR;
 8005e9a:	2001      	movs	r0, #1
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005e9c:	f043 0301 	orr.w	r3, r3, #1
 8005ea0:	65a3      	str	r3, [r4, #88]	@ 0x58
}
 8005ea2:	b002      	add	sp, #8
 8005ea4:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8005ea6:	2000      	movs	r0, #0
}
 8005ea8:	b002      	add	sp, #8
 8005eaa:	bd70      	pop	{r4, r5, r6, pc}
        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005eac:	f7ff fc5e 	bl	800576c <HAL_GetTick>
 8005eb0:	1b40      	subs	r0, r0, r5
 8005eb2:	2802      	cmp	r0, #2
 8005eb4:	d9db      	bls.n	8005e6e <ADC_Enable+0x3a>
 8005eb6:	e7eb      	b.n	8005e90 <ADC_Enable+0x5c>
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005eb8:	4b0c      	ldr	r3, [pc, #48]	@ (8005eec <ADC_Enable+0xb8>)
 8005eba:	4a0d      	ldr	r2, [pc, #52]	@ (8005ef0 <ADC_Enable+0xbc>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	099b      	lsrs	r3, r3, #6
 8005ec0:	fba2 2303 	umull	r2, r3, r2, r3
 8005ec4:	099b      	lsrs	r3, r3, #6
 8005ec6:	3301      	adds	r3, #1
 8005ec8:	9301      	str	r3, [sp, #4]
      while(wait_loop_index != 0UL)
 8005eca:	9b01      	ldr	r3, [sp, #4]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d0ca      	beq.n	8005e66 <ADC_Enable+0x32>
        wait_loop_index--;
 8005ed0:	9b01      	ldr	r3, [sp, #4]
 8005ed2:	3b01      	subs	r3, #1
 8005ed4:	9301      	str	r3, [sp, #4]
      while(wait_loop_index != 0UL)
 8005ed6:	9b01      	ldr	r3, [sp, #4]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d1f9      	bne.n	8005ed0 <ADC_Enable+0x9c>
 8005edc:	e7c3      	b.n	8005e66 <ADC_Enable+0x32>
 8005ede:	bf00      	nop
 8005ee0:	8000003f 	.word	0x8000003f
 8005ee4:	50040300 	.word	0x50040300
 8005ee8:	7fffffc0 	.word	0x7fffffc0
 8005eec:	20000034 	.word	0x20000034
 8005ef0:	053e2d63 	.word	0x053e2d63

08005ef4 <HAL_ADC_Start_DMA>:
{
 8005ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005ef6:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005ef8:	689d      	ldr	r5, [r3, #8]
 8005efa:	f015 0504 	ands.w	r5, r5, #4
 8005efe:	d141      	bne.n	8005f84 <HAL_ADC_Start_DMA+0x90>
    __HAL_LOCK(hadc);
 8005f00:	f890 3050 	ldrb.w	r3, [r0, #80]	@ 0x50
 8005f04:	2b01      	cmp	r3, #1
 8005f06:	4604      	mov	r4, r0
 8005f08:	d03c      	beq.n	8005f84 <HAL_ADC_Start_DMA+0x90>
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	f880 3050 	strb.w	r3, [r0, #80]	@ 0x50
      tmp_hal_status = ADC_Enable(hadc);
 8005f10:	460f      	mov	r7, r1
 8005f12:	4616      	mov	r6, r2
 8005f14:	f7ff ff8e 	bl	8005e34 <ADC_Enable>
      if (tmp_hal_status == HAL_OK)
 8005f18:	2800      	cmp	r0, #0
 8005f1a:	d135      	bne.n	8005f88 <HAL_ADC_Start_DMA+0x94>
        ADC_STATE_CLR_SET(hadc->State,
 8005f1c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005f1e:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005f20:	6821      	ldr	r1, [r4, #0]
        ADC_STATE_CLR_SET(hadc->State,
 8005f22:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005f26:	f023 0301 	bic.w	r3, r3, #1
 8005f2a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005f2e:	6563      	str	r3, [r4, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8005f30:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8005f32:	f413 5380 	ands.w	r3, r3, #4096	@ 0x1000
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8005f36:	bf1c      	itt	ne
 8005f38:	6da3      	ldrne	r3, [r4, #88]	@ 0x58
 8005f3a:	f023 0306 	bicne.w	r3, r3, #6
          ADC_CLEAR_ERRORCODE(hadc);
 8005f3e:	65a3      	str	r3, [r4, #88]	@ 0x58
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005f40:	4b13      	ldr	r3, [pc, #76]	@ (8005f90 <HAL_ADC_Start_DMA+0x9c>)
 8005f42:	62c3      	str	r3, [r0, #44]	@ 0x2c
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005f44:	4b13      	ldr	r3, [pc, #76]	@ (8005f94 <HAL_ADC_Start_DMA+0xa0>)
 8005f46:	6303      	str	r3, [r0, #48]	@ 0x30
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005f48:	251c      	movs	r5, #28
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005f4a:	4b13      	ldr	r3, [pc, #76]	@ (8005f98 <HAL_ADC_Start_DMA+0xa4>)
 8005f4c:	6343      	str	r3, [r0, #52]	@ 0x34
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005f4e:	600d      	str	r5, [r1, #0]
        __HAL_UNLOCK(hadc);
 8005f50:	2500      	movs	r5, #0
 8005f52:	f884 5050 	strb.w	r5, [r4, #80]	@ 0x50
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005f56:	684d      	ldr	r5, [r1, #4]
 8005f58:	f045 0510 	orr.w	r5, r5, #16
 8005f5c:	604d      	str	r5, [r1, #4]
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8005f5e:	68cd      	ldr	r5, [r1, #12]
 8005f60:	f045 0501 	orr.w	r5, r5, #1
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005f64:	4633      	mov	r3, r6
 8005f66:	463a      	mov	r2, r7
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8005f68:	60cd      	str	r5, [r1, #12]
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005f6a:	3140      	adds	r1, #64	@ 0x40
 8005f6c:	f000 f906 	bl	800617c <HAL_DMA_Start_IT>
        LL_ADC_REG_StartConversion(hadc->Instance);
 8005f70:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8005f72:	6893      	ldr	r3, [r2, #8]
 8005f74:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005f78:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005f7c:	f043 0304 	orr.w	r3, r3, #4
 8005f80:	6093      	str	r3, [r2, #8]
}
 8005f82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_LOCK(hadc);
 8005f84:	2002      	movs	r0, #2
}
 8005f86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        __HAL_UNLOCK(hadc);
 8005f88:	f884 5050 	strb.w	r5, [r4, #80]	@ 0x50
}
 8005f8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f8e:	bf00      	nop
 8005f90:	0800596d 	.word	0x0800596d
 8005f94:	0800595d 	.word	0x0800595d
 8005f98:	080059d9 	.word	0x080059d9

08005f9c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005f9c:	4907      	ldr	r1, [pc, #28]	@ (8005fbc <HAL_NVIC_SetPriorityGrouping+0x20>)
 8005f9e:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005fa0:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005fa2:	f64f 00ff 	movw	r0, #63743	@ 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005fa6:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005faa:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005fac:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005fae:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005fb2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8005fb6:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8005fb8:	4770      	bx	lr
 8005fba:	bf00      	nop
 8005fbc:	e000ed00 	.word	0xe000ed00

08005fc0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005fc0:	4b1b      	ldr	r3, [pc, #108]	@ (8006030 <HAL_NVIC_SetPriority+0x70>)
 8005fc2:	68db      	ldr	r3, [r3, #12]
 8005fc4:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005fc8:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005fca:	f1c3 0e07 	rsb	lr, r3, #7
 8005fce:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005fd2:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005fd6:	bf28      	it	cs
 8005fd8:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005fdc:	f1bc 0f06 	cmp.w	ip, #6
 8005fe0:	d91c      	bls.n	800601c <HAL_NVIC_SetPriority+0x5c>
 8005fe2:	f1a3 0c03 	sub.w	ip, r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005fe6:	f04f 33ff 	mov.w	r3, #4294967295
 8005fea:	fa03 f30c 	lsl.w	r3, r3, ip
 8005fee:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005ff2:	f04f 33ff 	mov.w	r3, #4294967295
 8005ff6:	fa03 f30e 	lsl.w	r3, r3, lr
 8005ffa:	ea21 0303 	bic.w	r3, r1, r3
 8005ffe:	fa03 f30c 	lsl.w	r3, r3, ip
 8006002:	4313      	orrs	r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006004:	011b      	lsls	r3, r3, #4
  if ((int32_t)(IRQn) >= 0)
 8006006:	2800      	cmp	r0, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006008:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 800600a:	db0a      	blt.n	8006022 <HAL_NVIC_SetPriority+0x62>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800600c:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8006010:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8006014:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8006018:	f85d fb04 	ldr.w	pc, [sp], #4
 800601c:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800601e:	4694      	mov	ip, r2
 8006020:	e7e7      	b.n	8005ff2 <HAL_NVIC_SetPriority+0x32>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006022:	4a04      	ldr	r2, [pc, #16]	@ (8006034 <HAL_NVIC_SetPriority+0x74>)
 8006024:	f000 000f 	and.w	r0, r0, #15
 8006028:	4402      	add	r2, r0
 800602a:	7613      	strb	r3, [r2, #24]
 800602c:	f85d fb04 	ldr.w	pc, [sp], #4
 8006030:	e000ed00 	.word	0xe000ed00
 8006034:	e000ecfc 	.word	0xe000ecfc

08006038 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8006038:	2800      	cmp	r0, #0
 800603a:	db07      	blt.n	800604c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800603c:	4a04      	ldr	r2, [pc, #16]	@ (8006050 <HAL_NVIC_EnableIRQ+0x18>)
 800603e:	0941      	lsrs	r1, r0, #5
 8006040:	2301      	movs	r3, #1
 8006042:	f000 001f 	and.w	r0, r0, #31
 8006046:	4083      	lsls	r3, r0
 8006048:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800604c:	4770      	bx	lr
 800604e:	bf00      	nop
 8006050:	e000e100 	.word	0xe000e100

08006054 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8006054:	2800      	cmp	r0, #0
 8006056:	d076      	beq.n	8006146 <HAL_DMA_Init+0xf2>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006058:	6802      	ldr	r2, [r0, #0]
 800605a:	493c      	ldr	r1, [pc, #240]	@ (800614c <HAL_DMA_Init+0xf8>)
 800605c:	428a      	cmp	r2, r1
{
 800605e:	b470      	push	{r4, r5, r6}
 8006060:	4603      	mov	r3, r0
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006062:	d95c      	bls.n	800611e <HAL_DMA_Init+0xca>
    hdma->DmaBaseAddress = DMA1;
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8006064:	4c3a      	ldr	r4, [pc, #232]	@ (8006150 <HAL_DMA_Init+0xfc>)
 8006066:	493b      	ldr	r1, [pc, #236]	@ (8006154 <HAL_DMA_Init+0x100>)
    hdma->DmaBaseAddress = DMA2;
 8006068:	4d3b      	ldr	r5, [pc, #236]	@ (8006158 <HAL_DMA_Init+0x104>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800606a:	4414      	add	r4, r2
 800606c:	fba1 1404 	umull	r1, r4, r1, r4
 8006070:	0924      	lsrs	r4, r4, #4
 8006072:	00a4      	lsls	r4, r4, #2
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006074:	2102      	movs	r1, #2
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006076:	6898      	ldr	r0, [r3, #8]
  hdma->State = HAL_DMA_STATE_BUSY;
 8006078:	f883 1025 	strb.w	r1, [r3, #37]	@ 0x25
  tmp |=  hdma->Init.Direction        |
 800607c:	68d9      	ldr	r1, [r3, #12]
 800607e:	e9c3 5410 	strd	r5, r4, [r3, #64]	@ 0x40
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006082:	691d      	ldr	r5, [r3, #16]
  tmp |=  hdma->Init.Direction        |
 8006084:	4301      	orrs	r1, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006086:	4329      	orrs	r1, r5
 8006088:	695d      	ldr	r5, [r3, #20]
 800608a:	4329      	orrs	r1, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800608c:	699d      	ldr	r5, [r3, #24]
 800608e:	4329      	orrs	r1, r5
  tmp = hdma->Instance->CCR;
 8006090:	6815      	ldr	r5, [r2, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8006092:	f425 4cff 	bic.w	ip, r5, #32640	@ 0x7f80
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006096:	69dd      	ldr	r5, [r3, #28]
 8006098:	4329      	orrs	r1, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 800609a:	6a1d      	ldr	r5, [r3, #32]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800609c:	f02c 0c70 	bic.w	ip, ip, #112	@ 0x70
          hdma->Init.Mode                | hdma->Init.Priority;
 80060a0:	4329      	orrs	r1, r5
  tmp |=  hdma->Init.Direction        |
 80060a2:	ea41 010c 	orr.w	r1, r1, ip

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80060a6:	6011      	str	r1, [r2, #0]
{
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80060a8:	4928      	ldr	r1, [pc, #160]	@ (800614c <HAL_DMA_Init+0xf8>)
 80060aa:	428a      	cmp	r2, r1
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80060ac:	bf8a      	itet	hi
 80060ae:	492b      	ldrhi	r1, [pc, #172]	@ (800615c <HAL_DMA_Init+0x108>)
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80060b0:	f104 4180 	addls.w	r1, r4, #1073741824	@ 0x40000000
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80060b4:	1909      	addhi	r1, r1, r4
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80060b6:	4c2a      	ldr	r4, [pc, #168]	@ (8006160 <HAL_DMA_Init+0x10c>)
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80060b8:	bf98      	it	ls
 80060ba:	f501 3102 	addls.w	r1, r1, #133120	@ 0x20800
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80060be:	e9c3 1412 	strd	r1, r4, [r3, #72]	@ 0x48
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80060c2:	b2d2      	uxtb	r2, r2
 80060c4:	4c23      	ldr	r4, [pc, #140]	@ (8006154 <HAL_DMA_Init+0x100>)
 80060c6:	3a08      	subs	r2, #8
 80060c8:	fba4 4202 	umull	r4, r2, r4, r2

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80060cc:	f3c2 1204 	ubfx	r2, r2, #4, #5
 80060d0:	2401      	movs	r4, #1
 80060d2:	fa04 f202 	lsl.w	r2, r4, r2
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80060d6:	f5b0 4f80 	cmp.w	r0, #16384	@ 0x4000
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80060da:	651a      	str	r2, [r3, #80]	@ 0x50
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80060dc:	d028      	beq.n	8006130 <HAL_DMA_Init+0xdc>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80060de:	685d      	ldr	r5, [r3, #4]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80060e0:	4e20      	ldr	r6, [pc, #128]	@ (8006164 <HAL_DMA_Init+0x110>)
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80060e2:	f005 003f 	and.w	r0, r5, #63	@ 0x3f
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80060e6:	3d01      	subs	r5, #1
 80060e8:	2d03      	cmp	r5, #3
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80060ea:	6008      	str	r0, [r1, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80060ec:	f8c6 2084 	str.w	r2, [r6, #132]	@ 0x84
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80060f0:	d824      	bhi.n	800613c <HAL_DMA_Init+0xe8>
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80060f2:	4a1d      	ldr	r2, [pc, #116]	@ (8006168 <HAL_DMA_Init+0x114>)

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80060f4:	4d1d      	ldr	r5, [pc, #116]	@ (800616c <HAL_DMA_Init+0x118>)
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80060f6:	4402      	add	r2, r0
 80060f8:	0092      	lsls	r2, r2, #2

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80060fa:	3801      	subs	r0, #1
 80060fc:	4084      	lsls	r4, r0
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80060fe:	2100      	movs	r1, #0
  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006100:	e9c3 2515 	strd	r2, r5, [r3, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8006104:	65dc      	str	r4, [r3, #92]	@ 0x5c
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8006106:	6011      	str	r1, [r2, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006108:	4a19      	ldr	r2, [pc, #100]	@ (8006170 <HAL_DMA_Init+0x11c>)
 800610a:	6454      	str	r4, [r2, #68]	@ 0x44
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800610c:	2000      	movs	r0, #0
  hdma->State  = HAL_DMA_STATE_READY;
 800610e:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006110:	63d8      	str	r0, [r3, #60]	@ 0x3c
  hdma->Lock = HAL_UNLOCKED;
 8006112:	f883 0024 	strb.w	r0, [r3, #36]	@ 0x24
  hdma->State  = HAL_DMA_STATE_READY;
 8006116:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
}
 800611a:	bc70      	pop	{r4, r5, r6}
 800611c:	4770      	bx	lr
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800611e:	4c15      	ldr	r4, [pc, #84]	@ (8006174 <HAL_DMA_Init+0x120>)
 8006120:	490c      	ldr	r1, [pc, #48]	@ (8006154 <HAL_DMA_Init+0x100>)
    hdma->DmaBaseAddress = DMA1;
 8006122:	4d15      	ldr	r5, [pc, #84]	@ (8006178 <HAL_DMA_Init+0x124>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8006124:	4414      	add	r4, r2
 8006126:	fba1 1404 	umull	r1, r4, r1, r4
 800612a:	0924      	lsrs	r4, r4, #4
 800612c:	00a4      	lsls	r4, r4, #2
    hdma->DmaBaseAddress = DMA1;
 800612e:	e7a1      	b.n	8006074 <HAL_DMA_Init+0x20>
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006130:	4c0c      	ldr	r4, [pc, #48]	@ (8006164 <HAL_DMA_Init+0x110>)
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8006132:	2000      	movs	r0, #0
 8006134:	6058      	str	r0, [r3, #4]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006136:	6008      	str	r0, [r1, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006138:	f8c4 2084 	str.w	r2, [r4, #132]	@ 0x84
    hdma->DMAmuxRequestGen = 0U;
 800613c:	2200      	movs	r2, #0
 800613e:	e9c3 2215 	strd	r2, r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8006142:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006144:	e7e2      	b.n	800610c <HAL_DMA_Init+0xb8>
    return HAL_ERROR;
 8006146:	2001      	movs	r0, #1
}
 8006148:	4770      	bx	lr
 800614a:	bf00      	nop
 800614c:	40020407 	.word	0x40020407
 8006150:	bffdfbf8 	.word	0xbffdfbf8
 8006154:	cccccccd 	.word	0xcccccccd
 8006158:	40020400 	.word	0x40020400
 800615c:	4002081c 	.word	0x4002081c
 8006160:	40020880 	.word	0x40020880
 8006164:	40020800 	.word	0x40020800
 8006168:	1000823f 	.word	0x1000823f
 800616c:	40020940 	.word	0x40020940
 8006170:	40020900 	.word	0x40020900
 8006174:	bffdfff8 	.word	0xbffdfff8
 8006178:	40020000 	.word	0x40020000

0800617c <HAL_DMA_Start_IT>:
{
 800617c:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(hdma);
 800617e:	f890 4024 	ldrb.w	r4, [r0, #36]	@ 0x24
 8006182:	2c01      	cmp	r4, #1
 8006184:	d009      	beq.n	800619a <HAL_DMA_Start_IT+0x1e>
 8006186:	2401      	movs	r4, #1
 8006188:	f880 4024 	strb.w	r4, [r0, #36]	@ 0x24
  if (HAL_DMA_STATE_READY == hdma->State)
 800618c:	f890 4025 	ldrb.w	r4, [r0, #37]	@ 0x25
 8006190:	2c01      	cmp	r4, #1
 8006192:	d005      	beq.n	80061a0 <HAL_DMA_Start_IT+0x24>
    __HAL_UNLOCK(hdma);
 8006194:	2300      	movs	r3, #0
 8006196:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
  __HAL_LOCK(hdma);
 800619a:	2002      	movs	r0, #2
}
 800619c:	bcf0      	pop	{r4, r5, r6, r7}
 800619e:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_BUSY;
 80061a0:	2402      	movs	r4, #2
 80061a2:	f880 4025 	strb.w	r4, [r0, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80061a6:	2400      	movs	r4, #0
 80061a8:	63c4      	str	r4, [r0, #60]	@ 0x3c
    __HAL_DMA_DISABLE(hdma);
 80061aa:	6804      	ldr	r4, [r0, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80061ac:	6cc6      	ldr	r6, [r0, #76]	@ 0x4c
    __HAL_DMA_DISABLE(hdma);
 80061ae:	6825      	ldr	r5, [r4, #0]
 80061b0:	f025 0501 	bic.w	r5, r5, #1
 80061b4:	6025      	str	r5, [r4, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80061b6:	e9d0 7514 	ldrd	r7, r5, [r0, #80]	@ 0x50
 80061ba:	6077      	str	r7, [r6, #4]
  if (hdma->DMAmuxRequestGen != 0U)
 80061bc:	b115      	cbz	r5, 80061c4 <HAL_DMA_Start_IT+0x48>
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80061be:	e9d0 6716 	ldrd	r6, r7, [r0, #88]	@ 0x58
 80061c2:	6077      	str	r7, [r6, #4]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80061c4:	6c46      	ldr	r6, [r0, #68]	@ 0x44
 80061c6:	6c07      	ldr	r7, [r0, #64]	@ 0x40
 80061c8:	f006 0c1c 	and.w	ip, r6, #28
 80061cc:	2601      	movs	r6, #1
 80061ce:	fa06 f60c 	lsl.w	r6, r6, ip
 80061d2:	607e      	str	r6, [r7, #4]
  hdma->Instance->CNDTR = DataLength;
 80061d4:	6063      	str	r3, [r4, #4]
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80061d6:	6883      	ldr	r3, [r0, #8]
 80061d8:	2b10      	cmp	r3, #16
    if (NULL != hdma->XferHalfCpltCallback)
 80061da:	6b03      	ldr	r3, [r0, #48]	@ 0x30
    hdma->Instance->CPAR = DstAddress;
 80061dc:	bf0b      	itete	eq
 80061de:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->CPAR = SrcAddress;
 80061e0:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 80061e2:	60e1      	streq	r1, [r4, #12]
    hdma->Instance->CMAR = DstAddress;
 80061e4:	60e2      	strne	r2, [r4, #12]
    if (NULL != hdma->XferHalfCpltCallback)
 80061e6:	b1bb      	cbz	r3, 8006218 <HAL_DMA_Start_IT+0x9c>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80061e8:	6823      	ldr	r3, [r4, #0]
 80061ea:	f043 030e 	orr.w	r3, r3, #14
 80061ee:	6023      	str	r3, [r4, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80061f0:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 80061f2:	681a      	ldr	r2, [r3, #0]
 80061f4:	03d2      	lsls	r2, r2, #15
 80061f6:	d503      	bpl.n	8006200 <HAL_DMA_Start_IT+0x84>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80061f8:	681a      	ldr	r2, [r3, #0]
 80061fa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80061fe:	601a      	str	r2, [r3, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 8006200:	b11d      	cbz	r5, 800620a <HAL_DMA_Start_IT+0x8e>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006202:	682b      	ldr	r3, [r5, #0]
 8006204:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006208:	602b      	str	r3, [r5, #0]
    __HAL_DMA_ENABLE(hdma);
 800620a:	6823      	ldr	r3, [r4, #0]
 800620c:	f043 0301 	orr.w	r3, r3, #1
  HAL_StatusTypeDef status = HAL_OK;
 8006210:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8006212:	6023      	str	r3, [r4, #0]
}
 8006214:	bcf0      	pop	{r4, r5, r6, r7}
 8006216:	4770      	bx	lr
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006218:	6823      	ldr	r3, [r4, #0]
 800621a:	f023 0304 	bic.w	r3, r3, #4
 800621e:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006220:	6823      	ldr	r3, [r4, #0]
 8006222:	f043 030a 	orr.w	r3, r3, #10
 8006226:	6023      	str	r3, [r4, #0]
 8006228:	e7e2      	b.n	80061f0 <HAL_DMA_Start_IT+0x74>
 800622a:	bf00      	nop

0800622c <HAL_DMA_Abort>:
  if (NULL == hdma)
 800622c:	2800      	cmp	r0, #0
 800622e:	d033      	beq.n	8006298 <HAL_DMA_Abort+0x6c>
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8006230:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 8006234:	2b02      	cmp	r3, #2
 8006236:	d12a      	bne.n	800628e <HAL_DMA_Abort+0x62>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006238:	6803      	ldr	r3, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800623a:	6c42      	ldr	r2, [r0, #68]	@ 0x44
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800623c:	6819      	ldr	r1, [r3, #0]
{
 800623e:	b430      	push	{r4, r5}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006240:	f021 010e 	bic.w	r1, r1, #14
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006244:	6c84      	ldr	r4, [r0, #72]	@ 0x48
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006246:	6019      	str	r1, [r3, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006248:	6821      	ldr	r1, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800624a:	6c05      	ldr	r5, [r0, #64]	@ 0x40
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800624c:	f421 7180 	bic.w	r1, r1, #256	@ 0x100
 8006250:	6021      	str	r1, [r4, #0]
    __HAL_DMA_DISABLE(hdma);
 8006252:	6819      	ldr	r1, [r3, #0]
 8006254:	f021 0101 	bic.w	r1, r1, #1
 8006258:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800625a:	f002 021c 	and.w	r2, r2, #28
 800625e:	2301      	movs	r3, #1
 8006260:	4093      	lsls	r3, r2
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006262:	e9d0 4214 	ldrd	r4, r2, [r0, #80]	@ 0x50
 8006266:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8006268:	606b      	str	r3, [r5, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800626a:	604c      	str	r4, [r1, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 800626c:	b132      	cbz	r2, 800627c <HAL_DMA_Abort+0x50>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800626e:	6813      	ldr	r3, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006270:	e9d0 1416 	ldrd	r1, r4, [r0, #88]	@ 0x58
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006274:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006278:	6013      	str	r3, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800627a:	604c      	str	r4, [r1, #4]
    __HAL_UNLOCK(hdma);
 800627c:	2300      	movs	r3, #0
    hdma->State = HAL_DMA_STATE_READY;
 800627e:	2201      	movs	r2, #1
 8006280:	f880 2025 	strb.w	r2, [r0, #37]	@ 0x25
    __HAL_UNLOCK(hdma);
 8006284:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
}
 8006288:	bc30      	pop	{r4, r5}
  return HAL_OK;
 800628a:	4618      	mov	r0, r3
}
 800628c:	4770      	bx	lr
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800628e:	2204      	movs	r2, #4
    __HAL_UNLOCK(hdma);
 8006290:	2300      	movs	r3, #0
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006292:	63c2      	str	r2, [r0, #60]	@ 0x3c
    __HAL_UNLOCK(hdma);
 8006294:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
    return HAL_ERROR;
 8006298:	2001      	movs	r0, #1
}
 800629a:	4770      	bx	lr

0800629c <HAL_DMA_Abort_IT>:
{
 800629c:	b538      	push	{r3, r4, r5, lr}
  if (HAL_DMA_STATE_BUSY != hdma->State)
 800629e:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 80062a2:	2b02      	cmp	r3, #2
 80062a4:	d003      	beq.n	80062ae <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80062a6:	2304      	movs	r3, #4
 80062a8:	63c3      	str	r3, [r0, #60]	@ 0x3c
    status = HAL_ERROR;
 80062aa:	2001      	movs	r0, #1
}
 80062ac:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80062ae:	6803      	ldr	r3, [r0, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80062b0:	6c84      	ldr	r4, [r0, #72]	@ 0x48
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80062b2:	6819      	ldr	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80062b4:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 80062b6:	6c05      	ldr	r5, [r0, #64]	@ 0x40
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80062b8:	f021 010e 	bic.w	r1, r1, #14
 80062bc:	6019      	str	r1, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 80062be:	6819      	ldr	r1, [r3, #0]
 80062c0:	f021 0101 	bic.w	r1, r1, #1
 80062c4:	6019      	str	r1, [r3, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80062c6:	6823      	ldr	r3, [r4, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80062c8:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80062ca:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80062ce:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80062d0:	f002 021c 	and.w	r2, r2, #28
 80062d4:	2301      	movs	r3, #1
 80062d6:	4093      	lsls	r3, r2
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80062d8:	e9d0 4214 	ldrd	r4, r2, [r0, #80]	@ 0x50
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80062dc:	606b      	str	r3, [r5, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80062de:	604c      	str	r4, [r1, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 80062e0:	b132      	cbz	r2, 80062f0 <HAL_DMA_Abort_IT+0x54>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80062e2:	6813      	ldr	r3, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80062e4:	e9d0 1416 	ldrd	r1, r4, [r0, #88]	@ 0x58
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80062e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80062ec:	6013      	str	r3, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80062ee:	604c      	str	r4, [r1, #4]
    if (hdma->XferAbortCallback != NULL)
 80062f0:	6b83      	ldr	r3, [r0, #56]	@ 0x38
    hdma->State = HAL_DMA_STATE_READY;
 80062f2:	2101      	movs	r1, #1
    __HAL_UNLOCK(hdma);
 80062f4:	2200      	movs	r2, #0
    hdma->State = HAL_DMA_STATE_READY;
 80062f6:	f880 1025 	strb.w	r1, [r0, #37]	@ 0x25
    __HAL_UNLOCK(hdma);
 80062fa:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
    if (hdma->XferAbortCallback != NULL)
 80062fe:	b103      	cbz	r3, 8006302 <HAL_DMA_Abort_IT+0x66>
      hdma->XferAbortCallback(hdma);
 8006300:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8006302:	2000      	movs	r0, #0
}
 8006304:	bd38      	pop	{r3, r4, r5, pc}
 8006306:	bf00      	nop

08006308 <HAL_DMA_IRQHandler>:
{
 8006308:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800630a:	6c43      	ldr	r3, [r0, #68]	@ 0x44
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800630c:	6c06      	ldr	r6, [r0, #64]	@ 0x40
  uint32_t source_it = hdma->Instance->CCR;
 800630e:	6805      	ldr	r5, [r0, #0]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006310:	6831      	ldr	r1, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8006312:	682c      	ldr	r4, [r5, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8006314:	f003 031c 	and.w	r3, r3, #28
 8006318:	2204      	movs	r2, #4
 800631a:	409a      	lsls	r2, r3
 800631c:	420a      	tst	r2, r1
 800631e:	d00e      	beq.n	800633e <HAL_DMA_IRQHandler+0x36>
 8006320:	f014 0f04 	tst.w	r4, #4
 8006324:	d00b      	beq.n	800633e <HAL_DMA_IRQHandler+0x36>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006326:	682b      	ldr	r3, [r5, #0]
 8006328:	069b      	lsls	r3, r3, #26
 800632a:	d403      	bmi.n	8006334 <HAL_DMA_IRQHandler+0x2c>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800632c:	682b      	ldr	r3, [r5, #0]
 800632e:	f023 0304 	bic.w	r3, r3, #4
 8006332:	602b      	str	r3, [r5, #0]
    if (hdma->XferHalfCpltCallback != NULL)
 8006334:	6b03      	ldr	r3, [r0, #48]	@ 0x30
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8006336:	6072      	str	r2, [r6, #4]
    if (hdma->XferHalfCpltCallback != NULL)
 8006338:	b1cb      	cbz	r3, 800636e <HAL_DMA_IRQHandler+0x66>
}
 800633a:	bc70      	pop	{r4, r5, r6}
      hdma->XferCpltCallback(hdma);
 800633c:	4718      	bx	r3
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800633e:	2202      	movs	r2, #2
 8006340:	409a      	lsls	r2, r3
 8006342:	420a      	tst	r2, r1
 8006344:	d015      	beq.n	8006372 <HAL_DMA_IRQHandler+0x6a>
 8006346:	f014 0f02 	tst.w	r4, #2
 800634a:	d012      	beq.n	8006372 <HAL_DMA_IRQHandler+0x6a>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800634c:	682b      	ldr	r3, [r5, #0]
 800634e:	0699      	lsls	r1, r3, #26
 8006350:	d406      	bmi.n	8006360 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006352:	682b      	ldr	r3, [r5, #0]
 8006354:	f023 030a 	bic.w	r3, r3, #10
 8006358:	602b      	str	r3, [r5, #0]
      hdma->State = HAL_DMA_STATE_READY;
 800635a:	2301      	movs	r3, #1
 800635c:	f880 3025 	strb.w	r3, [r0, #37]	@ 0x25
    if (hdma->XferCpltCallback != NULL)
 8006360:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8006362:	6072      	str	r2, [r6, #4]
    __HAL_UNLOCK(hdma);
 8006364:	2100      	movs	r1, #0
 8006366:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
    if (hdma->XferCpltCallback != NULL)
 800636a:	2b00      	cmp	r3, #0
 800636c:	d1e5      	bne.n	800633a <HAL_DMA_IRQHandler+0x32>
}
 800636e:	bc70      	pop	{r4, r5, r6}
 8006370:	4770      	bx	lr
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8006372:	2208      	movs	r2, #8
 8006374:	409a      	lsls	r2, r3
 8006376:	420a      	tst	r2, r1
 8006378:	d0f9      	beq.n	800636e <HAL_DMA_IRQHandler+0x66>
 800637a:	0722      	lsls	r2, r4, #28
 800637c:	d5f7      	bpl.n	800636e <HAL_DMA_IRQHandler+0x66>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800637e:	682a      	ldr	r2, [r5, #0]
    if (hdma->XferErrorCallback != NULL)
 8006380:	6b41      	ldr	r1, [r0, #52]	@ 0x34
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006382:	f022 020e 	bic.w	r2, r2, #14
 8006386:	602a      	str	r2, [r5, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8006388:	2201      	movs	r2, #1
 800638a:	fa02 f303 	lsl.w	r3, r2, r3
    __HAL_UNLOCK(hdma);
 800638e:	2400      	movs	r4, #0
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8006390:	6073      	str	r3, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006392:	63c2      	str	r2, [r0, #60]	@ 0x3c
    __HAL_UNLOCK(hdma);
 8006394:	f880 4024 	strb.w	r4, [r0, #36]	@ 0x24
    hdma->State = HAL_DMA_STATE_READY;
 8006398:	f880 2025 	strb.w	r2, [r0, #37]	@ 0x25
    if (hdma->XferErrorCallback != NULL)
 800639c:	2900      	cmp	r1, #0
 800639e:	d0e6      	beq.n	800636e <HAL_DMA_IRQHandler+0x66>
}
 80063a0:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 80063a2:	4708      	bx	r1

080063a4 <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 80063a4:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
}
 80063a6:	4770      	bx	lr

080063a8 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80063a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80063ac:	680c      	ldr	r4, [r1, #0]
{
 80063ae:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80063b0:	2c00      	cmp	r4, #0
 80063b2:	d07c      	beq.n	80064ae <HAL_GPIO_Init+0x106>
  uint32_t position = 0x00u;
 80063b4:	2300      	movs	r3, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80063b6:	f04f 0b01 	mov.w	fp, #1
 80063ba:	fa0b fe03 	lsl.w	lr, fp, r3

    if (iocurrent != 0x00u)
 80063be:	ea1e 0a04 	ands.w	sl, lr, r4
 80063c2:	d070      	beq.n	80064a6 <HAL_GPIO_Init+0xfe>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80063c4:	684d      	ldr	r5, [r1, #4]
 80063c6:	f005 0203 	and.w	r2, r5, #3
 80063ca:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80063ce:	2603      	movs	r6, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80063d0:	f102 38ff 	add.w	r8, r2, #4294967295
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80063d4:	fa06 f70c 	lsl.w	r7, r6, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80063d8:	f1b8 0f01 	cmp.w	r8, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80063dc:	ea6f 0707 	mvn.w	r7, r7
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80063e0:	d968      	bls.n	80064b4 <HAL_GPIO_Init+0x10c>
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
        GPIOx->OTYPER = temp;
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80063e2:	2a03      	cmp	r2, #3
 80063e4:	f040 80a4 	bne.w	8006530 <HAL_GPIO_Init+0x188>
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80063e8:	fa02 f20c 	lsl.w	r2, r2, ip
      temp = GPIOx->MODER;
 80063ec:	f8d0 c000 	ldr.w	ip, [r0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80063f0:	ea0c 0707 	and.w	r7, ip, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80063f4:	433a      	orrs	r2, r7
      GPIOx->MODER = temp;

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80063f6:	f415 3f40 	tst.w	r5, #196608	@ 0x30000
      GPIOx->MODER = temp;
 80063fa:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80063fc:	d053      	beq.n	80064a6 <HAL_GPIO_Init+0xfe>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80063fe:	f023 0203 	bic.w	r2, r3, #3
 8006402:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 8006406:	f502 3280 	add.w	r2, r2, #65536	@ 0x10000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800640a:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2u];
 800640e:	6897      	ldr	r7, [r2, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8006410:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8006414:	260f      	movs	r6, #15
 8006416:	fa06 fe0c 	lsl.w	lr, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800641a:	f1b0 4f90 	cmp.w	r0, #1207959552	@ 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800641e:	ea27 070e 	bic.w	r7, r7, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8006422:	d018      	beq.n	8006456 <HAL_GPIO_Init+0xae>
 8006424:	4e53      	ldr	r6, [pc, #332]	@ (8006574 <HAL_GPIO_Init+0x1cc>)
 8006426:	42b0      	cmp	r0, r6
 8006428:	f000 8095 	beq.w	8006556 <HAL_GPIO_Init+0x1ae>
 800642c:	4e52      	ldr	r6, [pc, #328]	@ (8006578 <HAL_GPIO_Init+0x1d0>)
 800642e:	42b0      	cmp	r0, r6
 8006430:	f000 8098 	beq.w	8006564 <HAL_GPIO_Init+0x1bc>
 8006434:	f8df e148 	ldr.w	lr, [pc, #328]	@ 8006580 <HAL_GPIO_Init+0x1d8>
 8006438:	4570      	cmp	r0, lr
 800643a:	f000 8085 	beq.w	8006548 <HAL_GPIO_Init+0x1a0>
 800643e:	f8df e144 	ldr.w	lr, [pc, #324]	@ 8006584 <HAL_GPIO_Init+0x1dc>
 8006442:	4570      	cmp	r0, lr
 8006444:	bf0c      	ite	eq
 8006446:	f04f 0e04 	moveq.w	lr, #4
 800644a:	f04f 0e07 	movne.w	lr, #7
 800644e:	fa0e fc0c 	lsl.w	ip, lr, ip
 8006452:	ea47 070c 	orr.w	r7, r7, ip
        SYSCFG->EXTICR[position >> 2u] = temp;
 8006456:	6097      	str	r7, [r2, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006458:	4a48      	ldr	r2, [pc, #288]	@ (800657c <HAL_GPIO_Init+0x1d4>)
 800645a:	6812      	ldr	r2, [r2, #0]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800645c:	02ee      	lsls	r6, r5, #11
        temp &= ~(iocurrent);
 800645e:	ea6f 070a 	mvn.w	r7, sl
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 8006462:	4e46      	ldr	r6, [pc, #280]	@ (800657c <HAL_GPIO_Init+0x1d4>)
        temp &= ~(iocurrent);
 8006464:	bf54      	ite	pl
 8006466:	403a      	andpl	r2, r7
          temp |= iocurrent;
 8006468:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI->RTSR1 = temp;
 800646c:	6032      	str	r2, [r6, #0]

        temp = EXTI->FTSR1;
 800646e:	6872      	ldr	r2, [r6, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006470:	02ae      	lsls	r6, r5, #10
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 8006472:	4e42      	ldr	r6, [pc, #264]	@ (800657c <HAL_GPIO_Init+0x1d4>)
        temp &= ~(iocurrent);
 8006474:	bf54      	ite	pl
 8006476:	403a      	andpl	r2, r7
          temp |= iocurrent;
 8006478:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI->FTSR1 = temp;
 800647c:	6072      	str	r2, [r6, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800647e:	f8d6 2080 	ldr.w	r2, [r6, #128]	@ 0x80
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006482:	03ee      	lsls	r6, r5, #15
        {
          temp |= iocurrent;
        }
        EXTI->IMR1 = temp;
 8006484:	4e3d      	ldr	r6, [pc, #244]	@ (800657c <HAL_GPIO_Init+0x1d4>)
        temp &= ~(iocurrent);
 8006486:	bf54      	ite	pl
 8006488:	403a      	andpl	r2, r7
          temp |= iocurrent;
 800648a:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI->IMR1 = temp;
 800648e:	f8c6 2080 	str.w	r2, [r6, #128]	@ 0x80

        temp = EXTI->EMR1;
 8006492:	f8d6 2084 	ldr.w	r2, [r6, #132]	@ 0x84
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006496:	03ad      	lsls	r5, r5, #14
        {
          temp |= iocurrent;
        }
        EXTI->EMR1 = temp;
 8006498:	4d38      	ldr	r5, [pc, #224]	@ (800657c <HAL_GPIO_Init+0x1d4>)
        temp &= ~(iocurrent);
 800649a:	bf54      	ite	pl
 800649c:	403a      	andpl	r2, r7
          temp |= iocurrent;
 800649e:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI->EMR1 = temp;
 80064a2:	f8c5 2084 	str.w	r2, [r5, #132]	@ 0x84
      }
    }

    position++;
 80064a6:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80064a8:	fa34 f203 	lsrs.w	r2, r4, r3
 80064ac:	d185      	bne.n	80063ba <HAL_GPIO_Init+0x12>
  }
}
 80064ae:	b003      	add	sp, #12
 80064b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
 80064b4:	f8d0 9008 	ldr.w	r9, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80064b8:	68ce      	ldr	r6, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80064ba:	ea09 0907 	and.w	r9, r9, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 80064be:	fa06 f80c 	lsl.w	r8, r6, ip
 80064c2:	ea48 0809 	orr.w	r8, r8, r9
        GPIOx->OSPEEDR = temp;
 80064c6:	f8c0 8008 	str.w	r8, [r0, #8]
        temp = GPIOx->OTYPER;
 80064ca:	f8d0 8004 	ldr.w	r8, [r0, #4]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80064ce:	688e      	ldr	r6, [r1, #8]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80064d0:	ea28 080e 	bic.w	r8, r8, lr
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80064d4:	f3c5 1e00 	ubfx	lr, r5, #4, #1
 80064d8:	fa0e fe03 	lsl.w	lr, lr, r3
 80064dc:	ea4e 0e08 	orr.w	lr, lr, r8
        GPIOx->OTYPER = temp;
 80064e0:	f8c0 e004 	str.w	lr, [r0, #4]
        temp = GPIOx->PUPDR;
 80064e4:	f8d0 800c 	ldr.w	r8, [r0, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80064e8:	fa06 fe0c 	lsl.w	lr, r6, ip
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80064ec:	ea08 0807 	and.w	r8, r8, r7
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80064f0:	ea4e 0e08 	orr.w	lr, lr, r8
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80064f4:	2a02      	cmp	r2, #2
        GPIOx->PUPDR = temp;
 80064f6:	f8c0 e00c 	str.w	lr, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80064fa:	f47f af75 	bne.w	80063e8 <HAL_GPIO_Init+0x40>
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80064fe:	690e      	ldr	r6, [r1, #16]
        temp = GPIOx->AFR[position >> 3u];
 8006500:	ea4f 08d3 	mov.w	r8, r3, lsr #3
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006504:	f003 0e07 	and.w	lr, r3, #7
 8006508:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 800650c:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8006510:	fa06 f60e 	lsl.w	r6, r6, lr
        temp = GPIOx->AFR[position >> 3u];
 8006514:	f8d8 9020 	ldr.w	r9, [r8, #32]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8006518:	9601      	str	r6, [sp, #4]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800651a:	260f      	movs	r6, #15
 800651c:	fa06 fe0e 	lsl.w	lr, r6, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8006520:	9e01      	ldr	r6, [sp, #4]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006522:	ea29 090e 	bic.w	r9, r9, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8006526:	ea46 0e09 	orr.w	lr, r6, r9
        GPIOx->AFR[position >> 3u] = temp;
 800652a:	f8c8 e020 	str.w	lr, [r8, #32]
 800652e:	e75b      	b.n	80063e8 <HAL_GPIO_Init+0x40>
        temp = GPIOx->PUPDR;
 8006530:	f8d0 800c 	ldr.w	r8, [r0, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006534:	688e      	ldr	r6, [r1, #8]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006536:	ea08 0807 	and.w	r8, r8, r7
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800653a:	fa06 fe0c 	lsl.w	lr, r6, ip
 800653e:	ea4e 0e08 	orr.w	lr, lr, r8
        GPIOx->PUPDR = temp;
 8006542:	f8c0 e00c 	str.w	lr, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006546:	e74f      	b.n	80063e8 <HAL_GPIO_Init+0x40>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8006548:	f04f 0e03 	mov.w	lr, #3
 800654c:	fa0e fc0c 	lsl.w	ip, lr, ip
 8006550:	ea47 070c 	orr.w	r7, r7, ip
 8006554:	e77f      	b.n	8006456 <HAL_GPIO_Init+0xae>
 8006556:	f04f 0e01 	mov.w	lr, #1
 800655a:	fa0e fc0c 	lsl.w	ip, lr, ip
 800655e:	ea47 070c 	orr.w	r7, r7, ip
 8006562:	e778      	b.n	8006456 <HAL_GPIO_Init+0xae>
 8006564:	f04f 0e02 	mov.w	lr, #2
 8006568:	fa0e fc0c 	lsl.w	ip, lr, ip
 800656c:	ea47 070c 	orr.w	r7, r7, ip
 8006570:	e771      	b.n	8006456 <HAL_GPIO_Init+0xae>
 8006572:	bf00      	nop
 8006574:	48000400 	.word	0x48000400
 8006578:	48000800 	.word	0x48000800
 800657c:	58000800 	.word	0x58000800
 8006580:	48000c00 	.word	0x48000c00
 8006584:	48001000 	.word	0x48001000

08006588 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8006588:	6903      	ldr	r3, [r0, #16]
 800658a:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 800658c:	bf14      	ite	ne
 800658e:	2001      	movne	r0, #1
 8006590:	2000      	moveq	r0, #0
 8006592:	4770      	bx	lr

08006594 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006594:	b10a      	cbz	r2, 800659a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006596:	6181      	str	r1, [r0, #24]
 8006598:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800659a:	6281      	str	r1, [r0, #40]	@ 0x28
  }
}
 800659c:	4770      	bx	lr
 800659e:	bf00      	nop

080065a0 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80065a0:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80065a2:	ea01 0203 	and.w	r2, r1, r3
 80065a6:	ea21 0103 	bic.w	r1, r1, r3
 80065aa:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80065ae:	6181      	str	r1, [r0, #24]
}
 80065b0:	4770      	bx	lr
 80065b2:	bf00      	nop

080065b4 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80065b4:	4a04      	ldr	r2, [pc, #16]	@ (80065c8 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 80065b6:	68d1      	ldr	r1, [r2, #12]
 80065b8:	4201      	tst	r1, r0
 80065ba:	d100      	bne.n	80065be <HAL_GPIO_EXTI_IRQHandler+0xa>
 80065bc:	4770      	bx	lr
{
 80065be:	b508      	push	{r3, lr}
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80065c0:	60d0      	str	r0, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80065c2:	f7fb fc37 	bl	8001e34 <HAL_GPIO_EXTI_Callback>
  }
}
 80065c6:	bd08      	pop	{r3, pc}
 80065c8:	58000800 	.word	0x58000800

080065cc <HAL_HSEM_FreeCallback>:
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 80065cc:	4770      	bx	lr
 80065ce:	bf00      	nop

080065d0 <HAL_HSEM_IRQHandler>:
{
 80065d0:	b508      	push	{r3, lr}
  statusreg = HSEM_COMMON->MISR;
 80065d2:	4b05      	ldr	r3, [pc, #20]	@ (80065e8 <HAL_HSEM_IRQHandler+0x18>)
 80065d4:	68d8      	ldr	r0, [r3, #12]
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 80065d6:	681a      	ldr	r2, [r3, #0]
 80065d8:	ea22 0200 	bic.w	r2, r2, r0
 80065dc:	601a      	str	r2, [r3, #0]
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 80065de:	6058      	str	r0, [r3, #4]
  HAL_HSEM_FreeCallback(statusreg);
 80065e0:	f7ff fff4 	bl	80065cc <HAL_HSEM_FreeCallback>
}
 80065e4:	bd08      	pop	{r3, pc}
 80065e6:	bf00      	nop
 80065e8:	58001500 	.word	0x58001500

080065ec <I2C_WaitOnFlagUntilTimeout.constprop.0>:
  * @param  Status The actual Flag status (SET or RESET).
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
 80065ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
                                                    uint32_t Timeout, uint32_t Tickstart)
{
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80065f0:	6803      	ldr	r3, [r0, #0]
 80065f2:	699a      	ldr	r2, [r3, #24]
 80065f4:	0414      	lsls	r4, r2, #16
 80065f6:	f140 808a 	bpl.w	800670e <I2C_WaitOnFlagUntilTimeout.constprop.0+0x122>
 80065fa:	4604      	mov	r4, r0
 80065fc:	4688      	mov	r8, r1
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80065fe:	f04f 0910 	mov.w	r9, #16
  uint32_t itflag   = hi2c->Instance->ISR;
 8006602:	699e      	ldr	r6, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006604:	f016 0610 	ands.w	r6, r6, #16
 8006608:	f000 8084 	beq.w	8006714 <I2C_WaitOnFlagUntilTimeout.constprop.0+0x128>
  uint32_t error_code = 0;
 800660c:	2600      	movs	r6, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800660e:	f8c3 901c 	str.w	r9, [r3, #28]
  uint32_t tickstart = Tickstart;
 8006612:	4645      	mov	r5, r8
  HAL_StatusTypeDef status = HAL_OK;
 8006614:	4637      	mov	r7, r6

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006616:	699a      	ldr	r2, [r3, #24]
 8006618:	0692      	lsls	r2, r2, #26
 800661a:	d429      	bmi.n	8006670 <I2C_WaitOnFlagUntilTimeout.constprop.0+0x84>
 800661c:	bb5f      	cbnz	r7, 8006676 <I2C_WaitOnFlagUntilTimeout.constprop.0+0x8a>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800661e:	f7ff f8a5 	bl	800576c <HAL_GetTick>
 8006622:	1b40      	subs	r0, r0, r5
 8006624:	2819      	cmp	r0, #25
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006626:	6823      	ldr	r3, [r4, #0]
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006628:	d9f5      	bls.n	8006616 <I2C_WaitOnFlagUntilTimeout.constprop.0+0x2a>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800662a:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
 800662c:	f894 2042 	ldrb.w	r2, [r4, #66]	@ 0x42

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006630:	6999      	ldr	r1, [r3, #24]
 8006632:	0409      	lsls	r1, r1, #16
          tmp2 = hi2c->Mode;
 8006634:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006636:	d50b      	bpl.n	8006650 <I2C_WaitOnFlagUntilTimeout.constprop.0+0x64>
 8006638:	0440      	lsls	r0, r0, #17
 800663a:	d409      	bmi.n	8006650 <I2C_WaitOnFlagUntilTimeout.constprop.0+0x64>
              (tmp1 != I2C_CR2_STOP) && \
 800663c:	2a20      	cmp	r2, #32
 800663e:	d007      	beq.n	8006650 <I2C_WaitOnFlagUntilTimeout.constprop.0+0x64>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006640:	685a      	ldr	r2, [r3, #4]
 8006642:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006646:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006648:	f7ff f890 	bl	800576c <HAL_GetTick>
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800664c:	6823      	ldr	r3, [r4, #0]
            tickstart = HAL_GetTick();
 800664e:	4605      	mov	r5, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006650:	699a      	ldr	r2, [r3, #24]
 8006652:	0691      	lsls	r1, r2, #26
 8006654:	d4df      	bmi.n	8006616 <I2C_WaitOnFlagUntilTimeout.constprop.0+0x2a>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006656:	f7ff f889 	bl	800576c <HAL_GetTick>
 800665a:	1b40      	subs	r0, r0, r5
 800665c:	2819      	cmp	r0, #25
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800665e:	6823      	ldr	r3, [r4, #0]
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006660:	d9f6      	bls.n	8006650 <I2C_WaitOnFlagUntilTimeout.constprop.0+0x64>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006662:	699a      	ldr	r2, [r3, #24]
 8006664:	0692      	lsls	r2, r2, #26
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8006666:	f04f 0620 	mov.w	r6, #32

              status = HAL_ERROR;
 800666a:	f04f 0701 	mov.w	r7, #1
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800666e:	d5d5      	bpl.n	800661c <I2C_WaitOnFlagUntilTimeout.constprop.0+0x30>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006670:	b90f      	cbnz	r7, 8006676 <I2C_WaitOnFlagUntilTimeout.constprop.0+0x8a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006672:	2220      	movs	r2, #32
 8006674:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006676:	f046 0604 	orr.w	r6, r6, #4

    status = HAL_ERROR;
 800667a:	2501      	movs	r5, #1
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800667c:	699a      	ldr	r2, [r3, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800667e:	05d7      	lsls	r7, r2, #23
 8006680:	d531      	bpl.n	80066e6 <I2C_WaitOnFlagUntilTimeout.constprop.0+0xfa>
  {
    error_code |= HAL_I2C_ERROR_BERR;

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006682:	f44f 7180 	mov.w	r1, #256	@ 0x100

    status = HAL_ERROR;
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006686:	0550      	lsls	r0, r2, #21
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006688:	61d9      	str	r1, [r3, #28]
    error_code |= HAL_I2C_ERROR_BERR;
 800668a:	f046 0601 	orr.w	r6, r6, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800668e:	d504      	bpl.n	800669a <I2C_WaitOnFlagUntilTimeout.constprop.0+0xae>
  {
    error_code |= HAL_I2C_ERROR_OVR;

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006690:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8006694:	61d9      	str	r1, [r3, #28]
    error_code |= HAL_I2C_ERROR_OVR;
 8006696:	f046 0608 	orr.w	r6, r6, #8

    status = HAL_ERROR;
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800669a:	0592      	lsls	r2, r2, #22
 800669c:	d504      	bpl.n	80066a8 <I2C_WaitOnFlagUntilTimeout.constprop.0+0xbc>
  {
    error_code |= HAL_I2C_ERROR_ARLO;

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800669e:	f44f 7200 	mov.w	r2, #512	@ 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 80066a2:	f046 0602 	orr.w	r6, r6, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80066a6:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80066a8:	699a      	ldr	r2, [r3, #24]
 80066aa:	0795      	lsls	r5, r2, #30
    hi2c->Instance->TXDR = 0x00U;
 80066ac:	bf44      	itt	mi
 80066ae:	2200      	movmi	r2, #0
 80066b0:	629a      	strmi	r2, [r3, #40]	@ 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80066b2:	699a      	ldr	r2, [r3, #24]
 80066b4:	07d0      	lsls	r0, r2, #31
 80066b6:	d403      	bmi.n	80066c0 <I2C_WaitOnFlagUntilTimeout.constprop.0+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80066b8:	699a      	ldr	r2, [r3, #24]
 80066ba:	f042 0201 	orr.w	r2, r2, #1
 80066be:	619a      	str	r2, [r3, #24]
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80066c0:	685a      	ldr	r2, [r3, #4]
 80066c2:	481a      	ldr	r0, [pc, #104]	@ (800672c <I2C_WaitOnFlagUntilTimeout.constprop.0+0x140>)
 80066c4:	4002      	ands	r2, r0
 80066c6:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 80066c8:	6c63      	ldr	r3, [r4, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80066ca:	2120      	movs	r1, #32
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80066cc:	2200      	movs	r2, #0
    hi2c->ErrorCode |= error_code;
 80066ce:	4333      	orrs	r3, r6
 80066d0:	6463      	str	r3, [r4, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80066d2:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80066d6:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
          __HAL_UNLOCK(hi2c);
 80066da:	2300      	movs	r3, #0
 80066dc:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 80066e0:	2001      	movs	r0, #1
}
 80066e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80066e6:	0551      	lsls	r1, r2, #21
 80066e8:	d4d2      	bmi.n	8006690 <I2C_WaitOnFlagUntilTimeout.constprop.0+0xa4>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80066ea:	0597      	lsls	r7, r2, #22
 80066ec:	d4d7      	bmi.n	800669e <I2C_WaitOnFlagUntilTimeout.constprop.0+0xb2>
  if (status != HAL_OK)
 80066ee:	2d00      	cmp	r5, #0
 80066f0:	d1da      	bne.n	80066a8 <I2C_WaitOnFlagUntilTimeout.constprop.0+0xbc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066f2:	f7ff f83b 	bl	800576c <HAL_GetTick>
 80066f6:	eba0 0008 	sub.w	r0, r0, r8
 80066fa:	2819      	cmp	r0, #25
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80066fc:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066fe:	d902      	bls.n	8006706 <I2C_WaitOnFlagUntilTimeout.constprop.0+0x11a>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006700:	699a      	ldr	r2, [r3, #24]
 8006702:	0411      	lsls	r1, r2, #16
 8006704:	d408      	bmi.n	8006718 <I2C_WaitOnFlagUntilTimeout.constprop.0+0x12c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006706:	699a      	ldr	r2, [r3, #24]
 8006708:	0412      	lsls	r2, r2, #16
 800670a:	f53f af7a 	bmi.w	8006602 <I2C_WaitOnFlagUntilTimeout.constprop.0+0x16>
  return HAL_OK;
 800670e:	2000      	movs	r0, #0
}
 8006710:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  HAL_StatusTypeDef status = HAL_OK;
 8006714:	4635      	mov	r5, r6
 8006716:	e7b1      	b.n	800667c <I2C_WaitOnFlagUntilTimeout.constprop.0+0x90>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006718:	6c63      	ldr	r3, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800671a:	2220      	movs	r2, #32
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800671c:	4313      	orrs	r3, r2
 800671e:	6463      	str	r3, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006720:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006724:	f884 5042 	strb.w	r5, [r4, #66]	@ 0x42
          return HAL_ERROR;
 8006728:	e7d7      	b.n	80066da <I2C_WaitOnFlagUntilTimeout.constprop.0+0xee>
 800672a:	bf00      	nop
 800672c:	fe00e800 	.word	0xfe00e800

08006730 <I2C_WaitOnTXISFlagUntilTimeout>:
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006730:	6803      	ldr	r3, [r0, #0]
{
 8006732:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006736:	4680      	mov	r8, r0
 8006738:	460d      	mov	r5, r1
 800673a:	4617      	mov	r7, r2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800673c:	2610      	movs	r6, #16
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800673e:	699c      	ldr	r4, [r3, #24]
 8006740:	f014 0402 	ands.w	r4, r4, #2
 8006744:	d168      	bne.n	8006818 <I2C_WaitOnTXISFlagUntilTimeout+0xe8>
  uint32_t itflag   = hi2c->Instance->ISR;
 8006746:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006748:	f012 0c10 	ands.w	ip, r2, #16
 800674c:	d062      	beq.n	8006814 <I2C_WaitOnTXISFlagUntilTimeout+0xe4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800674e:	1c68      	adds	r0, r5, #1
 8006750:	61de      	str	r6, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006752:	d164      	bne.n	800681e <I2C_WaitOnTXISFlagUntilTimeout+0xee>
 8006754:	699a      	ldr	r2, [r3, #24]
 8006756:	0691      	lsls	r1, r2, #26
 8006758:	d5fc      	bpl.n	8006754 <I2C_WaitOnTXISFlagUntilTimeout+0x24>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800675a:	2220      	movs	r2, #32
 800675c:	61da      	str	r2, [r3, #28]
    error_code |= HAL_I2C_ERROR_AF;
 800675e:	f044 0c04 	orr.w	ip, r4, #4
    status = HAL_ERROR;
 8006762:	2101      	movs	r1, #1
  itflag = hi2c->Instance->ISR;
 8006764:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006766:	05d0      	lsls	r0, r2, #23
 8006768:	d534      	bpl.n	80067d4 <I2C_WaitOnTXISFlagUntilTimeout+0xa4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800676a:	f44f 7180 	mov.w	r1, #256	@ 0x100
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800676e:	0554      	lsls	r4, r2, #21
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006770:	61d9      	str	r1, [r3, #28]
    error_code |= HAL_I2C_ERROR_BERR;
 8006772:	f04c 0c01 	orr.w	ip, ip, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006776:	d504      	bpl.n	8006782 <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006778:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800677c:	61d9      	str	r1, [r3, #28]
    error_code |= HAL_I2C_ERROR_OVR;
 800677e:	f04c 0c08 	orr.w	ip, ip, #8
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006782:	0595      	lsls	r5, r2, #22
 8006784:	d504      	bpl.n	8006790 <I2C_WaitOnTXISFlagUntilTimeout+0x60>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006786:	f44f 7200 	mov.w	r2, #512	@ 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 800678a:	f04c 0c02 	orr.w	ip, ip, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800678e:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006790:	699a      	ldr	r2, [r3, #24]
 8006792:	0790      	lsls	r0, r2, #30
    hi2c->Instance->TXDR = 0x00U;
 8006794:	bf44      	itt	mi
 8006796:	2200      	movmi	r2, #0
 8006798:	629a      	strmi	r2, [r3, #40]	@ 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800679a:	699a      	ldr	r2, [r3, #24]
 800679c:	07d1      	lsls	r1, r2, #31
 800679e:	d403      	bmi.n	80067a8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80067a0:	699a      	ldr	r2, [r3, #24]
 80067a2:	f042 0201 	orr.w	r2, r2, #1
 80067a6:	619a      	str	r2, [r3, #24]
    I2C_RESET_CR2(hi2c);
 80067a8:	685a      	ldr	r2, [r3, #4]
 80067aa:	483b      	ldr	r0, [pc, #236]	@ (8006898 <I2C_WaitOnTXISFlagUntilTimeout+0x168>)
 80067ac:	4002      	ands	r2, r0
 80067ae:	605a      	str	r2, [r3, #4]
    hi2c->ErrorCode |= error_code;
 80067b0:	f8d8 3044 	ldr.w	r3, [r8, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80067b4:	2120      	movs	r1, #32
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80067b6:	2200      	movs	r2, #0
    hi2c->ErrorCode |= error_code;
 80067b8:	ea43 030c 	orr.w	r3, r3, ip
 80067bc:	f8c8 3044 	str.w	r3, [r8, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80067c0:	f888 1041 	strb.w	r1, [r8, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80067c4:	f888 2042 	strb.w	r2, [r8, #66]	@ 0x42
          __HAL_UNLOCK(hi2c);
 80067c8:	2300      	movs	r3, #0
 80067ca:	f888 3040 	strb.w	r3, [r8, #64]	@ 0x40
      return HAL_ERROR;
 80067ce:	2001      	movs	r0, #1
}
 80067d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80067d4:	0550      	lsls	r0, r2, #21
 80067d6:	d4cf      	bmi.n	8006778 <I2C_WaitOnTXISFlagUntilTimeout+0x48>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80067d8:	0594      	lsls	r4, r2, #22
 80067da:	d4d4      	bmi.n	8006786 <I2C_WaitOnTXISFlagUntilTimeout+0x56>
  if (status != HAL_OK)
 80067dc:	2900      	cmp	r1, #0
 80067de:	d1d7      	bne.n	8006790 <I2C_WaitOnTXISFlagUntilTimeout+0x60>
    if (Timeout != HAL_MAX_DELAY)
 80067e0:	1c6a      	adds	r2, r5, #1
 80067e2:	d0ac      	beq.n	800673e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067e4:	f7fe ffc2 	bl	800576c <HAL_GetTick>
 80067e8:	1bc3      	subs	r3, r0, r7
 80067ea:	42ab      	cmp	r3, r5
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80067ec:	f8d8 3000 	ldr.w	r3, [r8]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067f0:	d801      	bhi.n	80067f6 <I2C_WaitOnTXISFlagUntilTimeout+0xc6>
 80067f2:	2d00      	cmp	r5, #0
 80067f4:	d1a3      	bne.n	800673e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80067f6:	699a      	ldr	r2, [r3, #24]
 80067f8:	f012 0202 	ands.w	r2, r2, #2
 80067fc:	d19f      	bne.n	800673e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80067fe:	f8d8 3044 	ldr.w	r3, [r8, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006802:	2120      	movs	r1, #32
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006804:	430b      	orrs	r3, r1
 8006806:	f8c8 3044 	str.w	r3, [r8, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800680a:	f888 1041 	strb.w	r1, [r8, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800680e:	f888 2042 	strb.w	r2, [r8, #66]	@ 0x42
          return HAL_ERROR;
 8006812:	e7d9      	b.n	80067c8 <I2C_WaitOnTXISFlagUntilTimeout+0x98>
  HAL_StatusTypeDef status = HAL_OK;
 8006814:	4661      	mov	r1, ip
 8006816:	e7a5      	b.n	8006764 <I2C_WaitOnTXISFlagUntilTimeout+0x34>
  return HAL_OK;
 8006818:	2000      	movs	r0, #0
}
 800681a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  uint32_t tickstart = Tickstart;
 800681e:	46b9      	mov	r9, r7
  HAL_StatusTypeDef status = HAL_OK;
 8006820:	46a2      	mov	sl, r4
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006822:	699a      	ldr	r2, [r3, #24]
 8006824:	0692      	lsls	r2, r2, #26
 8006826:	d432      	bmi.n	800688e <I2C_WaitOnTXISFlagUntilTimeout+0x15e>
 8006828:	f1ba 0f00 	cmp.w	sl, #0
 800682c:	d197      	bne.n	800675e <I2C_WaitOnTXISFlagUntilTimeout+0x2e>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800682e:	f7fe ff9d 	bl	800576c <HAL_GetTick>
 8006832:	eba0 0009 	sub.w	r0, r0, r9
 8006836:	4285      	cmp	r5, r0
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006838:	f8d8 3000 	ldr.w	r3, [r8]
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800683c:	d301      	bcc.n	8006842 <I2C_WaitOnTXISFlagUntilTimeout+0x112>
 800683e:	2d00      	cmp	r5, #0
 8006840:	d1ef      	bne.n	8006822 <I2C_WaitOnTXISFlagUntilTimeout+0xf2>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006842:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
 8006844:	f898 2042 	ldrb.w	r2, [r8, #66]	@ 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006848:	6999      	ldr	r1, [r3, #24]
 800684a:	0409      	lsls	r1, r1, #16
          tmp2 = hi2c->Mode;
 800684c:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800684e:	d50c      	bpl.n	800686a <I2C_WaitOnTXISFlagUntilTimeout+0x13a>
 8006850:	0441      	lsls	r1, r0, #17
 8006852:	d40a      	bmi.n	800686a <I2C_WaitOnTXISFlagUntilTimeout+0x13a>
              (tmp1 != I2C_CR2_STOP) && \
 8006854:	2a20      	cmp	r2, #32
 8006856:	d008      	beq.n	800686a <I2C_WaitOnTXISFlagUntilTimeout+0x13a>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006858:	685a      	ldr	r2, [r3, #4]
 800685a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800685e:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 8006860:	f7fe ff84 	bl	800576c <HAL_GetTick>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006864:	f8d8 3000 	ldr.w	r3, [r8]
            tickstart = HAL_GetTick();
 8006868:	4681      	mov	r9, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800686a:	699a      	ldr	r2, [r3, #24]
 800686c:	0690      	lsls	r0, r2, #26
 800686e:	d4d8      	bmi.n	8006822 <I2C_WaitOnTXISFlagUntilTimeout+0xf2>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006870:	f7fe ff7c 	bl	800576c <HAL_GetTick>
 8006874:	eba0 0009 	sub.w	r0, r0, r9
 8006878:	2819      	cmp	r0, #25
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800687a:	f8d8 3000 	ldr.w	r3, [r8]
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800687e:	d9f4      	bls.n	800686a <I2C_WaitOnTXISFlagUntilTimeout+0x13a>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006880:	699a      	ldr	r2, [r3, #24]
 8006882:	0692      	lsls	r2, r2, #26
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8006884:	f04f 0420 	mov.w	r4, #32
              status = HAL_ERROR;
 8006888:	f04f 0a01 	mov.w	sl, #1
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800688c:	d5cc      	bpl.n	8006828 <I2C_WaitOnTXISFlagUntilTimeout+0xf8>
    if (status == HAL_OK)
 800688e:	f1ba 0f00 	cmp.w	sl, #0
 8006892:	f43f af62 	beq.w	800675a <I2C_WaitOnTXISFlagUntilTimeout+0x2a>
 8006896:	e762      	b.n	800675e <I2C_WaitOnTXISFlagUntilTimeout+0x2e>
 8006898:	fe00e800 	.word	0xfe00e800

0800689c <I2C_WaitOnFlagUntilTimeout>:
{
 800689c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068a0:	4605      	mov	r5, r0
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80068a2:	6800      	ldr	r0, [r0, #0]
{
 80068a4:	4688      	mov	r8, r1
 80068a6:	4617      	mov	r7, r2
 80068a8:	461e      	mov	r6, r3
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80068aa:	f04f 0a10 	mov.w	sl, #16
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80068ae:	6983      	ldr	r3, [r0, #24]
 80068b0:	ea38 0303 	bics.w	r3, r8, r3
 80068b4:	bf0c      	ite	eq
 80068b6:	2301      	moveq	r3, #1
 80068b8:	2300      	movne	r3, #0
 80068ba:	42bb      	cmp	r3, r7
 80068bc:	d16a      	bne.n	8006994 <I2C_WaitOnFlagUntilTimeout+0xf8>
  uint32_t itflag   = hi2c->Instance->ISR;
 80068be:	6984      	ldr	r4, [r0, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80068c0:	f014 0410 	ands.w	r4, r4, #16
 80068c4:	d064      	beq.n	8006990 <I2C_WaitOnFlagUntilTimeout+0xf4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80068c6:	1c71      	adds	r1, r6, #1
 80068c8:	f8c0 a01c 	str.w	sl, [r0, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80068cc:	d165      	bne.n	800699a <I2C_WaitOnFlagUntilTimeout+0xfe>
 80068ce:	6983      	ldr	r3, [r0, #24]
 80068d0:	069a      	lsls	r2, r3, #26
 80068d2:	d5fc      	bpl.n	80068ce <I2C_WaitOnFlagUntilTimeout+0x32>
  uint32_t error_code = 0;
 80068d4:	2400      	movs	r4, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80068d6:	2320      	movs	r3, #32
 80068d8:	61c3      	str	r3, [r0, #28]
    error_code |= HAL_I2C_ERROR_AF;
 80068da:	f044 0404 	orr.w	r4, r4, #4
    status = HAL_ERROR;
 80068de:	2201      	movs	r2, #1
  itflag = hi2c->Instance->ISR;
 80068e0:	6983      	ldr	r3, [r0, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80068e2:	05d9      	lsls	r1, r3, #23
 80068e4:	d531      	bpl.n	800694a <I2C_WaitOnFlagUntilTimeout+0xae>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80068e6:	f44f 7280 	mov.w	r2, #256	@ 0x100
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80068ea:	055e      	lsls	r6, r3, #21
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80068ec:	61c2      	str	r2, [r0, #28]
    error_code |= HAL_I2C_ERROR_BERR;
 80068ee:	f044 0401 	orr.w	r4, r4, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80068f2:	d504      	bpl.n	80068fe <I2C_WaitOnFlagUntilTimeout+0x62>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80068f4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80068f8:	61c2      	str	r2, [r0, #28]
    error_code |= HAL_I2C_ERROR_OVR;
 80068fa:	f044 0408 	orr.w	r4, r4, #8
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80068fe:	059a      	lsls	r2, r3, #22
 8006900:	d504      	bpl.n	800690c <I2C_WaitOnFlagUntilTimeout+0x70>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006902:	f44f 7300 	mov.w	r3, #512	@ 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 8006906:	f044 0402 	orr.w	r4, r4, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800690a:	61c3      	str	r3, [r0, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800690c:	6983      	ldr	r3, [r0, #24]
 800690e:	0799      	lsls	r1, r3, #30
    hi2c->Instance->TXDR = 0x00U;
 8006910:	bf44      	itt	mi
 8006912:	2300      	movmi	r3, #0
 8006914:	6283      	strmi	r3, [r0, #40]	@ 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006916:	6983      	ldr	r3, [r0, #24]
 8006918:	07da      	lsls	r2, r3, #31
 800691a:	d403      	bmi.n	8006924 <I2C_WaitOnFlagUntilTimeout+0x88>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800691c:	6983      	ldr	r3, [r0, #24]
 800691e:	f043 0301 	orr.w	r3, r3, #1
 8006922:	6183      	str	r3, [r0, #24]
    I2C_RESET_CR2(hi2c);
 8006924:	6843      	ldr	r3, [r0, #4]
 8006926:	4a3b      	ldr	r2, [pc, #236]	@ (8006a14 <I2C_WaitOnFlagUntilTimeout+0x178>)
 8006928:	4013      	ands	r3, r2
 800692a:	6043      	str	r3, [r0, #4]
    hi2c->ErrorCode |= error_code;
 800692c:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800692e:	2120      	movs	r1, #32
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006930:	2200      	movs	r2, #0
    hi2c->ErrorCode |= error_code;
 8006932:	4323      	orrs	r3, r4
 8006934:	646b      	str	r3, [r5, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006936:	f885 1041 	strb.w	r1, [r5, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800693a:	f885 2042 	strb.w	r2, [r5, #66]	@ 0x42
          __HAL_UNLOCK(hi2c);
 800693e:	2300      	movs	r3, #0
 8006940:	f885 3040 	strb.w	r3, [r5, #64]	@ 0x40
      return HAL_ERROR;
 8006944:	2001      	movs	r0, #1
}
 8006946:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800694a:	0559      	lsls	r1, r3, #21
 800694c:	d4d2      	bmi.n	80068f4 <I2C_WaitOnFlagUntilTimeout+0x58>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800694e:	059b      	lsls	r3, r3, #22
 8006950:	d4d7      	bmi.n	8006902 <I2C_WaitOnFlagUntilTimeout+0x66>
  if (status != HAL_OK)
 8006952:	2a00      	cmp	r2, #0
 8006954:	d1da      	bne.n	800690c <I2C_WaitOnFlagUntilTimeout+0x70>
    if (Timeout != HAL_MAX_DELAY)
 8006956:	1c73      	adds	r3, r6, #1
 8006958:	d0a9      	beq.n	80068ae <I2C_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800695a:	f7fe ff07 	bl	800576c <HAL_GetTick>
 800695e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006960:	1ac3      	subs	r3, r0, r3
 8006962:	42b3      	cmp	r3, r6
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006964:	6828      	ldr	r0, [r5, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006966:	d801      	bhi.n	800696c <I2C_WaitOnFlagUntilTimeout+0xd0>
 8006968:	2e00      	cmp	r6, #0
 800696a:	d19e      	bne.n	80068aa <I2C_WaitOnFlagUntilTimeout+0xe>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800696c:	6983      	ldr	r3, [r0, #24]
 800696e:	ea38 0303 	bics.w	r3, r8, r3
 8006972:	bf0c      	ite	eq
 8006974:	2301      	moveq	r3, #1
 8006976:	2300      	movne	r3, #0
 8006978:	42bb      	cmp	r3, r7
 800697a:	d196      	bne.n	80068aa <I2C_WaitOnFlagUntilTimeout+0xe>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800697c:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800697e:	2120      	movs	r1, #32
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006980:	430b      	orrs	r3, r1
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006982:	2200      	movs	r2, #0
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006984:	646b      	str	r3, [r5, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006986:	f885 1041 	strb.w	r1, [r5, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800698a:	f885 2042 	strb.w	r2, [r5, #66]	@ 0x42
          return HAL_ERROR;
 800698e:	e7d6      	b.n	800693e <I2C_WaitOnFlagUntilTimeout+0xa2>
  HAL_StatusTypeDef status = HAL_OK;
 8006990:	4622      	mov	r2, r4
 8006992:	e7a5      	b.n	80068e0 <I2C_WaitOnFlagUntilTimeout+0x44>
  return HAL_OK;
 8006994:	2000      	movs	r0, #0
}
 8006996:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  uint32_t error_code = 0;
 800699a:	2400      	movs	r4, #0
  uint32_t tickstart = Tickstart;
 800699c:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
  HAL_StatusTypeDef status = HAL_OK;
 80069a0:	46a3      	mov	fp, r4
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80069a2:	6983      	ldr	r3, [r0, #24]
 80069a4:	069b      	lsls	r3, r3, #26
 80069a6:	d42f      	bmi.n	8006a08 <I2C_WaitOnFlagUntilTimeout+0x16c>
 80069a8:	f1bb 0f00 	cmp.w	fp, #0
 80069ac:	d195      	bne.n	80068da <I2C_WaitOnFlagUntilTimeout+0x3e>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80069ae:	f7fe fedd 	bl	800576c <HAL_GetTick>
 80069b2:	eba0 0009 	sub.w	r0, r0, r9
 80069b6:	4286      	cmp	r6, r0
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80069b8:	6828      	ldr	r0, [r5, #0]
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80069ba:	d301      	bcc.n	80069c0 <I2C_WaitOnFlagUntilTimeout+0x124>
 80069bc:	2e00      	cmp	r6, #0
 80069be:	d1f0      	bne.n	80069a2 <I2C_WaitOnFlagUntilTimeout+0x106>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80069c0:	6841      	ldr	r1, [r0, #4]
          tmp2 = hi2c->Mode;
 80069c2:	f895 3042 	ldrb.w	r3, [r5, #66]	@ 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80069c6:	6982      	ldr	r2, [r0, #24]
 80069c8:	0412      	lsls	r2, r2, #16
          tmp2 = hi2c->Mode;
 80069ca:	b2db      	uxtb	r3, r3
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80069cc:	d50b      	bpl.n	80069e6 <I2C_WaitOnFlagUntilTimeout+0x14a>
 80069ce:	044a      	lsls	r2, r1, #17
 80069d0:	d409      	bmi.n	80069e6 <I2C_WaitOnFlagUntilTimeout+0x14a>
              (tmp1 != I2C_CR2_STOP) && \
 80069d2:	2b20      	cmp	r3, #32
 80069d4:	d007      	beq.n	80069e6 <I2C_WaitOnFlagUntilTimeout+0x14a>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80069d6:	6843      	ldr	r3, [r0, #4]
 80069d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80069dc:	6043      	str	r3, [r0, #4]
            tickstart = HAL_GetTick();
 80069de:	f7fe fec5 	bl	800576c <HAL_GetTick>
 80069e2:	4681      	mov	r9, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80069e4:	6828      	ldr	r0, [r5, #0]
 80069e6:	6983      	ldr	r3, [r0, #24]
 80069e8:	0699      	lsls	r1, r3, #26
 80069ea:	d4da      	bmi.n	80069a2 <I2C_WaitOnFlagUntilTimeout+0x106>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80069ec:	f7fe febe 	bl	800576c <HAL_GetTick>
 80069f0:	eba0 0009 	sub.w	r0, r0, r9
 80069f4:	2819      	cmp	r0, #25
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80069f6:	6828      	ldr	r0, [r5, #0]
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80069f8:	d9f5      	bls.n	80069e6 <I2C_WaitOnFlagUntilTimeout+0x14a>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80069fa:	6983      	ldr	r3, [r0, #24]
 80069fc:	069b      	lsls	r3, r3, #26
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80069fe:	f04f 0420 	mov.w	r4, #32
              status = HAL_ERROR;
 8006a02:	f04f 0b01 	mov.w	fp, #1
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006a06:	d5cf      	bpl.n	80069a8 <I2C_WaitOnFlagUntilTimeout+0x10c>
    if (status == HAL_OK)
 8006a08:	f1bb 0f00 	cmp.w	fp, #0
 8006a0c:	f43f af63 	beq.w	80068d6 <I2C_WaitOnFlagUntilTimeout+0x3a>
 8006a10:	e763      	b.n	80068da <I2C_WaitOnFlagUntilTimeout+0x3e>
 8006a12:	bf00      	nop
 8006a14:	fe00e800 	.word	0xfe00e800

08006a18 <I2C_WaitOnSTOPFlagUntilTimeout>:
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006a18:	6803      	ldr	r3, [r0, #0]
{
 8006a1a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a1e:	4605      	mov	r5, r0
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006a20:	6998      	ldr	r0, [r3, #24]
 8006a22:	0684      	lsls	r4, r0, #26
 8006a24:	d45e      	bmi.n	8006ae4 <I2C_WaitOnSTOPFlagUntilTimeout+0xcc>
 8006a26:	460e      	mov	r6, r1
 8006a28:	4617      	mov	r7, r2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006a2a:	f04f 0810 	mov.w	r8, #16
  uint32_t itflag   = hi2c->Instance->ISR;
 8006a2e:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006a30:	f012 0c10 	ands.w	ip, r2, #16
 8006a34:	d059      	beq.n	8006aea <I2C_WaitOnSTOPFlagUntilTimeout+0xd2>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006a36:	1c70      	adds	r0, r6, #1
 8006a38:	f8c3 801c 	str.w	r8, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006a3c:	d160      	bne.n	8006b00 <I2C_WaitOnSTOPFlagUntilTimeout+0xe8>
 8006a3e:	699a      	ldr	r2, [r3, #24]
 8006a40:	0691      	lsls	r1, r2, #26
 8006a42:	d5fc      	bpl.n	8006a3e <I2C_WaitOnSTOPFlagUntilTimeout+0x26>
  uint32_t error_code = 0;
 8006a44:	2400      	movs	r4, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006a46:	2220      	movs	r2, #32
 8006a48:	61da      	str	r2, [r3, #28]
    error_code |= HAL_I2C_ERROR_AF;
 8006a4a:	f044 0c04 	orr.w	ip, r4, #4
    status = HAL_ERROR;
 8006a4e:	2101      	movs	r1, #1
  itflag = hi2c->Instance->ISR;
 8006a50:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006a52:	05d0      	lsls	r0, r2, #23
 8006a54:	d532      	bpl.n	8006abc <I2C_WaitOnSTOPFlagUntilTimeout+0xa4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006a56:	f44f 7180 	mov.w	r1, #256	@ 0x100
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006a5a:	0554      	lsls	r4, r2, #21
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006a5c:	61d9      	str	r1, [r3, #28]
    error_code |= HAL_I2C_ERROR_BERR;
 8006a5e:	f04c 0c01 	orr.w	ip, ip, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006a62:	d504      	bpl.n	8006a6e <I2C_WaitOnSTOPFlagUntilTimeout+0x56>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006a64:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8006a68:	61d9      	str	r1, [r3, #28]
    error_code |= HAL_I2C_ERROR_OVR;
 8006a6a:	f04c 0c08 	orr.w	ip, ip, #8
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006a6e:	0596      	lsls	r6, r2, #22
 8006a70:	d504      	bpl.n	8006a7c <I2C_WaitOnSTOPFlagUntilTimeout+0x64>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006a72:	f44f 7200 	mov.w	r2, #512	@ 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 8006a76:	f04c 0c02 	orr.w	ip, ip, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006a7a:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006a7c:	699a      	ldr	r2, [r3, #24]
 8006a7e:	0790      	lsls	r0, r2, #30
    hi2c->Instance->TXDR = 0x00U;
 8006a80:	bf44      	itt	mi
 8006a82:	2200      	movmi	r2, #0
 8006a84:	629a      	strmi	r2, [r3, #40]	@ 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006a86:	699a      	ldr	r2, [r3, #24]
 8006a88:	07d1      	lsls	r1, r2, #31
 8006a8a:	d403      	bmi.n	8006a94 <I2C_WaitOnSTOPFlagUntilTimeout+0x7c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006a8c:	699a      	ldr	r2, [r3, #24]
 8006a8e:	f042 0201 	orr.w	r2, r2, #1
 8006a92:	619a      	str	r2, [r3, #24]
    I2C_RESET_CR2(hi2c);
 8006a94:	685a      	ldr	r2, [r3, #4]
 8006a96:	4836      	ldr	r0, [pc, #216]	@ (8006b70 <I2C_WaitOnSTOPFlagUntilTimeout+0x158>)
 8006a98:	4002      	ands	r2, r0
 8006a9a:	605a      	str	r2, [r3, #4]
    hi2c->ErrorCode |= error_code;
 8006a9c:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006a9e:	2120      	movs	r1, #32
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006aa0:	2200      	movs	r2, #0
    hi2c->ErrorCode |= error_code;
 8006aa2:	ea43 030c 	orr.w	r3, r3, ip
 8006aa6:	646b      	str	r3, [r5, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006aa8:	f885 1041 	strb.w	r1, [r5, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006aac:	f885 2042 	strb.w	r2, [r5, #66]	@ 0x42
        __HAL_UNLOCK(hi2c);
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	f885 3040 	strb.w	r3, [r5, #64]	@ 0x40
      return HAL_ERROR;
 8006ab6:	2001      	movs	r0, #1
}
 8006ab8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006abc:	0550      	lsls	r0, r2, #21
 8006abe:	d4d1      	bmi.n	8006a64 <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006ac0:	0594      	lsls	r4, r2, #22
 8006ac2:	d4d6      	bmi.n	8006a72 <I2C_WaitOnSTOPFlagUntilTimeout+0x5a>
  if (status != HAL_OK)
 8006ac4:	2900      	cmp	r1, #0
 8006ac6:	d1d9      	bne.n	8006a7c <I2C_WaitOnSTOPFlagUntilTimeout+0x64>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ac8:	f7fe fe50 	bl	800576c <HAL_GetTick>
 8006acc:	1bc0      	subs	r0, r0, r7
 8006ace:	42b0      	cmp	r0, r6
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8006ad0:	682b      	ldr	r3, [r5, #0]
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ad2:	d800      	bhi.n	8006ad6 <I2C_WaitOnSTOPFlagUntilTimeout+0xbe>
 8006ad4:	b91e      	cbnz	r6, 8006ade <I2C_WaitOnSTOPFlagUntilTimeout+0xc6>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8006ad6:	699a      	ldr	r2, [r3, #24]
 8006ad8:	f012 0220 	ands.w	r2, r2, #32
 8006adc:	d007      	beq.n	8006aee <I2C_WaitOnSTOPFlagUntilTimeout+0xd6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006ade:	699a      	ldr	r2, [r3, #24]
 8006ae0:	0692      	lsls	r2, r2, #26
 8006ae2:	d5a4      	bpl.n	8006a2e <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
  return HAL_OK;
 8006ae4:	2000      	movs	r0, #0
}
 8006ae6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  HAL_StatusTypeDef status = HAL_OK;
 8006aea:	4661      	mov	r1, ip
 8006aec:	e7b0      	b.n	8006a50 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006aee:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006af0:	2120      	movs	r1, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006af2:	430b      	orrs	r3, r1
 8006af4:	646b      	str	r3, [r5, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006af6:	f885 1041 	strb.w	r1, [r5, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006afa:	f885 2042 	strb.w	r2, [r5, #66]	@ 0x42
        return HAL_ERROR;
 8006afe:	e7d7      	b.n	8006ab0 <I2C_WaitOnSTOPFlagUntilTimeout+0x98>
  uint32_t error_code = 0;
 8006b00:	2400      	movs	r4, #0
  uint32_t tickstart = Tickstart;
 8006b02:	46b9      	mov	r9, r7
  HAL_StatusTypeDef status = HAL_OK;
 8006b04:	46a2      	mov	sl, r4
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006b06:	699a      	ldr	r2, [r3, #24]
 8006b08:	0692      	lsls	r2, r2, #26
 8006b0a:	d42c      	bmi.n	8006b66 <I2C_WaitOnSTOPFlagUntilTimeout+0x14e>
 8006b0c:	f1ba 0f00 	cmp.w	sl, #0
 8006b10:	d19b      	bne.n	8006a4a <I2C_WaitOnSTOPFlagUntilTimeout+0x32>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006b12:	f7fe fe2b 	bl	800576c <HAL_GetTick>
 8006b16:	eba0 0009 	sub.w	r0, r0, r9
 8006b1a:	4286      	cmp	r6, r0
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006b1c:	682b      	ldr	r3, [r5, #0]
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006b1e:	d301      	bcc.n	8006b24 <I2C_WaitOnSTOPFlagUntilTimeout+0x10c>
 8006b20:	2e00      	cmp	r6, #0
 8006b22:	d1f0      	bne.n	8006b06 <I2C_WaitOnSTOPFlagUntilTimeout+0xee>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006b24:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
 8006b26:	f895 2042 	ldrb.w	r2, [r5, #66]	@ 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006b2a:	6999      	ldr	r1, [r3, #24]
 8006b2c:	0409      	lsls	r1, r1, #16
          tmp2 = hi2c->Mode;
 8006b2e:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006b30:	d50b      	bpl.n	8006b4a <I2C_WaitOnSTOPFlagUntilTimeout+0x132>
 8006b32:	0441      	lsls	r1, r0, #17
 8006b34:	d409      	bmi.n	8006b4a <I2C_WaitOnSTOPFlagUntilTimeout+0x132>
              (tmp1 != I2C_CR2_STOP) && \
 8006b36:	2a20      	cmp	r2, #32
 8006b38:	d007      	beq.n	8006b4a <I2C_WaitOnSTOPFlagUntilTimeout+0x132>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006b3a:	685a      	ldr	r2, [r3, #4]
 8006b3c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006b40:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 8006b42:	f7fe fe13 	bl	800576c <HAL_GetTick>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006b46:	682b      	ldr	r3, [r5, #0]
            tickstart = HAL_GetTick();
 8006b48:	4681      	mov	r9, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006b4a:	699a      	ldr	r2, [r3, #24]
 8006b4c:	0690      	lsls	r0, r2, #26
 8006b4e:	d4da      	bmi.n	8006b06 <I2C_WaitOnSTOPFlagUntilTimeout+0xee>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006b50:	f7fe fe0c 	bl	800576c <HAL_GetTick>
 8006b54:	eba0 0009 	sub.w	r0, r0, r9
 8006b58:	2819      	cmp	r0, #25
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006b5a:	682b      	ldr	r3, [r5, #0]
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006b5c:	d9f5      	bls.n	8006b4a <I2C_WaitOnSTOPFlagUntilTimeout+0x132>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8006b5e:	2420      	movs	r4, #32
              status = HAL_ERROR;
 8006b60:	f04f 0a01 	mov.w	sl, #1
 8006b64:	e7cf      	b.n	8006b06 <I2C_WaitOnSTOPFlagUntilTimeout+0xee>
    if (status == HAL_OK)
 8006b66:	f1ba 0f00 	cmp.w	sl, #0
 8006b6a:	f43f af6c 	beq.w	8006a46 <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 8006b6e:	e76c      	b.n	8006a4a <I2C_WaitOnSTOPFlagUntilTimeout+0x32>
 8006b70:	fe00e800 	.word	0xfe00e800

08006b74 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8006b74:	2800      	cmp	r0, #0
 8006b76:	d054      	beq.n	8006c22 <HAL_I2C_Init+0xae>
{
 8006b78:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006b7a:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8006b7e:	4604      	mov	r4, r0
 8006b80:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d047      	beq.n	8006c18 <HAL_I2C_Init+0xa4>
  __HAL_I2C_DISABLE(hi2c);
 8006b88:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8006b8a:	2224      	movs	r2, #36	@ 0x24
 8006b8c:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
  __HAL_I2C_DISABLE(hi2c);
 8006b90:	6819      	ldr	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006b92:	6862      	ldr	r2, [r4, #4]
  __HAL_I2C_DISABLE(hi2c);
 8006b94:	f021 0101 	bic.w	r1, r1, #1
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006b98:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
  __HAL_I2C_DISABLE(hi2c);
 8006b9c:	6019      	str	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006b9e:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006ba0:	689a      	ldr	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006ba2:	68e1      	ldr	r1, [r4, #12]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006ba4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006ba8:	2901      	cmp	r1, #1
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006baa:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006bac:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006bae:	d009      	beq.n	8006bc4 <HAL_I2C_Init+0x50>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006bb0:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006bb4:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006bb6:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006bb8:	d107      	bne.n	8006bca <HAL_I2C_Init+0x56>
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006bba:	685a      	ldr	r2, [r3, #4]
 8006bbc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006bc0:	605a      	str	r2, [r3, #4]
 8006bc2:	e006      	b.n	8006bd2 <HAL_I2C_Init+0x5e>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006bc4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006bc8:	609a      	str	r2, [r3, #8]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006bca:	685a      	ldr	r2, [r3, #4]
 8006bcc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006bd0:	605a      	str	r2, [r3, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006bd2:	6859      	ldr	r1, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006bd4:	6922      	ldr	r2, [r4, #16]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006bd6:	f041 7100 	orr.w	r1, r1, #33554432	@ 0x2000000
 8006bda:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 8006bde:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006be0:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006be2:	68d8      	ldr	r0, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006be4:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006be6:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006be8:	f420 4000 	bic.w	r0, r0, #32768	@ 0x8000
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006bec:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006bf0:	69e1      	ldr	r1, [r4, #28]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006bf2:	60d8      	str	r0, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006bf4:	6a20      	ldr	r0, [r4, #32]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006bf6:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006bf8:	4301      	orrs	r1, r0
 8006bfa:	6019      	str	r1, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8006bfc:	6819      	ldr	r1, [r3, #0]
 8006bfe:	f041 0101 	orr.w	r1, r1, #1
 8006c02:	6019      	str	r1, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006c04:	2200      	movs	r2, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8006c06:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006c08:	6462      	str	r2, [r4, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006c0a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006c0e:	6322      	str	r2, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c10:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
  return HAL_OK;
 8006c14:	4610      	mov	r0, r2
}
 8006c16:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8006c18:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    HAL_I2C_MspInit(hi2c);
 8006c1c:	f7fb f83e 	bl	8001c9c <HAL_I2C_MspInit>
 8006c20:	e7b2      	b.n	8006b88 <HAL_I2C_Init+0x14>
    return HAL_ERROR;
 8006c22:	2001      	movs	r0, #1
}
 8006c24:	4770      	bx	lr
 8006c26:	bf00      	nop

08006c28 <HAL_I2C_Mem_Write>:
{
 8006c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c2c:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8006c2e:	f890 0041 	ldrb.w	r0, [r0, #65]	@ 0x41
{
 8006c32:	b082      	sub	sp, #8
  if (hi2c->State == HAL_I2C_STATE_READY)
 8006c34:	2820      	cmp	r0, #32
{
 8006c36:	f8bd a02c 	ldrh.w	sl, [sp, #44]	@ 0x2c
 8006c3a:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
  if (hi2c->State == HAL_I2C_STATE_READY)
 8006c3c:	f040 80a2 	bne.w	8006d84 <HAL_I2C_Mem_Write+0x15c>
    if ((pData == NULL) || (Size == 0U))
 8006c40:	4698      	mov	r8, r3
 8006c42:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	f000 8096 	beq.w	8006d76 <HAL_I2C_Mem_Write+0x14e>
 8006c4a:	f1ba 0f00 	cmp.w	sl, #0
 8006c4e:	f000 8092 	beq.w	8006d76 <HAL_I2C_Mem_Write+0x14e>
    __HAL_LOCK(hi2c);
 8006c52:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8006c56:	2b01      	cmp	r3, #1
 8006c58:	f000 8094 	beq.w	8006d84 <HAL_I2C_Mem_Write+0x15c>
 8006c5c:	2301      	movs	r3, #1
 8006c5e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    tickstart = HAL_GetTick();
 8006c62:	460d      	mov	r5, r1
 8006c64:	4691      	mov	r9, r2
 8006c66:	f7fe fd81 	bl	800576c <HAL_GetTick>
 8006c6a:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006c6c:	4601      	mov	r1, r0
 8006c6e:	4620      	mov	r0, r4
 8006c70:	f7ff fcbc 	bl	80065ec <I2C_WaitOnFlagUntilTimeout.constprop.0>
 8006c74:	2800      	cmp	r0, #0
 8006c76:	f040 8081 	bne.w	8006d7c <HAL_I2C_Mem_Write+0x154>
    hi2c->pBuffPtr  = pData;
 8006c7a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006c7c:	6263      	str	r3, [r4, #36]	@ 0x24
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006c7e:	2321      	movs	r3, #33	@ 0x21
 8006c80:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006c84:	6822      	ldr	r2, [r4, #0]
 8006c86:	4963      	ldr	r1, [pc, #396]	@ (8006e14 <HAL_I2C_Mem_Write+0x1ec>)
    hi2c->XferISR   = NULL;
 8006c88:	6360      	str	r0, [r4, #52]	@ 0x34
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006c8a:	2340      	movs	r3, #64	@ 0x40
 8006c8c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006c90:	6460      	str	r0, [r4, #68]	@ 0x44
    hi2c->XferCount = Size;
 8006c92:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 8006c96:	6853      	ldr	r3, [r2, #4]
 8006c98:	400b      	ands	r3, r1
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006c9a:	fa5f f188 	uxtb.w	r1, r8
  MODIFY_REG(hi2c->Instance->CR2, \
 8006c9e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006ca2:	f3c5 0509 	ubfx	r5, r5, #0, #10
  MODIFY_REG(hi2c->Instance->CR2, \
 8006ca6:	432b      	orrs	r3, r5
 8006ca8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006cac:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8006cb0:	6053      	str	r3, [r2, #4]
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006cb2:	4639      	mov	r1, r7
 8006cb4:	4632      	mov	r2, r6
 8006cb6:	4620      	mov	r0, r4
 8006cb8:	f7ff fd3a 	bl	8006730 <I2C_WaitOnTXISFlagUntilTimeout>
 8006cbc:	2800      	cmp	r0, #0
 8006cbe:	d165      	bne.n	8006d8c <HAL_I2C_Mem_Write+0x164>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006cc0:	f1b8 0f01 	cmp.w	r8, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006cc4:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006cc6:	d165      	bne.n	8006d94 <HAL_I2C_Mem_Write+0x16c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006cc8:	fa5f f289 	uxtb.w	r2, r9
 8006ccc:	629a      	str	r2, [r3, #40]	@ 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006cce:	9600      	str	r6, [sp, #0]
 8006cd0:	463b      	mov	r3, r7
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	2180      	movs	r1, #128	@ 0x80
 8006cd6:	4620      	mov	r0, r4
 8006cd8:	f7ff fde0 	bl	800689c <I2C_WaitOnFlagUntilTimeout>
 8006cdc:	2800      	cmp	r0, #0
 8006cde:	d155      	bne.n	8006d8c <HAL_I2C_Mem_Write+0x164>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006ce0:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 8006ce2:	6822      	ldr	r2, [r4, #0]
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006ce4:	b29b      	uxth	r3, r3
 8006ce6:	2bff      	cmp	r3, #255	@ 0xff
 8006ce8:	d970      	bls.n	8006dcc <HAL_I2C_Mem_Write+0x1a4>
  MODIFY_REG(hi2c->Instance->CR2, \
 8006cea:	6853      	ldr	r3, [r2, #4]
 8006cec:	494a      	ldr	r1, [pc, #296]	@ (8006e18 <HAL_I2C_Mem_Write+0x1f0>)
 8006cee:	400b      	ands	r3, r1
 8006cf0:	432b      	orrs	r3, r5
 8006cf2:	f043 73ff 	orr.w	r3, r3, #33423360	@ 0x1fe0000
 8006cf6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006cfa:	21ff      	movs	r1, #255	@ 0xff
 8006cfc:	8521      	strh	r1, [r4, #40]	@ 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 8006cfe:	6053      	str	r3, [r2, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006d00:	e003      	b.n	8006d0a <HAL_I2C_Mem_Write+0xe2>
    } while (hi2c->XferCount > 0U);
 8006d02:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8006d04:	b29b      	uxth	r3, r3
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d06e      	beq.n	8006de8 <HAL_I2C_Mem_Write+0x1c0>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006d0a:	4632      	mov	r2, r6
 8006d0c:	4639      	mov	r1, r7
 8006d0e:	4620      	mov	r0, r4
 8006d10:	f7ff fd0e 	bl	8006730 <I2C_WaitOnTXISFlagUntilTimeout>
 8006d14:	2800      	cmp	r0, #0
 8006d16:	d131      	bne.n	8006d7c <HAL_I2C_Mem_Write+0x154>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006d18:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8006d1a:	6823      	ldr	r3, [r4, #0]
 8006d1c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006d20:	629a      	str	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006d22:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8006d24:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      hi2c->pBuffPtr++;
 8006d26:	6261      	str	r1, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8006d28:	3b01      	subs	r3, #1
 8006d2a:	b29b      	uxth	r3, r3
 8006d2c:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006d2e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8006d30:	3a01      	subs	r2, #1
 8006d32:	b292      	uxth	r2, r2
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006d34:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8006d36:	8522      	strh	r2, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d0e2      	beq.n	8006d02 <HAL_I2C_Mem_Write+0xda>
 8006d3c:	2a00      	cmp	r2, #0
 8006d3e:	d1e0      	bne.n	8006d02 <HAL_I2C_Mem_Write+0xda>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006d40:	2180      	movs	r1, #128	@ 0x80
 8006d42:	9600      	str	r6, [sp, #0]
 8006d44:	463b      	mov	r3, r7
 8006d46:	4620      	mov	r0, r4
 8006d48:	f7ff fda8 	bl	800689c <I2C_WaitOnFlagUntilTimeout>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006d4c:	21ff      	movs	r1, #255	@ 0xff
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006d4e:	b9a8      	cbnz	r0, 8006d7c <HAL_I2C_Mem_Write+0x154>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006d50:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 8006d52:	f8df c0c4 	ldr.w	ip, [pc, #196]	@ 8006e18 <HAL_I2C_Mem_Write+0x1f0>
 8006d56:	6822      	ldr	r2, [r4, #0]
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006d58:	b29b      	uxth	r3, r3
 8006d5a:	428b      	cmp	r3, r1
  MODIFY_REG(hi2c->Instance->CR2, \
 8006d5c:	4660      	mov	r0, ip
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006d5e:	d928      	bls.n	8006db2 <HAL_I2C_Mem_Write+0x18a>
  MODIFY_REG(hi2c->Instance->CR2, \
 8006d60:	6853      	ldr	r3, [r2, #4]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006d62:	8521      	strh	r1, [r4, #40]	@ 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 8006d64:	ea03 030c 	and.w	r3, r3, ip
 8006d68:	432b      	orrs	r3, r5
 8006d6a:	f043 73ff 	orr.w	r3, r3, #33423360	@ 0x1fe0000
 8006d6e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006d72:	6053      	str	r3, [r2, #4]
}
 8006d74:	e7c5      	b.n	8006d02 <HAL_I2C_Mem_Write+0xda>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006d76:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006d7a:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 8006d7c:	2001      	movs	r0, #1
}
 8006d7e:	b002      	add	sp, #8
 8006d80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_LOCK(hi2c);
 8006d84:	2002      	movs	r0, #2
}
 8006d86:	b002      	add	sp, #8
 8006d88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      __HAL_UNLOCK(hi2c);
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 8006d92:	e7f3      	b.n	8006d7c <HAL_I2C_Mem_Write+0x154>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006d94:	ea4f 2219 	mov.w	r2, r9, lsr #8
 8006d98:	629a      	str	r2, [r3, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006d9a:	4639      	mov	r1, r7
 8006d9c:	4632      	mov	r2, r6
 8006d9e:	4620      	mov	r0, r4
 8006da0:	f7ff fcc6 	bl	8006730 <I2C_WaitOnTXISFlagUntilTimeout>
 8006da4:	2800      	cmp	r0, #0
 8006da6:	d1f1      	bne.n	8006d8c <HAL_I2C_Mem_Write+0x164>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006da8:	6823      	ldr	r3, [r4, #0]
 8006daa:	fa5f f289 	uxtb.w	r2, r9
 8006dae:	629a      	str	r2, [r3, #40]	@ 0x28
 8006db0:	e78d      	b.n	8006cce <HAL_I2C_Mem_Write+0xa6>
          hi2c->XferSize = hi2c->XferCount;
 8006db2:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 8006db4:	6851      	ldr	r1, [r2, #4]
          hi2c->XferSize = hi2c->XferCount;
 8006db6:	b29b      	uxth	r3, r3
 8006db8:	8523      	strh	r3, [r4, #40]	@ 0x28
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006dba:	b2db      	uxtb	r3, r3
  MODIFY_REG(hi2c->Instance->CR2, \
 8006dbc:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 8006dc0:	4001      	ands	r1, r0
 8006dc2:	430b      	orrs	r3, r1
 8006dc4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8006dc8:	6053      	str	r3, [r2, #4]
}
 8006dca:	e79a      	b.n	8006d02 <HAL_I2C_Mem_Write+0xda>
      hi2c->XferSize = hi2c->XferCount;
 8006dcc:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 8006dce:	4812      	ldr	r0, [pc, #72]	@ (8006e18 <HAL_I2C_Mem_Write+0x1f0>)
 8006dd0:	6851      	ldr	r1, [r2, #4]
      hi2c->XferSize = hi2c->XferCount;
 8006dd2:	b29b      	uxth	r3, r3
 8006dd4:	8523      	strh	r3, [r4, #40]	@ 0x28
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006dd6:	b2db      	uxtb	r3, r3
  MODIFY_REG(hi2c->Instance->CR2, \
 8006dd8:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 8006ddc:	4001      	ands	r1, r0
 8006dde:	430b      	orrs	r3, r1
 8006de0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8006de4:	6053      	str	r3, [r2, #4]
}
 8006de6:	e790      	b.n	8006d0a <HAL_I2C_Mem_Write+0xe2>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006de8:	4632      	mov	r2, r6
 8006dea:	4639      	mov	r1, r7
 8006dec:	4620      	mov	r0, r4
 8006dee:	f7ff fe13 	bl	8006a18 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006df2:	2800      	cmp	r0, #0
 8006df4:	d1c2      	bne.n	8006d7c <HAL_I2C_Mem_Write+0x154>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006df6:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 8006df8:	4d08      	ldr	r5, [pc, #32]	@ (8006e1c <HAL_I2C_Mem_Write+0x1f4>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006dfa:	2120      	movs	r1, #32
 8006dfc:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8006dfe:	685a      	ldr	r2, [r3, #4]
 8006e00:	402a      	ands	r2, r5
 8006e02:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8006e04:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 8006e08:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006e0c:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
    return HAL_OK;
 8006e10:	e7b5      	b.n	8006d7e <HAL_I2C_Mem_Write+0x156>
 8006e12:	bf00      	nop
 8006e14:	fc009800 	.word	0xfc009800
 8006e18:	fc009c00 	.word	0xfc009c00
 8006e1c:	fe00e800 	.word	0xfe00e800

08006e20 <HAL_I2C_Mem_Read>:
{
 8006e20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e24:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8006e26:	f890 0041 	ldrb.w	r0, [r0, #65]	@ 0x41
{
 8006e2a:	b082      	sub	sp, #8
  if (hi2c->State == HAL_I2C_STATE_READY)
 8006e2c:	2820      	cmp	r0, #32
{
 8006e2e:	f8bd a02c 	ldrh.w	sl, [sp, #44]	@ 0x2c
 8006e32:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
  if (hi2c->State == HAL_I2C_STATE_READY)
 8006e34:	f040 80a3 	bne.w	8006f7e <HAL_I2C_Mem_Read+0x15e>
    if ((pData == NULL) || (Size == 0U))
 8006e38:	4698      	mov	r8, r3
 8006e3a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	f000 8097 	beq.w	8006f70 <HAL_I2C_Mem_Read+0x150>
 8006e42:	f1ba 0f00 	cmp.w	sl, #0
 8006e46:	f000 8093 	beq.w	8006f70 <HAL_I2C_Mem_Read+0x150>
    __HAL_LOCK(hi2c);
 8006e4a:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8006e4e:	2b01      	cmp	r3, #1
 8006e50:	f000 8095 	beq.w	8006f7e <HAL_I2C_Mem_Read+0x15e>
 8006e54:	2301      	movs	r3, #1
 8006e56:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    tickstart = HAL_GetTick();
 8006e5a:	460d      	mov	r5, r1
 8006e5c:	4691      	mov	r9, r2
 8006e5e:	f7fe fc85 	bl	800576c <HAL_GetTick>
 8006e62:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006e64:	4601      	mov	r1, r0
 8006e66:	4620      	mov	r0, r4
 8006e68:	f7ff fbc0 	bl	80065ec <I2C_WaitOnFlagUntilTimeout.constprop.0>
 8006e6c:	2800      	cmp	r0, #0
 8006e6e:	f040 8082 	bne.w	8006f76 <HAL_I2C_Mem_Read+0x156>
    hi2c->pBuffPtr  = pData;
 8006e72:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006e74:	6263      	str	r3, [r4, #36]	@ 0x24
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006e76:	2322      	movs	r3, #34	@ 0x22
 8006e78:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  MODIFY_REG(hi2c->Instance->CR2, \
 8006e7c:	6822      	ldr	r2, [r4, #0]
 8006e7e:	4964      	ldr	r1, [pc, #400]	@ (8007010 <HAL_I2C_Mem_Read+0x1f0>)
    hi2c->XferISR   = NULL;
 8006e80:	6360      	str	r0, [r4, #52]	@ 0x34
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006e82:	2340      	movs	r3, #64	@ 0x40
 8006e84:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006e88:	6460      	str	r0, [r4, #68]	@ 0x44
    hi2c->XferCount = Size;
 8006e8a:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 8006e8e:	6853      	ldr	r3, [r2, #4]
 8006e90:	400b      	ands	r3, r1
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006e92:	fa5f f188 	uxtb.w	r1, r8
  MODIFY_REG(hi2c->Instance->CR2, \
 8006e96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006e9a:	f3c5 0509 	ubfx	r5, r5, #0, #10
  MODIFY_REG(hi2c->Instance->CR2, \
 8006e9e:	432b      	orrs	r3, r5
 8006ea0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8006ea4:	6053      	str	r3, [r2, #4]
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006ea6:	4639      	mov	r1, r7
 8006ea8:	4632      	mov	r2, r6
 8006eaa:	4620      	mov	r0, r4
 8006eac:	f7ff fc40 	bl	8006730 <I2C_WaitOnTXISFlagUntilTimeout>
 8006eb0:	2800      	cmp	r0, #0
 8006eb2:	d168      	bne.n	8006f86 <HAL_I2C_Mem_Read+0x166>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006eb4:	f1b8 0f01 	cmp.w	r8, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006eb8:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006eba:	d168      	bne.n	8006f8e <HAL_I2C_Mem_Read+0x16e>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006ebc:	fa5f f289 	uxtb.w	r2, r9
 8006ec0:	629a      	str	r2, [r3, #40]	@ 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006ec2:	9600      	str	r6, [sp, #0]
 8006ec4:	463b      	mov	r3, r7
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	2140      	movs	r1, #64	@ 0x40
 8006eca:	4620      	mov	r0, r4
 8006ecc:	f7ff fce6 	bl	800689c <I2C_WaitOnFlagUntilTimeout>
 8006ed0:	2800      	cmp	r0, #0
 8006ed2:	d158      	bne.n	8006f86 <HAL_I2C_Mem_Read+0x166>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006ed4:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 8006ed6:	6822      	ldr	r2, [r4, #0]
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006ed8:	b29b      	uxth	r3, r3
 8006eda:	2bff      	cmp	r3, #255	@ 0xff
 8006edc:	d973      	bls.n	8006fc6 <HAL_I2C_Mem_Read+0x1a6>
  MODIFY_REG(hi2c->Instance->CR2, \
 8006ede:	6853      	ldr	r3, [r2, #4]
 8006ee0:	494b      	ldr	r1, [pc, #300]	@ (8007010 <HAL_I2C_Mem_Read+0x1f0>)
 8006ee2:	400b      	ands	r3, r1
 8006ee4:	432b      	orrs	r3, r5
 8006ee6:	f043 73ff 	orr.w	r3, r3, #33423360	@ 0x1fe0000
 8006eea:	f443 3392 	orr.w	r3, r3, #74752	@ 0x12400
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006eee:	21ff      	movs	r1, #255	@ 0xff
 8006ef0:	8521      	strh	r1, [r4, #40]	@ 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 8006ef2:	6053      	str	r3, [r2, #4]
}
 8006ef4:	e003      	b.n	8006efe <HAL_I2C_Mem_Read+0xde>
    } while (hi2c->XferCount > 0U);
 8006ef6:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8006ef8:	b29b      	uxth	r3, r3
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d073      	beq.n	8006fe6 <HAL_I2C_Mem_Read+0x1c6>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8006efe:	463b      	mov	r3, r7
 8006f00:	9600      	str	r6, [sp, #0]
 8006f02:	2200      	movs	r2, #0
 8006f04:	2104      	movs	r1, #4
 8006f06:	4620      	mov	r0, r4
 8006f08:	f7ff fcc8 	bl	800689c <I2C_WaitOnFlagUntilTimeout>
 8006f0c:	2800      	cmp	r0, #0
 8006f0e:	d132      	bne.n	8006f76 <HAL_I2C_Mem_Read+0x156>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006f10:	6822      	ldr	r2, [r4, #0]
 8006f12:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8006f14:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006f16:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 8006f18:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8006f1a:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      hi2c->pBuffPtr++;
 8006f1c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8006f1e:	3b01      	subs	r3, #1
 8006f20:	b29b      	uxth	r3, r3
 8006f22:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006f24:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8006f26:	3a01      	subs	r2, #1
 8006f28:	b292      	uxth	r2, r2
      hi2c->pBuffPtr++;
 8006f2a:	3101      	adds	r1, #1
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006f2c:	b29b      	uxth	r3, r3
      hi2c->pBuffPtr++;
 8006f2e:	6261      	str	r1, [r4, #36]	@ 0x24
      hi2c->XferSize--;
 8006f30:	8522      	strh	r2, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d0df      	beq.n	8006ef6 <HAL_I2C_Mem_Read+0xd6>
 8006f36:	2a00      	cmp	r2, #0
 8006f38:	d1dd      	bne.n	8006ef6 <HAL_I2C_Mem_Read+0xd6>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006f3a:	2180      	movs	r1, #128	@ 0x80
 8006f3c:	9600      	str	r6, [sp, #0]
 8006f3e:	463b      	mov	r3, r7
 8006f40:	4620      	mov	r0, r4
 8006f42:	f7ff fcab 	bl	800689c <I2C_WaitOnFlagUntilTimeout>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006f46:	21ff      	movs	r1, #255	@ 0xff
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006f48:	b9a8      	cbnz	r0, 8006f76 <HAL_I2C_Mem_Read+0x156>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006f4a:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 8006f4c:	f8df c0c8 	ldr.w	ip, [pc, #200]	@ 8007018 <HAL_I2C_Mem_Read+0x1f8>
 8006f50:	6822      	ldr	r2, [r4, #0]
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006f52:	b29b      	uxth	r3, r3
 8006f54:	428b      	cmp	r3, r1
  MODIFY_REG(hi2c->Instance->CR2, \
 8006f56:	4660      	mov	r0, ip
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006f58:	d928      	bls.n	8006fac <HAL_I2C_Mem_Read+0x18c>
  MODIFY_REG(hi2c->Instance->CR2, \
 8006f5a:	6853      	ldr	r3, [r2, #4]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006f5c:	8521      	strh	r1, [r4, #40]	@ 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 8006f5e:	ea03 030c 	and.w	r3, r3, ip
 8006f62:	432b      	orrs	r3, r5
 8006f64:	f043 73ff 	orr.w	r3, r3, #33423360	@ 0x1fe0000
 8006f68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006f6c:	6053      	str	r3, [r2, #4]
}
 8006f6e:	e7c2      	b.n	8006ef6 <HAL_I2C_Mem_Read+0xd6>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006f70:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006f74:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 8006f76:	2001      	movs	r0, #1
}
 8006f78:	b002      	add	sp, #8
 8006f7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_LOCK(hi2c);
 8006f7e:	2002      	movs	r0, #2
}
 8006f80:	b002      	add	sp, #8
 8006f82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      __HAL_UNLOCK(hi2c);
 8006f86:	2300      	movs	r3, #0
 8006f88:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 8006f8c:	e7f3      	b.n	8006f76 <HAL_I2C_Mem_Read+0x156>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006f8e:	ea4f 2219 	mov.w	r2, r9, lsr #8
 8006f92:	629a      	str	r2, [r3, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006f94:	4639      	mov	r1, r7
 8006f96:	4632      	mov	r2, r6
 8006f98:	4620      	mov	r0, r4
 8006f9a:	f7ff fbc9 	bl	8006730 <I2C_WaitOnTXISFlagUntilTimeout>
 8006f9e:	2800      	cmp	r0, #0
 8006fa0:	d1f1      	bne.n	8006f86 <HAL_I2C_Mem_Read+0x166>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006fa2:	6823      	ldr	r3, [r4, #0]
 8006fa4:	fa5f f289 	uxtb.w	r2, r9
 8006fa8:	629a      	str	r2, [r3, #40]	@ 0x28
 8006faa:	e78a      	b.n	8006ec2 <HAL_I2C_Mem_Read+0xa2>
          hi2c->XferSize = hi2c->XferCount;
 8006fac:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 8006fae:	6851      	ldr	r1, [r2, #4]
          hi2c->XferSize = hi2c->XferCount;
 8006fb0:	b29b      	uxth	r3, r3
 8006fb2:	8523      	strh	r3, [r4, #40]	@ 0x28
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006fb4:	b2db      	uxtb	r3, r3
  MODIFY_REG(hi2c->Instance->CR2, \
 8006fb6:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 8006fba:	4001      	ands	r1, r0
 8006fbc:	430b      	orrs	r3, r1
 8006fbe:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8006fc2:	6053      	str	r3, [r2, #4]
}
 8006fc4:	e797      	b.n	8006ef6 <HAL_I2C_Mem_Read+0xd6>
      hi2c->XferSize = hi2c->XferCount;
 8006fc6:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 8006fc8:	4811      	ldr	r0, [pc, #68]	@ (8007010 <HAL_I2C_Mem_Read+0x1f0>)
 8006fca:	6851      	ldr	r1, [r2, #4]
      hi2c->XferSize = hi2c->XferCount;
 8006fcc:	b29b      	uxth	r3, r3
 8006fce:	8523      	strh	r3, [r4, #40]	@ 0x28
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006fd0:	b2db      	uxtb	r3, r3
  MODIFY_REG(hi2c->Instance->CR2, \
 8006fd2:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 8006fd6:	4001      	ands	r1, r0
 8006fd8:	430b      	orrs	r3, r1
 8006fda:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8006fde:	f443 5310 	orr.w	r3, r3, #9216	@ 0x2400
 8006fe2:	6053      	str	r3, [r2, #4]
}
 8006fe4:	e78b      	b.n	8006efe <HAL_I2C_Mem_Read+0xde>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006fe6:	4632      	mov	r2, r6
 8006fe8:	4639      	mov	r1, r7
 8006fea:	4620      	mov	r0, r4
 8006fec:	f7ff fd14 	bl	8006a18 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006ff0:	2800      	cmp	r0, #0
 8006ff2:	d1c0      	bne.n	8006f76 <HAL_I2C_Mem_Read+0x156>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006ff4:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 8006ff6:	4d07      	ldr	r5, [pc, #28]	@ (8007014 <HAL_I2C_Mem_Read+0x1f4>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006ff8:	2120      	movs	r1, #32
 8006ffa:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8006ffc:	685a      	ldr	r2, [r3, #4]
 8006ffe:	402a      	ands	r2, r5
 8007000:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8007002:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 8007006:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800700a:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
    return HAL_OK;
 800700e:	e7b3      	b.n	8006f78 <HAL_I2C_Mem_Read+0x158>
 8007010:	fc009800 	.word	0xfc009800
 8007014:	fe00e800 	.word	0xfe00e800
 8007018:	fc009c00 	.word	0xfc009c00

0800701c <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800701c:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
 8007020:	2a20      	cmp	r2, #32
 8007022:	d123      	bne.n	800706c <HAL_I2CEx_ConfigAnalogFilter+0x50>
 8007024:	fa5f fc82 	uxtb.w	ip, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007028:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 800702c:	2a01      	cmp	r2, #1
 800702e:	4603      	mov	r3, r0
 8007030:	d01c      	beq.n	800706c <HAL_I2CEx_ConfigAnalogFilter+0x50>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007032:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8007034:	2024      	movs	r0, #36	@ 0x24
{
 8007036:	b500      	push	{lr}
    hi2c->State = HAL_I2C_STATE_BUSY;
 8007038:	f883 0041 	strb.w	r0, [r3, #65]	@ 0x41
    __HAL_I2C_DISABLE(hi2c);
 800703c:	6810      	ldr	r0, [r2, #0]
 800703e:	f020 0001 	bic.w	r0, r0, #1
 8007042:	6010      	str	r0, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007044:	6810      	ldr	r0, [r2, #0]
 8007046:	f420 5080 	bic.w	r0, r0, #4096	@ 0x1000
 800704a:	6010      	str	r0, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800704c:	6810      	ldr	r0, [r2, #0]
 800704e:	4301      	orrs	r1, r0
 8007050:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007052:	6811      	ldr	r1, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007054:	f04f 0e00 	mov.w	lr, #0
    __HAL_I2C_ENABLE(hi2c);
 8007058:	f041 0101 	orr.w	r1, r1, #1
 800705c:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800705e:	f883 c041 	strb.w	ip, [r3, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 8007062:	f883 e040 	strb.w	lr, [r3, #64]	@ 0x40

    return HAL_OK;
 8007066:	4670      	mov	r0, lr
  }
  else
  {
    return HAL_BUSY;
  }
}
 8007068:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_LOCK(hi2c);
 800706c:	2002      	movs	r0, #2
}
 800706e:	4770      	bx	lr

08007070 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007070:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
 8007074:	2a20      	cmp	r2, #32
 8007076:	d122      	bne.n	80070be <HAL_I2CEx_ConfigDigitalFilter+0x4e>
{
 8007078:	b500      	push	{lr}
 800707a:	fa5f fe82 	uxtb.w	lr, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800707e:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 8007082:	2a01      	cmp	r2, #1
 8007084:	4603      	mov	r3, r0
 8007086:	d01c      	beq.n	80070c2 <HAL_I2CEx_ConfigDigitalFilter+0x52>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007088:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 800708a:	2024      	movs	r0, #36	@ 0x24
 800708c:	f883 0041 	strb.w	r0, [r3, #65]	@ 0x41
    __HAL_I2C_DISABLE(hi2c);
 8007090:	6810      	ldr	r0, [r2, #0]
 8007092:	f020 0001 	bic.w	r0, r0, #1
 8007096:	6010      	str	r0, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007098:	6810      	ldr	r0, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800709a:	f420 6070 	bic.w	r0, r0, #3840	@ 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800709e:	ea40 2101 	orr.w	r1, r0, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80070a2:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 80070a4:	6811      	ldr	r1, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80070a6:	f04f 0c00 	mov.w	ip, #0
    __HAL_I2C_ENABLE(hi2c);
 80070aa:	f041 0101 	orr.w	r1, r1, #1
 80070ae:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80070b0:	f883 e041 	strb.w	lr, [r3, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 80070b4:	f883 c040 	strb.w	ip, [r3, #64]	@ 0x40

    return HAL_OK;
 80070b8:	4660      	mov	r0, ip
  }
  else
  {
    return HAL_BUSY;
  }
}
 80070ba:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_LOCK(hi2c);
 80070be:	2002      	movs	r0, #2
}
 80070c0:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 80070c2:	2002      	movs	r0, #2
}
 80070c4:	f85d fb04 	ldr.w	pc, [sp], #4

080070c8 <HAL_I2CEx_EnableFastModePlus>:
{
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 80070c8:	4a02      	ldr	r2, [pc, #8]	@ (80070d4 <HAL_I2CEx_EnableFastModePlus+0xc>)
 80070ca:	6853      	ldr	r3, [r2, #4]
 80070cc:	4303      	orrs	r3, r0
 80070ce:	6053      	str	r3, [r2, #4]
}
 80070d0:	4770      	bx	lr
 80070d2:	bf00      	nop
 80070d4:	40010000 	.word	0x40010000

080070d8 <HAL_IPCC_TxCallback>:
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 80070d8:	4770      	bx	lr
 80070da:	bf00      	nop

080070dc <HAL_IPCC_RxCallback>:
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
 80070dc:	4770      	bx	lr
 80070de:	bf00      	nop

080070e0 <HAL_IPCC_Init>:
  if (hipcc != NULL)
 80070e0:	b330      	cbz	r0, 8007130 <HAL_IPCC_Init+0x50>
{
 80070e2:	b510      	push	{r4, lr}
    if (hipcc->State == HAL_IPCC_STATE_RESET)
 80070e4:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 80070e8:	4604      	mov	r4, r0
 80070ea:	b1f3      	cbz	r3, 800712a <HAL_IPCC_Init+0x4a>
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 80070ec:	4b11      	ldr	r3, [pc, #68]	@ (8007134 <HAL_IPCC_Init+0x54>)
 80070ee:	2000      	movs	r0, #0

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 80070f0:	f04f 113f 	mov.w	r1, #4128831	@ 0x3f003f

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 80070f4:	223f      	movs	r2, #63	@ 0x3f
  Instance->CR  = 0x00000000U;
 80070f6:	6018      	str	r0, [r3, #0]
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 80070f8:	6059      	str	r1, [r3, #4]
  Instance->SCR = IPCC_ALL_RX_BUF;
 80070fa:	609a      	str	r2, [r3, #8]
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 80070fc:	6819      	ldr	r1, [r3, #0]
 80070fe:	4a0e      	ldr	r2, [pc, #56]	@ (8007138 <HAL_IPCC_Init+0x58>)
 8007100:	f041 1101 	orr.w	r1, r1, #65537	@ 0x10001
 8007104:	6019      	str	r1, [r3, #0]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8007106:	4b0d      	ldr	r3, [pc, #52]	@ (800713c <HAL_IPCC_Init+0x5c>)
    hipcc->callbackRequest = 0;
 8007108:	6360      	str	r0, [r4, #52]	@ 0x34
    hipcc->State = HAL_IPCC_STATE_READY;
 800710a:	2101      	movs	r1, #1
 800710c:	f884 1038 	strb.w	r1, [r4, #56]	@ 0x38
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 8007110:	e9c4 2201 	strd	r2, r2, [r4, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 8007114:	e9c4 3307 	strd	r3, r3, [r4, #28]
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 8007118:	e9c4 2203 	strd	r2, r2, [r4, #12]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 800711c:	e9c4 3309 	strd	r3, r3, [r4, #36]	@ 0x24
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 8007120:	e9c4 2205 	strd	r2, r2, [r4, #20]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 8007124:	e9c4 330b 	strd	r3, r3, [r4, #44]	@ 0x2c
}
 8007128:	bd10      	pop	{r4, pc}
      HAL_IPCC_MspInit(hipcc);
 800712a:	f7fa fe5b 	bl	8001de4 <HAL_IPCC_MspInit>
 800712e:	e7dd      	b.n	80070ec <HAL_IPCC_Init+0xc>
    err = HAL_ERROR;
 8007130:	2001      	movs	r0, #1
}
 8007132:	4770      	bx	lr
 8007134:	58000c00 	.word	0x58000c00
 8007138:	080070dd 	.word	0x080070dd
 800713c:	080070d9 	.word	0x080070d9

08007140 <HAL_IPCC_TX_IRQHandler>:
{
 8007140:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  irqmask = ~(currentInstance->MR) & IPCC_ALL_TX_BUF;
 8007144:	4f13      	ldr	r7, [pc, #76]	@ (8007194 <HAL_IPCC_TX_IRQHandler+0x54>)
 8007146:	687d      	ldr	r5, [r7, #4]
  irqmask = irqmask & ~(currentInstance->SR << IPCC_MR_CH1FM_Pos);
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800714e:	43ed      	mvns	r5, r5
  while (irqmask != 0UL)  /* if several bits are set, it loops to serve all of them */
 8007150:	f415 157c 	ands.w	r5, r5, #4128768	@ 0x3f0000
 8007154:	d01c      	beq.n	8007190 <HAL_IPCC_TX_IRQHandler+0x50>
 8007156:	4682      	mov	sl, r0
  uint32_t ch_count = 0U;
 8007158:	2600      	movs	r6, #0
 800715a:	f100 091c 	add.w	r9, r0, #28
    bit_pos = 1UL << (IPCC_MR_CH1FM_Pos + (ch_count & CHANNEL_INDEX_MASK));
 800715e:	f04f 0801 	mov.w	r8, #1
 8007162:	f006 040f 	and.w	r4, r6, #15
 8007166:	3410      	adds	r4, #16
 8007168:	fa08 f404 	lsl.w	r4, r8, r4
    if ((irqmask & bit_pos) != 0U)
 800716c:	422c      	tst	r4, r5
 800716e:	d00d      	beq.n	800718c <HAL_IPCC_TX_IRQHandler+0x4c>
      currentInstance->MR |= bit_pos;
 8007170:	687b      	ldr	r3, [r7, #4]
      if (hipcc->ChannelCallbackTx[ch_count] != NULL)
 8007172:	f859 b026 	ldr.w	fp, [r9, r6, lsl #2]
      currentInstance->MR |= bit_pos;
 8007176:	4323      	orrs	r3, r4
        hipcc->ChannelCallbackTx[ch_count](hipcc, ch_count, IPCC_CHANNEL_DIR_TX);
 8007178:	4631      	mov	r1, r6
 800717a:	2200      	movs	r2, #0
 800717c:	4650      	mov	r0, sl
      currentInstance->MR |= bit_pos;
 800717e:	607b      	str	r3, [r7, #4]
      if (hipcc->ChannelCallbackTx[ch_count] != NULL)
 8007180:	f1bb 0f00 	cmp.w	fp, #0
 8007184:	d000      	beq.n	8007188 <HAL_IPCC_TX_IRQHandler+0x48>
        hipcc->ChannelCallbackTx[ch_count](hipcc, ch_count, IPCC_CHANNEL_DIR_TX);
 8007186:	47d8      	blx	fp
  while (irqmask != 0UL)  /* if several bits are set, it loops to serve all of them */
 8007188:	43a5      	bics	r5, r4
 800718a:	d001      	beq.n	8007190 <HAL_IPCC_TX_IRQHandler+0x50>
    ch_count++;
 800718c:	3601      	adds	r6, #1
 800718e:	e7e8      	b.n	8007162 <HAL_IPCC_TX_IRQHandler+0x22>
}
 8007190:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007194:	58000c00 	.word	0x58000c00

08007198 <HAL_IPCC_RX_IRQHandler>:
{
 8007198:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  irqmask = ~(currentInstance->MR) & IPCC_ALL_RX_BUF;
 800719c:	f8df 804c 	ldr.w	r8, [pc, #76]	@ 80071ec <HAL_IPCC_RX_IRQHandler+0x54>
 80071a0:	f8d8 3004 	ldr.w	r3, [r8, #4]
  irqmask = irqmask & otherInstance->SR;
 80071a4:	f8d8 501c 	ldr.w	r5, [r8, #28]
 80071a8:	ea25 0503 	bic.w	r5, r5, r3
  while (irqmask != 0UL)  /* if several bits are set, it loops to serve all of them */
 80071ac:	f015 053f 	ands.w	r5, r5, #63	@ 0x3f
 80071b0:	d01a      	beq.n	80071e8 <HAL_IPCC_RX_IRQHandler+0x50>
 80071b2:	2601      	movs	r6, #1
 80071b4:	4607      	mov	r7, r0
    bit_pos = 1UL << (ch_count & CHANNEL_INDEX_MASK);
 80071b6:	46b1      	mov	r9, r6
      currentInstance->MR |= bit_pos;
 80071b8:	1e71      	subs	r1, r6, #1
    bit_pos = 1UL << (ch_count & CHANNEL_INDEX_MASK);
 80071ba:	f001 040f 	and.w	r4, r1, #15
 80071be:	fa09 f404 	lsl.w	r4, r9, r4
    if ((irqmask & bit_pos) != 0U)
 80071c2:	422c      	tst	r4, r5
 80071c4:	d00e      	beq.n	80071e4 <HAL_IPCC_RX_IRQHandler+0x4c>
      currentInstance->MR |= bit_pos;
 80071c6:	f8d8 3004 	ldr.w	r3, [r8, #4]
      if (hipcc->ChannelCallbackRx[ch_count] != NULL)
 80071ca:	f857 a026 	ldr.w	sl, [r7, r6, lsl #2]
      currentInstance->MR |= bit_pos;
 80071ce:	4323      	orrs	r3, r4
        hipcc->ChannelCallbackRx[ch_count](hipcc, ch_count, IPCC_CHANNEL_DIR_RX);
 80071d0:	2201      	movs	r2, #1
 80071d2:	4638      	mov	r0, r7
      currentInstance->MR |= bit_pos;
 80071d4:	f8c8 3004 	str.w	r3, [r8, #4]
      if (hipcc->ChannelCallbackRx[ch_count] != NULL)
 80071d8:	f1ba 0f00 	cmp.w	sl, #0
 80071dc:	d000      	beq.n	80071e0 <HAL_IPCC_RX_IRQHandler+0x48>
        hipcc->ChannelCallbackRx[ch_count](hipcc, ch_count, IPCC_CHANNEL_DIR_RX);
 80071de:	47d0      	blx	sl
  while (irqmask != 0UL)  /* if several bits are set, it loops to serve all of them */
 80071e0:	43a5      	bics	r5, r4
 80071e2:	d001      	beq.n	80071e8 <HAL_IPCC_RX_IRQHandler+0x50>
 80071e4:	3601      	adds	r6, #1
 80071e6:	e7e7      	b.n	80071b8 <HAL_IPCC_RX_IRQHandler+0x20>
}
 80071e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071ec:	58000c00 	.word	0x58000c00

080071f0 <HAL_PCD_Init>:
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80071f0:	2800      	cmp	r0, #0
 80071f2:	f000 80d7 	beq.w	80073a4 <HAL_PCD_Init+0x1b4>
{
 80071f6:	b510      	push	{r4, lr}
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80071f8:	f890 3291 	ldrb.w	r3, [r0, #657]	@ 0x291
 80071fc:	4604      	mov	r4, r0
 80071fe:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8007202:	2b00      	cmp	r3, #0
 8007204:	f000 80c9 	beq.w	800739a <HAL_PCD_Init+0x1aa>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8007208:	2303      	movs	r3, #3

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800720a:	6820      	ldr	r0, [r4, #0]
  hpcd->State = HAL_PCD_STATE_BUSY;
 800720c:	f884 3291 	strb.w	r3, [r4, #657]	@ 0x291
  __HAL_PCD_DISABLE(hpcd);
 8007210:	f004 fba6 	bl	800b960 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007214:	7922      	ldrb	r2, [r4, #4]
 8007216:	2a00      	cmp	r2, #0
 8007218:	f000 80ae 	beq.w	8007378 <HAL_PCD_Init+0x188>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
    hpcd->IN_ep[i].num = i;
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800721c:	2300      	movs	r3, #0
    hpcd->IN_ep[i].num = i;
 800721e:	f44f 7180 	mov.w	r1, #256	@ 0x100
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007222:	2a01      	cmp	r2, #1
    hpcd->IN_ep[i].maxpacket = 0U;
    hpcd->IN_ep[i].xfer_buff = 0U;
 8007224:	e9c4 3308 	strd	r3, r3, [r4, #32]
    hpcd->IN_ep[i].num = i;
 8007228:	8221      	strh	r1, [r4, #16]
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800722a:	74e3      	strb	r3, [r4, #19]
    hpcd->IN_ep[i].xfer_len = 0U;
 800722c:	62a3      	str	r3, [r4, #40]	@ 0x28
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800722e:	f000 80c0 	beq.w	80073b2 <HAL_PCD_Init+0x1c2>
    hpcd->IN_ep[i].num = i;
 8007232:	f240 1101 	movw	r1, #257	@ 0x101
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007236:	2a02      	cmp	r2, #2
    hpcd->IN_ep[i].xfer_buff = 0U;
 8007238:	e9c4 3312 	strd	r3, r3, [r4, #72]	@ 0x48
    hpcd->IN_ep[i].num = i;
 800723c:	8721      	strh	r1, [r4, #56]	@ 0x38
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800723e:	f884 303b 	strb.w	r3, [r4, #59]	@ 0x3b
    hpcd->IN_ep[i].xfer_len = 0U;
 8007242:	6523      	str	r3, [r4, #80]	@ 0x50
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007244:	d044      	beq.n	80072d0 <HAL_PCD_Init+0xe0>
    hpcd->IN_ep[i].num = i;
 8007246:	f44f 7181 	mov.w	r1, #258	@ 0x102
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800724a:	2a03      	cmp	r2, #3
    hpcd->IN_ep[i].xfer_buff = 0U;
 800724c:	e9c4 331c 	strd	r3, r3, [r4, #112]	@ 0x70
    hpcd->IN_ep[i].num = i;
 8007250:	f8a4 1060 	strh.w	r1, [r4, #96]	@ 0x60
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8007254:	f884 3063 	strb.w	r3, [r4, #99]	@ 0x63
    hpcd->IN_ep[i].xfer_len = 0U;
 8007258:	67a3      	str	r3, [r4, #120]	@ 0x78
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800725a:	d039      	beq.n	80072d0 <HAL_PCD_Init+0xe0>
    hpcd->IN_ep[i].num = i;
 800725c:	f240 1103 	movw	r1, #259	@ 0x103
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007260:	2a04      	cmp	r2, #4
    hpcd->IN_ep[i].xfer_buff = 0U;
 8007262:	e9c4 3326 	strd	r3, r3, [r4, #152]	@ 0x98
    hpcd->IN_ep[i].num = i;
 8007266:	f8a4 1088 	strh.w	r1, [r4, #136]	@ 0x88
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800726a:	f884 308b 	strb.w	r3, [r4, #139]	@ 0x8b
    hpcd->IN_ep[i].xfer_len = 0U;
 800726e:	f8c4 30a0 	str.w	r3, [r4, #160]	@ 0xa0
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007272:	d02d      	beq.n	80072d0 <HAL_PCD_Init+0xe0>
    hpcd->IN_ep[i].num = i;
 8007274:	f44f 7182 	mov.w	r1, #260	@ 0x104
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007278:	2a05      	cmp	r2, #5
    hpcd->IN_ep[i].xfer_buff = 0U;
 800727a:	e9c4 3330 	strd	r3, r3, [r4, #192]	@ 0xc0
    hpcd->IN_ep[i].num = i;
 800727e:	f8a4 10b0 	strh.w	r1, [r4, #176]	@ 0xb0
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8007282:	f884 30b3 	strb.w	r3, [r4, #179]	@ 0xb3
    hpcd->IN_ep[i].xfer_len = 0U;
 8007286:	f8c4 30c8 	str.w	r3, [r4, #200]	@ 0xc8
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800728a:	d021      	beq.n	80072d0 <HAL_PCD_Init+0xe0>
    hpcd->IN_ep[i].num = i;
 800728c:	f240 1105 	movw	r1, #261	@ 0x105
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007290:	2a06      	cmp	r2, #6
    hpcd->IN_ep[i].xfer_buff = 0U;
 8007292:	e9c4 333a 	strd	r3, r3, [r4, #232]	@ 0xe8
    hpcd->IN_ep[i].num = i;
 8007296:	f8a4 10d8 	strh.w	r1, [r4, #216]	@ 0xd8
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800729a:	f884 30db 	strb.w	r3, [r4, #219]	@ 0xdb
    hpcd->IN_ep[i].xfer_len = 0U;
 800729e:	f8c4 30f0 	str.w	r3, [r4, #240]	@ 0xf0
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80072a2:	d015      	beq.n	80072d0 <HAL_PCD_Init+0xe0>
    hpcd->IN_ep[i].num = i;
 80072a4:	f44f 7183 	mov.w	r1, #262	@ 0x106
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80072a8:	2a07      	cmp	r2, #7
    hpcd->IN_ep[i].xfer_buff = 0U;
 80072aa:	e9c4 3344 	strd	r3, r3, [r4, #272]	@ 0x110
    hpcd->IN_ep[i].num = i;
 80072ae:	f8a4 1100 	strh.w	r1, [r4, #256]	@ 0x100
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80072b2:	f884 3103 	strb.w	r3, [r4, #259]	@ 0x103
    hpcd->IN_ep[i].xfer_len = 0U;
 80072b6:	f8c4 3118 	str.w	r3, [r4, #280]	@ 0x118
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80072ba:	d009      	beq.n	80072d0 <HAL_PCD_Init+0xe0>
    hpcd->IN_ep[i].xfer_buff = 0U;
 80072bc:	e9c4 334e 	strd	r3, r3, [r4, #312]	@ 0x138
    hpcd->IN_ep[i].num = i;
 80072c0:	f240 1107 	movw	r1, #263	@ 0x107
 80072c4:	f8a4 1128 	strh.w	r1, [r4, #296]	@ 0x128
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80072c8:	f884 312b 	strb.w	r3, [r4, #299]	@ 0x12b
    hpcd->IN_ep[i].xfer_len = 0U;
 80072cc:	f8c4 3140 	str.w	r3, [r4, #320]	@ 0x140
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
    hpcd->OUT_ep[i].num = i;
 80072d0:	2300      	movs	r3, #0
 80072d2:	2101      	movs	r1, #1
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80072d4:	2a02      	cmp	r2, #2
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
    hpcd->OUT_ep[i].maxpacket = 0U;
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80072d6:	e9c4 3358 	strd	r3, r3, [r4, #352]	@ 0x160
 80072da:	e9c4 3362 	strd	r3, r3, [r4, #392]	@ 0x188
    hpcd->OUT_ep[i].num = i;
 80072de:	f8a4 3150 	strh.w	r3, [r4, #336]	@ 0x150
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80072e2:	f884 3153 	strb.w	r3, [r4, #339]	@ 0x153
    hpcd->OUT_ep[i].xfer_len = 0U;
 80072e6:	f8c4 3168 	str.w	r3, [r4, #360]	@ 0x168
    hpcd->OUT_ep[i].num = i;
 80072ea:	f8a4 1178 	strh.w	r1, [r4, #376]	@ 0x178
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80072ee:	f884 317b 	strb.w	r3, [r4, #379]	@ 0x17b
    hpcd->OUT_ep[i].xfer_len = 0U;
 80072f2:	f8c4 3190 	str.w	r3, [r4, #400]	@ 0x190
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80072f6:	d03f      	beq.n	8007378 <HAL_PCD_Init+0x188>
    hpcd->OUT_ep[i].num = i;
 80072f8:	2102      	movs	r1, #2
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80072fa:	2a03      	cmp	r2, #3
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80072fc:	e9c4 336c 	strd	r3, r3, [r4, #432]	@ 0x1b0
    hpcd->OUT_ep[i].num = i;
 8007300:	f8a4 11a0 	strh.w	r1, [r4, #416]	@ 0x1a0
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8007304:	f884 31a3 	strb.w	r3, [r4, #419]	@ 0x1a3
    hpcd->OUT_ep[i].xfer_len = 0U;
 8007308:	f8c4 31b8 	str.w	r3, [r4, #440]	@ 0x1b8
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800730c:	d034      	beq.n	8007378 <HAL_PCD_Init+0x188>
    hpcd->OUT_ep[i].num = i;
 800730e:	2103      	movs	r1, #3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007310:	2a04      	cmp	r2, #4
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8007312:	e9c4 3376 	strd	r3, r3, [r4, #472]	@ 0x1d8
    hpcd->OUT_ep[i].num = i;
 8007316:	f8a4 11c8 	strh.w	r1, [r4, #456]	@ 0x1c8
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800731a:	f884 31cb 	strb.w	r3, [r4, #459]	@ 0x1cb
    hpcd->OUT_ep[i].xfer_len = 0U;
 800731e:	f8c4 31e0 	str.w	r3, [r4, #480]	@ 0x1e0
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007322:	d029      	beq.n	8007378 <HAL_PCD_Init+0x188>
    hpcd->OUT_ep[i].num = i;
 8007324:	2104      	movs	r1, #4
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007326:	2a05      	cmp	r2, #5
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8007328:	e9c4 3380 	strd	r3, r3, [r4, #512]	@ 0x200
    hpcd->OUT_ep[i].num = i;
 800732c:	f8a4 11f0 	strh.w	r1, [r4, #496]	@ 0x1f0
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8007330:	f884 31f3 	strb.w	r3, [r4, #499]	@ 0x1f3
    hpcd->OUT_ep[i].xfer_len = 0U;
 8007334:	f8c4 3208 	str.w	r3, [r4, #520]	@ 0x208
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007338:	d01e      	beq.n	8007378 <HAL_PCD_Init+0x188>
    hpcd->OUT_ep[i].num = i;
 800733a:	2105      	movs	r1, #5
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800733c:	2a06      	cmp	r2, #6
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800733e:	e9c4 338a 	strd	r3, r3, [r4, #552]	@ 0x228
    hpcd->OUT_ep[i].num = i;
 8007342:	f8a4 1218 	strh.w	r1, [r4, #536]	@ 0x218
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8007346:	f884 321b 	strb.w	r3, [r4, #539]	@ 0x21b
    hpcd->OUT_ep[i].xfer_len = 0U;
 800734a:	f8c4 3230 	str.w	r3, [r4, #560]	@ 0x230
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800734e:	d013      	beq.n	8007378 <HAL_PCD_Init+0x188>
    hpcd->OUT_ep[i].num = i;
 8007350:	2106      	movs	r1, #6
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007352:	2a07      	cmp	r2, #7
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8007354:	e9c4 3394 	strd	r3, r3, [r4, #592]	@ 0x250
    hpcd->OUT_ep[i].num = i;
 8007358:	f8a4 1240 	strh.w	r1, [r4, #576]	@ 0x240
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800735c:	f884 3243 	strb.w	r3, [r4, #579]	@ 0x243
    hpcd->OUT_ep[i].xfer_len = 0U;
 8007360:	f8c4 3258 	str.w	r3, [r4, #600]	@ 0x258
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007364:	d008      	beq.n	8007378 <HAL_PCD_Init+0x188>
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8007366:	e9c4 339e 	strd	r3, r3, [r4, #632]	@ 0x278
    hpcd->OUT_ep[i].num = i;
 800736a:	2207      	movs	r2, #7
 800736c:	f8a4 2268 	strh.w	r2, [r4, #616]	@ 0x268
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8007370:	f884 326b 	strb.w	r3, [r4, #619]	@ 0x26b
    hpcd->OUT_ep[i].xfer_len = 0U;
 8007374:	f8c4 3280 	str.w	r3, [r4, #640]	@ 0x280
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8007378:	4623      	mov	r3, r4
 800737a:	f853 0b04 	ldr.w	r0, [r3], #4
 800737e:	e893 0006 	ldmia.w	r3, {r1, r2}
 8007382:	f004 faf7 	bl	800b974 <USB_DevInit>

  hpcd->USB_Address = 0U;
  hpcd->State = HAL_PCD_STATE_READY;

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8007386:	7aa3      	ldrb	r3, [r4, #10]
  hpcd->State = HAL_PCD_STATE_READY;
 8007388:	2201      	movs	r2, #1
  hpcd->USB_Address = 0U;
 800738a:	2100      	movs	r1, #0
  if (hpcd->Init.lpm_enable == 1U)
 800738c:	4293      	cmp	r3, r2
  hpcd->USB_Address = 0U;
 800738e:	7321      	strb	r1, [r4, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8007390:	f884 2291 	strb.w	r2, [r4, #657]	@ 0x291
  if (hpcd->Init.lpm_enable == 1U)
 8007394:	d008      	beq.n	80073a8 <HAL_PCD_Init+0x1b8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }

  return HAL_OK;
 8007396:	2000      	movs	r0, #0
}
 8007398:	bd10      	pop	{r4, pc}
    hpcd->Lock = HAL_UNLOCKED;
 800739a:	f880 2290 	strb.w	r2, [r0, #656]	@ 0x290
    HAL_PCD_MspInit(hpcd);
 800739e:	f007 fd4b 	bl	800ee38 <HAL_PCD_MspInit>
 80073a2:	e731      	b.n	8007208 <HAL_PCD_Init+0x18>
    return HAL_ERROR;
 80073a4:	2001      	movs	r0, #1
}
 80073a6:	4770      	bx	lr
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80073a8:	4620      	mov	r0, r4
 80073aa:	f000 ff19 	bl	80081e0 <HAL_PCDEx_ActivateLPM>
  return HAL_OK;
 80073ae:	2000      	movs	r0, #0
}
 80073b0:	bd10      	pop	{r4, pc}
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80073b2:	e9c4 3358 	strd	r3, r3, [r4, #352]	@ 0x160
    hpcd->OUT_ep[i].num = i;
 80073b6:	f8a4 3150 	strh.w	r3, [r4, #336]	@ 0x150
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80073ba:	f884 3153 	strb.w	r3, [r4, #339]	@ 0x153
    hpcd->OUT_ep[i].xfer_len = 0U;
 80073be:	f8c4 3168 	str.w	r3, [r4, #360]	@ 0x168
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80073c2:	e7d9      	b.n	8007378 <HAL_PCD_Init+0x188>

080073c4 <HAL_PCD_Start>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
  __HAL_LOCK(hpcd);
 80073c4:	f890 3290 	ldrb.w	r3, [r0, #656]	@ 0x290
 80073c8:	2b01      	cmp	r3, #1
 80073ca:	d00e      	beq.n	80073ea <HAL_PCD_Start+0x26>
{
 80073cc:	b510      	push	{r4, lr}
 80073ce:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 80073d0:	2301      	movs	r3, #1
  __HAL_PCD_ENABLE(hpcd);
 80073d2:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hpcd);
 80073d4:	f884 3290 	strb.w	r3, [r4, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 80073d8:	f004 fab8 	bl	800b94c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80073dc:	6820      	ldr	r0, [r4, #0]
 80073de:	f004 ffff 	bl	800c3e0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80073e2:	2000      	movs	r0, #0
 80073e4:	f884 0290 	strb.w	r0, [r4, #656]	@ 0x290

  return HAL_OK;
}
 80073e8:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 80073ea:	2002      	movs	r0, #2
}
 80073ec:	4770      	bx	lr
 80073ee:	bf00      	nop

080073f0 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80073f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073f4:	4604      	mov	r4, r0
 80073f6:	b083      	sub	sp, #12
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80073f8:	6800      	ldr	r0, [r0, #0]
 80073fa:	f004 fffd 	bl	800c3f8 <USB_ReadInterrupts>

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80073fe:	f410 4500 	ands.w	r5, r0, #32768	@ 0x8000
 8007402:	d12c      	bne.n	800745e <HAL_PCD_IRQHandler+0x6e>
    (void)PCD_EP_ISR_Handler(hpcd);

    return;
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8007404:	0543      	lsls	r3, r0, #21
 8007406:	f100 817b 	bmi.w	8007700 <HAL_PCD_IRQHandler+0x310>
    (void)HAL_PCD_SetAddress(hpcd, 0U);

    return;
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800740a:	0447      	lsls	r7, r0, #17
 800740c:	d41b      	bmi.n	8007446 <HAL_PCD_IRQHandler+0x56>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);

    return;
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800740e:	f410 5100 	ands.w	r1, r0, #8192	@ 0x2000
 8007412:	f040 81d7 	bne.w	80077c4 <HAL_PCD_IRQHandler+0x3d4>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);

    return;
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8007416:	04c6      	lsls	r6, r0, #19
 8007418:	f100 808b 	bmi.w	8007532 <HAL_PCD_IRQHandler+0x142>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);

    return;
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800741c:	0505      	lsls	r5, r0, #20
 800741e:	f100 8331 	bmi.w	8007a84 <HAL_PCD_IRQHandler+0x694>

    return;
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8007422:	0601      	lsls	r1, r0, #24
 8007424:	f100 8301 	bmi.w	8007a2a <HAL_PCD_IRQHandler+0x63a>
    }

    return;
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8007428:	0582      	lsls	r2, r0, #22
 800742a:	f100 841f 	bmi.w	8007c6c <HAL_PCD_IRQHandler+0x87c>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800742e:	05c3      	lsls	r3, r0, #23
 8007430:	d512      	bpl.n	8007458 <HAL_PCD_IRQHandler+0x68>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8007432:	6822      	ldr	r2, [r4, #0]
 8007434:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 8007438:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800743c:	041b      	lsls	r3, r3, #16
 800743e:	0c1b      	lsrs	r3, r3, #16
 8007440:	f8a2 3044 	strh.w	r3, [r2, #68]	@ 0x44

    return;
 8007444:	e008      	b.n	8007458 <HAL_PCD_IRQHandler+0x68>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8007446:	6822      	ldr	r2, [r4, #0]
 8007448:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 800744c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007450:	041b      	lsls	r3, r3, #16
 8007452:	0c1b      	lsrs	r3, r3, #16
 8007454:	f8a2 3044 	strh.w	r3, [r2, #68]	@ 0x44
  }
}
 8007458:	b003      	add	sp, #12
 800745a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800745e:	6820      	ldr	r0, [r4, #0]
 8007460:	f8b0 3044 	ldrh.w	r3, [r0, #68]	@ 0x44
 8007464:	041f      	lsls	r7, r3, #16
 8007466:	d5f7      	bpl.n	8007458 <HAL_PCD_IRQHandler+0x68>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
      {
        ep = &hpcd->IN_ep[epindex];

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8007468:	f8df babc 	ldr.w	fp, [pc, #2748]	@ 8007f28 <HAL_PCD_IRQHandler+0xb38>
 800746c:	e010      	b.n	8007490 <HAL_PCD_IRQHandler+0xa0>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800746e:	f011 0110 	ands.w	r1, r1, #16
 8007472:	f000 80c5 	beq.w	8007600 <HAL_PCD_IRQHandler+0x210>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8007476:	8801      	ldrh	r1, [r0, #0]
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8007478:	f411 6500 	ands.w	r5, r1, #2048	@ 0x800
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800747c:	b28b      	uxth	r3, r1
        if ((wEPVal & USB_EP_SETUP) != 0U)
 800747e:	f040 80e7 	bne.w	8007650 <HAL_PCD_IRQHandler+0x260>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8007482:	041e      	lsls	r6, r3, #16
 8007484:	f100 815a 	bmi.w	800773c <HAL_PCD_IRQHandler+0x34c>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8007488:	f8b0 3044 	ldrh.w	r3, [r0, #68]	@ 0x44
 800748c:	041a      	lsls	r2, r3, #16
 800748e:	d5e3      	bpl.n	8007458 <HAL_PCD_IRQHandler+0x68>
    wIstr = hpcd->Instance->ISTR;
 8007490:	f8b0 5044 	ldrh.w	r5, [r0, #68]	@ 0x44
 8007494:	b2a9      	uxth	r1, r5
    if (epindex == 0U)
 8007496:	f015 050f 	ands.w	r5, r5, #15
 800749a:	d0e8      	beq.n	800746e <HAL_PCD_IRQHandler+0x7e>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800749c:	fa0f f885 	sxth.w	r8, r5
 80074a0:	f830 3028 	ldrh.w	r3, [r0, r8, lsl #2]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80074a4:	0419      	lsls	r1, r3, #16
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80074a6:	b29e      	uxth	r6, r3
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80074a8:	d466      	bmi.n	8007578 <HAL_PCD_IRQHandler+0x188>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80074aa:	0631      	lsls	r1, r6, #24
 80074ac:	d5ec      	bpl.n	8007488 <HAL_PCD_IRQHandler+0x98>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80074ae:	f830 3028 	ldrh.w	r3, [r0, r8, lsl #2]
 80074b2:	b29b      	uxth	r3, r3
 80074b4:	ea03 030b 	and.w	r3, r3, fp
 80074b8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000

        if (ep->type == EP_TYPE_ISOC)
 80074bc:	eb05 0285 	add.w	r2, r5, r5, lsl #2
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80074c0:	f820 3028 	strh.w	r3, [r0, r8, lsl #2]
        if (ep->type == EP_TYPE_ISOC)
 80074c4:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 80074c8:	00af      	lsls	r7, r5, #2
 80074ca:	7cd3      	ldrb	r3, [r2, #19]
 80074cc:	2b01      	cmp	r3, #1
 80074ce:	f000 8185 	beq.w	80077dc <HAL_PCD_IRQHandler+0x3ec>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80074d2:	eb08 0888 	add.w	r8, r8, r8, lsl #2
 80074d6:	eb04 0cc8 	add.w	ip, r4, r8, lsl #3
          {
            /* Multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80074da:	7c11      	ldrb	r1, [r2, #16]

            if (ep->xfer_len > TxPctSize)
 80074dc:	f8dc 3028 	ldr.w	r3, [ip, #40]	@ 0x28
 80074e0:	9300      	str	r3, [sp, #0]
          if ((wEPVal & USB_EP_KIND) == 0U)
 80074e2:	f416 7a80 	ands.w	sl, r6, #256	@ 0x100
 80074e6:	ea4f 09c8 	mov.w	r9, r8, lsl #3
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80074ea:	ea4f 0ec1 	mov.w	lr, r1, lsl #3
 80074ee:	fa0f f881 	sxth.w	r8, r1
          if ((wEPVal & USB_EP_KIND) == 0U)
 80074f2:	f040 81a3 	bne.w	800783c <HAL_PCD_IRQHandler+0x44c>
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80074f6:	f8b0 5050 	ldrh.w	r5, [r0, #80]	@ 0x50
 80074fa:	fa10 f585 	uxtah	r5, r0, r5
 80074fe:	4475      	add	r5, lr
 8007500:	f8b5 5402 	ldrh.w	r5, [r5, #1026]	@ 0x402
            if (ep->xfer_len > TxPctSize)
 8007504:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8007508:	429d      	cmp	r5, r3
 800750a:	f080 8191 	bcs.w	8007830 <HAL_PCD_IRQHandler+0x440>
            {
              ep->xfer_len -= TxPctSize;
 800750e:	1b5b      	subs	r3, r3, r5
 8007510:	f8cc 3028 	str.w	r3, [ip, #40]	@ 0x28
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8007514:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 8007516:	442b      	add	r3, r5
 8007518:	6253      	str	r3, [r2, #36]	@ 0x24
              ep->xfer_count += TxPctSize;
 800751a:	f8dc 302c 	ldr.w	r3, [ip, #44]	@ 0x2c
        ep = &hpcd->IN_ep[epindex];
 800751e:	f109 0110 	add.w	r1, r9, #16
              ep->xfer_count += TxPctSize;
 8007522:	442b      	add	r3, r5
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8007524:	4421      	add	r1, r4
              ep->xfer_count += TxPctSize;
 8007526:	f8cc 302c 	str.w	r3, [ip, #44]	@ 0x2c
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800752a:	f004 fd35 	bl	800bf98 <USB_EPStartXfer>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800752e:	6820      	ldr	r0, [r4, #0]
 8007530:	e7aa      	b.n	8007488 <HAL_PCD_IRQHandler+0x98>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8007532:	6822      	ldr	r2, [r4, #0]
 8007534:	f8b2 3040 	ldrh.w	r3, [r2, #64]	@ 0x40
 8007538:	f023 0304 	bic.w	r3, r3, #4
 800753c:	041b      	lsls	r3, r3, #16
 800753e:	0c1b      	lsrs	r3, r3, #16
 8007540:	f8a2 3040 	strh.w	r3, [r2, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8007544:	f8b2 3040 	ldrh.w	r3, [r2, #64]	@ 0x40
 8007548:	f023 0308 	bic.w	r3, r3, #8
 800754c:	041b      	lsls	r3, r3, #16
 800754e:	0c1b      	lsrs	r3, r3, #16
 8007550:	f8a2 3040 	strh.w	r3, [r2, #64]	@ 0x40
    if (hpcd->LPM_State == LPM_L1)
 8007554:	f894 32c8 	ldrb.w	r3, [r4, #712]	@ 0x2c8
 8007558:	2b01      	cmp	r3, #1
 800755a:	f000 8395 	beq.w	8007c88 <HAL_PCD_IRQHandler+0x898>
    HAL_PCD_ResumeCallback(hpcd);
 800755e:	4620      	mov	r0, r4
 8007560:	f007 fce4 	bl	800ef2c <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8007564:	6822      	ldr	r2, [r4, #0]
 8007566:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 800756a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800756e:	041b      	lsls	r3, r3, #16
 8007570:	0c1b      	lsrs	r3, r3, #16
 8007572:	f8a2 3044 	strh.w	r3, [r2, #68]	@ 0x44
    return;
 8007576:	e76f      	b.n	8007458 <HAL_PCD_IRQHandler+0x68>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8007578:	f830 3028 	ldrh.w	r3, [r0, r8, lsl #2]
 800757c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007580:	051b      	lsls	r3, r3, #20
 8007582:	0d1b      	lsrs	r3, r3, #20
 8007584:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
        if (ep->doublebuffer == 0U)
 8007588:	eb05 0185 	add.w	r1, r5, r5, lsl #2
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800758c:	f820 3028 	strh.w	r3, [r0, r8, lsl #2]
        if (ep->doublebuffer == 0U)
 8007590:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 8007594:	00af      	lsls	r7, r5, #2
 8007596:	f891 315c 	ldrb.w	r3, [r1, #348]	@ 0x15c
 800759a:	2b00      	cmp	r3, #0
 800759c:	d17b      	bne.n	8007696 <HAL_PCD_IRQHandler+0x2a6>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800759e:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 80075a2:	f200 4206 	addw	r2, r0, #1030	@ 0x406
 80075a6:	fa12 f383 	uxtah	r3, r2, r3
 80075aa:	f891 2150 	ldrb.w	r2, [r1, #336]	@ 0x150
 80075ae:	f833 9032 	ldrh.w	r9, [r3, r2, lsl #3]
 80075b2:	f3c9 0909 	ubfx	r9, r9, #0, #10
          if (count != 0U)
 80075b6:	f1b9 0f00 	cmp.w	r9, #0
 80075ba:	f040 81d0 	bne.w	800795e <HAL_PCD_IRQHandler+0x56e>
{
 80075be:	f04f 0900 	mov.w	r9, #0
        ep->xfer_count += count;
 80075c2:	197b      	adds	r3, r7, r5
 80075c4:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 80075c8:	f8d3 216c 	ldr.w	r2, [r3, #364]	@ 0x16c
 80075cc:	444a      	add	r2, r9
 80075ce:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
        ep->xfer_buff += count;
 80075d2:	f8d3 2164 	ldr.w	r2, [r3, #356]	@ 0x164
 80075d6:	444a      	add	r2, r9
 80075d8:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80075dc:	f8d3 2168 	ldr.w	r2, [r3, #360]	@ 0x168
 80075e0:	b122      	cbz	r2, 80075ec <HAL_PCD_IRQHandler+0x1fc>
 80075e2:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 80075e6:	454b      	cmp	r3, r9
 80075e8:	f240 819b 	bls.w	8007922 <HAL_PCD_IRQHandler+0x532>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80075ec:	442f      	add	r7, r5
 80075ee:	eb04 07c7 	add.w	r7, r4, r7, lsl #3
 80075f2:	4620      	mov	r0, r4
 80075f4:	f897 1150 	ldrb.w	r1, [r7, #336]	@ 0x150
 80075f8:	f007 fc5e 	bl	800eeb8 <HAL_PCD_DataOutStageCallback>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80075fc:	6820      	ldr	r0, [r4, #0]
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80075fe:	e754      	b.n	80074aa <HAL_PCD_IRQHandler+0xba>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8007600:	8803      	ldrh	r3, [r0, #0]
 8007602:	b29b      	uxth	r3, r3
 8007604:	ea03 030b 	and.w	r3, r3, fp
 8007608:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800760c:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800760e:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 8007612:	fa10 f283 	uxtah	r2, r0, r3
 8007616:	7c20      	ldrb	r0, [r4, #16]
 8007618:	f240 4302 	movw	r3, #1026	@ 0x402
 800761c:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8007620:	4620      	mov	r0, r4
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8007622:	5ad3      	ldrh	r3, [r2, r3]
        ep->xfer_buff += ep->xfer_count;
 8007624:	6a62      	ldr	r2, [r4, #36]	@ 0x24
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8007626:	f3c3 0309 	ubfx	r3, r3, #0, #10
        ep->xfer_buff += ep->xfer_count;
 800762a:	441a      	add	r2, r3
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800762c:	62e3      	str	r3, [r4, #44]	@ 0x2c
        ep->xfer_buff += ep->xfer_count;
 800762e:	6262      	str	r2, [r4, #36]	@ 0x24
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8007630:	f007 fc4c 	bl	800eecc <HAL_PCD_DataInStageCallback>
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8007634:	7b23      	ldrb	r3, [r4, #12]
 8007636:	b363      	cbz	r3, 8007692 <HAL_PCD_IRQHandler+0x2a2>
 8007638:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800763a:	6820      	ldr	r0, [r4, #0]
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800763c:	2b00      	cmp	r3, #0
 800763e:	f47f af23 	bne.w	8007488 <HAL_PCD_IRQHandler+0x98>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8007642:	7b22      	ldrb	r2, [r4, #12]
 8007644:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007648:	f8a0 204c 	strh.w	r2, [r0, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 800764c:	7323      	strb	r3, [r4, #12]
 800764e:	e71b      	b.n	8007488 <HAL_PCD_IRQHandler+0x98>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8007650:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 8007654:	f894 1150 	ldrb.w	r1, [r4, #336]	@ 0x150
 8007658:	f240 4306 	movw	r3, #1030	@ 0x406
 800765c:	fa10 f282 	uxtah	r2, r0, r2
 8007660:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8007664:	f504 7126 	add.w	r1, r4, #664	@ 0x298
 8007668:	5ad3      	ldrh	r3, [r2, r3]
 800766a:	f8b4 2156 	ldrh.w	r2, [r4, #342]	@ 0x156
 800766e:	f3c3 0309 	ubfx	r3, r3, #0, #10
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8007672:	f8c4 316c 	str.w	r3, [r4, #364]	@ 0x16c
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8007676:	f004 fed3 	bl	800c420 <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800767a:	6822      	ldr	r2, [r4, #0]
 800767c:	8813      	ldrh	r3, [r2, #0]
 800767e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007682:	051b      	lsls	r3, r3, #20
 8007684:	0d1b      	lsrs	r3, r3, #20
 8007686:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800768a:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 800768c:	4620      	mov	r0, r4
 800768e:	f007 fc0d 	bl	800eeac <HAL_PCD_SetupStageCallback>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8007692:	6820      	ldr	r0, [r4, #0]
 8007694:	e6f8      	b.n	8007488 <HAL_PCD_IRQHandler+0x98>
          if (ep->type == EP_TYPE_BULK)
 8007696:	f891 3153 	ldrb.w	r3, [r1, #339]	@ 0x153
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800769a:	f891 2150 	ldrb.w	r2, [r1, #336]	@ 0x150
          if (ep->type == EP_TYPE_BULK)
 800769e:	2b02      	cmp	r3, #2
 80076a0:	f000 820b 	beq.w	8007aba <HAL_PCD_IRQHandler+0x6ca>
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80076a4:	b212      	sxth	r2, r2
 80076a6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80076aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80076ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80076b2:	041b      	lsls	r3, r3, #16
 80076b4:	0c1b      	lsrs	r3, r3, #16
 80076b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80076ba:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80076be:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80076c2:	f891 3150 	ldrb.w	r3, [r1, #336]	@ 0x150
 80076c6:	b21a      	sxth	r2, r3
 80076c8:	f830 2022 	ldrh.w	r2, [r0, r2, lsl #2]
 80076cc:	f412 4f80 	tst.w	r2, #16384	@ 0x4000
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80076d0:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80076d4:	f000 812f 	beq.w	8007936 <HAL_PCD_IRQHandler+0x546>
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80076d8:	f200 4c02 	addw	ip, r0, #1026	@ 0x402
 80076dc:	fa1c f282 	uxtah	r2, ip, r2
 80076e0:	f832 9033 	ldrh.w	r9, [r2, r3, lsl #3]
 80076e4:	f3c9 0909 	ubfx	r9, r9, #0, #10
              if (count != 0U)
 80076e8:	f1b9 0f00 	cmp.w	r9, #0
 80076ec:	f43f af67 	beq.w	80075be <HAL_PCD_IRQHandler+0x1ce>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80076f0:	f8b1 2158 	ldrh.w	r2, [r1, #344]	@ 0x158
 80076f4:	f8d1 1164 	ldr.w	r1, [r1, #356]	@ 0x164
 80076f8:	464b      	mov	r3, r9
 80076fa:	f004 fe91 	bl	800c420 <USB_ReadPMA>
 80076fe:	e760      	b.n	80075c2 <HAL_PCD_IRQHandler+0x1d2>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8007700:	6822      	ldr	r2, [r4, #0]
 8007702:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 8007706:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800770a:	041b      	lsls	r3, r3, #16
 800770c:	0c1b      	lsrs	r3, r3, #16
 800770e:	f8a2 3044 	strh.w	r3, [r2, #68]	@ 0x44
    HAL_PCD_ResetCallback(hpcd);
 8007712:	4620      	mov	r0, r4
 8007714:	f007 fbe8 	bl	800eee8 <HAL_PCD_ResetCallback>
  __HAL_LOCK(hpcd);
 8007718:	f894 3290 	ldrb.w	r3, [r4, #656]	@ 0x290
 800771c:	2b01      	cmp	r3, #1
 800771e:	f43f ae9b 	beq.w	8007458 <HAL_PCD_IRQHandler+0x68>
 8007722:	2301      	movs	r3, #1
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8007724:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8007726:	f884 3290 	strb.w	r3, [r4, #656]	@ 0x290
  hpcd->USB_Address = address;
 800772a:	7325      	strb	r5, [r4, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800772c:	4629      	mov	r1, r5
 800772e:	f004 fe51 	bl	800c3d4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8007732:	f884 5290 	strb.w	r5, [r4, #656]	@ 0x290
}
 8007736:	b003      	add	sp, #12
 8007738:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800773c:	8802      	ldrh	r2, [r0, #0]
 800773e:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8007742:	4013      	ands	r3, r2
 8007744:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007748:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800774a:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 800774e:	f894 1150 	ldrb.w	r1, [r4, #336]	@ 0x150
 8007752:	f240 4306 	movw	r3, #1030	@ 0x406
 8007756:	fa10 f282 	uxtah	r2, r0, r2
 800775a:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800775e:	5ad3      	ldrh	r3, [r2, r3]
 8007760:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007764:	f8c4 316c 	str.w	r3, [r4, #364]	@ 0x16c
          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8007768:	b193      	cbz	r3, 8007790 <HAL_PCD_IRQHandler+0x3a0>
 800776a:	f8d4 1164 	ldr.w	r1, [r4, #356]	@ 0x164
 800776e:	b179      	cbz	r1, 8007790 <HAL_PCD_IRQHandler+0x3a0>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8007770:	f8b4 2156 	ldrh.w	r2, [r4, #342]	@ 0x156
 8007774:	f004 fe54 	bl	800c420 <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 8007778:	f8d4 3164 	ldr.w	r3, [r4, #356]	@ 0x164
 800777c:	f8d4 216c 	ldr.w	r2, [r4, #364]	@ 0x16c
 8007780:	4413      	add	r3, r2
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8007782:	4620      	mov	r0, r4
 8007784:	4629      	mov	r1, r5
            ep->xfer_buff += ep->xfer_count;
 8007786:	f8c4 3164 	str.w	r3, [r4, #356]	@ 0x164
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800778a:	f007 fb95 	bl	800eeb8 <HAL_PCD_DataOutStageCallback>
          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800778e:	6820      	ldr	r0, [r4, #0]
 8007790:	8803      	ldrh	r3, [r0, #0]
          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8007792:	051d      	lsls	r5, r3, #20
          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8007794:	b29a      	uxth	r2, r3
          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8007796:	f53f ae77 	bmi.w	8007488 <HAL_PCD_IRQHandler+0x98>
 800779a:	f402 5240 	and.w	r2, r2, #12288	@ 0x3000
 800779e:	f5b2 5f40 	cmp.w	r2, #12288	@ 0x3000
 80077a2:	f43f ae71 	beq.w	8007488 <HAL_PCD_IRQHandler+0x98>
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80077a6:	8803      	ldrh	r3, [r0, #0]
 80077a8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80077ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80077b0:	041b      	lsls	r3, r3, #16
 80077b2:	0c1b      	lsrs	r3, r3, #16
 80077b4:	f483 5340 	eor.w	r3, r3, #12288	@ 0x3000
 80077b8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80077bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80077c0:	8003      	strh	r3, [r0, #0]
 80077c2:	e661      	b.n	8007488 <HAL_PCD_IRQHandler+0x98>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80077c4:	6822      	ldr	r2, [r4, #0]
 80077c6:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 80077ca:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80077ce:	041b      	lsls	r3, r3, #16
 80077d0:	0c1b      	lsrs	r3, r3, #16
 80077d2:	f8a2 3044 	strh.w	r3, [r2, #68]	@ 0x44
}
 80077d6:	b003      	add	sp, #12
 80077d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          ep->xfer_len = 0U;
 80077dc:	1c6b      	adds	r3, r5, #1
 80077de:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80077e2:	2100      	movs	r1, #0
 80077e4:	f844 1033 	str.w	r1, [r4, r3, lsl #3]
          if (ep->doublebuffer != 0U)
 80077e8:	7f13      	ldrb	r3, [r2, #28]
 80077ea:	b1c3      	cbz	r3, 800781e <HAL_PCD_IRQHandler+0x42e>
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80077ec:	f016 0640 	ands.w	r6, r6, #64	@ 0x40
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80077f0:	7c53      	ldrb	r3, [r2, #17]
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80077f2:	f040 810f 	bne.w	8007a14 <HAL_PCD_IRQHandler+0x624>
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	f040 8259 	bne.w	8007cae <HAL_PCD_IRQHandler+0x8be>
 80077fc:	7c13      	ldrb	r3, [r2, #16]
 80077fe:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 8007802:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8007806:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800780a:	b292      	uxth	r2, r2
 800780c:	5a99      	ldrh	r1, [r3, r2]
 800780e:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8007812:	5299      	strh	r1, [r3, r2]
 8007814:	5a99      	ldrh	r1, [r3, r2]
 8007816:	b289      	uxth	r1, r1
 8007818:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 800781c:	5299      	strh	r1, [r3, r2]
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800781e:	443d      	add	r5, r7
 8007820:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 8007824:	4620      	mov	r0, r4
 8007826:	7c29      	ldrb	r1, [r5, #16]
 8007828:	f007 fb50 	bl	800eecc <HAL_PCD_DataInStageCallback>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800782c:	6820      	ldr	r0, [r4, #0]
 800782e:	e62b      	b.n	8007488 <HAL_PCD_IRQHandler+0x98>
 8007830:	f8cc a028 	str.w	sl, [ip, #40]	@ 0x28
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007834:	4620      	mov	r0, r4
 8007836:	f007 fb49 	bl	800eecc <HAL_PCD_DataInStageCallback>
 800783a:	e72a      	b.n	8007692 <HAL_PCD_IRQHandler+0x2a2>
{
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800783c:	f406 4380 	and.w	r3, r6, #16384	@ 0x4000
 8007840:	f016 0640 	ands.w	r6, r6, #64	@ 0x40
 8007844:	9301      	str	r3, [sp, #4]
 8007846:	f040 8092 	bne.w	800796e <HAL_PCD_IRQHandler+0x57e>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800784a:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50

    if (ep->xfer_len >= TxPctSize)
 800784e:	9b00      	ldr	r3, [sp, #0]
 8007850:	f200 4a06 	addw	sl, r0, #1030	@ 0x406
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8007854:	fa1a f282 	uxtah	r2, sl, r2
 8007858:	f832 9038 	ldrh.w	r9, [r2, r8, lsl #3]
 800785c:	f3c9 0909 	ubfx	r9, r9, #0, #10
    if (ep->xfer_len >= TxPctSize)
 8007860:	4599      	cmp	r9, r3
 8007862:	f240 81a5 	bls.w	8007bb0 <HAL_PCD_IRQHandler+0x7c0>
 8007866:	f8cc 6028 	str.w	r6, [ip, #40]	@ 0x28
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800786a:	197b      	adds	r3, r7, r5
 800786c:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8007870:	7c5b      	ldrb	r3, [r3, #17]
 8007872:	2b00      	cmp	r3, #0
 8007874:	f040 82a3 	bne.w	8007dbe <HAL_PCD_IRQHandler+0x9ce>
 8007878:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 800787c:	f20e 4602 	addw	r6, lr, #1026	@ 0x402
 8007880:	b292      	uxth	r2, r2
 8007882:	4406      	add	r6, r0
 8007884:	5ab3      	ldrh	r3, [r6, r2]
 8007886:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800788a:	52b3      	strh	r3, [r6, r2]
 800788c:	5ab3      	ldrh	r3, [r6, r2]
 800788e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007892:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007896:	b29b      	uxth	r3, r3
 8007898:	52b3      	strh	r3, [r6, r2]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800789a:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 800789e:	fa1a f282 	uxtah	r2, sl, r2
 80078a2:	f832 3038 	ldrh.w	r3, [r2, r8, lsl #3]
 80078a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80078aa:	f822 3038 	strh.w	r3, [r2, r8, lsl #3]
 80078ae:	f832 3038 	ldrh.w	r3, [r2, r8, lsl #3]
 80078b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078ba:	b29b      	uxth	r3, r3
 80078bc:	f822 3038 	strh.w	r3, [r2, r8, lsl #3]

      if (ep->type == EP_TYPE_BULK)
 80078c0:	197b      	adds	r3, r7, r5
 80078c2:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 80078c6:	7cdb      	ldrb	r3, [r3, #19]
 80078c8:	2b02      	cmp	r3, #2
 80078ca:	d10f      	bne.n	80078ec <HAL_PCD_IRQHandler+0x4fc>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 80078cc:	f830 3028 	ldrh.w	r3, [r0, r8, lsl #2]
 80078d0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80078d4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80078d8:	041b      	lsls	r3, r3, #16
 80078da:	0c1b      	lsrs	r3, r3, #16
 80078dc:	f083 0320 	eor.w	r3, r3, #32
 80078e0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80078e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80078e8:	f820 3028 	strh.w	r3, [r0, r8, lsl #2]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80078ec:	4620      	mov	r0, r4
 80078ee:	f007 faed 	bl	800eecc <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80078f2:	9b01      	ldr	r3, [sp, #4]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	f47f aecc 	bne.w	8007692 <HAL_PCD_IRQHandler+0x2a2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80078fa:	197b      	adds	r3, r7, r5
 80078fc:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8007900:	6820      	ldr	r0, [r4, #0]
 8007902:	7c1a      	ldrb	r2, [r3, #16]
 8007904:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8007908:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800790c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007910:	041b      	lsls	r3, r3, #16
 8007912:	0c1b      	lsrs	r3, r3, #16
 8007914:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007918:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800791c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8007920:	e5b2      	b.n	8007488 <HAL_PCD_IRQHandler+0x98>
        ep = &hpcd->OUT_ep[epindex];
 8007922:	2128      	movs	r1, #40	@ 0x28
 8007924:	fb01 4105 	mla	r1, r1, r5, r4
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8007928:	6820      	ldr	r0, [r4, #0]
 800792a:	f501 71a8 	add.w	r1, r1, #336	@ 0x150
 800792e:	f004 fb33 	bl	800bf98 <USB_EPStartXfer>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8007932:	6820      	ldr	r0, [r4, #0]
 8007934:	e5b9      	b.n	80074aa <HAL_PCD_IRQHandler+0xba>
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8007936:	f200 4c06 	addw	ip, r0, #1030	@ 0x406
 800793a:	fa1c f282 	uxtah	r2, ip, r2
 800793e:	f832 9033 	ldrh.w	r9, [r2, r3, lsl #3]
 8007942:	f3c9 0909 	ubfx	r9, r9, #0, #10
              if (count != 0U)
 8007946:	f1b9 0f00 	cmp.w	r9, #0
 800794a:	f43f ae38 	beq.w	80075be <HAL_PCD_IRQHandler+0x1ce>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800794e:	f8b1 215a 	ldrh.w	r2, [r1, #346]	@ 0x15a
 8007952:	f8d1 1164 	ldr.w	r1, [r1, #356]	@ 0x164
 8007956:	464b      	mov	r3, r9
 8007958:	f004 fd62 	bl	800c420 <USB_ReadPMA>
 800795c:	e631      	b.n	80075c2 <HAL_PCD_IRQHandler+0x1d2>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800795e:	f8b1 2156 	ldrh.w	r2, [r1, #342]	@ 0x156
 8007962:	f8d1 1164 	ldr.w	r1, [r1, #356]	@ 0x164
 8007966:	464b      	mov	r3, r9
 8007968:	f004 fd5a 	bl	800c420 <USB_ReadPMA>
 800796c:	e629      	b.n	80075c2 <HAL_PCD_IRQHandler+0x1d2>
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800796e:	f8b0 6050 	ldrh.w	r6, [r0, #80]	@ 0x50
    if (ep->xfer_len > TxPctSize)
 8007972:	9b00      	ldr	r3, [sp, #0]
 8007974:	f200 4a02 	addw	sl, r0, #1026	@ 0x402
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8007978:	fa1a f686 	uxtah	r6, sl, r6
 800797c:	f836 9038 	ldrh.w	r9, [r6, r8, lsl #3]
 8007980:	f3c9 0909 	ubfx	r9, r9, #0, #10
    if (ep->xfer_len > TxPctSize)
 8007984:	4599      	cmp	r9, r3
 8007986:	f0c0 80e2 	bcc.w	8007b4e <HAL_PCD_IRQHandler+0x75e>
 800798a:	2600      	movs	r6, #0
 800798c:	f8cc 6028 	str.w	r6, [ip, #40]	@ 0x28
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007990:	7c53      	ldrb	r3, [r2, #17]
 8007992:	2b00      	cmp	r3, #0
 8007994:	f040 8225 	bne.w	8007de2 <HAL_PCD_IRQHandler+0x9f2>
 8007998:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 800799c:	fa1a f383 	uxtah	r3, sl, r3
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80079a0:	f20e 4206 	addw	r2, lr, #1030	@ 0x406
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80079a4:	f833 6038 	ldrh.w	r6, [r3, r8, lsl #3]
 80079a8:	f3c6 0609 	ubfx	r6, r6, #0, #10
 80079ac:	f823 6038 	strh.w	r6, [r3, r8, lsl #3]
 80079b0:	f833 6038 	ldrh.w	r6, [r3, r8, lsl #3]
 80079b4:	b2b6      	uxth	r6, r6
 80079b6:	f446 4600 	orr.w	r6, r6, #32768	@ 0x8000
 80079ba:	f823 6038 	strh.w	r6, [r3, r8, lsl #3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80079be:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 80079c2:	4402      	add	r2, r0
 80079c4:	b29b      	uxth	r3, r3
 80079c6:	5ad6      	ldrh	r6, [r2, r3]
 80079c8:	f3c6 0609 	ubfx	r6, r6, #0, #10
 80079cc:	52d6      	strh	r6, [r2, r3]
 80079ce:	5ad6      	ldrh	r6, [r2, r3]
 80079d0:	b2b6      	uxth	r6, r6
 80079d2:	f446 4600 	orr.w	r6, r6, #32768	@ 0x8000
 80079d6:	52d6      	strh	r6, [r2, r3]
      if (ep->type == EP_TYPE_BULK)
 80079d8:	197b      	adds	r3, r7, r5
 80079da:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 80079de:	7cdb      	ldrb	r3, [r3, #19]
 80079e0:	2b02      	cmp	r3, #2
 80079e2:	d10f      	bne.n	8007a04 <HAL_PCD_IRQHandler+0x614>
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 80079e4:	f830 3028 	ldrh.w	r3, [r0, r8, lsl #2]
 80079e8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80079ec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80079f0:	041b      	lsls	r3, r3, #16
 80079f2:	0c1b      	lsrs	r3, r3, #16
 80079f4:	f083 0320 	eor.w	r3, r3, #32
 80079f8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80079fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007a00:	f820 3028 	strh.w	r3, [r0, r8, lsl #2]
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007a04:	4620      	mov	r0, r4
 8007a06:	f007 fa61 	bl	800eecc <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8007a0a:	9b01      	ldr	r3, [sp, #4]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	f47f af74 	bne.w	80078fa <HAL_PCD_IRQHandler+0x50a>
 8007a12:	e63e      	b.n	8007692 <HAL_PCD_IRQHandler+0x2a2>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	f040 813d 	bne.w	8007c94 <HAL_PCD_IRQHandler+0x8a4>
 8007a1a:	7c13      	ldrb	r3, [r2, #16]
 8007a1c:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 8007a20:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8007a24:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007a28:	e6ef      	b.n	800780a <HAL_PCD_IRQHandler+0x41a>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8007a2a:	6822      	ldr	r2, [r4, #0]
 8007a2c:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 8007a30:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007a34:	041b      	lsls	r3, r3, #16
 8007a36:	0c1b      	lsrs	r3, r3, #16
 8007a38:	f8a2 3044 	strh.w	r3, [r2, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8007a3c:	f894 32c8 	ldrb.w	r3, [r4, #712]	@ 0x2c8
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	f040 810e 	bne.w	8007c62 <HAL_PCD_IRQHandler+0x872>
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8007a46:	f8b2 3040 	ldrh.w	r3, [r2, #64]	@ 0x40
 8007a4a:	b29b      	uxth	r3, r3
 8007a4c:	f043 0304 	orr.w	r3, r3, #4
 8007a50:	f8a2 3040 	strh.w	r3, [r2, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8007a54:	f8b2 3040 	ldrh.w	r3, [r2, #64]	@ 0x40
 8007a58:	b29b      	uxth	r3, r3
      hpcd->LPM_State = LPM_L1;
 8007a5a:	2101      	movs	r1, #1
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8007a5c:	f043 0308 	orr.w	r3, r3, #8
 8007a60:	f8a2 3040 	strh.w	r3, [r2, #64]	@ 0x40
      hpcd->LPM_State = LPM_L1;
 8007a64:	f884 12c8 	strb.w	r1, [r4, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8007a68:	f8b2 3054 	ldrh.w	r3, [r2, #84]	@ 0x54
 8007a6c:	f3c3 038d 	ubfx	r3, r3, #2, #14
 8007a70:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8007a74:	4620      	mov	r0, r4
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8007a76:	f8c4 32cc 	str.w	r3, [r4, #716]	@ 0x2cc
}
 8007a7a:	b003      	add	sp, #12
 8007a7c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8007a80:	f007 bb2e 	b.w	800f0e0 <HAL_PCDEx_LPM_Callback>
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8007a84:	6822      	ldr	r2, [r4, #0]
 8007a86:	f8b2 3040 	ldrh.w	r3, [r2, #64]	@ 0x40
 8007a8a:	b29b      	uxth	r3, r3
 8007a8c:	f043 0308 	orr.w	r3, r3, #8
 8007a90:	f8a2 3040 	strh.w	r3, [r2, #64]	@ 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8007a94:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 8007a98:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007a9c:	041b      	lsls	r3, r3, #16
 8007a9e:	0c1b      	lsrs	r3, r3, #16
 8007aa0:	f8a2 3044 	strh.w	r3, [r2, #68]	@ 0x44
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8007aa4:	f8b2 3040 	ldrh.w	r3, [r2, #64]	@ 0x40
 8007aa8:	b29b      	uxth	r3, r3
 8007aaa:	f043 0304 	orr.w	r3, r3, #4
    HAL_PCD_SuspendCallback(hpcd);
 8007aae:	4620      	mov	r0, r4
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8007ab0:	f8a2 3040 	strh.w	r3, [r2, #64]	@ 0x40
    HAL_PCD_SuspendCallback(hpcd);
 8007ab4:	f007 fa2a 	bl	800ef0c <HAL_PCD_SuspendCallback>
    return;
 8007ab8:	e4ce      	b.n	8007458 <HAL_PCD_IRQHandler+0x68>
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8007aba:	f8b0 e050 	ldrh.w	lr, [r0, #80]	@ 0x50
    if (ep->xfer_len >= count)
 8007abe:	f8d1 3168 	ldr.w	r3, [r1, #360]	@ 0x168
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8007ac2:	fa0f fc82 	sxth.w	ip, r2
 8007ac6:	fa10 fe8e 	uxtah	lr, r0, lr
 8007aca:	00d2      	lsls	r2, r2, #3
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8007acc:	f416 4a80 	ands.w	sl, r6, #16384	@ 0x4000
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8007ad0:	4472      	add	r2, lr
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8007ad2:	f000 80f9 	beq.w	8007cc8 <HAL_PCD_IRQHandler+0x8d8>
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8007ad6:	f8b2 e402 	ldrh.w	lr, [r2, #1026]	@ 0x402
 8007ada:	f3ce 0e09 	ubfx	lr, lr, #0, #10
    if (ep->xfer_len >= count)
 8007ade:	459e      	cmp	lr, r3
 8007ae0:	46f1      	mov	r9, lr
 8007ae2:	f200 8165 	bhi.w	8007db0 <HAL_PCD_IRQHandler+0x9c0>
      ep->xfer_len -= count;
 8007ae6:	eba3 030e 	sub.w	r3, r3, lr
 8007aea:	f8c1 3168 	str.w	r3, [r1, #360]	@ 0x168
    if (ep->xfer_len == 0U)
 8007aee:	b97b      	cbnz	r3, 8007b10 <HAL_PCD_IRQHandler+0x720>
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8007af0:	f830 202c 	ldrh.w	r2, [r0, ip, lsl #2]
 8007af4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007af8:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8007afc:	0412      	lsls	r2, r2, #16
 8007afe:	0c12      	lsrs	r2, r2, #16
 8007b00:	f482 5200 	eor.w	r2, r2, #8192	@ 0x2000
 8007b04:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007b08:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007b0c:	f820 202c 	strh.w	r2, [r0, ip, lsl #2]
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8007b10:	0672      	lsls	r2, r6, #25
 8007b12:	d50d      	bpl.n	8007b30 <HAL_PCD_IRQHandler+0x740>
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8007b14:	f830 302c 	ldrh.w	r3, [r0, ip, lsl #2]
 8007b18:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007b1c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b20:	041b      	lsls	r3, r3, #16
 8007b22:	0c1b      	lsrs	r3, r3, #16
 8007b24:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007b28:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007b2c:	f820 302c 	strh.w	r3, [r0, ip, lsl #2]
    if (count != 0U)
 8007b30:	f1be 0f00 	cmp.w	lr, #0
 8007b34:	f43f ad45 	beq.w	80075c2 <HAL_PCD_IRQHandler+0x1d2>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8007b38:	1979      	adds	r1, r7, r5
 8007b3a:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 8007b3e:	4673      	mov	r3, lr
 8007b40:	f8b1 2158 	ldrh.w	r2, [r1, #344]	@ 0x158
 8007b44:	f8d1 1164 	ldr.w	r1, [r1, #356]	@ 0x164
 8007b48:	f004 fc6a 	bl	800c420 <USB_ReadPMA>
 8007b4c:	e539      	b.n	80075c2 <HAL_PCD_IRQHandler+0x1d2>
      ep->xfer_len -= TxPctSize;
 8007b4e:	eba3 0309 	sub.w	r3, r3, r9
 8007b52:	f8cc 3028 	str.w	r3, [ip, #40]	@ 0x28
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8007b56:	9b01      	ldr	r3, [sp, #4]
 8007b58:	b16b      	cbz	r3, 8007b76 <HAL_PCD_IRQHandler+0x786>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8007b5a:	f830 3028 	ldrh.w	r3, [r0, r8, lsl #2]
 8007b5e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007b62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b66:	041b      	lsls	r3, r3, #16
 8007b68:	0c1b      	lsrs	r3, r3, #16
 8007b6a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007b6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007b72:	f820 3028 	strh.w	r3, [r0, r8, lsl #2]
      if (ep->xfer_fill_db == 1U)
 8007b76:	197b      	adds	r3, r7, r5
 8007b78:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8007b7c:	f893 2034 	ldrb.w	r2, [r3, #52]	@ 0x34
 8007b80:	2a01      	cmp	r2, #1
 8007b82:	f000 80dc 	beq.w	8007d3e <HAL_PCD_IRQHandler+0x94e>
      }
    }
  }

  /* Enable endpoint IN */
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8007b86:	443d      	add	r5, r7
 8007b88:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 8007b8c:	7c2a      	ldrb	r2, [r5, #16]
 8007b8e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8007b92:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007b96:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007b9a:	041b      	lsls	r3, r3, #16
 8007b9c:	0c1b      	lsrs	r3, r3, #16
 8007b9e:	f083 0330 	eor.w	r3, r3, #48	@ 0x30
 8007ba2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007ba6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007baa:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

  return HAL_OK;
 8007bae:	e46b      	b.n	8007488 <HAL_PCD_IRQHandler+0x98>
      ep->xfer_len -= TxPctSize;
 8007bb0:	eba3 0309 	sub.w	r3, r3, r9
 8007bb4:	f8cc 3028 	str.w	r3, [ip, #40]	@ 0x28
    if (ep->xfer_len == 0U)
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	f43f ae56 	beq.w	800786a <HAL_PCD_IRQHandler+0x47a>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8007bbe:	9b01      	ldr	r3, [sp, #4]
 8007bc0:	b96b      	cbnz	r3, 8007bde <HAL_PCD_IRQHandler+0x7ee>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8007bc2:	f830 3028 	ldrh.w	r3, [r0, r8, lsl #2]
 8007bc6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007bca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007bce:	041b      	lsls	r3, r3, #16
 8007bd0:	0c1b      	lsrs	r3, r3, #16
 8007bd2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007bd6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007bda:	f820 3028 	strh.w	r3, [r0, r8, lsl #2]
      if (ep->xfer_fill_db == 1U)
 8007bde:	197b      	adds	r3, r7, r5
 8007be0:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8007be4:	f893 2034 	ldrb.w	r2, [r3, #52]	@ 0x34
 8007be8:	2a01      	cmp	r2, #1
 8007bea:	d1cc      	bne.n	8007b86 <HAL_PCD_IRQHandler+0x796>
        ep->xfer_buff += TxPctSize;
 8007bec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007bee:	eb02 0109 	add.w	r1, r2, r9
 8007bf2:	6259      	str	r1, [r3, #36]	@ 0x24
        ep->xfer_count += TxPctSize;
 8007bf4:	f8dc 602c 	ldr.w	r6, [ip, #44]	@ 0x2c
 8007bf8:	444e      	add	r6, r9
 8007bfa:	f8cc 602c 	str.w	r6, [ip, #44]	@ 0x2c
        if (ep->xfer_len_db >= ep->maxpacket)
 8007bfe:	6b1e      	ldr	r6, [r3, #48]	@ 0x30
 8007c00:	6a1a      	ldr	r2, [r3, #32]
 8007c02:	4296      	cmp	r6, r2
 8007c04:	f0c0 8109 	bcc.w	8007e1a <HAL_PCD_IRQHandler+0xa2a>
          ep->xfer_len_db -= len;
 8007c08:	1ab6      	subs	r6, r6, r2
 8007c0a:	631e      	str	r6, [r3, #48]	@ 0x30
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8007c0c:	fa1f f982 	uxth.w	r9, r2
 8007c10:	197b      	adds	r3, r7, r5
 8007c12:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8007c16:	f893 c011 	ldrb.w	ip, [r3, #17]
 8007c1a:	f1bc 0f00 	cmp.w	ip, #0
 8007c1e:	f040 80f1 	bne.w	8007e04 <HAL_PCD_IRQHandler+0xa14>
 8007c22:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 8007c26:	fa1a f383 	uxtah	r3, sl, r3
 8007c2a:	449e      	add	lr, r3
 8007c2c:	f833 6038 	ldrh.w	r6, [r3, r8, lsl #3]
 8007c30:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8007c34:	f823 6038 	strh.w	r6, [r3, r8, lsl #3]
 8007c38:	2a00      	cmp	r2, #0
 8007c3a:	f040 8119 	bne.w	8007e70 <HAL_PCD_IRQHandler+0xa80>
 8007c3e:	f833 2038 	ldrh.w	r2, [r3, r8, lsl #3]
 8007c42:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8007c46:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8007c4a:	b292      	uxth	r2, r2
 8007c4c:	f823 2038 	strh.w	r2, [r3, r8, lsl #3]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8007c50:	197a      	adds	r2, r7, r5
 8007c52:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8007c56:	464b      	mov	r3, r9
 8007c58:	8b52      	ldrh	r2, [r2, #26]
 8007c5a:	f004 fbd1 	bl	800c400 <USB_WritePMA>
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8007c5e:	6820      	ldr	r0, [r4, #0]
 8007c60:	e791      	b.n	8007b86 <HAL_PCD_IRQHandler+0x796>
      HAL_PCD_SuspendCallback(hpcd);
 8007c62:	4620      	mov	r0, r4
 8007c64:	f007 f952 	bl	800ef0c <HAL_PCD_SuspendCallback>
 8007c68:	f7ff bbf6 	b.w	8007458 <HAL_PCD_IRQHandler+0x68>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8007c6c:	6822      	ldr	r2, [r4, #0]
 8007c6e:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 8007c72:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007c76:	041b      	lsls	r3, r3, #16
 8007c78:	0c1b      	lsrs	r3, r3, #16
    HAL_PCD_SOFCallback(hpcd);
 8007c7a:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8007c7c:	f8a2 3044 	strh.w	r3, [r2, #68]	@ 0x44
    HAL_PCD_SOFCallback(hpcd);
 8007c80:	f007 f92e 	bl	800eee0 <HAL_PCD_SOFCallback>
    return;
 8007c84:	f7ff bbe8 	b.w	8007458 <HAL_PCD_IRQHandler+0x68>
      hpcd->LPM_State = LPM_L0;
 8007c88:	f884 12c8 	strb.w	r1, [r4, #712]	@ 0x2c8
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8007c8c:	4620      	mov	r0, r4
 8007c8e:	f007 fa27 	bl	800f0e0 <HAL_PCDEx_LPM_Callback>
 8007c92:	e464      	b.n	800755e <HAL_PCD_IRQHandler+0x16e>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007c94:	2b01      	cmp	r3, #1
 8007c96:	f47f adc2 	bne.w	800781e <HAL_PCD_IRQHandler+0x42e>
 8007c9a:	7c13      	ldrb	r3, [r2, #16]
 8007c9c:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 8007ca0:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8007ca4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007ca8:	b292      	uxth	r2, r2
 8007caa:	5299      	strh	r1, [r3, r2]
 8007cac:	e5b7      	b.n	800781e <HAL_PCD_IRQHandler+0x42e>
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007cae:	2b01      	cmp	r3, #1
 8007cb0:	f47f adb5 	bne.w	800781e <HAL_PCD_IRQHandler+0x42e>
 8007cb4:	7c13      	ldrb	r3, [r2, #16]
 8007cb6:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 8007cba:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8007cbe:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007cc2:	b292      	uxth	r2, r2
 8007cc4:	529e      	strh	r6, [r3, r2]
 8007cc6:	e5aa      	b.n	800781e <HAL_PCD_IRQHandler+0x42e>
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8007cc8:	f8b2 e406 	ldrh.w	lr, [r2, #1030]	@ 0x406
 8007ccc:	f3ce 0e09 	ubfx	lr, lr, #0, #10
    if (ep->xfer_len >= count)
 8007cd0:	459e      	cmp	lr, r3
 8007cd2:	46f1      	mov	r9, lr
 8007cd4:	d870      	bhi.n	8007db8 <HAL_PCD_IRQHandler+0x9c8>
      ep->xfer_len -= count;
 8007cd6:	eba3 030e 	sub.w	r3, r3, lr
 8007cda:	f8c1 3168 	str.w	r3, [r1, #360]	@ 0x168
    if (ep->xfer_len == 0U)
 8007cde:	b97b      	cbnz	r3, 8007d00 <HAL_PCD_IRQHandler+0x910>
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8007ce0:	f830 202c 	ldrh.w	r2, [r0, ip, lsl #2]
 8007ce4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007ce8:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8007cec:	0412      	lsls	r2, r2, #16
 8007cee:	0c12      	lsrs	r2, r2, #16
 8007cf0:	f482 5200 	eor.w	r2, r2, #8192	@ 0x2000
 8007cf4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007cf8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007cfc:	f820 202c 	strh.w	r2, [r0, ip, lsl #2]
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8007d00:	0673      	lsls	r3, r6, #25
 8007d02:	d40d      	bmi.n	8007d20 <HAL_PCD_IRQHandler+0x930>
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8007d04:	f830 302c 	ldrh.w	r3, [r0, ip, lsl #2]
 8007d08:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007d0c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d10:	041b      	lsls	r3, r3, #16
 8007d12:	0c1b      	lsrs	r3, r3, #16
 8007d14:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007d18:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007d1c:	f820 302c 	strh.w	r3, [r0, ip, lsl #2]
    if (count != 0U)
 8007d20:	f1be 0f00 	cmp.w	lr, #0
 8007d24:	f43f ac4d 	beq.w	80075c2 <HAL_PCD_IRQHandler+0x1d2>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8007d28:	1979      	adds	r1, r7, r5
 8007d2a:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 8007d2e:	4673      	mov	r3, lr
 8007d30:	f8b1 215a 	ldrh.w	r2, [r1, #346]	@ 0x15a
 8007d34:	f8d1 1164 	ldr.w	r1, [r1, #356]	@ 0x164
 8007d38:	f004 fb72 	bl	800c420 <USB_ReadPMA>
 8007d3c:	e441      	b.n	80075c2 <HAL_PCD_IRQHandler+0x1d2>
        ep->xfer_buff += TxPctSize;
 8007d3e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007d40:	eb02 0109 	add.w	r1, r2, r9
 8007d44:	6259      	str	r1, [r3, #36]	@ 0x24
        ep->xfer_count += TxPctSize;
 8007d46:	f8dc 602c 	ldr.w	r6, [ip, #44]	@ 0x2c
 8007d4a:	444e      	add	r6, r9
 8007d4c:	f8cc 602c 	str.w	r6, [ip, #44]	@ 0x2c
        if (ep->xfer_len_db >= ep->maxpacket)
 8007d50:	6b1e      	ldr	r6, [r3, #48]	@ 0x30
 8007d52:	6a1a      	ldr	r2, [r3, #32]
 8007d54:	4296      	cmp	r6, r2
 8007d56:	d36f      	bcc.n	8007e38 <HAL_PCD_IRQHandler+0xa48>
          ep->xfer_len_db -= len;
 8007d58:	1ab6      	subs	r6, r6, r2
 8007d5a:	631e      	str	r6, [r3, #48]	@ 0x30
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8007d5c:	fa1f f982 	uxth.w	r9, r2
 8007d60:	197b      	adds	r3, r7, r5
 8007d62:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8007d66:	f893 c011 	ldrb.w	ip, [r3, #17]
 8007d6a:	f1bc 0f00 	cmp.w	ip, #0
 8007d6e:	d159      	bne.n	8007e24 <HAL_PCD_IRQHandler+0xa34>
 8007d70:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 8007d74:	fa1a f383 	uxtah	r3, sl, r3
 8007d78:	449e      	add	lr, r3
 8007d7a:	f833 6038 	ldrh.w	r6, [r3, r8, lsl #3]
 8007d7e:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8007d82:	f823 6038 	strh.w	r6, [r3, r8, lsl #3]
 8007d86:	2a00      	cmp	r2, #0
 8007d88:	f040 8098 	bne.w	8007ebc <HAL_PCD_IRQHandler+0xacc>
 8007d8c:	f833 2038 	ldrh.w	r2, [r3, r8, lsl #3]
 8007d90:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8007d94:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8007d98:	b292      	uxth	r2, r2
 8007d9a:	f823 2038 	strh.w	r2, [r3, r8, lsl #3]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8007d9e:	197a      	adds	r2, r7, r5
 8007da0:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8007da4:	464b      	mov	r3, r9
 8007da6:	8b12      	ldrh	r2, [r2, #24]
 8007da8:	f004 fb2a 	bl	800c400 <USB_WritePMA>
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8007dac:	6820      	ldr	r0, [r4, #0]
 8007dae:	e6ea      	b.n	8007b86 <HAL_PCD_IRQHandler+0x796>
      ep->xfer_len = 0U;
 8007db0:	2300      	movs	r3, #0
 8007db2:	f8c1 3168 	str.w	r3, [r1, #360]	@ 0x168
    if (ep->xfer_len == 0U)
 8007db6:	e69b      	b.n	8007af0 <HAL_PCD_IRQHandler+0x700>
      ep->xfer_len = 0U;
 8007db8:	f8c1 a168 	str.w	sl, [r1, #360]	@ 0x168
    if (ep->xfer_len == 0U)
 8007dbc:	e790      	b.n	8007ce0 <HAL_PCD_IRQHandler+0x8f0>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007dbe:	2b01      	cmp	r3, #1
 8007dc0:	f47f ad7e 	bne.w	80078c0 <HAL_PCD_IRQHandler+0x4d0>
 8007dc4:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 8007dc8:	f20e 4202 	addw	r2, lr, #1026	@ 0x402
 8007dcc:	b29b      	uxth	r3, r3
 8007dce:	4402      	add	r2, r0
 8007dd0:	2600      	movs	r6, #0
 8007dd2:	52d6      	strh	r6, [r2, r3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007dd4:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 8007dd8:	fa1a f383 	uxtah	r3, sl, r3
 8007ddc:	f823 6038 	strh.w	r6, [r3, r8, lsl #3]
 8007de0:	e56e      	b.n	80078c0 <HAL_PCD_IRQHandler+0x4d0>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007de2:	2b01      	cmp	r3, #1
 8007de4:	f47f adf8 	bne.w	80079d8 <HAL_PCD_IRQHandler+0x5e8>
 8007de8:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 8007dec:	fa1a f383 	uxtah	r3, sl, r3
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007df0:	f20e 4206 	addw	r2, lr, #1030	@ 0x406
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007df4:	f823 6038 	strh.w	r6, [r3, r8, lsl #3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007df8:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 8007dfc:	4402      	add	r2, r0
 8007dfe:	b29b      	uxth	r3, r3
 8007e00:	52d6      	strh	r6, [r2, r3]
 8007e02:	e5e9      	b.n	80079d8 <HAL_PCD_IRQHandler+0x5e8>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8007e04:	f1bc 0f01 	cmp.w	ip, #1
 8007e08:	f47f af22 	bne.w	8007c50 <HAL_PCD_IRQHandler+0x860>
 8007e0c:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 8007e10:	fa1a f383 	uxtah	r3, sl, r3
 8007e14:	f823 9038 	strh.w	r9, [r3, r8, lsl #3]
 8007e18:	e71a      	b.n	8007c50 <HAL_PCD_IRQHandler+0x860>
        else if (ep->xfer_len_db == 0U)
 8007e1a:	b996      	cbnz	r6, 8007e42 <HAL_PCD_IRQHandler+0xa52>
          ep->xfer_fill_db = 0U;
 8007e1c:	f883 6034 	strb.w	r6, [r3, #52]	@ 0x34
    if (ep->xfer_len >= TxPctSize)
 8007e20:	464a      	mov	r2, r9
 8007e22:	e6f5      	b.n	8007c10 <HAL_PCD_IRQHandler+0x820>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8007e24:	f1bc 0f01 	cmp.w	ip, #1
 8007e28:	d1b9      	bne.n	8007d9e <HAL_PCD_IRQHandler+0x9ae>
 8007e2a:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 8007e2e:	fa1a f383 	uxtah	r3, sl, r3
 8007e32:	f823 9038 	strh.w	r9, [r3, r8, lsl #3]
 8007e36:	e7b2      	b.n	8007d9e <HAL_PCD_IRQHandler+0x9ae>
        else if (ep->xfer_len_db == 0U)
 8007e38:	bb4e      	cbnz	r6, 8007e8e <HAL_PCD_IRQHandler+0xa9e>
          ep->xfer_fill_db = 0U;
 8007e3a:	f883 6034 	strb.w	r6, [r3, #52]	@ 0x34
    if (ep->xfer_len > TxPctSize)
 8007e3e:	464a      	mov	r2, r9
 8007e40:	e78e      	b.n	8007d60 <HAL_PCD_IRQHandler+0x970>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8007e42:	f893 c011 	ldrb.w	ip, [r3, #17]
          ep->xfer_len_db = 0U;
 8007e46:	2200      	movs	r2, #0
 8007e48:	631a      	str	r2, [r3, #48]	@ 0x30
          ep->xfer_fill_db = 0;
 8007e4a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8007e4e:	fa1f f986 	uxth.w	r9, r6
 8007e52:	f1bc 0f00 	cmp.w	ip, #0
 8007e56:	d1d5      	bne.n	8007e04 <HAL_PCD_IRQHandler+0xa14>
 8007e58:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 8007e5c:	fa1a f383 	uxtah	r3, sl, r3
 8007e60:	4632      	mov	r2, r6
 8007e62:	f833 6038 	ldrh.w	r6, [r3, r8, lsl #3]
 8007e66:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8007e6a:	f823 6038 	strh.w	r6, [r3, r8, lsl #3]
 8007e6e:	449e      	add	lr, r3
 8007e70:	2a3e      	cmp	r2, #62	@ 0x3e
 8007e72:	d832      	bhi.n	8007eda <HAL_PCD_IRQHandler+0xaea>
 8007e74:	f8be 3000 	ldrh.w	r3, [lr]
 8007e78:	0856      	lsrs	r6, r2, #1
 8007e7a:	07d2      	lsls	r2, r2, #31
 8007e7c:	bf48      	it	mi
 8007e7e:	3601      	addmi	r6, #1
 8007e80:	b29b      	uxth	r3, r3
 8007e82:	ea43 2386 	orr.w	r3, r3, r6, lsl #10
 8007e86:	b29b      	uxth	r3, r3
 8007e88:	f8ae 3000 	strh.w	r3, [lr]
 8007e8c:	e6e0      	b.n	8007c50 <HAL_PCD_IRQHandler+0x860>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8007e8e:	f893 c011 	ldrb.w	ip, [r3, #17]
          ep->xfer_fill_db = 0U;
 8007e92:	2200      	movs	r2, #0
 8007e94:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          ep->xfer_len_db = 0U;
 8007e98:	631a      	str	r2, [r3, #48]	@ 0x30
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8007e9a:	fa1f f986 	uxth.w	r9, r6
 8007e9e:	f1bc 0f00 	cmp.w	ip, #0
 8007ea2:	d1bf      	bne.n	8007e24 <HAL_PCD_IRQHandler+0xa34>
 8007ea4:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 8007ea8:	fa1a f383 	uxtah	r3, sl, r3
 8007eac:	4632      	mov	r2, r6
 8007eae:	f833 6038 	ldrh.w	r6, [r3, r8, lsl #3]
 8007eb2:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8007eb6:	f823 6038 	strh.w	r6, [r3, r8, lsl #3]
 8007eba:	449e      	add	lr, r3
 8007ebc:	2a3e      	cmp	r2, #62	@ 0x3e
 8007ebe:	d81f      	bhi.n	8007f00 <HAL_PCD_IRQHandler+0xb10>
 8007ec0:	f8be 3000 	ldrh.w	r3, [lr]
 8007ec4:	0856      	lsrs	r6, r2, #1
 8007ec6:	07d2      	lsls	r2, r2, #31
 8007ec8:	bf48      	it	mi
 8007eca:	3601      	addmi	r6, #1
 8007ecc:	b29b      	uxth	r3, r3
 8007ece:	ea43 2386 	orr.w	r3, r3, r6, lsl #10
 8007ed2:	b29b      	uxth	r3, r3
 8007ed4:	f8ae 3000 	strh.w	r3, [lr]
 8007ed8:	e761      	b.n	8007d9e <HAL_PCD_IRQHandler+0x9ae>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8007eda:	06d3      	lsls	r3, r2, #27
 8007edc:	f8be 3000 	ldrh.w	r3, [lr]
 8007ee0:	ea4f 1652 	mov.w	r6, r2, lsr #5
 8007ee4:	bf08      	it	eq
 8007ee6:	f106 36ff 	addeq.w	r6, r6, #4294967295
 8007eea:	b29b      	uxth	r3, r3
 8007eec:	ea43 2386 	orr.w	r3, r3, r6, lsl #10
 8007ef0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ef4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ef8:	b29b      	uxth	r3, r3
 8007efa:	f8ae 3000 	strh.w	r3, [lr]
 8007efe:	e6a7      	b.n	8007c50 <HAL_PCD_IRQHandler+0x860>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8007f00:	06d3      	lsls	r3, r2, #27
 8007f02:	f8be 3000 	ldrh.w	r3, [lr]
 8007f06:	ea4f 1652 	mov.w	r6, r2, lsr #5
 8007f0a:	bf08      	it	eq
 8007f0c:	f106 36ff 	addeq.w	r6, r6, #4294967295
 8007f10:	b29b      	uxth	r3, r3
 8007f12:	ea43 2386 	orr.w	r3, r3, r6, lsl #10
 8007f16:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f1a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f1e:	b29b      	uxth	r3, r3
 8007f20:	f8ae 3000 	strh.w	r3, [lr]
 8007f24:	e73b      	b.n	8007d9e <HAL_PCD_IRQHandler+0x9ae>
 8007f26:	bf00      	nop
 8007f28:	ffff8f0f 	.word	0xffff8f0f

08007f2c <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 8007f2c:	f890 2290 	ldrb.w	r2, [r0, #656]	@ 0x290
 8007f30:	2a01      	cmp	r2, #1
 8007f32:	d00c      	beq.n	8007f4e <HAL_PCD_SetAddress+0x22>
{
 8007f34:	b510      	push	{r4, lr}
 8007f36:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8007f38:	2201      	movs	r2, #1
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8007f3a:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hpcd);
 8007f3c:	f884 2290 	strb.w	r2, [r4, #656]	@ 0x290
  hpcd->USB_Address = address;
 8007f40:	7321      	strb	r1, [r4, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8007f42:	f004 fa47 	bl	800c3d4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8007f46:	2000      	movs	r0, #0
 8007f48:	f884 0290 	strb.w	r0, [r4, #656]	@ 0x290
}
 8007f4c:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8007f4e:	2002      	movs	r0, #2
}
 8007f50:	4770      	bx	lr
 8007f52:	bf00      	nop

08007f54 <HAL_PCD_EP_Open>:
{
 8007f54:	b510      	push	{r4, lr}
 8007f56:	f001 0e07 	and.w	lr, r1, #7
 8007f5a:	eb0e 0c8e 	add.w	ip, lr, lr, lsl #2
  if ((ep_addr & 0x80U) == 0x80U)
 8007f5e:	0609      	lsls	r1, r1, #24
{
 8007f60:	4604      	mov	r4, r0
 8007f62:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
  if ((ep_addr & 0x80U) == 0x80U)
 8007f66:	d422      	bmi.n	8007fae <HAL_PCD_EP_Open+0x5a>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007f68:	f50c 71a8 	add.w	r1, ip, #336	@ 0x150
 8007f6c:	4401      	add	r1, r0
    ep->is_in = 0U;
 8007f6e:	eb0e 008e 	add.w	r0, lr, lr, lsl #2
 8007f72:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 8007f76:	f04f 0c00 	mov.w	ip, #0
 8007f7a:	f880 c151 	strb.w	ip, [r0, #337]	@ 0x151
  if (ep_type == EP_TYPE_BULK)
 8007f7e:	2b02      	cmp	r3, #2
  ep->type = ep_type;
 8007f80:	70cb      	strb	r3, [r1, #3]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8007f82:	f3c2 020a 	ubfx	r2, r2, #0, #11
    ep->data_pid_start = 0U;
 8007f86:	bf04      	itt	eq
 8007f88:	2300      	moveq	r3, #0
 8007f8a:	710b      	strbeq	r3, [r1, #4]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007f8c:	f881 e000 	strb.w	lr, [r1]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8007f90:	610a      	str	r2, [r1, #16]
  __HAL_LOCK(hpcd);
 8007f92:	f894 3290 	ldrb.w	r3, [r4, #656]	@ 0x290
 8007f96:	2b01      	cmp	r3, #1
 8007f98:	d015      	beq.n	8007fc6 <HAL_PCD_EP_Open+0x72>
 8007f9a:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8007f9c:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8007f9e:	f884 3290 	strb.w	r3, [r4, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8007fa2:	f003 fcfb 	bl	800b99c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007fa6:	2000      	movs	r0, #0
 8007fa8:	f884 0290 	strb.w	r0, [r4, #656]	@ 0x290
}
 8007fac:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007fae:	f10c 0110 	add.w	r1, ip, #16
 8007fb2:	4401      	add	r1, r0
    ep->is_in = 1U;
 8007fb4:	eb0e 008e 	add.w	r0, lr, lr, lsl #2
 8007fb8:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 8007fbc:	f04f 0c01 	mov.w	ip, #1
 8007fc0:	f880 c011 	strb.w	ip, [r0, #17]
 8007fc4:	e7db      	b.n	8007f7e <HAL_PCD_EP_Open+0x2a>
  __HAL_LOCK(hpcd);
 8007fc6:	2002      	movs	r0, #2
}
 8007fc8:	bd10      	pop	{r4, pc}
 8007fca:	bf00      	nop

08007fcc <HAL_PCD_EP_Close>:
  if ((ep_addr & 0x80U) == 0x80U)
 8007fcc:	f001 0307 	and.w	r3, r1, #7
 8007fd0:	f001 0207 	and.w	r2, r1, #7
{
 8007fd4:	b510      	push	{r4, lr}
 8007fd6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8007fda:	4604      	mov	r4, r0
  if ((ep_addr & 0x80U) == 0x80U)
 8007fdc:	0609      	lsls	r1, r1, #24
    ep->is_in = 1U;
 8007fde:	eb02 0082 	add.w	r0, r2, r2, lsl #2
 8007fe2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8007fe6:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
  if ((ep_addr & 0x80U) == 0x80U)
 8007fea:	d415      	bmi.n	8008018 <HAL_PCD_EP_Close+0x4c>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007fec:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007ff0:	18e1      	adds	r1, r4, r3
    ep->is_in = 0U;
 8007ff2:	f04f 0c00 	mov.w	ip, #0
 8007ff6:	f880 c151 	strb.w	ip, [r0, #337]	@ 0x151
  ep->num = ep_addr & EP_ADDR_MSK;
 8007ffa:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8007ffc:	f894 3290 	ldrb.w	r3, [r4, #656]	@ 0x290
 8008000:	2b01      	cmp	r3, #1
 8008002:	d014      	beq.n	800802e <HAL_PCD_EP_Close+0x62>
 8008004:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8008006:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8008008:	f884 3290 	strb.w	r3, [r4, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800800c:	f003 fede 	bl	800bdcc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008010:	2000      	movs	r0, #0
 8008012:	f884 0290 	strb.w	r0, [r4, #656]	@ 0x290
}
 8008016:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008018:	3310      	adds	r3, #16
 800801a:	18e1      	adds	r1, r4, r3
    ep->is_in = 1U;
 800801c:	f04f 0c01 	mov.w	ip, #1
 8008020:	f880 c011 	strb.w	ip, [r0, #17]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008024:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8008026:	f894 3290 	ldrb.w	r3, [r4, #656]	@ 0x290
 800802a:	2b01      	cmp	r3, #1
 800802c:	d1ea      	bne.n	8008004 <HAL_PCD_EP_Close+0x38>
 800802e:	2002      	movs	r0, #2
}
 8008030:	bd10      	pop	{r4, pc}
 8008032:	bf00      	nop

08008034 <HAL_PCD_EP_Receive>:
{
 8008034:	b510      	push	{r4, lr}
 8008036:	f001 0e07 	and.w	lr, r1, #7
  ep->xfer_buff = pBuf;
 800803a:	eb0e 0c8e 	add.w	ip, lr, lr, lsl #2
 800803e:	eb00 0ccc 	add.w	ip, r0, ip, lsl #3
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008042:	2128      	movs	r1, #40	@ 0x28
  ep->xfer_count = 0U;
 8008044:	2400      	movs	r4, #0
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008046:	fb01 010e 	mla	r1, r1, lr, r0
  ep->xfer_buff = pBuf;
 800804a:	f8cc 2164 	str.w	r2, [ip, #356]	@ 0x164
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800804e:	6800      	ldr	r0, [r0, #0]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008050:	f88c e150 	strb.w	lr, [ip, #336]	@ 0x150
  ep->xfer_count = 0U;
 8008054:	e9cc 345a 	strd	r3, r4, [ip, #360]	@ 0x168
  ep->is_in = 0U;
 8008058:	f88c 4151 	strb.w	r4, [ip, #337]	@ 0x151
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800805c:	f501 71a8 	add.w	r1, r1, #336	@ 0x150
 8008060:	f003 ff9a 	bl	800bf98 <USB_EPStartXfer>
}
 8008064:	4620      	mov	r0, r4
 8008066:	bd10      	pop	{r4, pc}

08008068 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8008068:	f001 0107 	and.w	r1, r1, #7
 800806c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8008070:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
}
 8008074:	f8d0 016c 	ldr.w	r0, [r0, #364]	@ 0x16c
 8008078:	4770      	bx	lr
 800807a:	bf00      	nop

0800807c <HAL_PCD_EP_Transmit>:
{
 800807c:	b510      	push	{r4, lr}
 800807e:	f001 0e07 	and.w	lr, r1, #7
 8008082:	eb0e 018e 	add.w	r1, lr, lr, lsl #2
  ep->xfer_buff = pBuf;
 8008086:	eb00 0cc1 	add.w	ip, r0, r1, lsl #3
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800808a:	4661      	mov	r1, ip
  ep->xfer_len = len;
 800808c:	f8cc 3028 	str.w	r3, [ip, #40]	@ 0x28
  ep->xfer_len_db = len;
 8008090:	f8cc 3030 	str.w	r3, [ip, #48]	@ 0x30
  ep->xfer_count = 0U;
 8008094:	2400      	movs	r4, #0
  ep->xfer_fill_db = 1U;
 8008096:	2301      	movs	r3, #1
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8008098:	6800      	ldr	r0, [r0, #0]
  ep->xfer_buff = pBuf;
 800809a:	f8cc 2024 	str.w	r2, [ip, #36]	@ 0x24
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800809e:	3110      	adds	r1, #16
  ep->xfer_fill_db = 1U;
 80080a0:	f88c 3034 	strb.w	r3, [ip, #52]	@ 0x34
  ep->xfer_count = 0U;
 80080a4:	f8cc 402c 	str.w	r4, [ip, #44]	@ 0x2c
  ep->is_in = 1U;
 80080a8:	f88c 3011 	strb.w	r3, [ip, #17]
  ep->num = ep_addr & EP_ADDR_MSK;
 80080ac:	f88c e010 	strb.w	lr, [ip, #16]
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80080b0:	f003 ff72 	bl	800bf98 <USB_EPStartXfer>
}
 80080b4:	4620      	mov	r0, r4
 80080b6:	bd10      	pop	{r4, pc}

080080b8 <HAL_PCD_EP_SetStall>:
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80080b8:	7902      	ldrb	r2, [r0, #4]
 80080ba:	f001 0307 	and.w	r3, r1, #7
 80080be:	429a      	cmp	r2, r3
 80080c0:	d332      	bcc.n	8008128 <HAL_PCD_EP_SetStall+0x70>
  if ((0x80U & ep_addr) == 0x80U)
 80080c2:	060a      	lsls	r2, r1, #24
{
 80080c4:	b510      	push	{r4, lr}
 80080c6:	4604      	mov	r4, r0
  if ((0x80U & ep_addr) == 0x80U)
 80080c8:	d41b      	bmi.n	8008102 <HAL_PCD_EP_SetStall+0x4a>
    ep->is_in = 0U;
 80080ca:	eb01 0281 	add.w	r2, r1, r1, lsl #2
    ep = &hpcd->OUT_ep[ep_addr];
 80080ce:	2028      	movs	r0, #40	@ 0x28
 80080d0:	fb00 4101 	mla	r1, r0, r1, r4
    ep->is_in = 0U;
 80080d4:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
    ep = &hpcd->OUT_ep[ep_addr];
 80080d8:	f501 71a8 	add.w	r1, r1, #336	@ 0x150
    ep->is_in = 0U;
 80080dc:	2000      	movs	r0, #0
 80080de:	f882 0151 	strb.w	r0, [r2, #337]	@ 0x151
  ep->is_stall = 1U;
 80080e2:	2201      	movs	r2, #1
 80080e4:	708a      	strb	r2, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80080e6:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 80080e8:	f894 3290 	ldrb.w	r3, [r4, #656]	@ 0x290
 80080ec:	4293      	cmp	r3, r2
 80080ee:	d019      	beq.n	8008124 <HAL_PCD_EP_SetStall+0x6c>
  (void)USB_EPSetStall(hpcd->Instance, ep);
 80080f0:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 80080f2:	f884 2290 	strb.w	r2, [r4, #656]	@ 0x290
  (void)USB_EPSetStall(hpcd->Instance, ep);
 80080f6:	f004 f8f7 	bl	800c2e8 <USB_EPSetStall>
  __HAL_UNLOCK(hpcd);
 80080fa:	2000      	movs	r0, #0
 80080fc:	f884 0290 	strb.w	r0, [r4, #656]	@ 0x290
}
 8008100:	bd10      	pop	{r4, pc}
    ep->is_in = 1U;
 8008102:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008106:	2128      	movs	r1, #40	@ 0x28
 8008108:	fb01 0103 	mla	r1, r1, r3, r0
    ep->is_in = 1U;
 800810c:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008110:	3110      	adds	r1, #16
    ep->is_in = 1U;
 8008112:	2001      	movs	r0, #1
 8008114:	7450      	strb	r0, [r2, #17]
  ep->is_stall = 1U;
 8008116:	2201      	movs	r2, #1
 8008118:	708a      	strb	r2, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800811a:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 800811c:	f894 3290 	ldrb.w	r3, [r4, #656]	@ 0x290
 8008120:	4293      	cmp	r3, r2
 8008122:	d1e5      	bne.n	80080f0 <HAL_PCD_EP_SetStall+0x38>
 8008124:	2002      	movs	r0, #2
}
 8008126:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8008128:	2001      	movs	r0, #1
}
 800812a:	4770      	bx	lr

0800812c <HAL_PCD_EP_ClrStall>:
{
 800812c:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800812e:	7902      	ldrb	r2, [r0, #4]
 8008130:	f001 030f 	and.w	r3, r1, #15
 8008134:	429a      	cmp	r2, r3
 8008136:	d332      	bcc.n	800819e <HAL_PCD_EP_ClrStall+0x72>
  if ((0x80U & ep_addr) == 0x80U)
 8008138:	f001 0307 	and.w	r3, r1, #7
 800813c:	f001 0207 	and.w	r2, r1, #7
 8008140:	4604      	mov	r4, r0
 8008142:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    ep->is_in = 1U;
 8008146:	eb02 0082 	add.w	r0, r2, r2, lsl #2
  if ((0x80U & ep_addr) == 0x80U)
 800814a:	0609      	lsls	r1, r1, #24
 800814c:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    ep->is_in = 1U;
 8008150:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
  if ((0x80U & ep_addr) == 0x80U)
 8008154:	d416      	bmi.n	8008184 <HAL_PCD_EP_ClrStall+0x58>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008156:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800815a:	18e1      	adds	r1, r4, r3
    ep->is_in = 0U;
 800815c:	2500      	movs	r5, #0
 800815e:	f880 5151 	strb.w	r5, [r0, #337]	@ 0x151
  ep->is_stall = 0U;
 8008162:	2500      	movs	r5, #0
 8008164:	708d      	strb	r5, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008166:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8008168:	f894 3290 	ldrb.w	r3, [r4, #656]	@ 0x290
 800816c:	2b01      	cmp	r3, #1
 800816e:	d014      	beq.n	800819a <HAL_PCD_EP_ClrStall+0x6e>
 8008170:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8008172:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8008174:	f884 3290 	strb.w	r3, [r4, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8008178:	f004 f8de 	bl	800c338 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800817c:	f884 5290 	strb.w	r5, [r4, #656]	@ 0x290
  return HAL_OK;
 8008180:	4628      	mov	r0, r5
}
 8008182:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008184:	3310      	adds	r3, #16
 8008186:	18e1      	adds	r1, r4, r3
    ep->is_in = 1U;
 8008188:	2501      	movs	r5, #1
 800818a:	7445      	strb	r5, [r0, #17]
  ep->is_stall = 0U;
 800818c:	2500      	movs	r5, #0
 800818e:	708d      	strb	r5, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008190:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8008192:	f894 3290 	ldrb.w	r3, [r4, #656]	@ 0x290
 8008196:	2b01      	cmp	r3, #1
 8008198:	d1ea      	bne.n	8008170 <HAL_PCD_EP_ClrStall+0x44>
 800819a:	2002      	movs	r0, #2
}
 800819c:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800819e:	2001      	movs	r0, #1
}
 80081a0:	bd38      	pop	{r3, r4, r5, pc}
 80081a2:	bf00      	nop

080081a4 <HAL_PCDEx_PMAConfig>:
                                       uint16_t ep_kind, uint32_t pmaadress)
{
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80081a4:	f011 0f80 	tst.w	r1, #128	@ 0x80
 80081a8:	d00c      	beq.n	80081c4 <HAL_PCDEx_PMAConfig+0x20>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80081aa:	f001 0107 	and.w	r1, r1, #7
 80081ae:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80081b2:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 80081b6:	3010      	adds	r0, #16
  if (ep_kind == PCD_SNG_BUF)
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80081b8:	b299      	uxth	r1, r3
  if (ep_kind == PCD_SNG_BUF)
 80081ba:	b962      	cbnz	r2, 80081d6 <HAL_PCDEx_PMAConfig+0x32>
    ep->pmaadress = (uint16_t)pmaadress;
 80081bc:	80c1      	strh	r1, [r0, #6]
 80081be:	7302      	strb	r2, [r0, #12]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
}
 80081c0:	2000      	movs	r0, #0
 80081c2:	4770      	bx	lr
    ep = &hpcd->OUT_ep[ep_addr];
 80081c4:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80081c8:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 80081cc:	f500 70a8 	add.w	r0, r0, #336	@ 0x150
    ep->pmaadress = (uint16_t)pmaadress;
 80081d0:	b299      	uxth	r1, r3
  if (ep_kind == PCD_SNG_BUF)
 80081d2:	2a00      	cmp	r2, #0
 80081d4:	d0f2      	beq.n	80081bc <HAL_PCDEx_PMAConfig+0x18>
    ep->doublebuffer = 1U;
 80081d6:	2201      	movs	r2, #1
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80081d8:	6083      	str	r3, [r0, #8]
 80081da:	7302      	strb	r2, [r0, #12]
}
 80081dc:	2000      	movs	r0, #0
 80081de:	4770      	bx	lr

080081e0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80081e0:	4602      	mov	r2, r0

  USB_TypeDef *USBx = hpcd->Instance;
  hpcd->lpm_active = 1U;
  hpcd->LPM_State = LPM_L0;
 80081e2:	2000      	movs	r0, #0
  USB_TypeDef *USBx = hpcd->Instance;
 80081e4:	6811      	ldr	r1, [r2, #0]
{
 80081e6:	b410      	push	{r4}
  hpcd->LPM_State = LPM_L0;
 80081e8:	f882 02c8 	strb.w	r0, [r2, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80081ec:	f8b1 3054 	ldrh.w	r3, [r1, #84]	@ 0x54
  hpcd->lpm_active = 1U;
 80081f0:	2401      	movs	r4, #1
  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80081f2:	b29b      	uxth	r3, r3
 80081f4:	4323      	orrs	r3, r4
  hpcd->lpm_active = 1U;
 80081f6:	f8c2 42d0 	str.w	r4, [r2, #720]	@ 0x2d0
  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80081fa:	f8a1 3054 	strh.w	r3, [r1, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80081fe:	f8b1 3054 	ldrh.w	r3, [r1, #84]	@ 0x54

  return HAL_OK;
}
 8008202:	f85d 4b04 	ldr.w	r4, [sp], #4
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8008206:	b29b      	uxth	r3, r3
 8008208:	f043 0302 	orr.w	r3, r3, #2
 800820c:	f8a1 3054 	strh.w	r3, [r1, #84]	@ 0x54
}
 8008210:	4770      	bx	lr
 8008212:	bf00      	nop

08008214 <HAL_PWR_EnableBkUpAccess>:
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008214:	4a02      	ldr	r2, [pc, #8]	@ (8008220 <HAL_PWR_EnableBkUpAccess+0xc>)
 8008216:	6813      	ldr	r3, [r2, #0]
 8008218:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800821c:	6013      	str	r3, [r2, #0]
}
 800821e:	4770      	bx	lr
 8008220:	58000400 	.word	0x58000400

08008224 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
  return (PWR->CR1 & PWR_CR1_VOS);
 8008224:	4b02      	ldr	r3, [pc, #8]	@ (8008230 <HAL_PWREx_GetVoltageRange+0xc>)
 8008226:	6818      	ldr	r0, [r3, #0]
}
 8008228:	f400 60c0 	and.w	r0, r0, #1536	@ 0x600
 800822c:	4770      	bx	lr
 800822e:	bf00      	nop
 8008230:	58000400 	.word	0x58000400

08008234 <HAL_PWREx_EnableVddUSB>:
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8008234:	4a02      	ldr	r2, [pc, #8]	@ (8008240 <HAL_PWREx_EnableVddUSB+0xc>)
 8008236:	6853      	ldr	r3, [r2, #4]
 8008238:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800823c:	6053      	str	r3, [r2, #4]
}
 800823e:	4770      	bx	lr
 8008240:	58000400 	.word	0x58000400

08008244 <RCC_SetFlashLatencyFromMSIRange>:

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8008244:	28b0      	cmp	r0, #176	@ 0xb0
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8008246:	4b31      	ldr	r3, [pc, #196]	@ (800830c <RCC_SetFlashLatencyFromMSIRange+0xc8>)
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8008248:	4a31      	ldr	r2, [pc, #196]	@ (8008310 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800824a:	bf98      	it	ls
 800824c:	0900      	lsrls	r0, r0, #4
{
 800824e:	b570      	push	{r4, r5, r6, lr}
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8008250:	bf8c      	ite	hi
 8008252:	6adc      	ldrhi	r4, [r3, #44]	@ 0x2c
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8008254:	f853 4020 	ldrls.w	r4, [r3, r0, lsl #2]
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8008258:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
{
 800825c:	b084      	sub	sp, #16
 800825e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8008262:	f003 030f 	and.w	r3, r3, #15
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8008266:	ae04      	add	r6, sp, #16
  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8008268:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800826c:	fbb4 f4f3 	udiv	r4, r4, r3
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8008270:	f7ff ffd8 	bl	8008224 <HAL_PWREx_GetVoltageRange>
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8008274:	4b27      	ldr	r3, [pc, #156]	@ (8008314 <RCC_SetFlashLatencyFromMSIRange+0xd0>)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8008276:	4605      	mov	r5, r0
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8008278:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800827a:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800827e:	e906 000f 	stmdb	r6, {r0, r1, r2, r3}
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008282:	d029      	beq.n	80082d8 <RCC_SetFlashLatencyFromMSIRange+0x94>
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8008284:	4b24      	ldr	r3, [pc, #144]	@ (8008318 <RCC_SetFlashLatencyFromMSIRange+0xd4>)
 8008286:	429c      	cmp	r4, r3
 8008288:	d33a      	bcc.n	8008300 <RCC_SetFlashLatencyFromMSIRange+0xbc>
 800828a:	f503 03b7 	add.w	r3, r3, #5996544	@ 0x5b8000
 800828e:	f603 537f 	addw	r3, r3, #3455	@ 0xd7f
 8008292:	429c      	cmp	r4, r3
 8008294:	d936      	bls.n	8008304 <RCC_SetFlashLatencyFromMSIRange+0xc0>
 8008296:	f503 1374 	add.w	r3, r3, #3997696	@ 0x3d0000
 800829a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800829e:	429c      	cmp	r4, r3
 80082a0:	d932      	bls.n	8008308 <RCC_SetFlashLatencyFromMSIRange+0xc4>
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80082a2:	2600      	movs	r6, #0
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 80082a4:	4c1d      	ldr	r4, [pc, #116]	@ (800831c <RCC_SetFlashLatencyFromMSIRange+0xd8>)
 80082a6:	6823      	ldr	r3, [r4, #0]
 80082a8:	f023 0307 	bic.w	r3, r3, #7
 80082ac:	4333      	orrs	r3, r6
 80082ae:	6023      	str	r3, [r4, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80082b0:	f7fd fa5c 	bl	800576c <HAL_GetTick>
 80082b4:	4605      	mov	r5, r0

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80082b6:	e004      	b.n	80082c2 <RCC_SetFlashLatencyFromMSIRange+0x7e>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80082b8:	f7fd fa58 	bl	800576c <HAL_GetTick>
 80082bc:	1b40      	subs	r0, r0, r5
 80082be:	2802      	cmp	r0, #2
 80082c0:	d807      	bhi.n	80082d2 <RCC_SetFlashLatencyFromMSIRange+0x8e>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80082c2:	6823      	ldr	r3, [r4, #0]
 80082c4:	f003 0307 	and.w	r3, r3, #7
 80082c8:	429e      	cmp	r6, r3
 80082ca:	d1f5      	bne.n	80082b8 <RCC_SetFlashLatencyFromMSIRange+0x74>
    {
      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
 80082cc:	2000      	movs	r0, #0
}
 80082ce:	b004      	add	sp, #16
 80082d0:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_TIMEOUT;
 80082d2:	2003      	movs	r0, #3
}
 80082d4:	b004      	add	sp, #16
 80082d6:	bd70      	pop	{r4, r5, r6, pc}
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80082d8:	4b11      	ldr	r3, [pc, #68]	@ (8008320 <RCC_SetFlashLatencyFromMSIRange+0xdc>)
 80082da:	429c      	cmp	r4, r3
 80082dc:	d910      	bls.n	8008300 <RCC_SetFlashLatencyFromMSIRange+0xbc>
 80082de:	4b11      	ldr	r3, [pc, #68]	@ (8008324 <RCC_SetFlashLatencyFromMSIRange+0xe0>)
 80082e0:	429c      	cmp	r4, r3
 80082e2:	d90f      	bls.n	8008304 <RCC_SetFlashLatencyFromMSIRange+0xc0>
 80082e4:	4b10      	ldr	r3, [pc, #64]	@ (8008328 <RCC_SetFlashLatencyFromMSIRange+0xe4>)
 80082e6:	429c      	cmp	r4, r3
 80082e8:	d90e      	bls.n	8008308 <RCC_SetFlashLatencyFromMSIRange+0xc4>
 80082ea:	4b10      	ldr	r3, [pc, #64]	@ (800832c <RCC_SetFlashLatencyFromMSIRange+0xe8>)
 80082ec:	429c      	cmp	r4, r3
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80082ee:	bf38      	it	cc
 80082f0:	2303      	movcc	r3, #3
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80082f2:	d2d6      	bcs.n	80082a2 <RCC_SetFlashLatencyFromMSIRange+0x5e>
        latency = FLASH_LATENCY_RANGE[index];
 80082f4:	aa04      	add	r2, sp, #16
 80082f6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80082fa:	f853 6c10 	ldr.w	r6, [r3, #-16]
        break;
 80082fe:	e7d1      	b.n	80082a4 <RCC_SetFlashLatencyFromMSIRange+0x60>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8008300:	2300      	movs	r3, #0
 8008302:	e7f7      	b.n	80082f4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
 8008304:	2301      	movs	r3, #1
 8008306:	e7f5      	b.n	80082f4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
 8008308:	2302      	movs	r3, #2
 800830a:	e7f3      	b.n	80082f4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
 800830c:	08018024 	.word	0x08018024
 8008310:	08018084 	.word	0x08018084
 8008314:	08015c5c 	.word	0x08015c5c
 8008318:	006acfc0 	.word	0x006acfc0
 800831c:	58004000 	.word	0x58004000
 8008320:	0121eabf 	.word	0x0121eabf
 8008324:	0234933f 	.word	0x0234933f
 8008328:	03473bbf 	.word	0x03473bbf
 800832c:	03dfd240 	.word	0x03dfd240

08008330 <HAL_RCC_GetSysClockFreq.part.0>:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8008330:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
uint32_t HAL_RCC_GetSysClockFreq(void)
 8008334:	b410      	push	{r4}
 8008336:	68d3      	ldr	r3, [r2, #12]
 8008338:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 800833c:	2b02      	cmp	r3, #2
 800833e:	d01d      	beq.n	800837c <HAL_RCC_GetSysClockFreq.part.0+0x4c>
 8008340:	2b03      	cmp	r3, #3
 8008342:	d11d      	bne.n	8008380 <HAL_RCC_GetSysClockFreq.part.0+0x50>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8008344:	6812      	ldr	r2, [r2, #0]
        pllinputfreq = HSI_VALUE;
 8008346:	4b14      	ldr	r3, [pc, #80]	@ (8008398 <HAL_RCC_GetSysClockFreq.part.0+0x68>)
 8008348:	4c14      	ldr	r4, [pc, #80]	@ (800839c <HAL_RCC_GetSysClockFreq.part.0+0x6c>)
 800834a:	f412 1f80 	tst.w	r2, #1048576	@ 0x100000
 800834e:	bf18      	it	ne
 8008350:	461c      	movne	r4, r3
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8008352:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008356:	68cb      	ldr	r3, [r1, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8008358:	68ca      	ldr	r2, [r1, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800835a:	68c8      	ldr	r0, [r1, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800835c:	f3c3 2306 	ubfx	r3, r3, #8, #7
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8008360:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8008364:	0f40      	lsrs	r0, r0, #29
 8008366:	fb04 f303 	mul.w	r3, r4, r3
 800836a:	3201      	adds	r2, #1
 800836c:	3001      	adds	r0, #1
 800836e:	fbb3 f3f2 	udiv	r3, r3, r2
}
 8008372:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008376:	fbb3 f0f0 	udiv	r0, r3, r0
 800837a:	4770      	bx	lr
        pllinputfreq = HSI_VALUE;
 800837c:	4c06      	ldr	r4, [pc, #24]	@ (8008398 <HAL_RCC_GetSysClockFreq.part.0+0x68>)
 800837e:	e7e8      	b.n	8008352 <HAL_RCC_GetSysClockFreq.part.0+0x22>
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8008380:	6813      	ldr	r3, [r2, #0]
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8008382:	4a07      	ldr	r2, [pc, #28]	@ (80083a0 <HAL_RCC_GetSysClockFreq.part.0+0x70>)
 8008384:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (msiRange > LL_RCC_MSIRANGE_11)
 8008388:	2bb0      	cmp	r3, #176	@ 0xb0
 800838a:	bf28      	it	cs
 800838c:	23b0      	movcs	r3, #176	@ 0xb0
 800838e:	091b      	lsrs	r3, r3, #4
 8008390:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
        break;
 8008394:	e7dd      	b.n	8008352 <HAL_RCC_GetSysClockFreq.part.0+0x22>
 8008396:	bf00      	nop
 8008398:	00f42400 	.word	0x00f42400
 800839c:	01e84800 	.word	0x01e84800
 80083a0:	08018024 	.word	0x08018024

080083a4 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 80083a4:	2800      	cmp	r0, #0
 80083a6:	f000 834a 	beq.w	8008a3e <HAL_RCC_OscConfig+0x69a>
{
 80083aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80083ac:	6803      	ldr	r3, [r0, #0]
 80083ae:	069d      	lsls	r5, r3, #26
 80083b0:	4604      	mov	r4, r0
 80083b2:	d529      	bpl.n	8008408 <HAL_RCC_OscConfig+0x64>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80083b4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80083b8:	6893      	ldr	r3, [r2, #8]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80083ba:	68d2      	ldr	r2, [r2, #12]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80083bc:	f013 030c 	ands.w	r3, r3, #12
 80083c0:	f000 80f9 	beq.w	80085b6 <HAL_RCC_OscConfig+0x212>
 80083c4:	2b0c      	cmp	r3, #12
 80083c6:	f000 80f1 	beq.w	80085ac <HAL_RCC_OscConfig+0x208>
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80083ca:	69e3      	ldr	r3, [r4, #28]
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80083cc:	f04f 45b0 	mov.w	r5, #1476395008	@ 0x58000000
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	f000 8274 	beq.w	80088be <HAL_RCC_OscConfig+0x51a>
 80083d6:	682b      	ldr	r3, [r5, #0]
 80083d8:	f043 0301 	orr.w	r3, r3, #1
 80083dc:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80083de:	f7fd f9c5 	bl	800576c <HAL_GetTick>
 80083e2:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80083e4:	682b      	ldr	r3, [r5, #0]
 80083e6:	0798      	lsls	r0, r3, #30
 80083e8:	f140 827a 	bpl.w	80088e0 <HAL_RCC_OscConfig+0x53c>
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80083ec:	682b      	ldr	r3, [r5, #0]
 80083ee:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80083f0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80083f4:	4313      	orrs	r3, r2
 80083f6:	602b      	str	r3, [r5, #0]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80083f8:	686b      	ldr	r3, [r5, #4]
 80083fa:	6a22      	ldr	r2, [r4, #32]
 80083fc:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008400:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008404:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008406:	6823      	ldr	r3, [r4, #0]
 8008408:	07da      	lsls	r2, r3, #31
 800840a:	d527      	bpl.n	800845c <HAL_RCC_OscConfig+0xb8>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800840c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008410:	688a      	ldr	r2, [r1, #8]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8008412:	68c9      	ldr	r1, [r1, #12]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8008414:	f002 020c 	and.w	r2, r2, #12
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8008418:	2a08      	cmp	r2, #8
 800841a:	f000 81f0 	beq.w	80087fe <HAL_RCC_OscConfig+0x45a>
 800841e:	2a0c      	cmp	r2, #12
 8008420:	f000 81e8 	beq.w	80087f4 <HAL_RCC_OscConfig+0x450>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008424:	6863      	ldr	r3, [r4, #4]
 8008426:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800842a:	f000 8233 	beq.w	8008894 <HAL_RCC_OscConfig+0x4f0>
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800842e:	f04f 45b0 	mov.w	r5, #1476395008	@ 0x58000000
 8008432:	682a      	ldr	r2, [r5, #0]
 8008434:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8008438:	602a      	str	r2, [r5, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800843a:	2b00      	cmp	r3, #0
 800843c:	f040 8230 	bne.w	80088a0 <HAL_RCC_OscConfig+0x4fc>
        tickstart = HAL_GetTick();
 8008440:	f7fd f994 	bl	800576c <HAL_GetTick>
 8008444:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8008446:	682b      	ldr	r3, [r5, #0]
 8008448:	039f      	lsls	r7, r3, #14
 800844a:	d506      	bpl.n	800845a <HAL_RCC_OscConfig+0xb6>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800844c:	f7fd f98e 	bl	800576c <HAL_GetTick>
 8008450:	1b80      	subs	r0, r0, r6
 8008452:	2864      	cmp	r0, #100	@ 0x64
 8008454:	d9f7      	bls.n	8008446 <HAL_RCC_OscConfig+0xa2>
            return HAL_TIMEOUT;
 8008456:	2003      	movs	r0, #3
}
 8008458:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800845a:	6823      	ldr	r3, [r4, #0]
 800845c:	079d      	lsls	r5, r3, #30
 800845e:	d52c      	bpl.n	80084ba <HAL_RCC_OscConfig+0x116>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8008460:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008464:	688a      	ldr	r2, [r1, #8]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8008466:	68c9      	ldr	r1, [r1, #12]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8008468:	f002 020c 	and.w	r2, r2, #12
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800846c:	2a04      	cmp	r2, #4
 800846e:	f000 811f 	beq.w	80086b0 <HAL_RCC_OscConfig+0x30c>
 8008472:	2a0c      	cmp	r2, #12
 8008474:	f000 8117 	beq.w	80086a6 <HAL_RCC_OscConfig+0x302>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008478:	68e3      	ldr	r3, [r4, #12]
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800847a:	f04f 45b0 	mov.w	r5, #1476395008	@ 0x58000000
 800847e:	b183      	cbz	r3, 80084a2 <HAL_RCC_OscConfig+0xfe>
 8008480:	682b      	ldr	r3, [r5, #0]
 8008482:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008486:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8008488:	f7fd f970 	bl	800576c <HAL_GetTick>
 800848c:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800848e:	682b      	ldr	r3, [r5, #0]
 8008490:	0558      	lsls	r0, r3, #21
 8008492:	f100 8233 	bmi.w	80088fc <HAL_RCC_OscConfig+0x558>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008496:	f7fd f969 	bl	800576c <HAL_GetTick>
 800849a:	1b80      	subs	r0, r0, r6
 800849c:	2802      	cmp	r0, #2
 800849e:	d9f6      	bls.n	800848e <HAL_RCC_OscConfig+0xea>
 80084a0:	e7d9      	b.n	8008456 <HAL_RCC_OscConfig+0xb2>
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80084a2:	682b      	ldr	r3, [r5, #0]
 80084a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80084a8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80084aa:	f7fd f95f 	bl	800576c <HAL_GetTick>
 80084ae:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80084b0:	682b      	ldr	r3, [r5, #0]
 80084b2:	0559      	lsls	r1, r3, #21
 80084b4:	f100 822b 	bmi.w	800890e <HAL_RCC_OscConfig+0x56a>
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80084b8:	6823      	ldr	r3, [r4, #0]
 80084ba:	f013 0f18 	tst.w	r3, #24
 80084be:	d023      	beq.n	8008508 <HAL_RCC_OscConfig+0x164>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80084c0:	6962      	ldr	r2, [r4, #20]
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80084c2:	f04f 45b0 	mov.w	r5, #1476395008	@ 0x58000000
 80084c6:	2a00      	cmp	r2, #0
 80084c8:	f000 80ff 	beq.w	80086ca <HAL_RCC_OscConfig+0x326>
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80084cc:	f013 0f10 	tst.w	r3, #16
 80084d0:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 80084d4:	f000 8234 	beq.w	8008940 <HAL_RCC_OscConfig+0x59c>
 80084d8:	079a      	lsls	r2, r3, #30
 80084da:	f100 81a3 	bmi.w	8008824 <HAL_RCC_OscConfig+0x480>
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80084de:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 80084e2:	f043 0301 	orr.w	r3, r3, #1
 80084e6:	f8c5 3094 	str.w	r3, [r5, #148]	@ 0x94
          tickstart = HAL_GetTick();
 80084ea:	f7fd f93f 	bl	800576c <HAL_GetTick>
 80084ee:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80084f0:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 80084f4:	079b      	lsls	r3, r3, #30
 80084f6:	f100 8195 	bmi.w	8008824 <HAL_RCC_OscConfig+0x480>
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80084fa:	f7fd f937 	bl	800576c <HAL_GetTick>
 80084fe:	1b80      	subs	r0, r0, r6
 8008500:	2802      	cmp	r0, #2
 8008502:	d9f5      	bls.n	80084f0 <HAL_RCC_OscConfig+0x14c>
 8008504:	e7a7      	b.n	8008456 <HAL_RCC_OscConfig+0xb2>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008506:	6823      	ldr	r3, [r4, #0]
 8008508:	0758      	lsls	r0, r3, #29
 800850a:	d422      	bmi.n	8008552 <HAL_RCC_OscConfig+0x1ae>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800850c:	0658      	lsls	r0, r3, #25
 800850e:	d51b      	bpl.n	8008548 <HAL_RCC_OscConfig+0x1a4>
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8008510:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8008512:	f04f 45b0 	mov.w	r5, #1476395008	@ 0x58000000
 8008516:	2b00      	cmp	r3, #0
 8008518:	f000 80b1 	beq.w	800867e <HAL_RCC_OscConfig+0x2da>
 800851c:	f8d5 3098 	ldr.w	r3, [r5, #152]	@ 0x98
 8008520:	f043 0301 	orr.w	r3, r3, #1
 8008524:	f8c5 3098 	str.w	r3, [r5, #152]	@ 0x98
      tickstart = HAL_GetTick();
 8008528:	f7fd f920 	bl	800576c <HAL_GetTick>
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800852c:	f8d5 3098 	ldr.w	r3, [r5, #152]	@ 0x98
 8008530:	0799      	lsls	r1, r3, #30
 8008532:	4606      	mov	r6, r0
 8008534:	d408      	bmi.n	8008548 <HAL_RCC_OscConfig+0x1a4>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008536:	f7fd f919 	bl	800576c <HAL_GetTick>
 800853a:	1b80      	subs	r0, r0, r6
 800853c:	2802      	cmp	r0, #2
 800853e:	d88a      	bhi.n	8008456 <HAL_RCC_OscConfig+0xb2>
 8008540:	f8d5 3098 	ldr.w	r3, [r5, #152]	@ 0x98
 8008544:	0799      	lsls	r1, r3, #30
 8008546:	d5f6      	bpl.n	8008536 <HAL_RCC_OscConfig+0x192>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008548:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800854a:	2b00      	cmp	r3, #0
 800854c:	d177      	bne.n	800863e <HAL_RCC_OscConfig+0x29a>
  return HAL_OK;
 800854e:	2000      	movs	r0, #0
}
 8008550:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008552:	4dae      	ldr	r5, [pc, #696]	@ (800880c <HAL_RCC_OscConfig+0x468>)
 8008554:	682b      	ldr	r3, [r5, #0]
 8008556:	05d9      	lsls	r1, r3, #23
 8008558:	f140 80db 	bpl.w	8008712 <HAL_RCC_OscConfig+0x36e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800855c:	68a3      	ldr	r3, [r4, #8]
 800855e:	2b01      	cmp	r3, #1
 8008560:	f000 812f 	beq.w	80087c2 <HAL_RCC_OscConfig+0x41e>
 8008564:	2b05      	cmp	r3, #5
 8008566:	f000 821a 	beq.w	800899e <HAL_RCC_OscConfig+0x5fa>
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800856a:	f04f 45b0 	mov.w	r5, #1476395008	@ 0x58000000
 800856e:	f8d5 2090 	ldr.w	r2, [r5, #144]	@ 0x90
 8008572:	f022 0201 	bic.w	r2, r2, #1
 8008576:	f8c5 2090 	str.w	r2, [r5, #144]	@ 0x90
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800857a:	f8d5 2090 	ldr.w	r2, [r5, #144]	@ 0x90
 800857e:	f022 0204 	bic.w	r2, r2, #4
 8008582:	f8c5 2090 	str.w	r2, [r5, #144]	@ 0x90
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008586:	2b00      	cmp	r3, #0
 8008588:	f040 8123 	bne.w	80087d2 <HAL_RCC_OscConfig+0x42e>
      tickstart = HAL_GetTick();
 800858c:	f7fd f8ee 	bl	800576c <HAL_GetTick>
 8008590:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8008592:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 8008596:	079f      	lsls	r7, r3, #30
 8008598:	f140 8136 	bpl.w	8008808 <HAL_RCC_OscConfig+0x464>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800859c:	f7fd f8e6 	bl	800576c <HAL_GetTick>
 80085a0:	f241 3388 	movw	r3, #5000	@ 0x1388
 80085a4:	1b80      	subs	r0, r0, r6
 80085a6:	4298      	cmp	r0, r3
 80085a8:	d9f3      	bls.n	8008592 <HAL_RCC_OscConfig+0x1ee>
 80085aa:	e754      	b.n	8008456 <HAL_RCC_OscConfig+0xb2>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80085ac:	f002 0203 	and.w	r2, r2, #3
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80085b0:	2a01      	cmp	r2, #1
 80085b2:	f47f af0a 	bne.w	80083ca <HAL_RCC_OscConfig+0x26>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80085b6:	69e3      	ldr	r3, [r4, #28]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d03e      	beq.n	800863a <HAL_RCC_OscConfig+0x296>
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 80085bc:	f04f 45b0 	mov.w	r5, #1476395008	@ 0x58000000
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80085c0:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 80085c2:	682b      	ldr	r3, [r5, #0]
 80085c4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (msiRange > LL_RCC_MSIRANGE_11)
 80085c8:	2bb0      	cmp	r3, #176	@ 0xb0
 80085ca:	bf28      	it	cs
 80085cc:	23b0      	movcs	r3, #176	@ 0xb0
 80085ce:	4298      	cmp	r0, r3
 80085d0:	f240 81a4 	bls.w	800891c <HAL_RCC_OscConfig+0x578>
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80085d4:	f7ff fe36 	bl	8008244 <RCC_SetFlashLatencyFromMSIRange>
 80085d8:	bb78      	cbnz	r0, 800863a <HAL_RCC_OscConfig+0x296>
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80085da:	682b      	ldr	r3, [r5, #0]
 80085dc:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80085de:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80085e2:	4313      	orrs	r3, r2
 80085e4:	602b      	str	r3, [r5, #0]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80085e6:	686b      	ldr	r3, [r5, #4]
 80085e8:	6a22      	ldr	r2, [r4, #32]
 80085ea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80085ee:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80085f2:	606b      	str	r3, [r5, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80085f4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80085f8:	6893      	ldr	r3, [r2, #8]
  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 80085fa:	f013 030c 	ands.w	r3, r3, #12
 80085fe:	f000 81c3 	beq.w	8008988 <HAL_RCC_OscConfig+0x5e4>
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008602:	2b04      	cmp	r3, #4
 8008604:	f000 8219 	beq.w	8008a3a <HAL_RCC_OscConfig+0x696>
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008608:	2b08      	cmp	r3, #8
 800860a:	f000 820e 	beq.w	8008a2a <HAL_RCC_OscConfig+0x686>
 800860e:	f7ff fe8f 	bl	8008330 <HAL_RCC_GetSysClockFreq.part.0>
 8008612:	4603      	mov	r3, r0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8008614:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8008618:	487d      	ldr	r0, [pc, #500]	@ (8008810 <HAL_RCC_OscConfig+0x46c>)
 800861a:	6892      	ldr	r2, [r2, #8]
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800861c:	497d      	ldr	r1, [pc, #500]	@ (8008814 <HAL_RCC_OscConfig+0x470>)
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800861e:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8008622:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8008626:	4a7c      	ldr	r2, [pc, #496]	@ (8008818 <HAL_RCC_OscConfig+0x474>)
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8008628:	fbb3 f3f0 	udiv	r3, r3, r0
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800862c:	6810      	ldr	r0, [r2, #0]
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800862e:	600b      	str	r3, [r1, #0]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8008630:	f7fc fb76 	bl	8004d20 <HAL_InitTick>
 8008634:	2800      	cmp	r0, #0
 8008636:	f43f aee6 	beq.w	8008406 <HAL_RCC_OscConfig+0x62>
    return HAL_ERROR;
 800863a:	2001      	movs	r0, #1
}
 800863c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800863e:	f04f 45b0 	mov.w	r5, #1476395008	@ 0x58000000
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8008642:	2b02      	cmp	r3, #2
 8008644:	68aa      	ldr	r2, [r5, #8]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8008646:	68e9      	ldr	r1, [r5, #12]
 8008648:	f002 020c 	and.w	r2, r2, #12
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800864c:	d071      	beq.n	8008732 <HAL_RCC_OscConfig+0x38e>
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800864e:	2a0c      	cmp	r2, #12
 8008650:	d0f3      	beq.n	800863a <HAL_RCC_OscConfig+0x296>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8008652:	682b      	ldr	r3, [r5, #0]
 8008654:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008658:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800865a:	f7fd f887 	bl	800576c <HAL_GetTick>
 800865e:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008660:	e005      	b.n	800866e <HAL_RCC_OscConfig+0x2ca>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008662:	f7fd f883 	bl	800576c <HAL_GetTick>
 8008666:	1b00      	subs	r0, r0, r4
 8008668:	2802      	cmp	r0, #2
 800866a:	f63f aef4 	bhi.w	8008456 <HAL_RCC_OscConfig+0xb2>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800866e:	682b      	ldr	r3, [r5, #0]
 8008670:	019b      	lsls	r3, r3, #6
 8008672:	d4f6      	bmi.n	8008662 <HAL_RCC_OscConfig+0x2be>
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8008674:	68ea      	ldr	r2, [r5, #12]
 8008676:	4b69      	ldr	r3, [pc, #420]	@ (800881c <HAL_RCC_OscConfig+0x478>)
 8008678:	4013      	ands	r3, r2
 800867a:	60eb      	str	r3, [r5, #12]
 800867c:	e767      	b.n	800854e <HAL_RCC_OscConfig+0x1aa>
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800867e:	f8d5 3098 	ldr.w	r3, [r5, #152]	@ 0x98
 8008682:	f023 0301 	bic.w	r3, r3, #1
 8008686:	f8c5 3098 	str.w	r3, [r5, #152]	@ 0x98
      tickstart = HAL_GetTick();
 800868a:	f7fd f86f 	bl	800576c <HAL_GetTick>
 800868e:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8008690:	f8d5 3098 	ldr.w	r3, [r5, #152]	@ 0x98
 8008694:	079a      	lsls	r2, r3, #30
 8008696:	f57f af57 	bpl.w	8008548 <HAL_RCC_OscConfig+0x1a4>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800869a:	f7fd f867 	bl	800576c <HAL_GetTick>
 800869e:	1b80      	subs	r0, r0, r6
 80086a0:	2802      	cmp	r0, #2
 80086a2:	d9f5      	bls.n	8008690 <HAL_RCC_OscConfig+0x2ec>
 80086a4:	e6d7      	b.n	8008456 <HAL_RCC_OscConfig+0xb2>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80086a6:	f001 0103 	and.w	r1, r1, #3
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 80086aa:	2902      	cmp	r1, #2
 80086ac:	f47f aee4 	bne.w	8008478 <HAL_RCC_OscConfig+0xd4>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80086b0:	68e2      	ldr	r2, [r4, #12]
 80086b2:	2a00      	cmp	r2, #0
 80086b4:	d0c1      	beq.n	800863a <HAL_RCC_OscConfig+0x296>
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80086b6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80086ba:	6920      	ldr	r0, [r4, #16]
 80086bc:	684a      	ldr	r2, [r1, #4]
 80086be:	f022 42fe 	bic.w	r2, r2, #2130706432	@ 0x7f000000
 80086c2:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 80086c6:	604a      	str	r2, [r1, #4]
}
 80086c8:	e6f7      	b.n	80084ba <HAL_RCC_OscConfig+0x116>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80086ca:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 80086ce:	f023 0304 	bic.w	r3, r3, #4
 80086d2:	f8c5 3094 	str.w	r3, [r5, #148]	@ 0x94
      tickstart = HAL_GetTick();
 80086d6:	f7fd f849 	bl	800576c <HAL_GetTick>
 80086da:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 80086dc:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 80086e0:	071b      	lsls	r3, r3, #28
 80086e2:	f100 8104 	bmi.w	80088ee <HAL_RCC_OscConfig+0x54a>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80086e6:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 80086ea:	f023 0301 	bic.w	r3, r3, #1
 80086ee:	f8c5 3094 	str.w	r3, [r5, #148]	@ 0x94
      tickstart = HAL_GetTick();
 80086f2:	f7fd f83b 	bl	800576c <HAL_GetTick>
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80086f6:	f04f 46b0 	mov.w	r6, #1476395008	@ 0x58000000
 80086fa:	4605      	mov	r5, r0
 80086fc:	f8d6 3094 	ldr.w	r3, [r6, #148]	@ 0x94
 8008700:	079f      	lsls	r7, r3, #30
 8008702:	f57f af00 	bpl.w	8008506 <HAL_RCC_OscConfig+0x162>
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8008706:	f7fd f831 	bl	800576c <HAL_GetTick>
 800870a:	1b40      	subs	r0, r0, r5
 800870c:	2802      	cmp	r0, #2
 800870e:	d9f5      	bls.n	80086fc <HAL_RCC_OscConfig+0x358>
 8008710:	e6a1      	b.n	8008456 <HAL_RCC_OscConfig+0xb2>
      HAL_PWR_EnableBkUpAccess();
 8008712:	f7ff fd7f 	bl	8008214 <HAL_PWR_EnableBkUpAccess>
      tickstart = HAL_GetTick();
 8008716:	f7fd f829 	bl	800576c <HAL_GetTick>
 800871a:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800871c:	e005      	b.n	800872a <HAL_RCC_OscConfig+0x386>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800871e:	f7fd f825 	bl	800576c <HAL_GetTick>
 8008722:	1b80      	subs	r0, r0, r6
 8008724:	2802      	cmp	r0, #2
 8008726:	f63f ae96 	bhi.w	8008456 <HAL_RCC_OscConfig+0xb2>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800872a:	682b      	ldr	r3, [r5, #0]
 800872c:	05da      	lsls	r2, r3, #23
 800872e:	d5f6      	bpl.n	800871e <HAL_RCC_OscConfig+0x37a>
 8008730:	e714      	b.n	800855c <HAL_RCC_OscConfig+0x1b8>
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008732:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8008734:	f001 0303 	and.w	r3, r1, #3
 8008738:	4283      	cmp	r3, r0
 800873a:	f000 813f 	beq.w	80089bc <HAL_RCC_OscConfig+0x618>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800873e:	2a0c      	cmp	r2, #12
 8008740:	f43f af7b 	beq.w	800863a <HAL_RCC_OscConfig+0x296>
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8008744:	f04f 45b0 	mov.w	r5, #1476395008	@ 0x58000000
 8008748:	682b      	ldr	r3, [r5, #0]
 800874a:	015b      	lsls	r3, r3, #5
 800874c:	f53f af75 	bmi.w	800863a <HAL_RCC_OscConfig+0x296>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8008750:	682b      	ldr	r3, [r5, #0]
 8008752:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008756:	602b      	str	r3, [r5, #0]
            tickstart = HAL_GetTick();
 8008758:	f7fd f808 	bl	800576c <HAL_GetTick>
 800875c:	4606      	mov	r6, r0
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800875e:	e005      	b.n	800876c <HAL_RCC_OscConfig+0x3c8>
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008760:	f7fd f804 	bl	800576c <HAL_GetTick>
 8008764:	1b80      	subs	r0, r0, r6
 8008766:	2802      	cmp	r0, #2
 8008768:	f63f ae75 	bhi.w	8008456 <HAL_RCC_OscConfig+0xb2>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800876c:	682b      	ldr	r3, [r5, #0]
 800876e:	019f      	lsls	r7, r3, #6
 8008770:	d4f6      	bmi.n	8008760 <HAL_RCC_OscConfig+0x3bc>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008772:	e9d4 320c 	ldrd	r3, r2, [r4, #48]	@ 0x30
 8008776:	68e9      	ldr	r1, [r5, #12]
 8008778:	4313      	orrs	r3, r2
 800877a:	4a29      	ldr	r2, [pc, #164]	@ (8008820 <HAL_RCC_OscConfig+0x47c>)
 800877c:	400a      	ands	r2, r1
 800877e:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 8008780:	4313      	orrs	r3, r2
 8008782:	430b      	orrs	r3, r1
 8008784:	e9d4 0110 	ldrd	r0, r1, [r4, #64]	@ 0x40
 8008788:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800878a:	4303      	orrs	r3, r0
 800878c:	430b      	orrs	r3, r1
 800878e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008792:	60eb      	str	r3, [r5, #12]
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8008794:	682b      	ldr	r3, [r5, #0]
 8008796:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800879a:	602b      	str	r3, [r5, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800879c:	68eb      	ldr	r3, [r5, #12]
 800879e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80087a2:	60eb      	str	r3, [r5, #12]
            tickstart = HAL_GetTick();
 80087a4:	f7fc ffe2 	bl	800576c <HAL_GetTick>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80087a8:	f04f 46b0 	mov.w	r6, #1476395008	@ 0x58000000
            tickstart = HAL_GetTick();
 80087ac:	4604      	mov	r4, r0
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80087ae:	6833      	ldr	r3, [r6, #0]
 80087b0:	0198      	lsls	r0, r3, #6
 80087b2:	f53f aecc 	bmi.w	800854e <HAL_RCC_OscConfig+0x1aa>
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80087b6:	f7fc ffd9 	bl	800576c <HAL_GetTick>
 80087ba:	1b00      	subs	r0, r0, r4
 80087bc:	2802      	cmp	r0, #2
 80087be:	d9f6      	bls.n	80087ae <HAL_RCC_OscConfig+0x40a>
 80087c0:	e649      	b.n	8008456 <HAL_RCC_OscConfig+0xb2>
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80087c2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80087c6:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 80087ca:	f043 0301 	orr.w	r3, r3, #1
 80087ce:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      tickstart = HAL_GetTick();
 80087d2:	f7fc ffcb 	bl	800576c <HAL_GetTick>
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80087d6:	f04f 46b0 	mov.w	r6, #1476395008	@ 0x58000000
 80087da:	4605      	mov	r5, r0
 80087dc:	f8d6 3090 	ldr.w	r3, [r6, #144]	@ 0x90
 80087e0:	079b      	lsls	r3, r3, #30
 80087e2:	d411      	bmi.n	8008808 <HAL_RCC_OscConfig+0x464>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80087e4:	f7fc ffc2 	bl	800576c <HAL_GetTick>
 80087e8:	f241 3388 	movw	r3, #5000	@ 0x1388
 80087ec:	1b40      	subs	r0, r0, r5
 80087ee:	4298      	cmp	r0, r3
 80087f0:	d9f4      	bls.n	80087dc <HAL_RCC_OscConfig+0x438>
 80087f2:	e630      	b.n	8008456 <HAL_RCC_OscConfig+0xb2>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80087f4:	f001 0103 	and.w	r1, r1, #3
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80087f8:	2903      	cmp	r1, #3
 80087fa:	f47f ae13 	bne.w	8008424 <HAL_RCC_OscConfig+0x80>
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80087fe:	6862      	ldr	r2, [r4, #4]
 8008800:	2a00      	cmp	r2, #0
 8008802:	f47f ae2b 	bne.w	800845c <HAL_RCC_OscConfig+0xb8>
 8008806:	e718      	b.n	800863a <HAL_RCC_OscConfig+0x296>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008808:	6823      	ldr	r3, [r4, #0]
 800880a:	e67f      	b.n	800850c <HAL_RCC_OscConfig+0x168>
 800880c:	58000400 	.word	0x58000400
 8008810:	08018084 	.word	0x08018084
 8008814:	20000034 	.word	0x20000034
 8008818:	2000003c 	.word	0x2000003c
 800881c:	eefefffc 	.word	0xeefefffc
 8008820:	11c1808c 	.word	0x11c1808c
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8008824:	f04f 45b0 	mov.w	r5, #1476395008	@ 0x58000000
 8008828:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 800882c:	f043 0304 	orr.w	r3, r3, #4
 8008830:	f8c5 3094 	str.w	r3, [r5, #148]	@ 0x94
        tickstart = HAL_GetTick();
 8008834:	f7fc ff9a 	bl	800576c <HAL_GetTick>
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8008838:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 800883c:	071f      	lsls	r7, r3, #28
 800883e:	4606      	mov	r6, r0
 8008840:	d409      	bmi.n	8008856 <HAL_RCC_OscConfig+0x4b2>
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8008842:	f7fc ff93 	bl	800576c <HAL_GetTick>
 8008846:	1b80      	subs	r0, r0, r6
 8008848:	2803      	cmp	r0, #3
 800884a:	f63f ae04 	bhi.w	8008456 <HAL_RCC_OscConfig+0xb2>
 800884e:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 8008852:	071f      	lsls	r7, r3, #28
 8008854:	d5f5      	bpl.n	8008842 <HAL_RCC_OscConfig+0x49e>
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8008856:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 800885a:	69a2      	ldr	r2, [r4, #24]
 800885c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8008860:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008864:	f8c5 3094 	str.w	r3, [r5, #148]	@ 0x94
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8008868:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 800886c:	f023 0301 	bic.w	r3, r3, #1
 8008870:	f8c5 3094 	str.w	r3, [r5, #148]	@ 0x94
        tickstart = HAL_GetTick();
 8008874:	f7fc ff7a 	bl	800576c <HAL_GetTick>
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8008878:	f04f 46b0 	mov.w	r6, #1476395008	@ 0x58000000
 800887c:	4605      	mov	r5, r0
 800887e:	f8d6 3094 	ldr.w	r3, [r6, #148]	@ 0x94
 8008882:	0798      	lsls	r0, r3, #30
 8008884:	f57f ae3f 	bpl.w	8008506 <HAL_RCC_OscConfig+0x162>
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8008888:	f7fc ff70 	bl	800576c <HAL_GetTick>
 800888c:	1b40      	subs	r0, r0, r5
 800888e:	2802      	cmp	r0, #2
 8008890:	d9f5      	bls.n	800887e <HAL_RCC_OscConfig+0x4da>
 8008892:	e5e0      	b.n	8008456 <HAL_RCC_OscConfig+0xb2>
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8008894:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008898:	6813      	ldr	r3, [r2, #0]
 800889a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800889e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80088a0:	f7fc ff64 	bl	800576c <HAL_GetTick>
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80088a4:	f04f 46b0 	mov.w	r6, #1476395008	@ 0x58000000
 80088a8:	4605      	mov	r5, r0
 80088aa:	6833      	ldr	r3, [r6, #0]
 80088ac:	039b      	lsls	r3, r3, #14
 80088ae:	f53f add4 	bmi.w	800845a <HAL_RCC_OscConfig+0xb6>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80088b2:	f7fc ff5b 	bl	800576c <HAL_GetTick>
 80088b6:	1b40      	subs	r0, r0, r5
 80088b8:	2864      	cmp	r0, #100	@ 0x64
 80088ba:	d9f6      	bls.n	80088aa <HAL_RCC_OscConfig+0x506>
 80088bc:	e5cb      	b.n	8008456 <HAL_RCC_OscConfig+0xb2>
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80088be:	682b      	ldr	r3, [r5, #0]
 80088c0:	f023 0301 	bic.w	r3, r3, #1
 80088c4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80088c6:	f7fc ff51 	bl	800576c <HAL_GetTick>
 80088ca:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80088cc:	682b      	ldr	r3, [r5, #0]
 80088ce:	0799      	lsls	r1, r3, #30
 80088d0:	f57f ad99 	bpl.w	8008406 <HAL_RCC_OscConfig+0x62>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80088d4:	f7fc ff4a 	bl	800576c <HAL_GetTick>
 80088d8:	1b80      	subs	r0, r0, r6
 80088da:	2802      	cmp	r0, #2
 80088dc:	d9f6      	bls.n	80088cc <HAL_RCC_OscConfig+0x528>
 80088de:	e5ba      	b.n	8008456 <HAL_RCC_OscConfig+0xb2>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80088e0:	f7fc ff44 	bl	800576c <HAL_GetTick>
 80088e4:	1b80      	subs	r0, r0, r6
 80088e6:	2802      	cmp	r0, #2
 80088e8:	f67f ad7c 	bls.w	80083e4 <HAL_RCC_OscConfig+0x40>
 80088ec:	e5b3      	b.n	8008456 <HAL_RCC_OscConfig+0xb2>
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80088ee:	f7fc ff3d 	bl	800576c <HAL_GetTick>
 80088f2:	1b80      	subs	r0, r0, r6
 80088f4:	2803      	cmp	r0, #3
 80088f6:	f67f aef1 	bls.w	80086dc <HAL_RCC_OscConfig+0x338>
 80088fa:	e5ac      	b.n	8008456 <HAL_RCC_OscConfig+0xb2>
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80088fc:	686b      	ldr	r3, [r5, #4]
 80088fe:	6922      	ldr	r2, [r4, #16]
 8008900:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8008904:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8008908:	606b      	str	r3, [r5, #4]
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800890a:	6823      	ldr	r3, [r4, #0]
}
 800890c:	e5d5      	b.n	80084ba <HAL_RCC_OscConfig+0x116>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800890e:	f7fc ff2d 	bl	800576c <HAL_GetTick>
 8008912:	1b80      	subs	r0, r0, r6
 8008914:	2802      	cmp	r0, #2
 8008916:	f67f adcb 	bls.w	80084b0 <HAL_RCC_OscConfig+0x10c>
 800891a:	e59c      	b.n	8008456 <HAL_RCC_OscConfig+0xb2>
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800891c:	682b      	ldr	r3, [r5, #0]
 800891e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008922:	4303      	orrs	r3, r0
 8008924:	602b      	str	r3, [r5, #0]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8008926:	686b      	ldr	r3, [r5, #4]
 8008928:	6a22      	ldr	r2, [r4, #32]
 800892a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800892e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008932:	606b      	str	r3, [r5, #4]
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8008934:	f7ff fc86 	bl	8008244 <RCC_SetFlashLatencyFromMSIRange>
 8008938:	2800      	cmp	r0, #0
 800893a:	f43f ae5b 	beq.w	80085f4 <HAL_RCC_OscConfig+0x250>
 800893e:	e67c      	b.n	800863a <HAL_RCC_OscConfig+0x296>
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8008940:	f043 0301 	orr.w	r3, r3, #1
 8008944:	f8c5 3094 	str.w	r3, [r5, #148]	@ 0x94
        tickstart = HAL_GetTick();
 8008948:	f7fc ff10 	bl	800576c <HAL_GetTick>
 800894c:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800894e:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 8008952:	0799      	lsls	r1, r3, #30
 8008954:	d405      	bmi.n	8008962 <HAL_RCC_OscConfig+0x5be>
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8008956:	f7fc ff09 	bl	800576c <HAL_GetTick>
 800895a:	1b80      	subs	r0, r0, r6
 800895c:	2802      	cmp	r0, #2
 800895e:	d9f6      	bls.n	800894e <HAL_RCC_OscConfig+0x5aa>
 8008960:	e579      	b.n	8008456 <HAL_RCC_OscConfig+0xb2>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8008962:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 8008966:	f023 0304 	bic.w	r3, r3, #4
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800896a:	f04f 47b0 	mov.w	r7, #1476395008	@ 0x58000000
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800896e:	f8c5 3094 	str.w	r3, [r5, #148]	@ 0x94
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8008972:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008976:	071a      	lsls	r2, r3, #28
 8008978:	f57f adc5 	bpl.w	8008506 <HAL_RCC_OscConfig+0x162>
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800897c:	f7fc fef6 	bl	800576c <HAL_GetTick>
 8008980:	1b80      	subs	r0, r0, r6
 8008982:	2803      	cmp	r0, #3
 8008984:	d9f5      	bls.n	8008972 <HAL_RCC_OscConfig+0x5ce>
 8008986:	e566      	b.n	8008456 <HAL_RCC_OscConfig+0xb2>
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8008988:	6813      	ldr	r3, [r2, #0]
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800898a:	4a2e      	ldr	r2, [pc, #184]	@ (8008a44 <HAL_RCC_OscConfig+0x6a0>)
 800898c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (msiRange > LL_RCC_MSIRANGE_11)
 8008990:	2bb0      	cmp	r3, #176	@ 0xb0
 8008992:	bf28      	it	cs
 8008994:	23b0      	movcs	r3, #176	@ 0xb0
 8008996:	091b      	lsrs	r3, r3, #4
 8008998:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800899c:	e63a      	b.n	8008614 <HAL_RCC_OscConfig+0x270>
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800899e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80089a2:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 80089a6:	f042 0204 	orr.w	r2, r2, #4
 80089aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80089ae:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 80089b2:	f042 0201 	orr.w	r2, r2, #1
 80089b6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80089ba:	e70a      	b.n	80087d2 <HAL_RCC_OscConfig+0x42e>
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80089bc:	6b60      	ldr	r0, [r4, #52]	@ 0x34
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80089be:	f001 0370 	and.w	r3, r1, #112	@ 0x70
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80089c2:	4283      	cmp	r3, r0
 80089c4:	f47f aebb 	bne.w	800873e <HAL_RCC_OscConfig+0x39a>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80089c8:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80089ca:	f3c1 2306 	ubfx	r3, r1, #8, #7
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80089ce:	4283      	cmp	r3, r0
 80089d0:	f47f aeb5 	bne.w	800873e <HAL_RCC_OscConfig+0x39a>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80089d4:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80089d6:	f401 1378 	and.w	r3, r1, #4063232	@ 0x3e0000
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80089da:	4283      	cmp	r3, r0
 80089dc:	f47f aeaf 	bne.w	800873e <HAL_RCC_OscConfig+0x39a>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80089e0:	6c20      	ldr	r0, [r4, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80089e2:	f001 6360 	and.w	r3, r1, #234881024	@ 0xe000000
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80089e6:	4283      	cmp	r3, r0
 80089e8:	f47f aea9 	bne.w	800873e <HAL_RCC_OscConfig+0x39a>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80089ec:	6c63      	ldr	r3, [r4, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80089ee:	f001 4160 	and.w	r1, r1, #3758096384	@ 0xe0000000
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80089f2:	4299      	cmp	r1, r3
 80089f4:	f47f aea3 	bne.w	800873e <HAL_RCC_OscConfig+0x39a>
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80089f8:	682b      	ldr	r3, [r5, #0]
 80089fa:	0199      	lsls	r1, r3, #6
 80089fc:	f53f ada7 	bmi.w	800854e <HAL_RCC_OscConfig+0x1aa>
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8008a00:	682b      	ldr	r3, [r5, #0]
 8008a02:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008a06:	602b      	str	r3, [r5, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008a08:	68eb      	ldr	r3, [r5, #12]
 8008a0a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008a0e:	60eb      	str	r3, [r5, #12]
          tickstart = HAL_GetTick();
 8008a10:	f7fc feac 	bl	800576c <HAL_GetTick>
 8008a14:	4604      	mov	r4, r0
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008a16:	682b      	ldr	r3, [r5, #0]
 8008a18:	019a      	lsls	r2, r3, #6
 8008a1a:	f53f ad98 	bmi.w	800854e <HAL_RCC_OscConfig+0x1aa>
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008a1e:	f7fc fea5 	bl	800576c <HAL_GetTick>
 8008a22:	1b03      	subs	r3, r0, r4
 8008a24:	2b02      	cmp	r3, #2
 8008a26:	d9f6      	bls.n	8008a16 <HAL_RCC_OscConfig+0x672>
 8008a28:	e515      	b.n	8008456 <HAL_RCC_OscConfig+0xb2>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8008a2a:	6811      	ldr	r1, [r2, #0]
    sysclockfreq = HSI_VALUE;
 8008a2c:	4a06      	ldr	r2, [pc, #24]	@ (8008a48 <HAL_RCC_OscConfig+0x6a4>)
 8008a2e:	4b07      	ldr	r3, [pc, #28]	@ (8008a4c <HAL_RCC_OscConfig+0x6a8>)
 8008a30:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8008a34:	bf18      	it	ne
 8008a36:	4613      	movne	r3, r2
 8008a38:	e5ec      	b.n	8008614 <HAL_RCC_OscConfig+0x270>
 8008a3a:	4b03      	ldr	r3, [pc, #12]	@ (8008a48 <HAL_RCC_OscConfig+0x6a4>)
 8008a3c:	e5ea      	b.n	8008614 <HAL_RCC_OscConfig+0x270>
    return HAL_ERROR;
 8008a3e:	2001      	movs	r0, #1
}
 8008a40:	4770      	bx	lr
 8008a42:	bf00      	nop
 8008a44:	08018024 	.word	0x08018024
 8008a48:	00f42400 	.word	0x00f42400
 8008a4c:	01e84800 	.word	0x01e84800

08008a50 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8008a50:	2800      	cmp	r0, #0
 8008a52:	f000 8130 	beq.w	8008cb6 <HAL_RCC_ClockConfig+0x266>
{
 8008a56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008a5a:	4e9d      	ldr	r6, [pc, #628]	@ (8008cd0 <HAL_RCC_ClockConfig+0x280>)
 8008a5c:	6833      	ldr	r3, [r6, #0]
 8008a5e:	f003 0307 	and.w	r3, r3, #7
 8008a62:	428b      	cmp	r3, r1
 8008a64:	460c      	mov	r4, r1
 8008a66:	4605      	mov	r5, r0
 8008a68:	f0c0 80d9 	bcc.w	8008c1e <HAL_RCC_ClockConfig+0x1ce>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008a6c:	682b      	ldr	r3, [r5, #0]
 8008a6e:	079a      	lsls	r2, r3, #30
 8008a70:	d472      	bmi.n	8008b58 <HAL_RCC_ClockConfig+0x108>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8008a72:	0698      	lsls	r0, r3, #26
 8008a74:	f100 8082 	bmi.w	8008b7c <HAL_RCC_ClockConfig+0x12c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8008a78:	065a      	lsls	r2, r3, #25
 8008a7a:	f100 8094 	bmi.w	8008ba6 <HAL_RCC_ClockConfig+0x156>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008a7e:	0758      	lsls	r0, r3, #29
 8008a80:	f100 80a7 	bmi.w	8008bd2 <HAL_RCC_ClockConfig+0x182>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008a84:	071a      	lsls	r2, r3, #28
 8008a86:	f100 80b6 	bmi.w	8008bf6 <HAL_RCC_ClockConfig+0x1a6>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008a8a:	07df      	lsls	r7, r3, #31
 8008a8c:	d529      	bpl.n	8008ae2 <HAL_RCC_ClockConfig+0x92>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008a8e:	686b      	ldr	r3, [r5, #4]
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8008a90:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008a94:	2b02      	cmp	r3, #2
 8008a96:	6812      	ldr	r2, [r2, #0]
 8008a98:	f000 8106 	beq.w	8008ca8 <HAL_RCC_ClockConfig+0x258>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008a9c:	2b03      	cmp	r3, #3
 8008a9e:	f000 80fd 	beq.w	8008c9c <HAL_RCC_ClockConfig+0x24c>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	f040 8104 	bne.w	8008cb0 <HAL_RCC_ClockConfig+0x260>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8008aa8:	0791      	lsls	r1, r2, #30
 8008aaa:	f140 80fa 	bpl.w	8008ca2 <HAL_RCC_ClockConfig+0x252>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8008aae:	f04f 46b0 	mov.w	r6, #1476395008	@ 0x58000000
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008ab2:	f241 3888 	movw	r8, #5000	@ 0x1388
 8008ab6:	68b2      	ldr	r2, [r6, #8]
 8008ab8:	f022 0203 	bic.w	r2, r2, #3
 8008abc:	4313      	orrs	r3, r2
 8008abe:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8008ac0:	f7fc fe54 	bl	800576c <HAL_GetTick>
 8008ac4:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008ac6:	e005      	b.n	8008ad4 <HAL_RCC_ClockConfig+0x84>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008ac8:	f7fc fe50 	bl	800576c <HAL_GetTick>
 8008acc:	1bc0      	subs	r0, r0, r7
 8008ace:	4540      	cmp	r0, r8
 8008ad0:	f200 80b8 	bhi.w	8008c44 <HAL_RCC_ClockConfig+0x1f4>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8008ad4:	68b3      	ldr	r3, [r6, #8]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008ad6:	686a      	ldr	r2, [r5, #4]
 8008ad8:	f003 030c 	and.w	r3, r3, #12
 8008adc:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8008ae0:	d1f2      	bne.n	8008ac8 <HAL_RCC_ClockConfig+0x78>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008ae2:	4d7b      	ldr	r5, [pc, #492]	@ (8008cd0 <HAL_RCC_ClockConfig+0x280>)
 8008ae4:	682b      	ldr	r3, [r5, #0]
 8008ae6:	f003 0307 	and.w	r3, r3, #7
 8008aea:	42a3      	cmp	r3, r4
 8008aec:	d913      	bls.n	8008b16 <HAL_RCC_ClockConfig+0xc6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008aee:	682b      	ldr	r3, [r5, #0]
 8008af0:	f023 0307 	bic.w	r3, r3, #7
 8008af4:	4323      	orrs	r3, r4
 8008af6:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8008af8:	f7fc fe38 	bl	800576c <HAL_GetTick>
 8008afc:	4606      	mov	r6, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008afe:	e005      	b.n	8008b0c <HAL_RCC_ClockConfig+0xbc>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8008b00:	f7fc fe34 	bl	800576c <HAL_GetTick>
 8008b04:	1b80      	subs	r0, r0, r6
 8008b06:	2802      	cmp	r0, #2
 8008b08:	f200 809c 	bhi.w	8008c44 <HAL_RCC_ClockConfig+0x1f4>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008b0c:	682b      	ldr	r3, [r5, #0]
 8008b0e:	f003 0307 	and.w	r3, r3, #7
 8008b12:	42a3      	cmp	r3, r4
 8008b14:	d1f4      	bne.n	8008b00 <HAL_RCC_ClockConfig+0xb0>
 8008b16:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008b1a:	6893      	ldr	r3, [r2, #8]
  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8008b1c:	f013 030c 	ands.w	r3, r3, #12
 8008b20:	f000 80b1 	beq.w	8008c86 <HAL_RCC_ClockConfig+0x236>
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008b24:	2b04      	cmp	r3, #4
 8008b26:	f000 80d0 	beq.w	8008cca <HAL_RCC_ClockConfig+0x27a>
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008b2a:	2b08      	cmp	r3, #8
 8008b2c:	f000 80c5 	beq.w	8008cba <HAL_RCC_ClockConfig+0x26a>
 8008b30:	f7ff fbfe 	bl	8008330 <HAL_RCC_GetSysClockFreq.part.0>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8008b34:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8008b38:	4a66      	ldr	r2, [pc, #408]	@ (8008cd4 <HAL_RCC_ClockConfig+0x284>)
 8008b3a:	689b      	ldr	r3, [r3, #8]
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8008b3c:	4966      	ldr	r1, [pc, #408]	@ (8008cd8 <HAL_RCC_ClockConfig+0x288>)
 8008b3e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8008b42:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008b46:	fbb0 f0f3 	udiv	r0, r0, r3
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8008b4a:	6010      	str	r0, [r2, #0]
  return HAL_InitTick(HAL_GetTickPrio());
 8008b4c:	f7fc fe14 	bl	8005778 <HAL_GetTickPrio>
}
 8008b50:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return HAL_InitTick(HAL_GetTickPrio());
 8008b54:	f7fc b8e4 	b.w	8004d20 <HAL_InitTick>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8008b58:	f04f 46b0 	mov.w	r6, #1476395008	@ 0x58000000
 8008b5c:	68aa      	ldr	r2, [r5, #8]
 8008b5e:	68b3      	ldr	r3, [r6, #8]
 8008b60:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008b64:	4313      	orrs	r3, r2
 8008b66:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8008b68:	f7fc fe00 	bl	800576c <HAL_GetTick>
 8008b6c:	4607      	mov	r7, r0
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8008b6e:	68b3      	ldr	r3, [r6, #8]
 8008b70:	03db      	lsls	r3, r3, #15
 8008b72:	d56a      	bpl.n	8008c4a <HAL_RCC_ClockConfig+0x1fa>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8008b74:	682b      	ldr	r3, [r5, #0]
 8008b76:	0698      	lsls	r0, r3, #26
 8008b78:	f57f af7e 	bpl.w	8008a78 <HAL_RCC_ClockConfig+0x28>
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8008b7c:	f04f 46b0 	mov.w	r6, #1476395008	@ 0x58000000
 8008b80:	696a      	ldr	r2, [r5, #20]
 8008b82:	f8d6 3108 	ldr.w	r3, [r6, #264]	@ 0x108
 8008b86:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008b8a:	4313      	orrs	r3, r2
 8008b8c:	f8c6 3108 	str.w	r3, [r6, #264]	@ 0x108
    tickstart = HAL_GetTick();
 8008b90:	f7fc fdec 	bl	800576c <HAL_GetTick>
 8008b94:	4607      	mov	r7, r0
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8008b96:	f8d6 3108 	ldr.w	r3, [r6, #264]	@ 0x108
 8008b9a:	0399      	lsls	r1, r3, #14
 8008b9c:	d55b      	bpl.n	8008c56 <HAL_RCC_ClockConfig+0x206>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8008b9e:	682b      	ldr	r3, [r5, #0]
 8008ba0:	065a      	lsls	r2, r3, #25
 8008ba2:	f57f af6c 	bpl.w	8008a7e <HAL_RCC_ClockConfig+0x2e>
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8008ba6:	f04f 46b0 	mov.w	r6, #1476395008	@ 0x58000000
 8008baa:	69aa      	ldr	r2, [r5, #24]
 8008bac:	f8d6 3108 	ldr.w	r3, [r6, #264]	@ 0x108
 8008bb0:	f023 030f 	bic.w	r3, r3, #15
 8008bb4:	ea43 1312 	orr.w	r3, r3, r2, lsr #4
 8008bb8:	f8c6 3108 	str.w	r3, [r6, #264]	@ 0x108
    tickstart = HAL_GetTick();
 8008bbc:	f7fc fdd6 	bl	800576c <HAL_GetTick>
 8008bc0:	4607      	mov	r7, r0
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8008bc2:	f8d6 3108 	ldr.w	r3, [r6, #264]	@ 0x108
 8008bc6:	03db      	lsls	r3, r3, #15
 8008bc8:	d54b      	bpl.n	8008c62 <HAL_RCC_ClockConfig+0x212>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008bca:	682b      	ldr	r3, [r5, #0]
 8008bcc:	0758      	lsls	r0, r3, #29
 8008bce:	f57f af59 	bpl.w	8008a84 <HAL_RCC_ClockConfig+0x34>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8008bd2:	f04f 46b0 	mov.w	r6, #1476395008	@ 0x58000000
 8008bd6:	68ea      	ldr	r2, [r5, #12]
 8008bd8:	68b3      	ldr	r3, [r6, #8]
 8008bda:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8008bde:	4313      	orrs	r3, r2
 8008be0:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8008be2:	f7fc fdc3 	bl	800576c <HAL_GetTick>
 8008be6:	4607      	mov	r7, r0
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8008be8:	68b3      	ldr	r3, [r6, #8]
 8008bea:	0399      	lsls	r1, r3, #14
 8008bec:	d53f      	bpl.n	8008c6e <HAL_RCC_ClockConfig+0x21e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008bee:	682b      	ldr	r3, [r5, #0]
 8008bf0:	071a      	lsls	r2, r3, #28
 8008bf2:	f57f af4a 	bpl.w	8008a8a <HAL_RCC_ClockConfig+0x3a>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8008bf6:	f04f 46b0 	mov.w	r6, #1476395008	@ 0x58000000
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8008bfa:	692a      	ldr	r2, [r5, #16]
 8008bfc:	68b3      	ldr	r3, [r6, #8]
 8008bfe:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 8008c02:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8008c06:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8008c08:	f7fc fdb0 	bl	800576c <HAL_GetTick>
 8008c0c:	4607      	mov	r7, r0
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8008c0e:	68b3      	ldr	r3, [r6, #8]
 8008c10:	035b      	lsls	r3, r3, #13
 8008c12:	d532      	bpl.n	8008c7a <HAL_RCC_ClockConfig+0x22a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008c14:	682b      	ldr	r3, [r5, #0]
 8008c16:	07df      	lsls	r7, r3, #31
 8008c18:	f53f af39 	bmi.w	8008a8e <HAL_RCC_ClockConfig+0x3e>
 8008c1c:	e761      	b.n	8008ae2 <HAL_RCC_ClockConfig+0x92>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008c1e:	6833      	ldr	r3, [r6, #0]
 8008c20:	f023 0307 	bic.w	r3, r3, #7
 8008c24:	430b      	orrs	r3, r1
 8008c26:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8008c28:	f7fc fda0 	bl	800576c <HAL_GetTick>
 8008c2c:	4607      	mov	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008c2e:	6833      	ldr	r3, [r6, #0]
 8008c30:	f003 0307 	and.w	r3, r3, #7
 8008c34:	42a3      	cmp	r3, r4
 8008c36:	f43f af19 	beq.w	8008a6c <HAL_RCC_ClockConfig+0x1c>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8008c3a:	f7fc fd97 	bl	800576c <HAL_GetTick>
 8008c3e:	1bc3      	subs	r3, r0, r7
 8008c40:	2b02      	cmp	r3, #2
 8008c42:	d9f4      	bls.n	8008c2e <HAL_RCC_ClockConfig+0x1de>
        return HAL_TIMEOUT;
 8008c44:	2003      	movs	r0, #3
}
 8008c46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8008c4a:	f7fc fd8f 	bl	800576c <HAL_GetTick>
 8008c4e:	1bc0      	subs	r0, r0, r7
 8008c50:	2802      	cmp	r0, #2
 8008c52:	d98c      	bls.n	8008b6e <HAL_RCC_ClockConfig+0x11e>
 8008c54:	e7f6      	b.n	8008c44 <HAL_RCC_ClockConfig+0x1f4>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8008c56:	f7fc fd89 	bl	800576c <HAL_GetTick>
 8008c5a:	1bc0      	subs	r0, r0, r7
 8008c5c:	2802      	cmp	r0, #2
 8008c5e:	d99a      	bls.n	8008b96 <HAL_RCC_ClockConfig+0x146>
 8008c60:	e7f0      	b.n	8008c44 <HAL_RCC_ClockConfig+0x1f4>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8008c62:	f7fc fd83 	bl	800576c <HAL_GetTick>
 8008c66:	1bc0      	subs	r0, r0, r7
 8008c68:	2802      	cmp	r0, #2
 8008c6a:	d9aa      	bls.n	8008bc2 <HAL_RCC_ClockConfig+0x172>
 8008c6c:	e7ea      	b.n	8008c44 <HAL_RCC_ClockConfig+0x1f4>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8008c6e:	f7fc fd7d 	bl	800576c <HAL_GetTick>
 8008c72:	1bc0      	subs	r0, r0, r7
 8008c74:	2802      	cmp	r0, #2
 8008c76:	d9b7      	bls.n	8008be8 <HAL_RCC_ClockConfig+0x198>
 8008c78:	e7e4      	b.n	8008c44 <HAL_RCC_ClockConfig+0x1f4>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8008c7a:	f7fc fd77 	bl	800576c <HAL_GetTick>
 8008c7e:	1bc0      	subs	r0, r0, r7
 8008c80:	2802      	cmp	r0, #2
 8008c82:	d9c4      	bls.n	8008c0e <HAL_RCC_ClockConfig+0x1be>
 8008c84:	e7de      	b.n	8008c44 <HAL_RCC_ClockConfig+0x1f4>
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8008c86:	6813      	ldr	r3, [r2, #0]
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8008c88:	4a14      	ldr	r2, [pc, #80]	@ (8008cdc <HAL_RCC_ClockConfig+0x28c>)
 8008c8a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (msiRange > LL_RCC_MSIRANGE_11)
 8008c8e:	2bb0      	cmp	r3, #176	@ 0xb0
 8008c90:	bf28      	it	cs
 8008c92:	23b0      	movcs	r3, #176	@ 0xb0
 8008c94:	091b      	lsrs	r3, r3, #4
 8008c96:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8008c9a:	e74b      	b.n	8008b34 <HAL_RCC_ClockConfig+0xe4>
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8008c9c:	0190      	lsls	r0, r2, #6
 8008c9e:	f53f af06 	bmi.w	8008aae <HAL_RCC_ClockConfig+0x5e>
    return HAL_ERROR;
 8008ca2:	2001      	movs	r0, #1
}
 8008ca4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8008ca8:	0396      	lsls	r6, r2, #14
 8008caa:	f53f af00 	bmi.w	8008aae <HAL_RCC_ClockConfig+0x5e>
 8008cae:	e7f8      	b.n	8008ca2 <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8008cb0:	0552      	lsls	r2, r2, #21
 8008cb2:	d5f6      	bpl.n	8008ca2 <HAL_RCC_ClockConfig+0x252>
 8008cb4:	e6fb      	b.n	8008aae <HAL_RCC_ClockConfig+0x5e>
    return HAL_ERROR;
 8008cb6:	2001      	movs	r0, #1
}
 8008cb8:	4770      	bx	lr
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8008cba:	6812      	ldr	r2, [r2, #0]
    sysclockfreq = HSI_VALUE;
 8008cbc:	4b08      	ldr	r3, [pc, #32]	@ (8008ce0 <HAL_RCC_ClockConfig+0x290>)
 8008cbe:	4809      	ldr	r0, [pc, #36]	@ (8008ce4 <HAL_RCC_ClockConfig+0x294>)
 8008cc0:	f412 1f80 	tst.w	r2, #1048576	@ 0x100000
 8008cc4:	bf18      	it	ne
 8008cc6:	4618      	movne	r0, r3
 8008cc8:	e734      	b.n	8008b34 <HAL_RCC_ClockConfig+0xe4>
 8008cca:	4805      	ldr	r0, [pc, #20]	@ (8008ce0 <HAL_RCC_ClockConfig+0x290>)
 8008ccc:	e732      	b.n	8008b34 <HAL_RCC_ClockConfig+0xe4>
 8008cce:	bf00      	nop
 8008cd0:	58004000 	.word	0x58004000
 8008cd4:	20000034 	.word	0x20000034
 8008cd8:	08018084 	.word	0x08018084
 8008cdc:	08018024 	.word	0x08018024
 8008ce0:	00f42400 	.word	0x00f42400
 8008ce4:	01e84800 	.word	0x01e84800

08008ce8 <HAL_RCC_GetSysClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8008ce8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008cec:	6893      	ldr	r3, [r2, #8]
  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8008cee:	f013 030c 	ands.w	r3, r3, #12
 8008cf2:	d10a      	bne.n	8008d0a <HAL_RCC_GetSysClockFreq+0x22>
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8008cf4:	6813      	ldr	r3, [r2, #0]
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8008cf6:	4a0d      	ldr	r2, [pc, #52]	@ (8008d2c <HAL_RCC_GetSysClockFreq+0x44>)
 8008cf8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (msiRange > LL_RCC_MSIRANGE_11)
 8008cfc:	2bb0      	cmp	r3, #176	@ 0xb0
 8008cfe:	bf28      	it	cs
 8008d00:	23b0      	movcs	r3, #176	@ 0xb0
 8008d02:	091b      	lsrs	r3, r3, #4
 8008d04:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8008d08:	4770      	bx	lr
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008d0a:	2b04      	cmp	r3, #4
 8008d0c:	d00b      	beq.n	8008d26 <HAL_RCC_GetSysClockFreq+0x3e>
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008d0e:	2b08      	cmp	r3, #8
 8008d10:	d001      	beq.n	8008d16 <HAL_RCC_GetSysClockFreq+0x2e>
 8008d12:	f7ff bb0d 	b.w	8008330 <HAL_RCC_GetSysClockFreq.part.0>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8008d16:	6812      	ldr	r2, [r2, #0]
    sysclockfreq = HSI_VALUE;
 8008d18:	4b05      	ldr	r3, [pc, #20]	@ (8008d30 <HAL_RCC_GetSysClockFreq+0x48>)
 8008d1a:	4806      	ldr	r0, [pc, #24]	@ (8008d34 <HAL_RCC_GetSysClockFreq+0x4c>)
 8008d1c:	f412 1f80 	tst.w	r2, #1048576	@ 0x100000
 8008d20:	bf18      	it	ne
 8008d22:	4618      	movne	r0, r3
 8008d24:	4770      	bx	lr
 8008d26:	4802      	ldr	r0, [pc, #8]	@ (8008d30 <HAL_RCC_GetSysClockFreq+0x48>)
}
 8008d28:	4770      	bx	lr
 8008d2a:	bf00      	nop
 8008d2c:	08018024 	.word	0x08018024
 8008d30:	00f42400 	.word	0x00f42400
 8008d34:	01e84800 	.word	0x01e84800

08008d38 <HAL_RCC_GetPCLK1Freq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8008d38:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
{
 8008d3c:	b508      	push	{r3, lr}
 8008d3e:	6893      	ldr	r3, [r2, #8]
  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8008d40:	f013 030c 	ands.w	r3, r3, #12
 8008d44:	d11e      	bne.n	8008d84 <HAL_RCC_GetPCLK1Freq+0x4c>
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8008d46:	6813      	ldr	r3, [r2, #0]
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8008d48:	4a17      	ldr	r2, [pc, #92]	@ (8008da8 <HAL_RCC_GetPCLK1Freq+0x70>)
 8008d4a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (msiRange > LL_RCC_MSIRANGE_11)
 8008d4e:	2bb0      	cmp	r3, #176	@ 0xb0
 8008d50:	bf28      	it	cs
 8008d52:	23b0      	movcs	r3, #176	@ 0xb0
 8008d54:	091b      	lsrs	r3, r3, #4
 8008d56:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8008d5a:	4914      	ldr	r1, [pc, #80]	@ (8008dac <HAL_RCC_GetPCLK1Freq+0x74>)
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8008d5c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008d60:	6893      	ldr	r3, [r2, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8008d62:	6892      	ldr	r2, [r2, #8]
 8008d64:	f3c3 1303 	ubfx	r3, r3, #4, #4
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8008d68:	f3c2 2202 	ubfx	r2, r2, #8, #3
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8008d6c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8008d70:	490f      	ldr	r1, [pc, #60]	@ (8008db0 <HAL_RCC_GetPCLK1Freq+0x78>)
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8008d72:	fbb0 f3f3 	udiv	r3, r0, r3
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8008d76:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 8008d7a:	f000 001f 	and.w	r0, r0, #31
}
 8008d7e:	fa23 f000 	lsr.w	r0, r3, r0
 8008d82:	bd08      	pop	{r3, pc}
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008d84:	2b04      	cmp	r3, #4
 8008d86:	d004      	beq.n	8008d92 <HAL_RCC_GetPCLK1Freq+0x5a>
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008d88:	2b08      	cmp	r3, #8
 8008d8a:	d004      	beq.n	8008d96 <HAL_RCC_GetPCLK1Freq+0x5e>
 8008d8c:	f7ff fad0 	bl	8008330 <HAL_RCC_GetSysClockFreq.part.0>
 8008d90:	e7e3      	b.n	8008d5a <HAL_RCC_GetPCLK1Freq+0x22>
    sysclockfreq = HSI_VALUE;
 8008d92:	4808      	ldr	r0, [pc, #32]	@ (8008db4 <HAL_RCC_GetPCLK1Freq+0x7c>)
 8008d94:	e7e1      	b.n	8008d5a <HAL_RCC_GetPCLK1Freq+0x22>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8008d96:	6812      	ldr	r2, [r2, #0]
 8008d98:	4b06      	ldr	r3, [pc, #24]	@ (8008db4 <HAL_RCC_GetPCLK1Freq+0x7c>)
 8008d9a:	4807      	ldr	r0, [pc, #28]	@ (8008db8 <HAL_RCC_GetPCLK1Freq+0x80>)
 8008d9c:	f412 1f80 	tst.w	r2, #1048576	@ 0x100000
 8008da0:	bf18      	it	ne
 8008da2:	4618      	movne	r0, r3
 8008da4:	e7d9      	b.n	8008d5a <HAL_RCC_GetPCLK1Freq+0x22>
 8008da6:	bf00      	nop
 8008da8:	08018024 	.word	0x08018024
 8008dac:	08018084 	.word	0x08018084
 8008db0:	08018064 	.word	0x08018064
 8008db4:	00f42400 	.word	0x00f42400
 8008db8:	01e84800 	.word	0x01e84800

08008dbc <HAL_RCC_GetPCLK2Freq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8008dbc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
{
 8008dc0:	b508      	push	{r3, lr}
 8008dc2:	6893      	ldr	r3, [r2, #8]
  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8008dc4:	f013 030c 	ands.w	r3, r3, #12
 8008dc8:	d11e      	bne.n	8008e08 <HAL_RCC_GetPCLK2Freq+0x4c>
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8008dca:	6813      	ldr	r3, [r2, #0]
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8008dcc:	4a17      	ldr	r2, [pc, #92]	@ (8008e2c <HAL_RCC_GetPCLK2Freq+0x70>)
 8008dce:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (msiRange > LL_RCC_MSIRANGE_11)
 8008dd2:	2bb0      	cmp	r3, #176	@ 0xb0
 8008dd4:	bf28      	it	cs
 8008dd6:	23b0      	movcs	r3, #176	@ 0xb0
 8008dd8:	091b      	lsrs	r3, r3, #4
 8008dda:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8008dde:	4914      	ldr	r1, [pc, #80]	@ (8008e30 <HAL_RCC_GetPCLK2Freq+0x74>)
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8008de0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008de4:	6893      	ldr	r3, [r2, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8008de6:	6892      	ldr	r2, [r2, #8]
 8008de8:	f3c3 1303 	ubfx	r3, r3, #4, #4
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8008dec:	f3c2 22c2 	ubfx	r2, r2, #11, #3
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8008df0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8008df4:	490f      	ldr	r1, [pc, #60]	@ (8008e34 <HAL_RCC_GetPCLK2Freq+0x78>)
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8008df6:	fbb0 f3f3 	udiv	r3, r0, r3
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8008dfa:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 8008dfe:	f000 001f 	and.w	r0, r0, #31
}
 8008e02:	fa23 f000 	lsr.w	r0, r3, r0
 8008e06:	bd08      	pop	{r3, pc}
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008e08:	2b04      	cmp	r3, #4
 8008e0a:	d004      	beq.n	8008e16 <HAL_RCC_GetPCLK2Freq+0x5a>
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008e0c:	2b08      	cmp	r3, #8
 8008e0e:	d004      	beq.n	8008e1a <HAL_RCC_GetPCLK2Freq+0x5e>
 8008e10:	f7ff fa8e 	bl	8008330 <HAL_RCC_GetSysClockFreq.part.0>
 8008e14:	e7e3      	b.n	8008dde <HAL_RCC_GetPCLK2Freq+0x22>
    sysclockfreq = HSI_VALUE;
 8008e16:	4808      	ldr	r0, [pc, #32]	@ (8008e38 <HAL_RCC_GetPCLK2Freq+0x7c>)
 8008e18:	e7e1      	b.n	8008dde <HAL_RCC_GetPCLK2Freq+0x22>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8008e1a:	6812      	ldr	r2, [r2, #0]
 8008e1c:	4b06      	ldr	r3, [pc, #24]	@ (8008e38 <HAL_RCC_GetPCLK2Freq+0x7c>)
 8008e1e:	4807      	ldr	r0, [pc, #28]	@ (8008e3c <HAL_RCC_GetPCLK2Freq+0x80>)
 8008e20:	f412 1f80 	tst.w	r2, #1048576	@ 0x100000
 8008e24:	bf18      	it	ne
 8008e26:	4618      	movne	r0, r3
 8008e28:	e7d9      	b.n	8008dde <HAL_RCC_GetPCLK2Freq+0x22>
 8008e2a:	bf00      	nop
 8008e2c:	08018024 	.word	0x08018024
 8008e30:	08018084 	.word	0x08018084
 8008e34:	08018064 	.word	0x08018064
 8008e38:	00f42400 	.word	0x00f42400
 8008e3c:	01e84800 	.word	0x01e84800

08008e40 <HAL_RCC_GetClockConfig>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8008e40:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
  RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 |
 8008e44:	226f      	movs	r2, #111	@ 0x6f
 8008e46:	6002      	str	r2, [r0, #0]
 8008e48:	689a      	ldr	r2, [r3, #8]
 8008e4a:	f002 020c 	and.w	r2, r2, #12
  RCC_ClkInitStruct->SYSCLKSource = LL_RCC_GetSysClkSource();
 8008e4e:	6042      	str	r2, [r0, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8008e50:	689a      	ldr	r2, [r3, #8]
 8008e52:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
  RCC_ClkInitStruct->AHBCLKDivider = LL_RCC_GetAHBPrescaler();
 8008e56:	6082      	str	r2, [r0, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8008e58:	689a      	ldr	r2, [r3, #8]
 8008e5a:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
  RCC_ClkInitStruct->APB1CLKDivider = LL_RCC_GetAPB1Prescaler();
 8008e5e:	60c2      	str	r2, [r0, #12]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8008e60:	689a      	ldr	r2, [r3, #8]
 8008e62:	f402 5260 	and.w	r2, r2, #14336	@ 0x3800
  RCC_ClkInitStruct->APB2CLKDivider = LL_RCC_GetAPB2Prescaler();
 8008e66:	6102      	str	r2, [r0, #16]
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE));
 8008e68:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8008e6c:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
  RCC_ClkInitStruct->AHBCLK2Divider = LL_C2_RCC_GetAHBPrescaler();
 8008e70:	6142      	str	r2, [r0, #20]
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8008e72:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8008e76:	011b      	lsls	r3, r3, #4
{
 8008e78:	b410      	push	{r4}
 8008e7a:	b2db      	uxtb	r3, r3
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8008e7c:	4c04      	ldr	r4, [pc, #16]	@ (8008e90 <HAL_RCC_GetClockConfig+0x50>)
  RCC_ClkInitStruct->AHBCLK4Divider = LL_RCC_GetAHB4Prescaler();
 8008e7e:	6183      	str	r3, [r0, #24]
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8008e80:	6823      	ldr	r3, [r4, #0]
}
 8008e82:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8008e86:	f003 0307 	and.w	r3, r3, #7
 8008e8a:	600b      	str	r3, [r1, #0]
}
 8008e8c:	4770      	bx	lr
 8008e8e:	bf00      	nop
 8008e90:	58004000 	.word	0x58004000

08008e94 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8008e96:	6803      	ldr	r3, [r0, #0]
 8008e98:	f013 0540 	ands.w	r5, r3, #64	@ 0x40
{
 8008e9c:	4604      	mov	r4, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8008e9e:	d040      	beq.n	8008f22 <HAL_RCCEx_PeriphCLKConfig+0x8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8008ea0:	6b02      	ldr	r2, [r0, #48]	@ 0x30
 8008ea2:	f5b2 0f80 	cmp.w	r2, #4194304	@ 0x400000
 8008ea6:	f000 81aa 	beq.w	80091fe <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8008eaa:	f200 813b 	bhi.w	8009124 <HAL_RCCEx_PeriphCLKConfig+0x290>
 8008eae:	2a00      	cmp	r2, #0
 8008eb0:	f040 813e 	bne.w	8009130 <HAL_RCCEx_PeriphCLKConfig+0x29c>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8008eb4:	f04f 45b0 	mov.w	r5, #1476395008	@ 0x58000000
 8008eb8:	682b      	ldr	r3, [r5, #0]
 8008eba:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008ebe:	602b      	str	r3, [r5, #0]

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008ec0:	f7fc fc54 	bl	800576c <HAL_GetTick>
 8008ec4:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8008ec6:	682b      	ldr	r3, [r5, #0]
 8008ec8:	011f      	lsls	r7, r3, #4
 8008eca:	f100 81a7 	bmi.w	800921c <HAL_RCCEx_PeriphCLKConfig+0x388>
  }

  if (status == HAL_OK)
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8008ece:	692b      	ldr	r3, [r5, #16]
 8008ed0:	6862      	ldr	r2, [r4, #4]
 8008ed2:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8008ed6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008eda:	612b      	str	r3, [r5, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8008edc:	692b      	ldr	r3, [r5, #16]
 8008ede:	68a2      	ldr	r2, [r4, #8]
 8008ee0:	f423 1378 	bic.w	r3, r3, #4063232	@ 0x3e0000
 8008ee4:	4313      	orrs	r3, r2
 8008ee6:	612b      	str	r3, [r5, #16]
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8008ee8:	682b      	ldr	r3, [r5, #0]
 8008eea:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008eee:	602b      	str	r3, [r5, #0]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008ef0:	f7fc fc3c 	bl	800576c <HAL_GetTick>
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8008ef4:	f04f 46b0 	mov.w	r6, #1476395008	@ 0x58000000
 8008ef8:	4605      	mov	r5, r0
 8008efa:	6833      	ldr	r3, [r6, #0]
 8008efc:	0118      	lsls	r0, r3, #4
 8008efe:	f140 81b8 	bpl.w	8009272 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    }

    if (status == HAL_OK)
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8008f02:	6932      	ldr	r2, [r6, #16]
 8008f04:	6961      	ldr	r1, [r4, #20]
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008f06:	6823      	ldr	r3, [r4, #0]
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8008f08:	430a      	orrs	r2, r1
 8008f0a:	6132      	str	r2, [r6, #16]
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008f0c:	6b22      	ldr	r2, [r4, #48]	@ 0x30
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8008f0e:	f04f 40b0 	mov.w	r0, #1476395008	@ 0x58000000
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8008f12:	2500      	movs	r5, #0
 8008f14:	f8d0 1088 	ldr.w	r1, [r0, #136]	@ 0x88
 8008f18:	f421 0140 	bic.w	r1, r1, #12582912	@ 0xc00000
 8008f1c:	430a      	orrs	r2, r1
 8008f1e:	f8c0 2088 	str.w	r2, [r0, #136]	@ 0x88
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008f22:	0519      	lsls	r1, r3, #20
 8008f24:	d509      	bpl.n	8008f3a <HAL_RCCEx_PeriphCLKConfig+0xa6>
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8008f26:	f04f 47b0 	mov.w	r7, #1476395008	@ 0x58000000
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8008f2a:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8008f2c:	f8d7 6090 	ldr.w	r6, [r7, #144]	@ 0x90
 8008f30:	f406 7640 	and.w	r6, r6, #768	@ 0x300
 8008f34:	42b2      	cmp	r2, r6
 8008f36:	f040 80c5 	bne.w	80090c4 <HAL_RCCEx_PeriphCLKConfig+0x230>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008f3a:	07d8      	lsls	r0, r3, #31
 8008f3c:	d509      	bpl.n	8008f52 <HAL_RCCEx_PeriphCLKConfig+0xbe>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8008f3e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008f42:	69a0      	ldr	r0, [r4, #24]
 8008f44:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8008f48:	f022 0203 	bic.w	r2, r2, #3
 8008f4c:	4302      	orrs	r2, r0
 8008f4e:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008f52:	0799      	lsls	r1, r3, #30
 8008f54:	d509      	bpl.n	8008f6a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8008f56:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008f5a:	69e0      	ldr	r0, [r4, #28]
 8008f5c:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8008f60:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8008f64:	4302      	orrs	r2, r0
 8008f66:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8008f6a:	06da      	lsls	r2, r3, #27
 8008f6c:	d50c      	bpl.n	8008f88 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008f6e:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8008f70:	f04f 40b0 	mov.w	r0, #1476395008	@ 0x58000000
 8008f74:	0c31      	lsrs	r1, r6, #16
 8008f76:	f8d0 2088 	ldr.w	r2, [r0, #136]	@ 0x88
 8008f7a:	0409      	lsls	r1, r1, #16
 8008f7c:	ea22 0201 	bic.w	r2, r2, r1
 8008f80:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 8008f84:	f8c0 2088 	str.w	r2, [r0, #136]	@ 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8008f88:	069f      	lsls	r7, r3, #26
 8008f8a:	d50c      	bpl.n	8008fa6 <HAL_RCCEx_PeriphCLKConfig+0x112>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008f8c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008f8e:	f04f 40b0 	mov.w	r0, #1476395008	@ 0x58000000
 8008f92:	0c31      	lsrs	r1, r6, #16
 8008f94:	f8d0 2088 	ldr.w	r2, [r0, #136]	@ 0x88
 8008f98:	0409      	lsls	r1, r1, #16
 8008f9a:	ea22 0201 	bic.w	r2, r2, r1
 8008f9e:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 8008fa2:	f8c0 2088 	str.w	r2, [r0, #136]	@ 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008fa6:	075e      	lsls	r6, r3, #29
 8008fa8:	d50f      	bpl.n	8008fca <HAL_RCCEx_PeriphCLKConfig+0x136>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008faa:	6a22      	ldr	r2, [r4, #32]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8008fac:	f04f 46b0 	mov.w	r6, #1476395008	@ 0x58000000
 8008fb0:	0910      	lsrs	r0, r2, #4
 8008fb2:	f8d6 1088 	ldr.w	r1, [r6, #136]	@ 0x88
 8008fb6:	f400 207f 	and.w	r0, r0, #1044480	@ 0xff000
 8008fba:	0112      	lsls	r2, r2, #4
 8008fbc:	f402 227f 	and.w	r2, r2, #1044480	@ 0xff000
 8008fc0:	ea21 0100 	bic.w	r1, r1, r0
 8008fc4:	430a      	orrs	r2, r1
 8008fc6:	f8c6 2088 	str.w	r2, [r6, #136]	@ 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008fca:	0718      	lsls	r0, r3, #28
 8008fcc:	d50f      	bpl.n	8008fee <HAL_RCCEx_PeriphCLKConfig+0x15a>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008fce:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8008fd0:	f04f 46b0 	mov.w	r6, #1476395008	@ 0x58000000
 8008fd4:	0910      	lsrs	r0, r2, #4
 8008fd6:	f8d6 1088 	ldr.w	r1, [r6, #136]	@ 0x88
 8008fda:	f400 207f 	and.w	r0, r0, #1044480	@ 0xff000
 8008fde:	0112      	lsls	r2, r2, #4
 8008fe0:	f402 227f 	and.w	r2, r2, #1044480	@ 0xff000
 8008fe4:	ea21 0100 	bic.w	r1, r1, r0
 8008fe8:	430a      	orrs	r2, r1
 8008fea:	f8c6 2088 	str.w	r2, [r6, #136]	@ 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008fee:	05d9      	lsls	r1, r3, #23
 8008ff0:	d511      	bpl.n	8009016 <HAL_RCCEx_PeriphCLKConfig+0x182>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8008ff2:	f04f 46b0 	mov.w	r6, #1476395008	@ 0x58000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008ff6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008ff8:	f8d6 2088 	ldr.w	r2, [r6, #136]	@ 0x88
 8008ffc:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 8009000:	430a      	orrs	r2, r1
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8009002:	f1b1 6f00 	cmp.w	r1, #134217728	@ 0x8000000
 8009006:	f8c6 2088 	str.w	r2, [r6, #136]	@ 0x88
 800900a:	f000 80a1 	beq.w	8009150 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800900e:	f1b1 6f80 	cmp.w	r1, #67108864	@ 0x4000000
 8009012:	f000 80a2 	beq.w	800915a <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8009016:	059f      	lsls	r7, r3, #22
 8009018:	d523      	bpl.n	8009062 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800901a:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800901c:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8009020:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009024:	f000 8086 	beq.w	8009134 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
 8009028:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 800902c:	f000 8108 	beq.w	8009240 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8009030:	2a00      	cmp	r2, #0
 8009032:	f000 80fc 	beq.w	800922e <HAL_RCCEx_PeriphCLKConfig+0x39a>
 8009036:	f8d1 6088 	ldr.w	r6, [r1, #136]	@ 0x88
 800903a:	f026 4640 	bic.w	r6, r6, #3221225472	@ 0xc0000000
 800903e:	f8c1 6088 	str.w	r6, [r1, #136]	@ 0x88
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8009042:	f8d1 6088 	ldr.w	r6, [r1, #136]	@ 0x88
 8009046:	f022 5080 	bic.w	r0, r2, #268435456	@ 0x10000000
 800904a:	f026 6640 	bic.w	r6, r6, #201326592	@ 0xc000000
 800904e:	4330      	orrs	r0, r6
    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8009050:	f1b2 5fc0 	cmp.w	r2, #402653184	@ 0x18000000
 8009054:	f8c1 0088 	str.w	r0, [r1, #136]	@ 0x88
 8009058:	d103      	bne.n	8009062 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800905a:	68ca      	ldr	r2, [r1, #12]
 800905c:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8009060:	60ca      	str	r2, [r1, #12]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009062:	055e      	lsls	r6, r3, #21
 8009064:	d510      	bpl.n	8009088 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8009066:	f04f 46b0 	mov.w	r6, #1476395008	@ 0x58000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800906a:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 800906c:	f8d6 2088 	ldr.w	r2, [r6, #136]	@ 0x88
 8009070:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8009074:	430a      	orrs	r2, r1
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8009076:	f1b1 5f00 	cmp.w	r1, #536870912	@ 0x20000000
 800907a:	f8c6 2088 	str.w	r2, [r6, #136]	@ 0x88
 800907e:	d062      	beq.n	8009146 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8009080:	f1b1 5f80 	cmp.w	r1, #268435456	@ 0x10000000
 8009084:	f000 8092 	beq.w	80091ac <HAL_RCCEx_PeriphCLKConfig+0x318>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8009088:	04da      	lsls	r2, r3, #19
 800908a:	d509      	bpl.n	80090a0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 800908c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009090:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8009092:	f8d1 2094 	ldr.w	r2, [r1, #148]	@ 0x94
 8009096:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800909a:	4302      	orrs	r2, r0
 800909c:	f8c1 2094 	str.w	r2, [r1, #148]	@ 0x94
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 80090a0:	049b      	lsls	r3, r3, #18
 80090a2:	d50d      	bpl.n	80090c0 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 80090a4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80090a8:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 80090aa:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 80090ac:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80090b0:	430b      	orrs	r3, r1
 80090b2:	6253      	str	r3, [r2, #36]	@ 0x24
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 80090b4:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 80090b6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80090b8:	f023 0303 	bic.w	r3, r3, #3
 80090bc:	430b      	orrs	r3, r1
 80090be:	6253      	str	r3, [r2, #36]	@ 0x24
}
 80090c0:	4628      	mov	r0, r5
 80090c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      HAL_PWR_EnableBkUpAccess();
 80090c4:	f7ff f8a6 	bl	8008214 <HAL_PWR_EnableBkUpAccess>
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80090c8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 80090cc:	2e00      	cmp	r6, #0
 80090ce:	f000 809d 	beq.w	800920c <HAL_RCCEx_PeriphCLKConfig+0x378>
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80090d2:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 80090d6:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80090da:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80090de:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 80090e2:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80090e6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 80090ea:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80090ec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80090f0:	4313      	orrs	r3, r2
        LL_RCC_WriteReg(BDCR, bdcr);
 80090f2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 80090f6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80090fa:	07da      	lsls	r2, r3, #31
 80090fc:	f140 809e 	bpl.w	800923c <HAL_RCCEx_PeriphCLKConfig+0x3a8>
          tickstart = HAL_GetTick();
 8009100:	f7fc fb34 	bl	800576c <HAL_GetTick>
 8009104:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8009106:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800910a:	079b      	lsls	r3, r3, #30
 800910c:	f100 8096 	bmi.w	800923c <HAL_RCCEx_PeriphCLKConfig+0x3a8>
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009110:	f7fc fb2c 	bl	800576c <HAL_GetTick>
 8009114:	f241 3388 	movw	r3, #5000	@ 0x1388
 8009118:	1b80      	subs	r0, r0, r6
 800911a:	4298      	cmp	r0, r3
 800911c:	d9f3      	bls.n	8009106 <HAL_RCCEx_PeriphCLKConfig+0x272>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800911e:	6823      	ldr	r3, [r4, #0]
              ret = HAL_TIMEOUT;
 8009120:	2503      	movs	r5, #3
 8009122:	e70a      	b.n	8008f3a <HAL_RCCEx_PeriphCLKConfig+0xa6>
    switch (PeriphClkInit->Sai1ClockSelection)
 8009124:	f422 0180 	bic.w	r1, r2, #4194304	@ 0x400000
 8009128:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 800912c:	f43f aeef 	beq.w	8008f0e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8009130:	2501      	movs	r5, #1
 8009132:	e6f6      	b.n	8008f22 <HAL_RCCEx_PeriphCLKConfig+0x8e>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8009134:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8009138:	f022 4240 	bic.w	r2, r2, #3221225472	@ 0xc0000000
 800913c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8009140:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8009144:	e78d      	b.n	8009062 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8009146:	68f2      	ldr	r2, [r6, #12]
 8009148:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800914c:	60f2      	str	r2, [r6, #12]
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800914e:	e79b      	b.n	8009088 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8009150:	68f2      	ldr	r2, [r6, #12]
 8009152:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8009156:	60f2      	str	r2, [r6, #12]
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8009158:	e75d      	b.n	8009016 <HAL_RCCEx_PeriphCLKConfig+0x182>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800915a:	6833      	ldr	r3, [r6, #0]
 800915c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009160:	6033      	str	r3, [r6, #0]

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009162:	f7fc fb03 	bl	800576c <HAL_GetTick>
 8009166:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8009168:	6833      	ldr	r3, [r6, #0]
 800916a:	011a      	lsls	r2, r3, #4
 800916c:	d471      	bmi.n	8009252 <HAL_RCCEx_PeriphCLKConfig+0x3be>
  }

  if (status == HAL_OK)
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800916e:	6933      	ldr	r3, [r6, #16]
 8009170:	6862      	ldr	r2, [r4, #4]
 8009172:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8009176:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800917a:	6133      	str	r3, [r6, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800917c:	6933      	ldr	r3, [r6, #16]
 800917e:	68e2      	ldr	r2, [r4, #12]
 8009180:	f023 6360 	bic.w	r3, r3, #234881024	@ 0xe000000
 8009184:	4313      	orrs	r3, r2
 8009186:	6133      	str	r3, [r6, #16]
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8009188:	6833      	ldr	r3, [r6, #0]
 800918a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800918e:	6033      	str	r3, [r6, #0]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009190:	f7fc faec 	bl	800576c <HAL_GetTick>
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8009194:	f04f 47b0 	mov.w	r7, #1476395008	@ 0x58000000
 8009198:	4606      	mov	r6, r0
 800919a:	683b      	ldr	r3, [r7, #0]
 800919c:	011b      	lsls	r3, r3, #4
 800919e:	d575      	bpl.n	800928c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    }

    if (status == HAL_OK)
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80091a0:	693a      	ldr	r2, [r7, #16]
 80091a2:	6961      	ldr	r1, [r4, #20]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80091a4:	6823      	ldr	r3, [r4, #0]
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80091a6:	430a      	orrs	r2, r1
 80091a8:	613a      	str	r2, [r7, #16]
      if (ret != HAL_OK)
 80091aa:	e734      	b.n	8009016 <HAL_RCCEx_PeriphCLKConfig+0x182>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80091ac:	6833      	ldr	r3, [r6, #0]
 80091ae:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80091b2:	6033      	str	r3, [r6, #0]

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80091b4:	f7fc fada 	bl	800576c <HAL_GetTick>
 80091b8:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 80091ba:	6833      	ldr	r3, [r6, #0]
 80091bc:	0118      	lsls	r0, r3, #4
 80091be:	d450      	bmi.n	8009262 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  }

  if (status == HAL_OK)
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80091c0:	6933      	ldr	r3, [r6, #16]
 80091c2:	6862      	ldr	r2, [r4, #4]
 80091c4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80091c8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80091cc:	6133      	str	r3, [r6, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 80091ce:	6933      	ldr	r3, [r6, #16]
 80091d0:	6922      	ldr	r2, [r4, #16]
 80091d2:	f023 4360 	bic.w	r3, r3, #3758096384	@ 0xe0000000
 80091d6:	4313      	orrs	r3, r2
 80091d8:	6133      	str	r3, [r6, #16]
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80091da:	6833      	ldr	r3, [r6, #0]
 80091dc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80091e0:	6033      	str	r3, [r6, #0]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80091e2:	f7fc fac3 	bl	800576c <HAL_GetTick>
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 80091e6:	f04f 47b0 	mov.w	r7, #1476395008	@ 0x58000000
 80091ea:	4606      	mov	r6, r0
 80091ec:	683b      	ldr	r3, [r7, #0]
 80091ee:	0119      	lsls	r1, r3, #4
 80091f0:	d546      	bpl.n	8009280 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
    }

    if (status == HAL_OK)
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80091f2:	693a      	ldr	r2, [r7, #16]
 80091f4:	6961      	ldr	r1, [r4, #20]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 80091f6:	6823      	ldr	r3, [r4, #0]
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80091f8:	430a      	orrs	r2, r1
 80091fa:	613a      	str	r2, [r7, #16]
      if (ret != HAL_OK)
 80091fc:	e744      	b.n	8009088 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 80091fe:	f04f 40b0 	mov.w	r0, #1476395008	@ 0x58000000
 8009202:	68c1      	ldr	r1, [r0, #12]
 8009204:	f441 3180 	orr.w	r1, r1, #65536	@ 0x10000
 8009208:	60c1      	str	r1, [r0, #12]
    if (ret == HAL_OK)
 800920a:	e680      	b.n	8008f0e <HAL_RCCEx_PeriphCLKConfig+0x7a>
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800920c:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800920e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009212:	4313      	orrs	r3, r2
 8009214:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009218:	6823      	ldr	r3, [r4, #0]
}
 800921a:	e68e      	b.n	8008f3a <HAL_RCCEx_PeriphCLKConfig+0xa6>
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800921c:	f7fc faa6 	bl	800576c <HAL_GetTick>
 8009220:	1b80      	subs	r0, r0, r6
 8009222:	2802      	cmp	r0, #2
 8009224:	f67f ae4f 	bls.w	8008ec6 <HAL_RCCEx_PeriphCLKConfig+0x32>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009228:	6823      	ldr	r3, [r4, #0]
 800922a:	2503      	movs	r5, #3
 800922c:	e679      	b.n	8008f22 <HAL_RCCEx_PeriphCLKConfig+0x8e>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800922e:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8009232:	f022 4240 	bic.w	r2, r2, #3221225472	@ 0xc0000000
 8009236:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800923a:	e712      	b.n	8009062 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800923c:	6823      	ldr	r3, [r4, #0]
 800923e:	e67c      	b.n	8008f3a <HAL_RCCEx_PeriphCLKConfig+0xa6>
 8009240:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8009244:	f022 4240 	bic.w	r2, r2, #3221225472	@ 0xc0000000
 8009248:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800924c:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8009250:	e707      	b.n	8009062 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009252:	f7fc fa8b 	bl	800576c <HAL_GetTick>
 8009256:	1bc0      	subs	r0, r0, r7
 8009258:	2802      	cmp	r0, #2
 800925a:	d985      	bls.n	8009168 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800925c:	6823      	ldr	r3, [r4, #0]
 800925e:	2503      	movs	r5, #3
 8009260:	e6d9      	b.n	8009016 <HAL_RCCEx_PeriphCLKConfig+0x182>
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009262:	f7fc fa83 	bl	800576c <HAL_GetTick>
 8009266:	1bc0      	subs	r0, r0, r7
 8009268:	2802      	cmp	r0, #2
 800926a:	d9a6      	bls.n	80091ba <HAL_RCCEx_PeriphCLKConfig+0x326>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800926c:	6823      	ldr	r3, [r4, #0]
 800926e:	2503      	movs	r5, #3
 8009270:	e70a      	b.n	8009088 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009272:	f7fc fa7b 	bl	800576c <HAL_GetTick>
 8009276:	1b40      	subs	r0, r0, r5
 8009278:	2802      	cmp	r0, #2
 800927a:	f67f ae3e 	bls.w	8008efa <HAL_RCCEx_PeriphCLKConfig+0x66>
 800927e:	e7d3      	b.n	8009228 <HAL_RCCEx_PeriphCLKConfig+0x394>
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009280:	f7fc fa74 	bl	800576c <HAL_GetTick>
 8009284:	1b80      	subs	r0, r0, r6
 8009286:	2802      	cmp	r0, #2
 8009288:	d9b0      	bls.n	80091ec <HAL_RCCEx_PeriphCLKConfig+0x358>
 800928a:	e7ef      	b.n	800926c <HAL_RCCEx_PeriphCLKConfig+0x3d8>
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800928c:	f7fc fa6e 	bl	800576c <HAL_GetTick>
 8009290:	1b80      	subs	r0, r0, r6
 8009292:	2802      	cmp	r0, #2
 8009294:	d981      	bls.n	800919a <HAL_RCCEx_PeriphCLKConfig+0x306>
 8009296:	e7e1      	b.n	800925c <HAL_RCCEx_PeriphCLKConfig+0x3c8>

08009298 <HAL_RTC_Init>:
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
  HAL_StatusTypeDef status = HAL_ERROR;

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8009298:	2800      	cmp	r0, #0
 800929a:	d066      	beq.n	800936a <HAL_RTC_Init+0xd2>
{
 800929c:	b570      	push	{r4, r5, r6, lr}
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800929e:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 80092a2:	4604      	mov	r4, r0
 80092a4:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80092a8:	b15b      	cbz	r3, 80092c2 <HAL_RTC_Init+0x2a>
    HAL_RTC_MspInit(hrtc);
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80092aa:	2202      	movs	r2, #2

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80092ac:	6823      	ldr	r3, [r4, #0]
  hrtc->State = HAL_RTC_STATE_BUSY;
 80092ae:	f884 2021 	strb.w	r2, [r4, #33]	@ 0x21
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80092b2:	68da      	ldr	r2, [r3, #12]
 80092b4:	06d5      	lsls	r5, r2, #27
 80092b6:	d509      	bpl.n	80092cc <HAL_RTC_Init+0x34>
    status = HAL_OK;
  }

  if (status == HAL_OK)
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80092b8:	2301      	movs	r3, #1
 80092ba:	f884 3021 	strb.w	r3, [r4, #33]	@ 0x21
 80092be:	2000      	movs	r0, #0
  }

  return status;
}
 80092c0:	bd70      	pop	{r4, r5, r6, pc}
    hrtc->Lock = HAL_UNLOCKED;
 80092c2:	f880 2020 	strb.w	r2, [r0, #32]
    HAL_RTC_MspInit(hrtc);
 80092c6:	f7f9 f80f 	bl	80022e8 <HAL_RTC_MspInit>
 80092ca:	e7ee      	b.n	80092aa <HAL_RTC_Init+0x12>
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80092cc:	21ca      	movs	r1, #202	@ 0xca
 80092ce:	2253      	movs	r2, #83	@ 0x53
 80092d0:	6259      	str	r1, [r3, #36]	@ 0x24
 80092d2:	625a      	str	r2, [r3, #36]	@ 0x24
{
  uint32_t tickstart = 0U;
  HAL_StatusTypeDef status = HAL_OK;

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80092d4:	68dd      	ldr	r5, [r3, #12]
 80092d6:	f015 0540 	ands.w	r5, r5, #64	@ 0x40
 80092da:	d028      	beq.n	800932e <HAL_RTC_Init+0x96>
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80092dc:	6899      	ldr	r1, [r3, #8]
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80092de:	6862      	ldr	r2, [r4, #4]
 80092e0:	6925      	ldr	r5, [r4, #16]
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80092e2:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 80092e6:	f021 0140 	bic.w	r1, r1, #64	@ 0x40
 80092ea:	6099      	str	r1, [r3, #8]
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80092ec:	69a1      	ldr	r1, [r4, #24]
 80092ee:	6898      	ldr	r0, [r3, #8]
 80092f0:	432a      	orrs	r2, r5
 80092f2:	430a      	orrs	r2, r1
 80092f4:	4302      	orrs	r2, r0
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80092f6:	68e1      	ldr	r1, [r4, #12]
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80092f8:	609a      	str	r2, [r3, #8]
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80092fa:	6119      	str	r1, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80092fc:	691a      	ldr	r2, [r3, #16]
 80092fe:	68a1      	ldr	r1, [r4, #8]
 8009300:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8009304:	611a      	str	r2, [r3, #16]
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8009306:	68da      	ldr	r2, [r3, #12]
 8009308:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800930c:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800930e:	689a      	ldr	r2, [r3, #8]
 8009310:	0691      	lsls	r1, r2, #26
 8009312:	d52c      	bpl.n	800936e <HAL_RTC_Init+0xd6>
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 8009314:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8009316:	69e2      	ldr	r2, [r4, #28]
 8009318:	6960      	ldr	r0, [r4, #20]
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 800931a:	f021 0103 	bic.w	r1, r1, #3
 800931e:	64d9      	str	r1, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8009320:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8009322:	4302      	orrs	r2, r0
 8009324:	430a      	orrs	r2, r1
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009326:	21ff      	movs	r1, #255	@ 0xff
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8009328:	64da      	str	r2, [r3, #76]	@ 0x4c
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800932a:	6259      	str	r1, [r3, #36]	@ 0x24
  if (status == HAL_OK)
 800932c:	e7c4      	b.n	80092b8 <HAL_RTC_Init+0x20>
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800932e:	68da      	ldr	r2, [r3, #12]
 8009330:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8009334:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8009336:	f7fc fa19 	bl	800576c <HAL_GetTick>
 800933a:	4606      	mov	r6, r0
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800933c:	e006      	b.n	800934c <HAL_RTC_Init+0xb4>
 800933e:	b95d      	cbnz	r5, 8009358 <HAL_RTC_Init+0xc0>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009340:	f7fc fa14 	bl	800576c <HAL_GetTick>
 8009344:	1b80      	subs	r0, r0, r6
 8009346:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800934a:	d809      	bhi.n	8009360 <HAL_RTC_Init+0xc8>
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800934c:	6823      	ldr	r3, [r4, #0]
 800934e:	68da      	ldr	r2, [r3, #12]
 8009350:	0650      	lsls	r0, r2, #25
 8009352:	d5f4      	bpl.n	800933e <HAL_RTC_Init+0xa6>
    if (status == HAL_OK)
 8009354:	2d00      	cmp	r5, #0
 8009356:	d0c1      	beq.n	80092dc <HAL_RTC_Init+0x44>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009358:	22ff      	movs	r2, #255	@ 0xff
 800935a:	625a      	str	r2, [r3, #36]	@ 0x24
    return HAL_ERROR;
 800935c:	2001      	movs	r0, #1
}
 800935e:	bd70      	pop	{r4, r5, r6, pc}
        hrtc->State = HAL_RTC_STATE_ERROR;
 8009360:	2304      	movs	r3, #4
 8009362:	f884 3021 	strb.w	r3, [r4, #33]	@ 0x21
        status = HAL_ERROR;
 8009366:	2501      	movs	r5, #1
 8009368:	e7f0      	b.n	800934c <HAL_RTC_Init+0xb4>
    return HAL_ERROR;
 800936a:	2001      	movs	r0, #1
}
 800936c:	4770      	bx	lr
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800936e:	4a0b      	ldr	r2, [pc, #44]	@ (800939c <HAL_RTC_Init+0x104>)
 8009370:	60da      	str	r2, [r3, #12]
  tickstart = HAL_GetTick();
 8009372:	f7fc f9fb 	bl	800576c <HAL_GetTick>
 8009376:	4605      	mov	r5, r0
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009378:	6823      	ldr	r3, [r4, #0]
 800937a:	68da      	ldr	r2, [r3, #12]
 800937c:	0692      	lsls	r2, r2, #26
 800937e:	d4c9      	bmi.n	8009314 <HAL_RTC_Init+0x7c>
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009380:	f7fc f9f4 	bl	800576c <HAL_GetTick>
 8009384:	1b40      	subs	r0, r0, r5
 8009386:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800938a:	d9f5      	bls.n	8009378 <HAL_RTC_Init+0xe0>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800938c:	6823      	ldr	r3, [r4, #0]
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800938e:	2104      	movs	r1, #4
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009390:	22ff      	movs	r2, #255	@ 0xff
      hrtc->State = HAL_RTC_STATE_ERROR;
 8009392:	f884 1021 	strb.w	r1, [r4, #33]	@ 0x21
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009396:	625a      	str	r2, [r3, #36]	@ 0x24
  if (status == HAL_OK)
 8009398:	e7e0      	b.n	800935c <HAL_RTC_Init+0xc4>
 800939a:	bf00      	nop
 800939c:	0001ff5f 	.word	0x0001ff5f

080093a0 <HAL_RTC_SetTime>:
{
 80093a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hrtc);
 80093a4:	f890 3020 	ldrb.w	r3, [r0, #32]
 80093a8:	2b01      	cmp	r3, #1
 80093aa:	f000 80ac 	beq.w	8009506 <HAL_RTC_SetTime+0x166>
 80093ae:	460d      	mov	r5, r1
 80093b0:	2101      	movs	r1, #1
  hrtc->State = HAL_RTC_STATE_BUSY;
 80093b2:	2302      	movs	r3, #2
  __HAL_LOCK(hrtc);
 80093b4:	f880 1020 	strb.w	r1, [r0, #32]
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80093b8:	6801      	ldr	r1, [r0, #0]
  hrtc->State = HAL_RTC_STATE_BUSY;
 80093ba:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80093be:	688b      	ldr	r3, [r1, #8]
 80093c0:	4606      	mov	r6, r0
  if (Format == RTC_FORMAT_BIN)
 80093c2:	2a00      	cmp	r2, #0
 80093c4:	d137      	bne.n	8009436 <HAL_RTC_SetTime+0x96>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80093c6:	f013 0c40 	ands.w	ip, r3, #64	@ 0x40
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80093ca:	bf18      	it	ne
 80093cc:	f895 c003 	ldrbne.w	ip, [r5, #3]
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80093d0:	782b      	ldrb	r3, [r5, #0]
      sTime->TimeFormat = 0x00U;
 80093d2:	bf0c      	ite	eq
 80093d4:	f885 c003 	strbeq.w	ip, [r5, #3]
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80093d8:	ea4f 5c8c 	movne.w	ip, ip, lsl #22
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
  uint32_t bcdhigh = 0U;

  while (number >= 10U)
 80093dc:	2b09      	cmp	r3, #9
 80093de:	d909      	bls.n	80093f4 <HAL_RTC_SetTime+0x54>
  uint32_t bcdhigh = 0U;
 80093e0:	2000      	movs	r0, #0
  {
    bcdhigh++;
    number -= 10U;
 80093e2:	3b0a      	subs	r3, #10
 80093e4:	b2db      	uxtb	r3, r3
  while (number >= 10U)
 80093e6:	2b09      	cmp	r3, #9
    bcdhigh++;
 80093e8:	f100 0001 	add.w	r0, r0, #1
  while (number >= 10U)
 80093ec:	d8f9      	bhi.n	80093e2 <HAL_RTC_SetTime+0x42>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80093ee:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 80093f2:	b2db      	uxtb	r3, r3
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80093f4:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80093f6:	786b      	ldrb	r3, [r5, #1]
  while (number >= 10U)
 80093f8:	2b09      	cmp	r3, #9
 80093fa:	d909      	bls.n	8009410 <HAL_RTC_SetTime+0x70>
  uint32_t bcdhigh = 0U;
 80093fc:	2000      	movs	r0, #0
    number -= 10U;
 80093fe:	3b0a      	subs	r3, #10
 8009400:	b2db      	uxtb	r3, r3
  while (number >= 10U)
 8009402:	2b09      	cmp	r3, #9
    bcdhigh++;
 8009404:	f100 0001 	add.w	r0, r0, #1
  while (number >= 10U)
 8009408:	d8f9      	bhi.n	80093fe <HAL_RTC_SetTime+0x5e>
  return ((uint8_t)(bcdhigh << 4U) | number);
 800940a:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 800940e:	b2db      	uxtb	r3, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8009410:	78a8      	ldrb	r0, [r5, #2]
  while (number >= 10U)
 8009412:	2809      	cmp	r0, #9
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009414:	ea4f 2303 	mov.w	r3, r3, lsl #8
  while (number >= 10U)
 8009418:	d908      	bls.n	800942c <HAL_RTC_SetTime+0x8c>
    number -= 10U;
 800941a:	380a      	subs	r0, #10
 800941c:	b2c0      	uxtb	r0, r0
  while (number >= 10U)
 800941e:	2809      	cmp	r0, #9
    bcdhigh++;
 8009420:	f102 0201 	add.w	r2, r2, #1
  while (number >= 10U)
 8009424:	d8f9      	bhi.n	800941a <HAL_RTC_SetTime+0x7a>
  return ((uint8_t)(bcdhigh << 4U) | number);
 8009426:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800942a:	b2c0      	uxtb	r0, r0
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800942c:	ea44 040c 	orr.w	r4, r4, ip
 8009430:	431c      	orrs	r4, r3
 8009432:	4304      	orrs	r4, r0
 8009434:	e00f      	b.n	8009456 <HAL_RTC_SetTime+0xb6>
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8009436:	786c      	ldrb	r4, [r5, #1]
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8009438:	782a      	ldrb	r2, [r5, #0]
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800943a:	f013 0340 	ands.w	r3, r3, #64	@ 0x40
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800943e:	ea4f 2404 	mov.w	r4, r4, lsl #8
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8009442:	bf14      	ite	ne
 8009444:	78eb      	ldrbne	r3, [r5, #3]
      sTime->TimeFormat = 0x00U;
 8009446:	70eb      	strbeq	r3, [r5, #3]
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8009448:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
              ((uint32_t) sTime->Seconds)                       | \
 800944c:	78aa      	ldrb	r2, [r5, #2]
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800944e:	bf18      	it	ne
 8009450:	059b      	lslne	r3, r3, #22
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8009452:	4314      	orrs	r4, r2
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8009454:	431c      	orrs	r4, r3
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009456:	23ca      	movs	r3, #202	@ 0xca
 8009458:	624b      	str	r3, [r1, #36]	@ 0x24
 800945a:	2353      	movs	r3, #83	@ 0x53
 800945c:	624b      	str	r3, [r1, #36]	@ 0x24
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800945e:	68cf      	ldr	r7, [r1, #12]
 8009460:	f017 0740 	ands.w	r7, r7, #64	@ 0x40
 8009464:	d021      	beq.n	80094aa <HAL_RTC_SetTime+0x10a>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8009466:	f004 347f 	and.w	r4, r4, #2139062143	@ 0x7f7f7f7f
 800946a:	f024 44fe 	bic.w	r4, r4, #2130706432	@ 0x7f000000
 800946e:	600c      	str	r4, [r1, #0]
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8009470:	688a      	ldr	r2, [r1, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8009472:	68eb      	ldr	r3, [r5, #12]
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8009474:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8009478:	608a      	str	r2, [r1, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800947a:	692a      	ldr	r2, [r5, #16]
 800947c:	4313      	orrs	r3, r2
 800947e:	688a      	ldr	r2, [r1, #8]
 8009480:	4313      	orrs	r3, r2
 8009482:	608b      	str	r3, [r1, #8]
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8009484:	68cb      	ldr	r3, [r1, #12]
 8009486:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800948a:	60cb      	str	r3, [r1, #12]
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800948c:	688b      	ldr	r3, [r1, #8]
 800948e:	069a      	lsls	r2, r3, #26
 8009490:	d523      	bpl.n	80094da <HAL_RTC_SetTime+0x13a>
    hrtc->State = HAL_RTC_STATE_READY;
 8009492:	2301      	movs	r3, #1
 8009494:	f886 3021 	strb.w	r3, [r6, #33]	@ 0x21
    status = RTC_ExitInitMode(hrtc);
 8009498:	2700      	movs	r7, #0
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800949a:	22ff      	movs	r2, #255	@ 0xff
  __HAL_UNLOCK(hrtc);
 800949c:	2300      	movs	r3, #0
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800949e:	624a      	str	r2, [r1, #36]	@ 0x24
  __HAL_UNLOCK(hrtc);
 80094a0:	f886 3020 	strb.w	r3, [r6, #32]
}
 80094a4:	4638      	mov	r0, r7
 80094a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80094aa:	68cb      	ldr	r3, [r1, #12]
 80094ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80094b0:	60cb      	str	r3, [r1, #12]
    tickstart = HAL_GetTick();
 80094b2:	f7fc f95b 	bl	800576c <HAL_GetTick>
 80094b6:	4680      	mov	r8, r0
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80094b8:	e008      	b.n	80094cc <HAL_RTC_SetTime+0x12c>
 80094ba:	2f01      	cmp	r7, #1
 80094bc:	d0ed      	beq.n	800949a <HAL_RTC_SetTime+0xfa>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80094be:	f7fc f955 	bl	800576c <HAL_GetTick>
 80094c2:	eba0 0008 	sub.w	r0, r0, r8
 80094c6:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 80094ca:	d817      	bhi.n	80094fc <HAL_RTC_SetTime+0x15c>
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80094cc:	6831      	ldr	r1, [r6, #0]
 80094ce:	68cb      	ldr	r3, [r1, #12]
 80094d0:	0658      	lsls	r0, r3, #25
 80094d2:	d5f2      	bpl.n	80094ba <HAL_RTC_SetTime+0x11a>
  if (status == HAL_OK)
 80094d4:	2f00      	cmp	r7, #0
 80094d6:	d1e0      	bne.n	800949a <HAL_RTC_SetTime+0xfa>
 80094d8:	e7c5      	b.n	8009466 <HAL_RTC_SetTime+0xc6>
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80094da:	4b10      	ldr	r3, [pc, #64]	@ (800951c <HAL_RTC_SetTime+0x17c>)
 80094dc:	60cb      	str	r3, [r1, #12]
  tickstart = HAL_GetTick();
 80094de:	f7fc f945 	bl	800576c <HAL_GetTick>
 80094e2:	4604      	mov	r4, r0
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80094e4:	e005      	b.n	80094f2 <HAL_RTC_SetTime+0x152>
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80094e6:	f7fc f941 	bl	800576c <HAL_GetTick>
 80094ea:	1b00      	subs	r0, r0, r4
 80094ec:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 80094f0:	d80d      	bhi.n	800950e <HAL_RTC_SetTime+0x16e>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80094f2:	6831      	ldr	r1, [r6, #0]
 80094f4:	68cb      	ldr	r3, [r1, #12]
 80094f6:	069b      	lsls	r3, r3, #26
 80094f8:	d5f5      	bpl.n	80094e6 <HAL_RTC_SetTime+0x146>
 80094fa:	e7ca      	b.n	8009492 <HAL_RTC_SetTime+0xf2>
        hrtc->State = HAL_RTC_STATE_ERROR;
 80094fc:	2304      	movs	r3, #4
 80094fe:	f886 3021 	strb.w	r3, [r6, #33]	@ 0x21
        status = HAL_ERROR;
 8009502:	2701      	movs	r7, #1
 8009504:	e7e2      	b.n	80094cc <HAL_RTC_SetTime+0x12c>
  __HAL_LOCK(hrtc);
 8009506:	2702      	movs	r7, #2
}
 8009508:	4638      	mov	r0, r7
 800950a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      hrtc->State = HAL_RTC_STATE_ERROR;
 800950e:	2304      	movs	r3, #4
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009510:	6831      	ldr	r1, [r6, #0]
      hrtc->State = HAL_RTC_STATE_ERROR;
 8009512:	f886 3021 	strb.w	r3, [r6, #33]	@ 0x21
      status = HAL_ERROR;
 8009516:	2701      	movs	r7, #1
 8009518:	e7bf      	b.n	800949a <HAL_RTC_SetTime+0xfa>
 800951a:	bf00      	nop
 800951c:	0001ff5f 	.word	0x0001ff5f

08009520 <HAL_RTC_GetTime>:
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8009520:	6803      	ldr	r3, [r0, #0]
{
 8009522:	b530      	push	{r4, r5, lr}
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8009524:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8009526:	6918      	ldr	r0, [r3, #16]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8009528:	681b      	ldr	r3, [r3, #0]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800952a:	f3c0 000e 	ubfx	r0, r0, #0, #15
 800952e:	e9c1 4001 	strd	r4, r0, [r1, #4]
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8009532:	f3c3 4405 	ubfx	r4, r3, #16, #6
 8009536:	2000      	movs	r0, #0
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8009538:	f3c3 2e06 	ubfx	lr, r3, #8, #7
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800953c:	f364 0007 	bfi	r0, r4, #0, #8
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8009540:	f003 0c7f 	and.w	ip, r3, #127	@ 0x7f
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8009544:	f36e 200f 	bfi	r0, lr, #8, #8
 8009548:	f3c3 4506 	ubfx	r5, r3, #16, #7
 800954c:	f36c 4017 	bfi	r0, ip, #16, #8
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8009550:	f3c3 5380 	ubfx	r3, r3, #22, #1
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8009554:	f363 601f 	bfi	r0, r3, #24, #8
 8009558:	6008      	str	r0, [r1, #0]
  if (Format == RTC_FORMAT_BIN)
 800955a:	b9da      	cbnz	r2, 8009594 <HAL_RTC_GetTime+0x74>
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
  uint32_t tens = 0U;
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 800955c:	ea4f 131e 	mov.w	r3, lr, lsr #4
 8009560:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8009564:	f00e 0e0f 	and.w	lr, lr, #15
 8009568:	eb0e 0e43 	add.w	lr, lr, r3, lsl #1
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 800956c:	0924      	lsrs	r4, r4, #4
 800956e:	ea4f 131c 	mov.w	r3, ip, lsr #4
 8009572:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8009576:	f005 050f 	and.w	r5, r5, #15
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 800957a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 800957e:	f00c 0c0f 	and.w	ip, ip, #15
 8009582:	eb05 0544 	add.w	r5, r5, r4, lsl #1
 8009586:	eb0c 0c43 	add.w	ip, ip, r3, lsl #1
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800958a:	700d      	strb	r5, [r1, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800958c:	f881 e001 	strb.w	lr, [r1, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8009590:	f881 c002 	strb.w	ip, [r1, #2]
}
 8009594:	2000      	movs	r0, #0
 8009596:	bd30      	pop	{r4, r5, pc}

08009598 <HAL_RTC_SetDate>:
{
 8009598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 800959a:	f890 3020 	ldrb.w	r3, [r0, #32]
 800959e:	2b01      	cmp	r3, #1
 80095a0:	f000 80a1 	beq.w	80096e6 <HAL_RTC_SetDate+0x14e>
 80095a4:	4605      	mov	r5, r0
  hrtc->State = HAL_RTC_STATE_BUSY;
 80095a6:	2302      	movs	r3, #2
  __HAL_LOCK(hrtc);
 80095a8:	2001      	movs	r0, #1
 80095aa:	f885 0020 	strb.w	r0, [r5, #32]
  hrtc->State = HAL_RTC_STATE_BUSY;
 80095ae:	f885 3021 	strb.w	r3, [r5, #33]	@ 0x21
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80095b2:	f891 e000 	ldrb.w	lr, [r1]
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80095b6:	78cb      	ldrb	r3, [r1, #3]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80095b8:	7848      	ldrb	r0, [r1, #1]
                  ((uint32_t) sDate->Date)                      | \
 80095ba:	f891 c002 	ldrb.w	ip, [r1, #2]
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80095be:	ea4f 3e4e 	mov.w	lr, lr, lsl #13
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80095c2:	b32a      	cbz	r2, 8009610 <HAL_RTC_SetDate+0x78>
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80095c4:	ea4e 4403 	orr.w	r4, lr, r3, lsl #16
 80095c8:	ea44 040c 	orr.w	r4, r4, ip
 80095cc:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80095d0:	682a      	ldr	r2, [r5, #0]
 80095d2:	21ca      	movs	r1, #202	@ 0xca
 80095d4:	2353      	movs	r3, #83	@ 0x53
 80095d6:	6251      	str	r1, [r2, #36]	@ 0x24
 80095d8:	6253      	str	r3, [r2, #36]	@ 0x24
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80095da:	68d6      	ldr	r6, [r2, #12]
 80095dc:	f016 0640 	ands.w	r6, r6, #64	@ 0x40
 80095e0:	d051      	beq.n	8009686 <HAL_RTC_SetDate+0xee>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80095e2:	f024 447f 	bic.w	r4, r4, #4278190080	@ 0xff000000
 80095e6:	f024 04c0 	bic.w	r4, r4, #192	@ 0xc0
 80095ea:	6054      	str	r4, [r2, #4]
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80095ec:	68d3      	ldr	r3, [r2, #12]
 80095ee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80095f2:	60d3      	str	r3, [r2, #12]
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80095f4:	6893      	ldr	r3, [r2, #8]
 80095f6:	0699      	lsls	r1, r3, #26
 80095f8:	d55f      	bpl.n	80096ba <HAL_RTC_SetDate+0x122>
    hrtc->State = HAL_RTC_STATE_READY;
 80095fa:	2301      	movs	r3, #1
 80095fc:	f885 3021 	strb.w	r3, [r5, #33]	@ 0x21
    status = RTC_ExitInitMode(hrtc);
 8009600:	2600      	movs	r6, #0
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009602:	21ff      	movs	r1, #255	@ 0xff
  __HAL_UNLOCK(hrtc);
 8009604:	2300      	movs	r3, #0
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009606:	6251      	str	r1, [r2, #36]	@ 0x24
  __HAL_UNLOCK(hrtc);
 8009608:	f885 3020 	strb.w	r3, [r5, #32]
}
 800960c:	4630      	mov	r0, r6
 800960e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8009610:	06c4      	lsls	r4, r0, #27
 8009612:	d54f      	bpl.n	80096b4 <HAL_RTC_SetDate+0x11c>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8009614:	f020 0010 	bic.w	r0, r0, #16
 8009618:	300a      	adds	r0, #10
 800961a:	b2c0      	uxtb	r0, r0
  while (number >= 10U)
 800961c:	2b09      	cmp	r3, #9
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800961e:	7048      	strb	r0, [r1, #1]
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8009620:	bf98      	it	ls
 8009622:	041c      	lslls	r4, r3, #16
  while (number >= 10U)
 8009624:	d90d      	bls.n	8009642 <HAL_RTC_SetDate+0xaa>
  uint32_t bcdhigh = 0U;
 8009626:	2100      	movs	r1, #0
    number -= 10U;
 8009628:	3b0a      	subs	r3, #10
 800962a:	b2db      	uxtb	r3, r3
  while (number >= 10U)
 800962c:	2b09      	cmp	r3, #9
    bcdhigh++;
 800962e:	f101 0101 	add.w	r1, r1, #1
  while (number >= 10U)
 8009632:	d8f9      	bhi.n	8009628 <HAL_RTC_SetDate+0x90>
  return ((uint8_t)(bcdhigh << 4U) | number);
 8009634:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8009638:	b2db      	uxtb	r3, r3
  while (number >= 10U)
 800963a:	2809      	cmp	r0, #9
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800963c:	ea4f 4403 	mov.w	r4, r3, lsl #16
  while (number >= 10U)
 8009640:	d909      	bls.n	8009656 <HAL_RTC_SetDate+0xbe>
  uint32_t bcdhigh = 0U;
 8009642:	2300      	movs	r3, #0
    number -= 10U;
 8009644:	380a      	subs	r0, #10
 8009646:	b2c0      	uxtb	r0, r0
  while (number >= 10U)
 8009648:	2809      	cmp	r0, #9
    bcdhigh++;
 800964a:	f103 0301 	add.w	r3, r3, #1
  while (number >= 10U)
 800964e:	d8f9      	bhi.n	8009644 <HAL_RTC_SetDate+0xac>
  return ((uint8_t)(bcdhigh << 4U) | number);
 8009650:	ea40 1303 	orr.w	r3, r0, r3, lsl #4
 8009654:	b2d8      	uxtb	r0, r3
  while (number >= 10U)
 8009656:	f1bc 0f09 	cmp.w	ip, #9
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800965a:	ea4f 2000 	mov.w	r0, r0, lsl #8
  while (number >= 10U)
 800965e:	d90c      	bls.n	800967a <HAL_RTC_SetDate+0xe2>
    number -= 10U;
 8009660:	f1ac 0c0a 	sub.w	ip, ip, #10
 8009664:	fa5f fc8c 	uxtb.w	ip, ip
  while (number >= 10U)
 8009668:	f1bc 0f09 	cmp.w	ip, #9
    bcdhigh++;
 800966c:	f102 0201 	add.w	r2, r2, #1
  while (number >= 10U)
 8009670:	d8f6      	bhi.n	8009660 <HAL_RTC_SetDate+0xc8>
  return ((uint8_t)(bcdhigh << 4U) | number);
 8009672:	ea4c 1202 	orr.w	r2, ip, r2, lsl #4
 8009676:	fa5f fc82 	uxtb.w	ip, r2
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800967a:	ea44 040e 	orr.w	r4, r4, lr
 800967e:	4304      	orrs	r4, r0
 8009680:	ea44 040c 	orr.w	r4, r4, ip
 8009684:	e7a4      	b.n	80095d0 <HAL_RTC_SetDate+0x38>
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8009686:	68d3      	ldr	r3, [r2, #12]
 8009688:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800968c:	60d3      	str	r3, [r2, #12]
    tickstart = HAL_GetTick();
 800968e:	f7fc f86d 	bl	800576c <HAL_GetTick>
 8009692:	4607      	mov	r7, r0
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8009694:	e007      	b.n	80096a6 <HAL_RTC_SetDate+0x10e>
 8009696:	2e01      	cmp	r6, #1
 8009698:	d0b3      	beq.n	8009602 <HAL_RTC_SetDate+0x6a>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800969a:	f7fc f867 	bl	800576c <HAL_GetTick>
 800969e:	1bc0      	subs	r0, r0, r7
 80096a0:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 80096a4:	d81a      	bhi.n	80096dc <HAL_RTC_SetDate+0x144>
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80096a6:	682a      	ldr	r2, [r5, #0]
 80096a8:	68d3      	ldr	r3, [r2, #12]
 80096aa:	0658      	lsls	r0, r3, #25
 80096ac:	d5f3      	bpl.n	8009696 <HAL_RTC_SetDate+0xfe>
  if (status == HAL_OK)
 80096ae:	2e00      	cmp	r6, #0
 80096b0:	d1a7      	bne.n	8009602 <HAL_RTC_SetDate+0x6a>
 80096b2:	e796      	b.n	80095e2 <HAL_RTC_SetDate+0x4a>
  while (number >= 10U)
 80096b4:	2b09      	cmp	r3, #9
 80096b6:	d8b6      	bhi.n	8009626 <HAL_RTC_SetDate+0x8e>
 80096b8:	e7bf      	b.n	800963a <HAL_RTC_SetDate+0xa2>
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80096ba:	4b0f      	ldr	r3, [pc, #60]	@ (80096f8 <HAL_RTC_SetDate+0x160>)
 80096bc:	60d3      	str	r3, [r2, #12]
  tickstart = HAL_GetTick();
 80096be:	f7fc f855 	bl	800576c <HAL_GetTick>
 80096c2:	4604      	mov	r4, r0
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80096c4:	e005      	b.n	80096d2 <HAL_RTC_SetDate+0x13a>
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80096c6:	f7fc f851 	bl	800576c <HAL_GetTick>
 80096ca:	1b00      	subs	r0, r0, r4
 80096cc:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 80096d0:	d80c      	bhi.n	80096ec <HAL_RTC_SetDate+0x154>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80096d2:	682a      	ldr	r2, [r5, #0]
 80096d4:	68d3      	ldr	r3, [r2, #12]
 80096d6:	069b      	lsls	r3, r3, #26
 80096d8:	d5f5      	bpl.n	80096c6 <HAL_RTC_SetDate+0x12e>
 80096da:	e78e      	b.n	80095fa <HAL_RTC_SetDate+0x62>
        hrtc->State = HAL_RTC_STATE_ERROR;
 80096dc:	2304      	movs	r3, #4
 80096de:	f885 3021 	strb.w	r3, [r5, #33]	@ 0x21
        status = HAL_ERROR;
 80096e2:	2601      	movs	r6, #1
 80096e4:	e7df      	b.n	80096a6 <HAL_RTC_SetDate+0x10e>
  __HAL_LOCK(hrtc);
 80096e6:	2602      	movs	r6, #2
}
 80096e8:	4630      	mov	r0, r6
 80096ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hrtc->State = HAL_RTC_STATE_ERROR;
 80096ec:	2304      	movs	r3, #4
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80096ee:	682a      	ldr	r2, [r5, #0]
      hrtc->State = HAL_RTC_STATE_ERROR;
 80096f0:	f885 3021 	strb.w	r3, [r5, #33]	@ 0x21
      status = HAL_ERROR;
 80096f4:	2601      	movs	r6, #1
 80096f6:	e784      	b.n	8009602 <HAL_RTC_SetDate+0x6a>
 80096f8:	0001ff5f 	.word	0x0001ff5f

080096fc <HAL_RTC_GetDate>:
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80096fc:	6803      	ldr	r3, [r0, #0]
 80096fe:	685b      	ldr	r3, [r3, #4]
{
 8009700:	b510      	push	{r4, lr}
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8009702:	2000      	movs	r0, #0
 8009704:	f3c3 3e42 	ubfx	lr, r3, #13, #3
 8009708:	f36e 0007 	bfi	r0, lr, #0, #8
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800970c:	f3c3 2e04 	ubfx	lr, r3, #8, #5
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8009710:	f3c3 4c07 	ubfx	ip, r3, #16, #8
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8009714:	f3c3 2407 	ubfx	r4, r3, #8, #8
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8009718:	f36e 200f 	bfi	r0, lr, #8, #8
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800971c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8009720:	f363 4017 	bfi	r0, r3, #16, #8
 8009724:	f36c 601f 	bfi	r0, ip, #24, #8
 8009728:	6008      	str	r0, [r1, #0]
  if (Format == RTC_FORMAT_BIN)
 800972a:	b9d2      	cbnz	r2, 8009762 <HAL_RTC_GetDate+0x66>
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 800972c:	091a      	lsrs	r2, r3, #4
 800972e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8009732:	f003 030f 	and.w	r3, r3, #15
 8009736:	eb03 0342 	add.w	r3, r3, r2, lsl #1
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 800973a:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800973e:	708b      	strb	r3, [r1, #2]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8009740:	ea4f 131c 	mov.w	r3, ip, lsr #4
 8009744:	eb0e 0e8e 	add.w	lr, lr, lr, lsl #2
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8009748:	f004 040f 	and.w	r4, r4, #15
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 800974c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8009750:	f00c 0c0f 	and.w	ip, ip, #15
 8009754:	eb04 044e 	add.w	r4, r4, lr, lsl #1
 8009758:	eb0c 0c43 	add.w	ip, ip, r3, lsl #1
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800975c:	704c      	strb	r4, [r1, #1]
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800975e:	f881 c003 	strb.w	ip, [r1, #3]
}
 8009762:	2000      	movs	r0, #0
 8009764:	bd10      	pop	{r4, pc}
 8009766:	bf00      	nop

08009768 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8009768:	b430      	push	{r4, r5}
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 800976a:	4c3a      	ldr	r4, [pc, #232]	@ (8009854 <HAL_RTCEx_SetWakeUpTimer_IT+0xec>)
 800976c:	4b3a      	ldr	r3, [pc, #232]	@ (8009858 <HAL_RTCEx_SetWakeUpTimer_IT+0xf0>)
 800976e:	6825      	ldr	r5, [r4, #0]
 8009770:	fba3 3505 	umull	r3, r5, r3, r5
 8009774:	0aed      	lsrs	r5, r5, #11
 8009776:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800977a:	fb03 f505 	mul.w	r5, r3, r5
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800977e:	f890 3020 	ldrb.w	r3, [r0, #32]
{
 8009782:	b082      	sub	sp, #8
  __HAL_LOCK(hrtc);
 8009784:	2b01      	cmp	r3, #1
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8009786:	9501      	str	r5, [sp, #4]
  __HAL_LOCK(hrtc);
 8009788:	d05f      	beq.n	800984a <HAL_RTCEx_SetWakeUpTimer_IT+0xe2>
 800978a:	2301      	movs	r3, #1
 800978c:	f880 3020 	strb.w	r3, [r0, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009790:	6804      	ldr	r4, [r0, #0]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8009792:	2302      	movs	r3, #2
 8009794:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009798:	23ca      	movs	r3, #202	@ 0xca
 800979a:	6263      	str	r3, [r4, #36]	@ 0x24
 800979c:	2353      	movs	r3, #83	@ 0x53
 800979e:	6263      	str	r3, [r4, #36]	@ 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled */
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 80097a0:	68a3      	ldr	r3, [r4, #8]
 80097a2:	055b      	lsls	r3, r3, #21
 80097a4:	4684      	mov	ip, r0
 80097a6:	d422      	bmi.n	80097ee <HAL_RTCEx_SetWakeUpTimer_IT+0x86>
      }
    } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U);
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 80097a8:	68a3      	ldr	r3, [r4, #8]
 80097aa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80097ae:	60a3      	str	r3, [r4, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80097b0:	68e3      	ldr	r3, [r4, #12]
 80097b2:	b2db      	uxtb	r3, r3
 80097b4:	f463 6390 	orn	r3, r3, #1152	@ 0x480
 80097b8:	60e3      	str	r3, [r4, #12]

  /* Reload the counter */
  count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 80097ba:	9501      	str	r5, [sp, #4]
 80097bc:	e002      	b.n	80097c4 <HAL_RTCEx_SetWakeUpTimer_IT+0x5c>
      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);

      return HAL_TIMEOUT;
    }
  } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U);
 80097be:	68e3      	ldr	r3, [r4, #12]
 80097c0:	075b      	lsls	r3, r3, #29
 80097c2:	d41b      	bmi.n	80097fc <HAL_RTCEx_SetWakeUpTimer_IT+0x94>
    count = count - 1U;
 80097c4:	9b01      	ldr	r3, [sp, #4]
 80097c6:	3b01      	subs	r3, #1
 80097c8:	9301      	str	r3, [sp, #4]
    if (count == 0U)
 80097ca:	9b01      	ldr	r3, [sp, #4]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d1f6      	bne.n	80097be <HAL_RTCEx_SetWakeUpTimer_IT+0x56>
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80097d0:	22ff      	movs	r2, #255	@ 0xff
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80097d2:	2303      	movs	r3, #3
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80097d4:	6262      	str	r2, [r4, #36]	@ 0x24
        return HAL_TIMEOUT;
 80097d6:	2003      	movs	r0, #3
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80097d8:	f88c 3021 	strb.w	r3, [ip, #33]	@ 0x21
      __HAL_UNLOCK(hrtc);
 80097dc:	2300      	movs	r3, #0
 80097de:	f88c 3020 	strb.w	r3, [ip, #32]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);

  return HAL_OK;
}
 80097e2:	b002      	add	sp, #8
 80097e4:	bc30      	pop	{r4, r5}
 80097e6:	4770      	bx	lr
    } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U);
 80097e8:	68e3      	ldr	r3, [r4, #12]
 80097ea:	0758      	lsls	r0, r3, #29
 80097ec:	d5dc      	bpl.n	80097a8 <HAL_RTCEx_SetWakeUpTimer_IT+0x40>
      count = count - 1U;
 80097ee:	9b01      	ldr	r3, [sp, #4]
 80097f0:	3b01      	subs	r3, #1
 80097f2:	9301      	str	r3, [sp, #4]
      if (count == 0U)
 80097f4:	9b01      	ldr	r3, [sp, #4]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d1f6      	bne.n	80097e8 <HAL_RTCEx_SetWakeUpTimer_IT+0x80>
 80097fa:	e7e9      	b.n	80097d0 <HAL_RTCEx_SetWakeUpTimer_IT+0x68>
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 80097fc:	68a3      	ldr	r3, [r4, #8]
 80097fe:	f023 0307 	bic.w	r3, r3, #7
 8009802:	60a3      	str	r3, [r4, #8]
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8009804:	68a3      	ldr	r3, [r4, #8]
 8009806:	431a      	orrs	r2, r3
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8009808:	4b14      	ldr	r3, [pc, #80]	@ (800985c <HAL_RTCEx_SetWakeUpTimer_IT+0xf4>)
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800980a:	60a2      	str	r2, [r4, #8]
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800980c:	6161      	str	r1, [r4, #20]
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800980e:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8009812:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 8009816:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 800981a:	681a      	ldr	r2, [r3, #0]
 800981c:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 8009820:	601a      	str	r2, [r3, #0]
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8009822:	68a3      	ldr	r3, [r4, #8]
 8009824:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009828:	60a3      	str	r3, [r4, #8]
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800982a:	68a3      	ldr	r3, [r4, #8]
  __HAL_UNLOCK(hrtc);
 800982c:	2100      	movs	r1, #0
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800982e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8009832:	60a3      	str	r3, [r4, #8]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009834:	22ff      	movs	r2, #255	@ 0xff
  hrtc->State = HAL_RTC_STATE_READY;
 8009836:	2301      	movs	r3, #1
  return HAL_OK;
 8009838:	4608      	mov	r0, r1
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800983a:	6262      	str	r2, [r4, #36]	@ 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 800983c:	f88c 3021 	strb.w	r3, [ip, #33]	@ 0x21
  __HAL_UNLOCK(hrtc);
 8009840:	f88c 1020 	strb.w	r1, [ip, #32]
}
 8009844:	b002      	add	sp, #8
 8009846:	bc30      	pop	{r4, r5}
 8009848:	4770      	bx	lr
  __HAL_LOCK(hrtc);
 800984a:	2002      	movs	r0, #2
}
 800984c:	b002      	add	sp, #8
 800984e:	bc30      	pop	{r4, r5}
 8009850:	4770      	bx	lr
 8009852:	bf00      	nop
 8009854:	20000034 	.word	0x20000034
 8009858:	10624dd3 	.word	0x10624dd3
 800985c:	58000800 	.word	0x58000800

08009860 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wakeup Timer callback.
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
 8009860:	4770      	bx	lr
 8009862:	bf00      	nop

08009864 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8009864:	4a0c      	ldr	r2, [pc, #48]	@ (8009898 <HAL_RTCEx_WakeUpTimerIRQHandler+0x34>)
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8009866:	6803      	ldr	r3, [r0, #0]
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8009868:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
{
 800986c:	b510      	push	{r4, lr}
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 800986e:	60d1      	str	r1, [r2, #12]
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8009870:	68da      	ldr	r2, [r3, #12]
 8009872:	0552      	lsls	r2, r2, #21
{
 8009874:	4604      	mov	r4, r0
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8009876:	d403      	bmi.n	8009880 <HAL_RTCEx_WakeUpTimerIRQHandler+0x1c>
  hrtc->State = HAL_RTC_STATE_READY;
 8009878:	2301      	movs	r3, #1
 800987a:	f884 3021 	strb.w	r3, [r4, #33]	@ 0x21
}
 800987e:	bd10      	pop	{r4, pc}
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8009880:	68da      	ldr	r2, [r3, #12]
 8009882:	b2d2      	uxtb	r2, r2
 8009884:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8009888:	60da      	str	r2, [r3, #12]
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 800988a:	f7ff ffe9 	bl	8009860 <HAL_RTCEx_WakeUpTimerEventCallback>
  hrtc->State = HAL_RTC_STATE_READY;
 800988e:	2301      	movs	r3, #1
 8009890:	f884 3021 	strb.w	r3, [r4, #33]	@ 0x21
}
 8009894:	bd10      	pop	{r4, pc}
 8009896:	bf00      	nop
 8009898:	58000800 	.word	0x58000800

0800989c <SPI_WaitFifoStateUntilTimeout.constprop.0>:
  * @param  State Fifo state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 800989c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098a0:	b082      	sub	sp, #8
{
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80098a2:	2300      	movs	r3, #0
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 80098a4:	460e      	mov	r6, r1
 80098a6:	4617      	mov	r7, r2
  __IO uint8_t  tmpreg8 = 0;
 80098a8:	f88d 3003 	strb.w	r3, [sp, #3]
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 80098ac:	4605      	mov	r5, r0

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80098ae:	f7fb ff5d 	bl	800576c <HAL_GetTick>
 80098b2:	4437      	add	r7, r6
 80098b4:	1a3f      	subs	r7, r7, r0
  tmp_tickstart = HAL_GetTick();
 80098b6:	f7fb ff59 	bl	800576c <HAL_GetTick>

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80098ba:	4b32      	ldr	r3, [pc, #200]	@ (8009984 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xe8>)
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80098bc:	682c      	ldr	r4, [r5, #0]
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80098c4:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80098c8:	0d1b      	lsrs	r3, r3, #20
 80098ca:	fb07 f303 	mul.w	r3, r7, r3
 80098ce:	3601      	adds	r6, #1
 80098d0:	9301      	str	r3, [sp, #4]

  while ((hspi->Instance->SR & Fifo) != State)
 80098d2:	d111      	bne.n	80098f8 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x5c>
 80098d4:	68a3      	ldr	r3, [r4, #8]
 80098d6:	f413 6fc0 	tst.w	r3, #1536	@ 0x600
 80098da:	d009      	beq.n	80098f0 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x54>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80098dc:	7b23      	ldrb	r3, [r4, #12]
 80098de:	b2db      	uxtb	r3, r3
 80098e0:	f88d 3003 	strb.w	r3, [sp, #3]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80098e4:	f89d 3003 	ldrb.w	r3, [sp, #3]
  while ((hspi->Instance->SR & Fifo) != State)
 80098e8:	68a3      	ldr	r3, [r4, #8]
 80098ea:	f413 6fc0 	tst.w	r3, #1536	@ 0x600
 80098ee:	d1f5      	bne.n	80098dc <SPI_WaitFifoStateUntilTimeout.constprop.0+0x40>
      }
      count--;
    }
  }

  return HAL_OK;
 80098f0:	2000      	movs	r0, #0
}
 80098f2:	b002      	add	sp, #8
 80098f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80098f8:	4680      	mov	r8, r0
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80098fa:	4623      	mov	r3, r4
 80098fc:	e013      	b.n	8009926 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x8a>
      tmpreg8 = *ptmpreg8;
 80098fe:	7b23      	ldrb	r3, [r4, #12]
 8009900:	b2db      	uxtb	r3, r3
 8009902:	f88d 3003 	strb.w	r3, [sp, #3]
      UNUSED(tmpreg8);
 8009906:	f89d 3003 	ldrb.w	r3, [sp, #3]
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800990a:	f7fb ff2f 	bl	800576c <HAL_GetTick>
 800990e:	eba0 0008 	sub.w	r0, r0, r8
 8009912:	42b8      	cmp	r0, r7
 8009914:	d20c      	bcs.n	8009930 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x94>
      if (count == 0U)
 8009916:	9a01      	ldr	r2, [sp, #4]
      count--;
 8009918:	9b01      	ldr	r3, [sp, #4]
 800991a:	3b01      	subs	r3, #1
        tmp_timeout = 0U;
 800991c:	2a00      	cmp	r2, #0
      count--;
 800991e:	9301      	str	r3, [sp, #4]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009920:	682b      	ldr	r3, [r5, #0]
        tmp_timeout = 0U;
 8009922:	bf08      	it	eq
 8009924:	2700      	moveq	r7, #0
  while ((hspi->Instance->SR & Fifo) != State)
 8009926:	689b      	ldr	r3, [r3, #8]
 8009928:	f413 6fc0 	tst.w	r3, #1536	@ 0x600
 800992c:	d1e7      	bne.n	80098fe <SPI_WaitFifoStateUntilTimeout.constprop.0+0x62>
 800992e:	e7df      	b.n	80098f0 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x54>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009930:	e9d5 3100 	ldrd	r3, r1, [r5]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009934:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009936:	f5b1 7f82 	cmp.w	r1, #260	@ 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800993a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800993e:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009940:	d013      	beq.n	800996a <SPI_WaitFifoStateUntilTimeout.constprop.0+0xce>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009942:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
 8009944:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 8009948:	d107      	bne.n	800995a <SPI_WaitFifoStateUntilTimeout.constprop.0+0xbe>
          SPI_RESET_CRC(hspi);
 800994a:	681a      	ldr	r2, [r3, #0]
 800994c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009950:	601a      	str	r2, [r3, #0]
 8009952:	681a      	ldr	r2, [r3, #0]
 8009954:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009958:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 800995a:	2201      	movs	r2, #1
        __HAL_UNLOCK(hspi);
 800995c:	2300      	movs	r3, #0
        hspi->State = HAL_SPI_STATE_READY;
 800995e:	f885 205d 	strb.w	r2, [r5, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8009962:	f885 305c 	strb.w	r3, [r5, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8009966:	2003      	movs	r0, #3
 8009968:	e7c3      	b.n	80098f2 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x56>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800996a:	68aa      	ldr	r2, [r5, #8]
 800996c:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 8009970:	d002      	beq.n	8009978 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xdc>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009972:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8009976:	d1e4      	bne.n	8009942 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xa6>
          __HAL_SPI_DISABLE(hspi);
 8009978:	681a      	ldr	r2, [r3, #0]
 800997a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800997e:	601a      	str	r2, [r3, #0]
 8009980:	e7df      	b.n	8009942 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xa6>
 8009982:	bf00      	nop
 8009984:	20000034 	.word	0x20000034

08009988 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800998c:	b085      	sub	sp, #20
  __IO uint8_t  tmpreg8 = 0;
 800998e:	2300      	movs	r3, #0
{
 8009990:	460e      	mov	r6, r1
  __IO uint8_t  tmpreg8 = 0;
 8009992:	f88d 3007 	strb.w	r3, [sp, #7]
 8009996:	eb01 0902 	add.w	r9, r1, r2
{
 800999a:	4617      	mov	r7, r2
 800999c:	4605      	mov	r5, r0
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800999e:	f7fb fee5 	bl	800576c <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80099a2:	f8df 8124 	ldr.w	r8, [pc, #292]	@ 8009ac8 <SPI_EndRxTxTransaction+0x140>
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80099a6:	eba9 0a00 	sub.w	sl, r9, r0
  tmp_tickstart = HAL_GetTick();
 80099aa:	f7fb fedf 	bl	800576c <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80099ae:	f8d8 3000 	ldr.w	r3, [r8]
  while ((hspi->Instance->SR & Fifo) != State)
 80099b2:	682c      	ldr	r4, [r5, #0]
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80099b4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80099b8:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80099bc:	0d1b      	lsrs	r3, r3, #20
 80099be:	fb0a f303 	mul.w	r3, sl, r3
 80099c2:	9302      	str	r3, [sp, #8]
  while ((hspi->Instance->SR & Fifo) != State)
 80099c4:	1c73      	adds	r3, r6, #1
 80099c6:	bf18      	it	ne
 80099c8:	4683      	movne	fp, r0
 80099ca:	d130      	bne.n	8009a2e <SPI_EndRxTxTransaction+0xa6>
 80099cc:	68a3      	ldr	r3, [r4, #8]
 80099ce:	f413 5fc0 	tst.w	r3, #6144	@ 0x1800
 80099d2:	d1fb      	bne.n	80099cc <SPI_EndRxTxTransaction+0x44>
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80099d4:	f7fb feca 	bl	800576c <HAL_GetTick>
 80099d8:	eba9 0900 	sub.w	r9, r9, r0
  tmp_tickstart = HAL_GetTick();
 80099dc:	f7fb fec6 	bl	800576c <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80099e0:	f8d8 3000 	ldr.w	r3, [r8]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80099e4:	682c      	ldr	r4, [r5, #0]
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80099e6:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 80099ea:	fb09 f303 	mul.w	r3, r9, r3
 80099ee:	1c71      	adds	r1, r6, #1
  tmp_tickstart = HAL_GetTick();
 80099f0:	4680      	mov	r8, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80099f2:	9303      	str	r3, [sp, #12]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80099f4:	d130      	bne.n	8009a58 <SPI_EndRxTxTransaction+0xd0>
 80099f6:	68a3      	ldr	r3, [r4, #8]
 80099f8:	061a      	lsls	r2, r3, #24
 80099fa:	d4fc      	bmi.n	80099f6 <SPI_EndRxTxTransaction+0x6e>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80099fc:	463a      	mov	r2, r7
 80099fe:	4631      	mov	r1, r6
 8009a00:	4628      	mov	r0, r5
 8009a02:	f7ff ff4b 	bl	800989c <SPI_WaitFifoStateUntilTimeout.constprop.0>
 8009a06:	bb58      	cbnz	r0, 8009a60 <SPI_EndRxTxTransaction+0xd8>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 8009a08:	b005      	add	sp, #20
 8009a0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009a0e:	f7fb fead 	bl	800576c <HAL_GetTick>
 8009a12:	eba0 000b 	sub.w	r0, r0, fp
 8009a16:	4582      	cmp	sl, r0
 8009a18:	d92a      	bls.n	8009a70 <SPI_EndRxTxTransaction+0xe8>
      if (count == 0U)
 8009a1a:	9a02      	ldr	r2, [sp, #8]
      count--;
 8009a1c:	9b02      	ldr	r3, [sp, #8]
  while ((hspi->Instance->SR & Fifo) != State)
 8009a1e:	682c      	ldr	r4, [r5, #0]
        tmp_timeout = 0U;
 8009a20:	2a00      	cmp	r2, #0
      count--;
 8009a22:	f103 33ff 	add.w	r3, r3, #4294967295
        tmp_timeout = 0U;
 8009a26:	bf08      	it	eq
 8009a28:	f04f 0a00 	moveq.w	sl, #0
      count--;
 8009a2c:	9302      	str	r3, [sp, #8]
  while ((hspi->Instance->SR & Fifo) != State)
 8009a2e:	68a3      	ldr	r3, [r4, #8]
 8009a30:	f413 5fc0 	tst.w	r3, #6144	@ 0x1800
 8009a34:	d1eb      	bne.n	8009a0e <SPI_EndRxTxTransaction+0x86>
 8009a36:	e7cd      	b.n	80099d4 <SPI_EndRxTxTransaction+0x4c>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009a38:	f7fb fe98 	bl	800576c <HAL_GetTick>
 8009a3c:	eba0 0008 	sub.w	r0, r0, r8
 8009a40:	4581      	cmp	r9, r0
 8009a42:	d915      	bls.n	8009a70 <SPI_EndRxTxTransaction+0xe8>
      if (count == 0U)
 8009a44:	9a03      	ldr	r2, [sp, #12]
      count--;
 8009a46:	9b03      	ldr	r3, [sp, #12]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009a48:	682c      	ldr	r4, [r5, #0]
        tmp_timeout = 0U;
 8009a4a:	2a00      	cmp	r2, #0
      count--;
 8009a4c:	f103 33ff 	add.w	r3, r3, #4294967295
        tmp_timeout = 0U;
 8009a50:	bf08      	it	eq
 8009a52:	f04f 0900 	moveq.w	r9, #0
      count--;
 8009a56:	9303      	str	r3, [sp, #12]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009a58:	68a3      	ldr	r3, [r4, #8]
 8009a5a:	061b      	lsls	r3, r3, #24
 8009a5c:	d4ec      	bmi.n	8009a38 <SPI_EndRxTxTransaction+0xb0>
 8009a5e:	e7cd      	b.n	80099fc <SPI_EndRxTxTransaction+0x74>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009a60:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 8009a62:	f043 0320 	orr.w	r3, r3, #32
 8009a66:	662b      	str	r3, [r5, #96]	@ 0x60
    return HAL_TIMEOUT;
 8009a68:	2003      	movs	r0, #3
}
 8009a6a:	b005      	add	sp, #20
 8009a6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009a70:	e9d5 3100 	ldrd	r3, r1, [r5]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009a74:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009a76:	f5b1 7f82 	cmp.w	r1, #260	@ 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009a7a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8009a7e:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009a80:	d016      	beq.n	8009ab0 <SPI_EndRxTxTransaction+0x128>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009a82:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
 8009a84:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 8009a88:	d107      	bne.n	8009a9a <SPI_EndRxTxTransaction+0x112>
          SPI_RESET_CRC(hspi);
 8009a8a:	681a      	ldr	r2, [r3, #0]
 8009a8c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009a90:	601a      	str	r2, [r3, #0]
 8009a92:	681a      	ldr	r2, [r3, #0]
 8009a94:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009a98:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8009a9a:	2301      	movs	r3, #1
 8009a9c:	f885 305d 	strb.w	r3, [r5, #93]	@ 0x5d
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009aa0:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
        __HAL_UNLOCK(hspi);
 8009aa2:	2200      	movs	r2, #0
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009aa4:	f043 0320 	orr.w	r3, r3, #32
        __HAL_UNLOCK(hspi);
 8009aa8:	f885 205c 	strb.w	r2, [r5, #92]	@ 0x5c
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009aac:	662b      	str	r3, [r5, #96]	@ 0x60
    return HAL_TIMEOUT;
 8009aae:	e7db      	b.n	8009a68 <SPI_EndRxTxTransaction+0xe0>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009ab0:	68aa      	ldr	r2, [r5, #8]
 8009ab2:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 8009ab6:	d002      	beq.n	8009abe <SPI_EndRxTxTransaction+0x136>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009ab8:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8009abc:	d1e1      	bne.n	8009a82 <SPI_EndRxTxTransaction+0xfa>
          __HAL_SPI_DISABLE(hspi);
 8009abe:	681a      	ldr	r2, [r3, #0]
 8009ac0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009ac4:	601a      	str	r2, [r3, #0]
 8009ac6:	e7dc      	b.n	8009a82 <SPI_EndRxTxTransaction+0xfa>
 8009ac8:	20000034 	.word	0x20000034

08009acc <HAL_SPI_Init>:
  if (hspi == NULL)
 8009acc:	2800      	cmp	r0, #0
 8009ace:	d074      	beq.n	8009bba <HAL_SPI_Init+0xee>
{
 8009ad0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ad4:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009ad6:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8009ad8:	2800      	cmp	r0, #0
 8009ada:	d053      	beq.n	8009b84 <HAL_SPI_Init+0xb8>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009adc:	2300      	movs	r3, #0
 8009ade:	e9c4 3304 	strd	r3, r3, [r4, #16]
  if (hspi->State == HAL_SPI_STATE_RESET)
 8009ae2:	f894 305d 	ldrb.w	r3, [r4, #93]	@ 0x5d
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009ae6:	2200      	movs	r2, #0
 8009ae8:	62a2      	str	r2, [r4, #40]	@ 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8009aea:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d057      	beq.n	8009ba2 <HAL_SPI_Init+0xd6>
  __HAL_SPI_DISABLE(hspi);
 8009af2:	6821      	ldr	r1, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009af4:	68e7      	ldr	r7, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 8009af6:	2302      	movs	r3, #2
 8009af8:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
  __HAL_SPI_DISABLE(hspi);
 8009afc:	680b      	ldr	r3, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009afe:	f5b7 6fe0 	cmp.w	r7, #1792	@ 0x700
  __HAL_SPI_DISABLE(hspi);
 8009b02:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009b06:	600b      	str	r3, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009b08:	d842      	bhi.n	8009b90 <HAL_SPI_Init+0xc4>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8009b0a:	d151      	bne.n	8009bb0 <HAL_SPI_Init+0xe4>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009b0c:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8009b0e:	f44f 5c80 	mov.w	ip, #4096	@ 0x1000
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009b12:	f405 5500 	and.w	r5, r5, #8192	@ 0x2000
 8009b16:	6862      	ldr	r2, [r4, #4]
 8009b18:	68a3      	ldr	r3, [r4, #8]
 8009b1a:	69a6      	ldr	r6, [r4, #24]
 8009b1c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8009b20:	f402 7282 	and.w	r2, r2, #260	@ 0x104
 8009b24:	431a      	orrs	r2, r3
 8009b26:	6923      	ldr	r3, [r4, #16]
 8009b28:	f003 0302 	and.w	r3, r3, #2
 8009b2c:	4313      	orrs	r3, r2
 8009b2e:	6962      	ldr	r2, [r4, #20]
 8009b30:	f002 0201 	and.w	r2, r2, #1
 8009b34:	431a      	orrs	r2, r3
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8009b36:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009b38:	f407 6770 	and.w	r7, r7, #3840	@ 0xf00
 8009b3c:	f003 0308 	and.w	r3, r3, #8
 8009b40:	ea43 0e07 	orr.w	lr, r3, r7
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009b44:	69e3      	ldr	r3, [r4, #28]
 8009b46:	f003 0838 	and.w	r8, r3, #56	@ 0x38
 8009b4a:	6a23      	ldr	r3, [r4, #32]
 8009b4c:	f003 0780 	and.w	r7, r3, #128	@ 0x80
 8009b50:	f406 7300 	and.w	r3, r6, #512	@ 0x200
 8009b54:	4313      	orrs	r3, r2
 8009b56:	ea43 0308 	orr.w	r3, r3, r8
 8009b5a:	433b      	orrs	r3, r7
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8009b5c:	0c36      	lsrs	r6, r6, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009b5e:	432b      	orrs	r3, r5
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8009b60:	f006 0604 	and.w	r6, r6, #4
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009b64:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8009b66:	f000 0010 	and.w	r0, r0, #16
 8009b6a:	ea4e 0306 	orr.w	r3, lr, r6
 8009b6e:	4303      	orrs	r3, r0
 8009b70:	ea43 030c 	orr.w	r3, r3, ip
 8009b74:	604b      	str	r3, [r1, #4]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009b76:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8009b78:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009b7a:	6620      	str	r0, [r4, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8009b7c:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
}
 8009b80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009b84:	6863      	ldr	r3, [r4, #4]
 8009b86:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009b8a:	d0aa      	beq.n	8009ae2 <HAL_SPI_Init+0x16>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009b8c:	61e0      	str	r0, [r4, #28]
 8009b8e:	e7a8      	b.n	8009ae2 <HAL_SPI_Init+0x16>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8009b90:	f5b7 6f70 	cmp.w	r7, #3840	@ 0xf00
 8009b94:	d113      	bne.n	8009bbe <HAL_SPI_Init+0xf2>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009b96:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8009b98:	f04f 0c00 	mov.w	ip, #0
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009b9c:	f405 5500 	and.w	r5, r5, #8192	@ 0x2000
 8009ba0:	e7b9      	b.n	8009b16 <HAL_SPI_Init+0x4a>
    HAL_SPI_MspInit(hspi);
 8009ba2:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 8009ba4:	f884 205c 	strb.w	r2, [r4, #92]	@ 0x5c
    HAL_SPI_MspInit(hspi);
 8009ba8:	f7f8 fc60 	bl	800246c <HAL_SPI_MspInit>
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8009bac:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8009bae:	e7a0      	b.n	8009af2 <HAL_SPI_Init+0x26>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8009bb0:	f44f 5c80 	mov.w	ip, #4096	@ 0x1000
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009bb4:	2500      	movs	r5, #0
 8009bb6:	62a5      	str	r5, [r4, #40]	@ 0x28
 8009bb8:	e7ad      	b.n	8009b16 <HAL_SPI_Init+0x4a>
    return HAL_ERROR;
 8009bba:	2001      	movs	r0, #1
}
 8009bbc:	4770      	bx	lr
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8009bbe:	f04f 0c00 	mov.w	ip, #0
 8009bc2:	e7f7      	b.n	8009bb4 <HAL_SPI_Init+0xe8>

08009bc4 <HAL_SPI_Transmit>:
{
 8009bc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009bc8:	4604      	mov	r4, r0
 8009bca:	b082      	sub	sp, #8
 8009bcc:	461d      	mov	r5, r3
 8009bce:	460f      	mov	r7, r1
 8009bd0:	4690      	mov	r8, r2
  tickstart = HAL_GetTick();
 8009bd2:	f7fb fdcb 	bl	800576c <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8009bd6:	f894 305d 	ldrb.w	r3, [r4, #93]	@ 0x5d
 8009bda:	2b01      	cmp	r3, #1
 8009bdc:	d15e      	bne.n	8009c9c <HAL_SPI_Transmit+0xd8>
  if ((pData == NULL) || (Size == 0U))
 8009bde:	4606      	mov	r6, r0
 8009be0:	b2d8      	uxtb	r0, r3
 8009be2:	2f00      	cmp	r7, #0
 8009be4:	d05b      	beq.n	8009c9e <HAL_SPI_Transmit+0xda>
 8009be6:	f1b8 0f00 	cmp.w	r8, #0
 8009bea:	d058      	beq.n	8009c9e <HAL_SPI_Transmit+0xda>
  __HAL_LOCK(hspi);
 8009bec:	f894 305c 	ldrb.w	r3, [r4, #92]	@ 0x5c
 8009bf0:	2b01      	cmp	r3, #1
 8009bf2:	d053      	beq.n	8009c9c <HAL_SPI_Transmit+0xd8>
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009bf4:	68a1      	ldr	r1, [r4, #8]
    __HAL_SPI_DISABLE(hspi);
 8009bf6:	6823      	ldr	r3, [r4, #0]
  __HAL_LOCK(hspi);
 8009bf8:	f884 005c 	strb.w	r0, [r4, #92]	@ 0x5c
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009bfc:	2200      	movs	r2, #0
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009bfe:	2003      	movs	r0, #3
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009c00:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009c04:	f884 005d 	strb.w	r0, [r4, #93]	@ 0x5d
  hspi->RxISR       = NULL;
 8009c08:	e9c4 2213 	strd	r2, r2, [r4, #76]	@ 0x4c
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009c0c:	6622      	str	r2, [r4, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8009c0e:	63a7      	str	r7, [r4, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8009c10:	f8a4 803e 	strh.w	r8, [r4, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8009c14:	f8a4 803c 	strh.w	r8, [r4, #60]	@ 0x3c
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009c18:	6422      	str	r2, [r4, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8009c1a:	f8a4 2044 	strh.w	r2, [r4, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8009c1e:	f8a4 2046 	strh.w	r2, [r4, #70]	@ 0x46
    __HAL_SPI_DISABLE(hspi);
 8009c22:	4618      	mov	r0, r3
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009c24:	d107      	bne.n	8009c36 <HAL_SPI_Transmit+0x72>
    __HAL_SPI_DISABLE(hspi);
 8009c26:	681a      	ldr	r2, [r3, #0]
 8009c28:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009c2c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8009c2e:	681a      	ldr	r2, [r3, #0]
 8009c30:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009c34:	601a      	str	r2, [r3, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009c36:	681a      	ldr	r2, [r3, #0]
 8009c38:	0652      	lsls	r2, r2, #25
 8009c3a:	d403      	bmi.n	8009c44 <HAL_SPI_Transmit+0x80>
    __HAL_SPI_ENABLE(hspi);
 8009c3c:	681a      	ldr	r2, [r3, #0]
 8009c3e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009c42:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009c44:	68e2      	ldr	r2, [r4, #12]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009c46:	6861      	ldr	r1, [r4, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009c48:	f5b2 6fe0 	cmp.w	r2, #1792	@ 0x700
 8009c4c:	d82a      	bhi.n	8009ca4 <HAL_SPI_Transmit+0xe0>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009c4e:	2900      	cmp	r1, #0
 8009c50:	f000 80bf 	beq.w	8009dd2 <HAL_SPI_Transmit+0x20e>
 8009c54:	f1b8 0f01 	cmp.w	r8, #1
 8009c58:	f000 80bb 	beq.w	8009dd2 <HAL_SPI_Transmit+0x20e>
    while (hspi->TxXferCount > 0U)
 8009c5c:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8009c5e:	b29b      	uxth	r3, r3
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d03f      	beq.n	8009ce4 <HAL_SPI_Transmit+0x120>
 8009c64:	1c68      	adds	r0, r5, #1
 8009c66:	d012      	beq.n	8009c8e <HAL_SPI_Transmit+0xca>
 8009c68:	e084      	b.n	8009d74 <HAL_SPI_Transmit+0x1b0>
        if (hspi->TxXferCount > 1U)
 8009c6a:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009c6c:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
        if (hspi->TxXferCount > 1U)
 8009c6e:	b29b      	uxth	r3, r3
 8009c70:	2b01      	cmp	r3, #1
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009c72:	4601      	mov	r1, r0
        if (hspi->TxXferCount > 1U)
 8009c74:	f240 809a 	bls.w	8009dac <HAL_SPI_Transmit+0x1e8>
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009c78:	f831 3b02 	ldrh.w	r3, [r1], #2
 8009c7c:	60d3      	str	r3, [r2, #12]
          hspi->TxXferCount -= 2U;
 8009c7e:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009c80:	63a1      	str	r1, [r4, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8009c82:	3b02      	subs	r3, #2
 8009c84:	b29b      	uxth	r3, r3
 8009c86:	87e3      	strh	r3, [r4, #62]	@ 0x3e
    while (hspi->TxXferCount > 0U)
 8009c88:	8fe1      	ldrh	r1, [r4, #62]	@ 0x3e
 8009c8a:	b289      	uxth	r1, r1
 8009c8c:	b351      	cbz	r1, 8009ce4 <HAL_SPI_Transmit+0x120>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009c8e:	6822      	ldr	r2, [r4, #0]
 8009c90:	6893      	ldr	r3, [r2, #8]
 8009c92:	0799      	lsls	r1, r3, #30
 8009c94:	d4e9      	bmi.n	8009c6a <HAL_SPI_Transmit+0xa6>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009c96:	f7fb fd69 	bl	800576c <HAL_GetTick>
 8009c9a:	e7f5      	b.n	8009c88 <HAL_SPI_Transmit+0xc4>
    return HAL_BUSY;
 8009c9c:	2002      	movs	r0, #2
}
 8009c9e:	b002      	add	sp, #8
 8009ca0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009ca4:	2900      	cmp	r1, #0
 8009ca6:	f000 808b 	beq.w	8009dc0 <HAL_SPI_Transmit+0x1fc>
 8009caa:	f1b8 0f01 	cmp.w	r8, #1
 8009cae:	f000 8087 	beq.w	8009dc0 <HAL_SPI_Transmit+0x1fc>
    while (hspi->TxXferCount > 0U)
 8009cb2:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 8009cb4:	b292      	uxth	r2, r2
 8009cb6:	b1aa      	cbz	r2, 8009ce4 <HAL_SPI_Transmit+0x120>
 8009cb8:	1c6a      	adds	r2, r5, #1
 8009cba:	d13f      	bne.n	8009d3c <HAL_SPI_Transmit+0x178>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009cbc:	689a      	ldr	r2, [r3, #8]
 8009cbe:	0797      	lsls	r7, r2, #30
 8009cc0:	d56c      	bpl.n	8009d9c <HAL_SPI_Transmit+0x1d8>
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009cc2:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8009cc4:	f832 1b02 	ldrh.w	r1, [r2], #2
 8009cc8:	60d9      	str	r1, [r3, #12]
        hspi->TxXferCount--;
 8009cca:	f8b4 c03e 	ldrh.w	ip, [r4, #62]	@ 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009cce:	63a2      	str	r2, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 8009cd0:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009cd4:	fa1f fc8c 	uxth.w	ip, ip
 8009cd8:	f8a4 c03e 	strh.w	ip, [r4, #62]	@ 0x3e
    while (hspi->TxXferCount > 0U)
 8009cdc:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 8009cde:	b292      	uxth	r2, r2
 8009ce0:	2a00      	cmp	r2, #0
 8009ce2:	d1eb      	bne.n	8009cbc <HAL_SPI_Transmit+0xf8>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009ce4:	4632      	mov	r2, r6
 8009ce6:	4629      	mov	r1, r5
 8009ce8:	4620      	mov	r0, r4
 8009cea:	f7ff fe4d 	bl	8009988 <SPI_EndRxTxTransaction>
 8009cee:	b108      	cbz	r0, 8009cf4 <HAL_SPI_Transmit+0x130>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009cf0:	2320      	movs	r3, #32
 8009cf2:	6623      	str	r3, [r4, #96]	@ 0x60
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009cf4:	68a3      	ldr	r3, [r4, #8]
 8009cf6:	b933      	cbnz	r3, 8009d06 <HAL_SPI_Transmit+0x142>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009cf8:	6822      	ldr	r2, [r4, #0]
 8009cfa:	9301      	str	r3, [sp, #4]
 8009cfc:	68d3      	ldr	r3, [r2, #12]
 8009cfe:	9301      	str	r3, [sp, #4]
 8009d00:	6893      	ldr	r3, [r2, #8]
 8009d02:	9301      	str	r3, [sp, #4]
 8009d04:	9b01      	ldr	r3, [sp, #4]
  hspi->State = HAL_SPI_STATE_READY;
 8009d06:	2301      	movs	r3, #1
 8009d08:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009d0c:	6e20      	ldr	r0, [r4, #96]	@ 0x60
  __HAL_UNLOCK(hspi);
 8009d0e:	2300      	movs	r3, #0
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009d10:	1ac0      	subs	r0, r0, r3
 8009d12:	bf18      	it	ne
 8009d14:	2001      	movne	r0, #1
  __HAL_UNLOCK(hspi);
 8009d16:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
}
 8009d1a:	b002      	add	sp, #8
 8009d1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009d20:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8009d22:	f832 3b02 	ldrh.w	r3, [r2], #2
 8009d26:	60c3      	str	r3, [r0, #12]
        hspi->TxXferCount--;
 8009d28:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009d2a:	63a2      	str	r2, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 8009d2c:	3b01      	subs	r3, #1
 8009d2e:	b29b      	uxth	r3, r3
 8009d30:	87e3      	strh	r3, [r4, #62]	@ 0x3e
    while (hspi->TxXferCount > 0U)
 8009d32:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8009d34:	b29b      	uxth	r3, r3
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d0d4      	beq.n	8009ce4 <HAL_SPI_Transmit+0x120>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009d3a:	6820      	ldr	r0, [r4, #0]
 8009d3c:	6883      	ldr	r3, [r0, #8]
 8009d3e:	0799      	lsls	r1, r3, #30
 8009d40:	d4ee      	bmi.n	8009d20 <HAL_SPI_Transmit+0x15c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009d42:	f7fb fd13 	bl	800576c <HAL_GetTick>
 8009d46:	1b83      	subs	r3, r0, r6
 8009d48:	42ab      	cmp	r3, r5
 8009d4a:	d3f2      	bcc.n	8009d32 <HAL_SPI_Transmit+0x16e>
          hspi->State = HAL_SPI_STATE_READY;
 8009d4c:	2301      	movs	r3, #1
 8009d4e:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8009d52:	2300      	movs	r3, #0
 8009d54:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8009d58:	2003      	movs	r0, #3
 8009d5a:	e7a0      	b.n	8009c9e <HAL_SPI_Transmit+0xda>
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009d5c:	f831 2b02 	ldrh.w	r2, [r1], #2
 8009d60:	60da      	str	r2, [r3, #12]
          hspi->TxXferCount -= 2U;
 8009d62:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009d64:	63a1      	str	r1, [r4, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8009d66:	3b02      	subs	r3, #2
 8009d68:	b29b      	uxth	r3, r3
 8009d6a:	87e3      	strh	r3, [r4, #62]	@ 0x3e
    while (hspi->TxXferCount > 0U)
 8009d6c:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8009d6e:	b29b      	uxth	r3, r3
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d0b7      	beq.n	8009ce4 <HAL_SPI_Transmit+0x120>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009d74:	6823      	ldr	r3, [r4, #0]
 8009d76:	689a      	ldr	r2, [r3, #8]
 8009d78:	0792      	lsls	r2, r2, #30
 8009d7a:	d541      	bpl.n	8009e00 <HAL_SPI_Transmit+0x23c>
        if (hspi->TxXferCount > 1U)
 8009d7c:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009d7e:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
        if (hspi->TxXferCount > 1U)
 8009d80:	b292      	uxth	r2, r2
 8009d82:	2a01      	cmp	r2, #1
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009d84:	4601      	mov	r1, r0
        if (hspi->TxXferCount > 1U)
 8009d86:	d8e9      	bhi.n	8009d5c <HAL_SPI_Transmit+0x198>
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8009d88:	7802      	ldrb	r2, [r0, #0]
 8009d8a:	731a      	strb	r2, [r3, #12]
          hspi->TxXferCount--;
 8009d8c:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
          hspi->pTxBuffPtr++;
 8009d8e:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
          hspi->TxXferCount--;
 8009d90:	3b01      	subs	r3, #1
          hspi->pTxBuffPtr++;
 8009d92:	3201      	adds	r2, #1
          hspi->TxXferCount--;
 8009d94:	b29b      	uxth	r3, r3
          hspi->pTxBuffPtr++;
 8009d96:	63a2      	str	r2, [r4, #56]	@ 0x38
          hspi->TxXferCount--;
 8009d98:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 8009d9a:	e7e7      	b.n	8009d6c <HAL_SPI_Transmit+0x1a8>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009d9c:	f7fb fce6 	bl	800576c <HAL_GetTick>
    while (hspi->TxXferCount > 0U)
 8009da0:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8009da2:	b29b      	uxth	r3, r3
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d09d      	beq.n	8009ce4 <HAL_SPI_Transmit+0x120>
 8009da8:	6823      	ldr	r3, [r4, #0]
 8009daa:	e787      	b.n	8009cbc <HAL_SPI_Transmit+0xf8>
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8009dac:	7803      	ldrb	r3, [r0, #0]
 8009dae:	7313      	strb	r3, [r2, #12]
          hspi->TxXferCount--;
 8009db0:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
          hspi->pTxBuffPtr++;
 8009db2:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
          hspi->TxXferCount--;
 8009db4:	3b01      	subs	r3, #1
          hspi->pTxBuffPtr++;
 8009db6:	3201      	adds	r2, #1
          hspi->TxXferCount--;
 8009db8:	b29b      	uxth	r3, r3
          hspi->pTxBuffPtr++;
 8009dba:	63a2      	str	r2, [r4, #56]	@ 0x38
          hspi->TxXferCount--;
 8009dbc:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 8009dbe:	e763      	b.n	8009c88 <HAL_SPI_Transmit+0xc4>
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009dc0:	f837 2b02 	ldrh.w	r2, [r7], #2
 8009dc4:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8009dc6:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009dc8:	63a7      	str	r7, [r4, #56]	@ 0x38
      hspi->TxXferCount--;
 8009dca:	3a01      	subs	r2, #1
 8009dcc:	b292      	uxth	r2, r2
 8009dce:	87e2      	strh	r2, [r4, #62]	@ 0x3e
 8009dd0:	e76f      	b.n	8009cb2 <HAL_SPI_Transmit+0xee>
      if (hspi->TxXferCount > 1U)
 8009dd2:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 8009dd4:	b292      	uxth	r2, r2
 8009dd6:	2a01      	cmp	r2, #1
 8009dd8:	d908      	bls.n	8009dec <HAL_SPI_Transmit+0x228>
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009dda:	f837 2b02 	ldrh.w	r2, [r7], #2
 8009dde:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount -= 2U;
 8009de0:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009de2:	63a7      	str	r7, [r4, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8009de4:	3b02      	subs	r3, #2
 8009de6:	b29b      	uxth	r3, r3
 8009de8:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 8009dea:	e737      	b.n	8009c5c <HAL_SPI_Transmit+0x98>
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8009dec:	783a      	ldrb	r2, [r7, #0]
 8009dee:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 8009df0:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
        hspi->pTxBuffPtr ++;
 8009df2:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 8009df4:	3b01      	subs	r3, #1
        hspi->pTxBuffPtr ++;
 8009df6:	3201      	adds	r2, #1
        hspi->TxXferCount--;
 8009df8:	b29b      	uxth	r3, r3
        hspi->pTxBuffPtr ++;
 8009dfa:	63a2      	str	r2, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 8009dfc:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 8009dfe:	e72d      	b.n	8009c5c <HAL_SPI_Transmit+0x98>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009e00:	f7fb fcb4 	bl	800576c <HAL_GetTick>
 8009e04:	1b83      	subs	r3, r0, r6
 8009e06:	42ab      	cmp	r3, r5
 8009e08:	d3b0      	bcc.n	8009d6c <HAL_SPI_Transmit+0x1a8>
 8009e0a:	e79f      	b.n	8009d4c <HAL_SPI_Transmit+0x188>

08009e0c <HAL_SPI_TransmitReceive>:
{
 8009e0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009e10:	4604      	mov	r4, r0
 8009e12:	4691      	mov	r9, r2
 8009e14:	461f      	mov	r7, r3
 8009e16:	9e08      	ldr	r6, [sp, #32]
 8009e18:	4688      	mov	r8, r1
  tickstart = HAL_GetTick();
 8009e1a:	f7fb fca7 	bl	800576c <HAL_GetTick>
  tmp_state           = hspi->State;
 8009e1e:	f894 305d 	ldrb.w	r3, [r4, #93]	@ 0x5d
  tmp_mode            = hspi->Init.Mode;
 8009e22:	6862      	ldr	r2, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009e24:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 8009e26:	4605      	mov	r5, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009e28:	d00b      	beq.n	8009e42 <HAL_SPI_TransmitReceive+0x36>
 8009e2a:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 8009e2e:	f040 808d 	bne.w	8009f4c <HAL_SPI_TransmitReceive+0x140>
 8009e32:	b2d9      	uxtb	r1, r3
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8009e34:	68a3      	ldr	r3, [r4, #8]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	f040 8088 	bne.w	8009f4c <HAL_SPI_TransmitReceive+0x140>
 8009e3c:	2904      	cmp	r1, #4
 8009e3e:	f040 8085 	bne.w	8009f4c <HAL_SPI_TransmitReceive+0x140>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009e42:	f1b8 0f00 	cmp.w	r8, #0
 8009e46:	f000 8146 	beq.w	800a0d6 <HAL_SPI_TransmitReceive+0x2ca>
 8009e4a:	f1b9 0f00 	cmp.w	r9, #0
 8009e4e:	f000 8142 	beq.w	800a0d6 <HAL_SPI_TransmitReceive+0x2ca>
 8009e52:	2f00      	cmp	r7, #0
 8009e54:	f000 813f 	beq.w	800a0d6 <HAL_SPI_TransmitReceive+0x2ca>
  __HAL_LOCK(hspi);
 8009e58:	f894 305c 	ldrb.w	r3, [r4, #92]	@ 0x5c
 8009e5c:	2b01      	cmp	r3, #1
 8009e5e:	d075      	beq.n	8009f4c <HAL_SPI_TransmitReceive+0x140>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009e60:	f894 305d 	ldrb.w	r3, [r4, #93]	@ 0x5d
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009e64:	f8c4 9040 	str.w	r9, [r4, #64]	@ 0x40
  __HAL_LOCK(hspi);
 8009e68:	2101      	movs	r1, #1
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009e6a:	2b04      	cmp	r3, #4
  __HAL_LOCK(hspi);
 8009e6c:	f884 105c 	strb.w	r1, [r4, #92]	@ 0x5c
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8009e70:	68e1      	ldr	r1, [r4, #12]
  hspi->RxXferSize  = Size;
 8009e72:	f8a4 7044 	strh.w	r7, [r4, #68]	@ 0x44
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009e76:	bf1c      	itt	ne
 8009e78:	2305      	movne	r3, #5
 8009e7a:	f884 305d 	strbne.w	r3, [r4, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009e7e:	2300      	movs	r3, #0
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8009e80:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009e84:	6623      	str	r3, [r4, #96]	@ 0x60
  hspi->RxISR       = NULL;
 8009e86:	e9c4 3313 	strd	r3, r3, [r4, #76]	@ 0x4c
  hspi->RxXferCount = Size;
 8009e8a:	f8a4 7046 	strh.w	r7, [r4, #70]	@ 0x46
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009e8e:	6823      	ldr	r3, [r4, #0]
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8009e90:	f8c4 8038 	str.w	r8, [r4, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8009e94:	87a7      	strh	r7, [r4, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8009e96:	87e7      	strh	r7, [r4, #62]	@ 0x3e
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8009e98:	d95b      	bls.n	8009f52 <HAL_SPI_TransmitReceive+0x146>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009e9a:	6859      	ldr	r1, [r3, #4]
 8009e9c:	f421 5180 	bic.w	r1, r1, #4096	@ 0x1000
 8009ea0:	6059      	str	r1, [r3, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009ea2:	6819      	ldr	r1, [r3, #0]
 8009ea4:	0648      	lsls	r0, r1, #25
 8009ea6:	d403      	bmi.n	8009eb0 <HAL_SPI_TransmitReceive+0xa4>
    __HAL_SPI_ENABLE(hspi);
 8009ea8:	6819      	ldr	r1, [r3, #0]
 8009eaa:	f041 0140 	orr.w	r1, r1, #64	@ 0x40
 8009eae:	6019      	str	r1, [r3, #0]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009eb0:	2a00      	cmp	r2, #0
 8009eb2:	f000 80dc 	beq.w	800a06e <HAL_SPI_TransmitReceive+0x262>
 8009eb6:	2f01      	cmp	r7, #1
 8009eb8:	f000 80d9 	beq.w	800a06e <HAL_SPI_TransmitReceive+0x262>
 8009ebc:	1c73      	adds	r3, r6, #1
        txallowed = 1U;
 8009ebe:	f04f 0701 	mov.w	r7, #1
 8009ec2:	d028      	beq.n	8009f16 <HAL_SPI_TransmitReceive+0x10a>
 8009ec4:	e0bc      	b.n	800a040 <HAL_SPI_TransmitReceive+0x234>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009ec6:	6822      	ldr	r2, [r4, #0]
 8009ec8:	6893      	ldr	r3, [r2, #8]
 8009eca:	0798      	lsls	r0, r3, #30
 8009ecc:	d50d      	bpl.n	8009eea <HAL_SPI_TransmitReceive+0xde>
 8009ece:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8009ed0:	b29b      	uxth	r3, r3
 8009ed2:	b153      	cbz	r3, 8009eea <HAL_SPI_TransmitReceive+0xde>
 8009ed4:	b147      	cbz	r7, 8009ee8 <HAL_SPI_TransmitReceive+0xdc>
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009ed6:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8009ed8:	f833 1b02 	ldrh.w	r1, [r3], #2
 8009edc:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009ede:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 8009ee0:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8009ee2:	3b01      	subs	r3, #1
 8009ee4:	b29b      	uxth	r3, r3
 8009ee6:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 8009ee8:	2700      	movs	r7, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009eea:	6893      	ldr	r3, [r2, #8]
 8009eec:	f013 0301 	ands.w	r3, r3, #1
 8009ef0:	d00f      	beq.n	8009f12 <HAL_SPI_TransmitReceive+0x106>
 8009ef2:	f8b4 1046 	ldrh.w	r1, [r4, #70]	@ 0x46
 8009ef6:	b289      	uxth	r1, r1
 8009ef8:	b159      	cbz	r1, 8009f12 <HAL_SPI_TransmitReceive+0x106>
        txallowed = 1U;
 8009efa:	461f      	mov	r7, r3
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009efc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009efe:	68d2      	ldr	r2, [r2, #12]
 8009f00:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009f04:	6423      	str	r3, [r4, #64]	@ 0x40
        hspi->RxXferCount--;
 8009f06:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8009f0a:	3b01      	subs	r3, #1
 8009f0c:	b29b      	uxth	r3, r3
 8009f0e:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009f12:	f7fb fc2b 	bl	800576c <HAL_GetTick>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009f16:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8009f18:	b29b      	uxth	r3, r3
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d1d3      	bne.n	8009ec6 <HAL_SPI_TransmitReceive+0xba>
 8009f1e:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8009f22:	b29b      	uxth	r3, r3
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d1ce      	bne.n	8009ec6 <HAL_SPI_TransmitReceive+0xba>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009f28:	462a      	mov	r2, r5
 8009f2a:	4631      	mov	r1, r6
 8009f2c:	4620      	mov	r0, r4
 8009f2e:	f7ff fd2b 	bl	8009988 <SPI_EndRxTxTransaction>
 8009f32:	2800      	cmp	r0, #0
 8009f34:	f040 80ca 	bne.w	800a0cc <HAL_SPI_TransmitReceive+0x2c0>
  hspi->State = HAL_SPI_STATE_READY;
 8009f38:	2301      	movs	r3, #1
 8009f3a:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009f3e:	6e23      	ldr	r3, [r4, #96]	@ 0x60
  __HAL_UNLOCK(hspi);
 8009f40:	f884 005c 	strb.w	r0, [r4, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009f44:	1e18      	subs	r0, r3, #0
 8009f46:	bf18      	it	ne
 8009f48:	2001      	movne	r0, #1
 8009f4a:	e000      	b.n	8009f4e <HAL_SPI_TransmitReceive+0x142>
    return HAL_BUSY;
 8009f4c:	2002      	movs	r0, #2
}
 8009f4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8009f52:	2f01      	cmp	r7, #1
 8009f54:	f000 80d9 	beq.w	800a10a <HAL_SPI_TransmitReceive+0x2fe>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009f58:	6859      	ldr	r1, [r3, #4]
 8009f5a:	f421 5180 	bic.w	r1, r1, #4096	@ 0x1000
 8009f5e:	6059      	str	r1, [r3, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009f60:	6819      	ldr	r1, [r3, #0]
 8009f62:	0649      	lsls	r1, r1, #25
 8009f64:	d403      	bmi.n	8009f6e <HAL_SPI_TransmitReceive+0x162>
    __HAL_SPI_ENABLE(hspi);
 8009f66:	6819      	ldr	r1, [r3, #0]
 8009f68:	f041 0140 	orr.w	r1, r1, #64	@ 0x40
 8009f6c:	6019      	str	r1, [r3, #0]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009f6e:	b96a      	cbnz	r2, 8009f8c <HAL_SPI_TransmitReceive+0x180>
      if (hspi->TxXferCount > 1U)
 8009f70:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 8009f72:	b292      	uxth	r2, r2
 8009f74:	2a01      	cmp	r2, #1
 8009f76:	f240 80b0 	bls.w	800a0da <HAL_SPI_TransmitReceive+0x2ce>
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009f7a:	4642      	mov	r2, r8
 8009f7c:	f832 1b02 	ldrh.w	r1, [r2], #2
 8009f80:	60d9      	str	r1, [r3, #12]
        hspi->TxXferCount -= 2U;
 8009f82:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009f84:	63a2      	str	r2, [r4, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8009f86:	3b02      	subs	r3, #2
 8009f88:	b29b      	uxth	r3, r3
 8009f8a:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 8009f8c:	2701      	movs	r7, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009f8e:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8009f90:	b29b      	uxth	r3, r3
 8009f92:	b923      	cbnz	r3, 8009f9e <HAL_SPI_TransmitReceive+0x192>
 8009f94:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8009f98:	b29b      	uxth	r3, r3
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d0c4      	beq.n	8009f28 <HAL_SPI_TransmitReceive+0x11c>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009f9e:	6822      	ldr	r2, [r4, #0]
 8009fa0:	6893      	ldr	r3, [r2, #8]
 8009fa2:	0799      	lsls	r1, r3, #30
 8009fa4:	d505      	bpl.n	8009fb2 <HAL_SPI_TransmitReceive+0x1a6>
 8009fa6:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8009fa8:	b29b      	uxth	r3, r3
 8009faa:	b113      	cbz	r3, 8009fb2 <HAL_SPI_TransmitReceive+0x1a6>
 8009fac:	2f00      	cmp	r7, #0
 8009fae:	d174      	bne.n	800a09a <HAL_SPI_TransmitReceive+0x28e>
        txallowed = 0U;
 8009fb0:	2700      	movs	r7, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009fb2:	6893      	ldr	r3, [r2, #8]
 8009fb4:	f013 0301 	ands.w	r3, r3, #1
 8009fb8:	d019      	beq.n	8009fee <HAL_SPI_TransmitReceive+0x1e2>
 8009fba:	f8b4 1046 	ldrh.w	r1, [r4, #70]	@ 0x46
 8009fbe:	b289      	uxth	r1, r1
 8009fc0:	b1a9      	cbz	r1, 8009fee <HAL_SPI_TransmitReceive+0x1e2>
        if (hspi->RxXferCount > 1U)
 8009fc2:	f8b4 0046 	ldrh.w	r0, [r4, #70]	@ 0x46
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009fc6:	6c21      	ldr	r1, [r4, #64]	@ 0x40
        if (hspi->RxXferCount > 1U)
 8009fc8:	b280      	uxth	r0, r0
 8009fca:	2801      	cmp	r0, #1
 8009fcc:	d959      	bls.n	800a082 <HAL_SPI_TransmitReceive+0x276>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009fce:	68d0      	ldr	r0, [r2, #12]
 8009fd0:	f821 0b02 	strh.w	r0, [r1], #2
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8009fd4:	6421      	str	r1, [r4, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8009fd6:	f8b4 1046 	ldrh.w	r1, [r4, #70]	@ 0x46
 8009fda:	3902      	subs	r1, #2
 8009fdc:	b289      	uxth	r1, r1
 8009fde:	f8a4 1046 	strh.w	r1, [r4, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8009fe2:	f8b4 1046 	ldrh.w	r1, [r4, #70]	@ 0x46
 8009fe6:	b289      	uxth	r1, r1
 8009fe8:	2901      	cmp	r1, #1
 8009fea:	d93b      	bls.n	800a064 <HAL_SPI_TransmitReceive+0x258>
        txallowed = 1U;
 8009fec:	461f      	mov	r7, r3
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009fee:	f7fb fbbd 	bl	800576c <HAL_GetTick>
 8009ff2:	1b40      	subs	r0, r0, r5
 8009ff4:	42b0      	cmp	r0, r6
 8009ff6:	d3ca      	bcc.n	8009f8e <HAL_SPI_TransmitReceive+0x182>
 8009ff8:	1c73      	adds	r3, r6, #1
 8009ffa:	d0c8      	beq.n	8009f8e <HAL_SPI_TransmitReceive+0x182>
        hspi->State = HAL_SPI_STATE_READY;
 8009ffc:	2301      	movs	r3, #1
 8009ffe:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800a002:	2300      	movs	r3, #0
 800a004:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800a008:	2003      	movs	r0, #3
}
 800a00a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a00e:	b147      	cbz	r7, 800a022 <HAL_SPI_TransmitReceive+0x216>
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800a010:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800a012:	f833 1b02 	ldrh.w	r1, [r3], #2
 800a016:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a018:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 800a01a:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800a01c:	3b01      	subs	r3, #1
 800a01e:	b29b      	uxth	r3, r3
 800a020:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 0U;
 800a022:	2700      	movs	r7, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a024:	6893      	ldr	r3, [r2, #8]
 800a026:	f013 0301 	ands.w	r3, r3, #1
 800a02a:	d004      	beq.n	800a036 <HAL_SPI_TransmitReceive+0x22a>
 800a02c:	f8b4 1046 	ldrh.w	r1, [r4, #70]	@ 0x46
 800a030:	b289      	uxth	r1, r1
 800a032:	2900      	cmp	r1, #0
 800a034:	d15c      	bne.n	800a0f0 <HAL_SPI_TransmitReceive+0x2e4>
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800a036:	f7fb fb99 	bl	800576c <HAL_GetTick>
 800a03a:	1b40      	subs	r0, r0, r5
 800a03c:	42b0      	cmp	r0, r6
 800a03e:	d2dd      	bcs.n	8009ffc <HAL_SPI_TransmitReceive+0x1f0>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a040:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800a042:	b29b      	uxth	r3, r3
 800a044:	b92b      	cbnz	r3, 800a052 <HAL_SPI_TransmitReceive+0x246>
 800a046:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 800a04a:	b29b      	uxth	r3, r3
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	f43f af6b 	beq.w	8009f28 <HAL_SPI_TransmitReceive+0x11c>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a052:	6822      	ldr	r2, [r4, #0]
 800a054:	6893      	ldr	r3, [r2, #8]
 800a056:	0799      	lsls	r1, r3, #30
 800a058:	d5e4      	bpl.n	800a024 <HAL_SPI_TransmitReceive+0x218>
 800a05a:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800a05c:	b29b      	uxth	r3, r3
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d0e0      	beq.n	800a024 <HAL_SPI_TransmitReceive+0x218>
 800a062:	e7d4      	b.n	800a00e <HAL_SPI_TransmitReceive+0x202>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a064:	6851      	ldr	r1, [r2, #4]
 800a066:	f441 5180 	orr.w	r1, r1, #4096	@ 0x1000
 800a06a:	6051      	str	r1, [r2, #4]
 800a06c:	e7be      	b.n	8009fec <HAL_SPI_TransmitReceive+0x1e0>
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800a06e:	4642      	mov	r2, r8
 800a070:	f832 1b02 	ldrh.w	r1, [r2], #2
 800a074:	60d9      	str	r1, [r3, #12]
      hspi->TxXferCount--;
 800a076:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a078:	63a2      	str	r2, [r4, #56]	@ 0x38
      hspi->TxXferCount--;
 800a07a:	3b01      	subs	r3, #1
 800a07c:	b29b      	uxth	r3, r3
 800a07e:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 800a080:	e71c      	b.n	8009ebc <HAL_SPI_TransmitReceive+0xb0>
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800a082:	7b12      	ldrb	r2, [r2, #12]
 800a084:	700a      	strb	r2, [r1, #0]
          hspi->pRxBuffPtr++;
 800a086:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800a088:	3201      	adds	r2, #1
 800a08a:	6422      	str	r2, [r4, #64]	@ 0x40
          hspi->RxXferCount--;
 800a08c:	f8b4 2046 	ldrh.w	r2, [r4, #70]	@ 0x46
 800a090:	3a01      	subs	r2, #1
 800a092:	b292      	uxth	r2, r2
 800a094:	f8a4 2046 	strh.w	r2, [r4, #70]	@ 0x46
 800a098:	e7a8      	b.n	8009fec <HAL_SPI_TransmitReceive+0x1e0>
        if (hspi->TxXferCount > 1U)
 800a09a:	8fe1      	ldrh	r1, [r4, #62]	@ 0x3e
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800a09c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
        if (hspi->TxXferCount > 1U)
 800a09e:	b289      	uxth	r1, r1
 800a0a0:	2901      	cmp	r1, #1
 800a0a2:	d908      	bls.n	800a0b6 <HAL_SPI_TransmitReceive+0x2aa>
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800a0a4:	f833 1b02 	ldrh.w	r1, [r3], #2
 800a0a8:	60d1      	str	r1, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a0aa:	63a3      	str	r3, [r4, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800a0ac:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800a0ae:	3b02      	subs	r3, #2
 800a0b0:	b29b      	uxth	r3, r3
 800a0b2:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 800a0b4:	e77c      	b.n	8009fb0 <HAL_SPI_TransmitReceive+0x1a4>
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800a0b6:	781b      	ldrb	r3, [r3, #0]
 800a0b8:	7313      	strb	r3, [r2, #12]
          hspi->TxXferCount--;
 800a0ba:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
          hspi->pTxBuffPtr++;
 800a0bc:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
          hspi->TxXferCount--;
 800a0be:	3b01      	subs	r3, #1
          hspi->pTxBuffPtr++;
 800a0c0:	3201      	adds	r2, #1
          hspi->TxXferCount--;
 800a0c2:	b29b      	uxth	r3, r3
          hspi->pTxBuffPtr++;
 800a0c4:	63a2      	str	r2, [r4, #56]	@ 0x38
          hspi->TxXferCount--;
 800a0c6:	87e3      	strh	r3, [r4, #62]	@ 0x3e
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a0c8:	6822      	ldr	r2, [r4, #0]
 800a0ca:	e771      	b.n	8009fb0 <HAL_SPI_TransmitReceive+0x1a4>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a0cc:	2220      	movs	r2, #32
    __HAL_UNLOCK(hspi);
 800a0ce:	2300      	movs	r3, #0
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a0d0:	6622      	str	r2, [r4, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 800a0d2:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
    return HAL_ERROR;
 800a0d6:	2001      	movs	r0, #1
 800a0d8:	e739      	b.n	8009f4e <HAL_SPI_TransmitReceive+0x142>
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800a0da:	f898 2000 	ldrb.w	r2, [r8]
 800a0de:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 800a0e0:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
        hspi->pTxBuffPtr++;
 800a0e2:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 800a0e4:	3b01      	subs	r3, #1
        hspi->pTxBuffPtr++;
 800a0e6:	3201      	adds	r2, #1
        hspi->TxXferCount--;
 800a0e8:	b29b      	uxth	r3, r3
        hspi->pTxBuffPtr++;
 800a0ea:	63a2      	str	r2, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 800a0ec:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 800a0ee:	e74d      	b.n	8009f8c <HAL_SPI_TransmitReceive+0x180>
        txallowed = 1U;
 800a0f0:	461f      	mov	r7, r3
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a0f2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a0f4:	68d2      	ldr	r2, [r2, #12]
 800a0f6:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a0fa:	6423      	str	r3, [r4, #64]	@ 0x40
        hspi->RxXferCount--;
 800a0fc:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 800a100:	3b01      	subs	r3, #1
 800a102:	b29b      	uxth	r3, r3
 800a104:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
        txallowed = 1U;
 800a108:	e795      	b.n	800a036 <HAL_SPI_TransmitReceive+0x22a>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a10a:	685a      	ldr	r2, [r3, #4]
 800a10c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800a110:	605a      	str	r2, [r3, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a112:	681a      	ldr	r2, [r3, #0]
 800a114:	0650      	lsls	r0, r2, #25
 800a116:	f53f af2b 	bmi.w	8009f70 <HAL_SPI_TransmitReceive+0x164>
    __HAL_SPI_ENABLE(hspi);
 800a11a:	681a      	ldr	r2, [r3, #0]
 800a11c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a120:	601a      	str	r2, [r3, #0]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a122:	e725      	b.n	8009f70 <HAL_SPI_TransmitReceive+0x164>

0800a124 <HAL_SPI_Receive>:
{
 800a124:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (hspi->State != HAL_SPI_STATE_READY)
 800a128:	f890 605d 	ldrb.w	r6, [r0, #93]	@ 0x5d
 800a12c:	2e01      	cmp	r6, #1
{
 800a12e:	b084      	sub	sp, #16
  if (hspi->State != HAL_SPI_STATE_READY)
 800a130:	f040 8094 	bne.w	800a25c <HAL_SPI_Receive+0x138>
  if ((pData == NULL) || (Size == 0U))
 800a134:	461d      	mov	r5, r3
 800a136:	4688      	mov	r8, r1
 800a138:	b2f3      	uxtb	r3, r6
 800a13a:	2900      	cmp	r1, #0
 800a13c:	f000 808a 	beq.w	800a254 <HAL_SPI_Receive+0x130>
 800a140:	4617      	mov	r7, r2
 800a142:	2a00      	cmp	r2, #0
 800a144:	f000 8086 	beq.w	800a254 <HAL_SPI_Receive+0x130>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800a148:	6843      	ldr	r3, [r0, #4]
 800a14a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a14e:	4604      	mov	r4, r0
 800a150:	d103      	bne.n	800a15a <HAL_SPI_Receive+0x36>
 800a152:	6883      	ldr	r3, [r0, #8]
 800a154:	2b00      	cmp	r3, #0
 800a156:	f000 8122 	beq.w	800a39e <HAL_SPI_Receive+0x27a>
  tickstart = HAL_GetTick();
 800a15a:	f7fb fb07 	bl	800576c <HAL_GetTick>
  __HAL_LOCK(hspi);
 800a15e:	f894 305c 	ldrb.w	r3, [r4, #92]	@ 0x5c
 800a162:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 800a164:	4606      	mov	r6, r0
  __HAL_LOCK(hspi);
 800a166:	d079      	beq.n	800a25c <HAL_SPI_Receive+0x138>
 800a168:	2001      	movs	r0, #1
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a16a:	68e2      	ldr	r2, [r4, #12]
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a16c:	6821      	ldr	r1, [r4, #0]
  __HAL_LOCK(hspi);
 800a16e:	f884 005c 	strb.w	r0, [r4, #92]	@ 0x5c
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a172:	2300      	movs	r3, #0
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800a174:	2004      	movs	r0, #4
 800a176:	f884 005d 	strb.w	r0, [r4, #93]	@ 0x5d
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a17a:	f5b2 6fe0 	cmp.w	r2, #1792	@ 0x700
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a17e:	6623      	str	r3, [r4, #96]	@ 0x60
  hspi->RxXferCount = Size;
 800a180:	f8a4 7046 	strh.w	r7, [r4, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 800a184:	87e3      	strh	r3, [r4, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 800a186:	e9c4 3313 	strd	r3, r3, [r4, #76]	@ 0x4c
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800a18a:	63a3      	str	r3, [r4, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 800a18c:	87a3      	strh	r3, [r4, #60]	@ 0x3c
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a18e:	6848      	ldr	r0, [r1, #4]
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800a190:	f8c4 8040 	str.w	r8, [r4, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 800a194:	f8a4 7044 	strh.w	r7, [r4, #68]	@ 0x44
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a198:	460b      	mov	r3, r1
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a19a:	d964      	bls.n	800a266 <HAL_SPI_Receive+0x142>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a19c:	f420 5080 	bic.w	r0, r0, #4096	@ 0x1000
 800a1a0:	6048      	str	r0, [r1, #4]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a1a2:	68a0      	ldr	r0, [r4, #8]
 800a1a4:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800a1a8:	f000 80de 	beq.w	800a368 <HAL_SPI_Receive+0x244>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a1ac:	6808      	ldr	r0, [r1, #0]
 800a1ae:	0640      	lsls	r0, r0, #25
 800a1b0:	d464      	bmi.n	800a27c <HAL_SPI_Receive+0x158>
    __HAL_SPI_ENABLE(hspi);
 800a1b2:	6808      	ldr	r0, [r1, #0]
 800a1b4:	f040 0040 	orr.w	r0, r0, #64	@ 0x40
 800a1b8:	6008      	str	r0, [r1, #0]
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800a1ba:	f5b2 6fe0 	cmp.w	r2, #1792	@ 0x700
 800a1be:	d85d      	bhi.n	800a27c <HAL_SPI_Receive+0x158>
    while (hspi->RxXferCount > 0U)
 800a1c0:	f8b4 2046 	ldrh.w	r2, [r4, #70]	@ 0x46
 800a1c4:	b292      	uxth	r2, r2
 800a1c6:	b1ea      	cbz	r2, 800a204 <HAL_SPI_Receive+0xe0>
 800a1c8:	1c68      	adds	r0, r5, #1
 800a1ca:	d011      	beq.n	800a1f0 <HAL_SPI_Receive+0xcc>
 800a1cc:	e0bc      	b.n	800a348 <HAL_SPI_Receive+0x224>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800a1ce:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800a1d0:	7b1b      	ldrb	r3, [r3, #12]
 800a1d2:	7013      	strb	r3, [r2, #0]
        hspi->RxXferCount--;
 800a1d4:	f8b4 2046 	ldrh.w	r2, [r4, #70]	@ 0x46
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800a1d8:	6c21      	ldr	r1, [r4, #64]	@ 0x40
        hspi->RxXferCount--;
 800a1da:	3a01      	subs	r2, #1
 800a1dc:	b292      	uxth	r2, r2
 800a1de:	f8a4 2046 	strh.w	r2, [r4, #70]	@ 0x46
    while (hspi->RxXferCount > 0U)
 800a1e2:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800a1e6:	3101      	adds	r1, #1
    while (hspi->RxXferCount > 0U)
 800a1e8:	b29b      	uxth	r3, r3
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800a1ea:	6421      	str	r1, [r4, #64]	@ 0x40
    while (hspi->RxXferCount > 0U)
 800a1ec:	b153      	cbz	r3, 800a204 <HAL_SPI_Receive+0xe0>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800a1ee:	6823      	ldr	r3, [r4, #0]
 800a1f0:	689a      	ldr	r2, [r3, #8]
 800a1f2:	07d1      	lsls	r1, r2, #31
 800a1f4:	d4eb      	bmi.n	800a1ce <HAL_SPI_Receive+0xaa>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a1f6:	f7fb fab9 	bl	800576c <HAL_GetTick>
    while (hspi->RxXferCount > 0U)
 800a1fa:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 800a1fe:	b29b      	uxth	r3, r3
 800a200:	2b00      	cmp	r3, #0
 800a202:	d1f4      	bne.n	800a1ee <HAL_SPI_Receive+0xca>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a204:	6863      	ldr	r3, [r4, #4]
 800a206:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a20a:	f000 80ba 	beq.w	800a382 <HAL_SPI_Receive+0x25e>
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800a20e:	f7fb faad 	bl	800576c <HAL_GetTick>
 800a212:	19af      	adds	r7, r5, r6
 800a214:	1a3f      	subs	r7, r7, r0
  tmp_tickstart = HAL_GetTick();
 800a216:	f7fb faa9 	bl	800576c <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800a21a:	4b86      	ldr	r3, [pc, #536]	@ (800a434 <HAL_SPI_Receive+0x310>)
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a21c:	6822      	ldr	r2, [r4, #0]
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	f3c3 33cb 	ubfx	r3, r3, #15, #12
  tmp_tickstart = HAL_GetTick();
 800a224:	4680      	mov	r8, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800a226:	fb07 f303 	mul.w	r3, r7, r3
 800a22a:	1c68      	adds	r0, r5, #1
 800a22c:	9303      	str	r3, [sp, #12]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a22e:	d174      	bne.n	800a31a <HAL_SPI_Receive+0x1f6>
 800a230:	6893      	ldr	r3, [r2, #8]
 800a232:	0619      	lsls	r1, r3, #24
 800a234:	d4fc      	bmi.n	800a230 <HAL_SPI_Receive+0x10c>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a236:	6863      	ldr	r3, [r4, #4]
 800a238:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a23c:	f000 80b9 	beq.w	800a3b2 <HAL_SPI_Receive+0x28e>
  hspi->State = HAL_SPI_STATE_READY;
 800a240:	2301      	movs	r3, #1
 800a242:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a246:	6e23      	ldr	r3, [r4, #96]	@ 0x60
  __HAL_UNLOCK(hspi);
 800a248:	2200      	movs	r2, #0
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a24a:	1a9b      	subs	r3, r3, r2
  __HAL_UNLOCK(hspi);
 800a24c:	f884 205c 	strb.w	r2, [r4, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a250:	bf18      	it	ne
 800a252:	2301      	movne	r3, #1
}
 800a254:	4618      	mov	r0, r3
 800a256:	b004      	add	sp, #16
 800a258:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 800a25c:	2302      	movs	r3, #2
}
 800a25e:	4618      	mov	r0, r3
 800a260:	b004      	add	sp, #16
 800a262:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a266:	f440 5080 	orr.w	r0, r0, #4096	@ 0x1000
 800a26a:	6048      	str	r0, [r1, #4]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a26c:	68a0      	ldr	r0, [r4, #8]
 800a26e:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800a272:	d079      	beq.n	800a368 <HAL_SPI_Receive+0x244>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a274:	6808      	ldr	r0, [r1, #0]
 800a276:	0647      	lsls	r7, r0, #25
 800a278:	d59b      	bpl.n	800a1b2 <HAL_SPI_Receive+0x8e>
 800a27a:	e7a1      	b.n	800a1c0 <HAL_SPI_Receive+0x9c>
    while (hspi->RxXferCount > 0U)
 800a27c:	f8b4 2046 	ldrh.w	r2, [r4, #70]	@ 0x46
 800a280:	b292      	uxth	r2, r2
 800a282:	2a00      	cmp	r2, #0
 800a284:	d0be      	beq.n	800a204 <HAL_SPI_Receive+0xe0>
 800a286:	1c6a      	adds	r2, r5, #1
 800a288:	d12f      	bne.n	800a2ea <HAL_SPI_Receive+0x1c6>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800a28a:	688b      	ldr	r3, [r1, #8]
 800a28c:	07df      	lsls	r7, r3, #31
 800a28e:	d512      	bpl.n	800a2b6 <HAL_SPI_Receive+0x192>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a290:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a292:	68ca      	ldr	r2, [r1, #12]
 800a294:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->RxXferCount--;
 800a298:	f8b4 2046 	ldrh.w	r2, [r4, #70]	@ 0x46
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a29c:	6423      	str	r3, [r4, #64]	@ 0x40
        hspi->RxXferCount--;
 800a29e:	3a01      	subs	r2, #1
 800a2a0:	b292      	uxth	r2, r2
 800a2a2:	f8a4 2046 	strh.w	r2, [r4, #70]	@ 0x46
    while (hspi->RxXferCount > 0U)
 800a2a6:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 800a2aa:	b29b      	uxth	r3, r3
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d0a9      	beq.n	800a204 <HAL_SPI_Receive+0xe0>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800a2b0:	688b      	ldr	r3, [r1, #8]
 800a2b2:	07df      	lsls	r7, r3, #31
 800a2b4:	d4ec      	bmi.n	800a290 <HAL_SPI_Receive+0x16c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a2b6:	f7fb fa59 	bl	800576c <HAL_GetTick>
    while (hspi->RxXferCount > 0U)
 800a2ba:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 800a2be:	b29b      	uxth	r3, r3
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d09f      	beq.n	800a204 <HAL_SPI_Receive+0xe0>
 800a2c4:	6821      	ldr	r1, [r4, #0]
 800a2c6:	e7e0      	b.n	800a28a <HAL_SPI_Receive+0x166>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a2c8:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800a2ca:	68db      	ldr	r3, [r3, #12]
 800a2cc:	f822 3b02 	strh.w	r3, [r2], #2
        hspi->RxXferCount--;
 800a2d0:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a2d4:	6422      	str	r2, [r4, #64]	@ 0x40
        hspi->RxXferCount--;
 800a2d6:	3b01      	subs	r3, #1
 800a2d8:	b29b      	uxth	r3, r3
 800a2da:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
    while (hspi->RxXferCount > 0U)
 800a2de:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 800a2e2:	b29b      	uxth	r3, r3
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d08d      	beq.n	800a204 <HAL_SPI_Receive+0xe0>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800a2e8:	6823      	ldr	r3, [r4, #0]
 800a2ea:	689a      	ldr	r2, [r3, #8]
 800a2ec:	07d7      	lsls	r7, r2, #31
 800a2ee:	d4eb      	bmi.n	800a2c8 <HAL_SPI_Receive+0x1a4>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a2f0:	f7fb fa3c 	bl	800576c <HAL_GetTick>
 800a2f4:	1b83      	subs	r3, r0, r6
 800a2f6:	42ab      	cmp	r3, r5
 800a2f8:	d3f1      	bcc.n	800a2de <HAL_SPI_Receive+0x1ba>
 800a2fa:	e02d      	b.n	800a358 <HAL_SPI_Receive+0x234>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a2fc:	f7fb fa36 	bl	800576c <HAL_GetTick>
 800a300:	eba0 0008 	sub.w	r0, r0, r8
 800a304:	42b8      	cmp	r0, r7
 800a306:	d26b      	bcs.n	800a3e0 <HAL_SPI_Receive+0x2bc>
      if (count == 0U)
 800a308:	9a03      	ldr	r2, [sp, #12]
      count--;
 800a30a:	9b03      	ldr	r3, [sp, #12]
        tmp_timeout = 0U;
 800a30c:	2a00      	cmp	r2, #0
      count--;
 800a30e:	f103 33ff 	add.w	r3, r3, #4294967295
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a312:	6822      	ldr	r2, [r4, #0]
      count--;
 800a314:	9303      	str	r3, [sp, #12]
        tmp_timeout = 0U;
 800a316:	bf08      	it	eq
 800a318:	2700      	moveq	r7, #0
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a31a:	6893      	ldr	r3, [r2, #8]
 800a31c:	061b      	lsls	r3, r3, #24
 800a31e:	d4ed      	bmi.n	800a2fc <HAL_SPI_Receive+0x1d8>
 800a320:	e789      	b.n	800a236 <HAL_SPI_Receive+0x112>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800a322:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800a324:	7b1b      	ldrb	r3, [r3, #12]
 800a326:	7013      	strb	r3, [r2, #0]
        hspi->RxXferCount--;
 800a328:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800a32c:	6c22      	ldr	r2, [r4, #64]	@ 0x40
        hspi->RxXferCount--;
 800a32e:	3b01      	subs	r3, #1
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800a330:	3201      	adds	r2, #1
        hspi->RxXferCount--;
 800a332:	b29b      	uxth	r3, r3
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800a334:	6422      	str	r2, [r4, #64]	@ 0x40
        hspi->RxXferCount--;
 800a336:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
    while (hspi->RxXferCount > 0U)
 800a33a:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 800a33e:	b29b      	uxth	r3, r3
 800a340:	2b00      	cmp	r3, #0
 800a342:	f43f af5f 	beq.w	800a204 <HAL_SPI_Receive+0xe0>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800a346:	6823      	ldr	r3, [r4, #0]
 800a348:	689a      	ldr	r2, [r3, #8]
 800a34a:	07d2      	lsls	r2, r2, #31
 800a34c:	d4e9      	bmi.n	800a322 <HAL_SPI_Receive+0x1fe>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a34e:	f7fb fa0d 	bl	800576c <HAL_GetTick>
 800a352:	1b83      	subs	r3, r0, r6
 800a354:	42ab      	cmp	r3, r5
 800a356:	d3f0      	bcc.n	800a33a <HAL_SPI_Receive+0x216>
          hspi->State = HAL_SPI_STATE_READY;
 800a358:	2301      	movs	r3, #1
 800a35a:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800a35e:	2300      	movs	r3, #0
 800a360:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800a364:	2303      	movs	r3, #3
 800a366:	e775      	b.n	800a254 <HAL_SPI_Receive+0x130>
    __HAL_SPI_DISABLE(hspi);
 800a368:	6808      	ldr	r0, [r1, #0]
 800a36a:	f020 0040 	bic.w	r0, r0, #64	@ 0x40
 800a36e:	6008      	str	r0, [r1, #0]
    SPI_1LINE_RX(hspi);
 800a370:	6808      	ldr	r0, [r1, #0]
 800a372:	f420 4080 	bic.w	r0, r0, #16384	@ 0x4000
 800a376:	6008      	str	r0, [r1, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a378:	6808      	ldr	r0, [r1, #0]
 800a37a:	0640      	lsls	r0, r0, #25
 800a37c:	f53f af1d 	bmi.w	800a1ba <HAL_SPI_Receive+0x96>
 800a380:	e717      	b.n	800a1b2 <HAL_SPI_Receive+0x8e>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a382:	68a3      	ldr	r3, [r4, #8]
 800a384:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a388:	d003      	beq.n	800a392 <HAL_SPI_Receive+0x26e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a38a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a38e:	f47f af3e 	bne.w	800a20e <HAL_SPI_Receive+0xea>
    __HAL_SPI_DISABLE(hspi);
 800a392:	6822      	ldr	r2, [r4, #0]
 800a394:	6813      	ldr	r3, [r2, #0]
 800a396:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a39a:	6013      	str	r3, [r2, #0]
 800a39c:	e737      	b.n	800a20e <HAL_SPI_Receive+0xea>
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800a39e:	9500      	str	r5, [sp, #0]
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800a3a0:	2504      	movs	r5, #4
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800a3a2:	4613      	mov	r3, r2
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800a3a4:	f880 505d 	strb.w	r5, [r0, #93]	@ 0x5d
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800a3a8:	460a      	mov	r2, r1
 800a3aa:	f7ff fd2f 	bl	8009e0c <HAL_SPI_TransmitReceive>
 800a3ae:	4603      	mov	r3, r0
 800a3b0:	e750      	b.n	800a254 <HAL_SPI_Receive+0x130>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a3b2:	68a3      	ldr	r3, [r4, #8]
 800a3b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a3b8:	d003      	beq.n	800a3c2 <HAL_SPI_Receive+0x29e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a3ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a3be:	f47f af3f 	bne.w	800a240 <HAL_SPI_Receive+0x11c>
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a3c2:	4632      	mov	r2, r6
 800a3c4:	4629      	mov	r1, r5
 800a3c6:	4620      	mov	r0, r4
 800a3c8:	f7ff fa68 	bl	800989c <SPI_WaitFifoStateUntilTimeout.constprop.0>
 800a3cc:	2800      	cmp	r0, #0
 800a3ce:	f43f af37 	beq.w	800a240 <HAL_SPI_Receive+0x11c>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a3d2:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 800a3d4:	f043 0320 	orr.w	r3, r3, #32
 800a3d8:	6623      	str	r3, [r4, #96]	@ 0x60
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a3da:	2320      	movs	r3, #32
 800a3dc:	6623      	str	r3, [r4, #96]	@ 0x60
 800a3de:	e72f      	b.n	800a240 <HAL_SPI_Receive+0x11c>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a3e0:	e9d4 3100 	ldrd	r3, r1, [r4]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a3e4:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a3e6:	f5b1 7f82 	cmp.w	r1, #260	@ 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a3ea:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800a3ee:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a3f0:	d013      	beq.n	800a41a <HAL_SPI_Receive+0x2f6>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a3f2:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800a3f4:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 800a3f8:	d107      	bne.n	800a40a <HAL_SPI_Receive+0x2e6>
          SPI_RESET_CRC(hspi);
 800a3fa:	681a      	ldr	r2, [r3, #0]
 800a3fc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800a400:	601a      	str	r2, [r3, #0]
 800a402:	681a      	ldr	r2, [r3, #0]
 800a404:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a408:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 800a40a:	2301      	movs	r3, #1
 800a40c:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a410:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 800a412:	f043 0320 	orr.w	r3, r3, #32
 800a416:	6623      	str	r3, [r4, #96]	@ 0x60
    return HAL_TIMEOUT;
 800a418:	e7df      	b.n	800a3da <HAL_SPI_Receive+0x2b6>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a41a:	68a2      	ldr	r2, [r4, #8]
 800a41c:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 800a420:	d002      	beq.n	800a428 <HAL_SPI_Receive+0x304>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a422:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 800a426:	d1e4      	bne.n	800a3f2 <HAL_SPI_Receive+0x2ce>
          __HAL_SPI_DISABLE(hspi);
 800a428:	681a      	ldr	r2, [r3, #0]
 800a42a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a42e:	601a      	str	r2, [r3, #0]
 800a430:	e7df      	b.n	800a3f2 <HAL_SPI_Receive+0x2ce>
 800a432:	bf00      	nop
 800a434:	20000034 	.word	0x20000034

0800a438 <HAL_SPI_ErrorCallback>:
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
 800a438:	4770      	bx	lr
 800a43a:	bf00      	nop

0800a43c <HAL_SPI_IRQHandler>:
  uint32_t itsource = hspi->Instance->CR2;
 800a43c:	6802      	ldr	r2, [r0, #0]
{
 800a43e:	b510      	push	{r4, lr}
  uint32_t itsource = hspi->Instance->CR2;
 800a440:	6851      	ldr	r1, [r2, #4]
  uint32_t itflag   = hspi->Instance->SR;
 800a442:	6893      	ldr	r3, [r2, #8]
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800a444:	f003 0c41 	and.w	ip, r3, #65	@ 0x41
 800a448:	f1bc 0f01 	cmp.w	ip, #1
{
 800a44c:	b084      	sub	sp, #16
 800a44e:	4604      	mov	r4, r0
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800a450:	d05a      	beq.n	800a508 <HAL_SPI_IRQHandler+0xcc>
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800a452:	0798      	lsls	r0, r3, #30
 800a454:	d501      	bpl.n	800a45a <HAL_SPI_IRQHandler+0x1e>
 800a456:	0608      	lsls	r0, r1, #24
 800a458:	d45e      	bmi.n	800a518 <HAL_SPI_IRQHandler+0xdc>
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800a45a:	f413 7fb0 	tst.w	r3, #352	@ 0x160
 800a45e:	d051      	beq.n	800a504 <HAL_SPI_IRQHandler+0xc8>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800a460:	0688      	lsls	r0, r1, #26
 800a462:	d54f      	bpl.n	800a504 <HAL_SPI_IRQHandler+0xc8>
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800a464:	0658      	lsls	r0, r3, #25
 800a466:	d50e      	bpl.n	800a486 <HAL_SPI_IRQHandler+0x4a>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800a468:	f894 005d 	ldrb.w	r0, [r4, #93]	@ 0x5d
 800a46c:	2803      	cmp	r0, #3
 800a46e:	d05d      	beq.n	800a52c <HAL_SPI_IRQHandler+0xf0>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800a470:	6e20      	ldr	r0, [r4, #96]	@ 0x60
 800a472:	f040 0004 	orr.w	r0, r0, #4
 800a476:	6620      	str	r0, [r4, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a478:	2000      	movs	r0, #0
 800a47a:	9000      	str	r0, [sp, #0]
 800a47c:	68d0      	ldr	r0, [r2, #12]
 800a47e:	9000      	str	r0, [sp, #0]
 800a480:	6890      	ldr	r0, [r2, #8]
 800a482:	9000      	str	r0, [sp, #0]
 800a484:	9800      	ldr	r0, [sp, #0]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800a486:	0698      	lsls	r0, r3, #26
 800a488:	d50c      	bpl.n	800a4a4 <HAL_SPI_IRQHandler+0x68>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800a48a:	6e20      	ldr	r0, [r4, #96]	@ 0x60
 800a48c:	f040 0001 	orr.w	r0, r0, #1
 800a490:	6620      	str	r0, [r4, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a492:	2000      	movs	r0, #0
 800a494:	9002      	str	r0, [sp, #8]
 800a496:	6890      	ldr	r0, [r2, #8]
 800a498:	9002      	str	r0, [sp, #8]
 800a49a:	6810      	ldr	r0, [r2, #0]
 800a49c:	f020 0040 	bic.w	r0, r0, #64	@ 0x40
 800a4a0:	6010      	str	r0, [r2, #0]
 800a4a2:	9802      	ldr	r0, [sp, #8]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800a4a4:	05d8      	lsls	r0, r3, #23
 800a4a6:	d508      	bpl.n	800a4ba <HAL_SPI_IRQHandler+0x7e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800a4a8:	6e23      	ldr	r3, [r4, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a4aa:	2000      	movs	r0, #0
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800a4ac:	f043 0308 	orr.w	r3, r3, #8
 800a4b0:	6623      	str	r3, [r4, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a4b2:	9003      	str	r0, [sp, #12]
 800a4b4:	6893      	ldr	r3, [r2, #8]
 800a4b6:	9303      	str	r3, [sp, #12]
 800a4b8:	9b03      	ldr	r3, [sp, #12]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a4ba:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 800a4bc:	b313      	cbz	r3, 800a504 <HAL_SPI_IRQHandler+0xc8>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800a4be:	6853      	ldr	r3, [r2, #4]
 800a4c0:	f023 03e0 	bic.w	r3, r3, #224	@ 0xe0
 800a4c4:	6053      	str	r3, [r2, #4]
      hspi->State = HAL_SPI_STATE_READY;
 800a4c6:	2001      	movs	r0, #1
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800a4c8:	078b      	lsls	r3, r1, #30
      hspi->State = HAL_SPI_STATE_READY;
 800a4ca:	f884 005d 	strb.w	r0, [r4, #93]	@ 0x5d
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800a4ce:	d029      	beq.n	800a524 <HAL_SPI_IRQHandler+0xe8>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800a4d0:	6853      	ldr	r3, [r2, #4]
        if (hspi->hdmarx != NULL)
 800a4d2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800a4d4:	f023 0303 	bic.w	r3, r3, #3
 800a4d8:	6053      	str	r3, [r2, #4]
        if (hspi->hdmarx != NULL)
 800a4da:	b140      	cbz	r0, 800a4ee <HAL_SPI_IRQHandler+0xb2>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800a4dc:	4b17      	ldr	r3, [pc, #92]	@ (800a53c <HAL_SPI_IRQHandler+0x100>)
 800a4de:	6383      	str	r3, [r0, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800a4e0:	f7fb fedc 	bl	800629c <HAL_DMA_Abort_IT>
 800a4e4:	b118      	cbz	r0, 800a4ee <HAL_SPI_IRQHandler+0xb2>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a4e6:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 800a4e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a4ec:	6623      	str	r3, [r4, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 800a4ee:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 800a4f0:	b140      	cbz	r0, 800a504 <HAL_SPI_IRQHandler+0xc8>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800a4f2:	4b12      	ldr	r3, [pc, #72]	@ (800a53c <HAL_SPI_IRQHandler+0x100>)
 800a4f4:	6383      	str	r3, [r0, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800a4f6:	f7fb fed1 	bl	800629c <HAL_DMA_Abort_IT>
 800a4fa:	b118      	cbz	r0, 800a504 <HAL_SPI_IRQHandler+0xc8>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a4fc:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 800a4fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a502:	6623      	str	r3, [r4, #96]	@ 0x60
}
 800a504:	b004      	add	sp, #16
 800a506:	bd10      	pop	{r4, pc}
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800a508:	f011 0f40 	tst.w	r1, #64	@ 0x40
 800a50c:	d0a1      	beq.n	800a452 <HAL_SPI_IRQHandler+0x16>
    hspi->RxISR(hspi);
 800a50e:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
}
 800a510:	b004      	add	sp, #16
 800a512:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    hspi->TxISR(hspi);
 800a516:	4718      	bx	r3
 800a518:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800a51a:	4620      	mov	r0, r4
}
 800a51c:	b004      	add	sp, #16
 800a51e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    hspi->TxISR(hspi);
 800a522:	4718      	bx	r3
        HAL_SPI_ErrorCallback(hspi);
 800a524:	4620      	mov	r0, r4
 800a526:	f7ff ff87 	bl	800a438 <HAL_SPI_ErrorCallback>
 800a52a:	e7eb      	b.n	800a504 <HAL_SPI_IRQHandler+0xc8>
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a52c:	2300      	movs	r3, #0
 800a52e:	9301      	str	r3, [sp, #4]
 800a530:	68d3      	ldr	r3, [r2, #12]
 800a532:	9301      	str	r3, [sp, #4]
 800a534:	6893      	ldr	r3, [r2, #8]
 800a536:	9301      	str	r3, [sp, #4]
 800a538:	9b01      	ldr	r3, [sp, #4]
        return;
 800a53a:	e7e3      	b.n	800a504 <HAL_SPI_IRQHandler+0xc8>
 800a53c:	0800a541 	.word	0x0800a541

0800a540 <SPI_DMAAbortOnError>:
{
 800a540:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800a542:	6a80      	ldr	r0, [r0, #40]	@ 0x28
  hspi->RxXferCount = 0U;
 800a544:	2300      	movs	r3, #0
 800a546:	f8a0 3046 	strh.w	r3, [r0, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 800a54a:	87c3      	strh	r3, [r0, #62]	@ 0x3e
  HAL_SPI_ErrorCallback(hspi);
 800a54c:	f7ff ff74 	bl	800a438 <HAL_SPI_ErrorCallback>
}
 800a550:	bd08      	pop	{r3, pc}
 800a552:	bf00      	nop

0800a554 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a554:	2800      	cmp	r0, #0
 800a556:	d065      	beq.n	800a624 <HAL_TIM_Base_Init+0xd0>
{
 800a558:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a55a:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800a55e:	4604      	mov	r4, r0
 800a560:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800a564:	2b00      	cmp	r3, #0
 800a566:	d04a      	beq.n	800a5fe <HAL_TIM_Base_Init+0xaa>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a568:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a56a:	4e2f      	ldr	r6, [pc, #188]	@ (800a628 <HAL_TIM_Base_Init+0xd4>)

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a56c:	6860      	ldr	r0, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a56e:	68e5      	ldr	r5, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a570:	69a1      	ldr	r1, [r4, #24]
  htim->State = HAL_TIM_STATE_BUSY;
 800a572:	2302      	movs	r3, #2
 800a574:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a578:	42b2      	cmp	r2, r6
  tmpcr1 = TIMx->CR1;
 800a57a:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a57c:	d00f      	beq.n	800a59e <HAL_TIM_Base_Init+0x4a>
 800a57e:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 800a582:	d041      	beq.n	800a608 <HAL_TIM_Base_Init+0xb4>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a584:	4e29      	ldr	r6, [pc, #164]	@ (800a62c <HAL_TIM_Base_Init+0xd8>)
 800a586:	42b2      	cmp	r2, r6
 800a588:	d00d      	beq.n	800a5a6 <HAL_TIM_Base_Init+0x52>
 800a58a:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 800a58e:	42b2      	cmp	r2, r6
 800a590:	d009      	beq.n	800a5a6 <HAL_TIM_Base_Init+0x52>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a592:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a596:	62d5      	str	r5, [r2, #44]	@ 0x2c
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a598:	4319      	orrs	r1, r3
  TIMx->PSC = Structure->Prescaler;
 800a59a:	6290      	str	r0, [r2, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a59c:	e00e      	b.n	800a5bc <HAL_TIM_Base_Init+0x68>
    tmpcr1 |= Structure->CounterMode;
 800a59e:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a5a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 800a5a4:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a5a6:	6926      	ldr	r6, [r4, #16]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a5a8:	62d5      	str	r5, [r2, #44]	@ 0x2c
    tmpcr1 &= ~TIM_CR1_CKD;
 800a5aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a5ae:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a5b0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
  TIMx->PSC = Structure->Prescaler;
 800a5b4:	6290      	str	r0, [r2, #40]	@ 0x28
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a5b6:	4319      	orrs	r1, r3
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a5b8:	6963      	ldr	r3, [r4, #20]
 800a5ba:	6313      	str	r3, [r2, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800a5bc:	6810      	ldr	r0, [r2, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a5be:	2301      	movs	r3, #1
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800a5c0:	f040 0004 	orr.w	r0, r0, #4
 800a5c4:	6010      	str	r0, [r2, #0]
  TIMx->EGR = TIM_EGR_UG;
 800a5c6:	6153      	str	r3, [r2, #20]

  TIMx->CR1 = tmpcr1;
 800a5c8:	6011      	str	r1, [r2, #0]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a5ca:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a5ce:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 800a5d2:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 800a5d6:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 800a5da:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 800a5de:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a5e2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a5e6:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800a5ea:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800a5ee:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 800a5f2:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 800a5f6:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 800a5fa:	2000      	movs	r0, #0
}
 800a5fc:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 800a5fe:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 800a602:	f7fa fd9d 	bl	8005140 <HAL_TIM_Base_MspInit>
 800a606:	e7af      	b.n	800a568 <HAL_TIM_Base_Init+0x14>
    tmpcr1 |= Structure->CounterMode;
 800a608:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a60a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 800a60e:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a610:	6926      	ldr	r6, [r4, #16]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a612:	62d5      	str	r5, [r2, #44]	@ 0x2c
    tmpcr1 &= ~TIM_CR1_CKD;
 800a614:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a618:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a61a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a61e:	4319      	orrs	r1, r3
  TIMx->PSC = Structure->Prescaler;
 800a620:	6290      	str	r0, [r2, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a622:	e7cb      	b.n	800a5bc <HAL_TIM_Base_Init+0x68>
    return HAL_ERROR;
 800a624:	2001      	movs	r0, #1
}
 800a626:	4770      	bx	lr
 800a628:	40012c00 	.word	0x40012c00
 800a62c:	40014400 	.word	0x40014400

0800a630 <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 800a630:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800a634:	2b01      	cmp	r3, #1
 800a636:	d10f      	bne.n	800a658 <HAL_TIM_Base_Start+0x28>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a638:	6803      	ldr	r3, [r0, #0]
 800a63a:	4a0d      	ldr	r2, [pc, #52]	@ (800a670 <HAL_TIM_Base_Start+0x40>)
  htim->State = HAL_TIM_STATE_BUSY;
 800a63c:	2102      	movs	r1, #2
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a63e:	4293      	cmp	r3, r2
  htim->State = HAL_TIM_STATE_BUSY;
 800a640:	f880 103d 	strb.w	r1, [r0, #61]	@ 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a644:	d00a      	beq.n	800a65c <HAL_TIM_Base_Start+0x2c>
 800a646:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a64a:	d007      	beq.n	800a65c <HAL_TIM_Base_Start+0x2c>
      __HAL_TIM_ENABLE(htim);
 800a64c:	681a      	ldr	r2, [r3, #0]
 800a64e:	f042 0201 	orr.w	r2, r2, #1
 800a652:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800a654:	2000      	movs	r0, #0
 800a656:	4770      	bx	lr
    return HAL_ERROR;
 800a658:	2001      	movs	r0, #1
}
 800a65a:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a65c:	6899      	ldr	r1, [r3, #8]
 800a65e:	4a05      	ldr	r2, [pc, #20]	@ (800a674 <HAL_TIM_Base_Start+0x44>)
 800a660:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a662:	2a06      	cmp	r2, #6
 800a664:	d0f6      	beq.n	800a654 <HAL_TIM_Base_Start+0x24>
 800a666:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 800a66a:	d1ef      	bne.n	800a64c <HAL_TIM_Base_Start+0x1c>
 800a66c:	e7f2      	b.n	800a654 <HAL_TIM_Base_Start+0x24>
 800a66e:	bf00      	nop
 800a670:	40012c00 	.word	0x40012c00
 800a674:	00010007 	.word	0x00010007

0800a678 <HAL_TIM_Base_Stop>:
  __HAL_TIM_DISABLE(htim);
 800a678:	6802      	ldr	r2, [r0, #0]
 800a67a:	6a13      	ldr	r3, [r2, #32]
 800a67c:	f003 3311 	and.w	r3, r3, #286331153	@ 0x11111111
 800a680:	f023 5388 	bic.w	r3, r3, #285212672	@ 0x11000000
 800a684:	b943      	cbnz	r3, 800a698 <HAL_TIM_Base_Stop+0x20>
 800a686:	6a11      	ldr	r1, [r2, #32]
 800a688:	f240 4344 	movw	r3, #1092	@ 0x444
 800a68c:	4219      	tst	r1, r3
 800a68e:	d103      	bne.n	800a698 <HAL_TIM_Base_Stop+0x20>
 800a690:	6813      	ldr	r3, [r2, #0]
 800a692:	f023 0301 	bic.w	r3, r3, #1
 800a696:	6013      	str	r3, [r2, #0]
  htim->State = HAL_TIM_STATE_READY;
 800a698:	2301      	movs	r3, #1
 800a69a:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
}
 800a69e:	2000      	movs	r0, #0
 800a6a0:	4770      	bx	lr
 800a6a2:	bf00      	nop

0800a6a4 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 800a6a4:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800a6a8:	2b01      	cmp	r3, #1
 800a6aa:	d113      	bne.n	800a6d4 <HAL_TIM_Base_Start_IT+0x30>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a6ac:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a6ae:	490f      	ldr	r1, [pc, #60]	@ (800a6ec <HAL_TIM_Base_Start_IT+0x48>)
  htim->State = HAL_TIM_STATE_BUSY;
 800a6b0:	2202      	movs	r2, #2
 800a6b2:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a6b6:	68da      	ldr	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a6b8:	428b      	cmp	r3, r1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a6ba:	f042 0201 	orr.w	r2, r2, #1
 800a6be:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a6c0:	d00a      	beq.n	800a6d8 <HAL_TIM_Base_Start_IT+0x34>
 800a6c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a6c6:	d007      	beq.n	800a6d8 <HAL_TIM_Base_Start_IT+0x34>
      __HAL_TIM_ENABLE(htim);
 800a6c8:	681a      	ldr	r2, [r3, #0]
 800a6ca:	f042 0201 	orr.w	r2, r2, #1
 800a6ce:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800a6d0:	2000      	movs	r0, #0
 800a6d2:	4770      	bx	lr
    return HAL_ERROR;
 800a6d4:	2001      	movs	r0, #1
}
 800a6d6:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a6d8:	6899      	ldr	r1, [r3, #8]
 800a6da:	4a05      	ldr	r2, [pc, #20]	@ (800a6f0 <HAL_TIM_Base_Start_IT+0x4c>)
 800a6dc:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a6de:	2a06      	cmp	r2, #6
 800a6e0:	d0f6      	beq.n	800a6d0 <HAL_TIM_Base_Start_IT+0x2c>
 800a6e2:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 800a6e6:	d1ef      	bne.n	800a6c8 <HAL_TIM_Base_Start_IT+0x24>
 800a6e8:	e7f2      	b.n	800a6d0 <HAL_TIM_Base_Start_IT+0x2c>
 800a6ea:	bf00      	nop
 800a6ec:	40012c00 	.word	0x40012c00
 800a6f0:	00010007 	.word	0x00010007

0800a6f4 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 800a6f4:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 800a6f8:	2b01      	cmp	r3, #1
 800a6fa:	d073      	beq.n	800a7e4 <HAL_TIM_ConfigClockSource+0xf0>
 800a6fc:	4602      	mov	r2, r0
{
 800a6fe:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 800a700:	2302      	movs	r3, #2
  tmpsmcr = htim->Instance->SMCR;
 800a702:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800a704:	f882 303d 	strb.w	r3, [r2, #61]	@ 0x3d
  __HAL_LOCK(htim);
 800a708:	2001      	movs	r0, #1
 800a70a:	f882 003c 	strb.w	r0, [r2, #60]	@ 0x3c
  tmpsmcr = htim->Instance->SMCR;
 800a70e:	68a5      	ldr	r5, [r4, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a710:	4b50      	ldr	r3, [pc, #320]	@ (800a854 <HAL_TIM_ConfigClockSource+0x160>)
 800a712:	402b      	ands	r3, r5
  htim->Instance->SMCR = tmpsmcr;
 800a714:	60a3      	str	r3, [r4, #8]
  switch (sClockSourceConfig->ClockSource)
 800a716:	680b      	ldr	r3, [r1, #0]
 800a718:	2b60      	cmp	r3, #96	@ 0x60
 800a71a:	d065      	beq.n	800a7e8 <HAL_TIM_ConfigClockSource+0xf4>
 800a71c:	d826      	bhi.n	800a76c <HAL_TIM_ConfigClockSource+0x78>
 800a71e:	2b40      	cmp	r3, #64	@ 0x40
 800a720:	d07d      	beq.n	800a81e <HAL_TIM_ConfigClockSource+0x12a>
 800a722:	d94c      	bls.n	800a7be <HAL_TIM_ConfigClockSource+0xca>
 800a724:	2b50      	cmp	r3, #80	@ 0x50
 800a726:	d119      	bne.n	800a75c <HAL_TIM_ConfigClockSource+0x68>
                               sClockSourceConfig->ClockPolarity,
 800a728:	684b      	ldr	r3, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 800a72a:	68c8      	ldr	r0, [r1, #12]
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a72c:	6a21      	ldr	r1, [r4, #32]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a72e:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 800a732:	4319      	orrs	r1, r3
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a734:	6a23      	ldr	r3, [r4, #32]
 800a736:	f023 0301 	bic.w	r3, r3, #1
 800a73a:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a73c:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a73e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a742:	ea43 1300 	orr.w	r3, r3, r0, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a746:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 800a748:	6221      	str	r1, [r4, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a74a:	68a3      	ldr	r3, [r4, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a74c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800a750:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a754:	f043 0357 	orr.w	r3, r3, #87	@ 0x57
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a758:	60a3      	str	r3, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800a75a:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800a75c:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 800a75e:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 800a760:	f882 103d 	strb.w	r1, [r2, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 800a764:	f882 303c 	strb.w	r3, [r2, #60]	@ 0x3c
}
 800a768:	bc30      	pop	{r4, r5}
 800a76a:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 800a76c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a770:	d0f3      	beq.n	800a75a <HAL_TIM_ConfigClockSource+0x66>
 800a772:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a776:	d110      	bne.n	800a79a <HAL_TIM_ConfigClockSource+0xa6>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a778:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 800a77c:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a77e:	432b      	orrs	r3, r5
 800a780:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a782:	f420 417f 	bic.w	r1, r0, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a786:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 800a78a:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a78c:	60a3      	str	r3, [r4, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a78e:	68a3      	ldr	r3, [r4, #8]
 800a790:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800a794:	60a3      	str	r3, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800a796:	2000      	movs	r0, #0
 800a798:	e7e0      	b.n	800a75c <HAL_TIM_ConfigClockSource+0x68>
  switch (sClockSourceConfig->ClockSource)
 800a79a:	2b70      	cmp	r3, #112	@ 0x70
 800a79c:	d1de      	bne.n	800a75c <HAL_TIM_ConfigClockSource+0x68>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a79e:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 800a7a2:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a7a4:	432b      	orrs	r3, r5
 800a7a6:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a7a8:	f420 417f 	bic.w	r1, r0, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a7ac:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 800a7b0:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 800a7b2:	60a3      	str	r3, [r4, #8]
      tmpsmcr = htim->Instance->SMCR;
 800a7b4:	68a3      	ldr	r3, [r4, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a7b6:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 800a7ba:	60a3      	str	r3, [r4, #8]
      break;
 800a7bc:	e7cd      	b.n	800a75a <HAL_TIM_ConfigClockSource+0x66>
  switch (sClockSourceConfig->ClockSource)
 800a7be:	2b20      	cmp	r3, #32
 800a7c0:	d002      	beq.n	800a7c8 <HAL_TIM_ConfigClockSource+0xd4>
 800a7c2:	d90b      	bls.n	800a7dc <HAL_TIM_ConfigClockSource+0xe8>
 800a7c4:	2b30      	cmp	r3, #48	@ 0x30
 800a7c6:	d1c9      	bne.n	800a75c <HAL_TIM_ConfigClockSource+0x68>
  tmpsmcr = TIMx->SMCR;
 800a7c8:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800a7ca:	f421 1140 	bic.w	r1, r1, #3145728	@ 0x300000
 800a7ce:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a7d2:	4319      	orrs	r1, r3
 800a7d4:	f041 0107 	orr.w	r1, r1, #7
  TIMx->SMCR = tmpsmcr;
 800a7d8:	60a1      	str	r1, [r4, #8]
}
 800a7da:	e7be      	b.n	800a75a <HAL_TIM_ConfigClockSource+0x66>
  switch (sClockSourceConfig->ClockSource)
 800a7dc:	f033 0110 	bics.w	r1, r3, #16
 800a7e0:	d1bc      	bne.n	800a75c <HAL_TIM_ConfigClockSource+0x68>
 800a7e2:	e7f1      	b.n	800a7c8 <HAL_TIM_ConfigClockSource+0xd4>
  __HAL_LOCK(htim);
 800a7e4:	2002      	movs	r0, #2
}
 800a7e6:	4770      	bx	lr
  tmpccer = TIMx->CCER;
 800a7e8:	6a23      	ldr	r3, [r4, #32]
                               sClockSourceConfig->ClockPolarity,
 800a7ea:	684d      	ldr	r5, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 800a7ec:	68c8      	ldr	r0, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a7ee:	6a21      	ldr	r1, [r4, #32]
 800a7f0:	f021 0110 	bic.w	r1, r1, #16
 800a7f4:	6221      	str	r1, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a7f6:	69a1      	ldr	r1, [r4, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a7f8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a7fc:	f421 4170 	bic.w	r1, r1, #61440	@ 0xf000
  tmpccer |= (TIM_ICPolarity << 4U);
 800a800:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a804:	ea41 3100 	orr.w	r1, r1, r0, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 800a808:	61a1      	str	r1, [r4, #24]
  TIMx->CCER = tmpccer;
 800a80a:	6223      	str	r3, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 800a80c:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800a80e:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800a812:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a816:	f043 0367 	orr.w	r3, r3, #103	@ 0x67
  TIMx->SMCR = tmpsmcr;
 800a81a:	60a3      	str	r3, [r4, #8]
}
 800a81c:	e79d      	b.n	800a75a <HAL_TIM_ConfigClockSource+0x66>
                               sClockSourceConfig->ClockPolarity,
 800a81e:	684b      	ldr	r3, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 800a820:	68c8      	ldr	r0, [r1, #12]
  tmpccer = TIMx->CCER;
 800a822:	6a21      	ldr	r1, [r4, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a824:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 800a828:	4319      	orrs	r1, r3
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a82a:	6a23      	ldr	r3, [r4, #32]
 800a82c:	f023 0301 	bic.w	r3, r3, #1
 800a830:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a832:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a834:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a838:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800a83c:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 800a83e:	6221      	str	r1, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 800a840:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800a842:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800a846:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a84a:	f043 0347 	orr.w	r3, r3, #71	@ 0x47
  TIMx->SMCR = tmpsmcr;
 800a84e:	60a3      	str	r3, [r4, #8]
}
 800a850:	e783      	b.n	800a75a <HAL_TIM_ConfigClockSource+0x66>
 800a852:	bf00      	nop
 800a854:	ffce0088 	.word	0xffce0088

0800a858 <HAL_TIM_OC_DelayElapsedCallback>:
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 800a858:	4770      	bx	lr
 800a85a:	bf00      	nop

0800a85c <HAL_TIM_IC_CaptureCallback>:
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 800a85c:	4770      	bx	lr
 800a85e:	bf00      	nop

0800a860 <HAL_TIM_PWM_PulseFinishedCallback>:
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 800a860:	4770      	bx	lr
 800a862:	bf00      	nop

0800a864 <HAL_TIM_TriggerCallback>:
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 800a864:	4770      	bx	lr
 800a866:	bf00      	nop

0800a868 <HAL_TIM_IRQHandler>:
{
 800a868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t itsource = htim->Instance->DIER;
 800a86a:	6803      	ldr	r3, [r0, #0]
 800a86c:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 800a86e:	691c      	ldr	r4, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800a870:	07a1      	lsls	r1, r4, #30
{
 800a872:	4605      	mov	r5, r0
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800a874:	d501      	bpl.n	800a87a <HAL_TIM_IRQHandler+0x12>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800a876:	07b2      	lsls	r2, r6, #30
 800a878:	d457      	bmi.n	800a92a <HAL_TIM_IRQHandler+0xc2>
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800a87a:	0767      	lsls	r7, r4, #29
 800a87c:	d501      	bpl.n	800a882 <HAL_TIM_IRQHandler+0x1a>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800a87e:	0770      	lsls	r0, r6, #29
 800a880:	d440      	bmi.n	800a904 <HAL_TIM_IRQHandler+0x9c>
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a882:	0721      	lsls	r1, r4, #28
 800a884:	d501      	bpl.n	800a88a <HAL_TIM_IRQHandler+0x22>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a886:	0732      	lsls	r2, r6, #28
 800a888:	d42a      	bmi.n	800a8e0 <HAL_TIM_IRQHandler+0x78>
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800a88a:	06e7      	lsls	r7, r4, #27
 800a88c:	d501      	bpl.n	800a892 <HAL_TIM_IRQHandler+0x2a>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800a88e:	06f0      	lsls	r0, r6, #27
 800a890:	d413      	bmi.n	800a8ba <HAL_TIM_IRQHandler+0x52>
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800a892:	07e1      	lsls	r1, r4, #31
 800a894:	d501      	bpl.n	800a89a <HAL_TIM_IRQHandler+0x32>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800a896:	07f2      	lsls	r2, r6, #31
 800a898:	d465      	bmi.n	800a966 <HAL_TIM_IRQHandler+0xfe>
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a89a:	f414 5f02 	tst.w	r4, #8320	@ 0x2080
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800a89e:	f404 7780 	and.w	r7, r4, #256	@ 0x100
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a8a2:	d052      	beq.n	800a94a <HAL_TIM_IRQHandler+0xe2>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a8a4:	0633      	lsls	r3, r6, #24
 800a8a6:	d466      	bmi.n	800a976 <HAL_TIM_IRQHandler+0x10e>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a8a8:	0660      	lsls	r0, r4, #25
 800a8aa:	d501      	bpl.n	800a8b0 <HAL_TIM_IRQHandler+0x48>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a8ac:	0671      	lsls	r1, r6, #25
 800a8ae:	d473      	bmi.n	800a998 <HAL_TIM_IRQHandler+0x130>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a8b0:	06a2      	lsls	r2, r4, #26
 800a8b2:	d501      	bpl.n	800a8b8 <HAL_TIM_IRQHandler+0x50>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a8b4:	06b3      	lsls	r3, r6, #26
 800a8b6:	d44d      	bmi.n	800a954 <HAL_TIM_IRQHandler+0xec>
}
 800a8b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800a8ba:	682b      	ldr	r3, [r5, #0]
 800a8bc:	f06f 0210 	mvn.w	r2, #16
 800a8c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a8c2:	2208      	movs	r2, #8
 800a8c4:	772a      	strb	r2, [r5, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a8c6:	69db      	ldr	r3, [r3, #28]
 800a8c8:	f413 7f40 	tst.w	r3, #768	@ 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 800a8cc:	4628      	mov	r0, r5
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a8ce:	d174      	bne.n	800a9ba <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a8d0:	f7ff ffc2 	bl	800a858 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a8d4:	4628      	mov	r0, r5
 800a8d6:	f7ff ffc3 	bl	800a860 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a8da:	2300      	movs	r3, #0
 800a8dc:	772b      	strb	r3, [r5, #28]
 800a8de:	e7d8      	b.n	800a892 <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800a8e0:	682b      	ldr	r3, [r5, #0]
 800a8e2:	f06f 0208 	mvn.w	r2, #8
 800a8e6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a8e8:	2204      	movs	r2, #4
 800a8ea:	772a      	strb	r2, [r5, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a8ec:	69db      	ldr	r3, [r3, #28]
 800a8ee:	079b      	lsls	r3, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 800a8f0:	4628      	mov	r0, r5
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a8f2:	d15f      	bne.n	800a9b4 <HAL_TIM_IRQHandler+0x14c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a8f4:	f7ff ffb0 	bl	800a858 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a8f8:	4628      	mov	r0, r5
 800a8fa:	f7ff ffb1 	bl	800a860 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a8fe:	2300      	movs	r3, #0
 800a900:	772b      	strb	r3, [r5, #28]
 800a902:	e7c2      	b.n	800a88a <HAL_TIM_IRQHandler+0x22>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800a904:	682b      	ldr	r3, [r5, #0]
 800a906:	f06f 0204 	mvn.w	r2, #4
 800a90a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a90c:	2202      	movs	r2, #2
 800a90e:	772a      	strb	r2, [r5, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a910:	699b      	ldr	r3, [r3, #24]
 800a912:	f413 7f40 	tst.w	r3, #768	@ 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 800a916:	4628      	mov	r0, r5
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a918:	d149      	bne.n	800a9ae <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a91a:	f7ff ff9d 	bl	800a858 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a91e:	4628      	mov	r0, r5
 800a920:	f7ff ff9e 	bl	800a860 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a924:	2300      	movs	r3, #0
 800a926:	772b      	strb	r3, [r5, #28]
 800a928:	e7ab      	b.n	800a882 <HAL_TIM_IRQHandler+0x1a>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800a92a:	f06f 0202 	mvn.w	r2, #2
 800a92e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a930:	2201      	movs	r2, #1
 800a932:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a934:	699b      	ldr	r3, [r3, #24]
 800a936:	079b      	lsls	r3, r3, #30
 800a938:	d136      	bne.n	800a9a8 <HAL_TIM_IRQHandler+0x140>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a93a:	f7ff ff8d 	bl	800a858 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a93e:	4628      	mov	r0, r5
 800a940:	f7ff ff8e 	bl	800a860 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a944:	2300      	movs	r3, #0
 800a946:	772b      	strb	r3, [r5, #28]
 800a948:	e797      	b.n	800a87a <HAL_TIM_IRQHandler+0x12>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800a94a:	2f00      	cmp	r7, #0
 800a94c:	d0ac      	beq.n	800a8a8 <HAL_TIM_IRQHandler+0x40>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a94e:	0637      	lsls	r7, r6, #24
 800a950:	d41a      	bmi.n	800a988 <HAL_TIM_IRQHandler+0x120>
 800a952:	e7a9      	b.n	800a8a8 <HAL_TIM_IRQHandler+0x40>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800a954:	682b      	ldr	r3, [r5, #0]
 800a956:	f06f 0220 	mvn.w	r2, #32
 800a95a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 800a95c:	4628      	mov	r0, r5
}
 800a95e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      HAL_TIMEx_CommutCallback(htim);
 800a962:	f000 b85f 	b.w	800aa24 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800a966:	682b      	ldr	r3, [r5, #0]
 800a968:	f06f 0201 	mvn.w	r2, #1
 800a96c:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800a96e:	4628      	mov	r0, r5
 800a970:	f7f7 fc60 	bl	8002234 <HAL_TIM_PeriodElapsedCallback>
 800a974:	e791      	b.n	800a89a <HAL_TIM_IRQHandler+0x32>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800a976:	682b      	ldr	r3, [r5, #0]
 800a978:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800a97c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800a97e:	4628      	mov	r0, r5
 800a980:	f000 f852 	bl	800aa28 <HAL_TIMEx_BreakCallback>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800a984:	2f00      	cmp	r7, #0
 800a986:	d08f      	beq.n	800a8a8 <HAL_TIM_IRQHandler+0x40>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a988:	682b      	ldr	r3, [r5, #0]
 800a98a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800a98e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800a990:	4628      	mov	r0, r5
 800a992:	f000 f84b 	bl	800aa2c <HAL_TIMEx_Break2Callback>
 800a996:	e787      	b.n	800a8a8 <HAL_TIM_IRQHandler+0x40>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800a998:	682b      	ldr	r3, [r5, #0]
 800a99a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a99e:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800a9a0:	4628      	mov	r0, r5
 800a9a2:	f7ff ff5f 	bl	800a864 <HAL_TIM_TriggerCallback>
 800a9a6:	e783      	b.n	800a8b0 <HAL_TIM_IRQHandler+0x48>
          HAL_TIM_IC_CaptureCallback(htim);
 800a9a8:	f7ff ff58 	bl	800a85c <HAL_TIM_IC_CaptureCallback>
 800a9ac:	e7ca      	b.n	800a944 <HAL_TIM_IRQHandler+0xdc>
        HAL_TIM_IC_CaptureCallback(htim);
 800a9ae:	f7ff ff55 	bl	800a85c <HAL_TIM_IC_CaptureCallback>
 800a9b2:	e7b7      	b.n	800a924 <HAL_TIM_IRQHandler+0xbc>
        HAL_TIM_IC_CaptureCallback(htim);
 800a9b4:	f7ff ff52 	bl	800a85c <HAL_TIM_IC_CaptureCallback>
 800a9b8:	e7a1      	b.n	800a8fe <HAL_TIM_IRQHandler+0x96>
        HAL_TIM_IC_CaptureCallback(htim);
 800a9ba:	f7ff ff4f 	bl	800a85c <HAL_TIM_IC_CaptureCallback>
 800a9be:	e78c      	b.n	800a8da <HAL_TIM_IRQHandler+0x72>

0800a9c0 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a9c0:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 800a9c4:	2a01      	cmp	r2, #1
 800a9c6:	d028      	beq.n	800aa1a <HAL_TIMEx_MasterConfigSynchronization+0x5a>
{
 800a9c8:	b470      	push	{r4, r5, r6}
 800a9ca:	4603      	mov	r3, r0

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a9cc:	4d14      	ldr	r5, [pc, #80]	@ (800aa20 <HAL_TIMEx_MasterConfigSynchronization+0x60>)
  tmpcr2 = htim->Instance->CR2;
 800a9ce:	6800      	ldr	r0, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800a9d0:	2202      	movs	r2, #2
 800a9d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a9d6:	42a8      	cmp	r0, r5
  tmpcr2 = htim->Instance->CR2;
 800a9d8:	6842      	ldr	r2, [r0, #4]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a9da:	680e      	ldr	r6, [r1, #0]
  tmpsmcr = htim->Instance->SMCR;
 800a9dc:	6884      	ldr	r4, [r0, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a9de:	d00e      	beq.n	800a9fe <HAL_TIMEx_MasterConfigSynchronization+0x3e>
  tmpcr2 &= ~TIM_CR2_MMS;
 800a9e0:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a9e4:	4332      	orrs	r2, r6

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a9e6:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
  htim->Instance->CR2 = tmpcr2;
 800a9ea:	6042      	str	r2, [r0, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a9ec:	d00f      	beq.n	800aa0e <HAL_TIMEx_MasterConfigSynchronization+0x4e>
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 800a9ee:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800a9f0:	2201      	movs	r2, #1
 800a9f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 800a9f6:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c

  return HAL_OK;
}
 800a9fa:	bc70      	pop	{r4, r5, r6}
 800a9fc:	4770      	bx	lr
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a9fe:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 800aa00:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800aa04:	432a      	orrs	r2, r5
  tmpcr2 &= ~TIM_CR2_MMS;
 800aa06:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800aa0a:	4332      	orrs	r2, r6
  htim->Instance->CR2 = tmpcr2;
 800aa0c:	6042      	str	r2, [r0, #4]
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800aa0e:	688a      	ldr	r2, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 800aa10:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800aa14:	4314      	orrs	r4, r2
    htim->Instance->SMCR = tmpsmcr;
 800aa16:	6084      	str	r4, [r0, #8]
 800aa18:	e7e9      	b.n	800a9ee <HAL_TIMEx_MasterConfigSynchronization+0x2e>
  __HAL_LOCK(htim);
 800aa1a:	2002      	movs	r0, #2
}
 800aa1c:	4770      	bx	lr
 800aa1e:	bf00      	nop
 800aa20:	40012c00 	.word	0x40012c00

0800aa24 <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 800aa24:	4770      	bx	lr
 800aa26:	bf00      	nop

0800aa28 <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 800aa28:	4770      	bx	lr
 800aa2a:	bf00      	nop

0800aa2c <HAL_TIMEx_Break2Callback>:
/**
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
 800aa2c:	4770      	bx	lr
 800aa2e:	bf00      	nop

0800aa30 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800aa30:	b570      	push	{r4, r5, r6, lr}
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800aa32:	f8d0 6088 	ldr.w	r6, [r0, #136]	@ 0x88
 800aa36:	2e20      	cmp	r6, #32
 800aa38:	d124      	bne.n	800aa84 <HAL_UART_Transmit_DMA+0x54>
  {
    if ((pData == NULL) || (Size == 0U))
 800aa3a:	4604      	mov	r4, r0
 800aa3c:	b301      	cbz	r1, 800aa80 <HAL_UART_Transmit_DMA+0x50>
 800aa3e:	4613      	mov	r3, r2
 800aa40:	b1f2      	cbz	r2, 800aa80 <HAL_UART_Transmit_DMA+0x50>
      return HAL_ERROR;
    }

    huart->pTxBuffPtr  = pData;
    huart->TxXferSize  = Size;
    huart->TxXferCount = Size;
 800aa42:	f8a0 2056 	strh.w	r2, [r0, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aa46:	2200      	movs	r2, #0
    huart->pTxBuffPtr  = pData;
 800aa48:	6501      	str	r1, [r0, #80]	@ 0x50
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aa4a:	f8c0 2090 	str.w	r2, [r0, #144]	@ 0x90
    huart->TxXferSize  = Size;
 800aa4e:	f8a0 3054 	strh.w	r3, [r0, #84]	@ 0x54
    huart->gState = HAL_UART_STATE_BUSY_TX;

    if (huart->hdmatx != NULL)
 800aa52:	6fc0      	ldr	r0, [r0, #124]	@ 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800aa54:	2521      	movs	r5, #33	@ 0x21
 800aa56:	f8c4 5088 	str.w	r5, [r4, #136]	@ 0x88

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800aa5a:	6825      	ldr	r5, [r4, #0]
    if (huart->hdmatx != NULL)
 800aa5c:	b1a8      	cbz	r0, 800aa8a <HAL_UART_Transmit_DMA+0x5a>
      huart->hdmatx->XferAbortCallback = NULL;
 800aa5e:	6382      	str	r2, [r0, #56]	@ 0x38
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800aa60:	f105 0228 	add.w	r2, r5, #40	@ 0x28
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800aa64:	4d11      	ldr	r5, [pc, #68]	@ (800aaac <HAL_UART_Transmit_DMA+0x7c>)
 800aa66:	62c5      	str	r5, [r0, #44]	@ 0x2c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800aa68:	4d11      	ldr	r5, [pc, #68]	@ (800aab0 <HAL_UART_Transmit_DMA+0x80>)
 800aa6a:	6305      	str	r5, [r0, #48]	@ 0x30
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800aa6c:	4d11      	ldr	r5, [pc, #68]	@ (800aab4 <HAL_UART_Transmit_DMA+0x84>)
 800aa6e:	6345      	str	r5, [r0, #52]	@ 0x34
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800aa70:	f7fb fb84 	bl	800617c <HAL_DMA_Start_IT>
 800aa74:	b140      	cbz	r0, 800aa88 <HAL_UART_Transmit_DMA+0x58>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800aa76:	2310      	movs	r3, #16
 800aa78:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800aa7c:	f8c4 6088 	str.w	r6, [r4, #136]	@ 0x88
      return HAL_ERROR;
 800aa80:	2001      	movs	r0, #1
  }
  else
  {
    return HAL_BUSY;
  }
}
 800aa82:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
 800aa84:	2002      	movs	r0, #2
}
 800aa86:	bd70      	pop	{r4, r5, r6, pc}
 800aa88:	6825      	ldr	r5, [r4, #0]
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800aa8a:	2340      	movs	r3, #64	@ 0x40
 800aa8c:	622b      	str	r3, [r5, #32]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa8e:	f105 0308 	add.w	r3, r5, #8
 800aa92:	e853 3f00 	ldrex	r3, [r3]
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800aa96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa9a:	f105 0108 	add.w	r1, r5, #8
 800aa9e:	e841 3200 	strex	r2, r3, [r1]
 800aaa2:	2a00      	cmp	r2, #0
 800aaa4:	d1f3      	bne.n	800aa8e <HAL_UART_Transmit_DMA+0x5e>
    return HAL_OK;
 800aaa6:	2000      	movs	r0, #0
}
 800aaa8:	bd70      	pop	{r4, r5, r6, pc}
 800aaaa:	bf00      	nop
 800aaac:	0800abe5 	.word	0x0800abe5
 800aab0:	0800ac2d 	.word	0x0800ac2d
 800aab4:	0800ac41 	.word	0x0800ac41

0800aab8 <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 800aab8:	6803      	ldr	r3, [r0, #0]
 800aaba:	b510      	push	{r4, lr}
 800aabc:	4604      	mov	r4, r0
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aabe:	e853 2f00 	ldrex	r2, [r3]
  /* Disable TXE, TC, RXNE, PE, RXFT, TXFT and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800aac2:	f422 72f0 	bic.w	r2, r2, #480	@ 0x1e0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aac6:	e843 2100 	strex	r1, r2, [r3]
 800aaca:	2900      	cmp	r1, #0
 800aacc:	d1f7      	bne.n	800aabe <HAL_UART_Abort+0x6>
                                          USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE);
 800aace:	4843      	ldr	r0, [pc, #268]	@ (800abdc <HAL_UART_Abort+0x124>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aad0:	f103 0208 	add.w	r2, r3, #8
 800aad4:	e852 2f00 	ldrex	r2, [r2]
 800aad8:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aada:	f103 0c08 	add.w	ip, r3, #8
 800aade:	e84c 2100 	strex	r1, r2, [ip]
 800aae2:	2900      	cmp	r1, #0
 800aae4:	d1f4      	bne.n	800aad0 <HAL_UART_Abort+0x18>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aae6:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 800aae8:	2a01      	cmp	r2, #1
 800aaea:	d052      	beq.n	800ab92 <HAL_UART_Abort+0xda>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
  }

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800aaec:	6899      	ldr	r1, [r3, #8]
 800aaee:	0608      	lsls	r0, r1, #24
 800aaf0:	461a      	mov	r2, r3
 800aaf2:	d420      	bmi.n	800ab36 <HAL_UART_Abort+0x7e>
      }
    }
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aaf4:	6899      	ldr	r1, [r3, #8]
 800aaf6:	0649      	lsls	r1, r1, #25
 800aaf8:	d435      	bmi.n	800ab66 <HAL_UART_Abort+0xae>

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);

  /* Flush the whole TX FIFO (if needed) */
  if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800aafa:	6e61      	ldr	r1, [r4, #100]	@ 0x64
  huart->TxXferCount = 0U;
 800aafc:	2300      	movs	r3, #0
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800aafe:	200f      	movs	r0, #15
  if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800ab00:	f1b1 5f00 	cmp.w	r1, #536870912	@ 0x20000000
  huart->TxXferCount = 0U;
 800ab04:	f8a4 3056 	strh.w	r3, [r4, #86]	@ 0x56
  huart->RxXferCount = 0U;
 800ab08:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800ab0c:	6210      	str	r0, [r2, #32]
  if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800ab0e:	d103      	bne.n	800ab18 <HAL_UART_Abort+0x60>
  {
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 800ab10:	6993      	ldr	r3, [r2, #24]
 800ab12:	f043 0310 	orr.w	r3, r3, #16
 800ab16:	6193      	str	r3, [r2, #24]
  }

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ab18:	6991      	ldr	r1, [r2, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
  huart->RxState = HAL_UART_STATE_READY;
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ab1a:	2300      	movs	r3, #0
  huart->gState  = HAL_UART_STATE_READY;
 800ab1c:	2020      	movs	r0, #32
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ab1e:	f041 0108 	orr.w	r1, r1, #8
 800ab22:	6191      	str	r1, [r2, #24]
  huart->gState  = HAL_UART_STATE_READY;
 800ab24:	f8c4 0088 	str.w	r0, [r4, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800ab28:	f8c4 008c 	str.w	r0, [r4, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ab2c:	66e3      	str	r3, [r4, #108]	@ 0x6c

  huart->ErrorCode = HAL_UART_ERROR_NONE;

  return HAL_OK;
 800ab2e:	4618      	mov	r0, r3
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ab30:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
}
 800ab34:	bd10      	pop	{r4, pc}
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab36:	f103 0208 	add.w	r2, r3, #8
 800ab3a:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ab3e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab42:	f103 0008 	add.w	r0, r3, #8
 800ab46:	e840 2100 	strex	r1, r2, [r0]
 800ab4a:	2900      	cmp	r1, #0
 800ab4c:	d1f3      	bne.n	800ab36 <HAL_UART_Abort+0x7e>
    if (huart->hdmatx != NULL)
 800ab4e:	6fe0      	ldr	r0, [r4, #124]	@ 0x7c
 800ab50:	b128      	cbz	r0, 800ab5e <HAL_UART_Abort+0xa6>
      huart->hdmatx->XferAbortCallback = NULL;
 800ab52:	2300      	movs	r3, #0
 800ab54:	6383      	str	r3, [r0, #56]	@ 0x38
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800ab56:	f7fb fb69 	bl	800622c <HAL_DMA_Abort>
 800ab5a:	bb68      	cbnz	r0, 800abb8 <HAL_UART_Abort+0x100>
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ab5c:	6823      	ldr	r3, [r4, #0]
 800ab5e:	6899      	ldr	r1, [r3, #8]
 800ab60:	0649      	lsls	r1, r1, #25
 800ab62:	461a      	mov	r2, r3
 800ab64:	d5c9      	bpl.n	800aafa <HAL_UART_Abort+0x42>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab66:	f103 0208 	add.w	r2, r3, #8
 800ab6a:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ab6e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab72:	f103 0008 	add.w	r0, r3, #8
 800ab76:	e840 2100 	strex	r1, r2, [r0]
 800ab7a:	2900      	cmp	r1, #0
 800ab7c:	d1f3      	bne.n	800ab66 <HAL_UART_Abort+0xae>
    if (huart->hdmarx != NULL)
 800ab7e:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 800ab82:	b1b8      	cbz	r0, 800abb4 <HAL_UART_Abort+0xfc>
      huart->hdmarx->XferAbortCallback = NULL;
 800ab84:	2300      	movs	r3, #0
 800ab86:	6383      	str	r3, [r0, #56]	@ 0x38
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800ab88:	f7fb fb50 	bl	800622c <HAL_DMA_Abort>
 800ab8c:	b9f0      	cbnz	r0, 800abcc <HAL_UART_Abort+0x114>
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800ab8e:	6822      	ldr	r2, [r4, #0]
 800ab90:	e7b3      	b.n	800aafa <HAL_UART_Abort+0x42>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab92:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800ab96:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab9a:	e843 2100 	strex	r1, r2, [r3]
 800ab9e:	2900      	cmp	r1, #0
 800aba0:	d0a4      	beq.n	800aaec <HAL_UART_Abort+0x34>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aba2:	e853 2f00 	ldrex	r2, [r3]
 800aba6:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abaa:	e843 2100 	strex	r1, r2, [r3]
 800abae:	2900      	cmp	r1, #0
 800abb0:	d1ef      	bne.n	800ab92 <HAL_UART_Abort+0xda>
 800abb2:	e79b      	b.n	800aaec <HAL_UART_Abort+0x34>
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800abb4:	461a      	mov	r2, r3
 800abb6:	e7a0      	b.n	800aafa <HAL_UART_Abort+0x42>
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800abb8:	6fe0      	ldr	r0, [r4, #124]	@ 0x7c
 800abba:	f7fb fbf3 	bl	80063a4 <HAL_DMA_GetError>
 800abbe:	2820      	cmp	r0, #32
 800abc0:	d1cc      	bne.n	800ab5c <HAL_UART_Abort+0xa4>
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800abc2:	2310      	movs	r3, #16
 800abc4:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
          return HAL_TIMEOUT;
 800abc8:	2003      	movs	r0, #3
}
 800abca:	bd10      	pop	{r4, pc}
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800abcc:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 800abd0:	f7fb fbe8 	bl	80063a4 <HAL_DMA_GetError>
 800abd4:	2820      	cmp	r0, #32
 800abd6:	d1da      	bne.n	800ab8e <HAL_UART_Abort+0xd6>
 800abd8:	e7f3      	b.n	800abc2 <HAL_UART_Abort+0x10a>
 800abda:	bf00      	nop
 800abdc:	ef7ffffe 	.word	0xef7ffffe

0800abe0 <HAL_UART_TxCpltCallback>:
/**
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
 800abe0:	4770      	bx	lr
 800abe2:	bf00      	nop

0800abe4 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800abe4:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800abe6:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800abe8:	6a80      	ldr	r0, [r0, #40]	@ 0x28
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	f013 0320 	ands.w	r3, r3, #32
 800abf0:	d117      	bne.n	800ac22 <UART_DMATransmitCplt+0x3e>
  {
    huart->TxXferCount = 0U;
 800abf2:	6802      	ldr	r2, [r0, #0]
 800abf4:	f8a0 3056 	strh.w	r3, [r0, #86]	@ 0x56
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abf8:	f102 0308 	add.w	r3, r2, #8
 800abfc:	e853 3f00 	ldrex	r3, [r3]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ac00:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac04:	f102 0008 	add.w	r0, r2, #8
 800ac08:	e840 3100 	strex	r1, r3, [r0]
 800ac0c:	2900      	cmp	r1, #0
 800ac0e:	d1f3      	bne.n	800abf8 <UART_DMATransmitCplt+0x14>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac10:	e852 3f00 	ldrex	r3, [r2]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ac14:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac18:	e842 3100 	strex	r1, r3, [r2]
 800ac1c:	2900      	cmp	r1, #0
 800ac1e:	d1f7      	bne.n	800ac10 <UART_DMATransmitCplt+0x2c>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ac20:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 800ac22:	f7ff ffdd 	bl	800abe0 <HAL_UART_TxCpltCallback>
}
 800ac26:	bd08      	pop	{r3, pc}

0800ac28 <HAL_UART_TxHalfCpltCallback>:
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
 800ac28:	4770      	bx	lr
 800ac2a:	bf00      	nop

0800ac2c <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ac2c:	b508      	push	{r3, lr}
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800ac2e:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 800ac30:	f7ff fffa 	bl	800ac28 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ac34:	bd08      	pop	{r3, pc}
 800ac36:	bf00      	nop

0800ac38 <HAL_UART_RxHalfCpltCallback>:
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
 800ac38:	4770      	bx	lr
 800ac3a:	bf00      	nop

0800ac3c <HAL_UART_ErrorCallback>:
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
 800ac3c:	4770      	bx	lr
 800ac3e:	bf00      	nop

0800ac40 <UART_DMAError>:
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ac40:	6a80      	ldr	r0, [r0, #40]	@ 0x28

  const HAL_UART_StateTypeDef gstate = huart->gState;
  const HAL_UART_StateTypeDef rxstate = huart->RxState;

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800ac42:	6803      	ldr	r3, [r0, #0]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 800ac44:	f8d0 1088 	ldr.w	r1, [r0, #136]	@ 0x88
{
 800ac48:	b510      	push	{r4, lr}
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800ac4a:	f8d0 408c 	ldr.w	r4, [r0, #140]	@ 0x8c
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800ac4e:	689a      	ldr	r2, [r3, #8]
 800ac50:	0612      	lsls	r2, r2, #24
 800ac52:	d501      	bpl.n	800ac58 <UART_DMAError+0x18>
 800ac54:	2921      	cmp	r1, #33	@ 0x21
 800ac56:	d00d      	beq.n	800ac74 <UART_DMAError+0x34>
    huart->TxXferCount = 0U;
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800ac58:	689a      	ldr	r2, [r3, #8]
 800ac5a:	0652      	lsls	r2, r2, #25
 800ac5c:	d501      	bpl.n	800ac62 <UART_DMAError+0x22>
 800ac5e:	2c22      	cmp	r4, #34	@ 0x22
 800ac60:	d023      	beq.n	800acaa <UART_DMAError+0x6a>
  {
    huart->RxXferCount = 0U;
    UART_EndRxTransfer(huart);
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800ac62:	f8d0 3090 	ldr.w	r3, [r0, #144]	@ 0x90
 800ac66:	f043 0310 	orr.w	r3, r3, #16
 800ac6a:	f8c0 3090 	str.w	r3, [r0, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ac6e:	f7ff ffe5 	bl	800ac3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ac72:	bd10      	pop	{r4, pc}
    huart->TxXferCount = 0U;
 800ac74:	2200      	movs	r2, #0
 800ac76:	f8a0 2056 	strh.w	r2, [r0, #86]	@ 0x56
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac7a:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800ac7e:	f022 02c0 	bic.w	r2, r2, #192	@ 0xc0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac82:	e843 2100 	strex	r1, r2, [r3]
 800ac86:	2900      	cmp	r1, #0
 800ac88:	d1f7      	bne.n	800ac7a <UART_DMAError+0x3a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac8a:	f103 0208 	add.w	r2, r3, #8
 800ac8e:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800ac92:	f422 0200 	bic.w	r2, r2, #8388608	@ 0x800000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac96:	f103 0c08 	add.w	ip, r3, #8
 800ac9a:	e84c 2100 	strex	r1, r2, [ip]
 800ac9e:	2900      	cmp	r1, #0
 800aca0:	d1f3      	bne.n	800ac8a <UART_DMAError+0x4a>
  huart->gState = HAL_UART_STATE_READY;
 800aca2:	2220      	movs	r2, #32
 800aca4:	f8c0 2088 	str.w	r2, [r0, #136]	@ 0x88
}
 800aca8:	e7d6      	b.n	800ac58 <UART_DMAError+0x18>
    huart->RxXferCount = 0U;
 800acaa:	2200      	movs	r2, #0
 800acac:	f8a0 205e 	strh.w	r2, [r0, #94]	@ 0x5e
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acb0:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800acb4:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acb8:	e843 2100 	strex	r1, r2, [r3]
 800acbc:	2900      	cmp	r1, #0
 800acbe:	d1f7      	bne.n	800acb0 <UART_DMAError+0x70>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800acc0:	4c13      	ldr	r4, [pc, #76]	@ (800ad10 <UART_DMAError+0xd0>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acc2:	f103 0208 	add.w	r2, r3, #8
 800acc6:	e852 2f00 	ldrex	r2, [r2]
 800acca:	4022      	ands	r2, r4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800accc:	f103 0c08 	add.w	ip, r3, #8
 800acd0:	e84c 2100 	strex	r1, r2, [ip]
 800acd4:	2900      	cmp	r1, #0
 800acd6:	d1f4      	bne.n	800acc2 <UART_DMAError+0x82>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800acd8:	6ec2      	ldr	r2, [r0, #108]	@ 0x6c
 800acda:	2a01      	cmp	r2, #1
 800acdc:	d006      	beq.n	800acec <UART_DMAError+0xac>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800acde:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 800ace0:	2220      	movs	r2, #32
 800ace2:	f8c0 208c 	str.w	r2, [r0, #140]	@ 0x8c
  huart->RxISR = NULL;
 800ace6:	6743      	str	r3, [r0, #116]	@ 0x74
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ace8:	66c3      	str	r3, [r0, #108]	@ 0x6c
}
 800acea:	e7ba      	b.n	800ac62 <UART_DMAError+0x22>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acec:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800acf0:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acf4:	e843 2100 	strex	r1, r2, [r3]
 800acf8:	2900      	cmp	r1, #0
 800acfa:	d0f0      	beq.n	800acde <UART_DMAError+0x9e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acfc:	e853 2f00 	ldrex	r2, [r3]
 800ad00:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad04:	e843 2100 	strex	r1, r2, [r3]
 800ad08:	2900      	cmp	r1, #0
 800ad0a:	d1ef      	bne.n	800acec <UART_DMAError+0xac>
 800ad0c:	e7e7      	b.n	800acde <UART_DMAError+0x9e>
 800ad0e:	bf00      	nop
 800ad10:	effffffe 	.word	0xeffffffe

0800ad14 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ad14:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ad16:	6a80      	ldr	r0, [r0, #40]	@ 0x28
  huart->RxXferCount = 0U;
 800ad18:	2300      	movs	r3, #0
 800ad1a:	f8a0 305e 	strh.w	r3, [r0, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ad1e:	f7ff ff8d 	bl	800ac3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ad22:	bd08      	pop	{r3, pc}

0800ad24 <HAL_UARTEx_RxEventCallback>:
}
 800ad24:	4770      	bx	lr
 800ad26:	bf00      	nop

0800ad28 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800ad28:	6803      	ldr	r3, [r0, #0]
 800ad2a:	69da      	ldr	r2, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ad2c:	6819      	ldr	r1, [r3, #0]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800ad2e:	f640 0c0f 	movw	ip, #2063	@ 0x80f
  if (errorflags == 0U)
 800ad32:	ea12 0f0c 	tst.w	r2, ip
{
 800ad36:	b570      	push	{r4, r5, r6, lr}
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ad38:	689d      	ldr	r5, [r3, #8]
{
 800ad3a:	4604      	mov	r4, r0
  if (errorflags == 0U)
 800ad3c:	d145      	bne.n	800adca <HAL_UART_IRQHandler+0xa2>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ad3e:	0696      	lsls	r6, r2, #26
 800ad40:	d507      	bpl.n	800ad52 <HAL_UART_IRQHandler+0x2a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ad42:	f001 0c20 	and.w	ip, r1, #32
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ad46:	f005 5e80 	and.w	lr, r5, #268435456	@ 0x10000000
 800ad4a:	ea5c 0c0e 	orrs.w	ip, ip, lr
 800ad4e:	f040 8106 	bne.w	800af5e <HAL_UART_IRQHandler+0x236>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ad52:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
 800ad54:	2801      	cmp	r0, #1
 800ad56:	f000 80d3 	beq.w	800af00 <HAL_UART_IRQHandler+0x1d8>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800ad5a:	02d6      	lsls	r6, r2, #11
 800ad5c:	d41d      	bmi.n	800ad9a <HAL_UART_IRQHandler+0x72>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800ad5e:	0616      	lsls	r6, r2, #24
 800ad60:	d506      	bpl.n	800ad70 <HAL_UART_IRQHandler+0x48>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800ad62:	f405 0500 	and.w	r5, r5, #8388608	@ 0x800000
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800ad66:	f001 0080 	and.w	r0, r1, #128	@ 0x80
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800ad6a:	4328      	orrs	r0, r5
 800ad6c:	f040 80fe 	bne.w	800af6c <HAL_UART_IRQHandler+0x244>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800ad70:	0650      	lsls	r0, r2, #25
 800ad72:	d51c      	bpl.n	800adae <HAL_UART_IRQHandler+0x86>
 800ad74:	064e      	lsls	r6, r1, #25
 800ad76:	d51a      	bpl.n	800adae <HAL_UART_IRQHandler+0x86>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad78:	e853 2f00 	ldrex	r2, [r3]
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ad7c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad80:	e843 2100 	strex	r1, r2, [r3]
 800ad84:	2900      	cmp	r1, #0
 800ad86:	d1f7      	bne.n	800ad78 <HAL_UART_IRQHandler+0x50>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ad88:	2220      	movs	r2, #32

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ad8a:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 800ad8c:	f8c4 2088 	str.w	r2, [r4, #136]	@ 0x88
  huart->TxISR = NULL;
 800ad90:	67a3      	str	r3, [r4, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ad92:	4620      	mov	r0, r4
 800ad94:	f7ff ff24 	bl	800abe0 <HAL_UART_TxCpltCallback>
}
 800ad98:	bd70      	pop	{r4, r5, r6, pc}
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800ad9a:	0268      	lsls	r0, r5, #9
 800ad9c:	d5df      	bpl.n	800ad5e <HAL_UART_IRQHandler+0x36>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800ad9e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 800ada2:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800ada4:	621a      	str	r2, [r3, #32]
}
 800ada6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_WakeupCallback(huart);
 800adaa:	f000 bd27 	b.w	800b7fc <HAL_UARTEx_WakeupCallback>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800adae:	0215      	lsls	r5, r2, #8
 800adb0:	d502      	bpl.n	800adb8 <HAL_UART_IRQHandler+0x90>
 800adb2:	0048      	lsls	r0, r1, #1
 800adb4:	f100 80ff 	bmi.w	800afb6 <HAL_UART_IRQHandler+0x28e>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800adb8:	01d3      	lsls	r3, r2, #7
 800adba:	d5ed      	bpl.n	800ad98 <HAL_UART_IRQHandler+0x70>
 800adbc:	2900      	cmp	r1, #0
 800adbe:	daeb      	bge.n	800ad98 <HAL_UART_IRQHandler+0x70>
    HAL_UARTEx_RxFifoFullCallback(huart);
 800adc0:	4620      	mov	r0, r4
}
 800adc2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_RxFifoFullCallback(huart);
 800adc6:	f000 bd1b 	b.w	800b800 <HAL_UARTEx_RxFifoFullCallback>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800adca:	48b7      	ldr	r0, [pc, #732]	@ (800b0a8 <HAL_UART_IRQHandler+0x380>)
 800adcc:	ea05 0c00 	and.w	ip, r5, r0
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800add0:	48b6      	ldr	r0, [pc, #728]	@ (800b0ac <HAL_UART_IRQHandler+0x384>)
 800add2:	4008      	ands	r0, r1
 800add4:	ea50 000c 	orrs.w	r0, r0, ip
 800add8:	d0bb      	beq.n	800ad52 <HAL_UART_IRQHandler+0x2a>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800adda:	07d6      	lsls	r6, r2, #31
 800addc:	d509      	bpl.n	800adf2 <HAL_UART_IRQHandler+0xca>
 800adde:	05c8      	lsls	r0, r1, #23
 800ade0:	d507      	bpl.n	800adf2 <HAL_UART_IRQHandler+0xca>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ade2:	2001      	movs	r0, #1
 800ade4:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ade6:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
 800adea:	f040 0001 	orr.w	r0, r0, #1
 800adee:	f8c4 0090 	str.w	r0, [r4, #144]	@ 0x90
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800adf2:	0796      	lsls	r6, r2, #30
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800adf4:	f002 0004 	and.w	r0, r2, #4
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800adf8:	f140 80aa 	bpl.w	800af50 <HAL_UART_IRQHandler+0x228>
 800adfc:	07ee      	lsls	r6, r5, #31
 800adfe:	d510      	bpl.n	800ae22 <HAL_UART_IRQHandler+0xfa>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ae00:	2602      	movs	r6, #2
 800ae02:	621e      	str	r6, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ae04:	f8d4 6090 	ldr.w	r6, [r4, #144]	@ 0x90
 800ae08:	f046 0604 	orr.w	r6, r6, #4
 800ae0c:	f8c4 6090 	str.w	r6, [r4, #144]	@ 0x90
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ae10:	b138      	cbz	r0, 800ae22 <HAL_UART_IRQHandler+0xfa>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ae12:	2004      	movs	r0, #4
 800ae14:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ae16:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
 800ae1a:	f040 0002 	orr.w	r0, r0, #2
 800ae1e:	f8c4 0090 	str.w	r0, [r4, #144]	@ 0x90
    if (((isrflags & USART_ISR_ORE) != 0U)
 800ae22:	0710      	lsls	r0, r2, #28
 800ae24:	d50c      	bpl.n	800ae40 <HAL_UART_IRQHandler+0x118>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ae26:	f001 0020 	and.w	r0, r1, #32
 800ae2a:	ea50 000c 	orrs.w	r0, r0, ip
 800ae2e:	d007      	beq.n	800ae40 <HAL_UART_IRQHandler+0x118>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ae30:	2008      	movs	r0, #8
 800ae32:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ae34:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
 800ae38:	f040 0008 	orr.w	r0, r0, #8
 800ae3c:	f8c4 0090 	str.w	r0, [r4, #144]	@ 0x90
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800ae40:	0516      	lsls	r6, r2, #20
 800ae42:	d50a      	bpl.n	800ae5a <HAL_UART_IRQHandler+0x132>
 800ae44:	0148      	lsls	r0, r1, #5
 800ae46:	d508      	bpl.n	800ae5a <HAL_UART_IRQHandler+0x132>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ae48:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800ae4c:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800ae4e:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
 800ae52:	f040 0020 	orr.w	r0, r0, #32
 800ae56:	f8c4 0090 	str.w	r0, [r4, #144]	@ 0x90
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ae5a:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
 800ae5e:	2800      	cmp	r0, #0
 800ae60:	d09a      	beq.n	800ad98 <HAL_UART_IRQHandler+0x70>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ae62:	0696      	lsls	r6, r2, #26
 800ae64:	d506      	bpl.n	800ae74 <HAL_UART_IRQHandler+0x14c>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ae66:	f001 0120 	and.w	r1, r1, #32
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ae6a:	f005 5580 	and.w	r5, r5, #268435456	@ 0x10000000
 800ae6e:	4329      	orrs	r1, r5
 800ae70:	f040 8095 	bne.w	800af9e <HAL_UART_IRQHandler+0x276>
      errorcode = huart->ErrorCode;
 800ae74:	f8d4 1090 	ldr.w	r1, [r4, #144]	@ 0x90
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ae78:	689a      	ldr	r2, [r3, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800ae7a:	f001 0128 	and.w	r1, r1, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ae7e:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 800ae82:	ea52 0501 	orrs.w	r5, r2, r1
 800ae86:	f000 80cc 	beq.w	800b022 <HAL_UART_IRQHandler+0x2fa>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae8a:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ae8e:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae92:	e843 2100 	strex	r1, r2, [r3]
 800ae96:	2900      	cmp	r1, #0
 800ae98:	d1f7      	bne.n	800ae8a <HAL_UART_IRQHandler+0x162>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ae9a:	4885      	ldr	r0, [pc, #532]	@ (800b0b0 <HAL_UART_IRQHandler+0x388>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae9c:	f103 0208 	add.w	r2, r3, #8
 800aea0:	e852 2f00 	ldrex	r2, [r2]
 800aea4:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aea6:	f103 0508 	add.w	r5, r3, #8
 800aeaa:	e845 2100 	strex	r1, r2, [r5]
 800aeae:	2900      	cmp	r1, #0
 800aeb0:	d1f4      	bne.n	800ae9c <HAL_UART_IRQHandler+0x174>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aeb2:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 800aeb4:	2a01      	cmp	r2, #1
 800aeb6:	d061      	beq.n	800af7c <HAL_UART_IRQHandler+0x254>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aeb8:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 800aeba:	2120      	movs	r1, #32
 800aebc:	f8c4 108c 	str.w	r1, [r4, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aec0:	66e2      	str	r2, [r4, #108]	@ 0x6c
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aec2:	6899      	ldr	r1, [r3, #8]
  huart->RxISR = NULL;
 800aec4:	6762      	str	r2, [r4, #116]	@ 0x74
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aec6:	064d      	lsls	r5, r1, #25
 800aec8:	d571      	bpl.n	800afae <HAL_UART_IRQHandler+0x286>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aeca:	f103 0208 	add.w	r2, r3, #8
 800aece:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800aed2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aed6:	f103 0008 	add.w	r0, r3, #8
 800aeda:	e840 2100 	strex	r1, r2, [r0]
 800aede:	2900      	cmp	r1, #0
 800aee0:	d1f3      	bne.n	800aeca <HAL_UART_IRQHandler+0x1a2>
          if (huart->hdmarx != NULL)
 800aee2:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 800aee6:	2800      	cmp	r0, #0
 800aee8:	d061      	beq.n	800afae <HAL_UART_IRQHandler+0x286>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800aeea:	4b72      	ldr	r3, [pc, #456]	@ (800b0b4 <HAL_UART_IRQHandler+0x38c>)
 800aeec:	6383      	str	r3, [r0, #56]	@ 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800aeee:	f7fb f9d5 	bl	800629c <HAL_DMA_Abort_IT>
 800aef2:	2800      	cmp	r0, #0
 800aef4:	f43f af50 	beq.w	800ad98 <HAL_UART_IRQHandler+0x70>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800aef8:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 800aefc:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800aefe:	e032      	b.n	800af66 <HAL_UART_IRQHandler+0x23e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800af00:	06d0      	lsls	r0, r2, #27
 800af02:	f57f af2a 	bpl.w	800ad5a <HAL_UART_IRQHandler+0x32>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800af06:	06ce      	lsls	r6, r1, #27
 800af08:	f57f af27 	bpl.w	800ad5a <HAL_UART_IRQHandler+0x32>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800af0c:	2210      	movs	r2, #16
 800af0e:	621a      	str	r2, [r3, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800af10:	6899      	ldr	r1, [r3, #8]
          && (nb_remaining_rx_data < huart->RxXferSize))
 800af12:	f8b4 205c 	ldrh.w	r2, [r4, #92]	@ 0x5c
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800af16:	0648      	lsls	r0, r1, #25
 800af18:	f140 8089 	bpl.w	800b02e <HAL_UART_IRQHandler+0x306>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800af1c:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 800af20:	6805      	ldr	r5, [r0, #0]
 800af22:	6869      	ldr	r1, [r5, #4]
 800af24:	b289      	uxth	r1, r1
      if ((nb_remaining_rx_data > 0U)
 800af26:	2900      	cmp	r1, #0
 800af28:	f000 80b6 	beq.w	800b098 <HAL_UART_IRQHandler+0x370>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800af2c:	4291      	cmp	r1, r2
 800af2e:	f080 80b3 	bcs.w	800b098 <HAL_UART_IRQHandler+0x370>
        huart->RxXferCount = nb_remaining_rx_data;
 800af32:	f8a4 105e 	strh.w	r1, [r4, #94]	@ 0x5e
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800af36:	6829      	ldr	r1, [r5, #0]
 800af38:	0689      	lsls	r1, r1, #26
 800af3a:	d541      	bpl.n	800afc0 <HAL_UART_IRQHandler+0x298>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800af3c:	2302      	movs	r3, #2
 800af3e:	6723      	str	r3, [r4, #112]	@ 0x70
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800af40:	f8b4 105e 	ldrh.w	r1, [r4, #94]	@ 0x5e
 800af44:	1a51      	subs	r1, r2, r1
 800af46:	4620      	mov	r0, r4
 800af48:	b289      	uxth	r1, r1
 800af4a:	f7ff feeb 	bl	800ad24 <HAL_UARTEx_RxEventCallback>
}
 800af4e:	bd70      	pop	{r4, r5, r6, pc}
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800af50:	2800      	cmp	r0, #0
 800af52:	f43f af66 	beq.w	800ae22 <HAL_UART_IRQHandler+0xfa>
 800af56:	07ee      	lsls	r6, r5, #31
 800af58:	f53f af5b 	bmi.w	800ae12 <HAL_UART_IRQHandler+0xea>
 800af5c:	e761      	b.n	800ae22 <HAL_UART_IRQHandler+0xfa>
      if (huart->RxISR != NULL)
 800af5e:	6f43      	ldr	r3, [r0, #116]	@ 0x74
 800af60:	2b00      	cmp	r3, #0
 800af62:	f43f af19 	beq.w	800ad98 <HAL_UART_IRQHandler+0x70>
}
 800af66:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800af6a:	4718      	bx	r3
    if (huart->TxISR != NULL)
 800af6c:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800af6e:	2b00      	cmp	r3, #0
 800af70:	f43f af12 	beq.w	800ad98 <HAL_UART_IRQHandler+0x70>
      huart->TxISR(huart);
 800af74:	4620      	mov	r0, r4
}
 800af76:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      huart->TxISR(huart);
 800af7a:	4718      	bx	r3
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af7c:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800af80:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af84:	e843 2100 	strex	r1, r2, [r3]
 800af88:	2900      	cmp	r1, #0
 800af8a:	d095      	beq.n	800aeb8 <HAL_UART_IRQHandler+0x190>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af8c:	e853 2f00 	ldrex	r2, [r3]
 800af90:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af94:	e843 2100 	strex	r1, r2, [r3]
 800af98:	2900      	cmp	r1, #0
 800af9a:	d1ef      	bne.n	800af7c <HAL_UART_IRQHandler+0x254>
 800af9c:	e78c      	b.n	800aeb8 <HAL_UART_IRQHandler+0x190>
        if (huart->RxISR != NULL)
 800af9e:	6f62      	ldr	r2, [r4, #116]	@ 0x74
 800afa0:	2a00      	cmp	r2, #0
 800afa2:	f43f af67 	beq.w	800ae74 <HAL_UART_IRQHandler+0x14c>
          huart->RxISR(huart);
 800afa6:	4620      	mov	r0, r4
 800afa8:	4790      	blx	r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800afaa:	6823      	ldr	r3, [r4, #0]
 800afac:	e762      	b.n	800ae74 <HAL_UART_IRQHandler+0x14c>
            HAL_UART_ErrorCallback(huart);
 800afae:	4620      	mov	r0, r4
 800afb0:	f7ff fe44 	bl	800ac3c <HAL_UART_ErrorCallback>
}
 800afb4:	bd70      	pop	{r4, r5, r6, pc}
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800afb6:	4620      	mov	r0, r4
}
 800afb8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800afbc:	f000 bc22 	b.w	800b804 <HAL_UARTEx_TxFifoEmptyCallback>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afc0:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800afc4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afc8:	e843 2100 	strex	r1, r2, [r3]
 800afcc:	2900      	cmp	r1, #0
 800afce:	d1f7      	bne.n	800afc0 <HAL_UART_IRQHandler+0x298>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afd0:	f103 0208 	add.w	r2, r3, #8
 800afd4:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800afd8:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afdc:	f103 0508 	add.w	r5, r3, #8
 800afe0:	e845 2100 	strex	r1, r2, [r5]
 800afe4:	2900      	cmp	r1, #0
 800afe6:	d1f3      	bne.n	800afd0 <HAL_UART_IRQHandler+0x2a8>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afe8:	f103 0208 	add.w	r2, r3, #8
 800afec:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800aff0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aff4:	f103 0508 	add.w	r5, r3, #8
 800aff8:	e845 2100 	strex	r1, r2, [r5]
 800affc:	2900      	cmp	r1, #0
 800affe:	d1f3      	bne.n	800afe8 <HAL_UART_IRQHandler+0x2c0>
          huart->RxState = HAL_UART_STATE_READY;
 800b000:	2220      	movs	r2, #32
 800b002:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b006:	66e1      	str	r1, [r4, #108]	@ 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b008:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b00c:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b010:	e843 2100 	strex	r1, r2, [r3]
 800b014:	2900      	cmp	r1, #0
 800b016:	d1f7      	bne.n	800b008 <HAL_UART_IRQHandler+0x2e0>
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b018:	f7fb f908 	bl	800622c <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b01c:	f8b4 205c 	ldrh.w	r2, [r4, #92]	@ 0x5c
 800b020:	e78c      	b.n	800af3c <HAL_UART_IRQHandler+0x214>
        HAL_UART_ErrorCallback(huart);
 800b022:	4620      	mov	r0, r4
 800b024:	f7ff fe0a 	bl	800ac3c <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b028:	f8c4 5090 	str.w	r5, [r4, #144]	@ 0x90
}
 800b02c:	bd70      	pop	{r4, r5, r6, pc}
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b02e:	f8b4 005e 	ldrh.w	r0, [r4, #94]	@ 0x5e
      if ((huart->RxXferCount > 0U)
 800b032:	f8b4 105e 	ldrh.w	r1, [r4, #94]	@ 0x5e
 800b036:	b289      	uxth	r1, r1
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b038:	b280      	uxth	r0, r0
      if ((huart->RxXferCount > 0U)
 800b03a:	2900      	cmp	r1, #0
 800b03c:	f43f aeac 	beq.w	800ad98 <HAL_UART_IRQHandler+0x70>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b040:	1a12      	subs	r2, r2, r0
 800b042:	b291      	uxth	r1, r2
          && (nb_rx_data > 0U))
 800b044:	2900      	cmp	r1, #0
 800b046:	f43f aea7 	beq.w	800ad98 <HAL_UART_IRQHandler+0x70>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b04a:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b04e:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b052:	e843 2000 	strex	r0, r2, [r3]
 800b056:	2800      	cmp	r0, #0
 800b058:	d1f7      	bne.n	800b04a <HAL_UART_IRQHandler+0x322>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b05a:	4d15      	ldr	r5, [pc, #84]	@ (800b0b0 <HAL_UART_IRQHandler+0x388>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b05c:	f103 0208 	add.w	r2, r3, #8
 800b060:	e852 2f00 	ldrex	r2, [r2]
 800b064:	402a      	ands	r2, r5
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b066:	f103 0608 	add.w	r6, r3, #8
 800b06a:	e846 2000 	strex	r0, r2, [r6]
 800b06e:	2800      	cmp	r0, #0
 800b070:	d1f4      	bne.n	800b05c <HAL_UART_IRQHandler+0x334>
        huart->RxState = HAL_UART_STATE_READY;
 800b072:	2220      	movs	r2, #32
 800b074:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c
        huart->RxISR = NULL;
 800b078:	6760      	str	r0, [r4, #116]	@ 0x74
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b07a:	66e0      	str	r0, [r4, #108]	@ 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b07c:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b080:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b084:	e843 2000 	strex	r0, r2, [r3]
 800b088:	2800      	cmp	r0, #0
 800b08a:	d1f7      	bne.n	800b07c <HAL_UART_IRQHandler+0x354>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b08c:	2302      	movs	r3, #2
 800b08e:	6723      	str	r3, [r4, #112]	@ 0x70
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b090:	4620      	mov	r0, r4
 800b092:	f7ff fe47 	bl	800ad24 <HAL_UARTEx_RxEventCallback>
}
 800b096:	bd70      	pop	{r4, r5, r6, pc}
        if (nb_remaining_rx_data == huart->RxXferSize)
 800b098:	4291      	cmp	r1, r2
 800b09a:	f47f ae7d 	bne.w	800ad98 <HAL_UART_IRQHandler+0x70>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800b09e:	682b      	ldr	r3, [r5, #0]
 800b0a0:	069b      	lsls	r3, r3, #26
 800b0a2:	d4f3      	bmi.n	800b08c <HAL_UART_IRQHandler+0x364>
}
 800b0a4:	bd70      	pop	{r4, r5, r6, pc}
 800b0a6:	bf00      	nop
 800b0a8:	10000001 	.word	0x10000001
 800b0ac:	04000120 	.word	0x04000120
 800b0b0:	effffffe 	.word	0xeffffffe
 800b0b4:	0800ad15 	.word	0x0800ad15

0800b0b8 <UART_DMARxHalfCplt>:
{
 800b0b8:	b508      	push	{r3, lr}
 800b0ba:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b0bc:	6a80      	ldr	r0, [r0, #40]	@ 0x28
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800b0be:	2201      	movs	r2, #1
 800b0c0:	6702      	str	r2, [r0, #112]	@ 0x70
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b0c2:	6ec2      	ldr	r2, [r0, #108]	@ 0x6c
 800b0c4:	2a01      	cmp	r2, #1
 800b0c6:	d112      	bne.n	800b0ee <UART_DMARxHalfCplt+0x36>
    huart->RxXferCount = huart->RxXferSize / 2U;
 800b0c8:	f8b0 105c 	ldrh.w	r1, [r0, #92]	@ 0x5c
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 800b0cc:	681b      	ldr	r3, [r3, #0]
    huart->RxXferCount = huart->RxXferSize / 2U;
 800b0ce:	084a      	lsrs	r2, r1, #1
 800b0d0:	f8a0 205e 	strh.w	r2, [r0, #94]	@ 0x5e
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 800b0d4:	685b      	ldr	r3, [r3, #4]
 800b0d6:	b29b      	uxth	r3, r3
    if (nb_remaining_rx_data <= huart->RxXferSize)
 800b0d8:	4299      	cmp	r1, r3
      huart->RxXferCount = nb_remaining_rx_data;
 800b0da:	bf28      	it	cs
 800b0dc:	f8a0 305e 	strhcs.w	r3, [r0, #94]	@ 0x5e
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b0e0:	f8b0 305e 	ldrh.w	r3, [r0, #94]	@ 0x5e
 800b0e4:	1ac9      	subs	r1, r1, r3
 800b0e6:	b289      	uxth	r1, r1
 800b0e8:	f7ff fe1c 	bl	800ad24 <HAL_UARTEx_RxEventCallback>
}
 800b0ec:	bd08      	pop	{r3, pc}
    HAL_UART_RxHalfCpltCallback(huart);
 800b0ee:	f7ff fda3 	bl	800ac38 <HAL_UART_RxHalfCpltCallback>
}
 800b0f2:	bd08      	pop	{r3, pc}

0800b0f4 <UART_DMAReceiveCplt>:
{
 800b0f4:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800b0f6:	6804      	ldr	r4, [r0, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b0f8:	6a80      	ldr	r0, [r0, #40]	@ 0x28
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800b0fa:	6822      	ldr	r2, [r4, #0]
 800b0fc:	f012 0220 	ands.w	r2, r2, #32
 800b100:	d128      	bne.n	800b154 <UART_DMAReceiveCplt+0x60>
    huart->RxXferCount = 0U;
 800b102:	6803      	ldr	r3, [r0, #0]
 800b104:	f8a0 205e 	strh.w	r2, [r0, #94]	@ 0x5e
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b108:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b10c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b110:	e843 2100 	strex	r1, r2, [r3]
 800b114:	2900      	cmp	r1, #0
 800b116:	d1f7      	bne.n	800b108 <UART_DMAReceiveCplt+0x14>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b118:	f103 0208 	add.w	r2, r3, #8
 800b11c:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b120:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b124:	f103 0c08 	add.w	ip, r3, #8
 800b128:	e84c 2100 	strex	r1, r2, [ip]
 800b12c:	2900      	cmp	r1, #0
 800b12e:	d1f3      	bne.n	800b118 <UART_DMAReceiveCplt+0x24>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b130:	f103 0208 	add.w	r2, r3, #8
 800b134:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b138:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b13c:	f103 0c08 	add.w	ip, r3, #8
 800b140:	e84c 2100 	strex	r1, r2, [ip]
 800b144:	2900      	cmp	r1, #0
 800b146:	d1f3      	bne.n	800b130 <UART_DMAReceiveCplt+0x3c>
    huart->RxState = HAL_UART_STATE_READY;
 800b148:	2220      	movs	r2, #32
 800b14a:	f8c0 208c 	str.w	r2, [r0, #140]	@ 0x8c
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b14e:	6ec2      	ldr	r2, [r0, #108]	@ 0x6c
 800b150:	2a01      	cmp	r2, #1
 800b152:	d015      	beq.n	800b180 <UART_DMAReceiveCplt+0x8c>
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b154:	2300      	movs	r3, #0
 800b156:	6703      	str	r3, [r0, #112]	@ 0x70
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b158:	6ec2      	ldr	r2, [r0, #108]	@ 0x6c
 800b15a:	2a01      	cmp	r2, #1
 800b15c:	d121      	bne.n	800b1a2 <UART_DMAReceiveCplt+0xae>
    huart->RxXferCount = 0;
 800b15e:	f8a0 305e 	strh.w	r3, [r0, #94]	@ 0x5e
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 800b162:	6863      	ldr	r3, [r4, #4]
    if (nb_remaining_rx_data < huart->RxXferSize)
 800b164:	f8b0 105c 	ldrh.w	r1, [r0, #92]	@ 0x5c
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 800b168:	b29b      	uxth	r3, r3
    if (nb_remaining_rx_data < huart->RxXferSize)
 800b16a:	4299      	cmp	r1, r3
      huart->RxXferCount = nb_remaining_rx_data;
 800b16c:	bf88      	it	hi
 800b16e:	f8a0 305e 	strhhi.w	r3, [r0, #94]	@ 0x5e
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b172:	f8b0 305e 	ldrh.w	r3, [r0, #94]	@ 0x5e
 800b176:	1ac9      	subs	r1, r1, r3
 800b178:	b289      	uxth	r1, r1
 800b17a:	f7ff fdd3 	bl	800ad24 <HAL_UARTEx_RxEventCallback>
}
 800b17e:	bd10      	pop	{r4, pc}
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b180:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b184:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b188:	e843 2100 	strex	r1, r2, [r3]
 800b18c:	2900      	cmp	r1, #0
 800b18e:	d0e1      	beq.n	800b154 <UART_DMAReceiveCplt+0x60>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b190:	e853 2f00 	ldrex	r2, [r3]
 800b194:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b198:	e843 2100 	strex	r1, r2, [r3]
 800b19c:	2900      	cmp	r1, #0
 800b19e:	d1ef      	bne.n	800b180 <UART_DMAReceiveCplt+0x8c>
 800b1a0:	e7d8      	b.n	800b154 <UART_DMAReceiveCplt+0x60>
    HAL_UART_RxCpltCallback(huart);
 800b1a2:	f7fa f8f1 	bl	8005388 <HAL_UART_RxCpltCallback>
}
 800b1a6:	bd10      	pop	{r4, pc}

0800b1a8 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b1a8:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800b1aa:	071a      	lsls	r2, r3, #28
{
 800b1ac:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b1ae:	d506      	bpl.n	800b1be <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b1b0:	6801      	ldr	r1, [r0, #0]
 800b1b2:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 800b1b4:	684a      	ldr	r2, [r1, #4]
 800b1b6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800b1ba:	4322      	orrs	r2, r4
 800b1bc:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b1be:	07dc      	lsls	r4, r3, #31
 800b1c0:	d506      	bpl.n	800b1d0 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b1c2:	6801      	ldr	r1, [r0, #0]
 800b1c4:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 800b1c6:	684a      	ldr	r2, [r1, #4]
 800b1c8:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800b1cc:	4322      	orrs	r2, r4
 800b1ce:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b1d0:	0799      	lsls	r1, r3, #30
 800b1d2:	d506      	bpl.n	800b1e2 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b1d4:	6801      	ldr	r1, [r0, #0]
 800b1d6:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 800b1d8:	684a      	ldr	r2, [r1, #4]
 800b1da:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800b1de:	4322      	orrs	r2, r4
 800b1e0:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b1e2:	075a      	lsls	r2, r3, #29
 800b1e4:	d506      	bpl.n	800b1f4 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b1e6:	6801      	ldr	r1, [r0, #0]
 800b1e8:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 800b1ea:	684a      	ldr	r2, [r1, #4]
 800b1ec:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800b1f0:	4322      	orrs	r2, r4
 800b1f2:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b1f4:	06dc      	lsls	r4, r3, #27
 800b1f6:	d506      	bpl.n	800b206 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b1f8:	6801      	ldr	r1, [r0, #0]
 800b1fa:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 800b1fc:	688a      	ldr	r2, [r1, #8]
 800b1fe:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800b202:	4322      	orrs	r2, r4
 800b204:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b206:	0699      	lsls	r1, r3, #26
 800b208:	d506      	bpl.n	800b218 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b20a:	6801      	ldr	r1, [r0, #0]
 800b20c:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 800b20e:	688a      	ldr	r2, [r1, #8]
 800b210:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800b214:	4322      	orrs	r2, r4
 800b216:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b218:	065a      	lsls	r2, r3, #25
 800b21a:	d509      	bpl.n	800b230 <UART_AdvFeatureConfig+0x88>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b21c:	6801      	ldr	r1, [r0, #0]
 800b21e:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 800b220:	684a      	ldr	r2, [r1, #4]
 800b222:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 800b226:	4322      	orrs	r2, r4
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b228:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b22c:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b22e:	d00b      	beq.n	800b248 <UART_AdvFeatureConfig+0xa0>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b230:	061b      	lsls	r3, r3, #24
 800b232:	d506      	bpl.n	800b242 <UART_AdvFeatureConfig+0x9a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b234:	6802      	ldr	r2, [r0, #0]
 800b236:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 800b238:	6853      	ldr	r3, [r2, #4]
 800b23a:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 800b23e:	430b      	orrs	r3, r1
 800b240:	6053      	str	r3, [r2, #4]
}
 800b242:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b246:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b248:	684a      	ldr	r2, [r1, #4]
 800b24a:	6c84      	ldr	r4, [r0, #72]	@ 0x48
 800b24c:	f422 02c0 	bic.w	r2, r2, #6291456	@ 0x600000
 800b250:	4322      	orrs	r2, r4
 800b252:	604a      	str	r2, [r1, #4]
 800b254:	e7ec      	b.n	800b230 <UART_AdvFeatureConfig+0x88>
 800b256:	bf00      	nop

0800b258 <UART_CheckIdleState>:
{
 800b258:	b538      	push	{r3, r4, r5, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b25a:	2300      	movs	r3, #0
{
 800b25c:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b25e:	f8c0 3090 	str.w	r3, [r0, #144]	@ 0x90
  tickstart = HAL_GetTick();
 800b262:	f7fa fa83 	bl	800576c <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b266:	6822      	ldr	r2, [r4, #0]
 800b268:	6813      	ldr	r3, [r2, #0]
 800b26a:	071b      	lsls	r3, r3, #28
  tickstart = HAL_GetTick();
 800b26c:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b26e:	d40f      	bmi.n	800b290 <UART_CheckIdleState+0x38>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b270:	6813      	ldr	r3, [r2, #0]
 800b272:	0759      	lsls	r1, r3, #29
 800b274:	d431      	bmi.n	800b2da <UART_CheckIdleState+0x82>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b276:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 800b278:	2220      	movs	r2, #32
 800b27a:	f8c4 2088 	str.w	r2, [r4, #136]	@ 0x88
  return HAL_OK;
 800b27e:	4618      	mov	r0, r3
  huart->RxState = HAL_UART_STATE_READY;
 800b280:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b284:	66e3      	str	r3, [r4, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b286:	6723      	str	r3, [r4, #112]	@ 0x70
      __HAL_UNLOCK(huart);
 800b288:	2300      	movs	r3, #0
 800b28a:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
}
 800b28e:	bd38      	pop	{r3, r4, r5, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b290:	69d3      	ldr	r3, [r2, #28]
 800b292:	0298      	lsls	r0, r3, #10
 800b294:	d4ec      	bmi.n	800b270 <UART_CheckIdleState+0x18>
 800b296:	e00c      	b.n	800b2b2 <UART_CheckIdleState+0x5a>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b298:	6819      	ldr	r1, [r3, #0]
 800b29a:	0749      	lsls	r1, r1, #29
 800b29c:	461a      	mov	r2, r3
 800b29e:	d505      	bpl.n	800b2ac <UART_CheckIdleState+0x54>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b2a0:	69d9      	ldr	r1, [r3, #28]
 800b2a2:	0708      	lsls	r0, r1, #28
 800b2a4:	d44a      	bmi.n	800b33c <UART_CheckIdleState+0xe4>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b2a6:	69d9      	ldr	r1, [r3, #28]
 800b2a8:	0509      	lsls	r1, r1, #20
 800b2aa:	d475      	bmi.n	800b398 <UART_CheckIdleState+0x140>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b2ac:	69db      	ldr	r3, [r3, #28]
 800b2ae:	0298      	lsls	r0, r3, #10
 800b2b0:	d4de      	bmi.n	800b270 <UART_CheckIdleState+0x18>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b2b2:	f7fa fa5b 	bl	800576c <HAL_GetTick>
 800b2b6:	1b43      	subs	r3, r0, r5
 800b2b8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b2bc:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b2be:	d3eb      	bcc.n	800b298 <UART_CheckIdleState+0x40>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2c0:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b2c4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2c8:	e843 2100 	strex	r1, r2, [r3]
 800b2cc:	2900      	cmp	r1, #0
 800b2ce:	d1f7      	bne.n	800b2c0 <UART_CheckIdleState+0x68>
      huart->gState = HAL_UART_STATE_READY;
 800b2d0:	2320      	movs	r3, #32
 800b2d2:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
      return HAL_TIMEOUT;
 800b2d6:	2003      	movs	r0, #3
 800b2d8:	e7d6      	b.n	800b288 <UART_CheckIdleState+0x30>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b2da:	69d3      	ldr	r3, [r2, #28]
 800b2dc:	025b      	lsls	r3, r3, #9
 800b2de:	d4ca      	bmi.n	800b276 <UART_CheckIdleState+0x1e>
 800b2e0:	e00d      	b.n	800b2fe <UART_CheckIdleState+0xa6>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b2e2:	681a      	ldr	r2, [r3, #0]
 800b2e4:	0750      	lsls	r0, r2, #29
 800b2e6:	d507      	bpl.n	800b2f8 <UART_CheckIdleState+0xa0>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b2e8:	69da      	ldr	r2, [r3, #28]
 800b2ea:	0711      	lsls	r1, r2, #28
 800b2ec:	f100 8082 	bmi.w	800b3f4 <UART_CheckIdleState+0x19c>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b2f0:	69da      	ldr	r2, [r3, #28]
 800b2f2:	0512      	lsls	r2, r2, #20
 800b2f4:	f100 80ac 	bmi.w	800b450 <UART_CheckIdleState+0x1f8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b2f8:	69db      	ldr	r3, [r3, #28]
 800b2fa:	025b      	lsls	r3, r3, #9
 800b2fc:	d4bb      	bmi.n	800b276 <UART_CheckIdleState+0x1e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b2fe:	f7fa fa35 	bl	800576c <HAL_GetTick>
 800b302:	1b43      	subs	r3, r0, r5
 800b304:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b308:	6823      	ldr	r3, [r4, #0]
 800b30a:	d3ea      	bcc.n	800b2e2 <UART_CheckIdleState+0x8a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b30c:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b310:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b314:	e843 2100 	strex	r1, r2, [r3]
 800b318:	2900      	cmp	r1, #0
 800b31a:	d1f7      	bne.n	800b30c <UART_CheckIdleState+0xb4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b31c:	f103 0208 	add.w	r2, r3, #8
 800b320:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b324:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b328:	f103 0008 	add.w	r0, r3, #8
 800b32c:	e840 2100 	strex	r1, r2, [r0]
 800b330:	2900      	cmp	r1, #0
 800b332:	d1f3      	bne.n	800b31c <UART_CheckIdleState+0xc4>
      huart->RxState = HAL_UART_STATE_READY;
 800b334:	2320      	movs	r3, #32
 800b336:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
      return HAL_TIMEOUT;
 800b33a:	e7cc      	b.n	800b2d6 <UART_CheckIdleState+0x7e>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b33c:	2208      	movs	r2, #8
 800b33e:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b340:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b344:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b348:	e843 2100 	strex	r1, r2, [r3]
 800b34c:	2900      	cmp	r1, #0
 800b34e:	d1f7      	bne.n	800b340 <UART_CheckIdleState+0xe8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b350:	4856      	ldr	r0, [pc, #344]	@ (800b4ac <UART_CheckIdleState+0x254>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b352:	f103 0208 	add.w	r2, r3, #8
 800b356:	e852 2f00 	ldrex	r2, [r2]
 800b35a:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b35c:	f103 0508 	add.w	r5, r3, #8
 800b360:	e845 2100 	strex	r1, r2, [r5]
 800b364:	2900      	cmp	r1, #0
 800b366:	d1f4      	bne.n	800b352 <UART_CheckIdleState+0xfa>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b368:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 800b36a:	2a01      	cmp	r2, #1
 800b36c:	d00b      	beq.n	800b386 <UART_CheckIdleState+0x12e>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b36e:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 800b370:	2020      	movs	r0, #32
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b372:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 800b374:	f8c4 008c 	str.w	r0, [r4, #140]	@ 0x8c
  huart->RxISR = NULL;
 800b378:	6762      	str	r2, [r4, #116]	@ 0x74
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b37a:	66e2      	str	r2, [r4, #108]	@ 0x6c
          __HAL_UNLOCK(huart);
 800b37c:	f884 2084 	strb.w	r2, [r4, #132]	@ 0x84
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b380:	f8c4 1090 	str.w	r1, [r4, #144]	@ 0x90
          return HAL_ERROR;
 800b384:	e79c      	b.n	800b2c0 <UART_CheckIdleState+0x68>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b386:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b38a:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b38e:	e843 2100 	strex	r1, r2, [r3]
 800b392:	2900      	cmp	r1, #0
 800b394:	d1f7      	bne.n	800b386 <UART_CheckIdleState+0x12e>
 800b396:	e7ea      	b.n	800b36e <UART_CheckIdleState+0x116>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b398:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b39c:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b39e:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b3a2:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3a6:	e843 2100 	strex	r1, r2, [r3]
 800b3aa:	2900      	cmp	r1, #0
 800b3ac:	d1f7      	bne.n	800b39e <UART_CheckIdleState+0x146>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b3ae:	483f      	ldr	r0, [pc, #252]	@ (800b4ac <UART_CheckIdleState+0x254>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3b0:	f103 0208 	add.w	r2, r3, #8
 800b3b4:	e852 2f00 	ldrex	r2, [r2]
 800b3b8:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3ba:	f103 0508 	add.w	r5, r3, #8
 800b3be:	e845 2100 	strex	r1, r2, [r5]
 800b3c2:	2900      	cmp	r1, #0
 800b3c4:	d1f4      	bne.n	800b3b0 <UART_CheckIdleState+0x158>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b3c6:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 800b3c8:	2a01      	cmp	r2, #1
 800b3ca:	d00a      	beq.n	800b3e2 <UART_CheckIdleState+0x18a>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b3cc:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 800b3ce:	2120      	movs	r1, #32
 800b3d0:	f8c4 108c 	str.w	r1, [r4, #140]	@ 0x8c
  huart->RxISR = NULL;
 800b3d4:	6762      	str	r2, [r4, #116]	@ 0x74
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b3d6:	66e2      	str	r2, [r4, #108]	@ 0x6c
          __HAL_UNLOCK(huart);
 800b3d8:	f884 2084 	strb.w	r2, [r4, #132]	@ 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b3dc:	f8c4 1090 	str.w	r1, [r4, #144]	@ 0x90
          return HAL_TIMEOUT;
 800b3e0:	e76e      	b.n	800b2c0 <UART_CheckIdleState+0x68>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3e2:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b3e6:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3ea:	e843 2100 	strex	r1, r2, [r3]
 800b3ee:	2900      	cmp	r1, #0
 800b3f0:	d1f7      	bne.n	800b3e2 <UART_CheckIdleState+0x18a>
 800b3f2:	e7eb      	b.n	800b3cc <UART_CheckIdleState+0x174>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b3f4:	2208      	movs	r2, #8
 800b3f6:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3f8:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b3fc:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b400:	e843 2100 	strex	r1, r2, [r3]
 800b404:	2900      	cmp	r1, #0
 800b406:	d1f7      	bne.n	800b3f8 <UART_CheckIdleState+0x1a0>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b408:	4828      	ldr	r0, [pc, #160]	@ (800b4ac <UART_CheckIdleState+0x254>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b40a:	f103 0208 	add.w	r2, r3, #8
 800b40e:	e852 2f00 	ldrex	r2, [r2]
 800b412:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b414:	f103 0508 	add.w	r5, r3, #8
 800b418:	e845 2100 	strex	r1, r2, [r5]
 800b41c:	2900      	cmp	r1, #0
 800b41e:	d1f4      	bne.n	800b40a <UART_CheckIdleState+0x1b2>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b420:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 800b422:	2a01      	cmp	r2, #1
 800b424:	d00b      	beq.n	800b43e <UART_CheckIdleState+0x1e6>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b426:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 800b428:	2020      	movs	r0, #32
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b42a:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 800b42c:	f8c4 008c 	str.w	r0, [r4, #140]	@ 0x8c
  huart->RxISR = NULL;
 800b430:	6762      	str	r2, [r4, #116]	@ 0x74
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b432:	66e2      	str	r2, [r4, #108]	@ 0x6c
          __HAL_UNLOCK(huart);
 800b434:	f884 2084 	strb.w	r2, [r4, #132]	@ 0x84
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b438:	f8c4 1090 	str.w	r1, [r4, #144]	@ 0x90
          return HAL_ERROR;
 800b43c:	e766      	b.n	800b30c <UART_CheckIdleState+0xb4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b43e:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b442:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b446:	e843 2100 	strex	r1, r2, [r3]
 800b44a:	2900      	cmp	r1, #0
 800b44c:	d1f7      	bne.n	800b43e <UART_CheckIdleState+0x1e6>
 800b44e:	e7ea      	b.n	800b426 <UART_CheckIdleState+0x1ce>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b450:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b454:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b456:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b45a:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b45e:	e843 2100 	strex	r1, r2, [r3]
 800b462:	2900      	cmp	r1, #0
 800b464:	d1f7      	bne.n	800b456 <UART_CheckIdleState+0x1fe>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b466:	4811      	ldr	r0, [pc, #68]	@ (800b4ac <UART_CheckIdleState+0x254>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b468:	f103 0208 	add.w	r2, r3, #8
 800b46c:	e852 2f00 	ldrex	r2, [r2]
 800b470:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b472:	f103 0508 	add.w	r5, r3, #8
 800b476:	e845 2100 	strex	r1, r2, [r5]
 800b47a:	2900      	cmp	r1, #0
 800b47c:	d1f4      	bne.n	800b468 <UART_CheckIdleState+0x210>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b47e:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 800b480:	2a01      	cmp	r2, #1
 800b482:	d00a      	beq.n	800b49a <UART_CheckIdleState+0x242>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b484:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 800b486:	2120      	movs	r1, #32
 800b488:	f8c4 108c 	str.w	r1, [r4, #140]	@ 0x8c
  huart->RxISR = NULL;
 800b48c:	6762      	str	r2, [r4, #116]	@ 0x74
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b48e:	66e2      	str	r2, [r4, #108]	@ 0x6c
          __HAL_UNLOCK(huart);
 800b490:	f884 2084 	strb.w	r2, [r4, #132]	@ 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b494:	f8c4 1090 	str.w	r1, [r4, #144]	@ 0x90
          return HAL_TIMEOUT;
 800b498:	e738      	b.n	800b30c <UART_CheckIdleState+0xb4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b49a:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b49e:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4a2:	e843 2100 	strex	r1, r2, [r3]
 800b4a6:	2900      	cmp	r1, #0
 800b4a8:	d1f7      	bne.n	800b49a <UART_CheckIdleState+0x242>
 800b4aa:	e7eb      	b.n	800b484 <UART_CheckIdleState+0x22c>
 800b4ac:	effffffe 	.word	0xeffffffe

0800b4b0 <HAL_UART_Init>:
  if (huart == NULL)
 800b4b0:	2800      	cmp	r0, #0
 800b4b2:	f000 8106 	beq.w	800b6c2 <HAL_UART_Init+0x212>
  if (huart->gState == HAL_UART_STATE_RESET)
 800b4b6:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
{
 800b4ba:	b570      	push	{r4, r5, r6, lr}
 800b4bc:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d07f      	beq.n	800b5c2 <HAL_UART_Init+0x112>
  __HAL_UART_DISABLE(huart);
 800b4c2:	6825      	ldr	r5, [r4, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b4c4:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
  huart->gState = HAL_UART_STATE_BUSY;
 800b4c6:	2324      	movs	r3, #36	@ 0x24
 800b4c8:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  __HAL_UART_DISABLE(huart);
 800b4cc:	682b      	ldr	r3, [r5, #0]
 800b4ce:	f023 0301 	bic.w	r3, r3, #1
 800b4d2:	602b      	str	r3, [r5, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b4d4:	2a00      	cmp	r2, #0
 800b4d6:	d170      	bne.n	800b5ba <HAL_UART_Init+0x10a>
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b4d8:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
 800b4dc:	68a3      	ldr	r3, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b4de:	6829      	ldr	r1, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b4e0:	4303      	orrs	r3, r0
 800b4e2:	4313      	orrs	r3, r2
 800b4e4:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b4e6:	4a86      	ldr	r2, [pc, #536]	@ (800b700 <HAL_UART_Init+0x250>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b4e8:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b4ea:	400a      	ands	r2, r1
 800b4ec:	4313      	orrs	r3, r2
 800b4ee:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b4f0:	686b      	ldr	r3, [r5, #4]
 800b4f2:	68e2      	ldr	r2, [r4, #12]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b4f4:	6a61      	ldr	r1, [r4, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b4f6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800b4fa:	4313      	orrs	r3, r2
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b4fc:	4a81      	ldr	r2, [pc, #516]	@ (800b704 <HAL_UART_Init+0x254>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b4fe:	606b      	str	r3, [r5, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b500:	4295      	cmp	r5, r2
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b502:	68aa      	ldr	r2, [r5, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b504:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b506:	f022 426e 	bic.w	r2, r2, #3992977408	@ 0xee000000
 800b50a:	f422 6230 	bic.w	r2, r2, #2816	@ 0xb00
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b50e:	f000 8081 	beq.w	800b614 <HAL_UART_Init+0x164>
    tmpreg |= huart->Init.OneBitSampling;
 800b512:	6a26      	ldr	r6, [r4, #32]
 800b514:	4333      	orrs	r3, r6
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b516:	4313      	orrs	r3, r2
 800b518:	60ab      	str	r3, [r5, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b51a:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800b51c:	f023 030f 	bic.w	r3, r3, #15
 800b520:	430b      	orrs	r3, r1
 800b522:	62eb      	str	r3, [r5, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b524:	4b78      	ldr	r3, [pc, #480]	@ (800b708 <HAL_UART_Init+0x258>)
 800b526:	429d      	cmp	r5, r3
 800b528:	d007      	beq.n	800b53a <HAL_UART_Init+0x8a>
  huart->RxISR = NULL;
 800b52a:	2300      	movs	r3, #0
  huart->NbRxDataToProcess = 1;
 800b52c:	f04f 1201 	mov.w	r2, #65537	@ 0x10001
  huart->TxISR = NULL;
 800b530:	e9c4 331d 	strd	r3, r3, [r4, #116]	@ 0x74
  huart->NbRxDataToProcess = 1;
 800b534:	66a2      	str	r2, [r4, #104]	@ 0x68
}
 800b536:	2001      	movs	r0, #1
 800b538:	bd70      	pop	{r4, r5, r6, pc}
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 800b53a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b53e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b542:	f003 0303 	and.w	r3, r3, #3
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b546:	2b02      	cmp	r3, #2
 800b548:	d040      	beq.n	800b5cc <HAL_UART_Init+0x11c>
 800b54a:	2b03      	cmp	r3, #3
 800b54c:	f000 80c1 	beq.w	800b6d2 <HAL_UART_Init+0x222>
 800b550:	2b01      	cmp	r3, #1
 800b552:	f000 80b8 	beq.w	800b6c6 <HAL_UART_Init+0x216>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b556:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800b55a:	f000 80c7 	beq.w	800b6ec <HAL_UART_Init+0x23c>
        pclk = HAL_RCC_GetPCLK2Freq();
 800b55e:	f7fd fc2d 	bl	8008dbc <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 800b562:	2800      	cmp	r0, #0
 800b564:	d072      	beq.n	800b64c <HAL_UART_Init+0x19c>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b566:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800b568:	6863      	ldr	r3, [r4, #4]
 800b56a:	4a68      	ldr	r2, [pc, #416]	@ (800b70c <HAL_UART_Init+0x25c>)
 800b56c:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 800b570:	fbb0 f0f1 	udiv	r0, r0, r1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b574:	f64f 72ef 	movw	r2, #65519	@ 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b578:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800b57c:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b580:	f1a0 0310 	sub.w	r3, r0, #16
 800b584:	4293      	cmp	r3, r2
 800b586:	d8d0      	bhi.n	800b52a <HAL_UART_Init+0x7a>
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b588:	6822      	ldr	r2, [r4, #0]
  huart->RxISR = NULL;
 800b58a:	2300      	movs	r3, #0
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b58c:	60d0      	str	r0, [r2, #12]
  huart->TxISR = NULL;
 800b58e:	e9c4 331d 	strd	r3, r3, [r4, #116]	@ 0x74
  huart->NbRxDataToProcess = 1;
 800b592:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800b596:	66a1      	str	r1, [r4, #104]	@ 0x68
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b598:	6853      	ldr	r3, [r2, #4]
 800b59a:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 800b59e:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b5a0:	6893      	ldr	r3, [r2, #8]
 800b5a2:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 800b5a6:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 800b5a8:	6813      	ldr	r3, [r2, #0]
 800b5aa:	f043 0301 	orr.w	r3, r3, #1
  return (UART_CheckIdleState(huart));
 800b5ae:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 800b5b0:	6013      	str	r3, [r2, #0]
}
 800b5b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return (UART_CheckIdleState(huart));
 800b5b6:	f7ff be4f 	b.w	800b258 <UART_CheckIdleState>
    UART_AdvFeatureConfig(huart);
 800b5ba:	4620      	mov	r0, r4
 800b5bc:	f7ff fdf4 	bl	800b1a8 <UART_AdvFeatureConfig>
 800b5c0:	e78a      	b.n	800b4d8 <HAL_UART_Init+0x28>
    huart->Lock = HAL_UNLOCKED;
 800b5c2:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
    HAL_UART_MspInit(huart);
 800b5c6:	f7f9 fe57 	bl	8005278 <HAL_UART_MspInit>
 800b5ca:	e77a      	b.n	800b4c2 <HAL_UART_Init+0x12>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b5cc:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
        pclk = (uint32_t) HSI_VALUE;
 800b5d0:	484f      	ldr	r0, [pc, #316]	@ (800b710 <HAL_UART_Init+0x260>)
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b5d2:	d1c9      	bne.n	800b568 <HAL_UART_Init+0xb8>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b5d4:	6865      	ldr	r5, [r4, #4]
 800b5d6:	4b4d      	ldr	r3, [pc, #308]	@ (800b70c <HAL_UART_Init+0x25c>)
 800b5d8:	f833 2011 	ldrh.w	r2, [r3, r1, lsl #1]
 800b5dc:	fbb0 f2f2 	udiv	r2, r0, r2
 800b5e0:	086b      	lsrs	r3, r5, #1
 800b5e2:	eb03 0342 	add.w	r3, r3, r2, lsl #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b5e6:	f64f 72ef 	movw	r2, #65519	@ 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b5ea:	fbb3 f3f5 	udiv	r3, r3, r5
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b5ee:	f1a3 0110 	sub.w	r1, r3, #16
 800b5f2:	4291      	cmp	r1, r2
 800b5f4:	d899      	bhi.n	800b52a <HAL_UART_Init+0x7a>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b5f6:	f023 010f 	bic.w	r1, r3, #15
 800b5fa:	b289      	uxth	r1, r1
        huart->Instance->BRR = brrtemp;
 800b5fc:	6822      	ldr	r2, [r4, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b5fe:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 800b602:	430b      	orrs	r3, r1
  huart->NbRxDataToProcess = 1;
 800b604:	f04f 1001 	mov.w	r0, #65537	@ 0x10001
  huart->RxISR = NULL;
 800b608:	2100      	movs	r1, #0
        huart->Instance->BRR = brrtemp;
 800b60a:	60d3      	str	r3, [r2, #12]
  huart->TxISR = NULL;
 800b60c:	e9c4 111d 	strd	r1, r1, [r4, #116]	@ 0x74
  huart->NbRxDataToProcess = 1;
 800b610:	66a0      	str	r0, [r4, #104]	@ 0x68
  return ret;
 800b612:	e7c1      	b.n	800b598 <HAL_UART_Init+0xe8>
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b614:	431a      	orrs	r2, r3
 800b616:	60aa      	str	r2, [r5, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b618:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800b61a:	f023 030f 	bic.w	r3, r3, #15
 800b61e:	430b      	orrs	r3, r1
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800b620:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b624:	62eb      	str	r3, [r5, #44]	@ 0x2c
 800b626:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800b62a:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b62e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b632:	d063      	beq.n	800b6fc <HAL_UART_Init+0x24c>
 800b634:	d811      	bhi.n	800b65a <HAL_UART_Init+0x1aa>
 800b636:	2b00      	cmp	r3, #0
 800b638:	d05b      	beq.n	800b6f2 <HAL_UART_Init+0x242>
 800b63a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b63e:	f47f af74 	bne.w	800b52a <HAL_UART_Init+0x7a>
        pclk = HAL_RCC_GetSysClockFreq();
 800b642:	f7fd fb51 	bl	8008ce8 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 800b646:	b108      	cbz	r0, 800b64c <HAL_UART_Init+0x19c>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b648:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800b64a:	e00c      	b.n	800b666 <HAL_UART_Init+0x1b6>
  huart->NbRxDataToProcess = 1;
 800b64c:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
  huart->TxISR = NULL;
 800b650:	e9c4 001d 	strd	r0, r0, [r4, #116]	@ 0x74
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b654:	6822      	ldr	r2, [r4, #0]
  huart->NbRxDataToProcess = 1;
 800b656:	66a3      	str	r3, [r4, #104]	@ 0x68
  return ret;
 800b658:	e79e      	b.n	800b598 <HAL_UART_Init+0xe8>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b65a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b65e:	f47f af64 	bne.w	800b52a <HAL_UART_Init+0x7a>
        pclk = (uint32_t) LSE_VALUE;
 800b662:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b666:	4b29      	ldr	r3, [pc, #164]	@ (800b70c <HAL_UART_Init+0x25c>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b668:	6865      	ldr	r5, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b66a:	f833 2011 	ldrh.w	r2, [r3, r1, lsl #1]
 800b66e:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b672:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800b676:	428b      	cmp	r3, r1
 800b678:	f4ff af57 	bcc.w	800b52a <HAL_UART_Init+0x7a>
 800b67c:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 800b680:	f63f af53 	bhi.w	800b52a <HAL_UART_Init+0x7a>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b684:	2600      	movs	r6, #0
 800b686:	4633      	mov	r3, r6
 800b688:	4631      	mov	r1, r6
 800b68a:	f7f5 fad5 	bl	8000c38 <__aeabi_uldivmod>
 800b68e:	0209      	lsls	r1, r1, #8
 800b690:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 800b694:	086b      	lsrs	r3, r5, #1
 800b696:	0200      	lsls	r0, r0, #8
 800b698:	18c0      	adds	r0, r0, r3
 800b69a:	462a      	mov	r2, r5
 800b69c:	f141 0100 	adc.w	r1, r1, #0
 800b6a0:	4633      	mov	r3, r6
 800b6a2:	f7f5 fac9 	bl	8000c38 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b6a6:	4b1b      	ldr	r3, [pc, #108]	@ (800b714 <HAL_UART_Init+0x264>)
 800b6a8:	f5a0 7240 	sub.w	r2, r0, #768	@ 0x300
 800b6ac:	429a      	cmp	r2, r3
 800b6ae:	f63f af3c 	bhi.w	800b52a <HAL_UART_Init+0x7a>
          huart->Instance->BRR = usartdiv;
 800b6b2:	6822      	ldr	r2, [r4, #0]
  huart->NbRxDataToProcess = 1;
 800b6b4:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
          huart->Instance->BRR = usartdiv;
 800b6b8:	60d0      	str	r0, [r2, #12]
  huart->TxISR = NULL;
 800b6ba:	e9c4 661d 	strd	r6, r6, [r4, #116]	@ 0x74
  huart->NbRxDataToProcess = 1;
 800b6be:	66a3      	str	r3, [r4, #104]	@ 0x68
  return ret;
 800b6c0:	e76a      	b.n	800b598 <HAL_UART_Init+0xe8>
}
 800b6c2:	2001      	movs	r0, #1
 800b6c4:	4770      	bx	lr
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b6c6:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800b6ca:	d009      	beq.n	800b6e0 <HAL_UART_Init+0x230>
        pclk = HAL_RCC_GetSysClockFreq();
 800b6cc:	f7fd fb0c 	bl	8008ce8 <HAL_RCC_GetSysClockFreq>
        break;
 800b6d0:	e747      	b.n	800b562 <HAL_UART_Init+0xb2>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b6d2:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800b6d6:	f43f af7d 	beq.w	800b5d4 <HAL_UART_Init+0x124>
        pclk = (uint32_t) LSE_VALUE;
 800b6da:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800b6de:	e743      	b.n	800b568 <HAL_UART_Init+0xb8>
        pclk = HAL_RCC_GetSysClockFreq();
 800b6e0:	f7fd fb02 	bl	8008ce8 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 800b6e4:	2800      	cmp	r0, #0
 800b6e6:	d0b1      	beq.n	800b64c <HAL_UART_Init+0x19c>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b6e8:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800b6ea:	e773      	b.n	800b5d4 <HAL_UART_Init+0x124>
        pclk = HAL_RCC_GetPCLK2Freq();
 800b6ec:	f7fd fb66 	bl	8008dbc <HAL_RCC_GetPCLK2Freq>
        break;
 800b6f0:	e7f8      	b.n	800b6e4 <HAL_UART_Init+0x234>
        pclk = HAL_RCC_GetPCLK1Freq();
 800b6f2:	f7fd fb21 	bl	8008d38 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800b6f6:	2800      	cmp	r0, #0
 800b6f8:	d0a8      	beq.n	800b64c <HAL_UART_Init+0x19c>
 800b6fa:	e7a5      	b.n	800b648 <HAL_UART_Init+0x198>
        pclk = (uint32_t) HSI_VALUE;
 800b6fc:	4804      	ldr	r0, [pc, #16]	@ (800b710 <HAL_UART_Init+0x260>)
 800b6fe:	e7b2      	b.n	800b666 <HAL_UART_Init+0x1b6>
 800b700:	cfff69f3 	.word	0xcfff69f3
 800b704:	40008000 	.word	0x40008000
 800b708:	40013800 	.word	0x40013800
 800b70c:	080180e4 	.word	0x080180e4
 800b710:	00f42400 	.word	0x00f42400
 800b714:	000ffcff 	.word	0x000ffcff

0800b718 <UART_Start_Receive_DMA>:
{
 800b718:	b538      	push	{r3, r4, r5, lr}
 800b71a:	4605      	mov	r5, r0
 800b71c:	4613      	mov	r3, r2
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b71e:	2022      	movs	r0, #34	@ 0x22
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b720:	2200      	movs	r2, #0
 800b722:	f8c5 2090 	str.w	r2, [r5, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b726:	f8c5 008c 	str.w	r0, [r5, #140]	@ 0x8c
  if (huart->hdmarx != NULL)
 800b72a:	f8d5 0080 	ldr.w	r0, [r5, #128]	@ 0x80
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800b72e:	682c      	ldr	r4, [r5, #0]
  huart->pRxBuffPtr = pData;
 800b730:	65a9      	str	r1, [r5, #88]	@ 0x58
  huart->RxXferSize = Size;
 800b732:	f8a5 305c 	strh.w	r3, [r5, #92]	@ 0x5c
  if (huart->hdmarx != NULL)
 800b736:	b168      	cbz	r0, 800b754 <UART_Start_Receive_DMA+0x3c>
    huart->hdmarx->XferAbortCallback = NULL;
 800b738:	6382      	str	r2, [r0, #56]	@ 0x38
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800b73a:	460a      	mov	r2, r1
 800b73c:	f104 0124 	add.w	r1, r4, #36	@ 0x24
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b740:	4c1a      	ldr	r4, [pc, #104]	@ (800b7ac <UART_Start_Receive_DMA+0x94>)
 800b742:	62c4      	str	r4, [r0, #44]	@ 0x2c
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b744:	4c1a      	ldr	r4, [pc, #104]	@ (800b7b0 <UART_Start_Receive_DMA+0x98>)
 800b746:	6304      	str	r4, [r0, #48]	@ 0x30
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b748:	4c1a      	ldr	r4, [pc, #104]	@ (800b7b4 <UART_Start_Receive_DMA+0x9c>)
 800b74a:	6344      	str	r4, [r0, #52]	@ 0x34
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800b74c:	f7fa fd16 	bl	800617c <HAL_DMA_Start_IT>
 800b750:	bb18      	cbnz	r0, 800b79a <UART_Start_Receive_DMA+0x82>
 800b752:	682c      	ldr	r4, [r5, #0]
  if (huart->Init.Parity != UART_PARITY_NONE)
 800b754:	692b      	ldr	r3, [r5, #16]
 800b756:	b13b      	cbz	r3, 800b768 <UART_Start_Receive_DMA+0x50>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b758:	e854 3f00 	ldrex	r3, [r4]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b75c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b760:	e844 3200 	strex	r2, r3, [r4]
 800b764:	2a00      	cmp	r2, #0
 800b766:	d1f7      	bne.n	800b758 <UART_Start_Receive_DMA+0x40>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b768:	f104 0308 	add.w	r3, r4, #8
 800b76c:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b770:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b774:	f104 0108 	add.w	r1, r4, #8
 800b778:	e841 3200 	strex	r2, r3, [r1]
 800b77c:	2a00      	cmp	r2, #0
 800b77e:	d1f3      	bne.n	800b768 <UART_Start_Receive_DMA+0x50>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b780:	f104 0308 	add.w	r3, r4, #8
 800b784:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b788:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b78c:	f104 0208 	add.w	r2, r4, #8
 800b790:	e842 3000 	strex	r0, r3, [r2]
 800b794:	2800      	cmp	r0, #0
 800b796:	d1f3      	bne.n	800b780 <UART_Start_Receive_DMA+0x68>
}
 800b798:	bd38      	pop	{r3, r4, r5, pc}
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b79a:	2210      	movs	r2, #16
      huart->RxState = HAL_UART_STATE_READY;
 800b79c:	2320      	movs	r3, #32
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b79e:	f8c5 2090 	str.w	r2, [r5, #144]	@ 0x90
      return HAL_ERROR;
 800b7a2:	2001      	movs	r0, #1
      huart->RxState = HAL_UART_STATE_READY;
 800b7a4:	f8c5 308c 	str.w	r3, [r5, #140]	@ 0x8c
}
 800b7a8:	bd38      	pop	{r3, r4, r5, pc}
 800b7aa:	bf00      	nop
 800b7ac:	0800b0f5 	.word	0x0800b0f5
 800b7b0:	0800b0b9 	.word	0x0800b0b9
 800b7b4:	0800ac41 	.word	0x0800ac41

0800b7b8 <HAL_UART_Receive_DMA>:
  if (huart->RxState == HAL_UART_STATE_READY)
 800b7b8:	f8d0 308c 	ldr.w	r3, [r0, #140]	@ 0x8c
 800b7bc:	2b20      	cmp	r3, #32
 800b7be:	d118      	bne.n	800b7f2 <HAL_UART_Receive_DMA+0x3a>
    if ((pData == NULL) || (Size == 0U))
 800b7c0:	b101      	cbz	r1, 800b7c4 <HAL_UART_Receive_DMA+0xc>
 800b7c2:	b90a      	cbnz	r2, 800b7c8 <HAL_UART_Receive_DMA+0x10>
      return HAL_ERROR;
 800b7c4:	2001      	movs	r0, #1
}
 800b7c6:	4770      	bx	lr
{
 800b7c8:	b430      	push	{r4, r5}
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b7ca:	4b0b      	ldr	r3, [pc, #44]	@ (800b7f8 <HAL_UART_Receive_DMA+0x40>)
 800b7cc:	6804      	ldr	r4, [r0, #0]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b7ce:	2500      	movs	r5, #0
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b7d0:	429c      	cmp	r4, r3
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b7d2:	66c5      	str	r5, [r0, #108]	@ 0x6c
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b7d4:	d00a      	beq.n	800b7ec <HAL_UART_Receive_DMA+0x34>
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b7d6:	6863      	ldr	r3, [r4, #4]
 800b7d8:	021b      	lsls	r3, r3, #8
 800b7da:	d507      	bpl.n	800b7ec <HAL_UART_Receive_DMA+0x34>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7dc:	e854 3f00 	ldrex	r3, [r4]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b7e0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7e4:	e844 3500 	strex	r5, r3, [r4]
 800b7e8:	2d00      	cmp	r5, #0
 800b7ea:	d1f7      	bne.n	800b7dc <HAL_UART_Receive_DMA+0x24>
}
 800b7ec:	bc30      	pop	{r4, r5}
    return (UART_Start_Receive_DMA(huart, pData, Size));
 800b7ee:	f7ff bf93 	b.w	800b718 <UART_Start_Receive_DMA>
    return HAL_BUSY;
 800b7f2:	2002      	movs	r0, #2
 800b7f4:	4770      	bx	lr
 800b7f6:	bf00      	nop
 800b7f8:	40008000 	.word	0x40008000

0800b7fc <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b7fc:	4770      	bx	lr
 800b7fe:	bf00      	nop

0800b800 <HAL_UARTEx_RxFifoFullCallback>:
/**
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
 800b800:	4770      	bx	lr
 800b802:	bf00      	nop

0800b804 <HAL_UARTEx_TxFifoEmptyCallback>:
/**
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
 800b804:	4770      	bx	lr
 800b806:	bf00      	nop

0800b808 <HAL_UARTEx_DisableFifoMode>:

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b808:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 800b80c:	2b01      	cmp	r3, #1
 800b80e:	d017      	beq.n	800b840 <HAL_UARTEx_DisableFifoMode+0x38>

  huart->gState = HAL_UART_STATE_BUSY;

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b810:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800b812:	2324      	movs	r3, #36	@ 0x24
{
 800b814:	b410      	push	{r4}
  huart->gState = HAL_UART_STATE_BUSY;
 800b816:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b81a:	6811      	ldr	r1, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b81c:	6814      	ldr	r4, [r2, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b81e:	2300      	movs	r3, #0
  __HAL_UART_DISABLE(huart);
 800b820:	f024 0401 	bic.w	r4, r4, #1
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b824:	f021 5100 	bic.w	r1, r1, #536870912	@ 0x20000000
  __HAL_UART_DISABLE(huart);
 800b828:	6014      	str	r4, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b82a:	6643      	str	r3, [r0, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b82c:	6011      	str	r1, [r2, #0]

  huart->gState = HAL_UART_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b82e:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_READY;
 800b832:	2220      	movs	r2, #32
 800b834:	f8c0 2088 	str.w	r2, [r0, #136]	@ 0x88

  return HAL_OK;
}
 800b838:	f85d 4b04 	ldr.w	r4, [sp], #4
  return HAL_OK;
 800b83c:	4618      	mov	r0, r3
}
 800b83e:	4770      	bx	lr
  __HAL_LOCK(huart);
 800b840:	2002      	movs	r0, #2
}
 800b842:	4770      	bx	lr

0800b844 <HAL_UARTEx_SetTxFifoThreshold>:
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b844:	f890 2084 	ldrb.w	r2, [r0, #132]	@ 0x84
 800b848:	2a01      	cmp	r2, #1
 800b84a:	d037      	beq.n	800b8bc <HAL_UARTEx_SetTxFifoThreshold+0x78>

  huart->gState = HAL_UART_STATE_BUSY;
 800b84c:	4603      	mov	r3, r0

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b84e:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800b850:	2024      	movs	r0, #36	@ 0x24
{
 800b852:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 800b854:	f8c3 0088 	str.w	r0, [r3, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b858:	6814      	ldr	r4, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b85a:	6810      	ldr	r0, [r2, #0]
 800b85c:	f020 0001 	bic.w	r0, r0, #1
 800b860:	6010      	str	r0, [r2, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b862:	6890      	ldr	r0, [r2, #8]
 800b864:	f020 4060 	bic.w	r0, r0, #3758096384	@ 0xe0000000
 800b868:	4301      	orrs	r1, r0
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b86a:	6e58      	ldr	r0, [r3, #100]	@ 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b86c:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b86e:	b310      	cbz	r0, 800b8b6 <HAL_UARTEx_SetTxFifoThreshold+0x72>
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b870:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b872:	6890      	ldr	r0, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
 800b874:	4d12      	ldr	r5, [pc, #72]	@ (800b8c0 <HAL_UARTEx_SetTxFifoThreshold+0x7c>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b876:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b87a:	ea4f 7e50 	mov.w	lr, r0, lsr #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b87e:	4911      	ldr	r1, [pc, #68]	@ (800b8c4 <HAL_UARTEx_SetTxFifoThreshold+0x80>)
 800b880:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b884:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 800b888:	f815 e00e 	ldrb.w	lr, [r5, lr]
                               (uint16_t)denominator[rx_fifo_threshold];
 800b88c:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b890:	00c0      	lsls	r0, r0, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b892:	00c9      	lsls	r1, r1, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b894:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b898:	fbb1 f1f5 	udiv	r1, r1, r5
 800b89c:	f8a3 1068 	strh.w	r1, [r3, #104]	@ 0x68
  __HAL_UNLOCK(huart);
 800b8a0:	2100      	movs	r1, #0
 800b8a2:	f8a3 006a 	strh.w	r0, [r3, #106]	@ 0x6a
  huart->gState = HAL_UART_STATE_READY;
 800b8a6:	2520      	movs	r5, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b8a8:	6014      	str	r4, [r2, #0]
  __HAL_UNLOCK(huart);
 800b8aa:	f883 1084 	strb.w	r1, [r3, #132]	@ 0x84
  return HAL_OK;
 800b8ae:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 800b8b0:	f8c3 5088 	str.w	r5, [r3, #136]	@ 0x88
}
 800b8b4:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 800b8b6:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 800b8b8:	4608      	mov	r0, r1
 800b8ba:	e7ef      	b.n	800b89c <HAL_UARTEx_SetTxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 800b8bc:	2002      	movs	r0, #2
}
 800b8be:	4770      	bx	lr
 800b8c0:	080180fc 	.word	0x080180fc
 800b8c4:	08018104 	.word	0x08018104

0800b8c8 <HAL_UARTEx_SetRxFifoThreshold>:
  __HAL_LOCK(huart);
 800b8c8:	f890 2084 	ldrb.w	r2, [r0, #132]	@ 0x84
 800b8cc:	2a01      	cmp	r2, #1
 800b8ce:	d037      	beq.n	800b940 <HAL_UARTEx_SetRxFifoThreshold+0x78>
  huart->gState = HAL_UART_STATE_BUSY;
 800b8d0:	4603      	mov	r3, r0
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b8d2:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800b8d4:	2024      	movs	r0, #36	@ 0x24
{
 800b8d6:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 800b8d8:	f8c3 0088 	str.w	r0, [r3, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b8dc:	6814      	ldr	r4, [r2, #0]
  __HAL_UART_DISABLE(huart);
 800b8de:	6810      	ldr	r0, [r2, #0]
 800b8e0:	f020 0001 	bic.w	r0, r0, #1
 800b8e4:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b8e6:	6890      	ldr	r0, [r2, #8]
 800b8e8:	f020 6060 	bic.w	r0, r0, #234881024	@ 0xe000000
 800b8ec:	4301      	orrs	r1, r0
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b8ee:	6e58      	ldr	r0, [r3, #100]	@ 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b8f0:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b8f2:	b310      	cbz	r0, 800b93a <HAL_UARTEx_SetRxFifoThreshold+0x72>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b8f4:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b8f6:	6890      	ldr	r0, [r2, #8]
                               (uint16_t)denominator[tx_fifo_threshold];
 800b8f8:	4d12      	ldr	r5, [pc, #72]	@ (800b944 <HAL_UARTEx_SetRxFifoThreshold+0x7c>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b8fa:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b8fe:	ea4f 7e50 	mov.w	lr, r0, lsr #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b902:	4911      	ldr	r1, [pc, #68]	@ (800b948 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 800b904:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b908:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 800b90c:	f815 e00e 	ldrb.w	lr, [r5, lr]
                               (uint16_t)denominator[rx_fifo_threshold];
 800b910:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b914:	00c0      	lsls	r0, r0, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b916:	00c9      	lsls	r1, r1, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b918:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b91c:	fbb1 f1f5 	udiv	r1, r1, r5
 800b920:	f8a3 1068 	strh.w	r1, [r3, #104]	@ 0x68
  __HAL_UNLOCK(huart);
 800b924:	2100      	movs	r1, #0
 800b926:	f8a3 006a 	strh.w	r0, [r3, #106]	@ 0x6a
  huart->gState = HAL_UART_STATE_READY;
 800b92a:	2520      	movs	r5, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b92c:	6014      	str	r4, [r2, #0]
  __HAL_UNLOCK(huart);
 800b92e:	f883 1084 	strb.w	r1, [r3, #132]	@ 0x84
  return HAL_OK;
 800b932:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 800b934:	f8c3 5088 	str.w	r5, [r3, #136]	@ 0x88
}
 800b938:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 800b93a:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 800b93c:	4608      	mov	r0, r1
 800b93e:	e7ef      	b.n	800b920 <HAL_UARTEx_SetRxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 800b940:	2002      	movs	r0, #2
}
 800b942:	4770      	bx	lr
 800b944:	080180fc 	.word	0x080180fc
 800b948:	08018104 	.word	0x08018104

0800b94c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800b94c:	4603      	mov	r3, r0
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800b94e:	f64b 7280 	movw	r2, #49024	@ 0xbf80
  USBx->ISTR = 0U;
 800b952:	2000      	movs	r0, #0
 800b954:	f8a3 0044 	strh.w	r0, [r3, #68]	@ 0x44
  USBx->CNTR = (uint16_t)winterruptmask;
 800b958:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
}
 800b95c:	4770      	bx	lr
 800b95e:	bf00      	nop

0800b960 <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800b960:	f8b0 1040 	ldrh.w	r1, [r0, #64]	@ 0x40
{
 800b964:	4603      	mov	r3, r0
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800b966:	f244 027f 	movw	r2, #16511	@ 0x407f
 800b96a:	400a      	ands	r2, r1

  return HAL_OK;
}
 800b96c:	2000      	movs	r0, #0
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800b96e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
}
 800b972:	4770      	bx	lr

0800b974 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800b974:	4603      	mov	r3, r0
 800b976:	b082      	sub	sp, #8
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800b978:	f04f 0c01 	mov.w	ip, #1

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800b97c:	2000      	movs	r0, #0
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800b97e:	f8a3 c040 	strh.w	ip, [r3, #64]	@ 0x40
{
 800b982:	f10d 0c08 	add.w	ip, sp, #8
  USBx->CNTR = 0U;
 800b986:	f8a3 0040 	strh.w	r0, [r3, #64]	@ 0x40
{
 800b98a:	e90c 0006 	stmdb	ip, {r1, r2}

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800b98e:	f8a3 0044 	strh.w	r0, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800b992:	f8a3 0050 	strh.w	r0, [r3, #80]	@ 0x50

  return HAL_OK;
}
 800b996:	b002      	add	sp, #8
 800b998:	4770      	bx	lr
 800b99a:	bf00      	nop

0800b99c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b99c:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800b99e:	780c      	ldrb	r4, [r1, #0]

  /* initialize Endpoint */
  switch (ep->type)
 800b9a0:	f891 e003 	ldrb.w	lr, [r1, #3]
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800b9a4:	fa0f fc84 	sxth.w	ip, r4
{
 800b9a8:	4603      	mov	r3, r0
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800b9aa:	f830 202c 	ldrh.w	r2, [r0, ip, lsl #2]
 800b9ae:	f422 42ec 	bic.w	r2, r2, #30208	@ 0x7600
 800b9b2:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800b9b6:	0412      	lsls	r2, r2, #16
 800b9b8:	0c12      	lsrs	r2, r2, #16
  switch (ep->type)
 800b9ba:	f1be 0f03 	cmp.w	lr, #3
 800b9be:	f200 81ec 	bhi.w	800bd9a <USB_ActivateEndpoint+0x3fe>
 800b9c2:	e8df f00e 	tbb	[pc, lr]
 800b9c6:	6f6c      	.short	0x6f6c
 800b9c8:	024f      	.short	0x024f
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800b9ca:	f442 62c0 	orr.w	r2, r2, #1536	@ 0x600
    default:
      ret = HAL_ERROR;
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800b9ce:	f248 0080 	movw	r0, #32896	@ 0x8080
 800b9d2:	4302      	orrs	r2, r0
 800b9d4:	f823 202c 	strh.w	r2, [r3, ip, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800b9d8:	f833 202c 	ldrh.w	r2, [r3, ip, lsl #2]
 800b9dc:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 800b9e0:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800b9e4:	0412      	lsls	r2, r2, #16
 800b9e6:	0c12      	lsrs	r2, r2, #16
 800b9e8:	4322      	orrs	r2, r4
 800b9ea:	4310      	orrs	r0, r2
 800b9ec:	f823 002c 	strh.w	r0, [r3, ip, lsl #2]

  if (ep->doublebuffer == 0U)
 800b9f0:	7b0a      	ldrb	r2, [r1, #12]
 800b9f2:	2a00      	cmp	r2, #0
 800b9f4:	d162      	bne.n	800babc <USB_ActivateEndpoint+0x120>
 800b9f6:	2000      	movs	r0, #0
  {
    if (ep->is_in != 0U)
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800b9f8:	88ca      	ldrh	r2, [r1, #6]
    if (ep->is_in != 0U)
 800b9fa:	784e      	ldrb	r6, [r1, #1]
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800b9fc:	0852      	lsrs	r2, r2, #1
 800b9fe:	0052      	lsls	r2, r2, #1
 800ba00:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
    if (ep->is_in != 0U)
 800ba04:	2e00      	cmp	r6, #0
 800ba06:	f000 812e 	beq.w	800bc66 <USB_ActivateEndpoint+0x2ca>
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800ba0a:	f8b3 1050 	ldrh.w	r1, [r3, #80]	@ 0x50
 800ba0e:	fa15 f181 	uxtah	r1, r5, r1
 800ba12:	f8a1 2400 	strh.w	r2, [r1, #1024]	@ 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ba16:	f833 202c 	ldrh.w	r2, [r3, ip, lsl #2]
 800ba1a:	0652      	lsls	r2, r2, #25
 800ba1c:	d50d      	bpl.n	800ba3a <USB_ActivateEndpoint+0x9e>
 800ba1e:	f833 202c 	ldrh.w	r2, [r3, ip, lsl #2]
 800ba22:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 800ba26:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800ba2a:	0412      	lsls	r2, r2, #16
 800ba2c:	0c12      	lsrs	r2, r2, #16
 800ba2e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800ba32:	f042 02c0 	orr.w	r2, r2, #192	@ 0xc0
 800ba36:	f823 202c 	strh.w	r2, [r3, ip, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800ba3a:	f833 202c 	ldrh.w	r2, [r3, ip, lsl #2]
 800ba3e:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 800ba42:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800ba46:	0412      	lsls	r2, r2, #16
      if (ep->type != EP_TYPE_ISOC)
 800ba48:	f1be 0f01 	cmp.w	lr, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800ba4c:	ea4f 4212 	mov.w	r2, r2, lsr #16
      if (ep->type != EP_TYPE_ISOC)
 800ba50:	d02d      	beq.n	800baae <USB_ActivateEndpoint+0x112>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800ba52:	f082 0220 	eor.w	r2, r2, #32
 800ba56:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800ba5a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800ba5e:	f823 202c 	strh.w	r2, [r3, ip, lsl #2]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
}
 800ba62:	bd70      	pop	{r4, r5, r6, pc}
  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800ba64:	f248 0080 	movw	r0, #32896	@ 0x8080
 800ba68:	4302      	orrs	r2, r0
 800ba6a:	f823 202c 	strh.w	r2, [r3, ip, lsl #2]
  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800ba6e:	f833 202c 	ldrh.w	r2, [r3, ip, lsl #2]
 800ba72:	4dd5      	ldr	r5, [pc, #852]	@ (800bdc8 <USB_ActivateEndpoint+0x42c>)
 800ba74:	b292      	uxth	r2, r2
 800ba76:	402a      	ands	r2, r5
 800ba78:	4322      	orrs	r2, r4
 800ba7a:	4310      	orrs	r0, r2
 800ba7c:	f823 002c 	strh.w	r0, [r3, ip, lsl #2]
  if (ep->doublebuffer == 0U)
 800ba80:	7b0a      	ldrb	r2, [r1, #12]
 800ba82:	2a00      	cmp	r2, #0
 800ba84:	d0b7      	beq.n	800b9f6 <USB_ActivateEndpoint+0x5a>
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800ba86:	f833 202c 	ldrh.w	r2, [r3, ip, lsl #2]
 800ba8a:	b292      	uxth	r2, r2
 800ba8c:	402a      	ands	r2, r5
 800ba8e:	f442 4201 	orr.w	r2, r2, #33024	@ 0x8100
 800ba92:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800ba96:	f823 202c 	strh.w	r2, [r3, ip, lsl #2]
 800ba9a:	2000      	movs	r0, #0
 800ba9c:	e01d      	b.n	800bada <USB_ActivateEndpoint+0x13e>
      wEpRegVal |= USB_EP_CONTROL;
 800ba9e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
      break;
 800baa2:	e794      	b.n	800b9ce <USB_ActivateEndpoint+0x32>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800baa4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
      break;
 800baa8:	e791      	b.n	800b9ce <USB_ActivateEndpoint+0x32>
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800baaa:	f482 5200 	eor.w	r2, r2, #8192	@ 0x2000
 800baae:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800bab2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800bab6:	f823 202c 	strh.w	r2, [r3, ip, lsl #2]
}
 800baba:	bd70      	pop	{r4, r5, r6, pc}
  if (ep->doublebuffer == 0U)
 800babc:	2000      	movs	r0, #0
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800babe:	f833 202c 	ldrh.w	r2, [r3, ip, lsl #2]
 800bac2:	f422 42e2 	bic.w	r2, r2, #28928	@ 0x7100
 800bac6:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800baca:	0412      	lsls	r2, r2, #16
 800bacc:	0c12      	lsrs	r2, r2, #16
 800bace:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800bad2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800bad6:	f823 202c 	strh.w	r2, [r3, ip, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800bada:	f8b3 5050 	ldrh.w	r5, [r3, #80]	@ 0x50
 800bade:	890a      	ldrh	r2, [r1, #8]
 800bae0:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800bae4:	fa14 f585 	uxtah	r5, r4, r5
 800bae8:	0852      	lsrs	r2, r2, #1
 800baea:	0052      	lsls	r2, r2, #1
 800baec:	f8a5 2400 	strh.w	r2, [r5, #1024]	@ 0x400
 800baf0:	f8b3 5050 	ldrh.w	r5, [r3, #80]	@ 0x50
 800baf4:	894a      	ldrh	r2, [r1, #10]
 800baf6:	fa14 f585 	uxtah	r5, r4, r5
 800bafa:	0852      	lsrs	r2, r2, #1
 800bafc:	0052      	lsls	r2, r2, #1
 800bafe:	f8a5 2404 	strh.w	r2, [r5, #1028]	@ 0x404
    if (ep->is_in == 0U)
 800bb02:	784a      	ldrb	r2, [r1, #1]
 800bb04:	2a00      	cmp	r2, #0
 800bb06:	d168      	bne.n	800bbda <USB_ActivateEndpoint+0x23e>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800bb08:	f833 202c 	ldrh.w	r2, [r3, ip, lsl #2]
 800bb0c:	0455      	lsls	r5, r2, #17
 800bb0e:	d50d      	bpl.n	800bb2c <USB_ActivateEndpoint+0x190>
 800bb10:	f833 202c 	ldrh.w	r2, [r3, ip, lsl #2]
 800bb14:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 800bb18:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800bb1c:	0412      	lsls	r2, r2, #16
 800bb1e:	0c12      	lsrs	r2, r2, #16
 800bb20:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 800bb24:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800bb28:	f823 202c 	strh.w	r2, [r3, ip, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800bb2c:	f833 202c 	ldrh.w	r2, [r3, ip, lsl #2]
 800bb30:	0652      	lsls	r2, r2, #25
 800bb32:	d50d      	bpl.n	800bb50 <USB_ActivateEndpoint+0x1b4>
 800bb34:	f833 202c 	ldrh.w	r2, [r3, ip, lsl #2]
 800bb38:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 800bb3c:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800bb40:	0412      	lsls	r2, r2, #16
 800bb42:	0c12      	lsrs	r2, r2, #16
 800bb44:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800bb48:	f042 02c0 	orr.w	r2, r2, #192	@ 0xc0
 800bb4c:	f823 202c 	strh.w	r2, [r3, ip, lsl #2]
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800bb50:	f8b3 2050 	ldrh.w	r2, [r3, #80]	@ 0x50
 800bb54:	690d      	ldr	r5, [r1, #16]
 800bb56:	fa14 f282 	uxtah	r2, r4, r2
 800bb5a:	f204 4406 	addw	r4, r4, #1030	@ 0x406
 800bb5e:	f8b2 1402 	ldrh.w	r1, [r2, #1026]	@ 0x402
 800bb62:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800bb66:	f8a2 1402 	strh.w	r1, [r2, #1026]	@ 0x402
 800bb6a:	2d00      	cmp	r5, #0
 800bb6c:	f000 80cb 	beq.w	800bd06 <USB_ActivateEndpoint+0x36a>
 800bb70:	2d3e      	cmp	r5, #62	@ 0x3e
 800bb72:	f200 80f3 	bhi.w	800bd5c <USB_ActivateEndpoint+0x3c0>
 800bb76:	0869      	lsrs	r1, r5, #1
 800bb78:	07ee      	lsls	r6, r5, #31
 800bb7a:	bf48      	it	mi
 800bb7c:	3101      	addmi	r1, #1
 800bb7e:	028d      	lsls	r5, r1, #10
 800bb80:	f8b2 1402 	ldrh.w	r1, [r2, #1026]	@ 0x402
 800bb84:	b2ad      	uxth	r5, r5
 800bb86:	b289      	uxth	r1, r1
 800bb88:	4329      	orrs	r1, r5
 800bb8a:	f8a2 1402 	strh.w	r1, [r2, #1026]	@ 0x402
 800bb8e:	f8b3 2050 	ldrh.w	r2, [r3, #80]	@ 0x50
 800bb92:	b292      	uxth	r2, r2
 800bb94:	5b11      	ldrh	r1, [r2, r4]
 800bb96:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800bb9a:	5311      	strh	r1, [r2, r4]
 800bb9c:	5b11      	ldrh	r1, [r2, r4]
 800bb9e:	b289      	uxth	r1, r1
 800bba0:	430d      	orrs	r5, r1
 800bba2:	5315      	strh	r5, [r2, r4]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800bba4:	f833 202c 	ldrh.w	r2, [r3, ip, lsl #2]
 800bba8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800bbac:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800bbb0:	0412      	lsls	r2, r2, #16
 800bbb2:	0c12      	lsrs	r2, r2, #16
 800bbb4:	f248 0180 	movw	r1, #32896	@ 0x8080
 800bbb8:	f482 5240 	eor.w	r2, r2, #12288	@ 0x3000
 800bbbc:	430a      	orrs	r2, r1
 800bbbe:	f823 202c 	strh.w	r2, [r3, ip, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800bbc2:	f833 202c 	ldrh.w	r2, [r3, ip, lsl #2]
 800bbc6:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 800bbca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800bbce:	0412      	lsls	r2, r2, #16
 800bbd0:	0c12      	lsrs	r2, r2, #16
 800bbd2:	4311      	orrs	r1, r2
 800bbd4:	f823 102c 	strh.w	r1, [r3, ip, lsl #2]
}
 800bbd8:	bd70      	pop	{r4, r5, r6, pc}
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800bbda:	f833 202c 	ldrh.w	r2, [r3, ip, lsl #2]
 800bbde:	0451      	lsls	r1, r2, #17
 800bbe0:	d50d      	bpl.n	800bbfe <USB_ActivateEndpoint+0x262>
 800bbe2:	f833 202c 	ldrh.w	r2, [r3, ip, lsl #2]
 800bbe6:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 800bbea:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800bbee:	0412      	lsls	r2, r2, #16
 800bbf0:	0c12      	lsrs	r2, r2, #16
 800bbf2:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 800bbf6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800bbfa:	f823 202c 	strh.w	r2, [r3, ip, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800bbfe:	f833 202c 	ldrh.w	r2, [r3, ip, lsl #2]
 800bc02:	0652      	lsls	r2, r2, #25
 800bc04:	d50d      	bpl.n	800bc22 <USB_ActivateEndpoint+0x286>
 800bc06:	f833 202c 	ldrh.w	r2, [r3, ip, lsl #2]
 800bc0a:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 800bc0e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800bc12:	0412      	lsls	r2, r2, #16
 800bc14:	0c12      	lsrs	r2, r2, #16
 800bc16:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800bc1a:	f042 02c0 	orr.w	r2, r2, #192	@ 0xc0
 800bc1e:	f823 202c 	strh.w	r2, [r3, ip, lsl #2]
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800bc22:	f833 202c 	ldrh.w	r2, [r3, ip, lsl #2]
 800bc26:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 800bc2a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800bc2e:	0412      	lsls	r2, r2, #16
 800bc30:	0c12      	lsrs	r2, r2, #16
      if (ep->type != EP_TYPE_ISOC)
 800bc32:	f1be 0f01 	cmp.w	lr, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800bc36:	bf18      	it	ne
 800bc38:	f082 0220 	eorne.w	r2, r2, #32
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800bc3c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800bc40:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800bc44:	f823 202c 	strh.w	r2, [r3, ip, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800bc48:	f833 202c 	ldrh.w	r2, [r3, ip, lsl #2]
 800bc4c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800bc50:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800bc54:	0412      	lsls	r2, r2, #16
 800bc56:	0c12      	lsrs	r2, r2, #16
 800bc58:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800bc5c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800bc60:	f823 202c 	strh.w	r2, [r3, ip, lsl #2]
}
 800bc64:	bd70      	pop	{r4, r5, r6, pc}
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800bc66:	690e      	ldr	r6, [r1, #16]
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800bc68:	f8b3 1050 	ldrh.w	r1, [r3, #80]	@ 0x50
 800bc6c:	fa15 f181 	uxtah	r1, r5, r1
 800bc70:	f8a1 2404 	strh.w	r2, [r1, #1028]	@ 0x404
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800bc74:	f8b3 2050 	ldrh.w	r2, [r3, #80]	@ 0x50
 800bc78:	fa15 f282 	uxtah	r2, r5, r2
 800bc7c:	f8b2 1406 	ldrh.w	r1, [r2, #1030]	@ 0x406
 800bc80:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800bc84:	f8a2 1406 	strh.w	r1, [r2, #1030]	@ 0x406
 800bc88:	b39e      	cbz	r6, 800bcf2 <USB_ActivateEndpoint+0x356>
 800bc8a:	2e3e      	cmp	r6, #62	@ 0x3e
 800bc8c:	d853      	bhi.n	800bd36 <USB_ActivateEndpoint+0x39a>
 800bc8e:	f8b2 1406 	ldrh.w	r1, [r2, #1030]	@ 0x406
 800bc92:	0875      	lsrs	r5, r6, #1
 800bc94:	07f6      	lsls	r6, r6, #31
 800bc96:	bf48      	it	mi
 800bc98:	3501      	addmi	r5, #1
 800bc9a:	b289      	uxth	r1, r1
 800bc9c:	ea41 2185 	orr.w	r1, r1, r5, lsl #10
 800bca0:	b289      	uxth	r1, r1
 800bca2:	f8a2 1406 	strh.w	r1, [r2, #1030]	@ 0x406
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800bca6:	f833 202c 	ldrh.w	r2, [r3, ip, lsl #2]
 800bcaa:	0456      	lsls	r6, r2, #17
 800bcac:	d50d      	bpl.n	800bcca <USB_ActivateEndpoint+0x32e>
 800bcae:	f833 202c 	ldrh.w	r2, [r3, ip, lsl #2]
 800bcb2:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 800bcb6:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800bcba:	0412      	lsls	r2, r2, #16
 800bcbc:	0c12      	lsrs	r2, r2, #16
 800bcbe:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 800bcc2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800bcc6:	f823 202c 	strh.w	r2, [r3, ip, lsl #2]
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800bcca:	f833 202c 	ldrh.w	r2, [r3, ip, lsl #2]
 800bcce:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800bcd2:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800bcd6:	0412      	lsls	r2, r2, #16
 800bcd8:	0c12      	lsrs	r2, r2, #16
      if (ep->num == 0U)
 800bcda:	2c00      	cmp	r4, #0
 800bcdc:	f47f aee5 	bne.w	800baaa <USB_ActivateEndpoint+0x10e>
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800bce0:	f482 5240 	eor.w	r2, r2, #12288	@ 0x3000
 800bce4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800bce8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800bcec:	f823 202c 	strh.w	r2, [r3, ip, lsl #2]
}
 800bcf0:	bd70      	pop	{r4, r5, r6, pc}
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800bcf2:	f8b2 1406 	ldrh.w	r1, [r2, #1030]	@ 0x406
 800bcf6:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 800bcfa:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 800bcfe:	b289      	uxth	r1, r1
 800bd00:	f8a2 1406 	strh.w	r1, [r2, #1030]	@ 0x406
 800bd04:	e7cf      	b.n	800bca6 <USB_ActivateEndpoint+0x30a>
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800bd06:	f8b2 1402 	ldrh.w	r1, [r2, #1026]	@ 0x402
 800bd0a:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 800bd0e:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 800bd12:	b289      	uxth	r1, r1
 800bd14:	f8a2 1402 	strh.w	r1, [r2, #1026]	@ 0x402
 800bd18:	f8b3 1050 	ldrh.w	r1, [r3, #80]	@ 0x50
 800bd1c:	b289      	uxth	r1, r1
 800bd1e:	5b0a      	ldrh	r2, [r1, r4]
 800bd20:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800bd24:	530a      	strh	r2, [r1, r4]
 800bd26:	5b0a      	ldrh	r2, [r1, r4]
 800bd28:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800bd2c:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800bd30:	b292      	uxth	r2, r2
 800bd32:	530a      	strh	r2, [r1, r4]
 800bd34:	e736      	b.n	800bba4 <USB_ActivateEndpoint+0x208>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800bd36:	06f1      	lsls	r1, r6, #27
 800bd38:	f8b2 1406 	ldrh.w	r1, [r2, #1030]	@ 0x406
 800bd3c:	ea4f 1556 	mov.w	r5, r6, lsr #5
 800bd40:	bf08      	it	eq
 800bd42:	f105 35ff 	addeq.w	r5, r5, #4294967295
 800bd46:	b289      	uxth	r1, r1
 800bd48:	ea41 2185 	orr.w	r1, r1, r5, lsl #10
 800bd4c:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 800bd50:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 800bd54:	b289      	uxth	r1, r1
 800bd56:	f8a2 1406 	strh.w	r1, [r2, #1030]	@ 0x406
 800bd5a:	e7a4      	b.n	800bca6 <USB_ActivateEndpoint+0x30a>
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800bd5c:	0969      	lsrs	r1, r5, #5
 800bd5e:	06ed      	lsls	r5, r5, #27
 800bd60:	bf08      	it	eq
 800bd62:	f101 31ff 	addeq.w	r1, r1, #4294967295
 800bd66:	f8b2 5402 	ldrh.w	r5, [r2, #1026]	@ 0x402
 800bd6a:	0289      	lsls	r1, r1, #10
 800bd6c:	b289      	uxth	r1, r1
 800bd6e:	b2ad      	uxth	r5, r5
 800bd70:	430d      	orrs	r5, r1
 800bd72:	f445 4500 	orr.w	r5, r5, #32768	@ 0x8000
 800bd76:	f8a2 5402 	strh.w	r5, [r2, #1026]	@ 0x402
 800bd7a:	f8b3 5050 	ldrh.w	r5, [r3, #80]	@ 0x50
 800bd7e:	b2ad      	uxth	r5, r5
 800bd80:	5b2a      	ldrh	r2, [r5, r4]
 800bd82:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800bd86:	532a      	strh	r2, [r5, r4]
 800bd88:	5b2a      	ldrh	r2, [r5, r4]
 800bd8a:	430a      	orrs	r2, r1
 800bd8c:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800bd90:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800bd94:	b292      	uxth	r2, r2
 800bd96:	532a      	strh	r2, [r5, r4]
 800bd98:	e704      	b.n	800bba4 <USB_ActivateEndpoint+0x208>
  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800bd9a:	f248 0080 	movw	r0, #32896	@ 0x8080
 800bd9e:	4302      	orrs	r2, r0
 800bda0:	f823 202c 	strh.w	r2, [r3, ip, lsl #2]
  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800bda4:	f833 202c 	ldrh.w	r2, [r3, ip, lsl #2]
 800bda8:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 800bdac:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800bdb0:	0412      	lsls	r2, r2, #16
 800bdb2:	0c12      	lsrs	r2, r2, #16
 800bdb4:	4322      	orrs	r2, r4
 800bdb6:	4310      	orrs	r0, r2
 800bdb8:	f823 002c 	strh.w	r0, [r3, ip, lsl #2]
  if (ep->doublebuffer == 0U)
 800bdbc:	7b0a      	ldrb	r2, [r1, #12]
 800bdbe:	2001      	movs	r0, #1
 800bdc0:	2a00      	cmp	r2, #0
 800bdc2:	f47f ae7c 	bne.w	800babe <USB_ActivateEndpoint+0x122>
 800bdc6:	e617      	b.n	800b9f8 <USB_ActivateEndpoint+0x5c>
 800bdc8:	ffff8f8f 	.word	0xffff8f8f

0800bdcc <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800bdcc:	b410      	push	{r4}
  if (ep->doublebuffer == 0U)
 800bdce:	7b0c      	ldrb	r4, [r1, #12]
  {
    if (ep->is_in != 0U)
 800bdd0:	784a      	ldrb	r2, [r1, #1]
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800bdd2:	780b      	ldrb	r3, [r1, #0]
  if (ep->doublebuffer == 0U)
 800bdd4:	b9cc      	cbnz	r4, 800be0a <USB_DeactivateEndpoint+0x3e>
    if (ep->is_in != 0U)
 800bdd6:	2a00      	cmp	r2, #0
 800bdd8:	f000 80b5 	beq.w	800bf46 <USB_DeactivateEndpoint+0x17a>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800bddc:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800bde0:	0654      	lsls	r4, r2, #25
 800bde2:	f100 80c9 	bmi.w	800bf78 <USB_DeactivateEndpoint+0x1ac>

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800bde6:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800bdea:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 800bdee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800bdf2:	0412      	lsls	r2, r2, #16
 800bdf4:	0c12      	lsrs	r2, r2, #16
 800bdf6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800bdfa:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800bdfe:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
}
 800be02:	f85d 4b04 	ldr.w	r4, [sp], #4
 800be06:	2000      	movs	r0, #0
 800be08:	4770      	bx	lr
    if (ep->is_in == 0U)
 800be0a:	2a00      	cmp	r2, #0
 800be0c:	d14d      	bne.n	800beaa <USB_DeactivateEndpoint+0xde>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800be0e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800be12:	0452      	lsls	r2, r2, #17
 800be14:	d50d      	bpl.n	800be32 <USB_DeactivateEndpoint+0x66>
 800be16:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800be1a:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 800be1e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800be22:	0412      	lsls	r2, r2, #16
 800be24:	0c12      	lsrs	r2, r2, #16
 800be26:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 800be2a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800be2e:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800be32:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800be36:	0654      	lsls	r4, r2, #25
 800be38:	d50d      	bpl.n	800be56 <USB_DeactivateEndpoint+0x8a>
 800be3a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800be3e:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 800be42:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800be46:	0412      	lsls	r2, r2, #16
 800be48:	0c12      	lsrs	r2, r2, #16
 800be4a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800be4e:	f042 02c0 	orr.w	r2, r2, #192	@ 0xc0
 800be52:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 800be56:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
}
 800be5a:	f85d 4b04 	ldr.w	r4, [sp], #4
      PCD_TX_DTOG(USBx, ep->num);
 800be5e:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 800be62:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800be66:	0412      	lsls	r2, r2, #16
 800be68:	0c12      	lsrs	r2, r2, #16
 800be6a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800be6e:	f042 02c0 	orr.w	r2, r2, #192	@ 0xc0
 800be72:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800be76:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800be7a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800be7e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800be82:	0412      	lsls	r2, r2, #16
 800be84:	f248 0180 	movw	r1, #32896	@ 0x8080
 800be88:	0c12      	lsrs	r2, r2, #16
 800be8a:	430a      	orrs	r2, r1
 800be8c:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800be90:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800be94:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 800be98:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800be9c:	0412      	lsls	r2, r2, #16
 800be9e:	0c12      	lsrs	r2, r2, #16
 800bea0:	4311      	orrs	r1, r2
 800bea2:	f820 1023 	strh.w	r1, [r0, r3, lsl #2]
}
 800bea6:	2000      	movs	r0, #0
 800bea8:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800beaa:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800beae:	0451      	lsls	r1, r2, #17
 800beb0:	d50d      	bpl.n	800bece <USB_DeactivateEndpoint+0x102>
 800beb2:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800beb6:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 800beba:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800bebe:	0412      	lsls	r2, r2, #16
 800bec0:	0c12      	lsrs	r2, r2, #16
 800bec2:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 800bec6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800beca:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800bece:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800bed2:	0652      	lsls	r2, r2, #25
 800bed4:	d50d      	bpl.n	800bef2 <USB_DeactivateEndpoint+0x126>
 800bed6:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800beda:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 800bede:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800bee2:	0412      	lsls	r2, r2, #16
 800bee4:	0c12      	lsrs	r2, r2, #16
 800bee6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800beea:	f042 02c0 	orr.w	r2, r2, #192	@ 0xc0
 800beee:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 800bef2:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
}
 800bef6:	f85d 4b04 	ldr.w	r4, [sp], #4
      PCD_RX_DTOG(USBx, ep->num);
 800befa:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 800befe:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800bf02:	0412      	lsls	r2, r2, #16
 800bf04:	0c12      	lsrs	r2, r2, #16
 800bf06:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 800bf0a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800bf0e:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800bf12:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800bf16:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 800bf1a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800bf1e:	0412      	lsls	r2, r2, #16
 800bf20:	f248 0180 	movw	r1, #32896	@ 0x8080
 800bf24:	0c12      	lsrs	r2, r2, #16
 800bf26:	430a      	orrs	r2, r1
 800bf28:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800bf2c:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800bf30:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800bf34:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800bf38:	0412      	lsls	r2, r2, #16
 800bf3a:	0c12      	lsrs	r2, r2, #16
 800bf3c:	4311      	orrs	r1, r2
 800bf3e:	f820 1023 	strh.w	r1, [r0, r3, lsl #2]
}
 800bf42:	2000      	movs	r0, #0
 800bf44:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800bf46:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800bf4a:	0451      	lsls	r1, r2, #17
 800bf4c:	d50d      	bpl.n	800bf6a <USB_DeactivateEndpoint+0x19e>
 800bf4e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800bf52:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 800bf56:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800bf5a:	0412      	lsls	r2, r2, #16
 800bf5c:	0c12      	lsrs	r2, r2, #16
 800bf5e:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 800bf62:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800bf66:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800bf6a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800bf6e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800bf72:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800bf76:	e73c      	b.n	800bdf2 <USB_DeactivateEndpoint+0x26>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800bf78:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800bf7c:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 800bf80:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800bf84:	0412      	lsls	r2, r2, #16
 800bf86:	0c12      	lsrs	r2, r2, #16
 800bf88:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800bf8c:	f042 02c0 	orr.w	r2, r2, #192	@ 0xc0
 800bf90:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
 800bf94:	e727      	b.n	800bde6 <USB_DeactivateEndpoint+0x1a>
 800bf96:	bf00      	nop

0800bf98 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800bf98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800bf9c:	784b      	ldrb	r3, [r1, #1]
    {
      len = ep->xfer_len;
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800bf9e:	7b0c      	ldrb	r4, [r1, #12]
  if (ep->is_in == 1U)
 800bfa0:	2b01      	cmp	r3, #1
{
 800bfa2:	b083      	sub	sp, #12
  if (ep->is_in == 1U)
 800bfa4:	d036      	beq.n	800c014 <USB_EPStartXfer+0x7c>

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800bfa6:	b1f4      	cbz	r4, 800bfe6 <USB_EPStartXfer+0x4e>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800bfa8:	78cb      	ldrb	r3, [r1, #3]
 800bfaa:	2b02      	cmp	r3, #2
 800bfac:	f000 80a6 	beq.w	800c0fc <USB_EPStartXfer+0x164>
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800bfb0:	2b01      	cmp	r3, #1
 800bfb2:	f040 809f 	bne.w	800c0f4 <USB_EPStartXfer+0x15c>
      {
        /* Only single packet transfer supported in FS */
        ep->xfer_len = 0U;
 800bfb6:	2300      	movs	r3, #0
 800bfb8:	780a      	ldrb	r2, [r1, #0]
 800bfba:	618b      	str	r3, [r1, #24]
        return HAL_ERROR;
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800bfbc:	b212      	sxth	r2, r2
 800bfbe:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800bfc2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800bfc6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bfca:	041b      	lsls	r3, r3, #16
 800bfcc:	0c1b      	lsrs	r3, r3, #16
 800bfce:	f483 5340 	eor.w	r3, r3, #12288	@ 0x3000
 800bfd2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bfd6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bfda:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  }

  return HAL_OK;
 800bfde:	2000      	movs	r0, #0
}
 800bfe0:	b003      	add	sp, #12
 800bfe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if ((ep->xfer_len == 0U) && (ep->type == EP_TYPE_CTRL))
 800bfe6:	698a      	ldr	r2, [r1, #24]
        PCD_SET_OUT_STATUS(USBx, ep->num);
 800bfe8:	780c      	ldrb	r4, [r1, #0]
      if ((ep->xfer_len == 0U) && (ep->type == EP_TYPE_CTRL))
 800bfea:	2a00      	cmp	r2, #0
 800bfec:	d16e      	bne.n	800c0cc <USB_EPStartXfer+0x134>
 800bfee:	78cb      	ldrb	r3, [r1, #3]
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	f000 80a4 	beq.w	800c13e <USB_EPStartXfer+0x1a6>
        PCD_CLEAR_OUT_STATUS(USBx, ep->num);
 800bff6:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 800bffa:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800bffe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c002:	041b      	lsls	r3, r3, #16
 800c004:	0c1b      	lsrs	r3, r3, #16
 800c006:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c00a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c00e:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      if (ep->xfer_len > ep->maxpacket)
 800c012:	e7d0      	b.n	800bfb6 <USB_EPStartXfer+0x1e>
    if (ep->xfer_len > ep->maxpacket)
 800c014:	690d      	ldr	r5, [r1, #16]
 800c016:	698a      	ldr	r2, [r1, #24]
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800c018:	694b      	ldr	r3, [r1, #20]
 800c01a:	42aa      	cmp	r2, r5
 800c01c:	bf28      	it	cs
 800c01e:	462a      	movcs	r2, r5
    if (ep->doublebuffer == 0U)
 800c020:	f500 6c80 	add.w	ip, r0, #1024	@ 0x400
 800c024:	bb54      	cbnz	r4, 800c07c <USB_EPStartXfer+0xe4>
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800c026:	b295      	uxth	r5, r2
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800c028:	88ce      	ldrh	r6, [r1, #6]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800c02a:	3501      	adds	r5, #1

  for (count = n; count != 0U; count--)
 800c02c:	086d      	lsrs	r5, r5, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800c02e:	4466      	add	r6, ip
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800c030:	b292      	uxth	r2, r2
  for (count = n; count != 0U; count--)
 800c032:	d007      	beq.n	800c044 <USB_EPStartXfer+0xac>
 800c034:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 800c038:	1af6      	subs	r6, r6, r3
  {
    WrVal = pBuf[0];
    WrVal |= (uint16_t)pBuf[1] << 8;
 800c03a:	881c      	ldrh	r4, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 800c03c:	539c      	strh	r4, [r3, r6]
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
    pBuf++;
 800c03e:	3302      	adds	r3, #2
  for (count = n; count != 0U; count--)
 800c040:	42ab      	cmp	r3, r5
 800c042:	d1fa      	bne.n	800c03a <USB_EPStartXfer+0xa2>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800c044:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 800c048:	780c      	ldrb	r4, [r1, #0]
 800c04a:	f200 4502 	addw	r5, r0, #1026	@ 0x402
 800c04e:	fa15 f383 	uxtah	r3, r5, r3
 800c052:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c056:	801a      	strh	r2, [r3, #0]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800c058:	780a      	ldrb	r2, [r1, #0]
 800c05a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800c05e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c062:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c066:	041b      	lsls	r3, r3, #16
 800c068:	0c1b      	lsrs	r3, r3, #16
 800c06a:	f083 0330 	eor.w	r3, r3, #48	@ 0x30
 800c06e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c072:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c076:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 800c07a:	e7b0      	b.n	800bfde <USB_EPStartXfer+0x46>
      if (ep->type == EP_TYPE_BULK)
 800c07c:	78ce      	ldrb	r6, [r1, #3]
        if (ep->xfer_len_db > ep->maxpacket)
 800c07e:	6a0c      	ldr	r4, [r1, #32]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800c080:	f891 e000 	ldrb.w	lr, [r1]
      if (ep->type == EP_TYPE_BULK)
 800c084:	2e02      	cmp	r6, #2
 800c086:	d069      	beq.n	800c15c <USB_EPStartXfer+0x1c4>
        ep->xfer_len_db -= len;
 800c088:	1aa4      	subs	r4, r4, r2
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800c08a:	f830 502e 	ldrh.w	r5, [r0, lr, lsl #2]
        ep->xfer_len_db -= len;
 800c08e:	620c      	str	r4, [r1, #32]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800c090:	b294      	uxth	r4, r2
 800c092:	3401      	adds	r4, #1
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800c094:	f015 0f40 	tst.w	r5, #64	@ 0x40
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800c098:	b292      	uxth	r2, r2
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800c09a:	f8b0 5050 	ldrh.w	r5, [r0, #80]	@ 0x50
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800c09e:	ea4f 0454 	mov.w	r4, r4, lsr #1
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800c0a2:	f000 80ac 	beq.w	800c1fe <USB_EPStartXfer+0x266>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800c0a6:	f200 4606 	addw	r6, r0, #1030	@ 0x406
 800c0aa:	fa16 f585 	uxtah	r5, r6, r5
 800c0ae:	f825 203e 	strh.w	r2, [r5, lr, lsl #3]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800c0b2:	894d      	ldrh	r5, [r1, #10]
 800c0b4:	4465      	add	r5, ip
  for (count = n; count != 0U; count--)
 800c0b6:	2c00      	cmp	r4, #0
 800c0b8:	d0ce      	beq.n	800c058 <USB_EPStartXfer+0xc0>
 800c0ba:	eb03 0444 	add.w	r4, r3, r4, lsl #1
 800c0be:	1aed      	subs	r5, r5, r3
    WrVal |= (uint16_t)pBuf[1] << 8;
 800c0c0:	881a      	ldrh	r2, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 800c0c2:	535a      	strh	r2, [r3, r5]
    pBuf++;
 800c0c4:	3302      	adds	r3, #2
  for (count = n; count != 0U; count--)
 800c0c6:	429c      	cmp	r4, r3
 800c0c8:	d1fa      	bne.n	800c0c0 <USB_EPStartXfer+0x128>
 800c0ca:	e7c5      	b.n	800c058 <USB_EPStartXfer+0xc0>
        PCD_CLEAR_OUT_STATUS(USBx, ep->num);
 800c0cc:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 800c0d0:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800c0d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c0d8:	041b      	lsls	r3, r3, #16
 800c0da:	0c1b      	lsrs	r3, r3, #16
 800c0dc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c0e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c0e4:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      if (ep->xfer_len > ep->maxpacket)
 800c0e8:	690b      	ldr	r3, [r1, #16]
 800c0ea:	429a      	cmp	r2, r3
 800c0ec:	f67f af63 	bls.w	800bfb6 <USB_EPStartXfer+0x1e>
        ep->xfer_len -= ep->maxpacket;
 800c0f0:	1ad3      	subs	r3, r2, r3
 800c0f2:	e761      	b.n	800bfb8 <USB_EPStartXfer+0x20>
        return HAL_ERROR;
 800c0f4:	2001      	movs	r0, #1
}
 800c0f6:	b003      	add	sp, #12
 800c0f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (ep->xfer_count != 0U)
 800c0fc:	69cb      	ldr	r3, [r1, #28]
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800c0fe:	780a      	ldrb	r2, [r1, #0]
        if (ep->xfer_count != 0U)
 800c100:	2b00      	cmp	r3, #0
 800c102:	f43f af5b 	beq.w	800bfbc <USB_EPStartXfer+0x24>
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800c106:	b214      	sxth	r4, r2
 800c108:	f244 0340 	movw	r3, #16448	@ 0x4040
 800c10c:	f830 5024 	ldrh.w	r5, [r0, r4, lsl #2]
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800c110:	ea03 0605 	and.w	r6, r3, r5
 800c114:	43ab      	bics	r3, r5
 800c116:	d002      	beq.n	800c11e <USB_EPStartXfer+0x186>
 800c118:	2e00      	cmp	r6, #0
 800c11a:	f47f af4f 	bne.w	800bfbc <USB_EPStartXfer+0x24>
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800c11e:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 800c122:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c126:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c12a:	041b      	lsls	r3, r3, #16
 800c12c:	0c1b      	lsrs	r3, r3, #16
 800c12e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c132:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c136:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
 800c13a:	780a      	ldrb	r2, [r1, #0]
 800c13c:	e73e      	b.n	800bfbc <USB_EPStartXfer+0x24>
        PCD_SET_OUT_STATUS(USBx, ep->num);
 800c13e:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 800c142:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c146:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c14a:	041b      	lsls	r3, r3, #16
 800c14c:	0c1b      	lsrs	r3, r3, #16
 800c14e:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800c152:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c156:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      if (ep->xfer_len > ep->maxpacket)
 800c15a:	e72c      	b.n	800bfb6 <USB_EPStartXfer+0x1e>
        if (ep->xfer_len_db > ep->maxpacket)
 800c15c:	42a5      	cmp	r5, r4
 800c15e:	f200 4b02 	addw	fp, r0, #1026	@ 0x402
 800c162:	d260      	bcs.n	800c226 <USB_EPStartXfer+0x28e>
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800c164:	f830 602e 	ldrh.w	r6, [r0, lr, lsl #2]
 800c168:	f426 46e0 	bic.w	r6, r6, #28672	@ 0x7000
 800c16c:	f026 0670 	bic.w	r6, r6, #112	@ 0x70
 800c170:	0436      	lsls	r6, r6, #16
 800c172:	0c36      	lsrs	r6, r6, #16
 800c174:	f446 4601 	orr.w	r6, r6, #33024	@ 0x8100
 800c178:	f046 0680 	orr.w	r6, r6, #128	@ 0x80
 800c17c:	f820 602e 	strh.w	r6, [r0, lr, lsl #2]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800c180:	f830 602e 	ldrh.w	r6, [r0, lr, lsl #2]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800c184:	b297      	uxth	r7, r2
          ep->xfer_len_db -= len;
 800c186:	1aa4      	subs	r4, r4, r2
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800c188:	3701      	adds	r7, #1
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800c18a:	f016 0f40 	tst.w	r6, #64	@ 0x40
          ep->xfer_len_db -= len;
 800c18e:	620c      	str	r4, [r1, #32]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800c190:	f8b0 6050 	ldrh.w	r6, [r0, #80]	@ 0x50
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800c194:	ea4f 0757 	mov.w	r7, r7, lsr #1
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800c198:	fa1f f882 	uxth.w	r8, r2
 800c19c:	f200 4906 	addw	r9, r0, #1030	@ 0x406
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800c1a0:	d066      	beq.n	800c270 <USB_EPStartXfer+0x2d8>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800c1a2:	fa19 f686 	uxtah	r6, r9, r6
 800c1a6:	f826 803e 	strh.w	r8, [r6, lr, lsl #3]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800c1aa:	894e      	ldrh	r6, [r1, #10]
 800c1ac:	4466      	add	r6, ip
  for (count = n; count != 0U; count--)
 800c1ae:	b167      	cbz	r7, 800c1ca <USB_EPStartXfer+0x232>
 800c1b0:	eba6 0903 	sub.w	r9, r6, r3
 800c1b4:	eb03 0a47 	add.w	sl, r3, r7, lsl #1
  uint8_t *pBuf = pbUsrBuf;
 800c1b8:	461e      	mov	r6, r3
 800c1ba:	9501      	str	r5, [sp, #4]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800c1bc:	8835      	ldrh	r5, [r6, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 800c1be:	f826 5009 	strh.w	r5, [r6, r9]
    pBuf++;
 800c1c2:	3602      	adds	r6, #2
  for (count = n; count != 0U; count--)
 800c1c4:	4556      	cmp	r6, sl
 800c1c6:	d1f9      	bne.n	800c1bc <USB_EPStartXfer+0x224>
 800c1c8:	9d01      	ldr	r5, [sp, #4]
            ep->xfer_buff += len;
 800c1ca:	4413      	add	r3, r2
            if (ep->xfer_len_db > ep->maxpacket)
 800c1cc:	42a5      	cmp	r5, r4
            ep->xfer_buff += len;
 800c1ce:	614b      	str	r3, [r1, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 800c1d0:	d27c      	bcs.n	800c2cc <USB_EPStartXfer+0x334>
              ep->xfer_len_db -= len;
 800c1d2:	1aa2      	subs	r2, r4, r2
 800c1d4:	620a      	str	r2, [r1, #32]
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800c1d6:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 800c1da:	fa1b f282 	uxtah	r2, fp, r2
 800c1de:	f822 803e 	strh.w	r8, [r2, lr, lsl #3]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800c1e2:	890a      	ldrh	r2, [r1, #8]
 800c1e4:	4462      	add	r2, ip
  for (count = n; count != 0U; count--)
 800c1e6:	2f00      	cmp	r7, #0
 800c1e8:	f43f af36 	beq.w	800c058 <USB_EPStartXfer+0xc0>
 800c1ec:	eb03 0747 	add.w	r7, r3, r7, lsl #1
 800c1f0:	1ad4      	subs	r4, r2, r3
    WrVal |= (uint16_t)pBuf[1] << 8;
 800c1f2:	881a      	ldrh	r2, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 800c1f4:	531a      	strh	r2, [r3, r4]
    pBuf++;
 800c1f6:	3302      	adds	r3, #2
  for (count = n; count != 0U; count--)
 800c1f8:	42bb      	cmp	r3, r7
 800c1fa:	d1fa      	bne.n	800c1f2 <USB_EPStartXfer+0x25a>
 800c1fc:	e72c      	b.n	800c058 <USB_EPStartXfer+0xc0>
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800c1fe:	f200 4602 	addw	r6, r0, #1026	@ 0x402
 800c202:	fa16 f585 	uxtah	r5, r6, r5
 800c206:	f825 203e 	strh.w	r2, [r5, lr, lsl #3]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800c20a:	890d      	ldrh	r5, [r1, #8]
 800c20c:	4465      	add	r5, ip
  for (count = n; count != 0U; count--)
 800c20e:	2c00      	cmp	r4, #0
 800c210:	f43f af22 	beq.w	800c058 <USB_EPStartXfer+0xc0>
 800c214:	eb03 0444 	add.w	r4, r3, r4, lsl #1
 800c218:	1aed      	subs	r5, r5, r3
    WrVal |= (uint16_t)pBuf[1] << 8;
 800c21a:	881a      	ldrh	r2, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 800c21c:	535a      	strh	r2, [r3, r5]
    pBuf++;
 800c21e:	3302      	adds	r3, #2
  for (count = n; count != 0U; count--)
 800c220:	429c      	cmp	r4, r3
 800c222:	d1fa      	bne.n	800c21a <USB_EPStartXfer+0x282>
 800c224:	e718      	b.n	800c058 <USB_EPStartXfer+0xc0>
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800c226:	f830 202e 	ldrh.w	r2, [r0, lr, lsl #2]
 800c22a:	f422 42e2 	bic.w	r2, r2, #28928	@ 0x7100
 800c22e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800c232:	0412      	lsls	r2, r2, #16
 800c234:	0c12      	lsrs	r2, r2, #16
 800c236:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800c23a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800c23e:	f820 202e 	strh.w	r2, [r0, lr, lsl #2]
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800c242:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 800c246:	fa1b f282 	uxtah	r2, fp, r2
 800c24a:	b2a5      	uxth	r5, r4
 800c24c:	f822 503e 	strh.w	r5, [r2, lr, lsl #3]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800c250:	462c      	mov	r4, r5
 800c252:	3401      	adds	r4, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800c254:	890d      	ldrh	r5, [r1, #8]
  for (count = n; count != 0U; count--)
 800c256:	0862      	lsrs	r2, r4, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800c258:	4465      	add	r5, ip
  for (count = n; count != 0U; count--)
 800c25a:	f43f aefd 	beq.w	800c058 <USB_EPStartXfer+0xc0>
 800c25e:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800c262:	1aed      	subs	r5, r5, r3
    WrVal |= (uint16_t)pBuf[1] << 8;
 800c264:	881c      	ldrh	r4, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 800c266:	535c      	strh	r4, [r3, r5]
    pBuf++;
 800c268:	3302      	adds	r3, #2
  for (count = n; count != 0U; count--)
 800c26a:	429a      	cmp	r2, r3
 800c26c:	d1fa      	bne.n	800c264 <USB_EPStartXfer+0x2cc>
 800c26e:	e6f3      	b.n	800c058 <USB_EPStartXfer+0xc0>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800c270:	fa1b f686 	uxtah	r6, fp, r6
 800c274:	f826 803e 	strh.w	r8, [r6, lr, lsl #3]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800c278:	890e      	ldrh	r6, [r1, #8]
 800c27a:	4466      	add	r6, ip
  for (count = n; count != 0U; count--)
 800c27c:	b167      	cbz	r7, 800c298 <USB_EPStartXfer+0x300>
 800c27e:	eba6 0a03 	sub.w	sl, r6, r3
 800c282:	eb03 0b47 	add.w	fp, r3, r7, lsl #1
  uint8_t *pBuf = pbUsrBuf;
 800c286:	461e      	mov	r6, r3
 800c288:	9501      	str	r5, [sp, #4]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800c28a:	8835      	ldrh	r5, [r6, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 800c28c:	f826 500a 	strh.w	r5, [r6, sl]
    pBuf++;
 800c290:	3602      	adds	r6, #2
  for (count = n; count != 0U; count--)
 800c292:	45b3      	cmp	fp, r6
 800c294:	d1f9      	bne.n	800c28a <USB_EPStartXfer+0x2f2>
 800c296:	9d01      	ldr	r5, [sp, #4]
            ep->xfer_buff += len;
 800c298:	4413      	add	r3, r2
            if (ep->xfer_len_db > ep->maxpacket)
 800c29a:	42a5      	cmp	r5, r4
            ep->xfer_buff += len;
 800c29c:	614b      	str	r3, [r1, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 800c29e:	d21c      	bcs.n	800c2da <USB_EPStartXfer+0x342>
              ep->xfer_len_db -= len;
 800c2a0:	1aa4      	subs	r4, r4, r2
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800c2a2:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 800c2a6:	620c      	str	r4, [r1, #32]
 800c2a8:	fa19 f282 	uxtah	r2, r9, r2
 800c2ac:	f822 803e 	strh.w	r8, [r2, lr, lsl #3]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800c2b0:	894a      	ldrh	r2, [r1, #10]
 800c2b2:	4462      	add	r2, ip
  for (count = n; count != 0U; count--)
 800c2b4:	2f00      	cmp	r7, #0
 800c2b6:	f43f aecf 	beq.w	800c058 <USB_EPStartXfer+0xc0>
 800c2ba:	eb03 0747 	add.w	r7, r3, r7, lsl #1
 800c2be:	1ad4      	subs	r4, r2, r3
    WrVal |= (uint16_t)pBuf[1] << 8;
 800c2c0:	881a      	ldrh	r2, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 800c2c2:	531a      	strh	r2, [r3, r4]
    pBuf++;
 800c2c4:	3302      	adds	r3, #2
  for (count = n; count != 0U; count--)
 800c2c6:	429f      	cmp	r7, r3
 800c2c8:	d1fa      	bne.n	800c2c0 <USB_EPStartXfer+0x328>
 800c2ca:	e6c5      	b.n	800c058 <USB_EPStartXfer+0xc0>
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800c2cc:	b2a7      	uxth	r7, r4
 800c2ce:	3701      	adds	r7, #1
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800c2d0:	fa1f f884 	uxth.w	r8, r4
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800c2d4:	087f      	lsrs	r7, r7, #1
              ep->xfer_len_db = 0U;
 800c2d6:	2200      	movs	r2, #0
 800c2d8:	e77c      	b.n	800c1d4 <USB_EPStartXfer+0x23c>
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800c2da:	b2a7      	uxth	r7, r4
 800c2dc:	3701      	adds	r7, #1
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800c2de:	fa1f f884 	uxth.w	r8, r4
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800c2e2:	087f      	lsrs	r7, r7, #1
              ep->xfer_len_db = 0U;
 800c2e4:	2400      	movs	r4, #0
 800c2e6:	e7dc      	b.n	800c2a2 <USB_EPStartXfer+0x30a>

0800c2e8 <USB_EPSetStall>:
  if (ep->is_in != 0U)
 800c2e8:	784b      	ldrb	r3, [r1, #1]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800c2ea:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in != 0U)
 800c2ec:	b18b      	cbz	r3, 800c312 <USB_EPSetStall+0x2a>
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800c2ee:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800c2f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c2f6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c2fa:	041b      	lsls	r3, r3, #16
 800c2fc:	0c1b      	lsrs	r3, r3, #16
 800c2fe:	f083 0310 	eor.w	r3, r3, #16
 800c302:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c306:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c30a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 800c30e:	2000      	movs	r0, #0
 800c310:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800c312:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800c316:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c31a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c31e:	041b      	lsls	r3, r3, #16
 800c320:	0c1b      	lsrs	r3, r3, #16
 800c322:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800c326:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c32a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c32e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 800c332:	2000      	movs	r0, #0
 800c334:	4770      	bx	lr
 800c336:	bf00      	nop

0800c338 <USB_EPClearStall>:
  if (ep->is_in != 0U)
 800c338:	784b      	ldrb	r3, [r1, #1]
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c33a:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in != 0U)
 800c33c:	b333      	cbz	r3, 800c38c <USB_EPClearStall+0x54>
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c33e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800c342:	065b      	lsls	r3, r3, #25
 800c344:	d50d      	bpl.n	800c362 <USB_EPClearStall+0x2a>
 800c346:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800c34a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c34e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c352:	041b      	lsls	r3, r3, #16
 800c354:	0c1b      	lsrs	r3, r3, #16
 800c356:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c35a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c35e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    if (ep->type != EP_TYPE_ISOC)
 800c362:	78cb      	ldrb	r3, [r1, #3]
 800c364:	2b01      	cmp	r3, #1
 800c366:	d00f      	beq.n	800c388 <USB_EPClearStall+0x50>
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800c368:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800c36c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c370:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c374:	041b      	lsls	r3, r3, #16
 800c376:	0c1b      	lsrs	r3, r3, #16
 800c378:	f083 0320 	eor.w	r3, r3, #32
 800c37c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c380:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c384:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 800c388:	2000      	movs	r0, #0
 800c38a:	4770      	bx	lr
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c38c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800c390:	045b      	lsls	r3, r3, #17
 800c392:	d50d      	bpl.n	800c3b0 <USB_EPClearStall+0x78>
 800c394:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800c398:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c39c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c3a0:	041b      	lsls	r3, r3, #16
 800c3a2:	0c1b      	lsrs	r3, r3, #16
 800c3a4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c3a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c3ac:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c3b0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800c3b4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c3b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c3bc:	041b      	lsls	r3, r3, #16
 800c3be:	0c1b      	lsrs	r3, r3, #16
 800c3c0:	f483 5340 	eor.w	r3, r3, #12288	@ 0x3000
 800c3c4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c3c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c3cc:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 800c3d0:	2000      	movs	r0, #0
 800c3d2:	4770      	bx	lr

0800c3d4 <USB_SetDevAddress>:
  if (address == 0U)
 800c3d4:	b911      	cbnz	r1, 800c3dc <USB_SetDevAddress+0x8>
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800c3d6:	2380      	movs	r3, #128	@ 0x80
 800c3d8:	f8a0 304c 	strh.w	r3, [r0, #76]	@ 0x4c
}
 800c3dc:	2000      	movs	r0, #0
 800c3de:	4770      	bx	lr

0800c3e0 <USB_DevConnect>:
{
 800c3e0:	4602      	mov	r2, r0
}
 800c3e2:	2000      	movs	r0, #0
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800c3e4:	f8b2 3058 	ldrh.w	r3, [r2, #88]	@ 0x58
 800c3e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c3ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c3f0:	b29b      	uxth	r3, r3
 800c3f2:	f8a2 3058 	strh.w	r3, [r2, #88]	@ 0x58
}
 800c3f6:	4770      	bx	lr

0800c3f8 <USB_ReadInterrupts>:
  tmpreg = USBx->ISTR;
 800c3f8:	f8b0 0044 	ldrh.w	r0, [r0, #68]	@ 0x44
}
 800c3fc:	b280      	uxth	r0, r0
 800c3fe:	4770      	bx	lr

0800c400 <USB_WritePMA>:
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800c400:	3301      	adds	r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800c402:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
  for (count = n; count != 0U; count--)
 800c406:	085b      	lsrs	r3, r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800c408:	4410      	add	r0, r2
  for (count = n; count != 0U; count--)
 800c40a:	d008      	beq.n	800c41e <USB_WritePMA+0x1e>
  uint8_t *pBuf = pbUsrBuf;
 800c40c:	460a      	mov	r2, r1
 800c40e:	1a80      	subs	r0, r0, r2
 800c410:	eb01 0143 	add.w	r1, r1, r3, lsl #1
    WrVal |= (uint16_t)pBuf[1] << 8;
 800c414:	8813      	ldrh	r3, [r2, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 800c416:	5213      	strh	r3, [r2, r0]
    pBuf++;
 800c418:	3202      	adds	r2, #2
  for (count = n; count != 0U; count--)
 800c41a:	4291      	cmp	r1, r2
 800c41c:	d1fa      	bne.n	800c414 <USB_WritePMA+0x14>
  }
}
 800c41e:	4770      	bx	lr

0800c420 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800c420:	b570      	push	{r4, r5, r6, lr}
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800c422:	f502 6280 	add.w	r2, r2, #1024	@ 0x400

  for (count = n; count != 0U; count--)
 800c426:	085e      	lsrs	r6, r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800c428:	eb00 0502 	add.w	r5, r0, r2
  for (count = n; count != 0U; count--)
 800c42c:	d01c      	beq.n	800c468 <USB_ReadPMA+0x48>
 800c42e:	f06f 0401 	mvn.w	r4, #1
 800c432:	1a64      	subs	r4, r4, r1
 800c434:	1c8a      	adds	r2, r1, #2
 800c436:	442c      	add	r4, r5
 800c438:	46b6      	mov	lr, r6
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800c43a:	f834 c002 	ldrh.w	ip, [r4, r2]
  for (count = n; count != 0U; count--)
 800c43e:	3202      	adds	r2, #2
    RdVal = *(__IO uint16_t *)pdwVal;
 800c440:	fa1f fc8c 	uxth.w	ip, ip
    pdwVal++;
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
    pBuf++;
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800c444:	ea4f 201c 	mov.w	r0, ip, lsr #8
  for (count = n; count != 0U; count--)
 800c448:	f1be 0e01 	subs.w	lr, lr, #1
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800c44c:	f802 cc04 	strb.w	ip, [r2, #-4]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800c450:	f802 0c03 	strb.w	r0, [r2, #-3]
  for (count = n; count != 0U; count--)
 800c454:	d1f1      	bne.n	800c43a <USB_ReadPMA+0x1a>
    pdwVal++;
 800c456:	eb05 0246 	add.w	r2, r5, r6, lsl #1
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800c45a:	07db      	lsls	r3, r3, #31
    pBuf++;
 800c45c:	eb01 0146 	add.w	r1, r1, r6, lsl #1
  {
    RdVal = *pdwVal;
 800c460:	bf44      	itt	mi
 800c462:	8813      	ldrhmi	r3, [r2, #0]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800c464:	700b      	strbmi	r3, [r1, #0]
  }
}
 800c466:	bd70      	pop	{r4, r5, r6, pc}
 800c468:	462a      	mov	r2, r5
  if ((wNBytes % 2U) != 0U)
 800c46a:	07db      	lsls	r3, r3, #31
    RdVal = *pdwVal;
 800c46c:	bf44      	itt	mi
 800c46e:	8813      	ldrhmi	r3, [r2, #0]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800c470:	700b      	strbmi	r3, [r1, #0]
}
 800c472:	bd70      	pop	{r4, r5, r6, pc}

0800c474 <USBD_CDC_EP0_RxReady>:
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c474:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 800c478:	eb00 0083 	add.w	r0, r0, r3, lsl #2
{
 800c47c:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c47e:	f8d0 42c0 	ldr.w	r4, [r0, #704]	@ 0x2c0

  if (hcdc == NULL)
 800c482:	b184      	cbz	r4, 800c4a6 <USBD_CDC_EP0_RxReady+0x32>
  {
    return (uint8_t)USBD_FAIL;
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800c484:	f8d0 32c4 	ldr.w	r3, [r0, #708]	@ 0x2c4
 800c488:	b15b      	cbz	r3, 800c4a2 <USBD_CDC_EP0_RxReady+0x2e>
 800c48a:	f894 0200 	ldrb.w	r0, [r4, #512]	@ 0x200
 800c48e:	28ff      	cmp	r0, #255	@ 0xff
 800c490:	d007      	beq.n	800c4a2 <USBD_CDC_EP0_RxReady+0x2e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800c492:	689b      	ldr	r3, [r3, #8]
 800c494:	f894 2201 	ldrb.w	r2, [r4, #513]	@ 0x201
 800c498:	4621      	mov	r1, r4
 800c49a:	4798      	blx	r3
                                                                     (uint8_t *)hcdc->data,
                                                                     (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 800c49c:	23ff      	movs	r3, #255	@ 0xff
 800c49e:	f884 3200 	strb.w	r3, [r4, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800c4a2:	2000      	movs	r0, #0
}
 800c4a4:	bd10      	pop	{r4, pc}
    return (uint8_t)USBD_FAIL;
 800c4a6:	2003      	movs	r0, #3
}
 800c4a8:	bd10      	pop	{r4, pc}
 800c4aa:	bf00      	nop

0800c4ac <USBD_CDC_GetDeviceQualifierDescriptor>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800c4ac:	230a      	movs	r3, #10
 800c4ae:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_DeviceQualifierDesc;
}
 800c4b0:	4800      	ldr	r0, [pc, #0]	@ (800c4b4 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 800c4b2:	4770      	bx	lr
 800c4b4:	200000bc 	.word	0x200000bc

0800c4b8 <USBD_CDC_GetFSCfgDesc>:
{
 800c4b8:	b570      	push	{r4, r5, r6, lr}
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c4ba:	2182      	movs	r1, #130	@ 0x82
{
 800c4bc:	4606      	mov	r6, r0
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c4be:	480f      	ldr	r0, [pc, #60]	@ (800c4fc <USBD_CDC_GetFSCfgDesc+0x44>)
 800c4c0:	f000 fb92 	bl	800cbe8 <USBD_GetEpDesc>
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c4c4:	2101      	movs	r1, #1
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c4c6:	4605      	mov	r5, r0
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c4c8:	480c      	ldr	r0, [pc, #48]	@ (800c4fc <USBD_CDC_GetFSCfgDesc+0x44>)
 800c4ca:	f000 fb8d 	bl	800cbe8 <USBD_GetEpDesc>
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c4ce:	2181      	movs	r1, #129	@ 0x81
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c4d0:	4604      	mov	r4, r0
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c4d2:	480a      	ldr	r0, [pc, #40]	@ (800c4fc <USBD_CDC_GetFSCfgDesc+0x44>)
 800c4d4:	f000 fb88 	bl	800cbe8 <USBD_GetEpDesc>
  if (pEpCmdDesc != NULL)
 800c4d8:	b10d      	cbz	r5, 800c4de <USBD_CDC_GetFSCfgDesc+0x26>
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800c4da:	2210      	movs	r2, #16
 800c4dc:	71aa      	strb	r2, [r5, #6]
  if (pEpOutDesc != NULL)
 800c4de:	b11c      	cbz	r4, 800c4e8 <USBD_CDC_GetFSCfgDesc+0x30>
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c4e0:	2200      	movs	r2, #0
 800c4e2:	2140      	movs	r1, #64	@ 0x40
 800c4e4:	7121      	strb	r1, [r4, #4]
 800c4e6:	7162      	strb	r2, [r4, #5]
  if (pEpInDesc != NULL)
 800c4e8:	b118      	cbz	r0, 800c4f2 <USBD_CDC_GetFSCfgDesc+0x3a>
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c4ea:	2200      	movs	r2, #0
 800c4ec:	2140      	movs	r1, #64	@ 0x40
 800c4ee:	7101      	strb	r1, [r0, #4]
 800c4f0:	7142      	strb	r2, [r0, #5]
  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c4f2:	2343      	movs	r3, #67	@ 0x43
}
 800c4f4:	4801      	ldr	r0, [pc, #4]	@ (800c4fc <USBD_CDC_GetFSCfgDesc+0x44>)
  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c4f6:	8033      	strh	r3, [r6, #0]
}
 800c4f8:	bd70      	pop	{r4, r5, r6, pc}
 800c4fa:	bf00      	nop
 800c4fc:	20000040 	.word	0x20000040

0800c500 <USBD_CDC_GetHSCfgDesc>:
{
 800c500:	b570      	push	{r4, r5, r6, lr}
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c502:	2182      	movs	r1, #130	@ 0x82
{
 800c504:	4606      	mov	r6, r0
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c506:	480f      	ldr	r0, [pc, #60]	@ (800c544 <USBD_CDC_GetHSCfgDesc+0x44>)
 800c508:	f000 fb6e 	bl	800cbe8 <USBD_GetEpDesc>
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c50c:	2101      	movs	r1, #1
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c50e:	4605      	mov	r5, r0
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c510:	480c      	ldr	r0, [pc, #48]	@ (800c544 <USBD_CDC_GetHSCfgDesc+0x44>)
 800c512:	f000 fb69 	bl	800cbe8 <USBD_GetEpDesc>
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c516:	2181      	movs	r1, #129	@ 0x81
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c518:	4604      	mov	r4, r0
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c51a:	480a      	ldr	r0, [pc, #40]	@ (800c544 <USBD_CDC_GetHSCfgDesc+0x44>)
 800c51c:	f000 fb64 	bl	800cbe8 <USBD_GetEpDesc>
  if (pEpCmdDesc != NULL)
 800c520:	b10d      	cbz	r5, 800c526 <USBD_CDC_GetHSCfgDesc+0x26>
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800c522:	2210      	movs	r2, #16
 800c524:	71aa      	strb	r2, [r5, #6]
  if (pEpOutDesc != NULL)
 800c526:	b11c      	cbz	r4, 800c530 <USBD_CDC_GetHSCfgDesc+0x30>
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800c528:	2100      	movs	r1, #0
 800c52a:	2202      	movs	r2, #2
 800c52c:	7121      	strb	r1, [r4, #4]
 800c52e:	7162      	strb	r2, [r4, #5]
  if (pEpInDesc != NULL)
 800c530:	b118      	cbz	r0, 800c53a <USBD_CDC_GetHSCfgDesc+0x3a>
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800c532:	2100      	movs	r1, #0
 800c534:	2202      	movs	r2, #2
 800c536:	7101      	strb	r1, [r0, #4]
 800c538:	7142      	strb	r2, [r0, #5]
  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c53a:	2343      	movs	r3, #67	@ 0x43
}
 800c53c:	4801      	ldr	r0, [pc, #4]	@ (800c544 <USBD_CDC_GetHSCfgDesc+0x44>)
  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c53e:	8033      	strh	r3, [r6, #0]
}
 800c540:	bd70      	pop	{r4, r5, r6, pc}
 800c542:	bf00      	nop
 800c544:	20000040 	.word	0x20000040

0800c548 <USBD_CDC_DataOut>:
{
 800c548:	b538      	push	{r3, r4, r5, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c54a:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 800c54e:	33b0      	adds	r3, #176	@ 0xb0
 800c550:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c554:	b195      	cbz	r5, 800c57c <USBD_CDC_DataOut+0x34>
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800c556:	4604      	mov	r4, r0
 800c558:	f002 fdbe 	bl	800f0d8 <USBD_LL_GetRxDataSize>
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800c55c:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800c560:	f8c5 020c 	str.w	r0, [r5, #524]	@ 0x20c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800c564:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800c568:	f8d5 0204 	ldr.w	r0, [r5, #516]	@ 0x204
 800c56c:	f8d4 32c4 	ldr.w	r3, [r4, #708]	@ 0x2c4
 800c570:	f505 7103 	add.w	r1, r5, #524	@ 0x20c
 800c574:	68db      	ldr	r3, [r3, #12]
 800c576:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 800c578:	2000      	movs	r0, #0
}
 800c57a:	bd38      	pop	{r3, r4, r5, pc}
    return (uint8_t)USBD_FAIL;
 800c57c:	2003      	movs	r0, #3
}
 800c57e:	bd38      	pop	{r3, r4, r5, pc}

0800c580 <USBD_CDC_DataIn>:
{
 800c580:	b570      	push	{r4, r5, r6, lr}
 800c582:	f8d0 42d4 	ldr.w	r4, [r0, #724]	@ 0x2d4
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800c586:	f8d0 62c8 	ldr.w	r6, [r0, #712]	@ 0x2c8
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c58a:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 800c58e:	f8d4 52c0 	ldr.w	r5, [r4, #704]	@ 0x2c0
 800c592:	b335      	cbz	r5, 800c5e2 <USBD_CDC_DataIn+0x62>
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800c594:	f001 0c0f 	and.w	ip, r1, #15
 800c598:	eb0c 0e8c 	add.w	lr, ip, ip, lsl #2
 800c59c:	eb00 0c8e 	add.w	ip, r0, lr, lsl #2
 800c5a0:	460a      	mov	r2, r1
 800c5a2:	f8dc 3018 	ldr.w	r3, [ip, #24]
 800c5a6:	b96b      	cbnz	r3, 800c5c4 <USBD_CDC_DataIn+0x44>
    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800c5a8:	f8d4 32c4 	ldr.w	r3, [r4, #708]	@ 0x2c4
 800c5ac:	691b      	ldr	r3, [r3, #16]
    hcdc->TxState = 0U;
 800c5ae:	2100      	movs	r1, #0
 800c5b0:	f8c5 1214 	str.w	r1, [r5, #532]	@ 0x214
    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800c5b4:	b123      	cbz	r3, 800c5c0 <USBD_CDC_DataIn+0x40>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800c5b6:	f8d5 0208 	ldr.w	r0, [r5, #520]	@ 0x208
 800c5ba:	f505 7104 	add.w	r1, r5, #528	@ 0x210
 800c5be:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 800c5c0:	2000      	movs	r0, #0
}
 800c5c2:	bd70      	pop	{r4, r5, r6, pc}
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800c5c4:	eb06 06ce 	add.w	r6, r6, lr, lsl #3
 800c5c8:	6a36      	ldr	r6, [r6, #32]
 800c5ca:	fbb3 fef6 	udiv	lr, r3, r6
 800c5ce:	fb06 331e 	mls	r3, r6, lr, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d1e8      	bne.n	800c5a8 <USBD_CDC_DataIn+0x28>
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800c5d6:	f8cc 3018 	str.w	r3, [ip, #24]
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800c5da:	461a      	mov	r2, r3
 800c5dc:	f002 fd64 	bl	800f0a8 <USBD_LL_Transmit>
 800c5e0:	e7ee      	b.n	800c5c0 <USBD_CDC_DataIn+0x40>
    return (uint8_t)USBD_FAIL;
 800c5e2:	2003      	movs	r0, #3
}
 800c5e4:	bd70      	pop	{r4, r5, r6, pc}
 800c5e6:	bf00      	nop

0800c5e8 <USBD_CDC_Setup>:
{
 800c5e8:	b570      	push	{r4, r5, r6, lr}
 800c5ea:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 800c5ee:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800c5f2:	b082      	sub	sp, #8
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c5f4:	f8d3 62c0 	ldr.w	r6, [r3, #704]	@ 0x2c0
  uint8_t ifalt = 0U;
 800c5f8:	2200      	movs	r2, #0
 800c5fa:	f88d 2005 	strb.w	r2, [sp, #5]
  uint16_t status_info = 0U;
 800c5fe:	f8ad 2006 	strh.w	r2, [sp, #6]
  if (hcdc == NULL)
 800c602:	b166      	cbz	r6, 800c61e <USBD_CDC_Setup+0x36>
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c604:	f891 c000 	ldrb.w	ip, [r1]
 800c608:	f01c 0260 	ands.w	r2, ip, #96	@ 0x60
 800c60c:	4604      	mov	r4, r0
 800c60e:	460d      	mov	r5, r1
 800c610:	d01e      	beq.n	800c650 <USBD_CDC_Setup+0x68>
 800c612:	2a20      	cmp	r2, #32
 800c614:	d006      	beq.n	800c624 <USBD_CDC_Setup+0x3c>
          USBD_CtlError(pdev, req);
 800c616:	4629      	mov	r1, r5
 800c618:	4620      	mov	r0, r4
 800c61a:	f000 fdaf 	bl	800d17c <USBD_CtlError>
    return (uint8_t)USBD_FAIL;
 800c61e:	2003      	movs	r0, #3
}
 800c620:	b002      	add	sp, #8
 800c622:	bd70      	pop	{r4, r5, r6, pc}
      if (req->wLength != 0U)
 800c624:	88ca      	ldrh	r2, [r1, #6]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c626:	f891 e001 	ldrb.w	lr, [r1, #1]
      if (req->wLength != 0U)
 800c62a:	b37a      	cbz	r2, 800c68c <USBD_CDC_Setup+0xa4>
        if ((req->bmRequest & 0x80U) != 0U)
 800c62c:	f01c 0f80 	tst.w	ip, #128	@ 0x80
 800c630:	d04c      	beq.n	800c6cc <USBD_CDC_Setup+0xe4>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c632:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800c636:	4631      	mov	r1, r6
 800c638:	689b      	ldr	r3, [r3, #8]
 800c63a:	4670      	mov	r0, lr
 800c63c:	4798      	blx	r3
          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800c63e:	88ea      	ldrh	r2, [r5, #6]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800c640:	2a07      	cmp	r2, #7
 800c642:	4631      	mov	r1, r6
 800c644:	bf28      	it	cs
 800c646:	2207      	movcs	r2, #7
 800c648:	4620      	mov	r0, r4
 800c64a:	f000 fdcf 	bl	800d1ec <USBD_CtlSendData>
 800c64e:	e022      	b.n	800c696 <USBD_CDC_Setup+0xae>
      switch (req->bRequest)
 800c650:	784b      	ldrb	r3, [r1, #1]
 800c652:	2b0b      	cmp	r3, #11
 800c654:	d8df      	bhi.n	800c616 <USBD_CDC_Setup+0x2e>
 800c656:	a201      	add	r2, pc, #4	@ (adr r2, 800c65c <USBD_CDC_Setup+0x74>)
 800c658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c65c:	0800c6a5 	.word	0x0800c6a5
 800c660:	0800c697 	.word	0x0800c697
 800c664:	0800c617 	.word	0x0800c617
 800c668:	0800c617 	.word	0x0800c617
 800c66c:	0800c617 	.word	0x0800c617
 800c670:	0800c617 	.word	0x0800c617
 800c674:	0800c617 	.word	0x0800c617
 800c678:	0800c617 	.word	0x0800c617
 800c67c:	0800c617 	.word	0x0800c617
 800c680:	0800c617 	.word	0x0800c617
 800c684:	0800c6b9 	.word	0x0800c6b9
 800c688:	0800c69b 	.word	0x0800c69b
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c68c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800c690:	4670      	mov	r0, lr
 800c692:	689b      	ldr	r3, [r3, #8]
 800c694:	4798      	blx	r3
    return (uint8_t)USBD_FAIL;
 800c696:	2000      	movs	r0, #0
 800c698:	e7c2      	b.n	800c620 <USBD_CDC_Setup+0x38>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800c69a:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800c69e:	2b03      	cmp	r3, #3
 800c6a0:	d0f9      	beq.n	800c696 <USBD_CDC_Setup+0xae>
 800c6a2:	e7b8      	b.n	800c616 <USBD_CDC_Setup+0x2e>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c6a4:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800c6a8:	2b03      	cmp	r3, #3
 800c6aa:	d1b4      	bne.n	800c616 <USBD_CDC_Setup+0x2e>
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800c6ac:	2202      	movs	r2, #2
 800c6ae:	f10d 0106 	add.w	r1, sp, #6
 800c6b2:	f000 fd9b 	bl	800d1ec <USBD_CtlSendData>
 800c6b6:	e7ee      	b.n	800c696 <USBD_CDC_Setup+0xae>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c6b8:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800c6bc:	2b03      	cmp	r3, #3
 800c6be:	d1aa      	bne.n	800c616 <USBD_CDC_Setup+0x2e>
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800c6c0:	2201      	movs	r2, #1
 800c6c2:	f10d 0105 	add.w	r1, sp, #5
 800c6c6:	f000 fd91 	bl	800d1ec <USBD_CtlSendData>
 800c6ca:	e7e4      	b.n	800c696 <USBD_CDC_Setup+0xae>
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800c6cc:	2a40      	cmp	r2, #64	@ 0x40
 800c6ce:	bf28      	it	cs
 800c6d0:	2240      	movcs	r2, #64	@ 0x40
          hcdc->CmdOpCode = req->bRequest;
 800c6d2:	f886 e200 	strb.w	lr, [r6, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800c6d6:	f886 2201 	strb.w	r2, [r6, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800c6da:	4631      	mov	r1, r6
 800c6dc:	f000 fd9c 	bl	800d218 <USBD_CtlPrepareRx>
 800c6e0:	e7d9      	b.n	800c696 <USBD_CDC_Setup+0xae>
 800c6e2:	bf00      	nop

0800c6e4 <USBD_CDC_DeInit>:
{
 800c6e4:	b538      	push	{r3, r4, r5, lr}
 800c6e6:	4604      	mov	r4, r0
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800c6e8:	2500      	movs	r5, #0
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800c6ea:	2181      	movs	r1, #129	@ 0x81
 800c6ec:	f002 fc98 	bl	800f020 <USBD_LL_CloseEP>
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800c6f0:	2101      	movs	r1, #1
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800c6f2:	8725      	strh	r5, [r4, #56]	@ 0x38
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800c6f4:	4620      	mov	r0, r4
 800c6f6:	f002 fc93 	bl	800f020 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800c6fa:	f8a4 5178 	strh.w	r5, [r4, #376]	@ 0x178
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800c6fe:	2182      	movs	r1, #130	@ 0x82
 800c700:	4620      	mov	r0, r4
 800c702:	f002 fc8d 	bl	800f020 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800c706:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800c70a:	64e5      	str	r5, [r4, #76]	@ 0x4c
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800c70c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c710:	f8d3 22c0 	ldr.w	r2, [r3, #704]	@ 0x2c0
 800c714:	b18a      	cbz	r2, 800c73a <USBD_CDC_DeInit+0x56>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800c716:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800c71a:	685b      	ldr	r3, [r3, #4]
 800c71c:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800c71e:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 800c722:	33b0      	adds	r3, #176	@ 0xb0
 800c724:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 800c728:	f002 fd06 	bl	800f138 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800c72c:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 800c730:	33b0      	adds	r3, #176	@ 0xb0
 800c732:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
    pdev->pClassData = NULL;
 800c736:	f8c4 52bc 	str.w	r5, [r4, #700]	@ 0x2bc
}
 800c73a:	2000      	movs	r0, #0
 800c73c:	bd38      	pop	{r3, r4, r5, pc}
 800c73e:	bf00      	nop

0800c740 <USBD_CDC_Init>:
{
 800c740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c742:	4604      	mov	r4, r0
  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800c744:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800c748:	f002 fcf2 	bl	800f130 <USBD_static_malloc>
  if (hcdc == NULL)
 800c74c:	4605      	mov	r5, r0
 800c74e:	2800      	cmp	r0, #0
 800c750:	d05a      	beq.n	800c808 <USBD_CDC_Init+0xc8>
  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800c752:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800c756:	2100      	movs	r1, #0
 800c758:	f003 fd31 	bl	80101be <memset>
  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800c75c:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 800c760:	33b0      	adds	r3, #176	@ 0xb0
 800c762:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c766:	7c23      	ldrb	r3, [r4, #16]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800c768:	f8c4 52bc 	str.w	r5, [r4, #700]	@ 0x2bc
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c76c:	b3b3      	cbz	r3, 800c7dc <USBD_CDC_Init+0x9c>
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800c76e:	2340      	movs	r3, #64	@ 0x40
 800c770:	2202      	movs	r2, #2
 800c772:	2181      	movs	r1, #129	@ 0x81
 800c774:	4620      	mov	r0, r4
 800c776:	f002 fc45 	bl	800f004 <USBD_LL_OpenEP>
    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800c77a:	2101      	movs	r1, #1
 800c77c:	8721      	strh	r1, [r4, #56]	@ 0x38
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800c77e:	2340      	movs	r3, #64	@ 0x40
 800c780:	2202      	movs	r2, #2
 800c782:	4620      	mov	r0, r4
 800c784:	f002 fc3e 	bl	800f004 <USBD_LL_OpenEP>
    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800c788:	2701      	movs	r7, #1
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800c78a:	2210      	movs	r2, #16
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800c78c:	2308      	movs	r3, #8
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800c78e:	f8a4 204e 	strh.w	r2, [r4, #78]	@ 0x4e
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800c792:	2182      	movs	r1, #130	@ 0x82
 800c794:	2203      	movs	r2, #3
    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800c796:	f8a4 7178 	strh.w	r7, [r4, #376]	@ 0x178
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800c79a:	4620      	mov	r0, r4
 800c79c:	f002 fc32 	bl	800f004 <USBD_LL_OpenEP>
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800c7a0:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800c7a4:	f8a4 704c 	strh.w	r7, [r4, #76]	@ 0x4c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800c7a8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
  hcdc->RxBuffer = NULL;
 800c7ac:	2600      	movs	r6, #0
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800c7ae:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
  hcdc->RxBuffer = NULL;
 800c7b2:	f8c5 6204 	str.w	r6, [r5, #516]	@ 0x204
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	4798      	blx	r3
  if (hcdc->RxBuffer == NULL)
 800c7ba:	f8d5 2204 	ldr.w	r2, [r5, #516]	@ 0x204
  hcdc->TxState = 0U;
 800c7be:	f8c5 6214 	str.w	r6, [r5, #532]	@ 0x214
  hcdc->RxState = 0U;
 800c7c2:	f8c5 6218 	str.w	r6, [r5, #536]	@ 0x218
  if (hcdc->RxBuffer == NULL)
 800c7c6:	b322      	cbz	r2, 800c812 <USBD_CDC_Init+0xd2>
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c7c8:	7c23      	ldrb	r3, [r4, #16]
 800c7ca:	b9bb      	cbnz	r3, 800c7fc <USBD_CDC_Init+0xbc>
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c7cc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c7d0:	4639      	mov	r1, r7
 800c7d2:	4620      	mov	r0, r4
 800c7d4:	f002 fc74 	bl	800f0c0 <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 800c7d8:	2000      	movs	r0, #0
}
 800c7da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800c7dc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c7e0:	2202      	movs	r2, #2
 800c7e2:	2181      	movs	r1, #129	@ 0x81
 800c7e4:	4620      	mov	r0, r4
 800c7e6:	f002 fc0d 	bl	800f004 <USBD_LL_OpenEP>
    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800c7ea:	2101      	movs	r1, #1
 800c7ec:	8721      	strh	r1, [r4, #56]	@ 0x38
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800c7ee:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c7f2:	2202      	movs	r2, #2
 800c7f4:	4620      	mov	r0, r4
 800c7f6:	f002 fc05 	bl	800f004 <USBD_LL_OpenEP>
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800c7fa:	e7c5      	b.n	800c788 <USBD_CDC_Init+0x48>
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c7fc:	2340      	movs	r3, #64	@ 0x40
 800c7fe:	4639      	mov	r1, r7
 800c800:	4620      	mov	r0, r4
 800c802:	f002 fc5d 	bl	800f0c0 <USBD_LL_PrepareReceive>
 800c806:	e7e7      	b.n	800c7d8 <USBD_CDC_Init+0x98>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800c808:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 800c80c:	33b0      	adds	r3, #176	@ 0xb0
 800c80e:	f844 0023 	str.w	r0, [r4, r3, lsl #2]
    return (uint8_t)USBD_EMEM;
 800c812:	2002      	movs	r0, #2
}
 800c814:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c816:	bf00      	nop

0800c818 <USBD_CDC_GetOtherSpeedCfgDesc>:
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
 800c818:	b570      	push	{r4, r5, r6, lr}
 800c81a:	2182      	movs	r1, #130	@ 0x82
 800c81c:	4606      	mov	r6, r0
 800c81e:	480f      	ldr	r0, [pc, #60]	@ (800c85c <USBD_CDC_GetOtherSpeedCfgDesc+0x44>)
 800c820:	f000 f9e2 	bl	800cbe8 <USBD_GetEpDesc>
 800c824:	2101      	movs	r1, #1
 800c826:	4605      	mov	r5, r0
 800c828:	480c      	ldr	r0, [pc, #48]	@ (800c85c <USBD_CDC_GetOtherSpeedCfgDesc+0x44>)
 800c82a:	f000 f9dd 	bl	800cbe8 <USBD_GetEpDesc>
 800c82e:	2181      	movs	r1, #129	@ 0x81
 800c830:	4604      	mov	r4, r0
 800c832:	480a      	ldr	r0, [pc, #40]	@ (800c85c <USBD_CDC_GetOtherSpeedCfgDesc+0x44>)
 800c834:	f000 f9d8 	bl	800cbe8 <USBD_GetEpDesc>
 800c838:	b10d      	cbz	r5, 800c83e <USBD_CDC_GetOtherSpeedCfgDesc+0x26>
 800c83a:	2210      	movs	r2, #16
 800c83c:	71aa      	strb	r2, [r5, #6]
 800c83e:	b11c      	cbz	r4, 800c848 <USBD_CDC_GetOtherSpeedCfgDesc+0x30>
 800c840:	2200      	movs	r2, #0
 800c842:	2140      	movs	r1, #64	@ 0x40
 800c844:	7121      	strb	r1, [r4, #4]
 800c846:	7162      	strb	r2, [r4, #5]
 800c848:	b118      	cbz	r0, 800c852 <USBD_CDC_GetOtherSpeedCfgDesc+0x3a>
 800c84a:	2200      	movs	r2, #0
 800c84c:	2140      	movs	r1, #64	@ 0x40
 800c84e:	7101      	strb	r1, [r0, #4]
 800c850:	7142      	strb	r2, [r0, #5]
 800c852:	2343      	movs	r3, #67	@ 0x43
 800c854:	4801      	ldr	r0, [pc, #4]	@ (800c85c <USBD_CDC_GetOtherSpeedCfgDesc+0x44>)
 800c856:	8033      	strh	r3, [r6, #0]
 800c858:	bd70      	pop	{r4, r5, r6, pc}
 800c85a:	bf00      	nop
 800c85c:	20000040 	.word	0x20000040

0800c860 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800c860:	4603      	mov	r3, r0
  if (fops == NULL)
 800c862:	b139      	cbz	r1, 800c874 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
  }

  pdev->pUserData[pdev->classId] = fops;
 800c864:	f8d0 22d4 	ldr.w	r2, [r0, #724]	@ 0x2d4
 800c868:	eb03 0382 	add.w	r3, r3, r2, lsl #2

  return (uint8_t)USBD_OK;
 800c86c:	2000      	movs	r0, #0
  pdev->pUserData[pdev->classId] = fops;
 800c86e:	f8c3 12c4 	str.w	r1, [r3, #708]	@ 0x2c4
  return (uint8_t)USBD_OK;
 800c872:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 800c874:	2003      	movs	r0, #3
}
 800c876:	4770      	bx	lr

0800c878 <USBD_CDC_SetTxBuffer>:
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c878:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 800c87c:	33b0      	adds	r3, #176	@ 0xb0
 800c87e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800c882:	b12b      	cbz	r3, 800c890 <USBD_CDC_SetTxBuffer+0x18>
  {
    return (uint8_t)USBD_FAIL;
  }

  hcdc->TxBuffer = pbuff;
 800c884:	f8c3 1208 	str.w	r1, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800c888:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800c88c:	2000      	movs	r0, #0
 800c88e:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 800c890:	2003      	movs	r0, #3
}
 800c892:	4770      	bx	lr

0800c894 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c894:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 800c898:	33b0      	adds	r3, #176	@ 0xb0
 800c89a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]

  if (hcdc == NULL)
 800c89e:	b11b      	cbz	r3, 800c8a8 <USBD_CDC_SetRxBuffer+0x14>
  {
    return (uint8_t)USBD_FAIL;
  }

  hcdc->RxBuffer = pbuff;
 800c8a0:	f8c3 1204 	str.w	r1, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800c8a4:	2000      	movs	r0, #0
 800c8a6:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 800c8a8:	2003      	movs	r0, #3
}
 800c8aa:	4770      	bx	lr

0800c8ac <USBD_CDC_TransmitPacket>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c8ac:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 800c8b0:	33b0      	adds	r3, #176	@ 0xb0
 800c8b2:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800c8b6:	b192      	cbz	r2, 800c8de <USBD_CDC_TransmitPacket+0x32>
{
 800c8b8:	b510      	push	{r4, lr}
  {
    return (uint8_t)USBD_FAIL;
  }

  if (hcdc->TxState == 0U)
 800c8ba:	f8d2 4214 	ldr.w	r4, [r2, #532]	@ 0x214
 800c8be:	b10c      	cbz	r4, 800c8c4 <USBD_CDC_TransmitPacket+0x18>
  USBD_StatusTypeDef ret = USBD_BUSY;
 800c8c0:	2001      	movs	r0, #1

    ret = USBD_OK;
  }

  return (uint8_t)ret;
}
 800c8c2:	bd10      	pop	{r4, pc}
    hcdc->TxState = 1U;
 800c8c4:	2301      	movs	r3, #1
 800c8c6:	f8c2 3214 	str.w	r3, [r2, #532]	@ 0x214
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800c8ca:	f8d2 3210 	ldr.w	r3, [r2, #528]	@ 0x210
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800c8ce:	f8d2 2208 	ldr.w	r2, [r2, #520]	@ 0x208
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800c8d2:	62c3      	str	r3, [r0, #44]	@ 0x2c
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800c8d4:	2181      	movs	r1, #129	@ 0x81
 800c8d6:	f002 fbe7 	bl	800f0a8 <USBD_LL_Transmit>
    ret = USBD_OK;
 800c8da:	4620      	mov	r0, r4
}
 800c8dc:	bd10      	pop	{r4, pc}
    return (uint8_t)USBD_FAIL;
 800c8de:	2003      	movs	r0, #3
}
 800c8e0:	4770      	bx	lr
 800c8e2:	bf00      	nop

0800c8e4 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c8e4:	f8d0 22d4 	ldr.w	r2, [r0, #724]	@ 0x2d4
 800c8e8:	32b0      	adds	r2, #176	@ 0xb0
 800c8ea:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c8ee:	b18a      	cbz	r2, 800c914 <USBD_CDC_ReceivePacket+0x30>
{
 800c8f0:	b508      	push	{r3, lr}
  {
    return (uint8_t)USBD_FAIL;
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c8f2:	7c03      	ldrb	r3, [r0, #16]
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c8f4:	f8d2 2204 	ldr.w	r2, [r2, #516]	@ 0x204
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c8f8:	b12b      	cbz	r3, 800c906 <USBD_CDC_ReceivePacket+0x22>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c8fa:	2340      	movs	r3, #64	@ 0x40
 800c8fc:	2101      	movs	r1, #1
 800c8fe:	f002 fbdf 	bl	800f0c0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c902:	2000      	movs	r0, #0
}
 800c904:	bd08      	pop	{r3, pc}
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c906:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c90a:	2101      	movs	r1, #1
 800c90c:	f002 fbd8 	bl	800f0c0 <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 800c910:	2000      	movs	r0, #0
}
 800c912:	bd08      	pop	{r3, pc}
    return (uint8_t)USBD_FAIL;
 800c914:	2003      	movs	r0, #3
}
 800c916:	4770      	bx	lr

0800c918 <USBD_Init>:
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800c918:	b178      	cbz	r0, 800c93a <USBD_Init+0x22>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800c91a:	2300      	movs	r3, #0
 800c91c:	f8c0 32b8 	str.w	r3, [r0, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800c920:	f8c0 32c4 	str.w	r3, [r0, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800c924:	f8c0 32d0 	str.w	r3, [r0, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800c928:	b109      	cbz	r1, 800c92e <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 800c92a:	f8c0 12b4 	str.w	r1, [r0, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c92e:	2301      	movs	r3, #1
 800c930:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
  pdev->id = id;
 800c934:	7002      	strb	r2, [r0, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800c936:	f002 bb13 	b.w	800ef60 <USBD_LL_Init>

  return ret;
}
 800c93a:	2003      	movs	r0, #3
 800c93c:	4770      	bx	lr
 800c93e:	bf00      	nop

0800c940 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c940:	b510      	push	{r4, lr}
 800c942:	b082      	sub	sp, #8
  uint16_t len = 0U;
 800c944:	2300      	movs	r3, #0
 800c946:	f8ad 3006 	strh.w	r3, [sp, #6]

  if (pclass == NULL)
 800c94a:	b189      	cbz	r1, 800c970 <USBD_RegisterClass+0x30>
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800c94c:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
  pdev->pClass[0] = pclass;
 800c94e:	f8c0 12b8 	str.w	r1, [r0, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800c952:	4604      	mov	r4, r0
 800c954:	b123      	cbz	r3, 800c960 <USBD_RegisterClass+0x20>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800c956:	f10d 0006 	add.w	r0, sp, #6
 800c95a:	4798      	blx	r3
 800c95c:	f8c4 02d0 	str.w	r0, [r4, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800c960:	f8d4 32d8 	ldr.w	r3, [r4, #728]	@ 0x2d8

  return USBD_OK;
 800c964:	2000      	movs	r0, #0
  pdev->NumClasses++;
 800c966:	3301      	adds	r3, #1
 800c968:	f8c4 32d8 	str.w	r3, [r4, #728]	@ 0x2d8
}
 800c96c:	b002      	add	sp, #8
 800c96e:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 800c970:	2003      	movs	r0, #3
}
 800c972:	b002      	add	sp, #8
 800c974:	bd10      	pop	{r4, pc}
 800c976:	bf00      	nop

0800c978 <USBD_Start>:
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800c978:	f002 bb38 	b.w	800efec <USBD_LL_Start>

0800c97c <USBD_SetClassConfig>:
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800c97c:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 800c980:	b10b      	cbz	r3, 800c986 <USBD_SetClassConfig+0xa>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	4718      	bx	r3
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
}
 800c986:	4618      	mov	r0, r3
 800c988:	4770      	bx	lr
 800c98a:	bf00      	nop

0800c98c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c98c:	b508      	push	{r3, lr}
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800c98e:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 800c992:	685b      	ldr	r3, [r3, #4]
 800c994:	4798      	blx	r3
  {
    ret = USBD_FAIL;
 800c996:	2800      	cmp	r0, #0
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
}
 800c998:	bf18      	it	ne
 800c99a:	2003      	movne	r0, #3
 800c99c:	bd08      	pop	{r3, pc}
 800c99e:	bf00      	nop

0800c9a0 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c9a0:	b538      	push	{r3, r4, r5, lr}
 800c9a2:	4604      	mov	r4, r0
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c9a4:	f200 25aa 	addw	r5, r0, #682	@ 0x2aa
 800c9a8:	4628      	mov	r0, r5
 800c9aa:	f000 fbdb 	bl	800d164 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 800c9ae:	f894 12aa 	ldrb.w	r1, [r4, #682]	@ 0x2aa
  pdev->ep0_data_len = pdev->request.wLength;
 800c9b2:	f8b4 22b0 	ldrh.w	r2, [r4, #688]	@ 0x2b0
 800c9b6:	f8c4 2298 	str.w	r2, [r4, #664]	@ 0x298
  pdev->ep0_state = USBD_EP0_SETUP;
 800c9ba:	2301      	movs	r3, #1
 800c9bc:	f8c4 3294 	str.w	r3, [r4, #660]	@ 0x294
  switch (pdev->request.bmRequest & 0x1FU)
 800c9c0:	f001 031f 	and.w	r3, r1, #31
 800c9c4:	2b01      	cmp	r3, #1
 800c9c6:	d009      	beq.n	800c9dc <USBD_LL_SetupStage+0x3c>
 800c9c8:	2b02      	cmp	r3, #2
 800c9ca:	d013      	beq.n	800c9f4 <USBD_LL_SetupStage+0x54>
 800c9cc:	b163      	cbz	r3, 800c9e8 <USBD_LL_SetupStage+0x48>
    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c9ce:	4620      	mov	r0, r4
 800c9d0:	f001 0180 	and.w	r1, r1, #128	@ 0x80
      break;
  }

  return ret;
}
 800c9d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c9d8:	f002 bb2e 	b.w	800f038 <USBD_LL_StallEP>
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800c9dc:	4629      	mov	r1, r5
 800c9de:	4620      	mov	r0, r4
}
 800c9e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800c9e4:	f000 bad6 	b.w	800cf94 <USBD_StdItfReq>
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800c9e8:	4629      	mov	r1, r5
 800c9ea:	4620      	mov	r0, r4
}
 800c9ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800c9f0:	f000 b910 	b.w	800cc14 <USBD_StdDevReq>
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800c9f4:	4629      	mov	r1, r5
 800c9f6:	4620      	mov	r0, r4
}
 800c9f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800c9fc:	f000 bb06 	b.w	800d00c <USBD_StdEPReq>

0800ca00 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800ca00:	b510      	push	{r4, lr}
 800ca02:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
  uint8_t idx;

  if (epnum == 0U)
 800ca04:	b931      	cbnz	r1, 800ca14 <USBD_LL_DataOutStage+0x14>
 800ca06:	4694      	mov	ip, r2
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800ca08:	f8d0 2294 	ldr.w	r2, [r0, #660]	@ 0x294
 800ca0c:	2a03      	cmp	r2, #3
 800ca0e:	d010      	beq.n	800ca32 <USBD_LL_DataOutStage+0x32>
      }
    }
  }

  return USBD_OK;
}
 800ca10:	2000      	movs	r0, #0
 800ca12:	bd10      	pop	{r4, pc}
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ca14:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800ca18:	2b03      	cmp	r3, #3
 800ca1a:	d1f9      	bne.n	800ca10 <USBD_LL_DataOutStage+0x10>
        if (pdev->pClass[idx]->DataOut != NULL)
 800ca1c:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 800ca20:	699b      	ldr	r3, [r3, #24]
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d0f4      	beq.n	800ca10 <USBD_LL_DataOutStage+0x10>
          pdev->classId = idx;
 800ca26:	2200      	movs	r2, #0
}
 800ca28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
          pdev->classId = idx;
 800ca2c:	f8c0 22d4 	str.w	r2, [r0, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800ca30:	4718      	bx	r3
 800ca32:	460b      	mov	r3, r1
      if (pep->rem_length > pep->maxpacket)
 800ca34:	e9d0 1257 	ldrd	r1, r2, [r0, #348]	@ 0x15c
 800ca38:	4291      	cmp	r1, r2
 800ca3a:	d808      	bhi.n	800ca4e <USBD_LL_DataOutStage+0x4e>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ca3c:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 800ca40:	2a03      	cmp	r2, #3
 800ca42:	d00e      	beq.n	800ca62 <USBD_LL_DataOutStage+0x62>
        (void)USBD_CtlSendStatus(pdev);
 800ca44:	4620      	mov	r0, r4
 800ca46:	f000 fbfd 	bl	800d244 <USBD_CtlSendStatus>
}
 800ca4a:	2000      	movs	r0, #0
 800ca4c:	bd10      	pop	{r4, pc}
        pep->rem_length -= pep->maxpacket;
 800ca4e:	1a89      	subs	r1, r1, r2
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800ca50:	428a      	cmp	r2, r1
 800ca52:	bf28      	it	cs
 800ca54:	460a      	movcs	r2, r1
        pep->rem_length -= pep->maxpacket;
 800ca56:	f8c0 115c 	str.w	r1, [r0, #348]	@ 0x15c
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800ca5a:	4661      	mov	r1, ip
 800ca5c:	f000 fbea 	bl	800d234 <USBD_CtlContinueRx>
 800ca60:	e7d6      	b.n	800ca10 <USBD_LL_DataOutStage+0x10>
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800ca62:	f8d0 22b8 	ldr.w	r2, [r0, #696]	@ 0x2b8
 800ca66:	6912      	ldr	r2, [r2, #16]
 800ca68:	2a00      	cmp	r2, #0
 800ca6a:	d0eb      	beq.n	800ca44 <USBD_LL_DataOutStage+0x44>
              pdev->classId = idx;
 800ca6c:	f8c0 32d4 	str.w	r3, [r0, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800ca70:	4790      	blx	r2
 800ca72:	e7e7      	b.n	800ca44 <USBD_LL_DataOutStage+0x44>

0800ca74 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800ca74:	b570      	push	{r4, r5, r6, lr}
 800ca76:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800ca78:	b961      	cbnz	r1, 800ca94 <USBD_LL_DataInStage+0x20>
 800ca7a:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800ca7c:	f8d0 2294 	ldr.w	r2, [r0, #660]	@ 0x294
 800ca80:	2a02      	cmp	r2, #2
 800ca82:	d016      	beq.n	800cab2 <USBD_LL_DataInStage+0x3e>
          (void)USBD_CtlReceiveStatus(pdev);
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800ca84:	f894 32a0 	ldrb.w	r3, [r4, #672]	@ 0x2a0
 800ca88:	b113      	cbz	r3, 800ca90 <USBD_LL_DataInStage+0x1c>
    {
      (void)USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 800ca8a:	2300      	movs	r3, #0
 800ca8c:	f884 32a0 	strb.w	r3, [r4, #672]	@ 0x2a0
      }
    }
  }

  return USBD_OK;
}
 800ca90:	2000      	movs	r0, #0
 800ca92:	bd70      	pop	{r4, r5, r6, pc}
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ca94:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800ca98:	2b03      	cmp	r3, #3
 800ca9a:	d1f9      	bne.n	800ca90 <USBD_LL_DataInStage+0x1c>
        if (pdev->pClass[idx]->DataIn != NULL)
 800ca9c:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 800caa0:	695b      	ldr	r3, [r3, #20]
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d0f4      	beq.n	800ca90 <USBD_LL_DataInStage+0x1c>
          pdev->classId = idx;
 800caa6:	2200      	movs	r2, #0
}
 800caa8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
          pdev->classId = idx;
 800caac:	f8c0 22d4 	str.w	r2, [r0, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800cab0:	4718      	bx	r3
      if (pep->rem_length > pep->maxpacket)
 800cab2:	e9d0 2607 	ldrd	r2, r6, [r0, #28]
 800cab6:	42b2      	cmp	r2, r6
 800cab8:	460d      	mov	r5, r1
 800caba:	d810      	bhi.n	800cade <USBD_LL_DataInStage+0x6a>
        if ((pep->maxpacket == pep->rem_length) &&
 800cabc:	d01b      	beq.n	800caf6 <USBD_LL_DataInStage+0x82>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cabe:	f894 329c 	ldrb.w	r3, [r4, #668]	@ 0x29c
 800cac2:	2b03      	cmp	r3, #3
 800cac4:	d024      	beq.n	800cb10 <USBD_LL_DataInStage+0x9c>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800cac6:	2180      	movs	r1, #128	@ 0x80
 800cac8:	4620      	mov	r0, r4
 800caca:	f002 fab5 	bl	800f038 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800cace:	4620      	mov	r0, r4
 800cad0:	f000 fbc4 	bl	800d25c <USBD_CtlReceiveStatus>
    if (pdev->dev_test_mode != 0U)
 800cad4:	f894 32a0 	ldrb.w	r3, [r4, #672]	@ 0x2a0
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d0d9      	beq.n	800ca90 <USBD_LL_DataInStage+0x1c>
 800cadc:	e7d5      	b.n	800ca8a <USBD_LL_DataInStage+0x16>
        pep->rem_length -= pep->maxpacket;
 800cade:	1b92      	subs	r2, r2, r6
 800cae0:	61c2      	str	r2, [r0, #28]
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800cae2:	4619      	mov	r1, r3
 800cae4:	f000 fb90 	bl	800d208 <USBD_CtlContinueSendData>
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cae8:	462b      	mov	r3, r5
 800caea:	462a      	mov	r2, r5
 800caec:	4629      	mov	r1, r5
 800caee:	4620      	mov	r0, r4
 800caf0:	f002 fae6 	bl	800f0c0 <USBD_LL_PrepareReceive>
 800caf4:	e7c6      	b.n	800ca84 <USBD_LL_DataInStage+0x10>
            (pep->total_length >= pep->maxpacket) &&
 800caf6:	6983      	ldr	r3, [r0, #24]
        if ((pep->maxpacket == pep->rem_length) &&
 800caf8:	429a      	cmp	r2, r3
 800cafa:	d8e0      	bhi.n	800cabe <USBD_LL_DataInStage+0x4a>
            (pep->total_length >= pep->maxpacket) &&
 800cafc:	f8d0 2298 	ldr.w	r2, [r0, #664]	@ 0x298
 800cb00:	4293      	cmp	r3, r2
 800cb02:	d2dc      	bcs.n	800cabe <USBD_LL_DataInStage+0x4a>
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800cb04:	460a      	mov	r2, r1
 800cb06:	f000 fb7f 	bl	800d208 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800cb0a:	f8c4 5298 	str.w	r5, [r4, #664]	@ 0x298
 800cb0e:	e7eb      	b.n	800cae8 <USBD_LL_DataInStage+0x74>
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800cb10:	f8d4 32b8 	ldr.w	r3, [r4, #696]	@ 0x2b8
 800cb14:	68db      	ldr	r3, [r3, #12]
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d0d5      	beq.n	800cac6 <USBD_LL_DataInStage+0x52>
              pdev->classId = 0U;
 800cb1a:	2200      	movs	r2, #0
 800cb1c:	f8c4 22d4 	str.w	r2, [r4, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800cb20:	4620      	mov	r0, r4
 800cb22:	4798      	blx	r3
 800cb24:	e7cf      	b.n	800cac6 <USBD_LL_DataInStage+0x52>
 800cb26:	bf00      	nop

0800cb28 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800cb28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800cb2a:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
  pdev->ep0_state = USBD_EP0_IDLE;
 800cb2e:	2100      	movs	r1, #0
  pdev->dev_state = USBD_STATE_DEFAULT;
 800cb30:	2201      	movs	r2, #1
 800cb32:	f880 229c 	strb.w	r2, [r0, #668]	@ 0x29c
{
 800cb36:	4604      	mov	r4, r0
  pdev->dev_config = 0U;
 800cb38:	6041      	str	r1, [r0, #4]
  pdev->ep0_state = USBD_EP0_IDLE;
 800cb3a:	f8c0 1294 	str.w	r1, [r0, #660]	@ 0x294
  pdev->dev_remote_wakeup = 0U;
 800cb3e:	f8c0 12a4 	str.w	r1, [r0, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800cb42:	f880 12a0 	strb.w	r1, [r0, #672]	@ 0x2a0
  if (pdev->pClass[0] != NULL)
 800cb46:	b11b      	cbz	r3, 800cb50 <USBD_LL_Reset+0x28>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800cb48:	685b      	ldr	r3, [r3, #4]
 800cb4a:	b10b      	cbz	r3, 800cb50 <USBD_LL_Reset+0x28>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800cb4c:	4798      	blx	r3
 800cb4e:	b9b0      	cbnz	r0, 800cb7e <USBD_LL_Reset+0x56>
  USBD_StatusTypeDef ret = USBD_OK;
 800cb50:	2700      	movs	r7, #0
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800cb52:	2200      	movs	r2, #0
 800cb54:	2340      	movs	r3, #64	@ 0x40
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800cb56:	461d      	mov	r5, r3
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800cb58:	4611      	mov	r1, r2
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800cb5a:	2601      	movs	r6, #1
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800cb5c:	4620      	mov	r0, r4
 800cb5e:	f002 fa51 	bl	800f004 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800cb62:	f8a4 6164 	strh.w	r6, [r4, #356]	@ 0x164
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800cb66:	f8c4 5160 	str.w	r5, [r4, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800cb6a:	462b      	mov	r3, r5
 800cb6c:	2200      	movs	r2, #0
 800cb6e:	2180      	movs	r1, #128	@ 0x80
 800cb70:	4620      	mov	r0, r4
 800cb72:	f002 fa47 	bl	800f004 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800cb76:	84a6      	strh	r6, [r4, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800cb78:	6225      	str	r5, [r4, #32]

  return ret;
}
 800cb7a:	4638      	mov	r0, r7
 800cb7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ret = USBD_FAIL;
 800cb7e:	2703      	movs	r7, #3
 800cb80:	e7e7      	b.n	800cb52 <USBD_LL_Reset+0x2a>
 800cb82:	bf00      	nop

0800cb84 <USBD_LL_SetSpeed>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 800cb84:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 800cb86:	2000      	movs	r0, #0
 800cb88:	4770      	bx	lr
 800cb8a:	bf00      	nop

0800cb8c <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800cb8c:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800cb90:	2b04      	cmp	r3, #4
 800cb92:	d004      	beq.n	800cb9e <USBD_LL_Suspend+0x12>
  {
    pdev->dev_old_state = pdev->dev_state;
 800cb94:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800cb98:	b2db      	uxtb	r3, r3
 800cb9a:	f880 329d 	strb.w	r3, [r0, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800cb9e:	2304      	movs	r3, #4
 800cba0:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c

  return USBD_OK;
}
 800cba4:	2000      	movs	r0, #0
 800cba6:	4770      	bx	lr

0800cba8 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800cba8:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800cbac:	2b04      	cmp	r3, #4
 800cbae:	d104      	bne.n	800cbba <USBD_LL_Resume+0x12>
  {
    pdev->dev_state = pdev->dev_old_state;
 800cbb0:	f890 329d 	ldrb.w	r3, [r0, #669]	@ 0x29d
 800cbb4:	b2db      	uxtb	r3, r3
 800cbb6:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
  }

  return USBD_OK;
}
 800cbba:	2000      	movs	r0, #0
 800cbbc:	4770      	bx	lr
 800cbbe:	bf00      	nop

0800cbc0 <USBD_LL_SOF>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cbc0:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 800cbc4:	2a03      	cmp	r2, #3
 800cbc6:	d001      	beq.n	800cbcc <USBD_LL_SOF+0xc>
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
}
 800cbc8:	2000      	movs	r0, #0
 800cbca:	4770      	bx	lr
{
 800cbcc:	b508      	push	{r3, lr}
    if (pdev->pClass[0] != NULL)
 800cbce:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 800cbd2:	b113      	cbz	r3, 800cbda <USBD_LL_SOF+0x1a>
      if (pdev->pClass[0]->SOF != NULL)
 800cbd4:	69db      	ldr	r3, [r3, #28]
 800cbd6:	b103      	cbz	r3, 800cbda <USBD_LL_SOF+0x1a>
        (void)pdev->pClass[0]->SOF(pdev);
 800cbd8:	4798      	blx	r3
}
 800cbda:	2000      	movs	r0, #0
 800cbdc:	bd08      	pop	{r3, pc}
 800cbde:	bf00      	nop

0800cbe0 <USBD_CoreFindIF>:
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
#endif /* USE_USBD_COMPOSITE */
}
 800cbe0:	2000      	movs	r0, #0
 800cbe2:	4770      	bx	lr

0800cbe4 <USBD_CoreFindEP>:
  *         return the class index relative to the selected endpoint
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
 800cbe4:	2000      	movs	r0, #0
 800cbe6:	4770      	bx	lr

0800cbe8 <USBD_GetEpDesc>:
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
  USBD_EpDescTypeDef *pEpDesc = NULL;
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800cbe8:	7802      	ldrb	r2, [r0, #0]
 800cbea:	f8b0 c002 	ldrh.w	ip, [r0, #2]
 800cbee:	4594      	cmp	ip, r2
 800cbf0:	4613      	mov	r3, r2
 800cbf2:	d803      	bhi.n	800cbfc <USBD_GetEpDesc+0x14>
 800cbf4:	e00c      	b.n	800cc10 <USBD_GetEpDesc+0x28>
  {
    ptr = desc->bLength;

    while (ptr < desc->wTotalLength)
 800cbf6:	459c      	cmp	ip, r3
 800cbf8:	d90a      	bls.n	800cc10 <USBD_GetEpDesc+0x28>
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;

  *ptr += pnext->bLength;
 800cbfa:	7802      	ldrb	r2, [r0, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800cbfc:	4410      	add	r0, r2
  *ptr += pnext->bLength;
 800cbfe:	4413      	add	r3, r2
      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800cc00:	7842      	ldrb	r2, [r0, #1]
 800cc02:	2a05      	cmp	r2, #5
  *ptr += pnext->bLength;
 800cc04:	b29b      	uxth	r3, r3
      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800cc06:	d1f6      	bne.n	800cbf6 <USBD_GetEpDesc+0xe>
        if (pEpDesc->bEndpointAddress == EpAddr)
 800cc08:	7882      	ldrb	r2, [r0, #2]
 800cc0a:	428a      	cmp	r2, r1
 800cc0c:	d1f3      	bne.n	800cbf6 <USBD_GetEpDesc+0xe>
}
 800cc0e:	4770      	bx	lr
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800cc10:	2000      	movs	r0, #0
}
 800cc12:	4770      	bx	lr

0800cc14 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cc14:	b570      	push	{r4, r5, r6, lr}
 800cc16:	780b      	ldrb	r3, [r1, #0]
 800cc18:	f003 0360 	and.w	r3, r3, #96	@ 0x60
  USBD_StatusTypeDef ret = USBD_OK;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cc1c:	2b20      	cmp	r3, #32
{
 800cc1e:	b082      	sub	sp, #8
 800cc20:	460d      	mov	r5, r1
 800cc22:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cc24:	d00e      	beq.n	800cc44 <USBD_StdDevReq+0x30>
 800cc26:	2b40      	cmp	r3, #64	@ 0x40
 800cc28:	d00c      	beq.n	800cc44 <USBD_StdDevReq+0x30>
 800cc2a:	b1bb      	cbz	r3, 800cc5c <USBD_StdDevReq+0x48>
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800cc2c:	2180      	movs	r1, #128	@ 0x80
 800cc2e:	4620      	mov	r0, r4
 800cc30:	f002 fa02 	bl	800f038 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800cc34:	2100      	movs	r1, #0
 800cc36:	4620      	mov	r0, r4
 800cc38:	f002 f9fe 	bl	800f038 <USBD_LL_StallEP>
  USBD_StatusTypeDef ret = USBD_OK;
 800cc3c:	2500      	movs	r5, #0
}
 800cc3e:	4628      	mov	r0, r5
 800cc40:	b002      	add	sp, #8
 800cc42:	bd70      	pop	{r4, r5, r6, pc}
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800cc44:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 800cc48:	33ae      	adds	r3, #174	@ 0xae
 800cc4a:	4629      	mov	r1, r5
 800cc4c:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800cc50:	689b      	ldr	r3, [r3, #8]
 800cc52:	4620      	mov	r0, r4
}
 800cc54:	b002      	add	sp, #8
 800cc56:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800cc5a:	4718      	bx	r3
      switch (req->bRequest)
 800cc5c:	784b      	ldrb	r3, [r1, #1]
 800cc5e:	2b09      	cmp	r3, #9
 800cc60:	d8e4      	bhi.n	800cc2c <USBD_StdDevReq+0x18>
 800cc62:	a201      	add	r2, pc, #4	@ (adr r2, 800cc68 <USBD_StdDevReq+0x54>)
 800cc64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc68:	0800ccc9 	.word	0x0800ccc9
 800cc6c:	0800ccf1 	.word	0x0800ccf1
 800cc70:	0800cc2d 	.word	0x0800cc2d
 800cc74:	0800cd0f 	.word	0x0800cd0f
 800cc78:	0800cc2d 	.word	0x0800cc2d
 800cc7c:	0800cd27 	.word	0x0800cd27
 800cc80:	0800cd67 	.word	0x0800cd67
 800cc84:	0800cc2d 	.word	0x0800cc2d
 800cc88:	0800cdbd 	.word	0x0800cdbd
 800cc8c:	0800cc91 	.word	0x0800cc91
  cfgidx = (uint8_t)(req->wValue);
 800cc90:	7889      	ldrb	r1, [r1, #2]
 800cc92:	4db6      	ldr	r5, [pc, #728]	@ (800cf6c <USBD_StdDevReq+0x358>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800cc94:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 800cc96:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800cc98:	f200 8156 	bhi.w	800cf48 <USBD_StdDevReq+0x334>
  switch (pdev->dev_state)
 800cc9c:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800cca0:	2b02      	cmp	r3, #2
 800cca2:	b2de      	uxtb	r6, r3
 800cca4:	f000 813c 	beq.w	800cf20 <USBD_StdDevReq+0x30c>
 800cca8:	2e03      	cmp	r6, #3
 800ccaa:	f000 8117 	beq.w	800cedc <USBD_StdDevReq+0x2c8>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ccae:	2180      	movs	r1, #128	@ 0x80
 800ccb0:	f002 f9c2 	bl	800f038 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800ccb4:	2100      	movs	r1, #0
 800ccb6:	4620      	mov	r0, r4
 800ccb8:	f002 f9be 	bl	800f038 <USBD_LL_StallEP>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ccbc:	7829      	ldrb	r1, [r5, #0]
 800ccbe:	4620      	mov	r0, r4
 800ccc0:	f7ff fe64 	bl	800c98c <USBD_ClrClassConfig>
    return USBD_FAIL;
 800ccc4:	2503      	movs	r5, #3
 800ccc6:	e7ba      	b.n	800cc3e <USBD_StdDevReq+0x2a>
  switch (pdev->dev_state)
 800ccc8:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800cccc:	3b01      	subs	r3, #1
 800ccce:	2b02      	cmp	r3, #2
 800ccd0:	d8ac      	bhi.n	800cc2c <USBD_StdDevReq+0x18>
      if (req->wLength != 0x2U)
 800ccd2:	88ca      	ldrh	r2, [r1, #6]
 800ccd4:	2a02      	cmp	r2, #2
 800ccd6:	d1a9      	bne.n	800cc2c <USBD_StdDevReq+0x18>
      if (pdev->dev_remote_wakeup != 0U)
 800ccd8:	f8d0 32a4 	ldr.w	r3, [r0, #676]	@ 0x2a4
 800ccdc:	4601      	mov	r1, r0
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	bf0c      	ite	eq
 800cce2:	2301      	moveq	r3, #1
 800cce4:	2303      	movne	r3, #3
 800cce6:	f841 3f0c 	str.w	r3, [r1, #12]!
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800ccea:	f000 fa7f 	bl	800d1ec <USBD_CtlSendData>
      break;
 800ccee:	e7a5      	b.n	800cc3c <USBD_StdDevReq+0x28>
  switch (pdev->dev_state)
 800ccf0:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800ccf4:	3b01      	subs	r3, #1
 800ccf6:	2b02      	cmp	r3, #2
 800ccf8:	d898      	bhi.n	800cc2c <USBD_StdDevReq+0x18>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ccfa:	884b      	ldrh	r3, [r1, #2]
 800ccfc:	2b01      	cmp	r3, #1
 800ccfe:	d19d      	bne.n	800cc3c <USBD_StdDevReq+0x28>
        pdev->dev_remote_wakeup = 0U;
 800cd00:	2300      	movs	r3, #0
 800cd02:	f8c4 32a4 	str.w	r3, [r4, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800cd06:	4620      	mov	r0, r4
 800cd08:	f000 fa9c 	bl	800d244 <USBD_CtlSendStatus>
 800cd0c:	e796      	b.n	800cc3c <USBD_StdDevReq+0x28>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800cd0e:	884b      	ldrh	r3, [r1, #2]
 800cd10:	2b01      	cmp	r3, #1
 800cd12:	d0f6      	beq.n	800cd02 <USBD_StdDevReq+0xee>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800cd14:	2b02      	cmp	r3, #2
 800cd16:	d189      	bne.n	800cc2c <USBD_StdDevReq+0x18>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800cd18:	888b      	ldrh	r3, [r1, #4]
 800cd1a:	0a1b      	lsrs	r3, r3, #8
 800cd1c:	f880 32a0 	strb.w	r3, [r0, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800cd20:	f000 fa90 	bl	800d244 <USBD_CtlSendStatus>
 800cd24:	e78a      	b.n	800cc3c <USBD_StdDevReq+0x28>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800cd26:	888b      	ldrh	r3, [r1, #4]
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	f47f af7f 	bne.w	800cc2c <USBD_StdDevReq+0x18>
 800cd2e:	88cb      	ldrh	r3, [r1, #6]
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	f47f af7b 	bne.w	800cc2c <USBD_StdDevReq+0x18>
 800cd36:	884d      	ldrh	r5, [r1, #2]
 800cd38:	2d7f      	cmp	r5, #127	@ 0x7f
 800cd3a:	f63f af77 	bhi.w	800cc2c <USBD_StdDevReq+0x18>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cd3e:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800cd42:	2b03      	cmp	r3, #3
 800cd44:	f43f af72 	beq.w	800cc2c <USBD_StdDevReq+0x18>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800cd48:	b2e9      	uxtb	r1, r5
      pdev->dev_address = dev_addr;
 800cd4a:	f880 129e 	strb.w	r1, [r0, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800cd4e:	f002 f99f 	bl	800f090 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800cd52:	4620      	mov	r0, r4
 800cd54:	f000 fa76 	bl	800d244 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 800cd58:	2d00      	cmp	r5, #0
 800cd5a:	f000 8117 	beq.w	800cf8c <USBD_StdDevReq+0x378>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800cd5e:	2302      	movs	r3, #2
 800cd60:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 800cd64:	e76a      	b.n	800cc3c <USBD_StdDevReq+0x28>
  switch (req->wValue >> 8)
 800cd66:	884a      	ldrh	r2, [r1, #2]
 800cd68:	0a13      	lsrs	r3, r2, #8
  uint16_t len = 0U;
 800cd6a:	2100      	movs	r1, #0
  switch (req->wValue >> 8)
 800cd6c:	3b01      	subs	r3, #1
  uint16_t len = 0U;
 800cd6e:	f8ad 1006 	strh.w	r1, [sp, #6]
  switch (req->wValue >> 8)
 800cd72:	2b0e      	cmp	r3, #14
 800cd74:	f63f af5a 	bhi.w	800cc2c <USBD_StdDevReq+0x18>
 800cd78:	a101      	add	r1, pc, #4	@ (adr r1, 800cd80 <USBD_StdDevReq+0x16c>)
 800cd7a:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cd7e:	bf00      	nop
 800cd80:	0800ce5d 	.word	0x0800ce5d
 800cd84:	0800ce43 	.word	0x0800ce43
 800cd88:	0800ce31 	.word	0x0800ce31
 800cd8c:	0800cc2d 	.word	0x0800cc2d
 800cd90:	0800cc2d 	.word	0x0800cc2d
 800cd94:	0800ce1b 	.word	0x0800ce1b
 800cd98:	0800ce6d 	.word	0x0800ce6d
 800cd9c:	0800cc2d 	.word	0x0800cc2d
 800cda0:	0800cc2d 	.word	0x0800cc2d
 800cda4:	0800cc2d 	.word	0x0800cc2d
 800cda8:	0800cc2d 	.word	0x0800cc2d
 800cdac:	0800cc2d 	.word	0x0800cc2d
 800cdb0:	0800cc2d 	.word	0x0800cc2d
 800cdb4:	0800cc2d 	.word	0x0800cc2d
 800cdb8:	0800cde3 	.word	0x0800cde3
  if (req->wLength != 1U)
 800cdbc:	88ca      	ldrh	r2, [r1, #6]
 800cdbe:	2a01      	cmp	r2, #1
 800cdc0:	f47f af34 	bne.w	800cc2c <USBD_StdDevReq+0x18>
    switch (pdev->dev_state)
 800cdc4:	f890 129c 	ldrb.w	r1, [r0, #668]	@ 0x29c
 800cdc8:	2902      	cmp	r1, #2
 800cdca:	b2cb      	uxtb	r3, r1
 800cdcc:	d87f      	bhi.n	800cece <USBD_StdDevReq+0x2ba>
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	f43f af2c 	beq.w	800cc2c <USBD_StdDevReq+0x18>
        pdev->dev_default_config = 0U;
 800cdd4:	4601      	mov	r1, r0
 800cdd6:	2300      	movs	r3, #0
 800cdd8:	f841 3f08 	str.w	r3, [r1, #8]!
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800cddc:	f000 fa06 	bl	800d1ec <USBD_CtlSendData>
        break;
 800cde0:	e72c      	b.n	800cc3c <USBD_StdDevReq+0x28>
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800cde2:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800cde6:	69db      	ldr	r3, [r3, #28]
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	f43f af1f 	beq.w	800cc2c <USBD_StdDevReq+0x18>
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800cdee:	7c20      	ldrb	r0, [r4, #16]
 800cdf0:	f10d 0106 	add.w	r1, sp, #6
 800cdf4:	4798      	blx	r3
  if (req->wLength != 0U)
 800cdf6:	88eb      	ldrh	r3, [r5, #6]
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d084      	beq.n	800cd06 <USBD_StdDevReq+0xf2>
    if (len != 0U)
 800cdfc:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800ce00:	2a00      	cmp	r2, #0
 800ce02:	f43f af13 	beq.w	800cc2c <USBD_StdDevReq+0x18>
      len = MIN(len, req->wLength);
 800ce06:	429a      	cmp	r2, r3
 800ce08:	bf28      	it	cs
 800ce0a:	461a      	movcs	r2, r3
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800ce0c:	4601      	mov	r1, r0
 800ce0e:	4620      	mov	r0, r4
      len = MIN(len, req->wLength);
 800ce10:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800ce14:	f000 f9ea 	bl	800d1ec <USBD_CtlSendData>
 800ce18:	e710      	b.n	800cc3c <USBD_StdDevReq+0x28>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ce1a:	7c03      	ldrb	r3, [r0, #16]
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	f47f af05 	bne.w	800cc2c <USBD_StdDevReq+0x18>
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800ce22:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 800ce26:	f10d 0006 	add.w	r0, sp, #6
 800ce2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ce2c:	4798      	blx	r3
  if (err != 0U)
 800ce2e:	e7e2      	b.n	800cdf6 <USBD_StdDevReq+0x1e2>
      switch ((uint8_t)(req->wValue))
 800ce30:	b2d2      	uxtb	r2, r2
 800ce32:	2a05      	cmp	r2, #5
 800ce34:	f63f aefa 	bhi.w	800cc2c <USBD_StdDevReq+0x18>
 800ce38:	e8df f002 	tbb	[pc, r2]
 800ce3c:	31373d43 	.word	0x31373d43
 800ce40:	252b      	.short	0x252b
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ce42:	7c02      	ldrb	r2, [r0, #16]
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800ce44:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ce48:	2a00      	cmp	r2, #0
 800ce4a:	f040 8091 	bne.w	800cf70 <USBD_StdDevReq+0x35c>
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800ce4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ce50:	f10d 0006 	add.w	r0, sp, #6
 800ce54:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ce56:	2302      	movs	r3, #2
 800ce58:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 800ce5a:	e7cc      	b.n	800cdf6 <USBD_StdDevReq+0x1e2>
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ce5c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800ce60:	7c00      	ldrb	r0, [r0, #16]
 800ce62:	681b      	ldr	r3, [r3, #0]
 800ce64:	f10d 0106 	add.w	r1, sp, #6
 800ce68:	4798      	blx	r3
  if (err != 0U)
 800ce6a:	e7c4      	b.n	800cdf6 <USBD_StdDevReq+0x1e2>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ce6c:	7c03      	ldrb	r3, [r0, #16]
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	f47f aedc 	bne.w	800cc2c <USBD_StdDevReq+0x18>
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800ce74:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 800ce78:	f10d 0006 	add.w	r0, sp, #6
 800ce7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ce7e:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ce80:	2307      	movs	r3, #7
 800ce82:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 800ce84:	e7b7      	b.n	800cdf6 <USBD_StdDevReq+0x1e2>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800ce86:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800ce8a:	699b      	ldr	r3, [r3, #24]
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d1ae      	bne.n	800cdee <USBD_StdDevReq+0x1da>
 800ce90:	e6cc      	b.n	800cc2c <USBD_StdDevReq+0x18>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800ce92:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800ce96:	695b      	ldr	r3, [r3, #20]
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d1a8      	bne.n	800cdee <USBD_StdDevReq+0x1da>
 800ce9c:	e6c6      	b.n	800cc2c <USBD_StdDevReq+0x18>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ce9e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800cea2:	691b      	ldr	r3, [r3, #16]
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d1a2      	bne.n	800cdee <USBD_StdDevReq+0x1da>
 800cea8:	e6c0      	b.n	800cc2c <USBD_StdDevReq+0x18>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ceaa:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800ceae:	68db      	ldr	r3, [r3, #12]
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d19c      	bne.n	800cdee <USBD_StdDevReq+0x1da>
 800ceb4:	e6ba      	b.n	800cc2c <USBD_StdDevReq+0x18>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ceb6:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800ceba:	689b      	ldr	r3, [r3, #8]
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d196      	bne.n	800cdee <USBD_StdDevReq+0x1da>
 800cec0:	e6b4      	b.n	800cc2c <USBD_StdDevReq+0x18>
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800cec2:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800cec6:	685b      	ldr	r3, [r3, #4]
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d190      	bne.n	800cdee <USBD_StdDevReq+0x1da>
 800cecc:	e6ae      	b.n	800cc2c <USBD_StdDevReq+0x18>
    switch (pdev->dev_state)
 800cece:	2b03      	cmp	r3, #3
 800ced0:	f47f aeac 	bne.w	800cc2c <USBD_StdDevReq+0x18>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800ced4:	1d01      	adds	r1, r0, #4
 800ced6:	f000 f989 	bl	800d1ec <USBD_CtlSendData>
        break;
 800ceda:	e6af      	b.n	800cc3c <USBD_StdDevReq+0x28>
      if (cfgidx == 0U)
 800cedc:	2900      	cmp	r1, #0
 800cede:	d03b      	beq.n	800cf58 <USBD_StdDevReq+0x344>
      else if (cfgidx != pdev->dev_config)
 800cee0:	6841      	ldr	r1, [r0, #4]
 800cee2:	2901      	cmp	r1, #1
 800cee4:	f43f af0f 	beq.w	800cd06 <USBD_StdDevReq+0xf2>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800cee8:	b2c9      	uxtb	r1, r1
 800ceea:	f7ff fd4f 	bl	800c98c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800ceee:	7829      	ldrb	r1, [r5, #0]
 800cef0:	6061      	str	r1, [r4, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800cef2:	4620      	mov	r0, r4
 800cef4:	f7ff fd42 	bl	800c97c <USBD_SetClassConfig>
        if (ret != USBD_OK)
 800cef8:	4605      	mov	r5, r0
 800cefa:	2800      	cmp	r0, #0
 800cefc:	f43f af03 	beq.w	800cd06 <USBD_StdDevReq+0xf2>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800cf00:	2180      	movs	r1, #128	@ 0x80
 800cf02:	4620      	mov	r0, r4
 800cf04:	f002 f898 	bl	800f038 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800cf08:	2100      	movs	r1, #0
 800cf0a:	4620      	mov	r0, r4
 800cf0c:	f002 f894 	bl	800f038 <USBD_LL_StallEP>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800cf10:	7921      	ldrb	r1, [r4, #4]
 800cf12:	4620      	mov	r0, r4
 800cf14:	f7ff fd3a 	bl	800c98c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800cf18:	2302      	movs	r3, #2
 800cf1a:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 800cf1e:	e68e      	b.n	800cc3e <USBD_StdDevReq+0x2a>
      if (cfgidx != 0U)
 800cf20:	2900      	cmp	r1, #0
 800cf22:	f43f aef0 	beq.w	800cd06 <USBD_StdDevReq+0xf2>
        pdev->dev_config = cfgidx;
 800cf26:	2101      	movs	r1, #1
 800cf28:	6041      	str	r1, [r0, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800cf2a:	f7ff fd27 	bl	800c97c <USBD_SetClassConfig>
        if (ret != USBD_OK)
 800cf2e:	4605      	mov	r5, r0
 800cf30:	b328      	cbz	r0, 800cf7e <USBD_StdDevReq+0x36a>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800cf32:	2180      	movs	r1, #128	@ 0x80
 800cf34:	4620      	mov	r0, r4
 800cf36:	f002 f87f 	bl	800f038 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800cf3a:	2100      	movs	r1, #0
 800cf3c:	4620      	mov	r0, r4
 800cf3e:	f002 f87b 	bl	800f038 <USBD_LL_StallEP>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800cf42:	f884 629c 	strb.w	r6, [r4, #668]	@ 0x29c
 800cf46:	e67a      	b.n	800cc3e <USBD_StdDevReq+0x2a>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800cf48:	2180      	movs	r1, #128	@ 0x80
 800cf4a:	f002 f875 	bl	800f038 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800cf4e:	2100      	movs	r1, #0
 800cf50:	4620      	mov	r0, r4
 800cf52:	f002 f871 	bl	800f038 <USBD_LL_StallEP>
    return USBD_FAIL;
 800cf56:	e6b5      	b.n	800ccc4 <USBD_StdDevReq+0xb0>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800cf58:	2302      	movs	r3, #2
 800cf5a:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800cf5e:	6041      	str	r1, [r0, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800cf60:	f7ff fd14 	bl	800c98c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800cf64:	4620      	mov	r0, r4
 800cf66:	f000 f96d 	bl	800d244 <USBD_CtlSendStatus>
 800cf6a:	e667      	b.n	800cc3c <USBD_StdDevReq+0x28>
 800cf6c:	20001818 	.word	0x20001818
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800cf70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf72:	f10d 0006 	add.w	r0, sp, #6
 800cf76:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800cf78:	2302      	movs	r3, #2
 800cf7a:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 800cf7c:	e73b      	b.n	800cdf6 <USBD_StdDevReq+0x1e2>
          (void)USBD_CtlSendStatus(pdev);
 800cf7e:	4620      	mov	r0, r4
 800cf80:	f000 f960 	bl	800d244 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800cf84:	2303      	movs	r3, #3
 800cf86:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 800cf8a:	e657      	b.n	800cc3c <USBD_StdDevReq+0x28>
        pdev->dev_state = USBD_STATE_DEFAULT;
 800cf8c:	2301      	movs	r3, #1
 800cf8e:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 800cf92:	e653      	b.n	800cc3c <USBD_StdDevReq+0x28>

0800cf94 <USBD_StdItfReq>:
{
 800cf94:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cf96:	780b      	ldrb	r3, [r1, #0]
 800cf98:	065a      	lsls	r2, r3, #25
{
 800cf9a:	460d      	mov	r5, r1
 800cf9c:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cf9e:	d50c      	bpl.n	800cfba <USBD_StdItfReq+0x26>
 800cfa0:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 800cfa4:	2a40      	cmp	r2, #64	@ 0x40
 800cfa6:	d008      	beq.n	800cfba <USBD_StdItfReq+0x26>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800cfa8:	2180      	movs	r1, #128	@ 0x80
 800cfaa:	f002 f845 	bl	800f038 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800cfae:	2100      	movs	r1, #0
 800cfb0:	4620      	mov	r0, r4
 800cfb2:	f002 f841 	bl	800f038 <USBD_LL_StallEP>
  USBD_StatusTypeDef ret = USBD_OK;
 800cfb6:	2000      	movs	r0, #0
}
 800cfb8:	bd38      	pop	{r3, r4, r5, pc}
      switch (pdev->dev_state)
 800cfba:	f894 329c 	ldrb.w	r3, [r4, #668]	@ 0x29c
 800cfbe:	3b01      	subs	r3, #1
 800cfc0:	2b02      	cmp	r3, #2
 800cfc2:	d802      	bhi.n	800cfca <USBD_StdItfReq+0x36>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800cfc4:	7929      	ldrb	r1, [r5, #4]
 800cfc6:	2901      	cmp	r1, #1
 800cfc8:	d908      	bls.n	800cfdc <USBD_StdItfReq+0x48>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800cfca:	2180      	movs	r1, #128	@ 0x80
 800cfcc:	4620      	mov	r0, r4
 800cfce:	f002 f833 	bl	800f038 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800cfd2:	2100      	movs	r1, #0
 800cfd4:	4620      	mov	r0, r4
 800cfd6:	f002 f82f 	bl	800f038 <USBD_LL_StallEP>
}
 800cfda:	e7ec      	b.n	800cfb6 <USBD_StdItfReq+0x22>
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800cfdc:	4620      	mov	r0, r4
 800cfde:	f7ff fdff 	bl	800cbe0 <USBD_CoreFindIF>
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800cfe2:	b988      	cbnz	r0, 800d008 <USBD_StdItfReq+0x74>
              if (pdev->pClass[idx]->Setup != NULL)
 800cfe4:	f8d4 32b8 	ldr.w	r3, [r4, #696]	@ 0x2b8
 800cfe8:	689b      	ldr	r3, [r3, #8]
 800cfea:	b16b      	cbz	r3, 800d008 <USBD_StdItfReq+0x74>
                pdev->classId = idx;
 800cfec:	f8c4 02d4 	str.w	r0, [r4, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800cff0:	4629      	mov	r1, r5
 800cff2:	4620      	mov	r0, r4
 800cff4:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 800cff6:	88ea      	ldrh	r2, [r5, #6]
 800cff8:	2a00      	cmp	r2, #0
 800cffa:	d1dd      	bne.n	800cfb8 <USBD_StdItfReq+0x24>
 800cffc:	2800      	cmp	r0, #0
 800cffe:	d1db      	bne.n	800cfb8 <USBD_StdItfReq+0x24>
              (void)USBD_CtlSendStatus(pdev);
 800d000:	4620      	mov	r0, r4
 800d002:	f000 f91f 	bl	800d244 <USBD_CtlSendStatus>
 800d006:	e7d6      	b.n	800cfb6 <USBD_StdItfReq+0x22>
                ret = USBD_FAIL;
 800d008:	2003      	movs	r0, #3
}
 800d00a:	bd38      	pop	{r3, r4, r5, pc}

0800d00c <USBD_StdEPReq>:
{
 800d00c:	b530      	push	{r4, r5, lr}
 800d00e:	460c      	mov	r4, r1
  ep_addr = LOBYTE(req->wIndex);
 800d010:	888a      	ldrh	r2, [r1, #4]
 800d012:	7823      	ldrb	r3, [r4, #0]
 800d014:	f003 0360 	and.w	r3, r3, #96	@ 0x60
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d018:	2b20      	cmp	r3, #32
{
 800d01a:	b083      	sub	sp, #12
 800d01c:	4605      	mov	r5, r0
  ep_addr = LOBYTE(req->wIndex);
 800d01e:	b2d1      	uxtb	r1, r2
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d020:	d01e      	beq.n	800d060 <USBD_StdEPReq+0x54>
 800d022:	2b40      	cmp	r3, #64	@ 0x40
 800d024:	d01c      	beq.n	800d060 <USBD_StdEPReq+0x54>
 800d026:	b36b      	cbz	r3, 800d084 <USBD_StdEPReq+0x78>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800d028:	2180      	movs	r1, #128	@ 0x80
 800d02a:	4628      	mov	r0, r5
 800d02c:	f002 f804 	bl	800f038 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800d030:	2100      	movs	r1, #0
 800d032:	4628      	mov	r0, r5
 800d034:	f002 f800 	bl	800f038 <USBD_LL_StallEP>
}
 800d038:	2000      	movs	r0, #0
 800d03a:	b003      	add	sp, #12
 800d03c:	bd30      	pop	{r4, r5, pc}
          switch (pdev->dev_state)
 800d03e:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800d042:	2b02      	cmp	r3, #2
 800d044:	b2da      	uxtb	r2, r3
 800d046:	d05e      	beq.n	800d106 <USBD_StdEPReq+0xfa>
 800d048:	2a03      	cmp	r2, #3
 800d04a:	d1ed      	bne.n	800d028 <USBD_StdEPReq+0x1c>
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d04c:	8863      	ldrh	r3, [r4, #2]
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d1f2      	bne.n	800d038 <USBD_StdEPReq+0x2c>
                if ((ep_addr & 0x7FU) != 0x00U)
 800d052:	064b      	lsls	r3, r1, #25
 800d054:	d17d      	bne.n	800d152 <USBD_StdEPReq+0x146>
                (void)USBD_CtlSendStatus(pdev);
 800d056:	4628      	mov	r0, r5
 800d058:	9101      	str	r1, [sp, #4]
 800d05a:	f000 f8f3 	bl	800d244 <USBD_CtlSendStatus>
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800d05e:	9901      	ldr	r1, [sp, #4]
 800d060:	4628      	mov	r0, r5
 800d062:	f7ff fdbf 	bl	800cbe4 <USBD_CoreFindEP>
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d066:	2800      	cmp	r0, #0
 800d068:	d1e6      	bne.n	800d038 <USBD_StdEPReq+0x2c>
                  if (pdev->pClass[idx]->Setup != NULL)
 800d06a:	f8d5 32b8 	ldr.w	r3, [r5, #696]	@ 0x2b8
                  pdev->classId = idx;
 800d06e:	f8c5 02d4 	str.w	r0, [r5, #724]	@ 0x2d4
                  if (pdev->pClass[idx]->Setup != NULL)
 800d072:	689b      	ldr	r3, [r3, #8]
 800d074:	2b00      	cmp	r3, #0
 800d076:	d0df      	beq.n	800d038 <USBD_StdEPReq+0x2c>
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800d078:	4621      	mov	r1, r4
 800d07a:	4628      	mov	r0, r5
}
 800d07c:	b003      	add	sp, #12
 800d07e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800d082:	4718      	bx	r3
      switch (req->bRequest)
 800d084:	7863      	ldrb	r3, [r4, #1]
 800d086:	2b01      	cmp	r3, #1
 800d088:	d0d9      	beq.n	800d03e <USBD_StdEPReq+0x32>
 800d08a:	2b03      	cmp	r3, #3
 800d08c:	d02a      	beq.n	800d0e4 <USBD_StdEPReq+0xd8>
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d1ca      	bne.n	800d028 <USBD_StdEPReq+0x1c>
          switch (pdev->dev_state)
 800d092:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800d096:	2b02      	cmp	r3, #2
 800d098:	b2d8      	uxtb	r0, r3
 800d09a:	d03d      	beq.n	800d118 <USBD_StdEPReq+0x10c>
 800d09c:	2803      	cmp	r0, #3
 800d09e:	d1c3      	bne.n	800d028 <USBD_StdEPReq+0x1c>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800d0a0:	f001 030f 	and.w	r3, r1, #15
 800d0a4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
              if ((ep_addr & 0x80U) == 0x80U)
 800d0a8:	0612      	lsls	r2, r2, #24
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800d0aa:	eb05 0383 	add.w	r3, r5, r3, lsl #2
              if ((ep_addr & 0x80U) == 0x80U)
 800d0ae:	d442      	bmi.n	800d136 <USBD_StdEPReq+0x12a>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800d0b0:	f8b3 3164 	ldrh.w	r3, [r3, #356]	@ 0x164
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d0b7      	beq.n	800d028 <USBD_StdEPReq+0x1c>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d0b8:	f001 037f 	and.w	r3, r1, #127	@ 0x7f
 800d0bc:	2414      	movs	r4, #20
 800d0be:	fb04 5403 	mla	r4, r4, r3, r5
 800d0c2:	f504 74aa 	add.w	r4, r4, #340	@ 0x154
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d041      	beq.n	800d14e <USBD_StdEPReq+0x142>
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800d0ca:	4628      	mov	r0, r5
 800d0cc:	f001 ffcc 	bl	800f068 <USBD_LL_IsStallEP>
 800d0d0:	2800      	cmp	r0, #0
 800d0d2:	d03c      	beq.n	800d14e <USBD_StdEPReq+0x142>
 800d0d4:	2301      	movs	r3, #1
                pep->status = 0x0000U;
 800d0d6:	6023      	str	r3, [r4, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d0d8:	2202      	movs	r2, #2
 800d0da:	4621      	mov	r1, r4
 800d0dc:	4628      	mov	r0, r5
 800d0de:	f000 f885 	bl	800d1ec <USBD_CtlSendData>
              break;
 800d0e2:	e7a9      	b.n	800d038 <USBD_StdEPReq+0x2c>
          switch (pdev->dev_state)
 800d0e4:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800d0e8:	2b02      	cmp	r3, #2
 800d0ea:	b2da      	uxtb	r2, r3
 800d0ec:	d00b      	beq.n	800d106 <USBD_StdEPReq+0xfa>
 800d0ee:	2a03      	cmp	r2, #3
 800d0f0:	d19a      	bne.n	800d028 <USBD_StdEPReq+0x1c>
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d0f2:	8863      	ldrh	r3, [r4, #2]
 800d0f4:	b91b      	cbnz	r3, 800d0fe <USBD_StdEPReq+0xf2>
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800d0f6:	0648      	lsls	r0, r1, #25
 800d0f8:	d001      	beq.n	800d0fe <USBD_StdEPReq+0xf2>
 800d0fa:	88e3      	ldrh	r3, [r4, #6]
 800d0fc:	b373      	cbz	r3, 800d15c <USBD_StdEPReq+0x150>
              (void)USBD_CtlSendStatus(pdev);
 800d0fe:	4628      	mov	r0, r5
 800d100:	f000 f8a0 	bl	800d244 <USBD_CtlSendStatus>
              break;
 800d104:	e798      	b.n	800d038 <USBD_StdEPReq+0x2c>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d106:	064a      	lsls	r2, r1, #25
 800d108:	d08e      	beq.n	800d028 <USBD_StdEPReq+0x1c>
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d10a:	f001 ff95 	bl	800f038 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d10e:	2180      	movs	r1, #128	@ 0x80
 800d110:	4628      	mov	r0, r5
 800d112:	f001 ff91 	bl	800f038 <USBD_LL_StallEP>
 800d116:	e78f      	b.n	800d038 <USBD_StdEPReq+0x2c>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d118:	0648      	lsls	r0, r1, #25
 800d11a:	d185      	bne.n	800d028 <USBD_StdEPReq+0x1c>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d11c:	0611      	lsls	r1, r2, #24
 800d11e:	bf4c      	ite	mi
 800d120:	f105 0114 	addmi.w	r1, r5, #20
 800d124:	f505 71aa 	addpl.w	r1, r5, #340	@ 0x154
              pep->status = 0x0000U;
 800d128:	2300      	movs	r3, #0
 800d12a:	600b      	str	r3, [r1, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d12c:	2202      	movs	r2, #2
 800d12e:	4628      	mov	r0, r5
 800d130:	f000 f85c 	bl	800d1ec <USBD_CtlSendData>
              break;
 800d134:	e780      	b.n	800d038 <USBD_StdEPReq+0x2c>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800d136:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800d138:	2b00      	cmp	r3, #0
 800d13a:	f43f af75 	beq.w	800d028 <USBD_StdEPReq+0x1c>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d13e:	f001 037f 	and.w	r3, r1, #127	@ 0x7f
 800d142:	1c5c      	adds	r4, r3, #1
 800d144:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800d148:	eb05 0484 	add.w	r4, r5, r4, lsl #2
 800d14c:	e7bb      	b.n	800d0c6 <USBD_StdEPReq+0xba>
{
 800d14e:	2300      	movs	r3, #0
 800d150:	e7c1      	b.n	800d0d6 <USBD_StdEPReq+0xca>
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800d152:	9101      	str	r1, [sp, #4]
 800d154:	f001 ff7c 	bl	800f050 <USBD_LL_ClearStallEP>
 800d158:	9901      	ldr	r1, [sp, #4]
 800d15a:	e77c      	b.n	800d056 <USBD_StdEPReq+0x4a>
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800d15c:	4628      	mov	r0, r5
 800d15e:	f001 ff6b 	bl	800f038 <USBD_LL_StallEP>
 800d162:	e7cc      	b.n	800d0fe <USBD_StdEPReq+0xf2>

0800d164 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pbuff);
 800d164:	780b      	ldrb	r3, [r1, #0]
 800d166:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pbuff);
 800d168:	784b      	ldrb	r3, [r1, #1]
 800d16a:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pbuff);
 800d16c:	884b      	ldrh	r3, [r1, #2]
 800d16e:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pbuff);
 800d170:	888b      	ldrh	r3, [r1, #4]
 800d172:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pbuff);
 800d174:	88cb      	ldrh	r3, [r1, #6]
 800d176:	80c3      	strh	r3, [r0, #6]
}
 800d178:	4770      	bx	lr
 800d17a:	bf00      	nop

0800d17c <USBD_CtlError>:
{
 800d17c:	b510      	push	{r4, lr}
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800d17e:	2180      	movs	r1, #128	@ 0x80
{
 800d180:	4604      	mov	r4, r0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800d182:	f001 ff59 	bl	800f038 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800d186:	4620      	mov	r0, r4
 800d188:	2100      	movs	r1, #0
}
 800d18a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  (void)USBD_LL_StallEP(pdev, 0U);
 800d18e:	f001 bf53 	b.w	800f038 <USBD_LL_StallEP>
 800d192:	bf00      	nop

0800d194 <USBD_GetString>:
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
  uint8_t idx = 0U;
  uint8_t *pdesc;

  if (desc == NULL)
 800d194:	b330      	cbz	r0, 800d1e4 <USBD_GetString+0x50>
{
 800d196:	b570      	push	{r4, r5, r6, lr}
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;
  uint8_t *pbuff = buf;

  while (*pbuff != (uint8_t)'\0')
 800d198:	7803      	ldrb	r3, [r0, #0]
 800d19a:	460e      	mov	r6, r1
 800d19c:	4614      	mov	r4, r2
 800d19e:	4605      	mov	r5, r0
 800d1a0:	b30b      	cbz	r3, 800d1e6 <USBD_GetString+0x52>
 800d1a2:	4603      	mov	r3, r0
 800d1a4:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800d1a8:	2900      	cmp	r1, #0
 800d1aa:	d1fb      	bne.n	800d1a4 <USBD_GetString+0x10>
 800d1ac:	1c68      	adds	r0, r5, #1
 800d1ae:	f7f3 f837 	bl	8000220 <strlen>
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800d1b2:	1c43      	adds	r3, r0, #1
 800d1b4:	b2db      	uxtb	r3, r3
 800d1b6:	3301      	adds	r3, #1
 800d1b8:	005b      	lsls	r3, r3, #1
 800d1ba:	b2da      	uxtb	r2, r3
 800d1bc:	8023      	strh	r3, [r4, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800d1be:	2303      	movs	r3, #3
  unicode[idx] = *(uint8_t *)len;
 800d1c0:	7032      	strb	r2, [r6, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800d1c2:	7073      	strb	r3, [r6, #1]
  while (*pdesc != (uint8_t)'\0')
 800d1c4:	782c      	ldrb	r4, [r5, #0]
 800d1c6:	b164      	cbz	r4, 800d1e2 <USBD_GetString+0x4e>
 800d1c8:	4628      	mov	r0, r5
  idx++;
 800d1ca:	2302      	movs	r3, #2
    unicode[idx] = 0U;
 800d1cc:	2100      	movs	r1, #0
    idx++;
 800d1ce:	1c5a      	adds	r2, r3, #1
    unicode[idx] = 0U;
 800d1d0:	b2d2      	uxtb	r2, r2
    unicode[idx] = *pdesc;
 800d1d2:	54f4      	strb	r4, [r6, r3]
    unicode[idx] = 0U;
 800d1d4:	54b1      	strb	r1, [r6, r2]
  while (*pdesc != (uint8_t)'\0')
 800d1d6:	f810 4f01 	ldrb.w	r4, [r0, #1]!
    idx++;
 800d1da:	3302      	adds	r3, #2
 800d1dc:	b2db      	uxtb	r3, r3
  while (*pdesc != (uint8_t)'\0')
 800d1de:	2c00      	cmp	r4, #0
 800d1e0:	d1f5      	bne.n	800d1ce <USBD_GetString+0x3a>
}
 800d1e2:	bd70      	pop	{r4, r5, r6, pc}
 800d1e4:	4770      	bx	lr
  while (*pbuff != (uint8_t)'\0')
 800d1e6:	2202      	movs	r2, #2
 800d1e8:	4613      	mov	r3, r2
 800d1ea:	e7e7      	b.n	800d1bc <USBD_GetString+0x28>

0800d1ec <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800d1ec:	b508      	push	{r3, lr}
 800d1ee:	4613      	mov	r3, r2
 800d1f0:	460a      	mov	r2, r1
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800d1f2:	2102      	movs	r1, #2
  pdev->ep_in[0].total_length = len;
 800d1f4:	e9c0 3306 	strd	r3, r3, [r0, #24]
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800d1f8:	f8c0 1294 	str.w	r1, [r0, #660]	@ 0x294
#else
  pdev->ep_in[0].rem_length = len;
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d1fc:	2100      	movs	r1, #0
 800d1fe:	f001 ff53 	bl	800f0a8 <USBD_LL_Transmit>

  return USBD_OK;
}
 800d202:	2000      	movs	r0, #0
 800d204:	bd08      	pop	{r3, pc}
 800d206:	bf00      	nop

0800d208 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800d208:	b508      	push	{r3, lr}
 800d20a:	4613      	mov	r3, r2
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d20c:	460a      	mov	r2, r1
 800d20e:	2100      	movs	r1, #0
 800d210:	f001 ff4a 	bl	800f0a8 <USBD_LL_Transmit>

  return USBD_OK;
}
 800d214:	2000      	movs	r0, #0
 800d216:	bd08      	pop	{r3, pc}

0800d218 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800d218:	b508      	push	{r3, lr}
 800d21a:	4613      	mov	r3, r2
 800d21c:	460a      	mov	r2, r1
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800d21e:	2103      	movs	r1, #3
  pdev->ep_out[0].total_length = len;
 800d220:	e9c0 3356 	strd	r3, r3, [r0, #344]	@ 0x158
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800d224:	f8c0 1294 	str.w	r1, [r0, #660]	@ 0x294
#else
  pdev->ep_out[0].rem_length = len;
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d228:	2100      	movs	r1, #0
 800d22a:	f001 ff49 	bl	800f0c0 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800d22e:	2000      	movs	r0, #0
 800d230:	bd08      	pop	{r3, pc}
 800d232:	bf00      	nop

0800d234 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800d234:	b508      	push	{r3, lr}
 800d236:	4613      	mov	r3, r2
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d238:	460a      	mov	r2, r1
 800d23a:	2100      	movs	r1, #0
 800d23c:	f001 ff40 	bl	800f0c0 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800d240:	2000      	movs	r0, #0
 800d242:	bd08      	pop	{r3, pc}

0800d244 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800d244:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800d246:	2104      	movs	r1, #4

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800d248:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800d24a:	f8c0 1294 	str.w	r1, [r0, #660]	@ 0x294
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800d24e:	461a      	mov	r2, r3
 800d250:	4619      	mov	r1, r3
 800d252:	f001 ff29 	bl	800f0a8 <USBD_LL_Transmit>

  return USBD_OK;
}
 800d256:	2000      	movs	r0, #0
 800d258:	bd08      	pop	{r3, pc}
 800d25a:	bf00      	nop

0800d25c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800d25c:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800d25e:	2105      	movs	r1, #5

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d260:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800d262:	f8c0 1294 	str.w	r1, [r0, #660]	@ 0x294
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d266:	461a      	mov	r2, r3
 800d268:	4619      	mov	r1, r3
 800d26a:	f001 ff29 	bl	800f0c0 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800d26e:	2000      	movs	r0, #0
 800d270:	bd08      	pop	{r3, pc}
 800d272:	bf00      	nop

0800d274 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800d274:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 800d276:	f000 fcb7 	bl	800dbe8 <vTaskStartScheduler>
  
  return osOK;
}
 800d27a:	2000      	movs	r0, #0
 800d27c:	bd08      	pop	{r3, pc}
 800d27e:	bf00      	nop

0800d280 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800d280:	b510      	push	{r4, lr}
 800d282:	4684      	mov	ip, r0
 800d284:	460b      	mov	r3, r1

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d286:	f8bc 2010 	ldrh.w	r2, [ip, #16]
 800d28a:	f8dc 1000 	ldr.w	r1, [ip]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800d28e:	f9bc c008 	ldrsh.w	ip, [ip, #8]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d292:	6840      	ldr	r0, [r0, #4]
{
 800d294:	b084      	sub	sp, #16
  if (priority != osPriorityError) {
 800d296:	f1bc 0f84 	cmp.w	ip, #132	@ 0x84
    fpriority += (priority - osPriorityIdle);
 800d29a:	bf14      	ite	ne
 800d29c:	f10c 0403 	addne.w	r4, ip, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800d2a0:	2400      	moveq	r4, #0
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d2a2:	9400      	str	r4, [sp, #0]
 800d2a4:	ac03      	add	r4, sp, #12
 800d2a6:	9401      	str	r4, [sp, #4]
 800d2a8:	f000 fa4c 	bl	800d744 <xTaskCreate>
 800d2ac:	2801      	cmp	r0, #1
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800d2ae:	bf0c      	ite	eq
 800d2b0:	9803      	ldreq	r0, [sp, #12]
    return NULL;
 800d2b2:	2000      	movne	r0, #0
}
 800d2b4:	b004      	add	sp, #16
 800d2b6:	bd10      	pop	{r4, pc}

0800d2b8 <osThreadSetPriority>:
* @param   priority      new priority value for the thread function.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadSetPriority shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadSetPriority (osThreadId thread_id, osPriority priority)
{
 800d2b8:	b508      	push	{r3, lr}
  if (priority != osPriorityError) {
 800d2ba:	2984      	cmp	r1, #132	@ 0x84
    fpriority += (priority - osPriorityIdle);
 800d2bc:	bf14      	ite	ne
 800d2be:	3103      	addne	r1, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800d2c0:	2100      	moveq	r1, #0
#if (INCLUDE_vTaskPrioritySet == 1)
  vTaskPrioritySet(thread_id, makeFreeRtosPriority(priority));
 800d2c2:	f000 fb7d 	bl	800d9c0 <vTaskPrioritySet>
  return osOK;
#else
  return osErrorOS;
#endif
}
 800d2c6:	2000      	movs	r0, #0
 800d2c8:	bd08      	pop	{r3, pc}
 800d2ca:	bf00      	nop

0800d2cc <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800d2cc:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800d2ce:	2801      	cmp	r0, #1
 800d2d0:	bf38      	it	cc
 800d2d2:	2001      	movcc	r0, #1
 800d2d4:	f000 fb44 	bl	800d960 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800d2d8:	2000      	movs	r0, #0
 800d2da:	bd08      	pop	{r3, pc}

0800d2dc <osThreadSuspend>:
* @brief  Suspend execution of a thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadSuspend (osThreadId thread_id)
{
 800d2dc:	b508      	push	{r3, lr}
#if (INCLUDE_vTaskSuspend == 1)
    vTaskSuspend(thread_id);
 800d2de:	f000 fdc7 	bl	800de70 <vTaskSuspend>
  
  return osOK;
#else
  return osErrorResource;
#endif
}
 800d2e2:	2000      	movs	r0, #0
 800d2e4:	bd08      	pop	{r3, pc}
 800d2e6:	bf00      	nop

0800d2e8 <osThreadResume>:
* @brief  Resume execution of a suspended thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadResume (osThreadId thread_id)
{
 800d2e8:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d2ea:	f3ef 8305 	mrs	r3, IPSR
#if (INCLUDE_vTaskSuspend == 1)  
  if(inHandlerMode())
 800d2ee:	b12b      	cbz	r3, 800d2fc <osThreadResume+0x14>
  {
    if (xTaskResumeFromISR(thread_id) == pdTRUE)
 800d2f0:	f000 fc24 	bl	800db3c <xTaskResumeFromISR>
 800d2f4:	2801      	cmp	r0, #1
 800d2f6:	d005      	beq.n	800d304 <osThreadResume+0x1c>
  }
  return osOK;
#else
  return osErrorResource;
#endif
}
 800d2f8:	2000      	movs	r0, #0
 800d2fa:	bd08      	pop	{r3, pc}
    vTaskResume(thread_id);
 800d2fc:	f000 fbd0 	bl	800daa0 <vTaskResume>
}
 800d300:	2000      	movs	r0, #0
 800d302:	bd08      	pop	{r3, pc}
      portYIELD_FROM_ISR(pdTRUE);
 800d304:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800d308:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d30c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800d310:	f3bf 8f4f 	dsb	sy
 800d314:	f3bf 8f6f 	isb	sy
}
 800d318:	2000      	movs	r0, #0
 800d31a:	bd08      	pop	{r3, pc}

0800d31c <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d31c:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d320:	f04f 31ff 	mov.w	r1, #4294967295
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d324:	2200      	movs	r2, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d326:	e9c0 3101 	strd	r3, r1, [r0, #4]
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d32a:	e9c0 3303 	strd	r3, r3, [r0, #12]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d32e:	6002      	str	r2, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d330:	4770      	bx	lr
 800d332:	bf00      	nop

0800d334 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800d334:	2300      	movs	r3, #0
 800d336:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d338:	4770      	bx	lr
 800d33a:	bf00      	nop

0800d33c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800d33c:	6842      	ldr	r2, [r0, #4]
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 800d33e:	6803      	ldr	r3, [r0, #0]
{
 800d340:	b410      	push	{r4}
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d342:	6894      	ldr	r4, [r2, #8]
	( pxList->uxNumberOfItems )++;
 800d344:	3301      	adds	r3, #1
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d346:	e9c1 2401 	strd	r2, r4, [r1, #4]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d34a:	6061      	str	r1, [r4, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d34c:	6091      	str	r1, [r2, #8]
}
 800d34e:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxNewListItem->pxContainer = pxList;
 800d352:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800d354:	6003      	str	r3, [r0, #0]
}
 800d356:	4770      	bx	lr

0800d358 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d358:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d35a:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800d35c:	1c6b      	adds	r3, r5, #1
 800d35e:	d010      	beq.n	800d382 <vListInsert+0x2a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800d360:	f100 0308 	add.w	r3, r0, #8
 800d364:	461c      	mov	r4, r3
 800d366:	685b      	ldr	r3, [r3, #4]
 800d368:	681a      	ldr	r2, [r3, #0]
 800d36a:	42aa      	cmp	r2, r5
 800d36c:	d9fa      	bls.n	800d364 <vListInsert+0xc>

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 800d36e:	6802      	ldr	r2, [r0, #0]
	pxNewListItem->pxNext = pxIterator->pxNext;
 800d370:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
 800d372:	3201      	adds	r2, #1
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d374:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800d376:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800d378:	6061      	str	r1, [r4, #4]
	pxNewListItem->pxContainer = pxList;
 800d37a:	6108      	str	r0, [r1, #16]
}
 800d37c:	bc30      	pop	{r4, r5}
	( pxList->uxNumberOfItems )++;
 800d37e:	6002      	str	r2, [r0, #0]
}
 800d380:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 800d382:	6904      	ldr	r4, [r0, #16]
	pxNewListItem->pxNext = pxIterator->pxNext;
 800d384:	6863      	ldr	r3, [r4, #4]
 800d386:	e7f2      	b.n	800d36e <vListInsert+0x16>

0800d388 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800d388:	6903      	ldr	r3, [r0, #16]
{
 800d38a:	b410      	push	{r4}

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d38c:	e9d0 1201 	ldrd	r1, r2, [r0, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d390:	685c      	ldr	r4, [r3, #4]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d392:	608a      	str	r2, [r1, #8]
	if( pxList->pxIndex == pxItemToRemove )
 800d394:	4284      	cmp	r4, r0
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d396:	6051      	str	r1, [r2, #4]
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d398:	bf08      	it	eq
 800d39a:	605a      	streq	r2, [r3, #4]
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
	( pxList->uxNumberOfItems )--;
 800d39c:	681a      	ldr	r2, [r3, #0]

	return pxList->uxNumberOfItems;
}
 800d39e:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxItemToRemove->pxContainer = NULL;
 800d3a2:	2100      	movs	r1, #0
	( pxList->uxNumberOfItems )--;
 800d3a4:	3a01      	subs	r2, #1
	pxItemToRemove->pxContainer = NULL;
 800d3a6:	6101      	str	r1, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800d3a8:	601a      	str	r2, [r3, #0]
	return pxList->uxNumberOfItems;
 800d3aa:	6818      	ldr	r0, [r3, #0]
}
 800d3ac:	4770      	bx	lr
 800d3ae:	bf00      	nop

0800d3b0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d3b0:	b580      	push	{r7, lr}
 800d3b2:	4d16      	ldr	r5, [pc, #88]	@ (800d40c <prvIdleTask+0x5c>)
 800d3b4:	4f16      	ldr	r7, [pc, #88]	@ (800d410 <prvIdleTask+0x60>)
 800d3b6:	4e17      	ldr	r6, [pc, #92]	@ (800d414 <prvIdleTask+0x64>)
 800d3b8:	f8df 805c 	ldr.w	r8, [pc, #92]	@ 800d418 <prvIdleTask+0x68>
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
			{
				taskYIELD();
 800d3bc:	f04f 2ae0 	mov.w	sl, #3758153728	@ 0xe000e000
 800d3c0:	f04f 5980 	mov.w	r9, #268435456	@ 0x10000000
 800d3c4:	e014      	b.n	800d3f0 <prvIdleTask+0x40>

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
		{
			taskENTER_CRITICAL();
 800d3c6:	f000 fe3d 	bl	800e044 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d3ca:	68fb      	ldr	r3, [r7, #12]
 800d3cc:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d3ce:	1d20      	adds	r0, r4, #4
 800d3d0:	f7ff ffda 	bl	800d388 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d3d4:	6833      	ldr	r3, [r6, #0]
 800d3d6:	3b01      	subs	r3, #1
 800d3d8:	6033      	str	r3, [r6, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d3da:	682b      	ldr	r3, [r5, #0]
 800d3dc:	3b01      	subs	r3, #1
 800d3de:	602b      	str	r3, [r5, #0]
			}
			taskEXIT_CRITICAL();
 800d3e0:	f000 fe52 	bl	800e088 <vPortExitCritical>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 800d3e4:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800d3e6:	f001 f845 	bl	800e474 <vPortFree>
			vPortFree( pxTCB );
 800d3ea:	4620      	mov	r0, r4
 800d3ec:	f001 f842 	bl	800e474 <vPortFree>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d3f0:	682b      	ldr	r3, [r5, #0]
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d1e7      	bne.n	800d3c6 <prvIdleTask+0x16>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d3f6:	f8d8 3000 	ldr.w	r3, [r8]
 800d3fa:	2b01      	cmp	r3, #1
 800d3fc:	d9f8      	bls.n	800d3f0 <prvIdleTask+0x40>
				taskYIELD();
 800d3fe:	f8ca 9d04 	str.w	r9, [sl, #3332]	@ 0xd04
 800d402:	f3bf 8f4f 	dsb	sy
 800d406:	f3bf 8f6f 	isb	sy
 800d40a:	e7f1      	b.n	800d3f0 <prvIdleTask+0x40>
 800d40c:	2000185c 	.word	0x2000185c
 800d410:	20001860 	.word	0x20001860
 800d414:	20001844 	.word	0x20001844
 800d418:	200018b8 	.word	0x200018b8

0800d41c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d41c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d41e:	4b1b      	ldr	r3, [pc, #108]	@ (800d48c <prvAddCurrentTaskToDelayedList+0x70>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d420:	4e1b      	ldr	r6, [pc, #108]	@ (800d490 <prvAddCurrentTaskToDelayedList+0x74>)
const TickType_t xConstTickCount = xTickCount;
 800d422:	681c      	ldr	r4, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d424:	6833      	ldr	r3, [r6, #0]
{
 800d426:	4605      	mov	r5, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d428:	1d18      	adds	r0, r3, #4
{
 800d42a:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d42c:	f7ff ffac 	bl	800d388 <uxListRemove>
 800d430:	b940      	cbnz	r0, 800d444 <prvAddCurrentTaskToDelayedList+0x28>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800d432:	6833      	ldr	r3, [r6, #0]
 800d434:	4917      	ldr	r1, [pc, #92]	@ (800d494 <prvAddCurrentTaskToDelayedList+0x78>)
 800d436:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d438:	2201      	movs	r2, #1
 800d43a:	409a      	lsls	r2, r3
 800d43c:	680b      	ldr	r3, [r1, #0]
 800d43e:	ea23 0302 	bic.w	r3, r3, r2
 800d442:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d444:	1c6b      	adds	r3, r5, #1
 800d446:	d017      	beq.n	800d478 <prvAddCurrentTaskToDelayedList+0x5c>
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d448:	6833      	ldr	r3, [r6, #0]
 800d44a:	1964      	adds	r4, r4, r5
 800d44c:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 800d44e:	d307      	bcc.n	800d460 <prvAddCurrentTaskToDelayedList+0x44>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d450:	4b11      	ldr	r3, [pc, #68]	@ (800d498 <prvAddCurrentTaskToDelayedList+0x7c>)
 800d452:	6818      	ldr	r0, [r3, #0]
 800d454:	6831      	ldr	r1, [r6, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d456:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d45a:	3104      	adds	r1, #4
 800d45c:	f7ff bf7c 	b.w	800d358 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d460:	4b0e      	ldr	r3, [pc, #56]	@ (800d49c <prvAddCurrentTaskToDelayedList+0x80>)
 800d462:	6818      	ldr	r0, [r3, #0]
 800d464:	6831      	ldr	r1, [r6, #0]
 800d466:	3104      	adds	r1, #4
 800d468:	f7ff ff76 	bl	800d358 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d46c:	4b0c      	ldr	r3, [pc, #48]	@ (800d4a0 <prvAddCurrentTaskToDelayedList+0x84>)
 800d46e:	681a      	ldr	r2, [r3, #0]
 800d470:	42a2      	cmp	r2, r4
					xNextTaskUnblockTime = xTimeToWake;
 800d472:	bf88      	it	hi
 800d474:	601c      	strhi	r4, [r3, #0]
}
 800d476:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d478:	2f00      	cmp	r7, #0
 800d47a:	d0e5      	beq.n	800d448 <prvAddCurrentTaskToDelayedList+0x2c>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d47c:	6831      	ldr	r1, [r6, #0]
 800d47e:	4809      	ldr	r0, [pc, #36]	@ (800d4a4 <prvAddCurrentTaskToDelayedList+0x88>)
}
 800d480:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d484:	3104      	adds	r1, #4
 800d486:	f7ff bf59 	b.w	800d33c <vListInsertEnd>
 800d48a:	bf00      	nop
 800d48c:	20001840 	.word	0x20001840
 800d490:	20001944 	.word	0x20001944
 800d494:	2000183c 	.word	0x2000183c
 800d498:	20001888 	.word	0x20001888
 800d49c:	2000188c 	.word	0x2000188c
 800d4a0:	20001824 	.word	0x20001824
 800d4a4:	20001848 	.word	0x20001848

0800d4a8 <xTaskIncrementTick.part.0>:
BaseType_t xTaskIncrementTick( void )
 800d4a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d4ac:	4b48      	ldr	r3, [pc, #288]	@ (800d5d0 <xTaskIncrementTick.part.0+0x128>)
 800d4ae:	681d      	ldr	r5, [r3, #0]
 800d4b0:	3501      	adds	r5, #1
BaseType_t xTaskIncrementTick( void )
 800d4b2:	b083      	sub	sp, #12
		xTickCount = xConstTickCount;
 800d4b4:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d4b6:	2d00      	cmp	r5, #0
 800d4b8:	d041      	beq.n	800d53e <xTaskIncrementTick.part.0+0x96>
 800d4ba:	4b46      	ldr	r3, [pc, #280]	@ (800d5d4 <xTaskIncrementTick.part.0+0x12c>)
 800d4bc:	9301      	str	r3, [sp, #4]
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	429d      	cmp	r5, r3
 800d4c2:	d349      	bcc.n	800d558 <xTaskIncrementTick.part.0+0xb0>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d4c4:	4e44      	ldr	r6, [pc, #272]	@ (800d5d8 <xTaskIncrementTick.part.0+0x130>)
 800d4c6:	f8df 8124 	ldr.w	r8, [pc, #292]	@ 800d5ec <xTaskIncrementTick.part.0+0x144>
 800d4ca:	6833      	ldr	r3, [r6, #0]
 800d4cc:	f8df 9120 	ldr.w	r9, [pc, #288]	@ 800d5f0 <xTaskIncrementTick.part.0+0x148>
 800d4d0:	681c      	ldr	r4, [r3, #0]
 800d4d2:	2c00      	cmp	r4, #0
 800d4d4:	d076      	beq.n	800d5c4 <xTaskIncrementTick.part.0+0x11c>
					prvAddTaskToReadyList( pxTCB );
 800d4d6:	4f41      	ldr	r7, [pc, #260]	@ (800d5dc <xTaskIncrementTick.part.0+0x134>)
BaseType_t xSwitchRequired = pdFALSE;
 800d4d8:	2400      	movs	r4, #0
 800d4da:	e022      	b.n	800d522 <xTaskIncrementTick.part.0+0x7a>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d4dc:	f7ff ff54 	bl	800d388 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d4e0:	f8db 2028 	ldr.w	r2, [fp, #40]	@ 0x28
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d4e4:	f10b 0018 	add.w	r0, fp, #24
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d4e8:	b10a      	cbz	r2, 800d4ee <xTaskIncrementTick.part.0+0x46>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d4ea:	f7ff ff4d 	bl	800d388 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d4ee:	f8db 002c 	ldr.w	r0, [fp, #44]	@ 0x2c
 800d4f2:	683b      	ldr	r3, [r7, #0]
 800d4f4:	2201      	movs	r2, #1
 800d4f6:	4082      	lsls	r2, r0
 800d4f8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800d4fc:	431a      	orrs	r2, r3
 800d4fe:	4651      	mov	r1, sl
 800d500:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 800d504:	603a      	str	r2, [r7, #0]
 800d506:	f7ff ff19 	bl	800d33c <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d50a:	f8d9 2000 	ldr.w	r2, [r9]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d50e:	6830      	ldr	r0, [r6, #0]
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d510:	f8db 102c 	ldr.w	r1, [fp, #44]	@ 0x2c
 800d514:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d516:	6803      	ldr	r3, [r0, #0]
							xSwitchRequired = pdTRUE;
 800d518:	4291      	cmp	r1, r2
 800d51a:	bf28      	it	cs
 800d51c:	2401      	movcs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d050      	beq.n	800d5c4 <xTaskIncrementTick.part.0+0x11c>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d522:	6833      	ldr	r3, [r6, #0]
 800d524:	68db      	ldr	r3, [r3, #12]
 800d526:	f8d3 b00c 	ldr.w	fp, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d52a:	f8db 2004 	ldr.w	r2, [fp, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d52e:	f10b 0a04 	add.w	sl, fp, #4
					if( xConstTickCount < xItemValue )
 800d532:	4295      	cmp	r5, r2
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d534:	4650      	mov	r0, sl
					if( xConstTickCount < xItemValue )
 800d536:	d2d1      	bcs.n	800d4dc <xTaskIncrementTick.part.0+0x34>
						xNextTaskUnblockTime = xItemValue;
 800d538:	9b01      	ldr	r3, [sp, #4]
 800d53a:	601a      	str	r2, [r3, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d53c:	e011      	b.n	800d562 <xTaskIncrementTick.part.0+0xba>
			taskSWITCH_DELAYED_LISTS();
 800d53e:	4b26      	ldr	r3, [pc, #152]	@ (800d5d8 <xTaskIncrementTick.part.0+0x130>)
 800d540:	681a      	ldr	r2, [r3, #0]
 800d542:	6812      	ldr	r2, [r2, #0]
 800d544:	b30a      	cbz	r2, 800d58a <xTaskIncrementTick.part.0+0xe2>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800d546:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d54a:	f383 8811 	msr	BASEPRI, r3
 800d54e:	f3bf 8f6f 	isb	sy
 800d552:	f3bf 8f4f 	dsb	sy
 800d556:	e7fe      	b.n	800d556 <xTaskIncrementTick.part.0+0xae>
 800d558:	f8df 8090 	ldr.w	r8, [pc, #144]	@ 800d5ec <xTaskIncrementTick.part.0+0x144>
 800d55c:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 800d5f0 <xTaskIncrementTick.part.0+0x148>
BaseType_t xSwitchRequired = pdFALSE;
 800d560:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d562:	f8d9 3000 	ldr.w	r3, [r9]
			if( xYieldPending != pdFALSE )
 800d566:	491e      	ldr	r1, [pc, #120]	@ (800d5e0 <xTaskIncrementTick.part.0+0x138>)
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d568:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d56a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800d56e:	009b      	lsls	r3, r3, #2
 800d570:	f858 2003 	ldr.w	r2, [r8, r3]
			if( xYieldPending != pdFALSE )
 800d574:	680b      	ldr	r3, [r1, #0]
				xSwitchRequired = pdTRUE;
 800d576:	2a02      	cmp	r2, #2
 800d578:	bf28      	it	cs
 800d57a:	2401      	movcs	r4, #1
				xSwitchRequired = pdTRUE;
 800d57c:	2b00      	cmp	r3, #0
}
 800d57e:	bf0c      	ite	eq
 800d580:	4620      	moveq	r0, r4
 800d582:	2001      	movne	r0, #1
 800d584:	b003      	add	sp, #12
 800d586:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			taskSWITCH_DELAYED_LISTS();
 800d58a:	4a16      	ldr	r2, [pc, #88]	@ (800d5e4 <xTaskIncrementTick.part.0+0x13c>)
 800d58c:	6818      	ldr	r0, [r3, #0]
 800d58e:	6811      	ldr	r1, [r2, #0]
 800d590:	6019      	str	r1, [r3, #0]
 800d592:	4915      	ldr	r1, [pc, #84]	@ (800d5e8 <xTaskIncrementTick.part.0+0x140>)
 800d594:	6010      	str	r0, [r2, #0]
 800d596:	680a      	ldr	r2, [r1, #0]
 800d598:	3201      	adds	r2, #1
 800d59a:	600a      	str	r2, [r1, #0]
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d59c:	681a      	ldr	r2, [r3, #0]
 800d59e:	6812      	ldr	r2, [r2, #0]
 800d5a0:	b93a      	cbnz	r2, 800d5b2 <xTaskIncrementTick.part.0+0x10a>
		xNextTaskUnblockTime = portMAX_DELAY;
 800d5a2:	4b0c      	ldr	r3, [pc, #48]	@ (800d5d4 <xTaskIncrementTick.part.0+0x12c>)
 800d5a4:	9301      	str	r3, [sp, #4]
 800d5a6:	461a      	mov	r2, r3
 800d5a8:	f04f 33ff 	mov.w	r3, #4294967295
 800d5ac:	6013      	str	r3, [r2, #0]
 800d5ae:	4613      	mov	r3, r2
 800d5b0:	e785      	b.n	800d4be <xTaskIncrementTick.part.0+0x16>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d5b2:	681b      	ldr	r3, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d5b4:	4a07      	ldr	r2, [pc, #28]	@ (800d5d4 <xTaskIncrementTick.part.0+0x12c>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d5b6:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d5b8:	9201      	str	r2, [sp, #4]
 800d5ba:	68db      	ldr	r3, [r3, #12]
 800d5bc:	685b      	ldr	r3, [r3, #4]
 800d5be:	6013      	str	r3, [r2, #0]
 800d5c0:	4613      	mov	r3, r2
}
 800d5c2:	e77c      	b.n	800d4be <xTaskIncrementTick.part.0+0x16>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d5c4:	9a01      	ldr	r2, [sp, #4]
 800d5c6:	f04f 33ff 	mov.w	r3, #4294967295
 800d5ca:	6013      	str	r3, [r2, #0]
					break;
 800d5cc:	e7c9      	b.n	800d562 <xTaskIncrementTick.part.0+0xba>
 800d5ce:	bf00      	nop
 800d5d0:	20001840 	.word	0x20001840
 800d5d4:	20001824 	.word	0x20001824
 800d5d8:	2000188c 	.word	0x2000188c
 800d5dc:	2000183c 	.word	0x2000183c
 800d5e0:	20001830 	.word	0x20001830
 800d5e4:	20001888 	.word	0x20001888
 800d5e8:	2000182c 	.word	0x2000182c
 800d5ec:	200018b8 	.word	0x200018b8
 800d5f0:	20001944 	.word	0x20001944

0800d5f4 <xTaskResumeAll.part.0>:
BaseType_t xTaskResumeAll( void )
 800d5f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		--uxSchedulerSuspended;
 800d5f8:	4d48      	ldr	r5, [pc, #288]	@ (800d71c <xTaskResumeAll.part.0+0x128>)
BaseType_t xTaskResumeAll( void )
 800d5fa:	b083      	sub	sp, #12
	taskENTER_CRITICAL();
 800d5fc:	f000 fd22 	bl	800e044 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800d600:	682b      	ldr	r3, [r5, #0]
 800d602:	3b01      	subs	r3, #1
 800d604:	602b      	str	r3, [r5, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d606:	682b      	ldr	r3, [r5, #0]
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d16e      	bne.n	800d6ea <xTaskResumeAll.part.0+0xf6>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d60c:	4b44      	ldr	r3, [pc, #272]	@ (800d720 <xTaskResumeAll.part.0+0x12c>)
 800d60e:	681b      	ldr	r3, [r3, #0]
 800d610:	2b00      	cmp	r3, #0
 800d612:	d06a      	beq.n	800d6ea <xTaskResumeAll.part.0+0xf6>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d614:	f8df a120 	ldr.w	sl, [pc, #288]	@ 800d738 <xTaskResumeAll.part.0+0x144>
 800d618:	f8da 2000 	ldr.w	r2, [sl]
 800d61c:	2a00      	cmp	r2, #0
 800d61e:	d079      	beq.n	800d714 <xTaskResumeAll.part.0+0x120>
 800d620:	4b40      	ldr	r3, [pc, #256]	@ (800d724 <xTaskResumeAll.part.0+0x130>)
 800d622:	4e41      	ldr	r6, [pc, #260]	@ (800d728 <xTaskResumeAll.part.0+0x134>)
 800d624:	f8df 9114 	ldr.w	r9, [pc, #276]	@ 800d73c <xTaskResumeAll.part.0+0x148>
 800d628:	f8df 8114 	ldr.w	r8, [pc, #276]	@ 800d740 <xTaskResumeAll.part.0+0x14c>
 800d62c:	9301      	str	r3, [sp, #4]
					prvAddTaskToReadyList( pxTCB );
 800d62e:	2701      	movs	r7, #1
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d630:	f8da 200c 	ldr.w	r2, [sl, #12]
 800d634:	f8d2 b00c 	ldr.w	fp, [r2, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d638:	f10b 0404 	add.w	r4, fp, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d63c:	f10b 0018 	add.w	r0, fp, #24
 800d640:	f7ff fea2 	bl	800d388 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d644:	4620      	mov	r0, r4
 800d646:	f7ff fe9f 	bl	800d388 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d64a:	f8db 002c 	ldr.w	r0, [fp, #44]	@ 0x2c
 800d64e:	6831      	ldr	r1, [r6, #0]
 800d650:	fa07 f200 	lsl.w	r2, r7, r0
 800d654:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800d658:	430a      	orrs	r2, r1
 800d65a:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 800d65e:	4621      	mov	r1, r4
 800d660:	6032      	str	r2, [r6, #0]
 800d662:	f7ff fe6b 	bl	800d33c <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d666:	f8d8 2000 	ldr.w	r2, [r8]
 800d66a:	f8db 102c 	ldr.w	r1, [fp, #44]	@ 0x2c
 800d66e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800d670:	4291      	cmp	r1, r2
 800d672:	d341      	bcc.n	800d6f8 <xTaskResumeAll.part.0+0x104>
						xYieldPending = pdTRUE;
 800d674:	9b01      	ldr	r3, [sp, #4]
 800d676:	601f      	str	r7, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d678:	f8da 2000 	ldr.w	r2, [sl]
 800d67c:	2a00      	cmp	r2, #0
 800d67e:	d1d7      	bne.n	800d630 <xTaskResumeAll.part.0+0x3c>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d680:	4b2a      	ldr	r3, [pc, #168]	@ (800d72c <xTaskResumeAll.part.0+0x138>)
 800d682:	681a      	ldr	r2, [r3, #0]
 800d684:	6812      	ldr	r2, [r2, #0]
 800d686:	2a00      	cmp	r2, #0
 800d688:	d03f      	beq.n	800d70a <xTaskResumeAll.part.0+0x116>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d68a:	681a      	ldr	r2, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d68c:	4b28      	ldr	r3, [pc, #160]	@ (800d730 <xTaskResumeAll.part.0+0x13c>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d68e:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d690:	68d2      	ldr	r2, [r2, #12]
 800d692:	6852      	ldr	r2, [r2, #4]
 800d694:	601a      	str	r2, [r3, #0]
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800d696:	4e27      	ldr	r6, [pc, #156]	@ (800d734 <xTaskResumeAll.part.0+0x140>)
 800d698:	6834      	ldr	r4, [r6, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 800d69a:	b194      	cbz	r4, 800d6c2 <xTaskResumeAll.part.0+0xce>
								xYieldPending = pdTRUE;
 800d69c:	2701      	movs	r7, #1
 800d69e:	e006      	b.n	800d6ae <xTaskResumeAll.part.0+0xba>
 800d6a0:	f7ff ff02 	bl	800d4a8 <xTaskIncrementTick.part.0>
							if( xTaskIncrementTick() != pdFALSE )
 800d6a4:	b108      	cbz	r0, 800d6aa <xTaskResumeAll.part.0+0xb6>
								xYieldPending = pdTRUE;
 800d6a6:	9b01      	ldr	r3, [sp, #4]
 800d6a8:	601f      	str	r7, [r3, #0]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800d6aa:	3c01      	subs	r4, #1
 800d6ac:	d008      	beq.n	800d6c0 <xTaskResumeAll.part.0+0xcc>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d6ae:	682b      	ldr	r3, [r5, #0]
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	d0f5      	beq.n	800d6a0 <xTaskResumeAll.part.0+0xac>
		++xPendedTicks;
 800d6b4:	6833      	ldr	r3, [r6, #0]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800d6b6:	3c01      	subs	r4, #1
		++xPendedTicks;
 800d6b8:	f103 0301 	add.w	r3, r3, #1
 800d6bc:	6033      	str	r3, [r6, #0]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800d6be:	d1f6      	bne.n	800d6ae <xTaskResumeAll.part.0+0xba>
						xPendedTicks = 0;
 800d6c0:	6034      	str	r4, [r6, #0]
				if( xYieldPending != pdFALSE )
 800d6c2:	9b01      	ldr	r3, [sp, #4]
 800d6c4:	681b      	ldr	r3, [r3, #0]
 800d6c6:	b183      	cbz	r3, 800d6ea <xTaskResumeAll.part.0+0xf6>
					taskYIELD_IF_USING_PREEMPTION();
 800d6c8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800d6cc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d6d0:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800d6d4:	f3bf 8f4f 	dsb	sy
 800d6d8:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 800d6dc:	f000 fcd4 	bl	800e088 <vPortExitCritical>
						xAlreadyYielded = pdTRUE;
 800d6e0:	2401      	movs	r4, #1
}
 800d6e2:	4620      	mov	r0, r4
 800d6e4:	b003      	add	sp, #12
 800d6e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	taskEXIT_CRITICAL();
 800d6ea:	f000 fccd 	bl	800e088 <vPortExitCritical>
BaseType_t xAlreadyYielded = pdFALSE;
 800d6ee:	2400      	movs	r4, #0
}
 800d6f0:	4620      	mov	r0, r4
 800d6f2:	b003      	add	sp, #12
 800d6f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d6f8:	f8da 2000 	ldr.w	r2, [sl]
 800d6fc:	2a00      	cmp	r2, #0
 800d6fe:	d197      	bne.n	800d630 <xTaskResumeAll.part.0+0x3c>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d700:	4b0a      	ldr	r3, [pc, #40]	@ (800d72c <xTaskResumeAll.part.0+0x138>)
 800d702:	681a      	ldr	r2, [r3, #0]
 800d704:	6812      	ldr	r2, [r2, #0]
 800d706:	2a00      	cmp	r2, #0
 800d708:	d1bf      	bne.n	800d68a <xTaskResumeAll.part.0+0x96>
		xNextTaskUnblockTime = portMAX_DELAY;
 800d70a:	4b09      	ldr	r3, [pc, #36]	@ (800d730 <xTaskResumeAll.part.0+0x13c>)
 800d70c:	f04f 32ff 	mov.w	r2, #4294967295
 800d710:	601a      	str	r2, [r3, #0]
 800d712:	e7c0      	b.n	800d696 <xTaskResumeAll.part.0+0xa2>
 800d714:	4b03      	ldr	r3, [pc, #12]	@ (800d724 <xTaskResumeAll.part.0+0x130>)
 800d716:	9301      	str	r3, [sp, #4]
 800d718:	e7bd      	b.n	800d696 <xTaskResumeAll.part.0+0xa2>
 800d71a:	bf00      	nop
 800d71c:	2000181c 	.word	0x2000181c
 800d720:	20001844 	.word	0x20001844
 800d724:	20001830 	.word	0x20001830
 800d728:	2000183c 	.word	0x2000183c
 800d72c:	2000188c 	.word	0x2000188c
 800d730:	20001824 	.word	0x20001824
 800d734:	20001834 	.word	0x20001834
 800d738:	20001874 	.word	0x20001874
 800d73c:	200018b8 	.word	0x200018b8
 800d740:	20001944 	.word	0x20001944

0800d744 <xTaskCreate>:
	{
 800d744:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d748:	0095      	lsls	r5, r2, #2
	{
 800d74a:	4680      	mov	r8, r0
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d74c:	4628      	mov	r0, r5
	{
 800d74e:	460e      	mov	r6, r1
 800d750:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d752:	f000 fdd7 	bl	800e304 <pvPortMalloc>
			if( pxStack != NULL )
 800d756:	2800      	cmp	r0, #0
 800d758:	f000 80ac 	beq.w	800d8b4 <xTaskCreate+0x170>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d75c:	4607      	mov	r7, r0
 800d75e:	2054      	movs	r0, #84	@ 0x54
 800d760:	f000 fdd0 	bl	800e304 <pvPortMalloc>
				if( pxNewTCB != NULL )
 800d764:	4604      	mov	r4, r0
 800d766:	2800      	cmp	r0, #0
 800d768:	f000 80a1 	beq.w	800d8ae <xTaskCreate+0x16a>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d76c:	3d04      	subs	r5, #4
 800d76e:	443d      	add	r5, r7
					pxNewTCB->pxStack = pxStack;
 800d770:	6307      	str	r7, [r0, #48]	@ 0x30
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d772:	f025 0507 	bic.w	r5, r5, #7
	if( pcName != NULL )
 800d776:	2e00      	cmp	r6, #0
 800d778:	f000 80af 	beq.w	800d8da <xTaskCreate+0x196>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d77c:	7833      	ldrb	r3, [r6, #0]
 800d77e:	f880 3034 	strb.w	r3, [r0, #52]	@ 0x34
			if( pcName[ x ] == ( char ) 0x00 )
 800d782:	2b00      	cmp	r3, #0
 800d784:	d036      	beq.n	800d7f4 <xTaskCreate+0xb0>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d786:	7873      	ldrb	r3, [r6, #1]
 800d788:	f880 3035 	strb.w	r3, [r0, #53]	@ 0x35
			if( pcName[ x ] == ( char ) 0x00 )
 800d78c:	b393      	cbz	r3, 800d7f4 <xTaskCreate+0xb0>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d78e:	78b3      	ldrb	r3, [r6, #2]
 800d790:	f880 3036 	strb.w	r3, [r0, #54]	@ 0x36
			if( pcName[ x ] == ( char ) 0x00 )
 800d794:	b373      	cbz	r3, 800d7f4 <xTaskCreate+0xb0>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d796:	78f3      	ldrb	r3, [r6, #3]
 800d798:	f880 3037 	strb.w	r3, [r0, #55]	@ 0x37
			if( pcName[ x ] == ( char ) 0x00 )
 800d79c:	b353      	cbz	r3, 800d7f4 <xTaskCreate+0xb0>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d79e:	7933      	ldrb	r3, [r6, #4]
 800d7a0:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
			if( pcName[ x ] == ( char ) 0x00 )
 800d7a4:	b333      	cbz	r3, 800d7f4 <xTaskCreate+0xb0>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d7a6:	7973      	ldrb	r3, [r6, #5]
 800d7a8:	f880 3039 	strb.w	r3, [r0, #57]	@ 0x39
			if( pcName[ x ] == ( char ) 0x00 )
 800d7ac:	b313      	cbz	r3, 800d7f4 <xTaskCreate+0xb0>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d7ae:	79b3      	ldrb	r3, [r6, #6]
 800d7b0:	f880 303a 	strb.w	r3, [r0, #58]	@ 0x3a
			if( pcName[ x ] == ( char ) 0x00 )
 800d7b4:	b1f3      	cbz	r3, 800d7f4 <xTaskCreate+0xb0>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d7b6:	79f3      	ldrb	r3, [r6, #7]
 800d7b8:	f880 303b 	strb.w	r3, [r0, #59]	@ 0x3b
			if( pcName[ x ] == ( char ) 0x00 )
 800d7bc:	b1d3      	cbz	r3, 800d7f4 <xTaskCreate+0xb0>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d7be:	7a33      	ldrb	r3, [r6, #8]
 800d7c0:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
			if( pcName[ x ] == ( char ) 0x00 )
 800d7c4:	b1b3      	cbz	r3, 800d7f4 <xTaskCreate+0xb0>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d7c6:	7a73      	ldrb	r3, [r6, #9]
 800d7c8:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
			if( pcName[ x ] == ( char ) 0x00 )
 800d7cc:	b193      	cbz	r3, 800d7f4 <xTaskCreate+0xb0>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d7ce:	7ab3      	ldrb	r3, [r6, #10]
 800d7d0:	f880 303e 	strb.w	r3, [r0, #62]	@ 0x3e
			if( pcName[ x ] == ( char ) 0x00 )
 800d7d4:	b173      	cbz	r3, 800d7f4 <xTaskCreate+0xb0>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d7d6:	7af3      	ldrb	r3, [r6, #11]
 800d7d8:	f880 303f 	strb.w	r3, [r0, #63]	@ 0x3f
			if( pcName[ x ] == ( char ) 0x00 )
 800d7dc:	b153      	cbz	r3, 800d7f4 <xTaskCreate+0xb0>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d7de:	7b33      	ldrb	r3, [r6, #12]
 800d7e0:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
			if( pcName[ x ] == ( char ) 0x00 )
 800d7e4:	b133      	cbz	r3, 800d7f4 <xTaskCreate+0xb0>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d7e6:	7b73      	ldrb	r3, [r6, #13]
 800d7e8:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
			if( pcName[ x ] == ( char ) 0x00 )
 800d7ec:	b113      	cbz	r3, 800d7f4 <xTaskCreate+0xb0>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d7ee:	7bb3      	ldrb	r3, [r6, #14]
 800d7f0:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d7f4:	2300      	movs	r3, #0
 800d7f6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d7fa:	9e08      	ldr	r6, [sp, #32]
 800d7fc:	2e06      	cmp	r6, #6
 800d7fe:	bf28      	it	cs
 800d800:	2606      	movcs	r6, #6
		pxNewTCB->uxMutexesHeld = 0;
 800d802:	f04f 0a00 	mov.w	sl, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d806:	1d27      	adds	r7, r4, #4
	pxNewTCB->uxPriority = uxPriority;
 800d808:	62e6      	str	r6, [r4, #44]	@ 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800d80a:	6466      	str	r6, [r4, #68]	@ 0x44
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d80c:	4638      	mov	r0, r7
		pxNewTCB->uxMutexesHeld = 0;
 800d80e:	f8c4 a048 	str.w	sl, [r4, #72]	@ 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d812:	f7ff fd8f 	bl	800d334 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d816:	f1c6 0607 	rsb	r6, r6, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d81a:	f104 0018 	add.w	r0, r4, #24
 800d81e:	f7ff fd89 	bl	800d334 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 800d822:	f8c4 a04c 	str.w	sl, [r4, #76]	@ 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d826:	61a6      	str	r6, [r4, #24]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d828:	f884 a050 	strb.w	sl, [r4, #80]	@ 0x50
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d82c:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d82e:	6264      	str	r4, [r4, #36]	@ 0x24
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d830:	464a      	mov	r2, r9
 800d832:	4641      	mov	r1, r8
 800d834:	4628      	mov	r0, r5
 800d836:	f000 fbdf 	bl	800dff8 <pxPortInitialiseStack>
	if( pxCreatedTask != NULL )
 800d83a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d83c:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 800d83e:	b103      	cbz	r3, 800d842 <xTaskCreate+0xfe>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d840:	601c      	str	r4, [r3, #0]
	taskENTER_CRITICAL();
 800d842:	f000 fbff 	bl	800e044 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 800d846:	4a39      	ldr	r2, [pc, #228]	@ (800d92c <xTaskCreate+0x1e8>)
		if( pxCurrentTCB == NULL )
 800d848:	4d39      	ldr	r5, [pc, #228]	@ (800d930 <xTaskCreate+0x1ec>)
		uxCurrentNumberOfTasks++;
 800d84a:	6813      	ldr	r3, [r2, #0]
 800d84c:	3301      	adds	r3, #1
 800d84e:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d850:	682b      	ldr	r3, [r5, #0]
 800d852:	2b00      	cmp	r3, #0
 800d854:	d038      	beq.n	800d8c8 <xTaskCreate+0x184>
			if( xSchedulerRunning == pdFALSE )
 800d856:	4e37      	ldr	r6, [pc, #220]	@ (800d934 <xTaskCreate+0x1f0>)
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d858:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
			if( xSchedulerRunning == pdFALSE )
 800d85a:	6833      	ldr	r3, [r6, #0]
 800d85c:	b373      	cbz	r3, 800d8bc <xTaskCreate+0x178>
 800d85e:	f8df 80f8 	ldr.w	r8, [pc, #248]	@ 800d958 <xTaskCreate+0x214>
		prvAddTaskToReadyList( pxNewTCB );
 800d862:	4a35      	ldr	r2, [pc, #212]	@ (800d938 <xTaskCreate+0x1f4>)
 800d864:	4639      	mov	r1, r7
		uxTaskNumber++;
 800d866:	4f35      	ldr	r7, [pc, #212]	@ (800d93c <xTaskCreate+0x1f8>)
 800d868:	683b      	ldr	r3, [r7, #0]
 800d86a:	3301      	adds	r3, #1
 800d86c:	603b      	str	r3, [r7, #0]
		prvAddTaskToReadyList( pxNewTCB );
 800d86e:	6817      	ldr	r7, [r2, #0]
 800d870:	2301      	movs	r3, #1
 800d872:	4083      	lsls	r3, r0
 800d874:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800d878:	433b      	orrs	r3, r7
 800d87a:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 800d87e:	6013      	str	r3, [r2, #0]
 800d880:	f7ff fd5c 	bl	800d33c <vListInsertEnd>
	taskEXIT_CRITICAL();
 800d884:	f000 fc00 	bl	800e088 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 800d888:	6833      	ldr	r3, [r6, #0]
 800d88a:	b173      	cbz	r3, 800d8aa <xTaskCreate+0x166>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d88c:	682a      	ldr	r2, [r5, #0]
 800d88e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800d890:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800d892:	429a      	cmp	r2, r3
 800d894:	d209      	bcs.n	800d8aa <xTaskCreate+0x166>
			taskYIELD_IF_USING_PREEMPTION();
 800d896:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800d89a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d89e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800d8a2:	f3bf 8f4f 	dsb	sy
 800d8a6:	f3bf 8f6f 	isb	sy
			xReturn = pdPASS;
 800d8aa:	2001      	movs	r0, #1
		return xReturn;
 800d8ac:	e004      	b.n	800d8b8 <xTaskCreate+0x174>
					vPortFree( pxStack );
 800d8ae:	4638      	mov	r0, r7
 800d8b0:	f000 fde0 	bl	800e474 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d8b4:	f04f 30ff 	mov.w	r0, #4294967295
	}
 800d8b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d8bc:	682b      	ldr	r3, [r5, #0]
 800d8be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d8c0:	4283      	cmp	r3, r0
					pxCurrentTCB = pxNewTCB;
 800d8c2:	bf98      	it	ls
 800d8c4:	602c      	strls	r4, [r5, #0]
 800d8c6:	e7ca      	b.n	800d85e <xTaskCreate+0x11a>
			pxCurrentTCB = pxNewTCB;
 800d8c8:	602c      	str	r4, [r5, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d8ca:	6813      	ldr	r3, [r2, #0]
 800d8cc:	2b01      	cmp	r3, #1
 800d8ce:	d007      	beq.n	800d8e0 <xTaskCreate+0x19c>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d8d0:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 800d8d2:	f8df 8084 	ldr.w	r8, [pc, #132]	@ 800d958 <xTaskCreate+0x214>
 800d8d6:	4e17      	ldr	r6, [pc, #92]	@ (800d934 <xTaskCreate+0x1f0>)
 800d8d8:	e7c3      	b.n	800d862 <xTaskCreate+0x11e>
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d8da:	f880 6034 	strb.w	r6, [r0, #52]	@ 0x34
 800d8de:	e78c      	b.n	800d7fa <xTaskCreate+0xb6>
 800d8e0:	f8df 8074 	ldr.w	r8, [pc, #116]	@ 800d958 <xTaskCreate+0x214>
 800d8e4:	4646      	mov	r6, r8
 800d8e6:	f108 098c 	add.w	r9, r8, #140	@ 0x8c
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d8ea:	4630      	mov	r0, r6
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d8ec:	3614      	adds	r6, #20
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d8ee:	f7ff fd15 	bl	800d31c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d8f2:	454e      	cmp	r6, r9
 800d8f4:	d1f9      	bne.n	800d8ea <xTaskCreate+0x1a6>
	vListInitialise( &xDelayedTaskList1 );
 800d8f6:	f8df 9064 	ldr.w	r9, [pc, #100]	@ 800d95c <xTaskCreate+0x218>
	vListInitialise( &xDelayedTaskList2 );
 800d8fa:	4e11      	ldr	r6, [pc, #68]	@ (800d940 <xTaskCreate+0x1fc>)
	vListInitialise( &xDelayedTaskList1 );
 800d8fc:	4648      	mov	r0, r9
 800d8fe:	f7ff fd0d 	bl	800d31c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d902:	4630      	mov	r0, r6
 800d904:	f7ff fd0a 	bl	800d31c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d908:	480e      	ldr	r0, [pc, #56]	@ (800d944 <xTaskCreate+0x200>)
 800d90a:	f7ff fd07 	bl	800d31c <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 800d90e:	480e      	ldr	r0, [pc, #56]	@ (800d948 <xTaskCreate+0x204>)
 800d910:	f7ff fd04 	bl	800d31c <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 800d914:	480d      	ldr	r0, [pc, #52]	@ (800d94c <xTaskCreate+0x208>)
 800d916:	f7ff fd01 	bl	800d31c <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 800d91a:	4b0d      	ldr	r3, [pc, #52]	@ (800d950 <xTaskCreate+0x20c>)
		prvAddTaskToReadyList( pxNewTCB );
 800d91c:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
	pxDelayedTaskList = &xDelayedTaskList1;
 800d91e:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d922:	4b0c      	ldr	r3, [pc, #48]	@ (800d954 <xTaskCreate+0x210>)
 800d924:	601e      	str	r6, [r3, #0]
 800d926:	4e03      	ldr	r6, [pc, #12]	@ (800d934 <xTaskCreate+0x1f0>)
}
 800d928:	e79b      	b.n	800d862 <xTaskCreate+0x11e>
 800d92a:	bf00      	nop
 800d92c:	20001844 	.word	0x20001844
 800d930:	20001944 	.word	0x20001944
 800d934:	20001838 	.word	0x20001838
 800d938:	2000183c 	.word	0x2000183c
 800d93c:	20001828 	.word	0x20001828
 800d940:	20001890 	.word	0x20001890
 800d944:	20001874 	.word	0x20001874
 800d948:	20001860 	.word	0x20001860
 800d94c:	20001848 	.word	0x20001848
 800d950:	2000188c 	.word	0x2000188c
 800d954:	20001888 	.word	0x20001888
 800d958:	200018b8 	.word	0x200018b8
 800d95c:	200018a4 	.word	0x200018a4

0800d960 <vTaskDelay>:
	{
 800d960:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d962:	b950      	cbnz	r0, 800d97a <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
 800d964:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800d968:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d96c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800d970:	f3bf 8f4f 	dsb	sy
 800d974:	f3bf 8f6f 	isb	sy
	}
 800d978:	bd10      	pop	{r4, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 800d97a:	4c10      	ldr	r4, [pc, #64]	@ (800d9bc <vTaskDelay+0x5c>)
 800d97c:	6821      	ldr	r1, [r4, #0]
 800d97e:	b141      	cbz	r1, 800d992 <vTaskDelay+0x32>
 800d980:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d984:	f383 8811 	msr	BASEPRI, r3
 800d988:	f3bf 8f6f 	isb	sy
 800d98c:	f3bf 8f4f 	dsb	sy
 800d990:	e7fe      	b.n	800d990 <vTaskDelay+0x30>
	++uxSchedulerSuspended;
 800d992:	6823      	ldr	r3, [r4, #0]
 800d994:	3301      	adds	r3, #1
 800d996:	6023      	str	r3, [r4, #0]
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d998:	f7ff fd40 	bl	800d41c <prvAddCurrentTaskToDelayedList>
	configASSERT( uxSchedulerSuspended );
 800d99c:	6823      	ldr	r3, [r4, #0]
 800d99e:	b943      	cbnz	r3, 800d9b2 <vTaskDelay+0x52>
 800d9a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d9a4:	f383 8811 	msr	BASEPRI, r3
 800d9a8:	f3bf 8f6f 	isb	sy
 800d9ac:	f3bf 8f4f 	dsb	sy
 800d9b0:	e7fe      	b.n	800d9b0 <vTaskDelay+0x50>
 800d9b2:	f7ff fe1f 	bl	800d5f4 <xTaskResumeAll.part.0>
		if( xAlreadyYielded == pdFALSE )
 800d9b6:	2800      	cmp	r0, #0
 800d9b8:	d0d4      	beq.n	800d964 <vTaskDelay+0x4>
	}
 800d9ba:	bd10      	pop	{r4, pc}
 800d9bc:	2000181c 	.word	0x2000181c

0800d9c0 <vTaskPrioritySet>:
		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 800d9c0:	2906      	cmp	r1, #6
 800d9c2:	d908      	bls.n	800d9d6 <vTaskPrioritySet+0x16>
 800d9c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d9c8:	f383 8811 	msr	BASEPRI, r3
 800d9cc:	f3bf 8f6f 	isb	sy
 800d9d0:	f3bf 8f4f 	dsb	sy
 800d9d4:	e7fe      	b.n	800d9d4 <vTaskPrioritySet+0x14>
	{
 800d9d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d9da:	4604      	mov	r4, r0
 800d9dc:	460d      	mov	r5, r1
		taskENTER_CRITICAL();
 800d9de:	f000 fb31 	bl	800e044 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTask );
 800d9e2:	2c00      	cmp	r4, #0
 800d9e4:	d035      	beq.n	800da52 <vTaskPrioritySet+0x92>
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 800d9e6:	6c63      	ldr	r3, [r4, #68]	@ 0x44
			if( uxCurrentBasePriority != uxNewPriority )
 800d9e8:	429d      	cmp	r5, r3
 800d9ea:	d02e      	beq.n	800da4a <vTaskPrioritySet+0x8a>
					if( pxTCB != pxCurrentTCB )
 800d9ec:	4a29      	ldr	r2, [pc, #164]	@ (800da94 <vTaskPrioritySet+0xd4>)
				if( uxNewPriority > uxCurrentBasePriority )
 800d9ee:	d909      	bls.n	800da04 <vTaskPrioritySet+0x44>
					if( pxTCB != pxCurrentTCB )
 800d9f0:	6811      	ldr	r1, [r2, #0]
 800d9f2:	42a1      	cmp	r1, r4
 800d9f4:	d04b      	beq.n	800da8e <vTaskPrioritySet+0xce>
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 800d9f6:	6812      	ldr	r2, [r2, #0]
 800d9f8:	6ad7      	ldr	r7, [r2, #44]	@ 0x2c
 800d9fa:	42af      	cmp	r7, r5
 800d9fc:	bf8c      	ite	hi
 800d9fe:	2700      	movhi	r7, #0
 800da00:	2701      	movls	r7, #1
 800da02:	e004      	b.n	800da0e <vTaskPrioritySet+0x4e>
				else if( pxTCB == pxCurrentTCB )
 800da04:	6817      	ldr	r7, [r2, #0]
 800da06:	1b3f      	subs	r7, r7, r4
 800da08:	fab7 f787 	clz	r7, r7
 800da0c:	097f      	lsrs	r7, r7, #5
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800da0e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
					pxTCB->uxBasePriority = uxNewPriority;
 800da10:	6465      	str	r5, [r4, #68]	@ 0x44
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 800da12:	42b3      	cmp	r3, r6
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800da14:	69a3      	ldr	r3, [r4, #24]
						pxTCB->uxPriority = uxNewPriority;
 800da16:	bf08      	it	eq
 800da18:	62e5      	streq	r5, [r4, #44]	@ 0x2c
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800da1a:	2b00      	cmp	r3, #0
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800da1c:	bfa4      	itt	ge
 800da1e:	f1c5 0507 	rsbge	r5, r5, #7
 800da22:	61a5      	strge	r5, [r4, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800da24:	4d1c      	ldr	r5, [pc, #112]	@ (800da98 <vTaskPrioritySet+0xd8>)
 800da26:	6962      	ldr	r2, [r4, #20]
 800da28:	eb06 0386 	add.w	r3, r6, r6, lsl #2
 800da2c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800da30:	429a      	cmp	r2, r3
 800da32:	d011      	beq.n	800da58 <vTaskPrioritySet+0x98>
				if( xYieldRequired != pdFALSE )
 800da34:	b14f      	cbz	r7, 800da4a <vTaskPrioritySet+0x8a>
					taskYIELD_IF_USING_PREEMPTION();
 800da36:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800da3a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800da3e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800da42:	f3bf 8f4f 	dsb	sy
 800da46:	f3bf 8f6f 	isb	sy
	}
 800da4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		taskEXIT_CRITICAL();
 800da4e:	f000 bb1b 	b.w	800e088 <vPortExitCritical>
			pxTCB = prvGetTCBFromHandle( xTask );
 800da52:	4b10      	ldr	r3, [pc, #64]	@ (800da94 <vTaskPrioritySet+0xd4>)
 800da54:	681c      	ldr	r4, [r3, #0]
 800da56:	e7c6      	b.n	800d9e6 <vTaskPrioritySet+0x26>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800da58:	f104 0804 	add.w	r8, r4, #4
 800da5c:	4640      	mov	r0, r8
 800da5e:	f7ff fc93 	bl	800d388 <uxListRemove>
						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
 800da62:	4b0e      	ldr	r3, [pc, #56]	@ (800da9c <vTaskPrioritySet+0xdc>)
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800da64:	b928      	cbnz	r0, 800da72 <vTaskPrioritySet+0xb2>
						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
 800da66:	681a      	ldr	r2, [r3, #0]
 800da68:	2001      	movs	r0, #1
 800da6a:	40b0      	lsls	r0, r6
 800da6c:	ea22 0200 	bic.w	r2, r2, r0
 800da70:	601a      	str	r2, [r3, #0]
					prvAddTaskToReadyList( pxTCB );
 800da72:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 800da74:	681c      	ldr	r4, [r3, #0]
 800da76:	2201      	movs	r2, #1
 800da78:	4082      	lsls	r2, r0
 800da7a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800da7e:	4322      	orrs	r2, r4
 800da80:	4641      	mov	r1, r8
 800da82:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 800da86:	601a      	str	r2, [r3, #0]
 800da88:	f7ff fc58 	bl	800d33c <vListInsertEnd>
 800da8c:	e7d2      	b.n	800da34 <vTaskPrioritySet+0x74>
	BaseType_t xYieldRequired = pdFALSE;
 800da8e:	2700      	movs	r7, #0
 800da90:	e7bd      	b.n	800da0e <vTaskPrioritySet+0x4e>
 800da92:	bf00      	nop
 800da94:	20001944 	.word	0x20001944
 800da98:	200018b8 	.word	0x200018b8
 800da9c:	2000183c 	.word	0x2000183c

0800daa0 <vTaskResume>:
	{
 800daa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( xTaskToResume );
 800daa2:	b178      	cbz	r0, 800dac4 <vTaskResume+0x24>
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 800daa4:	4d20      	ldr	r5, [pc, #128]	@ (800db28 <vTaskResume+0x88>)
 800daa6:	682b      	ldr	r3, [r5, #0]
 800daa8:	4283      	cmp	r3, r0
 800daaa:	4604      	mov	r4, r0
 800daac:	d009      	beq.n	800dac2 <vTaskResume+0x22>
			taskENTER_CRITICAL();
 800daae:	f000 fac9 	bl	800e044 <vPortEnterCritical>
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800dab2:	4b1e      	ldr	r3, [pc, #120]	@ (800db2c <vTaskResume+0x8c>)
 800dab4:	6962      	ldr	r2, [r4, #20]
 800dab6:	429a      	cmp	r2, r3
 800dab8:	d00d      	beq.n	800dad6 <vTaskResume+0x36>
	}
 800daba:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			taskEXIT_CRITICAL();
 800dabe:	f000 bae3 	b.w	800e088 <vPortExitCritical>
	}
 800dac2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dac4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dac8:	f383 8811 	msr	BASEPRI, r3
 800dacc:	f3bf 8f6f 	isb	sy
 800dad0:	f3bf 8f4f 	dsb	sy
		configASSERT( xTaskToResume );
 800dad4:	e7fe      	b.n	800dad4 <vTaskResume+0x34>
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800dad6:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800dad8:	4a15      	ldr	r2, [pc, #84]	@ (800db30 <vTaskResume+0x90>)
 800dada:	4293      	cmp	r3, r2
 800dadc:	d0ed      	beq.n	800daba <vTaskResume+0x1a>
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800dade:	2b00      	cmp	r3, #0
 800dae0:	d1eb      	bne.n	800daba <vTaskResume+0x1a>
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 800dae2:	1d26      	adds	r6, r4, #4
 800dae4:	4630      	mov	r0, r6
 800dae6:	f7ff fc4f 	bl	800d388 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800daea:	4812      	ldr	r0, [pc, #72]	@ (800db34 <vTaskResume+0x94>)
 800daec:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800daee:	6807      	ldr	r7, [r0, #0]
 800daf0:	2201      	movs	r2, #1
 800daf2:	4631      	mov	r1, r6
 800daf4:	409a      	lsls	r2, r3
 800daf6:	4e10      	ldr	r6, [pc, #64]	@ (800db38 <vTaskResume+0x98>)
 800daf8:	433a      	orrs	r2, r7
 800dafa:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800dafe:	6002      	str	r2, [r0, #0]
 800db00:	eb06 0083 	add.w	r0, r6, r3, lsl #2
 800db04:	f7ff fc1a 	bl	800d33c <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800db08:	682b      	ldr	r3, [r5, #0]
 800db0a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800db0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db0e:	429a      	cmp	r2, r3
 800db10:	d3d3      	bcc.n	800daba <vTaskResume+0x1a>
						taskYIELD_IF_USING_PREEMPTION();
 800db12:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800db16:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800db1a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800db1e:	f3bf 8f4f 	dsb	sy
 800db22:	f3bf 8f6f 	isb	sy
 800db26:	e7c8      	b.n	800daba <vTaskResume+0x1a>
 800db28:	20001944 	.word	0x20001944
 800db2c:	20001848 	.word	0x20001848
 800db30:	20001874 	.word	0x20001874
 800db34:	2000183c 	.word	0x2000183c
 800db38:	200018b8 	.word	0x200018b8

0800db3c <xTaskResumeFromISR>:
	{
 800db3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( xTaskToResume );
 800db3e:	b1d0      	cbz	r0, 800db76 <xTaskResumeFromISR+0x3a>
 800db40:	4604      	mov	r4, r0
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800db42:	f000 fbb1 	bl	800e2a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800db46:	f3ef 8511 	mrs	r5, BASEPRI
 800db4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db4e:	f383 8811 	msr	BASEPRI, r3
 800db52:	f3bf 8f6f 	isb	sy
 800db56:	f3bf 8f4f 	dsb	sy
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800db5a:	4b1d      	ldr	r3, [pc, #116]	@ (800dbd0 <xTaskResumeFromISR+0x94>)
 800db5c:	6962      	ldr	r2, [r4, #20]
 800db5e:	429a      	cmp	r2, r3
 800db60:	d104      	bne.n	800db6c <xTaskResumeFromISR+0x30>
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800db62:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800db64:	481b      	ldr	r0, [pc, #108]	@ (800dbd4 <xTaskResumeFromISR+0x98>)
 800db66:	4283      	cmp	r3, r0
 800db68:	d000      	beq.n	800db6c <xTaskResumeFromISR+0x30>
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800db6a:	b16b      	cbz	r3, 800db88 <xTaskResumeFromISR+0x4c>
	BaseType_t xYieldRequired = pdFALSE;
 800db6c:	2600      	movs	r6, #0
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800db6e:	f385 8811 	msr	BASEPRI, r5
	}
 800db72:	4630      	mov	r0, r6
 800db74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	__asm volatile
 800db76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db7a:	f383 8811 	msr	BASEPRI, r3
 800db7e:	f3bf 8f6f 	isb	sy
 800db82:	f3bf 8f4f 	dsb	sy
		configASSERT( xTaskToResume );
 800db86:	e7fe      	b.n	800db86 <xTaskResumeFromISR+0x4a>
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800db88:	4b13      	ldr	r3, [pc, #76]	@ (800dbd8 <xTaskResumeFromISR+0x9c>)
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	b9db      	cbnz	r3, 800dbc6 <xTaskResumeFromISR+0x8a>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800db8e:	4b13      	ldr	r3, [pc, #76]	@ (800dbdc <xTaskResumeFromISR+0xa0>)
 800db90:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800db92:	681b      	ldr	r3, [r3, #0]
 800db94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800db96:	1d27      	adds	r7, r4, #4
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800db98:	429e      	cmp	r6, r3
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800db9a:	4638      	mov	r0, r7
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800db9c:	bf34      	ite	cc
 800db9e:	2600      	movcc	r6, #0
 800dba0:	2601      	movcs	r6, #1
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dba2:	f7ff fbf1 	bl	800d388 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800dba6:	480e      	ldr	r0, [pc, #56]	@ (800dbe0 <xTaskResumeFromISR+0xa4>)
 800dba8:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800dbaa:	4c0e      	ldr	r4, [pc, #56]	@ (800dbe4 <xTaskResumeFromISR+0xa8>)
 800dbac:	4639      	mov	r1, r7
 800dbae:	2201      	movs	r2, #1
 800dbb0:	6807      	ldr	r7, [r0, #0]
 800dbb2:	409a      	lsls	r2, r3
 800dbb4:	433a      	orrs	r2, r7
 800dbb6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800dbba:	6002      	str	r2, [r0, #0]
 800dbbc:	eb04 0083 	add.w	r0, r4, r3, lsl #2
 800dbc0:	f7ff fbbc 	bl	800d33c <vListInsertEnd>
 800dbc4:	e7d3      	b.n	800db6e <xTaskResumeFromISR+0x32>
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800dbc6:	f104 0118 	add.w	r1, r4, #24
 800dbca:	f7ff fbb7 	bl	800d33c <vListInsertEnd>
 800dbce:	e7cd      	b.n	800db6c <xTaskResumeFromISR+0x30>
 800dbd0:	20001848 	.word	0x20001848
 800dbd4:	20001874 	.word	0x20001874
 800dbd8:	2000181c 	.word	0x2000181c
 800dbdc:	20001944 	.word	0x20001944
 800dbe0:	2000183c 	.word	0x2000183c
 800dbe4:	200018b8 	.word	0x200018b8

0800dbe8 <vTaskStartScheduler>:
{
 800dbe8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800dbec:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800dbf0:	f000 fb88 	bl	800e304 <pvPortMalloc>
			if( pxStack != NULL )
 800dbf4:	2800      	cmp	r0, #0
 800dbf6:	d079      	beq.n	800dcec <vTaskStartScheduler+0x104>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800dbf8:	4605      	mov	r5, r0
 800dbfa:	2054      	movs	r0, #84	@ 0x54
 800dbfc:	f000 fb82 	bl	800e304 <pvPortMalloc>
				if( pxNewTCB != NULL )
 800dc00:	4604      	mov	r4, r0
 800dc02:	2800      	cmp	r0, #0
 800dc04:	d06f      	beq.n	800dce6 <vTaskStartScheduler+0xfe>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800dc06:	2600      	movs	r6, #0
 800dc08:	4b57      	ldr	r3, [pc, #348]	@ (800dd68 <vTaskStartScheduler+0x180>)
 800dc0a:	6343      	str	r3, [r0, #52]	@ 0x34
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800dc0c:	1d07      	adds	r7, r0, #4
		pxNewTCB->uxMutexesHeld = 0;
 800dc0e:	e9c0 6611 	strd	r6, r6, [r0, #68]	@ 0x44
					pxNewTCB->pxStack = pxStack;
 800dc12:	6305      	str	r5, [r0, #48]	@ 0x30
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800dc14:	f880 6038 	strb.w	r6, [r0, #56]	@ 0x38
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800dc18:	f880 6043 	strb.w	r6, [r0, #67]	@ 0x43
	pxNewTCB->uxPriority = uxPriority;
 800dc1c:	62c6      	str	r6, [r0, #44]	@ 0x2c
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800dc1e:	4638      	mov	r0, r7
 800dc20:	f7ff fb88 	bl	800d334 <vListInitialiseItem>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800dc24:	f505 75fe 	add.w	r5, r5, #508	@ 0x1fc
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800dc28:	f104 0018 	add.w	r0, r4, #24
 800dc2c:	f7ff fb82 	bl	800d334 <vListInitialiseItem>
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800dc30:	f025 0507 	bic.w	r5, r5, #7
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dc34:	2307      	movs	r3, #7
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800dc36:	4632      	mov	r2, r6
		pxNewTCB->ulNotifiedValue = 0;
 800dc38:	64e6      	str	r6, [r4, #76]	@ 0x4c
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800dc3a:	494c      	ldr	r1, [pc, #304]	@ (800dd6c <vTaskStartScheduler+0x184>)
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dc3c:	61a3      	str	r3, [r4, #24]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800dc3e:	f884 6050 	strb.w	r6, [r4, #80]	@ 0x50
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800dc42:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800dc44:	6264      	str	r4, [r4, #36]	@ 0x24
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800dc46:	4628      	mov	r0, r5
 800dc48:	f000 f9d6 	bl	800dff8 <pxPortInitialiseStack>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800dc4c:	4b48      	ldr	r3, [pc, #288]	@ (800dd70 <vTaskStartScheduler+0x188>)
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800dc4e:	6020      	str	r0, [r4, #0]
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800dc50:	601c      	str	r4, [r3, #0]
	taskENTER_CRITICAL();
 800dc52:	f000 f9f7 	bl	800e044 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 800dc56:	4a47      	ldr	r2, [pc, #284]	@ (800dd74 <vTaskStartScheduler+0x18c>)
		if( pxCurrentTCB == NULL )
 800dc58:	4e47      	ldr	r6, [pc, #284]	@ (800dd78 <vTaskStartScheduler+0x190>)
		uxCurrentNumberOfTasks++;
 800dc5a:	6813      	ldr	r3, [r2, #0]
 800dc5c:	3301      	adds	r3, #1
 800dc5e:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800dc60:	6833      	ldr	r3, [r6, #0]
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	d051      	beq.n	800dd0a <vTaskStartScheduler+0x122>
			if( xSchedulerRunning == pdFALSE )
 800dc66:	4d45      	ldr	r5, [pc, #276]	@ (800dd7c <vTaskStartScheduler+0x194>)
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800dc68:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
			if( xSchedulerRunning == pdFALSE )
 800dc6a:	682b      	ldr	r3, [r5, #0]
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	d046      	beq.n	800dcfe <vTaskStartScheduler+0x116>
 800dc70:	f8df 8134 	ldr.w	r8, [pc, #308]	@ 800dda8 <vTaskStartScheduler+0x1c0>
		prvAddTaskToReadyList( pxNewTCB );
 800dc74:	4a42      	ldr	r2, [pc, #264]	@ (800dd80 <vTaskStartScheduler+0x198>)
 800dc76:	4639      	mov	r1, r7
		uxTaskNumber++;
 800dc78:	4f42      	ldr	r7, [pc, #264]	@ (800dd84 <vTaskStartScheduler+0x19c>)
 800dc7a:	683b      	ldr	r3, [r7, #0]
 800dc7c:	3301      	adds	r3, #1
 800dc7e:	603b      	str	r3, [r7, #0]
		prvAddTaskToReadyList( pxNewTCB );
 800dc80:	6817      	ldr	r7, [r2, #0]
 800dc82:	2301      	movs	r3, #1
 800dc84:	4083      	lsls	r3, r0
 800dc86:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800dc8a:	433b      	orrs	r3, r7
 800dc8c:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 800dc90:	6013      	str	r3, [r2, #0]
 800dc92:	f7ff fb53 	bl	800d33c <vListInsertEnd>
	taskEXIT_CRITICAL();
 800dc96:	f000 f9f7 	bl	800e088 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 800dc9a:	682b      	ldr	r3, [r5, #0]
 800dc9c:	b173      	cbz	r3, 800dcbc <vTaskStartScheduler+0xd4>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800dc9e:	6832      	ldr	r2, [r6, #0]
 800dca0:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800dca2:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800dca4:	429a      	cmp	r2, r3
 800dca6:	d209      	bcs.n	800dcbc <vTaskStartScheduler+0xd4>
			taskYIELD_IF_USING_PREEMPTION();
 800dca8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800dcac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dcb0:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800dcb4:	f3bf 8f4f 	dsb	sy
 800dcb8:	f3bf 8f6f 	isb	sy
 800dcbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dcc0:	f383 8811 	msr	BASEPRI, r3
 800dcc4:	f3bf 8f6f 	isb	sy
 800dcc8:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 800dccc:	4a2e      	ldr	r2, [pc, #184]	@ (800dd88 <vTaskStartScheduler+0x1a0>)
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800dcce:	4b2f      	ldr	r3, [pc, #188]	@ (800dd8c <vTaskStartScheduler+0x1a4>)
		xNextTaskUnblockTime = portMAX_DELAY;
 800dcd0:	f04f 30ff 	mov.w	r0, #4294967295
 800dcd4:	6010      	str	r0, [r2, #0]
		xSchedulerRunning = pdTRUE;
 800dcd6:	2101      	movs	r1, #1
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800dcd8:	2200      	movs	r2, #0
		xSchedulerRunning = pdTRUE;
 800dcda:	6029      	str	r1, [r5, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800dcdc:	601a      	str	r2, [r3, #0]
}
 800dcde:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		if( xPortStartScheduler() != pdFALSE )
 800dce2:	f000 ba41 	b.w	800e168 <xPortStartScheduler>
					vPortFree( pxStack );
 800dce6:	4628      	mov	r0, r5
 800dce8:	f000 fbc4 	bl	800e474 <vPortFree>
 800dcec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dcf0:	f383 8811 	msr	BASEPRI, r3
 800dcf4:	f3bf 8f6f 	isb	sy
 800dcf8:	f3bf 8f4f 	dsb	sy
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800dcfc:	e7fe      	b.n	800dcfc <vTaskStartScheduler+0x114>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800dcfe:	6833      	ldr	r3, [r6, #0]
 800dd00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd02:	4283      	cmp	r3, r0
					pxCurrentTCB = pxNewTCB;
 800dd04:	bf98      	it	ls
 800dd06:	6034      	strls	r4, [r6, #0]
 800dd08:	e7b2      	b.n	800dc70 <vTaskStartScheduler+0x88>
			pxCurrentTCB = pxNewTCB;
 800dd0a:	6034      	str	r4, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800dd0c:	6813      	ldr	r3, [r2, #0]
 800dd0e:	2b01      	cmp	r3, #1
 800dd10:	d004      	beq.n	800dd1c <vTaskStartScheduler+0x134>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800dd12:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 800dd14:	f8df 8090 	ldr.w	r8, [pc, #144]	@ 800dda8 <vTaskStartScheduler+0x1c0>
 800dd18:	4d18      	ldr	r5, [pc, #96]	@ (800dd7c <vTaskStartScheduler+0x194>)
 800dd1a:	e7ab      	b.n	800dc74 <vTaskStartScheduler+0x8c>
 800dd1c:	f8df 8088 	ldr.w	r8, [pc, #136]	@ 800dda8 <vTaskStartScheduler+0x1c0>
 800dd20:	4645      	mov	r5, r8
 800dd22:	f108 098c 	add.w	r9, r8, #140	@ 0x8c
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800dd26:	4628      	mov	r0, r5
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800dd28:	3514      	adds	r5, #20
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800dd2a:	f7ff faf7 	bl	800d31c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800dd2e:	454d      	cmp	r5, r9
 800dd30:	d1f9      	bne.n	800dd26 <vTaskStartScheduler+0x13e>
	vListInitialise( &xDelayedTaskList1 );
 800dd32:	f8df 9078 	ldr.w	r9, [pc, #120]	@ 800ddac <vTaskStartScheduler+0x1c4>
	vListInitialise( &xDelayedTaskList2 );
 800dd36:	4d16      	ldr	r5, [pc, #88]	@ (800dd90 <vTaskStartScheduler+0x1a8>)
	vListInitialise( &xDelayedTaskList1 );
 800dd38:	4648      	mov	r0, r9
 800dd3a:	f7ff faef 	bl	800d31c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800dd3e:	4628      	mov	r0, r5
 800dd40:	f7ff faec 	bl	800d31c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800dd44:	4813      	ldr	r0, [pc, #76]	@ (800dd94 <vTaskStartScheduler+0x1ac>)
 800dd46:	f7ff fae9 	bl	800d31c <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 800dd4a:	4813      	ldr	r0, [pc, #76]	@ (800dd98 <vTaskStartScheduler+0x1b0>)
 800dd4c:	f7ff fae6 	bl	800d31c <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 800dd50:	4812      	ldr	r0, [pc, #72]	@ (800dd9c <vTaskStartScheduler+0x1b4>)
 800dd52:	f7ff fae3 	bl	800d31c <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 800dd56:	4b12      	ldr	r3, [pc, #72]	@ (800dda0 <vTaskStartScheduler+0x1b8>)
		prvAddTaskToReadyList( pxNewTCB );
 800dd58:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
	pxDelayedTaskList = &xDelayedTaskList1;
 800dd5a:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800dd5e:	4b11      	ldr	r3, [pc, #68]	@ (800dda4 <vTaskStartScheduler+0x1bc>)
 800dd60:	601d      	str	r5, [r3, #0]
 800dd62:	4d06      	ldr	r5, [pc, #24]	@ (800dd7c <vTaskStartScheduler+0x194>)
}
 800dd64:	e786      	b.n	800dc74 <vTaskStartScheduler+0x8c>
 800dd66:	bf00      	nop
 800dd68:	454c4449 	.word	0x454c4449
 800dd6c:	0800d3b1 	.word	0x0800d3b1
 800dd70:	20001820 	.word	0x20001820
 800dd74:	20001844 	.word	0x20001844
 800dd78:	20001944 	.word	0x20001944
 800dd7c:	20001838 	.word	0x20001838
 800dd80:	2000183c 	.word	0x2000183c
 800dd84:	20001828 	.word	0x20001828
 800dd88:	20001824 	.word	0x20001824
 800dd8c:	20001840 	.word	0x20001840
 800dd90:	20001890 	.word	0x20001890
 800dd94:	20001874 	.word	0x20001874
 800dd98:	20001860 	.word	0x20001860
 800dd9c:	20001848 	.word	0x20001848
 800dda0:	2000188c 	.word	0x2000188c
 800dda4:	20001888 	.word	0x20001888
 800dda8:	200018b8 	.word	0x200018b8
 800ddac:	200018a4 	.word	0x200018a4

0800ddb0 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800ddb0:	4a02      	ldr	r2, [pc, #8]	@ (800ddbc <vTaskSuspendAll+0xc>)
 800ddb2:	6813      	ldr	r3, [r2, #0]
 800ddb4:	3301      	adds	r3, #1
 800ddb6:	6013      	str	r3, [r2, #0]
}
 800ddb8:	4770      	bx	lr
 800ddba:	bf00      	nop
 800ddbc:	2000181c 	.word	0x2000181c

0800ddc0 <xTaskResumeAll>:
	configASSERT( uxSchedulerSuspended );
 800ddc0:	4b06      	ldr	r3, [pc, #24]	@ (800dddc <xTaskResumeAll+0x1c>)
 800ddc2:	681b      	ldr	r3, [r3, #0]
 800ddc4:	b943      	cbnz	r3, 800ddd8 <xTaskResumeAll+0x18>
 800ddc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ddca:	f383 8811 	msr	BASEPRI, r3
 800ddce:	f3bf 8f6f 	isb	sy
 800ddd2:	f3bf 8f4f 	dsb	sy
 800ddd6:	e7fe      	b.n	800ddd6 <xTaskResumeAll+0x16>
 800ddd8:	f7ff bc0c 	b.w	800d5f4 <xTaskResumeAll.part.0>
 800dddc:	2000181c 	.word	0x2000181c

0800dde0 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dde0:	4b05      	ldr	r3, [pc, #20]	@ (800ddf8 <xTaskIncrementTick+0x18>)
 800dde2:	681b      	ldr	r3, [r3, #0]
 800dde4:	b90b      	cbnz	r3, 800ddea <xTaskIncrementTick+0xa>
 800dde6:	f7ff bb5f 	b.w	800d4a8 <xTaskIncrementTick.part.0>
		++xPendedTicks;
 800ddea:	4a04      	ldr	r2, [pc, #16]	@ (800ddfc <xTaskIncrementTick+0x1c>)
 800ddec:	6813      	ldr	r3, [r2, #0]
 800ddee:	3301      	adds	r3, #1
}
 800ddf0:	2000      	movs	r0, #0
		++xPendedTicks;
 800ddf2:	6013      	str	r3, [r2, #0]
}
 800ddf4:	4770      	bx	lr
 800ddf6:	bf00      	nop
 800ddf8:	2000181c 	.word	0x2000181c
 800ddfc:	20001834 	.word	0x20001834

0800de00 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800de00:	4b16      	ldr	r3, [pc, #88]	@ (800de5c <vTaskSwitchContext+0x5c>)
 800de02:	681b      	ldr	r3, [r3, #0]
 800de04:	b11b      	cbz	r3, 800de0e <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 800de06:	4b16      	ldr	r3, [pc, #88]	@ (800de60 <vTaskSwitchContext+0x60>)
 800de08:	2201      	movs	r2, #1
 800de0a:	601a      	str	r2, [r3, #0]
 800de0c:	4770      	bx	lr
		xYieldPending = pdFALSE;
 800de0e:	4914      	ldr	r1, [pc, #80]	@ (800de60 <vTaskSwitchContext+0x60>)
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800de10:	4a14      	ldr	r2, [pc, #80]	@ (800de64 <vTaskSwitchContext+0x64>)
		xYieldPending = pdFALSE;
 800de12:	600b      	str	r3, [r1, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800de14:	6813      	ldr	r3, [r2, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800de16:	fab3 f383 	clz	r3, r3
 800de1a:	b2db      	uxtb	r3, r3
 800de1c:	f1c3 031f 	rsb	r3, r3, #31
 800de20:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800de24:	4910      	ldr	r1, [pc, #64]	@ (800de68 <vTaskSwitchContext+0x68>)
 800de26:	009a      	lsls	r2, r3, #2
 800de28:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800de2c:	5888      	ldr	r0, [r1, r2]
 800de2e:	b940      	cbnz	r0, 800de42 <vTaskSwitchContext+0x42>
	__asm volatile
 800de30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de34:	f383 8811 	msr	BASEPRI, r3
 800de38:	f3bf 8f6f 	isb	sy
 800de3c:	f3bf 8f4f 	dsb	sy
 800de40:	e7fe      	b.n	800de40 <vTaskSwitchContext+0x40>
 800de42:	6858      	ldr	r0, [r3, #4]
 800de44:	3208      	adds	r2, #8
 800de46:	6840      	ldr	r0, [r0, #4]
 800de48:	6058      	str	r0, [r3, #4]
 800de4a:	440a      	add	r2, r1
 800de4c:	4290      	cmp	r0, r2
 800de4e:	bf04      	itt	eq
 800de50:	6840      	ldreq	r0, [r0, #4]
 800de52:	6058      	streq	r0, [r3, #4]
 800de54:	4b05      	ldr	r3, [pc, #20]	@ (800de6c <vTaskSwitchContext+0x6c>)
 800de56:	68c2      	ldr	r2, [r0, #12]
 800de58:	601a      	str	r2, [r3, #0]
}
 800de5a:	4770      	bx	lr
 800de5c:	2000181c 	.word	0x2000181c
 800de60:	20001830 	.word	0x20001830
 800de64:	2000183c 	.word	0x2000183c
 800de68:	200018b8 	.word	0x200018b8
 800de6c:	20001944 	.word	0x20001944

0800de70 <vTaskSuspend>:
	{
 800de70:	b570      	push	{r4, r5, r6, lr}
 800de72:	4604      	mov	r4, r0
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800de74:	4e38      	ldr	r6, [pc, #224]	@ (800df58 <vTaskSuspend+0xe8>)
		taskENTER_CRITICAL();
 800de76:	f000 f8e5 	bl	800e044 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800de7a:	2c00      	cmp	r4, #0
 800de7c:	d04d      	beq.n	800df1a <vTaskSuspend+0xaa>
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800de7e:	1d25      	adds	r5, r4, #4
 800de80:	4628      	mov	r0, r5
 800de82:	f7ff fa81 	bl	800d388 <uxListRemove>
 800de86:	b930      	cbnz	r0, 800de96 <vTaskSuspend+0x26>
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800de88:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800de8a:	4934      	ldr	r1, [pc, #208]	@ (800df5c <vTaskSuspend+0xec>)
 800de8c:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 800de90:	009b      	lsls	r3, r3, #2
 800de92:	58cb      	ldr	r3, [r1, r3]
 800de94:	b34b      	cbz	r3, 800deea <vTaskSuspend+0x7a>
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800de96:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800de98:	b11b      	cbz	r3, 800dea2 <vTaskSuspend+0x32>
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800de9a:	f104 0018 	add.w	r0, r4, #24
 800de9e:	f7ff fa73 	bl	800d388 <uxListRemove>
			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800dea2:	4629      	mov	r1, r5
 800dea4:	482e      	ldr	r0, [pc, #184]	@ (800df60 <vTaskSuspend+0xf0>)
		if( xSchedulerRunning != pdFALSE )
 800dea6:	4d2f      	ldr	r5, [pc, #188]	@ (800df64 <vTaskSuspend+0xf4>)
			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800dea8:	f7ff fa48 	bl	800d33c <vListInsertEnd>
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800deac:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 800deb0:	2b01      	cmp	r3, #1
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800deb2:	bf04      	itt	eq
 800deb4:	2300      	moveq	r3, #0
 800deb6:	f884 3050 	strbeq.w	r3, [r4, #80]	@ 0x50
		taskEXIT_CRITICAL();
 800deba:	f000 f8e5 	bl	800e088 <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
 800debe:	682b      	ldr	r3, [r5, #0]
 800dec0:	b9e3      	cbnz	r3, 800defc <vTaskSuspend+0x8c>
		if( pxTCB == pxCurrentTCB )
 800dec2:	6833      	ldr	r3, [r6, #0]
 800dec4:	42a3      	cmp	r3, r4
 800dec6:	d000      	beq.n	800deca <vTaskSuspend+0x5a>
	}
 800dec8:	bd70      	pop	{r4, r5, r6, pc}
			if( xSchedulerRunning != pdFALSE )
 800deca:	682b      	ldr	r3, [r5, #0]
 800decc:	2b00      	cmp	r3, #0
 800dece:	d02b      	beq.n	800df28 <vTaskSuspend+0xb8>
				configASSERT( uxSchedulerSuspended == 0 );
 800ded0:	4b25      	ldr	r3, [pc, #148]	@ (800df68 <vTaskSuspend+0xf8>)
 800ded2:	681b      	ldr	r3, [r3, #0]
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	d02f      	beq.n	800df38 <vTaskSuspend+0xc8>
 800ded8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dedc:	f383 8811 	msr	BASEPRI, r3
 800dee0:	f3bf 8f6f 	isb	sy
 800dee4:	f3bf 8f4f 	dsb	sy
 800dee8:	e7fe      	b.n	800dee8 <vTaskSuspend+0x78>
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800deea:	4920      	ldr	r1, [pc, #128]	@ (800df6c <vTaskSuspend+0xfc>)
 800deec:	2301      	movs	r3, #1
 800deee:	fa03 f202 	lsl.w	r2, r3, r2
 800def2:	680b      	ldr	r3, [r1, #0]
 800def4:	ea23 0302 	bic.w	r3, r3, r2
 800def8:	600b      	str	r3, [r1, #0]
 800defa:	e7cc      	b.n	800de96 <vTaskSuspend+0x26>
			taskENTER_CRITICAL();
 800defc:	f000 f8a2 	bl	800e044 <vPortEnterCritical>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800df00:	4b1b      	ldr	r3, [pc, #108]	@ (800df70 <vTaskSuspend+0x100>)
 800df02:	681a      	ldr	r2, [r3, #0]
 800df04:	6812      	ldr	r2, [r2, #0]
 800df06:	b152      	cbz	r2, 800df1e <vTaskSuspend+0xae>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800df08:	681a      	ldr	r2, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800df0a:	4b1a      	ldr	r3, [pc, #104]	@ (800df74 <vTaskSuspend+0x104>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800df0c:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800df0e:	68d2      	ldr	r2, [r2, #12]
 800df10:	6852      	ldr	r2, [r2, #4]
 800df12:	601a      	str	r2, [r3, #0]
			taskEXIT_CRITICAL();
 800df14:	f000 f8b8 	bl	800e088 <vPortExitCritical>
 800df18:	e7d3      	b.n	800dec2 <vTaskSuspend+0x52>
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800df1a:	6834      	ldr	r4, [r6, #0]
 800df1c:	e7af      	b.n	800de7e <vTaskSuspend+0xe>
		xNextTaskUnblockTime = portMAX_DELAY;
 800df1e:	4b15      	ldr	r3, [pc, #84]	@ (800df74 <vTaskSuspend+0x104>)
 800df20:	f04f 32ff 	mov.w	r2, #4294967295
 800df24:	601a      	str	r2, [r3, #0]
 800df26:	e7f5      	b.n	800df14 <vTaskSuspend+0xa4>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800df28:	490d      	ldr	r1, [pc, #52]	@ (800df60 <vTaskSuspend+0xf0>)
 800df2a:	4a13      	ldr	r2, [pc, #76]	@ (800df78 <vTaskSuspend+0x108>)
 800df2c:	6809      	ldr	r1, [r1, #0]
 800df2e:	6812      	ldr	r2, [r2, #0]
 800df30:	4291      	cmp	r1, r2
 800df32:	d10c      	bne.n	800df4e <vTaskSuspend+0xde>
					pxCurrentTCB = NULL;
 800df34:	6033      	str	r3, [r6, #0]
	}
 800df36:	bd70      	pop	{r4, r5, r6, pc}
				portYIELD_WITHIN_API();
 800df38:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800df3c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800df40:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800df44:	f3bf 8f4f 	dsb	sy
 800df48:	f3bf 8f6f 	isb	sy
	}
 800df4c:	bd70      	pop	{r4, r5, r6, pc}
 800df4e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
					vTaskSwitchContext();
 800df52:	f7ff bf55 	b.w	800de00 <vTaskSwitchContext>
 800df56:	bf00      	nop
 800df58:	20001944 	.word	0x20001944
 800df5c:	200018b8 	.word	0x200018b8
 800df60:	20001848 	.word	0x20001848
 800df64:	20001838 	.word	0x20001838
 800df68:	2000181c 	.word	0x2000181c
 800df6c:	2000183c 	.word	0x2000183c
 800df70:	2000188c 	.word	0x2000188c
 800df74:	20001824 	.word	0x20001824
 800df78:	20001844 	.word	0x20001844

0800df7c <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800df7c:	4808      	ldr	r0, [pc, #32]	@ (800dfa0 <prvPortStartFirstTask+0x24>)
 800df7e:	6800      	ldr	r0, [r0, #0]
 800df80:	6800      	ldr	r0, [r0, #0]
 800df82:	f380 8808 	msr	MSP, r0
 800df86:	f04f 0000 	mov.w	r0, #0
 800df8a:	f380 8814 	msr	CONTROL, r0
 800df8e:	b662      	cpsie	i
 800df90:	b661      	cpsie	f
 800df92:	f3bf 8f4f 	dsb	sy
 800df96:	f3bf 8f6f 	isb	sy
 800df9a:	df00      	svc	0
 800df9c:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800df9e:	0000      	.short	0x0000
 800dfa0:	e000ed08 	.word	0xe000ed08

0800dfa4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800dfa4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800dfb4 <vPortEnableVFP+0x10>
 800dfa8:	6801      	ldr	r1, [r0, #0]
 800dfaa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800dfae:	6001      	str	r1, [r0, #0]
 800dfb0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800dfb2:	0000      	.short	0x0000
 800dfb4:	e000ed88 	.word	0xe000ed88

0800dfb8 <prvTaskExitError>:
	configASSERT( uxCriticalNesting == ~0UL );
 800dfb8:	4b0e      	ldr	r3, [pc, #56]	@ (800dff4 <prvTaskExitError+0x3c>)
 800dfba:	681b      	ldr	r3, [r3, #0]
{
 800dfbc:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 800dfbe:	2200      	movs	r2, #0
	configASSERT( uxCriticalNesting == ~0UL );
 800dfc0:	3301      	adds	r3, #1
volatile uint32_t ulDummy = 0;
 800dfc2:	9201      	str	r2, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 800dfc4:	d008      	beq.n	800dfd8 <prvTaskExitError+0x20>
 800dfc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dfca:	f383 8811 	msr	BASEPRI, r3
 800dfce:	f3bf 8f6f 	isb	sy
 800dfd2:	f3bf 8f4f 	dsb	sy
 800dfd6:	e7fe      	b.n	800dfd6 <prvTaskExitError+0x1e>
 800dfd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dfdc:	f383 8811 	msr	BASEPRI, r3
 800dfe0:	f3bf 8f6f 	isb	sy
 800dfe4:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 800dfe8:	9b01      	ldr	r3, [sp, #4]
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	d0fc      	beq.n	800dfe8 <prvTaskExitError+0x30>
}
 800dfee:	b002      	add	sp, #8
 800dff0:	4770      	bx	lr
 800dff2:	bf00      	nop
 800dff4:	200000c8 	.word	0x200000c8

0800dff8 <pxPortInitialiseStack>:
{
 800dff8:	b410      	push	{r4}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800dffa:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800dffe:	4c07      	ldr	r4, [pc, #28]	@ (800e01c <pxPortInitialiseStack+0x24>)
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e000:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e004:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e008:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e00c:	e940 4103 	strd	r4, r1, [r0, #-12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e010:	e940 3209 	strd	r3, r2, [r0, #-36]	@ 0x24
}
 800e014:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e018:	3844      	subs	r0, #68	@ 0x44
 800e01a:	4770      	bx	lr
 800e01c:	0800dfb9 	.word	0x0800dfb9

0800e020 <SVC_Handler>:
	__asm volatile (
 800e020:	4b07      	ldr	r3, [pc, #28]	@ (800e040 <pxCurrentTCBConst2>)
 800e022:	6819      	ldr	r1, [r3, #0]
 800e024:	6808      	ldr	r0, [r1, #0]
 800e026:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e02a:	f380 8809 	msr	PSP, r0
 800e02e:	f3bf 8f6f 	isb	sy
 800e032:	f04f 0000 	mov.w	r0, #0
 800e036:	f380 8811 	msr	BASEPRI, r0
 800e03a:	4770      	bx	lr
 800e03c:	f3af 8000 	nop.w

0800e040 <pxCurrentTCBConst2>:
 800e040:	20001944 	.word	0x20001944

0800e044 <vPortEnterCritical>:
 800e044:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e048:	f383 8811 	msr	BASEPRI, r3
 800e04c:	f3bf 8f6f 	isb	sy
 800e050:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 800e054:	4a0b      	ldr	r2, [pc, #44]	@ (800e084 <vPortEnterCritical+0x40>)
 800e056:	6813      	ldr	r3, [r2, #0]
 800e058:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800e05a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800e05c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800e05e:	d000      	beq.n	800e062 <vPortEnterCritical+0x1e>
}
 800e060:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e062:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800e066:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 800e06a:	b2db      	uxtb	r3, r3
 800e06c:	2b00      	cmp	r3, #0
 800e06e:	d0f7      	beq.n	800e060 <vPortEnterCritical+0x1c>
 800e070:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e074:	f383 8811 	msr	BASEPRI, r3
 800e078:	f3bf 8f6f 	isb	sy
 800e07c:	f3bf 8f4f 	dsb	sy
 800e080:	e7fe      	b.n	800e080 <vPortEnterCritical+0x3c>
 800e082:	bf00      	nop
 800e084:	200000c8 	.word	0x200000c8

0800e088 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 800e088:	4a08      	ldr	r2, [pc, #32]	@ (800e0ac <vPortExitCritical+0x24>)
 800e08a:	6813      	ldr	r3, [r2, #0]
 800e08c:	b943      	cbnz	r3, 800e0a0 <vPortExitCritical+0x18>
 800e08e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e092:	f383 8811 	msr	BASEPRI, r3
 800e096:	f3bf 8f6f 	isb	sy
 800e09a:	f3bf 8f4f 	dsb	sy
 800e09e:	e7fe      	b.n	800e09e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 800e0a0:	3b01      	subs	r3, #1
 800e0a2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e0a4:	b90b      	cbnz	r3, 800e0aa <vPortExitCritical+0x22>
	__asm volatile
 800e0a6:	f383 8811 	msr	BASEPRI, r3
}
 800e0aa:	4770      	bx	lr
 800e0ac:	200000c8 	.word	0x200000c8

0800e0b0 <PendSV_Handler>:
	__asm volatile
 800e0b0:	f3ef 8009 	mrs	r0, PSP
 800e0b4:	f3bf 8f6f 	isb	sy
 800e0b8:	4b15      	ldr	r3, [pc, #84]	@ (800e110 <pxCurrentTCBConst>)
 800e0ba:	681a      	ldr	r2, [r3, #0]
 800e0bc:	f01e 0f10 	tst.w	lr, #16
 800e0c0:	bf08      	it	eq
 800e0c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e0c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0ca:	6010      	str	r0, [r2, #0]
 800e0cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e0d0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800e0d4:	f380 8811 	msr	BASEPRI, r0
 800e0d8:	f3bf 8f4f 	dsb	sy
 800e0dc:	f3bf 8f6f 	isb	sy
 800e0e0:	f7ff fe8e 	bl	800de00 <vTaskSwitchContext>
 800e0e4:	f04f 0000 	mov.w	r0, #0
 800e0e8:	f380 8811 	msr	BASEPRI, r0
 800e0ec:	bc09      	pop	{r0, r3}
 800e0ee:	6819      	ldr	r1, [r3, #0]
 800e0f0:	6808      	ldr	r0, [r1, #0]
 800e0f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0f6:	f01e 0f10 	tst.w	lr, #16
 800e0fa:	bf08      	it	eq
 800e0fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e100:	f380 8809 	msr	PSP, r0
 800e104:	f3bf 8f6f 	isb	sy
 800e108:	4770      	bx	lr
 800e10a:	bf00      	nop
 800e10c:	f3af 8000 	nop.w

0800e110 <pxCurrentTCBConst>:
 800e110:	20001944 	.word	0x20001944

0800e114 <SysTick_Handler>:
{
 800e114:	b508      	push	{r3, lr}
	__asm volatile
 800e116:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e11a:	f383 8811 	msr	BASEPRI, r3
 800e11e:	f3bf 8f6f 	isb	sy
 800e122:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 800e126:	f7ff fe5b 	bl	800dde0 <xTaskIncrementTick>
 800e12a:	b128      	cbz	r0, 800e138 <SysTick_Handler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e12c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800e130:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e134:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
 800e138:	2300      	movs	r3, #0
 800e13a:	f383 8811 	msr	BASEPRI, r3
}
 800e13e:	bd08      	pop	{r3, pc}

0800e140 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e140:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 800e144:	2300      	movs	r3, #0
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e146:	4906      	ldr	r1, [pc, #24]	@ (800e160 <vPortSetupTimerInterrupt+0x20>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e148:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e14a:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e14c:	680b      	ldr	r3, [r1, #0]
 800e14e:	4905      	ldr	r1, [pc, #20]	@ (800e164 <vPortSetupTimerInterrupt+0x24>)
 800e150:	fba1 1303 	umull	r1, r3, r1, r3
 800e154:	099b      	lsrs	r3, r3, #6
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e156:	2007      	movs	r0, #7
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e158:	3b01      	subs	r3, #1
 800e15a:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e15c:	6110      	str	r0, [r2, #16]
}
 800e15e:	4770      	bx	lr
 800e160:	20000034 	.word	0x20000034
 800e164:	10624dd3 	.word	0x10624dd3

0800e168 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e168:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800e16c:	4a48      	ldr	r2, [pc, #288]	@ (800e290 <xPortStartScheduler+0x128>)
 800e16e:	f8d3 1d00 	ldr.w	r1, [r3, #3328]	@ 0xd00
 800e172:	4291      	cmp	r1, r2
 800e174:	d041      	beq.n	800e1fa <xPortStartScheduler+0x92>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e176:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 800e17a:	4b46      	ldr	r3, [pc, #280]	@ (800e294 <xPortStartScheduler+0x12c>)
 800e17c:	429a      	cmp	r2, r3
 800e17e:	d033      	beq.n	800e1e8 <xPortStartScheduler+0x80>
{
 800e180:	b570      	push	{r4, r5, r6, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e182:	4b45      	ldr	r3, [pc, #276]	@ (800e298 <xPortStartScheduler+0x130>)
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e184:	4c45      	ldr	r4, [pc, #276]	@ (800e29c <xPortStartScheduler+0x134>)
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e186:	781a      	ldrb	r2, [r3, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e188:	4845      	ldr	r0, [pc, #276]	@ (800e2a0 <xPortStartScheduler+0x138>)
{
 800e18a:	b084      	sub	sp, #16
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e18c:	21ff      	movs	r1, #255	@ 0xff
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e18e:	b2d2      	uxtb	r2, r2
 800e190:	9202      	str	r2, [sp, #8]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e192:	7019      	strb	r1, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e194:	781b      	ldrb	r3, [r3, #0]
 800e196:	b2db      	uxtb	r3, r3
 800e198:	f88d 3007 	strb.w	r3, [sp, #7]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e19c:	f89d 3007 	ldrb.w	r3, [sp, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e1a0:	f89d 2007 	ldrb.w	r2, [sp, #7]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e1a4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e1a8:	2107      	movs	r1, #7
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e1aa:	0612      	lsls	r2, r2, #24
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e1ac:	7023      	strb	r3, [r4, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e1ae:	6001      	str	r1, [r0, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e1b0:	bf48      	it	mi
 800e1b2:	2206      	movmi	r2, #6
 800e1b4:	d50f      	bpl.n	800e1d6 <xPortStartScheduler+0x6e>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e1b6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800e1ba:	005b      	lsls	r3, r3, #1
 800e1bc:	b2db      	uxtb	r3, r3
 800e1be:	f88d 3007 	strb.w	r3, [sp, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e1c2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800e1c6:	061b      	lsls	r3, r3, #24
 800e1c8:	4611      	mov	r1, r2
 800e1ca:	f102 32ff 	add.w	r2, r2, #4294967295
 800e1ce:	d4f2      	bmi.n	800e1b6 <xPortStartScheduler+0x4e>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e1d0:	2903      	cmp	r1, #3
 800e1d2:	d01b      	beq.n	800e20c <xPortStartScheduler+0xa4>
 800e1d4:	6001      	str	r1, [r0, #0]
	__asm volatile
 800e1d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e1da:	f383 8811 	msr	BASEPRI, r3
 800e1de:	f3bf 8f6f 	isb	sy
 800e1e2:	f3bf 8f4f 	dsb	sy
 800e1e6:	e7fe      	b.n	800e1e6 <xPortStartScheduler+0x7e>
 800e1e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e1ec:	f383 8811 	msr	BASEPRI, r3
 800e1f0:	f3bf 8f6f 	isb	sy
 800e1f4:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e1f8:	e7fe      	b.n	800e1f8 <xPortStartScheduler+0x90>
 800e1fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e1fe:	f383 8811 	msr	BASEPRI, r3
 800e202:	f3bf 8f6f 	isb	sy
 800e206:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e20a:	e7fe      	b.n	800e20a <xPortStartScheduler+0xa2>
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e20c:	9b02      	ldr	r3, [sp, #8]
 800e20e:	4a22      	ldr	r2, [pc, #136]	@ (800e298 <xPortStartScheduler+0x130>)
	uxCriticalNesting = 0;
 800e210:	4d24      	ldr	r5, [pc, #144]	@ (800e2a4 <xPortStartScheduler+0x13c>)
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e212:	f04f 24e0 	mov.w	r4, #3758153728	@ 0xe000e000
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e216:	f44f 7140 	mov.w	r1, #768	@ 0x300
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e21a:	b2db      	uxtb	r3, r3
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e21c:	6001      	str	r1, [r0, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e21e:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e220:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 800e224:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800e228:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e22c:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 800e230:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800e234:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	uxCriticalNesting = 0;
 800e238:	2600      	movs	r6, #0
	vPortSetupTimerInterrupt();
 800e23a:	f7ff ff81 	bl	800e140 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800e23e:	602e      	str	r6, [r5, #0]
	vPortEnableVFP();
 800e240:	f7ff feb0 	bl	800dfa4 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e244:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	@ 0xf34
 800e248:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800e24c:	f8c4 3f34 	str.w	r3, [r4, #3892]	@ 0xf34
	prvPortStartFirstTask();
 800e250:	f7ff fe94 	bl	800df7c <prvPortStartFirstTask>
	vTaskSwitchContext();
 800e254:	f7ff fdd4 	bl	800de00 <vTaskSwitchContext>
	configASSERT( uxCriticalNesting == ~0UL );
 800e258:	682b      	ldr	r3, [r5, #0]
volatile uint32_t ulDummy = 0;
 800e25a:	9603      	str	r6, [sp, #12]
	configASSERT( uxCriticalNesting == ~0UL );
 800e25c:	3301      	adds	r3, #1
 800e25e:	d008      	beq.n	800e272 <xPortStartScheduler+0x10a>
 800e260:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e264:	f383 8811 	msr	BASEPRI, r3
 800e268:	f3bf 8f6f 	isb	sy
 800e26c:	f3bf 8f4f 	dsb	sy
 800e270:	e7fe      	b.n	800e270 <xPortStartScheduler+0x108>
 800e272:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e276:	f383 8811 	msr	BASEPRI, r3
 800e27a:	f3bf 8f6f 	isb	sy
 800e27e:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 800e282:	9b03      	ldr	r3, [sp, #12]
 800e284:	2b00      	cmp	r3, #0
 800e286:	d0fc      	beq.n	800e282 <xPortStartScheduler+0x11a>
}
 800e288:	2000      	movs	r0, #0
 800e28a:	b004      	add	sp, #16
 800e28c:	bd70      	pop	{r4, r5, r6, pc}
 800e28e:	bf00      	nop
 800e290:	410fc271 	.word	0x410fc271
 800e294:	410fc270 	.word	0x410fc270
 800e298:	e000e400 	.word	0xe000e400
 800e29c:	2000194c 	.word	0x2000194c
 800e2a0:	20001948 	.word	0x20001948
 800e2a4:	200000c8 	.word	0x200000c8

0800e2a8 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e2a8:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e2ac:	2b0f      	cmp	r3, #15
 800e2ae:	d90e      	bls.n	800e2ce <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e2b0:	4911      	ldr	r1, [pc, #68]	@ (800e2f8 <vPortValidateInterruptPriority+0x50>)
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e2b2:	4a12      	ldr	r2, [pc, #72]	@ (800e2fc <vPortValidateInterruptPriority+0x54>)
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e2b4:	5c5b      	ldrb	r3, [r3, r1]
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e2b6:	7812      	ldrb	r2, [r2, #0]
 800e2b8:	429a      	cmp	r2, r3
 800e2ba:	d908      	bls.n	800e2ce <vPortValidateInterruptPriority+0x26>
 800e2bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e2c0:	f383 8811 	msr	BASEPRI, r3
 800e2c4:	f3bf 8f6f 	isb	sy
 800e2c8:	f3bf 8f4f 	dsb	sy
 800e2cc:	e7fe      	b.n	800e2cc <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e2ce:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800e2d2:	4a0b      	ldr	r2, [pc, #44]	@ (800e300 <vPortValidateInterruptPriority+0x58>)
 800e2d4:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	@ 0xd0c
 800e2d8:	6812      	ldr	r2, [r2, #0]
 800e2da:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800e2de:	4293      	cmp	r3, r2
 800e2e0:	d908      	bls.n	800e2f4 <vPortValidateInterruptPriority+0x4c>
 800e2e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e2e6:	f383 8811 	msr	BASEPRI, r3
 800e2ea:	f3bf 8f6f 	isb	sy
 800e2ee:	f3bf 8f4f 	dsb	sy
 800e2f2:	e7fe      	b.n	800e2f2 <vPortValidateInterruptPriority+0x4a>
	}
 800e2f4:	4770      	bx	lr
 800e2f6:	bf00      	nop
 800e2f8:	e000e3f0 	.word	0xe000e3f0
 800e2fc:	2000194c 	.word	0x2000194c
 800e300:	20001948 	.word	0x20001948

0800e304 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e304:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e308:	4604      	mov	r4, r0
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
 800e30a:	f7ff fd51 	bl	800ddb0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e30e:	4a51      	ldr	r2, [pc, #324]	@ (800e454 <pvPortMalloc+0x150>)
 800e310:	6815      	ldr	r5, [r2, #0]
 800e312:	2d00      	cmp	r5, #0
 800e314:	d035      	beq.n	800e382 <pvPortMalloc+0x7e>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e316:	4b50      	ldr	r3, [pc, #320]	@ (800e458 <pvPortMalloc+0x154>)
 800e318:	681e      	ldr	r6, [r3, #0]
 800e31a:	4234      	tst	r4, r6
 800e31c:	d12b      	bne.n	800e376 <pvPortMalloc+0x72>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e31e:	b354      	cbz	r4, 800e376 <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 800e320:	f104 0008 	add.w	r0, r4, #8

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e324:	0764      	lsls	r4, r4, #29
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e326:	bf1c      	itt	ne
 800e328:	f020 0007 	bicne.w	r0, r0, #7
 800e32c:	3008      	addne	r0, #8
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e32e:	b310      	cbz	r0, 800e376 <pvPortMalloc+0x72>
 800e330:	f8df e138 	ldr.w	lr, [pc, #312]	@ 800e46c <pvPortMalloc+0x168>
 800e334:	f8de c000 	ldr.w	ip, [lr]
 800e338:	4584      	cmp	ip, r0
 800e33a:	d31c      	bcc.n	800e376 <pvPortMalloc+0x72>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
 800e33c:	4c47      	ldr	r4, [pc, #284]	@ (800e45c <pvPortMalloc+0x158>)
 800e33e:	6823      	ldr	r3, [r4, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e340:	e003      	b.n	800e34a <pvPortMalloc+0x46>
 800e342:	681a      	ldr	r2, [r3, #0]
 800e344:	b122      	cbz	r2, 800e350 <pvPortMalloc+0x4c>
 800e346:	461c      	mov	r4, r3
 800e348:	4613      	mov	r3, r2
 800e34a:	6859      	ldr	r1, [r3, #4]
 800e34c:	4281      	cmp	r1, r0
 800e34e:	d3f8      	bcc.n	800e342 <pvPortMalloc+0x3e>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e350:	42ab      	cmp	r3, r5
 800e352:	d010      	beq.n	800e376 <pvPortMalloc+0x72>
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e354:	681a      	ldr	r2, [r3, #0]
 800e356:	6022      	str	r2, [r4, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e358:	1a0a      	subs	r2, r1, r0
 800e35a:	2a10      	cmp	r2, #16
 800e35c:	d946      	bls.n	800e3ec <pvPortMalloc+0xe8>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e35e:	181c      	adds	r4, r3, r0
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e360:	0761      	lsls	r1, r4, #29
 800e362:	d02c      	beq.n	800e3be <pvPortMalloc+0xba>
 800e364:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e368:	f383 8811 	msr	BASEPRI, r3
 800e36c:	f3bf 8f6f 	isb	sy
 800e370:	f3bf 8f4f 	dsb	sy
 800e374:	e7fe      	b.n	800e374 <pvPortMalloc+0x70>
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e376:	f7ff fd23 	bl	800ddc0 <xTaskResumeAll>
void *pvReturn = NULL;
 800e37a:	2400      	movs	r4, #0
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
}
 800e37c:	4620      	mov	r0, r4
 800e37e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e382:	4b37      	ldr	r3, [pc, #220]	@ (800e460 <pvPortMalloc+0x15c>)

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e384:	4835      	ldr	r0, [pc, #212]	@ (800e45c <pvPortMalloc+0x158>)
	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e386:	4f34      	ldr	r7, [pc, #208]	@ (800e458 <pvPortMalloc+0x154>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e388:	075d      	lsls	r5, r3, #29
	uxAddress -= xHeapStructSize;
 800e38a:	4d36      	ldr	r5, [pc, #216]	@ (800e464 <pvPortMalloc+0x160>)
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e38c:	bf18      	it	ne
 800e38e:	3307      	addne	r3, #7
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e390:	f025 0507 	bic.w	r5, r5, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e394:	bf18      	it	ne
 800e396:	f023 0307 	bicne.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 800e39a:	6015      	str	r5, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e39c:	4a32      	ldr	r2, [pc, #200]	@ (800e468 <pvPortMalloc+0x164>)
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e39e:	6003      	str	r3, [r0, #0]
 800e3a0:	4619      	mov	r1, r3
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e3a2:	1aeb      	subs	r3, r5, r3
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e3a4:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e3a6:	4a31      	ldr	r2, [pc, #196]	@ (800e46c <pvPortMalloc+0x168>)
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e3a8:	f04f 4600 	mov.w	r6, #2147483648	@ 0x80000000
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e3ac:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e3ae:	2200      	movs	r2, #0
 800e3b0:	6042      	str	r2, [r0, #4]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e3b2:	603e      	str	r6, [r7, #0]
	pxEnd->pxNextFreeBlock = NULL;
 800e3b4:	e9c5 2200 	strd	r2, r2, [r5]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e3b8:	e9c1 5300 	strd	r5, r3, [r1]
}
 800e3bc:	e7ad      	b.n	800e31a <pvPortMalloc+0x16>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e3be:	6062      	str	r2, [r4, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e3c0:	4a26      	ldr	r2, [pc, #152]	@ (800e45c <pvPortMalloc+0x158>)
						pxBlock->xBlockSize = xWantedSize;
 800e3c2:	6058      	str	r0, [r3, #4]
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e3c4:	4617      	mov	r7, r2
 800e3c6:	6812      	ldr	r2, [r2, #0]
 800e3c8:	4294      	cmp	r4, r2
 800e3ca:	d8fb      	bhi.n	800e3c4 <pvPortMalloc+0xc0>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e3cc:	6879      	ldr	r1, [r7, #4]
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e3ce:	f8d4 8004 	ldr.w	r8, [r4, #4]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e3d2:	eb07 0901 	add.w	r9, r7, r1
 800e3d6:	454c      	cmp	r4, r9
 800e3d8:	d028      	beq.n	800e42c <pvPortMalloc+0x128>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e3da:	eb04 0108 	add.w	r1, r4, r8
 800e3de:	428a      	cmp	r2, r1
 800e3e0:	d02e      	beq.n	800e440 <pvPortMalloc+0x13c>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e3e2:	6022      	str	r2, [r4, #0]
 800e3e4:	4601      	mov	r1, r0

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e3e6:	42a7      	cmp	r7, r4
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e3e8:	bf18      	it	ne
 800e3ea:	603c      	strne	r4, [r7, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e3ec:	481e      	ldr	r0, [pc, #120]	@ (800e468 <pvPortMalloc+0x164>)
 800e3ee:	6804      	ldr	r4, [r0, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e3f0:	ebac 0201 	sub.w	r2, ip, r1
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e3f4:	42a2      	cmp	r2, r4
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e3f6:	bf38      	it	cc
 800e3f8:	6002      	strcc	r2, [r0, #0]
					xNumberOfSuccessfulAllocations++;
 800e3fa:	481d      	ldr	r0, [pc, #116]	@ (800e470 <pvPortMalloc+0x16c>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e3fc:	f8ce 2000 	str.w	r2, [lr]
					xNumberOfSuccessfulAllocations++;
 800e400:	6802      	ldr	r2, [r0, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e402:	4331      	orrs	r1, r6
					pxBlock->pxNextFreeBlock = NULL;
 800e404:	2500      	movs	r5, #0
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e406:	f103 0408 	add.w	r4, r3, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e40a:	6059      	str	r1, [r3, #4]
					xNumberOfSuccessfulAllocations++;
 800e40c:	3201      	adds	r2, #1
					pxBlock->pxNextFreeBlock = NULL;
 800e40e:	601d      	str	r5, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800e410:	6002      	str	r2, [r0, #0]
	( void ) xTaskResumeAll();
 800e412:	f7ff fcd5 	bl	800ddc0 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e416:	0763      	lsls	r3, r4, #29
 800e418:	d0b0      	beq.n	800e37c <pvPortMalloc+0x78>
 800e41a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e41e:	f383 8811 	msr	BASEPRI, r3
 800e422:	f3bf 8f6f 	isb	sy
 800e426:	f3bf 8f4f 	dsb	sy
 800e42a:	e7fe      	b.n	800e42a <pvPortMalloc+0x126>
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e42c:	4488      	add	r8, r1
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e42e:	eb07 0108 	add.w	r1, r7, r8
 800e432:	428a      	cmp	r2, r1
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e434:	f8c7 8004 	str.w	r8, [r7, #4]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e438:	d001      	beq.n	800e43e <pvPortMalloc+0x13a>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e43a:	6859      	ldr	r1, [r3, #4]
 800e43c:	e7d6      	b.n	800e3ec <pvPortMalloc+0xe8>
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e43e:	463c      	mov	r4, r7
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e440:	42aa      	cmp	r2, r5
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e442:	bf1c      	itt	ne
 800e444:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e446:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e448:	6022      	str	r2, [r4, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e44a:	bf1c      	itt	ne
 800e44c:	4441      	addne	r1, r8
 800e44e:	6061      	strne	r1, [r4, #4]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e450:	6859      	ldr	r1, [r3, #4]
 800e452:	e7c8      	b.n	800e3e6 <pvPortMalloc+0xe2>
 800e454:	20001964 	.word	0x20001964
 800e458:	20001950 	.word	0x20001950
 800e45c:	20001968 	.word	0x20001968
 800e460:	20001970 	.word	0x20001970
 800e464:	20004078 	.word	0x20004078
 800e468:	2000195c 	.word	0x2000195c
 800e46c:	20001960 	.word	0x20001960
 800e470:	20001958 	.word	0x20001958

0800e474 <vPortFree>:
	if( pv != NULL )
 800e474:	b1d0      	cbz	r0, 800e4ac <vPortFree+0x38>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e476:	4a2c      	ldr	r2, [pc, #176]	@ (800e528 <vPortFree+0xb4>)
 800e478:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800e47c:	6812      	ldr	r2, [r2, #0]
 800e47e:	4213      	tst	r3, r2
 800e480:	d00b      	beq.n	800e49a <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e482:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800e486:	b191      	cbz	r1, 800e4ae <vPortFree+0x3a>
 800e488:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e48c:	f383 8811 	msr	BASEPRI, r3
 800e490:	f3bf 8f6f 	isb	sy
 800e494:	f3bf 8f4f 	dsb	sy
 800e498:	e7fe      	b.n	800e498 <vPortFree+0x24>
 800e49a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e49e:	f383 8811 	msr	BASEPRI, r3
 800e4a2:	f3bf 8f6f 	isb	sy
 800e4a6:	f3bf 8f4f 	dsb	sy
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e4aa:	e7fe      	b.n	800e4aa <vPortFree+0x36>
 800e4ac:	4770      	bx	lr
{
 800e4ae:	b570      	push	{r4, r5, r6, lr}
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e4b0:	ea23 0302 	bic.w	r3, r3, r2
{
 800e4b4:	b082      	sub	sp, #8
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e4b6:	f840 3c04 	str.w	r3, [r0, #-4]
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e4ba:	4c1c      	ldr	r4, [pc, #112]	@ (800e52c <vPortFree+0xb8>)
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e4bc:	9001      	str	r0, [sp, #4]
				vTaskSuspendAll();
 800e4be:	f7ff fc77 	bl	800ddb0 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e4c2:	9801      	ldr	r0, [sp, #4]
 800e4c4:	6822      	ldr	r2, [r4, #0]
 800e4c6:	f850 5c04 	ldr.w	r5, [r0, #-4]
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e4ca:	4b19      	ldr	r3, [pc, #100]	@ (800e530 <vPortFree+0xbc>)
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e4cc:	1951      	adds	r1, r2, r5
 800e4ce:	6021      	str	r1, [r4, #0]
		puc -= xHeapStructSize;
 800e4d0:	f1a0 0208 	sub.w	r2, r0, #8
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e4d4:	4619      	mov	r1, r3
 800e4d6:	681b      	ldr	r3, [r3, #0]
 800e4d8:	429a      	cmp	r2, r3
 800e4da:	d8fb      	bhi.n	800e4d4 <vPortFree+0x60>
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e4dc:	684e      	ldr	r6, [r1, #4]
 800e4de:	198c      	adds	r4, r1, r6
 800e4e0:	42a2      	cmp	r2, r4
 800e4e2:	d011      	beq.n	800e508 <vPortFree+0x94>
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e4e4:	eb02 0e05 	add.w	lr, r2, r5
 800e4e8:	4573      	cmp	r3, lr
 800e4ea:	d013      	beq.n	800e514 <vPortFree+0xa0>
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e4ec:	f840 3c08 	str.w	r3, [r0, #-8]
	if( pxIterator != pxBlockToInsert )
 800e4f0:	4291      	cmp	r1, r2
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e4f2:	bf18      	it	ne
 800e4f4:	600a      	strne	r2, [r1, #0]
					xNumberOfSuccessfulFrees++;
 800e4f6:	4a0f      	ldr	r2, [pc, #60]	@ (800e534 <vPortFree+0xc0>)
 800e4f8:	6813      	ldr	r3, [r2, #0]
 800e4fa:	3301      	adds	r3, #1
 800e4fc:	6013      	str	r3, [r2, #0]
}
 800e4fe:	b002      	add	sp, #8
 800e500:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				( void ) xTaskResumeAll();
 800e504:	f7ff bc5c 	b.w	800ddc0 <xTaskResumeAll>
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e508:	4435      	add	r5, r6
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e50a:	194a      	adds	r2, r1, r5
 800e50c:	4293      	cmp	r3, r2
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e50e:	604d      	str	r5, [r1, #4]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e510:	d1f1      	bne.n	800e4f6 <vPortFree+0x82>
 800e512:	460a      	mov	r2, r1
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e514:	4808      	ldr	r0, [pc, #32]	@ (800e538 <vPortFree+0xc4>)
 800e516:	6800      	ldr	r0, [r0, #0]
 800e518:	4283      	cmp	r3, r0
 800e51a:	d003      	beq.n	800e524 <vPortFree+0xb0>
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e51c:	e9d3 0400 	ldrd	r0, r4, [r3]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e520:	1963      	adds	r3, r4, r5
 800e522:	6053      	str	r3, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e524:	6010      	str	r0, [r2, #0]
 800e526:	e7e3      	b.n	800e4f0 <vPortFree+0x7c>
 800e528:	20001950 	.word	0x20001950
 800e52c:	20001960 	.word	0x20001960
 800e530:	20001968 	.word	0x20001968
 800e534:	20001954 	.word	0x20001954
 800e538:	20001964 	.word	0x20001964

0800e53c <SPIF_WaitForWriting>:
}

/***********************************************************************************************************/

bool SPIF_WaitForWriting(SPIF_HandleTypeDef *Handle, uint32_t Timeout)
{
 800e53c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e540:	b084      	sub	sp, #16
 800e542:	4604      	mov	r4, r0
 800e544:	460f      	mov	r7, r1
  bool retVal = false;
  uint32_t startTime = HAL_GetTick();
 800e546:	f7f7 f911 	bl	800576c <HAL_GetTick>
  uint8_t tx[2] = {SPIF_CMD_READSTATUS1, SPIF_DUMMY_BYTE};
 800e54a:	f24a 5805 	movw	r8, #42245	@ 0xa505
  uint32_t startTime = HAL_GetTick();
 800e54e:	4606      	mov	r6, r0
  osDelay(d);
 800e550:	2001      	movs	r0, #1
 800e552:	f7fe febb 	bl	800d2cc <osDelay>
  while (1)
  {
    SPIF_Delay(1);
    if (HAL_GetTick() - startTime >= Timeout)
 800e556:	f7f7 f909 	bl	800576c <HAL_GetTick>
 800e55a:	1b80      	subs	r0, r0, r6
 800e55c:	42b8      	cmp	r0, r7
  HAL_GPIO_WritePin(Handle->Gpio, Handle->Pin, (GPIO_PinState)Select);
 800e55e:	f04f 0200 	mov.w	r2, #0
    if (HAL_GetTick() - startTime >= Timeout)
 800e562:	d221      	bcs.n	800e5a8 <SPIF_WaitForWriting+0x6c>
  HAL_GPIO_WritePin(Handle->Gpio, Handle->Pin, (GPIO_PinState)Select);
 800e564:	8a21      	ldrh	r1, [r4, #16]
 800e566:	6860      	ldr	r0, [r4, #4]
  uint8_t tx[2] = {SPIF_CMD_READSTATUS1, SPIF_DUMMY_BYTE};
 800e568:	f8ad 8008 	strh.w	r8, [sp, #8]
  if (HAL_SPI_TransmitReceive(Handle->HSpi, Tx, Rx, Size, Timeout) == HAL_OK)
 800e56c:	2564      	movs	r5, #100	@ 0x64
  HAL_GPIO_WritePin(Handle->Gpio, Handle->Pin, (GPIO_PinState)Select);
 800e56e:	f7f8 f811 	bl	8006594 <HAL_GPIO_WritePin>
  if (HAL_SPI_TransmitReceive(Handle->HSpi, Tx, Rx, Size, Timeout) == HAL_OK)
 800e572:	6820      	ldr	r0, [r4, #0]
 800e574:	9500      	str	r5, [sp, #0]
 800e576:	aa03      	add	r2, sp, #12
 800e578:	2302      	movs	r3, #2
 800e57a:	a902      	add	r1, sp, #8
 800e57c:	f7fb fc46 	bl	8009e0c <HAL_SPI_TransmitReceive>
  HAL_GPIO_WritePin(Handle->Gpio, Handle->Pin, (GPIO_PinState)Select);
 800e580:	2201      	movs	r2, #1
  if (HAL_SPI_TransmitReceive(Handle->HSpi, Tx, Rx, Size, Timeout) == HAL_OK)
 800e582:	b140      	cbz	r0, 800e596 <SPIF_WaitForWriting+0x5a>
  HAL_GPIO_WritePin(Handle->Gpio, Handle->Pin, (GPIO_PinState)Select);
 800e584:	8a21      	ldrh	r1, [r4, #16]
 800e586:	6860      	ldr	r0, [r4, #4]
 800e588:	2201      	movs	r2, #1
 800e58a:	f7f8 f803 	bl	8006594 <HAL_GPIO_WritePin>
      dprintf("SPIF_WaitForWriting() TIMEOUT\r\n");
      break;
    }
    if ((SPIF_ReadReg1(Handle) & SPIF_STATUS1_BUSY) == 0)
    {
      retVal = true;
 800e58e:	2001      	movs	r0, #1
      break;
    }
  }
  return retVal;
}
 800e590:	b004      	add	sp, #16
 800e592:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    retVal = rx[1];
 800e596:	f89d 500d 	ldrb.w	r5, [sp, #13]
  HAL_GPIO_WritePin(Handle->Gpio, Handle->Pin, (GPIO_PinState)Select);
 800e59a:	8a21      	ldrh	r1, [r4, #16]
 800e59c:	6860      	ldr	r0, [r4, #4]
 800e59e:	f7f7 fff9 	bl	8006594 <HAL_GPIO_WritePin>
    if ((SPIF_ReadReg1(Handle) & SPIF_STATUS1_BUSY) == 0)
 800e5a2:	07eb      	lsls	r3, r5, #31
 800e5a4:	d4d4      	bmi.n	800e550 <SPIF_WaitForWriting+0x14>
 800e5a6:	e7f2      	b.n	800e58e <SPIF_WaitForWriting+0x52>
  bool retVal = false;
 800e5a8:	2000      	movs	r0, #0
}
 800e5aa:	b004      	add	sp, #16
 800e5ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e5b0 <SPIF_FindChip>:

/***********************************************************************************************************/

bool SPIF_FindChip(SPIF_HandleTypeDef *Handle)
{
 800e5b0:	b510      	push	{r4, lr}
 800e5b2:	b084      	sub	sp, #16
  HAL_GPIO_WritePin(Handle->Gpio, Handle->Pin, (GPIO_PinState)Select);
 800e5b4:	8a01      	ldrh	r1, [r0, #16]
{
 800e5b6:	4604      	mov	r4, r0
  uint8_t tx[4] = {SPIF_CMD_JEDECID, 0xFF, 0xFF, 0xFF};
 800e5b8:	f06f 0360 	mvn.w	r3, #96	@ 0x60
  HAL_GPIO_WritePin(Handle->Gpio, Handle->Pin, (GPIO_PinState)Select);
 800e5bc:	6840      	ldr	r0, [r0, #4]
  uint8_t tx[4] = {SPIF_CMD_JEDECID, 0xFF, 0xFF, 0xFF};
 800e5be:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(Handle->Gpio, Handle->Pin, (GPIO_PinState)Select);
 800e5c0:	2200      	movs	r2, #0
 800e5c2:	f7f7 ffe7 	bl	8006594 <HAL_GPIO_WritePin>
  if (HAL_SPI_TransmitReceive(Handle->HSpi, Tx, Rx, Size, Timeout) == HAL_OK)
 800e5c6:	2364      	movs	r3, #100	@ 0x64
 800e5c8:	6820      	ldr	r0, [r4, #0]
 800e5ca:	9300      	str	r3, [sp, #0]
 800e5cc:	a902      	add	r1, sp, #8
 800e5ce:	2304      	movs	r3, #4
 800e5d0:	aa03      	add	r2, sp, #12
 800e5d2:	f7fb fc1b 	bl	8009e0c <HAL_SPI_TransmitReceive>
  HAL_GPIO_WritePin(Handle->Gpio, Handle->Pin, (GPIO_PinState)Select);
 800e5d6:	8a21      	ldrh	r1, [r4, #16]
  if (HAL_SPI_TransmitReceive(Handle->HSpi, Tx, Rx, Size, Timeout) == HAL_OK)
 800e5d8:	b130      	cbz	r0, 800e5e8 <SPIF_FindChip+0x38>
  HAL_GPIO_WritePin(Handle->Gpio, Handle->Pin, (GPIO_PinState)Select);
 800e5da:	6860      	ldr	r0, [r4, #4]
 800e5dc:	2201      	movs	r2, #1
 800e5de:	f7f7 ffd9 	bl	8006594 <HAL_GPIO_WritePin>
  uint8_t rx[4];
  bool retVal = false;
 800e5e2:	2000      	movs	r0, #0
    retVal = true;

  } while (0);

  return retVal;
}
 800e5e4:	b004      	add	sp, #16
 800e5e6:	bd10      	pop	{r4, pc}
  HAL_GPIO_WritePin(Handle->Gpio, Handle->Pin, (GPIO_PinState)Select);
 800e5e8:	2201      	movs	r2, #1
 800e5ea:	6860      	ldr	r0, [r4, #4]
 800e5ec:	f7f7 ffd2 	bl	8006594 <HAL_GPIO_WritePin>
    Handle->Manufactor = rx[1];
 800e5f0:	f89d 300d 	ldrb.w	r3, [sp, #13]
    Handle->MemType = rx[2];
 800e5f4:	f89d 100e 	ldrb.w	r1, [sp, #14]
    Handle->Size = rx[3];
 800e5f8:	f89d 200f 	ldrb.w	r2, [sp, #15]
    Handle->Manufactor = rx[1];
 800e5fc:	7223      	strb	r3, [r4, #8]
    switch (Handle->Manufactor)
 800e5fe:	2ba1      	cmp	r3, #161	@ 0xa1
    Handle->MemType = rx[2];
 800e600:	72e1      	strb	r1, [r4, #11]
    Handle->Size = rx[3];
 800e602:	7262      	strb	r2, [r4, #9]
    switch (Handle->Manufactor)
 800e604:	d82c      	bhi.n	800e660 <SPIF_FindChip+0xb0>
 800e606:	2b84      	cmp	r3, #132	@ 0x84
 800e608:	d822      	bhi.n	800e650 <SPIF_FindChip+0xa0>
 800e60a:	2b37      	cmp	r3, #55	@ 0x37
 800e60c:	d81d      	bhi.n	800e64a <SPIF_FindChip+0x9a>
 800e60e:	2b1b      	cmp	r3, #27
 800e610:	d813      	bhi.n	800e63a <SPIF_FindChip+0x8a>
 800e612:	2b01      	cmp	r3, #1
 800e614:	d003      	beq.n	800e61e <SPIF_FindChip+0x6e>
 800e616:	2b04      	cmp	r3, #4
 800e618:	d001      	beq.n	800e61e <SPIF_FindChip+0x6e>
      Handle->Manufactor = SPIF_MANUFACTOR_ERROR;
 800e61a:	2300      	movs	r3, #0
 800e61c:	7223      	strb	r3, [r4, #8]
    switch (Handle->Size)
 800e61e:	f1a2 0311 	sub.w	r3, r2, #17
 800e622:	2b0f      	cmp	r3, #15
 800e624:	d82b      	bhi.n	800e67e <SPIF_FindChip+0xce>
 800e626:	e8df f003 	tbb	[pc, r3]
 800e62a:	3b35      	.short	0x3b35
 800e62c:	554e4741 	.word	0x554e4741
 800e630:	2a6b635c 	.word	0x2a6b635c
 800e634:	2a2a2a2a 	.word	0x2a2a2a2a
 800e638:	732a      	.short	0x732a
    switch (Handle->Manufactor)
 800e63a:	4939      	ldr	r1, [pc, #228]	@ (800e720 <SPIF_FindChip+0x170>)
 800e63c:	3b1c      	subs	r3, #28
 800e63e:	b2db      	uxtb	r3, r3
 800e640:	fa21 f303 	lsr.w	r3, r1, r3
 800e644:	07db      	lsls	r3, r3, #31
 800e646:	d5e8      	bpl.n	800e61a <SPIF_FindChip+0x6a>
 800e648:	e7e9      	b.n	800e61e <SPIF_FindChip+0x6e>
 800e64a:	2b62      	cmp	r3, #98	@ 0x62
 800e64c:	d1e5      	bne.n	800e61a <SPIF_FindChip+0x6a>
 800e64e:	e7e6      	b.n	800e61e <SPIF_FindChip+0x6e>
 800e650:	4934      	ldr	r1, [pc, #208]	@ (800e724 <SPIF_FindChip+0x174>)
 800e652:	337b      	adds	r3, #123	@ 0x7b
 800e654:	b2db      	uxtb	r3, r3
 800e656:	fa21 f303 	lsr.w	r3, r1, r3
 800e65a:	07d9      	lsls	r1, r3, #31
 800e65c:	d5dd      	bpl.n	800e61a <SPIF_FindChip+0x6a>
 800e65e:	e7de      	b.n	800e61e <SPIF_FindChip+0x6e>
 800e660:	2bc8      	cmp	r3, #200	@ 0xc8
 800e662:	d809      	bhi.n	800e678 <SPIF_FindChip+0xc8>
 800e664:	2bac      	cmp	r3, #172	@ 0xac
 800e666:	d9d8      	bls.n	800e61a <SPIF_FindChip+0x6a>
 800e668:	492f      	ldr	r1, [pc, #188]	@ (800e728 <SPIF_FindChip+0x178>)
 800e66a:	3353      	adds	r3, #83	@ 0x53
 800e66c:	b2db      	uxtb	r3, r3
 800e66e:	fa21 f303 	lsr.w	r3, r1, r3
 800e672:	07d8      	lsls	r0, r3, #31
 800e674:	d5d1      	bpl.n	800e61a <SPIF_FindChip+0x6a>
 800e676:	e7d2      	b.n	800e61e <SPIF_FindChip+0x6e>
 800e678:	2bef      	cmp	r3, #239	@ 0xef
 800e67a:	d1ce      	bne.n	800e61a <SPIF_FindChip+0x6a>
 800e67c:	e7cf      	b.n	800e61e <SPIF_FindChip+0x6e>
    Handle->SectorCnt = Handle->BlockCnt * 16;
 800e67e:	69e3      	ldr	r3, [r4, #28]
      Handle->Size = SPIF_SIZE_ERROR;
 800e680:	2100      	movs	r1, #0
    Handle->PageCnt = (Handle->SectorCnt * SPIF_SECTOR_SIZE) / SPIF_PAGE_SIZE;
 800e682:	041a      	lsls	r2, r3, #16
      Handle->Size = SPIF_SIZE_ERROR;
 800e684:	7261      	strb	r1, [r4, #9]
    Handle->SectorCnt = Handle->BlockCnt * 16;
 800e686:	011b      	lsls	r3, r3, #4
    Handle->PageCnt = (Handle->SectorCnt * SPIF_SECTOR_SIZE) / SPIF_PAGE_SIZE;
 800e688:	0a12      	lsrs	r2, r2, #8
    retVal = true;
 800e68a:	2001      	movs	r0, #1
    Handle->PageCnt = (Handle->SectorCnt * SPIF_SECTOR_SIZE) / SPIF_PAGE_SIZE;
 800e68c:	e9c4 2305 	strd	r2, r3, [r4, #20]
}
 800e690:	b004      	add	sp, #16
 800e692:	bd10      	pop	{r4, pc}
      Handle->BlockCnt = 2;
 800e694:	2302      	movs	r3, #2
 800e696:	61e3      	str	r3, [r4, #28]
      break;
 800e698:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e69c:	2320      	movs	r3, #32
 800e69e:	e7f4      	b.n	800e68a <SPIF_FindChip+0xda>
      Handle->BlockCnt = 4;
 800e6a0:	2304      	movs	r3, #4
 800e6a2:	61e3      	str	r3, [r4, #28]
      break;
 800e6a4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800e6a8:	2340      	movs	r3, #64	@ 0x40
 800e6aa:	e7ee      	b.n	800e68a <SPIF_FindChip+0xda>
      Handle->BlockCnt = 8;
 800e6ac:	2308      	movs	r3, #8
 800e6ae:	61e3      	str	r3, [r4, #28]
      break;
 800e6b0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800e6b4:	2380      	movs	r3, #128	@ 0x80
 800e6b6:	e7e8      	b.n	800e68a <SPIF_FindChip+0xda>
      Handle->BlockCnt = 16;
 800e6b8:	2310      	movs	r3, #16
 800e6ba:	61e3      	str	r3, [r4, #28]
      break;
 800e6bc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800e6c0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e6c4:	e7e1      	b.n	800e68a <SPIF_FindChip+0xda>
      Handle->BlockCnt = 32;
 800e6c6:	2320      	movs	r3, #32
 800e6c8:	61e3      	str	r3, [r4, #28]
      break;
 800e6ca:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800e6ce:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e6d2:	e7da      	b.n	800e68a <SPIF_FindChip+0xda>
      Handle->BlockCnt = 64;
 800e6d4:	2340      	movs	r3, #64	@ 0x40
 800e6d6:	61e3      	str	r3, [r4, #28]
      break;
 800e6d8:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800e6dc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e6e0:	e7d3      	b.n	800e68a <SPIF_FindChip+0xda>
      Handle->BlockCnt = 128;
 800e6e2:	2380      	movs	r3, #128	@ 0x80
 800e6e4:	61e3      	str	r3, [r4, #28]
      break;
 800e6e6:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800e6ea:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800e6ee:	e7cc      	b.n	800e68a <SPIF_FindChip+0xda>
      Handle->BlockCnt = 256;
 800e6f0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e6f4:	61e3      	str	r3, [r4, #28]
      break;
 800e6f6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800e6fa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e6fe:	e7c4      	b.n	800e68a <SPIF_FindChip+0xda>
      Handle->BlockCnt = 512;
 800e700:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e704:	61e3      	str	r3, [r4, #28]
      break;
 800e706:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800e70a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800e70e:	e7bc      	b.n	800e68a <SPIF_FindChip+0xda>
      Handle->BlockCnt = 1024;
 800e710:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e714:	61e3      	str	r3, [r4, #28]
      break;
 800e716:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800e71a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800e71e:	e7b4      	b.n	800e68a <SPIF_FindChip+0xda>
 800e720:	08000011 	.word	0x08000011
 800e724:	11000091 	.word	0x11000091
 800e728:	08240001 	.word	0x08240001

0800e72c <SPIF_WriteFn>:

/***********************************************************************************************************/

bool SPIF_WriteFn(SPIF_HandleTypeDef *Handle, uint32_t PageNumber, uint8_t *Data, uint32_t Size, uint32_t Offset)
{
 800e72c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e730:	4604      	mov	r4, r0
  {
#if SPIF_DEBUG != SPIF_DEBUG_DISABLE
    uint32_t dbgTime = HAL_GetTick();
#endif
    dprintf("SPIF_WritePage() START PAGE %ld\r\n", PageNumber);
    if (PageNumber >= Handle->PageCnt)
 800e732:	6940      	ldr	r0, [r0, #20]
 800e734:	4288      	cmp	r0, r1
{
 800e736:	b084      	sub	sp, #16
    if (PageNumber >= Handle->PageCnt)
 800e738:	d817      	bhi.n	800e76a <SPIF_WriteFn+0x3e>
  bool retVal = false;
 800e73a:	2500      	movs	r5, #0
  HAL_GPIO_WritePin(Handle->Gpio, Handle->Pin, (GPIO_PinState)Select);
 800e73c:	8a21      	ldrh	r1, [r4, #16]
 800e73e:	6860      	ldr	r0, [r4, #4]
  uint8_t tx[1] = {SPIF_CMD_WRITEDISABLE};
 800e740:	2304      	movs	r3, #4
  HAL_GPIO_WritePin(Handle->Gpio, Handle->Pin, (GPIO_PinState)Select);
 800e742:	2200      	movs	r2, #0
  uint8_t tx[1] = {SPIF_CMD_WRITEDISABLE};
 800e744:	f88d 3004 	strb.w	r3, [sp, #4]
  HAL_GPIO_WritePin(Handle->Gpio, Handle->Pin, (GPIO_PinState)Select);
 800e748:	f7f7 ff24 	bl	8006594 <HAL_GPIO_WritePin>
  if (HAL_SPI_Transmit(Handle->HSpi, Tx, Size, Timeout) == HAL_OK)
 800e74c:	2364      	movs	r3, #100	@ 0x64
 800e74e:	a901      	add	r1, sp, #4
 800e750:	6820      	ldr	r0, [r4, #0]
 800e752:	2201      	movs	r2, #1
 800e754:	f7fb fa36 	bl	8009bc4 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(Handle->Gpio, Handle->Pin, (GPIO_PinState)Select);
 800e758:	6860      	ldr	r0, [r4, #4]
 800e75a:	8a21      	ldrh	r1, [r4, #16]
 800e75c:	2201      	movs	r2, #1
 800e75e:	f7f7 ff19 	bl	8006594 <HAL_GPIO_WritePin>

  } while (0);

  SPIF_WriteDisable(Handle);
  return retVal;
}
 800e762:	4628      	mov	r0, r5
 800e764:	b004      	add	sp, #16
 800e766:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e76a:	461f      	mov	r7, r3
    if (Offset >= SPIF_PAGE_SIZE)
 800e76c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e76e:	2bff      	cmp	r3, #255	@ 0xff
 800e770:	d8e3      	bhi.n	800e73a <SPIF_WriteFn+0xe>
  uint8_t tx[1] = {SPIF_CMD_WRITEENABLE};
 800e772:	2306      	movs	r3, #6
  HAL_GPIO_WritePin(Handle->Gpio, Handle->Pin, (GPIO_PinState)Select);
 800e774:	6860      	ldr	r0, [r4, #4]
  uint8_t tx[1] = {SPIF_CMD_WRITEENABLE};
 800e776:	f88d 3008 	strb.w	r3, [sp, #8]
 800e77a:	460d      	mov	r5, r1
  HAL_GPIO_WritePin(Handle->Gpio, Handle->Pin, (GPIO_PinState)Select);
 800e77c:	4616      	mov	r6, r2
 800e77e:	8a21      	ldrh	r1, [r4, #16]
 800e780:	2200      	movs	r2, #0
 800e782:	f7f7 ff07 	bl	8006594 <HAL_GPIO_WritePin>
  if (HAL_SPI_Transmit(Handle->HSpi, Tx, Size, Timeout) == HAL_OK)
 800e786:	6820      	ldr	r0, [r4, #0]
 800e788:	2364      	movs	r3, #100	@ 0x64
 800e78a:	2201      	movs	r2, #1
 800e78c:	a902      	add	r1, sp, #8
 800e78e:	f7fb fa19 	bl	8009bc4 <HAL_SPI_Transmit>
 800e792:	4680      	mov	r8, r0
 800e794:	2800      	cmp	r0, #0
 800e796:	d151      	bne.n	800e83c <SPIF_WriteFn+0x110>
    address = SPIF_PageToAddress(PageNumber) + Offset;
 800e798:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
  HAL_GPIO_WritePin(Handle->Gpio, Handle->Pin, (GPIO_PinState)Select);
 800e79a:	8a21      	ldrh	r1, [r4, #16]
 800e79c:	6860      	ldr	r0, [r4, #4]
 800e79e:	2201      	movs	r2, #1
    address = SPIF_PageToAddress(PageNumber) + Offset;
 800e7a0:	eb03 2505 	add.w	r5, r3, r5, lsl #8
  HAL_GPIO_WritePin(Handle->Gpio, Handle->Pin, (GPIO_PinState)Select);
 800e7a4:	f7f7 fef6 	bl	8006594 <HAL_GPIO_WritePin>
 800e7a8:	8a21      	ldrh	r1, [r4, #16]
 800e7aa:	6860      	ldr	r0, [r4, #4]
 800e7ac:	4642      	mov	r2, r8
 800e7ae:	f7f7 fef1 	bl	8006594 <HAL_GPIO_WritePin>
    if (Handle->BlockCnt >= 512)
 800e7b2:	69e3      	ldr	r3, [r4, #28]
 800e7b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
      tx[2] = (address & 0x00FF0000) >> 16;
 800e7b8:	f3c5 4207 	ubfx	r2, r5, #16, #8
      tx[3] = (address & 0x0000FF00) >> 8;
 800e7bc:	f3c5 2007 	ubfx	r0, r5, #8, #8
      tx[4] = (address & 0x000000FF);
 800e7c0:	b2e9      	uxtb	r1, r5
    if (Handle->BlockCnt >= 512)
 800e7c2:	d227      	bcs.n	800e814 <SPIF_WriteFn+0xe8>
      tx[1] = (address & 0x00FF0000) >> 16;
 800e7c4:	f88d 2009 	strb.w	r2, [sp, #9]
      tx[0] = SPIF_CMD_PAGEPROG3ADD;
 800e7c8:	2202      	movs	r2, #2
      tx[2] = (address & 0x0000FF00) >> 8;
 800e7ca:	ba6d      	rev16	r5, r5
      tx[0] = SPIF_CMD_PAGEPROG3ADD;
 800e7cc:	f88d 2008 	strb.w	r2, [sp, #8]
  if (HAL_SPI_Transmit(Handle->HSpi, Tx, Size, Timeout) == HAL_OK)
 800e7d0:	6820      	ldr	r0, [r4, #0]
      tx[2] = (address & 0x0000FF00) >> 8;
 800e7d2:	f8ad 500a 	strh.w	r5, [sp, #10]
  if (HAL_SPI_Transmit(Handle->HSpi, Tx, Size, Timeout) == HAL_OK)
 800e7d6:	a902      	add	r1, sp, #8
 800e7d8:	2364      	movs	r3, #100	@ 0x64
 800e7da:	2204      	movs	r2, #4
 800e7dc:	f7fb f9f2 	bl	8009bc4 <HAL_SPI_Transmit>
 800e7e0:	bb60      	cbnz	r0, 800e83c <SPIF_WriteFn+0x110>
  uint32_t address = 0, maximum = SPIF_PAGE_SIZE - Offset;
 800e7e2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
  if (HAL_SPI_Transmit(Handle->HSpi, Tx, Size, Timeout) == HAL_OK)
 800e7e4:	6820      	ldr	r0, [r4, #0]
  uint32_t address = 0, maximum = SPIF_PAGE_SIZE - Offset;
 800e7e6:	f5c3 7280 	rsb	r2, r3, #256	@ 0x100
  if (HAL_SPI_Transmit(Handle->HSpi, Tx, Size, Timeout) == HAL_OK)
 800e7ea:	42ba      	cmp	r2, r7
 800e7ec:	bf28      	it	cs
 800e7ee:	463a      	movcs	r2, r7
 800e7f0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800e7f4:	b292      	uxth	r2, r2
 800e7f6:	4631      	mov	r1, r6
 800e7f8:	f7fb f9e4 	bl	8009bc4 <HAL_SPI_Transmit>
 800e7fc:	b9f0      	cbnz	r0, 800e83c <SPIF_WriteFn+0x110>
  HAL_GPIO_WritePin(Handle->Gpio, Handle->Pin, (GPIO_PinState)Select);
 800e7fe:	8a21      	ldrh	r1, [r4, #16]
 800e800:	6860      	ldr	r0, [r4, #4]
 800e802:	2201      	movs	r2, #1
 800e804:	f7f7 fec6 	bl	8006594 <HAL_GPIO_WritePin>
    if (SPIF_WaitForWriting(Handle, 100))
 800e808:	2164      	movs	r1, #100	@ 0x64
 800e80a:	4620      	mov	r0, r4
 800e80c:	f7ff fe96 	bl	800e53c <SPIF_WaitForWriting>
 800e810:	4605      	mov	r5, r0
 800e812:	e793      	b.n	800e73c <SPIF_WriteFn+0x10>
      tx[2] = (address & 0x00FF0000) >> 16;
 800e814:	f88d 200a 	strb.w	r2, [sp, #10]
      tx[0] = SPIF_CMD_PAGEPROG4ADD;
 800e818:	2212      	movs	r2, #18
      tx[3] = (address & 0x0000FF00) >> 8;
 800e81a:	f88d 000b 	strb.w	r0, [sp, #11]
      tx[4] = (address & 0x000000FF);
 800e81e:	f88d 100c 	strb.w	r1, [sp, #12]
      tx[1] = (address & 0xFF000000) >> 24;
 800e822:	0e2d      	lsrs	r5, r5, #24
      tx[0] = SPIF_CMD_PAGEPROG4ADD;
 800e824:	f88d 2008 	strb.w	r2, [sp, #8]
  if (HAL_SPI_Transmit(Handle->HSpi, Tx, Size, Timeout) == HAL_OK)
 800e828:	6820      	ldr	r0, [r4, #0]
      tx[1] = (address & 0xFF000000) >> 24;
 800e82a:	f88d 5009 	strb.w	r5, [sp, #9]
  if (HAL_SPI_Transmit(Handle->HSpi, Tx, Size, Timeout) == HAL_OK)
 800e82e:	2364      	movs	r3, #100	@ 0x64
 800e830:	a902      	add	r1, sp, #8
 800e832:	2205      	movs	r2, #5
 800e834:	f7fb f9c6 	bl	8009bc4 <HAL_SPI_Transmit>
 800e838:	2800      	cmp	r0, #0
 800e83a:	d0d2      	beq.n	800e7e2 <SPIF_WriteFn+0xb6>
  HAL_GPIO_WritePin(Handle->Gpio, Handle->Pin, (GPIO_PinState)Select);
 800e83c:	8a21      	ldrh	r1, [r4, #16]
 800e83e:	6860      	ldr	r0, [r4, #4]
 800e840:	2201      	movs	r2, #1
 800e842:	f7f7 fea7 	bl	8006594 <HAL_GPIO_WritePin>
}
 800e846:	e778      	b.n	800e73a <SPIF_WriteFn+0xe>

0800e848 <SPIF_ReadFn>:

/***********************************************************************************************************/

bool SPIF_ReadFn(SPIF_HandleTypeDef *Handle, uint32_t Address, uint8_t *Data, uint32_t Size)
{
 800e848:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e84a:	4604      	mov	r4, r0
 800e84c:	460d      	mov	r5, r1
 800e84e:	b083      	sub	sp, #12
  HAL_GPIO_WritePin(Handle->Gpio, Handle->Pin, (GPIO_PinState)Select);
 800e850:	8a01      	ldrh	r1, [r0, #16]
 800e852:	6840      	ldr	r0, [r0, #4]
{
 800e854:	4617      	mov	r7, r2
  HAL_GPIO_WritePin(Handle->Gpio, Handle->Pin, (GPIO_PinState)Select);
 800e856:	2200      	movs	r2, #0
{
 800e858:	461e      	mov	r6, r3
  HAL_GPIO_WritePin(Handle->Gpio, Handle->Pin, (GPIO_PinState)Select);
 800e85a:	f7f7 fe9b 	bl	8006594 <HAL_GPIO_WritePin>
#if SPIF_DEBUG != SPIF_DEBUG_DISABLE
    uint32_t dbgTime = HAL_GetTick();
#endif
    dprintf("SPIF_ReadAddress() START ADDRESS %ld\r\n", Address);
    SPIF_CsPin(Handle, 0);
    if (Handle->BlockCnt >= 512)
 800e85e:	69e1      	ldr	r1, [r4, #28]
 800e860:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
    {
      tx[0] = SPIF_CMD_READDATA4ADD;
      tx[1] = (Address & 0xFF000000) >> 24;
      tx[2] = (Address & 0x00FF0000) >> 16;
 800e864:	f3c5 4007 	ubfx	r0, r5, #16, #8
      tx[3] = (Address & 0x0000FF00) >> 8;
 800e868:	f3c5 2307 	ubfx	r3, r5, #8, #8
    if (Handle->BlockCnt >= 512)
 800e86c:	d31b      	bcc.n	800e8a6 <SPIF_ReadFn+0x5e>
      tx[0] = SPIF_CMD_READDATA4ADD;
 800e86e:	b2ea      	uxtb	r2, r5
      tx[4] = (Address & 0x000000FF);
 800e870:	f88d 2004 	strb.w	r2, [sp, #4]
      tx[0] = SPIF_CMD_READDATA4ADD;
 800e874:	2213      	movs	r2, #19
      tx[2] = (Address & 0x00FF0000) >> 16;
 800e876:	f88d 0002 	strb.w	r0, [sp, #2]
      tx[3] = (Address & 0x0000FF00) >> 8;
 800e87a:	f88d 3003 	strb.w	r3, [sp, #3]
      tx[1] = (Address & 0xFF000000) >> 24;
 800e87e:	0e2d      	lsrs	r5, r5, #24
      tx[0] = SPIF_CMD_READDATA4ADD;
 800e880:	f88d 2000 	strb.w	r2, [sp]
  if (HAL_SPI_Transmit(Handle->HSpi, Tx, Size, Timeout) == HAL_OK)
 800e884:	6820      	ldr	r0, [r4, #0]
      tx[1] = (Address & 0xFF000000) >> 24;
 800e886:	f88d 5001 	strb.w	r5, [sp, #1]
  if (HAL_SPI_Transmit(Handle->HSpi, Tx, Size, Timeout) == HAL_OK)
 800e88a:	2364      	movs	r3, #100	@ 0x64
 800e88c:	2205      	movs	r2, #5
 800e88e:	4669      	mov	r1, sp
 800e890:	f7fb f998 	bl	8009bc4 <HAL_SPI_Transmit>
 800e894:	b1b8      	cbz	r0, 800e8c6 <SPIF_ReadFn+0x7e>
  HAL_GPIO_WritePin(Handle->Gpio, Handle->Pin, (GPIO_PinState)Select);
 800e896:	6860      	ldr	r0, [r4, #4]
 800e898:	8a21      	ldrh	r1, [r4, #16]
 800e89a:	2201      	movs	r2, #1
 800e89c:	f7f7 fe7a 	bl	8006594 <HAL_GPIO_WritePin>
  bool retVal = false;
 800e8a0:	2000      	movs	r0, #0
    retVal = true;

  } while (0);

  return retVal;
}
 800e8a2:	b003      	add	sp, #12
 800e8a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
      tx[0] = SPIF_CMD_READDATA3ADD;
 800e8a6:	2203      	movs	r2, #3
      tx[1] = (Address & 0x00FF0000) >> 16;
 800e8a8:	f88d 0001 	strb.w	r0, [sp, #1]
      tx[2] = (Address & 0x0000FF00) >> 8;
 800e8ac:	ba6d      	rev16	r5, r5
      tx[0] = SPIF_CMD_READDATA3ADD;
 800e8ae:	f88d 2000 	strb.w	r2, [sp]
  if (HAL_SPI_Transmit(Handle->HSpi, Tx, Size, Timeout) == HAL_OK)
 800e8b2:	6820      	ldr	r0, [r4, #0]
      tx[2] = (Address & 0x0000FF00) >> 8;
 800e8b4:	f8ad 5002 	strh.w	r5, [sp, #2]
  if (HAL_SPI_Transmit(Handle->HSpi, Tx, Size, Timeout) == HAL_OK)
 800e8b8:	2364      	movs	r3, #100	@ 0x64
 800e8ba:	2204      	movs	r2, #4
 800e8bc:	4669      	mov	r1, sp
 800e8be:	f7fb f981 	bl	8009bc4 <HAL_SPI_Transmit>
 800e8c2:	2800      	cmp	r0, #0
 800e8c4:	d1e7      	bne.n	800e896 <SPIF_ReadFn+0x4e>
  if (HAL_SPI_Receive(Handle->HSpi, Rx, Size, Timeout) == HAL_OK)
 800e8c6:	6820      	ldr	r0, [r4, #0]
 800e8c8:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800e8cc:	b2b2      	uxth	r2, r6
 800e8ce:	4639      	mov	r1, r7
 800e8d0:	f7fb fc28 	bl	800a124 <HAL_SPI_Receive>
 800e8d4:	2800      	cmp	r0, #0
 800e8d6:	d1de      	bne.n	800e896 <SPIF_ReadFn+0x4e>
  HAL_GPIO_WritePin(Handle->Gpio, Handle->Pin, (GPIO_PinState)Select);
 800e8d8:	6860      	ldr	r0, [r4, #4]
 800e8da:	8a21      	ldrh	r1, [r4, #16]
 800e8dc:	2201      	movs	r2, #1
 800e8de:	f7f7 fe59 	bl	8006594 <HAL_GPIO_WritePin>
    retVal = true;
 800e8e2:	2001      	movs	r0, #1
}
 800e8e4:	b003      	add	sp, #12
 800e8e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e8e8 <SPIF_Init>:
bool SPIF_Init(SPIF_HandleTypeDef *Handle, SPI_HandleTypeDef *HSpi, GPIO_TypeDef *Gpio, uint16_t Pin)
{
  bool retVal = false;
  do
  {
    if ((Handle == NULL) || (HSpi == NULL) || (Gpio == NULL) || (Handle->Inited == 1))
 800e8e8:	2800      	cmp	r0, #0
 800e8ea:	d044      	beq.n	800e976 <SPIF_Init+0x8e>
 800e8ec:	2900      	cmp	r1, #0
 800e8ee:	d042      	beq.n	800e976 <SPIF_Init+0x8e>
{
 800e8f0:	b530      	push	{r4, r5, lr}
 800e8f2:	4615      	mov	r5, r2
 800e8f4:	b083      	sub	sp, #12
    if ((Handle == NULL) || (HSpi == NULL) || (Gpio == NULL) || (Handle->Inited == 1))
 800e8f6:	b11a      	cbz	r2, 800e900 <SPIF_Init+0x18>
 800e8f8:	7a82      	ldrb	r2, [r0, #10]
 800e8fa:	2a01      	cmp	r2, #1
 800e8fc:	4604      	mov	r4, r0
 800e8fe:	d102      	bne.n	800e906 <SPIF_Init+0x1e>
  bool retVal = false;
 800e900:	2000      	movs	r0, #0
    }

  } while (0);

  return retVal;
}
 800e902:	b003      	add	sp, #12
 800e904:	bd30      	pop	{r4, r5, pc}
    memset(Handle, 0, sizeof(SPIF_HandleTypeDef));
 800e906:	2200      	movs	r2, #0
    Handle->Gpio = Gpio;
 800e908:	e9c0 1500 	strd	r1, r5, [r0]
    memset(Handle, 0, sizeof(SPIF_HandleTypeDef));
 800e90c:	6082      	str	r2, [r0, #8]
 800e90e:	60c2      	str	r2, [r0, #12]
 800e910:	6142      	str	r2, [r0, #20]
 800e912:	6182      	str	r2, [r0, #24]
 800e914:	61c2      	str	r2, [r0, #28]
    Handle->Pin = Pin;
 800e916:	6103      	str	r3, [r0, #16]
  HAL_GPIO_WritePin(Handle->Gpio, Handle->Pin, (GPIO_PinState)Select);
 800e918:	2201      	movs	r2, #1
 800e91a:	4619      	mov	r1, r3
 800e91c:	4628      	mov	r0, r5
 800e91e:	f7f7 fe39 	bl	8006594 <HAL_GPIO_WritePin>
}
 800e922:	e001      	b.n	800e928 <SPIF_Init+0x40>
  osDelay(d);
 800e924:	f7fe fcd2 	bl	800d2cc <osDelay>
    while (HAL_GetTick() < 20)
 800e928:	f7f6 ff20 	bl	800576c <HAL_GetTick>
 800e92c:	2813      	cmp	r0, #19
  osDelay(d);
 800e92e:	f04f 0001 	mov.w	r0, #1
    while (HAL_GetTick() < 20)
 800e932:	d9f7      	bls.n	800e924 <SPIF_Init+0x3c>
  uint8_t tx[1] = {SPIF_CMD_WRITEDISABLE};
 800e934:	2304      	movs	r3, #4
  HAL_GPIO_WritePin(Handle->Gpio, Handle->Pin, (GPIO_PinState)Select);
 800e936:	8a21      	ldrh	r1, [r4, #16]
 800e938:	6860      	ldr	r0, [r4, #4]
  uint8_t tx[1] = {SPIF_CMD_WRITEDISABLE};
 800e93a:	f88d 3004 	strb.w	r3, [sp, #4]
  HAL_GPIO_WritePin(Handle->Gpio, Handle->Pin, (GPIO_PinState)Select);
 800e93e:	2200      	movs	r2, #0
 800e940:	f7f7 fe28 	bl	8006594 <HAL_GPIO_WritePin>
  if (HAL_SPI_Transmit(Handle->HSpi, Tx, Size, Timeout) == HAL_OK)
 800e944:	a901      	add	r1, sp, #4
 800e946:	6820      	ldr	r0, [r4, #0]
 800e948:	2364      	movs	r3, #100	@ 0x64
 800e94a:	2201      	movs	r2, #1
 800e94c:	f7fb f93a 	bl	8009bc4 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(Handle->Gpio, Handle->Pin, (GPIO_PinState)Select);
 800e950:	8a21      	ldrh	r1, [r4, #16]
  if (HAL_SPI_Transmit(Handle->HSpi, Tx, Size, Timeout) == HAL_OK)
 800e952:	b120      	cbz	r0, 800e95e <SPIF_Init+0x76>
  HAL_GPIO_WritePin(Handle->Gpio, Handle->Pin, (GPIO_PinState)Select);
 800e954:	6860      	ldr	r0, [r4, #4]
 800e956:	2201      	movs	r2, #1
 800e958:	f7f7 fe1c 	bl	8006594 <HAL_GPIO_WritePin>
  return retVal;
 800e95c:	e7d0      	b.n	800e900 <SPIF_Init+0x18>
  HAL_GPIO_WritePin(Handle->Gpio, Handle->Pin, (GPIO_PinState)Select);
 800e95e:	6860      	ldr	r0, [r4, #4]
 800e960:	2201      	movs	r2, #1
 800e962:	f7f7 fe17 	bl	8006594 <HAL_GPIO_WritePin>
    retVal = SPIF_FindChip(Handle);
 800e966:	4620      	mov	r0, r4
 800e968:	f7ff fe22 	bl	800e5b0 <SPIF_FindChip>
    if (retVal)
 800e96c:	2800      	cmp	r0, #0
 800e96e:	d0c7      	beq.n	800e900 <SPIF_Init+0x18>
      Handle->Inited = 1;
 800e970:	2301      	movs	r3, #1
 800e972:	72a3      	strb	r3, [r4, #10]
 800e974:	e7c5      	b.n	800e902 <SPIF_Init+0x1a>
  bool retVal = false;
 800e976:	2000      	movs	r0, #0
}
 800e978:	4770      	bx	lr
 800e97a:	bf00      	nop

0800e97c <SPIF_EraseSector>:
  * @param  Sector: Selected Sector
  *
  * @retval bool: true or false
  */
bool SPIF_EraseSector(SPIF_HandleTypeDef *Handle, uint32_t Sector)
{
 800e97c:	b5f0      	push	{r4, r5, r6, r7, lr}
  while (Handle->Lock)
 800e97e:	7b03      	ldrb	r3, [r0, #12]
{
 800e980:	b085      	sub	sp, #20
 800e982:	4604      	mov	r4, r0
 800e984:	460d      	mov	r5, r1
  while (Handle->Lock)
 800e986:	b12b      	cbz	r3, 800e994 <SPIF_EraseSector+0x18>
  osDelay(d);
 800e988:	2001      	movs	r0, #1
 800e98a:	f7fe fc9f 	bl	800d2cc <osDelay>
  while (Handle->Lock)
 800e98e:	7b23      	ldrb	r3, [r4, #12]
 800e990:	2b00      	cmp	r3, #0
 800e992:	d1f9      	bne.n	800e988 <SPIF_EraseSector+0xc>
  {
#if SPIF_DEBUG != SPIF_DEBUG_DISABLE
    uint32_t dbgTime = HAL_GetTick();
#endif
    dprintf("SPIF_EraseSector() START SECTOR %ld\r\n", Sector);
    if (Sector >= Handle->SectorCnt)
 800e994:	69a3      	ldr	r3, [r4, #24]
  Handle->Lock = 1;
 800e996:	2601      	movs	r6, #1
    if (Sector >= Handle->SectorCnt)
 800e998:	42ab      	cmp	r3, r5
  Handle->Lock = 1;
 800e99a:	7326      	strb	r6, [r4, #12]
    if (Sector >= Handle->SectorCnt)
 800e99c:	d818      	bhi.n	800e9d0 <SPIF_EraseSector+0x54>
  bool retVal = false;
 800e99e:	2500      	movs	r5, #0
  HAL_GPIO_WritePin(Handle->Gpio, Handle->Pin, (GPIO_PinState)Select);
 800e9a0:	8a21      	ldrh	r1, [r4, #16]
 800e9a2:	6860      	ldr	r0, [r4, #4]
  uint8_t tx[1] = {SPIF_CMD_WRITEDISABLE};
 800e9a4:	2304      	movs	r3, #4
  HAL_GPIO_WritePin(Handle->Gpio, Handle->Pin, (GPIO_PinState)Select);
 800e9a6:	2200      	movs	r2, #0
  uint8_t tx[1] = {SPIF_CMD_WRITEDISABLE};
 800e9a8:	f88d 3004 	strb.w	r3, [sp, #4]
  HAL_GPIO_WritePin(Handle->Gpio, Handle->Pin, (GPIO_PinState)Select);
 800e9ac:	f7f7 fdf2 	bl	8006594 <HAL_GPIO_WritePin>
  if (HAL_SPI_Transmit(Handle->HSpi, Tx, Size, Timeout) == HAL_OK)
 800e9b0:	2364      	movs	r3, #100	@ 0x64
 800e9b2:	a901      	add	r1, sp, #4
 800e9b4:	6820      	ldr	r0, [r4, #0]
 800e9b6:	2201      	movs	r2, #1
 800e9b8:	f7fb f904 	bl	8009bc4 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(Handle->Gpio, Handle->Pin, (GPIO_PinState)Select);
 800e9bc:	6860      	ldr	r0, [r4, #4]
 800e9be:	8a21      	ldrh	r1, [r4, #16]
 800e9c0:	2201      	movs	r2, #1
 800e9c2:	f7f7 fde7 	bl	8006594 <HAL_GPIO_WritePin>
  Handle->Lock = 0;
 800e9c6:	2300      	movs	r3, #0
  } while (0);

  SPIF_WriteDisable(Handle);
  SPIF_UnLock(Handle);
  return retVal;
}
 800e9c8:	4628      	mov	r0, r5
  Handle->Lock = 0;
 800e9ca:	7323      	strb	r3, [r4, #12]
}
 800e9cc:	b005      	add	sp, #20
 800e9ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
  uint8_t tx[1] = {SPIF_CMD_WRITEENABLE};
 800e9d0:	2306      	movs	r3, #6
  HAL_GPIO_WritePin(Handle->Gpio, Handle->Pin, (GPIO_PinState)Select);
 800e9d2:	8a21      	ldrh	r1, [r4, #16]
 800e9d4:	6860      	ldr	r0, [r4, #4]
  uint8_t tx[1] = {SPIF_CMD_WRITEENABLE};
 800e9d6:	f88d 3008 	strb.w	r3, [sp, #8]
  HAL_GPIO_WritePin(Handle->Gpio, Handle->Pin, (GPIO_PinState)Select);
 800e9da:	2200      	movs	r2, #0
 800e9dc:	f7f7 fdda 	bl	8006594 <HAL_GPIO_WritePin>
  if (HAL_SPI_Transmit(Handle->HSpi, Tx, Size, Timeout) == HAL_OK)
 800e9e0:	6820      	ldr	r0, [r4, #0]
 800e9e2:	2364      	movs	r3, #100	@ 0x64
 800e9e4:	4632      	mov	r2, r6
 800e9e6:	a902      	add	r1, sp, #8
 800e9e8:	f7fb f8ec 	bl	8009bc4 <HAL_SPI_Transmit>
 800e9ec:	4607      	mov	r7, r0
 800e9ee:	2800      	cmp	r0, #0
 800e9f0:	d142      	bne.n	800ea78 <SPIF_EraseSector+0xfc>
  HAL_GPIO_WritePin(Handle->Gpio, Handle->Pin, (GPIO_PinState)Select);
 800e9f2:	8a21      	ldrh	r1, [r4, #16]
 800e9f4:	6860      	ldr	r0, [r4, #4]
 800e9f6:	4632      	mov	r2, r6
 800e9f8:	f7f7 fdcc 	bl	8006594 <HAL_GPIO_WritePin>
 800e9fc:	8a21      	ldrh	r1, [r4, #16]
 800e9fe:	6860      	ldr	r0, [r4, #4]
 800ea00:	463a      	mov	r2, r7
 800ea02:	f7f7 fdc7 	bl	8006594 <HAL_GPIO_WritePin>
    if (Handle->BlockCnt >= 512)
 800ea06:	69e2      	ldr	r2, [r4, #28]
  uint32_t address = Sector * SPIF_SECTOR_SIZE;
 800ea08:	032d      	lsls	r5, r5, #12
      tx[3] = (address & 0x0000FF00) >> 8;
 800ea0a:	0a2b      	lsrs	r3, r5, #8
    if (Handle->BlockCnt >= 512)
 800ea0c:	f5b2 7f00 	cmp.w	r2, #512	@ 0x200
      tx[3] = (address & 0x0000FF00) >> 8;
 800ea10:	b2db      	uxtb	r3, r3
      tx[2] = (address & 0x00FF0000) >> 16;
 800ea12:	f3c5 4107 	ubfx	r1, r5, #16, #8
    if (Handle->BlockCnt >= 512)
 800ea16:	d31e      	bcc.n	800ea56 <SPIF_EraseSector+0xda>
      tx[0] = SPIF_CMD_SECTORERASE4ADD;
 800ea18:	2221      	movs	r2, #33	@ 0x21
      tx[2] = (address & 0x00FF0000) >> 16;
 800ea1a:	f88d 100a 	strb.w	r1, [sp, #10]
      tx[3] = (address & 0x0000FF00) >> 8;
 800ea1e:	f88d 300b 	strb.w	r3, [sp, #11]
      tx[1] = (address & 0xFF000000) >> 24;
 800ea22:	0e2d      	lsrs	r5, r5, #24
      tx[0] = SPIF_CMD_SECTORERASE4ADD;
 800ea24:	f88d 2008 	strb.w	r2, [sp, #8]
  if (HAL_SPI_Transmit(Handle->HSpi, Tx, Size, Timeout) == HAL_OK)
 800ea28:	6820      	ldr	r0, [r4, #0]
      tx[1] = (address & 0xFF000000) >> 24;
 800ea2a:	f88d 5009 	strb.w	r5, [sp, #9]
  if (HAL_SPI_Transmit(Handle->HSpi, Tx, Size, Timeout) == HAL_OK)
 800ea2e:	2364      	movs	r3, #100	@ 0x64
 800ea30:	a902      	add	r1, sp, #8
 800ea32:	2205      	movs	r2, #5
      tx[4] = (address & 0x000000FF);
 800ea34:	f88d 700c 	strb.w	r7, [sp, #12]
  if (HAL_SPI_Transmit(Handle->HSpi, Tx, Size, Timeout) == HAL_OK)
 800ea38:	f7fb f8c4 	bl	8009bc4 <HAL_SPI_Transmit>
 800ea3c:	b9e0      	cbnz	r0, 800ea78 <SPIF_EraseSector+0xfc>
  HAL_GPIO_WritePin(Handle->Gpio, Handle->Pin, (GPIO_PinState)Select);
 800ea3e:	8a21      	ldrh	r1, [r4, #16]
 800ea40:	6860      	ldr	r0, [r4, #4]
 800ea42:	2201      	movs	r2, #1
 800ea44:	f7f7 fda6 	bl	8006594 <HAL_GPIO_WritePin>
    if (SPIF_WaitForWriting(Handle, 1000))
 800ea48:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800ea4c:	4620      	mov	r0, r4
 800ea4e:	f7ff fd75 	bl	800e53c <SPIF_WaitForWriting>
 800ea52:	4605      	mov	r5, r0
 800ea54:	e7a4      	b.n	800e9a0 <SPIF_EraseSector+0x24>
      tx[0] = SPIF_CMD_SECTORERASE3ADD;
 800ea56:	2220      	movs	r2, #32
      tx[1] = (address & 0x00FF0000) >> 16;
 800ea58:	f88d 1009 	strb.w	r1, [sp, #9]
      tx[2] = (address & 0x0000FF00) >> 8;
 800ea5c:	f88d 300a 	strb.w	r3, [sp, #10]
      tx[0] = SPIF_CMD_SECTORERASE3ADD;
 800ea60:	f88d 2008 	strb.w	r2, [sp, #8]
  if (HAL_SPI_Transmit(Handle->HSpi, Tx, Size, Timeout) == HAL_OK)
 800ea64:	6820      	ldr	r0, [r4, #0]
      tx[3] = (address & 0x000000FF);
 800ea66:	f88d 700b 	strb.w	r7, [sp, #11]
  if (HAL_SPI_Transmit(Handle->HSpi, Tx, Size, Timeout) == HAL_OK)
 800ea6a:	a902      	add	r1, sp, #8
 800ea6c:	2364      	movs	r3, #100	@ 0x64
 800ea6e:	2204      	movs	r2, #4
 800ea70:	f7fb f8a8 	bl	8009bc4 <HAL_SPI_Transmit>
 800ea74:	2800      	cmp	r0, #0
 800ea76:	d0e2      	beq.n	800ea3e <SPIF_EraseSector+0xc2>
  HAL_GPIO_WritePin(Handle->Gpio, Handle->Pin, (GPIO_PinState)Select);
 800ea78:	8a21      	ldrh	r1, [r4, #16]
 800ea7a:	6860      	ldr	r0, [r4, #4]
 800ea7c:	4632      	mov	r2, r6
 800ea7e:	f7f7 fd89 	bl	8006594 <HAL_GPIO_WritePin>
  return retVal;
 800ea82:	e78c      	b.n	800e99e <SPIF_EraseSector+0x22>

0800ea84 <SPIF_WritePage>:
  * @param  Offset: The start point for writing data. (in byte)
  *
  * @retval bool: true or false
  */
bool SPIF_WritePage(SPIF_HandleTypeDef *Handle, uint32_t PageNumber, uint8_t *Data, uint32_t Size, uint32_t Offset)
{
 800ea84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea88:	4698      	mov	r8, r3
  while (Handle->Lock)
 800ea8a:	7b03      	ldrb	r3, [r0, #12]
{
 800ea8c:	b082      	sub	sp, #8
 800ea8e:	4605      	mov	r5, r0
 800ea90:	460e      	mov	r6, r1
 800ea92:	4617      	mov	r7, r2
  while (Handle->Lock)
 800ea94:	b12b      	cbz	r3, 800eaa2 <SPIF_WritePage+0x1e>
  osDelay(d);
 800ea96:	2001      	movs	r0, #1
 800ea98:	f7fe fc18 	bl	800d2cc <osDelay>
  while (Handle->Lock)
 800ea9c:	7b2c      	ldrb	r4, [r5, #12]
 800ea9e:	2c00      	cmp	r4, #0
 800eaa0:	d1f9      	bne.n	800ea96 <SPIF_WritePage+0x12>
  SPIF_Lock(Handle);
  bool retVal = false;
  retVal = SPIF_WriteFn(Handle, PageNumber, Data, Size, Offset);
 800eaa2:	9b08      	ldr	r3, [sp, #32]
 800eaa4:	9300      	str	r3, [sp, #0]
  Handle->Lock = 1;
 800eaa6:	2401      	movs	r4, #1
  retVal = SPIF_WriteFn(Handle, PageNumber, Data, Size, Offset);
 800eaa8:	4643      	mov	r3, r8
 800eaaa:	463a      	mov	r2, r7
 800eaac:	4631      	mov	r1, r6
 800eaae:	4628      	mov	r0, r5
  Handle->Lock = 1;
 800eab0:	732c      	strb	r4, [r5, #12]
  retVal = SPIF_WriteFn(Handle, PageNumber, Data, Size, Offset);
 800eab2:	f7ff fe3b 	bl	800e72c <SPIF_WriteFn>
  Handle->Lock = 0;
 800eab6:	2300      	movs	r3, #0
 800eab8:	732b      	strb	r3, [r5, #12]
  SPIF_UnLock(Handle);
  return retVal;
}
 800eaba:	b002      	add	sp, #8
 800eabc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800eac0 <SPIF_ReadPage>:
  * @param  Offset: The start point for Reading data. (in byte)
  *
  * @retval bool: true or false
  */
bool SPIF_ReadPage(SPIF_HandleTypeDef *Handle, uint32_t PageNumber, uint8_t *Data, uint32_t Size, uint32_t Offset)
{
 800eac0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eac4:	461f      	mov	r7, r3
  while (Handle->Lock)
 800eac6:	7b03      	ldrb	r3, [r0, #12]
{
 800eac8:	9e08      	ldr	r6, [sp, #32]
 800eaca:	4605      	mov	r5, r0
 800eacc:	4688      	mov	r8, r1
 800eace:	4691      	mov	r9, r2
  while (Handle->Lock)
 800ead0:	b12b      	cbz	r3, 800eade <SPIF_ReadPage+0x1e>
  osDelay(d);
 800ead2:	2001      	movs	r0, #1
 800ead4:	f7fe fbfa 	bl	800d2cc <osDelay>
  while (Handle->Lock)
 800ead8:	7b2c      	ldrb	r4, [r5, #12]
 800eada:	2c00      	cmp	r4, #0
 800eadc:	d1f9      	bne.n	800ead2 <SPIF_ReadPage+0x12>
  SPIF_Lock(Handle);
  bool retVal = false;
  uint32_t address = SPIF_PageToAddress(PageNumber) + Offset;
  uint32_t maximum = SPIF_PAGE_SIZE - Offset;
 800eade:	f5c6 7380 	rsb	r3, r6, #256	@ 0x100
  if (Size > maximum)
  {
    Size = maximum;
  }
  retVal = SPIF_ReadFn(Handle, address, Data, Size);
 800eae2:	42bb      	cmp	r3, r7
  Handle->Lock = 1;
 800eae4:	f04f 0401 	mov.w	r4, #1
  retVal = SPIF_ReadFn(Handle, address, Data, Size);
 800eae8:	bf28      	it	cs
 800eaea:	463b      	movcs	r3, r7
 800eaec:	464a      	mov	r2, r9
 800eaee:	eb06 2108 	add.w	r1, r6, r8, lsl #8
 800eaf2:	4628      	mov	r0, r5
  Handle->Lock = 1;
 800eaf4:	732c      	strb	r4, [r5, #12]
  retVal = SPIF_ReadFn(Handle, address, Data, Size);
 800eaf6:	f7ff fea7 	bl	800e848 <SPIF_ReadFn>
  Handle->Lock = 0;
 800eafa:	2300      	movs	r3, #0
 800eafc:	732b      	strb	r3, [r5, #12]
  SPIF_UnLock(Handle);
  return retVal;
}
 800eafe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eb02:	bf00      	nop

0800eb04 <SPIF_ReadSector>:
  * @param  Offset: The start point for Reading data. (in byte)
  *
  * @retval bool: true or false
  */
bool SPIF_ReadSector(SPIF_HandleTypeDef *Handle, uint32_t SectorNumber, uint8_t *Data, uint32_t Size, uint32_t Offset)
{
 800eb04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eb08:	461f      	mov	r7, r3
  while (Handle->Lock)
 800eb0a:	7b03      	ldrb	r3, [r0, #12]
{
 800eb0c:	9e08      	ldr	r6, [sp, #32]
 800eb0e:	4605      	mov	r5, r0
 800eb10:	4688      	mov	r8, r1
 800eb12:	4691      	mov	r9, r2
  while (Handle->Lock)
 800eb14:	b12b      	cbz	r3, 800eb22 <SPIF_ReadSector+0x1e>
  osDelay(d);
 800eb16:	2001      	movs	r0, #1
 800eb18:	f7fe fbd8 	bl	800d2cc <osDelay>
  while (Handle->Lock)
 800eb1c:	7b2c      	ldrb	r4, [r5, #12]
 800eb1e:	2c00      	cmp	r4, #0
 800eb20:	d1f9      	bne.n	800eb16 <SPIF_ReadSector+0x12>
  SPIF_Lock(Handle);
  bool retVal = false;
  uint32_t address = SPIF_SectorToAddress(SectorNumber) + Offset;
  uint32_t maximum = SPIF_SECTOR_SIZE - Offset;
 800eb22:	f5c6 5380 	rsb	r3, r6, #4096	@ 0x1000
  if (Size > maximum)
  {
    Size = maximum;
  }
  retVal = SPIF_ReadFn(Handle, address, Data, Size);
 800eb26:	42bb      	cmp	r3, r7
  Handle->Lock = 1;
 800eb28:	f04f 0401 	mov.w	r4, #1
  retVal = SPIF_ReadFn(Handle, address, Data, Size);
 800eb2c:	bf28      	it	cs
 800eb2e:	463b      	movcs	r3, r7
 800eb30:	464a      	mov	r2, r9
 800eb32:	eb06 3108 	add.w	r1, r6, r8, lsl #12
 800eb36:	4628      	mov	r0, r5
  Handle->Lock = 1;
 800eb38:	732c      	strb	r4, [r5, #12]
  retVal = SPIF_ReadFn(Handle, address, Data, Size);
 800eb3a:	f7ff fe85 	bl	800e848 <SPIF_ReadFn>
  Handle->Lock = 0;
 800eb3e:	2300      	movs	r3, #0
 800eb40:	732b      	strb	r3, [r5, #12]
  SPIF_UnLock(Handle);
  return retVal;
}
 800eb42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eb46:	bf00      	nop

0800eb48 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800eb48:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800eb4a:	4918      	ldr	r1, [pc, #96]	@ (800ebac <MX_USB_Device_Init+0x64>)
 800eb4c:	4818      	ldr	r0, [pc, #96]	@ (800ebb0 <MX_USB_Device_Init+0x68>)
 800eb4e:	2200      	movs	r2, #0
 800eb50:	f7fd fee2 	bl	800c918 <USBD_Init>
 800eb54:	b970      	cbnz	r0, 800eb74 <MX_USB_Device_Init+0x2c>
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800eb56:	4917      	ldr	r1, [pc, #92]	@ (800ebb4 <MX_USB_Device_Init+0x6c>)
 800eb58:	4815      	ldr	r0, [pc, #84]	@ (800ebb0 <MX_USB_Device_Init+0x68>)
 800eb5a:	f7fd fef1 	bl	800c940 <USBD_RegisterClass>
 800eb5e:	b988      	cbnz	r0, 800eb84 <MX_USB_Device_Init+0x3c>
    Error_Handler();
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800eb60:	4915      	ldr	r1, [pc, #84]	@ (800ebb8 <MX_USB_Device_Init+0x70>)
 800eb62:	4813      	ldr	r0, [pc, #76]	@ (800ebb0 <MX_USB_Device_Init+0x68>)
 800eb64:	f7fd fe7c 	bl	800c860 <USBD_CDC_RegisterInterface>
 800eb68:	b9a0      	cbnz	r0, 800eb94 <MX_USB_Device_Init+0x4c>
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800eb6a:	4811      	ldr	r0, [pc, #68]	@ (800ebb0 <MX_USB_Device_Init+0x68>)
 800eb6c:	f7fd ff04 	bl	800c978 <USBD_Start>
 800eb70:	b9b8      	cbnz	r0, 800eba2 <MX_USB_Device_Init+0x5a>
    Error_Handler();
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800eb72:	bd08      	pop	{r3, pc}
    Error_Handler();
 800eb74:	f7f3 fb68 	bl	8002248 <Error_Handler>
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800eb78:	490e      	ldr	r1, [pc, #56]	@ (800ebb4 <MX_USB_Device_Init+0x6c>)
 800eb7a:	480d      	ldr	r0, [pc, #52]	@ (800ebb0 <MX_USB_Device_Init+0x68>)
 800eb7c:	f7fd fee0 	bl	800c940 <USBD_RegisterClass>
 800eb80:	2800      	cmp	r0, #0
 800eb82:	d0ed      	beq.n	800eb60 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800eb84:	f7f3 fb60 	bl	8002248 <Error_Handler>
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800eb88:	490b      	ldr	r1, [pc, #44]	@ (800ebb8 <MX_USB_Device_Init+0x70>)
 800eb8a:	4809      	ldr	r0, [pc, #36]	@ (800ebb0 <MX_USB_Device_Init+0x68>)
 800eb8c:	f7fd fe68 	bl	800c860 <USBD_CDC_RegisterInterface>
 800eb90:	2800      	cmp	r0, #0
 800eb92:	d0ea      	beq.n	800eb6a <MX_USB_Device_Init+0x22>
    Error_Handler();
 800eb94:	f7f3 fb58 	bl	8002248 <Error_Handler>
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800eb98:	4805      	ldr	r0, [pc, #20]	@ (800ebb0 <MX_USB_Device_Init+0x68>)
 800eb9a:	f7fd feed 	bl	800c978 <USBD_Start>
 800eb9e:	2800      	cmp	r0, #0
 800eba0:	d0e7      	beq.n	800eb72 <MX_USB_Device_Init+0x2a>
}
 800eba2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 800eba6:	f7f3 bb4f 	b.w	8002248 <Error_Handler>
 800ebaa:	bf00      	nop
 800ebac:	20000114 	.word	0x20000114
 800ebb0:	20004080 	.word	0x20004080
 800ebb4:	20000084 	.word	0x20000084
 800ebb8:	200000cc 	.word	0x200000cc

0800ebbc <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 800ebbc:	2000      	movs	r0, #0
 800ebbe:	4770      	bx	lr

0800ebc0 <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 800ebc0:	2000      	movs	r0, #0
 800ebc2:	4770      	bx	lr

0800ebc4 <CDC_TransmitCplt_FS>:
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
}
 800ebc4:	2000      	movs	r0, #0
 800ebc6:	4770      	bx	lr

0800ebc8 <CDC_Receive_FS>:
{
 800ebc8:	b570      	push	{r4, r5, r6, lr}
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800ebca:	4e0e      	ldr	r6, [pc, #56]	@ (800ec04 <CDC_Receive_FS+0x3c>)
{
 800ebcc:	4604      	mov	r4, r0
 800ebce:	460d      	mov	r5, r1
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800ebd0:	4630      	mov	r0, r6
 800ebd2:	4621      	mov	r1, r4
 800ebd4:	f7fd fe5e 	bl	800c894 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800ebd8:	4630      	mov	r0, r6
  memset (usbbuffer, '\0', 64);  // clear the buffer
 800ebda:	4e0b      	ldr	r6, [pc, #44]	@ (800ec08 <CDC_Receive_FS+0x40>)
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800ebdc:	f7fd fe82 	bl	800c8e4 <USBD_CDC_ReceivePacket>
  memset (usbbuffer, '\0', 64);  // clear the buffer
 800ebe0:	2240      	movs	r2, #64	@ 0x40
 800ebe2:	2100      	movs	r1, #0
 800ebe4:	4630      	mov	r0, r6
 800ebe6:	f001 faea 	bl	80101be <memset>
  memcpy((uint8_t *) usbbuffer,(uint8_t *) Buf, len);  // copy the data to the buffer
 800ebea:	782d      	ldrb	r5, [r5, #0]
 800ebec:	4621      	mov	r1, r4
 800ebee:	462a      	mov	r2, r5
 800ebf0:	4630      	mov	r0, r6
 800ebf2:	f001 fb64 	bl	80102be <memcpy>
  memset(Buf, '\0', len);
 800ebf6:	462a      	mov	r2, r5
 800ebf8:	2100      	movs	r1, #0
 800ebfa:	4620      	mov	r0, r4
 800ebfc:	f001 fadf 	bl	80101be <memset>
}
 800ec00:	2000      	movs	r0, #0
 800ec02:	bd70      	pop	{r4, r5, r6, pc}
 800ec04:	20004080 	.word	0x20004080
 800ec08:	20000650 	.word	0x20000650

0800ec0c <CDC_Init_FS>:
{
 800ec0c:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800ec0e:	4c06      	ldr	r4, [pc, #24]	@ (800ec28 <CDC_Init_FS+0x1c>)
 800ec10:	4906      	ldr	r1, [pc, #24]	@ (800ec2c <CDC_Init_FS+0x20>)
 800ec12:	2200      	movs	r2, #0
 800ec14:	4620      	mov	r0, r4
 800ec16:	f7fd fe2f 	bl	800c878 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800ec1a:	4905      	ldr	r1, [pc, #20]	@ (800ec30 <CDC_Init_FS+0x24>)
 800ec1c:	4620      	mov	r0, r4
 800ec1e:	f7fd fe39 	bl	800c894 <USBD_CDC_SetRxBuffer>
}
 800ec22:	2000      	movs	r0, #0
 800ec24:	bd10      	pop	{r4, pc}
 800ec26:	bf00      	nop
 800ec28:	20004080 	.word	0x20004080
 800ec2c:	2000435c 	.word	0x2000435c
 800ec30:	20004b5c 	.word	0x20004b5c

0800ec34 <CDC_Transmit_FS>:
{
 800ec34:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800ec36:	4c09      	ldr	r4, [pc, #36]	@ (800ec5c <CDC_Transmit_FS+0x28>)
 800ec38:	f8d4 32bc 	ldr.w	r3, [r4, #700]	@ 0x2bc
  if (hcdc->TxState != 0){
 800ec3c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800ec40:	b10b      	cbz	r3, 800ec46 <CDC_Transmit_FS+0x12>
}
 800ec42:	2001      	movs	r0, #1
 800ec44:	bd10      	pop	{r4, pc}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800ec46:	460a      	mov	r2, r1
 800ec48:	4601      	mov	r1, r0
 800ec4a:	4620      	mov	r0, r4
 800ec4c:	f7fd fe14 	bl	800c878 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800ec50:	4620      	mov	r0, r4
}
 800ec52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800ec56:	f7fd be29 	b.w	800c8ac <USBD_CDC_TransmitPacket>
 800ec5a:	bf00      	nop
 800ec5c:	20004080 	.word	0x20004080

0800ec60 <USBD_CDC_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800ec60:	2312      	movs	r3, #18
  return USBD_CDC_DeviceDesc;
}
 800ec62:	4801      	ldr	r0, [pc, #4]	@ (800ec68 <USBD_CDC_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_CDC_DeviceDesc);
 800ec64:	800b      	strh	r3, [r1, #0]
}
 800ec66:	4770      	bx	lr
 800ec68:	20000100 	.word	0x20000100

0800ec6c <USBD_CDC_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ec6c:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 800ec6e:	4801      	ldr	r0, [pc, #4]	@ (800ec74 <USBD_CDC_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 800ec70:	800b      	strh	r3, [r1, #0]
}
 800ec72:	4770      	bx	lr
 800ec74:	200000fc 	.word	0x200000fc

0800ec78 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ec78:	b510      	push	{r4, lr}
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ec7a:	4c04      	ldr	r4, [pc, #16]	@ (800ec8c <USBD_CDC_ManufacturerStrDescriptor+0x14>)
 800ec7c:	4804      	ldr	r0, [pc, #16]	@ (800ec90 <USBD_CDC_ManufacturerStrDescriptor+0x18>)
{
 800ec7e:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ec80:	4621      	mov	r1, r4
 800ec82:	f7fe fa87 	bl	800d194 <USBD_GetString>
  return USBD_StrDesc;
}
 800ec86:	4620      	mov	r0, r4
 800ec88:	bd10      	pop	{r4, pc}
 800ec8a:	bf00      	nop
 800ec8c:	2000535c 	.word	0x2000535c
 800ec90:	0801810c 	.word	0x0801810c

0800ec94 <USBD_CDC_ProductStrDescriptor>:
{
 800ec94:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800ec96:	4c04      	ldr	r4, [pc, #16]	@ (800eca8 <USBD_CDC_ProductStrDescriptor+0x14>)
 800ec98:	4804      	ldr	r0, [pc, #16]	@ (800ecac <USBD_CDC_ProductStrDescriptor+0x18>)
{
 800ec9a:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800ec9c:	4621      	mov	r1, r4
 800ec9e:	f7fe fa79 	bl	800d194 <USBD_GetString>
}
 800eca2:	4620      	mov	r0, r4
 800eca4:	bd10      	pop	{r4, pc}
 800eca6:	bf00      	nop
 800eca8:	2000535c 	.word	0x2000535c
 800ecac:	08018120 	.word	0x08018120

0800ecb0 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ecb0:	b510      	push	{r4, lr}
  if(speed == USBD_SPEED_HIGH)
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800ecb2:	4c04      	ldr	r4, [pc, #16]	@ (800ecc4 <USBD_CDC_ConfigStrDescriptor+0x14>)
 800ecb4:	4804      	ldr	r0, [pc, #16]	@ (800ecc8 <USBD_CDC_ConfigStrDescriptor+0x18>)
{
 800ecb6:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800ecb8:	4621      	mov	r1, r4
 800ecba:	f7fe fa6b 	bl	800d194 <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 800ecbe:	4620      	mov	r0, r4
 800ecc0:	bd10      	pop	{r4, pc}
 800ecc2:	bf00      	nop
 800ecc4:	2000535c 	.word	0x2000535c
 800ecc8:	08018138 	.word	0x08018138

0800eccc <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eccc:	b510      	push	{r4, lr}
  if(speed == 0)
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800ecce:	4c04      	ldr	r4, [pc, #16]	@ (800ece0 <USBD_CDC_InterfaceStrDescriptor+0x14>)
 800ecd0:	4804      	ldr	r0, [pc, #16]	@ (800ece4 <USBD_CDC_InterfaceStrDescriptor+0x18>)
{
 800ecd2:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800ecd4:	4621      	mov	r1, r4
 800ecd6:	f7fe fa5d 	bl	800d194 <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 800ecda:	4620      	mov	r0, r4
 800ecdc:	bd10      	pop	{r4, pc}
 800ecde:	bf00      	nop
 800ece0:	2000535c 	.word	0x2000535c
 800ece4:	08018144 	.word	0x08018144

0800ece8 <USBD_CDC_SerialStrDescriptor>:
{
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ece8:	4a51      	ldr	r2, [pc, #324]	@ (800ee30 <USBD_CDC_SerialStrDescriptor+0x148>)
 800ecea:	f8d2 3590 	ldr.w	r3, [r2, #1424]	@ 0x590
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
  deviceserial2 = *(uint32_t *) DEVICE_ID3;

  deviceserial0 += deviceserial2;
 800ecee:	f8d2 0598 	ldr.w	r0, [r2, #1432]	@ 0x598
  *length = USB_SIZ_STRING_SERIAL;
 800ecf2:	f04f 0c1a 	mov.w	ip, #26

  if (deviceserial0 != 0)
 800ecf6:	181b      	adds	r3, r3, r0
  *length = USB_SIZ_STRING_SERIAL;
 800ecf8:	f8a1 c000 	strh.w	ip, [r1]
  if (deviceserial0 != 0)
 800ecfc:	d101      	bne.n	800ed02 <USBD_CDC_SerialStrDescriptor+0x1a>
}
 800ecfe:	484d      	ldr	r0, [pc, #308]	@ (800ee34 <USBD_CDC_SerialStrDescriptor+0x14c>)
 800ed00:	4770      	bx	lr
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ed02:	f8d2 1594 	ldr.w	r1, [r2, #1428]	@ 0x594

  for (idx = 0; idx < len; idx++)
  {
    if (((value >> 28)) < 0xA)
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ed06:	4a4b      	ldr	r2, [pc, #300]	@ (800ee34 <USBD_CDC_SerialStrDescriptor+0x14c>)
 800ed08:	0f18      	lsrs	r0, r3, #28
    if (((value >> 28)) < 0xA)
 800ed0a:	f1b3 4f20 	cmp.w	r3, #2684354560	@ 0xa0000000
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 800ed0e:	f04f 0c00 	mov.w	ip, #0
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ed12:	bf2c      	ite	cs
 800ed14:	3037      	addcs	r0, #55	@ 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800ed16:	3030      	addcc	r0, #48	@ 0x30
    pbuf[2 * idx + 1] = 0;
 800ed18:	f882 c003 	strb.w	ip, [r2, #3]
    if (((value >> 28)) < 0xA)
 800ed1c:	f3c3 6c03 	ubfx	ip, r3, #24, #4
 800ed20:	f1bc 0f09 	cmp.w	ip, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 800ed24:	7090      	strb	r0, [r2, #2]
 800ed26:	4660      	mov	r0, ip
    pbuf[2 * idx + 1] = 0;
 800ed28:	f04f 0c00 	mov.w	ip, #0
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ed2c:	bf8c      	ite	hi
 800ed2e:	3037      	addhi	r0, #55	@ 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800ed30:	3030      	addls	r0, #48	@ 0x30
    pbuf[2 * idx + 1] = 0;
 800ed32:	f882 c005 	strb.w	ip, [r2, #5]
    if (((value >> 28)) < 0xA)
 800ed36:	f3c3 5c03 	ubfx	ip, r3, #20, #4
 800ed3a:	f1bc 0f09 	cmp.w	ip, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 800ed3e:	7110      	strb	r0, [r2, #4]
 800ed40:	4660      	mov	r0, ip
    pbuf[2 * idx + 1] = 0;
 800ed42:	f04f 0c00 	mov.w	ip, #0
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ed46:	bf8c      	ite	hi
 800ed48:	3037      	addhi	r0, #55	@ 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800ed4a:	3030      	addls	r0, #48	@ 0x30
    pbuf[2 * idx + 1] = 0;
 800ed4c:	f882 c007 	strb.w	ip, [r2, #7]
    if (((value >> 28)) < 0xA)
 800ed50:	f3c3 4c03 	ubfx	ip, r3, #16, #4
 800ed54:	f1bc 0f09 	cmp.w	ip, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 800ed58:	7190      	strb	r0, [r2, #6]
 800ed5a:	4660      	mov	r0, ip
    pbuf[2 * idx + 1] = 0;
 800ed5c:	f04f 0c00 	mov.w	ip, #0
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ed60:	bf8c      	ite	hi
 800ed62:	3037      	addhi	r0, #55	@ 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800ed64:	3030      	addls	r0, #48	@ 0x30
    pbuf[2 * idx + 1] = 0;
 800ed66:	f882 c009 	strb.w	ip, [r2, #9]
    if (((value >> 28)) < 0xA)
 800ed6a:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 800ed6e:	f1bc 0f09 	cmp.w	ip, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 800ed72:	7210      	strb	r0, [r2, #8]
 800ed74:	4660      	mov	r0, ip
    pbuf[2 * idx + 1] = 0;
 800ed76:	f04f 0c00 	mov.w	ip, #0
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ed7a:	bf8c      	ite	hi
 800ed7c:	3037      	addhi	r0, #55	@ 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800ed7e:	3030      	addls	r0, #48	@ 0x30
    pbuf[2 * idx + 1] = 0;
 800ed80:	f882 c00b 	strb.w	ip, [r2, #11]
    if (((value >> 28)) < 0xA)
 800ed84:	f3c3 2c03 	ubfx	ip, r3, #8, #4
 800ed88:	f1bc 0f09 	cmp.w	ip, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 800ed8c:	7290      	strb	r0, [r2, #10]
 800ed8e:	4660      	mov	r0, ip
    pbuf[2 * idx + 1] = 0;
 800ed90:	f04f 0c00 	mov.w	ip, #0
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ed94:	bf8c      	ite	hi
 800ed96:	3037      	addhi	r0, #55	@ 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800ed98:	3030      	addls	r0, #48	@ 0x30
    pbuf[2 * idx + 1] = 0;
 800ed9a:	f882 c00d 	strb.w	ip, [r2, #13]
    if (((value >> 28)) < 0xA)
 800ed9e:	f3c3 1c03 	ubfx	ip, r3, #4, #4
 800eda2:	f1bc 0f09 	cmp.w	ip, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 800eda6:	7310      	strb	r0, [r2, #12]
 800eda8:	4660      	mov	r0, ip
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800edaa:	bf8c      	ite	hi
 800edac:	3037      	addhi	r0, #55	@ 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800edae:	3030      	addls	r0, #48	@ 0x30
 800edb0:	7390      	strb	r0, [r2, #14]
    if (((value >> 28)) < 0xA)
 800edb2:	f003 000f 	and.w	r0, r3, #15
      pbuf[2 * idx] = (value >> 28) + '0';
 800edb6:	4603      	mov	r3, r0
    if (((value >> 28)) < 0xA)
 800edb8:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 800edba:	bf94      	ite	ls
 800edbc:	3330      	addls	r3, #48	@ 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800edbe:	3337      	addhi	r3, #55	@ 0x37
    pbuf[2 * idx + 1] = 0;
 800edc0:	2000      	movs	r0, #0
    if (((value >> 28)) < 0xA)
 800edc2:	f1b1 4f20 	cmp.w	r1, #2684354560	@ 0xa0000000
      pbuf[2 * idx] = (value >> 28) + '0';
 800edc6:	7413      	strb	r3, [r2, #16]
 800edc8:	ea4f 7311 	mov.w	r3, r1, lsr #28
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800edcc:	bf2c      	ite	cs
 800edce:	3337      	addcs	r3, #55	@ 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800edd0:	3330      	addcc	r3, #48	@ 0x30
    pbuf[2 * idx + 1] = 0;
 800edd2:	7450      	strb	r0, [r2, #17]
    if (((value >> 28)) < 0xA)
 800edd4:	f3c1 6003 	ubfx	r0, r1, #24, #4
 800edd8:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 800edda:	7493      	strb	r3, [r2, #18]
 800eddc:	4603      	mov	r3, r0
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800edde:	bf8c      	ite	hi
 800ede0:	3337      	addhi	r3, #55	@ 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800ede2:	3330      	addls	r3, #48	@ 0x30
    if (((value >> 28)) < 0xA)
 800ede4:	f3c1 5003 	ubfx	r0, r1, #20, #4
 800ede8:	2809      	cmp	r0, #9
    pbuf[2 * idx + 1] = 0;
 800edea:	f04f 0c00 	mov.w	ip, #0
      pbuf[2 * idx] = (value >> 28) + '0';
 800edee:	7513      	strb	r3, [r2, #20]
 800edf0:	4603      	mov	r3, r0
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800edf2:	bf8c      	ite	hi
 800edf4:	3337      	addhi	r3, #55	@ 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800edf6:	3330      	addls	r3, #48	@ 0x30
    if (((value >> 28)) < 0xA)
 800edf8:	f3c1 4003 	ubfx	r0, r1, #16, #4
    pbuf[2 * idx + 1] = 0;
 800edfc:	f882 c00f 	strb.w	ip, [r2, #15]
 800ee00:	f04f 0c00 	mov.w	ip, #0
    if (((value >> 28)) < 0xA)
 800ee04:	2809      	cmp	r0, #9
    pbuf[2 * idx + 1] = 0;
 800ee06:	f882 c013 	strb.w	ip, [r2, #19]
      pbuf[2 * idx] = (value >> 28) + '0';
 800ee0a:	7593      	strb	r3, [r2, #22]
    pbuf[2 * idx + 1] = 0;
 800ee0c:	f04f 0c00 	mov.w	ip, #0
      pbuf[2 * idx] = (value >> 28) + '0';
 800ee10:	4603      	mov	r3, r0
    pbuf[2 * idx + 1] = 0;
 800ee12:	f882 c015 	strb.w	ip, [r2, #21]
      pbuf[2 * idx] = (value >> 28) + '0';
 800ee16:	bf98      	it	ls
 800ee18:	3330      	addls	r3, #48	@ 0x30
    pbuf[2 * idx + 1] = 0;
 800ee1a:	f04f 0c00 	mov.w	ip, #0
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ee1e:	bf88      	it	hi
 800ee20:	3337      	addhi	r3, #55	@ 0x37
    pbuf[2 * idx + 1] = 0;
 800ee22:	2100      	movs	r1, #0
}
 800ee24:	4803      	ldr	r0, [pc, #12]	@ (800ee34 <USBD_CDC_SerialStrDescriptor+0x14c>)
    pbuf[2 * idx + 1] = 0;
 800ee26:	f882 c017 	strb.w	ip, [r2, #23]
      pbuf[2 * idx] = (value >> 28) + '0';
 800ee2a:	7613      	strb	r3, [r2, #24]
    pbuf[2 * idx + 1] = 0;
 800ee2c:	7651      	strb	r1, [r2, #25]
}
 800ee2e:	4770      	bx	lr
 800ee30:	1fff7000 	.word	0x1fff7000
 800ee34:	200000e0 	.word	0x200000e0

0800ee38 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ee38:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(pcdHandle->Instance==USB)
 800ee3a:	4b1b      	ldr	r3, [pc, #108]	@ (800eea8 <HAL_PCD_MspInit+0x70>)
 800ee3c:	6802      	ldr	r2, [r0, #0]
{
 800ee3e:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ee40:	2400      	movs	r4, #0
  if(pcdHandle->Instance==USB)
 800ee42:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ee44:	e9cd 4402 	strd	r4, r4, [sp, #8]
 800ee48:	e9cd 4404 	strd	r4, r4, [sp, #16]
 800ee4c:	9406      	str	r4, [sp, #24]
  if(pcdHandle->Instance==USB)
 800ee4e:	d001      	beq.n	800ee54 <HAL_PCD_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800ee50:	b009      	add	sp, #36	@ 0x24
 800ee52:	bd30      	pop	{r4, r5, pc}
  SET_BIT(RCC->AHB2ENR, Periphs);
 800ee54:	f04f 45b0 	mov.w	r5, #1476395008	@ 0x58000000
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800ee58:	f44f 52c0 	mov.w	r2, #6144	@ 0x1800
 800ee5c:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 800ee5e:	f043 0301 	orr.w	r3, r3, #1
 800ee62:	64eb      	str	r3, [r5, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800ee64:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 800ee66:	f003 0301 	and.w	r3, r3, #1
 800ee6a:	9301      	str	r3, [sp, #4]
 800ee6c:	2302      	movs	r3, #2
 800ee6e:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ee72:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 800ee74:	230a      	movs	r3, #10
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ee76:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
  (void)tmpreg;
 800ee7a:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 800ee7c:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ee7e:	f7f7 fa93 	bl	80063a8 <HAL_GPIO_Init>
  SET_BIT(RCC->APB1ENR1, Periphs);
 800ee82:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 800ee84:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800ee88:	65ab      	str	r3, [r5, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800ee8a:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 800ee8c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
    HAL_NVIC_SetPriority(USB_LP_IRQn, 5, 0);
 800ee90:	4622      	mov	r2, r4
 800ee92:	9300      	str	r3, [sp, #0]
 800ee94:	2105      	movs	r1, #5
 800ee96:	2014      	movs	r0, #20
  (void)tmpreg;
 800ee98:	9b00      	ldr	r3, [sp, #0]
 800ee9a:	f7f7 f891 	bl	8005fc0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800ee9e:	2014      	movs	r0, #20
 800eea0:	f7f7 f8ca 	bl	8006038 <HAL_NVIC_EnableIRQ>
}
 800eea4:	b009      	add	sp, #36	@ 0x24
 800eea6:	bd30      	pop	{r4, r5, pc}
 800eea8:	40006800 	.word	0x40006800

0800eeac <HAL_PCD_SetupStageCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800eeac:	f500 7126 	add.w	r1, r0, #664	@ 0x298
 800eeb0:	f8d0 02d8 	ldr.w	r0, [r0, #728]	@ 0x2d8
 800eeb4:	f7fd bd74 	b.w	800c9a0 <USBD_LL_SetupStage>

0800eeb8 <HAL_PCD_DataOutStageCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800eeb8:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 800eebc:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800eec0:	f8d0 02d8 	ldr.w	r0, [r0, #728]	@ 0x2d8
 800eec4:	f8d3 2164 	ldr.w	r2, [r3, #356]	@ 0x164
 800eec8:	f7fd bd9a 	b.w	800ca00 <USBD_LL_DataOutStage>

0800eecc <HAL_PCD_DataInStageCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800eecc:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 800eed0:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800eed4:	f8d0 02d8 	ldr.w	r0, [r0, #728]	@ 0x2d8
 800eed8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800eeda:	f7fd bdcb 	b.w	800ca74 <USBD_LL_DataInStage>
 800eede:	bf00      	nop

0800eee0 <HAL_PCD_SOFCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800eee0:	f8d0 02d8 	ldr.w	r0, [r0, #728]	@ 0x2d8
 800eee4:	f7fd be6c 	b.w	800cbc0 <USBD_LL_SOF>

0800eee8 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eee8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800eeea:	7943      	ldrb	r3, [r0, #5]
 800eeec:	2b02      	cmp	r3, #2
{
 800eeee:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800eef0:	d001      	beq.n	800eef6 <HAL_PCD_ResetCallback+0xe>
  {
    Error_Handler();
 800eef2:	f7f3 f9a9 	bl	8002248 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800eef6:	f8d4 02d8 	ldr.w	r0, [r4, #728]	@ 0x2d8
 800eefa:	2101      	movs	r1, #1
 800eefc:	f7fd fe42 	bl	800cb84 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ef00:	f8d4 02d8 	ldr.w	r0, [r4, #728]	@ 0x2d8
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800ef04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ef08:	f7fd be0e 	b.w	800cb28 <USBD_LL_Reset>

0800ef0c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ef0c:	b510      	push	{r4, lr}
 800ef0e:	4604      	mov	r4, r0
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ef10:	f8d0 02d8 	ldr.w	r0, [r0, #728]	@ 0x2d8
 800ef14:	f7fd fe3a 	bl	800cb8c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ef18:	7a63      	ldrb	r3, [r4, #9]
 800ef1a:	b123      	cbz	r3, 800ef26 <HAL_PCD_SuspendCallback+0x1a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ef1c:	4a02      	ldr	r2, [pc, #8]	@ (800ef28 <HAL_PCD_SuspendCallback+0x1c>)
 800ef1e:	6913      	ldr	r3, [r2, #16]
 800ef20:	f043 0306 	orr.w	r3, r3, #6
 800ef24:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800ef26:	bd10      	pop	{r4, pc}
 800ef28:	e000ed00 	.word	0xe000ed00

0800ef2c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ef2c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800ef2e:	7a43      	ldrb	r3, [r0, #9]
{
 800ef30:	4604      	mov	r4, r0
  if (hpcd->Init.low_power_enable)
 800ef32:	b92b      	cbnz	r3, 800ef40 <HAL_PCD_ResumeCallback+0x14>
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    SystemClockConfig_Resume();
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ef34:	f8d4 02d8 	ldr.w	r0, [r4, #728]	@ 0x2d8
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800ef38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ef3c:	f7fd be34 	b.w	800cba8 <USBD_LL_Resume>
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ef40:	4a06      	ldr	r2, [pc, #24]	@ (800ef5c <HAL_PCD_ResumeCallback+0x30>)
 800ef42:	6913      	ldr	r3, [r2, #16]
 800ef44:	f023 0306 	bic.w	r3, r3, #6
 800ef48:	6113      	str	r3, [r2, #16]
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
  SystemClock_Config();
 800ef4a:	f7f2 ffe5 	bl	8001f18 <SystemClock_Config>
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ef4e:	f8d4 02d8 	ldr.w	r0, [r4, #728]	@ 0x2d8
}
 800ef52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ef56:	f7fd be27 	b.w	800cba8 <USBD_LL_Resume>
 800ef5a:	bf00      	nop
 800ef5c:	e000ed00 	.word	0xe000ed00

0800ef60 <USBD_LL_Init>:
{
 800ef60:	b538      	push	{r3, r4, r5, lr}
  hpcd_USB_FS.pData = pdev;
 800ef62:	4d20      	ldr	r5, [pc, #128]	@ (800efe4 <USBD_LL_Init+0x84>)
 800ef64:	f8c5 02d8 	str.w	r0, [r5, #728]	@ 0x2d8
  pdev->pData = &hpcd_USB_FS;
 800ef68:	f8c0 52c8 	str.w	r5, [r0, #712]	@ 0x2c8
{
 800ef6c:	4604      	mov	r4, r0
  HAL_PWREx_EnableVddUSB();
 800ef6e:	f7f9 f961 	bl	8008234 <HAL_PWREx_EnableVddUSB>
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800ef72:	f44f 7302 	mov.w	r3, #520	@ 0x208
  hpcd_USB_FS.Instance = USB;
 800ef76:	491c      	ldr	r1, [pc, #112]	@ (800efe8 <USBD_LL_Init+0x88>)
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800ef78:	80ab      	strh	r3, [r5, #4]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800ef7a:	2202      	movs	r2, #2
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800ef7c:	2300      	movs	r3, #0
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800ef7e:	4628      	mov	r0, r5
  hpcd_USB_FS.Instance = USB;
 800ef80:	6029      	str	r1, [r5, #0]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800ef82:	f8c5 2007 	str.w	r2, [r5, #7]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800ef86:	72eb      	strb	r3, [r5, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800ef88:	f7f8 f932 	bl	80071f0 <HAL_PCD_Init>
 800ef8c:	bb30      	cbnz	r0, 800efdc <USBD_LL_Init+0x7c>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800ef8e:	2200      	movs	r2, #0
 800ef90:	4611      	mov	r1, r2
 800ef92:	f8d4 02c8 	ldr.w	r0, [r4, #712]	@ 0x2c8
 800ef96:	2318      	movs	r3, #24
 800ef98:	f7f9 f904 	bl	80081a4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800ef9c:	f8d4 02c8 	ldr.w	r0, [r4, #712]	@ 0x2c8
 800efa0:	2358      	movs	r3, #88	@ 0x58
 800efa2:	2200      	movs	r2, #0
 800efa4:	2180      	movs	r1, #128	@ 0x80
 800efa6:	f7f9 f8fd 	bl	80081a4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800efaa:	f8d4 02c8 	ldr.w	r0, [r4, #712]	@ 0x2c8
 800efae:	23c0      	movs	r3, #192	@ 0xc0
 800efb0:	2200      	movs	r2, #0
 800efb2:	2181      	movs	r1, #129	@ 0x81
 800efb4:	f7f9 f8f6 	bl	80081a4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800efb8:	f8d4 02c8 	ldr.w	r0, [r4, #712]	@ 0x2c8
 800efbc:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800efc0:	2200      	movs	r2, #0
 800efc2:	2101      	movs	r1, #1
 800efc4:	f7f9 f8ee 	bl	80081a4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800efc8:	f8d4 02c8 	ldr.w	r0, [r4, #712]	@ 0x2c8
 800efcc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800efd0:	2200      	movs	r2, #0
 800efd2:	2182      	movs	r1, #130	@ 0x82
 800efd4:	f7f9 f8e6 	bl	80081a4 <HAL_PCDEx_PMAConfig>
}
 800efd8:	2000      	movs	r0, #0
 800efda:	bd38      	pop	{r3, r4, r5, pc}
    Error_Handler( );
 800efdc:	f7f3 f934 	bl	8002248 <Error_Handler>
 800efe0:	e7d5      	b.n	800ef8e <USBD_LL_Init+0x2e>
 800efe2:	bf00      	nop
 800efe4:	2000577c 	.word	0x2000577c
 800efe8:	40006800 	.word	0x40006800

0800efec <USBD_LL_Start>:
{
 800efec:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 800efee:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 800eff2:	f7f8 f9e7 	bl	80073c4 <HAL_PCD_Start>
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 800eff6:	b118      	cbz	r0, 800f000 <USBD_LL_Start+0x14>
 800eff8:	2802      	cmp	r0, #2
 800effa:	bf0c      	ite	eq
 800effc:	2001      	moveq	r0, #1
 800effe:	2003      	movne	r0, #3
}
 800f000:	bd08      	pop	{r3, pc}
 800f002:	bf00      	nop

0800f004 <USBD_LL_OpenEP>:
{
 800f004:	4694      	mov	ip, r2
 800f006:	b508      	push	{r3, lr}
 800f008:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800f00a:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 800f00e:	4663      	mov	r3, ip
 800f010:	f7f8 ffa0 	bl	8007f54 <HAL_PCD_EP_Open>
  switch (hal_status)
 800f014:	b118      	cbz	r0, 800f01e <USBD_LL_OpenEP+0x1a>
 800f016:	2802      	cmp	r0, #2
 800f018:	bf0c      	ite	eq
 800f01a:	2001      	moveq	r0, #1
 800f01c:	2003      	movne	r0, #3
}
 800f01e:	bd08      	pop	{r3, pc}

0800f020 <USBD_LL_CloseEP>:
{
 800f020:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800f022:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 800f026:	f7f8 ffd1 	bl	8007fcc <HAL_PCD_EP_Close>
  switch (hal_status)
 800f02a:	b118      	cbz	r0, 800f034 <USBD_LL_CloseEP+0x14>
 800f02c:	2802      	cmp	r0, #2
 800f02e:	bf0c      	ite	eq
 800f030:	2001      	moveq	r0, #1
 800f032:	2003      	movne	r0, #3
}
 800f034:	bd08      	pop	{r3, pc}
 800f036:	bf00      	nop

0800f038 <USBD_LL_StallEP>:
{
 800f038:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800f03a:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 800f03e:	f7f9 f83b 	bl	80080b8 <HAL_PCD_EP_SetStall>
  switch (hal_status)
 800f042:	b118      	cbz	r0, 800f04c <USBD_LL_StallEP+0x14>
 800f044:	2802      	cmp	r0, #2
 800f046:	bf0c      	ite	eq
 800f048:	2001      	moveq	r0, #1
 800f04a:	2003      	movne	r0, #3
}
 800f04c:	bd08      	pop	{r3, pc}
 800f04e:	bf00      	nop

0800f050 <USBD_LL_ClearStallEP>:
{
 800f050:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800f052:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 800f056:	f7f9 f869 	bl	800812c <HAL_PCD_EP_ClrStall>
  switch (hal_status)
 800f05a:	b118      	cbz	r0, 800f064 <USBD_LL_ClearStallEP+0x14>
 800f05c:	2802      	cmp	r0, #2
 800f05e:	bf0c      	ite	eq
 800f060:	2001      	moveq	r0, #1
 800f062:	2003      	movne	r0, #3
}
 800f064:	bd08      	pop	{r3, pc}
 800f066:	bf00      	nop

0800f068 <USBD_LL_IsStallEP>:
  if((ep_addr & 0x80) == 0x80)
 800f068:	060a      	lsls	r2, r1, #24
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800f06a:	f8d0 32c8 	ldr.w	r3, [r0, #712]	@ 0x2c8
  if((ep_addr & 0x80) == 0x80)
 800f06e:	d406      	bmi.n	800f07e <USBD_LL_IsStallEP+0x16>
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800f070:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800f074:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800f078:	f893 0152 	ldrb.w	r0, [r3, #338]	@ 0x152
}
 800f07c:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800f07e:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 800f082:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800f086:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800f08a:	7c98      	ldrb	r0, [r3, #18]
 800f08c:	4770      	bx	lr
 800f08e:	bf00      	nop

0800f090 <USBD_LL_SetUSBAddress>:
{
 800f090:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800f092:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 800f096:	f7f8 ff49 	bl	8007f2c <HAL_PCD_SetAddress>
  switch (hal_status)
 800f09a:	b118      	cbz	r0, 800f0a4 <USBD_LL_SetUSBAddress+0x14>
 800f09c:	2802      	cmp	r0, #2
 800f09e:	bf0c      	ite	eq
 800f0a0:	2001      	moveq	r0, #1
 800f0a2:	2003      	movne	r0, #3
}
 800f0a4:	bd08      	pop	{r3, pc}
 800f0a6:	bf00      	nop

0800f0a8 <USBD_LL_Transmit>:
{
 800f0a8:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800f0aa:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 800f0ae:	f7f8 ffe5 	bl	800807c <HAL_PCD_EP_Transmit>
  switch (hal_status)
 800f0b2:	b118      	cbz	r0, 800f0bc <USBD_LL_Transmit+0x14>
 800f0b4:	2802      	cmp	r0, #2
 800f0b6:	bf0c      	ite	eq
 800f0b8:	2001      	moveq	r0, #1
 800f0ba:	2003      	movne	r0, #3
}
 800f0bc:	bd08      	pop	{r3, pc}
 800f0be:	bf00      	nop

0800f0c0 <USBD_LL_PrepareReceive>:
{
 800f0c0:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800f0c2:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 800f0c6:	f7f8 ffb5 	bl	8008034 <HAL_PCD_EP_Receive>
  switch (hal_status)
 800f0ca:	b118      	cbz	r0, 800f0d4 <USBD_LL_PrepareReceive+0x14>
 800f0cc:	2802      	cmp	r0, #2
 800f0ce:	bf0c      	ite	eq
 800f0d0:	2001      	moveq	r0, #1
 800f0d2:	2003      	movne	r0, #3
}
 800f0d4:	bd08      	pop	{r3, pc}
 800f0d6:	bf00      	nop

0800f0d8 <USBD_LL_GetRxDataSize>:
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800f0d8:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 800f0dc:	f7f8 bfc4 	b.w	8008068 <HAL_PCD_EP_GetRxCount>

0800f0e0 <HAL_PCDEx_LPM_Callback>:
{
 800f0e0:	b510      	push	{r4, lr}
 800f0e2:	4604      	mov	r4, r0
  switch (msg)
 800f0e4:	b169      	cbz	r1, 800f102 <HAL_PCDEx_LPM_Callback+0x22>
 800f0e6:	2901      	cmp	r1, #1
 800f0e8:	d10a      	bne.n	800f100 <HAL_PCDEx_LPM_Callback+0x20>
    USBD_LL_Suspend(hpcd->pData);
 800f0ea:	f8d0 02d8 	ldr.w	r0, [r0, #728]	@ 0x2d8
 800f0ee:	f7fd fd4d 	bl	800cb8c <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800f0f2:	7a63      	ldrb	r3, [r4, #9]
 800f0f4:	b123      	cbz	r3, 800f100 <HAL_PCDEx_LPM_Callback+0x20>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f0f6:	4a0d      	ldr	r2, [pc, #52]	@ (800f12c <HAL_PCDEx_LPM_Callback+0x4c>)
 800f0f8:	6913      	ldr	r3, [r2, #16]
 800f0fa:	f043 0306 	orr.w	r3, r3, #6
 800f0fe:	6113      	str	r3, [r2, #16]
}
 800f100:	bd10      	pop	{r4, pc}
    if (hpcd->Init.low_power_enable)
 800f102:	7a43      	ldrb	r3, [r0, #9]
 800f104:	b92b      	cbnz	r3, 800f112 <HAL_PCDEx_LPM_Callback+0x32>
    USBD_LL_Resume(hpcd->pData);
 800f106:	f8d4 02d8 	ldr.w	r0, [r4, #728]	@ 0x2d8
}
 800f10a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    USBD_LL_Resume(hpcd->pData);
 800f10e:	f7fd bd4b 	b.w	800cba8 <USBD_LL_Resume>
  SystemClock_Config();
 800f112:	f7f2 ff01 	bl	8001f18 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f116:	4a05      	ldr	r2, [pc, #20]	@ (800f12c <HAL_PCDEx_LPM_Callback+0x4c>)
    USBD_LL_Resume(hpcd->pData);
 800f118:	f8d4 02d8 	ldr.w	r0, [r4, #728]	@ 0x2d8
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f11c:	6913      	ldr	r3, [r2, #16]
 800f11e:	f023 0306 	bic.w	r3, r3, #6
}
 800f122:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f126:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800f128:	f7fd bd3e 	b.w	800cba8 <USBD_LL_Resume>
 800f12c:	e000ed00 	.word	0xe000ed00

0800f130 <USBD_static_malloc>:
}
 800f130:	4800      	ldr	r0, [pc, #0]	@ (800f134 <USBD_static_malloc+0x4>)
 800f132:	4770      	bx	lr
 800f134:	2000555c 	.word	0x2000555c

0800f138 <USBD_static_free>:
}
 800f138:	4770      	bx	lr
 800f13a:	bf00      	nop

0800f13c <_strtol_l.constprop.0>:
 800f13c:	2b24      	cmp	r3, #36	@ 0x24
 800f13e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f142:	4686      	mov	lr, r0
 800f144:	4690      	mov	r8, r2
 800f146:	d801      	bhi.n	800f14c <_strtol_l.constprop.0+0x10>
 800f148:	2b01      	cmp	r3, #1
 800f14a:	d106      	bne.n	800f15a <_strtol_l.constprop.0+0x1e>
 800f14c:	f001 f88a 	bl	8010264 <__errno>
 800f150:	2316      	movs	r3, #22
 800f152:	6003      	str	r3, [r0, #0]
 800f154:	2000      	movs	r0, #0
 800f156:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f15a:	4834      	ldr	r0, [pc, #208]	@ (800f22c <_strtol_l.constprop.0+0xf0>)
 800f15c:	460d      	mov	r5, r1
 800f15e:	462a      	mov	r2, r5
 800f160:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f164:	5d06      	ldrb	r6, [r0, r4]
 800f166:	f016 0608 	ands.w	r6, r6, #8
 800f16a:	d1f8      	bne.n	800f15e <_strtol_l.constprop.0+0x22>
 800f16c:	2c2d      	cmp	r4, #45	@ 0x2d
 800f16e:	d12d      	bne.n	800f1cc <_strtol_l.constprop.0+0x90>
 800f170:	782c      	ldrb	r4, [r5, #0]
 800f172:	2601      	movs	r6, #1
 800f174:	1c95      	adds	r5, r2, #2
 800f176:	f033 0210 	bics.w	r2, r3, #16
 800f17a:	d109      	bne.n	800f190 <_strtol_l.constprop.0+0x54>
 800f17c:	2c30      	cmp	r4, #48	@ 0x30
 800f17e:	d12a      	bne.n	800f1d6 <_strtol_l.constprop.0+0x9a>
 800f180:	782a      	ldrb	r2, [r5, #0]
 800f182:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800f186:	2a58      	cmp	r2, #88	@ 0x58
 800f188:	d125      	bne.n	800f1d6 <_strtol_l.constprop.0+0x9a>
 800f18a:	786c      	ldrb	r4, [r5, #1]
 800f18c:	2310      	movs	r3, #16
 800f18e:	3502      	adds	r5, #2
 800f190:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800f194:	f10c 3cff 	add.w	ip, ip, #4294967295
 800f198:	2200      	movs	r2, #0
 800f19a:	fbbc f9f3 	udiv	r9, ip, r3
 800f19e:	4610      	mov	r0, r2
 800f1a0:	fb03 ca19 	mls	sl, r3, r9, ip
 800f1a4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800f1a8:	2f09      	cmp	r7, #9
 800f1aa:	d81b      	bhi.n	800f1e4 <_strtol_l.constprop.0+0xa8>
 800f1ac:	463c      	mov	r4, r7
 800f1ae:	42a3      	cmp	r3, r4
 800f1b0:	dd27      	ble.n	800f202 <_strtol_l.constprop.0+0xc6>
 800f1b2:	1c57      	adds	r7, r2, #1
 800f1b4:	d007      	beq.n	800f1c6 <_strtol_l.constprop.0+0x8a>
 800f1b6:	4581      	cmp	r9, r0
 800f1b8:	d320      	bcc.n	800f1fc <_strtol_l.constprop.0+0xc0>
 800f1ba:	d101      	bne.n	800f1c0 <_strtol_l.constprop.0+0x84>
 800f1bc:	45a2      	cmp	sl, r4
 800f1be:	db1d      	blt.n	800f1fc <_strtol_l.constprop.0+0xc0>
 800f1c0:	fb00 4003 	mla	r0, r0, r3, r4
 800f1c4:	2201      	movs	r2, #1
 800f1c6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f1ca:	e7eb      	b.n	800f1a4 <_strtol_l.constprop.0+0x68>
 800f1cc:	2c2b      	cmp	r4, #43	@ 0x2b
 800f1ce:	bf04      	itt	eq
 800f1d0:	782c      	ldrbeq	r4, [r5, #0]
 800f1d2:	1c95      	addeq	r5, r2, #2
 800f1d4:	e7cf      	b.n	800f176 <_strtol_l.constprop.0+0x3a>
 800f1d6:	2b00      	cmp	r3, #0
 800f1d8:	d1da      	bne.n	800f190 <_strtol_l.constprop.0+0x54>
 800f1da:	2c30      	cmp	r4, #48	@ 0x30
 800f1dc:	bf0c      	ite	eq
 800f1de:	2308      	moveq	r3, #8
 800f1e0:	230a      	movne	r3, #10
 800f1e2:	e7d5      	b.n	800f190 <_strtol_l.constprop.0+0x54>
 800f1e4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800f1e8:	2f19      	cmp	r7, #25
 800f1ea:	d801      	bhi.n	800f1f0 <_strtol_l.constprop.0+0xb4>
 800f1ec:	3c37      	subs	r4, #55	@ 0x37
 800f1ee:	e7de      	b.n	800f1ae <_strtol_l.constprop.0+0x72>
 800f1f0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800f1f4:	2f19      	cmp	r7, #25
 800f1f6:	d804      	bhi.n	800f202 <_strtol_l.constprop.0+0xc6>
 800f1f8:	3c57      	subs	r4, #87	@ 0x57
 800f1fa:	e7d8      	b.n	800f1ae <_strtol_l.constprop.0+0x72>
 800f1fc:	f04f 32ff 	mov.w	r2, #4294967295
 800f200:	e7e1      	b.n	800f1c6 <_strtol_l.constprop.0+0x8a>
 800f202:	1c53      	adds	r3, r2, #1
 800f204:	d108      	bne.n	800f218 <_strtol_l.constprop.0+0xdc>
 800f206:	2322      	movs	r3, #34	@ 0x22
 800f208:	f8ce 3000 	str.w	r3, [lr]
 800f20c:	4660      	mov	r0, ip
 800f20e:	f1b8 0f00 	cmp.w	r8, #0
 800f212:	d0a0      	beq.n	800f156 <_strtol_l.constprop.0+0x1a>
 800f214:	1e69      	subs	r1, r5, #1
 800f216:	e006      	b.n	800f226 <_strtol_l.constprop.0+0xea>
 800f218:	b106      	cbz	r6, 800f21c <_strtol_l.constprop.0+0xe0>
 800f21a:	4240      	negs	r0, r0
 800f21c:	f1b8 0f00 	cmp.w	r8, #0
 800f220:	d099      	beq.n	800f156 <_strtol_l.constprop.0+0x1a>
 800f222:	2a00      	cmp	r2, #0
 800f224:	d1f6      	bne.n	800f214 <_strtol_l.constprop.0+0xd8>
 800f226:	f8c8 1000 	str.w	r1, [r8]
 800f22a:	e794      	b.n	800f156 <_strtol_l.constprop.0+0x1a>
 800f22c:	08018153 	.word	0x08018153

0800f230 <_strtol_r>:
 800f230:	f7ff bf84 	b.w	800f13c <_strtol_l.constprop.0>

0800f234 <__cvt>:
 800f234:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f238:	ec57 6b10 	vmov	r6, r7, d0
 800f23c:	2f00      	cmp	r7, #0
 800f23e:	460c      	mov	r4, r1
 800f240:	4619      	mov	r1, r3
 800f242:	463b      	mov	r3, r7
 800f244:	bfbb      	ittet	lt
 800f246:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800f24a:	461f      	movlt	r7, r3
 800f24c:	2300      	movge	r3, #0
 800f24e:	232d      	movlt	r3, #45	@ 0x2d
 800f250:	700b      	strb	r3, [r1, #0]
 800f252:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f254:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800f258:	4691      	mov	r9, r2
 800f25a:	f023 0820 	bic.w	r8, r3, #32
 800f25e:	bfbc      	itt	lt
 800f260:	4632      	movlt	r2, r6
 800f262:	4616      	movlt	r6, r2
 800f264:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800f268:	d005      	beq.n	800f276 <__cvt+0x42>
 800f26a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800f26e:	d100      	bne.n	800f272 <__cvt+0x3e>
 800f270:	3401      	adds	r4, #1
 800f272:	2102      	movs	r1, #2
 800f274:	e000      	b.n	800f278 <__cvt+0x44>
 800f276:	2103      	movs	r1, #3
 800f278:	ab03      	add	r3, sp, #12
 800f27a:	9301      	str	r3, [sp, #4]
 800f27c:	ab02      	add	r3, sp, #8
 800f27e:	9300      	str	r3, [sp, #0]
 800f280:	ec47 6b10 	vmov	d0, r6, r7
 800f284:	4653      	mov	r3, sl
 800f286:	4622      	mov	r2, r4
 800f288:	f001 f8b6 	bl	80103f8 <_dtoa_r>
 800f28c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800f290:	4605      	mov	r5, r0
 800f292:	d119      	bne.n	800f2c8 <__cvt+0x94>
 800f294:	f019 0f01 	tst.w	r9, #1
 800f298:	d00e      	beq.n	800f2b8 <__cvt+0x84>
 800f29a:	eb00 0904 	add.w	r9, r0, r4
 800f29e:	2200      	movs	r2, #0
 800f2a0:	2300      	movs	r3, #0
 800f2a2:	4630      	mov	r0, r6
 800f2a4:	4639      	mov	r1, r7
 800f2a6:	f7f1 fbe7 	bl	8000a78 <__aeabi_dcmpeq>
 800f2aa:	b108      	cbz	r0, 800f2b0 <__cvt+0x7c>
 800f2ac:	f8cd 900c 	str.w	r9, [sp, #12]
 800f2b0:	2230      	movs	r2, #48	@ 0x30
 800f2b2:	9b03      	ldr	r3, [sp, #12]
 800f2b4:	454b      	cmp	r3, r9
 800f2b6:	d31e      	bcc.n	800f2f6 <__cvt+0xc2>
 800f2b8:	9b03      	ldr	r3, [sp, #12]
 800f2ba:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f2bc:	1b5b      	subs	r3, r3, r5
 800f2be:	4628      	mov	r0, r5
 800f2c0:	6013      	str	r3, [r2, #0]
 800f2c2:	b004      	add	sp, #16
 800f2c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f2c8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800f2cc:	eb00 0904 	add.w	r9, r0, r4
 800f2d0:	d1e5      	bne.n	800f29e <__cvt+0x6a>
 800f2d2:	7803      	ldrb	r3, [r0, #0]
 800f2d4:	2b30      	cmp	r3, #48	@ 0x30
 800f2d6:	d10a      	bne.n	800f2ee <__cvt+0xba>
 800f2d8:	2200      	movs	r2, #0
 800f2da:	2300      	movs	r3, #0
 800f2dc:	4630      	mov	r0, r6
 800f2de:	4639      	mov	r1, r7
 800f2e0:	f7f1 fbca 	bl	8000a78 <__aeabi_dcmpeq>
 800f2e4:	b918      	cbnz	r0, 800f2ee <__cvt+0xba>
 800f2e6:	f1c4 0401 	rsb	r4, r4, #1
 800f2ea:	f8ca 4000 	str.w	r4, [sl]
 800f2ee:	f8da 3000 	ldr.w	r3, [sl]
 800f2f2:	4499      	add	r9, r3
 800f2f4:	e7d3      	b.n	800f29e <__cvt+0x6a>
 800f2f6:	1c59      	adds	r1, r3, #1
 800f2f8:	9103      	str	r1, [sp, #12]
 800f2fa:	701a      	strb	r2, [r3, #0]
 800f2fc:	e7d9      	b.n	800f2b2 <__cvt+0x7e>

0800f2fe <__exponent>:
 800f2fe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f300:	2900      	cmp	r1, #0
 800f302:	bfba      	itte	lt
 800f304:	4249      	neglt	r1, r1
 800f306:	232d      	movlt	r3, #45	@ 0x2d
 800f308:	232b      	movge	r3, #43	@ 0x2b
 800f30a:	2909      	cmp	r1, #9
 800f30c:	7002      	strb	r2, [r0, #0]
 800f30e:	7043      	strb	r3, [r0, #1]
 800f310:	dd29      	ble.n	800f366 <__exponent+0x68>
 800f312:	f10d 0307 	add.w	r3, sp, #7
 800f316:	461d      	mov	r5, r3
 800f318:	270a      	movs	r7, #10
 800f31a:	461a      	mov	r2, r3
 800f31c:	fbb1 f6f7 	udiv	r6, r1, r7
 800f320:	fb07 1416 	mls	r4, r7, r6, r1
 800f324:	3430      	adds	r4, #48	@ 0x30
 800f326:	f802 4c01 	strb.w	r4, [r2, #-1]
 800f32a:	460c      	mov	r4, r1
 800f32c:	2c63      	cmp	r4, #99	@ 0x63
 800f32e:	f103 33ff 	add.w	r3, r3, #4294967295
 800f332:	4631      	mov	r1, r6
 800f334:	dcf1      	bgt.n	800f31a <__exponent+0x1c>
 800f336:	3130      	adds	r1, #48	@ 0x30
 800f338:	1e94      	subs	r4, r2, #2
 800f33a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800f33e:	1c41      	adds	r1, r0, #1
 800f340:	4623      	mov	r3, r4
 800f342:	42ab      	cmp	r3, r5
 800f344:	d30a      	bcc.n	800f35c <__exponent+0x5e>
 800f346:	f10d 0309 	add.w	r3, sp, #9
 800f34a:	1a9b      	subs	r3, r3, r2
 800f34c:	42ac      	cmp	r4, r5
 800f34e:	bf88      	it	hi
 800f350:	2300      	movhi	r3, #0
 800f352:	3302      	adds	r3, #2
 800f354:	4403      	add	r3, r0
 800f356:	1a18      	subs	r0, r3, r0
 800f358:	b003      	add	sp, #12
 800f35a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f35c:	f813 6b01 	ldrb.w	r6, [r3], #1
 800f360:	f801 6f01 	strb.w	r6, [r1, #1]!
 800f364:	e7ed      	b.n	800f342 <__exponent+0x44>
 800f366:	2330      	movs	r3, #48	@ 0x30
 800f368:	3130      	adds	r1, #48	@ 0x30
 800f36a:	7083      	strb	r3, [r0, #2]
 800f36c:	70c1      	strb	r1, [r0, #3]
 800f36e:	1d03      	adds	r3, r0, #4
 800f370:	e7f1      	b.n	800f356 <__exponent+0x58>
	...

0800f374 <_printf_float>:
 800f374:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f378:	b08d      	sub	sp, #52	@ 0x34
 800f37a:	460c      	mov	r4, r1
 800f37c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800f380:	4616      	mov	r6, r2
 800f382:	461f      	mov	r7, r3
 800f384:	4605      	mov	r5, r0
 800f386:	f000 ff23 	bl	80101d0 <_localeconv_r>
 800f38a:	6803      	ldr	r3, [r0, #0]
 800f38c:	9304      	str	r3, [sp, #16]
 800f38e:	4618      	mov	r0, r3
 800f390:	f7f0 ff46 	bl	8000220 <strlen>
 800f394:	2300      	movs	r3, #0
 800f396:	930a      	str	r3, [sp, #40]	@ 0x28
 800f398:	f8d8 3000 	ldr.w	r3, [r8]
 800f39c:	9005      	str	r0, [sp, #20]
 800f39e:	3307      	adds	r3, #7
 800f3a0:	f023 0307 	bic.w	r3, r3, #7
 800f3a4:	f103 0208 	add.w	r2, r3, #8
 800f3a8:	f894 a018 	ldrb.w	sl, [r4, #24]
 800f3ac:	f8d4 b000 	ldr.w	fp, [r4]
 800f3b0:	f8c8 2000 	str.w	r2, [r8]
 800f3b4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f3b8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800f3bc:	9307      	str	r3, [sp, #28]
 800f3be:	f8cd 8018 	str.w	r8, [sp, #24]
 800f3c2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800f3c6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f3ca:	4b9c      	ldr	r3, [pc, #624]	@ (800f63c <_printf_float+0x2c8>)
 800f3cc:	f04f 32ff 	mov.w	r2, #4294967295
 800f3d0:	f7f1 fb84 	bl	8000adc <__aeabi_dcmpun>
 800f3d4:	bb70      	cbnz	r0, 800f434 <_printf_float+0xc0>
 800f3d6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f3da:	4b98      	ldr	r3, [pc, #608]	@ (800f63c <_printf_float+0x2c8>)
 800f3dc:	f04f 32ff 	mov.w	r2, #4294967295
 800f3e0:	f7f1 fb5e 	bl	8000aa0 <__aeabi_dcmple>
 800f3e4:	bb30      	cbnz	r0, 800f434 <_printf_float+0xc0>
 800f3e6:	2200      	movs	r2, #0
 800f3e8:	2300      	movs	r3, #0
 800f3ea:	4640      	mov	r0, r8
 800f3ec:	4649      	mov	r1, r9
 800f3ee:	f7f1 fb4d 	bl	8000a8c <__aeabi_dcmplt>
 800f3f2:	b110      	cbz	r0, 800f3fa <_printf_float+0x86>
 800f3f4:	232d      	movs	r3, #45	@ 0x2d
 800f3f6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f3fa:	4a91      	ldr	r2, [pc, #580]	@ (800f640 <_printf_float+0x2cc>)
 800f3fc:	4b91      	ldr	r3, [pc, #580]	@ (800f644 <_printf_float+0x2d0>)
 800f3fe:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800f402:	bf94      	ite	ls
 800f404:	4690      	movls	r8, r2
 800f406:	4698      	movhi	r8, r3
 800f408:	2303      	movs	r3, #3
 800f40a:	6123      	str	r3, [r4, #16]
 800f40c:	f02b 0304 	bic.w	r3, fp, #4
 800f410:	6023      	str	r3, [r4, #0]
 800f412:	f04f 0900 	mov.w	r9, #0
 800f416:	9700      	str	r7, [sp, #0]
 800f418:	4633      	mov	r3, r6
 800f41a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800f41c:	4621      	mov	r1, r4
 800f41e:	4628      	mov	r0, r5
 800f420:	f000 f9d2 	bl	800f7c8 <_printf_common>
 800f424:	3001      	adds	r0, #1
 800f426:	f040 808d 	bne.w	800f544 <_printf_float+0x1d0>
 800f42a:	f04f 30ff 	mov.w	r0, #4294967295
 800f42e:	b00d      	add	sp, #52	@ 0x34
 800f430:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f434:	4642      	mov	r2, r8
 800f436:	464b      	mov	r3, r9
 800f438:	4640      	mov	r0, r8
 800f43a:	4649      	mov	r1, r9
 800f43c:	f7f1 fb4e 	bl	8000adc <__aeabi_dcmpun>
 800f440:	b140      	cbz	r0, 800f454 <_printf_float+0xe0>
 800f442:	464b      	mov	r3, r9
 800f444:	2b00      	cmp	r3, #0
 800f446:	bfbc      	itt	lt
 800f448:	232d      	movlt	r3, #45	@ 0x2d
 800f44a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800f44e:	4a7e      	ldr	r2, [pc, #504]	@ (800f648 <_printf_float+0x2d4>)
 800f450:	4b7e      	ldr	r3, [pc, #504]	@ (800f64c <_printf_float+0x2d8>)
 800f452:	e7d4      	b.n	800f3fe <_printf_float+0x8a>
 800f454:	6863      	ldr	r3, [r4, #4]
 800f456:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800f45a:	9206      	str	r2, [sp, #24]
 800f45c:	1c5a      	adds	r2, r3, #1
 800f45e:	d13b      	bne.n	800f4d8 <_printf_float+0x164>
 800f460:	2306      	movs	r3, #6
 800f462:	6063      	str	r3, [r4, #4]
 800f464:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800f468:	2300      	movs	r3, #0
 800f46a:	6022      	str	r2, [r4, #0]
 800f46c:	9303      	str	r3, [sp, #12]
 800f46e:	ab0a      	add	r3, sp, #40	@ 0x28
 800f470:	e9cd a301 	strd	sl, r3, [sp, #4]
 800f474:	ab09      	add	r3, sp, #36	@ 0x24
 800f476:	9300      	str	r3, [sp, #0]
 800f478:	6861      	ldr	r1, [r4, #4]
 800f47a:	ec49 8b10 	vmov	d0, r8, r9
 800f47e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800f482:	4628      	mov	r0, r5
 800f484:	f7ff fed6 	bl	800f234 <__cvt>
 800f488:	9b06      	ldr	r3, [sp, #24]
 800f48a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f48c:	2b47      	cmp	r3, #71	@ 0x47
 800f48e:	4680      	mov	r8, r0
 800f490:	d129      	bne.n	800f4e6 <_printf_float+0x172>
 800f492:	1cc8      	adds	r0, r1, #3
 800f494:	db02      	blt.n	800f49c <_printf_float+0x128>
 800f496:	6863      	ldr	r3, [r4, #4]
 800f498:	4299      	cmp	r1, r3
 800f49a:	dd41      	ble.n	800f520 <_printf_float+0x1ac>
 800f49c:	f1aa 0a02 	sub.w	sl, sl, #2
 800f4a0:	fa5f fa8a 	uxtb.w	sl, sl
 800f4a4:	3901      	subs	r1, #1
 800f4a6:	4652      	mov	r2, sl
 800f4a8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800f4ac:	9109      	str	r1, [sp, #36]	@ 0x24
 800f4ae:	f7ff ff26 	bl	800f2fe <__exponent>
 800f4b2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f4b4:	1813      	adds	r3, r2, r0
 800f4b6:	2a01      	cmp	r2, #1
 800f4b8:	4681      	mov	r9, r0
 800f4ba:	6123      	str	r3, [r4, #16]
 800f4bc:	dc02      	bgt.n	800f4c4 <_printf_float+0x150>
 800f4be:	6822      	ldr	r2, [r4, #0]
 800f4c0:	07d2      	lsls	r2, r2, #31
 800f4c2:	d501      	bpl.n	800f4c8 <_printf_float+0x154>
 800f4c4:	3301      	adds	r3, #1
 800f4c6:	6123      	str	r3, [r4, #16]
 800f4c8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800f4cc:	2b00      	cmp	r3, #0
 800f4ce:	d0a2      	beq.n	800f416 <_printf_float+0xa2>
 800f4d0:	232d      	movs	r3, #45	@ 0x2d
 800f4d2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f4d6:	e79e      	b.n	800f416 <_printf_float+0xa2>
 800f4d8:	9a06      	ldr	r2, [sp, #24]
 800f4da:	2a47      	cmp	r2, #71	@ 0x47
 800f4dc:	d1c2      	bne.n	800f464 <_printf_float+0xf0>
 800f4de:	2b00      	cmp	r3, #0
 800f4e0:	d1c0      	bne.n	800f464 <_printf_float+0xf0>
 800f4e2:	2301      	movs	r3, #1
 800f4e4:	e7bd      	b.n	800f462 <_printf_float+0xee>
 800f4e6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800f4ea:	d9db      	bls.n	800f4a4 <_printf_float+0x130>
 800f4ec:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800f4f0:	d118      	bne.n	800f524 <_printf_float+0x1b0>
 800f4f2:	2900      	cmp	r1, #0
 800f4f4:	6863      	ldr	r3, [r4, #4]
 800f4f6:	dd0b      	ble.n	800f510 <_printf_float+0x19c>
 800f4f8:	6121      	str	r1, [r4, #16]
 800f4fa:	b913      	cbnz	r3, 800f502 <_printf_float+0x18e>
 800f4fc:	6822      	ldr	r2, [r4, #0]
 800f4fe:	07d0      	lsls	r0, r2, #31
 800f500:	d502      	bpl.n	800f508 <_printf_float+0x194>
 800f502:	3301      	adds	r3, #1
 800f504:	440b      	add	r3, r1
 800f506:	6123      	str	r3, [r4, #16]
 800f508:	65a1      	str	r1, [r4, #88]	@ 0x58
 800f50a:	f04f 0900 	mov.w	r9, #0
 800f50e:	e7db      	b.n	800f4c8 <_printf_float+0x154>
 800f510:	b913      	cbnz	r3, 800f518 <_printf_float+0x1a4>
 800f512:	6822      	ldr	r2, [r4, #0]
 800f514:	07d2      	lsls	r2, r2, #31
 800f516:	d501      	bpl.n	800f51c <_printf_float+0x1a8>
 800f518:	3302      	adds	r3, #2
 800f51a:	e7f4      	b.n	800f506 <_printf_float+0x192>
 800f51c:	2301      	movs	r3, #1
 800f51e:	e7f2      	b.n	800f506 <_printf_float+0x192>
 800f520:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800f524:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f526:	4299      	cmp	r1, r3
 800f528:	db05      	blt.n	800f536 <_printf_float+0x1c2>
 800f52a:	6823      	ldr	r3, [r4, #0]
 800f52c:	6121      	str	r1, [r4, #16]
 800f52e:	07d8      	lsls	r0, r3, #31
 800f530:	d5ea      	bpl.n	800f508 <_printf_float+0x194>
 800f532:	1c4b      	adds	r3, r1, #1
 800f534:	e7e7      	b.n	800f506 <_printf_float+0x192>
 800f536:	2900      	cmp	r1, #0
 800f538:	bfd4      	ite	le
 800f53a:	f1c1 0202 	rsble	r2, r1, #2
 800f53e:	2201      	movgt	r2, #1
 800f540:	4413      	add	r3, r2
 800f542:	e7e0      	b.n	800f506 <_printf_float+0x192>
 800f544:	6823      	ldr	r3, [r4, #0]
 800f546:	055a      	lsls	r2, r3, #21
 800f548:	d407      	bmi.n	800f55a <_printf_float+0x1e6>
 800f54a:	6923      	ldr	r3, [r4, #16]
 800f54c:	4642      	mov	r2, r8
 800f54e:	4631      	mov	r1, r6
 800f550:	4628      	mov	r0, r5
 800f552:	47b8      	blx	r7
 800f554:	3001      	adds	r0, #1
 800f556:	d12b      	bne.n	800f5b0 <_printf_float+0x23c>
 800f558:	e767      	b.n	800f42a <_printf_float+0xb6>
 800f55a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800f55e:	f240 80dd 	bls.w	800f71c <_printf_float+0x3a8>
 800f562:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800f566:	2200      	movs	r2, #0
 800f568:	2300      	movs	r3, #0
 800f56a:	f7f1 fa85 	bl	8000a78 <__aeabi_dcmpeq>
 800f56e:	2800      	cmp	r0, #0
 800f570:	d033      	beq.n	800f5da <_printf_float+0x266>
 800f572:	4a37      	ldr	r2, [pc, #220]	@ (800f650 <_printf_float+0x2dc>)
 800f574:	2301      	movs	r3, #1
 800f576:	4631      	mov	r1, r6
 800f578:	4628      	mov	r0, r5
 800f57a:	47b8      	blx	r7
 800f57c:	3001      	adds	r0, #1
 800f57e:	f43f af54 	beq.w	800f42a <_printf_float+0xb6>
 800f582:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800f586:	4543      	cmp	r3, r8
 800f588:	db02      	blt.n	800f590 <_printf_float+0x21c>
 800f58a:	6823      	ldr	r3, [r4, #0]
 800f58c:	07d8      	lsls	r0, r3, #31
 800f58e:	d50f      	bpl.n	800f5b0 <_printf_float+0x23c>
 800f590:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f594:	4631      	mov	r1, r6
 800f596:	4628      	mov	r0, r5
 800f598:	47b8      	blx	r7
 800f59a:	3001      	adds	r0, #1
 800f59c:	f43f af45 	beq.w	800f42a <_printf_float+0xb6>
 800f5a0:	f04f 0900 	mov.w	r9, #0
 800f5a4:	f108 38ff 	add.w	r8, r8, #4294967295
 800f5a8:	f104 0a1a 	add.w	sl, r4, #26
 800f5ac:	45c8      	cmp	r8, r9
 800f5ae:	dc09      	bgt.n	800f5c4 <_printf_float+0x250>
 800f5b0:	6823      	ldr	r3, [r4, #0]
 800f5b2:	079b      	lsls	r3, r3, #30
 800f5b4:	f100 8103 	bmi.w	800f7be <_printf_float+0x44a>
 800f5b8:	68e0      	ldr	r0, [r4, #12]
 800f5ba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f5bc:	4298      	cmp	r0, r3
 800f5be:	bfb8      	it	lt
 800f5c0:	4618      	movlt	r0, r3
 800f5c2:	e734      	b.n	800f42e <_printf_float+0xba>
 800f5c4:	2301      	movs	r3, #1
 800f5c6:	4652      	mov	r2, sl
 800f5c8:	4631      	mov	r1, r6
 800f5ca:	4628      	mov	r0, r5
 800f5cc:	47b8      	blx	r7
 800f5ce:	3001      	adds	r0, #1
 800f5d0:	f43f af2b 	beq.w	800f42a <_printf_float+0xb6>
 800f5d4:	f109 0901 	add.w	r9, r9, #1
 800f5d8:	e7e8      	b.n	800f5ac <_printf_float+0x238>
 800f5da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f5dc:	2b00      	cmp	r3, #0
 800f5de:	dc39      	bgt.n	800f654 <_printf_float+0x2e0>
 800f5e0:	4a1b      	ldr	r2, [pc, #108]	@ (800f650 <_printf_float+0x2dc>)
 800f5e2:	2301      	movs	r3, #1
 800f5e4:	4631      	mov	r1, r6
 800f5e6:	4628      	mov	r0, r5
 800f5e8:	47b8      	blx	r7
 800f5ea:	3001      	adds	r0, #1
 800f5ec:	f43f af1d 	beq.w	800f42a <_printf_float+0xb6>
 800f5f0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800f5f4:	ea59 0303 	orrs.w	r3, r9, r3
 800f5f8:	d102      	bne.n	800f600 <_printf_float+0x28c>
 800f5fa:	6823      	ldr	r3, [r4, #0]
 800f5fc:	07d9      	lsls	r1, r3, #31
 800f5fe:	d5d7      	bpl.n	800f5b0 <_printf_float+0x23c>
 800f600:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f604:	4631      	mov	r1, r6
 800f606:	4628      	mov	r0, r5
 800f608:	47b8      	blx	r7
 800f60a:	3001      	adds	r0, #1
 800f60c:	f43f af0d 	beq.w	800f42a <_printf_float+0xb6>
 800f610:	f04f 0a00 	mov.w	sl, #0
 800f614:	f104 0b1a 	add.w	fp, r4, #26
 800f618:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f61a:	425b      	negs	r3, r3
 800f61c:	4553      	cmp	r3, sl
 800f61e:	dc01      	bgt.n	800f624 <_printf_float+0x2b0>
 800f620:	464b      	mov	r3, r9
 800f622:	e793      	b.n	800f54c <_printf_float+0x1d8>
 800f624:	2301      	movs	r3, #1
 800f626:	465a      	mov	r2, fp
 800f628:	4631      	mov	r1, r6
 800f62a:	4628      	mov	r0, r5
 800f62c:	47b8      	blx	r7
 800f62e:	3001      	adds	r0, #1
 800f630:	f43f aefb 	beq.w	800f42a <_printf_float+0xb6>
 800f634:	f10a 0a01 	add.w	sl, sl, #1
 800f638:	e7ee      	b.n	800f618 <_printf_float+0x2a4>
 800f63a:	bf00      	nop
 800f63c:	7fefffff 	.word	0x7fefffff
 800f640:	08018253 	.word	0x08018253
 800f644:	08018257 	.word	0x08018257
 800f648:	0801825b 	.word	0x0801825b
 800f64c:	0801825f 	.word	0x0801825f
 800f650:	08018263 	.word	0x08018263
 800f654:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800f656:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800f65a:	4553      	cmp	r3, sl
 800f65c:	bfa8      	it	ge
 800f65e:	4653      	movge	r3, sl
 800f660:	2b00      	cmp	r3, #0
 800f662:	4699      	mov	r9, r3
 800f664:	dc36      	bgt.n	800f6d4 <_printf_float+0x360>
 800f666:	f04f 0b00 	mov.w	fp, #0
 800f66a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f66e:	f104 021a 	add.w	r2, r4, #26
 800f672:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800f674:	9306      	str	r3, [sp, #24]
 800f676:	eba3 0309 	sub.w	r3, r3, r9
 800f67a:	455b      	cmp	r3, fp
 800f67c:	dc31      	bgt.n	800f6e2 <_printf_float+0x36e>
 800f67e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f680:	459a      	cmp	sl, r3
 800f682:	dc3a      	bgt.n	800f6fa <_printf_float+0x386>
 800f684:	6823      	ldr	r3, [r4, #0]
 800f686:	07da      	lsls	r2, r3, #31
 800f688:	d437      	bmi.n	800f6fa <_printf_float+0x386>
 800f68a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f68c:	ebaa 0903 	sub.w	r9, sl, r3
 800f690:	9b06      	ldr	r3, [sp, #24]
 800f692:	ebaa 0303 	sub.w	r3, sl, r3
 800f696:	4599      	cmp	r9, r3
 800f698:	bfa8      	it	ge
 800f69a:	4699      	movge	r9, r3
 800f69c:	f1b9 0f00 	cmp.w	r9, #0
 800f6a0:	dc33      	bgt.n	800f70a <_printf_float+0x396>
 800f6a2:	f04f 0800 	mov.w	r8, #0
 800f6a6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f6aa:	f104 0b1a 	add.w	fp, r4, #26
 800f6ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f6b0:	ebaa 0303 	sub.w	r3, sl, r3
 800f6b4:	eba3 0309 	sub.w	r3, r3, r9
 800f6b8:	4543      	cmp	r3, r8
 800f6ba:	f77f af79 	ble.w	800f5b0 <_printf_float+0x23c>
 800f6be:	2301      	movs	r3, #1
 800f6c0:	465a      	mov	r2, fp
 800f6c2:	4631      	mov	r1, r6
 800f6c4:	4628      	mov	r0, r5
 800f6c6:	47b8      	blx	r7
 800f6c8:	3001      	adds	r0, #1
 800f6ca:	f43f aeae 	beq.w	800f42a <_printf_float+0xb6>
 800f6ce:	f108 0801 	add.w	r8, r8, #1
 800f6d2:	e7ec      	b.n	800f6ae <_printf_float+0x33a>
 800f6d4:	4642      	mov	r2, r8
 800f6d6:	4631      	mov	r1, r6
 800f6d8:	4628      	mov	r0, r5
 800f6da:	47b8      	blx	r7
 800f6dc:	3001      	adds	r0, #1
 800f6de:	d1c2      	bne.n	800f666 <_printf_float+0x2f2>
 800f6e0:	e6a3      	b.n	800f42a <_printf_float+0xb6>
 800f6e2:	2301      	movs	r3, #1
 800f6e4:	4631      	mov	r1, r6
 800f6e6:	4628      	mov	r0, r5
 800f6e8:	9206      	str	r2, [sp, #24]
 800f6ea:	47b8      	blx	r7
 800f6ec:	3001      	adds	r0, #1
 800f6ee:	f43f ae9c 	beq.w	800f42a <_printf_float+0xb6>
 800f6f2:	9a06      	ldr	r2, [sp, #24]
 800f6f4:	f10b 0b01 	add.w	fp, fp, #1
 800f6f8:	e7bb      	b.n	800f672 <_printf_float+0x2fe>
 800f6fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f6fe:	4631      	mov	r1, r6
 800f700:	4628      	mov	r0, r5
 800f702:	47b8      	blx	r7
 800f704:	3001      	adds	r0, #1
 800f706:	d1c0      	bne.n	800f68a <_printf_float+0x316>
 800f708:	e68f      	b.n	800f42a <_printf_float+0xb6>
 800f70a:	9a06      	ldr	r2, [sp, #24]
 800f70c:	464b      	mov	r3, r9
 800f70e:	4442      	add	r2, r8
 800f710:	4631      	mov	r1, r6
 800f712:	4628      	mov	r0, r5
 800f714:	47b8      	blx	r7
 800f716:	3001      	adds	r0, #1
 800f718:	d1c3      	bne.n	800f6a2 <_printf_float+0x32e>
 800f71a:	e686      	b.n	800f42a <_printf_float+0xb6>
 800f71c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800f720:	f1ba 0f01 	cmp.w	sl, #1
 800f724:	dc01      	bgt.n	800f72a <_printf_float+0x3b6>
 800f726:	07db      	lsls	r3, r3, #31
 800f728:	d536      	bpl.n	800f798 <_printf_float+0x424>
 800f72a:	2301      	movs	r3, #1
 800f72c:	4642      	mov	r2, r8
 800f72e:	4631      	mov	r1, r6
 800f730:	4628      	mov	r0, r5
 800f732:	47b8      	blx	r7
 800f734:	3001      	adds	r0, #1
 800f736:	f43f ae78 	beq.w	800f42a <_printf_float+0xb6>
 800f73a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f73e:	4631      	mov	r1, r6
 800f740:	4628      	mov	r0, r5
 800f742:	47b8      	blx	r7
 800f744:	3001      	adds	r0, #1
 800f746:	f43f ae70 	beq.w	800f42a <_printf_float+0xb6>
 800f74a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800f74e:	2200      	movs	r2, #0
 800f750:	2300      	movs	r3, #0
 800f752:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f756:	f7f1 f98f 	bl	8000a78 <__aeabi_dcmpeq>
 800f75a:	b9c0      	cbnz	r0, 800f78e <_printf_float+0x41a>
 800f75c:	4653      	mov	r3, sl
 800f75e:	f108 0201 	add.w	r2, r8, #1
 800f762:	4631      	mov	r1, r6
 800f764:	4628      	mov	r0, r5
 800f766:	47b8      	blx	r7
 800f768:	3001      	adds	r0, #1
 800f76a:	d10c      	bne.n	800f786 <_printf_float+0x412>
 800f76c:	e65d      	b.n	800f42a <_printf_float+0xb6>
 800f76e:	2301      	movs	r3, #1
 800f770:	465a      	mov	r2, fp
 800f772:	4631      	mov	r1, r6
 800f774:	4628      	mov	r0, r5
 800f776:	47b8      	blx	r7
 800f778:	3001      	adds	r0, #1
 800f77a:	f43f ae56 	beq.w	800f42a <_printf_float+0xb6>
 800f77e:	f108 0801 	add.w	r8, r8, #1
 800f782:	45d0      	cmp	r8, sl
 800f784:	dbf3      	blt.n	800f76e <_printf_float+0x3fa>
 800f786:	464b      	mov	r3, r9
 800f788:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800f78c:	e6df      	b.n	800f54e <_printf_float+0x1da>
 800f78e:	f04f 0800 	mov.w	r8, #0
 800f792:	f104 0b1a 	add.w	fp, r4, #26
 800f796:	e7f4      	b.n	800f782 <_printf_float+0x40e>
 800f798:	2301      	movs	r3, #1
 800f79a:	4642      	mov	r2, r8
 800f79c:	e7e1      	b.n	800f762 <_printf_float+0x3ee>
 800f79e:	2301      	movs	r3, #1
 800f7a0:	464a      	mov	r2, r9
 800f7a2:	4631      	mov	r1, r6
 800f7a4:	4628      	mov	r0, r5
 800f7a6:	47b8      	blx	r7
 800f7a8:	3001      	adds	r0, #1
 800f7aa:	f43f ae3e 	beq.w	800f42a <_printf_float+0xb6>
 800f7ae:	f108 0801 	add.w	r8, r8, #1
 800f7b2:	68e3      	ldr	r3, [r4, #12]
 800f7b4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800f7b6:	1a5b      	subs	r3, r3, r1
 800f7b8:	4543      	cmp	r3, r8
 800f7ba:	dcf0      	bgt.n	800f79e <_printf_float+0x42a>
 800f7bc:	e6fc      	b.n	800f5b8 <_printf_float+0x244>
 800f7be:	f04f 0800 	mov.w	r8, #0
 800f7c2:	f104 0919 	add.w	r9, r4, #25
 800f7c6:	e7f4      	b.n	800f7b2 <_printf_float+0x43e>

0800f7c8 <_printf_common>:
 800f7c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f7cc:	4616      	mov	r6, r2
 800f7ce:	4698      	mov	r8, r3
 800f7d0:	688a      	ldr	r2, [r1, #8]
 800f7d2:	690b      	ldr	r3, [r1, #16]
 800f7d4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f7d8:	4293      	cmp	r3, r2
 800f7da:	bfb8      	it	lt
 800f7dc:	4613      	movlt	r3, r2
 800f7de:	6033      	str	r3, [r6, #0]
 800f7e0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800f7e4:	4607      	mov	r7, r0
 800f7e6:	460c      	mov	r4, r1
 800f7e8:	b10a      	cbz	r2, 800f7ee <_printf_common+0x26>
 800f7ea:	3301      	adds	r3, #1
 800f7ec:	6033      	str	r3, [r6, #0]
 800f7ee:	6823      	ldr	r3, [r4, #0]
 800f7f0:	0699      	lsls	r1, r3, #26
 800f7f2:	bf42      	ittt	mi
 800f7f4:	6833      	ldrmi	r3, [r6, #0]
 800f7f6:	3302      	addmi	r3, #2
 800f7f8:	6033      	strmi	r3, [r6, #0]
 800f7fa:	6825      	ldr	r5, [r4, #0]
 800f7fc:	f015 0506 	ands.w	r5, r5, #6
 800f800:	d106      	bne.n	800f810 <_printf_common+0x48>
 800f802:	f104 0a19 	add.w	sl, r4, #25
 800f806:	68e3      	ldr	r3, [r4, #12]
 800f808:	6832      	ldr	r2, [r6, #0]
 800f80a:	1a9b      	subs	r3, r3, r2
 800f80c:	42ab      	cmp	r3, r5
 800f80e:	dc26      	bgt.n	800f85e <_printf_common+0x96>
 800f810:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800f814:	6822      	ldr	r2, [r4, #0]
 800f816:	3b00      	subs	r3, #0
 800f818:	bf18      	it	ne
 800f81a:	2301      	movne	r3, #1
 800f81c:	0692      	lsls	r2, r2, #26
 800f81e:	d42b      	bmi.n	800f878 <_printf_common+0xb0>
 800f820:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800f824:	4641      	mov	r1, r8
 800f826:	4638      	mov	r0, r7
 800f828:	47c8      	blx	r9
 800f82a:	3001      	adds	r0, #1
 800f82c:	d01e      	beq.n	800f86c <_printf_common+0xa4>
 800f82e:	6823      	ldr	r3, [r4, #0]
 800f830:	6922      	ldr	r2, [r4, #16]
 800f832:	f003 0306 	and.w	r3, r3, #6
 800f836:	2b04      	cmp	r3, #4
 800f838:	bf02      	ittt	eq
 800f83a:	68e5      	ldreq	r5, [r4, #12]
 800f83c:	6833      	ldreq	r3, [r6, #0]
 800f83e:	1aed      	subeq	r5, r5, r3
 800f840:	68a3      	ldr	r3, [r4, #8]
 800f842:	bf0c      	ite	eq
 800f844:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f848:	2500      	movne	r5, #0
 800f84a:	4293      	cmp	r3, r2
 800f84c:	bfc4      	itt	gt
 800f84e:	1a9b      	subgt	r3, r3, r2
 800f850:	18ed      	addgt	r5, r5, r3
 800f852:	2600      	movs	r6, #0
 800f854:	341a      	adds	r4, #26
 800f856:	42b5      	cmp	r5, r6
 800f858:	d11a      	bne.n	800f890 <_printf_common+0xc8>
 800f85a:	2000      	movs	r0, #0
 800f85c:	e008      	b.n	800f870 <_printf_common+0xa8>
 800f85e:	2301      	movs	r3, #1
 800f860:	4652      	mov	r2, sl
 800f862:	4641      	mov	r1, r8
 800f864:	4638      	mov	r0, r7
 800f866:	47c8      	blx	r9
 800f868:	3001      	adds	r0, #1
 800f86a:	d103      	bne.n	800f874 <_printf_common+0xac>
 800f86c:	f04f 30ff 	mov.w	r0, #4294967295
 800f870:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f874:	3501      	adds	r5, #1
 800f876:	e7c6      	b.n	800f806 <_printf_common+0x3e>
 800f878:	18e1      	adds	r1, r4, r3
 800f87a:	1c5a      	adds	r2, r3, #1
 800f87c:	2030      	movs	r0, #48	@ 0x30
 800f87e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800f882:	4422      	add	r2, r4
 800f884:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800f888:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800f88c:	3302      	adds	r3, #2
 800f88e:	e7c7      	b.n	800f820 <_printf_common+0x58>
 800f890:	2301      	movs	r3, #1
 800f892:	4622      	mov	r2, r4
 800f894:	4641      	mov	r1, r8
 800f896:	4638      	mov	r0, r7
 800f898:	47c8      	blx	r9
 800f89a:	3001      	adds	r0, #1
 800f89c:	d0e6      	beq.n	800f86c <_printf_common+0xa4>
 800f89e:	3601      	adds	r6, #1
 800f8a0:	e7d9      	b.n	800f856 <_printf_common+0x8e>
	...

0800f8a4 <_printf_i>:
 800f8a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f8a8:	7e0f      	ldrb	r7, [r1, #24]
 800f8aa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800f8ac:	2f78      	cmp	r7, #120	@ 0x78
 800f8ae:	4691      	mov	r9, r2
 800f8b0:	4680      	mov	r8, r0
 800f8b2:	460c      	mov	r4, r1
 800f8b4:	469a      	mov	sl, r3
 800f8b6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800f8ba:	d807      	bhi.n	800f8cc <_printf_i+0x28>
 800f8bc:	2f62      	cmp	r7, #98	@ 0x62
 800f8be:	d80a      	bhi.n	800f8d6 <_printf_i+0x32>
 800f8c0:	2f00      	cmp	r7, #0
 800f8c2:	f000 80d2 	beq.w	800fa6a <_printf_i+0x1c6>
 800f8c6:	2f58      	cmp	r7, #88	@ 0x58
 800f8c8:	f000 80b9 	beq.w	800fa3e <_printf_i+0x19a>
 800f8cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f8d0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800f8d4:	e03a      	b.n	800f94c <_printf_i+0xa8>
 800f8d6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800f8da:	2b15      	cmp	r3, #21
 800f8dc:	d8f6      	bhi.n	800f8cc <_printf_i+0x28>
 800f8de:	a101      	add	r1, pc, #4	@ (adr r1, 800f8e4 <_printf_i+0x40>)
 800f8e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f8e4:	0800f93d 	.word	0x0800f93d
 800f8e8:	0800f951 	.word	0x0800f951
 800f8ec:	0800f8cd 	.word	0x0800f8cd
 800f8f0:	0800f8cd 	.word	0x0800f8cd
 800f8f4:	0800f8cd 	.word	0x0800f8cd
 800f8f8:	0800f8cd 	.word	0x0800f8cd
 800f8fc:	0800f951 	.word	0x0800f951
 800f900:	0800f8cd 	.word	0x0800f8cd
 800f904:	0800f8cd 	.word	0x0800f8cd
 800f908:	0800f8cd 	.word	0x0800f8cd
 800f90c:	0800f8cd 	.word	0x0800f8cd
 800f910:	0800fa51 	.word	0x0800fa51
 800f914:	0800f97b 	.word	0x0800f97b
 800f918:	0800fa0b 	.word	0x0800fa0b
 800f91c:	0800f8cd 	.word	0x0800f8cd
 800f920:	0800f8cd 	.word	0x0800f8cd
 800f924:	0800fa73 	.word	0x0800fa73
 800f928:	0800f8cd 	.word	0x0800f8cd
 800f92c:	0800f97b 	.word	0x0800f97b
 800f930:	0800f8cd 	.word	0x0800f8cd
 800f934:	0800f8cd 	.word	0x0800f8cd
 800f938:	0800fa13 	.word	0x0800fa13
 800f93c:	6833      	ldr	r3, [r6, #0]
 800f93e:	1d1a      	adds	r2, r3, #4
 800f940:	681b      	ldr	r3, [r3, #0]
 800f942:	6032      	str	r2, [r6, #0]
 800f944:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f948:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800f94c:	2301      	movs	r3, #1
 800f94e:	e09d      	b.n	800fa8c <_printf_i+0x1e8>
 800f950:	6833      	ldr	r3, [r6, #0]
 800f952:	6820      	ldr	r0, [r4, #0]
 800f954:	1d19      	adds	r1, r3, #4
 800f956:	6031      	str	r1, [r6, #0]
 800f958:	0606      	lsls	r6, r0, #24
 800f95a:	d501      	bpl.n	800f960 <_printf_i+0xbc>
 800f95c:	681d      	ldr	r5, [r3, #0]
 800f95e:	e003      	b.n	800f968 <_printf_i+0xc4>
 800f960:	0645      	lsls	r5, r0, #25
 800f962:	d5fb      	bpl.n	800f95c <_printf_i+0xb8>
 800f964:	f9b3 5000 	ldrsh.w	r5, [r3]
 800f968:	2d00      	cmp	r5, #0
 800f96a:	da03      	bge.n	800f974 <_printf_i+0xd0>
 800f96c:	232d      	movs	r3, #45	@ 0x2d
 800f96e:	426d      	negs	r5, r5
 800f970:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f974:	4859      	ldr	r0, [pc, #356]	@ (800fadc <_printf_i+0x238>)
 800f976:	230a      	movs	r3, #10
 800f978:	e011      	b.n	800f99e <_printf_i+0xfa>
 800f97a:	6821      	ldr	r1, [r4, #0]
 800f97c:	6833      	ldr	r3, [r6, #0]
 800f97e:	0608      	lsls	r0, r1, #24
 800f980:	f853 5b04 	ldr.w	r5, [r3], #4
 800f984:	d402      	bmi.n	800f98c <_printf_i+0xe8>
 800f986:	0649      	lsls	r1, r1, #25
 800f988:	bf48      	it	mi
 800f98a:	b2ad      	uxthmi	r5, r5
 800f98c:	2f6f      	cmp	r7, #111	@ 0x6f
 800f98e:	4853      	ldr	r0, [pc, #332]	@ (800fadc <_printf_i+0x238>)
 800f990:	6033      	str	r3, [r6, #0]
 800f992:	bf14      	ite	ne
 800f994:	230a      	movne	r3, #10
 800f996:	2308      	moveq	r3, #8
 800f998:	2100      	movs	r1, #0
 800f99a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800f99e:	6866      	ldr	r6, [r4, #4]
 800f9a0:	60a6      	str	r6, [r4, #8]
 800f9a2:	2e00      	cmp	r6, #0
 800f9a4:	bfa2      	ittt	ge
 800f9a6:	6821      	ldrge	r1, [r4, #0]
 800f9a8:	f021 0104 	bicge.w	r1, r1, #4
 800f9ac:	6021      	strge	r1, [r4, #0]
 800f9ae:	b90d      	cbnz	r5, 800f9b4 <_printf_i+0x110>
 800f9b0:	2e00      	cmp	r6, #0
 800f9b2:	d04b      	beq.n	800fa4c <_printf_i+0x1a8>
 800f9b4:	4616      	mov	r6, r2
 800f9b6:	fbb5 f1f3 	udiv	r1, r5, r3
 800f9ba:	fb03 5711 	mls	r7, r3, r1, r5
 800f9be:	5dc7      	ldrb	r7, [r0, r7]
 800f9c0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f9c4:	462f      	mov	r7, r5
 800f9c6:	42bb      	cmp	r3, r7
 800f9c8:	460d      	mov	r5, r1
 800f9ca:	d9f4      	bls.n	800f9b6 <_printf_i+0x112>
 800f9cc:	2b08      	cmp	r3, #8
 800f9ce:	d10b      	bne.n	800f9e8 <_printf_i+0x144>
 800f9d0:	6823      	ldr	r3, [r4, #0]
 800f9d2:	07df      	lsls	r7, r3, #31
 800f9d4:	d508      	bpl.n	800f9e8 <_printf_i+0x144>
 800f9d6:	6923      	ldr	r3, [r4, #16]
 800f9d8:	6861      	ldr	r1, [r4, #4]
 800f9da:	4299      	cmp	r1, r3
 800f9dc:	bfde      	ittt	le
 800f9de:	2330      	movle	r3, #48	@ 0x30
 800f9e0:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f9e4:	f106 36ff 	addle.w	r6, r6, #4294967295
 800f9e8:	1b92      	subs	r2, r2, r6
 800f9ea:	6122      	str	r2, [r4, #16]
 800f9ec:	f8cd a000 	str.w	sl, [sp]
 800f9f0:	464b      	mov	r3, r9
 800f9f2:	aa03      	add	r2, sp, #12
 800f9f4:	4621      	mov	r1, r4
 800f9f6:	4640      	mov	r0, r8
 800f9f8:	f7ff fee6 	bl	800f7c8 <_printf_common>
 800f9fc:	3001      	adds	r0, #1
 800f9fe:	d14a      	bne.n	800fa96 <_printf_i+0x1f2>
 800fa00:	f04f 30ff 	mov.w	r0, #4294967295
 800fa04:	b004      	add	sp, #16
 800fa06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fa0a:	6823      	ldr	r3, [r4, #0]
 800fa0c:	f043 0320 	orr.w	r3, r3, #32
 800fa10:	6023      	str	r3, [r4, #0]
 800fa12:	4833      	ldr	r0, [pc, #204]	@ (800fae0 <_printf_i+0x23c>)
 800fa14:	2778      	movs	r7, #120	@ 0x78
 800fa16:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800fa1a:	6823      	ldr	r3, [r4, #0]
 800fa1c:	6831      	ldr	r1, [r6, #0]
 800fa1e:	061f      	lsls	r7, r3, #24
 800fa20:	f851 5b04 	ldr.w	r5, [r1], #4
 800fa24:	d402      	bmi.n	800fa2c <_printf_i+0x188>
 800fa26:	065f      	lsls	r7, r3, #25
 800fa28:	bf48      	it	mi
 800fa2a:	b2ad      	uxthmi	r5, r5
 800fa2c:	6031      	str	r1, [r6, #0]
 800fa2e:	07d9      	lsls	r1, r3, #31
 800fa30:	bf44      	itt	mi
 800fa32:	f043 0320 	orrmi.w	r3, r3, #32
 800fa36:	6023      	strmi	r3, [r4, #0]
 800fa38:	b11d      	cbz	r5, 800fa42 <_printf_i+0x19e>
 800fa3a:	2310      	movs	r3, #16
 800fa3c:	e7ac      	b.n	800f998 <_printf_i+0xf4>
 800fa3e:	4827      	ldr	r0, [pc, #156]	@ (800fadc <_printf_i+0x238>)
 800fa40:	e7e9      	b.n	800fa16 <_printf_i+0x172>
 800fa42:	6823      	ldr	r3, [r4, #0]
 800fa44:	f023 0320 	bic.w	r3, r3, #32
 800fa48:	6023      	str	r3, [r4, #0]
 800fa4a:	e7f6      	b.n	800fa3a <_printf_i+0x196>
 800fa4c:	4616      	mov	r6, r2
 800fa4e:	e7bd      	b.n	800f9cc <_printf_i+0x128>
 800fa50:	6833      	ldr	r3, [r6, #0]
 800fa52:	6825      	ldr	r5, [r4, #0]
 800fa54:	6961      	ldr	r1, [r4, #20]
 800fa56:	1d18      	adds	r0, r3, #4
 800fa58:	6030      	str	r0, [r6, #0]
 800fa5a:	062e      	lsls	r6, r5, #24
 800fa5c:	681b      	ldr	r3, [r3, #0]
 800fa5e:	d501      	bpl.n	800fa64 <_printf_i+0x1c0>
 800fa60:	6019      	str	r1, [r3, #0]
 800fa62:	e002      	b.n	800fa6a <_printf_i+0x1c6>
 800fa64:	0668      	lsls	r0, r5, #25
 800fa66:	d5fb      	bpl.n	800fa60 <_printf_i+0x1bc>
 800fa68:	8019      	strh	r1, [r3, #0]
 800fa6a:	2300      	movs	r3, #0
 800fa6c:	6123      	str	r3, [r4, #16]
 800fa6e:	4616      	mov	r6, r2
 800fa70:	e7bc      	b.n	800f9ec <_printf_i+0x148>
 800fa72:	6833      	ldr	r3, [r6, #0]
 800fa74:	1d1a      	adds	r2, r3, #4
 800fa76:	6032      	str	r2, [r6, #0]
 800fa78:	681e      	ldr	r6, [r3, #0]
 800fa7a:	6862      	ldr	r2, [r4, #4]
 800fa7c:	2100      	movs	r1, #0
 800fa7e:	4630      	mov	r0, r6
 800fa80:	f7f0 fb7e 	bl	8000180 <memchr>
 800fa84:	b108      	cbz	r0, 800fa8a <_printf_i+0x1e6>
 800fa86:	1b80      	subs	r0, r0, r6
 800fa88:	6060      	str	r0, [r4, #4]
 800fa8a:	6863      	ldr	r3, [r4, #4]
 800fa8c:	6123      	str	r3, [r4, #16]
 800fa8e:	2300      	movs	r3, #0
 800fa90:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fa94:	e7aa      	b.n	800f9ec <_printf_i+0x148>
 800fa96:	6923      	ldr	r3, [r4, #16]
 800fa98:	4632      	mov	r2, r6
 800fa9a:	4649      	mov	r1, r9
 800fa9c:	4640      	mov	r0, r8
 800fa9e:	47d0      	blx	sl
 800faa0:	3001      	adds	r0, #1
 800faa2:	d0ad      	beq.n	800fa00 <_printf_i+0x15c>
 800faa4:	6823      	ldr	r3, [r4, #0]
 800faa6:	079b      	lsls	r3, r3, #30
 800faa8:	d413      	bmi.n	800fad2 <_printf_i+0x22e>
 800faaa:	68e0      	ldr	r0, [r4, #12]
 800faac:	9b03      	ldr	r3, [sp, #12]
 800faae:	4298      	cmp	r0, r3
 800fab0:	bfb8      	it	lt
 800fab2:	4618      	movlt	r0, r3
 800fab4:	e7a6      	b.n	800fa04 <_printf_i+0x160>
 800fab6:	2301      	movs	r3, #1
 800fab8:	4632      	mov	r2, r6
 800faba:	4649      	mov	r1, r9
 800fabc:	4640      	mov	r0, r8
 800fabe:	47d0      	blx	sl
 800fac0:	3001      	adds	r0, #1
 800fac2:	d09d      	beq.n	800fa00 <_printf_i+0x15c>
 800fac4:	3501      	adds	r5, #1
 800fac6:	68e3      	ldr	r3, [r4, #12]
 800fac8:	9903      	ldr	r1, [sp, #12]
 800faca:	1a5b      	subs	r3, r3, r1
 800facc:	42ab      	cmp	r3, r5
 800face:	dcf2      	bgt.n	800fab6 <_printf_i+0x212>
 800fad0:	e7eb      	b.n	800faaa <_printf_i+0x206>
 800fad2:	2500      	movs	r5, #0
 800fad4:	f104 0619 	add.w	r6, r4, #25
 800fad8:	e7f5      	b.n	800fac6 <_printf_i+0x222>
 800fada:	bf00      	nop
 800fadc:	08018265 	.word	0x08018265
 800fae0:	08018276 	.word	0x08018276

0800fae4 <_scanf_float>:
 800fae4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fae8:	b087      	sub	sp, #28
 800faea:	4617      	mov	r7, r2
 800faec:	9303      	str	r3, [sp, #12]
 800faee:	688b      	ldr	r3, [r1, #8]
 800faf0:	1e5a      	subs	r2, r3, #1
 800faf2:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800faf6:	bf81      	itttt	hi
 800faf8:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800fafc:	eb03 0b05 	addhi.w	fp, r3, r5
 800fb00:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800fb04:	608b      	strhi	r3, [r1, #8]
 800fb06:	680b      	ldr	r3, [r1, #0]
 800fb08:	460a      	mov	r2, r1
 800fb0a:	f04f 0500 	mov.w	r5, #0
 800fb0e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800fb12:	f842 3b1c 	str.w	r3, [r2], #28
 800fb16:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800fb1a:	4680      	mov	r8, r0
 800fb1c:	460c      	mov	r4, r1
 800fb1e:	bf98      	it	ls
 800fb20:	f04f 0b00 	movls.w	fp, #0
 800fb24:	9201      	str	r2, [sp, #4]
 800fb26:	4616      	mov	r6, r2
 800fb28:	46aa      	mov	sl, r5
 800fb2a:	46a9      	mov	r9, r5
 800fb2c:	9502      	str	r5, [sp, #8]
 800fb2e:	68a2      	ldr	r2, [r4, #8]
 800fb30:	b152      	cbz	r2, 800fb48 <_scanf_float+0x64>
 800fb32:	683b      	ldr	r3, [r7, #0]
 800fb34:	781b      	ldrb	r3, [r3, #0]
 800fb36:	2b4e      	cmp	r3, #78	@ 0x4e
 800fb38:	d864      	bhi.n	800fc04 <_scanf_float+0x120>
 800fb3a:	2b40      	cmp	r3, #64	@ 0x40
 800fb3c:	d83c      	bhi.n	800fbb8 <_scanf_float+0xd4>
 800fb3e:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800fb42:	b2c8      	uxtb	r0, r1
 800fb44:	280e      	cmp	r0, #14
 800fb46:	d93a      	bls.n	800fbbe <_scanf_float+0xda>
 800fb48:	f1b9 0f00 	cmp.w	r9, #0
 800fb4c:	d003      	beq.n	800fb56 <_scanf_float+0x72>
 800fb4e:	6823      	ldr	r3, [r4, #0]
 800fb50:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800fb54:	6023      	str	r3, [r4, #0]
 800fb56:	f10a 3aff 	add.w	sl, sl, #4294967295
 800fb5a:	f1ba 0f01 	cmp.w	sl, #1
 800fb5e:	f200 8117 	bhi.w	800fd90 <_scanf_float+0x2ac>
 800fb62:	9b01      	ldr	r3, [sp, #4]
 800fb64:	429e      	cmp	r6, r3
 800fb66:	f200 8108 	bhi.w	800fd7a <_scanf_float+0x296>
 800fb6a:	2001      	movs	r0, #1
 800fb6c:	b007      	add	sp, #28
 800fb6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb72:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800fb76:	2a0d      	cmp	r2, #13
 800fb78:	d8e6      	bhi.n	800fb48 <_scanf_float+0x64>
 800fb7a:	a101      	add	r1, pc, #4	@ (adr r1, 800fb80 <_scanf_float+0x9c>)
 800fb7c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800fb80:	0800fcc7 	.word	0x0800fcc7
 800fb84:	0800fb49 	.word	0x0800fb49
 800fb88:	0800fb49 	.word	0x0800fb49
 800fb8c:	0800fb49 	.word	0x0800fb49
 800fb90:	0800fd27 	.word	0x0800fd27
 800fb94:	0800fcff 	.word	0x0800fcff
 800fb98:	0800fb49 	.word	0x0800fb49
 800fb9c:	0800fb49 	.word	0x0800fb49
 800fba0:	0800fcd5 	.word	0x0800fcd5
 800fba4:	0800fb49 	.word	0x0800fb49
 800fba8:	0800fb49 	.word	0x0800fb49
 800fbac:	0800fb49 	.word	0x0800fb49
 800fbb0:	0800fb49 	.word	0x0800fb49
 800fbb4:	0800fc8d 	.word	0x0800fc8d
 800fbb8:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800fbbc:	e7db      	b.n	800fb76 <_scanf_float+0x92>
 800fbbe:	290e      	cmp	r1, #14
 800fbc0:	d8c2      	bhi.n	800fb48 <_scanf_float+0x64>
 800fbc2:	a001      	add	r0, pc, #4	@ (adr r0, 800fbc8 <_scanf_float+0xe4>)
 800fbc4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800fbc8:	0800fc7d 	.word	0x0800fc7d
 800fbcc:	0800fb49 	.word	0x0800fb49
 800fbd0:	0800fc7d 	.word	0x0800fc7d
 800fbd4:	0800fd13 	.word	0x0800fd13
 800fbd8:	0800fb49 	.word	0x0800fb49
 800fbdc:	0800fc25 	.word	0x0800fc25
 800fbe0:	0800fc63 	.word	0x0800fc63
 800fbe4:	0800fc63 	.word	0x0800fc63
 800fbe8:	0800fc63 	.word	0x0800fc63
 800fbec:	0800fc63 	.word	0x0800fc63
 800fbf0:	0800fc63 	.word	0x0800fc63
 800fbf4:	0800fc63 	.word	0x0800fc63
 800fbf8:	0800fc63 	.word	0x0800fc63
 800fbfc:	0800fc63 	.word	0x0800fc63
 800fc00:	0800fc63 	.word	0x0800fc63
 800fc04:	2b6e      	cmp	r3, #110	@ 0x6e
 800fc06:	d809      	bhi.n	800fc1c <_scanf_float+0x138>
 800fc08:	2b60      	cmp	r3, #96	@ 0x60
 800fc0a:	d8b2      	bhi.n	800fb72 <_scanf_float+0x8e>
 800fc0c:	2b54      	cmp	r3, #84	@ 0x54
 800fc0e:	d07b      	beq.n	800fd08 <_scanf_float+0x224>
 800fc10:	2b59      	cmp	r3, #89	@ 0x59
 800fc12:	d199      	bne.n	800fb48 <_scanf_float+0x64>
 800fc14:	2d07      	cmp	r5, #7
 800fc16:	d197      	bne.n	800fb48 <_scanf_float+0x64>
 800fc18:	2508      	movs	r5, #8
 800fc1a:	e02c      	b.n	800fc76 <_scanf_float+0x192>
 800fc1c:	2b74      	cmp	r3, #116	@ 0x74
 800fc1e:	d073      	beq.n	800fd08 <_scanf_float+0x224>
 800fc20:	2b79      	cmp	r3, #121	@ 0x79
 800fc22:	e7f6      	b.n	800fc12 <_scanf_float+0x12e>
 800fc24:	6821      	ldr	r1, [r4, #0]
 800fc26:	05c8      	lsls	r0, r1, #23
 800fc28:	d51b      	bpl.n	800fc62 <_scanf_float+0x17e>
 800fc2a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800fc2e:	6021      	str	r1, [r4, #0]
 800fc30:	f109 0901 	add.w	r9, r9, #1
 800fc34:	f1bb 0f00 	cmp.w	fp, #0
 800fc38:	d003      	beq.n	800fc42 <_scanf_float+0x15e>
 800fc3a:	3201      	adds	r2, #1
 800fc3c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800fc40:	60a2      	str	r2, [r4, #8]
 800fc42:	68a3      	ldr	r3, [r4, #8]
 800fc44:	3b01      	subs	r3, #1
 800fc46:	60a3      	str	r3, [r4, #8]
 800fc48:	6923      	ldr	r3, [r4, #16]
 800fc4a:	3301      	adds	r3, #1
 800fc4c:	6123      	str	r3, [r4, #16]
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	3b01      	subs	r3, #1
 800fc52:	2b00      	cmp	r3, #0
 800fc54:	607b      	str	r3, [r7, #4]
 800fc56:	f340 8087 	ble.w	800fd68 <_scanf_float+0x284>
 800fc5a:	683b      	ldr	r3, [r7, #0]
 800fc5c:	3301      	adds	r3, #1
 800fc5e:	603b      	str	r3, [r7, #0]
 800fc60:	e765      	b.n	800fb2e <_scanf_float+0x4a>
 800fc62:	eb1a 0105 	adds.w	r1, sl, r5
 800fc66:	f47f af6f 	bne.w	800fb48 <_scanf_float+0x64>
 800fc6a:	6822      	ldr	r2, [r4, #0]
 800fc6c:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800fc70:	6022      	str	r2, [r4, #0]
 800fc72:	460d      	mov	r5, r1
 800fc74:	468a      	mov	sl, r1
 800fc76:	f806 3b01 	strb.w	r3, [r6], #1
 800fc7a:	e7e2      	b.n	800fc42 <_scanf_float+0x15e>
 800fc7c:	6822      	ldr	r2, [r4, #0]
 800fc7e:	0610      	lsls	r0, r2, #24
 800fc80:	f57f af62 	bpl.w	800fb48 <_scanf_float+0x64>
 800fc84:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800fc88:	6022      	str	r2, [r4, #0]
 800fc8a:	e7f4      	b.n	800fc76 <_scanf_float+0x192>
 800fc8c:	f1ba 0f00 	cmp.w	sl, #0
 800fc90:	d10e      	bne.n	800fcb0 <_scanf_float+0x1cc>
 800fc92:	f1b9 0f00 	cmp.w	r9, #0
 800fc96:	d10e      	bne.n	800fcb6 <_scanf_float+0x1d2>
 800fc98:	6822      	ldr	r2, [r4, #0]
 800fc9a:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800fc9e:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800fca2:	d108      	bne.n	800fcb6 <_scanf_float+0x1d2>
 800fca4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800fca8:	6022      	str	r2, [r4, #0]
 800fcaa:	f04f 0a01 	mov.w	sl, #1
 800fcae:	e7e2      	b.n	800fc76 <_scanf_float+0x192>
 800fcb0:	f1ba 0f02 	cmp.w	sl, #2
 800fcb4:	d055      	beq.n	800fd62 <_scanf_float+0x27e>
 800fcb6:	2d01      	cmp	r5, #1
 800fcb8:	d002      	beq.n	800fcc0 <_scanf_float+0x1dc>
 800fcba:	2d04      	cmp	r5, #4
 800fcbc:	f47f af44 	bne.w	800fb48 <_scanf_float+0x64>
 800fcc0:	3501      	adds	r5, #1
 800fcc2:	b2ed      	uxtb	r5, r5
 800fcc4:	e7d7      	b.n	800fc76 <_scanf_float+0x192>
 800fcc6:	f1ba 0f01 	cmp.w	sl, #1
 800fcca:	f47f af3d 	bne.w	800fb48 <_scanf_float+0x64>
 800fcce:	f04f 0a02 	mov.w	sl, #2
 800fcd2:	e7d0      	b.n	800fc76 <_scanf_float+0x192>
 800fcd4:	b97d      	cbnz	r5, 800fcf6 <_scanf_float+0x212>
 800fcd6:	f1b9 0f00 	cmp.w	r9, #0
 800fcda:	f47f af38 	bne.w	800fb4e <_scanf_float+0x6a>
 800fcde:	6822      	ldr	r2, [r4, #0]
 800fce0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800fce4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800fce8:	f040 8108 	bne.w	800fefc <_scanf_float+0x418>
 800fcec:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800fcf0:	6022      	str	r2, [r4, #0]
 800fcf2:	2501      	movs	r5, #1
 800fcf4:	e7bf      	b.n	800fc76 <_scanf_float+0x192>
 800fcf6:	2d03      	cmp	r5, #3
 800fcf8:	d0e2      	beq.n	800fcc0 <_scanf_float+0x1dc>
 800fcfa:	2d05      	cmp	r5, #5
 800fcfc:	e7de      	b.n	800fcbc <_scanf_float+0x1d8>
 800fcfe:	2d02      	cmp	r5, #2
 800fd00:	f47f af22 	bne.w	800fb48 <_scanf_float+0x64>
 800fd04:	2503      	movs	r5, #3
 800fd06:	e7b6      	b.n	800fc76 <_scanf_float+0x192>
 800fd08:	2d06      	cmp	r5, #6
 800fd0a:	f47f af1d 	bne.w	800fb48 <_scanf_float+0x64>
 800fd0e:	2507      	movs	r5, #7
 800fd10:	e7b1      	b.n	800fc76 <_scanf_float+0x192>
 800fd12:	6822      	ldr	r2, [r4, #0]
 800fd14:	0591      	lsls	r1, r2, #22
 800fd16:	f57f af17 	bpl.w	800fb48 <_scanf_float+0x64>
 800fd1a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800fd1e:	6022      	str	r2, [r4, #0]
 800fd20:	f8cd 9008 	str.w	r9, [sp, #8]
 800fd24:	e7a7      	b.n	800fc76 <_scanf_float+0x192>
 800fd26:	6822      	ldr	r2, [r4, #0]
 800fd28:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800fd2c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800fd30:	d006      	beq.n	800fd40 <_scanf_float+0x25c>
 800fd32:	0550      	lsls	r0, r2, #21
 800fd34:	f57f af08 	bpl.w	800fb48 <_scanf_float+0x64>
 800fd38:	f1b9 0f00 	cmp.w	r9, #0
 800fd3c:	f000 80de 	beq.w	800fefc <_scanf_float+0x418>
 800fd40:	0591      	lsls	r1, r2, #22
 800fd42:	bf58      	it	pl
 800fd44:	9902      	ldrpl	r1, [sp, #8]
 800fd46:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800fd4a:	bf58      	it	pl
 800fd4c:	eba9 0101 	subpl.w	r1, r9, r1
 800fd50:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800fd54:	bf58      	it	pl
 800fd56:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800fd5a:	6022      	str	r2, [r4, #0]
 800fd5c:	f04f 0900 	mov.w	r9, #0
 800fd60:	e789      	b.n	800fc76 <_scanf_float+0x192>
 800fd62:	f04f 0a03 	mov.w	sl, #3
 800fd66:	e786      	b.n	800fc76 <_scanf_float+0x192>
 800fd68:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800fd6c:	4639      	mov	r1, r7
 800fd6e:	4640      	mov	r0, r8
 800fd70:	4798      	blx	r3
 800fd72:	2800      	cmp	r0, #0
 800fd74:	f43f aedb 	beq.w	800fb2e <_scanf_float+0x4a>
 800fd78:	e6e6      	b.n	800fb48 <_scanf_float+0x64>
 800fd7a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800fd7e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800fd82:	463a      	mov	r2, r7
 800fd84:	4640      	mov	r0, r8
 800fd86:	4798      	blx	r3
 800fd88:	6923      	ldr	r3, [r4, #16]
 800fd8a:	3b01      	subs	r3, #1
 800fd8c:	6123      	str	r3, [r4, #16]
 800fd8e:	e6e8      	b.n	800fb62 <_scanf_float+0x7e>
 800fd90:	1e6b      	subs	r3, r5, #1
 800fd92:	2b06      	cmp	r3, #6
 800fd94:	d824      	bhi.n	800fde0 <_scanf_float+0x2fc>
 800fd96:	2d02      	cmp	r5, #2
 800fd98:	d836      	bhi.n	800fe08 <_scanf_float+0x324>
 800fd9a:	9b01      	ldr	r3, [sp, #4]
 800fd9c:	429e      	cmp	r6, r3
 800fd9e:	f67f aee4 	bls.w	800fb6a <_scanf_float+0x86>
 800fda2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800fda6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800fdaa:	463a      	mov	r2, r7
 800fdac:	4640      	mov	r0, r8
 800fdae:	4798      	blx	r3
 800fdb0:	6923      	ldr	r3, [r4, #16]
 800fdb2:	3b01      	subs	r3, #1
 800fdb4:	6123      	str	r3, [r4, #16]
 800fdb6:	e7f0      	b.n	800fd9a <_scanf_float+0x2b6>
 800fdb8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800fdbc:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800fdc0:	463a      	mov	r2, r7
 800fdc2:	4640      	mov	r0, r8
 800fdc4:	4798      	blx	r3
 800fdc6:	6923      	ldr	r3, [r4, #16]
 800fdc8:	3b01      	subs	r3, #1
 800fdca:	6123      	str	r3, [r4, #16]
 800fdcc:	f10a 3aff 	add.w	sl, sl, #4294967295
 800fdd0:	fa5f fa8a 	uxtb.w	sl, sl
 800fdd4:	f1ba 0f02 	cmp.w	sl, #2
 800fdd8:	d1ee      	bne.n	800fdb8 <_scanf_float+0x2d4>
 800fdda:	3d03      	subs	r5, #3
 800fddc:	b2ed      	uxtb	r5, r5
 800fdde:	1b76      	subs	r6, r6, r5
 800fde0:	6823      	ldr	r3, [r4, #0]
 800fde2:	05da      	lsls	r2, r3, #23
 800fde4:	d530      	bpl.n	800fe48 <_scanf_float+0x364>
 800fde6:	055b      	lsls	r3, r3, #21
 800fde8:	d511      	bpl.n	800fe0e <_scanf_float+0x32a>
 800fdea:	9b01      	ldr	r3, [sp, #4]
 800fdec:	429e      	cmp	r6, r3
 800fdee:	f67f aebc 	bls.w	800fb6a <_scanf_float+0x86>
 800fdf2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800fdf6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800fdfa:	463a      	mov	r2, r7
 800fdfc:	4640      	mov	r0, r8
 800fdfe:	4798      	blx	r3
 800fe00:	6923      	ldr	r3, [r4, #16]
 800fe02:	3b01      	subs	r3, #1
 800fe04:	6123      	str	r3, [r4, #16]
 800fe06:	e7f0      	b.n	800fdea <_scanf_float+0x306>
 800fe08:	46aa      	mov	sl, r5
 800fe0a:	46b3      	mov	fp, r6
 800fe0c:	e7de      	b.n	800fdcc <_scanf_float+0x2e8>
 800fe0e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800fe12:	6923      	ldr	r3, [r4, #16]
 800fe14:	2965      	cmp	r1, #101	@ 0x65
 800fe16:	f103 33ff 	add.w	r3, r3, #4294967295
 800fe1a:	f106 35ff 	add.w	r5, r6, #4294967295
 800fe1e:	6123      	str	r3, [r4, #16]
 800fe20:	d00c      	beq.n	800fe3c <_scanf_float+0x358>
 800fe22:	2945      	cmp	r1, #69	@ 0x45
 800fe24:	d00a      	beq.n	800fe3c <_scanf_float+0x358>
 800fe26:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800fe2a:	463a      	mov	r2, r7
 800fe2c:	4640      	mov	r0, r8
 800fe2e:	4798      	blx	r3
 800fe30:	6923      	ldr	r3, [r4, #16]
 800fe32:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800fe36:	3b01      	subs	r3, #1
 800fe38:	1eb5      	subs	r5, r6, #2
 800fe3a:	6123      	str	r3, [r4, #16]
 800fe3c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800fe40:	463a      	mov	r2, r7
 800fe42:	4640      	mov	r0, r8
 800fe44:	4798      	blx	r3
 800fe46:	462e      	mov	r6, r5
 800fe48:	6822      	ldr	r2, [r4, #0]
 800fe4a:	f012 0210 	ands.w	r2, r2, #16
 800fe4e:	d001      	beq.n	800fe54 <_scanf_float+0x370>
 800fe50:	2000      	movs	r0, #0
 800fe52:	e68b      	b.n	800fb6c <_scanf_float+0x88>
 800fe54:	7032      	strb	r2, [r6, #0]
 800fe56:	6823      	ldr	r3, [r4, #0]
 800fe58:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800fe5c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800fe60:	d11c      	bne.n	800fe9c <_scanf_float+0x3b8>
 800fe62:	9b02      	ldr	r3, [sp, #8]
 800fe64:	454b      	cmp	r3, r9
 800fe66:	eba3 0209 	sub.w	r2, r3, r9
 800fe6a:	d123      	bne.n	800feb4 <_scanf_float+0x3d0>
 800fe6c:	9901      	ldr	r1, [sp, #4]
 800fe6e:	2200      	movs	r2, #0
 800fe70:	4640      	mov	r0, r8
 800fe72:	f002 fc39 	bl	80126e8 <_strtod_r>
 800fe76:	9b03      	ldr	r3, [sp, #12]
 800fe78:	6821      	ldr	r1, [r4, #0]
 800fe7a:	681b      	ldr	r3, [r3, #0]
 800fe7c:	f011 0f02 	tst.w	r1, #2
 800fe80:	ec57 6b10 	vmov	r6, r7, d0
 800fe84:	f103 0204 	add.w	r2, r3, #4
 800fe88:	d01f      	beq.n	800feca <_scanf_float+0x3e6>
 800fe8a:	9903      	ldr	r1, [sp, #12]
 800fe8c:	600a      	str	r2, [r1, #0]
 800fe8e:	681b      	ldr	r3, [r3, #0]
 800fe90:	e9c3 6700 	strd	r6, r7, [r3]
 800fe94:	68e3      	ldr	r3, [r4, #12]
 800fe96:	3301      	adds	r3, #1
 800fe98:	60e3      	str	r3, [r4, #12]
 800fe9a:	e7d9      	b.n	800fe50 <_scanf_float+0x36c>
 800fe9c:	9b04      	ldr	r3, [sp, #16]
 800fe9e:	2b00      	cmp	r3, #0
 800fea0:	d0e4      	beq.n	800fe6c <_scanf_float+0x388>
 800fea2:	9905      	ldr	r1, [sp, #20]
 800fea4:	230a      	movs	r3, #10
 800fea6:	3101      	adds	r1, #1
 800fea8:	4640      	mov	r0, r8
 800feaa:	f7ff f9c1 	bl	800f230 <_strtol_r>
 800feae:	9b04      	ldr	r3, [sp, #16]
 800feb0:	9e05      	ldr	r6, [sp, #20]
 800feb2:	1ac2      	subs	r2, r0, r3
 800feb4:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800feb8:	429e      	cmp	r6, r3
 800feba:	bf28      	it	cs
 800febc:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800fec0:	4910      	ldr	r1, [pc, #64]	@ (800ff04 <_scanf_float+0x420>)
 800fec2:	4630      	mov	r0, r6
 800fec4:	f000 f918 	bl	80100f8 <siprintf>
 800fec8:	e7d0      	b.n	800fe6c <_scanf_float+0x388>
 800feca:	f011 0f04 	tst.w	r1, #4
 800fece:	9903      	ldr	r1, [sp, #12]
 800fed0:	600a      	str	r2, [r1, #0]
 800fed2:	d1dc      	bne.n	800fe8e <_scanf_float+0x3aa>
 800fed4:	681d      	ldr	r5, [r3, #0]
 800fed6:	4632      	mov	r2, r6
 800fed8:	463b      	mov	r3, r7
 800feda:	4630      	mov	r0, r6
 800fedc:	4639      	mov	r1, r7
 800fede:	f7f0 fdfd 	bl	8000adc <__aeabi_dcmpun>
 800fee2:	b128      	cbz	r0, 800fef0 <_scanf_float+0x40c>
 800fee4:	4808      	ldr	r0, [pc, #32]	@ (800ff08 <_scanf_float+0x424>)
 800fee6:	f000 f9f9 	bl	80102dc <nanf>
 800feea:	ed85 0a00 	vstr	s0, [r5]
 800feee:	e7d1      	b.n	800fe94 <_scanf_float+0x3b0>
 800fef0:	4630      	mov	r0, r6
 800fef2:	4639      	mov	r1, r7
 800fef4:	f7f0 fe50 	bl	8000b98 <__aeabi_d2f>
 800fef8:	6028      	str	r0, [r5, #0]
 800fefa:	e7cb      	b.n	800fe94 <_scanf_float+0x3b0>
 800fefc:	f04f 0900 	mov.w	r9, #0
 800ff00:	e629      	b.n	800fb56 <_scanf_float+0x72>
 800ff02:	bf00      	nop
 800ff04:	08018287 	.word	0x08018287
 800ff08:	0801851c 	.word	0x0801851c

0800ff0c <std>:
 800ff0c:	2300      	movs	r3, #0
 800ff0e:	b510      	push	{r4, lr}
 800ff10:	4604      	mov	r4, r0
 800ff12:	e9c0 3300 	strd	r3, r3, [r0]
 800ff16:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ff1a:	6083      	str	r3, [r0, #8]
 800ff1c:	8181      	strh	r1, [r0, #12]
 800ff1e:	6643      	str	r3, [r0, #100]	@ 0x64
 800ff20:	81c2      	strh	r2, [r0, #14]
 800ff22:	6183      	str	r3, [r0, #24]
 800ff24:	4619      	mov	r1, r3
 800ff26:	2208      	movs	r2, #8
 800ff28:	305c      	adds	r0, #92	@ 0x5c
 800ff2a:	f000 f948 	bl	80101be <memset>
 800ff2e:	4b0d      	ldr	r3, [pc, #52]	@ (800ff64 <std+0x58>)
 800ff30:	6263      	str	r3, [r4, #36]	@ 0x24
 800ff32:	4b0d      	ldr	r3, [pc, #52]	@ (800ff68 <std+0x5c>)
 800ff34:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ff36:	4b0d      	ldr	r3, [pc, #52]	@ (800ff6c <std+0x60>)
 800ff38:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ff3a:	4b0d      	ldr	r3, [pc, #52]	@ (800ff70 <std+0x64>)
 800ff3c:	6323      	str	r3, [r4, #48]	@ 0x30
 800ff3e:	4b0d      	ldr	r3, [pc, #52]	@ (800ff74 <std+0x68>)
 800ff40:	6224      	str	r4, [r4, #32]
 800ff42:	429c      	cmp	r4, r3
 800ff44:	d006      	beq.n	800ff54 <std+0x48>
 800ff46:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ff4a:	4294      	cmp	r4, r2
 800ff4c:	d002      	beq.n	800ff54 <std+0x48>
 800ff4e:	33d0      	adds	r3, #208	@ 0xd0
 800ff50:	429c      	cmp	r4, r3
 800ff52:	d105      	bne.n	800ff60 <std+0x54>
 800ff54:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ff58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ff5c:	f000 b9ac 	b.w	80102b8 <__retarget_lock_init_recursive>
 800ff60:	bd10      	pop	{r4, pc}
 800ff62:	bf00      	nop
 800ff64:	08010139 	.word	0x08010139
 800ff68:	0801015b 	.word	0x0801015b
 800ff6c:	08010193 	.word	0x08010193
 800ff70:	080101b7 	.word	0x080101b7
 800ff74:	20005a58 	.word	0x20005a58

0800ff78 <stdio_exit_handler>:
 800ff78:	4a02      	ldr	r2, [pc, #8]	@ (800ff84 <stdio_exit_handler+0xc>)
 800ff7a:	4903      	ldr	r1, [pc, #12]	@ (800ff88 <stdio_exit_handler+0x10>)
 800ff7c:	4803      	ldr	r0, [pc, #12]	@ (800ff8c <stdio_exit_handler+0x14>)
 800ff7e:	f000 b869 	b.w	8010054 <_fwalk_sglue>
 800ff82:	bf00      	nop
 800ff84:	20000134 	.word	0x20000134
 800ff88:	08012aad 	.word	0x08012aad
 800ff8c:	20000144 	.word	0x20000144

0800ff90 <cleanup_stdio>:
 800ff90:	6841      	ldr	r1, [r0, #4]
 800ff92:	4b0c      	ldr	r3, [pc, #48]	@ (800ffc4 <cleanup_stdio+0x34>)
 800ff94:	4299      	cmp	r1, r3
 800ff96:	b510      	push	{r4, lr}
 800ff98:	4604      	mov	r4, r0
 800ff9a:	d001      	beq.n	800ffa0 <cleanup_stdio+0x10>
 800ff9c:	f002 fd86 	bl	8012aac <_fflush_r>
 800ffa0:	68a1      	ldr	r1, [r4, #8]
 800ffa2:	4b09      	ldr	r3, [pc, #36]	@ (800ffc8 <cleanup_stdio+0x38>)
 800ffa4:	4299      	cmp	r1, r3
 800ffa6:	d002      	beq.n	800ffae <cleanup_stdio+0x1e>
 800ffa8:	4620      	mov	r0, r4
 800ffaa:	f002 fd7f 	bl	8012aac <_fflush_r>
 800ffae:	68e1      	ldr	r1, [r4, #12]
 800ffb0:	4b06      	ldr	r3, [pc, #24]	@ (800ffcc <cleanup_stdio+0x3c>)
 800ffb2:	4299      	cmp	r1, r3
 800ffb4:	d004      	beq.n	800ffc0 <cleanup_stdio+0x30>
 800ffb6:	4620      	mov	r0, r4
 800ffb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ffbc:	f002 bd76 	b.w	8012aac <_fflush_r>
 800ffc0:	bd10      	pop	{r4, pc}
 800ffc2:	bf00      	nop
 800ffc4:	20005a58 	.word	0x20005a58
 800ffc8:	20005ac0 	.word	0x20005ac0
 800ffcc:	20005b28 	.word	0x20005b28

0800ffd0 <global_stdio_init.part.0>:
 800ffd0:	b510      	push	{r4, lr}
 800ffd2:	4b0b      	ldr	r3, [pc, #44]	@ (8010000 <global_stdio_init.part.0+0x30>)
 800ffd4:	4c0b      	ldr	r4, [pc, #44]	@ (8010004 <global_stdio_init.part.0+0x34>)
 800ffd6:	4a0c      	ldr	r2, [pc, #48]	@ (8010008 <global_stdio_init.part.0+0x38>)
 800ffd8:	601a      	str	r2, [r3, #0]
 800ffda:	4620      	mov	r0, r4
 800ffdc:	2200      	movs	r2, #0
 800ffde:	2104      	movs	r1, #4
 800ffe0:	f7ff ff94 	bl	800ff0c <std>
 800ffe4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ffe8:	2201      	movs	r2, #1
 800ffea:	2109      	movs	r1, #9
 800ffec:	f7ff ff8e 	bl	800ff0c <std>
 800fff0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800fff4:	2202      	movs	r2, #2
 800fff6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fffa:	2112      	movs	r1, #18
 800fffc:	f7ff bf86 	b.w	800ff0c <std>
 8010000:	20005b90 	.word	0x20005b90
 8010004:	20005a58 	.word	0x20005a58
 8010008:	0800ff79 	.word	0x0800ff79

0801000c <__sfp_lock_acquire>:
 801000c:	4801      	ldr	r0, [pc, #4]	@ (8010014 <__sfp_lock_acquire+0x8>)
 801000e:	f000 b954 	b.w	80102ba <__retarget_lock_acquire_recursive>
 8010012:	bf00      	nop
 8010014:	20005b99 	.word	0x20005b99

08010018 <__sfp_lock_release>:
 8010018:	4801      	ldr	r0, [pc, #4]	@ (8010020 <__sfp_lock_release+0x8>)
 801001a:	f000 b94f 	b.w	80102bc <__retarget_lock_release_recursive>
 801001e:	bf00      	nop
 8010020:	20005b99 	.word	0x20005b99

08010024 <__sinit>:
 8010024:	b510      	push	{r4, lr}
 8010026:	4604      	mov	r4, r0
 8010028:	f7ff fff0 	bl	801000c <__sfp_lock_acquire>
 801002c:	6a23      	ldr	r3, [r4, #32]
 801002e:	b11b      	cbz	r3, 8010038 <__sinit+0x14>
 8010030:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010034:	f7ff bff0 	b.w	8010018 <__sfp_lock_release>
 8010038:	4b04      	ldr	r3, [pc, #16]	@ (801004c <__sinit+0x28>)
 801003a:	6223      	str	r3, [r4, #32]
 801003c:	4b04      	ldr	r3, [pc, #16]	@ (8010050 <__sinit+0x2c>)
 801003e:	681b      	ldr	r3, [r3, #0]
 8010040:	2b00      	cmp	r3, #0
 8010042:	d1f5      	bne.n	8010030 <__sinit+0xc>
 8010044:	f7ff ffc4 	bl	800ffd0 <global_stdio_init.part.0>
 8010048:	e7f2      	b.n	8010030 <__sinit+0xc>
 801004a:	bf00      	nop
 801004c:	0800ff91 	.word	0x0800ff91
 8010050:	20005b90 	.word	0x20005b90

08010054 <_fwalk_sglue>:
 8010054:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010058:	4607      	mov	r7, r0
 801005a:	4688      	mov	r8, r1
 801005c:	4614      	mov	r4, r2
 801005e:	2600      	movs	r6, #0
 8010060:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010064:	f1b9 0901 	subs.w	r9, r9, #1
 8010068:	d505      	bpl.n	8010076 <_fwalk_sglue+0x22>
 801006a:	6824      	ldr	r4, [r4, #0]
 801006c:	2c00      	cmp	r4, #0
 801006e:	d1f7      	bne.n	8010060 <_fwalk_sglue+0xc>
 8010070:	4630      	mov	r0, r6
 8010072:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010076:	89ab      	ldrh	r3, [r5, #12]
 8010078:	2b01      	cmp	r3, #1
 801007a:	d907      	bls.n	801008c <_fwalk_sglue+0x38>
 801007c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010080:	3301      	adds	r3, #1
 8010082:	d003      	beq.n	801008c <_fwalk_sglue+0x38>
 8010084:	4629      	mov	r1, r5
 8010086:	4638      	mov	r0, r7
 8010088:	47c0      	blx	r8
 801008a:	4306      	orrs	r6, r0
 801008c:	3568      	adds	r5, #104	@ 0x68
 801008e:	e7e9      	b.n	8010064 <_fwalk_sglue+0x10>

08010090 <sniprintf>:
 8010090:	b40c      	push	{r2, r3}
 8010092:	b530      	push	{r4, r5, lr}
 8010094:	4b17      	ldr	r3, [pc, #92]	@ (80100f4 <sniprintf+0x64>)
 8010096:	1e0c      	subs	r4, r1, #0
 8010098:	681d      	ldr	r5, [r3, #0]
 801009a:	b09d      	sub	sp, #116	@ 0x74
 801009c:	da08      	bge.n	80100b0 <sniprintf+0x20>
 801009e:	238b      	movs	r3, #139	@ 0x8b
 80100a0:	602b      	str	r3, [r5, #0]
 80100a2:	f04f 30ff 	mov.w	r0, #4294967295
 80100a6:	b01d      	add	sp, #116	@ 0x74
 80100a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80100ac:	b002      	add	sp, #8
 80100ae:	4770      	bx	lr
 80100b0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80100b4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80100b8:	bf14      	ite	ne
 80100ba:	f104 33ff 	addne.w	r3, r4, #4294967295
 80100be:	4623      	moveq	r3, r4
 80100c0:	9304      	str	r3, [sp, #16]
 80100c2:	9307      	str	r3, [sp, #28]
 80100c4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80100c8:	9002      	str	r0, [sp, #8]
 80100ca:	9006      	str	r0, [sp, #24]
 80100cc:	f8ad 3016 	strh.w	r3, [sp, #22]
 80100d0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80100d2:	ab21      	add	r3, sp, #132	@ 0x84
 80100d4:	a902      	add	r1, sp, #8
 80100d6:	4628      	mov	r0, r5
 80100d8:	9301      	str	r3, [sp, #4]
 80100da:	f002 fb67 	bl	80127ac <_svfiprintf_r>
 80100de:	1c43      	adds	r3, r0, #1
 80100e0:	bfbc      	itt	lt
 80100e2:	238b      	movlt	r3, #139	@ 0x8b
 80100e4:	602b      	strlt	r3, [r5, #0]
 80100e6:	2c00      	cmp	r4, #0
 80100e8:	d0dd      	beq.n	80100a6 <sniprintf+0x16>
 80100ea:	9b02      	ldr	r3, [sp, #8]
 80100ec:	2200      	movs	r2, #0
 80100ee:	701a      	strb	r2, [r3, #0]
 80100f0:	e7d9      	b.n	80100a6 <sniprintf+0x16>
 80100f2:	bf00      	nop
 80100f4:	20000140 	.word	0x20000140

080100f8 <siprintf>:
 80100f8:	b40e      	push	{r1, r2, r3}
 80100fa:	b500      	push	{lr}
 80100fc:	b09c      	sub	sp, #112	@ 0x70
 80100fe:	ab1d      	add	r3, sp, #116	@ 0x74
 8010100:	9002      	str	r0, [sp, #8]
 8010102:	9006      	str	r0, [sp, #24]
 8010104:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8010108:	4809      	ldr	r0, [pc, #36]	@ (8010130 <siprintf+0x38>)
 801010a:	9107      	str	r1, [sp, #28]
 801010c:	9104      	str	r1, [sp, #16]
 801010e:	4909      	ldr	r1, [pc, #36]	@ (8010134 <siprintf+0x3c>)
 8010110:	f853 2b04 	ldr.w	r2, [r3], #4
 8010114:	9105      	str	r1, [sp, #20]
 8010116:	6800      	ldr	r0, [r0, #0]
 8010118:	9301      	str	r3, [sp, #4]
 801011a:	a902      	add	r1, sp, #8
 801011c:	f002 fb46 	bl	80127ac <_svfiprintf_r>
 8010120:	9b02      	ldr	r3, [sp, #8]
 8010122:	2200      	movs	r2, #0
 8010124:	701a      	strb	r2, [r3, #0]
 8010126:	b01c      	add	sp, #112	@ 0x70
 8010128:	f85d eb04 	ldr.w	lr, [sp], #4
 801012c:	b003      	add	sp, #12
 801012e:	4770      	bx	lr
 8010130:	20000140 	.word	0x20000140
 8010134:	ffff0208 	.word	0xffff0208

08010138 <__sread>:
 8010138:	b510      	push	{r4, lr}
 801013a:	460c      	mov	r4, r1
 801013c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010140:	f000 f86c 	bl	801021c <_read_r>
 8010144:	2800      	cmp	r0, #0
 8010146:	bfab      	itete	ge
 8010148:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801014a:	89a3      	ldrhlt	r3, [r4, #12]
 801014c:	181b      	addge	r3, r3, r0
 801014e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8010152:	bfac      	ite	ge
 8010154:	6563      	strge	r3, [r4, #84]	@ 0x54
 8010156:	81a3      	strhlt	r3, [r4, #12]
 8010158:	bd10      	pop	{r4, pc}

0801015a <__swrite>:
 801015a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801015e:	461f      	mov	r7, r3
 8010160:	898b      	ldrh	r3, [r1, #12]
 8010162:	05db      	lsls	r3, r3, #23
 8010164:	4605      	mov	r5, r0
 8010166:	460c      	mov	r4, r1
 8010168:	4616      	mov	r6, r2
 801016a:	d505      	bpl.n	8010178 <__swrite+0x1e>
 801016c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010170:	2302      	movs	r3, #2
 8010172:	2200      	movs	r2, #0
 8010174:	f000 f840 	bl	80101f8 <_lseek_r>
 8010178:	89a3      	ldrh	r3, [r4, #12]
 801017a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801017e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8010182:	81a3      	strh	r3, [r4, #12]
 8010184:	4632      	mov	r2, r6
 8010186:	463b      	mov	r3, r7
 8010188:	4628      	mov	r0, r5
 801018a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801018e:	f000 b857 	b.w	8010240 <_write_r>

08010192 <__sseek>:
 8010192:	b510      	push	{r4, lr}
 8010194:	460c      	mov	r4, r1
 8010196:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801019a:	f000 f82d 	bl	80101f8 <_lseek_r>
 801019e:	1c43      	adds	r3, r0, #1
 80101a0:	89a3      	ldrh	r3, [r4, #12]
 80101a2:	bf15      	itete	ne
 80101a4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80101a6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80101aa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80101ae:	81a3      	strheq	r3, [r4, #12]
 80101b0:	bf18      	it	ne
 80101b2:	81a3      	strhne	r3, [r4, #12]
 80101b4:	bd10      	pop	{r4, pc}

080101b6 <__sclose>:
 80101b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80101ba:	f000 b80d 	b.w	80101d8 <_close_r>

080101be <memset>:
 80101be:	4402      	add	r2, r0
 80101c0:	4603      	mov	r3, r0
 80101c2:	4293      	cmp	r3, r2
 80101c4:	d100      	bne.n	80101c8 <memset+0xa>
 80101c6:	4770      	bx	lr
 80101c8:	f803 1b01 	strb.w	r1, [r3], #1
 80101cc:	e7f9      	b.n	80101c2 <memset+0x4>
	...

080101d0 <_localeconv_r>:
 80101d0:	4800      	ldr	r0, [pc, #0]	@ (80101d4 <_localeconv_r+0x4>)
 80101d2:	4770      	bx	lr
 80101d4:	20000280 	.word	0x20000280

080101d8 <_close_r>:
 80101d8:	b538      	push	{r3, r4, r5, lr}
 80101da:	4d06      	ldr	r5, [pc, #24]	@ (80101f4 <_close_r+0x1c>)
 80101dc:	2300      	movs	r3, #0
 80101de:	4604      	mov	r4, r0
 80101e0:	4608      	mov	r0, r1
 80101e2:	602b      	str	r3, [r5, #0]
 80101e4:	f7f4 feda 	bl	8004f9c <_close>
 80101e8:	1c43      	adds	r3, r0, #1
 80101ea:	d102      	bne.n	80101f2 <_close_r+0x1a>
 80101ec:	682b      	ldr	r3, [r5, #0]
 80101ee:	b103      	cbz	r3, 80101f2 <_close_r+0x1a>
 80101f0:	6023      	str	r3, [r4, #0]
 80101f2:	bd38      	pop	{r3, r4, r5, pc}
 80101f4:	20005b94 	.word	0x20005b94

080101f8 <_lseek_r>:
 80101f8:	b538      	push	{r3, r4, r5, lr}
 80101fa:	4d07      	ldr	r5, [pc, #28]	@ (8010218 <_lseek_r+0x20>)
 80101fc:	4604      	mov	r4, r0
 80101fe:	4608      	mov	r0, r1
 8010200:	4611      	mov	r1, r2
 8010202:	2200      	movs	r2, #0
 8010204:	602a      	str	r2, [r5, #0]
 8010206:	461a      	mov	r2, r3
 8010208:	f7f4 fed4 	bl	8004fb4 <_lseek>
 801020c:	1c43      	adds	r3, r0, #1
 801020e:	d102      	bne.n	8010216 <_lseek_r+0x1e>
 8010210:	682b      	ldr	r3, [r5, #0]
 8010212:	b103      	cbz	r3, 8010216 <_lseek_r+0x1e>
 8010214:	6023      	str	r3, [r4, #0]
 8010216:	bd38      	pop	{r3, r4, r5, pc}
 8010218:	20005b94 	.word	0x20005b94

0801021c <_read_r>:
 801021c:	b538      	push	{r3, r4, r5, lr}
 801021e:	4d07      	ldr	r5, [pc, #28]	@ (801023c <_read_r+0x20>)
 8010220:	4604      	mov	r4, r0
 8010222:	4608      	mov	r0, r1
 8010224:	4611      	mov	r1, r2
 8010226:	2200      	movs	r2, #0
 8010228:	602a      	str	r2, [r5, #0]
 801022a:	461a      	mov	r2, r3
 801022c:	f7f4 fe9a 	bl	8004f64 <_read>
 8010230:	1c43      	adds	r3, r0, #1
 8010232:	d102      	bne.n	801023a <_read_r+0x1e>
 8010234:	682b      	ldr	r3, [r5, #0]
 8010236:	b103      	cbz	r3, 801023a <_read_r+0x1e>
 8010238:	6023      	str	r3, [r4, #0]
 801023a:	bd38      	pop	{r3, r4, r5, pc}
 801023c:	20005b94 	.word	0x20005b94

08010240 <_write_r>:
 8010240:	b538      	push	{r3, r4, r5, lr}
 8010242:	4d07      	ldr	r5, [pc, #28]	@ (8010260 <_write_r+0x20>)
 8010244:	4604      	mov	r4, r0
 8010246:	4608      	mov	r0, r1
 8010248:	4611      	mov	r1, r2
 801024a:	2200      	movs	r2, #0
 801024c:	602a      	str	r2, [r5, #0]
 801024e:	461a      	mov	r2, r3
 8010250:	f7f4 fe96 	bl	8004f80 <_write>
 8010254:	1c43      	adds	r3, r0, #1
 8010256:	d102      	bne.n	801025e <_write_r+0x1e>
 8010258:	682b      	ldr	r3, [r5, #0]
 801025a:	b103      	cbz	r3, 801025e <_write_r+0x1e>
 801025c:	6023      	str	r3, [r4, #0]
 801025e:	bd38      	pop	{r3, r4, r5, pc}
 8010260:	20005b94 	.word	0x20005b94

08010264 <__errno>:
 8010264:	4b01      	ldr	r3, [pc, #4]	@ (801026c <__errno+0x8>)
 8010266:	6818      	ldr	r0, [r3, #0]
 8010268:	4770      	bx	lr
 801026a:	bf00      	nop
 801026c:	20000140 	.word	0x20000140

08010270 <__libc_init_array>:
 8010270:	b570      	push	{r4, r5, r6, lr}
 8010272:	4d0d      	ldr	r5, [pc, #52]	@ (80102a8 <__libc_init_array+0x38>)
 8010274:	4c0d      	ldr	r4, [pc, #52]	@ (80102ac <__libc_init_array+0x3c>)
 8010276:	1b64      	subs	r4, r4, r5
 8010278:	10a4      	asrs	r4, r4, #2
 801027a:	2600      	movs	r6, #0
 801027c:	42a6      	cmp	r6, r4
 801027e:	d109      	bne.n	8010294 <__libc_init_array+0x24>
 8010280:	4d0b      	ldr	r5, [pc, #44]	@ (80102b0 <__libc_init_array+0x40>)
 8010282:	4c0c      	ldr	r4, [pc, #48]	@ (80102b4 <__libc_init_array+0x44>)
 8010284:	f005 fcac 	bl	8015be0 <_init>
 8010288:	1b64      	subs	r4, r4, r5
 801028a:	10a4      	asrs	r4, r4, #2
 801028c:	2600      	movs	r6, #0
 801028e:	42a6      	cmp	r6, r4
 8010290:	d105      	bne.n	801029e <__libc_init_array+0x2e>
 8010292:	bd70      	pop	{r4, r5, r6, pc}
 8010294:	f855 3b04 	ldr.w	r3, [r5], #4
 8010298:	4798      	blx	r3
 801029a:	3601      	adds	r6, #1
 801029c:	e7ee      	b.n	801027c <__libc_init_array+0xc>
 801029e:	f855 3b04 	ldr.w	r3, [r5], #4
 80102a2:	4798      	blx	r3
 80102a4:	3601      	adds	r6, #1
 80102a6:	e7f2      	b.n	801028e <__libc_init_array+0x1e>
 80102a8:	08018778 	.word	0x08018778
 80102ac:	08018778 	.word	0x08018778
 80102b0:	08018778 	.word	0x08018778
 80102b4:	0801877c 	.word	0x0801877c

080102b8 <__retarget_lock_init_recursive>:
 80102b8:	4770      	bx	lr

080102ba <__retarget_lock_acquire_recursive>:
 80102ba:	4770      	bx	lr

080102bc <__retarget_lock_release_recursive>:
 80102bc:	4770      	bx	lr

080102be <memcpy>:
 80102be:	440a      	add	r2, r1
 80102c0:	4291      	cmp	r1, r2
 80102c2:	f100 33ff 	add.w	r3, r0, #4294967295
 80102c6:	d100      	bne.n	80102ca <memcpy+0xc>
 80102c8:	4770      	bx	lr
 80102ca:	b510      	push	{r4, lr}
 80102cc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80102d0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80102d4:	4291      	cmp	r1, r2
 80102d6:	d1f9      	bne.n	80102cc <memcpy+0xe>
 80102d8:	bd10      	pop	{r4, pc}
	...

080102dc <nanf>:
 80102dc:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80102e4 <nanf+0x8>
 80102e0:	4770      	bx	lr
 80102e2:	bf00      	nop
 80102e4:	7fc00000 	.word	0x7fc00000

080102e8 <quorem>:
 80102e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80102ec:	6903      	ldr	r3, [r0, #16]
 80102ee:	690c      	ldr	r4, [r1, #16]
 80102f0:	42a3      	cmp	r3, r4
 80102f2:	4607      	mov	r7, r0
 80102f4:	db7e      	blt.n	80103f4 <quorem+0x10c>
 80102f6:	3c01      	subs	r4, #1
 80102f8:	f101 0814 	add.w	r8, r1, #20
 80102fc:	00a3      	lsls	r3, r4, #2
 80102fe:	f100 0514 	add.w	r5, r0, #20
 8010302:	9300      	str	r3, [sp, #0]
 8010304:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010308:	9301      	str	r3, [sp, #4]
 801030a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801030e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010312:	3301      	adds	r3, #1
 8010314:	429a      	cmp	r2, r3
 8010316:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801031a:	fbb2 f6f3 	udiv	r6, r2, r3
 801031e:	d32e      	bcc.n	801037e <quorem+0x96>
 8010320:	f04f 0a00 	mov.w	sl, #0
 8010324:	46c4      	mov	ip, r8
 8010326:	46ae      	mov	lr, r5
 8010328:	46d3      	mov	fp, sl
 801032a:	f85c 3b04 	ldr.w	r3, [ip], #4
 801032e:	b298      	uxth	r0, r3
 8010330:	fb06 a000 	mla	r0, r6, r0, sl
 8010334:	0c02      	lsrs	r2, r0, #16
 8010336:	0c1b      	lsrs	r3, r3, #16
 8010338:	fb06 2303 	mla	r3, r6, r3, r2
 801033c:	f8de 2000 	ldr.w	r2, [lr]
 8010340:	b280      	uxth	r0, r0
 8010342:	b292      	uxth	r2, r2
 8010344:	1a12      	subs	r2, r2, r0
 8010346:	445a      	add	r2, fp
 8010348:	f8de 0000 	ldr.w	r0, [lr]
 801034c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010350:	b29b      	uxth	r3, r3
 8010352:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8010356:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801035a:	b292      	uxth	r2, r2
 801035c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8010360:	45e1      	cmp	r9, ip
 8010362:	f84e 2b04 	str.w	r2, [lr], #4
 8010366:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801036a:	d2de      	bcs.n	801032a <quorem+0x42>
 801036c:	9b00      	ldr	r3, [sp, #0]
 801036e:	58eb      	ldr	r3, [r5, r3]
 8010370:	b92b      	cbnz	r3, 801037e <quorem+0x96>
 8010372:	9b01      	ldr	r3, [sp, #4]
 8010374:	3b04      	subs	r3, #4
 8010376:	429d      	cmp	r5, r3
 8010378:	461a      	mov	r2, r3
 801037a:	d32f      	bcc.n	80103dc <quorem+0xf4>
 801037c:	613c      	str	r4, [r7, #16]
 801037e:	4638      	mov	r0, r7
 8010380:	f001 f9c2 	bl	8011708 <__mcmp>
 8010384:	2800      	cmp	r0, #0
 8010386:	db25      	blt.n	80103d4 <quorem+0xec>
 8010388:	4629      	mov	r1, r5
 801038a:	2000      	movs	r0, #0
 801038c:	f858 2b04 	ldr.w	r2, [r8], #4
 8010390:	f8d1 c000 	ldr.w	ip, [r1]
 8010394:	fa1f fe82 	uxth.w	lr, r2
 8010398:	fa1f f38c 	uxth.w	r3, ip
 801039c:	eba3 030e 	sub.w	r3, r3, lr
 80103a0:	4403      	add	r3, r0
 80103a2:	0c12      	lsrs	r2, r2, #16
 80103a4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80103a8:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80103ac:	b29b      	uxth	r3, r3
 80103ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80103b2:	45c1      	cmp	r9, r8
 80103b4:	f841 3b04 	str.w	r3, [r1], #4
 80103b8:	ea4f 4022 	mov.w	r0, r2, asr #16
 80103bc:	d2e6      	bcs.n	801038c <quorem+0xa4>
 80103be:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80103c2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80103c6:	b922      	cbnz	r2, 80103d2 <quorem+0xea>
 80103c8:	3b04      	subs	r3, #4
 80103ca:	429d      	cmp	r5, r3
 80103cc:	461a      	mov	r2, r3
 80103ce:	d30b      	bcc.n	80103e8 <quorem+0x100>
 80103d0:	613c      	str	r4, [r7, #16]
 80103d2:	3601      	adds	r6, #1
 80103d4:	4630      	mov	r0, r6
 80103d6:	b003      	add	sp, #12
 80103d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80103dc:	6812      	ldr	r2, [r2, #0]
 80103de:	3b04      	subs	r3, #4
 80103e0:	2a00      	cmp	r2, #0
 80103e2:	d1cb      	bne.n	801037c <quorem+0x94>
 80103e4:	3c01      	subs	r4, #1
 80103e6:	e7c6      	b.n	8010376 <quorem+0x8e>
 80103e8:	6812      	ldr	r2, [r2, #0]
 80103ea:	3b04      	subs	r3, #4
 80103ec:	2a00      	cmp	r2, #0
 80103ee:	d1ef      	bne.n	80103d0 <quorem+0xe8>
 80103f0:	3c01      	subs	r4, #1
 80103f2:	e7ea      	b.n	80103ca <quorem+0xe2>
 80103f4:	2000      	movs	r0, #0
 80103f6:	e7ee      	b.n	80103d6 <quorem+0xee>

080103f8 <_dtoa_r>:
 80103f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80103fc:	69c7      	ldr	r7, [r0, #28]
 80103fe:	b099      	sub	sp, #100	@ 0x64
 8010400:	ed8d 0b02 	vstr	d0, [sp, #8]
 8010404:	ec55 4b10 	vmov	r4, r5, d0
 8010408:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 801040a:	9109      	str	r1, [sp, #36]	@ 0x24
 801040c:	4683      	mov	fp, r0
 801040e:	920e      	str	r2, [sp, #56]	@ 0x38
 8010410:	9313      	str	r3, [sp, #76]	@ 0x4c
 8010412:	b97f      	cbnz	r7, 8010434 <_dtoa_r+0x3c>
 8010414:	2010      	movs	r0, #16
 8010416:	f000 fdfd 	bl	8011014 <malloc>
 801041a:	4602      	mov	r2, r0
 801041c:	f8cb 001c 	str.w	r0, [fp, #28]
 8010420:	b920      	cbnz	r0, 801042c <_dtoa_r+0x34>
 8010422:	4ba7      	ldr	r3, [pc, #668]	@ (80106c0 <_dtoa_r+0x2c8>)
 8010424:	21ef      	movs	r1, #239	@ 0xef
 8010426:	48a7      	ldr	r0, [pc, #668]	@ (80106c4 <_dtoa_r+0x2cc>)
 8010428:	f002 fbae 	bl	8012b88 <__assert_func>
 801042c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8010430:	6007      	str	r7, [r0, #0]
 8010432:	60c7      	str	r7, [r0, #12]
 8010434:	f8db 301c 	ldr.w	r3, [fp, #28]
 8010438:	6819      	ldr	r1, [r3, #0]
 801043a:	b159      	cbz	r1, 8010454 <_dtoa_r+0x5c>
 801043c:	685a      	ldr	r2, [r3, #4]
 801043e:	604a      	str	r2, [r1, #4]
 8010440:	2301      	movs	r3, #1
 8010442:	4093      	lsls	r3, r2
 8010444:	608b      	str	r3, [r1, #8]
 8010446:	4658      	mov	r0, fp
 8010448:	f000 feda 	bl	8011200 <_Bfree>
 801044c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8010450:	2200      	movs	r2, #0
 8010452:	601a      	str	r2, [r3, #0]
 8010454:	1e2b      	subs	r3, r5, #0
 8010456:	bfb9      	ittee	lt
 8010458:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801045c:	9303      	strlt	r3, [sp, #12]
 801045e:	2300      	movge	r3, #0
 8010460:	6033      	strge	r3, [r6, #0]
 8010462:	9f03      	ldr	r7, [sp, #12]
 8010464:	4b98      	ldr	r3, [pc, #608]	@ (80106c8 <_dtoa_r+0x2d0>)
 8010466:	bfbc      	itt	lt
 8010468:	2201      	movlt	r2, #1
 801046a:	6032      	strlt	r2, [r6, #0]
 801046c:	43bb      	bics	r3, r7
 801046e:	d112      	bne.n	8010496 <_dtoa_r+0x9e>
 8010470:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8010472:	f242 730f 	movw	r3, #9999	@ 0x270f
 8010476:	6013      	str	r3, [r2, #0]
 8010478:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801047c:	4323      	orrs	r3, r4
 801047e:	f000 854d 	beq.w	8010f1c <_dtoa_r+0xb24>
 8010482:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8010484:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80106dc <_dtoa_r+0x2e4>
 8010488:	2b00      	cmp	r3, #0
 801048a:	f000 854f 	beq.w	8010f2c <_dtoa_r+0xb34>
 801048e:	f10a 0303 	add.w	r3, sl, #3
 8010492:	f000 bd49 	b.w	8010f28 <_dtoa_r+0xb30>
 8010496:	ed9d 7b02 	vldr	d7, [sp, #8]
 801049a:	2200      	movs	r2, #0
 801049c:	ec51 0b17 	vmov	r0, r1, d7
 80104a0:	2300      	movs	r3, #0
 80104a2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80104a6:	f7f0 fae7 	bl	8000a78 <__aeabi_dcmpeq>
 80104aa:	4680      	mov	r8, r0
 80104ac:	b158      	cbz	r0, 80104c6 <_dtoa_r+0xce>
 80104ae:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80104b0:	2301      	movs	r3, #1
 80104b2:	6013      	str	r3, [r2, #0]
 80104b4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80104b6:	b113      	cbz	r3, 80104be <_dtoa_r+0xc6>
 80104b8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80104ba:	4b84      	ldr	r3, [pc, #528]	@ (80106cc <_dtoa_r+0x2d4>)
 80104bc:	6013      	str	r3, [r2, #0]
 80104be:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80106e0 <_dtoa_r+0x2e8>
 80104c2:	f000 bd33 	b.w	8010f2c <_dtoa_r+0xb34>
 80104c6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80104ca:	aa16      	add	r2, sp, #88	@ 0x58
 80104cc:	a917      	add	r1, sp, #92	@ 0x5c
 80104ce:	4658      	mov	r0, fp
 80104d0:	f001 fa3a 	bl	8011948 <__d2b>
 80104d4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80104d8:	4681      	mov	r9, r0
 80104da:	2e00      	cmp	r6, #0
 80104dc:	d077      	beq.n	80105ce <_dtoa_r+0x1d6>
 80104de:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80104e0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80104e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80104e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80104ec:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80104f0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80104f4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80104f8:	4619      	mov	r1, r3
 80104fa:	2200      	movs	r2, #0
 80104fc:	4b74      	ldr	r3, [pc, #464]	@ (80106d0 <_dtoa_r+0x2d8>)
 80104fe:	f7ef fe9b 	bl	8000238 <__aeabi_dsub>
 8010502:	a369      	add	r3, pc, #420	@ (adr r3, 80106a8 <_dtoa_r+0x2b0>)
 8010504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010508:	f7f0 f84e 	bl	80005a8 <__aeabi_dmul>
 801050c:	a368      	add	r3, pc, #416	@ (adr r3, 80106b0 <_dtoa_r+0x2b8>)
 801050e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010512:	f7ef fe93 	bl	800023c <__adddf3>
 8010516:	4604      	mov	r4, r0
 8010518:	4630      	mov	r0, r6
 801051a:	460d      	mov	r5, r1
 801051c:	f7ef ffda 	bl	80004d4 <__aeabi_i2d>
 8010520:	a365      	add	r3, pc, #404	@ (adr r3, 80106b8 <_dtoa_r+0x2c0>)
 8010522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010526:	f7f0 f83f 	bl	80005a8 <__aeabi_dmul>
 801052a:	4602      	mov	r2, r0
 801052c:	460b      	mov	r3, r1
 801052e:	4620      	mov	r0, r4
 8010530:	4629      	mov	r1, r5
 8010532:	f7ef fe83 	bl	800023c <__adddf3>
 8010536:	4604      	mov	r4, r0
 8010538:	460d      	mov	r5, r1
 801053a:	f7f0 fae5 	bl	8000b08 <__aeabi_d2iz>
 801053e:	2200      	movs	r2, #0
 8010540:	4607      	mov	r7, r0
 8010542:	2300      	movs	r3, #0
 8010544:	4620      	mov	r0, r4
 8010546:	4629      	mov	r1, r5
 8010548:	f7f0 faa0 	bl	8000a8c <__aeabi_dcmplt>
 801054c:	b140      	cbz	r0, 8010560 <_dtoa_r+0x168>
 801054e:	4638      	mov	r0, r7
 8010550:	f7ef ffc0 	bl	80004d4 <__aeabi_i2d>
 8010554:	4622      	mov	r2, r4
 8010556:	462b      	mov	r3, r5
 8010558:	f7f0 fa8e 	bl	8000a78 <__aeabi_dcmpeq>
 801055c:	b900      	cbnz	r0, 8010560 <_dtoa_r+0x168>
 801055e:	3f01      	subs	r7, #1
 8010560:	2f16      	cmp	r7, #22
 8010562:	d851      	bhi.n	8010608 <_dtoa_r+0x210>
 8010564:	4b5b      	ldr	r3, [pc, #364]	@ (80106d4 <_dtoa_r+0x2dc>)
 8010566:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801056a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801056e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010572:	f7f0 fa8b 	bl	8000a8c <__aeabi_dcmplt>
 8010576:	2800      	cmp	r0, #0
 8010578:	d048      	beq.n	801060c <_dtoa_r+0x214>
 801057a:	3f01      	subs	r7, #1
 801057c:	2300      	movs	r3, #0
 801057e:	9312      	str	r3, [sp, #72]	@ 0x48
 8010580:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8010582:	1b9b      	subs	r3, r3, r6
 8010584:	1e5a      	subs	r2, r3, #1
 8010586:	bf44      	itt	mi
 8010588:	f1c3 0801 	rsbmi	r8, r3, #1
 801058c:	2300      	movmi	r3, #0
 801058e:	9208      	str	r2, [sp, #32]
 8010590:	bf54      	ite	pl
 8010592:	f04f 0800 	movpl.w	r8, #0
 8010596:	9308      	strmi	r3, [sp, #32]
 8010598:	2f00      	cmp	r7, #0
 801059a:	db39      	blt.n	8010610 <_dtoa_r+0x218>
 801059c:	9b08      	ldr	r3, [sp, #32]
 801059e:	970f      	str	r7, [sp, #60]	@ 0x3c
 80105a0:	443b      	add	r3, r7
 80105a2:	9308      	str	r3, [sp, #32]
 80105a4:	2300      	movs	r3, #0
 80105a6:	930a      	str	r3, [sp, #40]	@ 0x28
 80105a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80105aa:	2b09      	cmp	r3, #9
 80105ac:	d864      	bhi.n	8010678 <_dtoa_r+0x280>
 80105ae:	2b05      	cmp	r3, #5
 80105b0:	bfc4      	itt	gt
 80105b2:	3b04      	subgt	r3, #4
 80105b4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80105b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80105b8:	f1a3 0302 	sub.w	r3, r3, #2
 80105bc:	bfcc      	ite	gt
 80105be:	2400      	movgt	r4, #0
 80105c0:	2401      	movle	r4, #1
 80105c2:	2b03      	cmp	r3, #3
 80105c4:	d863      	bhi.n	801068e <_dtoa_r+0x296>
 80105c6:	e8df f003 	tbb	[pc, r3]
 80105ca:	372a      	.short	0x372a
 80105cc:	5535      	.short	0x5535
 80105ce:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80105d2:	441e      	add	r6, r3
 80105d4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80105d8:	2b20      	cmp	r3, #32
 80105da:	bfc1      	itttt	gt
 80105dc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80105e0:	409f      	lslgt	r7, r3
 80105e2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80105e6:	fa24 f303 	lsrgt.w	r3, r4, r3
 80105ea:	bfd6      	itet	le
 80105ec:	f1c3 0320 	rsble	r3, r3, #32
 80105f0:	ea47 0003 	orrgt.w	r0, r7, r3
 80105f4:	fa04 f003 	lslle.w	r0, r4, r3
 80105f8:	f7ef ff5c 	bl	80004b4 <__aeabi_ui2d>
 80105fc:	2201      	movs	r2, #1
 80105fe:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8010602:	3e01      	subs	r6, #1
 8010604:	9214      	str	r2, [sp, #80]	@ 0x50
 8010606:	e777      	b.n	80104f8 <_dtoa_r+0x100>
 8010608:	2301      	movs	r3, #1
 801060a:	e7b8      	b.n	801057e <_dtoa_r+0x186>
 801060c:	9012      	str	r0, [sp, #72]	@ 0x48
 801060e:	e7b7      	b.n	8010580 <_dtoa_r+0x188>
 8010610:	427b      	negs	r3, r7
 8010612:	930a      	str	r3, [sp, #40]	@ 0x28
 8010614:	2300      	movs	r3, #0
 8010616:	eba8 0807 	sub.w	r8, r8, r7
 801061a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801061c:	e7c4      	b.n	80105a8 <_dtoa_r+0x1b0>
 801061e:	2300      	movs	r3, #0
 8010620:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010622:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010624:	2b00      	cmp	r3, #0
 8010626:	dc35      	bgt.n	8010694 <_dtoa_r+0x29c>
 8010628:	2301      	movs	r3, #1
 801062a:	9300      	str	r3, [sp, #0]
 801062c:	9307      	str	r3, [sp, #28]
 801062e:	461a      	mov	r2, r3
 8010630:	920e      	str	r2, [sp, #56]	@ 0x38
 8010632:	e00b      	b.n	801064c <_dtoa_r+0x254>
 8010634:	2301      	movs	r3, #1
 8010636:	e7f3      	b.n	8010620 <_dtoa_r+0x228>
 8010638:	2300      	movs	r3, #0
 801063a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801063c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801063e:	18fb      	adds	r3, r7, r3
 8010640:	9300      	str	r3, [sp, #0]
 8010642:	3301      	adds	r3, #1
 8010644:	2b01      	cmp	r3, #1
 8010646:	9307      	str	r3, [sp, #28]
 8010648:	bfb8      	it	lt
 801064a:	2301      	movlt	r3, #1
 801064c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8010650:	2100      	movs	r1, #0
 8010652:	2204      	movs	r2, #4
 8010654:	f102 0514 	add.w	r5, r2, #20
 8010658:	429d      	cmp	r5, r3
 801065a:	d91f      	bls.n	801069c <_dtoa_r+0x2a4>
 801065c:	6041      	str	r1, [r0, #4]
 801065e:	4658      	mov	r0, fp
 8010660:	f000 fd8e 	bl	8011180 <_Balloc>
 8010664:	4682      	mov	sl, r0
 8010666:	2800      	cmp	r0, #0
 8010668:	d13c      	bne.n	80106e4 <_dtoa_r+0x2ec>
 801066a:	4b1b      	ldr	r3, [pc, #108]	@ (80106d8 <_dtoa_r+0x2e0>)
 801066c:	4602      	mov	r2, r0
 801066e:	f240 11af 	movw	r1, #431	@ 0x1af
 8010672:	e6d8      	b.n	8010426 <_dtoa_r+0x2e>
 8010674:	2301      	movs	r3, #1
 8010676:	e7e0      	b.n	801063a <_dtoa_r+0x242>
 8010678:	2401      	movs	r4, #1
 801067a:	2300      	movs	r3, #0
 801067c:	9309      	str	r3, [sp, #36]	@ 0x24
 801067e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8010680:	f04f 33ff 	mov.w	r3, #4294967295
 8010684:	9300      	str	r3, [sp, #0]
 8010686:	9307      	str	r3, [sp, #28]
 8010688:	2200      	movs	r2, #0
 801068a:	2312      	movs	r3, #18
 801068c:	e7d0      	b.n	8010630 <_dtoa_r+0x238>
 801068e:	2301      	movs	r3, #1
 8010690:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010692:	e7f5      	b.n	8010680 <_dtoa_r+0x288>
 8010694:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010696:	9300      	str	r3, [sp, #0]
 8010698:	9307      	str	r3, [sp, #28]
 801069a:	e7d7      	b.n	801064c <_dtoa_r+0x254>
 801069c:	3101      	adds	r1, #1
 801069e:	0052      	lsls	r2, r2, #1
 80106a0:	e7d8      	b.n	8010654 <_dtoa_r+0x25c>
 80106a2:	bf00      	nop
 80106a4:	f3af 8000 	nop.w
 80106a8:	636f4361 	.word	0x636f4361
 80106ac:	3fd287a7 	.word	0x3fd287a7
 80106b0:	8b60c8b3 	.word	0x8b60c8b3
 80106b4:	3fc68a28 	.word	0x3fc68a28
 80106b8:	509f79fb 	.word	0x509f79fb
 80106bc:	3fd34413 	.word	0x3fd34413
 80106c0:	08018299 	.word	0x08018299
 80106c4:	080182b0 	.word	0x080182b0
 80106c8:	7ff00000 	.word	0x7ff00000
 80106cc:	08018264 	.word	0x08018264
 80106d0:	3ff80000 	.word	0x3ff80000
 80106d4:	080183a8 	.word	0x080183a8
 80106d8:	08018308 	.word	0x08018308
 80106dc:	08018295 	.word	0x08018295
 80106e0:	08018263 	.word	0x08018263
 80106e4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80106e8:	6018      	str	r0, [r3, #0]
 80106ea:	9b07      	ldr	r3, [sp, #28]
 80106ec:	2b0e      	cmp	r3, #14
 80106ee:	f200 80a4 	bhi.w	801083a <_dtoa_r+0x442>
 80106f2:	2c00      	cmp	r4, #0
 80106f4:	f000 80a1 	beq.w	801083a <_dtoa_r+0x442>
 80106f8:	2f00      	cmp	r7, #0
 80106fa:	dd33      	ble.n	8010764 <_dtoa_r+0x36c>
 80106fc:	4bad      	ldr	r3, [pc, #692]	@ (80109b4 <_dtoa_r+0x5bc>)
 80106fe:	f007 020f 	and.w	r2, r7, #15
 8010702:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010706:	ed93 7b00 	vldr	d7, [r3]
 801070a:	05f8      	lsls	r0, r7, #23
 801070c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8010710:	ea4f 1427 	mov.w	r4, r7, asr #4
 8010714:	d516      	bpl.n	8010744 <_dtoa_r+0x34c>
 8010716:	4ba8      	ldr	r3, [pc, #672]	@ (80109b8 <_dtoa_r+0x5c0>)
 8010718:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801071c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010720:	f7f0 f86c 	bl	80007fc <__aeabi_ddiv>
 8010724:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010728:	f004 040f 	and.w	r4, r4, #15
 801072c:	2603      	movs	r6, #3
 801072e:	4da2      	ldr	r5, [pc, #648]	@ (80109b8 <_dtoa_r+0x5c0>)
 8010730:	b954      	cbnz	r4, 8010748 <_dtoa_r+0x350>
 8010732:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010736:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801073a:	f7f0 f85f 	bl	80007fc <__aeabi_ddiv>
 801073e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010742:	e028      	b.n	8010796 <_dtoa_r+0x39e>
 8010744:	2602      	movs	r6, #2
 8010746:	e7f2      	b.n	801072e <_dtoa_r+0x336>
 8010748:	07e1      	lsls	r1, r4, #31
 801074a:	d508      	bpl.n	801075e <_dtoa_r+0x366>
 801074c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010750:	e9d5 2300 	ldrd	r2, r3, [r5]
 8010754:	f7ef ff28 	bl	80005a8 <__aeabi_dmul>
 8010758:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801075c:	3601      	adds	r6, #1
 801075e:	1064      	asrs	r4, r4, #1
 8010760:	3508      	adds	r5, #8
 8010762:	e7e5      	b.n	8010730 <_dtoa_r+0x338>
 8010764:	f000 80d2 	beq.w	801090c <_dtoa_r+0x514>
 8010768:	427c      	negs	r4, r7
 801076a:	4b92      	ldr	r3, [pc, #584]	@ (80109b4 <_dtoa_r+0x5bc>)
 801076c:	4d92      	ldr	r5, [pc, #584]	@ (80109b8 <_dtoa_r+0x5c0>)
 801076e:	f004 020f 	and.w	r2, r4, #15
 8010772:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010776:	e9d3 2300 	ldrd	r2, r3, [r3]
 801077a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801077e:	f7ef ff13 	bl	80005a8 <__aeabi_dmul>
 8010782:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010786:	1124      	asrs	r4, r4, #4
 8010788:	2300      	movs	r3, #0
 801078a:	2602      	movs	r6, #2
 801078c:	2c00      	cmp	r4, #0
 801078e:	f040 80b2 	bne.w	80108f6 <_dtoa_r+0x4fe>
 8010792:	2b00      	cmp	r3, #0
 8010794:	d1d3      	bne.n	801073e <_dtoa_r+0x346>
 8010796:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8010798:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801079c:	2b00      	cmp	r3, #0
 801079e:	f000 80b7 	beq.w	8010910 <_dtoa_r+0x518>
 80107a2:	4b86      	ldr	r3, [pc, #536]	@ (80109bc <_dtoa_r+0x5c4>)
 80107a4:	2200      	movs	r2, #0
 80107a6:	4620      	mov	r0, r4
 80107a8:	4629      	mov	r1, r5
 80107aa:	f7f0 f96f 	bl	8000a8c <__aeabi_dcmplt>
 80107ae:	2800      	cmp	r0, #0
 80107b0:	f000 80ae 	beq.w	8010910 <_dtoa_r+0x518>
 80107b4:	9b07      	ldr	r3, [sp, #28]
 80107b6:	2b00      	cmp	r3, #0
 80107b8:	f000 80aa 	beq.w	8010910 <_dtoa_r+0x518>
 80107bc:	9b00      	ldr	r3, [sp, #0]
 80107be:	2b00      	cmp	r3, #0
 80107c0:	dd37      	ble.n	8010832 <_dtoa_r+0x43a>
 80107c2:	1e7b      	subs	r3, r7, #1
 80107c4:	9304      	str	r3, [sp, #16]
 80107c6:	4620      	mov	r0, r4
 80107c8:	4b7d      	ldr	r3, [pc, #500]	@ (80109c0 <_dtoa_r+0x5c8>)
 80107ca:	2200      	movs	r2, #0
 80107cc:	4629      	mov	r1, r5
 80107ce:	f7ef feeb 	bl	80005a8 <__aeabi_dmul>
 80107d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80107d6:	9c00      	ldr	r4, [sp, #0]
 80107d8:	3601      	adds	r6, #1
 80107da:	4630      	mov	r0, r6
 80107dc:	f7ef fe7a 	bl	80004d4 <__aeabi_i2d>
 80107e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80107e4:	f7ef fee0 	bl	80005a8 <__aeabi_dmul>
 80107e8:	4b76      	ldr	r3, [pc, #472]	@ (80109c4 <_dtoa_r+0x5cc>)
 80107ea:	2200      	movs	r2, #0
 80107ec:	f7ef fd26 	bl	800023c <__adddf3>
 80107f0:	4605      	mov	r5, r0
 80107f2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80107f6:	2c00      	cmp	r4, #0
 80107f8:	f040 808d 	bne.w	8010916 <_dtoa_r+0x51e>
 80107fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010800:	4b71      	ldr	r3, [pc, #452]	@ (80109c8 <_dtoa_r+0x5d0>)
 8010802:	2200      	movs	r2, #0
 8010804:	f7ef fd18 	bl	8000238 <__aeabi_dsub>
 8010808:	4602      	mov	r2, r0
 801080a:	460b      	mov	r3, r1
 801080c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010810:	462a      	mov	r2, r5
 8010812:	4633      	mov	r3, r6
 8010814:	f7f0 f958 	bl	8000ac8 <__aeabi_dcmpgt>
 8010818:	2800      	cmp	r0, #0
 801081a:	f040 828b 	bne.w	8010d34 <_dtoa_r+0x93c>
 801081e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010822:	462a      	mov	r2, r5
 8010824:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8010828:	f7f0 f930 	bl	8000a8c <__aeabi_dcmplt>
 801082c:	2800      	cmp	r0, #0
 801082e:	f040 8128 	bne.w	8010a82 <_dtoa_r+0x68a>
 8010832:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8010836:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801083a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801083c:	2b00      	cmp	r3, #0
 801083e:	f2c0 815a 	blt.w	8010af6 <_dtoa_r+0x6fe>
 8010842:	2f0e      	cmp	r7, #14
 8010844:	f300 8157 	bgt.w	8010af6 <_dtoa_r+0x6fe>
 8010848:	4b5a      	ldr	r3, [pc, #360]	@ (80109b4 <_dtoa_r+0x5bc>)
 801084a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801084e:	ed93 7b00 	vldr	d7, [r3]
 8010852:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010854:	2b00      	cmp	r3, #0
 8010856:	ed8d 7b00 	vstr	d7, [sp]
 801085a:	da03      	bge.n	8010864 <_dtoa_r+0x46c>
 801085c:	9b07      	ldr	r3, [sp, #28]
 801085e:	2b00      	cmp	r3, #0
 8010860:	f340 8101 	ble.w	8010a66 <_dtoa_r+0x66e>
 8010864:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8010868:	4656      	mov	r6, sl
 801086a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801086e:	4620      	mov	r0, r4
 8010870:	4629      	mov	r1, r5
 8010872:	f7ef ffc3 	bl	80007fc <__aeabi_ddiv>
 8010876:	f7f0 f947 	bl	8000b08 <__aeabi_d2iz>
 801087a:	4680      	mov	r8, r0
 801087c:	f7ef fe2a 	bl	80004d4 <__aeabi_i2d>
 8010880:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010884:	f7ef fe90 	bl	80005a8 <__aeabi_dmul>
 8010888:	4602      	mov	r2, r0
 801088a:	460b      	mov	r3, r1
 801088c:	4620      	mov	r0, r4
 801088e:	4629      	mov	r1, r5
 8010890:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8010894:	f7ef fcd0 	bl	8000238 <__aeabi_dsub>
 8010898:	f806 4b01 	strb.w	r4, [r6], #1
 801089c:	9d07      	ldr	r5, [sp, #28]
 801089e:	eba6 040a 	sub.w	r4, r6, sl
 80108a2:	42a5      	cmp	r5, r4
 80108a4:	4602      	mov	r2, r0
 80108a6:	460b      	mov	r3, r1
 80108a8:	f040 8117 	bne.w	8010ada <_dtoa_r+0x6e2>
 80108ac:	f7ef fcc6 	bl	800023c <__adddf3>
 80108b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80108b4:	4604      	mov	r4, r0
 80108b6:	460d      	mov	r5, r1
 80108b8:	f7f0 f906 	bl	8000ac8 <__aeabi_dcmpgt>
 80108bc:	2800      	cmp	r0, #0
 80108be:	f040 80f9 	bne.w	8010ab4 <_dtoa_r+0x6bc>
 80108c2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80108c6:	4620      	mov	r0, r4
 80108c8:	4629      	mov	r1, r5
 80108ca:	f7f0 f8d5 	bl	8000a78 <__aeabi_dcmpeq>
 80108ce:	b118      	cbz	r0, 80108d8 <_dtoa_r+0x4e0>
 80108d0:	f018 0f01 	tst.w	r8, #1
 80108d4:	f040 80ee 	bne.w	8010ab4 <_dtoa_r+0x6bc>
 80108d8:	4649      	mov	r1, r9
 80108da:	4658      	mov	r0, fp
 80108dc:	f000 fc90 	bl	8011200 <_Bfree>
 80108e0:	2300      	movs	r3, #0
 80108e2:	7033      	strb	r3, [r6, #0]
 80108e4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80108e6:	3701      	adds	r7, #1
 80108e8:	601f      	str	r7, [r3, #0]
 80108ea:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80108ec:	2b00      	cmp	r3, #0
 80108ee:	f000 831d 	beq.w	8010f2c <_dtoa_r+0xb34>
 80108f2:	601e      	str	r6, [r3, #0]
 80108f4:	e31a      	b.n	8010f2c <_dtoa_r+0xb34>
 80108f6:	07e2      	lsls	r2, r4, #31
 80108f8:	d505      	bpl.n	8010906 <_dtoa_r+0x50e>
 80108fa:	e9d5 2300 	ldrd	r2, r3, [r5]
 80108fe:	f7ef fe53 	bl	80005a8 <__aeabi_dmul>
 8010902:	3601      	adds	r6, #1
 8010904:	2301      	movs	r3, #1
 8010906:	1064      	asrs	r4, r4, #1
 8010908:	3508      	adds	r5, #8
 801090a:	e73f      	b.n	801078c <_dtoa_r+0x394>
 801090c:	2602      	movs	r6, #2
 801090e:	e742      	b.n	8010796 <_dtoa_r+0x39e>
 8010910:	9c07      	ldr	r4, [sp, #28]
 8010912:	9704      	str	r7, [sp, #16]
 8010914:	e761      	b.n	80107da <_dtoa_r+0x3e2>
 8010916:	4b27      	ldr	r3, [pc, #156]	@ (80109b4 <_dtoa_r+0x5bc>)
 8010918:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801091a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801091e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8010922:	4454      	add	r4, sl
 8010924:	2900      	cmp	r1, #0
 8010926:	d053      	beq.n	80109d0 <_dtoa_r+0x5d8>
 8010928:	4928      	ldr	r1, [pc, #160]	@ (80109cc <_dtoa_r+0x5d4>)
 801092a:	2000      	movs	r0, #0
 801092c:	f7ef ff66 	bl	80007fc <__aeabi_ddiv>
 8010930:	4633      	mov	r3, r6
 8010932:	462a      	mov	r2, r5
 8010934:	f7ef fc80 	bl	8000238 <__aeabi_dsub>
 8010938:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801093c:	4656      	mov	r6, sl
 801093e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010942:	f7f0 f8e1 	bl	8000b08 <__aeabi_d2iz>
 8010946:	4605      	mov	r5, r0
 8010948:	f7ef fdc4 	bl	80004d4 <__aeabi_i2d>
 801094c:	4602      	mov	r2, r0
 801094e:	460b      	mov	r3, r1
 8010950:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010954:	f7ef fc70 	bl	8000238 <__aeabi_dsub>
 8010958:	3530      	adds	r5, #48	@ 0x30
 801095a:	4602      	mov	r2, r0
 801095c:	460b      	mov	r3, r1
 801095e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010962:	f806 5b01 	strb.w	r5, [r6], #1
 8010966:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801096a:	f7f0 f88f 	bl	8000a8c <__aeabi_dcmplt>
 801096e:	2800      	cmp	r0, #0
 8010970:	d171      	bne.n	8010a56 <_dtoa_r+0x65e>
 8010972:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010976:	4911      	ldr	r1, [pc, #68]	@ (80109bc <_dtoa_r+0x5c4>)
 8010978:	2000      	movs	r0, #0
 801097a:	f7ef fc5d 	bl	8000238 <__aeabi_dsub>
 801097e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8010982:	f7f0 f883 	bl	8000a8c <__aeabi_dcmplt>
 8010986:	2800      	cmp	r0, #0
 8010988:	f040 8095 	bne.w	8010ab6 <_dtoa_r+0x6be>
 801098c:	42a6      	cmp	r6, r4
 801098e:	f43f af50 	beq.w	8010832 <_dtoa_r+0x43a>
 8010992:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8010996:	4b0a      	ldr	r3, [pc, #40]	@ (80109c0 <_dtoa_r+0x5c8>)
 8010998:	2200      	movs	r2, #0
 801099a:	f7ef fe05 	bl	80005a8 <__aeabi_dmul>
 801099e:	4b08      	ldr	r3, [pc, #32]	@ (80109c0 <_dtoa_r+0x5c8>)
 80109a0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80109a4:	2200      	movs	r2, #0
 80109a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80109aa:	f7ef fdfd 	bl	80005a8 <__aeabi_dmul>
 80109ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80109b2:	e7c4      	b.n	801093e <_dtoa_r+0x546>
 80109b4:	080183a8 	.word	0x080183a8
 80109b8:	08018380 	.word	0x08018380
 80109bc:	3ff00000 	.word	0x3ff00000
 80109c0:	40240000 	.word	0x40240000
 80109c4:	401c0000 	.word	0x401c0000
 80109c8:	40140000 	.word	0x40140000
 80109cc:	3fe00000 	.word	0x3fe00000
 80109d0:	4631      	mov	r1, r6
 80109d2:	4628      	mov	r0, r5
 80109d4:	f7ef fde8 	bl	80005a8 <__aeabi_dmul>
 80109d8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80109dc:	9415      	str	r4, [sp, #84]	@ 0x54
 80109de:	4656      	mov	r6, sl
 80109e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80109e4:	f7f0 f890 	bl	8000b08 <__aeabi_d2iz>
 80109e8:	4605      	mov	r5, r0
 80109ea:	f7ef fd73 	bl	80004d4 <__aeabi_i2d>
 80109ee:	4602      	mov	r2, r0
 80109f0:	460b      	mov	r3, r1
 80109f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80109f6:	f7ef fc1f 	bl	8000238 <__aeabi_dsub>
 80109fa:	3530      	adds	r5, #48	@ 0x30
 80109fc:	f806 5b01 	strb.w	r5, [r6], #1
 8010a00:	4602      	mov	r2, r0
 8010a02:	460b      	mov	r3, r1
 8010a04:	42a6      	cmp	r6, r4
 8010a06:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010a0a:	f04f 0200 	mov.w	r2, #0
 8010a0e:	d124      	bne.n	8010a5a <_dtoa_r+0x662>
 8010a10:	4bac      	ldr	r3, [pc, #688]	@ (8010cc4 <_dtoa_r+0x8cc>)
 8010a12:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8010a16:	f7ef fc11 	bl	800023c <__adddf3>
 8010a1a:	4602      	mov	r2, r0
 8010a1c:	460b      	mov	r3, r1
 8010a1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010a22:	f7f0 f851 	bl	8000ac8 <__aeabi_dcmpgt>
 8010a26:	2800      	cmp	r0, #0
 8010a28:	d145      	bne.n	8010ab6 <_dtoa_r+0x6be>
 8010a2a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8010a2e:	49a5      	ldr	r1, [pc, #660]	@ (8010cc4 <_dtoa_r+0x8cc>)
 8010a30:	2000      	movs	r0, #0
 8010a32:	f7ef fc01 	bl	8000238 <__aeabi_dsub>
 8010a36:	4602      	mov	r2, r0
 8010a38:	460b      	mov	r3, r1
 8010a3a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010a3e:	f7f0 f825 	bl	8000a8c <__aeabi_dcmplt>
 8010a42:	2800      	cmp	r0, #0
 8010a44:	f43f aef5 	beq.w	8010832 <_dtoa_r+0x43a>
 8010a48:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8010a4a:	1e73      	subs	r3, r6, #1
 8010a4c:	9315      	str	r3, [sp, #84]	@ 0x54
 8010a4e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8010a52:	2b30      	cmp	r3, #48	@ 0x30
 8010a54:	d0f8      	beq.n	8010a48 <_dtoa_r+0x650>
 8010a56:	9f04      	ldr	r7, [sp, #16]
 8010a58:	e73e      	b.n	80108d8 <_dtoa_r+0x4e0>
 8010a5a:	4b9b      	ldr	r3, [pc, #620]	@ (8010cc8 <_dtoa_r+0x8d0>)
 8010a5c:	f7ef fda4 	bl	80005a8 <__aeabi_dmul>
 8010a60:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010a64:	e7bc      	b.n	80109e0 <_dtoa_r+0x5e8>
 8010a66:	d10c      	bne.n	8010a82 <_dtoa_r+0x68a>
 8010a68:	4b98      	ldr	r3, [pc, #608]	@ (8010ccc <_dtoa_r+0x8d4>)
 8010a6a:	2200      	movs	r2, #0
 8010a6c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010a70:	f7ef fd9a 	bl	80005a8 <__aeabi_dmul>
 8010a74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010a78:	f7f0 f81c 	bl	8000ab4 <__aeabi_dcmpge>
 8010a7c:	2800      	cmp	r0, #0
 8010a7e:	f000 8157 	beq.w	8010d30 <_dtoa_r+0x938>
 8010a82:	2400      	movs	r4, #0
 8010a84:	4625      	mov	r5, r4
 8010a86:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010a88:	43db      	mvns	r3, r3
 8010a8a:	9304      	str	r3, [sp, #16]
 8010a8c:	4656      	mov	r6, sl
 8010a8e:	2700      	movs	r7, #0
 8010a90:	4621      	mov	r1, r4
 8010a92:	4658      	mov	r0, fp
 8010a94:	f000 fbb4 	bl	8011200 <_Bfree>
 8010a98:	2d00      	cmp	r5, #0
 8010a9a:	d0dc      	beq.n	8010a56 <_dtoa_r+0x65e>
 8010a9c:	b12f      	cbz	r7, 8010aaa <_dtoa_r+0x6b2>
 8010a9e:	42af      	cmp	r7, r5
 8010aa0:	d003      	beq.n	8010aaa <_dtoa_r+0x6b2>
 8010aa2:	4639      	mov	r1, r7
 8010aa4:	4658      	mov	r0, fp
 8010aa6:	f000 fbab 	bl	8011200 <_Bfree>
 8010aaa:	4629      	mov	r1, r5
 8010aac:	4658      	mov	r0, fp
 8010aae:	f000 fba7 	bl	8011200 <_Bfree>
 8010ab2:	e7d0      	b.n	8010a56 <_dtoa_r+0x65e>
 8010ab4:	9704      	str	r7, [sp, #16]
 8010ab6:	4633      	mov	r3, r6
 8010ab8:	461e      	mov	r6, r3
 8010aba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010abe:	2a39      	cmp	r2, #57	@ 0x39
 8010ac0:	d107      	bne.n	8010ad2 <_dtoa_r+0x6da>
 8010ac2:	459a      	cmp	sl, r3
 8010ac4:	d1f8      	bne.n	8010ab8 <_dtoa_r+0x6c0>
 8010ac6:	9a04      	ldr	r2, [sp, #16]
 8010ac8:	3201      	adds	r2, #1
 8010aca:	9204      	str	r2, [sp, #16]
 8010acc:	2230      	movs	r2, #48	@ 0x30
 8010ace:	f88a 2000 	strb.w	r2, [sl]
 8010ad2:	781a      	ldrb	r2, [r3, #0]
 8010ad4:	3201      	adds	r2, #1
 8010ad6:	701a      	strb	r2, [r3, #0]
 8010ad8:	e7bd      	b.n	8010a56 <_dtoa_r+0x65e>
 8010ada:	4b7b      	ldr	r3, [pc, #492]	@ (8010cc8 <_dtoa_r+0x8d0>)
 8010adc:	2200      	movs	r2, #0
 8010ade:	f7ef fd63 	bl	80005a8 <__aeabi_dmul>
 8010ae2:	2200      	movs	r2, #0
 8010ae4:	2300      	movs	r3, #0
 8010ae6:	4604      	mov	r4, r0
 8010ae8:	460d      	mov	r5, r1
 8010aea:	f7ef ffc5 	bl	8000a78 <__aeabi_dcmpeq>
 8010aee:	2800      	cmp	r0, #0
 8010af0:	f43f aebb 	beq.w	801086a <_dtoa_r+0x472>
 8010af4:	e6f0      	b.n	80108d8 <_dtoa_r+0x4e0>
 8010af6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8010af8:	2a00      	cmp	r2, #0
 8010afa:	f000 80db 	beq.w	8010cb4 <_dtoa_r+0x8bc>
 8010afe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010b00:	2a01      	cmp	r2, #1
 8010b02:	f300 80bf 	bgt.w	8010c84 <_dtoa_r+0x88c>
 8010b06:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8010b08:	2a00      	cmp	r2, #0
 8010b0a:	f000 80b7 	beq.w	8010c7c <_dtoa_r+0x884>
 8010b0e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8010b12:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8010b14:	4646      	mov	r6, r8
 8010b16:	9a08      	ldr	r2, [sp, #32]
 8010b18:	2101      	movs	r1, #1
 8010b1a:	441a      	add	r2, r3
 8010b1c:	4658      	mov	r0, fp
 8010b1e:	4498      	add	r8, r3
 8010b20:	9208      	str	r2, [sp, #32]
 8010b22:	f000 fc6b 	bl	80113fc <__i2b>
 8010b26:	4605      	mov	r5, r0
 8010b28:	b15e      	cbz	r6, 8010b42 <_dtoa_r+0x74a>
 8010b2a:	9b08      	ldr	r3, [sp, #32]
 8010b2c:	2b00      	cmp	r3, #0
 8010b2e:	dd08      	ble.n	8010b42 <_dtoa_r+0x74a>
 8010b30:	42b3      	cmp	r3, r6
 8010b32:	9a08      	ldr	r2, [sp, #32]
 8010b34:	bfa8      	it	ge
 8010b36:	4633      	movge	r3, r6
 8010b38:	eba8 0803 	sub.w	r8, r8, r3
 8010b3c:	1af6      	subs	r6, r6, r3
 8010b3e:	1ad3      	subs	r3, r2, r3
 8010b40:	9308      	str	r3, [sp, #32]
 8010b42:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010b44:	b1f3      	cbz	r3, 8010b84 <_dtoa_r+0x78c>
 8010b46:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010b48:	2b00      	cmp	r3, #0
 8010b4a:	f000 80b7 	beq.w	8010cbc <_dtoa_r+0x8c4>
 8010b4e:	b18c      	cbz	r4, 8010b74 <_dtoa_r+0x77c>
 8010b50:	4629      	mov	r1, r5
 8010b52:	4622      	mov	r2, r4
 8010b54:	4658      	mov	r0, fp
 8010b56:	f000 fd11 	bl	801157c <__pow5mult>
 8010b5a:	464a      	mov	r2, r9
 8010b5c:	4601      	mov	r1, r0
 8010b5e:	4605      	mov	r5, r0
 8010b60:	4658      	mov	r0, fp
 8010b62:	f000 fc61 	bl	8011428 <__multiply>
 8010b66:	4649      	mov	r1, r9
 8010b68:	9004      	str	r0, [sp, #16]
 8010b6a:	4658      	mov	r0, fp
 8010b6c:	f000 fb48 	bl	8011200 <_Bfree>
 8010b70:	9b04      	ldr	r3, [sp, #16]
 8010b72:	4699      	mov	r9, r3
 8010b74:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010b76:	1b1a      	subs	r2, r3, r4
 8010b78:	d004      	beq.n	8010b84 <_dtoa_r+0x78c>
 8010b7a:	4649      	mov	r1, r9
 8010b7c:	4658      	mov	r0, fp
 8010b7e:	f000 fcfd 	bl	801157c <__pow5mult>
 8010b82:	4681      	mov	r9, r0
 8010b84:	2101      	movs	r1, #1
 8010b86:	4658      	mov	r0, fp
 8010b88:	f000 fc38 	bl	80113fc <__i2b>
 8010b8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010b8e:	4604      	mov	r4, r0
 8010b90:	2b00      	cmp	r3, #0
 8010b92:	f000 81cf 	beq.w	8010f34 <_dtoa_r+0xb3c>
 8010b96:	461a      	mov	r2, r3
 8010b98:	4601      	mov	r1, r0
 8010b9a:	4658      	mov	r0, fp
 8010b9c:	f000 fcee 	bl	801157c <__pow5mult>
 8010ba0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010ba2:	2b01      	cmp	r3, #1
 8010ba4:	4604      	mov	r4, r0
 8010ba6:	f300 8095 	bgt.w	8010cd4 <_dtoa_r+0x8dc>
 8010baa:	9b02      	ldr	r3, [sp, #8]
 8010bac:	2b00      	cmp	r3, #0
 8010bae:	f040 8087 	bne.w	8010cc0 <_dtoa_r+0x8c8>
 8010bb2:	9b03      	ldr	r3, [sp, #12]
 8010bb4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010bb8:	2b00      	cmp	r3, #0
 8010bba:	f040 8089 	bne.w	8010cd0 <_dtoa_r+0x8d8>
 8010bbe:	9b03      	ldr	r3, [sp, #12]
 8010bc0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8010bc4:	0d1b      	lsrs	r3, r3, #20
 8010bc6:	051b      	lsls	r3, r3, #20
 8010bc8:	b12b      	cbz	r3, 8010bd6 <_dtoa_r+0x7de>
 8010bca:	9b08      	ldr	r3, [sp, #32]
 8010bcc:	3301      	adds	r3, #1
 8010bce:	9308      	str	r3, [sp, #32]
 8010bd0:	f108 0801 	add.w	r8, r8, #1
 8010bd4:	2301      	movs	r3, #1
 8010bd6:	930a      	str	r3, [sp, #40]	@ 0x28
 8010bd8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010bda:	2b00      	cmp	r3, #0
 8010bdc:	f000 81b0 	beq.w	8010f40 <_dtoa_r+0xb48>
 8010be0:	6923      	ldr	r3, [r4, #16]
 8010be2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010be6:	6918      	ldr	r0, [r3, #16]
 8010be8:	f000 fbbc 	bl	8011364 <__hi0bits>
 8010bec:	f1c0 0020 	rsb	r0, r0, #32
 8010bf0:	9b08      	ldr	r3, [sp, #32]
 8010bf2:	4418      	add	r0, r3
 8010bf4:	f010 001f 	ands.w	r0, r0, #31
 8010bf8:	d077      	beq.n	8010cea <_dtoa_r+0x8f2>
 8010bfa:	f1c0 0320 	rsb	r3, r0, #32
 8010bfe:	2b04      	cmp	r3, #4
 8010c00:	dd6b      	ble.n	8010cda <_dtoa_r+0x8e2>
 8010c02:	9b08      	ldr	r3, [sp, #32]
 8010c04:	f1c0 001c 	rsb	r0, r0, #28
 8010c08:	4403      	add	r3, r0
 8010c0a:	4480      	add	r8, r0
 8010c0c:	4406      	add	r6, r0
 8010c0e:	9308      	str	r3, [sp, #32]
 8010c10:	f1b8 0f00 	cmp.w	r8, #0
 8010c14:	dd05      	ble.n	8010c22 <_dtoa_r+0x82a>
 8010c16:	4649      	mov	r1, r9
 8010c18:	4642      	mov	r2, r8
 8010c1a:	4658      	mov	r0, fp
 8010c1c:	f000 fd08 	bl	8011630 <__lshift>
 8010c20:	4681      	mov	r9, r0
 8010c22:	9b08      	ldr	r3, [sp, #32]
 8010c24:	2b00      	cmp	r3, #0
 8010c26:	dd05      	ble.n	8010c34 <_dtoa_r+0x83c>
 8010c28:	4621      	mov	r1, r4
 8010c2a:	461a      	mov	r2, r3
 8010c2c:	4658      	mov	r0, fp
 8010c2e:	f000 fcff 	bl	8011630 <__lshift>
 8010c32:	4604      	mov	r4, r0
 8010c34:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8010c36:	2b00      	cmp	r3, #0
 8010c38:	d059      	beq.n	8010cee <_dtoa_r+0x8f6>
 8010c3a:	4621      	mov	r1, r4
 8010c3c:	4648      	mov	r0, r9
 8010c3e:	f000 fd63 	bl	8011708 <__mcmp>
 8010c42:	2800      	cmp	r0, #0
 8010c44:	da53      	bge.n	8010cee <_dtoa_r+0x8f6>
 8010c46:	1e7b      	subs	r3, r7, #1
 8010c48:	9304      	str	r3, [sp, #16]
 8010c4a:	4649      	mov	r1, r9
 8010c4c:	2300      	movs	r3, #0
 8010c4e:	220a      	movs	r2, #10
 8010c50:	4658      	mov	r0, fp
 8010c52:	f000 faf7 	bl	8011244 <__multadd>
 8010c56:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010c58:	4681      	mov	r9, r0
 8010c5a:	2b00      	cmp	r3, #0
 8010c5c:	f000 8172 	beq.w	8010f44 <_dtoa_r+0xb4c>
 8010c60:	2300      	movs	r3, #0
 8010c62:	4629      	mov	r1, r5
 8010c64:	220a      	movs	r2, #10
 8010c66:	4658      	mov	r0, fp
 8010c68:	f000 faec 	bl	8011244 <__multadd>
 8010c6c:	9b00      	ldr	r3, [sp, #0]
 8010c6e:	2b00      	cmp	r3, #0
 8010c70:	4605      	mov	r5, r0
 8010c72:	dc67      	bgt.n	8010d44 <_dtoa_r+0x94c>
 8010c74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010c76:	2b02      	cmp	r3, #2
 8010c78:	dc41      	bgt.n	8010cfe <_dtoa_r+0x906>
 8010c7a:	e063      	b.n	8010d44 <_dtoa_r+0x94c>
 8010c7c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8010c7e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8010c82:	e746      	b.n	8010b12 <_dtoa_r+0x71a>
 8010c84:	9b07      	ldr	r3, [sp, #28]
 8010c86:	1e5c      	subs	r4, r3, #1
 8010c88:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010c8a:	42a3      	cmp	r3, r4
 8010c8c:	bfbf      	itttt	lt
 8010c8e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8010c90:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8010c92:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8010c94:	1ae3      	sublt	r3, r4, r3
 8010c96:	bfb4      	ite	lt
 8010c98:	18d2      	addlt	r2, r2, r3
 8010c9a:	1b1c      	subge	r4, r3, r4
 8010c9c:	9b07      	ldr	r3, [sp, #28]
 8010c9e:	bfbc      	itt	lt
 8010ca0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8010ca2:	2400      	movlt	r4, #0
 8010ca4:	2b00      	cmp	r3, #0
 8010ca6:	bfb5      	itete	lt
 8010ca8:	eba8 0603 	sublt.w	r6, r8, r3
 8010cac:	9b07      	ldrge	r3, [sp, #28]
 8010cae:	2300      	movlt	r3, #0
 8010cb0:	4646      	movge	r6, r8
 8010cb2:	e730      	b.n	8010b16 <_dtoa_r+0x71e>
 8010cb4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8010cb6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8010cb8:	4646      	mov	r6, r8
 8010cba:	e735      	b.n	8010b28 <_dtoa_r+0x730>
 8010cbc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010cbe:	e75c      	b.n	8010b7a <_dtoa_r+0x782>
 8010cc0:	2300      	movs	r3, #0
 8010cc2:	e788      	b.n	8010bd6 <_dtoa_r+0x7de>
 8010cc4:	3fe00000 	.word	0x3fe00000
 8010cc8:	40240000 	.word	0x40240000
 8010ccc:	40140000 	.word	0x40140000
 8010cd0:	9b02      	ldr	r3, [sp, #8]
 8010cd2:	e780      	b.n	8010bd6 <_dtoa_r+0x7de>
 8010cd4:	2300      	movs	r3, #0
 8010cd6:	930a      	str	r3, [sp, #40]	@ 0x28
 8010cd8:	e782      	b.n	8010be0 <_dtoa_r+0x7e8>
 8010cda:	d099      	beq.n	8010c10 <_dtoa_r+0x818>
 8010cdc:	9a08      	ldr	r2, [sp, #32]
 8010cde:	331c      	adds	r3, #28
 8010ce0:	441a      	add	r2, r3
 8010ce2:	4498      	add	r8, r3
 8010ce4:	441e      	add	r6, r3
 8010ce6:	9208      	str	r2, [sp, #32]
 8010ce8:	e792      	b.n	8010c10 <_dtoa_r+0x818>
 8010cea:	4603      	mov	r3, r0
 8010cec:	e7f6      	b.n	8010cdc <_dtoa_r+0x8e4>
 8010cee:	9b07      	ldr	r3, [sp, #28]
 8010cf0:	9704      	str	r7, [sp, #16]
 8010cf2:	2b00      	cmp	r3, #0
 8010cf4:	dc20      	bgt.n	8010d38 <_dtoa_r+0x940>
 8010cf6:	9300      	str	r3, [sp, #0]
 8010cf8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010cfa:	2b02      	cmp	r3, #2
 8010cfc:	dd1e      	ble.n	8010d3c <_dtoa_r+0x944>
 8010cfe:	9b00      	ldr	r3, [sp, #0]
 8010d00:	2b00      	cmp	r3, #0
 8010d02:	f47f aec0 	bne.w	8010a86 <_dtoa_r+0x68e>
 8010d06:	4621      	mov	r1, r4
 8010d08:	2205      	movs	r2, #5
 8010d0a:	4658      	mov	r0, fp
 8010d0c:	f000 fa9a 	bl	8011244 <__multadd>
 8010d10:	4601      	mov	r1, r0
 8010d12:	4604      	mov	r4, r0
 8010d14:	4648      	mov	r0, r9
 8010d16:	f000 fcf7 	bl	8011708 <__mcmp>
 8010d1a:	2800      	cmp	r0, #0
 8010d1c:	f77f aeb3 	ble.w	8010a86 <_dtoa_r+0x68e>
 8010d20:	4656      	mov	r6, sl
 8010d22:	2331      	movs	r3, #49	@ 0x31
 8010d24:	f806 3b01 	strb.w	r3, [r6], #1
 8010d28:	9b04      	ldr	r3, [sp, #16]
 8010d2a:	3301      	adds	r3, #1
 8010d2c:	9304      	str	r3, [sp, #16]
 8010d2e:	e6ae      	b.n	8010a8e <_dtoa_r+0x696>
 8010d30:	9c07      	ldr	r4, [sp, #28]
 8010d32:	9704      	str	r7, [sp, #16]
 8010d34:	4625      	mov	r5, r4
 8010d36:	e7f3      	b.n	8010d20 <_dtoa_r+0x928>
 8010d38:	9b07      	ldr	r3, [sp, #28]
 8010d3a:	9300      	str	r3, [sp, #0]
 8010d3c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010d3e:	2b00      	cmp	r3, #0
 8010d40:	f000 8104 	beq.w	8010f4c <_dtoa_r+0xb54>
 8010d44:	2e00      	cmp	r6, #0
 8010d46:	dd05      	ble.n	8010d54 <_dtoa_r+0x95c>
 8010d48:	4629      	mov	r1, r5
 8010d4a:	4632      	mov	r2, r6
 8010d4c:	4658      	mov	r0, fp
 8010d4e:	f000 fc6f 	bl	8011630 <__lshift>
 8010d52:	4605      	mov	r5, r0
 8010d54:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010d56:	2b00      	cmp	r3, #0
 8010d58:	d05a      	beq.n	8010e10 <_dtoa_r+0xa18>
 8010d5a:	6869      	ldr	r1, [r5, #4]
 8010d5c:	4658      	mov	r0, fp
 8010d5e:	f000 fa0f 	bl	8011180 <_Balloc>
 8010d62:	4606      	mov	r6, r0
 8010d64:	b928      	cbnz	r0, 8010d72 <_dtoa_r+0x97a>
 8010d66:	4b84      	ldr	r3, [pc, #528]	@ (8010f78 <_dtoa_r+0xb80>)
 8010d68:	4602      	mov	r2, r0
 8010d6a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8010d6e:	f7ff bb5a 	b.w	8010426 <_dtoa_r+0x2e>
 8010d72:	692a      	ldr	r2, [r5, #16]
 8010d74:	3202      	adds	r2, #2
 8010d76:	0092      	lsls	r2, r2, #2
 8010d78:	f105 010c 	add.w	r1, r5, #12
 8010d7c:	300c      	adds	r0, #12
 8010d7e:	f7ff fa9e 	bl	80102be <memcpy>
 8010d82:	2201      	movs	r2, #1
 8010d84:	4631      	mov	r1, r6
 8010d86:	4658      	mov	r0, fp
 8010d88:	f000 fc52 	bl	8011630 <__lshift>
 8010d8c:	f10a 0301 	add.w	r3, sl, #1
 8010d90:	9307      	str	r3, [sp, #28]
 8010d92:	9b00      	ldr	r3, [sp, #0]
 8010d94:	4453      	add	r3, sl
 8010d96:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010d98:	9b02      	ldr	r3, [sp, #8]
 8010d9a:	f003 0301 	and.w	r3, r3, #1
 8010d9e:	462f      	mov	r7, r5
 8010da0:	930a      	str	r3, [sp, #40]	@ 0x28
 8010da2:	4605      	mov	r5, r0
 8010da4:	9b07      	ldr	r3, [sp, #28]
 8010da6:	4621      	mov	r1, r4
 8010da8:	3b01      	subs	r3, #1
 8010daa:	4648      	mov	r0, r9
 8010dac:	9300      	str	r3, [sp, #0]
 8010dae:	f7ff fa9b 	bl	80102e8 <quorem>
 8010db2:	4639      	mov	r1, r7
 8010db4:	9002      	str	r0, [sp, #8]
 8010db6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8010dba:	4648      	mov	r0, r9
 8010dbc:	f000 fca4 	bl	8011708 <__mcmp>
 8010dc0:	462a      	mov	r2, r5
 8010dc2:	9008      	str	r0, [sp, #32]
 8010dc4:	4621      	mov	r1, r4
 8010dc6:	4658      	mov	r0, fp
 8010dc8:	f000 fcba 	bl	8011740 <__mdiff>
 8010dcc:	68c2      	ldr	r2, [r0, #12]
 8010dce:	4606      	mov	r6, r0
 8010dd0:	bb02      	cbnz	r2, 8010e14 <_dtoa_r+0xa1c>
 8010dd2:	4601      	mov	r1, r0
 8010dd4:	4648      	mov	r0, r9
 8010dd6:	f000 fc97 	bl	8011708 <__mcmp>
 8010dda:	4602      	mov	r2, r0
 8010ddc:	4631      	mov	r1, r6
 8010dde:	4658      	mov	r0, fp
 8010de0:	920e      	str	r2, [sp, #56]	@ 0x38
 8010de2:	f000 fa0d 	bl	8011200 <_Bfree>
 8010de6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010de8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010dea:	9e07      	ldr	r6, [sp, #28]
 8010dec:	ea43 0102 	orr.w	r1, r3, r2
 8010df0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010df2:	4319      	orrs	r1, r3
 8010df4:	d110      	bne.n	8010e18 <_dtoa_r+0xa20>
 8010df6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8010dfa:	d029      	beq.n	8010e50 <_dtoa_r+0xa58>
 8010dfc:	9b08      	ldr	r3, [sp, #32]
 8010dfe:	2b00      	cmp	r3, #0
 8010e00:	dd02      	ble.n	8010e08 <_dtoa_r+0xa10>
 8010e02:	9b02      	ldr	r3, [sp, #8]
 8010e04:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8010e08:	9b00      	ldr	r3, [sp, #0]
 8010e0a:	f883 8000 	strb.w	r8, [r3]
 8010e0e:	e63f      	b.n	8010a90 <_dtoa_r+0x698>
 8010e10:	4628      	mov	r0, r5
 8010e12:	e7bb      	b.n	8010d8c <_dtoa_r+0x994>
 8010e14:	2201      	movs	r2, #1
 8010e16:	e7e1      	b.n	8010ddc <_dtoa_r+0x9e4>
 8010e18:	9b08      	ldr	r3, [sp, #32]
 8010e1a:	2b00      	cmp	r3, #0
 8010e1c:	db04      	blt.n	8010e28 <_dtoa_r+0xa30>
 8010e1e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8010e20:	430b      	orrs	r3, r1
 8010e22:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8010e24:	430b      	orrs	r3, r1
 8010e26:	d120      	bne.n	8010e6a <_dtoa_r+0xa72>
 8010e28:	2a00      	cmp	r2, #0
 8010e2a:	dded      	ble.n	8010e08 <_dtoa_r+0xa10>
 8010e2c:	4649      	mov	r1, r9
 8010e2e:	2201      	movs	r2, #1
 8010e30:	4658      	mov	r0, fp
 8010e32:	f000 fbfd 	bl	8011630 <__lshift>
 8010e36:	4621      	mov	r1, r4
 8010e38:	4681      	mov	r9, r0
 8010e3a:	f000 fc65 	bl	8011708 <__mcmp>
 8010e3e:	2800      	cmp	r0, #0
 8010e40:	dc03      	bgt.n	8010e4a <_dtoa_r+0xa52>
 8010e42:	d1e1      	bne.n	8010e08 <_dtoa_r+0xa10>
 8010e44:	f018 0f01 	tst.w	r8, #1
 8010e48:	d0de      	beq.n	8010e08 <_dtoa_r+0xa10>
 8010e4a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8010e4e:	d1d8      	bne.n	8010e02 <_dtoa_r+0xa0a>
 8010e50:	9a00      	ldr	r2, [sp, #0]
 8010e52:	2339      	movs	r3, #57	@ 0x39
 8010e54:	7013      	strb	r3, [r2, #0]
 8010e56:	4633      	mov	r3, r6
 8010e58:	461e      	mov	r6, r3
 8010e5a:	3b01      	subs	r3, #1
 8010e5c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8010e60:	2a39      	cmp	r2, #57	@ 0x39
 8010e62:	d052      	beq.n	8010f0a <_dtoa_r+0xb12>
 8010e64:	3201      	adds	r2, #1
 8010e66:	701a      	strb	r2, [r3, #0]
 8010e68:	e612      	b.n	8010a90 <_dtoa_r+0x698>
 8010e6a:	2a00      	cmp	r2, #0
 8010e6c:	dd07      	ble.n	8010e7e <_dtoa_r+0xa86>
 8010e6e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8010e72:	d0ed      	beq.n	8010e50 <_dtoa_r+0xa58>
 8010e74:	9a00      	ldr	r2, [sp, #0]
 8010e76:	f108 0301 	add.w	r3, r8, #1
 8010e7a:	7013      	strb	r3, [r2, #0]
 8010e7c:	e608      	b.n	8010a90 <_dtoa_r+0x698>
 8010e7e:	9b07      	ldr	r3, [sp, #28]
 8010e80:	9a07      	ldr	r2, [sp, #28]
 8010e82:	f803 8c01 	strb.w	r8, [r3, #-1]
 8010e86:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010e88:	4293      	cmp	r3, r2
 8010e8a:	d028      	beq.n	8010ede <_dtoa_r+0xae6>
 8010e8c:	4649      	mov	r1, r9
 8010e8e:	2300      	movs	r3, #0
 8010e90:	220a      	movs	r2, #10
 8010e92:	4658      	mov	r0, fp
 8010e94:	f000 f9d6 	bl	8011244 <__multadd>
 8010e98:	42af      	cmp	r7, r5
 8010e9a:	4681      	mov	r9, r0
 8010e9c:	f04f 0300 	mov.w	r3, #0
 8010ea0:	f04f 020a 	mov.w	r2, #10
 8010ea4:	4639      	mov	r1, r7
 8010ea6:	4658      	mov	r0, fp
 8010ea8:	d107      	bne.n	8010eba <_dtoa_r+0xac2>
 8010eaa:	f000 f9cb 	bl	8011244 <__multadd>
 8010eae:	4607      	mov	r7, r0
 8010eb0:	4605      	mov	r5, r0
 8010eb2:	9b07      	ldr	r3, [sp, #28]
 8010eb4:	3301      	adds	r3, #1
 8010eb6:	9307      	str	r3, [sp, #28]
 8010eb8:	e774      	b.n	8010da4 <_dtoa_r+0x9ac>
 8010eba:	f000 f9c3 	bl	8011244 <__multadd>
 8010ebe:	4629      	mov	r1, r5
 8010ec0:	4607      	mov	r7, r0
 8010ec2:	2300      	movs	r3, #0
 8010ec4:	220a      	movs	r2, #10
 8010ec6:	4658      	mov	r0, fp
 8010ec8:	f000 f9bc 	bl	8011244 <__multadd>
 8010ecc:	4605      	mov	r5, r0
 8010ece:	e7f0      	b.n	8010eb2 <_dtoa_r+0xaba>
 8010ed0:	9b00      	ldr	r3, [sp, #0]
 8010ed2:	2b00      	cmp	r3, #0
 8010ed4:	bfcc      	ite	gt
 8010ed6:	461e      	movgt	r6, r3
 8010ed8:	2601      	movle	r6, #1
 8010eda:	4456      	add	r6, sl
 8010edc:	2700      	movs	r7, #0
 8010ede:	4649      	mov	r1, r9
 8010ee0:	2201      	movs	r2, #1
 8010ee2:	4658      	mov	r0, fp
 8010ee4:	f000 fba4 	bl	8011630 <__lshift>
 8010ee8:	4621      	mov	r1, r4
 8010eea:	4681      	mov	r9, r0
 8010eec:	f000 fc0c 	bl	8011708 <__mcmp>
 8010ef0:	2800      	cmp	r0, #0
 8010ef2:	dcb0      	bgt.n	8010e56 <_dtoa_r+0xa5e>
 8010ef4:	d102      	bne.n	8010efc <_dtoa_r+0xb04>
 8010ef6:	f018 0f01 	tst.w	r8, #1
 8010efa:	d1ac      	bne.n	8010e56 <_dtoa_r+0xa5e>
 8010efc:	4633      	mov	r3, r6
 8010efe:	461e      	mov	r6, r3
 8010f00:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010f04:	2a30      	cmp	r2, #48	@ 0x30
 8010f06:	d0fa      	beq.n	8010efe <_dtoa_r+0xb06>
 8010f08:	e5c2      	b.n	8010a90 <_dtoa_r+0x698>
 8010f0a:	459a      	cmp	sl, r3
 8010f0c:	d1a4      	bne.n	8010e58 <_dtoa_r+0xa60>
 8010f0e:	9b04      	ldr	r3, [sp, #16]
 8010f10:	3301      	adds	r3, #1
 8010f12:	9304      	str	r3, [sp, #16]
 8010f14:	2331      	movs	r3, #49	@ 0x31
 8010f16:	f88a 3000 	strb.w	r3, [sl]
 8010f1a:	e5b9      	b.n	8010a90 <_dtoa_r+0x698>
 8010f1c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8010f1e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8010f7c <_dtoa_r+0xb84>
 8010f22:	b11b      	cbz	r3, 8010f2c <_dtoa_r+0xb34>
 8010f24:	f10a 0308 	add.w	r3, sl, #8
 8010f28:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8010f2a:	6013      	str	r3, [r2, #0]
 8010f2c:	4650      	mov	r0, sl
 8010f2e:	b019      	add	sp, #100	@ 0x64
 8010f30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010f36:	2b01      	cmp	r3, #1
 8010f38:	f77f ae37 	ble.w	8010baa <_dtoa_r+0x7b2>
 8010f3c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010f3e:	930a      	str	r3, [sp, #40]	@ 0x28
 8010f40:	2001      	movs	r0, #1
 8010f42:	e655      	b.n	8010bf0 <_dtoa_r+0x7f8>
 8010f44:	9b00      	ldr	r3, [sp, #0]
 8010f46:	2b00      	cmp	r3, #0
 8010f48:	f77f aed6 	ble.w	8010cf8 <_dtoa_r+0x900>
 8010f4c:	4656      	mov	r6, sl
 8010f4e:	4621      	mov	r1, r4
 8010f50:	4648      	mov	r0, r9
 8010f52:	f7ff f9c9 	bl	80102e8 <quorem>
 8010f56:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8010f5a:	f806 8b01 	strb.w	r8, [r6], #1
 8010f5e:	9b00      	ldr	r3, [sp, #0]
 8010f60:	eba6 020a 	sub.w	r2, r6, sl
 8010f64:	4293      	cmp	r3, r2
 8010f66:	ddb3      	ble.n	8010ed0 <_dtoa_r+0xad8>
 8010f68:	4649      	mov	r1, r9
 8010f6a:	2300      	movs	r3, #0
 8010f6c:	220a      	movs	r2, #10
 8010f6e:	4658      	mov	r0, fp
 8010f70:	f000 f968 	bl	8011244 <__multadd>
 8010f74:	4681      	mov	r9, r0
 8010f76:	e7ea      	b.n	8010f4e <_dtoa_r+0xb56>
 8010f78:	08018308 	.word	0x08018308
 8010f7c:	0801828c 	.word	0x0801828c

08010f80 <_free_r>:
 8010f80:	b538      	push	{r3, r4, r5, lr}
 8010f82:	4605      	mov	r5, r0
 8010f84:	2900      	cmp	r1, #0
 8010f86:	d041      	beq.n	801100c <_free_r+0x8c>
 8010f88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010f8c:	1f0c      	subs	r4, r1, #4
 8010f8e:	2b00      	cmp	r3, #0
 8010f90:	bfb8      	it	lt
 8010f92:	18e4      	addlt	r4, r4, r3
 8010f94:	f000 f8e8 	bl	8011168 <__malloc_lock>
 8010f98:	4a1d      	ldr	r2, [pc, #116]	@ (8011010 <_free_r+0x90>)
 8010f9a:	6813      	ldr	r3, [r2, #0]
 8010f9c:	b933      	cbnz	r3, 8010fac <_free_r+0x2c>
 8010f9e:	6063      	str	r3, [r4, #4]
 8010fa0:	6014      	str	r4, [r2, #0]
 8010fa2:	4628      	mov	r0, r5
 8010fa4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010fa8:	f000 b8e4 	b.w	8011174 <__malloc_unlock>
 8010fac:	42a3      	cmp	r3, r4
 8010fae:	d908      	bls.n	8010fc2 <_free_r+0x42>
 8010fb0:	6820      	ldr	r0, [r4, #0]
 8010fb2:	1821      	adds	r1, r4, r0
 8010fb4:	428b      	cmp	r3, r1
 8010fb6:	bf01      	itttt	eq
 8010fb8:	6819      	ldreq	r1, [r3, #0]
 8010fba:	685b      	ldreq	r3, [r3, #4]
 8010fbc:	1809      	addeq	r1, r1, r0
 8010fbe:	6021      	streq	r1, [r4, #0]
 8010fc0:	e7ed      	b.n	8010f9e <_free_r+0x1e>
 8010fc2:	461a      	mov	r2, r3
 8010fc4:	685b      	ldr	r3, [r3, #4]
 8010fc6:	b10b      	cbz	r3, 8010fcc <_free_r+0x4c>
 8010fc8:	42a3      	cmp	r3, r4
 8010fca:	d9fa      	bls.n	8010fc2 <_free_r+0x42>
 8010fcc:	6811      	ldr	r1, [r2, #0]
 8010fce:	1850      	adds	r0, r2, r1
 8010fd0:	42a0      	cmp	r0, r4
 8010fd2:	d10b      	bne.n	8010fec <_free_r+0x6c>
 8010fd4:	6820      	ldr	r0, [r4, #0]
 8010fd6:	4401      	add	r1, r0
 8010fd8:	1850      	adds	r0, r2, r1
 8010fda:	4283      	cmp	r3, r0
 8010fdc:	6011      	str	r1, [r2, #0]
 8010fde:	d1e0      	bne.n	8010fa2 <_free_r+0x22>
 8010fe0:	6818      	ldr	r0, [r3, #0]
 8010fe2:	685b      	ldr	r3, [r3, #4]
 8010fe4:	6053      	str	r3, [r2, #4]
 8010fe6:	4408      	add	r0, r1
 8010fe8:	6010      	str	r0, [r2, #0]
 8010fea:	e7da      	b.n	8010fa2 <_free_r+0x22>
 8010fec:	d902      	bls.n	8010ff4 <_free_r+0x74>
 8010fee:	230c      	movs	r3, #12
 8010ff0:	602b      	str	r3, [r5, #0]
 8010ff2:	e7d6      	b.n	8010fa2 <_free_r+0x22>
 8010ff4:	6820      	ldr	r0, [r4, #0]
 8010ff6:	1821      	adds	r1, r4, r0
 8010ff8:	428b      	cmp	r3, r1
 8010ffa:	bf04      	itt	eq
 8010ffc:	6819      	ldreq	r1, [r3, #0]
 8010ffe:	685b      	ldreq	r3, [r3, #4]
 8011000:	6063      	str	r3, [r4, #4]
 8011002:	bf04      	itt	eq
 8011004:	1809      	addeq	r1, r1, r0
 8011006:	6021      	streq	r1, [r4, #0]
 8011008:	6054      	str	r4, [r2, #4]
 801100a:	e7ca      	b.n	8010fa2 <_free_r+0x22>
 801100c:	bd38      	pop	{r3, r4, r5, pc}
 801100e:	bf00      	nop
 8011010:	20005ba0 	.word	0x20005ba0

08011014 <malloc>:
 8011014:	4b02      	ldr	r3, [pc, #8]	@ (8011020 <malloc+0xc>)
 8011016:	4601      	mov	r1, r0
 8011018:	6818      	ldr	r0, [r3, #0]
 801101a:	f000 b825 	b.w	8011068 <_malloc_r>
 801101e:	bf00      	nop
 8011020:	20000140 	.word	0x20000140

08011024 <sbrk_aligned>:
 8011024:	b570      	push	{r4, r5, r6, lr}
 8011026:	4e0f      	ldr	r6, [pc, #60]	@ (8011064 <sbrk_aligned+0x40>)
 8011028:	460c      	mov	r4, r1
 801102a:	6831      	ldr	r1, [r6, #0]
 801102c:	4605      	mov	r5, r0
 801102e:	b911      	cbnz	r1, 8011036 <sbrk_aligned+0x12>
 8011030:	f001 fd90 	bl	8012b54 <_sbrk_r>
 8011034:	6030      	str	r0, [r6, #0]
 8011036:	4621      	mov	r1, r4
 8011038:	4628      	mov	r0, r5
 801103a:	f001 fd8b 	bl	8012b54 <_sbrk_r>
 801103e:	1c43      	adds	r3, r0, #1
 8011040:	d103      	bne.n	801104a <sbrk_aligned+0x26>
 8011042:	f04f 34ff 	mov.w	r4, #4294967295
 8011046:	4620      	mov	r0, r4
 8011048:	bd70      	pop	{r4, r5, r6, pc}
 801104a:	1cc4      	adds	r4, r0, #3
 801104c:	f024 0403 	bic.w	r4, r4, #3
 8011050:	42a0      	cmp	r0, r4
 8011052:	d0f8      	beq.n	8011046 <sbrk_aligned+0x22>
 8011054:	1a21      	subs	r1, r4, r0
 8011056:	4628      	mov	r0, r5
 8011058:	f001 fd7c 	bl	8012b54 <_sbrk_r>
 801105c:	3001      	adds	r0, #1
 801105e:	d1f2      	bne.n	8011046 <sbrk_aligned+0x22>
 8011060:	e7ef      	b.n	8011042 <sbrk_aligned+0x1e>
 8011062:	bf00      	nop
 8011064:	20005b9c 	.word	0x20005b9c

08011068 <_malloc_r>:
 8011068:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801106c:	1ccd      	adds	r5, r1, #3
 801106e:	f025 0503 	bic.w	r5, r5, #3
 8011072:	3508      	adds	r5, #8
 8011074:	2d0c      	cmp	r5, #12
 8011076:	bf38      	it	cc
 8011078:	250c      	movcc	r5, #12
 801107a:	2d00      	cmp	r5, #0
 801107c:	4606      	mov	r6, r0
 801107e:	db01      	blt.n	8011084 <_malloc_r+0x1c>
 8011080:	42a9      	cmp	r1, r5
 8011082:	d904      	bls.n	801108e <_malloc_r+0x26>
 8011084:	230c      	movs	r3, #12
 8011086:	6033      	str	r3, [r6, #0]
 8011088:	2000      	movs	r0, #0
 801108a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801108e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8011164 <_malloc_r+0xfc>
 8011092:	f000 f869 	bl	8011168 <__malloc_lock>
 8011096:	f8d8 3000 	ldr.w	r3, [r8]
 801109a:	461c      	mov	r4, r3
 801109c:	bb44      	cbnz	r4, 80110f0 <_malloc_r+0x88>
 801109e:	4629      	mov	r1, r5
 80110a0:	4630      	mov	r0, r6
 80110a2:	f7ff ffbf 	bl	8011024 <sbrk_aligned>
 80110a6:	1c43      	adds	r3, r0, #1
 80110a8:	4604      	mov	r4, r0
 80110aa:	d158      	bne.n	801115e <_malloc_r+0xf6>
 80110ac:	f8d8 4000 	ldr.w	r4, [r8]
 80110b0:	4627      	mov	r7, r4
 80110b2:	2f00      	cmp	r7, #0
 80110b4:	d143      	bne.n	801113e <_malloc_r+0xd6>
 80110b6:	2c00      	cmp	r4, #0
 80110b8:	d04b      	beq.n	8011152 <_malloc_r+0xea>
 80110ba:	6823      	ldr	r3, [r4, #0]
 80110bc:	4639      	mov	r1, r7
 80110be:	4630      	mov	r0, r6
 80110c0:	eb04 0903 	add.w	r9, r4, r3
 80110c4:	f001 fd46 	bl	8012b54 <_sbrk_r>
 80110c8:	4581      	cmp	r9, r0
 80110ca:	d142      	bne.n	8011152 <_malloc_r+0xea>
 80110cc:	6821      	ldr	r1, [r4, #0]
 80110ce:	1a6d      	subs	r5, r5, r1
 80110d0:	4629      	mov	r1, r5
 80110d2:	4630      	mov	r0, r6
 80110d4:	f7ff ffa6 	bl	8011024 <sbrk_aligned>
 80110d8:	3001      	adds	r0, #1
 80110da:	d03a      	beq.n	8011152 <_malloc_r+0xea>
 80110dc:	6823      	ldr	r3, [r4, #0]
 80110de:	442b      	add	r3, r5
 80110e0:	6023      	str	r3, [r4, #0]
 80110e2:	f8d8 3000 	ldr.w	r3, [r8]
 80110e6:	685a      	ldr	r2, [r3, #4]
 80110e8:	bb62      	cbnz	r2, 8011144 <_malloc_r+0xdc>
 80110ea:	f8c8 7000 	str.w	r7, [r8]
 80110ee:	e00f      	b.n	8011110 <_malloc_r+0xa8>
 80110f0:	6822      	ldr	r2, [r4, #0]
 80110f2:	1b52      	subs	r2, r2, r5
 80110f4:	d420      	bmi.n	8011138 <_malloc_r+0xd0>
 80110f6:	2a0b      	cmp	r2, #11
 80110f8:	d917      	bls.n	801112a <_malloc_r+0xc2>
 80110fa:	1961      	adds	r1, r4, r5
 80110fc:	42a3      	cmp	r3, r4
 80110fe:	6025      	str	r5, [r4, #0]
 8011100:	bf18      	it	ne
 8011102:	6059      	strne	r1, [r3, #4]
 8011104:	6863      	ldr	r3, [r4, #4]
 8011106:	bf08      	it	eq
 8011108:	f8c8 1000 	streq.w	r1, [r8]
 801110c:	5162      	str	r2, [r4, r5]
 801110e:	604b      	str	r3, [r1, #4]
 8011110:	4630      	mov	r0, r6
 8011112:	f000 f82f 	bl	8011174 <__malloc_unlock>
 8011116:	f104 000b 	add.w	r0, r4, #11
 801111a:	1d23      	adds	r3, r4, #4
 801111c:	f020 0007 	bic.w	r0, r0, #7
 8011120:	1ac2      	subs	r2, r0, r3
 8011122:	bf1c      	itt	ne
 8011124:	1a1b      	subne	r3, r3, r0
 8011126:	50a3      	strne	r3, [r4, r2]
 8011128:	e7af      	b.n	801108a <_malloc_r+0x22>
 801112a:	6862      	ldr	r2, [r4, #4]
 801112c:	42a3      	cmp	r3, r4
 801112e:	bf0c      	ite	eq
 8011130:	f8c8 2000 	streq.w	r2, [r8]
 8011134:	605a      	strne	r2, [r3, #4]
 8011136:	e7eb      	b.n	8011110 <_malloc_r+0xa8>
 8011138:	4623      	mov	r3, r4
 801113a:	6864      	ldr	r4, [r4, #4]
 801113c:	e7ae      	b.n	801109c <_malloc_r+0x34>
 801113e:	463c      	mov	r4, r7
 8011140:	687f      	ldr	r7, [r7, #4]
 8011142:	e7b6      	b.n	80110b2 <_malloc_r+0x4a>
 8011144:	461a      	mov	r2, r3
 8011146:	685b      	ldr	r3, [r3, #4]
 8011148:	42a3      	cmp	r3, r4
 801114a:	d1fb      	bne.n	8011144 <_malloc_r+0xdc>
 801114c:	2300      	movs	r3, #0
 801114e:	6053      	str	r3, [r2, #4]
 8011150:	e7de      	b.n	8011110 <_malloc_r+0xa8>
 8011152:	230c      	movs	r3, #12
 8011154:	6033      	str	r3, [r6, #0]
 8011156:	4630      	mov	r0, r6
 8011158:	f000 f80c 	bl	8011174 <__malloc_unlock>
 801115c:	e794      	b.n	8011088 <_malloc_r+0x20>
 801115e:	6005      	str	r5, [r0, #0]
 8011160:	e7d6      	b.n	8011110 <_malloc_r+0xa8>
 8011162:	bf00      	nop
 8011164:	20005ba0 	.word	0x20005ba0

08011168 <__malloc_lock>:
 8011168:	4801      	ldr	r0, [pc, #4]	@ (8011170 <__malloc_lock+0x8>)
 801116a:	f7ff b8a6 	b.w	80102ba <__retarget_lock_acquire_recursive>
 801116e:	bf00      	nop
 8011170:	20005b98 	.word	0x20005b98

08011174 <__malloc_unlock>:
 8011174:	4801      	ldr	r0, [pc, #4]	@ (801117c <__malloc_unlock+0x8>)
 8011176:	f7ff b8a1 	b.w	80102bc <__retarget_lock_release_recursive>
 801117a:	bf00      	nop
 801117c:	20005b98 	.word	0x20005b98

08011180 <_Balloc>:
 8011180:	b570      	push	{r4, r5, r6, lr}
 8011182:	69c6      	ldr	r6, [r0, #28]
 8011184:	4604      	mov	r4, r0
 8011186:	460d      	mov	r5, r1
 8011188:	b976      	cbnz	r6, 80111a8 <_Balloc+0x28>
 801118a:	2010      	movs	r0, #16
 801118c:	f7ff ff42 	bl	8011014 <malloc>
 8011190:	4602      	mov	r2, r0
 8011192:	61e0      	str	r0, [r4, #28]
 8011194:	b920      	cbnz	r0, 80111a0 <_Balloc+0x20>
 8011196:	4b18      	ldr	r3, [pc, #96]	@ (80111f8 <_Balloc+0x78>)
 8011198:	4818      	ldr	r0, [pc, #96]	@ (80111fc <_Balloc+0x7c>)
 801119a:	216b      	movs	r1, #107	@ 0x6b
 801119c:	f001 fcf4 	bl	8012b88 <__assert_func>
 80111a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80111a4:	6006      	str	r6, [r0, #0]
 80111a6:	60c6      	str	r6, [r0, #12]
 80111a8:	69e6      	ldr	r6, [r4, #28]
 80111aa:	68f3      	ldr	r3, [r6, #12]
 80111ac:	b183      	cbz	r3, 80111d0 <_Balloc+0x50>
 80111ae:	69e3      	ldr	r3, [r4, #28]
 80111b0:	68db      	ldr	r3, [r3, #12]
 80111b2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80111b6:	b9b8      	cbnz	r0, 80111e8 <_Balloc+0x68>
 80111b8:	2101      	movs	r1, #1
 80111ba:	fa01 f605 	lsl.w	r6, r1, r5
 80111be:	1d72      	adds	r2, r6, #5
 80111c0:	0092      	lsls	r2, r2, #2
 80111c2:	4620      	mov	r0, r4
 80111c4:	f001 fcfe 	bl	8012bc4 <_calloc_r>
 80111c8:	b160      	cbz	r0, 80111e4 <_Balloc+0x64>
 80111ca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80111ce:	e00e      	b.n	80111ee <_Balloc+0x6e>
 80111d0:	2221      	movs	r2, #33	@ 0x21
 80111d2:	2104      	movs	r1, #4
 80111d4:	4620      	mov	r0, r4
 80111d6:	f001 fcf5 	bl	8012bc4 <_calloc_r>
 80111da:	69e3      	ldr	r3, [r4, #28]
 80111dc:	60f0      	str	r0, [r6, #12]
 80111de:	68db      	ldr	r3, [r3, #12]
 80111e0:	2b00      	cmp	r3, #0
 80111e2:	d1e4      	bne.n	80111ae <_Balloc+0x2e>
 80111e4:	2000      	movs	r0, #0
 80111e6:	bd70      	pop	{r4, r5, r6, pc}
 80111e8:	6802      	ldr	r2, [r0, #0]
 80111ea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80111ee:	2300      	movs	r3, #0
 80111f0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80111f4:	e7f7      	b.n	80111e6 <_Balloc+0x66>
 80111f6:	bf00      	nop
 80111f8:	08018299 	.word	0x08018299
 80111fc:	08018319 	.word	0x08018319

08011200 <_Bfree>:
 8011200:	b570      	push	{r4, r5, r6, lr}
 8011202:	69c6      	ldr	r6, [r0, #28]
 8011204:	4605      	mov	r5, r0
 8011206:	460c      	mov	r4, r1
 8011208:	b976      	cbnz	r6, 8011228 <_Bfree+0x28>
 801120a:	2010      	movs	r0, #16
 801120c:	f7ff ff02 	bl	8011014 <malloc>
 8011210:	4602      	mov	r2, r0
 8011212:	61e8      	str	r0, [r5, #28]
 8011214:	b920      	cbnz	r0, 8011220 <_Bfree+0x20>
 8011216:	4b09      	ldr	r3, [pc, #36]	@ (801123c <_Bfree+0x3c>)
 8011218:	4809      	ldr	r0, [pc, #36]	@ (8011240 <_Bfree+0x40>)
 801121a:	218f      	movs	r1, #143	@ 0x8f
 801121c:	f001 fcb4 	bl	8012b88 <__assert_func>
 8011220:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011224:	6006      	str	r6, [r0, #0]
 8011226:	60c6      	str	r6, [r0, #12]
 8011228:	b13c      	cbz	r4, 801123a <_Bfree+0x3a>
 801122a:	69eb      	ldr	r3, [r5, #28]
 801122c:	6862      	ldr	r2, [r4, #4]
 801122e:	68db      	ldr	r3, [r3, #12]
 8011230:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011234:	6021      	str	r1, [r4, #0]
 8011236:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801123a:	bd70      	pop	{r4, r5, r6, pc}
 801123c:	08018299 	.word	0x08018299
 8011240:	08018319 	.word	0x08018319

08011244 <__multadd>:
 8011244:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011248:	690d      	ldr	r5, [r1, #16]
 801124a:	4607      	mov	r7, r0
 801124c:	460c      	mov	r4, r1
 801124e:	461e      	mov	r6, r3
 8011250:	f101 0c14 	add.w	ip, r1, #20
 8011254:	2000      	movs	r0, #0
 8011256:	f8dc 3000 	ldr.w	r3, [ip]
 801125a:	b299      	uxth	r1, r3
 801125c:	fb02 6101 	mla	r1, r2, r1, r6
 8011260:	0c1e      	lsrs	r6, r3, #16
 8011262:	0c0b      	lsrs	r3, r1, #16
 8011264:	fb02 3306 	mla	r3, r2, r6, r3
 8011268:	b289      	uxth	r1, r1
 801126a:	3001      	adds	r0, #1
 801126c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8011270:	4285      	cmp	r5, r0
 8011272:	f84c 1b04 	str.w	r1, [ip], #4
 8011276:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801127a:	dcec      	bgt.n	8011256 <__multadd+0x12>
 801127c:	b30e      	cbz	r6, 80112c2 <__multadd+0x7e>
 801127e:	68a3      	ldr	r3, [r4, #8]
 8011280:	42ab      	cmp	r3, r5
 8011282:	dc19      	bgt.n	80112b8 <__multadd+0x74>
 8011284:	6861      	ldr	r1, [r4, #4]
 8011286:	4638      	mov	r0, r7
 8011288:	3101      	adds	r1, #1
 801128a:	f7ff ff79 	bl	8011180 <_Balloc>
 801128e:	4680      	mov	r8, r0
 8011290:	b928      	cbnz	r0, 801129e <__multadd+0x5a>
 8011292:	4602      	mov	r2, r0
 8011294:	4b0c      	ldr	r3, [pc, #48]	@ (80112c8 <__multadd+0x84>)
 8011296:	480d      	ldr	r0, [pc, #52]	@ (80112cc <__multadd+0x88>)
 8011298:	21ba      	movs	r1, #186	@ 0xba
 801129a:	f001 fc75 	bl	8012b88 <__assert_func>
 801129e:	6922      	ldr	r2, [r4, #16]
 80112a0:	3202      	adds	r2, #2
 80112a2:	f104 010c 	add.w	r1, r4, #12
 80112a6:	0092      	lsls	r2, r2, #2
 80112a8:	300c      	adds	r0, #12
 80112aa:	f7ff f808 	bl	80102be <memcpy>
 80112ae:	4621      	mov	r1, r4
 80112b0:	4638      	mov	r0, r7
 80112b2:	f7ff ffa5 	bl	8011200 <_Bfree>
 80112b6:	4644      	mov	r4, r8
 80112b8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80112bc:	3501      	adds	r5, #1
 80112be:	615e      	str	r6, [r3, #20]
 80112c0:	6125      	str	r5, [r4, #16]
 80112c2:	4620      	mov	r0, r4
 80112c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80112c8:	08018308 	.word	0x08018308
 80112cc:	08018319 	.word	0x08018319

080112d0 <__s2b>:
 80112d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80112d4:	460c      	mov	r4, r1
 80112d6:	4615      	mov	r5, r2
 80112d8:	461f      	mov	r7, r3
 80112da:	2209      	movs	r2, #9
 80112dc:	3308      	adds	r3, #8
 80112de:	4606      	mov	r6, r0
 80112e0:	fb93 f3f2 	sdiv	r3, r3, r2
 80112e4:	2100      	movs	r1, #0
 80112e6:	2201      	movs	r2, #1
 80112e8:	429a      	cmp	r2, r3
 80112ea:	db09      	blt.n	8011300 <__s2b+0x30>
 80112ec:	4630      	mov	r0, r6
 80112ee:	f7ff ff47 	bl	8011180 <_Balloc>
 80112f2:	b940      	cbnz	r0, 8011306 <__s2b+0x36>
 80112f4:	4602      	mov	r2, r0
 80112f6:	4b19      	ldr	r3, [pc, #100]	@ (801135c <__s2b+0x8c>)
 80112f8:	4819      	ldr	r0, [pc, #100]	@ (8011360 <__s2b+0x90>)
 80112fa:	21d3      	movs	r1, #211	@ 0xd3
 80112fc:	f001 fc44 	bl	8012b88 <__assert_func>
 8011300:	0052      	lsls	r2, r2, #1
 8011302:	3101      	adds	r1, #1
 8011304:	e7f0      	b.n	80112e8 <__s2b+0x18>
 8011306:	9b08      	ldr	r3, [sp, #32]
 8011308:	6143      	str	r3, [r0, #20]
 801130a:	2d09      	cmp	r5, #9
 801130c:	f04f 0301 	mov.w	r3, #1
 8011310:	6103      	str	r3, [r0, #16]
 8011312:	dd16      	ble.n	8011342 <__s2b+0x72>
 8011314:	f104 0909 	add.w	r9, r4, #9
 8011318:	46c8      	mov	r8, r9
 801131a:	442c      	add	r4, r5
 801131c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8011320:	4601      	mov	r1, r0
 8011322:	3b30      	subs	r3, #48	@ 0x30
 8011324:	220a      	movs	r2, #10
 8011326:	4630      	mov	r0, r6
 8011328:	f7ff ff8c 	bl	8011244 <__multadd>
 801132c:	45a0      	cmp	r8, r4
 801132e:	d1f5      	bne.n	801131c <__s2b+0x4c>
 8011330:	f1a5 0408 	sub.w	r4, r5, #8
 8011334:	444c      	add	r4, r9
 8011336:	1b2d      	subs	r5, r5, r4
 8011338:	1963      	adds	r3, r4, r5
 801133a:	42bb      	cmp	r3, r7
 801133c:	db04      	blt.n	8011348 <__s2b+0x78>
 801133e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011342:	340a      	adds	r4, #10
 8011344:	2509      	movs	r5, #9
 8011346:	e7f6      	b.n	8011336 <__s2b+0x66>
 8011348:	f814 3b01 	ldrb.w	r3, [r4], #1
 801134c:	4601      	mov	r1, r0
 801134e:	3b30      	subs	r3, #48	@ 0x30
 8011350:	220a      	movs	r2, #10
 8011352:	4630      	mov	r0, r6
 8011354:	f7ff ff76 	bl	8011244 <__multadd>
 8011358:	e7ee      	b.n	8011338 <__s2b+0x68>
 801135a:	bf00      	nop
 801135c:	08018308 	.word	0x08018308
 8011360:	08018319 	.word	0x08018319

08011364 <__hi0bits>:
 8011364:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8011368:	4603      	mov	r3, r0
 801136a:	bf36      	itet	cc
 801136c:	0403      	lslcc	r3, r0, #16
 801136e:	2000      	movcs	r0, #0
 8011370:	2010      	movcc	r0, #16
 8011372:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8011376:	bf3c      	itt	cc
 8011378:	021b      	lslcc	r3, r3, #8
 801137a:	3008      	addcc	r0, #8
 801137c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8011380:	bf3c      	itt	cc
 8011382:	011b      	lslcc	r3, r3, #4
 8011384:	3004      	addcc	r0, #4
 8011386:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801138a:	bf3c      	itt	cc
 801138c:	009b      	lslcc	r3, r3, #2
 801138e:	3002      	addcc	r0, #2
 8011390:	2b00      	cmp	r3, #0
 8011392:	db05      	blt.n	80113a0 <__hi0bits+0x3c>
 8011394:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8011398:	f100 0001 	add.w	r0, r0, #1
 801139c:	bf08      	it	eq
 801139e:	2020      	moveq	r0, #32
 80113a0:	4770      	bx	lr

080113a2 <__lo0bits>:
 80113a2:	6803      	ldr	r3, [r0, #0]
 80113a4:	4602      	mov	r2, r0
 80113a6:	f013 0007 	ands.w	r0, r3, #7
 80113aa:	d00b      	beq.n	80113c4 <__lo0bits+0x22>
 80113ac:	07d9      	lsls	r1, r3, #31
 80113ae:	d421      	bmi.n	80113f4 <__lo0bits+0x52>
 80113b0:	0798      	lsls	r0, r3, #30
 80113b2:	bf49      	itett	mi
 80113b4:	085b      	lsrmi	r3, r3, #1
 80113b6:	089b      	lsrpl	r3, r3, #2
 80113b8:	2001      	movmi	r0, #1
 80113ba:	6013      	strmi	r3, [r2, #0]
 80113bc:	bf5c      	itt	pl
 80113be:	6013      	strpl	r3, [r2, #0]
 80113c0:	2002      	movpl	r0, #2
 80113c2:	4770      	bx	lr
 80113c4:	b299      	uxth	r1, r3
 80113c6:	b909      	cbnz	r1, 80113cc <__lo0bits+0x2a>
 80113c8:	0c1b      	lsrs	r3, r3, #16
 80113ca:	2010      	movs	r0, #16
 80113cc:	b2d9      	uxtb	r1, r3
 80113ce:	b909      	cbnz	r1, 80113d4 <__lo0bits+0x32>
 80113d0:	3008      	adds	r0, #8
 80113d2:	0a1b      	lsrs	r3, r3, #8
 80113d4:	0719      	lsls	r1, r3, #28
 80113d6:	bf04      	itt	eq
 80113d8:	091b      	lsreq	r3, r3, #4
 80113da:	3004      	addeq	r0, #4
 80113dc:	0799      	lsls	r1, r3, #30
 80113de:	bf04      	itt	eq
 80113e0:	089b      	lsreq	r3, r3, #2
 80113e2:	3002      	addeq	r0, #2
 80113e4:	07d9      	lsls	r1, r3, #31
 80113e6:	d403      	bmi.n	80113f0 <__lo0bits+0x4e>
 80113e8:	085b      	lsrs	r3, r3, #1
 80113ea:	f100 0001 	add.w	r0, r0, #1
 80113ee:	d003      	beq.n	80113f8 <__lo0bits+0x56>
 80113f0:	6013      	str	r3, [r2, #0]
 80113f2:	4770      	bx	lr
 80113f4:	2000      	movs	r0, #0
 80113f6:	4770      	bx	lr
 80113f8:	2020      	movs	r0, #32
 80113fa:	4770      	bx	lr

080113fc <__i2b>:
 80113fc:	b510      	push	{r4, lr}
 80113fe:	460c      	mov	r4, r1
 8011400:	2101      	movs	r1, #1
 8011402:	f7ff febd 	bl	8011180 <_Balloc>
 8011406:	4602      	mov	r2, r0
 8011408:	b928      	cbnz	r0, 8011416 <__i2b+0x1a>
 801140a:	4b05      	ldr	r3, [pc, #20]	@ (8011420 <__i2b+0x24>)
 801140c:	4805      	ldr	r0, [pc, #20]	@ (8011424 <__i2b+0x28>)
 801140e:	f240 1145 	movw	r1, #325	@ 0x145
 8011412:	f001 fbb9 	bl	8012b88 <__assert_func>
 8011416:	2301      	movs	r3, #1
 8011418:	6144      	str	r4, [r0, #20]
 801141a:	6103      	str	r3, [r0, #16]
 801141c:	bd10      	pop	{r4, pc}
 801141e:	bf00      	nop
 8011420:	08018308 	.word	0x08018308
 8011424:	08018319 	.word	0x08018319

08011428 <__multiply>:
 8011428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801142c:	4614      	mov	r4, r2
 801142e:	690a      	ldr	r2, [r1, #16]
 8011430:	6923      	ldr	r3, [r4, #16]
 8011432:	429a      	cmp	r2, r3
 8011434:	bfa8      	it	ge
 8011436:	4623      	movge	r3, r4
 8011438:	460f      	mov	r7, r1
 801143a:	bfa4      	itt	ge
 801143c:	460c      	movge	r4, r1
 801143e:	461f      	movge	r7, r3
 8011440:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8011444:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8011448:	68a3      	ldr	r3, [r4, #8]
 801144a:	6861      	ldr	r1, [r4, #4]
 801144c:	eb0a 0609 	add.w	r6, sl, r9
 8011450:	42b3      	cmp	r3, r6
 8011452:	b085      	sub	sp, #20
 8011454:	bfb8      	it	lt
 8011456:	3101      	addlt	r1, #1
 8011458:	f7ff fe92 	bl	8011180 <_Balloc>
 801145c:	b930      	cbnz	r0, 801146c <__multiply+0x44>
 801145e:	4602      	mov	r2, r0
 8011460:	4b44      	ldr	r3, [pc, #272]	@ (8011574 <__multiply+0x14c>)
 8011462:	4845      	ldr	r0, [pc, #276]	@ (8011578 <__multiply+0x150>)
 8011464:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8011468:	f001 fb8e 	bl	8012b88 <__assert_func>
 801146c:	f100 0514 	add.w	r5, r0, #20
 8011470:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8011474:	462b      	mov	r3, r5
 8011476:	2200      	movs	r2, #0
 8011478:	4543      	cmp	r3, r8
 801147a:	d321      	bcc.n	80114c0 <__multiply+0x98>
 801147c:	f107 0114 	add.w	r1, r7, #20
 8011480:	f104 0214 	add.w	r2, r4, #20
 8011484:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8011488:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 801148c:	9302      	str	r3, [sp, #8]
 801148e:	1b13      	subs	r3, r2, r4
 8011490:	3b15      	subs	r3, #21
 8011492:	f023 0303 	bic.w	r3, r3, #3
 8011496:	3304      	adds	r3, #4
 8011498:	f104 0715 	add.w	r7, r4, #21
 801149c:	42ba      	cmp	r2, r7
 801149e:	bf38      	it	cc
 80114a0:	2304      	movcc	r3, #4
 80114a2:	9301      	str	r3, [sp, #4]
 80114a4:	9b02      	ldr	r3, [sp, #8]
 80114a6:	9103      	str	r1, [sp, #12]
 80114a8:	428b      	cmp	r3, r1
 80114aa:	d80c      	bhi.n	80114c6 <__multiply+0x9e>
 80114ac:	2e00      	cmp	r6, #0
 80114ae:	dd03      	ble.n	80114b8 <__multiply+0x90>
 80114b0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80114b4:	2b00      	cmp	r3, #0
 80114b6:	d05b      	beq.n	8011570 <__multiply+0x148>
 80114b8:	6106      	str	r6, [r0, #16]
 80114ba:	b005      	add	sp, #20
 80114bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80114c0:	f843 2b04 	str.w	r2, [r3], #4
 80114c4:	e7d8      	b.n	8011478 <__multiply+0x50>
 80114c6:	f8b1 a000 	ldrh.w	sl, [r1]
 80114ca:	f1ba 0f00 	cmp.w	sl, #0
 80114ce:	d024      	beq.n	801151a <__multiply+0xf2>
 80114d0:	f104 0e14 	add.w	lr, r4, #20
 80114d4:	46a9      	mov	r9, r5
 80114d6:	f04f 0c00 	mov.w	ip, #0
 80114da:	f85e 7b04 	ldr.w	r7, [lr], #4
 80114de:	f8d9 3000 	ldr.w	r3, [r9]
 80114e2:	fa1f fb87 	uxth.w	fp, r7
 80114e6:	b29b      	uxth	r3, r3
 80114e8:	fb0a 330b 	mla	r3, sl, fp, r3
 80114ec:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80114f0:	f8d9 7000 	ldr.w	r7, [r9]
 80114f4:	4463      	add	r3, ip
 80114f6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80114fa:	fb0a c70b 	mla	r7, sl, fp, ip
 80114fe:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8011502:	b29b      	uxth	r3, r3
 8011504:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8011508:	4572      	cmp	r2, lr
 801150a:	f849 3b04 	str.w	r3, [r9], #4
 801150e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8011512:	d8e2      	bhi.n	80114da <__multiply+0xb2>
 8011514:	9b01      	ldr	r3, [sp, #4]
 8011516:	f845 c003 	str.w	ip, [r5, r3]
 801151a:	9b03      	ldr	r3, [sp, #12]
 801151c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8011520:	3104      	adds	r1, #4
 8011522:	f1b9 0f00 	cmp.w	r9, #0
 8011526:	d021      	beq.n	801156c <__multiply+0x144>
 8011528:	682b      	ldr	r3, [r5, #0]
 801152a:	f104 0c14 	add.w	ip, r4, #20
 801152e:	46ae      	mov	lr, r5
 8011530:	f04f 0a00 	mov.w	sl, #0
 8011534:	f8bc b000 	ldrh.w	fp, [ip]
 8011538:	f8be 7002 	ldrh.w	r7, [lr, #2]
 801153c:	fb09 770b 	mla	r7, r9, fp, r7
 8011540:	4457      	add	r7, sl
 8011542:	b29b      	uxth	r3, r3
 8011544:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8011548:	f84e 3b04 	str.w	r3, [lr], #4
 801154c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8011550:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011554:	f8be 3000 	ldrh.w	r3, [lr]
 8011558:	fb09 330a 	mla	r3, r9, sl, r3
 801155c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8011560:	4562      	cmp	r2, ip
 8011562:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011566:	d8e5      	bhi.n	8011534 <__multiply+0x10c>
 8011568:	9f01      	ldr	r7, [sp, #4]
 801156a:	51eb      	str	r3, [r5, r7]
 801156c:	3504      	adds	r5, #4
 801156e:	e799      	b.n	80114a4 <__multiply+0x7c>
 8011570:	3e01      	subs	r6, #1
 8011572:	e79b      	b.n	80114ac <__multiply+0x84>
 8011574:	08018308 	.word	0x08018308
 8011578:	08018319 	.word	0x08018319

0801157c <__pow5mult>:
 801157c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011580:	4615      	mov	r5, r2
 8011582:	f012 0203 	ands.w	r2, r2, #3
 8011586:	4607      	mov	r7, r0
 8011588:	460e      	mov	r6, r1
 801158a:	d007      	beq.n	801159c <__pow5mult+0x20>
 801158c:	4c25      	ldr	r4, [pc, #148]	@ (8011624 <__pow5mult+0xa8>)
 801158e:	3a01      	subs	r2, #1
 8011590:	2300      	movs	r3, #0
 8011592:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011596:	f7ff fe55 	bl	8011244 <__multadd>
 801159a:	4606      	mov	r6, r0
 801159c:	10ad      	asrs	r5, r5, #2
 801159e:	d03d      	beq.n	801161c <__pow5mult+0xa0>
 80115a0:	69fc      	ldr	r4, [r7, #28]
 80115a2:	b97c      	cbnz	r4, 80115c4 <__pow5mult+0x48>
 80115a4:	2010      	movs	r0, #16
 80115a6:	f7ff fd35 	bl	8011014 <malloc>
 80115aa:	4602      	mov	r2, r0
 80115ac:	61f8      	str	r0, [r7, #28]
 80115ae:	b928      	cbnz	r0, 80115bc <__pow5mult+0x40>
 80115b0:	4b1d      	ldr	r3, [pc, #116]	@ (8011628 <__pow5mult+0xac>)
 80115b2:	481e      	ldr	r0, [pc, #120]	@ (801162c <__pow5mult+0xb0>)
 80115b4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80115b8:	f001 fae6 	bl	8012b88 <__assert_func>
 80115bc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80115c0:	6004      	str	r4, [r0, #0]
 80115c2:	60c4      	str	r4, [r0, #12]
 80115c4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80115c8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80115cc:	b94c      	cbnz	r4, 80115e2 <__pow5mult+0x66>
 80115ce:	f240 2171 	movw	r1, #625	@ 0x271
 80115d2:	4638      	mov	r0, r7
 80115d4:	f7ff ff12 	bl	80113fc <__i2b>
 80115d8:	2300      	movs	r3, #0
 80115da:	f8c8 0008 	str.w	r0, [r8, #8]
 80115de:	4604      	mov	r4, r0
 80115e0:	6003      	str	r3, [r0, #0]
 80115e2:	f04f 0900 	mov.w	r9, #0
 80115e6:	07eb      	lsls	r3, r5, #31
 80115e8:	d50a      	bpl.n	8011600 <__pow5mult+0x84>
 80115ea:	4631      	mov	r1, r6
 80115ec:	4622      	mov	r2, r4
 80115ee:	4638      	mov	r0, r7
 80115f0:	f7ff ff1a 	bl	8011428 <__multiply>
 80115f4:	4631      	mov	r1, r6
 80115f6:	4680      	mov	r8, r0
 80115f8:	4638      	mov	r0, r7
 80115fa:	f7ff fe01 	bl	8011200 <_Bfree>
 80115fe:	4646      	mov	r6, r8
 8011600:	106d      	asrs	r5, r5, #1
 8011602:	d00b      	beq.n	801161c <__pow5mult+0xa0>
 8011604:	6820      	ldr	r0, [r4, #0]
 8011606:	b938      	cbnz	r0, 8011618 <__pow5mult+0x9c>
 8011608:	4622      	mov	r2, r4
 801160a:	4621      	mov	r1, r4
 801160c:	4638      	mov	r0, r7
 801160e:	f7ff ff0b 	bl	8011428 <__multiply>
 8011612:	6020      	str	r0, [r4, #0]
 8011614:	f8c0 9000 	str.w	r9, [r0]
 8011618:	4604      	mov	r4, r0
 801161a:	e7e4      	b.n	80115e6 <__pow5mult+0x6a>
 801161c:	4630      	mov	r0, r6
 801161e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011622:	bf00      	nop
 8011624:	08018374 	.word	0x08018374
 8011628:	08018299 	.word	0x08018299
 801162c:	08018319 	.word	0x08018319

08011630 <__lshift>:
 8011630:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011634:	460c      	mov	r4, r1
 8011636:	6849      	ldr	r1, [r1, #4]
 8011638:	6923      	ldr	r3, [r4, #16]
 801163a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801163e:	68a3      	ldr	r3, [r4, #8]
 8011640:	4607      	mov	r7, r0
 8011642:	4691      	mov	r9, r2
 8011644:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011648:	f108 0601 	add.w	r6, r8, #1
 801164c:	42b3      	cmp	r3, r6
 801164e:	db0b      	blt.n	8011668 <__lshift+0x38>
 8011650:	4638      	mov	r0, r7
 8011652:	f7ff fd95 	bl	8011180 <_Balloc>
 8011656:	4605      	mov	r5, r0
 8011658:	b948      	cbnz	r0, 801166e <__lshift+0x3e>
 801165a:	4602      	mov	r2, r0
 801165c:	4b28      	ldr	r3, [pc, #160]	@ (8011700 <__lshift+0xd0>)
 801165e:	4829      	ldr	r0, [pc, #164]	@ (8011704 <__lshift+0xd4>)
 8011660:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8011664:	f001 fa90 	bl	8012b88 <__assert_func>
 8011668:	3101      	adds	r1, #1
 801166a:	005b      	lsls	r3, r3, #1
 801166c:	e7ee      	b.n	801164c <__lshift+0x1c>
 801166e:	2300      	movs	r3, #0
 8011670:	f100 0114 	add.w	r1, r0, #20
 8011674:	f100 0210 	add.w	r2, r0, #16
 8011678:	4618      	mov	r0, r3
 801167a:	4553      	cmp	r3, sl
 801167c:	db33      	blt.n	80116e6 <__lshift+0xb6>
 801167e:	6920      	ldr	r0, [r4, #16]
 8011680:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011684:	f104 0314 	add.w	r3, r4, #20
 8011688:	f019 091f 	ands.w	r9, r9, #31
 801168c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011690:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8011694:	d02b      	beq.n	80116ee <__lshift+0xbe>
 8011696:	f1c9 0e20 	rsb	lr, r9, #32
 801169a:	468a      	mov	sl, r1
 801169c:	2200      	movs	r2, #0
 801169e:	6818      	ldr	r0, [r3, #0]
 80116a0:	fa00 f009 	lsl.w	r0, r0, r9
 80116a4:	4310      	orrs	r0, r2
 80116a6:	f84a 0b04 	str.w	r0, [sl], #4
 80116aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80116ae:	459c      	cmp	ip, r3
 80116b0:	fa22 f20e 	lsr.w	r2, r2, lr
 80116b4:	d8f3      	bhi.n	801169e <__lshift+0x6e>
 80116b6:	ebac 0304 	sub.w	r3, ip, r4
 80116ba:	3b15      	subs	r3, #21
 80116bc:	f023 0303 	bic.w	r3, r3, #3
 80116c0:	3304      	adds	r3, #4
 80116c2:	f104 0015 	add.w	r0, r4, #21
 80116c6:	4584      	cmp	ip, r0
 80116c8:	bf38      	it	cc
 80116ca:	2304      	movcc	r3, #4
 80116cc:	50ca      	str	r2, [r1, r3]
 80116ce:	b10a      	cbz	r2, 80116d4 <__lshift+0xa4>
 80116d0:	f108 0602 	add.w	r6, r8, #2
 80116d4:	3e01      	subs	r6, #1
 80116d6:	4638      	mov	r0, r7
 80116d8:	612e      	str	r6, [r5, #16]
 80116da:	4621      	mov	r1, r4
 80116dc:	f7ff fd90 	bl	8011200 <_Bfree>
 80116e0:	4628      	mov	r0, r5
 80116e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80116e6:	f842 0f04 	str.w	r0, [r2, #4]!
 80116ea:	3301      	adds	r3, #1
 80116ec:	e7c5      	b.n	801167a <__lshift+0x4a>
 80116ee:	3904      	subs	r1, #4
 80116f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80116f4:	f841 2f04 	str.w	r2, [r1, #4]!
 80116f8:	459c      	cmp	ip, r3
 80116fa:	d8f9      	bhi.n	80116f0 <__lshift+0xc0>
 80116fc:	e7ea      	b.n	80116d4 <__lshift+0xa4>
 80116fe:	bf00      	nop
 8011700:	08018308 	.word	0x08018308
 8011704:	08018319 	.word	0x08018319

08011708 <__mcmp>:
 8011708:	690a      	ldr	r2, [r1, #16]
 801170a:	4603      	mov	r3, r0
 801170c:	6900      	ldr	r0, [r0, #16]
 801170e:	1a80      	subs	r0, r0, r2
 8011710:	b530      	push	{r4, r5, lr}
 8011712:	d10e      	bne.n	8011732 <__mcmp+0x2a>
 8011714:	3314      	adds	r3, #20
 8011716:	3114      	adds	r1, #20
 8011718:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801171c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8011720:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8011724:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8011728:	4295      	cmp	r5, r2
 801172a:	d003      	beq.n	8011734 <__mcmp+0x2c>
 801172c:	d205      	bcs.n	801173a <__mcmp+0x32>
 801172e:	f04f 30ff 	mov.w	r0, #4294967295
 8011732:	bd30      	pop	{r4, r5, pc}
 8011734:	42a3      	cmp	r3, r4
 8011736:	d3f3      	bcc.n	8011720 <__mcmp+0x18>
 8011738:	e7fb      	b.n	8011732 <__mcmp+0x2a>
 801173a:	2001      	movs	r0, #1
 801173c:	e7f9      	b.n	8011732 <__mcmp+0x2a>
	...

08011740 <__mdiff>:
 8011740:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011744:	4689      	mov	r9, r1
 8011746:	4606      	mov	r6, r0
 8011748:	4611      	mov	r1, r2
 801174a:	4648      	mov	r0, r9
 801174c:	4614      	mov	r4, r2
 801174e:	f7ff ffdb 	bl	8011708 <__mcmp>
 8011752:	1e05      	subs	r5, r0, #0
 8011754:	d112      	bne.n	801177c <__mdiff+0x3c>
 8011756:	4629      	mov	r1, r5
 8011758:	4630      	mov	r0, r6
 801175a:	f7ff fd11 	bl	8011180 <_Balloc>
 801175e:	4602      	mov	r2, r0
 8011760:	b928      	cbnz	r0, 801176e <__mdiff+0x2e>
 8011762:	4b3f      	ldr	r3, [pc, #252]	@ (8011860 <__mdiff+0x120>)
 8011764:	f240 2137 	movw	r1, #567	@ 0x237
 8011768:	483e      	ldr	r0, [pc, #248]	@ (8011864 <__mdiff+0x124>)
 801176a:	f001 fa0d 	bl	8012b88 <__assert_func>
 801176e:	2301      	movs	r3, #1
 8011770:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011774:	4610      	mov	r0, r2
 8011776:	b003      	add	sp, #12
 8011778:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801177c:	bfbc      	itt	lt
 801177e:	464b      	movlt	r3, r9
 8011780:	46a1      	movlt	r9, r4
 8011782:	4630      	mov	r0, r6
 8011784:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8011788:	bfba      	itte	lt
 801178a:	461c      	movlt	r4, r3
 801178c:	2501      	movlt	r5, #1
 801178e:	2500      	movge	r5, #0
 8011790:	f7ff fcf6 	bl	8011180 <_Balloc>
 8011794:	4602      	mov	r2, r0
 8011796:	b918      	cbnz	r0, 80117a0 <__mdiff+0x60>
 8011798:	4b31      	ldr	r3, [pc, #196]	@ (8011860 <__mdiff+0x120>)
 801179a:	f240 2145 	movw	r1, #581	@ 0x245
 801179e:	e7e3      	b.n	8011768 <__mdiff+0x28>
 80117a0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80117a4:	6926      	ldr	r6, [r4, #16]
 80117a6:	60c5      	str	r5, [r0, #12]
 80117a8:	f109 0310 	add.w	r3, r9, #16
 80117ac:	f109 0514 	add.w	r5, r9, #20
 80117b0:	f104 0e14 	add.w	lr, r4, #20
 80117b4:	f100 0b14 	add.w	fp, r0, #20
 80117b8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80117bc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80117c0:	9301      	str	r3, [sp, #4]
 80117c2:	46d9      	mov	r9, fp
 80117c4:	f04f 0c00 	mov.w	ip, #0
 80117c8:	9b01      	ldr	r3, [sp, #4]
 80117ca:	f85e 0b04 	ldr.w	r0, [lr], #4
 80117ce:	f853 af04 	ldr.w	sl, [r3, #4]!
 80117d2:	9301      	str	r3, [sp, #4]
 80117d4:	fa1f f38a 	uxth.w	r3, sl
 80117d8:	4619      	mov	r1, r3
 80117da:	b283      	uxth	r3, r0
 80117dc:	1acb      	subs	r3, r1, r3
 80117de:	0c00      	lsrs	r0, r0, #16
 80117e0:	4463      	add	r3, ip
 80117e2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80117e6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80117ea:	b29b      	uxth	r3, r3
 80117ec:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80117f0:	4576      	cmp	r6, lr
 80117f2:	f849 3b04 	str.w	r3, [r9], #4
 80117f6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80117fa:	d8e5      	bhi.n	80117c8 <__mdiff+0x88>
 80117fc:	1b33      	subs	r3, r6, r4
 80117fe:	3b15      	subs	r3, #21
 8011800:	f023 0303 	bic.w	r3, r3, #3
 8011804:	3415      	adds	r4, #21
 8011806:	3304      	adds	r3, #4
 8011808:	42a6      	cmp	r6, r4
 801180a:	bf38      	it	cc
 801180c:	2304      	movcc	r3, #4
 801180e:	441d      	add	r5, r3
 8011810:	445b      	add	r3, fp
 8011812:	461e      	mov	r6, r3
 8011814:	462c      	mov	r4, r5
 8011816:	4544      	cmp	r4, r8
 8011818:	d30e      	bcc.n	8011838 <__mdiff+0xf8>
 801181a:	f108 0103 	add.w	r1, r8, #3
 801181e:	1b49      	subs	r1, r1, r5
 8011820:	f021 0103 	bic.w	r1, r1, #3
 8011824:	3d03      	subs	r5, #3
 8011826:	45a8      	cmp	r8, r5
 8011828:	bf38      	it	cc
 801182a:	2100      	movcc	r1, #0
 801182c:	440b      	add	r3, r1
 801182e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011832:	b191      	cbz	r1, 801185a <__mdiff+0x11a>
 8011834:	6117      	str	r7, [r2, #16]
 8011836:	e79d      	b.n	8011774 <__mdiff+0x34>
 8011838:	f854 1b04 	ldr.w	r1, [r4], #4
 801183c:	46e6      	mov	lr, ip
 801183e:	0c08      	lsrs	r0, r1, #16
 8011840:	fa1c fc81 	uxtah	ip, ip, r1
 8011844:	4471      	add	r1, lr
 8011846:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801184a:	b289      	uxth	r1, r1
 801184c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8011850:	f846 1b04 	str.w	r1, [r6], #4
 8011854:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8011858:	e7dd      	b.n	8011816 <__mdiff+0xd6>
 801185a:	3f01      	subs	r7, #1
 801185c:	e7e7      	b.n	801182e <__mdiff+0xee>
 801185e:	bf00      	nop
 8011860:	08018308 	.word	0x08018308
 8011864:	08018319 	.word	0x08018319

08011868 <__ulp>:
 8011868:	b082      	sub	sp, #8
 801186a:	ed8d 0b00 	vstr	d0, [sp]
 801186e:	9a01      	ldr	r2, [sp, #4]
 8011870:	4b0f      	ldr	r3, [pc, #60]	@ (80118b0 <__ulp+0x48>)
 8011872:	4013      	ands	r3, r2
 8011874:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8011878:	2b00      	cmp	r3, #0
 801187a:	dc08      	bgt.n	801188e <__ulp+0x26>
 801187c:	425b      	negs	r3, r3
 801187e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8011882:	ea4f 5223 	mov.w	r2, r3, asr #20
 8011886:	da04      	bge.n	8011892 <__ulp+0x2a>
 8011888:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 801188c:	4113      	asrs	r3, r2
 801188e:	2200      	movs	r2, #0
 8011890:	e008      	b.n	80118a4 <__ulp+0x3c>
 8011892:	f1a2 0314 	sub.w	r3, r2, #20
 8011896:	2b1e      	cmp	r3, #30
 8011898:	bfda      	itte	le
 801189a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 801189e:	40da      	lsrle	r2, r3
 80118a0:	2201      	movgt	r2, #1
 80118a2:	2300      	movs	r3, #0
 80118a4:	4619      	mov	r1, r3
 80118a6:	4610      	mov	r0, r2
 80118a8:	ec41 0b10 	vmov	d0, r0, r1
 80118ac:	b002      	add	sp, #8
 80118ae:	4770      	bx	lr
 80118b0:	7ff00000 	.word	0x7ff00000

080118b4 <__b2d>:
 80118b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80118b8:	6906      	ldr	r6, [r0, #16]
 80118ba:	f100 0814 	add.w	r8, r0, #20
 80118be:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80118c2:	1f37      	subs	r7, r6, #4
 80118c4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80118c8:	4610      	mov	r0, r2
 80118ca:	f7ff fd4b 	bl	8011364 <__hi0bits>
 80118ce:	f1c0 0320 	rsb	r3, r0, #32
 80118d2:	280a      	cmp	r0, #10
 80118d4:	600b      	str	r3, [r1, #0]
 80118d6:	491b      	ldr	r1, [pc, #108]	@ (8011944 <__b2d+0x90>)
 80118d8:	dc15      	bgt.n	8011906 <__b2d+0x52>
 80118da:	f1c0 0c0b 	rsb	ip, r0, #11
 80118de:	fa22 f30c 	lsr.w	r3, r2, ip
 80118e2:	45b8      	cmp	r8, r7
 80118e4:	ea43 0501 	orr.w	r5, r3, r1
 80118e8:	bf34      	ite	cc
 80118ea:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80118ee:	2300      	movcs	r3, #0
 80118f0:	3015      	adds	r0, #21
 80118f2:	fa02 f000 	lsl.w	r0, r2, r0
 80118f6:	fa23 f30c 	lsr.w	r3, r3, ip
 80118fa:	4303      	orrs	r3, r0
 80118fc:	461c      	mov	r4, r3
 80118fe:	ec45 4b10 	vmov	d0, r4, r5
 8011902:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011906:	45b8      	cmp	r8, r7
 8011908:	bf3a      	itte	cc
 801190a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801190e:	f1a6 0708 	subcc.w	r7, r6, #8
 8011912:	2300      	movcs	r3, #0
 8011914:	380b      	subs	r0, #11
 8011916:	d012      	beq.n	801193e <__b2d+0x8a>
 8011918:	f1c0 0120 	rsb	r1, r0, #32
 801191c:	fa23 f401 	lsr.w	r4, r3, r1
 8011920:	4082      	lsls	r2, r0
 8011922:	4322      	orrs	r2, r4
 8011924:	4547      	cmp	r7, r8
 8011926:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 801192a:	bf8c      	ite	hi
 801192c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8011930:	2200      	movls	r2, #0
 8011932:	4083      	lsls	r3, r0
 8011934:	40ca      	lsrs	r2, r1
 8011936:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 801193a:	4313      	orrs	r3, r2
 801193c:	e7de      	b.n	80118fc <__b2d+0x48>
 801193e:	ea42 0501 	orr.w	r5, r2, r1
 8011942:	e7db      	b.n	80118fc <__b2d+0x48>
 8011944:	3ff00000 	.word	0x3ff00000

08011948 <__d2b>:
 8011948:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801194c:	460f      	mov	r7, r1
 801194e:	2101      	movs	r1, #1
 8011950:	ec59 8b10 	vmov	r8, r9, d0
 8011954:	4616      	mov	r6, r2
 8011956:	f7ff fc13 	bl	8011180 <_Balloc>
 801195a:	4604      	mov	r4, r0
 801195c:	b930      	cbnz	r0, 801196c <__d2b+0x24>
 801195e:	4602      	mov	r2, r0
 8011960:	4b23      	ldr	r3, [pc, #140]	@ (80119f0 <__d2b+0xa8>)
 8011962:	4824      	ldr	r0, [pc, #144]	@ (80119f4 <__d2b+0xac>)
 8011964:	f240 310f 	movw	r1, #783	@ 0x30f
 8011968:	f001 f90e 	bl	8012b88 <__assert_func>
 801196c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8011970:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011974:	b10d      	cbz	r5, 801197a <__d2b+0x32>
 8011976:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801197a:	9301      	str	r3, [sp, #4]
 801197c:	f1b8 0300 	subs.w	r3, r8, #0
 8011980:	d023      	beq.n	80119ca <__d2b+0x82>
 8011982:	4668      	mov	r0, sp
 8011984:	9300      	str	r3, [sp, #0]
 8011986:	f7ff fd0c 	bl	80113a2 <__lo0bits>
 801198a:	e9dd 1200 	ldrd	r1, r2, [sp]
 801198e:	b1d0      	cbz	r0, 80119c6 <__d2b+0x7e>
 8011990:	f1c0 0320 	rsb	r3, r0, #32
 8011994:	fa02 f303 	lsl.w	r3, r2, r3
 8011998:	430b      	orrs	r3, r1
 801199a:	40c2      	lsrs	r2, r0
 801199c:	6163      	str	r3, [r4, #20]
 801199e:	9201      	str	r2, [sp, #4]
 80119a0:	9b01      	ldr	r3, [sp, #4]
 80119a2:	61a3      	str	r3, [r4, #24]
 80119a4:	2b00      	cmp	r3, #0
 80119a6:	bf0c      	ite	eq
 80119a8:	2201      	moveq	r2, #1
 80119aa:	2202      	movne	r2, #2
 80119ac:	6122      	str	r2, [r4, #16]
 80119ae:	b1a5      	cbz	r5, 80119da <__d2b+0x92>
 80119b0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80119b4:	4405      	add	r5, r0
 80119b6:	603d      	str	r5, [r7, #0]
 80119b8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80119bc:	6030      	str	r0, [r6, #0]
 80119be:	4620      	mov	r0, r4
 80119c0:	b003      	add	sp, #12
 80119c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80119c6:	6161      	str	r1, [r4, #20]
 80119c8:	e7ea      	b.n	80119a0 <__d2b+0x58>
 80119ca:	a801      	add	r0, sp, #4
 80119cc:	f7ff fce9 	bl	80113a2 <__lo0bits>
 80119d0:	9b01      	ldr	r3, [sp, #4]
 80119d2:	6163      	str	r3, [r4, #20]
 80119d4:	3020      	adds	r0, #32
 80119d6:	2201      	movs	r2, #1
 80119d8:	e7e8      	b.n	80119ac <__d2b+0x64>
 80119da:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80119de:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80119e2:	6038      	str	r0, [r7, #0]
 80119e4:	6918      	ldr	r0, [r3, #16]
 80119e6:	f7ff fcbd 	bl	8011364 <__hi0bits>
 80119ea:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80119ee:	e7e5      	b.n	80119bc <__d2b+0x74>
 80119f0:	08018308 	.word	0x08018308
 80119f4:	08018319 	.word	0x08018319

080119f8 <__ratio>:
 80119f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80119fc:	b085      	sub	sp, #20
 80119fe:	e9cd 1000 	strd	r1, r0, [sp]
 8011a02:	a902      	add	r1, sp, #8
 8011a04:	f7ff ff56 	bl	80118b4 <__b2d>
 8011a08:	9800      	ldr	r0, [sp, #0]
 8011a0a:	a903      	add	r1, sp, #12
 8011a0c:	ec55 4b10 	vmov	r4, r5, d0
 8011a10:	f7ff ff50 	bl	80118b4 <__b2d>
 8011a14:	9b01      	ldr	r3, [sp, #4]
 8011a16:	6919      	ldr	r1, [r3, #16]
 8011a18:	9b00      	ldr	r3, [sp, #0]
 8011a1a:	691b      	ldr	r3, [r3, #16]
 8011a1c:	1ac9      	subs	r1, r1, r3
 8011a1e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8011a22:	1a9b      	subs	r3, r3, r2
 8011a24:	ec5b ab10 	vmov	sl, fp, d0
 8011a28:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8011a2c:	2b00      	cmp	r3, #0
 8011a2e:	bfce      	itee	gt
 8011a30:	462a      	movgt	r2, r5
 8011a32:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8011a36:	465a      	movle	r2, fp
 8011a38:	462f      	mov	r7, r5
 8011a3a:	46d9      	mov	r9, fp
 8011a3c:	bfcc      	ite	gt
 8011a3e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8011a42:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8011a46:	464b      	mov	r3, r9
 8011a48:	4652      	mov	r2, sl
 8011a4a:	4620      	mov	r0, r4
 8011a4c:	4639      	mov	r1, r7
 8011a4e:	f7ee fed5 	bl	80007fc <__aeabi_ddiv>
 8011a52:	ec41 0b10 	vmov	d0, r0, r1
 8011a56:	b005      	add	sp, #20
 8011a58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011a5c <__copybits>:
 8011a5c:	3901      	subs	r1, #1
 8011a5e:	b570      	push	{r4, r5, r6, lr}
 8011a60:	1149      	asrs	r1, r1, #5
 8011a62:	6914      	ldr	r4, [r2, #16]
 8011a64:	3101      	adds	r1, #1
 8011a66:	f102 0314 	add.w	r3, r2, #20
 8011a6a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8011a6e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8011a72:	1f05      	subs	r5, r0, #4
 8011a74:	42a3      	cmp	r3, r4
 8011a76:	d30c      	bcc.n	8011a92 <__copybits+0x36>
 8011a78:	1aa3      	subs	r3, r4, r2
 8011a7a:	3b11      	subs	r3, #17
 8011a7c:	f023 0303 	bic.w	r3, r3, #3
 8011a80:	3211      	adds	r2, #17
 8011a82:	42a2      	cmp	r2, r4
 8011a84:	bf88      	it	hi
 8011a86:	2300      	movhi	r3, #0
 8011a88:	4418      	add	r0, r3
 8011a8a:	2300      	movs	r3, #0
 8011a8c:	4288      	cmp	r0, r1
 8011a8e:	d305      	bcc.n	8011a9c <__copybits+0x40>
 8011a90:	bd70      	pop	{r4, r5, r6, pc}
 8011a92:	f853 6b04 	ldr.w	r6, [r3], #4
 8011a96:	f845 6f04 	str.w	r6, [r5, #4]!
 8011a9a:	e7eb      	b.n	8011a74 <__copybits+0x18>
 8011a9c:	f840 3b04 	str.w	r3, [r0], #4
 8011aa0:	e7f4      	b.n	8011a8c <__copybits+0x30>

08011aa2 <__any_on>:
 8011aa2:	f100 0214 	add.w	r2, r0, #20
 8011aa6:	6900      	ldr	r0, [r0, #16]
 8011aa8:	114b      	asrs	r3, r1, #5
 8011aaa:	4298      	cmp	r0, r3
 8011aac:	b510      	push	{r4, lr}
 8011aae:	db11      	blt.n	8011ad4 <__any_on+0x32>
 8011ab0:	dd0a      	ble.n	8011ac8 <__any_on+0x26>
 8011ab2:	f011 011f 	ands.w	r1, r1, #31
 8011ab6:	d007      	beq.n	8011ac8 <__any_on+0x26>
 8011ab8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8011abc:	fa24 f001 	lsr.w	r0, r4, r1
 8011ac0:	fa00 f101 	lsl.w	r1, r0, r1
 8011ac4:	428c      	cmp	r4, r1
 8011ac6:	d10b      	bne.n	8011ae0 <__any_on+0x3e>
 8011ac8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011acc:	4293      	cmp	r3, r2
 8011ace:	d803      	bhi.n	8011ad8 <__any_on+0x36>
 8011ad0:	2000      	movs	r0, #0
 8011ad2:	bd10      	pop	{r4, pc}
 8011ad4:	4603      	mov	r3, r0
 8011ad6:	e7f7      	b.n	8011ac8 <__any_on+0x26>
 8011ad8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011adc:	2900      	cmp	r1, #0
 8011ade:	d0f5      	beq.n	8011acc <__any_on+0x2a>
 8011ae0:	2001      	movs	r0, #1
 8011ae2:	e7f6      	b.n	8011ad2 <__any_on+0x30>

08011ae4 <sulp>:
 8011ae4:	b570      	push	{r4, r5, r6, lr}
 8011ae6:	4604      	mov	r4, r0
 8011ae8:	460d      	mov	r5, r1
 8011aea:	ec45 4b10 	vmov	d0, r4, r5
 8011aee:	4616      	mov	r6, r2
 8011af0:	f7ff feba 	bl	8011868 <__ulp>
 8011af4:	ec51 0b10 	vmov	r0, r1, d0
 8011af8:	b17e      	cbz	r6, 8011b1a <sulp+0x36>
 8011afa:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8011afe:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8011b02:	2b00      	cmp	r3, #0
 8011b04:	dd09      	ble.n	8011b1a <sulp+0x36>
 8011b06:	051b      	lsls	r3, r3, #20
 8011b08:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8011b0c:	2400      	movs	r4, #0
 8011b0e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8011b12:	4622      	mov	r2, r4
 8011b14:	462b      	mov	r3, r5
 8011b16:	f7ee fd47 	bl	80005a8 <__aeabi_dmul>
 8011b1a:	ec41 0b10 	vmov	d0, r0, r1
 8011b1e:	bd70      	pop	{r4, r5, r6, pc}

08011b20 <_strtod_l>:
 8011b20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b24:	b09f      	sub	sp, #124	@ 0x7c
 8011b26:	460c      	mov	r4, r1
 8011b28:	9217      	str	r2, [sp, #92]	@ 0x5c
 8011b2a:	2200      	movs	r2, #0
 8011b2c:	921a      	str	r2, [sp, #104]	@ 0x68
 8011b2e:	9005      	str	r0, [sp, #20]
 8011b30:	f04f 0a00 	mov.w	sl, #0
 8011b34:	f04f 0b00 	mov.w	fp, #0
 8011b38:	460a      	mov	r2, r1
 8011b3a:	9219      	str	r2, [sp, #100]	@ 0x64
 8011b3c:	7811      	ldrb	r1, [r2, #0]
 8011b3e:	292b      	cmp	r1, #43	@ 0x2b
 8011b40:	d04a      	beq.n	8011bd8 <_strtod_l+0xb8>
 8011b42:	d838      	bhi.n	8011bb6 <_strtod_l+0x96>
 8011b44:	290d      	cmp	r1, #13
 8011b46:	d832      	bhi.n	8011bae <_strtod_l+0x8e>
 8011b48:	2908      	cmp	r1, #8
 8011b4a:	d832      	bhi.n	8011bb2 <_strtod_l+0x92>
 8011b4c:	2900      	cmp	r1, #0
 8011b4e:	d03b      	beq.n	8011bc8 <_strtod_l+0xa8>
 8011b50:	2200      	movs	r2, #0
 8011b52:	920b      	str	r2, [sp, #44]	@ 0x2c
 8011b54:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8011b56:	782a      	ldrb	r2, [r5, #0]
 8011b58:	2a30      	cmp	r2, #48	@ 0x30
 8011b5a:	f040 80b3 	bne.w	8011cc4 <_strtod_l+0x1a4>
 8011b5e:	786a      	ldrb	r2, [r5, #1]
 8011b60:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8011b64:	2a58      	cmp	r2, #88	@ 0x58
 8011b66:	d16e      	bne.n	8011c46 <_strtod_l+0x126>
 8011b68:	9302      	str	r3, [sp, #8]
 8011b6a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011b6c:	9301      	str	r3, [sp, #4]
 8011b6e:	ab1a      	add	r3, sp, #104	@ 0x68
 8011b70:	9300      	str	r3, [sp, #0]
 8011b72:	4a8e      	ldr	r2, [pc, #568]	@ (8011dac <_strtod_l+0x28c>)
 8011b74:	9805      	ldr	r0, [sp, #20]
 8011b76:	ab1b      	add	r3, sp, #108	@ 0x6c
 8011b78:	a919      	add	r1, sp, #100	@ 0x64
 8011b7a:	f001 f89f 	bl	8012cbc <__gethex>
 8011b7e:	f010 060f 	ands.w	r6, r0, #15
 8011b82:	4604      	mov	r4, r0
 8011b84:	d005      	beq.n	8011b92 <_strtod_l+0x72>
 8011b86:	2e06      	cmp	r6, #6
 8011b88:	d128      	bne.n	8011bdc <_strtod_l+0xbc>
 8011b8a:	3501      	adds	r5, #1
 8011b8c:	2300      	movs	r3, #0
 8011b8e:	9519      	str	r5, [sp, #100]	@ 0x64
 8011b90:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011b92:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8011b94:	2b00      	cmp	r3, #0
 8011b96:	f040 858e 	bne.w	80126b6 <_strtod_l+0xb96>
 8011b9a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011b9c:	b1cb      	cbz	r3, 8011bd2 <_strtod_l+0xb2>
 8011b9e:	4652      	mov	r2, sl
 8011ba0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8011ba4:	ec43 2b10 	vmov	d0, r2, r3
 8011ba8:	b01f      	add	sp, #124	@ 0x7c
 8011baa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011bae:	2920      	cmp	r1, #32
 8011bb0:	d1ce      	bne.n	8011b50 <_strtod_l+0x30>
 8011bb2:	3201      	adds	r2, #1
 8011bb4:	e7c1      	b.n	8011b3a <_strtod_l+0x1a>
 8011bb6:	292d      	cmp	r1, #45	@ 0x2d
 8011bb8:	d1ca      	bne.n	8011b50 <_strtod_l+0x30>
 8011bba:	2101      	movs	r1, #1
 8011bbc:	910b      	str	r1, [sp, #44]	@ 0x2c
 8011bbe:	1c51      	adds	r1, r2, #1
 8011bc0:	9119      	str	r1, [sp, #100]	@ 0x64
 8011bc2:	7852      	ldrb	r2, [r2, #1]
 8011bc4:	2a00      	cmp	r2, #0
 8011bc6:	d1c5      	bne.n	8011b54 <_strtod_l+0x34>
 8011bc8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8011bca:	9419      	str	r4, [sp, #100]	@ 0x64
 8011bcc:	2b00      	cmp	r3, #0
 8011bce:	f040 8570 	bne.w	80126b2 <_strtod_l+0xb92>
 8011bd2:	4652      	mov	r2, sl
 8011bd4:	465b      	mov	r3, fp
 8011bd6:	e7e5      	b.n	8011ba4 <_strtod_l+0x84>
 8011bd8:	2100      	movs	r1, #0
 8011bda:	e7ef      	b.n	8011bbc <_strtod_l+0x9c>
 8011bdc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8011bde:	b13a      	cbz	r2, 8011bf0 <_strtod_l+0xd0>
 8011be0:	2135      	movs	r1, #53	@ 0x35
 8011be2:	a81c      	add	r0, sp, #112	@ 0x70
 8011be4:	f7ff ff3a 	bl	8011a5c <__copybits>
 8011be8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8011bea:	9805      	ldr	r0, [sp, #20]
 8011bec:	f7ff fb08 	bl	8011200 <_Bfree>
 8011bf0:	3e01      	subs	r6, #1
 8011bf2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8011bf4:	2e04      	cmp	r6, #4
 8011bf6:	d806      	bhi.n	8011c06 <_strtod_l+0xe6>
 8011bf8:	e8df f006 	tbb	[pc, r6]
 8011bfc:	201d0314 	.word	0x201d0314
 8011c00:	14          	.byte	0x14
 8011c01:	00          	.byte	0x00
 8011c02:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8011c06:	05e1      	lsls	r1, r4, #23
 8011c08:	bf48      	it	mi
 8011c0a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8011c0e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8011c12:	0d1b      	lsrs	r3, r3, #20
 8011c14:	051b      	lsls	r3, r3, #20
 8011c16:	2b00      	cmp	r3, #0
 8011c18:	d1bb      	bne.n	8011b92 <_strtod_l+0x72>
 8011c1a:	f7fe fb23 	bl	8010264 <__errno>
 8011c1e:	2322      	movs	r3, #34	@ 0x22
 8011c20:	6003      	str	r3, [r0, #0]
 8011c22:	e7b6      	b.n	8011b92 <_strtod_l+0x72>
 8011c24:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8011c28:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8011c2c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8011c30:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8011c34:	e7e7      	b.n	8011c06 <_strtod_l+0xe6>
 8011c36:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8011db4 <_strtod_l+0x294>
 8011c3a:	e7e4      	b.n	8011c06 <_strtod_l+0xe6>
 8011c3c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8011c40:	f04f 3aff 	mov.w	sl, #4294967295
 8011c44:	e7df      	b.n	8011c06 <_strtod_l+0xe6>
 8011c46:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011c48:	1c5a      	adds	r2, r3, #1
 8011c4a:	9219      	str	r2, [sp, #100]	@ 0x64
 8011c4c:	785b      	ldrb	r3, [r3, #1]
 8011c4e:	2b30      	cmp	r3, #48	@ 0x30
 8011c50:	d0f9      	beq.n	8011c46 <_strtod_l+0x126>
 8011c52:	2b00      	cmp	r3, #0
 8011c54:	d09d      	beq.n	8011b92 <_strtod_l+0x72>
 8011c56:	2301      	movs	r3, #1
 8011c58:	9309      	str	r3, [sp, #36]	@ 0x24
 8011c5a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011c5c:	930c      	str	r3, [sp, #48]	@ 0x30
 8011c5e:	2300      	movs	r3, #0
 8011c60:	9308      	str	r3, [sp, #32]
 8011c62:	930a      	str	r3, [sp, #40]	@ 0x28
 8011c64:	461f      	mov	r7, r3
 8011c66:	220a      	movs	r2, #10
 8011c68:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8011c6a:	7805      	ldrb	r5, [r0, #0]
 8011c6c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8011c70:	b2d9      	uxtb	r1, r3
 8011c72:	2909      	cmp	r1, #9
 8011c74:	d928      	bls.n	8011cc8 <_strtod_l+0x1a8>
 8011c76:	494e      	ldr	r1, [pc, #312]	@ (8011db0 <_strtod_l+0x290>)
 8011c78:	2201      	movs	r2, #1
 8011c7a:	f000 ff59 	bl	8012b30 <strncmp>
 8011c7e:	2800      	cmp	r0, #0
 8011c80:	d032      	beq.n	8011ce8 <_strtod_l+0x1c8>
 8011c82:	2000      	movs	r0, #0
 8011c84:	462a      	mov	r2, r5
 8011c86:	4681      	mov	r9, r0
 8011c88:	463d      	mov	r5, r7
 8011c8a:	4603      	mov	r3, r0
 8011c8c:	2a65      	cmp	r2, #101	@ 0x65
 8011c8e:	d001      	beq.n	8011c94 <_strtod_l+0x174>
 8011c90:	2a45      	cmp	r2, #69	@ 0x45
 8011c92:	d114      	bne.n	8011cbe <_strtod_l+0x19e>
 8011c94:	b91d      	cbnz	r5, 8011c9e <_strtod_l+0x17e>
 8011c96:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011c98:	4302      	orrs	r2, r0
 8011c9a:	d095      	beq.n	8011bc8 <_strtod_l+0xa8>
 8011c9c:	2500      	movs	r5, #0
 8011c9e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8011ca0:	1c62      	adds	r2, r4, #1
 8011ca2:	9219      	str	r2, [sp, #100]	@ 0x64
 8011ca4:	7862      	ldrb	r2, [r4, #1]
 8011ca6:	2a2b      	cmp	r2, #43	@ 0x2b
 8011ca8:	d077      	beq.n	8011d9a <_strtod_l+0x27a>
 8011caa:	2a2d      	cmp	r2, #45	@ 0x2d
 8011cac:	d07b      	beq.n	8011da6 <_strtod_l+0x286>
 8011cae:	f04f 0c00 	mov.w	ip, #0
 8011cb2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8011cb6:	2909      	cmp	r1, #9
 8011cb8:	f240 8082 	bls.w	8011dc0 <_strtod_l+0x2a0>
 8011cbc:	9419      	str	r4, [sp, #100]	@ 0x64
 8011cbe:	f04f 0800 	mov.w	r8, #0
 8011cc2:	e0a2      	b.n	8011e0a <_strtod_l+0x2ea>
 8011cc4:	2300      	movs	r3, #0
 8011cc6:	e7c7      	b.n	8011c58 <_strtod_l+0x138>
 8011cc8:	2f08      	cmp	r7, #8
 8011cca:	bfd5      	itete	le
 8011ccc:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8011cce:	9908      	ldrgt	r1, [sp, #32]
 8011cd0:	fb02 3301 	mlale	r3, r2, r1, r3
 8011cd4:	fb02 3301 	mlagt	r3, r2, r1, r3
 8011cd8:	f100 0001 	add.w	r0, r0, #1
 8011cdc:	bfd4      	ite	le
 8011cde:	930a      	strle	r3, [sp, #40]	@ 0x28
 8011ce0:	9308      	strgt	r3, [sp, #32]
 8011ce2:	3701      	adds	r7, #1
 8011ce4:	9019      	str	r0, [sp, #100]	@ 0x64
 8011ce6:	e7bf      	b.n	8011c68 <_strtod_l+0x148>
 8011ce8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011cea:	1c5a      	adds	r2, r3, #1
 8011cec:	9219      	str	r2, [sp, #100]	@ 0x64
 8011cee:	785a      	ldrb	r2, [r3, #1]
 8011cf0:	b37f      	cbz	r7, 8011d52 <_strtod_l+0x232>
 8011cf2:	4681      	mov	r9, r0
 8011cf4:	463d      	mov	r5, r7
 8011cf6:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8011cfa:	2b09      	cmp	r3, #9
 8011cfc:	d912      	bls.n	8011d24 <_strtod_l+0x204>
 8011cfe:	2301      	movs	r3, #1
 8011d00:	e7c4      	b.n	8011c8c <_strtod_l+0x16c>
 8011d02:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011d04:	1c5a      	adds	r2, r3, #1
 8011d06:	9219      	str	r2, [sp, #100]	@ 0x64
 8011d08:	785a      	ldrb	r2, [r3, #1]
 8011d0a:	3001      	adds	r0, #1
 8011d0c:	2a30      	cmp	r2, #48	@ 0x30
 8011d0e:	d0f8      	beq.n	8011d02 <_strtod_l+0x1e2>
 8011d10:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8011d14:	2b08      	cmp	r3, #8
 8011d16:	f200 84d3 	bhi.w	80126c0 <_strtod_l+0xba0>
 8011d1a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011d1c:	930c      	str	r3, [sp, #48]	@ 0x30
 8011d1e:	4681      	mov	r9, r0
 8011d20:	2000      	movs	r0, #0
 8011d22:	4605      	mov	r5, r0
 8011d24:	3a30      	subs	r2, #48	@ 0x30
 8011d26:	f100 0301 	add.w	r3, r0, #1
 8011d2a:	d02a      	beq.n	8011d82 <_strtod_l+0x262>
 8011d2c:	4499      	add	r9, r3
 8011d2e:	eb00 0c05 	add.w	ip, r0, r5
 8011d32:	462b      	mov	r3, r5
 8011d34:	210a      	movs	r1, #10
 8011d36:	4563      	cmp	r3, ip
 8011d38:	d10d      	bne.n	8011d56 <_strtod_l+0x236>
 8011d3a:	1c69      	adds	r1, r5, #1
 8011d3c:	4401      	add	r1, r0
 8011d3e:	4428      	add	r0, r5
 8011d40:	2808      	cmp	r0, #8
 8011d42:	dc16      	bgt.n	8011d72 <_strtod_l+0x252>
 8011d44:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8011d46:	230a      	movs	r3, #10
 8011d48:	fb03 2300 	mla	r3, r3, r0, r2
 8011d4c:	930a      	str	r3, [sp, #40]	@ 0x28
 8011d4e:	2300      	movs	r3, #0
 8011d50:	e018      	b.n	8011d84 <_strtod_l+0x264>
 8011d52:	4638      	mov	r0, r7
 8011d54:	e7da      	b.n	8011d0c <_strtod_l+0x1ec>
 8011d56:	2b08      	cmp	r3, #8
 8011d58:	f103 0301 	add.w	r3, r3, #1
 8011d5c:	dc03      	bgt.n	8011d66 <_strtod_l+0x246>
 8011d5e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8011d60:	434e      	muls	r6, r1
 8011d62:	960a      	str	r6, [sp, #40]	@ 0x28
 8011d64:	e7e7      	b.n	8011d36 <_strtod_l+0x216>
 8011d66:	2b10      	cmp	r3, #16
 8011d68:	bfde      	ittt	le
 8011d6a:	9e08      	ldrle	r6, [sp, #32]
 8011d6c:	434e      	mulle	r6, r1
 8011d6e:	9608      	strle	r6, [sp, #32]
 8011d70:	e7e1      	b.n	8011d36 <_strtod_l+0x216>
 8011d72:	280f      	cmp	r0, #15
 8011d74:	dceb      	bgt.n	8011d4e <_strtod_l+0x22e>
 8011d76:	9808      	ldr	r0, [sp, #32]
 8011d78:	230a      	movs	r3, #10
 8011d7a:	fb03 2300 	mla	r3, r3, r0, r2
 8011d7e:	9308      	str	r3, [sp, #32]
 8011d80:	e7e5      	b.n	8011d4e <_strtod_l+0x22e>
 8011d82:	4629      	mov	r1, r5
 8011d84:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8011d86:	1c50      	adds	r0, r2, #1
 8011d88:	9019      	str	r0, [sp, #100]	@ 0x64
 8011d8a:	7852      	ldrb	r2, [r2, #1]
 8011d8c:	4618      	mov	r0, r3
 8011d8e:	460d      	mov	r5, r1
 8011d90:	e7b1      	b.n	8011cf6 <_strtod_l+0x1d6>
 8011d92:	f04f 0900 	mov.w	r9, #0
 8011d96:	2301      	movs	r3, #1
 8011d98:	e77d      	b.n	8011c96 <_strtod_l+0x176>
 8011d9a:	f04f 0c00 	mov.w	ip, #0
 8011d9e:	1ca2      	adds	r2, r4, #2
 8011da0:	9219      	str	r2, [sp, #100]	@ 0x64
 8011da2:	78a2      	ldrb	r2, [r4, #2]
 8011da4:	e785      	b.n	8011cb2 <_strtod_l+0x192>
 8011da6:	f04f 0c01 	mov.w	ip, #1
 8011daa:	e7f8      	b.n	8011d9e <_strtod_l+0x27e>
 8011dac:	08018488 	.word	0x08018488
 8011db0:	08018470 	.word	0x08018470
 8011db4:	7ff00000 	.word	0x7ff00000
 8011db8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8011dba:	1c51      	adds	r1, r2, #1
 8011dbc:	9119      	str	r1, [sp, #100]	@ 0x64
 8011dbe:	7852      	ldrb	r2, [r2, #1]
 8011dc0:	2a30      	cmp	r2, #48	@ 0x30
 8011dc2:	d0f9      	beq.n	8011db8 <_strtod_l+0x298>
 8011dc4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8011dc8:	2908      	cmp	r1, #8
 8011dca:	f63f af78 	bhi.w	8011cbe <_strtod_l+0x19e>
 8011dce:	3a30      	subs	r2, #48	@ 0x30
 8011dd0:	920e      	str	r2, [sp, #56]	@ 0x38
 8011dd2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8011dd4:	920f      	str	r2, [sp, #60]	@ 0x3c
 8011dd6:	f04f 080a 	mov.w	r8, #10
 8011dda:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8011ddc:	1c56      	adds	r6, r2, #1
 8011dde:	9619      	str	r6, [sp, #100]	@ 0x64
 8011de0:	7852      	ldrb	r2, [r2, #1]
 8011de2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8011de6:	f1be 0f09 	cmp.w	lr, #9
 8011dea:	d939      	bls.n	8011e60 <_strtod_l+0x340>
 8011dec:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8011dee:	1a76      	subs	r6, r6, r1
 8011df0:	2e08      	cmp	r6, #8
 8011df2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8011df6:	dc03      	bgt.n	8011e00 <_strtod_l+0x2e0>
 8011df8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8011dfa:	4588      	cmp	r8, r1
 8011dfc:	bfa8      	it	ge
 8011dfe:	4688      	movge	r8, r1
 8011e00:	f1bc 0f00 	cmp.w	ip, #0
 8011e04:	d001      	beq.n	8011e0a <_strtod_l+0x2ea>
 8011e06:	f1c8 0800 	rsb	r8, r8, #0
 8011e0a:	2d00      	cmp	r5, #0
 8011e0c:	d14e      	bne.n	8011eac <_strtod_l+0x38c>
 8011e0e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8011e10:	4308      	orrs	r0, r1
 8011e12:	f47f aebe 	bne.w	8011b92 <_strtod_l+0x72>
 8011e16:	2b00      	cmp	r3, #0
 8011e18:	f47f aed6 	bne.w	8011bc8 <_strtod_l+0xa8>
 8011e1c:	2a69      	cmp	r2, #105	@ 0x69
 8011e1e:	d028      	beq.n	8011e72 <_strtod_l+0x352>
 8011e20:	dc25      	bgt.n	8011e6e <_strtod_l+0x34e>
 8011e22:	2a49      	cmp	r2, #73	@ 0x49
 8011e24:	d025      	beq.n	8011e72 <_strtod_l+0x352>
 8011e26:	2a4e      	cmp	r2, #78	@ 0x4e
 8011e28:	f47f aece 	bne.w	8011bc8 <_strtod_l+0xa8>
 8011e2c:	499b      	ldr	r1, [pc, #620]	@ (801209c <_strtod_l+0x57c>)
 8011e2e:	a819      	add	r0, sp, #100	@ 0x64
 8011e30:	f001 f966 	bl	8013100 <__match>
 8011e34:	2800      	cmp	r0, #0
 8011e36:	f43f aec7 	beq.w	8011bc8 <_strtod_l+0xa8>
 8011e3a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011e3c:	781b      	ldrb	r3, [r3, #0]
 8011e3e:	2b28      	cmp	r3, #40	@ 0x28
 8011e40:	d12e      	bne.n	8011ea0 <_strtod_l+0x380>
 8011e42:	4997      	ldr	r1, [pc, #604]	@ (80120a0 <_strtod_l+0x580>)
 8011e44:	aa1c      	add	r2, sp, #112	@ 0x70
 8011e46:	a819      	add	r0, sp, #100	@ 0x64
 8011e48:	f001 f96e 	bl	8013128 <__hexnan>
 8011e4c:	2805      	cmp	r0, #5
 8011e4e:	d127      	bne.n	8011ea0 <_strtod_l+0x380>
 8011e50:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8011e52:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8011e56:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8011e5a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8011e5e:	e698      	b.n	8011b92 <_strtod_l+0x72>
 8011e60:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8011e62:	fb08 2101 	mla	r1, r8, r1, r2
 8011e66:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8011e6a:	920e      	str	r2, [sp, #56]	@ 0x38
 8011e6c:	e7b5      	b.n	8011dda <_strtod_l+0x2ba>
 8011e6e:	2a6e      	cmp	r2, #110	@ 0x6e
 8011e70:	e7da      	b.n	8011e28 <_strtod_l+0x308>
 8011e72:	498c      	ldr	r1, [pc, #560]	@ (80120a4 <_strtod_l+0x584>)
 8011e74:	a819      	add	r0, sp, #100	@ 0x64
 8011e76:	f001 f943 	bl	8013100 <__match>
 8011e7a:	2800      	cmp	r0, #0
 8011e7c:	f43f aea4 	beq.w	8011bc8 <_strtod_l+0xa8>
 8011e80:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011e82:	4989      	ldr	r1, [pc, #548]	@ (80120a8 <_strtod_l+0x588>)
 8011e84:	3b01      	subs	r3, #1
 8011e86:	a819      	add	r0, sp, #100	@ 0x64
 8011e88:	9319      	str	r3, [sp, #100]	@ 0x64
 8011e8a:	f001 f939 	bl	8013100 <__match>
 8011e8e:	b910      	cbnz	r0, 8011e96 <_strtod_l+0x376>
 8011e90:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011e92:	3301      	adds	r3, #1
 8011e94:	9319      	str	r3, [sp, #100]	@ 0x64
 8011e96:	f8df b220 	ldr.w	fp, [pc, #544]	@ 80120b8 <_strtod_l+0x598>
 8011e9a:	f04f 0a00 	mov.w	sl, #0
 8011e9e:	e678      	b.n	8011b92 <_strtod_l+0x72>
 8011ea0:	4882      	ldr	r0, [pc, #520]	@ (80120ac <_strtod_l+0x58c>)
 8011ea2:	f000 fe69 	bl	8012b78 <nan>
 8011ea6:	ec5b ab10 	vmov	sl, fp, d0
 8011eaa:	e672      	b.n	8011b92 <_strtod_l+0x72>
 8011eac:	eba8 0309 	sub.w	r3, r8, r9
 8011eb0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8011eb2:	9309      	str	r3, [sp, #36]	@ 0x24
 8011eb4:	2f00      	cmp	r7, #0
 8011eb6:	bf08      	it	eq
 8011eb8:	462f      	moveq	r7, r5
 8011eba:	2d10      	cmp	r5, #16
 8011ebc:	462c      	mov	r4, r5
 8011ebe:	bfa8      	it	ge
 8011ec0:	2410      	movge	r4, #16
 8011ec2:	f7ee faf7 	bl	80004b4 <__aeabi_ui2d>
 8011ec6:	2d09      	cmp	r5, #9
 8011ec8:	4682      	mov	sl, r0
 8011eca:	468b      	mov	fp, r1
 8011ecc:	dc13      	bgt.n	8011ef6 <_strtod_l+0x3d6>
 8011ece:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011ed0:	2b00      	cmp	r3, #0
 8011ed2:	f43f ae5e 	beq.w	8011b92 <_strtod_l+0x72>
 8011ed6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011ed8:	dd78      	ble.n	8011fcc <_strtod_l+0x4ac>
 8011eda:	2b16      	cmp	r3, #22
 8011edc:	dc5f      	bgt.n	8011f9e <_strtod_l+0x47e>
 8011ede:	4974      	ldr	r1, [pc, #464]	@ (80120b0 <_strtod_l+0x590>)
 8011ee0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8011ee4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011ee8:	4652      	mov	r2, sl
 8011eea:	465b      	mov	r3, fp
 8011eec:	f7ee fb5c 	bl	80005a8 <__aeabi_dmul>
 8011ef0:	4682      	mov	sl, r0
 8011ef2:	468b      	mov	fp, r1
 8011ef4:	e64d      	b.n	8011b92 <_strtod_l+0x72>
 8011ef6:	4b6e      	ldr	r3, [pc, #440]	@ (80120b0 <_strtod_l+0x590>)
 8011ef8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8011efc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8011f00:	f7ee fb52 	bl	80005a8 <__aeabi_dmul>
 8011f04:	4682      	mov	sl, r0
 8011f06:	9808      	ldr	r0, [sp, #32]
 8011f08:	468b      	mov	fp, r1
 8011f0a:	f7ee fad3 	bl	80004b4 <__aeabi_ui2d>
 8011f0e:	4602      	mov	r2, r0
 8011f10:	460b      	mov	r3, r1
 8011f12:	4650      	mov	r0, sl
 8011f14:	4659      	mov	r1, fp
 8011f16:	f7ee f991 	bl	800023c <__adddf3>
 8011f1a:	2d0f      	cmp	r5, #15
 8011f1c:	4682      	mov	sl, r0
 8011f1e:	468b      	mov	fp, r1
 8011f20:	ddd5      	ble.n	8011ece <_strtod_l+0x3ae>
 8011f22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011f24:	1b2c      	subs	r4, r5, r4
 8011f26:	441c      	add	r4, r3
 8011f28:	2c00      	cmp	r4, #0
 8011f2a:	f340 8096 	ble.w	801205a <_strtod_l+0x53a>
 8011f2e:	f014 030f 	ands.w	r3, r4, #15
 8011f32:	d00a      	beq.n	8011f4a <_strtod_l+0x42a>
 8011f34:	495e      	ldr	r1, [pc, #376]	@ (80120b0 <_strtod_l+0x590>)
 8011f36:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8011f3a:	4652      	mov	r2, sl
 8011f3c:	465b      	mov	r3, fp
 8011f3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011f42:	f7ee fb31 	bl	80005a8 <__aeabi_dmul>
 8011f46:	4682      	mov	sl, r0
 8011f48:	468b      	mov	fp, r1
 8011f4a:	f034 040f 	bics.w	r4, r4, #15
 8011f4e:	d073      	beq.n	8012038 <_strtod_l+0x518>
 8011f50:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8011f54:	dd48      	ble.n	8011fe8 <_strtod_l+0x4c8>
 8011f56:	2400      	movs	r4, #0
 8011f58:	46a0      	mov	r8, r4
 8011f5a:	940a      	str	r4, [sp, #40]	@ 0x28
 8011f5c:	46a1      	mov	r9, r4
 8011f5e:	9a05      	ldr	r2, [sp, #20]
 8011f60:	f8df b154 	ldr.w	fp, [pc, #340]	@ 80120b8 <_strtod_l+0x598>
 8011f64:	2322      	movs	r3, #34	@ 0x22
 8011f66:	6013      	str	r3, [r2, #0]
 8011f68:	f04f 0a00 	mov.w	sl, #0
 8011f6c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011f6e:	2b00      	cmp	r3, #0
 8011f70:	f43f ae0f 	beq.w	8011b92 <_strtod_l+0x72>
 8011f74:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8011f76:	9805      	ldr	r0, [sp, #20]
 8011f78:	f7ff f942 	bl	8011200 <_Bfree>
 8011f7c:	9805      	ldr	r0, [sp, #20]
 8011f7e:	4649      	mov	r1, r9
 8011f80:	f7ff f93e 	bl	8011200 <_Bfree>
 8011f84:	9805      	ldr	r0, [sp, #20]
 8011f86:	4641      	mov	r1, r8
 8011f88:	f7ff f93a 	bl	8011200 <_Bfree>
 8011f8c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8011f8e:	9805      	ldr	r0, [sp, #20]
 8011f90:	f7ff f936 	bl	8011200 <_Bfree>
 8011f94:	9805      	ldr	r0, [sp, #20]
 8011f96:	4621      	mov	r1, r4
 8011f98:	f7ff f932 	bl	8011200 <_Bfree>
 8011f9c:	e5f9      	b.n	8011b92 <_strtod_l+0x72>
 8011f9e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011fa0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8011fa4:	4293      	cmp	r3, r2
 8011fa6:	dbbc      	blt.n	8011f22 <_strtod_l+0x402>
 8011fa8:	4c41      	ldr	r4, [pc, #260]	@ (80120b0 <_strtod_l+0x590>)
 8011faa:	f1c5 050f 	rsb	r5, r5, #15
 8011fae:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8011fb2:	4652      	mov	r2, sl
 8011fb4:	465b      	mov	r3, fp
 8011fb6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011fba:	f7ee faf5 	bl	80005a8 <__aeabi_dmul>
 8011fbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011fc0:	1b5d      	subs	r5, r3, r5
 8011fc2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8011fc6:	e9d4 2300 	ldrd	r2, r3, [r4]
 8011fca:	e78f      	b.n	8011eec <_strtod_l+0x3cc>
 8011fcc:	3316      	adds	r3, #22
 8011fce:	dba8      	blt.n	8011f22 <_strtod_l+0x402>
 8011fd0:	4b37      	ldr	r3, [pc, #220]	@ (80120b0 <_strtod_l+0x590>)
 8011fd2:	eba9 0808 	sub.w	r8, r9, r8
 8011fd6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8011fda:	e9d8 2300 	ldrd	r2, r3, [r8]
 8011fde:	4650      	mov	r0, sl
 8011fe0:	4659      	mov	r1, fp
 8011fe2:	f7ee fc0b 	bl	80007fc <__aeabi_ddiv>
 8011fe6:	e783      	b.n	8011ef0 <_strtod_l+0x3d0>
 8011fe8:	4b32      	ldr	r3, [pc, #200]	@ (80120b4 <_strtod_l+0x594>)
 8011fea:	9308      	str	r3, [sp, #32]
 8011fec:	2300      	movs	r3, #0
 8011fee:	1124      	asrs	r4, r4, #4
 8011ff0:	4650      	mov	r0, sl
 8011ff2:	4659      	mov	r1, fp
 8011ff4:	461e      	mov	r6, r3
 8011ff6:	2c01      	cmp	r4, #1
 8011ff8:	dc21      	bgt.n	801203e <_strtod_l+0x51e>
 8011ffa:	b10b      	cbz	r3, 8012000 <_strtod_l+0x4e0>
 8011ffc:	4682      	mov	sl, r0
 8011ffe:	468b      	mov	fp, r1
 8012000:	492c      	ldr	r1, [pc, #176]	@ (80120b4 <_strtod_l+0x594>)
 8012002:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8012006:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 801200a:	4652      	mov	r2, sl
 801200c:	465b      	mov	r3, fp
 801200e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012012:	f7ee fac9 	bl	80005a8 <__aeabi_dmul>
 8012016:	4b28      	ldr	r3, [pc, #160]	@ (80120b8 <_strtod_l+0x598>)
 8012018:	460a      	mov	r2, r1
 801201a:	400b      	ands	r3, r1
 801201c:	4927      	ldr	r1, [pc, #156]	@ (80120bc <_strtod_l+0x59c>)
 801201e:	428b      	cmp	r3, r1
 8012020:	4682      	mov	sl, r0
 8012022:	d898      	bhi.n	8011f56 <_strtod_l+0x436>
 8012024:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8012028:	428b      	cmp	r3, r1
 801202a:	bf86      	itte	hi
 801202c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 80120c0 <_strtod_l+0x5a0>
 8012030:	f04f 3aff 	movhi.w	sl, #4294967295
 8012034:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8012038:	2300      	movs	r3, #0
 801203a:	9308      	str	r3, [sp, #32]
 801203c:	e07a      	b.n	8012134 <_strtod_l+0x614>
 801203e:	07e2      	lsls	r2, r4, #31
 8012040:	d505      	bpl.n	801204e <_strtod_l+0x52e>
 8012042:	9b08      	ldr	r3, [sp, #32]
 8012044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012048:	f7ee faae 	bl	80005a8 <__aeabi_dmul>
 801204c:	2301      	movs	r3, #1
 801204e:	9a08      	ldr	r2, [sp, #32]
 8012050:	3208      	adds	r2, #8
 8012052:	3601      	adds	r6, #1
 8012054:	1064      	asrs	r4, r4, #1
 8012056:	9208      	str	r2, [sp, #32]
 8012058:	e7cd      	b.n	8011ff6 <_strtod_l+0x4d6>
 801205a:	d0ed      	beq.n	8012038 <_strtod_l+0x518>
 801205c:	4264      	negs	r4, r4
 801205e:	f014 020f 	ands.w	r2, r4, #15
 8012062:	d00a      	beq.n	801207a <_strtod_l+0x55a>
 8012064:	4b12      	ldr	r3, [pc, #72]	@ (80120b0 <_strtod_l+0x590>)
 8012066:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801206a:	4650      	mov	r0, sl
 801206c:	4659      	mov	r1, fp
 801206e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012072:	f7ee fbc3 	bl	80007fc <__aeabi_ddiv>
 8012076:	4682      	mov	sl, r0
 8012078:	468b      	mov	fp, r1
 801207a:	1124      	asrs	r4, r4, #4
 801207c:	d0dc      	beq.n	8012038 <_strtod_l+0x518>
 801207e:	2c1f      	cmp	r4, #31
 8012080:	dd20      	ble.n	80120c4 <_strtod_l+0x5a4>
 8012082:	2400      	movs	r4, #0
 8012084:	46a0      	mov	r8, r4
 8012086:	940a      	str	r4, [sp, #40]	@ 0x28
 8012088:	46a1      	mov	r9, r4
 801208a:	9a05      	ldr	r2, [sp, #20]
 801208c:	2322      	movs	r3, #34	@ 0x22
 801208e:	f04f 0a00 	mov.w	sl, #0
 8012092:	f04f 0b00 	mov.w	fp, #0
 8012096:	6013      	str	r3, [r2, #0]
 8012098:	e768      	b.n	8011f6c <_strtod_l+0x44c>
 801209a:	bf00      	nop
 801209c:	08018260 	.word	0x08018260
 80120a0:	08018474 	.word	0x08018474
 80120a4:	08018258 	.word	0x08018258
 80120a8:	0801828f 	.word	0x0801828f
 80120ac:	0801851c 	.word	0x0801851c
 80120b0:	080183a8 	.word	0x080183a8
 80120b4:	08018380 	.word	0x08018380
 80120b8:	7ff00000 	.word	0x7ff00000
 80120bc:	7ca00000 	.word	0x7ca00000
 80120c0:	7fefffff 	.word	0x7fefffff
 80120c4:	f014 0310 	ands.w	r3, r4, #16
 80120c8:	bf18      	it	ne
 80120ca:	236a      	movne	r3, #106	@ 0x6a
 80120cc:	4ea9      	ldr	r6, [pc, #676]	@ (8012374 <_strtod_l+0x854>)
 80120ce:	9308      	str	r3, [sp, #32]
 80120d0:	4650      	mov	r0, sl
 80120d2:	4659      	mov	r1, fp
 80120d4:	2300      	movs	r3, #0
 80120d6:	07e2      	lsls	r2, r4, #31
 80120d8:	d504      	bpl.n	80120e4 <_strtod_l+0x5c4>
 80120da:	e9d6 2300 	ldrd	r2, r3, [r6]
 80120de:	f7ee fa63 	bl	80005a8 <__aeabi_dmul>
 80120e2:	2301      	movs	r3, #1
 80120e4:	1064      	asrs	r4, r4, #1
 80120e6:	f106 0608 	add.w	r6, r6, #8
 80120ea:	d1f4      	bne.n	80120d6 <_strtod_l+0x5b6>
 80120ec:	b10b      	cbz	r3, 80120f2 <_strtod_l+0x5d2>
 80120ee:	4682      	mov	sl, r0
 80120f0:	468b      	mov	fp, r1
 80120f2:	9b08      	ldr	r3, [sp, #32]
 80120f4:	b1b3      	cbz	r3, 8012124 <_strtod_l+0x604>
 80120f6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80120fa:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80120fe:	2b00      	cmp	r3, #0
 8012100:	4659      	mov	r1, fp
 8012102:	dd0f      	ble.n	8012124 <_strtod_l+0x604>
 8012104:	2b1f      	cmp	r3, #31
 8012106:	dd55      	ble.n	80121b4 <_strtod_l+0x694>
 8012108:	2b34      	cmp	r3, #52	@ 0x34
 801210a:	bfde      	ittt	le
 801210c:	f04f 33ff 	movle.w	r3, #4294967295
 8012110:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8012114:	4093      	lslle	r3, r2
 8012116:	f04f 0a00 	mov.w	sl, #0
 801211a:	bfcc      	ite	gt
 801211c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8012120:	ea03 0b01 	andle.w	fp, r3, r1
 8012124:	2200      	movs	r2, #0
 8012126:	2300      	movs	r3, #0
 8012128:	4650      	mov	r0, sl
 801212a:	4659      	mov	r1, fp
 801212c:	f7ee fca4 	bl	8000a78 <__aeabi_dcmpeq>
 8012130:	2800      	cmp	r0, #0
 8012132:	d1a6      	bne.n	8012082 <_strtod_l+0x562>
 8012134:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012136:	9300      	str	r3, [sp, #0]
 8012138:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801213a:	9805      	ldr	r0, [sp, #20]
 801213c:	462b      	mov	r3, r5
 801213e:	463a      	mov	r2, r7
 8012140:	f7ff f8c6 	bl	80112d0 <__s2b>
 8012144:	900a      	str	r0, [sp, #40]	@ 0x28
 8012146:	2800      	cmp	r0, #0
 8012148:	f43f af05 	beq.w	8011f56 <_strtod_l+0x436>
 801214c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801214e:	2a00      	cmp	r2, #0
 8012150:	eba9 0308 	sub.w	r3, r9, r8
 8012154:	bfa8      	it	ge
 8012156:	2300      	movge	r3, #0
 8012158:	9312      	str	r3, [sp, #72]	@ 0x48
 801215a:	2400      	movs	r4, #0
 801215c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8012160:	9316      	str	r3, [sp, #88]	@ 0x58
 8012162:	46a0      	mov	r8, r4
 8012164:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012166:	9805      	ldr	r0, [sp, #20]
 8012168:	6859      	ldr	r1, [r3, #4]
 801216a:	f7ff f809 	bl	8011180 <_Balloc>
 801216e:	4681      	mov	r9, r0
 8012170:	2800      	cmp	r0, #0
 8012172:	f43f aef4 	beq.w	8011f5e <_strtod_l+0x43e>
 8012176:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012178:	691a      	ldr	r2, [r3, #16]
 801217a:	3202      	adds	r2, #2
 801217c:	f103 010c 	add.w	r1, r3, #12
 8012180:	0092      	lsls	r2, r2, #2
 8012182:	300c      	adds	r0, #12
 8012184:	f7fe f89b 	bl	80102be <memcpy>
 8012188:	ec4b ab10 	vmov	d0, sl, fp
 801218c:	9805      	ldr	r0, [sp, #20]
 801218e:	aa1c      	add	r2, sp, #112	@ 0x70
 8012190:	a91b      	add	r1, sp, #108	@ 0x6c
 8012192:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8012196:	f7ff fbd7 	bl	8011948 <__d2b>
 801219a:	901a      	str	r0, [sp, #104]	@ 0x68
 801219c:	2800      	cmp	r0, #0
 801219e:	f43f aede 	beq.w	8011f5e <_strtod_l+0x43e>
 80121a2:	9805      	ldr	r0, [sp, #20]
 80121a4:	2101      	movs	r1, #1
 80121a6:	f7ff f929 	bl	80113fc <__i2b>
 80121aa:	4680      	mov	r8, r0
 80121ac:	b948      	cbnz	r0, 80121c2 <_strtod_l+0x6a2>
 80121ae:	f04f 0800 	mov.w	r8, #0
 80121b2:	e6d4      	b.n	8011f5e <_strtod_l+0x43e>
 80121b4:	f04f 32ff 	mov.w	r2, #4294967295
 80121b8:	fa02 f303 	lsl.w	r3, r2, r3
 80121bc:	ea03 0a0a 	and.w	sl, r3, sl
 80121c0:	e7b0      	b.n	8012124 <_strtod_l+0x604>
 80121c2:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80121c4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80121c6:	2d00      	cmp	r5, #0
 80121c8:	bfab      	itete	ge
 80121ca:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80121cc:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80121ce:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80121d0:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80121d2:	bfac      	ite	ge
 80121d4:	18ef      	addge	r7, r5, r3
 80121d6:	1b5e      	sublt	r6, r3, r5
 80121d8:	9b08      	ldr	r3, [sp, #32]
 80121da:	1aed      	subs	r5, r5, r3
 80121dc:	4415      	add	r5, r2
 80121de:	4b66      	ldr	r3, [pc, #408]	@ (8012378 <_strtod_l+0x858>)
 80121e0:	3d01      	subs	r5, #1
 80121e2:	429d      	cmp	r5, r3
 80121e4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80121e8:	da50      	bge.n	801228c <_strtod_l+0x76c>
 80121ea:	1b5b      	subs	r3, r3, r5
 80121ec:	2b1f      	cmp	r3, #31
 80121ee:	eba2 0203 	sub.w	r2, r2, r3
 80121f2:	f04f 0101 	mov.w	r1, #1
 80121f6:	dc3d      	bgt.n	8012274 <_strtod_l+0x754>
 80121f8:	fa01 f303 	lsl.w	r3, r1, r3
 80121fc:	9313      	str	r3, [sp, #76]	@ 0x4c
 80121fe:	2300      	movs	r3, #0
 8012200:	9310      	str	r3, [sp, #64]	@ 0x40
 8012202:	18bd      	adds	r5, r7, r2
 8012204:	9b08      	ldr	r3, [sp, #32]
 8012206:	42af      	cmp	r7, r5
 8012208:	4416      	add	r6, r2
 801220a:	441e      	add	r6, r3
 801220c:	463b      	mov	r3, r7
 801220e:	bfa8      	it	ge
 8012210:	462b      	movge	r3, r5
 8012212:	42b3      	cmp	r3, r6
 8012214:	bfa8      	it	ge
 8012216:	4633      	movge	r3, r6
 8012218:	2b00      	cmp	r3, #0
 801221a:	bfc2      	ittt	gt
 801221c:	1aed      	subgt	r5, r5, r3
 801221e:	1af6      	subgt	r6, r6, r3
 8012220:	1aff      	subgt	r7, r7, r3
 8012222:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8012224:	2b00      	cmp	r3, #0
 8012226:	dd16      	ble.n	8012256 <_strtod_l+0x736>
 8012228:	4641      	mov	r1, r8
 801222a:	9805      	ldr	r0, [sp, #20]
 801222c:	461a      	mov	r2, r3
 801222e:	f7ff f9a5 	bl	801157c <__pow5mult>
 8012232:	4680      	mov	r8, r0
 8012234:	2800      	cmp	r0, #0
 8012236:	d0ba      	beq.n	80121ae <_strtod_l+0x68e>
 8012238:	4601      	mov	r1, r0
 801223a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801223c:	9805      	ldr	r0, [sp, #20]
 801223e:	f7ff f8f3 	bl	8011428 <__multiply>
 8012242:	900e      	str	r0, [sp, #56]	@ 0x38
 8012244:	2800      	cmp	r0, #0
 8012246:	f43f ae8a 	beq.w	8011f5e <_strtod_l+0x43e>
 801224a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801224c:	9805      	ldr	r0, [sp, #20]
 801224e:	f7fe ffd7 	bl	8011200 <_Bfree>
 8012252:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012254:	931a      	str	r3, [sp, #104]	@ 0x68
 8012256:	2d00      	cmp	r5, #0
 8012258:	dc1d      	bgt.n	8012296 <_strtod_l+0x776>
 801225a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801225c:	2b00      	cmp	r3, #0
 801225e:	dd23      	ble.n	80122a8 <_strtod_l+0x788>
 8012260:	4649      	mov	r1, r9
 8012262:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8012264:	9805      	ldr	r0, [sp, #20]
 8012266:	f7ff f989 	bl	801157c <__pow5mult>
 801226a:	4681      	mov	r9, r0
 801226c:	b9e0      	cbnz	r0, 80122a8 <_strtod_l+0x788>
 801226e:	f04f 0900 	mov.w	r9, #0
 8012272:	e674      	b.n	8011f5e <_strtod_l+0x43e>
 8012274:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8012278:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 801227c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8012280:	35e2      	adds	r5, #226	@ 0xe2
 8012282:	fa01 f305 	lsl.w	r3, r1, r5
 8012286:	9310      	str	r3, [sp, #64]	@ 0x40
 8012288:	9113      	str	r1, [sp, #76]	@ 0x4c
 801228a:	e7ba      	b.n	8012202 <_strtod_l+0x6e2>
 801228c:	2300      	movs	r3, #0
 801228e:	9310      	str	r3, [sp, #64]	@ 0x40
 8012290:	2301      	movs	r3, #1
 8012292:	9313      	str	r3, [sp, #76]	@ 0x4c
 8012294:	e7b5      	b.n	8012202 <_strtod_l+0x6e2>
 8012296:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8012298:	9805      	ldr	r0, [sp, #20]
 801229a:	462a      	mov	r2, r5
 801229c:	f7ff f9c8 	bl	8011630 <__lshift>
 80122a0:	901a      	str	r0, [sp, #104]	@ 0x68
 80122a2:	2800      	cmp	r0, #0
 80122a4:	d1d9      	bne.n	801225a <_strtod_l+0x73a>
 80122a6:	e65a      	b.n	8011f5e <_strtod_l+0x43e>
 80122a8:	2e00      	cmp	r6, #0
 80122aa:	dd07      	ble.n	80122bc <_strtod_l+0x79c>
 80122ac:	4649      	mov	r1, r9
 80122ae:	9805      	ldr	r0, [sp, #20]
 80122b0:	4632      	mov	r2, r6
 80122b2:	f7ff f9bd 	bl	8011630 <__lshift>
 80122b6:	4681      	mov	r9, r0
 80122b8:	2800      	cmp	r0, #0
 80122ba:	d0d8      	beq.n	801226e <_strtod_l+0x74e>
 80122bc:	2f00      	cmp	r7, #0
 80122be:	dd08      	ble.n	80122d2 <_strtod_l+0x7b2>
 80122c0:	4641      	mov	r1, r8
 80122c2:	9805      	ldr	r0, [sp, #20]
 80122c4:	463a      	mov	r2, r7
 80122c6:	f7ff f9b3 	bl	8011630 <__lshift>
 80122ca:	4680      	mov	r8, r0
 80122cc:	2800      	cmp	r0, #0
 80122ce:	f43f ae46 	beq.w	8011f5e <_strtod_l+0x43e>
 80122d2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80122d4:	9805      	ldr	r0, [sp, #20]
 80122d6:	464a      	mov	r2, r9
 80122d8:	f7ff fa32 	bl	8011740 <__mdiff>
 80122dc:	4604      	mov	r4, r0
 80122de:	2800      	cmp	r0, #0
 80122e0:	f43f ae3d 	beq.w	8011f5e <_strtod_l+0x43e>
 80122e4:	68c3      	ldr	r3, [r0, #12]
 80122e6:	930f      	str	r3, [sp, #60]	@ 0x3c
 80122e8:	2300      	movs	r3, #0
 80122ea:	60c3      	str	r3, [r0, #12]
 80122ec:	4641      	mov	r1, r8
 80122ee:	f7ff fa0b 	bl	8011708 <__mcmp>
 80122f2:	2800      	cmp	r0, #0
 80122f4:	da46      	bge.n	8012384 <_strtod_l+0x864>
 80122f6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80122f8:	ea53 030a 	orrs.w	r3, r3, sl
 80122fc:	d16c      	bne.n	80123d8 <_strtod_l+0x8b8>
 80122fe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8012302:	2b00      	cmp	r3, #0
 8012304:	d168      	bne.n	80123d8 <_strtod_l+0x8b8>
 8012306:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801230a:	0d1b      	lsrs	r3, r3, #20
 801230c:	051b      	lsls	r3, r3, #20
 801230e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8012312:	d961      	bls.n	80123d8 <_strtod_l+0x8b8>
 8012314:	6963      	ldr	r3, [r4, #20]
 8012316:	b913      	cbnz	r3, 801231e <_strtod_l+0x7fe>
 8012318:	6923      	ldr	r3, [r4, #16]
 801231a:	2b01      	cmp	r3, #1
 801231c:	dd5c      	ble.n	80123d8 <_strtod_l+0x8b8>
 801231e:	4621      	mov	r1, r4
 8012320:	2201      	movs	r2, #1
 8012322:	9805      	ldr	r0, [sp, #20]
 8012324:	f7ff f984 	bl	8011630 <__lshift>
 8012328:	4641      	mov	r1, r8
 801232a:	4604      	mov	r4, r0
 801232c:	f7ff f9ec 	bl	8011708 <__mcmp>
 8012330:	2800      	cmp	r0, #0
 8012332:	dd51      	ble.n	80123d8 <_strtod_l+0x8b8>
 8012334:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8012338:	9a08      	ldr	r2, [sp, #32]
 801233a:	0d1b      	lsrs	r3, r3, #20
 801233c:	051b      	lsls	r3, r3, #20
 801233e:	2a00      	cmp	r2, #0
 8012340:	d06b      	beq.n	801241a <_strtod_l+0x8fa>
 8012342:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8012346:	d868      	bhi.n	801241a <_strtod_l+0x8fa>
 8012348:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 801234c:	f67f ae9d 	bls.w	801208a <_strtod_l+0x56a>
 8012350:	4b0a      	ldr	r3, [pc, #40]	@ (801237c <_strtod_l+0x85c>)
 8012352:	4650      	mov	r0, sl
 8012354:	4659      	mov	r1, fp
 8012356:	2200      	movs	r2, #0
 8012358:	f7ee f926 	bl	80005a8 <__aeabi_dmul>
 801235c:	4b08      	ldr	r3, [pc, #32]	@ (8012380 <_strtod_l+0x860>)
 801235e:	400b      	ands	r3, r1
 8012360:	4682      	mov	sl, r0
 8012362:	468b      	mov	fp, r1
 8012364:	2b00      	cmp	r3, #0
 8012366:	f47f ae05 	bne.w	8011f74 <_strtod_l+0x454>
 801236a:	9a05      	ldr	r2, [sp, #20]
 801236c:	2322      	movs	r3, #34	@ 0x22
 801236e:	6013      	str	r3, [r2, #0]
 8012370:	e600      	b.n	8011f74 <_strtod_l+0x454>
 8012372:	bf00      	nop
 8012374:	080184a0 	.word	0x080184a0
 8012378:	fffffc02 	.word	0xfffffc02
 801237c:	39500000 	.word	0x39500000
 8012380:	7ff00000 	.word	0x7ff00000
 8012384:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8012388:	d165      	bne.n	8012456 <_strtod_l+0x936>
 801238a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801238c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8012390:	b35a      	cbz	r2, 80123ea <_strtod_l+0x8ca>
 8012392:	4a9f      	ldr	r2, [pc, #636]	@ (8012610 <_strtod_l+0xaf0>)
 8012394:	4293      	cmp	r3, r2
 8012396:	d12b      	bne.n	80123f0 <_strtod_l+0x8d0>
 8012398:	9b08      	ldr	r3, [sp, #32]
 801239a:	4651      	mov	r1, sl
 801239c:	b303      	cbz	r3, 80123e0 <_strtod_l+0x8c0>
 801239e:	4b9d      	ldr	r3, [pc, #628]	@ (8012614 <_strtod_l+0xaf4>)
 80123a0:	465a      	mov	r2, fp
 80123a2:	4013      	ands	r3, r2
 80123a4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80123a8:	f04f 32ff 	mov.w	r2, #4294967295
 80123ac:	d81b      	bhi.n	80123e6 <_strtod_l+0x8c6>
 80123ae:	0d1b      	lsrs	r3, r3, #20
 80123b0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80123b4:	fa02 f303 	lsl.w	r3, r2, r3
 80123b8:	4299      	cmp	r1, r3
 80123ba:	d119      	bne.n	80123f0 <_strtod_l+0x8d0>
 80123bc:	4b96      	ldr	r3, [pc, #600]	@ (8012618 <_strtod_l+0xaf8>)
 80123be:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80123c0:	429a      	cmp	r2, r3
 80123c2:	d102      	bne.n	80123ca <_strtod_l+0x8aa>
 80123c4:	3101      	adds	r1, #1
 80123c6:	f43f adca 	beq.w	8011f5e <_strtod_l+0x43e>
 80123ca:	4b92      	ldr	r3, [pc, #584]	@ (8012614 <_strtod_l+0xaf4>)
 80123cc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80123ce:	401a      	ands	r2, r3
 80123d0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80123d4:	f04f 0a00 	mov.w	sl, #0
 80123d8:	9b08      	ldr	r3, [sp, #32]
 80123da:	2b00      	cmp	r3, #0
 80123dc:	d1b8      	bne.n	8012350 <_strtod_l+0x830>
 80123de:	e5c9      	b.n	8011f74 <_strtod_l+0x454>
 80123e0:	f04f 33ff 	mov.w	r3, #4294967295
 80123e4:	e7e8      	b.n	80123b8 <_strtod_l+0x898>
 80123e6:	4613      	mov	r3, r2
 80123e8:	e7e6      	b.n	80123b8 <_strtod_l+0x898>
 80123ea:	ea53 030a 	orrs.w	r3, r3, sl
 80123ee:	d0a1      	beq.n	8012334 <_strtod_l+0x814>
 80123f0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80123f2:	b1db      	cbz	r3, 801242c <_strtod_l+0x90c>
 80123f4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80123f6:	4213      	tst	r3, r2
 80123f8:	d0ee      	beq.n	80123d8 <_strtod_l+0x8b8>
 80123fa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80123fc:	9a08      	ldr	r2, [sp, #32]
 80123fe:	4650      	mov	r0, sl
 8012400:	4659      	mov	r1, fp
 8012402:	b1bb      	cbz	r3, 8012434 <_strtod_l+0x914>
 8012404:	f7ff fb6e 	bl	8011ae4 <sulp>
 8012408:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801240c:	ec53 2b10 	vmov	r2, r3, d0
 8012410:	f7ed ff14 	bl	800023c <__adddf3>
 8012414:	4682      	mov	sl, r0
 8012416:	468b      	mov	fp, r1
 8012418:	e7de      	b.n	80123d8 <_strtod_l+0x8b8>
 801241a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 801241e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8012422:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8012426:	f04f 3aff 	mov.w	sl, #4294967295
 801242a:	e7d5      	b.n	80123d8 <_strtod_l+0x8b8>
 801242c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801242e:	ea13 0f0a 	tst.w	r3, sl
 8012432:	e7e1      	b.n	80123f8 <_strtod_l+0x8d8>
 8012434:	f7ff fb56 	bl	8011ae4 <sulp>
 8012438:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801243c:	ec53 2b10 	vmov	r2, r3, d0
 8012440:	f7ed fefa 	bl	8000238 <__aeabi_dsub>
 8012444:	2200      	movs	r2, #0
 8012446:	2300      	movs	r3, #0
 8012448:	4682      	mov	sl, r0
 801244a:	468b      	mov	fp, r1
 801244c:	f7ee fb14 	bl	8000a78 <__aeabi_dcmpeq>
 8012450:	2800      	cmp	r0, #0
 8012452:	d0c1      	beq.n	80123d8 <_strtod_l+0x8b8>
 8012454:	e619      	b.n	801208a <_strtod_l+0x56a>
 8012456:	4641      	mov	r1, r8
 8012458:	4620      	mov	r0, r4
 801245a:	f7ff facd 	bl	80119f8 <__ratio>
 801245e:	ec57 6b10 	vmov	r6, r7, d0
 8012462:	2200      	movs	r2, #0
 8012464:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8012468:	4630      	mov	r0, r6
 801246a:	4639      	mov	r1, r7
 801246c:	f7ee fb18 	bl	8000aa0 <__aeabi_dcmple>
 8012470:	2800      	cmp	r0, #0
 8012472:	d06f      	beq.n	8012554 <_strtod_l+0xa34>
 8012474:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012476:	2b00      	cmp	r3, #0
 8012478:	d17a      	bne.n	8012570 <_strtod_l+0xa50>
 801247a:	f1ba 0f00 	cmp.w	sl, #0
 801247e:	d158      	bne.n	8012532 <_strtod_l+0xa12>
 8012480:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012482:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012486:	2b00      	cmp	r3, #0
 8012488:	d15a      	bne.n	8012540 <_strtod_l+0xa20>
 801248a:	4b64      	ldr	r3, [pc, #400]	@ (801261c <_strtod_l+0xafc>)
 801248c:	2200      	movs	r2, #0
 801248e:	4630      	mov	r0, r6
 8012490:	4639      	mov	r1, r7
 8012492:	f7ee fafb 	bl	8000a8c <__aeabi_dcmplt>
 8012496:	2800      	cmp	r0, #0
 8012498:	d159      	bne.n	801254e <_strtod_l+0xa2e>
 801249a:	4630      	mov	r0, r6
 801249c:	4639      	mov	r1, r7
 801249e:	4b60      	ldr	r3, [pc, #384]	@ (8012620 <_strtod_l+0xb00>)
 80124a0:	2200      	movs	r2, #0
 80124a2:	f7ee f881 	bl	80005a8 <__aeabi_dmul>
 80124a6:	4606      	mov	r6, r0
 80124a8:	460f      	mov	r7, r1
 80124aa:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 80124ae:	9606      	str	r6, [sp, #24]
 80124b0:	9307      	str	r3, [sp, #28]
 80124b2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80124b6:	4d57      	ldr	r5, [pc, #348]	@ (8012614 <_strtod_l+0xaf4>)
 80124b8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80124bc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80124be:	401d      	ands	r5, r3
 80124c0:	4b58      	ldr	r3, [pc, #352]	@ (8012624 <_strtod_l+0xb04>)
 80124c2:	429d      	cmp	r5, r3
 80124c4:	f040 80b2 	bne.w	801262c <_strtod_l+0xb0c>
 80124c8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80124ca:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80124ce:	ec4b ab10 	vmov	d0, sl, fp
 80124d2:	f7ff f9c9 	bl	8011868 <__ulp>
 80124d6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80124da:	ec51 0b10 	vmov	r0, r1, d0
 80124de:	f7ee f863 	bl	80005a8 <__aeabi_dmul>
 80124e2:	4652      	mov	r2, sl
 80124e4:	465b      	mov	r3, fp
 80124e6:	f7ed fea9 	bl	800023c <__adddf3>
 80124ea:	460b      	mov	r3, r1
 80124ec:	4949      	ldr	r1, [pc, #292]	@ (8012614 <_strtod_l+0xaf4>)
 80124ee:	4a4e      	ldr	r2, [pc, #312]	@ (8012628 <_strtod_l+0xb08>)
 80124f0:	4019      	ands	r1, r3
 80124f2:	4291      	cmp	r1, r2
 80124f4:	4682      	mov	sl, r0
 80124f6:	d942      	bls.n	801257e <_strtod_l+0xa5e>
 80124f8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80124fa:	4b47      	ldr	r3, [pc, #284]	@ (8012618 <_strtod_l+0xaf8>)
 80124fc:	429a      	cmp	r2, r3
 80124fe:	d103      	bne.n	8012508 <_strtod_l+0x9e8>
 8012500:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012502:	3301      	adds	r3, #1
 8012504:	f43f ad2b 	beq.w	8011f5e <_strtod_l+0x43e>
 8012508:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8012618 <_strtod_l+0xaf8>
 801250c:	f04f 3aff 	mov.w	sl, #4294967295
 8012510:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8012512:	9805      	ldr	r0, [sp, #20]
 8012514:	f7fe fe74 	bl	8011200 <_Bfree>
 8012518:	9805      	ldr	r0, [sp, #20]
 801251a:	4649      	mov	r1, r9
 801251c:	f7fe fe70 	bl	8011200 <_Bfree>
 8012520:	9805      	ldr	r0, [sp, #20]
 8012522:	4641      	mov	r1, r8
 8012524:	f7fe fe6c 	bl	8011200 <_Bfree>
 8012528:	9805      	ldr	r0, [sp, #20]
 801252a:	4621      	mov	r1, r4
 801252c:	f7fe fe68 	bl	8011200 <_Bfree>
 8012530:	e618      	b.n	8012164 <_strtod_l+0x644>
 8012532:	f1ba 0f01 	cmp.w	sl, #1
 8012536:	d103      	bne.n	8012540 <_strtod_l+0xa20>
 8012538:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801253a:	2b00      	cmp	r3, #0
 801253c:	f43f ada5 	beq.w	801208a <_strtod_l+0x56a>
 8012540:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 80125f0 <_strtod_l+0xad0>
 8012544:	4f35      	ldr	r7, [pc, #212]	@ (801261c <_strtod_l+0xafc>)
 8012546:	ed8d 7b06 	vstr	d7, [sp, #24]
 801254a:	2600      	movs	r6, #0
 801254c:	e7b1      	b.n	80124b2 <_strtod_l+0x992>
 801254e:	4f34      	ldr	r7, [pc, #208]	@ (8012620 <_strtod_l+0xb00>)
 8012550:	2600      	movs	r6, #0
 8012552:	e7aa      	b.n	80124aa <_strtod_l+0x98a>
 8012554:	4b32      	ldr	r3, [pc, #200]	@ (8012620 <_strtod_l+0xb00>)
 8012556:	4630      	mov	r0, r6
 8012558:	4639      	mov	r1, r7
 801255a:	2200      	movs	r2, #0
 801255c:	f7ee f824 	bl	80005a8 <__aeabi_dmul>
 8012560:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012562:	4606      	mov	r6, r0
 8012564:	460f      	mov	r7, r1
 8012566:	2b00      	cmp	r3, #0
 8012568:	d09f      	beq.n	80124aa <_strtod_l+0x98a>
 801256a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 801256e:	e7a0      	b.n	80124b2 <_strtod_l+0x992>
 8012570:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 80125f8 <_strtod_l+0xad8>
 8012574:	ed8d 7b06 	vstr	d7, [sp, #24]
 8012578:	ec57 6b17 	vmov	r6, r7, d7
 801257c:	e799      	b.n	80124b2 <_strtod_l+0x992>
 801257e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8012582:	9b08      	ldr	r3, [sp, #32]
 8012584:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8012588:	2b00      	cmp	r3, #0
 801258a:	d1c1      	bne.n	8012510 <_strtod_l+0x9f0>
 801258c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8012590:	0d1b      	lsrs	r3, r3, #20
 8012592:	051b      	lsls	r3, r3, #20
 8012594:	429d      	cmp	r5, r3
 8012596:	d1bb      	bne.n	8012510 <_strtod_l+0x9f0>
 8012598:	4630      	mov	r0, r6
 801259a:	4639      	mov	r1, r7
 801259c:	f7ee fb64 	bl	8000c68 <__aeabi_d2lz>
 80125a0:	f7ed ffd4 	bl	800054c <__aeabi_l2d>
 80125a4:	4602      	mov	r2, r0
 80125a6:	460b      	mov	r3, r1
 80125a8:	4630      	mov	r0, r6
 80125aa:	4639      	mov	r1, r7
 80125ac:	f7ed fe44 	bl	8000238 <__aeabi_dsub>
 80125b0:	460b      	mov	r3, r1
 80125b2:	4602      	mov	r2, r0
 80125b4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80125b8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80125bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80125be:	ea46 060a 	orr.w	r6, r6, sl
 80125c2:	431e      	orrs	r6, r3
 80125c4:	d06f      	beq.n	80126a6 <_strtod_l+0xb86>
 80125c6:	a30e      	add	r3, pc, #56	@ (adr r3, 8012600 <_strtod_l+0xae0>)
 80125c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125cc:	f7ee fa5e 	bl	8000a8c <__aeabi_dcmplt>
 80125d0:	2800      	cmp	r0, #0
 80125d2:	f47f accf 	bne.w	8011f74 <_strtod_l+0x454>
 80125d6:	a30c      	add	r3, pc, #48	@ (adr r3, 8012608 <_strtod_l+0xae8>)
 80125d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125dc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80125e0:	f7ee fa72 	bl	8000ac8 <__aeabi_dcmpgt>
 80125e4:	2800      	cmp	r0, #0
 80125e6:	d093      	beq.n	8012510 <_strtod_l+0x9f0>
 80125e8:	e4c4      	b.n	8011f74 <_strtod_l+0x454>
 80125ea:	bf00      	nop
 80125ec:	f3af 8000 	nop.w
 80125f0:	00000000 	.word	0x00000000
 80125f4:	bff00000 	.word	0xbff00000
 80125f8:	00000000 	.word	0x00000000
 80125fc:	3ff00000 	.word	0x3ff00000
 8012600:	94a03595 	.word	0x94a03595
 8012604:	3fdfffff 	.word	0x3fdfffff
 8012608:	35afe535 	.word	0x35afe535
 801260c:	3fe00000 	.word	0x3fe00000
 8012610:	000fffff 	.word	0x000fffff
 8012614:	7ff00000 	.word	0x7ff00000
 8012618:	7fefffff 	.word	0x7fefffff
 801261c:	3ff00000 	.word	0x3ff00000
 8012620:	3fe00000 	.word	0x3fe00000
 8012624:	7fe00000 	.word	0x7fe00000
 8012628:	7c9fffff 	.word	0x7c9fffff
 801262c:	9b08      	ldr	r3, [sp, #32]
 801262e:	b323      	cbz	r3, 801267a <_strtod_l+0xb5a>
 8012630:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8012634:	d821      	bhi.n	801267a <_strtod_l+0xb5a>
 8012636:	a328      	add	r3, pc, #160	@ (adr r3, 80126d8 <_strtod_l+0xbb8>)
 8012638:	e9d3 2300 	ldrd	r2, r3, [r3]
 801263c:	4630      	mov	r0, r6
 801263e:	4639      	mov	r1, r7
 8012640:	f7ee fa2e 	bl	8000aa0 <__aeabi_dcmple>
 8012644:	b1a0      	cbz	r0, 8012670 <_strtod_l+0xb50>
 8012646:	4639      	mov	r1, r7
 8012648:	4630      	mov	r0, r6
 801264a:	f7ee fa85 	bl	8000b58 <__aeabi_d2uiz>
 801264e:	2801      	cmp	r0, #1
 8012650:	bf38      	it	cc
 8012652:	2001      	movcc	r0, #1
 8012654:	f7ed ff2e 	bl	80004b4 <__aeabi_ui2d>
 8012658:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801265a:	4606      	mov	r6, r0
 801265c:	460f      	mov	r7, r1
 801265e:	b9fb      	cbnz	r3, 80126a0 <_strtod_l+0xb80>
 8012660:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8012664:	9014      	str	r0, [sp, #80]	@ 0x50
 8012666:	9315      	str	r3, [sp, #84]	@ 0x54
 8012668:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 801266c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8012670:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8012672:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8012676:	1b5b      	subs	r3, r3, r5
 8012678:	9311      	str	r3, [sp, #68]	@ 0x44
 801267a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801267e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8012682:	f7ff f8f1 	bl	8011868 <__ulp>
 8012686:	4650      	mov	r0, sl
 8012688:	ec53 2b10 	vmov	r2, r3, d0
 801268c:	4659      	mov	r1, fp
 801268e:	f7ed ff8b 	bl	80005a8 <__aeabi_dmul>
 8012692:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8012696:	f7ed fdd1 	bl	800023c <__adddf3>
 801269a:	4682      	mov	sl, r0
 801269c:	468b      	mov	fp, r1
 801269e:	e770      	b.n	8012582 <_strtod_l+0xa62>
 80126a0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80126a4:	e7e0      	b.n	8012668 <_strtod_l+0xb48>
 80126a6:	a30e      	add	r3, pc, #56	@ (adr r3, 80126e0 <_strtod_l+0xbc0>)
 80126a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126ac:	f7ee f9ee 	bl	8000a8c <__aeabi_dcmplt>
 80126b0:	e798      	b.n	80125e4 <_strtod_l+0xac4>
 80126b2:	2300      	movs	r3, #0
 80126b4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80126b6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80126b8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80126ba:	6013      	str	r3, [r2, #0]
 80126bc:	f7ff ba6d 	b.w	8011b9a <_strtod_l+0x7a>
 80126c0:	2a65      	cmp	r2, #101	@ 0x65
 80126c2:	f43f ab66 	beq.w	8011d92 <_strtod_l+0x272>
 80126c6:	2a45      	cmp	r2, #69	@ 0x45
 80126c8:	f43f ab63 	beq.w	8011d92 <_strtod_l+0x272>
 80126cc:	2301      	movs	r3, #1
 80126ce:	f7ff bb9e 	b.w	8011e0e <_strtod_l+0x2ee>
 80126d2:	bf00      	nop
 80126d4:	f3af 8000 	nop.w
 80126d8:	ffc00000 	.word	0xffc00000
 80126dc:	41dfffff 	.word	0x41dfffff
 80126e0:	94a03595 	.word	0x94a03595
 80126e4:	3fcfffff 	.word	0x3fcfffff

080126e8 <_strtod_r>:
 80126e8:	4b01      	ldr	r3, [pc, #4]	@ (80126f0 <_strtod_r+0x8>)
 80126ea:	f7ff ba19 	b.w	8011b20 <_strtod_l>
 80126ee:	bf00      	nop
 80126f0:	20000190 	.word	0x20000190

080126f4 <__ssputs_r>:
 80126f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80126f8:	688e      	ldr	r6, [r1, #8]
 80126fa:	461f      	mov	r7, r3
 80126fc:	42be      	cmp	r6, r7
 80126fe:	680b      	ldr	r3, [r1, #0]
 8012700:	4682      	mov	sl, r0
 8012702:	460c      	mov	r4, r1
 8012704:	4690      	mov	r8, r2
 8012706:	d82d      	bhi.n	8012764 <__ssputs_r+0x70>
 8012708:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801270c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8012710:	d026      	beq.n	8012760 <__ssputs_r+0x6c>
 8012712:	6965      	ldr	r5, [r4, #20]
 8012714:	6909      	ldr	r1, [r1, #16]
 8012716:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801271a:	eba3 0901 	sub.w	r9, r3, r1
 801271e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012722:	1c7b      	adds	r3, r7, #1
 8012724:	444b      	add	r3, r9
 8012726:	106d      	asrs	r5, r5, #1
 8012728:	429d      	cmp	r5, r3
 801272a:	bf38      	it	cc
 801272c:	461d      	movcc	r5, r3
 801272e:	0553      	lsls	r3, r2, #21
 8012730:	d527      	bpl.n	8012782 <__ssputs_r+0x8e>
 8012732:	4629      	mov	r1, r5
 8012734:	f7fe fc98 	bl	8011068 <_malloc_r>
 8012738:	4606      	mov	r6, r0
 801273a:	b360      	cbz	r0, 8012796 <__ssputs_r+0xa2>
 801273c:	6921      	ldr	r1, [r4, #16]
 801273e:	464a      	mov	r2, r9
 8012740:	f7fd fdbd 	bl	80102be <memcpy>
 8012744:	89a3      	ldrh	r3, [r4, #12]
 8012746:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801274a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801274e:	81a3      	strh	r3, [r4, #12]
 8012750:	6126      	str	r6, [r4, #16]
 8012752:	6165      	str	r5, [r4, #20]
 8012754:	444e      	add	r6, r9
 8012756:	eba5 0509 	sub.w	r5, r5, r9
 801275a:	6026      	str	r6, [r4, #0]
 801275c:	60a5      	str	r5, [r4, #8]
 801275e:	463e      	mov	r6, r7
 8012760:	42be      	cmp	r6, r7
 8012762:	d900      	bls.n	8012766 <__ssputs_r+0x72>
 8012764:	463e      	mov	r6, r7
 8012766:	6820      	ldr	r0, [r4, #0]
 8012768:	4632      	mov	r2, r6
 801276a:	4641      	mov	r1, r8
 801276c:	f000 f9c6 	bl	8012afc <memmove>
 8012770:	68a3      	ldr	r3, [r4, #8]
 8012772:	1b9b      	subs	r3, r3, r6
 8012774:	60a3      	str	r3, [r4, #8]
 8012776:	6823      	ldr	r3, [r4, #0]
 8012778:	4433      	add	r3, r6
 801277a:	6023      	str	r3, [r4, #0]
 801277c:	2000      	movs	r0, #0
 801277e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012782:	462a      	mov	r2, r5
 8012784:	f000 fd7d 	bl	8013282 <_realloc_r>
 8012788:	4606      	mov	r6, r0
 801278a:	2800      	cmp	r0, #0
 801278c:	d1e0      	bne.n	8012750 <__ssputs_r+0x5c>
 801278e:	6921      	ldr	r1, [r4, #16]
 8012790:	4650      	mov	r0, sl
 8012792:	f7fe fbf5 	bl	8010f80 <_free_r>
 8012796:	230c      	movs	r3, #12
 8012798:	f8ca 3000 	str.w	r3, [sl]
 801279c:	89a3      	ldrh	r3, [r4, #12]
 801279e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80127a2:	81a3      	strh	r3, [r4, #12]
 80127a4:	f04f 30ff 	mov.w	r0, #4294967295
 80127a8:	e7e9      	b.n	801277e <__ssputs_r+0x8a>
	...

080127ac <_svfiprintf_r>:
 80127ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80127b0:	4698      	mov	r8, r3
 80127b2:	898b      	ldrh	r3, [r1, #12]
 80127b4:	061b      	lsls	r3, r3, #24
 80127b6:	b09d      	sub	sp, #116	@ 0x74
 80127b8:	4607      	mov	r7, r0
 80127ba:	460d      	mov	r5, r1
 80127bc:	4614      	mov	r4, r2
 80127be:	d510      	bpl.n	80127e2 <_svfiprintf_r+0x36>
 80127c0:	690b      	ldr	r3, [r1, #16]
 80127c2:	b973      	cbnz	r3, 80127e2 <_svfiprintf_r+0x36>
 80127c4:	2140      	movs	r1, #64	@ 0x40
 80127c6:	f7fe fc4f 	bl	8011068 <_malloc_r>
 80127ca:	6028      	str	r0, [r5, #0]
 80127cc:	6128      	str	r0, [r5, #16]
 80127ce:	b930      	cbnz	r0, 80127de <_svfiprintf_r+0x32>
 80127d0:	230c      	movs	r3, #12
 80127d2:	603b      	str	r3, [r7, #0]
 80127d4:	f04f 30ff 	mov.w	r0, #4294967295
 80127d8:	b01d      	add	sp, #116	@ 0x74
 80127da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80127de:	2340      	movs	r3, #64	@ 0x40
 80127e0:	616b      	str	r3, [r5, #20]
 80127e2:	2300      	movs	r3, #0
 80127e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80127e6:	2320      	movs	r3, #32
 80127e8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80127ec:	f8cd 800c 	str.w	r8, [sp, #12]
 80127f0:	2330      	movs	r3, #48	@ 0x30
 80127f2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8012990 <_svfiprintf_r+0x1e4>
 80127f6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80127fa:	f04f 0901 	mov.w	r9, #1
 80127fe:	4623      	mov	r3, r4
 8012800:	469a      	mov	sl, r3
 8012802:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012806:	b10a      	cbz	r2, 801280c <_svfiprintf_r+0x60>
 8012808:	2a25      	cmp	r2, #37	@ 0x25
 801280a:	d1f9      	bne.n	8012800 <_svfiprintf_r+0x54>
 801280c:	ebba 0b04 	subs.w	fp, sl, r4
 8012810:	d00b      	beq.n	801282a <_svfiprintf_r+0x7e>
 8012812:	465b      	mov	r3, fp
 8012814:	4622      	mov	r2, r4
 8012816:	4629      	mov	r1, r5
 8012818:	4638      	mov	r0, r7
 801281a:	f7ff ff6b 	bl	80126f4 <__ssputs_r>
 801281e:	3001      	adds	r0, #1
 8012820:	f000 80a7 	beq.w	8012972 <_svfiprintf_r+0x1c6>
 8012824:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012826:	445a      	add	r2, fp
 8012828:	9209      	str	r2, [sp, #36]	@ 0x24
 801282a:	f89a 3000 	ldrb.w	r3, [sl]
 801282e:	2b00      	cmp	r3, #0
 8012830:	f000 809f 	beq.w	8012972 <_svfiprintf_r+0x1c6>
 8012834:	2300      	movs	r3, #0
 8012836:	f04f 32ff 	mov.w	r2, #4294967295
 801283a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801283e:	f10a 0a01 	add.w	sl, sl, #1
 8012842:	9304      	str	r3, [sp, #16]
 8012844:	9307      	str	r3, [sp, #28]
 8012846:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801284a:	931a      	str	r3, [sp, #104]	@ 0x68
 801284c:	4654      	mov	r4, sl
 801284e:	2205      	movs	r2, #5
 8012850:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012854:	484e      	ldr	r0, [pc, #312]	@ (8012990 <_svfiprintf_r+0x1e4>)
 8012856:	f7ed fc93 	bl	8000180 <memchr>
 801285a:	9a04      	ldr	r2, [sp, #16]
 801285c:	b9d8      	cbnz	r0, 8012896 <_svfiprintf_r+0xea>
 801285e:	06d0      	lsls	r0, r2, #27
 8012860:	bf44      	itt	mi
 8012862:	2320      	movmi	r3, #32
 8012864:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012868:	0711      	lsls	r1, r2, #28
 801286a:	bf44      	itt	mi
 801286c:	232b      	movmi	r3, #43	@ 0x2b
 801286e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012872:	f89a 3000 	ldrb.w	r3, [sl]
 8012876:	2b2a      	cmp	r3, #42	@ 0x2a
 8012878:	d015      	beq.n	80128a6 <_svfiprintf_r+0xfa>
 801287a:	9a07      	ldr	r2, [sp, #28]
 801287c:	4654      	mov	r4, sl
 801287e:	2000      	movs	r0, #0
 8012880:	f04f 0c0a 	mov.w	ip, #10
 8012884:	4621      	mov	r1, r4
 8012886:	f811 3b01 	ldrb.w	r3, [r1], #1
 801288a:	3b30      	subs	r3, #48	@ 0x30
 801288c:	2b09      	cmp	r3, #9
 801288e:	d94b      	bls.n	8012928 <_svfiprintf_r+0x17c>
 8012890:	b1b0      	cbz	r0, 80128c0 <_svfiprintf_r+0x114>
 8012892:	9207      	str	r2, [sp, #28]
 8012894:	e014      	b.n	80128c0 <_svfiprintf_r+0x114>
 8012896:	eba0 0308 	sub.w	r3, r0, r8
 801289a:	fa09 f303 	lsl.w	r3, r9, r3
 801289e:	4313      	orrs	r3, r2
 80128a0:	9304      	str	r3, [sp, #16]
 80128a2:	46a2      	mov	sl, r4
 80128a4:	e7d2      	b.n	801284c <_svfiprintf_r+0xa0>
 80128a6:	9b03      	ldr	r3, [sp, #12]
 80128a8:	1d19      	adds	r1, r3, #4
 80128aa:	681b      	ldr	r3, [r3, #0]
 80128ac:	9103      	str	r1, [sp, #12]
 80128ae:	2b00      	cmp	r3, #0
 80128b0:	bfbb      	ittet	lt
 80128b2:	425b      	neglt	r3, r3
 80128b4:	f042 0202 	orrlt.w	r2, r2, #2
 80128b8:	9307      	strge	r3, [sp, #28]
 80128ba:	9307      	strlt	r3, [sp, #28]
 80128bc:	bfb8      	it	lt
 80128be:	9204      	strlt	r2, [sp, #16]
 80128c0:	7823      	ldrb	r3, [r4, #0]
 80128c2:	2b2e      	cmp	r3, #46	@ 0x2e
 80128c4:	d10a      	bne.n	80128dc <_svfiprintf_r+0x130>
 80128c6:	7863      	ldrb	r3, [r4, #1]
 80128c8:	2b2a      	cmp	r3, #42	@ 0x2a
 80128ca:	d132      	bne.n	8012932 <_svfiprintf_r+0x186>
 80128cc:	9b03      	ldr	r3, [sp, #12]
 80128ce:	1d1a      	adds	r2, r3, #4
 80128d0:	681b      	ldr	r3, [r3, #0]
 80128d2:	9203      	str	r2, [sp, #12]
 80128d4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80128d8:	3402      	adds	r4, #2
 80128da:	9305      	str	r3, [sp, #20]
 80128dc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80129a0 <_svfiprintf_r+0x1f4>
 80128e0:	7821      	ldrb	r1, [r4, #0]
 80128e2:	2203      	movs	r2, #3
 80128e4:	4650      	mov	r0, sl
 80128e6:	f7ed fc4b 	bl	8000180 <memchr>
 80128ea:	b138      	cbz	r0, 80128fc <_svfiprintf_r+0x150>
 80128ec:	9b04      	ldr	r3, [sp, #16]
 80128ee:	eba0 000a 	sub.w	r0, r0, sl
 80128f2:	2240      	movs	r2, #64	@ 0x40
 80128f4:	4082      	lsls	r2, r0
 80128f6:	4313      	orrs	r3, r2
 80128f8:	3401      	adds	r4, #1
 80128fa:	9304      	str	r3, [sp, #16]
 80128fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012900:	4824      	ldr	r0, [pc, #144]	@ (8012994 <_svfiprintf_r+0x1e8>)
 8012902:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012906:	2206      	movs	r2, #6
 8012908:	f7ed fc3a 	bl	8000180 <memchr>
 801290c:	2800      	cmp	r0, #0
 801290e:	d036      	beq.n	801297e <_svfiprintf_r+0x1d2>
 8012910:	4b21      	ldr	r3, [pc, #132]	@ (8012998 <_svfiprintf_r+0x1ec>)
 8012912:	bb1b      	cbnz	r3, 801295c <_svfiprintf_r+0x1b0>
 8012914:	9b03      	ldr	r3, [sp, #12]
 8012916:	3307      	adds	r3, #7
 8012918:	f023 0307 	bic.w	r3, r3, #7
 801291c:	3308      	adds	r3, #8
 801291e:	9303      	str	r3, [sp, #12]
 8012920:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012922:	4433      	add	r3, r6
 8012924:	9309      	str	r3, [sp, #36]	@ 0x24
 8012926:	e76a      	b.n	80127fe <_svfiprintf_r+0x52>
 8012928:	fb0c 3202 	mla	r2, ip, r2, r3
 801292c:	460c      	mov	r4, r1
 801292e:	2001      	movs	r0, #1
 8012930:	e7a8      	b.n	8012884 <_svfiprintf_r+0xd8>
 8012932:	2300      	movs	r3, #0
 8012934:	3401      	adds	r4, #1
 8012936:	9305      	str	r3, [sp, #20]
 8012938:	4619      	mov	r1, r3
 801293a:	f04f 0c0a 	mov.w	ip, #10
 801293e:	4620      	mov	r0, r4
 8012940:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012944:	3a30      	subs	r2, #48	@ 0x30
 8012946:	2a09      	cmp	r2, #9
 8012948:	d903      	bls.n	8012952 <_svfiprintf_r+0x1a6>
 801294a:	2b00      	cmp	r3, #0
 801294c:	d0c6      	beq.n	80128dc <_svfiprintf_r+0x130>
 801294e:	9105      	str	r1, [sp, #20]
 8012950:	e7c4      	b.n	80128dc <_svfiprintf_r+0x130>
 8012952:	fb0c 2101 	mla	r1, ip, r1, r2
 8012956:	4604      	mov	r4, r0
 8012958:	2301      	movs	r3, #1
 801295a:	e7f0      	b.n	801293e <_svfiprintf_r+0x192>
 801295c:	ab03      	add	r3, sp, #12
 801295e:	9300      	str	r3, [sp, #0]
 8012960:	462a      	mov	r2, r5
 8012962:	4b0e      	ldr	r3, [pc, #56]	@ (801299c <_svfiprintf_r+0x1f0>)
 8012964:	a904      	add	r1, sp, #16
 8012966:	4638      	mov	r0, r7
 8012968:	f7fc fd04 	bl	800f374 <_printf_float>
 801296c:	1c42      	adds	r2, r0, #1
 801296e:	4606      	mov	r6, r0
 8012970:	d1d6      	bne.n	8012920 <_svfiprintf_r+0x174>
 8012972:	89ab      	ldrh	r3, [r5, #12]
 8012974:	065b      	lsls	r3, r3, #25
 8012976:	f53f af2d 	bmi.w	80127d4 <_svfiprintf_r+0x28>
 801297a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801297c:	e72c      	b.n	80127d8 <_svfiprintf_r+0x2c>
 801297e:	ab03      	add	r3, sp, #12
 8012980:	9300      	str	r3, [sp, #0]
 8012982:	462a      	mov	r2, r5
 8012984:	4b05      	ldr	r3, [pc, #20]	@ (801299c <_svfiprintf_r+0x1f0>)
 8012986:	a904      	add	r1, sp, #16
 8012988:	4638      	mov	r0, r7
 801298a:	f7fc ff8b 	bl	800f8a4 <_printf_i>
 801298e:	e7ed      	b.n	801296c <_svfiprintf_r+0x1c0>
 8012990:	080184c8 	.word	0x080184c8
 8012994:	080184d2 	.word	0x080184d2
 8012998:	0800f375 	.word	0x0800f375
 801299c:	080126f5 	.word	0x080126f5
 80129a0:	080184ce 	.word	0x080184ce

080129a4 <__sflush_r>:
 80129a4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80129a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80129ac:	0716      	lsls	r6, r2, #28
 80129ae:	4605      	mov	r5, r0
 80129b0:	460c      	mov	r4, r1
 80129b2:	d454      	bmi.n	8012a5e <__sflush_r+0xba>
 80129b4:	684b      	ldr	r3, [r1, #4]
 80129b6:	2b00      	cmp	r3, #0
 80129b8:	dc02      	bgt.n	80129c0 <__sflush_r+0x1c>
 80129ba:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80129bc:	2b00      	cmp	r3, #0
 80129be:	dd48      	ble.n	8012a52 <__sflush_r+0xae>
 80129c0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80129c2:	2e00      	cmp	r6, #0
 80129c4:	d045      	beq.n	8012a52 <__sflush_r+0xae>
 80129c6:	2300      	movs	r3, #0
 80129c8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80129cc:	682f      	ldr	r7, [r5, #0]
 80129ce:	6a21      	ldr	r1, [r4, #32]
 80129d0:	602b      	str	r3, [r5, #0]
 80129d2:	d030      	beq.n	8012a36 <__sflush_r+0x92>
 80129d4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80129d6:	89a3      	ldrh	r3, [r4, #12]
 80129d8:	0759      	lsls	r1, r3, #29
 80129da:	d505      	bpl.n	80129e8 <__sflush_r+0x44>
 80129dc:	6863      	ldr	r3, [r4, #4]
 80129de:	1ad2      	subs	r2, r2, r3
 80129e0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80129e2:	b10b      	cbz	r3, 80129e8 <__sflush_r+0x44>
 80129e4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80129e6:	1ad2      	subs	r2, r2, r3
 80129e8:	2300      	movs	r3, #0
 80129ea:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80129ec:	6a21      	ldr	r1, [r4, #32]
 80129ee:	4628      	mov	r0, r5
 80129f0:	47b0      	blx	r6
 80129f2:	1c43      	adds	r3, r0, #1
 80129f4:	89a3      	ldrh	r3, [r4, #12]
 80129f6:	d106      	bne.n	8012a06 <__sflush_r+0x62>
 80129f8:	6829      	ldr	r1, [r5, #0]
 80129fa:	291d      	cmp	r1, #29
 80129fc:	d82b      	bhi.n	8012a56 <__sflush_r+0xb2>
 80129fe:	4a2a      	ldr	r2, [pc, #168]	@ (8012aa8 <__sflush_r+0x104>)
 8012a00:	410a      	asrs	r2, r1
 8012a02:	07d6      	lsls	r6, r2, #31
 8012a04:	d427      	bmi.n	8012a56 <__sflush_r+0xb2>
 8012a06:	2200      	movs	r2, #0
 8012a08:	6062      	str	r2, [r4, #4]
 8012a0a:	04d9      	lsls	r1, r3, #19
 8012a0c:	6922      	ldr	r2, [r4, #16]
 8012a0e:	6022      	str	r2, [r4, #0]
 8012a10:	d504      	bpl.n	8012a1c <__sflush_r+0x78>
 8012a12:	1c42      	adds	r2, r0, #1
 8012a14:	d101      	bne.n	8012a1a <__sflush_r+0x76>
 8012a16:	682b      	ldr	r3, [r5, #0]
 8012a18:	b903      	cbnz	r3, 8012a1c <__sflush_r+0x78>
 8012a1a:	6560      	str	r0, [r4, #84]	@ 0x54
 8012a1c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012a1e:	602f      	str	r7, [r5, #0]
 8012a20:	b1b9      	cbz	r1, 8012a52 <__sflush_r+0xae>
 8012a22:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012a26:	4299      	cmp	r1, r3
 8012a28:	d002      	beq.n	8012a30 <__sflush_r+0x8c>
 8012a2a:	4628      	mov	r0, r5
 8012a2c:	f7fe faa8 	bl	8010f80 <_free_r>
 8012a30:	2300      	movs	r3, #0
 8012a32:	6363      	str	r3, [r4, #52]	@ 0x34
 8012a34:	e00d      	b.n	8012a52 <__sflush_r+0xae>
 8012a36:	2301      	movs	r3, #1
 8012a38:	4628      	mov	r0, r5
 8012a3a:	47b0      	blx	r6
 8012a3c:	4602      	mov	r2, r0
 8012a3e:	1c50      	adds	r0, r2, #1
 8012a40:	d1c9      	bne.n	80129d6 <__sflush_r+0x32>
 8012a42:	682b      	ldr	r3, [r5, #0]
 8012a44:	2b00      	cmp	r3, #0
 8012a46:	d0c6      	beq.n	80129d6 <__sflush_r+0x32>
 8012a48:	2b1d      	cmp	r3, #29
 8012a4a:	d001      	beq.n	8012a50 <__sflush_r+0xac>
 8012a4c:	2b16      	cmp	r3, #22
 8012a4e:	d11e      	bne.n	8012a8e <__sflush_r+0xea>
 8012a50:	602f      	str	r7, [r5, #0]
 8012a52:	2000      	movs	r0, #0
 8012a54:	e022      	b.n	8012a9c <__sflush_r+0xf8>
 8012a56:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012a5a:	b21b      	sxth	r3, r3
 8012a5c:	e01b      	b.n	8012a96 <__sflush_r+0xf2>
 8012a5e:	690f      	ldr	r7, [r1, #16]
 8012a60:	2f00      	cmp	r7, #0
 8012a62:	d0f6      	beq.n	8012a52 <__sflush_r+0xae>
 8012a64:	0793      	lsls	r3, r2, #30
 8012a66:	680e      	ldr	r6, [r1, #0]
 8012a68:	bf08      	it	eq
 8012a6a:	694b      	ldreq	r3, [r1, #20]
 8012a6c:	600f      	str	r7, [r1, #0]
 8012a6e:	bf18      	it	ne
 8012a70:	2300      	movne	r3, #0
 8012a72:	eba6 0807 	sub.w	r8, r6, r7
 8012a76:	608b      	str	r3, [r1, #8]
 8012a78:	f1b8 0f00 	cmp.w	r8, #0
 8012a7c:	dde9      	ble.n	8012a52 <__sflush_r+0xae>
 8012a7e:	6a21      	ldr	r1, [r4, #32]
 8012a80:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8012a82:	4643      	mov	r3, r8
 8012a84:	463a      	mov	r2, r7
 8012a86:	4628      	mov	r0, r5
 8012a88:	47b0      	blx	r6
 8012a8a:	2800      	cmp	r0, #0
 8012a8c:	dc08      	bgt.n	8012aa0 <__sflush_r+0xfc>
 8012a8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012a92:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012a96:	81a3      	strh	r3, [r4, #12]
 8012a98:	f04f 30ff 	mov.w	r0, #4294967295
 8012a9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012aa0:	4407      	add	r7, r0
 8012aa2:	eba8 0800 	sub.w	r8, r8, r0
 8012aa6:	e7e7      	b.n	8012a78 <__sflush_r+0xd4>
 8012aa8:	dfbffffe 	.word	0xdfbffffe

08012aac <_fflush_r>:
 8012aac:	b538      	push	{r3, r4, r5, lr}
 8012aae:	690b      	ldr	r3, [r1, #16]
 8012ab0:	4605      	mov	r5, r0
 8012ab2:	460c      	mov	r4, r1
 8012ab4:	b913      	cbnz	r3, 8012abc <_fflush_r+0x10>
 8012ab6:	2500      	movs	r5, #0
 8012ab8:	4628      	mov	r0, r5
 8012aba:	bd38      	pop	{r3, r4, r5, pc}
 8012abc:	b118      	cbz	r0, 8012ac6 <_fflush_r+0x1a>
 8012abe:	6a03      	ldr	r3, [r0, #32]
 8012ac0:	b90b      	cbnz	r3, 8012ac6 <_fflush_r+0x1a>
 8012ac2:	f7fd faaf 	bl	8010024 <__sinit>
 8012ac6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012aca:	2b00      	cmp	r3, #0
 8012acc:	d0f3      	beq.n	8012ab6 <_fflush_r+0xa>
 8012ace:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8012ad0:	07d0      	lsls	r0, r2, #31
 8012ad2:	d404      	bmi.n	8012ade <_fflush_r+0x32>
 8012ad4:	0599      	lsls	r1, r3, #22
 8012ad6:	d402      	bmi.n	8012ade <_fflush_r+0x32>
 8012ad8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012ada:	f7fd fbee 	bl	80102ba <__retarget_lock_acquire_recursive>
 8012ade:	4628      	mov	r0, r5
 8012ae0:	4621      	mov	r1, r4
 8012ae2:	f7ff ff5f 	bl	80129a4 <__sflush_r>
 8012ae6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012ae8:	07da      	lsls	r2, r3, #31
 8012aea:	4605      	mov	r5, r0
 8012aec:	d4e4      	bmi.n	8012ab8 <_fflush_r+0xc>
 8012aee:	89a3      	ldrh	r3, [r4, #12]
 8012af0:	059b      	lsls	r3, r3, #22
 8012af2:	d4e1      	bmi.n	8012ab8 <_fflush_r+0xc>
 8012af4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012af6:	f7fd fbe1 	bl	80102bc <__retarget_lock_release_recursive>
 8012afa:	e7dd      	b.n	8012ab8 <_fflush_r+0xc>

08012afc <memmove>:
 8012afc:	4288      	cmp	r0, r1
 8012afe:	b510      	push	{r4, lr}
 8012b00:	eb01 0402 	add.w	r4, r1, r2
 8012b04:	d902      	bls.n	8012b0c <memmove+0x10>
 8012b06:	4284      	cmp	r4, r0
 8012b08:	4623      	mov	r3, r4
 8012b0a:	d807      	bhi.n	8012b1c <memmove+0x20>
 8012b0c:	1e43      	subs	r3, r0, #1
 8012b0e:	42a1      	cmp	r1, r4
 8012b10:	d008      	beq.n	8012b24 <memmove+0x28>
 8012b12:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012b16:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012b1a:	e7f8      	b.n	8012b0e <memmove+0x12>
 8012b1c:	4402      	add	r2, r0
 8012b1e:	4601      	mov	r1, r0
 8012b20:	428a      	cmp	r2, r1
 8012b22:	d100      	bne.n	8012b26 <memmove+0x2a>
 8012b24:	bd10      	pop	{r4, pc}
 8012b26:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012b2a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012b2e:	e7f7      	b.n	8012b20 <memmove+0x24>

08012b30 <strncmp>:
 8012b30:	b510      	push	{r4, lr}
 8012b32:	b16a      	cbz	r2, 8012b50 <strncmp+0x20>
 8012b34:	3901      	subs	r1, #1
 8012b36:	1884      	adds	r4, r0, r2
 8012b38:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012b3c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8012b40:	429a      	cmp	r2, r3
 8012b42:	d103      	bne.n	8012b4c <strncmp+0x1c>
 8012b44:	42a0      	cmp	r0, r4
 8012b46:	d001      	beq.n	8012b4c <strncmp+0x1c>
 8012b48:	2a00      	cmp	r2, #0
 8012b4a:	d1f5      	bne.n	8012b38 <strncmp+0x8>
 8012b4c:	1ad0      	subs	r0, r2, r3
 8012b4e:	bd10      	pop	{r4, pc}
 8012b50:	4610      	mov	r0, r2
 8012b52:	e7fc      	b.n	8012b4e <strncmp+0x1e>

08012b54 <_sbrk_r>:
 8012b54:	b538      	push	{r3, r4, r5, lr}
 8012b56:	4d06      	ldr	r5, [pc, #24]	@ (8012b70 <_sbrk_r+0x1c>)
 8012b58:	2300      	movs	r3, #0
 8012b5a:	4604      	mov	r4, r0
 8012b5c:	4608      	mov	r0, r1
 8012b5e:	602b      	str	r3, [r5, #0]
 8012b60:	f7f2 fa2a 	bl	8004fb8 <_sbrk>
 8012b64:	1c43      	adds	r3, r0, #1
 8012b66:	d102      	bne.n	8012b6e <_sbrk_r+0x1a>
 8012b68:	682b      	ldr	r3, [r5, #0]
 8012b6a:	b103      	cbz	r3, 8012b6e <_sbrk_r+0x1a>
 8012b6c:	6023      	str	r3, [r4, #0]
 8012b6e:	bd38      	pop	{r3, r4, r5, pc}
 8012b70:	20005b94 	.word	0x20005b94
 8012b74:	00000000 	.word	0x00000000

08012b78 <nan>:
 8012b78:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8012b80 <nan+0x8>
 8012b7c:	4770      	bx	lr
 8012b7e:	bf00      	nop
 8012b80:	00000000 	.word	0x00000000
 8012b84:	7ff80000 	.word	0x7ff80000

08012b88 <__assert_func>:
 8012b88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012b8a:	4614      	mov	r4, r2
 8012b8c:	461a      	mov	r2, r3
 8012b8e:	4b09      	ldr	r3, [pc, #36]	@ (8012bb4 <__assert_func+0x2c>)
 8012b90:	681b      	ldr	r3, [r3, #0]
 8012b92:	4605      	mov	r5, r0
 8012b94:	68d8      	ldr	r0, [r3, #12]
 8012b96:	b954      	cbnz	r4, 8012bae <__assert_func+0x26>
 8012b98:	4b07      	ldr	r3, [pc, #28]	@ (8012bb8 <__assert_func+0x30>)
 8012b9a:	461c      	mov	r4, r3
 8012b9c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012ba0:	9100      	str	r1, [sp, #0]
 8012ba2:	462b      	mov	r3, r5
 8012ba4:	4905      	ldr	r1, [pc, #20]	@ (8012bbc <__assert_func+0x34>)
 8012ba6:	f000 fba7 	bl	80132f8 <fiprintf>
 8012baa:	f000 fbb7 	bl	801331c <abort>
 8012bae:	4b04      	ldr	r3, [pc, #16]	@ (8012bc0 <__assert_func+0x38>)
 8012bb0:	e7f4      	b.n	8012b9c <__assert_func+0x14>
 8012bb2:	bf00      	nop
 8012bb4:	20000140 	.word	0x20000140
 8012bb8:	0801851c 	.word	0x0801851c
 8012bbc:	080184ee 	.word	0x080184ee
 8012bc0:	080184e1 	.word	0x080184e1

08012bc4 <_calloc_r>:
 8012bc4:	b570      	push	{r4, r5, r6, lr}
 8012bc6:	fba1 5402 	umull	r5, r4, r1, r2
 8012bca:	b93c      	cbnz	r4, 8012bdc <_calloc_r+0x18>
 8012bcc:	4629      	mov	r1, r5
 8012bce:	f7fe fa4b 	bl	8011068 <_malloc_r>
 8012bd2:	4606      	mov	r6, r0
 8012bd4:	b928      	cbnz	r0, 8012be2 <_calloc_r+0x1e>
 8012bd6:	2600      	movs	r6, #0
 8012bd8:	4630      	mov	r0, r6
 8012bda:	bd70      	pop	{r4, r5, r6, pc}
 8012bdc:	220c      	movs	r2, #12
 8012bde:	6002      	str	r2, [r0, #0]
 8012be0:	e7f9      	b.n	8012bd6 <_calloc_r+0x12>
 8012be2:	462a      	mov	r2, r5
 8012be4:	4621      	mov	r1, r4
 8012be6:	f7fd faea 	bl	80101be <memset>
 8012bea:	e7f5      	b.n	8012bd8 <_calloc_r+0x14>

08012bec <rshift>:
 8012bec:	6903      	ldr	r3, [r0, #16]
 8012bee:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8012bf2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012bf6:	ea4f 1261 	mov.w	r2, r1, asr #5
 8012bfa:	f100 0414 	add.w	r4, r0, #20
 8012bfe:	dd45      	ble.n	8012c8c <rshift+0xa0>
 8012c00:	f011 011f 	ands.w	r1, r1, #31
 8012c04:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8012c08:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8012c0c:	d10c      	bne.n	8012c28 <rshift+0x3c>
 8012c0e:	f100 0710 	add.w	r7, r0, #16
 8012c12:	4629      	mov	r1, r5
 8012c14:	42b1      	cmp	r1, r6
 8012c16:	d334      	bcc.n	8012c82 <rshift+0x96>
 8012c18:	1a9b      	subs	r3, r3, r2
 8012c1a:	009b      	lsls	r3, r3, #2
 8012c1c:	1eea      	subs	r2, r5, #3
 8012c1e:	4296      	cmp	r6, r2
 8012c20:	bf38      	it	cc
 8012c22:	2300      	movcc	r3, #0
 8012c24:	4423      	add	r3, r4
 8012c26:	e015      	b.n	8012c54 <rshift+0x68>
 8012c28:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8012c2c:	f1c1 0820 	rsb	r8, r1, #32
 8012c30:	40cf      	lsrs	r7, r1
 8012c32:	f105 0e04 	add.w	lr, r5, #4
 8012c36:	46a1      	mov	r9, r4
 8012c38:	4576      	cmp	r6, lr
 8012c3a:	46f4      	mov	ip, lr
 8012c3c:	d815      	bhi.n	8012c6a <rshift+0x7e>
 8012c3e:	1a9a      	subs	r2, r3, r2
 8012c40:	0092      	lsls	r2, r2, #2
 8012c42:	3a04      	subs	r2, #4
 8012c44:	3501      	adds	r5, #1
 8012c46:	42ae      	cmp	r6, r5
 8012c48:	bf38      	it	cc
 8012c4a:	2200      	movcc	r2, #0
 8012c4c:	18a3      	adds	r3, r4, r2
 8012c4e:	50a7      	str	r7, [r4, r2]
 8012c50:	b107      	cbz	r7, 8012c54 <rshift+0x68>
 8012c52:	3304      	adds	r3, #4
 8012c54:	1b1a      	subs	r2, r3, r4
 8012c56:	42a3      	cmp	r3, r4
 8012c58:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8012c5c:	bf08      	it	eq
 8012c5e:	2300      	moveq	r3, #0
 8012c60:	6102      	str	r2, [r0, #16]
 8012c62:	bf08      	it	eq
 8012c64:	6143      	streq	r3, [r0, #20]
 8012c66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012c6a:	f8dc c000 	ldr.w	ip, [ip]
 8012c6e:	fa0c fc08 	lsl.w	ip, ip, r8
 8012c72:	ea4c 0707 	orr.w	r7, ip, r7
 8012c76:	f849 7b04 	str.w	r7, [r9], #4
 8012c7a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8012c7e:	40cf      	lsrs	r7, r1
 8012c80:	e7da      	b.n	8012c38 <rshift+0x4c>
 8012c82:	f851 cb04 	ldr.w	ip, [r1], #4
 8012c86:	f847 cf04 	str.w	ip, [r7, #4]!
 8012c8a:	e7c3      	b.n	8012c14 <rshift+0x28>
 8012c8c:	4623      	mov	r3, r4
 8012c8e:	e7e1      	b.n	8012c54 <rshift+0x68>

08012c90 <__hexdig_fun>:
 8012c90:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8012c94:	2b09      	cmp	r3, #9
 8012c96:	d802      	bhi.n	8012c9e <__hexdig_fun+0xe>
 8012c98:	3820      	subs	r0, #32
 8012c9a:	b2c0      	uxtb	r0, r0
 8012c9c:	4770      	bx	lr
 8012c9e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8012ca2:	2b05      	cmp	r3, #5
 8012ca4:	d801      	bhi.n	8012caa <__hexdig_fun+0x1a>
 8012ca6:	3847      	subs	r0, #71	@ 0x47
 8012ca8:	e7f7      	b.n	8012c9a <__hexdig_fun+0xa>
 8012caa:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8012cae:	2b05      	cmp	r3, #5
 8012cb0:	d801      	bhi.n	8012cb6 <__hexdig_fun+0x26>
 8012cb2:	3827      	subs	r0, #39	@ 0x27
 8012cb4:	e7f1      	b.n	8012c9a <__hexdig_fun+0xa>
 8012cb6:	2000      	movs	r0, #0
 8012cb8:	4770      	bx	lr
	...

08012cbc <__gethex>:
 8012cbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012cc0:	b085      	sub	sp, #20
 8012cc2:	468a      	mov	sl, r1
 8012cc4:	9302      	str	r3, [sp, #8]
 8012cc6:	680b      	ldr	r3, [r1, #0]
 8012cc8:	9001      	str	r0, [sp, #4]
 8012cca:	4690      	mov	r8, r2
 8012ccc:	1c9c      	adds	r4, r3, #2
 8012cce:	46a1      	mov	r9, r4
 8012cd0:	f814 0b01 	ldrb.w	r0, [r4], #1
 8012cd4:	2830      	cmp	r0, #48	@ 0x30
 8012cd6:	d0fa      	beq.n	8012cce <__gethex+0x12>
 8012cd8:	eba9 0303 	sub.w	r3, r9, r3
 8012cdc:	f1a3 0b02 	sub.w	fp, r3, #2
 8012ce0:	f7ff ffd6 	bl	8012c90 <__hexdig_fun>
 8012ce4:	4605      	mov	r5, r0
 8012ce6:	2800      	cmp	r0, #0
 8012ce8:	d168      	bne.n	8012dbc <__gethex+0x100>
 8012cea:	49a0      	ldr	r1, [pc, #640]	@ (8012f6c <__gethex+0x2b0>)
 8012cec:	2201      	movs	r2, #1
 8012cee:	4648      	mov	r0, r9
 8012cf0:	f7ff ff1e 	bl	8012b30 <strncmp>
 8012cf4:	4607      	mov	r7, r0
 8012cf6:	2800      	cmp	r0, #0
 8012cf8:	d167      	bne.n	8012dca <__gethex+0x10e>
 8012cfa:	f899 0001 	ldrb.w	r0, [r9, #1]
 8012cfe:	4626      	mov	r6, r4
 8012d00:	f7ff ffc6 	bl	8012c90 <__hexdig_fun>
 8012d04:	2800      	cmp	r0, #0
 8012d06:	d062      	beq.n	8012dce <__gethex+0x112>
 8012d08:	4623      	mov	r3, r4
 8012d0a:	7818      	ldrb	r0, [r3, #0]
 8012d0c:	2830      	cmp	r0, #48	@ 0x30
 8012d0e:	4699      	mov	r9, r3
 8012d10:	f103 0301 	add.w	r3, r3, #1
 8012d14:	d0f9      	beq.n	8012d0a <__gethex+0x4e>
 8012d16:	f7ff ffbb 	bl	8012c90 <__hexdig_fun>
 8012d1a:	fab0 f580 	clz	r5, r0
 8012d1e:	096d      	lsrs	r5, r5, #5
 8012d20:	f04f 0b01 	mov.w	fp, #1
 8012d24:	464a      	mov	r2, r9
 8012d26:	4616      	mov	r6, r2
 8012d28:	3201      	adds	r2, #1
 8012d2a:	7830      	ldrb	r0, [r6, #0]
 8012d2c:	f7ff ffb0 	bl	8012c90 <__hexdig_fun>
 8012d30:	2800      	cmp	r0, #0
 8012d32:	d1f8      	bne.n	8012d26 <__gethex+0x6a>
 8012d34:	498d      	ldr	r1, [pc, #564]	@ (8012f6c <__gethex+0x2b0>)
 8012d36:	2201      	movs	r2, #1
 8012d38:	4630      	mov	r0, r6
 8012d3a:	f7ff fef9 	bl	8012b30 <strncmp>
 8012d3e:	2800      	cmp	r0, #0
 8012d40:	d13f      	bne.n	8012dc2 <__gethex+0x106>
 8012d42:	b944      	cbnz	r4, 8012d56 <__gethex+0x9a>
 8012d44:	1c74      	adds	r4, r6, #1
 8012d46:	4622      	mov	r2, r4
 8012d48:	4616      	mov	r6, r2
 8012d4a:	3201      	adds	r2, #1
 8012d4c:	7830      	ldrb	r0, [r6, #0]
 8012d4e:	f7ff ff9f 	bl	8012c90 <__hexdig_fun>
 8012d52:	2800      	cmp	r0, #0
 8012d54:	d1f8      	bne.n	8012d48 <__gethex+0x8c>
 8012d56:	1ba4      	subs	r4, r4, r6
 8012d58:	00a7      	lsls	r7, r4, #2
 8012d5a:	7833      	ldrb	r3, [r6, #0]
 8012d5c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8012d60:	2b50      	cmp	r3, #80	@ 0x50
 8012d62:	d13e      	bne.n	8012de2 <__gethex+0x126>
 8012d64:	7873      	ldrb	r3, [r6, #1]
 8012d66:	2b2b      	cmp	r3, #43	@ 0x2b
 8012d68:	d033      	beq.n	8012dd2 <__gethex+0x116>
 8012d6a:	2b2d      	cmp	r3, #45	@ 0x2d
 8012d6c:	d034      	beq.n	8012dd8 <__gethex+0x11c>
 8012d6e:	1c71      	adds	r1, r6, #1
 8012d70:	2400      	movs	r4, #0
 8012d72:	7808      	ldrb	r0, [r1, #0]
 8012d74:	f7ff ff8c 	bl	8012c90 <__hexdig_fun>
 8012d78:	1e43      	subs	r3, r0, #1
 8012d7a:	b2db      	uxtb	r3, r3
 8012d7c:	2b18      	cmp	r3, #24
 8012d7e:	d830      	bhi.n	8012de2 <__gethex+0x126>
 8012d80:	f1a0 0210 	sub.w	r2, r0, #16
 8012d84:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8012d88:	f7ff ff82 	bl	8012c90 <__hexdig_fun>
 8012d8c:	f100 3cff 	add.w	ip, r0, #4294967295
 8012d90:	fa5f fc8c 	uxtb.w	ip, ip
 8012d94:	f1bc 0f18 	cmp.w	ip, #24
 8012d98:	f04f 030a 	mov.w	r3, #10
 8012d9c:	d91e      	bls.n	8012ddc <__gethex+0x120>
 8012d9e:	b104      	cbz	r4, 8012da2 <__gethex+0xe6>
 8012da0:	4252      	negs	r2, r2
 8012da2:	4417      	add	r7, r2
 8012da4:	f8ca 1000 	str.w	r1, [sl]
 8012da8:	b1ed      	cbz	r5, 8012de6 <__gethex+0x12a>
 8012daa:	f1bb 0f00 	cmp.w	fp, #0
 8012dae:	bf0c      	ite	eq
 8012db0:	2506      	moveq	r5, #6
 8012db2:	2500      	movne	r5, #0
 8012db4:	4628      	mov	r0, r5
 8012db6:	b005      	add	sp, #20
 8012db8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012dbc:	2500      	movs	r5, #0
 8012dbe:	462c      	mov	r4, r5
 8012dc0:	e7b0      	b.n	8012d24 <__gethex+0x68>
 8012dc2:	2c00      	cmp	r4, #0
 8012dc4:	d1c7      	bne.n	8012d56 <__gethex+0x9a>
 8012dc6:	4627      	mov	r7, r4
 8012dc8:	e7c7      	b.n	8012d5a <__gethex+0x9e>
 8012dca:	464e      	mov	r6, r9
 8012dcc:	462f      	mov	r7, r5
 8012dce:	2501      	movs	r5, #1
 8012dd0:	e7c3      	b.n	8012d5a <__gethex+0x9e>
 8012dd2:	2400      	movs	r4, #0
 8012dd4:	1cb1      	adds	r1, r6, #2
 8012dd6:	e7cc      	b.n	8012d72 <__gethex+0xb6>
 8012dd8:	2401      	movs	r4, #1
 8012dda:	e7fb      	b.n	8012dd4 <__gethex+0x118>
 8012ddc:	fb03 0002 	mla	r0, r3, r2, r0
 8012de0:	e7ce      	b.n	8012d80 <__gethex+0xc4>
 8012de2:	4631      	mov	r1, r6
 8012de4:	e7de      	b.n	8012da4 <__gethex+0xe8>
 8012de6:	eba6 0309 	sub.w	r3, r6, r9
 8012dea:	3b01      	subs	r3, #1
 8012dec:	4629      	mov	r1, r5
 8012dee:	2b07      	cmp	r3, #7
 8012df0:	dc0a      	bgt.n	8012e08 <__gethex+0x14c>
 8012df2:	9801      	ldr	r0, [sp, #4]
 8012df4:	f7fe f9c4 	bl	8011180 <_Balloc>
 8012df8:	4604      	mov	r4, r0
 8012dfa:	b940      	cbnz	r0, 8012e0e <__gethex+0x152>
 8012dfc:	4b5c      	ldr	r3, [pc, #368]	@ (8012f70 <__gethex+0x2b4>)
 8012dfe:	4602      	mov	r2, r0
 8012e00:	21e4      	movs	r1, #228	@ 0xe4
 8012e02:	485c      	ldr	r0, [pc, #368]	@ (8012f74 <__gethex+0x2b8>)
 8012e04:	f7ff fec0 	bl	8012b88 <__assert_func>
 8012e08:	3101      	adds	r1, #1
 8012e0a:	105b      	asrs	r3, r3, #1
 8012e0c:	e7ef      	b.n	8012dee <__gethex+0x132>
 8012e0e:	f100 0a14 	add.w	sl, r0, #20
 8012e12:	2300      	movs	r3, #0
 8012e14:	4655      	mov	r5, sl
 8012e16:	469b      	mov	fp, r3
 8012e18:	45b1      	cmp	r9, r6
 8012e1a:	d337      	bcc.n	8012e8c <__gethex+0x1d0>
 8012e1c:	f845 bb04 	str.w	fp, [r5], #4
 8012e20:	eba5 050a 	sub.w	r5, r5, sl
 8012e24:	10ad      	asrs	r5, r5, #2
 8012e26:	6125      	str	r5, [r4, #16]
 8012e28:	4658      	mov	r0, fp
 8012e2a:	f7fe fa9b 	bl	8011364 <__hi0bits>
 8012e2e:	016d      	lsls	r5, r5, #5
 8012e30:	f8d8 6000 	ldr.w	r6, [r8]
 8012e34:	1a2d      	subs	r5, r5, r0
 8012e36:	42b5      	cmp	r5, r6
 8012e38:	dd54      	ble.n	8012ee4 <__gethex+0x228>
 8012e3a:	1bad      	subs	r5, r5, r6
 8012e3c:	4629      	mov	r1, r5
 8012e3e:	4620      	mov	r0, r4
 8012e40:	f7fe fe2f 	bl	8011aa2 <__any_on>
 8012e44:	4681      	mov	r9, r0
 8012e46:	b178      	cbz	r0, 8012e68 <__gethex+0x1ac>
 8012e48:	1e6b      	subs	r3, r5, #1
 8012e4a:	1159      	asrs	r1, r3, #5
 8012e4c:	f003 021f 	and.w	r2, r3, #31
 8012e50:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8012e54:	f04f 0901 	mov.w	r9, #1
 8012e58:	fa09 f202 	lsl.w	r2, r9, r2
 8012e5c:	420a      	tst	r2, r1
 8012e5e:	d003      	beq.n	8012e68 <__gethex+0x1ac>
 8012e60:	454b      	cmp	r3, r9
 8012e62:	dc36      	bgt.n	8012ed2 <__gethex+0x216>
 8012e64:	f04f 0902 	mov.w	r9, #2
 8012e68:	4629      	mov	r1, r5
 8012e6a:	4620      	mov	r0, r4
 8012e6c:	f7ff febe 	bl	8012bec <rshift>
 8012e70:	442f      	add	r7, r5
 8012e72:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8012e76:	42bb      	cmp	r3, r7
 8012e78:	da42      	bge.n	8012f00 <__gethex+0x244>
 8012e7a:	9801      	ldr	r0, [sp, #4]
 8012e7c:	4621      	mov	r1, r4
 8012e7e:	f7fe f9bf 	bl	8011200 <_Bfree>
 8012e82:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012e84:	2300      	movs	r3, #0
 8012e86:	6013      	str	r3, [r2, #0]
 8012e88:	25a3      	movs	r5, #163	@ 0xa3
 8012e8a:	e793      	b.n	8012db4 <__gethex+0xf8>
 8012e8c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8012e90:	2a2e      	cmp	r2, #46	@ 0x2e
 8012e92:	d012      	beq.n	8012eba <__gethex+0x1fe>
 8012e94:	2b20      	cmp	r3, #32
 8012e96:	d104      	bne.n	8012ea2 <__gethex+0x1e6>
 8012e98:	f845 bb04 	str.w	fp, [r5], #4
 8012e9c:	f04f 0b00 	mov.w	fp, #0
 8012ea0:	465b      	mov	r3, fp
 8012ea2:	7830      	ldrb	r0, [r6, #0]
 8012ea4:	9303      	str	r3, [sp, #12]
 8012ea6:	f7ff fef3 	bl	8012c90 <__hexdig_fun>
 8012eaa:	9b03      	ldr	r3, [sp, #12]
 8012eac:	f000 000f 	and.w	r0, r0, #15
 8012eb0:	4098      	lsls	r0, r3
 8012eb2:	ea4b 0b00 	orr.w	fp, fp, r0
 8012eb6:	3304      	adds	r3, #4
 8012eb8:	e7ae      	b.n	8012e18 <__gethex+0x15c>
 8012eba:	45b1      	cmp	r9, r6
 8012ebc:	d8ea      	bhi.n	8012e94 <__gethex+0x1d8>
 8012ebe:	492b      	ldr	r1, [pc, #172]	@ (8012f6c <__gethex+0x2b0>)
 8012ec0:	9303      	str	r3, [sp, #12]
 8012ec2:	2201      	movs	r2, #1
 8012ec4:	4630      	mov	r0, r6
 8012ec6:	f7ff fe33 	bl	8012b30 <strncmp>
 8012eca:	9b03      	ldr	r3, [sp, #12]
 8012ecc:	2800      	cmp	r0, #0
 8012ece:	d1e1      	bne.n	8012e94 <__gethex+0x1d8>
 8012ed0:	e7a2      	b.n	8012e18 <__gethex+0x15c>
 8012ed2:	1ea9      	subs	r1, r5, #2
 8012ed4:	4620      	mov	r0, r4
 8012ed6:	f7fe fde4 	bl	8011aa2 <__any_on>
 8012eda:	2800      	cmp	r0, #0
 8012edc:	d0c2      	beq.n	8012e64 <__gethex+0x1a8>
 8012ede:	f04f 0903 	mov.w	r9, #3
 8012ee2:	e7c1      	b.n	8012e68 <__gethex+0x1ac>
 8012ee4:	da09      	bge.n	8012efa <__gethex+0x23e>
 8012ee6:	1b75      	subs	r5, r6, r5
 8012ee8:	4621      	mov	r1, r4
 8012eea:	9801      	ldr	r0, [sp, #4]
 8012eec:	462a      	mov	r2, r5
 8012eee:	f7fe fb9f 	bl	8011630 <__lshift>
 8012ef2:	1b7f      	subs	r7, r7, r5
 8012ef4:	4604      	mov	r4, r0
 8012ef6:	f100 0a14 	add.w	sl, r0, #20
 8012efa:	f04f 0900 	mov.w	r9, #0
 8012efe:	e7b8      	b.n	8012e72 <__gethex+0x1b6>
 8012f00:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8012f04:	42bd      	cmp	r5, r7
 8012f06:	dd6f      	ble.n	8012fe8 <__gethex+0x32c>
 8012f08:	1bed      	subs	r5, r5, r7
 8012f0a:	42ae      	cmp	r6, r5
 8012f0c:	dc34      	bgt.n	8012f78 <__gethex+0x2bc>
 8012f0e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8012f12:	2b02      	cmp	r3, #2
 8012f14:	d022      	beq.n	8012f5c <__gethex+0x2a0>
 8012f16:	2b03      	cmp	r3, #3
 8012f18:	d024      	beq.n	8012f64 <__gethex+0x2a8>
 8012f1a:	2b01      	cmp	r3, #1
 8012f1c:	d115      	bne.n	8012f4a <__gethex+0x28e>
 8012f1e:	42ae      	cmp	r6, r5
 8012f20:	d113      	bne.n	8012f4a <__gethex+0x28e>
 8012f22:	2e01      	cmp	r6, #1
 8012f24:	d10b      	bne.n	8012f3e <__gethex+0x282>
 8012f26:	9a02      	ldr	r2, [sp, #8]
 8012f28:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8012f2c:	6013      	str	r3, [r2, #0]
 8012f2e:	2301      	movs	r3, #1
 8012f30:	6123      	str	r3, [r4, #16]
 8012f32:	f8ca 3000 	str.w	r3, [sl]
 8012f36:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012f38:	2562      	movs	r5, #98	@ 0x62
 8012f3a:	601c      	str	r4, [r3, #0]
 8012f3c:	e73a      	b.n	8012db4 <__gethex+0xf8>
 8012f3e:	1e71      	subs	r1, r6, #1
 8012f40:	4620      	mov	r0, r4
 8012f42:	f7fe fdae 	bl	8011aa2 <__any_on>
 8012f46:	2800      	cmp	r0, #0
 8012f48:	d1ed      	bne.n	8012f26 <__gethex+0x26a>
 8012f4a:	9801      	ldr	r0, [sp, #4]
 8012f4c:	4621      	mov	r1, r4
 8012f4e:	f7fe f957 	bl	8011200 <_Bfree>
 8012f52:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012f54:	2300      	movs	r3, #0
 8012f56:	6013      	str	r3, [r2, #0]
 8012f58:	2550      	movs	r5, #80	@ 0x50
 8012f5a:	e72b      	b.n	8012db4 <__gethex+0xf8>
 8012f5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012f5e:	2b00      	cmp	r3, #0
 8012f60:	d1f3      	bne.n	8012f4a <__gethex+0x28e>
 8012f62:	e7e0      	b.n	8012f26 <__gethex+0x26a>
 8012f64:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012f66:	2b00      	cmp	r3, #0
 8012f68:	d1dd      	bne.n	8012f26 <__gethex+0x26a>
 8012f6a:	e7ee      	b.n	8012f4a <__gethex+0x28e>
 8012f6c:	08018470 	.word	0x08018470
 8012f70:	08018308 	.word	0x08018308
 8012f74:	0801851d 	.word	0x0801851d
 8012f78:	1e6f      	subs	r7, r5, #1
 8012f7a:	f1b9 0f00 	cmp.w	r9, #0
 8012f7e:	d130      	bne.n	8012fe2 <__gethex+0x326>
 8012f80:	b127      	cbz	r7, 8012f8c <__gethex+0x2d0>
 8012f82:	4639      	mov	r1, r7
 8012f84:	4620      	mov	r0, r4
 8012f86:	f7fe fd8c 	bl	8011aa2 <__any_on>
 8012f8a:	4681      	mov	r9, r0
 8012f8c:	117a      	asrs	r2, r7, #5
 8012f8e:	2301      	movs	r3, #1
 8012f90:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8012f94:	f007 071f 	and.w	r7, r7, #31
 8012f98:	40bb      	lsls	r3, r7
 8012f9a:	4213      	tst	r3, r2
 8012f9c:	4629      	mov	r1, r5
 8012f9e:	4620      	mov	r0, r4
 8012fa0:	bf18      	it	ne
 8012fa2:	f049 0902 	orrne.w	r9, r9, #2
 8012fa6:	f7ff fe21 	bl	8012bec <rshift>
 8012faa:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8012fae:	1b76      	subs	r6, r6, r5
 8012fb0:	2502      	movs	r5, #2
 8012fb2:	f1b9 0f00 	cmp.w	r9, #0
 8012fb6:	d047      	beq.n	8013048 <__gethex+0x38c>
 8012fb8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8012fbc:	2b02      	cmp	r3, #2
 8012fbe:	d015      	beq.n	8012fec <__gethex+0x330>
 8012fc0:	2b03      	cmp	r3, #3
 8012fc2:	d017      	beq.n	8012ff4 <__gethex+0x338>
 8012fc4:	2b01      	cmp	r3, #1
 8012fc6:	d109      	bne.n	8012fdc <__gethex+0x320>
 8012fc8:	f019 0f02 	tst.w	r9, #2
 8012fcc:	d006      	beq.n	8012fdc <__gethex+0x320>
 8012fce:	f8da 3000 	ldr.w	r3, [sl]
 8012fd2:	ea49 0903 	orr.w	r9, r9, r3
 8012fd6:	f019 0f01 	tst.w	r9, #1
 8012fda:	d10e      	bne.n	8012ffa <__gethex+0x33e>
 8012fdc:	f045 0510 	orr.w	r5, r5, #16
 8012fe0:	e032      	b.n	8013048 <__gethex+0x38c>
 8012fe2:	f04f 0901 	mov.w	r9, #1
 8012fe6:	e7d1      	b.n	8012f8c <__gethex+0x2d0>
 8012fe8:	2501      	movs	r5, #1
 8012fea:	e7e2      	b.n	8012fb2 <__gethex+0x2f6>
 8012fec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012fee:	f1c3 0301 	rsb	r3, r3, #1
 8012ff2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8012ff4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012ff6:	2b00      	cmp	r3, #0
 8012ff8:	d0f0      	beq.n	8012fdc <__gethex+0x320>
 8012ffa:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8012ffe:	f104 0314 	add.w	r3, r4, #20
 8013002:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8013006:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801300a:	f04f 0c00 	mov.w	ip, #0
 801300e:	4618      	mov	r0, r3
 8013010:	f853 2b04 	ldr.w	r2, [r3], #4
 8013014:	f1b2 3fff 	cmp.w	r2, #4294967295
 8013018:	d01b      	beq.n	8013052 <__gethex+0x396>
 801301a:	3201      	adds	r2, #1
 801301c:	6002      	str	r2, [r0, #0]
 801301e:	2d02      	cmp	r5, #2
 8013020:	f104 0314 	add.w	r3, r4, #20
 8013024:	d13c      	bne.n	80130a0 <__gethex+0x3e4>
 8013026:	f8d8 2000 	ldr.w	r2, [r8]
 801302a:	3a01      	subs	r2, #1
 801302c:	42b2      	cmp	r2, r6
 801302e:	d109      	bne.n	8013044 <__gethex+0x388>
 8013030:	1171      	asrs	r1, r6, #5
 8013032:	2201      	movs	r2, #1
 8013034:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8013038:	f006 061f 	and.w	r6, r6, #31
 801303c:	fa02 f606 	lsl.w	r6, r2, r6
 8013040:	421e      	tst	r6, r3
 8013042:	d13a      	bne.n	80130ba <__gethex+0x3fe>
 8013044:	f045 0520 	orr.w	r5, r5, #32
 8013048:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801304a:	601c      	str	r4, [r3, #0]
 801304c:	9b02      	ldr	r3, [sp, #8]
 801304e:	601f      	str	r7, [r3, #0]
 8013050:	e6b0      	b.n	8012db4 <__gethex+0xf8>
 8013052:	4299      	cmp	r1, r3
 8013054:	f843 cc04 	str.w	ip, [r3, #-4]
 8013058:	d8d9      	bhi.n	801300e <__gethex+0x352>
 801305a:	68a3      	ldr	r3, [r4, #8]
 801305c:	459b      	cmp	fp, r3
 801305e:	db17      	blt.n	8013090 <__gethex+0x3d4>
 8013060:	6861      	ldr	r1, [r4, #4]
 8013062:	9801      	ldr	r0, [sp, #4]
 8013064:	3101      	adds	r1, #1
 8013066:	f7fe f88b 	bl	8011180 <_Balloc>
 801306a:	4681      	mov	r9, r0
 801306c:	b918      	cbnz	r0, 8013076 <__gethex+0x3ba>
 801306e:	4b1a      	ldr	r3, [pc, #104]	@ (80130d8 <__gethex+0x41c>)
 8013070:	4602      	mov	r2, r0
 8013072:	2184      	movs	r1, #132	@ 0x84
 8013074:	e6c5      	b.n	8012e02 <__gethex+0x146>
 8013076:	6922      	ldr	r2, [r4, #16]
 8013078:	3202      	adds	r2, #2
 801307a:	f104 010c 	add.w	r1, r4, #12
 801307e:	0092      	lsls	r2, r2, #2
 8013080:	300c      	adds	r0, #12
 8013082:	f7fd f91c 	bl	80102be <memcpy>
 8013086:	4621      	mov	r1, r4
 8013088:	9801      	ldr	r0, [sp, #4]
 801308a:	f7fe f8b9 	bl	8011200 <_Bfree>
 801308e:	464c      	mov	r4, r9
 8013090:	6923      	ldr	r3, [r4, #16]
 8013092:	1c5a      	adds	r2, r3, #1
 8013094:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8013098:	6122      	str	r2, [r4, #16]
 801309a:	2201      	movs	r2, #1
 801309c:	615a      	str	r2, [r3, #20]
 801309e:	e7be      	b.n	801301e <__gethex+0x362>
 80130a0:	6922      	ldr	r2, [r4, #16]
 80130a2:	455a      	cmp	r2, fp
 80130a4:	dd0b      	ble.n	80130be <__gethex+0x402>
 80130a6:	2101      	movs	r1, #1
 80130a8:	4620      	mov	r0, r4
 80130aa:	f7ff fd9f 	bl	8012bec <rshift>
 80130ae:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80130b2:	3701      	adds	r7, #1
 80130b4:	42bb      	cmp	r3, r7
 80130b6:	f6ff aee0 	blt.w	8012e7a <__gethex+0x1be>
 80130ba:	2501      	movs	r5, #1
 80130bc:	e7c2      	b.n	8013044 <__gethex+0x388>
 80130be:	f016 061f 	ands.w	r6, r6, #31
 80130c2:	d0fa      	beq.n	80130ba <__gethex+0x3fe>
 80130c4:	4453      	add	r3, sl
 80130c6:	f1c6 0620 	rsb	r6, r6, #32
 80130ca:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80130ce:	f7fe f949 	bl	8011364 <__hi0bits>
 80130d2:	42b0      	cmp	r0, r6
 80130d4:	dbe7      	blt.n	80130a6 <__gethex+0x3ea>
 80130d6:	e7f0      	b.n	80130ba <__gethex+0x3fe>
 80130d8:	08018308 	.word	0x08018308

080130dc <L_shift>:
 80130dc:	f1c2 0208 	rsb	r2, r2, #8
 80130e0:	0092      	lsls	r2, r2, #2
 80130e2:	b570      	push	{r4, r5, r6, lr}
 80130e4:	f1c2 0620 	rsb	r6, r2, #32
 80130e8:	6843      	ldr	r3, [r0, #4]
 80130ea:	6804      	ldr	r4, [r0, #0]
 80130ec:	fa03 f506 	lsl.w	r5, r3, r6
 80130f0:	432c      	orrs	r4, r5
 80130f2:	40d3      	lsrs	r3, r2
 80130f4:	6004      	str	r4, [r0, #0]
 80130f6:	f840 3f04 	str.w	r3, [r0, #4]!
 80130fa:	4288      	cmp	r0, r1
 80130fc:	d3f4      	bcc.n	80130e8 <L_shift+0xc>
 80130fe:	bd70      	pop	{r4, r5, r6, pc}

08013100 <__match>:
 8013100:	b530      	push	{r4, r5, lr}
 8013102:	6803      	ldr	r3, [r0, #0]
 8013104:	3301      	adds	r3, #1
 8013106:	f811 4b01 	ldrb.w	r4, [r1], #1
 801310a:	b914      	cbnz	r4, 8013112 <__match+0x12>
 801310c:	6003      	str	r3, [r0, #0]
 801310e:	2001      	movs	r0, #1
 8013110:	bd30      	pop	{r4, r5, pc}
 8013112:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013116:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 801311a:	2d19      	cmp	r5, #25
 801311c:	bf98      	it	ls
 801311e:	3220      	addls	r2, #32
 8013120:	42a2      	cmp	r2, r4
 8013122:	d0f0      	beq.n	8013106 <__match+0x6>
 8013124:	2000      	movs	r0, #0
 8013126:	e7f3      	b.n	8013110 <__match+0x10>

08013128 <__hexnan>:
 8013128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801312c:	680b      	ldr	r3, [r1, #0]
 801312e:	6801      	ldr	r1, [r0, #0]
 8013130:	115e      	asrs	r6, r3, #5
 8013132:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8013136:	f013 031f 	ands.w	r3, r3, #31
 801313a:	b087      	sub	sp, #28
 801313c:	bf18      	it	ne
 801313e:	3604      	addne	r6, #4
 8013140:	2500      	movs	r5, #0
 8013142:	1f37      	subs	r7, r6, #4
 8013144:	4682      	mov	sl, r0
 8013146:	4690      	mov	r8, r2
 8013148:	9301      	str	r3, [sp, #4]
 801314a:	f846 5c04 	str.w	r5, [r6, #-4]
 801314e:	46b9      	mov	r9, r7
 8013150:	463c      	mov	r4, r7
 8013152:	9502      	str	r5, [sp, #8]
 8013154:	46ab      	mov	fp, r5
 8013156:	784a      	ldrb	r2, [r1, #1]
 8013158:	1c4b      	adds	r3, r1, #1
 801315a:	9303      	str	r3, [sp, #12]
 801315c:	b342      	cbz	r2, 80131b0 <__hexnan+0x88>
 801315e:	4610      	mov	r0, r2
 8013160:	9105      	str	r1, [sp, #20]
 8013162:	9204      	str	r2, [sp, #16]
 8013164:	f7ff fd94 	bl	8012c90 <__hexdig_fun>
 8013168:	2800      	cmp	r0, #0
 801316a:	d151      	bne.n	8013210 <__hexnan+0xe8>
 801316c:	9a04      	ldr	r2, [sp, #16]
 801316e:	9905      	ldr	r1, [sp, #20]
 8013170:	2a20      	cmp	r2, #32
 8013172:	d818      	bhi.n	80131a6 <__hexnan+0x7e>
 8013174:	9b02      	ldr	r3, [sp, #8]
 8013176:	459b      	cmp	fp, r3
 8013178:	dd13      	ble.n	80131a2 <__hexnan+0x7a>
 801317a:	454c      	cmp	r4, r9
 801317c:	d206      	bcs.n	801318c <__hexnan+0x64>
 801317e:	2d07      	cmp	r5, #7
 8013180:	dc04      	bgt.n	801318c <__hexnan+0x64>
 8013182:	462a      	mov	r2, r5
 8013184:	4649      	mov	r1, r9
 8013186:	4620      	mov	r0, r4
 8013188:	f7ff ffa8 	bl	80130dc <L_shift>
 801318c:	4544      	cmp	r4, r8
 801318e:	d952      	bls.n	8013236 <__hexnan+0x10e>
 8013190:	2300      	movs	r3, #0
 8013192:	f1a4 0904 	sub.w	r9, r4, #4
 8013196:	f844 3c04 	str.w	r3, [r4, #-4]
 801319a:	f8cd b008 	str.w	fp, [sp, #8]
 801319e:	464c      	mov	r4, r9
 80131a0:	461d      	mov	r5, r3
 80131a2:	9903      	ldr	r1, [sp, #12]
 80131a4:	e7d7      	b.n	8013156 <__hexnan+0x2e>
 80131a6:	2a29      	cmp	r2, #41	@ 0x29
 80131a8:	d157      	bne.n	801325a <__hexnan+0x132>
 80131aa:	3102      	adds	r1, #2
 80131ac:	f8ca 1000 	str.w	r1, [sl]
 80131b0:	f1bb 0f00 	cmp.w	fp, #0
 80131b4:	d051      	beq.n	801325a <__hexnan+0x132>
 80131b6:	454c      	cmp	r4, r9
 80131b8:	d206      	bcs.n	80131c8 <__hexnan+0xa0>
 80131ba:	2d07      	cmp	r5, #7
 80131bc:	dc04      	bgt.n	80131c8 <__hexnan+0xa0>
 80131be:	462a      	mov	r2, r5
 80131c0:	4649      	mov	r1, r9
 80131c2:	4620      	mov	r0, r4
 80131c4:	f7ff ff8a 	bl	80130dc <L_shift>
 80131c8:	4544      	cmp	r4, r8
 80131ca:	d936      	bls.n	801323a <__hexnan+0x112>
 80131cc:	f1a8 0204 	sub.w	r2, r8, #4
 80131d0:	4623      	mov	r3, r4
 80131d2:	f853 1b04 	ldr.w	r1, [r3], #4
 80131d6:	f842 1f04 	str.w	r1, [r2, #4]!
 80131da:	429f      	cmp	r7, r3
 80131dc:	d2f9      	bcs.n	80131d2 <__hexnan+0xaa>
 80131de:	1b3b      	subs	r3, r7, r4
 80131e0:	f023 0303 	bic.w	r3, r3, #3
 80131e4:	3304      	adds	r3, #4
 80131e6:	3401      	adds	r4, #1
 80131e8:	3e03      	subs	r6, #3
 80131ea:	42b4      	cmp	r4, r6
 80131ec:	bf88      	it	hi
 80131ee:	2304      	movhi	r3, #4
 80131f0:	4443      	add	r3, r8
 80131f2:	2200      	movs	r2, #0
 80131f4:	f843 2b04 	str.w	r2, [r3], #4
 80131f8:	429f      	cmp	r7, r3
 80131fa:	d2fb      	bcs.n	80131f4 <__hexnan+0xcc>
 80131fc:	683b      	ldr	r3, [r7, #0]
 80131fe:	b91b      	cbnz	r3, 8013208 <__hexnan+0xe0>
 8013200:	4547      	cmp	r7, r8
 8013202:	d128      	bne.n	8013256 <__hexnan+0x12e>
 8013204:	2301      	movs	r3, #1
 8013206:	603b      	str	r3, [r7, #0]
 8013208:	2005      	movs	r0, #5
 801320a:	b007      	add	sp, #28
 801320c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013210:	3501      	adds	r5, #1
 8013212:	2d08      	cmp	r5, #8
 8013214:	f10b 0b01 	add.w	fp, fp, #1
 8013218:	dd06      	ble.n	8013228 <__hexnan+0x100>
 801321a:	4544      	cmp	r4, r8
 801321c:	d9c1      	bls.n	80131a2 <__hexnan+0x7a>
 801321e:	2300      	movs	r3, #0
 8013220:	f844 3c04 	str.w	r3, [r4, #-4]
 8013224:	2501      	movs	r5, #1
 8013226:	3c04      	subs	r4, #4
 8013228:	6822      	ldr	r2, [r4, #0]
 801322a:	f000 000f 	and.w	r0, r0, #15
 801322e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8013232:	6020      	str	r0, [r4, #0]
 8013234:	e7b5      	b.n	80131a2 <__hexnan+0x7a>
 8013236:	2508      	movs	r5, #8
 8013238:	e7b3      	b.n	80131a2 <__hexnan+0x7a>
 801323a:	9b01      	ldr	r3, [sp, #4]
 801323c:	2b00      	cmp	r3, #0
 801323e:	d0dd      	beq.n	80131fc <__hexnan+0xd4>
 8013240:	f1c3 0320 	rsb	r3, r3, #32
 8013244:	f04f 32ff 	mov.w	r2, #4294967295
 8013248:	40da      	lsrs	r2, r3
 801324a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801324e:	4013      	ands	r3, r2
 8013250:	f846 3c04 	str.w	r3, [r6, #-4]
 8013254:	e7d2      	b.n	80131fc <__hexnan+0xd4>
 8013256:	3f04      	subs	r7, #4
 8013258:	e7d0      	b.n	80131fc <__hexnan+0xd4>
 801325a:	2004      	movs	r0, #4
 801325c:	e7d5      	b.n	801320a <__hexnan+0xe2>

0801325e <__ascii_mbtowc>:
 801325e:	b082      	sub	sp, #8
 8013260:	b901      	cbnz	r1, 8013264 <__ascii_mbtowc+0x6>
 8013262:	a901      	add	r1, sp, #4
 8013264:	b142      	cbz	r2, 8013278 <__ascii_mbtowc+0x1a>
 8013266:	b14b      	cbz	r3, 801327c <__ascii_mbtowc+0x1e>
 8013268:	7813      	ldrb	r3, [r2, #0]
 801326a:	600b      	str	r3, [r1, #0]
 801326c:	7812      	ldrb	r2, [r2, #0]
 801326e:	1e10      	subs	r0, r2, #0
 8013270:	bf18      	it	ne
 8013272:	2001      	movne	r0, #1
 8013274:	b002      	add	sp, #8
 8013276:	4770      	bx	lr
 8013278:	4610      	mov	r0, r2
 801327a:	e7fb      	b.n	8013274 <__ascii_mbtowc+0x16>
 801327c:	f06f 0001 	mvn.w	r0, #1
 8013280:	e7f8      	b.n	8013274 <__ascii_mbtowc+0x16>

08013282 <_realloc_r>:
 8013282:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013286:	4680      	mov	r8, r0
 8013288:	4615      	mov	r5, r2
 801328a:	460c      	mov	r4, r1
 801328c:	b921      	cbnz	r1, 8013298 <_realloc_r+0x16>
 801328e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013292:	4611      	mov	r1, r2
 8013294:	f7fd bee8 	b.w	8011068 <_malloc_r>
 8013298:	b92a      	cbnz	r2, 80132a6 <_realloc_r+0x24>
 801329a:	f7fd fe71 	bl	8010f80 <_free_r>
 801329e:	2400      	movs	r4, #0
 80132a0:	4620      	mov	r0, r4
 80132a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80132a6:	f000 f840 	bl	801332a <_malloc_usable_size_r>
 80132aa:	4285      	cmp	r5, r0
 80132ac:	4606      	mov	r6, r0
 80132ae:	d802      	bhi.n	80132b6 <_realloc_r+0x34>
 80132b0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80132b4:	d8f4      	bhi.n	80132a0 <_realloc_r+0x1e>
 80132b6:	4629      	mov	r1, r5
 80132b8:	4640      	mov	r0, r8
 80132ba:	f7fd fed5 	bl	8011068 <_malloc_r>
 80132be:	4607      	mov	r7, r0
 80132c0:	2800      	cmp	r0, #0
 80132c2:	d0ec      	beq.n	801329e <_realloc_r+0x1c>
 80132c4:	42b5      	cmp	r5, r6
 80132c6:	462a      	mov	r2, r5
 80132c8:	4621      	mov	r1, r4
 80132ca:	bf28      	it	cs
 80132cc:	4632      	movcs	r2, r6
 80132ce:	f7fc fff6 	bl	80102be <memcpy>
 80132d2:	4621      	mov	r1, r4
 80132d4:	4640      	mov	r0, r8
 80132d6:	f7fd fe53 	bl	8010f80 <_free_r>
 80132da:	463c      	mov	r4, r7
 80132dc:	e7e0      	b.n	80132a0 <_realloc_r+0x1e>

080132de <__ascii_wctomb>:
 80132de:	4603      	mov	r3, r0
 80132e0:	4608      	mov	r0, r1
 80132e2:	b141      	cbz	r1, 80132f6 <__ascii_wctomb+0x18>
 80132e4:	2aff      	cmp	r2, #255	@ 0xff
 80132e6:	d904      	bls.n	80132f2 <__ascii_wctomb+0x14>
 80132e8:	228a      	movs	r2, #138	@ 0x8a
 80132ea:	601a      	str	r2, [r3, #0]
 80132ec:	f04f 30ff 	mov.w	r0, #4294967295
 80132f0:	4770      	bx	lr
 80132f2:	700a      	strb	r2, [r1, #0]
 80132f4:	2001      	movs	r0, #1
 80132f6:	4770      	bx	lr

080132f8 <fiprintf>:
 80132f8:	b40e      	push	{r1, r2, r3}
 80132fa:	b503      	push	{r0, r1, lr}
 80132fc:	4601      	mov	r1, r0
 80132fe:	ab03      	add	r3, sp, #12
 8013300:	4805      	ldr	r0, [pc, #20]	@ (8013318 <fiprintf+0x20>)
 8013302:	f853 2b04 	ldr.w	r2, [r3], #4
 8013306:	6800      	ldr	r0, [r0, #0]
 8013308:	9301      	str	r3, [sp, #4]
 801330a:	f000 f83f 	bl	801338c <_vfiprintf_r>
 801330e:	b002      	add	sp, #8
 8013310:	f85d eb04 	ldr.w	lr, [sp], #4
 8013314:	b003      	add	sp, #12
 8013316:	4770      	bx	lr
 8013318:	20000140 	.word	0x20000140

0801331c <abort>:
 801331c:	b508      	push	{r3, lr}
 801331e:	2006      	movs	r0, #6
 8013320:	f000 fa08 	bl	8013734 <raise>
 8013324:	2001      	movs	r0, #1
 8013326:	f7f1 fe17 	bl	8004f58 <_exit>

0801332a <_malloc_usable_size_r>:
 801332a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801332e:	1f18      	subs	r0, r3, #4
 8013330:	2b00      	cmp	r3, #0
 8013332:	bfbc      	itt	lt
 8013334:	580b      	ldrlt	r3, [r1, r0]
 8013336:	18c0      	addlt	r0, r0, r3
 8013338:	4770      	bx	lr

0801333a <__sfputc_r>:
 801333a:	6893      	ldr	r3, [r2, #8]
 801333c:	3b01      	subs	r3, #1
 801333e:	2b00      	cmp	r3, #0
 8013340:	b410      	push	{r4}
 8013342:	6093      	str	r3, [r2, #8]
 8013344:	da08      	bge.n	8013358 <__sfputc_r+0x1e>
 8013346:	6994      	ldr	r4, [r2, #24]
 8013348:	42a3      	cmp	r3, r4
 801334a:	db01      	blt.n	8013350 <__sfputc_r+0x16>
 801334c:	290a      	cmp	r1, #10
 801334e:	d103      	bne.n	8013358 <__sfputc_r+0x1e>
 8013350:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013354:	f000 b932 	b.w	80135bc <__swbuf_r>
 8013358:	6813      	ldr	r3, [r2, #0]
 801335a:	1c58      	adds	r0, r3, #1
 801335c:	6010      	str	r0, [r2, #0]
 801335e:	7019      	strb	r1, [r3, #0]
 8013360:	4608      	mov	r0, r1
 8013362:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013366:	4770      	bx	lr

08013368 <__sfputs_r>:
 8013368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801336a:	4606      	mov	r6, r0
 801336c:	460f      	mov	r7, r1
 801336e:	4614      	mov	r4, r2
 8013370:	18d5      	adds	r5, r2, r3
 8013372:	42ac      	cmp	r4, r5
 8013374:	d101      	bne.n	801337a <__sfputs_r+0x12>
 8013376:	2000      	movs	r0, #0
 8013378:	e007      	b.n	801338a <__sfputs_r+0x22>
 801337a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801337e:	463a      	mov	r2, r7
 8013380:	4630      	mov	r0, r6
 8013382:	f7ff ffda 	bl	801333a <__sfputc_r>
 8013386:	1c43      	adds	r3, r0, #1
 8013388:	d1f3      	bne.n	8013372 <__sfputs_r+0xa>
 801338a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801338c <_vfiprintf_r>:
 801338c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013390:	460d      	mov	r5, r1
 8013392:	b09d      	sub	sp, #116	@ 0x74
 8013394:	4614      	mov	r4, r2
 8013396:	4698      	mov	r8, r3
 8013398:	4606      	mov	r6, r0
 801339a:	b118      	cbz	r0, 80133a4 <_vfiprintf_r+0x18>
 801339c:	6a03      	ldr	r3, [r0, #32]
 801339e:	b90b      	cbnz	r3, 80133a4 <_vfiprintf_r+0x18>
 80133a0:	f7fc fe40 	bl	8010024 <__sinit>
 80133a4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80133a6:	07d9      	lsls	r1, r3, #31
 80133a8:	d405      	bmi.n	80133b6 <_vfiprintf_r+0x2a>
 80133aa:	89ab      	ldrh	r3, [r5, #12]
 80133ac:	059a      	lsls	r2, r3, #22
 80133ae:	d402      	bmi.n	80133b6 <_vfiprintf_r+0x2a>
 80133b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80133b2:	f7fc ff82 	bl	80102ba <__retarget_lock_acquire_recursive>
 80133b6:	89ab      	ldrh	r3, [r5, #12]
 80133b8:	071b      	lsls	r3, r3, #28
 80133ba:	d501      	bpl.n	80133c0 <_vfiprintf_r+0x34>
 80133bc:	692b      	ldr	r3, [r5, #16]
 80133be:	b99b      	cbnz	r3, 80133e8 <_vfiprintf_r+0x5c>
 80133c0:	4629      	mov	r1, r5
 80133c2:	4630      	mov	r0, r6
 80133c4:	f000 f938 	bl	8013638 <__swsetup_r>
 80133c8:	b170      	cbz	r0, 80133e8 <_vfiprintf_r+0x5c>
 80133ca:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80133cc:	07dc      	lsls	r4, r3, #31
 80133ce:	d504      	bpl.n	80133da <_vfiprintf_r+0x4e>
 80133d0:	f04f 30ff 	mov.w	r0, #4294967295
 80133d4:	b01d      	add	sp, #116	@ 0x74
 80133d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80133da:	89ab      	ldrh	r3, [r5, #12]
 80133dc:	0598      	lsls	r0, r3, #22
 80133de:	d4f7      	bmi.n	80133d0 <_vfiprintf_r+0x44>
 80133e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80133e2:	f7fc ff6b 	bl	80102bc <__retarget_lock_release_recursive>
 80133e6:	e7f3      	b.n	80133d0 <_vfiprintf_r+0x44>
 80133e8:	2300      	movs	r3, #0
 80133ea:	9309      	str	r3, [sp, #36]	@ 0x24
 80133ec:	2320      	movs	r3, #32
 80133ee:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80133f2:	f8cd 800c 	str.w	r8, [sp, #12]
 80133f6:	2330      	movs	r3, #48	@ 0x30
 80133f8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80135a8 <_vfiprintf_r+0x21c>
 80133fc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8013400:	f04f 0901 	mov.w	r9, #1
 8013404:	4623      	mov	r3, r4
 8013406:	469a      	mov	sl, r3
 8013408:	f813 2b01 	ldrb.w	r2, [r3], #1
 801340c:	b10a      	cbz	r2, 8013412 <_vfiprintf_r+0x86>
 801340e:	2a25      	cmp	r2, #37	@ 0x25
 8013410:	d1f9      	bne.n	8013406 <_vfiprintf_r+0x7a>
 8013412:	ebba 0b04 	subs.w	fp, sl, r4
 8013416:	d00b      	beq.n	8013430 <_vfiprintf_r+0xa4>
 8013418:	465b      	mov	r3, fp
 801341a:	4622      	mov	r2, r4
 801341c:	4629      	mov	r1, r5
 801341e:	4630      	mov	r0, r6
 8013420:	f7ff ffa2 	bl	8013368 <__sfputs_r>
 8013424:	3001      	adds	r0, #1
 8013426:	f000 80a7 	beq.w	8013578 <_vfiprintf_r+0x1ec>
 801342a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801342c:	445a      	add	r2, fp
 801342e:	9209      	str	r2, [sp, #36]	@ 0x24
 8013430:	f89a 3000 	ldrb.w	r3, [sl]
 8013434:	2b00      	cmp	r3, #0
 8013436:	f000 809f 	beq.w	8013578 <_vfiprintf_r+0x1ec>
 801343a:	2300      	movs	r3, #0
 801343c:	f04f 32ff 	mov.w	r2, #4294967295
 8013440:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013444:	f10a 0a01 	add.w	sl, sl, #1
 8013448:	9304      	str	r3, [sp, #16]
 801344a:	9307      	str	r3, [sp, #28]
 801344c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8013450:	931a      	str	r3, [sp, #104]	@ 0x68
 8013452:	4654      	mov	r4, sl
 8013454:	2205      	movs	r2, #5
 8013456:	f814 1b01 	ldrb.w	r1, [r4], #1
 801345a:	4853      	ldr	r0, [pc, #332]	@ (80135a8 <_vfiprintf_r+0x21c>)
 801345c:	f7ec fe90 	bl	8000180 <memchr>
 8013460:	9a04      	ldr	r2, [sp, #16]
 8013462:	b9d8      	cbnz	r0, 801349c <_vfiprintf_r+0x110>
 8013464:	06d1      	lsls	r1, r2, #27
 8013466:	bf44      	itt	mi
 8013468:	2320      	movmi	r3, #32
 801346a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801346e:	0713      	lsls	r3, r2, #28
 8013470:	bf44      	itt	mi
 8013472:	232b      	movmi	r3, #43	@ 0x2b
 8013474:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013478:	f89a 3000 	ldrb.w	r3, [sl]
 801347c:	2b2a      	cmp	r3, #42	@ 0x2a
 801347e:	d015      	beq.n	80134ac <_vfiprintf_r+0x120>
 8013480:	9a07      	ldr	r2, [sp, #28]
 8013482:	4654      	mov	r4, sl
 8013484:	2000      	movs	r0, #0
 8013486:	f04f 0c0a 	mov.w	ip, #10
 801348a:	4621      	mov	r1, r4
 801348c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013490:	3b30      	subs	r3, #48	@ 0x30
 8013492:	2b09      	cmp	r3, #9
 8013494:	d94b      	bls.n	801352e <_vfiprintf_r+0x1a2>
 8013496:	b1b0      	cbz	r0, 80134c6 <_vfiprintf_r+0x13a>
 8013498:	9207      	str	r2, [sp, #28]
 801349a:	e014      	b.n	80134c6 <_vfiprintf_r+0x13a>
 801349c:	eba0 0308 	sub.w	r3, r0, r8
 80134a0:	fa09 f303 	lsl.w	r3, r9, r3
 80134a4:	4313      	orrs	r3, r2
 80134a6:	9304      	str	r3, [sp, #16]
 80134a8:	46a2      	mov	sl, r4
 80134aa:	e7d2      	b.n	8013452 <_vfiprintf_r+0xc6>
 80134ac:	9b03      	ldr	r3, [sp, #12]
 80134ae:	1d19      	adds	r1, r3, #4
 80134b0:	681b      	ldr	r3, [r3, #0]
 80134b2:	9103      	str	r1, [sp, #12]
 80134b4:	2b00      	cmp	r3, #0
 80134b6:	bfbb      	ittet	lt
 80134b8:	425b      	neglt	r3, r3
 80134ba:	f042 0202 	orrlt.w	r2, r2, #2
 80134be:	9307      	strge	r3, [sp, #28]
 80134c0:	9307      	strlt	r3, [sp, #28]
 80134c2:	bfb8      	it	lt
 80134c4:	9204      	strlt	r2, [sp, #16]
 80134c6:	7823      	ldrb	r3, [r4, #0]
 80134c8:	2b2e      	cmp	r3, #46	@ 0x2e
 80134ca:	d10a      	bne.n	80134e2 <_vfiprintf_r+0x156>
 80134cc:	7863      	ldrb	r3, [r4, #1]
 80134ce:	2b2a      	cmp	r3, #42	@ 0x2a
 80134d0:	d132      	bne.n	8013538 <_vfiprintf_r+0x1ac>
 80134d2:	9b03      	ldr	r3, [sp, #12]
 80134d4:	1d1a      	adds	r2, r3, #4
 80134d6:	681b      	ldr	r3, [r3, #0]
 80134d8:	9203      	str	r2, [sp, #12]
 80134da:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80134de:	3402      	adds	r4, #2
 80134e0:	9305      	str	r3, [sp, #20]
 80134e2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80135b8 <_vfiprintf_r+0x22c>
 80134e6:	7821      	ldrb	r1, [r4, #0]
 80134e8:	2203      	movs	r2, #3
 80134ea:	4650      	mov	r0, sl
 80134ec:	f7ec fe48 	bl	8000180 <memchr>
 80134f0:	b138      	cbz	r0, 8013502 <_vfiprintf_r+0x176>
 80134f2:	9b04      	ldr	r3, [sp, #16]
 80134f4:	eba0 000a 	sub.w	r0, r0, sl
 80134f8:	2240      	movs	r2, #64	@ 0x40
 80134fa:	4082      	lsls	r2, r0
 80134fc:	4313      	orrs	r3, r2
 80134fe:	3401      	adds	r4, #1
 8013500:	9304      	str	r3, [sp, #16]
 8013502:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013506:	4829      	ldr	r0, [pc, #164]	@ (80135ac <_vfiprintf_r+0x220>)
 8013508:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801350c:	2206      	movs	r2, #6
 801350e:	f7ec fe37 	bl	8000180 <memchr>
 8013512:	2800      	cmp	r0, #0
 8013514:	d03f      	beq.n	8013596 <_vfiprintf_r+0x20a>
 8013516:	4b26      	ldr	r3, [pc, #152]	@ (80135b0 <_vfiprintf_r+0x224>)
 8013518:	bb1b      	cbnz	r3, 8013562 <_vfiprintf_r+0x1d6>
 801351a:	9b03      	ldr	r3, [sp, #12]
 801351c:	3307      	adds	r3, #7
 801351e:	f023 0307 	bic.w	r3, r3, #7
 8013522:	3308      	adds	r3, #8
 8013524:	9303      	str	r3, [sp, #12]
 8013526:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013528:	443b      	add	r3, r7
 801352a:	9309      	str	r3, [sp, #36]	@ 0x24
 801352c:	e76a      	b.n	8013404 <_vfiprintf_r+0x78>
 801352e:	fb0c 3202 	mla	r2, ip, r2, r3
 8013532:	460c      	mov	r4, r1
 8013534:	2001      	movs	r0, #1
 8013536:	e7a8      	b.n	801348a <_vfiprintf_r+0xfe>
 8013538:	2300      	movs	r3, #0
 801353a:	3401      	adds	r4, #1
 801353c:	9305      	str	r3, [sp, #20]
 801353e:	4619      	mov	r1, r3
 8013540:	f04f 0c0a 	mov.w	ip, #10
 8013544:	4620      	mov	r0, r4
 8013546:	f810 2b01 	ldrb.w	r2, [r0], #1
 801354a:	3a30      	subs	r2, #48	@ 0x30
 801354c:	2a09      	cmp	r2, #9
 801354e:	d903      	bls.n	8013558 <_vfiprintf_r+0x1cc>
 8013550:	2b00      	cmp	r3, #0
 8013552:	d0c6      	beq.n	80134e2 <_vfiprintf_r+0x156>
 8013554:	9105      	str	r1, [sp, #20]
 8013556:	e7c4      	b.n	80134e2 <_vfiprintf_r+0x156>
 8013558:	fb0c 2101 	mla	r1, ip, r1, r2
 801355c:	4604      	mov	r4, r0
 801355e:	2301      	movs	r3, #1
 8013560:	e7f0      	b.n	8013544 <_vfiprintf_r+0x1b8>
 8013562:	ab03      	add	r3, sp, #12
 8013564:	9300      	str	r3, [sp, #0]
 8013566:	462a      	mov	r2, r5
 8013568:	4b12      	ldr	r3, [pc, #72]	@ (80135b4 <_vfiprintf_r+0x228>)
 801356a:	a904      	add	r1, sp, #16
 801356c:	4630      	mov	r0, r6
 801356e:	f7fb ff01 	bl	800f374 <_printf_float>
 8013572:	4607      	mov	r7, r0
 8013574:	1c78      	adds	r0, r7, #1
 8013576:	d1d6      	bne.n	8013526 <_vfiprintf_r+0x19a>
 8013578:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801357a:	07d9      	lsls	r1, r3, #31
 801357c:	d405      	bmi.n	801358a <_vfiprintf_r+0x1fe>
 801357e:	89ab      	ldrh	r3, [r5, #12]
 8013580:	059a      	lsls	r2, r3, #22
 8013582:	d402      	bmi.n	801358a <_vfiprintf_r+0x1fe>
 8013584:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8013586:	f7fc fe99 	bl	80102bc <__retarget_lock_release_recursive>
 801358a:	89ab      	ldrh	r3, [r5, #12]
 801358c:	065b      	lsls	r3, r3, #25
 801358e:	f53f af1f 	bmi.w	80133d0 <_vfiprintf_r+0x44>
 8013592:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013594:	e71e      	b.n	80133d4 <_vfiprintf_r+0x48>
 8013596:	ab03      	add	r3, sp, #12
 8013598:	9300      	str	r3, [sp, #0]
 801359a:	462a      	mov	r2, r5
 801359c:	4b05      	ldr	r3, [pc, #20]	@ (80135b4 <_vfiprintf_r+0x228>)
 801359e:	a904      	add	r1, sp, #16
 80135a0:	4630      	mov	r0, r6
 80135a2:	f7fc f97f 	bl	800f8a4 <_printf_i>
 80135a6:	e7e4      	b.n	8013572 <_vfiprintf_r+0x1e6>
 80135a8:	080184c8 	.word	0x080184c8
 80135ac:	080184d2 	.word	0x080184d2
 80135b0:	0800f375 	.word	0x0800f375
 80135b4:	08013369 	.word	0x08013369
 80135b8:	080184ce 	.word	0x080184ce

080135bc <__swbuf_r>:
 80135bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80135be:	460e      	mov	r6, r1
 80135c0:	4614      	mov	r4, r2
 80135c2:	4605      	mov	r5, r0
 80135c4:	b118      	cbz	r0, 80135ce <__swbuf_r+0x12>
 80135c6:	6a03      	ldr	r3, [r0, #32]
 80135c8:	b90b      	cbnz	r3, 80135ce <__swbuf_r+0x12>
 80135ca:	f7fc fd2b 	bl	8010024 <__sinit>
 80135ce:	69a3      	ldr	r3, [r4, #24]
 80135d0:	60a3      	str	r3, [r4, #8]
 80135d2:	89a3      	ldrh	r3, [r4, #12]
 80135d4:	071a      	lsls	r2, r3, #28
 80135d6:	d501      	bpl.n	80135dc <__swbuf_r+0x20>
 80135d8:	6923      	ldr	r3, [r4, #16]
 80135da:	b943      	cbnz	r3, 80135ee <__swbuf_r+0x32>
 80135dc:	4621      	mov	r1, r4
 80135de:	4628      	mov	r0, r5
 80135e0:	f000 f82a 	bl	8013638 <__swsetup_r>
 80135e4:	b118      	cbz	r0, 80135ee <__swbuf_r+0x32>
 80135e6:	f04f 37ff 	mov.w	r7, #4294967295
 80135ea:	4638      	mov	r0, r7
 80135ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80135ee:	6823      	ldr	r3, [r4, #0]
 80135f0:	6922      	ldr	r2, [r4, #16]
 80135f2:	1a98      	subs	r0, r3, r2
 80135f4:	6963      	ldr	r3, [r4, #20]
 80135f6:	b2f6      	uxtb	r6, r6
 80135f8:	4283      	cmp	r3, r0
 80135fa:	4637      	mov	r7, r6
 80135fc:	dc05      	bgt.n	801360a <__swbuf_r+0x4e>
 80135fe:	4621      	mov	r1, r4
 8013600:	4628      	mov	r0, r5
 8013602:	f7ff fa53 	bl	8012aac <_fflush_r>
 8013606:	2800      	cmp	r0, #0
 8013608:	d1ed      	bne.n	80135e6 <__swbuf_r+0x2a>
 801360a:	68a3      	ldr	r3, [r4, #8]
 801360c:	3b01      	subs	r3, #1
 801360e:	60a3      	str	r3, [r4, #8]
 8013610:	6823      	ldr	r3, [r4, #0]
 8013612:	1c5a      	adds	r2, r3, #1
 8013614:	6022      	str	r2, [r4, #0]
 8013616:	701e      	strb	r6, [r3, #0]
 8013618:	6962      	ldr	r2, [r4, #20]
 801361a:	1c43      	adds	r3, r0, #1
 801361c:	429a      	cmp	r2, r3
 801361e:	d004      	beq.n	801362a <__swbuf_r+0x6e>
 8013620:	89a3      	ldrh	r3, [r4, #12]
 8013622:	07db      	lsls	r3, r3, #31
 8013624:	d5e1      	bpl.n	80135ea <__swbuf_r+0x2e>
 8013626:	2e0a      	cmp	r6, #10
 8013628:	d1df      	bne.n	80135ea <__swbuf_r+0x2e>
 801362a:	4621      	mov	r1, r4
 801362c:	4628      	mov	r0, r5
 801362e:	f7ff fa3d 	bl	8012aac <_fflush_r>
 8013632:	2800      	cmp	r0, #0
 8013634:	d0d9      	beq.n	80135ea <__swbuf_r+0x2e>
 8013636:	e7d6      	b.n	80135e6 <__swbuf_r+0x2a>

08013638 <__swsetup_r>:
 8013638:	b538      	push	{r3, r4, r5, lr}
 801363a:	4b29      	ldr	r3, [pc, #164]	@ (80136e0 <__swsetup_r+0xa8>)
 801363c:	4605      	mov	r5, r0
 801363e:	6818      	ldr	r0, [r3, #0]
 8013640:	460c      	mov	r4, r1
 8013642:	b118      	cbz	r0, 801364c <__swsetup_r+0x14>
 8013644:	6a03      	ldr	r3, [r0, #32]
 8013646:	b90b      	cbnz	r3, 801364c <__swsetup_r+0x14>
 8013648:	f7fc fcec 	bl	8010024 <__sinit>
 801364c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013650:	0719      	lsls	r1, r3, #28
 8013652:	d422      	bmi.n	801369a <__swsetup_r+0x62>
 8013654:	06da      	lsls	r2, r3, #27
 8013656:	d407      	bmi.n	8013668 <__swsetup_r+0x30>
 8013658:	2209      	movs	r2, #9
 801365a:	602a      	str	r2, [r5, #0]
 801365c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013660:	81a3      	strh	r3, [r4, #12]
 8013662:	f04f 30ff 	mov.w	r0, #4294967295
 8013666:	e033      	b.n	80136d0 <__swsetup_r+0x98>
 8013668:	0758      	lsls	r0, r3, #29
 801366a:	d512      	bpl.n	8013692 <__swsetup_r+0x5a>
 801366c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801366e:	b141      	cbz	r1, 8013682 <__swsetup_r+0x4a>
 8013670:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8013674:	4299      	cmp	r1, r3
 8013676:	d002      	beq.n	801367e <__swsetup_r+0x46>
 8013678:	4628      	mov	r0, r5
 801367a:	f7fd fc81 	bl	8010f80 <_free_r>
 801367e:	2300      	movs	r3, #0
 8013680:	6363      	str	r3, [r4, #52]	@ 0x34
 8013682:	89a3      	ldrh	r3, [r4, #12]
 8013684:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8013688:	81a3      	strh	r3, [r4, #12]
 801368a:	2300      	movs	r3, #0
 801368c:	6063      	str	r3, [r4, #4]
 801368e:	6923      	ldr	r3, [r4, #16]
 8013690:	6023      	str	r3, [r4, #0]
 8013692:	89a3      	ldrh	r3, [r4, #12]
 8013694:	f043 0308 	orr.w	r3, r3, #8
 8013698:	81a3      	strh	r3, [r4, #12]
 801369a:	6923      	ldr	r3, [r4, #16]
 801369c:	b94b      	cbnz	r3, 80136b2 <__swsetup_r+0x7a>
 801369e:	89a3      	ldrh	r3, [r4, #12]
 80136a0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80136a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80136a8:	d003      	beq.n	80136b2 <__swsetup_r+0x7a>
 80136aa:	4621      	mov	r1, r4
 80136ac:	4628      	mov	r0, r5
 80136ae:	f000 f883 	bl	80137b8 <__smakebuf_r>
 80136b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80136b6:	f013 0201 	ands.w	r2, r3, #1
 80136ba:	d00a      	beq.n	80136d2 <__swsetup_r+0x9a>
 80136bc:	2200      	movs	r2, #0
 80136be:	60a2      	str	r2, [r4, #8]
 80136c0:	6962      	ldr	r2, [r4, #20]
 80136c2:	4252      	negs	r2, r2
 80136c4:	61a2      	str	r2, [r4, #24]
 80136c6:	6922      	ldr	r2, [r4, #16]
 80136c8:	b942      	cbnz	r2, 80136dc <__swsetup_r+0xa4>
 80136ca:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80136ce:	d1c5      	bne.n	801365c <__swsetup_r+0x24>
 80136d0:	bd38      	pop	{r3, r4, r5, pc}
 80136d2:	0799      	lsls	r1, r3, #30
 80136d4:	bf58      	it	pl
 80136d6:	6962      	ldrpl	r2, [r4, #20]
 80136d8:	60a2      	str	r2, [r4, #8]
 80136da:	e7f4      	b.n	80136c6 <__swsetup_r+0x8e>
 80136dc:	2000      	movs	r0, #0
 80136de:	e7f7      	b.n	80136d0 <__swsetup_r+0x98>
 80136e0:	20000140 	.word	0x20000140

080136e4 <_raise_r>:
 80136e4:	291f      	cmp	r1, #31
 80136e6:	b538      	push	{r3, r4, r5, lr}
 80136e8:	4605      	mov	r5, r0
 80136ea:	460c      	mov	r4, r1
 80136ec:	d904      	bls.n	80136f8 <_raise_r+0x14>
 80136ee:	2316      	movs	r3, #22
 80136f0:	6003      	str	r3, [r0, #0]
 80136f2:	f04f 30ff 	mov.w	r0, #4294967295
 80136f6:	bd38      	pop	{r3, r4, r5, pc}
 80136f8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80136fa:	b112      	cbz	r2, 8013702 <_raise_r+0x1e>
 80136fc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013700:	b94b      	cbnz	r3, 8013716 <_raise_r+0x32>
 8013702:	4628      	mov	r0, r5
 8013704:	f000 f830 	bl	8013768 <_getpid_r>
 8013708:	4622      	mov	r2, r4
 801370a:	4601      	mov	r1, r0
 801370c:	4628      	mov	r0, r5
 801370e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013712:	f000 b817 	b.w	8013744 <_kill_r>
 8013716:	2b01      	cmp	r3, #1
 8013718:	d00a      	beq.n	8013730 <_raise_r+0x4c>
 801371a:	1c59      	adds	r1, r3, #1
 801371c:	d103      	bne.n	8013726 <_raise_r+0x42>
 801371e:	2316      	movs	r3, #22
 8013720:	6003      	str	r3, [r0, #0]
 8013722:	2001      	movs	r0, #1
 8013724:	e7e7      	b.n	80136f6 <_raise_r+0x12>
 8013726:	2100      	movs	r1, #0
 8013728:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801372c:	4620      	mov	r0, r4
 801372e:	4798      	blx	r3
 8013730:	2000      	movs	r0, #0
 8013732:	e7e0      	b.n	80136f6 <_raise_r+0x12>

08013734 <raise>:
 8013734:	4b02      	ldr	r3, [pc, #8]	@ (8013740 <raise+0xc>)
 8013736:	4601      	mov	r1, r0
 8013738:	6818      	ldr	r0, [r3, #0]
 801373a:	f7ff bfd3 	b.w	80136e4 <_raise_r>
 801373e:	bf00      	nop
 8013740:	20000140 	.word	0x20000140

08013744 <_kill_r>:
 8013744:	b538      	push	{r3, r4, r5, lr}
 8013746:	4d07      	ldr	r5, [pc, #28]	@ (8013764 <_kill_r+0x20>)
 8013748:	2300      	movs	r3, #0
 801374a:	4604      	mov	r4, r0
 801374c:	4608      	mov	r0, r1
 801374e:	4611      	mov	r1, r2
 8013750:	602b      	str	r3, [r5, #0]
 8013752:	f7f1 fbf9 	bl	8004f48 <_kill>
 8013756:	1c43      	adds	r3, r0, #1
 8013758:	d102      	bne.n	8013760 <_kill_r+0x1c>
 801375a:	682b      	ldr	r3, [r5, #0]
 801375c:	b103      	cbz	r3, 8013760 <_kill_r+0x1c>
 801375e:	6023      	str	r3, [r4, #0]
 8013760:	bd38      	pop	{r3, r4, r5, pc}
 8013762:	bf00      	nop
 8013764:	20005b94 	.word	0x20005b94

08013768 <_getpid_r>:
 8013768:	f7f1 bbec 	b.w	8004f44 <_getpid>

0801376c <__swhatbuf_r>:
 801376c:	b570      	push	{r4, r5, r6, lr}
 801376e:	460c      	mov	r4, r1
 8013770:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013774:	2900      	cmp	r1, #0
 8013776:	b096      	sub	sp, #88	@ 0x58
 8013778:	4615      	mov	r5, r2
 801377a:	461e      	mov	r6, r3
 801377c:	da0d      	bge.n	801379a <__swhatbuf_r+0x2e>
 801377e:	89a3      	ldrh	r3, [r4, #12]
 8013780:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8013784:	f04f 0100 	mov.w	r1, #0
 8013788:	bf14      	ite	ne
 801378a:	2340      	movne	r3, #64	@ 0x40
 801378c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8013790:	2000      	movs	r0, #0
 8013792:	6031      	str	r1, [r6, #0]
 8013794:	602b      	str	r3, [r5, #0]
 8013796:	b016      	add	sp, #88	@ 0x58
 8013798:	bd70      	pop	{r4, r5, r6, pc}
 801379a:	466a      	mov	r2, sp
 801379c:	f000 f848 	bl	8013830 <_fstat_r>
 80137a0:	2800      	cmp	r0, #0
 80137a2:	dbec      	blt.n	801377e <__swhatbuf_r+0x12>
 80137a4:	9901      	ldr	r1, [sp, #4]
 80137a6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80137aa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80137ae:	4259      	negs	r1, r3
 80137b0:	4159      	adcs	r1, r3
 80137b2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80137b6:	e7eb      	b.n	8013790 <__swhatbuf_r+0x24>

080137b8 <__smakebuf_r>:
 80137b8:	898b      	ldrh	r3, [r1, #12]
 80137ba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80137bc:	079d      	lsls	r5, r3, #30
 80137be:	4606      	mov	r6, r0
 80137c0:	460c      	mov	r4, r1
 80137c2:	d507      	bpl.n	80137d4 <__smakebuf_r+0x1c>
 80137c4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80137c8:	6023      	str	r3, [r4, #0]
 80137ca:	6123      	str	r3, [r4, #16]
 80137cc:	2301      	movs	r3, #1
 80137ce:	6163      	str	r3, [r4, #20]
 80137d0:	b003      	add	sp, #12
 80137d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80137d4:	ab01      	add	r3, sp, #4
 80137d6:	466a      	mov	r2, sp
 80137d8:	f7ff ffc8 	bl	801376c <__swhatbuf_r>
 80137dc:	9f00      	ldr	r7, [sp, #0]
 80137de:	4605      	mov	r5, r0
 80137e0:	4639      	mov	r1, r7
 80137e2:	4630      	mov	r0, r6
 80137e4:	f7fd fc40 	bl	8011068 <_malloc_r>
 80137e8:	b948      	cbnz	r0, 80137fe <__smakebuf_r+0x46>
 80137ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80137ee:	059a      	lsls	r2, r3, #22
 80137f0:	d4ee      	bmi.n	80137d0 <__smakebuf_r+0x18>
 80137f2:	f023 0303 	bic.w	r3, r3, #3
 80137f6:	f043 0302 	orr.w	r3, r3, #2
 80137fa:	81a3      	strh	r3, [r4, #12]
 80137fc:	e7e2      	b.n	80137c4 <__smakebuf_r+0xc>
 80137fe:	89a3      	ldrh	r3, [r4, #12]
 8013800:	6020      	str	r0, [r4, #0]
 8013802:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013806:	81a3      	strh	r3, [r4, #12]
 8013808:	9b01      	ldr	r3, [sp, #4]
 801380a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801380e:	b15b      	cbz	r3, 8013828 <__smakebuf_r+0x70>
 8013810:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013814:	4630      	mov	r0, r6
 8013816:	f000 f81d 	bl	8013854 <_isatty_r>
 801381a:	b128      	cbz	r0, 8013828 <__smakebuf_r+0x70>
 801381c:	89a3      	ldrh	r3, [r4, #12]
 801381e:	f023 0303 	bic.w	r3, r3, #3
 8013822:	f043 0301 	orr.w	r3, r3, #1
 8013826:	81a3      	strh	r3, [r4, #12]
 8013828:	89a3      	ldrh	r3, [r4, #12]
 801382a:	431d      	orrs	r5, r3
 801382c:	81a5      	strh	r5, [r4, #12]
 801382e:	e7cf      	b.n	80137d0 <__smakebuf_r+0x18>

08013830 <_fstat_r>:
 8013830:	b538      	push	{r3, r4, r5, lr}
 8013832:	4d07      	ldr	r5, [pc, #28]	@ (8013850 <_fstat_r+0x20>)
 8013834:	2300      	movs	r3, #0
 8013836:	4604      	mov	r4, r0
 8013838:	4608      	mov	r0, r1
 801383a:	4611      	mov	r1, r2
 801383c:	602b      	str	r3, [r5, #0]
 801383e:	f7f1 fbb1 	bl	8004fa4 <_fstat>
 8013842:	1c43      	adds	r3, r0, #1
 8013844:	d102      	bne.n	801384c <_fstat_r+0x1c>
 8013846:	682b      	ldr	r3, [r5, #0]
 8013848:	b103      	cbz	r3, 801384c <_fstat_r+0x1c>
 801384a:	6023      	str	r3, [r4, #0]
 801384c:	bd38      	pop	{r3, r4, r5, pc}
 801384e:	bf00      	nop
 8013850:	20005b94 	.word	0x20005b94

08013854 <_isatty_r>:
 8013854:	b538      	push	{r3, r4, r5, lr}
 8013856:	4d06      	ldr	r5, [pc, #24]	@ (8013870 <_isatty_r+0x1c>)
 8013858:	2300      	movs	r3, #0
 801385a:	4604      	mov	r4, r0
 801385c:	4608      	mov	r0, r1
 801385e:	602b      	str	r3, [r5, #0]
 8013860:	f7f1 fba6 	bl	8004fb0 <_isatty>
 8013864:	1c43      	adds	r3, r0, #1
 8013866:	d102      	bne.n	801386e <_isatty_r+0x1a>
 8013868:	682b      	ldr	r3, [r5, #0]
 801386a:	b103      	cbz	r3, 801386e <_isatty_r+0x1a>
 801386c:	6023      	str	r3, [r4, #0]
 801386e:	bd38      	pop	{r3, r4, r5, pc}
 8013870:	20005b94 	.word	0x20005b94
 8013874:	00000000 	.word	0x00000000

08013878 <log>:
 8013878:	b538      	push	{r3, r4, r5, lr}
 801387a:	ed2d 8b02 	vpush	{d8}
 801387e:	ec55 4b10 	vmov	r4, r5, d0
 8013882:	f000 fb49 	bl	8013f18 <__ieee754_log>
 8013886:	4622      	mov	r2, r4
 8013888:	462b      	mov	r3, r5
 801388a:	4620      	mov	r0, r4
 801388c:	4629      	mov	r1, r5
 801388e:	eeb0 8a40 	vmov.f32	s16, s0
 8013892:	eef0 8a60 	vmov.f32	s17, s1
 8013896:	f7ed f921 	bl	8000adc <__aeabi_dcmpun>
 801389a:	b998      	cbnz	r0, 80138c4 <log+0x4c>
 801389c:	2200      	movs	r2, #0
 801389e:	2300      	movs	r3, #0
 80138a0:	4620      	mov	r0, r4
 80138a2:	4629      	mov	r1, r5
 80138a4:	f7ed f910 	bl	8000ac8 <__aeabi_dcmpgt>
 80138a8:	b960      	cbnz	r0, 80138c4 <log+0x4c>
 80138aa:	2200      	movs	r2, #0
 80138ac:	2300      	movs	r3, #0
 80138ae:	4620      	mov	r0, r4
 80138b0:	4629      	mov	r1, r5
 80138b2:	f7ed f8e1 	bl	8000a78 <__aeabi_dcmpeq>
 80138b6:	b160      	cbz	r0, 80138d2 <log+0x5a>
 80138b8:	f7fc fcd4 	bl	8010264 <__errno>
 80138bc:	ed9f 8b0a 	vldr	d8, [pc, #40]	@ 80138e8 <log+0x70>
 80138c0:	2322      	movs	r3, #34	@ 0x22
 80138c2:	6003      	str	r3, [r0, #0]
 80138c4:	eeb0 0a48 	vmov.f32	s0, s16
 80138c8:	eef0 0a68 	vmov.f32	s1, s17
 80138cc:	ecbd 8b02 	vpop	{d8}
 80138d0:	bd38      	pop	{r3, r4, r5, pc}
 80138d2:	f7fc fcc7 	bl	8010264 <__errno>
 80138d6:	ecbd 8b02 	vpop	{d8}
 80138da:	2321      	movs	r3, #33	@ 0x21
 80138dc:	6003      	str	r3, [r0, #0]
 80138de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80138e2:	4803      	ldr	r0, [pc, #12]	@ (80138f0 <log+0x78>)
 80138e4:	f7ff b948 	b.w	8012b78 <nan>
 80138e8:	00000000 	.word	0x00000000
 80138ec:	fff00000 	.word	0xfff00000
 80138f0:	0801851c 	.word	0x0801851c
 80138f4:	00000000 	.word	0x00000000

080138f8 <cos>:
 80138f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80138fa:	ec53 2b10 	vmov	r2, r3, d0
 80138fe:	4826      	ldr	r0, [pc, #152]	@ (8013998 <cos+0xa0>)
 8013900:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8013904:	4281      	cmp	r1, r0
 8013906:	d806      	bhi.n	8013916 <cos+0x1e>
 8013908:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8013990 <cos+0x98>
 801390c:	b005      	add	sp, #20
 801390e:	f85d eb04 	ldr.w	lr, [sp], #4
 8013912:	f000 b97d 	b.w	8013c10 <__kernel_cos>
 8013916:	4821      	ldr	r0, [pc, #132]	@ (801399c <cos+0xa4>)
 8013918:	4281      	cmp	r1, r0
 801391a:	d908      	bls.n	801392e <cos+0x36>
 801391c:	4610      	mov	r0, r2
 801391e:	4619      	mov	r1, r3
 8013920:	f7ec fc8a 	bl	8000238 <__aeabi_dsub>
 8013924:	ec41 0b10 	vmov	d0, r0, r1
 8013928:	b005      	add	sp, #20
 801392a:	f85d fb04 	ldr.w	pc, [sp], #4
 801392e:	4668      	mov	r0, sp
 8013930:	f000 fcaa 	bl	8014288 <__ieee754_rem_pio2>
 8013934:	f000 0003 	and.w	r0, r0, #3
 8013938:	2801      	cmp	r0, #1
 801393a:	d00b      	beq.n	8013954 <cos+0x5c>
 801393c:	2802      	cmp	r0, #2
 801393e:	d015      	beq.n	801396c <cos+0x74>
 8013940:	b9d8      	cbnz	r0, 801397a <cos+0x82>
 8013942:	ed9d 1b02 	vldr	d1, [sp, #8]
 8013946:	ed9d 0b00 	vldr	d0, [sp]
 801394a:	f000 f961 	bl	8013c10 <__kernel_cos>
 801394e:	ec51 0b10 	vmov	r0, r1, d0
 8013952:	e7e7      	b.n	8013924 <cos+0x2c>
 8013954:	ed9d 1b02 	vldr	d1, [sp, #8]
 8013958:	ed9d 0b00 	vldr	d0, [sp]
 801395c:	f000 fa20 	bl	8013da0 <__kernel_sin>
 8013960:	ec53 2b10 	vmov	r2, r3, d0
 8013964:	4610      	mov	r0, r2
 8013966:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 801396a:	e7db      	b.n	8013924 <cos+0x2c>
 801396c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8013970:	ed9d 0b00 	vldr	d0, [sp]
 8013974:	f000 f94c 	bl	8013c10 <__kernel_cos>
 8013978:	e7f2      	b.n	8013960 <cos+0x68>
 801397a:	ed9d 1b02 	vldr	d1, [sp, #8]
 801397e:	ed9d 0b00 	vldr	d0, [sp]
 8013982:	2001      	movs	r0, #1
 8013984:	f000 fa0c 	bl	8013da0 <__kernel_sin>
 8013988:	e7e1      	b.n	801394e <cos+0x56>
 801398a:	bf00      	nop
 801398c:	f3af 8000 	nop.w
	...
 8013998:	3fe921fb 	.word	0x3fe921fb
 801399c:	7fefffff 	.word	0x7fefffff

080139a0 <sin>:
 80139a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80139a2:	ec53 2b10 	vmov	r2, r3, d0
 80139a6:	4826      	ldr	r0, [pc, #152]	@ (8013a40 <sin+0xa0>)
 80139a8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80139ac:	4281      	cmp	r1, r0
 80139ae:	d807      	bhi.n	80139c0 <sin+0x20>
 80139b0:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8013a38 <sin+0x98>
 80139b4:	2000      	movs	r0, #0
 80139b6:	b005      	add	sp, #20
 80139b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80139bc:	f000 b9f0 	b.w	8013da0 <__kernel_sin>
 80139c0:	4820      	ldr	r0, [pc, #128]	@ (8013a44 <sin+0xa4>)
 80139c2:	4281      	cmp	r1, r0
 80139c4:	d908      	bls.n	80139d8 <sin+0x38>
 80139c6:	4610      	mov	r0, r2
 80139c8:	4619      	mov	r1, r3
 80139ca:	f7ec fc35 	bl	8000238 <__aeabi_dsub>
 80139ce:	ec41 0b10 	vmov	d0, r0, r1
 80139d2:	b005      	add	sp, #20
 80139d4:	f85d fb04 	ldr.w	pc, [sp], #4
 80139d8:	4668      	mov	r0, sp
 80139da:	f000 fc55 	bl	8014288 <__ieee754_rem_pio2>
 80139de:	f000 0003 	and.w	r0, r0, #3
 80139e2:	2801      	cmp	r0, #1
 80139e4:	d00c      	beq.n	8013a00 <sin+0x60>
 80139e6:	2802      	cmp	r0, #2
 80139e8:	d011      	beq.n	8013a0e <sin+0x6e>
 80139ea:	b9e8      	cbnz	r0, 8013a28 <sin+0x88>
 80139ec:	ed9d 1b02 	vldr	d1, [sp, #8]
 80139f0:	ed9d 0b00 	vldr	d0, [sp]
 80139f4:	2001      	movs	r0, #1
 80139f6:	f000 f9d3 	bl	8013da0 <__kernel_sin>
 80139fa:	ec51 0b10 	vmov	r0, r1, d0
 80139fe:	e7e6      	b.n	80139ce <sin+0x2e>
 8013a00:	ed9d 1b02 	vldr	d1, [sp, #8]
 8013a04:	ed9d 0b00 	vldr	d0, [sp]
 8013a08:	f000 f902 	bl	8013c10 <__kernel_cos>
 8013a0c:	e7f5      	b.n	80139fa <sin+0x5a>
 8013a0e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8013a12:	ed9d 0b00 	vldr	d0, [sp]
 8013a16:	2001      	movs	r0, #1
 8013a18:	f000 f9c2 	bl	8013da0 <__kernel_sin>
 8013a1c:	ec53 2b10 	vmov	r2, r3, d0
 8013a20:	4610      	mov	r0, r2
 8013a22:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8013a26:	e7d2      	b.n	80139ce <sin+0x2e>
 8013a28:	ed9d 1b02 	vldr	d1, [sp, #8]
 8013a2c:	ed9d 0b00 	vldr	d0, [sp]
 8013a30:	f000 f8ee 	bl	8013c10 <__kernel_cos>
 8013a34:	e7f2      	b.n	8013a1c <sin+0x7c>
 8013a36:	bf00      	nop
	...
 8013a40:	3fe921fb 	.word	0x3fe921fb
 8013a44:	7fefffff 	.word	0x7fefffff

08013a48 <powf>:
 8013a48:	b508      	push	{r3, lr}
 8013a4a:	ed2d 8b04 	vpush	{d8-d9}
 8013a4e:	eeb0 8a60 	vmov.f32	s16, s1
 8013a52:	eeb0 9a40 	vmov.f32	s18, s0
 8013a56:	f000 fe4f 	bl	80146f8 <__ieee754_powf>
 8013a5a:	eeb4 8a48 	vcmp.f32	s16, s16
 8013a5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013a62:	eef0 8a40 	vmov.f32	s17, s0
 8013a66:	d63e      	bvs.n	8013ae6 <powf+0x9e>
 8013a68:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8013a6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013a70:	d112      	bne.n	8013a98 <powf+0x50>
 8013a72:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8013a76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013a7a:	d039      	beq.n	8013af0 <powf+0xa8>
 8013a7c:	eeb0 0a48 	vmov.f32	s0, s16
 8013a80:	f000 f839 	bl	8013af6 <finitef>
 8013a84:	b378      	cbz	r0, 8013ae6 <powf+0x9e>
 8013a86:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8013a8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013a8e:	d52a      	bpl.n	8013ae6 <powf+0x9e>
 8013a90:	f7fc fbe8 	bl	8010264 <__errno>
 8013a94:	2322      	movs	r3, #34	@ 0x22
 8013a96:	e014      	b.n	8013ac2 <powf+0x7a>
 8013a98:	f000 f82d 	bl	8013af6 <finitef>
 8013a9c:	b998      	cbnz	r0, 8013ac6 <powf+0x7e>
 8013a9e:	eeb0 0a49 	vmov.f32	s0, s18
 8013aa2:	f000 f828 	bl	8013af6 <finitef>
 8013aa6:	b170      	cbz	r0, 8013ac6 <powf+0x7e>
 8013aa8:	eeb0 0a48 	vmov.f32	s0, s16
 8013aac:	f000 f823 	bl	8013af6 <finitef>
 8013ab0:	b148      	cbz	r0, 8013ac6 <powf+0x7e>
 8013ab2:	eef4 8a68 	vcmp.f32	s17, s17
 8013ab6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013aba:	d7e9      	bvc.n	8013a90 <powf+0x48>
 8013abc:	f7fc fbd2 	bl	8010264 <__errno>
 8013ac0:	2321      	movs	r3, #33	@ 0x21
 8013ac2:	6003      	str	r3, [r0, #0]
 8013ac4:	e00f      	b.n	8013ae6 <powf+0x9e>
 8013ac6:	eef5 8a40 	vcmp.f32	s17, #0.0
 8013aca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ace:	d10a      	bne.n	8013ae6 <powf+0x9e>
 8013ad0:	eeb0 0a49 	vmov.f32	s0, s18
 8013ad4:	f000 f80f 	bl	8013af6 <finitef>
 8013ad8:	b128      	cbz	r0, 8013ae6 <powf+0x9e>
 8013ada:	eeb0 0a48 	vmov.f32	s0, s16
 8013ade:	f000 f80a 	bl	8013af6 <finitef>
 8013ae2:	2800      	cmp	r0, #0
 8013ae4:	d1d4      	bne.n	8013a90 <powf+0x48>
 8013ae6:	eeb0 0a68 	vmov.f32	s0, s17
 8013aea:	ecbd 8b04 	vpop	{d8-d9}
 8013aee:	bd08      	pop	{r3, pc}
 8013af0:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 8013af4:	e7f7      	b.n	8013ae6 <powf+0x9e>

08013af6 <finitef>:
 8013af6:	ee10 3a10 	vmov	r3, s0
 8013afa:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 8013afe:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 8013b02:	bfac      	ite	ge
 8013b04:	2000      	movge	r0, #0
 8013b06:	2001      	movlt	r0, #1
 8013b08:	4770      	bx	lr

08013b0a <cosl>:
 8013b0a:	f7ff bef5 	b.w	80138f8 <cos>

08013b0e <sinl>:
 8013b0e:	f7ff bf47 	b.w	80139a0 <sin>

08013b12 <acosl>:
 8013b12:	f000 bdb5 	b.w	8014680 <acos>
	...

08013b18 <floor>:
 8013b18:	ec51 0b10 	vmov	r0, r1, d0
 8013b1c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8013b20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013b24:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8013b28:	2e13      	cmp	r6, #19
 8013b2a:	460c      	mov	r4, r1
 8013b2c:	4605      	mov	r5, r0
 8013b2e:	4680      	mov	r8, r0
 8013b30:	dc34      	bgt.n	8013b9c <floor+0x84>
 8013b32:	2e00      	cmp	r6, #0
 8013b34:	da17      	bge.n	8013b66 <floor+0x4e>
 8013b36:	a332      	add	r3, pc, #200	@ (adr r3, 8013c00 <floor+0xe8>)
 8013b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b3c:	f7ec fb7e 	bl	800023c <__adddf3>
 8013b40:	2200      	movs	r2, #0
 8013b42:	2300      	movs	r3, #0
 8013b44:	f7ec ffc0 	bl	8000ac8 <__aeabi_dcmpgt>
 8013b48:	b150      	cbz	r0, 8013b60 <floor+0x48>
 8013b4a:	2c00      	cmp	r4, #0
 8013b4c:	da55      	bge.n	8013bfa <floor+0xe2>
 8013b4e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8013b52:	432c      	orrs	r4, r5
 8013b54:	2500      	movs	r5, #0
 8013b56:	42ac      	cmp	r4, r5
 8013b58:	4c2b      	ldr	r4, [pc, #172]	@ (8013c08 <floor+0xf0>)
 8013b5a:	bf08      	it	eq
 8013b5c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8013b60:	4621      	mov	r1, r4
 8013b62:	4628      	mov	r0, r5
 8013b64:	e023      	b.n	8013bae <floor+0x96>
 8013b66:	4f29      	ldr	r7, [pc, #164]	@ (8013c0c <floor+0xf4>)
 8013b68:	4137      	asrs	r7, r6
 8013b6a:	ea01 0307 	and.w	r3, r1, r7
 8013b6e:	4303      	orrs	r3, r0
 8013b70:	d01d      	beq.n	8013bae <floor+0x96>
 8013b72:	a323      	add	r3, pc, #140	@ (adr r3, 8013c00 <floor+0xe8>)
 8013b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b78:	f7ec fb60 	bl	800023c <__adddf3>
 8013b7c:	2200      	movs	r2, #0
 8013b7e:	2300      	movs	r3, #0
 8013b80:	f7ec ffa2 	bl	8000ac8 <__aeabi_dcmpgt>
 8013b84:	2800      	cmp	r0, #0
 8013b86:	d0eb      	beq.n	8013b60 <floor+0x48>
 8013b88:	2c00      	cmp	r4, #0
 8013b8a:	bfbe      	ittt	lt
 8013b8c:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8013b90:	4133      	asrlt	r3, r6
 8013b92:	18e4      	addlt	r4, r4, r3
 8013b94:	ea24 0407 	bic.w	r4, r4, r7
 8013b98:	2500      	movs	r5, #0
 8013b9a:	e7e1      	b.n	8013b60 <floor+0x48>
 8013b9c:	2e33      	cmp	r6, #51	@ 0x33
 8013b9e:	dd0a      	ble.n	8013bb6 <floor+0x9e>
 8013ba0:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8013ba4:	d103      	bne.n	8013bae <floor+0x96>
 8013ba6:	4602      	mov	r2, r0
 8013ba8:	460b      	mov	r3, r1
 8013baa:	f7ec fb47 	bl	800023c <__adddf3>
 8013bae:	ec41 0b10 	vmov	d0, r0, r1
 8013bb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013bb6:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8013bba:	f04f 37ff 	mov.w	r7, #4294967295
 8013bbe:	40df      	lsrs	r7, r3
 8013bc0:	4207      	tst	r7, r0
 8013bc2:	d0f4      	beq.n	8013bae <floor+0x96>
 8013bc4:	a30e      	add	r3, pc, #56	@ (adr r3, 8013c00 <floor+0xe8>)
 8013bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013bca:	f7ec fb37 	bl	800023c <__adddf3>
 8013bce:	2200      	movs	r2, #0
 8013bd0:	2300      	movs	r3, #0
 8013bd2:	f7ec ff79 	bl	8000ac8 <__aeabi_dcmpgt>
 8013bd6:	2800      	cmp	r0, #0
 8013bd8:	d0c2      	beq.n	8013b60 <floor+0x48>
 8013bda:	2c00      	cmp	r4, #0
 8013bdc:	da0a      	bge.n	8013bf4 <floor+0xdc>
 8013bde:	2e14      	cmp	r6, #20
 8013be0:	d101      	bne.n	8013be6 <floor+0xce>
 8013be2:	3401      	adds	r4, #1
 8013be4:	e006      	b.n	8013bf4 <floor+0xdc>
 8013be6:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8013bea:	2301      	movs	r3, #1
 8013bec:	40b3      	lsls	r3, r6
 8013bee:	441d      	add	r5, r3
 8013bf0:	4545      	cmp	r5, r8
 8013bf2:	d3f6      	bcc.n	8013be2 <floor+0xca>
 8013bf4:	ea25 0507 	bic.w	r5, r5, r7
 8013bf8:	e7b2      	b.n	8013b60 <floor+0x48>
 8013bfa:	2500      	movs	r5, #0
 8013bfc:	462c      	mov	r4, r5
 8013bfe:	e7af      	b.n	8013b60 <floor+0x48>
 8013c00:	8800759c 	.word	0x8800759c
 8013c04:	7e37e43c 	.word	0x7e37e43c
 8013c08:	bff00000 	.word	0xbff00000
 8013c0c:	000fffff 	.word	0x000fffff

08013c10 <__kernel_cos>:
 8013c10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013c14:	ec57 6b10 	vmov	r6, r7, d0
 8013c18:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8013c1c:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8013c20:	ed8d 1b00 	vstr	d1, [sp]
 8013c24:	d206      	bcs.n	8013c34 <__kernel_cos+0x24>
 8013c26:	4630      	mov	r0, r6
 8013c28:	4639      	mov	r1, r7
 8013c2a:	f7ec ff6d 	bl	8000b08 <__aeabi_d2iz>
 8013c2e:	2800      	cmp	r0, #0
 8013c30:	f000 8088 	beq.w	8013d44 <__kernel_cos+0x134>
 8013c34:	4632      	mov	r2, r6
 8013c36:	463b      	mov	r3, r7
 8013c38:	4630      	mov	r0, r6
 8013c3a:	4639      	mov	r1, r7
 8013c3c:	f7ec fcb4 	bl	80005a8 <__aeabi_dmul>
 8013c40:	4b51      	ldr	r3, [pc, #324]	@ (8013d88 <__kernel_cos+0x178>)
 8013c42:	2200      	movs	r2, #0
 8013c44:	4604      	mov	r4, r0
 8013c46:	460d      	mov	r5, r1
 8013c48:	f7ec fcae 	bl	80005a8 <__aeabi_dmul>
 8013c4c:	a340      	add	r3, pc, #256	@ (adr r3, 8013d50 <__kernel_cos+0x140>)
 8013c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c52:	4682      	mov	sl, r0
 8013c54:	468b      	mov	fp, r1
 8013c56:	4620      	mov	r0, r4
 8013c58:	4629      	mov	r1, r5
 8013c5a:	f7ec fca5 	bl	80005a8 <__aeabi_dmul>
 8013c5e:	a33e      	add	r3, pc, #248	@ (adr r3, 8013d58 <__kernel_cos+0x148>)
 8013c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c64:	f7ec faea 	bl	800023c <__adddf3>
 8013c68:	4622      	mov	r2, r4
 8013c6a:	462b      	mov	r3, r5
 8013c6c:	f7ec fc9c 	bl	80005a8 <__aeabi_dmul>
 8013c70:	a33b      	add	r3, pc, #236	@ (adr r3, 8013d60 <__kernel_cos+0x150>)
 8013c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c76:	f7ec fadf 	bl	8000238 <__aeabi_dsub>
 8013c7a:	4622      	mov	r2, r4
 8013c7c:	462b      	mov	r3, r5
 8013c7e:	f7ec fc93 	bl	80005a8 <__aeabi_dmul>
 8013c82:	a339      	add	r3, pc, #228	@ (adr r3, 8013d68 <__kernel_cos+0x158>)
 8013c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c88:	f7ec fad8 	bl	800023c <__adddf3>
 8013c8c:	4622      	mov	r2, r4
 8013c8e:	462b      	mov	r3, r5
 8013c90:	f7ec fc8a 	bl	80005a8 <__aeabi_dmul>
 8013c94:	a336      	add	r3, pc, #216	@ (adr r3, 8013d70 <__kernel_cos+0x160>)
 8013c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c9a:	f7ec facd 	bl	8000238 <__aeabi_dsub>
 8013c9e:	4622      	mov	r2, r4
 8013ca0:	462b      	mov	r3, r5
 8013ca2:	f7ec fc81 	bl	80005a8 <__aeabi_dmul>
 8013ca6:	a334      	add	r3, pc, #208	@ (adr r3, 8013d78 <__kernel_cos+0x168>)
 8013ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013cac:	f7ec fac6 	bl	800023c <__adddf3>
 8013cb0:	4622      	mov	r2, r4
 8013cb2:	462b      	mov	r3, r5
 8013cb4:	f7ec fc78 	bl	80005a8 <__aeabi_dmul>
 8013cb8:	4622      	mov	r2, r4
 8013cba:	462b      	mov	r3, r5
 8013cbc:	f7ec fc74 	bl	80005a8 <__aeabi_dmul>
 8013cc0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013cc4:	4604      	mov	r4, r0
 8013cc6:	460d      	mov	r5, r1
 8013cc8:	4630      	mov	r0, r6
 8013cca:	4639      	mov	r1, r7
 8013ccc:	f7ec fc6c 	bl	80005a8 <__aeabi_dmul>
 8013cd0:	460b      	mov	r3, r1
 8013cd2:	4602      	mov	r2, r0
 8013cd4:	4629      	mov	r1, r5
 8013cd6:	4620      	mov	r0, r4
 8013cd8:	f7ec faae 	bl	8000238 <__aeabi_dsub>
 8013cdc:	4b2b      	ldr	r3, [pc, #172]	@ (8013d8c <__kernel_cos+0x17c>)
 8013cde:	4598      	cmp	r8, r3
 8013ce0:	4606      	mov	r6, r0
 8013ce2:	460f      	mov	r7, r1
 8013ce4:	d810      	bhi.n	8013d08 <__kernel_cos+0xf8>
 8013ce6:	4602      	mov	r2, r0
 8013ce8:	460b      	mov	r3, r1
 8013cea:	4650      	mov	r0, sl
 8013cec:	4659      	mov	r1, fp
 8013cee:	f7ec faa3 	bl	8000238 <__aeabi_dsub>
 8013cf2:	460b      	mov	r3, r1
 8013cf4:	4926      	ldr	r1, [pc, #152]	@ (8013d90 <__kernel_cos+0x180>)
 8013cf6:	4602      	mov	r2, r0
 8013cf8:	2000      	movs	r0, #0
 8013cfa:	f7ec fa9d 	bl	8000238 <__aeabi_dsub>
 8013cfe:	ec41 0b10 	vmov	d0, r0, r1
 8013d02:	b003      	add	sp, #12
 8013d04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013d08:	4b22      	ldr	r3, [pc, #136]	@ (8013d94 <__kernel_cos+0x184>)
 8013d0a:	4921      	ldr	r1, [pc, #132]	@ (8013d90 <__kernel_cos+0x180>)
 8013d0c:	4598      	cmp	r8, r3
 8013d0e:	bf8c      	ite	hi
 8013d10:	4d21      	ldrhi	r5, [pc, #132]	@ (8013d98 <__kernel_cos+0x188>)
 8013d12:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 8013d16:	2400      	movs	r4, #0
 8013d18:	4622      	mov	r2, r4
 8013d1a:	462b      	mov	r3, r5
 8013d1c:	2000      	movs	r0, #0
 8013d1e:	f7ec fa8b 	bl	8000238 <__aeabi_dsub>
 8013d22:	4622      	mov	r2, r4
 8013d24:	4680      	mov	r8, r0
 8013d26:	4689      	mov	r9, r1
 8013d28:	462b      	mov	r3, r5
 8013d2a:	4650      	mov	r0, sl
 8013d2c:	4659      	mov	r1, fp
 8013d2e:	f7ec fa83 	bl	8000238 <__aeabi_dsub>
 8013d32:	4632      	mov	r2, r6
 8013d34:	463b      	mov	r3, r7
 8013d36:	f7ec fa7f 	bl	8000238 <__aeabi_dsub>
 8013d3a:	4602      	mov	r2, r0
 8013d3c:	460b      	mov	r3, r1
 8013d3e:	4640      	mov	r0, r8
 8013d40:	4649      	mov	r1, r9
 8013d42:	e7da      	b.n	8013cfa <__kernel_cos+0xea>
 8013d44:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8013d80 <__kernel_cos+0x170>
 8013d48:	e7db      	b.n	8013d02 <__kernel_cos+0xf2>
 8013d4a:	bf00      	nop
 8013d4c:	f3af 8000 	nop.w
 8013d50:	be8838d4 	.word	0xbe8838d4
 8013d54:	bda8fae9 	.word	0xbda8fae9
 8013d58:	bdb4b1c4 	.word	0xbdb4b1c4
 8013d5c:	3e21ee9e 	.word	0x3e21ee9e
 8013d60:	809c52ad 	.word	0x809c52ad
 8013d64:	3e927e4f 	.word	0x3e927e4f
 8013d68:	19cb1590 	.word	0x19cb1590
 8013d6c:	3efa01a0 	.word	0x3efa01a0
 8013d70:	16c15177 	.word	0x16c15177
 8013d74:	3f56c16c 	.word	0x3f56c16c
 8013d78:	5555554c 	.word	0x5555554c
 8013d7c:	3fa55555 	.word	0x3fa55555
 8013d80:	00000000 	.word	0x00000000
 8013d84:	3ff00000 	.word	0x3ff00000
 8013d88:	3fe00000 	.word	0x3fe00000
 8013d8c:	3fd33332 	.word	0x3fd33332
 8013d90:	3ff00000 	.word	0x3ff00000
 8013d94:	3fe90000 	.word	0x3fe90000
 8013d98:	3fd20000 	.word	0x3fd20000
 8013d9c:	00000000 	.word	0x00000000

08013da0 <__kernel_sin>:
 8013da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013da4:	ec55 4b10 	vmov	r4, r5, d0
 8013da8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8013dac:	b085      	sub	sp, #20
 8013dae:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8013db2:	ed8d 1b02 	vstr	d1, [sp, #8]
 8013db6:	4680      	mov	r8, r0
 8013db8:	d205      	bcs.n	8013dc6 <__kernel_sin+0x26>
 8013dba:	4620      	mov	r0, r4
 8013dbc:	4629      	mov	r1, r5
 8013dbe:	f7ec fea3 	bl	8000b08 <__aeabi_d2iz>
 8013dc2:	2800      	cmp	r0, #0
 8013dc4:	d052      	beq.n	8013e6c <__kernel_sin+0xcc>
 8013dc6:	4622      	mov	r2, r4
 8013dc8:	462b      	mov	r3, r5
 8013dca:	4620      	mov	r0, r4
 8013dcc:	4629      	mov	r1, r5
 8013dce:	f7ec fbeb 	bl	80005a8 <__aeabi_dmul>
 8013dd2:	4682      	mov	sl, r0
 8013dd4:	468b      	mov	fp, r1
 8013dd6:	4602      	mov	r2, r0
 8013dd8:	460b      	mov	r3, r1
 8013dda:	4620      	mov	r0, r4
 8013ddc:	4629      	mov	r1, r5
 8013dde:	f7ec fbe3 	bl	80005a8 <__aeabi_dmul>
 8013de2:	a342      	add	r3, pc, #264	@ (adr r3, 8013eec <__kernel_sin+0x14c>)
 8013de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013de8:	e9cd 0100 	strd	r0, r1, [sp]
 8013dec:	4650      	mov	r0, sl
 8013dee:	4659      	mov	r1, fp
 8013df0:	f7ec fbda 	bl	80005a8 <__aeabi_dmul>
 8013df4:	a33f      	add	r3, pc, #252	@ (adr r3, 8013ef4 <__kernel_sin+0x154>)
 8013df6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013dfa:	f7ec fa1d 	bl	8000238 <__aeabi_dsub>
 8013dfe:	4652      	mov	r2, sl
 8013e00:	465b      	mov	r3, fp
 8013e02:	f7ec fbd1 	bl	80005a8 <__aeabi_dmul>
 8013e06:	a33d      	add	r3, pc, #244	@ (adr r3, 8013efc <__kernel_sin+0x15c>)
 8013e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e0c:	f7ec fa16 	bl	800023c <__adddf3>
 8013e10:	4652      	mov	r2, sl
 8013e12:	465b      	mov	r3, fp
 8013e14:	f7ec fbc8 	bl	80005a8 <__aeabi_dmul>
 8013e18:	a33a      	add	r3, pc, #232	@ (adr r3, 8013f04 <__kernel_sin+0x164>)
 8013e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e1e:	f7ec fa0b 	bl	8000238 <__aeabi_dsub>
 8013e22:	4652      	mov	r2, sl
 8013e24:	465b      	mov	r3, fp
 8013e26:	f7ec fbbf 	bl	80005a8 <__aeabi_dmul>
 8013e2a:	a338      	add	r3, pc, #224	@ (adr r3, 8013f0c <__kernel_sin+0x16c>)
 8013e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e30:	f7ec fa04 	bl	800023c <__adddf3>
 8013e34:	4606      	mov	r6, r0
 8013e36:	460f      	mov	r7, r1
 8013e38:	f1b8 0f00 	cmp.w	r8, #0
 8013e3c:	d11b      	bne.n	8013e76 <__kernel_sin+0xd6>
 8013e3e:	4602      	mov	r2, r0
 8013e40:	460b      	mov	r3, r1
 8013e42:	4650      	mov	r0, sl
 8013e44:	4659      	mov	r1, fp
 8013e46:	f7ec fbaf 	bl	80005a8 <__aeabi_dmul>
 8013e4a:	a325      	add	r3, pc, #148	@ (adr r3, 8013ee0 <__kernel_sin+0x140>)
 8013e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e50:	f7ec f9f2 	bl	8000238 <__aeabi_dsub>
 8013e54:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013e58:	f7ec fba6 	bl	80005a8 <__aeabi_dmul>
 8013e5c:	4602      	mov	r2, r0
 8013e5e:	460b      	mov	r3, r1
 8013e60:	4620      	mov	r0, r4
 8013e62:	4629      	mov	r1, r5
 8013e64:	f7ec f9ea 	bl	800023c <__adddf3>
 8013e68:	4604      	mov	r4, r0
 8013e6a:	460d      	mov	r5, r1
 8013e6c:	ec45 4b10 	vmov	d0, r4, r5
 8013e70:	b005      	add	sp, #20
 8013e72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013e7a:	4b1b      	ldr	r3, [pc, #108]	@ (8013ee8 <__kernel_sin+0x148>)
 8013e7c:	2200      	movs	r2, #0
 8013e7e:	f7ec fb93 	bl	80005a8 <__aeabi_dmul>
 8013e82:	4632      	mov	r2, r6
 8013e84:	4680      	mov	r8, r0
 8013e86:	4689      	mov	r9, r1
 8013e88:	463b      	mov	r3, r7
 8013e8a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013e8e:	f7ec fb8b 	bl	80005a8 <__aeabi_dmul>
 8013e92:	4602      	mov	r2, r0
 8013e94:	460b      	mov	r3, r1
 8013e96:	4640      	mov	r0, r8
 8013e98:	4649      	mov	r1, r9
 8013e9a:	f7ec f9cd 	bl	8000238 <__aeabi_dsub>
 8013e9e:	4652      	mov	r2, sl
 8013ea0:	465b      	mov	r3, fp
 8013ea2:	f7ec fb81 	bl	80005a8 <__aeabi_dmul>
 8013ea6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013eaa:	f7ec f9c5 	bl	8000238 <__aeabi_dsub>
 8013eae:	a30c      	add	r3, pc, #48	@ (adr r3, 8013ee0 <__kernel_sin+0x140>)
 8013eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013eb4:	4606      	mov	r6, r0
 8013eb6:	460f      	mov	r7, r1
 8013eb8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013ebc:	f7ec fb74 	bl	80005a8 <__aeabi_dmul>
 8013ec0:	4602      	mov	r2, r0
 8013ec2:	460b      	mov	r3, r1
 8013ec4:	4630      	mov	r0, r6
 8013ec6:	4639      	mov	r1, r7
 8013ec8:	f7ec f9b8 	bl	800023c <__adddf3>
 8013ecc:	4602      	mov	r2, r0
 8013ece:	460b      	mov	r3, r1
 8013ed0:	4620      	mov	r0, r4
 8013ed2:	4629      	mov	r1, r5
 8013ed4:	f7ec f9b0 	bl	8000238 <__aeabi_dsub>
 8013ed8:	e7c6      	b.n	8013e68 <__kernel_sin+0xc8>
 8013eda:	bf00      	nop
 8013edc:	f3af 8000 	nop.w
 8013ee0:	55555549 	.word	0x55555549
 8013ee4:	3fc55555 	.word	0x3fc55555
 8013ee8:	3fe00000 	.word	0x3fe00000
 8013eec:	5acfd57c 	.word	0x5acfd57c
 8013ef0:	3de5d93a 	.word	0x3de5d93a
 8013ef4:	8a2b9ceb 	.word	0x8a2b9ceb
 8013ef8:	3e5ae5e6 	.word	0x3e5ae5e6
 8013efc:	57b1fe7d 	.word	0x57b1fe7d
 8013f00:	3ec71de3 	.word	0x3ec71de3
 8013f04:	19c161d5 	.word	0x19c161d5
 8013f08:	3f2a01a0 	.word	0x3f2a01a0
 8013f0c:	1110f8a6 	.word	0x1110f8a6
 8013f10:	3f811111 	.word	0x3f811111
 8013f14:	00000000 	.word	0x00000000

08013f18 <__ieee754_log>:
 8013f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f1c:	ec51 0b10 	vmov	r0, r1, d0
 8013f20:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8013f24:	b087      	sub	sp, #28
 8013f26:	460d      	mov	r5, r1
 8013f28:	da26      	bge.n	8013f78 <__ieee754_log+0x60>
 8013f2a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8013f2e:	4303      	orrs	r3, r0
 8013f30:	4602      	mov	r2, r0
 8013f32:	d10a      	bne.n	8013f4a <__ieee754_log+0x32>
 8013f34:	49ce      	ldr	r1, [pc, #824]	@ (8014270 <__ieee754_log+0x358>)
 8013f36:	2200      	movs	r2, #0
 8013f38:	2300      	movs	r3, #0
 8013f3a:	2000      	movs	r0, #0
 8013f3c:	f7ec fc5e 	bl	80007fc <__aeabi_ddiv>
 8013f40:	ec41 0b10 	vmov	d0, r0, r1
 8013f44:	b007      	add	sp, #28
 8013f46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013f4a:	2900      	cmp	r1, #0
 8013f4c:	da05      	bge.n	8013f5a <__ieee754_log+0x42>
 8013f4e:	460b      	mov	r3, r1
 8013f50:	f7ec f972 	bl	8000238 <__aeabi_dsub>
 8013f54:	2200      	movs	r2, #0
 8013f56:	2300      	movs	r3, #0
 8013f58:	e7f0      	b.n	8013f3c <__ieee754_log+0x24>
 8013f5a:	4bc6      	ldr	r3, [pc, #792]	@ (8014274 <__ieee754_log+0x35c>)
 8013f5c:	2200      	movs	r2, #0
 8013f5e:	f7ec fb23 	bl	80005a8 <__aeabi_dmul>
 8013f62:	f06f 0335 	mvn.w	r3, #53	@ 0x35
 8013f66:	460d      	mov	r5, r1
 8013f68:	4ac3      	ldr	r2, [pc, #780]	@ (8014278 <__ieee754_log+0x360>)
 8013f6a:	4295      	cmp	r5, r2
 8013f6c:	dd06      	ble.n	8013f7c <__ieee754_log+0x64>
 8013f6e:	4602      	mov	r2, r0
 8013f70:	460b      	mov	r3, r1
 8013f72:	f7ec f963 	bl	800023c <__adddf3>
 8013f76:	e7e3      	b.n	8013f40 <__ieee754_log+0x28>
 8013f78:	2300      	movs	r3, #0
 8013f7a:	e7f5      	b.n	8013f68 <__ieee754_log+0x50>
 8013f7c:	152c      	asrs	r4, r5, #20
 8013f7e:	f2a4 34ff 	subw	r4, r4, #1023	@ 0x3ff
 8013f82:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8013f86:	441c      	add	r4, r3
 8013f88:	f505 2315 	add.w	r3, r5, #610304	@ 0x95000
 8013f8c:	f603 7364 	addw	r3, r3, #3940	@ 0xf64
 8013f90:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8013f94:	f083 527f 	eor.w	r2, r3, #1069547520	@ 0x3fc00000
 8013f98:	f482 1240 	eor.w	r2, r2, #3145728	@ 0x300000
 8013f9c:	ea42 0105 	orr.w	r1, r2, r5
 8013fa0:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 8013fa4:	2200      	movs	r2, #0
 8013fa6:	4bb5      	ldr	r3, [pc, #724]	@ (801427c <__ieee754_log+0x364>)
 8013fa8:	f7ec f946 	bl	8000238 <__aeabi_dsub>
 8013fac:	1cab      	adds	r3, r5, #2
 8013fae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013fb2:	2b02      	cmp	r3, #2
 8013fb4:	4682      	mov	sl, r0
 8013fb6:	468b      	mov	fp, r1
 8013fb8:	f04f 0200 	mov.w	r2, #0
 8013fbc:	dc53      	bgt.n	8014066 <__ieee754_log+0x14e>
 8013fbe:	2300      	movs	r3, #0
 8013fc0:	f7ec fd5a 	bl	8000a78 <__aeabi_dcmpeq>
 8013fc4:	b1d0      	cbz	r0, 8013ffc <__ieee754_log+0xe4>
 8013fc6:	2c00      	cmp	r4, #0
 8013fc8:	f000 8120 	beq.w	801420c <__ieee754_log+0x2f4>
 8013fcc:	4620      	mov	r0, r4
 8013fce:	f7ec fa81 	bl	80004d4 <__aeabi_i2d>
 8013fd2:	a391      	add	r3, pc, #580	@ (adr r3, 8014218 <__ieee754_log+0x300>)
 8013fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013fd8:	4606      	mov	r6, r0
 8013fda:	460f      	mov	r7, r1
 8013fdc:	f7ec fae4 	bl	80005a8 <__aeabi_dmul>
 8013fe0:	a38f      	add	r3, pc, #572	@ (adr r3, 8014220 <__ieee754_log+0x308>)
 8013fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013fe6:	4604      	mov	r4, r0
 8013fe8:	460d      	mov	r5, r1
 8013fea:	4630      	mov	r0, r6
 8013fec:	4639      	mov	r1, r7
 8013fee:	f7ec fadb 	bl	80005a8 <__aeabi_dmul>
 8013ff2:	4602      	mov	r2, r0
 8013ff4:	460b      	mov	r3, r1
 8013ff6:	4620      	mov	r0, r4
 8013ff8:	4629      	mov	r1, r5
 8013ffa:	e7ba      	b.n	8013f72 <__ieee754_log+0x5a>
 8013ffc:	a38a      	add	r3, pc, #552	@ (adr r3, 8014228 <__ieee754_log+0x310>)
 8013ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014002:	4650      	mov	r0, sl
 8014004:	4659      	mov	r1, fp
 8014006:	f7ec facf 	bl	80005a8 <__aeabi_dmul>
 801400a:	4602      	mov	r2, r0
 801400c:	460b      	mov	r3, r1
 801400e:	2000      	movs	r0, #0
 8014010:	499b      	ldr	r1, [pc, #620]	@ (8014280 <__ieee754_log+0x368>)
 8014012:	f7ec f911 	bl	8000238 <__aeabi_dsub>
 8014016:	4652      	mov	r2, sl
 8014018:	4606      	mov	r6, r0
 801401a:	460f      	mov	r7, r1
 801401c:	465b      	mov	r3, fp
 801401e:	4650      	mov	r0, sl
 8014020:	4659      	mov	r1, fp
 8014022:	f7ec fac1 	bl	80005a8 <__aeabi_dmul>
 8014026:	4602      	mov	r2, r0
 8014028:	460b      	mov	r3, r1
 801402a:	4630      	mov	r0, r6
 801402c:	4639      	mov	r1, r7
 801402e:	f7ec fabb 	bl	80005a8 <__aeabi_dmul>
 8014032:	4606      	mov	r6, r0
 8014034:	460f      	mov	r7, r1
 8014036:	b914      	cbnz	r4, 801403e <__ieee754_log+0x126>
 8014038:	4632      	mov	r2, r6
 801403a:	463b      	mov	r3, r7
 801403c:	e0a0      	b.n	8014180 <__ieee754_log+0x268>
 801403e:	4620      	mov	r0, r4
 8014040:	f7ec fa48 	bl	80004d4 <__aeabi_i2d>
 8014044:	a374      	add	r3, pc, #464	@ (adr r3, 8014218 <__ieee754_log+0x300>)
 8014046:	e9d3 2300 	ldrd	r2, r3, [r3]
 801404a:	4680      	mov	r8, r0
 801404c:	4689      	mov	r9, r1
 801404e:	f7ec faab 	bl	80005a8 <__aeabi_dmul>
 8014052:	a373      	add	r3, pc, #460	@ (adr r3, 8014220 <__ieee754_log+0x308>)
 8014054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014058:	4604      	mov	r4, r0
 801405a:	460d      	mov	r5, r1
 801405c:	4640      	mov	r0, r8
 801405e:	4649      	mov	r1, r9
 8014060:	f7ec faa2 	bl	80005a8 <__aeabi_dmul>
 8014064:	e0a5      	b.n	80141b2 <__ieee754_log+0x29a>
 8014066:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 801406a:	f7ec f8e7 	bl	800023c <__adddf3>
 801406e:	4602      	mov	r2, r0
 8014070:	460b      	mov	r3, r1
 8014072:	4650      	mov	r0, sl
 8014074:	4659      	mov	r1, fp
 8014076:	f7ec fbc1 	bl	80007fc <__aeabi_ddiv>
 801407a:	e9cd 0100 	strd	r0, r1, [sp]
 801407e:	4620      	mov	r0, r4
 8014080:	f7ec fa28 	bl	80004d4 <__aeabi_i2d>
 8014084:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014088:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801408c:	4610      	mov	r0, r2
 801408e:	4619      	mov	r1, r3
 8014090:	f7ec fa8a 	bl	80005a8 <__aeabi_dmul>
 8014094:	4602      	mov	r2, r0
 8014096:	460b      	mov	r3, r1
 8014098:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801409c:	f7ec fa84 	bl	80005a8 <__aeabi_dmul>
 80140a0:	a363      	add	r3, pc, #396	@ (adr r3, 8014230 <__ieee754_log+0x318>)
 80140a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80140a6:	4680      	mov	r8, r0
 80140a8:	4689      	mov	r9, r1
 80140aa:	f7ec fa7d 	bl	80005a8 <__aeabi_dmul>
 80140ae:	a362      	add	r3, pc, #392	@ (adr r3, 8014238 <__ieee754_log+0x320>)
 80140b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80140b4:	f7ec f8c2 	bl	800023c <__adddf3>
 80140b8:	4642      	mov	r2, r8
 80140ba:	464b      	mov	r3, r9
 80140bc:	f7ec fa74 	bl	80005a8 <__aeabi_dmul>
 80140c0:	a35f      	add	r3, pc, #380	@ (adr r3, 8014240 <__ieee754_log+0x328>)
 80140c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80140c6:	f7ec f8b9 	bl	800023c <__adddf3>
 80140ca:	4642      	mov	r2, r8
 80140cc:	464b      	mov	r3, r9
 80140ce:	f7ec fa6b 	bl	80005a8 <__aeabi_dmul>
 80140d2:	a35d      	add	r3, pc, #372	@ (adr r3, 8014248 <__ieee754_log+0x330>)
 80140d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80140d8:	f7ec f8b0 	bl	800023c <__adddf3>
 80140dc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80140e0:	f7ec fa62 	bl	80005a8 <__aeabi_dmul>
 80140e4:	a35a      	add	r3, pc, #360	@ (adr r3, 8014250 <__ieee754_log+0x338>)
 80140e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80140ea:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80140ee:	4640      	mov	r0, r8
 80140f0:	4649      	mov	r1, r9
 80140f2:	f7ec fa59 	bl	80005a8 <__aeabi_dmul>
 80140f6:	a358      	add	r3, pc, #352	@ (adr r3, 8014258 <__ieee754_log+0x340>)
 80140f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80140fc:	f7ec f89e 	bl	800023c <__adddf3>
 8014100:	4642      	mov	r2, r8
 8014102:	464b      	mov	r3, r9
 8014104:	f7ec fa50 	bl	80005a8 <__aeabi_dmul>
 8014108:	a355      	add	r3, pc, #340	@ (adr r3, 8014260 <__ieee754_log+0x348>)
 801410a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801410e:	f7ec f895 	bl	800023c <__adddf3>
 8014112:	4642      	mov	r2, r8
 8014114:	464b      	mov	r3, r9
 8014116:	f7ec fa47 	bl	80005a8 <__aeabi_dmul>
 801411a:	f5a5 26c2 	sub.w	r6, r5, #397312	@ 0x61000
 801411e:	4602      	mov	r2, r0
 8014120:	460b      	mov	r3, r1
 8014122:	f5c5 25d7 	rsb	r5, r5, #440320	@ 0x6b800
 8014126:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801412a:	f7ec f887 	bl	800023c <__adddf3>
 801412e:	f2a6 467a 	subw	r6, r6, #1146	@ 0x47a
 8014132:	3551      	adds	r5, #81	@ 0x51
 8014134:	4335      	orrs	r5, r6
 8014136:	2d00      	cmp	r5, #0
 8014138:	4680      	mov	r8, r0
 801413a:	4689      	mov	r9, r1
 801413c:	dd48      	ble.n	80141d0 <__ieee754_log+0x2b8>
 801413e:	4b50      	ldr	r3, [pc, #320]	@ (8014280 <__ieee754_log+0x368>)
 8014140:	2200      	movs	r2, #0
 8014142:	4650      	mov	r0, sl
 8014144:	4659      	mov	r1, fp
 8014146:	f7ec fa2f 	bl	80005a8 <__aeabi_dmul>
 801414a:	4652      	mov	r2, sl
 801414c:	465b      	mov	r3, fp
 801414e:	f7ec fa2b 	bl	80005a8 <__aeabi_dmul>
 8014152:	4602      	mov	r2, r0
 8014154:	460b      	mov	r3, r1
 8014156:	4606      	mov	r6, r0
 8014158:	460f      	mov	r7, r1
 801415a:	4640      	mov	r0, r8
 801415c:	4649      	mov	r1, r9
 801415e:	f7ec f86d 	bl	800023c <__adddf3>
 8014162:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014166:	f7ec fa1f 	bl	80005a8 <__aeabi_dmul>
 801416a:	4680      	mov	r8, r0
 801416c:	4689      	mov	r9, r1
 801416e:	b964      	cbnz	r4, 801418a <__ieee754_log+0x272>
 8014170:	4602      	mov	r2, r0
 8014172:	460b      	mov	r3, r1
 8014174:	4630      	mov	r0, r6
 8014176:	4639      	mov	r1, r7
 8014178:	f7ec f85e 	bl	8000238 <__aeabi_dsub>
 801417c:	4602      	mov	r2, r0
 801417e:	460b      	mov	r3, r1
 8014180:	4650      	mov	r0, sl
 8014182:	4659      	mov	r1, fp
 8014184:	f7ec f858 	bl	8000238 <__aeabi_dsub>
 8014188:	e6da      	b.n	8013f40 <__ieee754_log+0x28>
 801418a:	a323      	add	r3, pc, #140	@ (adr r3, 8014218 <__ieee754_log+0x300>)
 801418c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014190:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014194:	f7ec fa08 	bl	80005a8 <__aeabi_dmul>
 8014198:	a321      	add	r3, pc, #132	@ (adr r3, 8014220 <__ieee754_log+0x308>)
 801419a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801419e:	4604      	mov	r4, r0
 80141a0:	460d      	mov	r5, r1
 80141a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80141a6:	f7ec f9ff 	bl	80005a8 <__aeabi_dmul>
 80141aa:	4642      	mov	r2, r8
 80141ac:	464b      	mov	r3, r9
 80141ae:	f7ec f845 	bl	800023c <__adddf3>
 80141b2:	4602      	mov	r2, r0
 80141b4:	460b      	mov	r3, r1
 80141b6:	4630      	mov	r0, r6
 80141b8:	4639      	mov	r1, r7
 80141ba:	f7ec f83d 	bl	8000238 <__aeabi_dsub>
 80141be:	4652      	mov	r2, sl
 80141c0:	465b      	mov	r3, fp
 80141c2:	f7ec f839 	bl	8000238 <__aeabi_dsub>
 80141c6:	4602      	mov	r2, r0
 80141c8:	460b      	mov	r3, r1
 80141ca:	4620      	mov	r0, r4
 80141cc:	4629      	mov	r1, r5
 80141ce:	e7d9      	b.n	8014184 <__ieee754_log+0x26c>
 80141d0:	4602      	mov	r2, r0
 80141d2:	460b      	mov	r3, r1
 80141d4:	4650      	mov	r0, sl
 80141d6:	4659      	mov	r1, fp
 80141d8:	f7ec f82e 	bl	8000238 <__aeabi_dsub>
 80141dc:	e9dd 2300 	ldrd	r2, r3, [sp]
 80141e0:	f7ec f9e2 	bl	80005a8 <__aeabi_dmul>
 80141e4:	4606      	mov	r6, r0
 80141e6:	460f      	mov	r7, r1
 80141e8:	2c00      	cmp	r4, #0
 80141ea:	f43f af25 	beq.w	8014038 <__ieee754_log+0x120>
 80141ee:	a30a      	add	r3, pc, #40	@ (adr r3, 8014218 <__ieee754_log+0x300>)
 80141f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80141f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80141f8:	f7ec f9d6 	bl	80005a8 <__aeabi_dmul>
 80141fc:	a308      	add	r3, pc, #32	@ (adr r3, 8014220 <__ieee754_log+0x308>)
 80141fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014202:	4604      	mov	r4, r0
 8014204:	460d      	mov	r5, r1
 8014206:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801420a:	e729      	b.n	8014060 <__ieee754_log+0x148>
 801420c:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 8014268 <__ieee754_log+0x350>
 8014210:	e698      	b.n	8013f44 <__ieee754_log+0x2c>
 8014212:	bf00      	nop
 8014214:	f3af 8000 	nop.w
 8014218:	fee00000 	.word	0xfee00000
 801421c:	3fe62e42 	.word	0x3fe62e42
 8014220:	35793c76 	.word	0x35793c76
 8014224:	3dea39ef 	.word	0x3dea39ef
 8014228:	55555555 	.word	0x55555555
 801422c:	3fd55555 	.word	0x3fd55555
 8014230:	df3e5244 	.word	0xdf3e5244
 8014234:	3fc2f112 	.word	0x3fc2f112
 8014238:	96cb03de 	.word	0x96cb03de
 801423c:	3fc74664 	.word	0x3fc74664
 8014240:	94229359 	.word	0x94229359
 8014244:	3fd24924 	.word	0x3fd24924
 8014248:	55555593 	.word	0x55555593
 801424c:	3fe55555 	.word	0x3fe55555
 8014250:	d078c69f 	.word	0xd078c69f
 8014254:	3fc39a09 	.word	0x3fc39a09
 8014258:	1d8e78af 	.word	0x1d8e78af
 801425c:	3fcc71c5 	.word	0x3fcc71c5
 8014260:	9997fa04 	.word	0x9997fa04
 8014264:	3fd99999 	.word	0x3fd99999
	...
 8014270:	c3500000 	.word	0xc3500000
 8014274:	43500000 	.word	0x43500000
 8014278:	7fefffff 	.word	0x7fefffff
 801427c:	3ff00000 	.word	0x3ff00000
 8014280:	3fe00000 	.word	0x3fe00000
 8014284:	00000000 	.word	0x00000000

08014288 <__ieee754_rem_pio2>:
 8014288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801428c:	ec57 6b10 	vmov	r6, r7, d0
 8014290:	4bc5      	ldr	r3, [pc, #788]	@ (80145a8 <__ieee754_rem_pio2+0x320>)
 8014292:	b08d      	sub	sp, #52	@ 0x34
 8014294:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8014298:	4598      	cmp	r8, r3
 801429a:	4604      	mov	r4, r0
 801429c:	9704      	str	r7, [sp, #16]
 801429e:	d807      	bhi.n	80142b0 <__ieee754_rem_pio2+0x28>
 80142a0:	2200      	movs	r2, #0
 80142a2:	2300      	movs	r3, #0
 80142a4:	ed80 0b00 	vstr	d0, [r0]
 80142a8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80142ac:	2500      	movs	r5, #0
 80142ae:	e028      	b.n	8014302 <__ieee754_rem_pio2+0x7a>
 80142b0:	4bbe      	ldr	r3, [pc, #760]	@ (80145ac <__ieee754_rem_pio2+0x324>)
 80142b2:	4598      	cmp	r8, r3
 80142b4:	d878      	bhi.n	80143a8 <__ieee754_rem_pio2+0x120>
 80142b6:	9b04      	ldr	r3, [sp, #16]
 80142b8:	4dbd      	ldr	r5, [pc, #756]	@ (80145b0 <__ieee754_rem_pio2+0x328>)
 80142ba:	2b00      	cmp	r3, #0
 80142bc:	4630      	mov	r0, r6
 80142be:	a3ac      	add	r3, pc, #688	@ (adr r3, 8014570 <__ieee754_rem_pio2+0x2e8>)
 80142c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80142c4:	4639      	mov	r1, r7
 80142c6:	dd38      	ble.n	801433a <__ieee754_rem_pio2+0xb2>
 80142c8:	f7eb ffb6 	bl	8000238 <__aeabi_dsub>
 80142cc:	45a8      	cmp	r8, r5
 80142ce:	4606      	mov	r6, r0
 80142d0:	460f      	mov	r7, r1
 80142d2:	d01a      	beq.n	801430a <__ieee754_rem_pio2+0x82>
 80142d4:	a3a8      	add	r3, pc, #672	@ (adr r3, 8014578 <__ieee754_rem_pio2+0x2f0>)
 80142d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80142da:	f7eb ffad 	bl	8000238 <__aeabi_dsub>
 80142de:	4602      	mov	r2, r0
 80142e0:	460b      	mov	r3, r1
 80142e2:	4680      	mov	r8, r0
 80142e4:	4689      	mov	r9, r1
 80142e6:	4630      	mov	r0, r6
 80142e8:	4639      	mov	r1, r7
 80142ea:	f7eb ffa5 	bl	8000238 <__aeabi_dsub>
 80142ee:	a3a2      	add	r3, pc, #648	@ (adr r3, 8014578 <__ieee754_rem_pio2+0x2f0>)
 80142f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80142f4:	f7eb ffa0 	bl	8000238 <__aeabi_dsub>
 80142f8:	e9c4 8900 	strd	r8, r9, [r4]
 80142fc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8014300:	2501      	movs	r5, #1
 8014302:	4628      	mov	r0, r5
 8014304:	b00d      	add	sp, #52	@ 0x34
 8014306:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801430a:	a39d      	add	r3, pc, #628	@ (adr r3, 8014580 <__ieee754_rem_pio2+0x2f8>)
 801430c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014310:	f7eb ff92 	bl	8000238 <__aeabi_dsub>
 8014314:	a39c      	add	r3, pc, #624	@ (adr r3, 8014588 <__ieee754_rem_pio2+0x300>)
 8014316:	e9d3 2300 	ldrd	r2, r3, [r3]
 801431a:	4606      	mov	r6, r0
 801431c:	460f      	mov	r7, r1
 801431e:	f7eb ff8b 	bl	8000238 <__aeabi_dsub>
 8014322:	4602      	mov	r2, r0
 8014324:	460b      	mov	r3, r1
 8014326:	4680      	mov	r8, r0
 8014328:	4689      	mov	r9, r1
 801432a:	4630      	mov	r0, r6
 801432c:	4639      	mov	r1, r7
 801432e:	f7eb ff83 	bl	8000238 <__aeabi_dsub>
 8014332:	a395      	add	r3, pc, #596	@ (adr r3, 8014588 <__ieee754_rem_pio2+0x300>)
 8014334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014338:	e7dc      	b.n	80142f4 <__ieee754_rem_pio2+0x6c>
 801433a:	f7eb ff7f 	bl	800023c <__adddf3>
 801433e:	45a8      	cmp	r8, r5
 8014340:	4606      	mov	r6, r0
 8014342:	460f      	mov	r7, r1
 8014344:	d018      	beq.n	8014378 <__ieee754_rem_pio2+0xf0>
 8014346:	a38c      	add	r3, pc, #560	@ (adr r3, 8014578 <__ieee754_rem_pio2+0x2f0>)
 8014348:	e9d3 2300 	ldrd	r2, r3, [r3]
 801434c:	f7eb ff76 	bl	800023c <__adddf3>
 8014350:	4602      	mov	r2, r0
 8014352:	460b      	mov	r3, r1
 8014354:	4680      	mov	r8, r0
 8014356:	4689      	mov	r9, r1
 8014358:	4630      	mov	r0, r6
 801435a:	4639      	mov	r1, r7
 801435c:	f7eb ff6c 	bl	8000238 <__aeabi_dsub>
 8014360:	a385      	add	r3, pc, #532	@ (adr r3, 8014578 <__ieee754_rem_pio2+0x2f0>)
 8014362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014366:	f7eb ff69 	bl	800023c <__adddf3>
 801436a:	f04f 35ff 	mov.w	r5, #4294967295
 801436e:	e9c4 8900 	strd	r8, r9, [r4]
 8014372:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8014376:	e7c4      	b.n	8014302 <__ieee754_rem_pio2+0x7a>
 8014378:	a381      	add	r3, pc, #516	@ (adr r3, 8014580 <__ieee754_rem_pio2+0x2f8>)
 801437a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801437e:	f7eb ff5d 	bl	800023c <__adddf3>
 8014382:	a381      	add	r3, pc, #516	@ (adr r3, 8014588 <__ieee754_rem_pio2+0x300>)
 8014384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014388:	4606      	mov	r6, r0
 801438a:	460f      	mov	r7, r1
 801438c:	f7eb ff56 	bl	800023c <__adddf3>
 8014390:	4602      	mov	r2, r0
 8014392:	460b      	mov	r3, r1
 8014394:	4680      	mov	r8, r0
 8014396:	4689      	mov	r9, r1
 8014398:	4630      	mov	r0, r6
 801439a:	4639      	mov	r1, r7
 801439c:	f7eb ff4c 	bl	8000238 <__aeabi_dsub>
 80143a0:	a379      	add	r3, pc, #484	@ (adr r3, 8014588 <__ieee754_rem_pio2+0x300>)
 80143a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80143a6:	e7de      	b.n	8014366 <__ieee754_rem_pio2+0xde>
 80143a8:	4b82      	ldr	r3, [pc, #520]	@ (80145b4 <__ieee754_rem_pio2+0x32c>)
 80143aa:	4598      	cmp	r8, r3
 80143ac:	f200 80d1 	bhi.w	8014552 <__ieee754_rem_pio2+0x2ca>
 80143b0:	f000 f99a 	bl	80146e8 <fabs>
 80143b4:	ec57 6b10 	vmov	r6, r7, d0
 80143b8:	a375      	add	r3, pc, #468	@ (adr r3, 8014590 <__ieee754_rem_pio2+0x308>)
 80143ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80143be:	4630      	mov	r0, r6
 80143c0:	4639      	mov	r1, r7
 80143c2:	f7ec f8f1 	bl	80005a8 <__aeabi_dmul>
 80143c6:	4b7c      	ldr	r3, [pc, #496]	@ (80145b8 <__ieee754_rem_pio2+0x330>)
 80143c8:	2200      	movs	r2, #0
 80143ca:	f7eb ff37 	bl	800023c <__adddf3>
 80143ce:	f7ec fb9b 	bl	8000b08 <__aeabi_d2iz>
 80143d2:	4605      	mov	r5, r0
 80143d4:	f7ec f87e 	bl	80004d4 <__aeabi_i2d>
 80143d8:	4602      	mov	r2, r0
 80143da:	460b      	mov	r3, r1
 80143dc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80143e0:	a363      	add	r3, pc, #396	@ (adr r3, 8014570 <__ieee754_rem_pio2+0x2e8>)
 80143e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80143e6:	f7ec f8df 	bl	80005a8 <__aeabi_dmul>
 80143ea:	4602      	mov	r2, r0
 80143ec:	460b      	mov	r3, r1
 80143ee:	4630      	mov	r0, r6
 80143f0:	4639      	mov	r1, r7
 80143f2:	f7eb ff21 	bl	8000238 <__aeabi_dsub>
 80143f6:	a360      	add	r3, pc, #384	@ (adr r3, 8014578 <__ieee754_rem_pio2+0x2f0>)
 80143f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80143fc:	4682      	mov	sl, r0
 80143fe:	468b      	mov	fp, r1
 8014400:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014404:	f7ec f8d0 	bl	80005a8 <__aeabi_dmul>
 8014408:	2d1f      	cmp	r5, #31
 801440a:	4606      	mov	r6, r0
 801440c:	460f      	mov	r7, r1
 801440e:	dc0c      	bgt.n	801442a <__ieee754_rem_pio2+0x1a2>
 8014410:	4b6a      	ldr	r3, [pc, #424]	@ (80145bc <__ieee754_rem_pio2+0x334>)
 8014412:	1e6a      	subs	r2, r5, #1
 8014414:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014418:	4543      	cmp	r3, r8
 801441a:	d006      	beq.n	801442a <__ieee754_rem_pio2+0x1a2>
 801441c:	4632      	mov	r2, r6
 801441e:	463b      	mov	r3, r7
 8014420:	4650      	mov	r0, sl
 8014422:	4659      	mov	r1, fp
 8014424:	f7eb ff08 	bl	8000238 <__aeabi_dsub>
 8014428:	e00e      	b.n	8014448 <__ieee754_rem_pio2+0x1c0>
 801442a:	463b      	mov	r3, r7
 801442c:	4632      	mov	r2, r6
 801442e:	4650      	mov	r0, sl
 8014430:	4659      	mov	r1, fp
 8014432:	f7eb ff01 	bl	8000238 <__aeabi_dsub>
 8014436:	ea4f 5328 	mov.w	r3, r8, asr #20
 801443a:	9305      	str	r3, [sp, #20]
 801443c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8014440:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8014444:	2b10      	cmp	r3, #16
 8014446:	dc02      	bgt.n	801444e <__ieee754_rem_pio2+0x1c6>
 8014448:	e9c4 0100 	strd	r0, r1, [r4]
 801444c:	e039      	b.n	80144c2 <__ieee754_rem_pio2+0x23a>
 801444e:	a34c      	add	r3, pc, #304	@ (adr r3, 8014580 <__ieee754_rem_pio2+0x2f8>)
 8014450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014454:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014458:	f7ec f8a6 	bl	80005a8 <__aeabi_dmul>
 801445c:	4606      	mov	r6, r0
 801445e:	460f      	mov	r7, r1
 8014460:	4602      	mov	r2, r0
 8014462:	460b      	mov	r3, r1
 8014464:	4650      	mov	r0, sl
 8014466:	4659      	mov	r1, fp
 8014468:	f7eb fee6 	bl	8000238 <__aeabi_dsub>
 801446c:	4602      	mov	r2, r0
 801446e:	460b      	mov	r3, r1
 8014470:	4680      	mov	r8, r0
 8014472:	4689      	mov	r9, r1
 8014474:	4650      	mov	r0, sl
 8014476:	4659      	mov	r1, fp
 8014478:	f7eb fede 	bl	8000238 <__aeabi_dsub>
 801447c:	4632      	mov	r2, r6
 801447e:	463b      	mov	r3, r7
 8014480:	f7eb feda 	bl	8000238 <__aeabi_dsub>
 8014484:	a340      	add	r3, pc, #256	@ (adr r3, 8014588 <__ieee754_rem_pio2+0x300>)
 8014486:	e9d3 2300 	ldrd	r2, r3, [r3]
 801448a:	4606      	mov	r6, r0
 801448c:	460f      	mov	r7, r1
 801448e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014492:	f7ec f889 	bl	80005a8 <__aeabi_dmul>
 8014496:	4632      	mov	r2, r6
 8014498:	463b      	mov	r3, r7
 801449a:	f7eb fecd 	bl	8000238 <__aeabi_dsub>
 801449e:	4602      	mov	r2, r0
 80144a0:	460b      	mov	r3, r1
 80144a2:	4606      	mov	r6, r0
 80144a4:	460f      	mov	r7, r1
 80144a6:	4640      	mov	r0, r8
 80144a8:	4649      	mov	r1, r9
 80144aa:	f7eb fec5 	bl	8000238 <__aeabi_dsub>
 80144ae:	9a05      	ldr	r2, [sp, #20]
 80144b0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80144b4:	1ad3      	subs	r3, r2, r3
 80144b6:	2b31      	cmp	r3, #49	@ 0x31
 80144b8:	dc20      	bgt.n	80144fc <__ieee754_rem_pio2+0x274>
 80144ba:	e9c4 0100 	strd	r0, r1, [r4]
 80144be:	46c2      	mov	sl, r8
 80144c0:	46cb      	mov	fp, r9
 80144c2:	e9d4 8900 	ldrd	r8, r9, [r4]
 80144c6:	4650      	mov	r0, sl
 80144c8:	4642      	mov	r2, r8
 80144ca:	464b      	mov	r3, r9
 80144cc:	4659      	mov	r1, fp
 80144ce:	f7eb feb3 	bl	8000238 <__aeabi_dsub>
 80144d2:	463b      	mov	r3, r7
 80144d4:	4632      	mov	r2, r6
 80144d6:	f7eb feaf 	bl	8000238 <__aeabi_dsub>
 80144da:	9b04      	ldr	r3, [sp, #16]
 80144dc:	2b00      	cmp	r3, #0
 80144de:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80144e2:	f6bf af0e 	bge.w	8014302 <__ieee754_rem_pio2+0x7a>
 80144e6:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 80144ea:	6063      	str	r3, [r4, #4]
 80144ec:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80144f0:	f8c4 8000 	str.w	r8, [r4]
 80144f4:	60a0      	str	r0, [r4, #8]
 80144f6:	60e3      	str	r3, [r4, #12]
 80144f8:	426d      	negs	r5, r5
 80144fa:	e702      	b.n	8014302 <__ieee754_rem_pio2+0x7a>
 80144fc:	a326      	add	r3, pc, #152	@ (adr r3, 8014598 <__ieee754_rem_pio2+0x310>)
 80144fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014502:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014506:	f7ec f84f 	bl	80005a8 <__aeabi_dmul>
 801450a:	4606      	mov	r6, r0
 801450c:	460f      	mov	r7, r1
 801450e:	4602      	mov	r2, r0
 8014510:	460b      	mov	r3, r1
 8014512:	4640      	mov	r0, r8
 8014514:	4649      	mov	r1, r9
 8014516:	f7eb fe8f 	bl	8000238 <__aeabi_dsub>
 801451a:	4602      	mov	r2, r0
 801451c:	460b      	mov	r3, r1
 801451e:	4682      	mov	sl, r0
 8014520:	468b      	mov	fp, r1
 8014522:	4640      	mov	r0, r8
 8014524:	4649      	mov	r1, r9
 8014526:	f7eb fe87 	bl	8000238 <__aeabi_dsub>
 801452a:	4632      	mov	r2, r6
 801452c:	463b      	mov	r3, r7
 801452e:	f7eb fe83 	bl	8000238 <__aeabi_dsub>
 8014532:	a31b      	add	r3, pc, #108	@ (adr r3, 80145a0 <__ieee754_rem_pio2+0x318>)
 8014534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014538:	4606      	mov	r6, r0
 801453a:	460f      	mov	r7, r1
 801453c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014540:	f7ec f832 	bl	80005a8 <__aeabi_dmul>
 8014544:	4632      	mov	r2, r6
 8014546:	463b      	mov	r3, r7
 8014548:	f7eb fe76 	bl	8000238 <__aeabi_dsub>
 801454c:	4606      	mov	r6, r0
 801454e:	460f      	mov	r7, r1
 8014550:	e764      	b.n	801441c <__ieee754_rem_pio2+0x194>
 8014552:	4b1b      	ldr	r3, [pc, #108]	@ (80145c0 <__ieee754_rem_pio2+0x338>)
 8014554:	4598      	cmp	r8, r3
 8014556:	d935      	bls.n	80145c4 <__ieee754_rem_pio2+0x33c>
 8014558:	4632      	mov	r2, r6
 801455a:	463b      	mov	r3, r7
 801455c:	4630      	mov	r0, r6
 801455e:	4639      	mov	r1, r7
 8014560:	f7eb fe6a 	bl	8000238 <__aeabi_dsub>
 8014564:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8014568:	e9c4 0100 	strd	r0, r1, [r4]
 801456c:	e69e      	b.n	80142ac <__ieee754_rem_pio2+0x24>
 801456e:	bf00      	nop
 8014570:	54400000 	.word	0x54400000
 8014574:	3ff921fb 	.word	0x3ff921fb
 8014578:	1a626331 	.word	0x1a626331
 801457c:	3dd0b461 	.word	0x3dd0b461
 8014580:	1a600000 	.word	0x1a600000
 8014584:	3dd0b461 	.word	0x3dd0b461
 8014588:	2e037073 	.word	0x2e037073
 801458c:	3ba3198a 	.word	0x3ba3198a
 8014590:	6dc9c883 	.word	0x6dc9c883
 8014594:	3fe45f30 	.word	0x3fe45f30
 8014598:	2e000000 	.word	0x2e000000
 801459c:	3ba3198a 	.word	0x3ba3198a
 80145a0:	252049c1 	.word	0x252049c1
 80145a4:	397b839a 	.word	0x397b839a
 80145a8:	3fe921fb 	.word	0x3fe921fb
 80145ac:	4002d97b 	.word	0x4002d97b
 80145b0:	3ff921fb 	.word	0x3ff921fb
 80145b4:	413921fb 	.word	0x413921fb
 80145b8:	3fe00000 	.word	0x3fe00000
 80145bc:	08018580 	.word	0x08018580
 80145c0:	7fefffff 	.word	0x7fefffff
 80145c4:	ea4f 5528 	mov.w	r5, r8, asr #20
 80145c8:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 80145cc:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 80145d0:	4630      	mov	r0, r6
 80145d2:	460f      	mov	r7, r1
 80145d4:	f7ec fa98 	bl	8000b08 <__aeabi_d2iz>
 80145d8:	f7eb ff7c 	bl	80004d4 <__aeabi_i2d>
 80145dc:	4602      	mov	r2, r0
 80145de:	460b      	mov	r3, r1
 80145e0:	4630      	mov	r0, r6
 80145e2:	4639      	mov	r1, r7
 80145e4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80145e8:	f7eb fe26 	bl	8000238 <__aeabi_dsub>
 80145ec:	4b22      	ldr	r3, [pc, #136]	@ (8014678 <__ieee754_rem_pio2+0x3f0>)
 80145ee:	2200      	movs	r2, #0
 80145f0:	f7eb ffda 	bl	80005a8 <__aeabi_dmul>
 80145f4:	460f      	mov	r7, r1
 80145f6:	4606      	mov	r6, r0
 80145f8:	f7ec fa86 	bl	8000b08 <__aeabi_d2iz>
 80145fc:	f7eb ff6a 	bl	80004d4 <__aeabi_i2d>
 8014600:	4602      	mov	r2, r0
 8014602:	460b      	mov	r3, r1
 8014604:	4630      	mov	r0, r6
 8014606:	4639      	mov	r1, r7
 8014608:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801460c:	f7eb fe14 	bl	8000238 <__aeabi_dsub>
 8014610:	4b19      	ldr	r3, [pc, #100]	@ (8014678 <__ieee754_rem_pio2+0x3f0>)
 8014612:	2200      	movs	r2, #0
 8014614:	f7eb ffc8 	bl	80005a8 <__aeabi_dmul>
 8014618:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 801461c:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8014620:	f04f 0803 	mov.w	r8, #3
 8014624:	2600      	movs	r6, #0
 8014626:	2700      	movs	r7, #0
 8014628:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 801462c:	4632      	mov	r2, r6
 801462e:	463b      	mov	r3, r7
 8014630:	46c2      	mov	sl, r8
 8014632:	f108 38ff 	add.w	r8, r8, #4294967295
 8014636:	f7ec fa1f 	bl	8000a78 <__aeabi_dcmpeq>
 801463a:	2800      	cmp	r0, #0
 801463c:	d1f4      	bne.n	8014628 <__ieee754_rem_pio2+0x3a0>
 801463e:	4b0f      	ldr	r3, [pc, #60]	@ (801467c <__ieee754_rem_pio2+0x3f4>)
 8014640:	9301      	str	r3, [sp, #4]
 8014642:	2302      	movs	r3, #2
 8014644:	9300      	str	r3, [sp, #0]
 8014646:	462a      	mov	r2, r5
 8014648:	4653      	mov	r3, sl
 801464a:	4621      	mov	r1, r4
 801464c:	a806      	add	r0, sp, #24
 801464e:	f000 fbbb 	bl	8014dc8 <__kernel_rem_pio2>
 8014652:	9b04      	ldr	r3, [sp, #16]
 8014654:	2b00      	cmp	r3, #0
 8014656:	4605      	mov	r5, r0
 8014658:	f6bf ae53 	bge.w	8014302 <__ieee754_rem_pio2+0x7a>
 801465c:	e9d4 2100 	ldrd	r2, r1, [r4]
 8014660:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8014664:	e9c4 2300 	strd	r2, r3, [r4]
 8014668:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 801466c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8014670:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8014674:	e740      	b.n	80144f8 <__ieee754_rem_pio2+0x270>
 8014676:	bf00      	nop
 8014678:	41700000 	.word	0x41700000
 801467c:	08018600 	.word	0x08018600

08014680 <acos>:
 8014680:	b538      	push	{r3, r4, r5, lr}
 8014682:	ed2d 8b02 	vpush	{d8}
 8014686:	ec55 4b10 	vmov	r4, r5, d0
 801468a:	f000 fef5 	bl	8015478 <__ieee754_acos>
 801468e:	4622      	mov	r2, r4
 8014690:	462b      	mov	r3, r5
 8014692:	4620      	mov	r0, r4
 8014694:	4629      	mov	r1, r5
 8014696:	eeb0 8a40 	vmov.f32	s16, s0
 801469a:	eef0 8a60 	vmov.f32	s17, s1
 801469e:	f7ec fa1d 	bl	8000adc <__aeabi_dcmpun>
 80146a2:	b9a8      	cbnz	r0, 80146d0 <acos+0x50>
 80146a4:	ec45 4b10 	vmov	d0, r4, r5
 80146a8:	f000 f81e 	bl	80146e8 <fabs>
 80146ac:	4b0c      	ldr	r3, [pc, #48]	@ (80146e0 <acos+0x60>)
 80146ae:	ec51 0b10 	vmov	r0, r1, d0
 80146b2:	2200      	movs	r2, #0
 80146b4:	f7ec fa08 	bl	8000ac8 <__aeabi_dcmpgt>
 80146b8:	b150      	cbz	r0, 80146d0 <acos+0x50>
 80146ba:	f7fb fdd3 	bl	8010264 <__errno>
 80146be:	ecbd 8b02 	vpop	{d8}
 80146c2:	2321      	movs	r3, #33	@ 0x21
 80146c4:	6003      	str	r3, [r0, #0]
 80146c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80146ca:	4806      	ldr	r0, [pc, #24]	@ (80146e4 <acos+0x64>)
 80146cc:	f7fe ba54 	b.w	8012b78 <nan>
 80146d0:	eeb0 0a48 	vmov.f32	s0, s16
 80146d4:	eef0 0a68 	vmov.f32	s1, s17
 80146d8:	ecbd 8b02 	vpop	{d8}
 80146dc:	bd38      	pop	{r3, r4, r5, pc}
 80146de:	bf00      	nop
 80146e0:	3ff00000 	.word	0x3ff00000
 80146e4:	0801851c 	.word	0x0801851c

080146e8 <fabs>:
 80146e8:	ec51 0b10 	vmov	r0, r1, d0
 80146ec:	4602      	mov	r2, r0
 80146ee:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80146f2:	ec43 2b10 	vmov	d0, r2, r3
 80146f6:	4770      	bx	lr

080146f8 <__ieee754_powf>:
 80146f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80146fc:	ee10 4a90 	vmov	r4, s1
 8014700:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 8014704:	ed2d 8b02 	vpush	{d8}
 8014708:	ee10 6a10 	vmov	r6, s0
 801470c:	eeb0 8a40 	vmov.f32	s16, s0
 8014710:	eef0 8a60 	vmov.f32	s17, s1
 8014714:	d10c      	bne.n	8014730 <__ieee754_powf+0x38>
 8014716:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 801471a:	0076      	lsls	r6, r6, #1
 801471c:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 8014720:	f240 829c 	bls.w	8014c5c <__ieee754_powf+0x564>
 8014724:	ee38 0a28 	vadd.f32	s0, s16, s17
 8014728:	ecbd 8b02 	vpop	{d8}
 801472c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014730:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 8014734:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 8014738:	d802      	bhi.n	8014740 <__ieee754_powf+0x48>
 801473a:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 801473e:	d908      	bls.n	8014752 <__ieee754_powf+0x5a>
 8014740:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 8014744:	d1ee      	bne.n	8014724 <__ieee754_powf+0x2c>
 8014746:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 801474a:	0064      	lsls	r4, r4, #1
 801474c:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 8014750:	e7e6      	b.n	8014720 <__ieee754_powf+0x28>
 8014752:	2e00      	cmp	r6, #0
 8014754:	da1e      	bge.n	8014794 <__ieee754_powf+0x9c>
 8014756:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 801475a:	d22b      	bcs.n	80147b4 <__ieee754_powf+0xbc>
 801475c:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 8014760:	d332      	bcc.n	80147c8 <__ieee754_powf+0xd0>
 8014762:	ea4f 53e9 	mov.w	r3, r9, asr #23
 8014766:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 801476a:	fa49 f503 	asr.w	r5, r9, r3
 801476e:	fa05 f303 	lsl.w	r3, r5, r3
 8014772:	454b      	cmp	r3, r9
 8014774:	d126      	bne.n	80147c4 <__ieee754_powf+0xcc>
 8014776:	f005 0501 	and.w	r5, r5, #1
 801477a:	f1c5 0502 	rsb	r5, r5, #2
 801477e:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 8014782:	d122      	bne.n	80147ca <__ieee754_powf+0xd2>
 8014784:	2c00      	cmp	r4, #0
 8014786:	f280 826f 	bge.w	8014c68 <__ieee754_powf+0x570>
 801478a:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801478e:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8014792:	e7c9      	b.n	8014728 <__ieee754_powf+0x30>
 8014794:	2500      	movs	r5, #0
 8014796:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 801479a:	d1f0      	bne.n	801477e <__ieee754_powf+0x86>
 801479c:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 80147a0:	f000 825c 	beq.w	8014c5c <__ieee754_powf+0x564>
 80147a4:	d908      	bls.n	80147b8 <__ieee754_powf+0xc0>
 80147a6:	ed9f 0ad8 	vldr	s0, [pc, #864]	@ 8014b08 <__ieee754_powf+0x410>
 80147aa:	2c00      	cmp	r4, #0
 80147ac:	bfa8      	it	ge
 80147ae:	eeb0 0a68 	vmovge.f32	s0, s17
 80147b2:	e7b9      	b.n	8014728 <__ieee754_powf+0x30>
 80147b4:	2502      	movs	r5, #2
 80147b6:	e7ee      	b.n	8014796 <__ieee754_powf+0x9e>
 80147b8:	2c00      	cmp	r4, #0
 80147ba:	f280 8252 	bge.w	8014c62 <__ieee754_powf+0x56a>
 80147be:	eeb1 0a68 	vneg.f32	s0, s17
 80147c2:	e7b1      	b.n	8014728 <__ieee754_powf+0x30>
 80147c4:	2500      	movs	r5, #0
 80147c6:	e7da      	b.n	801477e <__ieee754_powf+0x86>
 80147c8:	2500      	movs	r5, #0
 80147ca:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 80147ce:	d102      	bne.n	80147d6 <__ieee754_powf+0xde>
 80147d0:	ee28 0a08 	vmul.f32	s0, s16, s16
 80147d4:	e7a8      	b.n	8014728 <__ieee754_powf+0x30>
 80147d6:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 80147da:	d109      	bne.n	80147f0 <__ieee754_powf+0xf8>
 80147dc:	2e00      	cmp	r6, #0
 80147de:	db07      	blt.n	80147f0 <__ieee754_powf+0xf8>
 80147e0:	eeb0 0a48 	vmov.f32	s0, s16
 80147e4:	ecbd 8b02 	vpop	{d8}
 80147e8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80147ec:	f000 bae8 	b.w	8014dc0 <__ieee754_sqrtf>
 80147f0:	eeb0 0a48 	vmov.f32	s0, s16
 80147f4:	f000 fa50 	bl	8014c98 <fabsf>
 80147f8:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 80147fc:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 8014800:	4647      	mov	r7, r8
 8014802:	d002      	beq.n	801480a <__ieee754_powf+0x112>
 8014804:	f1b8 0f00 	cmp.w	r8, #0
 8014808:	d117      	bne.n	801483a <__ieee754_powf+0x142>
 801480a:	2c00      	cmp	r4, #0
 801480c:	bfbc      	itt	lt
 801480e:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 8014812:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8014816:	2e00      	cmp	r6, #0
 8014818:	da86      	bge.n	8014728 <__ieee754_powf+0x30>
 801481a:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 801481e:	ea58 0805 	orrs.w	r8, r8, r5
 8014822:	d104      	bne.n	801482e <__ieee754_powf+0x136>
 8014824:	ee70 7a40 	vsub.f32	s15, s0, s0
 8014828:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 801482c:	e77c      	b.n	8014728 <__ieee754_powf+0x30>
 801482e:	2d01      	cmp	r5, #1
 8014830:	f47f af7a 	bne.w	8014728 <__ieee754_powf+0x30>
 8014834:	eeb1 0a40 	vneg.f32	s0, s0
 8014838:	e776      	b.n	8014728 <__ieee754_powf+0x30>
 801483a:	0ff0      	lsrs	r0, r6, #31
 801483c:	3801      	subs	r0, #1
 801483e:	ea55 0300 	orrs.w	r3, r5, r0
 8014842:	d104      	bne.n	801484e <__ieee754_powf+0x156>
 8014844:	ee38 8a48 	vsub.f32	s16, s16, s16
 8014848:	ee88 0a08 	vdiv.f32	s0, s16, s16
 801484c:	e76c      	b.n	8014728 <__ieee754_powf+0x30>
 801484e:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 8014852:	d973      	bls.n	801493c <__ieee754_powf+0x244>
 8014854:	4bad      	ldr	r3, [pc, #692]	@ (8014b0c <__ieee754_powf+0x414>)
 8014856:	4598      	cmp	r8, r3
 8014858:	d808      	bhi.n	801486c <__ieee754_powf+0x174>
 801485a:	2c00      	cmp	r4, #0
 801485c:	da0b      	bge.n	8014876 <__ieee754_powf+0x17e>
 801485e:	2000      	movs	r0, #0
 8014860:	ecbd 8b02 	vpop	{d8}
 8014864:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014868:	f000 baa4 	b.w	8014db4 <__math_oflowf>
 801486c:	4ba8      	ldr	r3, [pc, #672]	@ (8014b10 <__ieee754_powf+0x418>)
 801486e:	4598      	cmp	r8, r3
 8014870:	d908      	bls.n	8014884 <__ieee754_powf+0x18c>
 8014872:	2c00      	cmp	r4, #0
 8014874:	dcf3      	bgt.n	801485e <__ieee754_powf+0x166>
 8014876:	2000      	movs	r0, #0
 8014878:	ecbd 8b02 	vpop	{d8}
 801487c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014880:	f000 ba92 	b.w	8014da8 <__math_uflowf>
 8014884:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8014888:	ee30 0a67 	vsub.f32	s0, s0, s15
 801488c:	eddf 6aa1 	vldr	s13, [pc, #644]	@ 8014b14 <__ieee754_powf+0x41c>
 8014890:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 8014894:	eee0 6a67 	vfms.f32	s13, s0, s15
 8014898:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801489c:	eee6 7ac0 	vfms.f32	s15, s13, s0
 80148a0:	ee20 7a00 	vmul.f32	s14, s0, s0
 80148a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80148a8:	eddf 7a9b 	vldr	s15, [pc, #620]	@ 8014b18 <__ieee754_powf+0x420>
 80148ac:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 80148b0:	ed9f 7a9a 	vldr	s14, [pc, #616]	@ 8014b1c <__ieee754_powf+0x424>
 80148b4:	eee0 7a07 	vfma.f32	s15, s0, s14
 80148b8:	ed9f 7a99 	vldr	s14, [pc, #612]	@ 8014b20 <__ieee754_powf+0x428>
 80148bc:	eef0 6a67 	vmov.f32	s13, s15
 80148c0:	eee0 6a07 	vfma.f32	s13, s0, s14
 80148c4:	ee16 3a90 	vmov	r3, s13
 80148c8:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80148cc:	f023 030f 	bic.w	r3, r3, #15
 80148d0:	ee06 3a90 	vmov	s13, r3
 80148d4:	eee0 6a47 	vfms.f32	s13, s0, s14
 80148d8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80148dc:	3d01      	subs	r5, #1
 80148de:	f424 647f 	bic.w	r4, r4, #4080	@ 0xff0
 80148e2:	4305      	orrs	r5, r0
 80148e4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80148e8:	f024 040f 	bic.w	r4, r4, #15
 80148ec:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 80148f0:	bf18      	it	ne
 80148f2:	eeb0 8a47 	vmovne.f32	s16, s14
 80148f6:	ee07 4a10 	vmov	s14, r4
 80148fa:	ee67 0aa8 	vmul.f32	s1, s15, s17
 80148fe:	ee38 7ac7 	vsub.f32	s14, s17, s14
 8014902:	ee07 3a90 	vmov	s15, r3
 8014906:	eee7 0a27 	vfma.f32	s1, s14, s15
 801490a:	ee07 4a10 	vmov	s14, r4
 801490e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014912:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8014916:	ee17 1a10 	vmov	r1, s14
 801491a:	2900      	cmp	r1, #0
 801491c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8014920:	f340 80dd 	ble.w	8014ade <__ieee754_powf+0x3e6>
 8014924:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 8014928:	f240 80ca 	bls.w	8014ac0 <__ieee754_powf+0x3c8>
 801492c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8014930:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014934:	bf4c      	ite	mi
 8014936:	2001      	movmi	r0, #1
 8014938:	2000      	movpl	r0, #0
 801493a:	e791      	b.n	8014860 <__ieee754_powf+0x168>
 801493c:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 8014940:	bf01      	itttt	eq
 8014942:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 8014b24 <__ieee754_powf+0x42c>
 8014946:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 801494a:	f06f 0317 	mvneq.w	r3, #23
 801494e:	ee17 7a90 	vmoveq	r7, s15
 8014952:	ea4f 52e7 	mov.w	r2, r7, asr #23
 8014956:	bf18      	it	ne
 8014958:	2300      	movne	r3, #0
 801495a:	3a7f      	subs	r2, #127	@ 0x7f
 801495c:	441a      	add	r2, r3
 801495e:	4b72      	ldr	r3, [pc, #456]	@ (8014b28 <__ieee754_powf+0x430>)
 8014960:	f3c7 0716 	ubfx	r7, r7, #0, #23
 8014964:	429f      	cmp	r7, r3
 8014966:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 801496a:	dd06      	ble.n	801497a <__ieee754_powf+0x282>
 801496c:	4b6f      	ldr	r3, [pc, #444]	@ (8014b2c <__ieee754_powf+0x434>)
 801496e:	429f      	cmp	r7, r3
 8014970:	f340 80a4 	ble.w	8014abc <__ieee754_powf+0x3c4>
 8014974:	3201      	adds	r2, #1
 8014976:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 801497a:	2600      	movs	r6, #0
 801497c:	4b6c      	ldr	r3, [pc, #432]	@ (8014b30 <__ieee754_powf+0x438>)
 801497e:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 8014982:	ee07 1a10 	vmov	s14, r1
 8014986:	edd3 5a00 	vldr	s11, [r3]
 801498a:	4b6a      	ldr	r3, [pc, #424]	@ (8014b34 <__ieee754_powf+0x43c>)
 801498c:	ee75 7a87 	vadd.f32	s15, s11, s14
 8014990:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8014994:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 8014998:	1049      	asrs	r1, r1, #1
 801499a:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 801499e:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 80149a2:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 80149a6:	ee37 6a65 	vsub.f32	s12, s14, s11
 80149aa:	ee07 1a90 	vmov	s15, r1
 80149ae:	ee26 5a24 	vmul.f32	s10, s12, s9
 80149b2:	ee77 5ae5 	vsub.f32	s11, s15, s11
 80149b6:	ee15 7a10 	vmov	r7, s10
 80149ba:	401f      	ands	r7, r3
 80149bc:	ee06 7a90 	vmov	s13, r7
 80149c0:	eea6 6ae7 	vfms.f32	s12, s13, s15
 80149c4:	ee37 7a65 	vsub.f32	s14, s14, s11
 80149c8:	ee65 7a05 	vmul.f32	s15, s10, s10
 80149cc:	eea6 6ac7 	vfms.f32	s12, s13, s14
 80149d0:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8014b38 <__ieee754_powf+0x440>
 80149d4:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8014b3c <__ieee754_powf+0x444>
 80149d8:	eee7 5a87 	vfma.f32	s11, s15, s14
 80149dc:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8014b40 <__ieee754_powf+0x448>
 80149e0:	eea5 7aa7 	vfma.f32	s14, s11, s15
 80149e4:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 8014b14 <__ieee754_powf+0x41c>
 80149e8:	eee7 5a27 	vfma.f32	s11, s14, s15
 80149ec:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 8014b44 <__ieee754_powf+0x44c>
 80149f0:	eea5 7aa7 	vfma.f32	s14, s11, s15
 80149f4:	eddf 5a54 	vldr	s11, [pc, #336]	@ 8014b48 <__ieee754_powf+0x450>
 80149f8:	ee26 6a24 	vmul.f32	s12, s12, s9
 80149fc:	eee7 5a27 	vfma.f32	s11, s14, s15
 8014a00:	ee35 7a26 	vadd.f32	s14, s10, s13
 8014a04:	ee67 4aa7 	vmul.f32	s9, s15, s15
 8014a08:	ee27 7a06 	vmul.f32	s14, s14, s12
 8014a0c:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 8014a10:	eea4 7aa5 	vfma.f32	s14, s9, s11
 8014a14:	eef0 5a67 	vmov.f32	s11, s15
 8014a18:	eee6 5aa6 	vfma.f32	s11, s13, s13
 8014a1c:	ee75 5a87 	vadd.f32	s11, s11, s14
 8014a20:	ee15 1a90 	vmov	r1, s11
 8014a24:	4019      	ands	r1, r3
 8014a26:	ee05 1a90 	vmov	s11, r1
 8014a2a:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8014a2e:	eee6 7ae6 	vfms.f32	s15, s13, s13
 8014a32:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014a36:	ee67 7a85 	vmul.f32	s15, s15, s10
 8014a3a:	eee6 7a25 	vfma.f32	s15, s12, s11
 8014a3e:	eeb0 6a67 	vmov.f32	s12, s15
 8014a42:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8014a46:	ee16 1a10 	vmov	r1, s12
 8014a4a:	4019      	ands	r1, r3
 8014a4c:	ee06 1a10 	vmov	s12, r1
 8014a50:	eeb0 7a46 	vmov.f32	s14, s12
 8014a54:	eea6 7ae5 	vfms.f32	s14, s13, s11
 8014a58:	493c      	ldr	r1, [pc, #240]	@ (8014b4c <__ieee754_powf+0x454>)
 8014a5a:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 8014a5e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014a62:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 8014b50 <__ieee754_powf+0x458>
 8014a66:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 8014b54 <__ieee754_powf+0x45c>
 8014a6a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014a6e:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8014b58 <__ieee754_powf+0x460>
 8014a72:	eee6 7a07 	vfma.f32	s15, s12, s14
 8014a76:	ed91 7a00 	vldr	s14, [r1]
 8014a7a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014a7e:	ee07 2a10 	vmov	s14, r2
 8014a82:	eef0 6a67 	vmov.f32	s13, s15
 8014a86:	4a35      	ldr	r2, [pc, #212]	@ (8014b5c <__ieee754_powf+0x464>)
 8014a88:	eee6 6a25 	vfma.f32	s13, s12, s11
 8014a8c:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 8014a90:	ed92 5a00 	vldr	s10, [r2]
 8014a94:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8014a98:	ee76 6a85 	vadd.f32	s13, s13, s10
 8014a9c:	ee76 6a87 	vadd.f32	s13, s13, s14
 8014aa0:	ee16 2a90 	vmov	r2, s13
 8014aa4:	4013      	ands	r3, r2
 8014aa6:	ee06 3a90 	vmov	s13, r3
 8014aaa:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8014aae:	ee37 7a45 	vsub.f32	s14, s14, s10
 8014ab2:	eea6 7a65 	vfms.f32	s14, s12, s11
 8014ab6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014aba:	e70f      	b.n	80148dc <__ieee754_powf+0x1e4>
 8014abc:	2601      	movs	r6, #1
 8014abe:	e75d      	b.n	801497c <__ieee754_powf+0x284>
 8014ac0:	d152      	bne.n	8014b68 <__ieee754_powf+0x470>
 8014ac2:	eddf 6a27 	vldr	s13, [pc, #156]	@ 8014b60 <__ieee754_powf+0x468>
 8014ac6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8014aca:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8014ace:	eef4 6ac7 	vcmpe.f32	s13, s14
 8014ad2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014ad6:	f73f af29 	bgt.w	801492c <__ieee754_powf+0x234>
 8014ada:	2386      	movs	r3, #134	@ 0x86
 8014adc:	e048      	b.n	8014b70 <__ieee754_powf+0x478>
 8014ade:	4a21      	ldr	r2, [pc, #132]	@ (8014b64 <__ieee754_powf+0x46c>)
 8014ae0:	4293      	cmp	r3, r2
 8014ae2:	d907      	bls.n	8014af4 <__ieee754_powf+0x3fc>
 8014ae4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8014ae8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014aec:	bf4c      	ite	mi
 8014aee:	2001      	movmi	r0, #1
 8014af0:	2000      	movpl	r0, #0
 8014af2:	e6c1      	b.n	8014878 <__ieee754_powf+0x180>
 8014af4:	d138      	bne.n	8014b68 <__ieee754_powf+0x470>
 8014af6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8014afa:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8014afe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b02:	dbea      	blt.n	8014ada <__ieee754_powf+0x3e2>
 8014b04:	e7ee      	b.n	8014ae4 <__ieee754_powf+0x3ec>
 8014b06:	bf00      	nop
 8014b08:	00000000 	.word	0x00000000
 8014b0c:	3f7ffff3 	.word	0x3f7ffff3
 8014b10:	3f800007 	.word	0x3f800007
 8014b14:	3eaaaaab 	.word	0x3eaaaaab
 8014b18:	3fb8aa3b 	.word	0x3fb8aa3b
 8014b1c:	36eca570 	.word	0x36eca570
 8014b20:	3fb8aa00 	.word	0x3fb8aa00
 8014b24:	4b800000 	.word	0x4b800000
 8014b28:	001cc471 	.word	0x001cc471
 8014b2c:	005db3d6 	.word	0x005db3d6
 8014b30:	08018718 	.word	0x08018718
 8014b34:	fffff000 	.word	0xfffff000
 8014b38:	3e6c3255 	.word	0x3e6c3255
 8014b3c:	3e53f142 	.word	0x3e53f142
 8014b40:	3e8ba305 	.word	0x3e8ba305
 8014b44:	3edb6db7 	.word	0x3edb6db7
 8014b48:	3f19999a 	.word	0x3f19999a
 8014b4c:	08018708 	.word	0x08018708
 8014b50:	3f76384f 	.word	0x3f76384f
 8014b54:	3f763800 	.word	0x3f763800
 8014b58:	369dc3a0 	.word	0x369dc3a0
 8014b5c:	08018710 	.word	0x08018710
 8014b60:	3338aa3c 	.word	0x3338aa3c
 8014b64:	43160000 	.word	0x43160000
 8014b68:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 8014b6c:	d971      	bls.n	8014c52 <__ieee754_powf+0x55a>
 8014b6e:	15db      	asrs	r3, r3, #23
 8014b70:	3b7e      	subs	r3, #126	@ 0x7e
 8014b72:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8014b76:	4118      	asrs	r0, r3
 8014b78:	4408      	add	r0, r1
 8014b7a:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8014b7e:	4a3c      	ldr	r2, [pc, #240]	@ (8014c70 <__ieee754_powf+0x578>)
 8014b80:	3b7f      	subs	r3, #127	@ 0x7f
 8014b82:	411a      	asrs	r2, r3
 8014b84:	4002      	ands	r2, r0
 8014b86:	ee07 2a10 	vmov	s14, r2
 8014b8a:	f3c0 0016 	ubfx	r0, r0, #0, #23
 8014b8e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8014b92:	f1c3 0317 	rsb	r3, r3, #23
 8014b96:	4118      	asrs	r0, r3
 8014b98:	2900      	cmp	r1, #0
 8014b9a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014b9e:	bfb8      	it	lt
 8014ba0:	4240      	neglt	r0, r0
 8014ba2:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8014ba6:	eddf 6a33 	vldr	s13, [pc, #204]	@ 8014c74 <__ieee754_powf+0x57c>
 8014baa:	ed9f 6a33 	vldr	s12, [pc, #204]	@ 8014c78 <__ieee754_powf+0x580>
 8014bae:	ee17 3a10 	vmov	r3, s14
 8014bb2:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8014bb6:	f023 030f 	bic.w	r3, r3, #15
 8014bba:	ee07 3a10 	vmov	s14, r3
 8014bbe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014bc2:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8014bc6:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8014bca:	eddf 7a2c 	vldr	s15, [pc, #176]	@ 8014c7c <__ieee754_powf+0x584>
 8014bce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014bd2:	eee0 7aa6 	vfma.f32	s15, s1, s13
 8014bd6:	eef0 6a67 	vmov.f32	s13, s15
 8014bda:	eee7 6a06 	vfma.f32	s13, s14, s12
 8014bde:	eef0 5a66 	vmov.f32	s11, s13
 8014be2:	eee7 5a46 	vfms.f32	s11, s14, s12
 8014be6:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8014bea:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8014bee:	ed9f 6a24 	vldr	s12, [pc, #144]	@ 8014c80 <__ieee754_powf+0x588>
 8014bf2:	eddf 5a24 	vldr	s11, [pc, #144]	@ 8014c84 <__ieee754_powf+0x58c>
 8014bf6:	eea7 6a25 	vfma.f32	s12, s14, s11
 8014bfa:	eddf 5a23 	vldr	s11, [pc, #140]	@ 8014c88 <__ieee754_powf+0x590>
 8014bfe:	eee6 5a07 	vfma.f32	s11, s12, s14
 8014c02:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 8014c8c <__ieee754_powf+0x594>
 8014c06:	eea5 6a87 	vfma.f32	s12, s11, s14
 8014c0a:	eddf 5a21 	vldr	s11, [pc, #132]	@ 8014c90 <__ieee754_powf+0x598>
 8014c0e:	eee6 5a07 	vfma.f32	s11, s12, s14
 8014c12:	eeb0 6a66 	vmov.f32	s12, s13
 8014c16:	eea5 6ac7 	vfms.f32	s12, s11, s14
 8014c1a:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8014c1e:	ee66 5a86 	vmul.f32	s11, s13, s12
 8014c22:	ee36 6a47 	vsub.f32	s12, s12, s14
 8014c26:	eee6 7aa7 	vfma.f32	s15, s13, s15
 8014c2a:	ee85 7a86 	vdiv.f32	s14, s11, s12
 8014c2e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014c32:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8014c36:	ee30 0a67 	vsub.f32	s0, s0, s15
 8014c3a:	ee10 3a10 	vmov	r3, s0
 8014c3e:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8014c42:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8014c46:	da06      	bge.n	8014c56 <__ieee754_powf+0x55e>
 8014c48:	f000 f82e 	bl	8014ca8 <scalbnf>
 8014c4c:	ee20 0a08 	vmul.f32	s0, s0, s16
 8014c50:	e56a      	b.n	8014728 <__ieee754_powf+0x30>
 8014c52:	2000      	movs	r0, #0
 8014c54:	e7a5      	b.n	8014ba2 <__ieee754_powf+0x4aa>
 8014c56:	ee00 3a10 	vmov	s0, r3
 8014c5a:	e7f7      	b.n	8014c4c <__ieee754_powf+0x554>
 8014c5c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8014c60:	e562      	b.n	8014728 <__ieee754_powf+0x30>
 8014c62:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 8014c94 <__ieee754_powf+0x59c>
 8014c66:	e55f      	b.n	8014728 <__ieee754_powf+0x30>
 8014c68:	eeb0 0a48 	vmov.f32	s0, s16
 8014c6c:	e55c      	b.n	8014728 <__ieee754_powf+0x30>
 8014c6e:	bf00      	nop
 8014c70:	ff800000 	.word	0xff800000
 8014c74:	3f317218 	.word	0x3f317218
 8014c78:	3f317200 	.word	0x3f317200
 8014c7c:	35bfbe8c 	.word	0x35bfbe8c
 8014c80:	b5ddea0e 	.word	0xb5ddea0e
 8014c84:	3331bb4c 	.word	0x3331bb4c
 8014c88:	388ab355 	.word	0x388ab355
 8014c8c:	bb360b61 	.word	0xbb360b61
 8014c90:	3e2aaaab 	.word	0x3e2aaaab
 8014c94:	00000000 	.word	0x00000000

08014c98 <fabsf>:
 8014c98:	ee10 3a10 	vmov	r3, s0
 8014c9c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8014ca0:	ee00 3a10 	vmov	s0, r3
 8014ca4:	4770      	bx	lr
	...

08014ca8 <scalbnf>:
 8014ca8:	ee10 3a10 	vmov	r3, s0
 8014cac:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8014cb0:	d02b      	beq.n	8014d0a <scalbnf+0x62>
 8014cb2:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8014cb6:	d302      	bcc.n	8014cbe <scalbnf+0x16>
 8014cb8:	ee30 0a00 	vadd.f32	s0, s0, s0
 8014cbc:	4770      	bx	lr
 8014cbe:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8014cc2:	d123      	bne.n	8014d0c <scalbnf+0x64>
 8014cc4:	4b24      	ldr	r3, [pc, #144]	@ (8014d58 <scalbnf+0xb0>)
 8014cc6:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8014d5c <scalbnf+0xb4>
 8014cca:	4298      	cmp	r0, r3
 8014ccc:	ee20 0a27 	vmul.f32	s0, s0, s15
 8014cd0:	db17      	blt.n	8014d02 <scalbnf+0x5a>
 8014cd2:	ee10 3a10 	vmov	r3, s0
 8014cd6:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8014cda:	3a19      	subs	r2, #25
 8014cdc:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8014ce0:	4288      	cmp	r0, r1
 8014ce2:	dd15      	ble.n	8014d10 <scalbnf+0x68>
 8014ce4:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8014d60 <scalbnf+0xb8>
 8014ce8:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8014d64 <scalbnf+0xbc>
 8014cec:	ee10 3a10 	vmov	r3, s0
 8014cf0:	eeb0 7a67 	vmov.f32	s14, s15
 8014cf4:	2b00      	cmp	r3, #0
 8014cf6:	bfb8      	it	lt
 8014cf8:	eef0 7a66 	vmovlt.f32	s15, s13
 8014cfc:	ee27 0a87 	vmul.f32	s0, s15, s14
 8014d00:	4770      	bx	lr
 8014d02:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8014d68 <scalbnf+0xc0>
 8014d06:	ee27 0a80 	vmul.f32	s0, s15, s0
 8014d0a:	4770      	bx	lr
 8014d0c:	0dd2      	lsrs	r2, r2, #23
 8014d0e:	e7e5      	b.n	8014cdc <scalbnf+0x34>
 8014d10:	4410      	add	r0, r2
 8014d12:	28fe      	cmp	r0, #254	@ 0xfe
 8014d14:	dce6      	bgt.n	8014ce4 <scalbnf+0x3c>
 8014d16:	2800      	cmp	r0, #0
 8014d18:	dd06      	ble.n	8014d28 <scalbnf+0x80>
 8014d1a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8014d1e:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8014d22:	ee00 3a10 	vmov	s0, r3
 8014d26:	4770      	bx	lr
 8014d28:	f110 0f16 	cmn.w	r0, #22
 8014d2c:	da09      	bge.n	8014d42 <scalbnf+0x9a>
 8014d2e:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8014d68 <scalbnf+0xc0>
 8014d32:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8014d6c <scalbnf+0xc4>
 8014d36:	ee10 3a10 	vmov	r3, s0
 8014d3a:	eeb0 7a67 	vmov.f32	s14, s15
 8014d3e:	2b00      	cmp	r3, #0
 8014d40:	e7d9      	b.n	8014cf6 <scalbnf+0x4e>
 8014d42:	3019      	adds	r0, #25
 8014d44:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8014d48:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8014d4c:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8014d70 <scalbnf+0xc8>
 8014d50:	ee07 3a90 	vmov	s15, r3
 8014d54:	e7d7      	b.n	8014d06 <scalbnf+0x5e>
 8014d56:	bf00      	nop
 8014d58:	ffff3cb0 	.word	0xffff3cb0
 8014d5c:	4c000000 	.word	0x4c000000
 8014d60:	7149f2ca 	.word	0x7149f2ca
 8014d64:	f149f2ca 	.word	0xf149f2ca
 8014d68:	0da24260 	.word	0x0da24260
 8014d6c:	8da24260 	.word	0x8da24260
 8014d70:	33000000 	.word	0x33000000

08014d74 <with_errnof>:
 8014d74:	b510      	push	{r4, lr}
 8014d76:	ed2d 8b02 	vpush	{d8}
 8014d7a:	eeb0 8a40 	vmov.f32	s16, s0
 8014d7e:	4604      	mov	r4, r0
 8014d80:	f7fb fa70 	bl	8010264 <__errno>
 8014d84:	eeb0 0a48 	vmov.f32	s0, s16
 8014d88:	ecbd 8b02 	vpop	{d8}
 8014d8c:	6004      	str	r4, [r0, #0]
 8014d8e:	bd10      	pop	{r4, pc}

08014d90 <xflowf>:
 8014d90:	b130      	cbz	r0, 8014da0 <xflowf+0x10>
 8014d92:	eef1 7a40 	vneg.f32	s15, s0
 8014d96:	ee27 0a80 	vmul.f32	s0, s15, s0
 8014d9a:	2022      	movs	r0, #34	@ 0x22
 8014d9c:	f7ff bfea 	b.w	8014d74 <with_errnof>
 8014da0:	eef0 7a40 	vmov.f32	s15, s0
 8014da4:	e7f7      	b.n	8014d96 <xflowf+0x6>
	...

08014da8 <__math_uflowf>:
 8014da8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8014db0 <__math_uflowf+0x8>
 8014dac:	f7ff bff0 	b.w	8014d90 <xflowf>
 8014db0:	10000000 	.word	0x10000000

08014db4 <__math_oflowf>:
 8014db4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8014dbc <__math_oflowf+0x8>
 8014db8:	f7ff bfea 	b.w	8014d90 <xflowf>
 8014dbc:	70000000 	.word	0x70000000

08014dc0 <__ieee754_sqrtf>:
 8014dc0:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8014dc4:	4770      	bx	lr
	...

08014dc8 <__kernel_rem_pio2>:
 8014dc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014dcc:	ed2d 8b02 	vpush	{d8}
 8014dd0:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8014dd4:	f112 0f14 	cmn.w	r2, #20
 8014dd8:	9306      	str	r3, [sp, #24]
 8014dda:	9104      	str	r1, [sp, #16]
 8014ddc:	4bbe      	ldr	r3, [pc, #760]	@ (80150d8 <__kernel_rem_pio2+0x310>)
 8014dde:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8014de0:	9008      	str	r0, [sp, #32]
 8014de2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8014de6:	9300      	str	r3, [sp, #0]
 8014de8:	9b06      	ldr	r3, [sp, #24]
 8014dea:	f103 33ff 	add.w	r3, r3, #4294967295
 8014dee:	bfa8      	it	ge
 8014df0:	1ed4      	subge	r4, r2, #3
 8014df2:	9305      	str	r3, [sp, #20]
 8014df4:	bfb2      	itee	lt
 8014df6:	2400      	movlt	r4, #0
 8014df8:	2318      	movge	r3, #24
 8014dfa:	fb94 f4f3 	sdivge	r4, r4, r3
 8014dfe:	f06f 0317 	mvn.w	r3, #23
 8014e02:	fb04 3303 	mla	r3, r4, r3, r3
 8014e06:	eb03 0b02 	add.w	fp, r3, r2
 8014e0a:	9b00      	ldr	r3, [sp, #0]
 8014e0c:	9a05      	ldr	r2, [sp, #20]
 8014e0e:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 80150c8 <__kernel_rem_pio2+0x300>
 8014e12:	eb03 0802 	add.w	r8, r3, r2
 8014e16:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8014e18:	1aa7      	subs	r7, r4, r2
 8014e1a:	ae20      	add	r6, sp, #128	@ 0x80
 8014e1c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8014e20:	2500      	movs	r5, #0
 8014e22:	4545      	cmp	r5, r8
 8014e24:	dd13      	ble.n	8014e4e <__kernel_rem_pio2+0x86>
 8014e26:	9b06      	ldr	r3, [sp, #24]
 8014e28:	aa20      	add	r2, sp, #128	@ 0x80
 8014e2a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8014e2e:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 8014e32:	f04f 0800 	mov.w	r8, #0
 8014e36:	9b00      	ldr	r3, [sp, #0]
 8014e38:	4598      	cmp	r8, r3
 8014e3a:	dc31      	bgt.n	8014ea0 <__kernel_rem_pio2+0xd8>
 8014e3c:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 80150c8 <__kernel_rem_pio2+0x300>
 8014e40:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8014e44:	ed8d 7b02 	vstr	d7, [sp, #8]
 8014e48:	462f      	mov	r7, r5
 8014e4a:	2600      	movs	r6, #0
 8014e4c:	e01b      	b.n	8014e86 <__kernel_rem_pio2+0xbe>
 8014e4e:	42ef      	cmn	r7, r5
 8014e50:	d407      	bmi.n	8014e62 <__kernel_rem_pio2+0x9a>
 8014e52:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8014e56:	f7eb fb3d 	bl	80004d4 <__aeabi_i2d>
 8014e5a:	e8e6 0102 	strd	r0, r1, [r6], #8
 8014e5e:	3501      	adds	r5, #1
 8014e60:	e7df      	b.n	8014e22 <__kernel_rem_pio2+0x5a>
 8014e62:	ec51 0b18 	vmov	r0, r1, d8
 8014e66:	e7f8      	b.n	8014e5a <__kernel_rem_pio2+0x92>
 8014e68:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014e6c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8014e70:	f7eb fb9a 	bl	80005a8 <__aeabi_dmul>
 8014e74:	4602      	mov	r2, r0
 8014e76:	460b      	mov	r3, r1
 8014e78:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014e7c:	f7eb f9de 	bl	800023c <__adddf3>
 8014e80:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014e84:	3601      	adds	r6, #1
 8014e86:	9b05      	ldr	r3, [sp, #20]
 8014e88:	429e      	cmp	r6, r3
 8014e8a:	f1a7 0708 	sub.w	r7, r7, #8
 8014e8e:	ddeb      	ble.n	8014e68 <__kernel_rem_pio2+0xa0>
 8014e90:	ed9d 7b02 	vldr	d7, [sp, #8]
 8014e94:	f108 0801 	add.w	r8, r8, #1
 8014e98:	ecaa 7b02 	vstmia	sl!, {d7}
 8014e9c:	3508      	adds	r5, #8
 8014e9e:	e7ca      	b.n	8014e36 <__kernel_rem_pio2+0x6e>
 8014ea0:	9b00      	ldr	r3, [sp, #0]
 8014ea2:	f8dd 8000 	ldr.w	r8, [sp]
 8014ea6:	aa0c      	add	r2, sp, #48	@ 0x30
 8014ea8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8014eac:	930a      	str	r3, [sp, #40]	@ 0x28
 8014eae:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8014eb0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8014eb4:	9309      	str	r3, [sp, #36]	@ 0x24
 8014eb6:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8014eba:	930b      	str	r3, [sp, #44]	@ 0x2c
 8014ebc:	ab98      	add	r3, sp, #608	@ 0x260
 8014ebe:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8014ec2:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 8014ec6:	ed8d 7b02 	vstr	d7, [sp, #8]
 8014eca:	ac0c      	add	r4, sp, #48	@ 0x30
 8014ecc:	ab70      	add	r3, sp, #448	@ 0x1c0
 8014ece:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 8014ed2:	46a1      	mov	r9, r4
 8014ed4:	46c2      	mov	sl, r8
 8014ed6:	f1ba 0f00 	cmp.w	sl, #0
 8014eda:	f1a5 0508 	sub.w	r5, r5, #8
 8014ede:	dc77      	bgt.n	8014fd0 <__kernel_rem_pio2+0x208>
 8014ee0:	4658      	mov	r0, fp
 8014ee2:	ed9d 0b02 	vldr	d0, [sp, #8]
 8014ee6:	f000 fd23 	bl	8015930 <scalbn>
 8014eea:	ec57 6b10 	vmov	r6, r7, d0
 8014eee:	2200      	movs	r2, #0
 8014ef0:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8014ef4:	4630      	mov	r0, r6
 8014ef6:	4639      	mov	r1, r7
 8014ef8:	f7eb fb56 	bl	80005a8 <__aeabi_dmul>
 8014efc:	ec41 0b10 	vmov	d0, r0, r1
 8014f00:	f7fe fe0a 	bl	8013b18 <floor>
 8014f04:	4b75      	ldr	r3, [pc, #468]	@ (80150dc <__kernel_rem_pio2+0x314>)
 8014f06:	ec51 0b10 	vmov	r0, r1, d0
 8014f0a:	2200      	movs	r2, #0
 8014f0c:	f7eb fb4c 	bl	80005a8 <__aeabi_dmul>
 8014f10:	4602      	mov	r2, r0
 8014f12:	460b      	mov	r3, r1
 8014f14:	4630      	mov	r0, r6
 8014f16:	4639      	mov	r1, r7
 8014f18:	f7eb f98e 	bl	8000238 <__aeabi_dsub>
 8014f1c:	460f      	mov	r7, r1
 8014f1e:	4606      	mov	r6, r0
 8014f20:	f7eb fdf2 	bl	8000b08 <__aeabi_d2iz>
 8014f24:	9002      	str	r0, [sp, #8]
 8014f26:	f7eb fad5 	bl	80004d4 <__aeabi_i2d>
 8014f2a:	4602      	mov	r2, r0
 8014f2c:	460b      	mov	r3, r1
 8014f2e:	4630      	mov	r0, r6
 8014f30:	4639      	mov	r1, r7
 8014f32:	f7eb f981 	bl	8000238 <__aeabi_dsub>
 8014f36:	f1bb 0f00 	cmp.w	fp, #0
 8014f3a:	4606      	mov	r6, r0
 8014f3c:	460f      	mov	r7, r1
 8014f3e:	dd6c      	ble.n	801501a <__kernel_rem_pio2+0x252>
 8014f40:	f108 31ff 	add.w	r1, r8, #4294967295
 8014f44:	ab0c      	add	r3, sp, #48	@ 0x30
 8014f46:	9d02      	ldr	r5, [sp, #8]
 8014f48:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8014f4c:	f1cb 0018 	rsb	r0, fp, #24
 8014f50:	fa43 f200 	asr.w	r2, r3, r0
 8014f54:	4415      	add	r5, r2
 8014f56:	4082      	lsls	r2, r0
 8014f58:	1a9b      	subs	r3, r3, r2
 8014f5a:	aa0c      	add	r2, sp, #48	@ 0x30
 8014f5c:	9502      	str	r5, [sp, #8]
 8014f5e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8014f62:	f1cb 0217 	rsb	r2, fp, #23
 8014f66:	fa43 f902 	asr.w	r9, r3, r2
 8014f6a:	f1b9 0f00 	cmp.w	r9, #0
 8014f6e:	dd64      	ble.n	801503a <__kernel_rem_pio2+0x272>
 8014f70:	9b02      	ldr	r3, [sp, #8]
 8014f72:	2200      	movs	r2, #0
 8014f74:	3301      	adds	r3, #1
 8014f76:	9302      	str	r3, [sp, #8]
 8014f78:	4615      	mov	r5, r2
 8014f7a:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 8014f7e:	4590      	cmp	r8, r2
 8014f80:	f300 80b8 	bgt.w	80150f4 <__kernel_rem_pio2+0x32c>
 8014f84:	f1bb 0f00 	cmp.w	fp, #0
 8014f88:	dd07      	ble.n	8014f9a <__kernel_rem_pio2+0x1d2>
 8014f8a:	f1bb 0f01 	cmp.w	fp, #1
 8014f8e:	f000 80bf 	beq.w	8015110 <__kernel_rem_pio2+0x348>
 8014f92:	f1bb 0f02 	cmp.w	fp, #2
 8014f96:	f000 80c6 	beq.w	8015126 <__kernel_rem_pio2+0x35e>
 8014f9a:	f1b9 0f02 	cmp.w	r9, #2
 8014f9e:	d14c      	bne.n	801503a <__kernel_rem_pio2+0x272>
 8014fa0:	4632      	mov	r2, r6
 8014fa2:	463b      	mov	r3, r7
 8014fa4:	494e      	ldr	r1, [pc, #312]	@ (80150e0 <__kernel_rem_pio2+0x318>)
 8014fa6:	2000      	movs	r0, #0
 8014fa8:	f7eb f946 	bl	8000238 <__aeabi_dsub>
 8014fac:	4606      	mov	r6, r0
 8014fae:	460f      	mov	r7, r1
 8014fb0:	2d00      	cmp	r5, #0
 8014fb2:	d042      	beq.n	801503a <__kernel_rem_pio2+0x272>
 8014fb4:	4658      	mov	r0, fp
 8014fb6:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 80150d0 <__kernel_rem_pio2+0x308>
 8014fba:	f000 fcb9 	bl	8015930 <scalbn>
 8014fbe:	4630      	mov	r0, r6
 8014fc0:	4639      	mov	r1, r7
 8014fc2:	ec53 2b10 	vmov	r2, r3, d0
 8014fc6:	f7eb f937 	bl	8000238 <__aeabi_dsub>
 8014fca:	4606      	mov	r6, r0
 8014fcc:	460f      	mov	r7, r1
 8014fce:	e034      	b.n	801503a <__kernel_rem_pio2+0x272>
 8014fd0:	4b44      	ldr	r3, [pc, #272]	@ (80150e4 <__kernel_rem_pio2+0x31c>)
 8014fd2:	2200      	movs	r2, #0
 8014fd4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014fd8:	f7eb fae6 	bl	80005a8 <__aeabi_dmul>
 8014fdc:	f7eb fd94 	bl	8000b08 <__aeabi_d2iz>
 8014fe0:	f7eb fa78 	bl	80004d4 <__aeabi_i2d>
 8014fe4:	4b40      	ldr	r3, [pc, #256]	@ (80150e8 <__kernel_rem_pio2+0x320>)
 8014fe6:	2200      	movs	r2, #0
 8014fe8:	4606      	mov	r6, r0
 8014fea:	460f      	mov	r7, r1
 8014fec:	f7eb fadc 	bl	80005a8 <__aeabi_dmul>
 8014ff0:	4602      	mov	r2, r0
 8014ff2:	460b      	mov	r3, r1
 8014ff4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014ff8:	f7eb f91e 	bl	8000238 <__aeabi_dsub>
 8014ffc:	f7eb fd84 	bl	8000b08 <__aeabi_d2iz>
 8015000:	e9d5 2300 	ldrd	r2, r3, [r5]
 8015004:	f849 0b04 	str.w	r0, [r9], #4
 8015008:	4639      	mov	r1, r7
 801500a:	4630      	mov	r0, r6
 801500c:	f7eb f916 	bl	800023c <__adddf3>
 8015010:	f10a 3aff 	add.w	sl, sl, #4294967295
 8015014:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015018:	e75d      	b.n	8014ed6 <__kernel_rem_pio2+0x10e>
 801501a:	d107      	bne.n	801502c <__kernel_rem_pio2+0x264>
 801501c:	f108 33ff 	add.w	r3, r8, #4294967295
 8015020:	aa0c      	add	r2, sp, #48	@ 0x30
 8015022:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015026:	ea4f 59e3 	mov.w	r9, r3, asr #23
 801502a:	e79e      	b.n	8014f6a <__kernel_rem_pio2+0x1a2>
 801502c:	4b2f      	ldr	r3, [pc, #188]	@ (80150ec <__kernel_rem_pio2+0x324>)
 801502e:	2200      	movs	r2, #0
 8015030:	f7eb fd40 	bl	8000ab4 <__aeabi_dcmpge>
 8015034:	2800      	cmp	r0, #0
 8015036:	d143      	bne.n	80150c0 <__kernel_rem_pio2+0x2f8>
 8015038:	4681      	mov	r9, r0
 801503a:	2200      	movs	r2, #0
 801503c:	2300      	movs	r3, #0
 801503e:	4630      	mov	r0, r6
 8015040:	4639      	mov	r1, r7
 8015042:	f7eb fd19 	bl	8000a78 <__aeabi_dcmpeq>
 8015046:	2800      	cmp	r0, #0
 8015048:	f000 80bf 	beq.w	80151ca <__kernel_rem_pio2+0x402>
 801504c:	f108 33ff 	add.w	r3, r8, #4294967295
 8015050:	2200      	movs	r2, #0
 8015052:	9900      	ldr	r1, [sp, #0]
 8015054:	428b      	cmp	r3, r1
 8015056:	da6e      	bge.n	8015136 <__kernel_rem_pio2+0x36e>
 8015058:	2a00      	cmp	r2, #0
 801505a:	f000 8089 	beq.w	8015170 <__kernel_rem_pio2+0x3a8>
 801505e:	f108 38ff 	add.w	r8, r8, #4294967295
 8015062:	ab0c      	add	r3, sp, #48	@ 0x30
 8015064:	f1ab 0b18 	sub.w	fp, fp, #24
 8015068:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 801506c:	2b00      	cmp	r3, #0
 801506e:	d0f6      	beq.n	801505e <__kernel_rem_pio2+0x296>
 8015070:	4658      	mov	r0, fp
 8015072:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 80150d0 <__kernel_rem_pio2+0x308>
 8015076:	f000 fc5b 	bl	8015930 <scalbn>
 801507a:	f108 0301 	add.w	r3, r8, #1
 801507e:	00da      	lsls	r2, r3, #3
 8015080:	9205      	str	r2, [sp, #20]
 8015082:	ec55 4b10 	vmov	r4, r5, d0
 8015086:	aa70      	add	r2, sp, #448	@ 0x1c0
 8015088:	f8df b058 	ldr.w	fp, [pc, #88]	@ 80150e4 <__kernel_rem_pio2+0x31c>
 801508c:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8015090:	4646      	mov	r6, r8
 8015092:	f04f 0a00 	mov.w	sl, #0
 8015096:	2e00      	cmp	r6, #0
 8015098:	f280 80cf 	bge.w	801523a <__kernel_rem_pio2+0x472>
 801509c:	4644      	mov	r4, r8
 801509e:	2c00      	cmp	r4, #0
 80150a0:	f2c0 80fd 	blt.w	801529e <__kernel_rem_pio2+0x4d6>
 80150a4:	4b12      	ldr	r3, [pc, #72]	@ (80150f0 <__kernel_rem_pio2+0x328>)
 80150a6:	461f      	mov	r7, r3
 80150a8:	ab70      	add	r3, sp, #448	@ 0x1c0
 80150aa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80150ae:	9306      	str	r3, [sp, #24]
 80150b0:	f04f 0a00 	mov.w	sl, #0
 80150b4:	f04f 0b00 	mov.w	fp, #0
 80150b8:	2600      	movs	r6, #0
 80150ba:	eba8 0504 	sub.w	r5, r8, r4
 80150be:	e0e2      	b.n	8015286 <__kernel_rem_pio2+0x4be>
 80150c0:	f04f 0902 	mov.w	r9, #2
 80150c4:	e754      	b.n	8014f70 <__kernel_rem_pio2+0x1a8>
 80150c6:	bf00      	nop
	...
 80150d4:	3ff00000 	.word	0x3ff00000
 80150d8:	08018760 	.word	0x08018760
 80150dc:	40200000 	.word	0x40200000
 80150e0:	3ff00000 	.word	0x3ff00000
 80150e4:	3e700000 	.word	0x3e700000
 80150e8:	41700000 	.word	0x41700000
 80150ec:	3fe00000 	.word	0x3fe00000
 80150f0:	08018720 	.word	0x08018720
 80150f4:	f854 3b04 	ldr.w	r3, [r4], #4
 80150f8:	b945      	cbnz	r5, 801510c <__kernel_rem_pio2+0x344>
 80150fa:	b123      	cbz	r3, 8015106 <__kernel_rem_pio2+0x33e>
 80150fc:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8015100:	f844 3c04 	str.w	r3, [r4, #-4]
 8015104:	2301      	movs	r3, #1
 8015106:	3201      	adds	r2, #1
 8015108:	461d      	mov	r5, r3
 801510a:	e738      	b.n	8014f7e <__kernel_rem_pio2+0x1b6>
 801510c:	1acb      	subs	r3, r1, r3
 801510e:	e7f7      	b.n	8015100 <__kernel_rem_pio2+0x338>
 8015110:	f108 32ff 	add.w	r2, r8, #4294967295
 8015114:	ab0c      	add	r3, sp, #48	@ 0x30
 8015116:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801511a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801511e:	a90c      	add	r1, sp, #48	@ 0x30
 8015120:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8015124:	e739      	b.n	8014f9a <__kernel_rem_pio2+0x1d2>
 8015126:	f108 32ff 	add.w	r2, r8, #4294967295
 801512a:	ab0c      	add	r3, sp, #48	@ 0x30
 801512c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015130:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8015134:	e7f3      	b.n	801511e <__kernel_rem_pio2+0x356>
 8015136:	a90c      	add	r1, sp, #48	@ 0x30
 8015138:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 801513c:	3b01      	subs	r3, #1
 801513e:	430a      	orrs	r2, r1
 8015140:	e787      	b.n	8015052 <__kernel_rem_pio2+0x28a>
 8015142:	3401      	adds	r4, #1
 8015144:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8015148:	2a00      	cmp	r2, #0
 801514a:	d0fa      	beq.n	8015142 <__kernel_rem_pio2+0x37a>
 801514c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801514e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8015152:	eb0d 0503 	add.w	r5, sp, r3
 8015156:	9b06      	ldr	r3, [sp, #24]
 8015158:	aa20      	add	r2, sp, #128	@ 0x80
 801515a:	4443      	add	r3, r8
 801515c:	f108 0701 	add.w	r7, r8, #1
 8015160:	3d98      	subs	r5, #152	@ 0x98
 8015162:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 8015166:	4444      	add	r4, r8
 8015168:	42bc      	cmp	r4, r7
 801516a:	da04      	bge.n	8015176 <__kernel_rem_pio2+0x3ae>
 801516c:	46a0      	mov	r8, r4
 801516e:	e6a2      	b.n	8014eb6 <__kernel_rem_pio2+0xee>
 8015170:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015172:	2401      	movs	r4, #1
 8015174:	e7e6      	b.n	8015144 <__kernel_rem_pio2+0x37c>
 8015176:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015178:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 801517c:	f7eb f9aa 	bl	80004d4 <__aeabi_i2d>
 8015180:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 8015448 <__kernel_rem_pio2+0x680>
 8015184:	e8e6 0102 	strd	r0, r1, [r6], #8
 8015188:	ed8d 7b02 	vstr	d7, [sp, #8]
 801518c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8015190:	46b2      	mov	sl, r6
 8015192:	f04f 0800 	mov.w	r8, #0
 8015196:	9b05      	ldr	r3, [sp, #20]
 8015198:	4598      	cmp	r8, r3
 801519a:	dd05      	ble.n	80151a8 <__kernel_rem_pio2+0x3e0>
 801519c:	ed9d 7b02 	vldr	d7, [sp, #8]
 80151a0:	3701      	adds	r7, #1
 80151a2:	eca5 7b02 	vstmia	r5!, {d7}
 80151a6:	e7df      	b.n	8015168 <__kernel_rem_pio2+0x3a0>
 80151a8:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 80151ac:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80151b0:	f7eb f9fa 	bl	80005a8 <__aeabi_dmul>
 80151b4:	4602      	mov	r2, r0
 80151b6:	460b      	mov	r3, r1
 80151b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80151bc:	f7eb f83e 	bl	800023c <__adddf3>
 80151c0:	f108 0801 	add.w	r8, r8, #1
 80151c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80151c8:	e7e5      	b.n	8015196 <__kernel_rem_pio2+0x3ce>
 80151ca:	f1cb 0000 	rsb	r0, fp, #0
 80151ce:	ec47 6b10 	vmov	d0, r6, r7
 80151d2:	f000 fbad 	bl	8015930 <scalbn>
 80151d6:	ec55 4b10 	vmov	r4, r5, d0
 80151da:	4b9d      	ldr	r3, [pc, #628]	@ (8015450 <__kernel_rem_pio2+0x688>)
 80151dc:	2200      	movs	r2, #0
 80151de:	4620      	mov	r0, r4
 80151e0:	4629      	mov	r1, r5
 80151e2:	f7eb fc67 	bl	8000ab4 <__aeabi_dcmpge>
 80151e6:	b300      	cbz	r0, 801522a <__kernel_rem_pio2+0x462>
 80151e8:	4b9a      	ldr	r3, [pc, #616]	@ (8015454 <__kernel_rem_pio2+0x68c>)
 80151ea:	2200      	movs	r2, #0
 80151ec:	4620      	mov	r0, r4
 80151ee:	4629      	mov	r1, r5
 80151f0:	f7eb f9da 	bl	80005a8 <__aeabi_dmul>
 80151f4:	f7eb fc88 	bl	8000b08 <__aeabi_d2iz>
 80151f8:	4606      	mov	r6, r0
 80151fa:	f7eb f96b 	bl	80004d4 <__aeabi_i2d>
 80151fe:	4b94      	ldr	r3, [pc, #592]	@ (8015450 <__kernel_rem_pio2+0x688>)
 8015200:	2200      	movs	r2, #0
 8015202:	f7eb f9d1 	bl	80005a8 <__aeabi_dmul>
 8015206:	460b      	mov	r3, r1
 8015208:	4602      	mov	r2, r0
 801520a:	4629      	mov	r1, r5
 801520c:	4620      	mov	r0, r4
 801520e:	f7eb f813 	bl	8000238 <__aeabi_dsub>
 8015212:	f7eb fc79 	bl	8000b08 <__aeabi_d2iz>
 8015216:	ab0c      	add	r3, sp, #48	@ 0x30
 8015218:	f10b 0b18 	add.w	fp, fp, #24
 801521c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8015220:	f108 0801 	add.w	r8, r8, #1
 8015224:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8015228:	e722      	b.n	8015070 <__kernel_rem_pio2+0x2a8>
 801522a:	4620      	mov	r0, r4
 801522c:	4629      	mov	r1, r5
 801522e:	f7eb fc6b 	bl	8000b08 <__aeabi_d2iz>
 8015232:	ab0c      	add	r3, sp, #48	@ 0x30
 8015234:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8015238:	e71a      	b.n	8015070 <__kernel_rem_pio2+0x2a8>
 801523a:	ab0c      	add	r3, sp, #48	@ 0x30
 801523c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8015240:	f7eb f948 	bl	80004d4 <__aeabi_i2d>
 8015244:	4622      	mov	r2, r4
 8015246:	462b      	mov	r3, r5
 8015248:	f7eb f9ae 	bl	80005a8 <__aeabi_dmul>
 801524c:	4652      	mov	r2, sl
 801524e:	e967 0102 	strd	r0, r1, [r7, #-8]!
 8015252:	465b      	mov	r3, fp
 8015254:	4620      	mov	r0, r4
 8015256:	4629      	mov	r1, r5
 8015258:	f7eb f9a6 	bl	80005a8 <__aeabi_dmul>
 801525c:	3e01      	subs	r6, #1
 801525e:	4604      	mov	r4, r0
 8015260:	460d      	mov	r5, r1
 8015262:	e718      	b.n	8015096 <__kernel_rem_pio2+0x2ce>
 8015264:	9906      	ldr	r1, [sp, #24]
 8015266:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 801526a:	9106      	str	r1, [sp, #24]
 801526c:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8015270:	f7eb f99a 	bl	80005a8 <__aeabi_dmul>
 8015274:	4602      	mov	r2, r0
 8015276:	460b      	mov	r3, r1
 8015278:	4650      	mov	r0, sl
 801527a:	4659      	mov	r1, fp
 801527c:	f7ea ffde 	bl	800023c <__adddf3>
 8015280:	3601      	adds	r6, #1
 8015282:	4682      	mov	sl, r0
 8015284:	468b      	mov	fp, r1
 8015286:	9b00      	ldr	r3, [sp, #0]
 8015288:	429e      	cmp	r6, r3
 801528a:	dc01      	bgt.n	8015290 <__kernel_rem_pio2+0x4c8>
 801528c:	42b5      	cmp	r5, r6
 801528e:	dae9      	bge.n	8015264 <__kernel_rem_pio2+0x49c>
 8015290:	ab48      	add	r3, sp, #288	@ 0x120
 8015292:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8015296:	e9c5 ab00 	strd	sl, fp, [r5]
 801529a:	3c01      	subs	r4, #1
 801529c:	e6ff      	b.n	801509e <__kernel_rem_pio2+0x2d6>
 801529e:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 80152a0:	2b02      	cmp	r3, #2
 80152a2:	dc0b      	bgt.n	80152bc <__kernel_rem_pio2+0x4f4>
 80152a4:	2b00      	cmp	r3, #0
 80152a6:	dc39      	bgt.n	801531c <__kernel_rem_pio2+0x554>
 80152a8:	d05d      	beq.n	8015366 <__kernel_rem_pio2+0x59e>
 80152aa:	9b02      	ldr	r3, [sp, #8]
 80152ac:	f003 0007 	and.w	r0, r3, #7
 80152b0:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 80152b4:	ecbd 8b02 	vpop	{d8}
 80152b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80152bc:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 80152be:	2b03      	cmp	r3, #3
 80152c0:	d1f3      	bne.n	80152aa <__kernel_rem_pio2+0x4e2>
 80152c2:	9b05      	ldr	r3, [sp, #20]
 80152c4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80152c8:	eb0d 0403 	add.w	r4, sp, r3
 80152cc:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 80152d0:	4625      	mov	r5, r4
 80152d2:	46c2      	mov	sl, r8
 80152d4:	f1ba 0f00 	cmp.w	sl, #0
 80152d8:	f1a5 0508 	sub.w	r5, r5, #8
 80152dc:	dc6b      	bgt.n	80153b6 <__kernel_rem_pio2+0x5ee>
 80152de:	4645      	mov	r5, r8
 80152e0:	2d01      	cmp	r5, #1
 80152e2:	f1a4 0408 	sub.w	r4, r4, #8
 80152e6:	f300 8087 	bgt.w	80153f8 <__kernel_rem_pio2+0x630>
 80152ea:	9c05      	ldr	r4, [sp, #20]
 80152ec:	ab48      	add	r3, sp, #288	@ 0x120
 80152ee:	441c      	add	r4, r3
 80152f0:	2000      	movs	r0, #0
 80152f2:	2100      	movs	r1, #0
 80152f4:	f1b8 0f01 	cmp.w	r8, #1
 80152f8:	f300 809c 	bgt.w	8015434 <__kernel_rem_pio2+0x66c>
 80152fc:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 8015300:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 8015304:	f1b9 0f00 	cmp.w	r9, #0
 8015308:	f040 80a6 	bne.w	8015458 <__kernel_rem_pio2+0x690>
 801530c:	9b04      	ldr	r3, [sp, #16]
 801530e:	e9c3 7800 	strd	r7, r8, [r3]
 8015312:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8015316:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801531a:	e7c6      	b.n	80152aa <__kernel_rem_pio2+0x4e2>
 801531c:	9d05      	ldr	r5, [sp, #20]
 801531e:	ab48      	add	r3, sp, #288	@ 0x120
 8015320:	441d      	add	r5, r3
 8015322:	4644      	mov	r4, r8
 8015324:	2000      	movs	r0, #0
 8015326:	2100      	movs	r1, #0
 8015328:	2c00      	cmp	r4, #0
 801532a:	da35      	bge.n	8015398 <__kernel_rem_pio2+0x5d0>
 801532c:	f1b9 0f00 	cmp.w	r9, #0
 8015330:	d038      	beq.n	80153a4 <__kernel_rem_pio2+0x5dc>
 8015332:	4602      	mov	r2, r0
 8015334:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8015338:	9c04      	ldr	r4, [sp, #16]
 801533a:	e9c4 2300 	strd	r2, r3, [r4]
 801533e:	4602      	mov	r2, r0
 8015340:	460b      	mov	r3, r1
 8015342:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 8015346:	f7ea ff77 	bl	8000238 <__aeabi_dsub>
 801534a:	ad4a      	add	r5, sp, #296	@ 0x128
 801534c:	2401      	movs	r4, #1
 801534e:	45a0      	cmp	r8, r4
 8015350:	da2b      	bge.n	80153aa <__kernel_rem_pio2+0x5e2>
 8015352:	f1b9 0f00 	cmp.w	r9, #0
 8015356:	d002      	beq.n	801535e <__kernel_rem_pio2+0x596>
 8015358:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801535c:	4619      	mov	r1, r3
 801535e:	9b04      	ldr	r3, [sp, #16]
 8015360:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8015364:	e7a1      	b.n	80152aa <__kernel_rem_pio2+0x4e2>
 8015366:	9c05      	ldr	r4, [sp, #20]
 8015368:	ab48      	add	r3, sp, #288	@ 0x120
 801536a:	441c      	add	r4, r3
 801536c:	2000      	movs	r0, #0
 801536e:	2100      	movs	r1, #0
 8015370:	f1b8 0f00 	cmp.w	r8, #0
 8015374:	da09      	bge.n	801538a <__kernel_rem_pio2+0x5c2>
 8015376:	f1b9 0f00 	cmp.w	r9, #0
 801537a:	d002      	beq.n	8015382 <__kernel_rem_pio2+0x5ba>
 801537c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8015380:	4619      	mov	r1, r3
 8015382:	9b04      	ldr	r3, [sp, #16]
 8015384:	e9c3 0100 	strd	r0, r1, [r3]
 8015388:	e78f      	b.n	80152aa <__kernel_rem_pio2+0x4e2>
 801538a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801538e:	f7ea ff55 	bl	800023c <__adddf3>
 8015392:	f108 38ff 	add.w	r8, r8, #4294967295
 8015396:	e7eb      	b.n	8015370 <__kernel_rem_pio2+0x5a8>
 8015398:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 801539c:	f7ea ff4e 	bl	800023c <__adddf3>
 80153a0:	3c01      	subs	r4, #1
 80153a2:	e7c1      	b.n	8015328 <__kernel_rem_pio2+0x560>
 80153a4:	4602      	mov	r2, r0
 80153a6:	460b      	mov	r3, r1
 80153a8:	e7c6      	b.n	8015338 <__kernel_rem_pio2+0x570>
 80153aa:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 80153ae:	f7ea ff45 	bl	800023c <__adddf3>
 80153b2:	3401      	adds	r4, #1
 80153b4:	e7cb      	b.n	801534e <__kernel_rem_pio2+0x586>
 80153b6:	ed95 7b00 	vldr	d7, [r5]
 80153ba:	ed8d 7b00 	vstr	d7, [sp]
 80153be:	ed95 7b02 	vldr	d7, [r5, #8]
 80153c2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80153c6:	ec53 2b17 	vmov	r2, r3, d7
 80153ca:	ed8d 7b06 	vstr	d7, [sp, #24]
 80153ce:	f7ea ff35 	bl	800023c <__adddf3>
 80153d2:	4602      	mov	r2, r0
 80153d4:	460b      	mov	r3, r1
 80153d6:	4606      	mov	r6, r0
 80153d8:	460f      	mov	r7, r1
 80153da:	e9dd 0100 	ldrd	r0, r1, [sp]
 80153de:	f7ea ff2b 	bl	8000238 <__aeabi_dsub>
 80153e2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80153e6:	f7ea ff29 	bl	800023c <__adddf3>
 80153ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 80153ee:	e9c5 0102 	strd	r0, r1, [r5, #8]
 80153f2:	e9c5 6700 	strd	r6, r7, [r5]
 80153f6:	e76d      	b.n	80152d4 <__kernel_rem_pio2+0x50c>
 80153f8:	ed94 7b00 	vldr	d7, [r4]
 80153fc:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8015400:	ec51 0b17 	vmov	r0, r1, d7
 8015404:	4652      	mov	r2, sl
 8015406:	465b      	mov	r3, fp
 8015408:	ed8d 7b00 	vstr	d7, [sp]
 801540c:	f7ea ff16 	bl	800023c <__adddf3>
 8015410:	4602      	mov	r2, r0
 8015412:	460b      	mov	r3, r1
 8015414:	4606      	mov	r6, r0
 8015416:	460f      	mov	r7, r1
 8015418:	e9dd 0100 	ldrd	r0, r1, [sp]
 801541c:	f7ea ff0c 	bl	8000238 <__aeabi_dsub>
 8015420:	4652      	mov	r2, sl
 8015422:	465b      	mov	r3, fp
 8015424:	f7ea ff0a 	bl	800023c <__adddf3>
 8015428:	3d01      	subs	r5, #1
 801542a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801542e:	e9c4 6700 	strd	r6, r7, [r4]
 8015432:	e755      	b.n	80152e0 <__kernel_rem_pio2+0x518>
 8015434:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8015438:	f7ea ff00 	bl	800023c <__adddf3>
 801543c:	f108 38ff 	add.w	r8, r8, #4294967295
 8015440:	e758      	b.n	80152f4 <__kernel_rem_pio2+0x52c>
 8015442:	bf00      	nop
 8015444:	f3af 8000 	nop.w
	...
 8015450:	41700000 	.word	0x41700000
 8015454:	3e700000 	.word	0x3e700000
 8015458:	9b04      	ldr	r3, [sp, #16]
 801545a:	9a04      	ldr	r2, [sp, #16]
 801545c:	601f      	str	r7, [r3, #0]
 801545e:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 8015462:	605c      	str	r4, [r3, #4]
 8015464:	609d      	str	r5, [r3, #8]
 8015466:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 801546a:	60d3      	str	r3, [r2, #12]
 801546c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8015470:	6110      	str	r0, [r2, #16]
 8015472:	6153      	str	r3, [r2, #20]
 8015474:	e719      	b.n	80152aa <__kernel_rem_pio2+0x4e2>
 8015476:	bf00      	nop

08015478 <__ieee754_acos>:
 8015478:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801547c:	ec55 4b10 	vmov	r4, r5, d0
 8015480:	49b7      	ldr	r1, [pc, #732]	@ (8015760 <__ieee754_acos+0x2e8>)
 8015482:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8015486:	428b      	cmp	r3, r1
 8015488:	d919      	bls.n	80154be <__ieee754_acos+0x46>
 801548a:	f103 4340 	add.w	r3, r3, #3221225472	@ 0xc0000000
 801548e:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 8015492:	4323      	orrs	r3, r4
 8015494:	d106      	bne.n	80154a4 <__ieee754_acos+0x2c>
 8015496:	2d00      	cmp	r5, #0
 8015498:	f340 8210 	ble.w	80158bc <__ieee754_acos+0x444>
 801549c:	ed9f 0b94 	vldr	d0, [pc, #592]	@ 80156f0 <__ieee754_acos+0x278>
 80154a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80154a4:	4622      	mov	r2, r4
 80154a6:	462b      	mov	r3, r5
 80154a8:	4620      	mov	r0, r4
 80154aa:	4629      	mov	r1, r5
 80154ac:	f7ea fec4 	bl	8000238 <__aeabi_dsub>
 80154b0:	4602      	mov	r2, r0
 80154b2:	460b      	mov	r3, r1
 80154b4:	f7eb f9a2 	bl	80007fc <__aeabi_ddiv>
 80154b8:	ec41 0b10 	vmov	d0, r0, r1
 80154bc:	e7f0      	b.n	80154a0 <__ieee754_acos+0x28>
 80154be:	49a9      	ldr	r1, [pc, #676]	@ (8015764 <__ieee754_acos+0x2ec>)
 80154c0:	428b      	cmp	r3, r1
 80154c2:	f200 8085 	bhi.w	80155d0 <__ieee754_acos+0x158>
 80154c6:	4aa8      	ldr	r2, [pc, #672]	@ (8015768 <__ieee754_acos+0x2f0>)
 80154c8:	4293      	cmp	r3, r2
 80154ca:	f240 81fa 	bls.w	80158c2 <__ieee754_acos+0x44a>
 80154ce:	4622      	mov	r2, r4
 80154d0:	462b      	mov	r3, r5
 80154d2:	4620      	mov	r0, r4
 80154d4:	4629      	mov	r1, r5
 80154d6:	f7eb f867 	bl	80005a8 <__aeabi_dmul>
 80154da:	a387      	add	r3, pc, #540	@ (adr r3, 80156f8 <__ieee754_acos+0x280>)
 80154dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80154e0:	4606      	mov	r6, r0
 80154e2:	460f      	mov	r7, r1
 80154e4:	f7eb f860 	bl	80005a8 <__aeabi_dmul>
 80154e8:	a385      	add	r3, pc, #532	@ (adr r3, 8015700 <__ieee754_acos+0x288>)
 80154ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80154ee:	f7ea fea5 	bl	800023c <__adddf3>
 80154f2:	4632      	mov	r2, r6
 80154f4:	463b      	mov	r3, r7
 80154f6:	f7eb f857 	bl	80005a8 <__aeabi_dmul>
 80154fa:	a383      	add	r3, pc, #524	@ (adr r3, 8015708 <__ieee754_acos+0x290>)
 80154fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015500:	f7ea fe9a 	bl	8000238 <__aeabi_dsub>
 8015504:	4632      	mov	r2, r6
 8015506:	463b      	mov	r3, r7
 8015508:	f7eb f84e 	bl	80005a8 <__aeabi_dmul>
 801550c:	a380      	add	r3, pc, #512	@ (adr r3, 8015710 <__ieee754_acos+0x298>)
 801550e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015512:	f7ea fe93 	bl	800023c <__adddf3>
 8015516:	4632      	mov	r2, r6
 8015518:	463b      	mov	r3, r7
 801551a:	f7eb f845 	bl	80005a8 <__aeabi_dmul>
 801551e:	a37e      	add	r3, pc, #504	@ (adr r3, 8015718 <__ieee754_acos+0x2a0>)
 8015520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015524:	f7ea fe88 	bl	8000238 <__aeabi_dsub>
 8015528:	4632      	mov	r2, r6
 801552a:	463b      	mov	r3, r7
 801552c:	f7eb f83c 	bl	80005a8 <__aeabi_dmul>
 8015530:	a37b      	add	r3, pc, #492	@ (adr r3, 8015720 <__ieee754_acos+0x2a8>)
 8015532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015536:	f7ea fe81 	bl	800023c <__adddf3>
 801553a:	4632      	mov	r2, r6
 801553c:	463b      	mov	r3, r7
 801553e:	f7eb f833 	bl	80005a8 <__aeabi_dmul>
 8015542:	a379      	add	r3, pc, #484	@ (adr r3, 8015728 <__ieee754_acos+0x2b0>)
 8015544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015548:	4680      	mov	r8, r0
 801554a:	4689      	mov	r9, r1
 801554c:	4630      	mov	r0, r6
 801554e:	4639      	mov	r1, r7
 8015550:	f7eb f82a 	bl	80005a8 <__aeabi_dmul>
 8015554:	a376      	add	r3, pc, #472	@ (adr r3, 8015730 <__ieee754_acos+0x2b8>)
 8015556:	e9d3 2300 	ldrd	r2, r3, [r3]
 801555a:	f7ea fe6d 	bl	8000238 <__aeabi_dsub>
 801555e:	4632      	mov	r2, r6
 8015560:	463b      	mov	r3, r7
 8015562:	f7eb f821 	bl	80005a8 <__aeabi_dmul>
 8015566:	a374      	add	r3, pc, #464	@ (adr r3, 8015738 <__ieee754_acos+0x2c0>)
 8015568:	e9d3 2300 	ldrd	r2, r3, [r3]
 801556c:	f7ea fe66 	bl	800023c <__adddf3>
 8015570:	4632      	mov	r2, r6
 8015572:	463b      	mov	r3, r7
 8015574:	f7eb f818 	bl	80005a8 <__aeabi_dmul>
 8015578:	a371      	add	r3, pc, #452	@ (adr r3, 8015740 <__ieee754_acos+0x2c8>)
 801557a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801557e:	f7ea fe5b 	bl	8000238 <__aeabi_dsub>
 8015582:	4632      	mov	r2, r6
 8015584:	463b      	mov	r3, r7
 8015586:	f7eb f80f 	bl	80005a8 <__aeabi_dmul>
 801558a:	4b78      	ldr	r3, [pc, #480]	@ (801576c <__ieee754_acos+0x2f4>)
 801558c:	2200      	movs	r2, #0
 801558e:	f7ea fe55 	bl	800023c <__adddf3>
 8015592:	4602      	mov	r2, r0
 8015594:	460b      	mov	r3, r1
 8015596:	4640      	mov	r0, r8
 8015598:	4649      	mov	r1, r9
 801559a:	f7eb f92f 	bl	80007fc <__aeabi_ddiv>
 801559e:	4622      	mov	r2, r4
 80155a0:	462b      	mov	r3, r5
 80155a2:	f7eb f801 	bl	80005a8 <__aeabi_dmul>
 80155a6:	4602      	mov	r2, r0
 80155a8:	460b      	mov	r3, r1
 80155aa:	a167      	add	r1, pc, #412	@ (adr r1, 8015748 <__ieee754_acos+0x2d0>)
 80155ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 80155b0:	f7ea fe42 	bl	8000238 <__aeabi_dsub>
 80155b4:	4602      	mov	r2, r0
 80155b6:	460b      	mov	r3, r1
 80155b8:	4620      	mov	r0, r4
 80155ba:	4629      	mov	r1, r5
 80155bc:	f7ea fe3c 	bl	8000238 <__aeabi_dsub>
 80155c0:	4602      	mov	r2, r0
 80155c2:	460b      	mov	r3, r1
 80155c4:	a162      	add	r1, pc, #392	@ (adr r1, 8015750 <__ieee754_acos+0x2d8>)
 80155c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80155ca:	f7ea fe35 	bl	8000238 <__aeabi_dsub>
 80155ce:	e773      	b.n	80154b8 <__ieee754_acos+0x40>
 80155d0:	2d00      	cmp	r5, #0
 80155d2:	f280 80cf 	bge.w	8015774 <__ieee754_acos+0x2fc>
 80155d6:	4b65      	ldr	r3, [pc, #404]	@ (801576c <__ieee754_acos+0x2f4>)
 80155d8:	2200      	movs	r2, #0
 80155da:	4620      	mov	r0, r4
 80155dc:	4629      	mov	r1, r5
 80155de:	f7ea fe2d 	bl	800023c <__adddf3>
 80155e2:	4b63      	ldr	r3, [pc, #396]	@ (8015770 <__ieee754_acos+0x2f8>)
 80155e4:	2200      	movs	r2, #0
 80155e6:	f7ea ffdf 	bl	80005a8 <__aeabi_dmul>
 80155ea:	a343      	add	r3, pc, #268	@ (adr r3, 80156f8 <__ieee754_acos+0x280>)
 80155ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80155f0:	4604      	mov	r4, r0
 80155f2:	460d      	mov	r5, r1
 80155f4:	f7ea ffd8 	bl	80005a8 <__aeabi_dmul>
 80155f8:	a341      	add	r3, pc, #260	@ (adr r3, 8015700 <__ieee754_acos+0x288>)
 80155fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80155fe:	f7ea fe1d 	bl	800023c <__adddf3>
 8015602:	4622      	mov	r2, r4
 8015604:	462b      	mov	r3, r5
 8015606:	f7ea ffcf 	bl	80005a8 <__aeabi_dmul>
 801560a:	a33f      	add	r3, pc, #252	@ (adr r3, 8015708 <__ieee754_acos+0x290>)
 801560c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015610:	f7ea fe12 	bl	8000238 <__aeabi_dsub>
 8015614:	4622      	mov	r2, r4
 8015616:	462b      	mov	r3, r5
 8015618:	f7ea ffc6 	bl	80005a8 <__aeabi_dmul>
 801561c:	a33c      	add	r3, pc, #240	@ (adr r3, 8015710 <__ieee754_acos+0x298>)
 801561e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015622:	f7ea fe0b 	bl	800023c <__adddf3>
 8015626:	4622      	mov	r2, r4
 8015628:	462b      	mov	r3, r5
 801562a:	f7ea ffbd 	bl	80005a8 <__aeabi_dmul>
 801562e:	a33a      	add	r3, pc, #232	@ (adr r3, 8015718 <__ieee754_acos+0x2a0>)
 8015630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015634:	f7ea fe00 	bl	8000238 <__aeabi_dsub>
 8015638:	4622      	mov	r2, r4
 801563a:	462b      	mov	r3, r5
 801563c:	f7ea ffb4 	bl	80005a8 <__aeabi_dmul>
 8015640:	a337      	add	r3, pc, #220	@ (adr r3, 8015720 <__ieee754_acos+0x2a8>)
 8015642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015646:	f7ea fdf9 	bl	800023c <__adddf3>
 801564a:	4622      	mov	r2, r4
 801564c:	462b      	mov	r3, r5
 801564e:	f7ea ffab 	bl	80005a8 <__aeabi_dmul>
 8015652:	a335      	add	r3, pc, #212	@ (adr r3, 8015728 <__ieee754_acos+0x2b0>)
 8015654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015658:	4606      	mov	r6, r0
 801565a:	460f      	mov	r7, r1
 801565c:	4620      	mov	r0, r4
 801565e:	4629      	mov	r1, r5
 8015660:	f7ea ffa2 	bl	80005a8 <__aeabi_dmul>
 8015664:	a332      	add	r3, pc, #200	@ (adr r3, 8015730 <__ieee754_acos+0x2b8>)
 8015666:	e9d3 2300 	ldrd	r2, r3, [r3]
 801566a:	f7ea fde5 	bl	8000238 <__aeabi_dsub>
 801566e:	4622      	mov	r2, r4
 8015670:	462b      	mov	r3, r5
 8015672:	f7ea ff99 	bl	80005a8 <__aeabi_dmul>
 8015676:	a330      	add	r3, pc, #192	@ (adr r3, 8015738 <__ieee754_acos+0x2c0>)
 8015678:	e9d3 2300 	ldrd	r2, r3, [r3]
 801567c:	f7ea fdde 	bl	800023c <__adddf3>
 8015680:	4622      	mov	r2, r4
 8015682:	462b      	mov	r3, r5
 8015684:	f7ea ff90 	bl	80005a8 <__aeabi_dmul>
 8015688:	a32d      	add	r3, pc, #180	@ (adr r3, 8015740 <__ieee754_acos+0x2c8>)
 801568a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801568e:	f7ea fdd3 	bl	8000238 <__aeabi_dsub>
 8015692:	4622      	mov	r2, r4
 8015694:	462b      	mov	r3, r5
 8015696:	f7ea ff87 	bl	80005a8 <__aeabi_dmul>
 801569a:	4b34      	ldr	r3, [pc, #208]	@ (801576c <__ieee754_acos+0x2f4>)
 801569c:	2200      	movs	r2, #0
 801569e:	f7ea fdcd 	bl	800023c <__adddf3>
 80156a2:	ec45 4b10 	vmov	d0, r4, r5
 80156a6:	4680      	mov	r8, r0
 80156a8:	4689      	mov	r9, r1
 80156aa:	f000 f9bf 	bl	8015a2c <__ieee754_sqrt>
 80156ae:	ec55 4b10 	vmov	r4, r5, d0
 80156b2:	4642      	mov	r2, r8
 80156b4:	464b      	mov	r3, r9
 80156b6:	4630      	mov	r0, r6
 80156b8:	4639      	mov	r1, r7
 80156ba:	f7eb f89f 	bl	80007fc <__aeabi_ddiv>
 80156be:	4622      	mov	r2, r4
 80156c0:	462b      	mov	r3, r5
 80156c2:	f7ea ff71 	bl	80005a8 <__aeabi_dmul>
 80156c6:	a320      	add	r3, pc, #128	@ (adr r3, 8015748 <__ieee754_acos+0x2d0>)
 80156c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80156cc:	f7ea fdb4 	bl	8000238 <__aeabi_dsub>
 80156d0:	4622      	mov	r2, r4
 80156d2:	462b      	mov	r3, r5
 80156d4:	f7ea fdb2 	bl	800023c <__adddf3>
 80156d8:	4602      	mov	r2, r0
 80156da:	460b      	mov	r3, r1
 80156dc:	f7ea fdae 	bl	800023c <__adddf3>
 80156e0:	4602      	mov	r2, r0
 80156e2:	460b      	mov	r3, r1
 80156e4:	a11c      	add	r1, pc, #112	@ (adr r1, 8015758 <__ieee754_acos+0x2e0>)
 80156e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80156ea:	e76e      	b.n	80155ca <__ieee754_acos+0x152>
 80156ec:	f3af 8000 	nop.w
	...
 80156f8:	0dfdf709 	.word	0x0dfdf709
 80156fc:	3f023de1 	.word	0x3f023de1
 8015700:	7501b288 	.word	0x7501b288
 8015704:	3f49efe0 	.word	0x3f49efe0
 8015708:	b5688f3b 	.word	0xb5688f3b
 801570c:	3fa48228 	.word	0x3fa48228
 8015710:	0e884455 	.word	0x0e884455
 8015714:	3fc9c155 	.word	0x3fc9c155
 8015718:	03eb6f7d 	.word	0x03eb6f7d
 801571c:	3fd4d612 	.word	0x3fd4d612
 8015720:	55555555 	.word	0x55555555
 8015724:	3fc55555 	.word	0x3fc55555
 8015728:	b12e9282 	.word	0xb12e9282
 801572c:	3fb3b8c5 	.word	0x3fb3b8c5
 8015730:	1b8d0159 	.word	0x1b8d0159
 8015734:	3fe6066c 	.word	0x3fe6066c
 8015738:	9c598ac8 	.word	0x9c598ac8
 801573c:	40002ae5 	.word	0x40002ae5
 8015740:	1c8a2d4b 	.word	0x1c8a2d4b
 8015744:	40033a27 	.word	0x40033a27
 8015748:	33145c07 	.word	0x33145c07
 801574c:	3c91a626 	.word	0x3c91a626
 8015750:	54442d18 	.word	0x54442d18
 8015754:	3ff921fb 	.word	0x3ff921fb
 8015758:	54442d18 	.word	0x54442d18
 801575c:	400921fb 	.word	0x400921fb
 8015760:	3fefffff 	.word	0x3fefffff
 8015764:	3fdfffff 	.word	0x3fdfffff
 8015768:	3c600000 	.word	0x3c600000
 801576c:	3ff00000 	.word	0x3ff00000
 8015770:	3fe00000 	.word	0x3fe00000
 8015774:	4622      	mov	r2, r4
 8015776:	462b      	mov	r3, r5
 8015778:	496b      	ldr	r1, [pc, #428]	@ (8015928 <__ieee754_acos+0x4b0>)
 801577a:	2000      	movs	r0, #0
 801577c:	f7ea fd5c 	bl	8000238 <__aeabi_dsub>
 8015780:	4b6a      	ldr	r3, [pc, #424]	@ (801592c <__ieee754_acos+0x4b4>)
 8015782:	2200      	movs	r2, #0
 8015784:	f7ea ff10 	bl	80005a8 <__aeabi_dmul>
 8015788:	4604      	mov	r4, r0
 801578a:	460d      	mov	r5, r1
 801578c:	ec45 4b10 	vmov	d0, r4, r5
 8015790:	f000 f94c 	bl	8015a2c <__ieee754_sqrt>
 8015794:	a34c      	add	r3, pc, #304	@ (adr r3, 80158c8 <__ieee754_acos+0x450>)
 8015796:	e9d3 2300 	ldrd	r2, r3, [r3]
 801579a:	4620      	mov	r0, r4
 801579c:	4629      	mov	r1, r5
 801579e:	ec59 8b10 	vmov	r8, r9, d0
 80157a2:	f7ea ff01 	bl	80005a8 <__aeabi_dmul>
 80157a6:	a34a      	add	r3, pc, #296	@ (adr r3, 80158d0 <__ieee754_acos+0x458>)
 80157a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80157ac:	f7ea fd46 	bl	800023c <__adddf3>
 80157b0:	4622      	mov	r2, r4
 80157b2:	462b      	mov	r3, r5
 80157b4:	f7ea fef8 	bl	80005a8 <__aeabi_dmul>
 80157b8:	a347      	add	r3, pc, #284	@ (adr r3, 80158d8 <__ieee754_acos+0x460>)
 80157ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80157be:	f7ea fd3b 	bl	8000238 <__aeabi_dsub>
 80157c2:	4622      	mov	r2, r4
 80157c4:	462b      	mov	r3, r5
 80157c6:	f7ea feef 	bl	80005a8 <__aeabi_dmul>
 80157ca:	a345      	add	r3, pc, #276	@ (adr r3, 80158e0 <__ieee754_acos+0x468>)
 80157cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80157d0:	f7ea fd34 	bl	800023c <__adddf3>
 80157d4:	4622      	mov	r2, r4
 80157d6:	462b      	mov	r3, r5
 80157d8:	f7ea fee6 	bl	80005a8 <__aeabi_dmul>
 80157dc:	a342      	add	r3, pc, #264	@ (adr r3, 80158e8 <__ieee754_acos+0x470>)
 80157de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80157e2:	f7ea fd29 	bl	8000238 <__aeabi_dsub>
 80157e6:	4622      	mov	r2, r4
 80157e8:	462b      	mov	r3, r5
 80157ea:	f7ea fedd 	bl	80005a8 <__aeabi_dmul>
 80157ee:	a340      	add	r3, pc, #256	@ (adr r3, 80158f0 <__ieee754_acos+0x478>)
 80157f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80157f4:	f7ea fd22 	bl	800023c <__adddf3>
 80157f8:	4622      	mov	r2, r4
 80157fa:	462b      	mov	r3, r5
 80157fc:	f7ea fed4 	bl	80005a8 <__aeabi_dmul>
 8015800:	a33d      	add	r3, pc, #244	@ (adr r3, 80158f8 <__ieee754_acos+0x480>)
 8015802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015806:	4682      	mov	sl, r0
 8015808:	468b      	mov	fp, r1
 801580a:	4620      	mov	r0, r4
 801580c:	4629      	mov	r1, r5
 801580e:	f7ea fecb 	bl	80005a8 <__aeabi_dmul>
 8015812:	a33b      	add	r3, pc, #236	@ (adr r3, 8015900 <__ieee754_acos+0x488>)
 8015814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015818:	f7ea fd0e 	bl	8000238 <__aeabi_dsub>
 801581c:	4622      	mov	r2, r4
 801581e:	462b      	mov	r3, r5
 8015820:	f7ea fec2 	bl	80005a8 <__aeabi_dmul>
 8015824:	a338      	add	r3, pc, #224	@ (adr r3, 8015908 <__ieee754_acos+0x490>)
 8015826:	e9d3 2300 	ldrd	r2, r3, [r3]
 801582a:	f7ea fd07 	bl	800023c <__adddf3>
 801582e:	4622      	mov	r2, r4
 8015830:	462b      	mov	r3, r5
 8015832:	f7ea feb9 	bl	80005a8 <__aeabi_dmul>
 8015836:	a336      	add	r3, pc, #216	@ (adr r3, 8015910 <__ieee754_acos+0x498>)
 8015838:	e9d3 2300 	ldrd	r2, r3, [r3]
 801583c:	f7ea fcfc 	bl	8000238 <__aeabi_dsub>
 8015840:	4622      	mov	r2, r4
 8015842:	462b      	mov	r3, r5
 8015844:	f7ea feb0 	bl	80005a8 <__aeabi_dmul>
 8015848:	4b37      	ldr	r3, [pc, #220]	@ (8015928 <__ieee754_acos+0x4b0>)
 801584a:	2200      	movs	r2, #0
 801584c:	f7ea fcf6 	bl	800023c <__adddf3>
 8015850:	4602      	mov	r2, r0
 8015852:	460b      	mov	r3, r1
 8015854:	4650      	mov	r0, sl
 8015856:	4659      	mov	r1, fp
 8015858:	f7ea ffd0 	bl	80007fc <__aeabi_ddiv>
 801585c:	4642      	mov	r2, r8
 801585e:	464b      	mov	r3, r9
 8015860:	f7ea fea2 	bl	80005a8 <__aeabi_dmul>
 8015864:	2600      	movs	r6, #0
 8015866:	4682      	mov	sl, r0
 8015868:	468b      	mov	fp, r1
 801586a:	4632      	mov	r2, r6
 801586c:	464b      	mov	r3, r9
 801586e:	4630      	mov	r0, r6
 8015870:	4649      	mov	r1, r9
 8015872:	f7ea fe99 	bl	80005a8 <__aeabi_dmul>
 8015876:	4602      	mov	r2, r0
 8015878:	460b      	mov	r3, r1
 801587a:	4620      	mov	r0, r4
 801587c:	4629      	mov	r1, r5
 801587e:	f7ea fcdb 	bl	8000238 <__aeabi_dsub>
 8015882:	4632      	mov	r2, r6
 8015884:	4604      	mov	r4, r0
 8015886:	460d      	mov	r5, r1
 8015888:	464b      	mov	r3, r9
 801588a:	4640      	mov	r0, r8
 801588c:	4649      	mov	r1, r9
 801588e:	f7ea fcd5 	bl	800023c <__adddf3>
 8015892:	4602      	mov	r2, r0
 8015894:	460b      	mov	r3, r1
 8015896:	4620      	mov	r0, r4
 8015898:	4629      	mov	r1, r5
 801589a:	f7ea ffaf 	bl	80007fc <__aeabi_ddiv>
 801589e:	4602      	mov	r2, r0
 80158a0:	460b      	mov	r3, r1
 80158a2:	4650      	mov	r0, sl
 80158a4:	4659      	mov	r1, fp
 80158a6:	f7ea fcc9 	bl	800023c <__adddf3>
 80158aa:	4632      	mov	r2, r6
 80158ac:	464b      	mov	r3, r9
 80158ae:	f7ea fcc5 	bl	800023c <__adddf3>
 80158b2:	4602      	mov	r2, r0
 80158b4:	460b      	mov	r3, r1
 80158b6:	f7ea fcc1 	bl	800023c <__adddf3>
 80158ba:	e5fd      	b.n	80154b8 <__ieee754_acos+0x40>
 80158bc:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 8015918 <__ieee754_acos+0x4a0>
 80158c0:	e5ee      	b.n	80154a0 <__ieee754_acos+0x28>
 80158c2:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 8015920 <__ieee754_acos+0x4a8>
 80158c6:	e5eb      	b.n	80154a0 <__ieee754_acos+0x28>
 80158c8:	0dfdf709 	.word	0x0dfdf709
 80158cc:	3f023de1 	.word	0x3f023de1
 80158d0:	7501b288 	.word	0x7501b288
 80158d4:	3f49efe0 	.word	0x3f49efe0
 80158d8:	b5688f3b 	.word	0xb5688f3b
 80158dc:	3fa48228 	.word	0x3fa48228
 80158e0:	0e884455 	.word	0x0e884455
 80158e4:	3fc9c155 	.word	0x3fc9c155
 80158e8:	03eb6f7d 	.word	0x03eb6f7d
 80158ec:	3fd4d612 	.word	0x3fd4d612
 80158f0:	55555555 	.word	0x55555555
 80158f4:	3fc55555 	.word	0x3fc55555
 80158f8:	b12e9282 	.word	0xb12e9282
 80158fc:	3fb3b8c5 	.word	0x3fb3b8c5
 8015900:	1b8d0159 	.word	0x1b8d0159
 8015904:	3fe6066c 	.word	0x3fe6066c
 8015908:	9c598ac8 	.word	0x9c598ac8
 801590c:	40002ae5 	.word	0x40002ae5
 8015910:	1c8a2d4b 	.word	0x1c8a2d4b
 8015914:	40033a27 	.word	0x40033a27
 8015918:	54442d18 	.word	0x54442d18
 801591c:	400921fb 	.word	0x400921fb
 8015920:	54442d18 	.word	0x54442d18
 8015924:	3ff921fb 	.word	0x3ff921fb
 8015928:	3ff00000 	.word	0x3ff00000
 801592c:	3fe00000 	.word	0x3fe00000

08015930 <scalbn>:
 8015930:	b570      	push	{r4, r5, r6, lr}
 8015932:	ec55 4b10 	vmov	r4, r5, d0
 8015936:	f3c5 510a 	ubfx	r1, r5, #20, #11
 801593a:	4606      	mov	r6, r0
 801593c:	462b      	mov	r3, r5
 801593e:	b991      	cbnz	r1, 8015966 <scalbn+0x36>
 8015940:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8015944:	4323      	orrs	r3, r4
 8015946:	d03d      	beq.n	80159c4 <scalbn+0x94>
 8015948:	4b35      	ldr	r3, [pc, #212]	@ (8015a20 <scalbn+0xf0>)
 801594a:	4620      	mov	r0, r4
 801594c:	4629      	mov	r1, r5
 801594e:	2200      	movs	r2, #0
 8015950:	f7ea fe2a 	bl	80005a8 <__aeabi_dmul>
 8015954:	4b33      	ldr	r3, [pc, #204]	@ (8015a24 <scalbn+0xf4>)
 8015956:	429e      	cmp	r6, r3
 8015958:	4604      	mov	r4, r0
 801595a:	460d      	mov	r5, r1
 801595c:	da0f      	bge.n	801597e <scalbn+0x4e>
 801595e:	a328      	add	r3, pc, #160	@ (adr r3, 8015a00 <scalbn+0xd0>)
 8015960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015964:	e01e      	b.n	80159a4 <scalbn+0x74>
 8015966:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 801596a:	4291      	cmp	r1, r2
 801596c:	d10b      	bne.n	8015986 <scalbn+0x56>
 801596e:	4622      	mov	r2, r4
 8015970:	4620      	mov	r0, r4
 8015972:	4629      	mov	r1, r5
 8015974:	f7ea fc62 	bl	800023c <__adddf3>
 8015978:	4604      	mov	r4, r0
 801597a:	460d      	mov	r5, r1
 801597c:	e022      	b.n	80159c4 <scalbn+0x94>
 801597e:	460b      	mov	r3, r1
 8015980:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8015984:	3936      	subs	r1, #54	@ 0x36
 8015986:	f24c 3250 	movw	r2, #50000	@ 0xc350
 801598a:	4296      	cmp	r6, r2
 801598c:	dd0d      	ble.n	80159aa <scalbn+0x7a>
 801598e:	2d00      	cmp	r5, #0
 8015990:	a11d      	add	r1, pc, #116	@ (adr r1, 8015a08 <scalbn+0xd8>)
 8015992:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015996:	da02      	bge.n	801599e <scalbn+0x6e>
 8015998:	a11d      	add	r1, pc, #116	@ (adr r1, 8015a10 <scalbn+0xe0>)
 801599a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801599e:	a31a      	add	r3, pc, #104	@ (adr r3, 8015a08 <scalbn+0xd8>)
 80159a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80159a4:	f7ea fe00 	bl	80005a8 <__aeabi_dmul>
 80159a8:	e7e6      	b.n	8015978 <scalbn+0x48>
 80159aa:	1872      	adds	r2, r6, r1
 80159ac:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 80159b0:	428a      	cmp	r2, r1
 80159b2:	dcec      	bgt.n	801598e <scalbn+0x5e>
 80159b4:	2a00      	cmp	r2, #0
 80159b6:	dd08      	ble.n	80159ca <scalbn+0x9a>
 80159b8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80159bc:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80159c0:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80159c4:	ec45 4b10 	vmov	d0, r4, r5
 80159c8:	bd70      	pop	{r4, r5, r6, pc}
 80159ca:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 80159ce:	da08      	bge.n	80159e2 <scalbn+0xb2>
 80159d0:	2d00      	cmp	r5, #0
 80159d2:	a10b      	add	r1, pc, #44	@ (adr r1, 8015a00 <scalbn+0xd0>)
 80159d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80159d8:	dac1      	bge.n	801595e <scalbn+0x2e>
 80159da:	a10f      	add	r1, pc, #60	@ (adr r1, 8015a18 <scalbn+0xe8>)
 80159dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80159e0:	e7bd      	b.n	801595e <scalbn+0x2e>
 80159e2:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80159e6:	3236      	adds	r2, #54	@ 0x36
 80159e8:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80159ec:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80159f0:	4620      	mov	r0, r4
 80159f2:	4b0d      	ldr	r3, [pc, #52]	@ (8015a28 <scalbn+0xf8>)
 80159f4:	4629      	mov	r1, r5
 80159f6:	2200      	movs	r2, #0
 80159f8:	e7d4      	b.n	80159a4 <scalbn+0x74>
 80159fa:	bf00      	nop
 80159fc:	f3af 8000 	nop.w
 8015a00:	c2f8f359 	.word	0xc2f8f359
 8015a04:	01a56e1f 	.word	0x01a56e1f
 8015a08:	8800759c 	.word	0x8800759c
 8015a0c:	7e37e43c 	.word	0x7e37e43c
 8015a10:	8800759c 	.word	0x8800759c
 8015a14:	fe37e43c 	.word	0xfe37e43c
 8015a18:	c2f8f359 	.word	0xc2f8f359
 8015a1c:	81a56e1f 	.word	0x81a56e1f
 8015a20:	43500000 	.word	0x43500000
 8015a24:	ffff3cb0 	.word	0xffff3cb0
 8015a28:	3c900000 	.word	0x3c900000

08015a2c <__ieee754_sqrt>:
 8015a2c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015a30:	4a68      	ldr	r2, [pc, #416]	@ (8015bd4 <__ieee754_sqrt+0x1a8>)
 8015a32:	ec55 4b10 	vmov	r4, r5, d0
 8015a36:	43aa      	bics	r2, r5
 8015a38:	462b      	mov	r3, r5
 8015a3a:	4621      	mov	r1, r4
 8015a3c:	d110      	bne.n	8015a60 <__ieee754_sqrt+0x34>
 8015a3e:	4622      	mov	r2, r4
 8015a40:	4620      	mov	r0, r4
 8015a42:	4629      	mov	r1, r5
 8015a44:	f7ea fdb0 	bl	80005a8 <__aeabi_dmul>
 8015a48:	4602      	mov	r2, r0
 8015a4a:	460b      	mov	r3, r1
 8015a4c:	4620      	mov	r0, r4
 8015a4e:	4629      	mov	r1, r5
 8015a50:	f7ea fbf4 	bl	800023c <__adddf3>
 8015a54:	4604      	mov	r4, r0
 8015a56:	460d      	mov	r5, r1
 8015a58:	ec45 4b10 	vmov	d0, r4, r5
 8015a5c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015a60:	2d00      	cmp	r5, #0
 8015a62:	dc0e      	bgt.n	8015a82 <__ieee754_sqrt+0x56>
 8015a64:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8015a68:	4322      	orrs	r2, r4
 8015a6a:	d0f5      	beq.n	8015a58 <__ieee754_sqrt+0x2c>
 8015a6c:	b19d      	cbz	r5, 8015a96 <__ieee754_sqrt+0x6a>
 8015a6e:	4622      	mov	r2, r4
 8015a70:	4620      	mov	r0, r4
 8015a72:	4629      	mov	r1, r5
 8015a74:	f7ea fbe0 	bl	8000238 <__aeabi_dsub>
 8015a78:	4602      	mov	r2, r0
 8015a7a:	460b      	mov	r3, r1
 8015a7c:	f7ea febe 	bl	80007fc <__aeabi_ddiv>
 8015a80:	e7e8      	b.n	8015a54 <__ieee754_sqrt+0x28>
 8015a82:	152a      	asrs	r2, r5, #20
 8015a84:	d115      	bne.n	8015ab2 <__ieee754_sqrt+0x86>
 8015a86:	2000      	movs	r0, #0
 8015a88:	e009      	b.n	8015a9e <__ieee754_sqrt+0x72>
 8015a8a:	0acb      	lsrs	r3, r1, #11
 8015a8c:	3a15      	subs	r2, #21
 8015a8e:	0549      	lsls	r1, r1, #21
 8015a90:	2b00      	cmp	r3, #0
 8015a92:	d0fa      	beq.n	8015a8a <__ieee754_sqrt+0x5e>
 8015a94:	e7f7      	b.n	8015a86 <__ieee754_sqrt+0x5a>
 8015a96:	462a      	mov	r2, r5
 8015a98:	e7fa      	b.n	8015a90 <__ieee754_sqrt+0x64>
 8015a9a:	005b      	lsls	r3, r3, #1
 8015a9c:	3001      	adds	r0, #1
 8015a9e:	02dc      	lsls	r4, r3, #11
 8015aa0:	d5fb      	bpl.n	8015a9a <__ieee754_sqrt+0x6e>
 8015aa2:	1e44      	subs	r4, r0, #1
 8015aa4:	1b12      	subs	r2, r2, r4
 8015aa6:	f1c0 0420 	rsb	r4, r0, #32
 8015aaa:	fa21 f404 	lsr.w	r4, r1, r4
 8015aae:	4323      	orrs	r3, r4
 8015ab0:	4081      	lsls	r1, r0
 8015ab2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8015ab6:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8015aba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8015abe:	07d2      	lsls	r2, r2, #31
 8015ac0:	bf5c      	itt	pl
 8015ac2:	005b      	lslpl	r3, r3, #1
 8015ac4:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8015ac8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8015acc:	bf58      	it	pl
 8015ace:	0049      	lslpl	r1, r1, #1
 8015ad0:	2600      	movs	r6, #0
 8015ad2:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8015ad6:	106d      	asrs	r5, r5, #1
 8015ad8:	0049      	lsls	r1, r1, #1
 8015ada:	2016      	movs	r0, #22
 8015adc:	4632      	mov	r2, r6
 8015ade:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8015ae2:	1917      	adds	r7, r2, r4
 8015ae4:	429f      	cmp	r7, r3
 8015ae6:	bfde      	ittt	le
 8015ae8:	193a      	addle	r2, r7, r4
 8015aea:	1bdb      	suble	r3, r3, r7
 8015aec:	1936      	addle	r6, r6, r4
 8015aee:	0fcf      	lsrs	r7, r1, #31
 8015af0:	3801      	subs	r0, #1
 8015af2:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8015af6:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8015afa:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8015afe:	d1f0      	bne.n	8015ae2 <__ieee754_sqrt+0xb6>
 8015b00:	4604      	mov	r4, r0
 8015b02:	2720      	movs	r7, #32
 8015b04:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8015b08:	429a      	cmp	r2, r3
 8015b0a:	eb00 0e0c 	add.w	lr, r0, ip
 8015b0e:	db02      	blt.n	8015b16 <__ieee754_sqrt+0xea>
 8015b10:	d113      	bne.n	8015b3a <__ieee754_sqrt+0x10e>
 8015b12:	458e      	cmp	lr, r1
 8015b14:	d811      	bhi.n	8015b3a <__ieee754_sqrt+0x10e>
 8015b16:	f1be 0f00 	cmp.w	lr, #0
 8015b1a:	eb0e 000c 	add.w	r0, lr, ip
 8015b1e:	da42      	bge.n	8015ba6 <__ieee754_sqrt+0x17a>
 8015b20:	2800      	cmp	r0, #0
 8015b22:	db40      	blt.n	8015ba6 <__ieee754_sqrt+0x17a>
 8015b24:	f102 0801 	add.w	r8, r2, #1
 8015b28:	1a9b      	subs	r3, r3, r2
 8015b2a:	458e      	cmp	lr, r1
 8015b2c:	bf88      	it	hi
 8015b2e:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8015b32:	eba1 010e 	sub.w	r1, r1, lr
 8015b36:	4464      	add	r4, ip
 8015b38:	4642      	mov	r2, r8
 8015b3a:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8015b3e:	3f01      	subs	r7, #1
 8015b40:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8015b44:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8015b48:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8015b4c:	d1dc      	bne.n	8015b08 <__ieee754_sqrt+0xdc>
 8015b4e:	4319      	orrs	r1, r3
 8015b50:	d01b      	beq.n	8015b8a <__ieee754_sqrt+0x15e>
 8015b52:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8015bd8 <__ieee754_sqrt+0x1ac>
 8015b56:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8015bdc <__ieee754_sqrt+0x1b0>
 8015b5a:	e9da 0100 	ldrd	r0, r1, [sl]
 8015b5e:	e9db 2300 	ldrd	r2, r3, [fp]
 8015b62:	f7ea fb69 	bl	8000238 <__aeabi_dsub>
 8015b66:	e9da 8900 	ldrd	r8, r9, [sl]
 8015b6a:	4602      	mov	r2, r0
 8015b6c:	460b      	mov	r3, r1
 8015b6e:	4640      	mov	r0, r8
 8015b70:	4649      	mov	r1, r9
 8015b72:	f7ea ff95 	bl	8000aa0 <__aeabi_dcmple>
 8015b76:	b140      	cbz	r0, 8015b8a <__ieee754_sqrt+0x15e>
 8015b78:	f1b4 3fff 	cmp.w	r4, #4294967295
 8015b7c:	e9da 0100 	ldrd	r0, r1, [sl]
 8015b80:	e9db 2300 	ldrd	r2, r3, [fp]
 8015b84:	d111      	bne.n	8015baa <__ieee754_sqrt+0x17e>
 8015b86:	3601      	adds	r6, #1
 8015b88:	463c      	mov	r4, r7
 8015b8a:	1072      	asrs	r2, r6, #1
 8015b8c:	0863      	lsrs	r3, r4, #1
 8015b8e:	07f1      	lsls	r1, r6, #31
 8015b90:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8015b94:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8015b98:	bf48      	it	mi
 8015b9a:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8015b9e:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8015ba2:	4618      	mov	r0, r3
 8015ba4:	e756      	b.n	8015a54 <__ieee754_sqrt+0x28>
 8015ba6:	4690      	mov	r8, r2
 8015ba8:	e7be      	b.n	8015b28 <__ieee754_sqrt+0xfc>
 8015baa:	f7ea fb47 	bl	800023c <__adddf3>
 8015bae:	e9da 8900 	ldrd	r8, r9, [sl]
 8015bb2:	4602      	mov	r2, r0
 8015bb4:	460b      	mov	r3, r1
 8015bb6:	4640      	mov	r0, r8
 8015bb8:	4649      	mov	r1, r9
 8015bba:	f7ea ff67 	bl	8000a8c <__aeabi_dcmplt>
 8015bbe:	b120      	cbz	r0, 8015bca <__ieee754_sqrt+0x19e>
 8015bc0:	1ca0      	adds	r0, r4, #2
 8015bc2:	bf08      	it	eq
 8015bc4:	3601      	addeq	r6, #1
 8015bc6:	3402      	adds	r4, #2
 8015bc8:	e7df      	b.n	8015b8a <__ieee754_sqrt+0x15e>
 8015bca:	1c63      	adds	r3, r4, #1
 8015bcc:	f023 0401 	bic.w	r4, r3, #1
 8015bd0:	e7db      	b.n	8015b8a <__ieee754_sqrt+0x15e>
 8015bd2:	bf00      	nop
 8015bd4:	7ff00000 	.word	0x7ff00000
 8015bd8:	20000308 	.word	0x20000308
 8015bdc:	20000300 	.word	0x20000300

08015be0 <_init>:
 8015be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015be2:	bf00      	nop
 8015be4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015be6:	bc08      	pop	{r3}
 8015be8:	469e      	mov	lr, r3
 8015bea:	4770      	bx	lr

08015bec <_fini>:
 8015bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015bee:	bf00      	nop
 8015bf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015bf2:	bc08      	pop	{r3}
 8015bf4:	469e      	mov	lr, r3
 8015bf6:	4770      	bx	lr
